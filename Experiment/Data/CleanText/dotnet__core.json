{
    "richlander": "@sgtfrankieboy Thanks for the change. Haven't been paying enough attention to this repo. Oops.\nThis change wouldn't auto-merge and #4 would, so I took that one. Please consider making another change to another .NET Core repo again. Thanks.\n. Thanks much!\n. LGTM\n. @nattress you going to merge this?\n. @nattress I merged it.\n. LGTM\n. @noahfalk I made some suggestions on fixes.\n. LGTM\n. /cc @leecow \n. /cc @leecow \n. That's an interesting problem.\nOne option is to break into two files:\n- Standard Library\n- Other .NET Core APIs\nWould that help?\n. There are a couple projects to look at:\n- Xamarin.Forms, also raised above.\n- AvaloniaUI\n\nMaybe they don't believe in XAML?\n\nI don't think that this is quite right. There is no xplat Xaml UI stack for those teams to use. As one of the projects above supports both mobile and desktop, then that may change.\nClosing, since the .NET Core team doesn't have any plans for a x-plat XAML UI stack. Best to look at those other projects.\n. Thanks @binki.\n. We have no plans for this and have had very few requests for it. Thanks.. Yes. We would like this, too. We haven't decided on a particular solution for this yet.\n/cc @blackdwarf \n. Sorry ... I'm probably slow. Can you elaborate on your question? I don't quite get the combination of node.js, .NET Core and R together. I'm probably missing something obvious.\n. No current plans for that. Interesting idea, particularly since Revolution Analytics is part of Microsoft. Thanks!. You can file them here.\n. Thanks @zeusro. I cannot tell which distro you are using from your uname command above. Can you share that?\n. @Petermarcu Known issues would appear here: https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.1-release-notes.md. There are not any listed yet.\n/cc @leecow \n. Please re-activate if this is still an issue.. Sure, sure. The focus should be on the Dockerfile. Good?\n. I didn't realize that we had CLI-specific release notes. Some of these are CLI-specific while others are not. I think that most people will expect to find all of this information in the main release notes.\nThere are some minor wording issues that would be good to fix. Here is an example of something that could be worded better: \"Users have reported this being the case.\" We should state what \"the case\" is. Something like the following would be better: \"Users have reported that the dotnet installer does not update the path with the .NET Core install location.\" \n. Love these projects. We don't have any plans to do any work in this space ourselves.. LGTM modulo one piece of feedback.\nThanks!\n. Please re-activate if this is still an issue.. /cc @terrajobst . Please re-activate if this is still an issue.. /cc @blackdwarf . /cc @bleroy would be great to see some samples written for these APIs.. Closing ... See: https://github.com/dotnet/docs/issues/1711. Closing this one. Please move to the latest release: #532.. Please re-activate if this is still the case.. Please re-activate if this is still the case.\n/cc @blackdwarf . Are you asking for a Roslyn-based WSDL generator?\n/cc @danroth27 . This is now stale. Feel free to restart the conversation at dotnet/wcf.. Related to: #388.\nMy team (the Microsoft .NET team) is focused on .NET Core as a cloud and web framework. We know that folks would like us to build additional application types for .NET Core. For now, we're remaining focused. Many other developers want us to stay focused on what we've started with .NET Core and that's our intention.\n\nOr do you plan to bring all the features of .NET Monolith to .NET core and shut it down some time in the future?\n\nNeither. We plan to keep both in place and invest in both. In some cases, there is overlap in scenarios and other cases not. That's part of building something new for .NET developers.. Please re-activate if you would like to discuss further.. We're now encouraging VS 2015 users to move to VS 2017 and are now longer providing much information on 2015 on the core page. I know that this isn't super helpful/satisfying.\nAs a result, closing.. That's quite the write-up! Thanks for taking the time.\nI took away the following:\n\nCross-platform UI stack.\nSupport community projects more.\nSupport other language platforms building on top of CoreCLR.\n\nThese are great suggestions and goals. I met with a big European banking customer yesterday who had some of the same feedback, mostly wanting the UI stack.\nI think that two things are likely to happen, in no particular order:\n\nWe'll get .NET Core to a really great place as a web/server/cloud stack. I suspect that we'll be doing that through .NET Core 2 and 3. After that, we'll likely have time to expand our scope and maybe some of your suggestions will fit into that. We're a ways off even thinking about that plan.\nThe community and other companies will re-purpose .NET Core to do lots of weird and wonderful things. In fact we're seeing that, including some of the projects you mentioned.. Please re-activate if you would like to discuss further.. Related: #409 . We have no plans to make Office COM APIs work on Mac or Linux. If the Office team produces docs on how to do this, we'd be happy to take a look. Closing as a result.. This is our repo, but it has nothing to do with the product. Sorry.. > I may be in fantasy land but if Microsoft could offer some cross platform API (not saying it has to be open source) that we could plug into dotnet core (or maybe a jar for Java) then it allows us to modernize our conversion engine for office documents in a way that makes the most sense.\n\nIt sounds like you are looking for a cross-platform solution for Office document conversion all-up. I'm not on the office team, so I don't know what the options are there. I would suggest looking at the OpenXML SDK: https://msdn.microsoft.com/en-us/library/office/bb448854.aspx. It does seem like .NET Core is not the primary technical issue in your project. Closing under that assumption.. Please re-activate if this is still an issue.. /cc @blackdwarf . Please re-activate if this is still an issue.. Please avoid the word \"glob\". I think that this is a jargon word.. We should put these files lower down than in the root. It's a bit odd, but I'd suggest the 1.0 folder. maybe 1.0/sdk  folder?. Great feedback and I sympathize.\nWe made the decision to keep the .NET Core docs focused on project.json until Visual Studio 2017 ships its final release. The latest release is a release candidate, at the time of writing. Once VS 2017 ships, this situation will be much more straightforward.\nApologies for the confusion and thanks for taking the time to write the issue.. This is a good issue.This is a good 2.0 issue, for easy runtime and sdk installation. Should this issue be ported to the cli repo?\n/cc @blackdwarf . No. I shouldn't have closed this.. /cc @blackdwarf @bleroy . /cc @leecow . Please re-activate if this is still an issue.. Please re-activate if this is still an issue.. @glennc @danroth27 . @am11 have you been able to make these instructions work on the CentOS (non Docker scenario)? Here are instructions: https://www.microsoft.com/net/core#linuxcentos\n/cc @bryanar @MichaelSimons . I think that this could be useful. We made a bunch of changes to our Docker images, for example, and didn't have a good way of doing it. I used this fairly bad technique at Docker Hub.\n\n/cc @terrajobst . I was thinking about that exact question this morning.\nHere are 3 different types of communication that I would like to have:\n\nAnnouncements (I suggest we match what ASP.NET is doing https://github.com/aspnet/Announcements/issues)\nBug reporting (that's what is happening here)\nDesigns (like https://github.com/dotnet/csharplang/issues)\n\nI think they have to be in separate repos to be useful.. /cc @bleroy @blackdwarf . @svick I like your scenario.\nThere are >2k people watch that repo. That's very compelling to me.. We're going to do it. I'll post here when the various repos are up, share the links and then close this issue.. Should the SDK parts be in a separate release note? Meaning, should we have the following, too:\n\nrelease-notes/1.0/sdk-1.0.0.md\nrelease-notes/1.0/sdk-1.0.1.md. We could use the same scheme we do for Docker images, which is \"runtime first\". Maybe that's what we're doing here.. Closing. .NET Core 1.0.5 and 1.1.2 have now shipped.\n\nSee #622 . /cc @leecow . Interesting. I'll ask if they are using a forward link or what. Either way, we'll get a fix in place today.. Fixed by #544 . Should we point to the page that was intended? If they want RC4, then we should give RC4 (right?), which BTW isn't available from the site you linked to.\nhttps://github.com/dotnet/core/blob/master/release-notes/download-archives/rc4-download.md. You should validate that the VS 4 Mac folks are OK with that. \nIn general, I agree. Good point. We should decide on our long-term plan here with the VS 4 Mac folks.\n/cc @mhutch. Happy to take this change. It now has conflicts.. Thanks!. I assume that there were significant changes that are breaking to VS 2015.\nThere should be a help page that specifies how to lock your project back to the preview2 tooling. Where is that @blackdwarf @mairaw ?. > Is it still possible to get it somewhere?\nSorry, I'm slow. What does \"it\" refer to?. @daschult - There isn't such a configuration. We didn't enable the msbuild tools to work with .NET Core. This is documented here: https://blogs.msdn.microsoft.com/dotnet/2017/03/07/announcing-net-core-tools-1-0/. I'm not sure what you are asking for. This works today.\nSee: https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md. Good point. @leecow - can you add the VS 2015 tooling links to the release notes? We should also add a link to the download table on the .NET Core marketing site.\nWe didn't hide the links on purpose - definitely an oversight.\n@xsoul - That can happen. Can you share your project.json file (say in a gist?). You can mail it to dotnet@microsoft.com if it is private. . What would be most useful is seeing the version that has an issue. I suggest you open a separate issue. This is different from the original issue.. We'll add the link back later today and post the URL here.. See: https://www.microsoft.com/net/download/core. I expect more will happen in this space after .NET Core 2.0 ships.\nI'm not seeing anything immediately actionable in this issue. Closing.. Is this still an issue? Do you have any projects you can share?. If you install the latest 1.x SDK, you will get both 1.0.x and 1.1.x runtime versions. We recommend that you use .NET Core 1.1. It will have the same support timeframe as .NET Core 1.0.. Check out the new platform support @ https://blogs.msdn.microsoft.com/dotnet/2017/06/28/announcing-net-core-2-0-preview-2/\nYou should be good now.. Good q! @mairaw, all known issues are recorded in the .NET Core release notes. We shouldn't use the link above for anything anymore.\n@leecow Can you retire the cli known issues page?. Ya. Are all of those known issues captured in our 1.0 preview 2 known issues? We might just copy that whole file beside the 1.0 preview 2 release notes and link from it. yes?. Is this still an issue?. @terrajobst @weshaggard it looks like we still need to do something.. Is this still an issue?. @lianggx can you share a sample?. Your code compiles and runs with .NET Core 2.0 Preview 2.. I just tried this is .NET Core 2.0 Preview 2 and it works like you want.. /cc @livarcocc . Sorry for the delay! I just sent a message to the CRM team.. I'd love to learn a bit more about what you plan to do with .NET Core and CRM. Please (anyone) send mail to rlander@ms. I'm collecting scenarios so that we can have better insight on using these two products together.. See: https://github.com/dotnet/core/pull/727. Can one of you provide specific instructions? I read that the team is stuck moving forward without them.\n@weiwangda2014  @taadis  @WeihanLi . Thanks @mlorbetske!. Closing due to lack of activity. Please try again in aspnet/home as Peter suggests.. Can you share which .NET Core version you were attempting to use?. Does that work for you @fahad198 ?. Your scenario isn't well supported. We didn't have good support for xproj / csproj interop in VS 2015. And we don't support xproj in VS 2017 where the interop between various .NET project types is much better because everything is based on msbuild.\nClosing because this experience isn't going to get better. Best plan is to move to VS 2017 to get the experience I believe you are looking for.. Looks like this release was quite quiet. Closing this issue.. Still occuring?. .NET Core 2.0 doesn't work with 15.2. It requires 15.3 and later. There are two reasons for that:\n\nVS 15.0 (and .1 and .2) was hard-coded to use .NET Core 1.x. VS 15.3 includes an extensibility model for .NET Core so that VS is much more flexible to supporting .NET Core SDK versions (which in turn decides runtime versions).\nMany VS improvements were added to make VS work better for .NET Core. These are more helpful than fully required, but it's also the scenario we tested, so it's important to use 15.3.. Closing this issue given that we've shipped a newer preview. Thanks for all the feedback. \n\nPlease move to .NET Core 2.0 Preview 2 and provide feedback for the new release.. Thanks @bbowyersmyth!. @lilpug can you share your simple example? Something odd is happening. We create projects with dependencies all the time and they work. There must be something unique at play.. I tried this in VS 2017 15.2. I was not able to repo the issue. I've attached my sample:\n aspnetcorewithdependencies.zip\nTell me if you can repro with that or how my sample is different from your case.\n. Our instructions on this are not good. I was able to build CoreCLR on my Pi on raspbian but I sadly wasn't able to produce reliable instructions. I did a bunch of hacking to get it to work and then ran out of time to make the reliable instructions.\nOn a more positive note, we have a much more systematic build project that will be released soon. @ellismg any timeframe on that?\n@ellismg should we delete the linked dotnet-bootstrap project? Or when?. @treeicnliu can you share the before and after of the return value in both cases. \nCan you share how this property is set in both cases? https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient.encoding?view=netcore-2.0#System_Net_WebClient_Encoding. @treeicnliu can you share a repro? I'm not quite sure what to test based on your description.. How is this diff than #672?\nIs this about local resolution and #671 is the specific versions?\nSend me a sample with some notes and I can write this up.. Is this list distro dependent? I assume so.. Ya, I deleted the file on purpose. It wasn't very useful any longer.. Can you share either your Dockerfile or share how you have mounted volumes?. @livarcocc I tried to follow these instructions. I was unable. Can you take a look?\n```console\nC:\\mvcapp>dotnet publish -c release -r linux-arm\nMicrosoft (R) Build Engine version 15.3.388.41745 for .NET Core\nCopyright (C) Microsoft Corporation. All rights reserved.\nmvcapp -> C:\\mvcapp\\bin\\release\\netcoreapp2.0\\linux-arm\\mvcapp.dll\n  Could not find required library hostpolicy.dll in 2 probing paths:\nC:\\Users\\rich\\.nuget\\packages\n\nC:\\Users\\rich\\.dotnet\\NuGetFallbackFolder\n\nA fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\mvcapp\\bin\\release\\netcoreapp2.0\\linux-arm\\'.\nC:\\Users\\rich.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.viewcompilation\\2.0.0-preview2-final\\build\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.Razor.ViewCompilation.targets(27,5): error MSB3073: The command \"dotnet exec --runtimeconfig \"C:\\mvcapp\\bin\\release\\netcoreapp2.0\\linux-arm\\mvcapp.runtimeconfig.json\" --depsfile \"C:\\mvcapp\\bin\\release\\netcoreapp2.0\\linux-arm\\mvcapp.deps.json\" \"C:\\Users\\rich.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.viewcompilation\\2.0.0-preview2-final\\build\\netcoreapp2.0../../lib/netcoreapp2.0/Microsoft.AspNetCore.Mvc.Razor.ViewCompilation.dll\" @\"obj\\release\\netcoreapp2.0\\linux-arm\\microsoft.aspnetcore.mvc.razor.viewcompilation.rsp\"\" exited with code -2147450749. [C:\\mvcapp\\mvcapp.csproj]\nC:\\mvcapp>dotnet --version\n2.0.0-preview2-006497\n```. Does that mean we cannot publish asp.net standalone apps (by default) for linux+arm? Is that the scenario we are discussing here?. Got it. Is this issue written up anywhere (besides here)?. @terrajobst - can you create announcements at dotnet/announcement for the following changes:\n\nThe creation of this NuGet package and the associated scenarios.\nThe removal of NETStandard.Library as NuGet dependencies.\n\nThese are pretty unrelated topics but contribute to the same scenario. I am sure folks would appreciate more info on both. It would then be super easy for @leecow to link to them from relnotes.. Please continue the conversation on the aspnet/home repo if you need more information. Thanks.. Please file a new issue with more info. It is fine to file it here.. I moved the dotnet restore issue to #724. Let's discuss there. . @livarcocc the comment by @rmunn seems like something we should get into preview3 ASAP. Yes?. @mlorbetske I assume @livarcocc is referriung to https://github.com/dotnet/core/issues/711#issuecomment-312776555. Same as https://github.com/dotnet/cli/issues/6286.. Thanks @egilh. I moved your issue to #739. Please mail me at rlander@ms. I some additional questions to ask.. @WillooWisp can you provide more insight into what is happening? Please file a new issue here and include the errors that you are seeing.. I would suggest SlickEdit users reach out to the developers of that product to ask for .NET support. That is even better than me (for example) reaching out. We would be happy to partner with SlickEdit at the point that they want to move forward.\nThe best place for SlickEdit to look is OmniSharp. That is what VS Code uses.. Closing. No specific action for the team to take now. Happy to chat later.. Did this (preview 1) ship already or it is still coming?. Good idea!  Should we do that later this week? Do we need to update Docker images too, or they shouldn't be affected?. Did we add APIs as part of the release? Or is the API diff diff (the diff of the API diff ;)) spurious?. @Petermarcu I was going to make @ https://github.com/NuGet/NuGet.Client but issues are not enabled.. @ctaggart Do you have access to logs for kudo build? If you did, we'd appreciate seeing them to help diagnose the issue. Send to rlander@ms.. Made additional updates per feedback: https://github.com/dotnet/core/commit/40edabb3447490204d79e4bd0a9db09a08d44ae0. On macOS, we only support the latest versions. We consider macOS to be a developer OS and believe that adoption of new apple OSes is very quick. \n@Petermarcu can comment on the Red Hat support.\nThis also sometimes happens because we need to take a dependency on a new API in order to implement a scenario.. @Petermarcu are you specifically referring to the lifecycle policy part?. > Is ASP.NET Core just meant for the public 'cloud', or is it meant to work with the type of OS upgrades that larger enterprises do the way that .NET Framework works?\nASP.NET Core is intended for both cloud and on-prem. \n\nlifecycle\n\nThe main thing we want to avoid is supporting an operating system version that we know will go out of service while a given .NET Core release is in service. For example, if Ubuntu 16.10 will go out of service 12 months into a .NET Core release, we'd rather not support it from the start. We don't want to have to tell customers that we've dropped support for an OS version mid-way through a release of ours.\nIf an OS version for a supported distro will stay in service for our complete release and there is no technical reason why we need to drop support, then we should support it, particularly if customers are asking for it.. In reference to https://github.com/dotnet/core/issues/737#issuecomment-313865619 per @Petermarcu . It does look like a dupe. Closing this one.. Please install Visual Studio 2017 15.3. Link is here: https://blogs.msdn.microsoft.com/dotnet/2017/06/28/announcing-net-core-2-0-preview-2/. Tell me if that doesn't work.. Sure. You can do that, too.. Thoughts @corivera @terrajobst ?. So, can we close this, then?. If this issue is covered in the corefx repo, we can close here.\nFor new product requests, we use the appropriate repo. For bugs, I prefer to keep this bug open for customer tracking even if we create an engineering bug in the appropriate repo. That's the basic model.. We haven't shared the date yet but it is still safely within Q3. We like to be conservative to allow for something going wrong w/o disappointing folks on a promised date.\nIf anyone is trying to coordinate product launches based on our schedule, please reach out to me directly at rlander@ms and we can chat a bit more on the phone.. Each operating system has its own way of doing things. AFAIK, there is nothing like what you want. Each of MSI, PKG and apt-get (for example) are very different from one another. No one set out to make a cross-platform desktop installer easy to build.\nClosing this issue since this is well outside the scope of .NET Core and @Petermarcu has given good guidance.. Like @svick suggests, this doesn't seem specific to .NET Core. Sorry, but you need to figure out what is going on with your machine first and then we can look at specific .NET Core issues. Your situation is much broader.. Are you using Visual Studio 2017 15.3 Preview? \nLink here: https://blogs.msdn.microsoft.com/dotnet/2017/06/28/announcing-net-core-2-0-preview-2/. I'm going to merge this. Servicing builds was outside the scope of what I was after. Let's decide that as a separate thing. I'd probably put that somewhere other than the main README. That's probably a good idea.. It means no more free security or quality updates for that version of the product. The installers will still exist as-is.\nRest assured ... there is no code in the product that says:\ncsharp\nif (!isSupported)\n{\n   throw new OutOfSupportException()\n}\nThis makes no comment about OS support, from Microsoft or otherwise. That's outside our wheelhouse.. Ah, I understand your point now. Sorry I missed it initially.\nThe policy is clear ... that we will only provide free support for \"in support OSes\". \nWhat actually works in practice is something different. As you suggest, if there are a lot of users on a given out-of-support operating system version, we may choose to keep tests in place for an extended period to avoid breaking users. . @jogibear9988 See https://github.com/dotnet/announcements/issues/29.. Please file an issue @ https://github.com/dotnet/source-build if it doesn't work for your case. We're deprecating dotnet.bootstrap.py. \nSee: https://github.com/dotnet/core/pull/1063. I'd suggest running API Port on your codebase so that we can get a better sense of your dependencies. Our API Catalog claims that we have no API Port information for these types.\nI'm assuming that these soap exceptions are produced on the server. Yes? We don't have a SOAP server implementation on .NET Core. What would this code do in absence of that?. I am working on it. I wanted to have this done for release day, but couldn't quite manage it. Definitely agree. Will post here when it is done. It will be more minimal at first and then grow.. We are working on both things still:\n\n.NET Core 2.1 roadmap.\n.NET Core 2.0 LTS.\n\nBoth are coming.. Applied feedback to the intro doc. I'll let others update the advanced doc. When folks are happy with both docs, we can merge.. As an aside, I didn't write these docs, particularly the advanced one. I'm happy to change the authors if the original authors want that.. I have a larger roadmap re-write currently in review. I'll send it to you.. This also occurred to me. I was going back-and-forth on how to present LTS and Current. I don't have a plan yet that I'm fully happy with. That said, this looks fine to me as a first step.\n@leecow?. Good point @bartonjs. So, let's take this PR and then fix the issue.. We are deprecating dotnet.bootstrap.py. Please check out https://github.com/dotnet/source-build\nSee: #1063 . We don't have any plans to provide a PDF library. I'm also not aware of one to recommend. Hopefully the community will work more of PDFSharp.. @galvesribeiro Yes. ILMerge (or something like it, like mkbundle), would be step 2.\nWe will probably build a single file toolchain at some point, but it is a ways off right now.\nAs @Petermarcu suggests, the primary goal is smaller deployments. . LGTM. This can be closed now, right?. Would SourceLink work for you?. Thanks on that @acjh. You can see that I'm living in the past.. Thanks! I made the fix in this commit: https://github.com/dotnet/core/commit/d93d169543032b282cc458c6ec69ee4965f8ea1e. Thanks! I made the fix in this commit: https://github.com/dotnet/core/commit/d93d169543032b282cc458c6ec69ee4965f8ea1e. Thanks!. Thanks! I made the fix in this commit: https://github.com/dotnet/core/commit/d93d169543032b282cc458c6ec69ee4965f8ea1e. Fixed. Thanks!. Thanks! I made this commit in a rush and didn't look at open PRs.\nhttps://github.com/dotnet/core/commit/d93d169543032b282cc458c6ec69ee4965f8ea1e. Any more thoughts / feedback @eaglexiang ?. Can you provide a more specific request? Do you mean APIs like Assembly.LoadFrom?. PTAL @divega. Looks like this is resolved. Thanks.. Looks like this was resolved by #1108. Do you have a minimal repro you can share?. LGTM. Can you elaborate on what you mean by \"core adi 2.0.3\"?. I think that this is specific to the chocolately installer. We don't pre-req any Windows KBs/MSUs. Isn't that right @livarcocc ?. Thanks. Looks like this is resolved.. Can you be more specific about what you would like? Is it fair to say that you want single file EXEs?. We have been discussing single-file EXEs. It's an expensive project for us since we need to include both the runtime and managed code in the single file. With the .NET Framework scenario you mention, only the managed code needs to be included in the file, so that's much simpler.\nSo, we love the direction you are mentioning. We just don't have a specific timeline on it currently. We're looking for more votes on this scenario and some interesting customer scenarios that significantly benefit from this build type.\n/cc @russellhadley . My understanding is that the problem isn't so much the runtime in the file but the managed DLLs. We don't have a way of loading them as a filestream today.\nLove the idea and pragmatism but I don't think it lines up with the currently reality. @russellhadley  can fact check me.. Sent you mail to discuss further.. Thanks for reporting. We'll take a look.. Help me understand ... you say that .NET Core requires 1.4.1 of the OMI library. I don't recall .NET Core having that dependency. Can you elaborate on that?\n/cc @samisms @keikhara. We're working on it. It will be available by Friday noon (Pacific time). Sorry for the inconvenience.\nFYI: We have a release process gap that we are working on \"patching\".. Fixed: https://www.microsoft.com/net/download. Sorry for the delay @qmfrederik. The holidays kicked in.\n\nWhat would be very welcome is to have a reference guide/documentation on how to configure SELinux for (ASP).NET Core - i.e. what exceptions/policies to enable,... .\n\nThat sounds like a good idea. This aligns with where I was wanting to end up. I'm looking for a set of customers to work with to find out which problems folks run into in the field. Our testing is often artificial/synthetic in nature, so doesn't cover the full spectrum of something like SELinux cases. It would be great if you could hook me up with your partner so that I could find out what there challenges and solutions were. I think you already have my email address.. PTAL @glennc . Ah, I see. This is with the ASP.NET Web API (not Core). Yes, that would not work. Does that help, in terms of an explanation, @RajKorimilli ?. I read that there is a problem with your service. An HTTP 500 error is highly suggestive that the focus should be on the service. The act that you can reproduce the same service error outside the website suggests that the issue has nothing to do with website. I'd focus on your service. Have you tried to debug your service to better understand what is causing it to return HTTP 500?. I should have asked earlier ... are you trying to access a 192. IP address in production? If so, that could certainly be the reason why the service call fails.. PTAL @livarcocc @KathleenDollard . PTAL @leecow . PTAL @leecow . PTAL @davidsh . That will be fixed tomorrow. We didn't fully follow our own release process for 2.1.2. As a result, the release notes got missed.. Some Docker repos product a tags-details.md that provide a history of changes. We aspire to that do that, but don't do that yet. This would be useful to determine tags that are still available but are no longer published on our README. For now, you have to guess.  For example, microsoft/dotnet:2.0.0-sdk will likely work for you. Make sense?. I see. Yes, our SDK/Runtime versioning is confusing. We're continuing to talk about that to look for a better model. You are right, with your example, that shows both the runtime and SDK versions.\nWe were also talking yesterday about specifying a min tools version. Your C# 7.2 example is a poster-child use-case. We don't have a good story for that today. This is something for you to think about @KathleenDollard.. PTAL @AnthonyDGreen . PTAL @leecow \nWe should keep the command patterns the same unless there is a reason to do something different.. PTAL @Andrew-MSFT . Did you compile ICDNBase as 32-bit and loaded into a 64-bit process or vice-versa?\nYou can use the Fusion Log viewer to get more information on why loading fails: https://www.hanselman.com/blog/BackToBasicsUsingFusionLogViewerToDebugObscureLoaderErrors.aspx\nReport back?. Are you using the 32-bit or 64-bit version of .NET Core? If you are using the 64-bit version, then this error is expected.. PTAL @lt72 . The error on Microsoft.CSharp is odd, since it has a netstandard asset. Why is that @Petermarcu ?. .NET Core is an application platform. You can use it to build apps, web sites, services, or tools. Some folks have been working on enabling games, UI apps and other types of applications with .NET Core.\nIt is most similar to Java and has similarities to other application platforms, too.\nMore info: https://docs.microsoft.com/dotnet/core/. We're work on it. @leecow is working to make it happen. Totally agree!. We are working to make this better ...\nWe did get remote debugging working on ARM32 in 2.0 (I tested it on my hardware). The instructions are at https://github.com/OmniSharp/omnisharp-vscode/wiki/Remote-Debugging-On-Linux-Arm\nI haven't tested it again 2.1, but am happy to, and to improve our docs. \nWe don't have an official build for ARM64 yet. We want to and @sdmaclea has been doing a great job getting ARM64 closer to test quality so that everyone can try it.\nNote that there is no ARM Alpine image on Docker Hub.. Similar to what @Petermarcu said ... You have mentioned arm64v8 multiple times but also IoT Edge. I was under the impression that IoT Edge was focused on arm32v7. Our team delivers Docker images to them and I don't believe they have asked us for arm64v8. Can you help us understand where arm64v8 fits in? Is it just that you want it, or is it actually part of the IoT Edge offering?. BTW: I'm happy to setup a call tomorrow if you'd like ... email me at rlander@ms and we can set it up.. I was supposed to send a set of 2.2 plans to @DamianEdwards today, but neglected to. ;) The 2.1 release has been pretty consuming. I suspect we'll have a plan for 2.2 in the next couple weeks.. See: https://docs.microsoft.com/dotnet/csharp/language-reference/keywords/try-finally\nIt covers the behavior you are seeing. Right?. PTAL @preetikr . I agree with this. This part feels like a new form of release notes. Yes?. Work is progressing on this ... https://github.com/dotnet/core/pull/1454\nWe have another work item to generate markdown from releases.json.. PTAL @leecow . Thanks for the report. I sent it on to the right folks.. Great q. We intend to provide a first-class experience for this in an upcoming release (not 2.1). We also intend to make it possible to provide your own exe, for signing and icons.\nI ported the request to the repo where the work will be done. Feel free to engage there. Closing this issue.. I'd like to understand your needs and plans bit better. Might be worth a phone call. Mail me @ rlander@microsoft.com?. I just responded.. I just responded.. Good point. Me and @KathleenDollard will fix that.. Good point. Me and @KathleenDollard will fix that.. It appears that this is fixed. The sourcecode link was enabled on the last upload.\nhttps://www.nuget.org/packages/dotnetsay/. It appears that this is fixed. The sourcecode link was enabled on the last upload.\nhttps://www.nuget.org/packages/dotnetsay/. We have been monitoring the vulnerability situation with Debian images. These vulnerabilities are a function of using Debian.\nYou can see a significant improvement in reported vulnerabilities from .NET Core 2.0.5 to .NET Core 2.0.7. This improvement isn't a function of .NET Core itself, but of taking a dependency on later versions of the underlying Debian image. We move our images forward with each change to Debian.\nIn terms of guidance, you've got a four choices:\n\nMonitor Debian closely and hope that the situation improves over time. In general, I expect that vulnerabilities will ebb and flow, so this guidance isn't that great. You'd have to spend time analyzing each vulnerability and build a threat model around it.\nAdopt one of the other flavors of images that we provide: Ubuntu 18.04 and Alpine 3.7. Only problem with those choices is that they are only offered starting with .NET Core 2.1. We're working as hard as possible to make the .NET Core 2.1 RTM date not that far off, aiming for H1 2018.\nBuild your own Linux images, selecting a distro that matches your patching needs. Alpine, Centos and RHEL are key options to look at.\nSwitch to Windows containers.\n\nThis whole space has been a challenge for us. With Windows, our traditional deployment platform, we've had complete control (as a company) on patching velocity. With Linux, we cannot do much with CVEs that are marked \"No Fix available\". That's highly suggestive that the non-Docker variation of these Linux distros have the same CVE, too.\nI'm happy to talk with you on the phone to discuss that in more detail. I've provided basic insight on the situation. I hope that's helpful.. We have been monitoring the vulnerability situation with Debian images. These vulnerabilities are a function of using Debian.\nYou can see a significant improvement in reported vulnerabilities from .NET Core 2.0.5 to .NET Core 2.0.7. This improvement isn't a function of .NET Core itself, but of taking a dependency on later versions of the underlying Debian image. We move our images forward with each change to Debian.\nIn terms of guidance, you've got a four choices:\n\nMonitor Debian closely and hope that the situation improves over time. In general, I expect that vulnerabilities will ebb and flow, so this guidance isn't that great. You'd have to spend time analyzing each vulnerability and build a threat model around it.\nAdopt one of the other flavors of images that we provide: Ubuntu 18.04 and Alpine 3.7. Only problem with those choices is that they are only offered starting with .NET Core 2.1. We're working as hard as possible to make the .NET Core 2.1 RTM date not that far off, aiming for H1 2018.\nBuild your own Linux images, selecting a distro that matches your patching needs. Alpine, Centos and RHEL are key options to look at.\nSwitch to Windows containers.\n\nThis whole space has been a challenge for us. With Windows, our traditional deployment platform, we've had complete control (as a company) on patching velocity. With Linux, we cannot do much with CVEs that are marked \"No Fix available\". That's highly suggestive that the non-Docker variation of these Linux distros have the same CVE, too.\nI'm happy to talk with you on the phone to discuss that in more detail. I've provided basic insight on the situation. I hope that's helpful.. Can you share which distro that is?. Can you share which distro that is?. Thanks for the report. It's not specific to linux-arm. It is specific to publishing by RID. I'll get some folks to PTAL.. Thanks for the report. It's not specific to linux-arm. It is specific to publishing by RID. I'll get some folks to PTAL.. I suspect that self-contained apps already work, or apps that only require the runtime. The SDK doesn't yet work on ARM64 but I suspect that will be resolved soon. Also, our ARM32 products works on ARMv8 machines. I've tested it.\nI'd love to hear about your need for/planned use of ARM64. Drop me a line at rlander@microsoft.com if you can tell me a bit more about your project.. I suspect that self-contained apps already work, or apps that only require the runtime. The SDK doesn't yet work on ARM64 but I suspect that will be resolved soon. Also, our ARM32 products works on ARMv8 machines. I've tested it.\nI'd love to hear about your need for/planned use of ARM64. Drop me a line at rlander@microsoft.com if you can tell me a bit more about your project.. Thanks.. Thanks.. We'll create the same file in the 2.1 folder. Can you do that @leecow?. We'll create the same file in the 2.1 folder. Can you do that @leecow?. Great question. We're still working on our servicing plan for .NET Core 3. We'll share more information, likely on the .NET blog, when we have a well-defined plan. I understand the crux of your question, that .NET Core today is focused on the server scenario and that client apps are different. We get it.. The .NET Core SDK is now available on ARM.. The .NET Core SDK is now available on ARM.. Thanks!. Thanks!. Ah, just saw this. I did something different in #1582, but solving the same problem. Thanks!. Ah, just saw this. I did something different in #1582, but solving the same problem. Thanks!. I updated the .NET Core support policy doc to clarify: https://github.com/dotnet/core/blob/master/microsoft-support.md. We were guided not to add a year. That's our plan for the file unless we find out it prevents someone from using the product.. We were guided not to add a year. That's our plan for the file unless we find out it prevents someone from using the product.. @jeffschwMSFT The delivery and the UX are logically separate, right?\nI like the general idea that @onovotny is proposing. It aligns with what we are doing with WPF and WinForms.. @jeffschwMSFT The delivery and the UX are logically separate, right?\nI like the general idea that @onovotny is proposing. It aligns with what we are doing with WPF and WinForms.. We intend to add support for .NET Core 3.0 in Visual Studio for Mac 8.0. We hope for this support to first show up in Visual Studio for Mac 8.0 Preview 2. Until that time, we recommend using Visual Studio Code on macOS instead if you want to use .NET Core 3.0.\nI just tried WebAPI on macOS in terminal. It works. That's the experience that we are providing (and tested) for Preview 1. We will build on that for Preview 2 and following.. We intend to add support for .NET Core 3.0 in Visual Studio for Mac 8.0. We hope for this support to first show up in Visual Studio for Mac 8.0 Preview 2. Until that time, we recommend using Visual Studio Code on macOS instead if you want to use .NET Core 3.0.\nI just tried WebAPI on macOS in terminal. It works. That's the experience that we are providing (and tested) for Preview 1. We will build on that for Preview 2 and following.. I just talked to @vivmishra ... he is going to update the 2.2 release notes.\nTo explain ... we have an unwritten policy where we take a look at which distro versions will go out of support within 6 months of a new .NET Core release. We then subjectively decide whether to continue supporting it until the EOL date or not. It isn't a hard-and-fast rule. In this case, the last release before 2.2 was an LTS release, so there is no forcing function for people to adopt 2.2 (unlike 2.0). As a result, I think that everyone is well-enough served by this decision: 14.04 users can continue to use 2.1, 2.2 users will not be surprised by 14.04 support being dropped within 6 months, and the .NET team can can reduce a testing leg. That's the thinking in a nutshell.\nNow to the real sausage making: I did not communicate this very well within the team, except via the blog post. I apologized to @leecow and @vivmishra. I also wish to apologize to anyone else that was confused/affected.\nAnd to state the obvious, .NET Core 2.1 support for 14.04 will end in April 2019, as most people familiar with Ubuntu EOL dates would expect.. I just talked to @vivmishra ... he is going to update the 2.2 release notes.\nTo explain ... we have an unwritten policy where we take a look at which distro versions will go out of support within 6 months of a new .NET Core release. We then subjectively decide whether to continue supporting it until the EOL date or not. It isn't a hard-and-fast rule. In this case, the last release before 2.2 was an LTS release, so there is no forcing function for people to adopt 2.2 (unlike 2.0). As a result, I think that everyone is well-enough served by this decision: 14.04 users can continue to use 2.1, 2.2 users will not be surprised by 14.04 support being dropped within 6 months, and the .NET team can can reduce a testing leg. That's the thinking in a nutshell.\nNow to the real sausage making: I did not communicate this very well within the team, except via the blog post. I apologized to @leecow and @vivmishra. I also wish to apologize to anyone else that was confused/affected.\nAnd to state the obvious, .NET Core 2.1 support for 14.04 will end in April 2019, as most people familiar with Ubuntu EOL dates would expect.. This is what I see on my ARM64 Pinebook. \n```console\nrich@tofino:~$ cd myapp/\nrich@tofino:~/myapp$ cat myapp.csproj \n\n\nExe\nnetcoreapp3.0\n\n\nrich@tofino:~/myapp$ time ./bin/Debug/netcoreapp3.0/myapp \nHello World!\nreal    0m0.872s\nuser    0m0.480s\nsys     0m0.110s\nrich@tofino:~/myapp$ dotnet --info\n.NET Core SDK (reflecting any global.json):\n Version:   3.0.100-preview-009812\n Commit:    e3abf6e935\nRuntime Environment:\n OS Name:     neon\n OS Version:  18.04\n OS Platform: Linux\n RID:         linux-arm64\n Base Path:   /usr/share/dotnet/sdk/3.0.100-preview-009812/\nHost (useful for support):\n  Version: 3.0.0-preview1-27018-05\n  Commit:  7a7ca06512\n.NET Core SDKs installed:\n  3.0.100-alpha1-009697 [/usr/share/dotnet/sdk]\n  3.0.100-preview-009756 [/usr/share/dotnet/sdk]\n  3.0.100-preview-009812 [/usr/share/dotnet/sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056re/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 3.0.0-preview-27114-01 [/ustnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [/ustnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 3.0.0-preview1-27018-05 [/uotnet/shared/Microsoft.NETCore.App]\nTo install additional .NET Core runtimes or SDKs:\n  https://aka.ms/dotnet-download\nrich@tofino:~/myapp$\n```\nThis is what I see on Windows X64 for the same build. It is a 10x difference.\nconsole\nC:\\Users\\rlander\\app30> (measure-command { .\\bin\\Debug\\netcoreapp3.0\\app30.exe }).TotalSeconds\n0.0786411. This is what I see on my ARM64 Pinebook. \n```console\nrich@tofino:~$ cd myapp/\nrich@tofino:~/myapp$ cat myapp.csproj \n\n\nExe\nnetcoreapp3.0\n\n\nrich@tofino:~/myapp$ time ./bin/Debug/netcoreapp3.0/myapp \nHello World!\nreal    0m0.872s\nuser    0m0.480s\nsys     0m0.110s\nrich@tofino:~/myapp$ dotnet --info\n.NET Core SDK (reflecting any global.json):\n Version:   3.0.100-preview-009812\n Commit:    e3abf6e935\nRuntime Environment:\n OS Name:     neon\n OS Version:  18.04\n OS Platform: Linux\n RID:         linux-arm64\n Base Path:   /usr/share/dotnet/sdk/3.0.100-preview-009812/\nHost (useful for support):\n  Version: 3.0.0-preview1-27018-05\n  Commit:  7a7ca06512\n.NET Core SDKs installed:\n  3.0.100-alpha1-009697 [/usr/share/dotnet/sdk]\n  3.0.100-preview-009756 [/usr/share/dotnet/sdk]\n  3.0.100-preview-009812 [/usr/share/dotnet/sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056re/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 3.0.0-preview-27114-01 [/ustnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [/ustnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 3.0.0-preview1-27018-05 [/uotnet/shared/Microsoft.NETCore.App]\nTo install additional .NET Core runtimes or SDKs:\n  https://aka.ms/dotnet-download\nrich@tofino:~/myapp$\n```\nThis is what I see on Windows X64 for the same build. It is a 10x difference.\nconsole\nC:\\Users\\rlander\\app30> (measure-command { .\\bin\\Debug\\netcoreapp3.0\\app30.exe }).TotalSeconds\n0.0786411. Can we use the simpler language that we used on the dotnet/wpf repo? When we first added the CoC, it was important to explain its heritage. It isn't anymore. We just need to say that it is the .NET Foundation CoC.\nIs the CODE_OF_CONDUCT.md file necessary? Does GitHub respect it?. Can we use the simpler language that we used on the dotnet/wpf repo? When we first added the CoC, it was important to explain its heritage. It isn't anymore. We just need to say that it is the .NET Foundation CoC.\nIs the CODE_OF_CONDUCT.md file necessary? Does GitHub respect it?. > which wording do you want to use? \nThe second one. That's the one I linked to initially.\nIs there a link that shows what that file does? I cannot see what that is.\nI'm wondering if we should go with the text I prefer in the README and then copy the whole contributor covenant text  into the C_O_C.md file? @jongalloway ... do you have thoughts on this?\n. > which wording do you want to use? \nThe second one. That's the one I linked to initially.\nIs there a link that shows what that file does? I cannot see what that is.\nI'm wondering if we should go with the text I prefer in the README and then copy the whole contributor covenant text  into the C_O_C.md file? @jongalloway ... do you have thoughts on this?\n. @karelz -- yes. However, we need to validate that the default text and the .NET Foundation CoC text match. Otherwise, it would be odd. That's a question for @jongalloway. . @karelz -- yes. However, we need to validate that the default text and the .NET Foundation CoC text match. Otherwise, it would be odd. That's a question for @jongalloway. . @livarcocc @vitek-karas . @livarcocc @vitek-karas . > We have narrowed the issue down to a single merge commit. \nDo you mean in your codebase or in the .NET Core codebase?\nCan you share the signature of that one controller?. > We have narrowed the issue down to a single merge commit. \nDo you mean in your codebase or in the .NET Core codebase?\nCan you share the signature of that one controller?. This announcement isn't linked.\n. \"the roslyn\" ... missing \"team\"\n. I'd remove \"terribly\"\n. \"have it both ways\" is a bit odd. How about \"support both types of consumer\" or something like that?\n. \"versions\"\n. \".NET Native\"\n. \".NET\"\n. We should remove that CLI link now. It was there for RC2. The need has past.\nIn fact, we should determine if there is any value in that content for core-docs and then delete. I wrote that doc in a rush since no other info was available.\n. We shouldn't list CoreRT as a .NET Core component. Instead, we should have a section on native compilation, which is where it should be listed. Our message on that is \"Important scenario, just not now.\"\n. This section was created for new components. It's not intended as a long-term listing of architectural docs (otherwise, it's quite incomplete). These components are either now part of our docs or scenario-specific (CoreRT). I think we can remove the section.\n. We should validate how active the FreeBSD port is at this point. I honestly don't know.\n. We should list the Server version (Windows Server 2008 R2?) and Nano.\n. It's 2+\n. We can add ARM64 now.\n. Clarify, at the layer of the BCL.\n. I'm wondering we should put the release-specific stuff (dates, focus) at the top. I'm \"Mr. wordy\" so I'm the one who wrote all those goals and stuff, but it seems like a lot of text to get through to get to the real roadmap.\nThis doc was intended as a mixture of a high-level contributor document and roadmap. I think the roadmap stuff should come first.\n. I'm wondering if this line is needed, as worded. Instead, I wondering if we should say that we need to maintain the ability to ship a stable quality build every quarter. Basically, avoid talking about products and instead timeframes.\n. We should probably remove the version number from ASP.NET Core. Increasingly, as it includes SignalR and other stuff, the version number won't matter.\n. We should link these two points: OS package manager support and broader distro support. They are not distinct.\n. macOS\n. \"The list\"?\n. I think we can just delete 1.0 at this point. The roadmap isn't intended to be historical in nature.\n. Oh no. We built a time machine!. Proposal on alternate column headers. I think they can be simplified and I believe one isn't needed.\n|    Docker Image    |    Included .NET Core Runtime Version(s)  |    .NET Core Tools Version  |\n  |----------------------------------------|---------------------------------------------------------------------------------------------|---------------------------------|\n -|    1.0.3-runtime                       |    1.0.3                                  |     *None                        |. Sure, but isn't that the 4th column. The 3rd column doesn't seem useful to me (in fact, I think it is confusing).. Good point. Clarified the docs. Does that help?. Good q but it's all in docs in one place or another. We could link to specific docs if you found that content compelling.\nIt was useful. I wrote it all ;). The problem is that not everyone is looking for the same version. The marketing site doesn't do a good job of catering to that. I also have plans to make the download pages/release notes easier to use.. That feels like passive construction in the sense that the second sentence contains the more important verb or the first.. I added a smattering of repos to get started and was going to let people (like you) add more (as you did).. No idea how that happened!. It should match what is printed in the shields here: https://github.com/dotnet/cli#installers-and-binaries. It isn't useful if they differ. I think it's fine to say 2.1 since we'll be talking about it very soon anyway. Fine question, BTW.. I was figuring that fell under release builds. I guess your point is that we also have daily 1.1 builds since we're actively servicing that product. Yes? I was thinking more about previews and less about the servicing scenario. That's a good thought. Is that your point?. You'd think. I worry that people will still get confused, hence why I partially repeated them. I think this is goodness w/ little harm.. That point doesn't seem very advanced. The package is covered in the instructions, per necessity.. I think it does.. Click on the \".NET Core Supported OS Lifecycle Policy\" link.. You can point to this nuget.config, which might be easier for folks: https://github.com/dotnet/core/blob/master/samples/nuget.config. Wouldn't you already have this library and \"customer data types\"? Otherwise, it will be quite non-obvious what to do. Also, I suspect that these data types are really just classes, right? Unless I misunderstand, \"MyData\" would be an odd name for a library.. You should explain that these are alternatives to one another.. This step is no longer needed.. A sample app would be useful so that people could try out these instructions w/o needing to create anything special themselves. Kinda like these samples: https://github.com/dotnet/dotnet-docker-samples. This is a good point. I thought about that. My rationale was the following:\n\nTake the reader to the best explanation of the release.\nMaintain a latest servicing version at the top of the release (check and you'll see that).\n\nThat felt like the sweet spot experience. Thougths?. Would be great to see a link here, to runtime selection behavior. If that doesn't exist at docs.ms.com, please file a docs bug.\nHow about:\n\nGlobal Tools are framework-dependent applications and subject to the same .NET Core runtime selection behavior as other applications.  A key behavior is that preview releases do not roll-forward to a final (AKA \"RTM\") release in the absence of a preview release being installed on a given machine. Tool writers that publish tools for a preview need to publish releases for later previews and the final release in order for those tools to work for their users.. Please add a link to the NuGet package.. This would be easier to read if you wrote the \"you can use ...\" after the bulleted list.. I assume that this is with .NET Framework. You should clarify.. >  as WCF client target \n\nI don't know what that means.. An easier phrasisng is \"targets .NET Core 2.1\". I would separate adding a package reference and the client code into two separate steps.. Can you add the two packages as a single step? can you add them using the same technique?. Somewhat separate than this doc, but are you planning on switching the CliTool to a global tool at some point?. You might go into more detail on how to test/use it. For example, how do you run the WFC service and client apps at the same time?. I would suggest and empty string rather than null for eol-date. This would make processing easier.. You might name this property just \"releases-index\" or even just \"releases\". I'd add another property for product called \"product\" with the value \".NET Core\". This would enable us or others to use this same schema for other products.. I'd make \"lifecycle-policy\" a top-level property and include it per releases within the target releases.json file.. Instead of \"eol\" as a property, you might go with: \"support-phase\": \"full-support\" | \"maintenance\" | \"eol\". Primary point is not duplicating it in every array entry in this file. We can likely get away w/o it being in this file at all. There are many links that we could include here. Only one of them is required.. I get these three property names. I'm wondering if we can do better. How about (in order):\n\nversion\nlatest-release\nlatest-release-date\n. In 3.0, you are supposed to be able to copy build output. Does that not work for asp.net?. Cuz I've never done it before, even though that is very bad of me. Either I'll merge and do it later when I have time or someone else will be nice and fill this in.. Crap, I meant the slash direction. I'll fix that.. I was copying these commands. Are they wrong? https://github.com/dotnet/dotnet-docker/blob/master/3.0/sdk/stretch/arm64v8/Dockerfile. This pattern only works with 3.0. Good point. It's tough to make the docs work for 2.2 vs 3.0, windows vs linux and 32bit vs 64bit. I will endeavour to make that work. . \n",
    "MattWhilden": "@ReverseBlade you'll get a better answer from folks over at dotnet/corefx. I'll close this out and presume you'll follow up there.\n. Looks great. Thanks!\n. Cool. I think we need to get one of our counterparts to jam merge. @richlander @richlander @terrajobst \n. Not all Windows APIs are available for UWP applications. You'll need to get a version of the VOIP library that targets the UWP APIs.\nThis repo isn't well suited for this issue so I'm going to close out this issue. Please feel free to follow up with me in email at dotnetnative@microsoft.com if you need more information or clarification. Happy to help.\n. Hmmm. GetDefaultAudioCaptureId does appear to be in the Win10 surface area. Perhaps this is a bug in the Cert tools?\nUnfortunately, the vast majority of the UWP stack (compiler, cert tools, etc) aren't available on GitHub so there's no good public repo for those issues. I'm happy to get you connected with the right folks if you shoot me a mail at the above address. \n. ",
    "lurongkai": "duplicate with #1\n. ",
    "henkmollema": "Rebased with master.\n. > Are you able to reproduce it on more than 1 machine?\nI'm unable to test it on another machine today. I'll let you know tomorrow.\n\nAre you able to reproduce it on more than 1 project? (what about some dummy HelloWorld?)\n\nYes, it repros with every project I create using .NET Core 3.0. Using .NET Core 2.2 the build times are fast as expected.. Building apps with Razor views/pages takes 40+ seconds (twice as much) and hangs twice at loading Roslyn. Once for compiling C# code and once for compiling the Razor views.. @karelz update: I've been able to reproduce this issue on another machine. The issue occurs when I'm using a user account with a space in the username (e.g. henk mollema). The problem goes away when I change to another account (on the same machine) without a space in the username (e.g. henk).. Removing the whitespace from my username resolved the issue.. ",
    "ddevault": "Paging @richlander for a review?\n. ",
    "terrajobst": "@MattWhilden is there still anything to do? I think @richlander already did that.\n. It will come back as part of .NET Standard 2.0.. We do have CodeDOM support now. What we don't have is the ability to compile the resulting source code. We figured that the bulk of the usage of CodeDOM is in generating the sources, not compiling them. It should be trivial to update whatever component relies on CodeDOM to compile the result using Roslyn.. The diff looks correct, although we need to fix our tools /cc @weshaggard. Otherwise, the next time we run an export ref returns will disappear again.. > PR's welcome :)\nReview welcome ;-)\nhttps://github.com/dotnet/buildtools/pull/1377. @ojoadeolagabriel while I understand your frustration with our tooling I don't think your comment is helping anyone. It's simply ranting. If you have concrete issues, name them and we can talk about them.. Hey @enricosada! Thanks for adding that.\n@cartermp and I just updated the roadmap to include more of the .NET components, which also includes F#. That's in PR #397. Does this work?. The README doesn't include dotnet/sdk. We should probably add both.\n@enricosada, do you mind doing this?. I thought part of the performance work is done in the IDE experiences of C#/VB which are in dotnet/roslyn.\n@Pilchie, is there a better location I should point to?. Hey @TechiMe, thanks for filing this.\nI assume the question isn't about adding the Excel automation APIs to .NET Core directly but instead have a way to automate Excel from .NET Core. Is that correct?. Ah, so that's an even different question.\n\nFirst, it's about whether you can automate Office using the COM automation APIs on Windows. I've asked our interop team to see whether it's supported and if so how.\nSecondly, the question is whether we can make that part available cross-platform. Considering that COM is a Windows technology I highly doubt that we can make this scenario work in a cross-platform fashion.\n\nThat being said, whatever mechanism JavaScript/VBA is using on Mac, we could look into supporting this for .NET Core, but I have no idea how much would be required to do so.. Thanks for filing his. There are several folks here discussing what we can do. The naming and downloads pages aren't exactly helpful, I agree. . You keep saying lexical order but it sounds like you want them to be returned in the order they were put in the source file. I don't think this definition would be sound (consider partial classes and code generation).\nMy opinion is that the order is generally undefined. This ensures we don't spend additional time sorting in case you don't care about sorting or need to apply your own sorting. Also, there are many ways to order members. For instance, many people want something like this:\n\nOrder types by name and then by generic arity\nOrder members by kind (constructors, methods, properties, events, fields)\nWithin each group, order by name and then by arity\n\n\n\nBut I agree that it would be a useful thing to add and could be an extension methods over, say IEnumerable<MemberInfo>. But I really don't want to add to BindingFlags. First, this API is already quite complex and secondly I really don't think the core of reflection should be in the business of sorting. It's a presentational concern, not a form of binding.. > Also I'm not requesting sorting or ordering - but rather providing the metadata to enable me to do sorting.\nThe only think you'd have today is the token. There is nothing else recorded in the metadata that you could use. You could, however, read the PDB data and use the file and line information. I think our new PDB format has line information for everything, even if there is no code, but I might be wrong. Of course, this story falls short if you don't have access to debug information.\n\nYes partial classes do raise questions but lets leave these aside for now (in my example of course the class is small and anonymous).\n\nI'm not sure we can leave that out because it seems to me you're asking for a stable sort.\n\nso perhaps it's possible to review that code and say that yes MetadataToken order is - going forward - guaranteed to be source file order.\n\nI don't think we're willing to make such a promise. The only guarantee we're giving you is that they are unique & stable when your'e building code using the deterministic option. /cc @tmat. > Surely this is not a hugely complicated thing?\nAny change affecting the metadata format isn't in the bag labeled \"not hugely complicated things\" ;-)\n\nIf this is true (I'm just experimenting) then perhaps that could be enforced so that going forward it is documented that partial classes \"perceive\" their member ordering to be as described above?\n\nI think what we're saying is that we're aren't seeing the value to be willing to make such a guarantee. Also, Roslyn is just one of our compilers. Mono has a separate C# compiler and there are many other compilers out there as well (such as F#). Even if we were to make the promise for Roslyn it wouldn't be a guarantee per ECMA335 spec (and adding additional constraints later is a breaking change from the existing spec). Of course, changes like this are doable in principle but I don't think we're seeing the value to justify such an impactful change.\nOn top of that, enforcing guarantees around token ordering might impose additional limitations we need to take into account as we're adding more constructs in the future. Assume, for instance, partial classes didn't exist and we made the guarantee you're asking for. Is adding partial classes now breaking the promise? I'd argue partial classes are much more useful than keeping the invariant you're asking for. That's another reason why I don't think we're willing to go down that path.. > As for the promise that would be simply what I outlined above - no guarantee is made for partial classes - simple as that, just like renaming a property in some class is not guaranteed to have no impact on XAML consumers of that class or other mechanisms that use reflection on that class.\nWell, if you're happy with a \"best effort\" style solution than the current situation should already suit your needs as we largely (implicitly) follow the path you'd like. The difference is that it's not based on an explicit guarantee, especially when other compilers are evolved. . Any reason this wouldn't be this repo?. This issue was moved to NuGet/NuGetGallery#3899. No, it hasn't yet. I'll publish them next week, together with a blog post.. No, sadly not yet.. We basically have published guidance in various forms now (blog posts, videos, etc).. It looks like it's already included:\nhttps://github.com/dotnet/corefx/blob/master/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDependency.cs. Can this be merged now?. Rich is working on an a new roadmap. Stay tuned.. ClickOnce is broken and we have a tracking bug for that internally. Basically, the installer isn't correctly gathering your project dependencies into the setup, causing the app to miss files. I'm not aware of any workarounds besides either not using ClickOnce or not using .NET Standard dependencies.\nPotentially, might be able manually deploy the necessary files, but I'm not a ClickOnce expert. I'll ask.. We have a workaround now. I'm working with @ericstj and @NikolaMilosavljevic to finish my draft of the guidance. Will post tomorrow at the latest.. For future reference: I've documented the work around now as well.. That's a bug in the documentation we're trying to address. CodeDom is available for .NET Core 2.0 but it's not part of .NET Core 2.0. In other words, you'll need to reference the System.CodeDom NuGet package.. That's unfortunately by-design as the compilers are not part of the .NET Core runtime. However, given that CodeDOM isn't referenced by the core (it only comes in when people depend on it/via the compat pack) we could probably fix this. I've filed this bug.. @dgamma3 \nWe don't support compiling with CodeDOM yet. It's tracked by https://github.com/dotnet/corefx/issues/12180.. Are you only using the MSBuild assembly for this type? In that case, you should replace it with the standard KeyValuePair<string, string> or ValueTuple<string, string>.. Looks good!. That's correct, we don't have an updated version of .NET Standard but we're planning on having one. Stay tuned.. Good point. I've actually sent email to the team at that point but updating our guidance on GitHub didn't occur to me. Good catch!. I'd agree with @jongalloway. It seems more logical to copy & paste the text into that file. We do the same for licenses and CoC seems to be like that -- the point is, it rarely -- if ever changes.. I'm sure we'd do that if that definition would already exist :-). We're still trying to figure out exactly what this would look like (NuGet metapackage, ZIP file, some mapping, etc).\nFor now, the closes thing we have is UWP and ASP.NET 5 which essentially provide a list of packages that we consider \"the recommended\" set of packages. Essentially, the notion of a distribution is implicit there; there is no explicit concept that models that (yet).\n. That's fair. We should probably rename that section to \"Platforms: \". Strictly speaking, Windows isn't a singular platform either, there is Win32 and AppContainer, for example.\n. Good catch! Submitted #393 for it.. We should mention linking the corpnet account to GitHub. Maybe add a section for tools? I suggest the following:\n\nChrome extension to see who is an FTE\nChrome extension for CodeFlow on GitHub. \n",
    "maxwellb": "Having modules within this repository may change the spirit of the repository. As is, the project serves as a launch pad and educational resource to explore .NET Core. The goal of the project does not appear to be building the Framework or CLR, and thus stands fine without these additions, imo.\n. ",
    "BethMassi": "LGTM\n. I am not able to restore packages nor build these without modifying the project.json to specify the dependencies like so:\n\"System.Console\": \"4.0.0-*\",\n    \"System.IO\": \"4.0.11-*\",\n    \"System.IO.FileSystem\": \"4.0.1-*\",\n    \"Microsoft.NETCore.TestHost\": \"1.0.0-*\",\n    \"Microsoft.NETCore.Runtime\": \"1.0.1-*\"\n. I'd also add a command to the project.json so you can run them directly in VSCode & Visual Studio\njson\n\"commands\" : { \"run\" : \"<folder name>\" }\n. ",
    "blackdwarf": "+1 to that, sounds like a great idea. \n. LGTM\n. @cartermp can we close this one? Or move it to dotnet/core-docs? \n. I will close this one as we have the docs.\n. My bad, pushed it wrong, will close and do it differently. \n. The project.json are now updated for all samples. However, I can repro the issue with System.Console on OS X as well. Will log an issue at dotnet/cli to actually solve this.\n. @jgowdy I don't follow, the samples' project.json System.IO is set to 4.0.11-beta-23516. So, did you try the old clone, by any chance?\nAlso, the System.Console thing is something more in depth, but I see you already mentioned it in dotnet/cli#291 so that's good. \n. Seems like something is messed up with the deb package. It is installed in /usr/share/dotnet-nightly so @pjustino can you try to do export DOTNET_HOME=/usr/share/dotnet-nightly and see if it fixes it?\n. @pjustino can you try to purge dotnet-nighly and then reinstall, remove the var and see if it repros still?\n. @pjustino seems like this is resolved. I will close the issue; if you find this repros again, please reopen.\n. Given that things changed significantly between the time when this issue was opened and now, I'm going to close this issue. For any issues with the command line .NET Core tools, please file issues on the dotnet/cli repo. \n. @jakubsuchybio F# is now available to be installed as a per-project extension using the .NET Core command line tools. You use the dotnet new -l fsharp to get a simple F# console application with the Preview 2 of the tools. With this, I will close this issue. \nIf you have more questions and/or comments, please file issues on dotnet/cli repo. \n. Hm, this is strange. I was not able to repro this on Linux Mint or on Ubuntu 14.04. I will close down this issue, but if this behavior still repros, can you please open up a new issue in the dotnet/cli repo? Thanks!\n. I will close this issue due to lack of activity. @GerhardKreuzer if your answer was not satisfactory, can you please reopen this issue on dotnet/coreclr as that is a much better home for it. Thanks! \n. @mairaw yup.\n. @rcabreu I cannot repro this on Linux Mint 17.3 using the Preview 2 bits of the tooling that were release on 27th of June. I think the problem where was missing feed configuration in the NuGet.config file. \nWith the above, I will close this issue. If it still persists for you, please open an issue on the dotnet/cli repo so we can investigate. Thanks!\n. What @bartonjs  said is true. This is covered in the getting started. Also, that is a very old build and you should use the RC2 bits. The instructions are on: http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409 \n. This issue is dealing with DNX tooling which has been deprecated as of RC2 of .NET Core. With that I will close this issue. You can use the DNX migration guide to migrate DNX-based projects to RTM projects. RTM was released on 27th of June.\nWith this, I will close this issue. If you run into any problems with using .NET Core RTM, please file an issue on the dotnet/cli repo. Thanks!\n. I believe this has been fixed in the latest tooling. Please try the latest tooling from https://dot.net/core. If the problem persists in the latest, please file an issue on the dotnet/cli repo. Thanks!\n. @MichalStrehovsky PTAL? Ah, Please take a look. :)\n. Yup, LGTM\n. The issue here is that for dev builds you need to have a feed configured to restore from that has the packages. https://github.com/dotnet/core/blob/master/cli/known-issues.md#on-dev-builds-of-the-tools-restoring-default-project-from-dotnet-new-fails has all of the details.\nWith that, I will close this issue. If you have more questions/problems, please file issues on dotnet/cli. \n. All of the information on supported OS-es can be found in https://github.com/dotnet/core/blob/master/roadmap.md#technology-roadmaps. With that, I will close this issue. \n. @richlander can you please comment on the overall roadmap for CoreRT? \n. @swaletzko with that, I will close this issue since it seems the problem has been fixed. \n. As far as the xproj references in csproj goes, that problem will be mitigated by the tooling's move to csproj all-up as was explained in the \"Changes to project.json\" blog post. \n. @sayedihashimi where is the best place to file VS-related issues of this kind? \n. Thanks @sayedihashimi. @HellBrick can you please move this issue to the above mentioned repo and close this one? Thanks!\n. @yyjdelete in general, if you wish to use RC2 bits and newer, you need to uninstall any older (pre-RC2) bits you have on the machine. This guidance can also be found on the Getting Started page. \nWith this, I will close this issue. In the future, please open these kinds of issues on dotnet/cli repo.  Thanks!\n. @ojosdegris the right repo is dotnet/cli. If the issue still persists, can you please file it over there and close this one? Thanks!\n. @peixushang I cannot repro this with 1.0.0-preview2-003121 version of the CLI tooling. Both projects restore and build and run properly. \nWill close this issue with the above. If the issue still repros for you, please open up a new issue on dotnet/cli repo. Thanks!\n. @vivekmishra-sft this is strange? Can you please open an issue for this on the dotnet/cli repo and close this one? Thanks!\n. @SebastianStehle can you please open this issue on dotnet/corefx repo? It seems like a better place than here. \n. @mrts thanks for catching this and fixing the README.md. I've merged your PR. \nFor the second thing, the samples in this repo are simple and don't have any P2P references, so the second issue referenced above and the fix is not really needed here. There are other docs on dotnet.github.io/docs/ that cover these. \nWith this, I will go ahead and close this issue as it was resolved by your PR. \n. LGTM will merge. \n. @m-ghaoui we have changed the instructions for CentOS to now install in /opt and symlink info /usr/local/bin. Does that work?\n. @nothrow seems strange. Can you please move this issue, if it still repros, to the dotnet/cli repo? Thanks!\n. @Chrisboh The script is supposed to tell you what to install. Did the script not print out the lines on the dependencies that were missing?\n. @Chrisboh there is a document on the dependencies in the CLI repo. We can't install it because that would make the script have to be run under sudo and we don't want it. The number there is maybe problematic, but you can search the apt-get repos for libunwind and see which version is there (which is 8). \nIdeally, by RTM time, we would/will have native packages for all of these, so it would install dependencies like that. \n. @Chrisboh we have changed the instructions for Debian for RTM/Preview 2 bits. I've also added an issue to track adding a sudo mode to the the install script so it can perform the installation of dependencies: dotnet/cli#3637. \nWith this, I will close this issue. \n. @Chrisboh there are at least several ways to provide feedback:\n1. CLI repo\n2. Community channel\n3. Gitter CLI channel\n4. ASP.NET Core repos\n5. This repo\nAll of these are known to people who are interacting with our product. I'm not sure that providing more info would be super useful, but I will let @shanselman comment, since he owns that page. \n. @Chrisboh yes, and that information is available. If you are having trouble with installing the CLI tools, I would imagine you would go to the dotnet/cli gitter channel/repo to file that issue. It is a potential product issue after all. \ud83d\ude03 However, I have filed an issue on the respective repo to fix the community page to add the information. \nWith this, will close this issue. \n. @daviatorstorm is this still reproing with the latest tools/bits?\n. Closing this due to the lack of activity. \n. @zygimantas with the move to csproj, this will become a non-issue, so I'm going to close this one. If you feel this is in error, please reopen. \n. @ststeiger interesting. If this still repros, can you please file this issue in dotnet/cli and close this one? Thanks!\n. @DonSchenck is this still reproing with the install script from rel/1.0.0-preview2 from the dotnet/cli repo? \nIf so, could you please file a bug on the dotnet/cli repo and close this one, since this issue should be tracked over there for fixing? Thanks!\n. @DonSchenck since there is no reply here, I will close this issue. If this still repros, please open an issue on the dotnet/cli repo. Thanks!\n. @CodeObsess I'm not sure what the problem is here based on your description. If this is still reproing for you, can you please open an issue on the dotnet/cli repo? I will close this one. Thanks!\n. @zorbasolutions does this repro with the RTM installers you can download from https://dot.net/core?\n. @svick does this repro with the Preview 2 tooling?\n. @svick all right, this seems like a problem. @gregg-miskelly do you know where we can file this issue to be more visible?\n. @svick can you please move this issue to dotnet/coreclr and closing this one? Thanks!\n. Moved this to aspnet/tooling. Closing this one. \n. What is the status of this issue then? Seems like there has been no movement on it for a month now...\n. Thanks @vancem. Given the inactivity here, I will close this issue. @jonfasking if you still would like to continue this discussion, please open the issue on dotnet/coreclr, as it is a much better home for it than here. Thanks!\n. @gitmaheshk can you please share your project.json and overall project setup? I would like to understand a little bit better what are you trying to accomplish. \n. @jabolx this is weird. Is this reproing with the RTM bits you can get from https://dot.net/core?\n. @jabolx ok, so it seems this is a problem. Can you file this issue on https://github.com/aspnet/tooling/issues so that proper people can look and triage it? Thanks! I will close this one. \n. @MarkPieszak is there any update on this?\n. @MarkPieszak if it is still reproing, can you please move this issue to https://github.com/aspnet/tooling/issues and close this one? That repo is a much better home for it. Thanks!\n. Posted this to aspnet/tooling. Closing this issue.\n. @khionu this will be mitigated with move to msbuild and csproj. I will close this one. If you feel that this was in error, please open this issue on aspnet/tooling. Thanks!\n. @atuzovic can you please reopen this issue on aspnet/Tooling? We will take if from there. Thanks!\n. @saf-itpro if this issue still repros, please open it on https://github.com/aspnet/tooling/issues. I will close this one. Thanks!\n. This is now fixed. \n. @lukywong can you please move this issue to dotnet/cli if it still repros? This is a much better place for it. Thanks!\n. @cartermp can you share what the fix is here? This seems to be a known issue with wrong dependencies for F# projects that crept into Preview 2 release of the tooling. \n. @ckuhn203 the exact same issue that is the root of this thread? \n/cc @cartermp . I believe that this issue is tracked on dotnet/dotnet-docker#61. It has to do with a bug that is present when using 4.6.x kernel. \nI will close this issue as a duplicate of that other one. If you believe this was in error, please reopen this issue on dotnet/cli. \n. @alberts which kernel are you running? Is this issue still reproing?\n. @PAStheLoD given @mellinoe answer, I will close this issue. If you feel it was in error, please reopen. \n. @hickford the NuGet/NuGetGallery seems like a much better place for this issue. Closing this one in favor of NuGet/NuGetGallery#3098. \n. @cartermp can you comment on this?\n. @cartermp @Thorium can we close this issue?\n. @jonstoneman is the workaround provided by @brthor working for you? If so, can we close this issue?\n. @jonstoneman I will actually close this one since we have dotnet/cli#2902. It is preferable to keep the product issues in the actual product repos. \n. @cartermp can you take a look at @czifro question since it is F#?. With the responses above, I think that the issue can be closed. For any API questions/issues, please file an issue on dotnet/corefx and for command line tooling file an issue on dotnet/cli. \n. @Thorium can you please move this issue to https://github.com/aspnet/tooling/issues? It seems like a much better place for this issue. I will close this one. Thanks!\n. @CoreyKaylor dotnet pack will create a nupkg of the project you point it to. It will create a nuspec for any dependencies that exist in the project it is packing. It is on the packager to make sure those are in an accessible place so that the consumer can reach them. \nI will close this issue as per @plioi comment above. \n. @JoshClose does @akoeplinger response solve your issue?\n. @gabrielcs the behavior is by design for the .net core tooling. However, seems like there are some problems here. Can you please move this issue to https://github.com/aspnet/tooling/issues and we will triage it appropriately from there? I will close this one. Thanks!\n. Will close this one as it seems to be solved. \n. @BingyuLiu in addition, https://docs.microsoft.com/en-us/dotnet/core/api/index contains the .NET Core API reference documentation. \nWith this and @svick answer, I will close this issue. \n. @Seany84 this seems to be related to VS tooling and https://github.com/aspnet/tooling/issues seems like the correct place for it. I will close this one, can you please open it (if it still repros) on the repo I linked to? Thanks!\n. @jeff881208 wsdl.exe will create classes that are not compatible with .NET Core, so I guess the answer to your question would be \"no\". However, you may want to take a look at https://blogs.msdn.microsoft.com/webdev/2016/05/25/announcing-wcf-connected-service-for-net-core-rc2-and-asp-net-core-rc2/. This could be something that could help you in this case. \n. @svick I believe we should move this to dotnet/cli. Can you please open up an issue there and close this one? Thanks!\nEdit: sticky fingers and missed buttons. \ud83d\ude03 \n. @cartermp can you weigh in here? I believe the target to be used for .NET Core libraries is netstandard1.6.\n. OK, with that I think this is the correct answer. There is also guidance on https://docs.microsoft.com/dotnet/ on how to author libraries for .NET Core. Will close this issue. If you still need more help or have more questions, I suggest we open an issue on dotnet/core-docs repo to further discuss. \n. Thanks @mrmeek the issue you linked to seems like the same one. I will close this one as a duplicate of that one and that one also has the solution. \n. @yajore this issue has been opened on the dotnet/cli repo at dotnet/cli#3855. Closing this one as a duplicate. Please refer to the other issue.\n. @MisterJames there is already an issue in the CLI repo tracking this in dotnet/cli#3617. Will close this one as a duplicate. \n. @kovalikp I believe this will be solved once we fully migrate over to msbuild in the tooling. You can read the \"Changes to project.json\" blog post for more context. I will close this issue. If you feel it is still needed, can you please open it up on dotnet/cli repo? Thanks!\n. @FZ14 can you please open this issue on dotnet/cli? Thanks!\n. @MatthewR can you share your project.json?\n. Hi, can you please open an issue on the dotnet/cli repo and we will make sure that it gets redirected where needed? Thanks!\n. I believe that with the above comments all of the questions in this issue have been addressed, so I'm going to close it. If you believe it was in error, please reopen. \n. @BingyuLiu is this issue resloved with the link @mairaw provided in her comment?\n. Seems like this issue is not reproing anymore. Closing. If you still need help, please reopen. \n. @svick's explanation is correct. imports is used mostly for restore-time compatibility, not for build and/or run time compat. \nWith this, I will close this issue. @narenkv if you believe this is in error, please open a new issue on dotnet/cli repo. Thanks!\n. @mairaw good point. \n. Hm, seems like dotnet/coreclr#917 covers the work of porting to Alpine Linux. @markrendle you ok if we close this issue?\n. Closing this issue due to lack of response.\n. Ongoing development activity pushed a package to that feed which was incompatible with released versions of dotnet. Sorry about this. In order to resolve this, we've created a new feed called \"dotnet-release\" that will contain only the stable bits. It is recommended that you start using this feed in your CI scripts or on your dev machines. The getting started instructions on https://dot.net/core for Ubuntu are also being updated to reflect this. \nIf you are installing this on your dev machine, please make sure that you purge the previously installed package and then remove all of its dependencies using the following:\nconsole\nsudo apt-get purge dotnet-host\nsudo apt autoremove\nHere are the steps you need to do for Ubuntu 14.04:\nconsole\nsudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main\" > /etc/apt/sources.list.d/dotnetdev.list' \nsudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\nsudo apt-get update\nsudo apt-get install dotnet-dev-1.0.0-preview2-003121\nHere are the steps you need to do for Ubuntu 16.04:\nconsole\nsudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main\" > /etc/apt/sources.list.d/dotnetdev.list' \nsudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\nsudo apt-get update\nsudo apt-get install dotnet-dev-1.0.0-preview2-003121\n\nNote: if you happen to run into a problem with HTTPS transport when doing these steps, please be sure to install the apt-transport-https package. \n. @jskeet the pleasure is all mine. :) \n. @jskeet would it be OK if we closed this issue? Seems like the core underlying issue has been addressed.\n\n@yajiya if you are thinking about how to run apps in production, we have guidance on that: https://docs.microsoft.com/en-us/dotnet/articles/core/deploying/index. \n. This is fixed by #225 .\n. @paulopez78 I'm of a split mind on this. On one hand, I agree with you that people will get confused by this error (which comes from the way El Capitan changes permissions on /usr directory) and that they would benefit from gettting this on the getting started page. On the other hand, this is not a clear tooling/.NET problem but brew problem. This means that we would have to match any brew known issues on the getting started page, which would inflate the instructions (text) that people need to read. \nI'm thinking we could put this into the \"Known issues\" document and then point people in the getting started instructions to that document. Something like (provisional text): \"if you encounter any issues with installation, please check out the Known Issues document\". \nThoughts?\n. OK, so I think that adding this to the known issues section and will be updating the site with the warning and the link. I think this is a better solution. \n. This is now added to the known issues: https://github.com/dotnet/core/blob/master/cli/known-issues.md#problems-using-brew-to-link-openssl-after-uprading.\n. @ryanelian can you please open a new issue on aspnet/tooling and close this one? That repo will be a better place for this issue. Thanks!\n. Actually, now that I look at the issue, I believe this should be mitigated with moving to csproj. Will close this. Please reopen if you feel this was in error. \n. /cc @richlander @leecow to comment on the ARM support.\n. @leedhi can you please open this issue on dotnet/cli and close this one? That repo is a much better place for this issue. \n. I don't know if the exe (bundle) supports a silent install though. I'm pretty sure that each individual MSI within it supports it. \n. Opened this one up on dotnet/corefx#10277. Closing this one. \n. Thanks @svick. Closing this one. \n. /cc @richlander @leecow \n. This is by design in the current incarnation of dotnet tooling. You need to have global.json in order for the restore operation to find your P2P references. \n. LGTM merging...\n. Closing this as our workaround will be to manually link into /usr/lib. These will be in the updated instructions on the Getting Started website. \n. @richlander @leecow can you comment on this please?\n. This is by design as the installer is side-by-side by default. \n. /cc @richlander @leecow for the update\n. Given the lack of activity, I'm closing this issue. Please reopen if more help is needed. \n. LGTM\n. As @dmccaffery indicated, this is a known issue and OpenSSL is needed. I will close this issue. If you still require help, please reopen the issue on the dotnet/cli repo. Thanks!\n. :shipit: I need to add a PS version of this as well\n. @zeusro did you install all of the required dependencies?\n. @h3smith which shell are you using? Also, can you please check if the /etc/paths.d/dotnet file is in its place?\n. @ellismg did we up the libunwind version number by any chance for 1.0.1, do you know?\n. :shipit: This was also a sample for corert back in the day so that's why it was...messy. :))\n. If you're asking me if the Dockerfile is good, yes, it looks good.\n. Let's close until I'm ready.. A question: do we want to actually start anew and show off the easier new csproj syntax for these samples? They are pretty basic, so it shouldn't be a problem. I can make that PR.. LGTM then. This can also help: https://github.com/dotnet/cli/blob/rel/1.0.0/Documentation/ProjectJsonToCSProj.md. @richlander a \"glob\" as a term that refers to a pattern that qualifies 0 or more items to be worked on is a pretty known term. It could be that it is jargon, but still it is something that people use. . @richlander changed the title. As agreed, let's merge this first and then I can move them around. . The installers are hardwired to install to a specific location due to our SxS model requirements. As @Petermarcu said, if you need to install into a specific location, you can use the zips and/or the install script. \nWe have an issue to remove that option from the Windows installer to not confuse users. . We will fix this with returning the RC4 page but we will point users to install RTW bits to keep them current. . @richlander I would like to avoid people installing RC4 when we released RTW. The main rationale would be that I would like to decrease potential user frustration when they run into issues that we actually solved in RTW. . I already asked the VS 4 Mac folks on whether this would be OK which is why I made this change. \nI believe that the long-term plan should be that VS 4 Mac is tested against release versions of the Core SDK with the preference for stable version where/if possible. \nThoughts? . I believe @tompazourek means the Preview 2 bits. The whole archive is @ https://github.com/dotnet/core/tree/master/release-notes/download-archives. . Can we have versions? OSX already contains a copy of libssl, but we need a higher one.\n. Can we point people to the getting started page or is this not done in Release notes?\n. @leecow works like a charm!\n. We need to add this link prior to merging. @danroth27 needs to give us the link when the UE person is done with writing the doc. \n. I don't know if it is. Could be a remnant of something else. Though I'm pretty sure @leecow ran into something similar recently on Win7 vanilla machine.\n. https://github.com/dotnet/core/blob/master/roadmap.md here, I will link, that's a good point.\n. WTF are \"reverse forwarders\"??\n. Do we have VB?\n. RHEL, CentOS, Fedora, Ubuntu 14.04, Ubuntu 16.04, Debian 8.2, Linux Mint. You need to put them all in. :)\n. This is a good point @akoeplinger. \n. This here was done because of CoreRT. Since this is now a pure IL app, you could do something like String.Join(args, ' ') to get the final message to display. :) \n. This link is non-existent anymore. You should point to dot.net/core. . \"cd into it\" would sound somewhat better than \"go into it\". . Just as a curiosity, would Debian work as well?. ",
    "voltagex": "And now ironically I think it's this page that's causing a search \"dnvm hello world\" to link to a page that doesn't exist any more. (https://dotnet.github.io/core/getting-started/ instead of https://dotnet.github.io/getting-started/)\n. ",
    "jameswalkoski": "Related:\nThe .NET Core Contributor Info links on this page are broken: https://github.com/dotnet/corefx/wiki\nProject priorities: https://github.com/dotnet/coreclr/blob/master/Documentation/project-priorities.md\nContribution guidelines: https://github.com/dotnet/corefx/blob/master/Documentation/contributing.md\n. ",
    "Petermarcu": "@cartermp, I took a stab at making these updates. The only one I couldn't find better wording for was the relationship between .NET Core and .NET Framework. I'll keep thinking about how to explain that better.\n. This should probably be opened in the Nuget/Home repo.. These templates are definitely in the works and as @psibernetic mentioned, they are currently under web. @Pilchie, can you confirm we're moving these to a more central location?\n. You can also run dotnet .  A portable app can run on any os and depends on the shared framework for the target platform being there. Currently, the way to get an executable app is to standalone and specify the target runtime ID in project.json. Remove, type: Platform from the netcore.app package reference and add a runtimes section with the right values such as win7-x64.\n. You can also specify them with a single RuntimeIdentifier element:\n<PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>netcoreapp1.1</TargetFramework>\n    <RuntimeIdentifier>win10-arm64;win10-x64;debian.8-x64</RuntimeIdentifier>\n  </PropertyGroup>\nAs @davidfowl mentioned, we're looking into some alternate models that don't require changing your project in order to publish a standalone app or for a specific runtime.. @albertromkes , Is the only thing blocking you now the arm32 support so you can run the published output on RPi3? That will be coming soon.. There is a zip of Ubuntu arm32 binaries linked here: https://github.com/dotnet/core-setup/issues/725#issuecomment-268705518\nYou could try running on that :). I thought they were adding that to the VS 2017 MSBuild story. Maybe not?. @srivatsn can you confirm?. There is a bug in the 1.0/1.1 tooling where the path it shows at the end of publish didn't point to the location of the published app. Curious if that's what people are hitting. You have to look in bin\\Release\\<TargetFramework>\\<RuntimeIdentifier>\\publish.. The best way to track the work on .NET Native is on the repo: https://github.com/dotnet/corert. Feel free to open issues and even contribute there if you'd like. I'm going to close this issue here. You can see here for example, there are instructions for Ubuntu and OSX.\n. Yes, this experience is not rounded out yet in the tooling. As xproj gets aligned with csproj in future previews, this experience will start working.\n. Do other dotnet commands work? Which script did you run?\n. Closing this issue as its tracked in the repo where the fix needs to be.\n. @barrytang , This looks like an issue with the VS bits. Those issues are tracked internal to Microsoft. @barrytang can you let folks know if this is still an issue in newer builds and when it may be addressed?\n. Correct. .NET Core 1.0 doesn't have ARM support. It is in the roadmap and we have many community members working with us on adding ARM support so I hope we'll have something soon.\n. Looks like this conflicts with the updates to use the 1.0.0 version which also addressed indentation to match the templates.\n. Looks like this conflicts with the updates to use the 1.0.0 version which also addressed indentation to match the templates.\n. Are you able to move to the previews of VS 2017? There were a lot of issues in the Preview tooling in VS 2015 around references. Many have been addressed in VS 2017 and if they aren't thats where people will want to know very soon so they can be fixed.. Glad you got past it. Tons of things already work better in 2017 and it's getting better everyday. I think another prerelease update to RC3 is coming very soon with more fixes.. @piotrpMSFT , Can you take a look at this and get this issue files in the repo where the bug exists? core-setup or cli?\n. Thanks for reporting this issue. Do you mind filing it in the http://github.com/dotnet/coreclr repo? The code lives there: https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/String.cs#L2378\n. @leecow , is this still actionable and the direction you want to go?. @barrytang @Pilchie \n. @Eilon \n. Hi @jan-johansson-mr,\nI haven't tried it with creating a NuGet package the way you are trying to do it. I was able to get it working without it by creating this folder structure:\nProjectRoot\n| src\n_|_ app\n__| Program.cs\n__| project.json\n_|_ library\n__| Library.cs\n__|__ project.json\n- Run dotnet new -t lib in the library folder and dotnet new in the app folder. \n- Update the contents of the apps project.json to reference the library by adding this to the dependencies:\n\"library\":{\n      \"version\":\"1.0.0\",\n      \"target\":\"project\"\n    }\n- Update the Program.cs to call something in the library\n- Run dotnet restore from the library folder.\n- Run dotnet restore from the app folder.\n- Run dotnet run from the app folder.\n- You should see the result of whatever method you called in the library.\nLet me know if this worked or didn't work for you.\n. Yeah, I look forward to the next rev of the tooling. I hope a lot of things will get easier.\n. Did you try \"dotnet App.dll\"?\n. Daily builds are being published here: https://github.com/dotnet/core-setup\nI've had .NET Core running on Win10 IoT Core for a few months now. I published an app from my Windows machine using a matching framework, extracted the zip from the links on that page and was up and running.\nGive it a try and let us know how it goes. Should run great! :). BTW, I followed the instructions here to get it all configured on my Pi 3. https://developer.microsoft.com/en-us/windows/iot. I got an email but dont see the comment here so I'm putting it in: \n\n\n@Petermarcu I am tryign to get an empty ASP.NET Core running on W10 IoT. I've downloaded the daily build for Windows arm32 and extracted it. Then, when I run the dotnet tool, it gives me the following error:\nU:\\netcore\\dotnet\\dotnet.exe : Did you mean to run dotnet SDK commands? Please install dotnet SDK from:\n+ CategoryInfo : NotSpecified: (Did you mean to...tnet SDK from: :String) [], RemoteException\n+ FullyQualifiedErrorId : NativeCommandError\nhttp://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\n\n\nThis is because the zip files are only for the runtime. They don't contain the SDK. There are a few options. \nI wrote the app on another machine and published to IoT Core. The app didn't have any native code in it. Just managed code. I published it and copied it over to the IoT Core machine and ran it by calling dotnet myapp.dll.\nThe alternative way to do it is to take an existing SDK like this one: https://go.microsoft.com/fwlink/?LinkID=834991\nAnd overwrite everything that is also in here: https://dotnetcli.blob.core.windows.net/dotnet/master/Binaries/Latest/dotnet-win-arm.latest.zip\nThat should replace all the native components and give you a runnable SDK on the IoT Core machine.\n. @pwoestmann , I finally got to this and wrote instructions for both Win10 IoT Core and Linux on the Raspberry Pi. Things are still early but you can definitely get code running :) See my doc here: https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md. Give it a try and let me know if it works out for you.. Yeah, it was surprisingly straight forward :) very soon here we'll have a story for doing everything on the Pi although it will likely always be a better experience to develop elsewhere and deploy to the Pi.. @BitawareUnleashed, I believe I actually extracted it on another machine and just copied the bits over using WinSCP.. I'm going to close this issue now as we have published instructions. I plan on making some updates to them soon but this should all be unblocked now.. @BitawareUnleashed, I run \nset PATH=<location_where_I_put_dotnet.exe>;%PATH%. Is your project a csproj or a project.json? Are you using VS 2017?. Did you do the step in my writeup to update the helloworld.runtimeconfig.json in the app folder to say 1.2.0-beta-001291-00 in it?\nI think alternatively I think you could launch the app like this:\ndotnet --fx-version 1.2.0-beta-001291-00 MyApp.dll\nI haven't tried the latter but it could work and would be nicer :)\n. @0807JPatel the way the instructions are written, you will get an exe you can just run.. Btw, it should already support a quiet install. Visual Studio installs it silently I believe.\n. I just downloaded it and installed it from an admin command prompt by calling the exe with -q . Worked like a charm.\nDotNetCore.1.0.0-SDK.Preview2-x64.exe -q\n. I think this was addressed with my commit https://github.com/dotnet/core/commit/427b2f13a3b218d5fa309f6a12fa7b8b307ce20d\nI'm going to close this assuming it was.\n. Totally agree. Our daily builds https://github.com/dotnet/core-setup/blob/master/README.md have an ARM build. It's still early but it is starting to come up. I can't speak to the quality of the builds yet. Happy to have community help on that effort as well.\n. @danmosemsft \nThis is something we're looking into now and plan to generate a list as well as reach out to many of the most popular packages to make sure they can run on .NET Core.. There are two things here:\n\nWe've asked for the ability to filter packages on NuGet.org by the platform you search for. \nWe're working on adding rules to NuGet to allow you to import packages that didn't know about .NET Standard but we know are highly likely to be compatible. \n\nYou can follow the work in the https://github.com/dotnet/standard and ask more question there if you have them.. @leecow \n. Did you try https://www.nuget.org/packages/System.Management/4.5.0-preview1-25914-04 . Its still in preview but enables System.Management API's on .NET Core 2.0. . @janvorli , Can you make sure we have an issue tracking this in the coreclr repo. @rv82 , we're actively investigating this.\n. @DamianEdwards @piotrpMSFT @livarcocc , Any of you guys know what may have changed to cause a required runtimes section?\n. @DamianEdwards @piotrpMSFT @livarcocc , Any of you guys know what may have changed to cause a required runtimes section?\n. Yeah, that would do it. @yishaigalatzer do you know why the nuget tooling is doing that?\n. Yeah, that would do it. @yishaigalatzer do you know why the nuget tooling is doing that?\n. @richlander , do we have a known issues list for the release?\n. @richlander , do we have a known issues list for the release?\n. Closing this and pointing to 1.0.2. https://github.com/dotnet/core/issues/294. Closing this and pointing to 1.0.2. https://github.com/dotnet/core/issues/294. Tracking making this easier here: https://github.com/dotnet/coreclr/issues/7994\n. Tracking making this easier here: https://github.com/dotnet/coreclr/issues/7994\n. @yizhang82 , Any ideas? Where is the best place for people to file issues and questions around UWP apps?. @yizhang82 , Any ideas? Where is the best place for people to file issues and questions around UWP apps?. Thanks. I'm going to close this issue here. @YingjieT, Thanks for reporting the issue and if there are more follow ups, go ahead and send mail to dotnetnative@microsoft.com. @luqunl, can you make sure you are tracking this in your issue lists.. Thanks. I'm going to close this issue here. @YingjieT, Thanks for reporting the issue and if there are more follow ups, go ahead and send mail to dotnetnative@microsoft.com. @luqunl, can you make sure you are tracking this in your issue lists.. @blackdwarf , Anything left here. Are you wanting to clear up the conflicts and update the PR or just close?\n. @blackdwarf , Anything left here. Are you wanting to clear up the conflicts and update the PR or just close?\n. @blackdwarf , ready to commit or should we close this until you are?. @blackdwarf , ready to commit or should we close this until you are?. @svick is correct. It's not just OSX, its all OS's the tools have been going through major changes. We are going to ship an update to the Mac installers very shortly to fix some issues they encountered on Sierra but those tooling packages will still be preview.\n. @svick is correct. It's not just OSX, its all OS's the tools have been going through major changes. We are going to ship an update to the Mac installers very shortly to fix some issues they encountered on Sierra but those tooling packages will still be preview.\n. @milijan , thanks for the pointer. Definitely something to add to the roadmap with respect to data scientists and their ability to use .NET.\n@richlander \n. @milijan , thanks for the pointer. Definitely something to add to the roadmap with respect to data scientists and their ability to use .NET.\n@richlander \n. @richlander , Can you review?\n. @richlander , Can you review?\n. Thanks @mairaw . @richlander look good?\n. Thanks @mairaw . @richlander look good?\n. Thanks all!\n. Thanks all!\n. @danroth27 Whats the best place to ask this question where some ASP.NET folks can help?\n. @danroth27 Whats the best place to ask this question where some ASP.NET folks can help?\n. It hasn't released yet but you can get the latest version of it off the dev MyGet feeds here: https://dotnet.myget.org/feed/dotnet-core/package/nuget/Microsoft.NETCore.App/1.1.0-preview1-001100-00\n. It hasn't released yet but you can get the latest version of it off the dev MyGet feeds here: https://dotnet.myget.org/feed/dotnet-core/package/nuget/Microsoft.NETCore.App/1.1.0-preview1-001100-00\n. LGTM\n. LGTM\n. At this point we're recommending people to move to VS 2017 which has the released support for .NET Core tooling.. At this point we're recommending people to move to VS 2017 which has the released support for .NET Core tooling.. @allenz0810, if you can get the install logs that show what the error is, perhaps we can get a clue as to what's going on.. @allenz0810, if you can get the install logs that show what the error is, perhaps we can get a clue as to what's going on.. I see you posted them and NuGet is failing to install. To get to the next level I think we'd need the install logs for the NuGetVisualStudio14_rc2_39.msi.\nApplying execute package: NuGetVS14, action: Install, path: C:\\ProgramData\\Package Cache\\{08D9540E-77B1-37B3-909A-813DAA5523D0}v3.5.0.1484\\packages\\NuGetVisualStudio14_rc2_39.msi, arguments: ' ARPSYSTEMCOMPONENT=\"1\" MSIFASTINSTALL=\"7\" SKIP_SETUP=\"1\"'\n[170C:2344][2016-10-18T10:30:11]e000: Error 0x80070643: Failed to install MSI package.\n[170C:2344][2016-10-18T10:30:11]e000: Error 0x80070643: Failed to execute MSI package.\n[120C:06C4][2016-10-18T10:30:11]e000: Error 0x80070643: Failed to configure per-machine MSI package.\n[120C:06C4][2016-10-18T10:30:11]i319: Applied execute package: NuGetVS14, result: 0x80070643, restart: None\n[120C:06C4][2016-10-18T10:30:11]e000: Error 0x80070643: Failed to execute MSI package.. I see you posted them and NuGet is failing to install. To get to the next level I think we'd need the install logs for the NuGetVisualStudio14_rc2_39.msi.\nApplying execute package: NuGetVS14, action: Install, path: C:\\ProgramData\\Package Cache\\{08D9540E-77B1-37B3-909A-813DAA5523D0}v3.5.0.1484\\packages\\NuGetVisualStudio14_rc2_39.msi, arguments: ' ARPSYSTEMCOMPONENT=\"1\" MSIFASTINSTALL=\"7\" SKIP_SETUP=\"1\"'\n[170C:2344][2016-10-18T10:30:11]e000: Error 0x80070643: Failed to install MSI package.\n[170C:2344][2016-10-18T10:30:11]e000: Error 0x80070643: Failed to execute MSI package.\n[120C:06C4][2016-10-18T10:30:11]e000: Error 0x80070643: Failed to configure per-machine MSI package.\n[120C:06C4][2016-10-18T10:30:11]i319: Applied execute package: NuGetVS14, result: 0x80070643, restart: None\n[120C:06C4][2016-10-18T10:30:11]e000: Error 0x80070643: Failed to execute MSI package.. @rrelyea @livarcocc . @rrelyea @livarcocc . @richlander @bleroy , should we open an issue on the docs repo for a sample on this to track it there?. @richlander @bleroy , should we open an issue on the docs repo for a sample on this to track it there?. @piotrpMSFT @rrelyea , should this be opened in the cli or nuget repo?\n. @piotrpMSFT @rrelyea , should this be opened in the cli or nuget repo?\n. Can you move it over there, reference this issue and close this issue?\n. Can you move it over there, reference this issue and close this issue?\n. Closing this and pointing to 1.0.3. https://github.com/dotnet/core/issues/391. Closing this and pointing to 1.0.3. https://github.com/dotnet/core/issues/391. @tanaka-takayoshi Try this for bleeding edge Fedora 24 binaries.\n. @tanaka-takayoshi Try this for bleeding edge Fedora 24 binaries.\n. @tanaka-takayoshi , yeah, its definitely bleeding edge. You can use the existing SDK's on other runtimes. You can likely replace the contents of dotnet/shared/Microsoft.NETCore.App/1.0.1 with the contents from that tar.gz and it should work.\n. @tanaka-takayoshi , yeah, its definitely bleeding edge. You can use the existing SDK's on other runtimes. You can likely replace the contents of dotnet/shared/Microsoft.NETCore.App/1.0.1 with the contents from that tar.gz and it should work.\n. @piotrpMSFT @davidfowl I believe this is a known issue with the project.json world. Do we need any issue tracking this somewhere or is it addressed in the msbuild world?\n. @piotrpMSFT @davidfowl I believe this is a known issue with the project.json world. Do we need any issue tracking this somewhere or is it addressed in the msbuild world?\n. Thanks, lets make sure we get an issue in a place where we can track it as nobody is tracking issue on this repo.\n. Thanks, lets make sure we get an issue in a place where we can track it as nobody is tracking issue on this repo.\n. @piotrpMSFT @rrelyea, any input here?. @piotrpMSFT @rrelyea, any input here?. @tmat , is there a good place to have this conversation? It would be good to point this issue there and close it.. I opened an issue here to track this: https://github.com/dotnet/corefx/issues/14897. That is correct. 64-bit is the only Linux architecture we currently build for. ARM will be coming next.\n. You shouldn't need new tooling. If you follow the instructions here you can update to the preview of 1.1 with the existing tools.\n. I believe this is already added back in .NET Core 1.2. @gkhanna79 can you confirm and close if thats true?\n. Great @Luo-Liang I'm going to close this but sounds like we're on a good path to having what you need.\n. @Eilon , Where's the best place to track this?. @richlander , look good?\n. Thanks!\n. @gkhanna79 , PTAL\n. @sgaikar , I don't see a log, can you please share?\n. I'm going to close this assuming you got past it. Reopen with the log if you still need help.. Thanks for pointing it out and making the fix.\n. @terrajobst , PTAL\n. @terrajobst , can you take a look?. @terrajobst , does this diff look correct?. Thanks for contributing the fix! The duplicate PR was merged. #343.\n. Ok, sounds pretty unanimous that its a missing 1.1.0 install. @krzychu2 I'm going to close this. Let us know if getting 1.1.0 installed doesn't fix the issue.. In .NET Core 2.0, this will not be an issue any longer as we removed this dependency. Beyond that, I don't think I can do anything more to address this so I'm going to close it. Thanks for the feedback!. @wcdeich4, .NET Standard 2.0 will have a ton of API's added back. There are two things to try.\n\n\nTry to add an imports clause to force NuGet to pick the net20 asset and run in on .NET Core. That may just work. Many libraries do depending on which code paths you use.\n\n\nIf it doesn't, I'd be curious what the gaps are and whether .NET Standard 2.0 support in .NET Core 2.0 will address it. @danmosemsft \n\n\n@gimlichael @ciel, I've sent an email to the Visual Studio folks about the errant folder to make sure they are aware of it and to get it investigated.\n. The folder issue is known and being tracked by the Visual Studio team. I believe it will be fixed in the next release.\nI'm going to close this as I believe all the feedback in here has been farmed out or addressed. Thanks All!. It looks like you have a preview of 1.1.0 installed but you are actually building against 1.1.0 without a pre-release. Is there a reason you are trying to specify a *? Are you still having trouble? \n@schellap, do you agree with my suspicion?. I'm going to close this now. Please try the fully released tools at http://dot.net if you are still having trouble.. I just submitted a PR that will enable both project.json and msbuild tooling to build the samples. https://github.com/dotnet/core/pull/417 . For the transition period that should help and then we can delete the project.json's when the time is right.. I think this was fixed.. I think this was fixed.. Thanks!. Thanks!. Thanks, just noticed this PR. Sorry for the delay over the holidays.... Thanks, just noticed this PR. Sorry for the delay over the holidays.... Still focused on services and command line applications.. Still focused on services and command line applications.. I think we're going to need more info to get any further here. I'm going to close this. Please reopen if you can provide any more data.. I think we're going to need more info to get any further here. I'm going to close this. Please reopen if you can provide any more data.. @barrytang , Anything you can add here? Do you know who the right people are to pull in to help out?. @ChristianRRL,  @mhutch, it sounds like this issue has been addressed. I'm going to close. Please reopen if that is not the case.. @ChristianRRL,  @mhutch, it sounds like this issue has been addressed. I'm going to close. Please reopen if that is not the case.. This is an error you are getting from VS for Mac?. This is an error you are getting from VS for Mac?. @piotrpMSFT , Another ref count on updating the links to give MSBuild based tooling on the download links.. @JonDouglas , BTW, you shouldn't have to install the VS installer to get a working .NET Core environment from the command line. There is a point in time problem of us having a project.json and csproj based. Very soon the MSBuild based one will take over and you should have all the right links.\nThere is also a discussion about current vs LTS being the default. There is tension both ways there and we're working through it.. @JonDouglas , much appreciated!. @JonDouglas , much appreciated!. Yeah, the versioning is super confusing. As far as I know, only the SDK that comes through the VS installers is updated to use csproj. I assume thats how you got it. I know the team was trying to decide when to flip the standalone SDK's for all the OS's over to the MSBuild based tooling. @piotrpMSFT , where did you guys land on that?. Things should get cleaned up with the next release as the tooling will RTM and then next refresh of the sites and links should remove a lot of the confusion. I'm going to close this but please file an issue pointing to any additional confusion after the VS 2017 Release that will be coming out soon.. Things should get cleaned up with the next release as the tooling will RTM and then next refresh of the sites and links should remove a lot of the confusion. I'm going to close this but please file an issue pointing to any additional confusion after the VS 2017 Release that will be coming out soon.. Thanks. Thanks. We haven't officially doc'd it but we should. I'll look into that. It does run in very constrained environments including low end phones and pretty small IoT devices that are able to run Linux or Windows. Do you have the constraints you are dealing with?. We haven't officially doc'd it but we should. I'll look into that. It does run in very constrained environments including low end phones and pretty small IoT devices that are able to run Linux or Windows. Do you have the constraints you are dealing with?. That should be no problem. We're about to publish tar.gz's with builds for Linux ARM-32. You will need those for running on Pi 3. I've been running a website on both a Pi 2 and Pi3 for a while now and it works great. The link to them will show up here: https://github.com/dotnet/core-setup. @gkhanna79 , when do you think those will be available?\nThe general number I've heard a few times is around 10MB of RAM is what is required for helloworld to run on .NET Core. It also requires an OS to run on (*nix, Windows, OSX)\nThe real question then is what stuff on top of the base are you using and what kind of performance are you looking for? What is acceptable?. That should be no problem. We're about to publish tar.gz's with builds for Linux ARM-32. You will need those for running on Pi 3. I've been running a website on both a Pi 2 and Pi3 for a while now and it works great. The link to them will show up here: https://github.com/dotnet/core-setup. @gkhanna79 , when do you think those will be available?\nThe general number I've heard a few times is around 10MB of RAM is what is required for helloworld to run on .NET Core. It also requires an OS to run on (*nix, Windows, OSX)\nThe real question then is what stuff on top of the base are you using and what kind of performance are you looking for? What is acceptable?. @bgribaudo, yes, the runtime is RTM but the sdk tooling is still in preview.. @bgribaudo, yes, the runtime is RTM but the sdk tooling is still in preview.. Closing this in favor of: https://github.com/dotnet/core/issues/532. Closing this in favor of: https://github.com/dotnet/core/issues/532. @terrajobst , thoughts on @enricosada 's question?. @terrajobst , thoughts on @enricosada 's question?. Actually, I don't think thats where this work is happening. Its not about the compiler's perf, its more about the end to end pipeline. Its really not in a single repo but it is probably not really in the standard repo at all. @terrajobst, what should this link point to?. Actually, I don't think thats where this work is happening. Its not about the compiler's perf, its more about the end to end pipeline. Its really not in a single repo but it is probably not really in the standard repo at all. @terrajobst, what should this link point to?. I think the work is spread across dotnet/roslyn-project-system, microsoft/msbuild, dotnet/sdk, dotnet/cli, and dotnet/roslyn. There are probably others :). Maybe we just shouldn't point to where people can follow the work? :P. I think the work is spread across dotnet/roslyn-project-system, microsoft/msbuild, dotnet/sdk, dotnet/cli, and dotnet/roslyn. There are probably others :). Maybe we just shouldn't point to where people can follow the work? :P. This one doesn't need a CLA. Thanks for the update.. This one doesn't need a CLA. Thanks for the update.. Are you using VS Code to launch the debugger?. Are you using VS Code to launch the debugger?. @replete the reason I asked was to make sure the right people get looped in. @DustinCampbell @gregg-miskelly any idea whats going on here?. @replete the reason I asked was to make sure the right people get looped in. @DustinCampbell @gregg-miskelly any idea whats going on here?. @richlander @blackdwarf for the getting started experience. Agreed we need to make it seamless for all our supported developer environments.. Thanks for the feedback @replete . I'm going to close this issue as its tracked here: OmniSharp/omnisharp-vscode#837. @hikalkan, thanks for making the change. I'm going to close this as a duplicate of #399 but I'm not sure we really intended to point to Roslyn here. This work isn't about compiler throughput. Its about the end to end build pipeline of which Roslyn is only a small part.. @hikalkan, thanks for making the change. I'm going to close this as a duplicate of #399 but I'm not sure we really intended to point to Roslyn here. This work isn't about compiler throughput. Its about the end to end build pipeline of which Roslyn is only a small part.. I moved this issue to: https://github.com/aspnet/Mvc/issues/5657. Thanks!. Thanks!. @jpierson , Thanks for doing this. I just saw this after I submitted a similar PR today that makes the existing samples work both ways. Thoughts? I like the simplicity of keeping them where they are and that we can just delete the project.json's when the time comes. \nhttps://github.com/dotnet/core/pull/417. @jpierson , Thanks for doing this. I just saw this after I submitted a similar PR today that makes the existing samples work both ways. Thoughts? I like the simplicity of keeping them where they are and that we can just delete the project.json's when the time comes. \nhttps://github.com/dotnet/core/pull/417. Thanks. Looks like the other changes were already merged and I heard that @blackdwarf was going to go through them and simplify the msbuild even more based on improvements that were made in this version of MSBuild. I'll go ahead an close this PR now but again, thanks for making the PR. It was definitely a fix that was needed.. Thanks!. Please reopen if this is still a problem.. Project to Project references from different project types was one of the major challenges with the project.json tools. Many things didn't work and many things are being fixed in the MSBuild based tooling that shipped a Preview in Nov. \nSharing with .NET 4.6.1 as a Project to Project reference is likely best done through a library targeting .NET Standard as opposed to .NET Core. I'm not sure if all of those dependencies are targeting .NET Standard yet but it's probably the direction to aspire to. The MSBuild based tooling will allow you to reference a .NET Standard Library project from a .NET 4.6.1 project.. Great, which dependencies weren't ready for .net standard. You may be able to use imports to force them to be referencable.. Thanks!. Thanks!. @richlander . This is a fix to address this: https://github.com/dotnet/core/issues/363. Sure, let's merge this and then you can clean them up as a good example for people who migrate.. Thanks. Thanks for reporting this. This is a known issue and one that is being addressed. I don't know if there is a workaround for now but I'm going to consolidate the discussion here: https://github.com/dotnet/core/issues/360. Have you tried the VS 2017 RC tooling? Thats probably the better place to get started at this point and that is where all the bug fixes are going. https://www.microsoft.com/net/core#windowsvs2017. @barrytang , Making sure you see this in case you believe this will also be an issue in 2017.... @piotrpMSFT @gkhanna79 , do we need to update the libicu dependency in our runtime 16.10 apt packages and then flow them up through the CLI?. These are missing and we're working on making sure they build for the RTM release. Thanks for pointing this out. In the meantime, I posted some hacks to get up and running on 16.10 here if you are interested: https://github.com/dotnet/core/issues/496\nAlso, you may see a daily dev build show up here: https://github.com/dotnet/cli/tree/rel/1.0.0. Yeah, there is a lot of confusion here and we're working on what to do for the next release. \nSDK == Command line tools, Tools == Visual Studio in this context. The Visual Studio Tools releases install the SDK for you. That could be more clear. \nMaybe it shouldn't say Tools as that is implied by Visual Studio?\nThis is the place that is intended to be where you get the collection of .NET Core downloads all listed out.\nhttps://www.microsoft.com/net/download/core\n. Today the RTM of the tooling was released. You can look here . All the preview versions confusion should be gone. Everyone should be using the RTM bits now. https://www.microsoft.com/net/download/core#. @richlander , can you take a look. It's rough, early, and not intended to be perfect but I want to start pointing people to this to try things out.. @blackdwarf, can you take a look?. Thanks!. @truunk , thanks for the feedback. I've passed it on to the folks working on the template story. \nThe ultimate goal is to have a single library template that then gives you options on what you want it to be. In VS 2017, it probably wont get all the way there. In VS 2017 and beyond, project.json is gone. You do all your dependency references directly in your csproj file.\n@JeremyKuhne, Is working through Configuration/Settings as we speak. He is probably in a good position to give guidance on class library setting.. I believe all the feedback has been heard from this issue and plans are in place to address it. Thanks @truunk . I'm going to close this issue now. If the new docs come out and there is still confusion, lets open new issues so we can get fixes tracked for those.. I dont have all the context as I don't see the relationship to this issue but that looks like an MSBuild property so it would be in your csproj. \n<PropertyGroup>\n    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>\n</PropertyGroup>. Looks good. Thanks!. @sayedihashimi , I'm guessing this is because the yoeman generators are still producing project.json based projects?\n@AbhimanyuAryan , Can you try to run dotnet migrate ? That should convert project.json to GameReviewer.csproj and then you should be one step closer.\n@piotrpMSFT , The yoeman templates that shipped in the past may be good test cases for dotnet migrate. You should be able to use dotnet new to create new projects. I don't know the difference between whats supported there and what's in yoeman but @sayedihashimi should be able to describe the difference and the plans for the yoeman generators.. You can also create a folder and in that folder run dotnet new -t Web, dotnet restore, dotnet run to create, build, and launch an MVC site.. @DamianEdwards , is there where dotnet watch comes in?. @DamianEdwards , is there where dotnet watch comes in?. Looks like a good linked issue to track this. dotnet watch from aspnet is the solution to this.. Looks like a good linked issue to track this. dotnet watch from aspnet is the solution to this.. There are a few .NET Platforms out there. Portable Class Libraries has been the way to target multiple and that is evolving into .NET Standard Libraries. .NET Core is a concrete platform as is Xamarin. Sharing between them is done via .NET Standard Libraries or Portable Class Libraries. Create one of those and you should be able to reference it from your Xamarin Application.. There are a few .NET Platforms out there. Portable Class Libraries has been the way to target multiple and that is evolving into .NET Standard Libraries. .NET Core is a concrete platform as is Xamarin. Sharing between them is done via .NET Standard Libraries or Portable Class Libraries. Create one of those and you should be able to reference it from your Xamarin Application.. So far, we've only built in on Ubuntu and it worked great on a Raspberry Pi. I expect we will shortly be able to have something that will work on Raspian too.. So far, we've only built in on Ubuntu and it worked great on a Raspberry Pi. I expect we will shortly be able to have something that will work on Raspian too.. @janvorli @gkhanna79 . @janvorli @gkhanna79 . We're going to be changing some things such that we build linux binaries for ARM that will work on many different distros. That will address this.. We're going to be changing some things such that we build linux binaries for ARM that will work on many different distros. That will address this.. @kmleow it should work on either.. @kmleow it should work on either.. @valeriob - can you confirm what info you get on the development machine when you run dotnet --version?\nCan you also share the contents of your project?. @valeriob - can you confirm what info you get on the development machine when you run dotnet --version?\nCan you also share the contents of your project?. If you get the latest 2.0 sdk as a zip, extract it somewhere and call that version of dotnet for your commands, do you get a different result. That will make sure you are getting the 2.0 sdk.. If you get the latest 2.0 sdk as a zip, extract it somewhere and call that version of dotnet for your commands, do you get a different result. That will make sure you are getting the 2.0 sdk.. It should work. Go ahead and try the instructions at https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md and let us know if you hit any problems.. It should work. Go ahead and try the instructions at https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md and let us know if you hit any problems.. Raspberry Pi Zero doesn't work because it doesn't support armv7 instructions that .net core depends on. It should work on a raspberry pi.. Raspberry Pi Zero doesn't work because it doesn't support armv7 instructions that .net core depends on. It should work on a raspberry pi.. We don't currently have plans to remove the armv7 dependency and it's not really something that can be worked around. At some point we may decide to do that and/or would welcome a community effort to make it work.. We don't currently have plans to remove the armv7 dependency and it's not really something that can be worked around. At some point we may decide to do that and/or would welcome a community effort to make it work.. That is correct. You can use the .NET Core 2.0 SDK to build the app, copy it over to your Pi and run it.. That is correct. You can use the .NET Core 2.0 SDK to build the app, copy it over to your Pi and run it.. Technically, you can probably copy the SDK over to the Pi and see if it works. There is a decent chance but its not tested there and its performance is not ideal for development on the Pi.. Technically, you can probably copy the SDK over to the Pi and see if it works. There is a decent chance but its not tested there and its performance is not ideal for development on the Pi.. What do you mean wait until Pi has runtime(s) for the Raspbian OS? If you follow the instructions here: https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md the output should run on Raspbian.. What do you mean wait until Pi has runtime(s) for the Raspbian OS? If you follow the instructions here: https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md the output should run on Raspbian.. @shripathi-kamath , you are right. That doc should be updated to be more clear. @TVoc is correct that the Ubuntu instructions should just work. That said, that list there is focused on what you need to do development. If you look here you will see the list of runtime dependencies we have for Debian Jessie which I assume will be much closer to Raspbian.. @shripathi-kamath , you are right. That doc should be updated to be more clear. @TVoc is correct that the Ubuntu instructions should just work. That said, that list there is focused on what you need to do development. If you look here you will see the list of runtime dependencies we have for Debian Jessie which I assume will be much closer to Raspbian.. For others, this would be the command for the runtime dependencies: \napt-get install libc6 libcurl3 libgcc1 libgssapi-krb5-2 libicu52 liblttng-ust0 libssl1.0.0 libstdc++6 libunwind8 libuuid1 zlib1g. For others, this would be the command for the runtime dependencies: \napt-get install libc6 libcurl3 libgcc1 libgssapi-krb5-2 libicu52 liblttng-ust0 libssl1.0.0 libstdc++6 libunwind8 libuuid1 zlib1g. @Tealons not really, I dont think we've done a good job documenting the runtime dependencies. This list is also very explicit and many of those things are pulled in transitively by others.\nBTW, I missed your comment about making a PR to add ASP.NET scenarios to the how to doc. Go ahead. Just put it in a section at the end so the hello world example still flows and then people can add onto it with ASP.NET.. @Tealons not really, I dont think we've done a good job documenting the runtime dependencies. This list is also very explicit and many of those things are pulled in transitively by others.\nBTW, I missed your comment about making a PR to add ASP.NET scenarios to the how to doc. Go ahead. Just put it in a section at the end so the hello world example still flows and then people can add onto it with ASP.NET.. @TFTomSun, I believe it's being looked into.\n/cc @richlander @MichaelSimons. @TFTomSun, I believe it's being looked into.\n/cc @richlander @MichaelSimons. I'm going to close this issue now because as far as I know, everything is working on Raspbian for .NET Core 2.0. If there are specific issues, we should open a new issue to track them. Thanks to all who contributed to this issue and helped get things moving!. I'm going to close this issue now because as far as I know, everything is working on Raspbian for .NET Core 2.0. If there are specific issues, we should open a new issue to track them. Thanks to all who contributed to this issue and helped get things moving!. @leecow , what is the action item here? . @leecow , what is the action item here? . This is best tracked in the linked issue. Going to close it here.. This is best tracked in the linked issue. Going to close it here.. The community is actively working on bringing up builds for Android. You can see the issue here: https://github.com/dotnet/coreclr/issues/1097 . There are also active pull requests for it. Once the runtime is building for it, getting a bunch of the .NET Code like MVC running on top of it should just work.. The community is actively working on bringing up builds for Android. You can see the issue here: https://github.com/dotnet/coreclr/issues/1097 . There are also active pull requests for it. Once the runtime is building for it, getting a bunch of the .NET Code like MVC running on top of it should just work.. I'll go ahead and close this here and the work can be tracked on the issue I linked.. I'll go ahead and close this here and the work can be tracked on the issue I linked.. I believe this was fixed already by a different PR. Thanks for doing it though!. I believe this was fixed already by a different PR. Thanks for doing it though!. Closing this here. This is best discussed on the WCF repo dotnet/wcf#1200. Closing this here. This is best discussed on the WCF repo dotnet/wcf#1200. Probably best to track this on the issue you linked to. If as a community we are able to do the work to build for archlinux reliably, we'll be happy to start running end to end builds, running tests, and publishing outputs for it. I'm going to close this here because the first step is to get that issue in coreclr completed and then we can make it easy for folks to consume.. Probably best to track this on the issue you linked to. If as a community we are able to do the work to build for archlinux reliably, we'll be happy to start running end to end builds, running tests, and publishing outputs for it. I'm going to close this here because the first step is to get that issue in coreclr completed and then we can make it easy for folks to consume.. Thanks!. Thanks!. This should address the initial ask in https://github.com/dotnet/core/issues/386. This should address the initial ask in https://github.com/dotnet/core/issues/386. @richlander . @richlander . I just removed the SSE bullet. It's one of many other requirements that could be listed but are details beyond the high level requirements most are looking for.. @gkhanna79, @janvorli , Can someone take a look at why we don't just work on 8.7?. @jinhale , yes, we have focused our attention on what gets the most people up and running. We haven't gotten to every processor, kernel, c library, etc version of Linux. We are more that happy to work with community members who want to help bring up builds for other things.. That is good feedback. Where were you downloading from? This set of pages? https://www.microsoft.com/net/core#linuxdebian. Nevermind, I see you said that initially. I'll get your feedback to the folks that manage that site.. I'm going to close this. I opened an issue internally where the site is built to make sure it gets updated to clarify the x86, x64, etc on download links and instructions.. We don't have an official build of x86 (32-bit) Linux.. Samsung and the community have been working on building Linux x86. @jyoungyun do you have any advice on how someone could build an x86 linux build or can you point to a place they are being built?. @janvorli may also be able to give advice.. @terrajobst @weshaggard , is this one for corefx?. @piotrpMSFT . It works for me. Are you saying this link is down or one of the links on that page? https://www.microsoft.com/net/core/platform. ok :). I'm going to assume this was resolved and close it.. @AbhimanyuAryan , good feeedback and we're really glad you are interested in and trying out C#. \nThere are a few things happening. As with any project, it had to start somewhere and .NET Core started \"small\". Since 1.0, we have heard strong feedback that many of the types people know an love need to be available. So in .NET Core 2.0 we're adding a ton of them back.\nThere is a site here that will show you where API's are available. I added a link to the example you gave. We're adding it in .NET Core 2.0. https://apisof.net/catalog/System.IO.StreamReader..ctor(String)\nEarly builds of .NET Core 2.0 and its SDK are available here: https://github.com/dotnet/cli/tree/master\nThere is also a big effort called .NET Standard which will start to ensure you can reason about which API's are available everywhere and force more consistency. \nOne last thing is that we're looking at ways to just add references to libraries built for .NET Framework from .NET Core apps. They may or may not work depending on if they call into Windows API's or API's that just can't be brought to .NET Core. But they may also work and we want people to be able to try and unblock themselves.\nHopefully this helps. Again. Good feedback and I hope we can continue to make this easier.. At a high level, you can always use the newest SDK. It lets you build for older versions. You select the version for an application in its project file. Does that help or are you trying to do something different?. @AbhimanyuAryan yes, dotnet migrate entire reason for existing is to convert project.json projects to csproj projects.. We actually do have stable links. We just need to document how to construct them. We have a script here: https://github.com/dotnet/cli/tree/rel/1.0.0/scripts/obtain that we use in our own builds.\nWhat we're currently thinking to do is to host that script at a well known location, then build machines can grab the script they need, call it with the right arguments for the version they want to run on and the script will do all the work. \n@tannergooding , thoughts?\n@piotrpMSFT was just telling me something broke them for acquiring the runtime from core-setup builds but we should fix that. @gkhanna79 FYI. Yup, I agree on the complexity comment. I think you also need to be able to specify if you want the SDK or just the runtime.. @richlander , we should probably get this moved into a product repo where it can get tracked as real work.\nOn a side note, there is a pretty cool community project that solves some of this: https://github.com/faniereynders/dotnet-sdk-helpers. should have done this a long time ago but I moved this into the 2.1 milestone in the cli repo. https://github.com/dotnet/cli/issues/7769. I'm not sure it was intended to be retargetable. How did you launch the installer? \nIf you want to just put it in folder somewhere, I've found it much easier to just download the zip and extract it to that folder. You can also add that folder to your path if you want. Thats really all the installer does for you.\n@vivmishra . Yes, it's one of its mainline scenarios. Depending on how old it is and what technology it uses, those technologies may or may not be supported on .NET Core. But .NET Core is absolutely for server-side web services. See here for more info and links to documentation, getting started, etc.... https://www.microsoft.com/net/core/platform. I'm going to close this issue now as I think you got directed to the right place.. You may get more eyes from people that have more context on ASP.NET Core on this repo: https://github.com/aspnet/home. @AbhimanyuAryan , hopefully you are getting support on the aspnet repo. I'm going to close this here.. Thanks! @leecow . @leecow , There should probably be a link to the download pages. @jarenduan , Downloads for the runtime are here: https://www.microsoft.com/net/download/core#/runtime\n. You are right. @leecow , the content we point to in the archive link needs to have runtime download info not just SDK. https://github.com/dotnet/core/blob/master/release-notes/download-archive.md\n. @leecow , I looked at your last PR that went in. It looks like you updated some but not all the download pages. Was that intentional?. The SDK isn't RTM yet. It is tough to message through the brand name, if you click the runtime tab to go here, you will see RTM bits. https://www.microsoft.com/net/download/core#/current/runtime\nThis confusion should be over in the next month or two once the SDK tooling is RTM.. I'm going to close this issue. The feedback has been heard and we'll try to make sure we communicate dates in a hemisphere agnostic way :) If you find something confusing, please file an issue and point to it specifically and we can address it and close the issue when it's addressed.. Yup, I sent an email to the folks that own the schedule asking if changing it to Q2 and Q3 works for them. I'll get it updated when they confirm that change accurately represents the dates they are targeting at this point.. @Eilon @DamianEdwards @davidfowl can you guys help here?. @madskristensen @DamianEdwards , is this better to move to the aspnet repo?. Are you trying to install the the deb packages? Are you doing them in order? Which instructions are you trying to follow?. Whats the error you get when you run dotnet? Which tar.gz did you download?\nThere are yakkety instructions here: https://www.microsoft.com/net/core#linuxubuntu. I think I see what's going on. It doesn't look like there is a 16.10 SDK available. I'm not sure what the plan is there. I'm following up on that. \nThe best I can suggest is that we could hack together an SDK from and sdk tar.gz and combine it with a Runtime from a 16.10 runtime tar.gz. Let me get a little more info and then get back to you.. I haven't actually tested this but here is something you can try. The premise here is that there is a runtime that runs there and you have to trick the .NET Core SDK to run on it.\nTake the runtime archive from here:\nhttps://go.microsoft.com/fwlink/?LinkID=835024\nThen get the sdk archive here:\nhttps://go.microsoft.com/fwlink/?linkid=841687\nCopy the runtime into the sdk by doing this:\nCopy the contents out of shared\\Microsoft.NETCore.App\\1.1.0 folder in the runtime archive into two places in the sdk archive:\nshared\\Microsoft.NETCore.App\\1.1.0\nshared\\Microsoft.NETCore.App\\1.0.3\nThat should work. If it doesn't, also do the same thing for the host folder copying the host\\fxr\\1.1.0\\ contents into both the host\\fxr\\1.1.0\\ and host\\fxr\\1.0.1\\ folders in the sdk\nThis effectively makes it so you will be using a runtime that supports Ubuntu 16.10 to power the SDK tooling.\nAs I said, I don't have a 16.10 machine handy to try this but its similar to other steps I've followed to get things working in other places where the SDK isn't.\n. Woo hoo!. .Net Core (netcoreapp1.0) is a platform as is .NET Framework (net451). Platforms have various behaviors that may not be consistent across eachother. .NET Standard is a view over multiple platforms where you can say that you want to write code against what they have in common. So if both of those platforms support .NET Standard 1.6, then you can just write a library that targets netstandard1.6 and load it in both and have high confidence it will \"work everywhere\".\nIn short, if you are building general purpose libraries, use netstandardX.X. If you are writing libraries that will only work on .NET Core because you need to depend on behaviors that are only there, use netcoreappX.X. \nIn the end, we hope that only applications, not libraries need to use the platforms and all but a few special case libraries can be .NET Standard.\nHope that helps.. Hi @manikandan05 , I'm not sure I completely understand. You are correct that one library targeting net451 will be able to run on higher versions like net462. Are you asking whether you should be worried whether it will run on newer versions that come out? If so, it will always be loadable on future .NET Framework versions and those releases always maintain a very high compatibility guarantee.\nIf you are asking something else, can you clarify?. I dont know that that drop down does anything for you. For sure, it doesn't impact your .NET Core application. Those were preview tools and many of the aspects of the UI were not finished. You should try the most recent release of Visual Studio 2017 if you are getting started. It will get you on a much happier path.. What that is telling NuGet is to allow you to reference libraries that say they support dotnet5.6 and portable-net45+win8. In general, the goal should be to not need them. \n@DamianEdwards , is there still a need for ASP.NET 1.0 apps to have imports?. Yeah, I remember what happened. the 2.1 version was used everywhere in the buildsystem and the \".\" in there broke some of the version parsers. It was quickly changed to 2-1. As soon as these things aren't in preview (very soon), these packages should all become obsolete. \nThanks for posting the workaround. I think the problem is already addresses moving forward so I'm going to close this. Let me know if there was an additional action you think should be taken.. dotnet.exe from the dotnet folder loads the latest host on the machine which will be able to load any framework older than it.\nhost == the thing that launches your application on a framework.\nShared contains the \"framework\" which is a copy of everything in netcoreappX.X including the clr and bcl. You can have a bunch of applications that don't carry the framework with them and can all run on a shared copy of them. That is the default. If you publish standalone, then the whole framework will get put with your app.\n2.X.X is the 2.X.X SDK which is the next release, you must have gotten a daily build from the repo? That one will be msbuild based.\nI'm not sure why the SDK chose alpha and the framework chose beta but those match up.\nDoes that help?. Yeah, 1.0 is finishing up and will be releasing soon. Some of us are getting out in front to make sure we have a 2.0 sdk to start from when the larger team shifts focus.. Thanks!. Closing as dupe of https://github.com/dotnet/core/issues/505. @DamianEdwards , can you speak to #1 around package.json for npm?\nFor the Microsoft.NetCore.App reference, it is implicit in the csproj based on the TargetFramework.. @DamianEdwards . @mairaw @blackdwarf , this seems like something work a quick \"how to\" doc on given its different from .NET Framework.. Whats the error you are getting in the build?. Trying to narrow it down. Are you doing anything differently on Windows vs Linux? Are you using the command line in both places?\n@weshaggard any ideas?. @PeterKottas , my best recommendation is to use the RC4 build and migrate your solution to csproj instead of project.json. There were lots of bugs around referencing from library to library in the project.json world and the best thing to get support on is the new project system. There is a dotnet migrate command that should make it easy to convert. You just need to get VS 2017 Community installed for a VS experience that will also install the command line tools.\nHope that helps.. I'm not sure. @barrytang, any ideas?. Since it's been a few weeks, I'm going to close this for now. If its still an issue, please let us know.. The community has contributed changes to make it build and test on FreeBSD. Someone may be able to point you at instructions for how to build something you could use.. Yes, we are supporting the effort to run on FreeBSD and we run tests on it to ensure upstream changes don't regress it. Microsoft doesn't have any official plans to release a FreeBSD version but the community has done a great job making it happen.. @leecow ?. @DamianEdwards @muratg . Here is the correct link. It got moved to archives: https://github.com/dotnet/core/blob/master/release-notes/download-archives/rc4-download.md\n@leecow @richlander we should probably not move the docs so people referring to them aren't broken.. I believe there is just one SDK installer and you get 1.0.4 and 1.1.1 runtimes in it. There is something going on with the naming of the sdk file though.\n@livarcocc , Is the filename of the RTM SDK that is branded as 1.0.1 actually 1.1.1?. All the updates are VS 2017 and a lot of improvements were made there. I'm not familiar with that error.. @richlander, LGTM after @svick's nit is fixed.. I think the ask here is to be able do work on the IoT device, send the files up to a server to do the builds, and then get the resulting app back on the IoT device. This could totally be built on top of git or another DVCS where you can push your changes to the server, have that server build when it gets changes, and then have something on the device looking for new outputs and acquiring them. Its an interesting idea for making the dev workflow on slow devices that either can't run the sdk or if they do, its unusable. The other alternative is to just do the dev work on the more powerful machine and automate the push to the device. @raffaeler has a solution for this published here: https://github.com/raffaeler/deploytool. This is more of a developer experience/CLI feature request. I'm going to move this to the CLI repo.. Issue moved to dotnet/cli #7778 via ZenHub\n. Yes, use it on Ubuntu MATE. :) Which 'readme' are you looking at?. Yeah, go with Ubuntu MATE 16.04 if you are just starting from scratch.. @RamblingGeekUK, If you follow the instructions, you shouldn't need to install dotnet core on the pi. It is in the folder with your app.. @Tealons, which part of that do you want to do? In my quick read of it, I've done everything there except putting ASP.NET Core behing nginx.. I believe thats a bug that was recently fixed: https://github.com/dotnet/core-setup/issues/2157 . It should be fixed if you get the very latest SDK from here: https://github.com/dotnet/cli. @DamianEdwards , any thoughts? @Tealons can you share what you get when you run dotnet --version?. @eerhardt , this sounds like the bug you were telling me about with the mixed back/forward slask problem. Do you think this could be related? Can you point to that issue if so?. Awesome!. One piece of feedback, then I think this is good to merge. Thanks!. I did some searching and found a few good options from the Mono community that will probably work just fine on .NET Core.\nhttps://github.com/raspberry-sharp/raspberry-sharp-system\nhttps://github.com/AlexSartori/Raspberry-GPIO-Manager\nhttps://github.com/andycb/PiSharp\n@eerhardt any advice?. This was done in .NET Core 2.0. Closing now. https://github.com/dotnet/corefx/blob/master/Documentation/architecture/globalization-invariant-mode.md\n. Are you able to try with the RTM tooling and SDK? I'm not sure that anything is fixed but it's a better baseline to get support from. \n@gregg-miskelly @noahfalk , any advice on how to get symbols properly loaded from a package? Any know issues? Where should an issue like this be created?. @PeterKottas , we debug into release binaries when we get issues reported from people using the contents of nuget packages. For now I'm going to close this issue because it's pretty old and I'm not sure there is still an issue but feel free to comment again if we should continue to explore this.. I'm going to close this for now. You can get support for migrate here: http://landinghub.visualstudio.com/migrate-dotnetcore and it looks like @dsplaisted has pointed to the way to handle this.. @leecow can you review?\n@hqueue can you help on the minimum Tizen version?. Thanks all for the feedback. I have updated the PR to take it all into account.. WinPE hasn't been something we've considered for the project but if you want to try running .NET Core under WinPE it may work. It would be limited by all the limitations of WinPE but I don't know of a reason off the top of my head why a basic application wouldn't be able to run. What are you trying to do with it that needs to work in WinPE?. I would suggest creating a self contained .NET Core application and use it where you use your .NET 4.6 app. Yes, if you want to run .NET on Linux, .NET Core is a great path to that.. Thanks. I'll merge the updates. I'm guessing people will still be a little confused about where to put the package source. If you use the 2.0 SDK, it is supposed to drop a nuget.config with that source already there but it seems many people are doing something different. Probably using the 1.0 SDK?. @MaxMommersteeg , did you wan to finish this up? Looks like there are merge conflicts now. If not, I'm happy to take what you had and get it merged in.. Thanks!. @ericstj , any idea? Are win7-x64 and win8-x64 conflicting here?. One idea, I think I've seen scenarios where VS/VSCode and the command line fight with eachother on this. Could that be the case here? Do you have the project open in VS or VS Code? If so, can you try closing them, then run dotnet restore -r win8-x64. This should create the right project.assets.json and then you should be able to publish. If this isn't what is going on, someone will have to take a closer look.. I believe that is being addressed in the upcoming tooling releases.. @leecow, look good?. @lemmaa, I just updated it to community based on that. Thanks!. Go ahead. I think this is done and I'm going to close it.. @richlander . https://github.com/dotnet/core/issues/580. thanks. @rakeshsinghranchi . the installer needs to handle 1638 as success.. Lets use this issue to track this other issue to track getting this fixed. https://github.com/dotnet/core-setup/issues/1973#issuecomment-292273076. Going to close this out now.. Issue moved to dotnet/corefx #24478 via ZenHub\n. @m2b , Any chance you can share more about which version of everything you are running and how you installed it? Through the installer or from the tar.gz?. I'm going to close this because we need more info. Please reopen if you have more info you can share. Thanks!. Issue moved to dotnet/cli #7777 via ZenHub\n. @russellhadley any ideas here?. @russellhadley is there somewhere @maikebing can watch to see progress in this direction? \nI don't think we need to keep this issue open as we have it tracked here: https://github.com/dotnet/cli/issues/7737. It should be possible to reference it now in a .NET Core 2.0 project. I'm not sure if it will work, it depends on what those libraries do, but you can at least reference them now and see if they work for you.\nI'm going to close this out for now.. Which part didnt work? Referencing the dll, or the dll working on .NET Core 2.0?. Ok, that is always a possibility with pulling .NET Framework binaries into  :(  Running this on the binaries to get a report of what it needs that is missing may be a good net step. https://docs.microsoft.com/en-us/dotnet/standard/portability-analyzer. This is something we're looking to make possible in the upcoming update to VS. The plan is to let you reference the dll but depending on the dll, it may or may not work depending on what it depends on.. This is now possible from a .NET Core 2.0 project. I am going to close this. It's expected to work so if you hit any issues, please open a new issue with the specific details.. If you have the latest SDK's and Visual Studio, please open a new issue with the details of the issues you are encountering.. @barrytang , can you take a look?. @gkhanna79 . @danroth27 @saurabh500 any guidance?. This issue may get more traction on the aspnet/home repo.. This looks like 2.0. There is a hotfix for the OS that is required for the uCRT to be present. Can you make sure the OS is up to date? Was it a fresh install of the OS?. I believe this is the link https://support.microsoft.com/en-us/help/2999226/update-for-universal-c-runtime-in-windows. I'm going to assume this fixed the issue and close it out. Let us know if it didn't.. Any reason we don't just add the community distro's just to the list with the \"C\" label as community supported?\nPerhaps we should create a status page or issue for each distro to list current known issues and things rather than having to update the main roadmap as bugs get fixed, etc?. I think we can go with this.. I think the best approach would be to migrate your xproj to a csproj and get onto the 1.0 RTM tooling. After that, you should just be able to run dotnet build.\n@livarcocc . VS 2015 isn't a supported environment for .NET Core. It was in the early beta's but not anymore. This has also had no response for 3 months so I'm going to close it.. We use self contained to refer to these apps. Not standalone.. @kylesferrazza , how did you get the 2.0.0 bits? Through an installer?. I'd start with filing the issue on the dotnet/cli repo.. There aren't major changes that I know of. You can always pick up the latest daily builds and see if anything changes that impacts you. All in all though, the release is getting close and breaking changes are less and less likely to happen.. Yes, preview2 is on the myget feeds. In fact, if you just get the .NET Core 2.0 SDK from the dotnet/cli repo's readme, everything should be in there. https://github.com/dotnet/cli/blob/release/2.0.0/README.md. @ilFusta, you should just create the project using the .NET Core templates and modify the target framework in the csproj manually.. Yes, has to be 1.6 or lower for .net core 1.X. 2.0 or lower for .net core 2.0.. @tarekgh . @barrytang . closing this because it looks like we've solved the issue.. Great to hear you found it @Bartonjs should we open an issue to see if we can be more resilient here?. @barrytang . LGTM. Thanks!. Looks like this thread has concluded. I'm going to close it now.. @danroth27 , I think you need to get a 1.0.5 release page up. Is that correct?. It also works for me. I'm going to close. Please reopen if its still a problem.. @Eilon @DamianEdwards. Do you need to build it or would you be able to just use the ARM32 binaries we have available here: https://github.com/dotnet/core-setup ?. I saw this error with @Chrisboh today as well. In his case, the issue was that the version of the runtime the SDK was assuming didn't match the version of the runtime that was actually installed. \nYour strace log says the sdk is expecting 2.0.0-preview1-002111-00. Is that folder present and do you have the runtime you built there?. I'm going to close this out now. We're actively working on dotnet/source-build which will be the solution for building the full stack.. Issue moved to dotnet/corefx #24477 via ZenHub\n. I believe we have dependencies on ARMv7 instructions and the Pi Zero is an ARMv6 device. I haven't looked into the details but I don't think it works yet.. @RussKeldorph may be able to confirm what our minimum ARM support is.. I think everything on this issue is understood. I'm going to close it out.. @janvorli, can we get a simple doc in place before 2.0 ships?. They are related. This one is about how to copy them app local. First step is install them for your distro. Then copy the right things out of them for app local. We may even want to script both of these.... I believe this can be closed because the doc is here: https://github.com/dotnet/core/blob/master/Documentation/self-contained-linux-apps.md. Yes, it is. I just hit this problem again last night trying to get the deps installed on Raspbian.. Closing this as this similar issue has more traction. https://github.com/dotnet/core/issues/679. I'm going to close this now because its been a while without a response. Please let us know if you can provide more details.. It's not in the current roadmap but if a community effort wanted to spin up to make that happen, we'd be happy to take the contribution.. Going to close this issue because it looks like this one was resolved.. @jobrien721 , can you share a callstack of the crash?. The full callstack with Dylibs would be really helpful. Is there an easy way for you to sanitize it?. Thanks! @wfurt and @bartonjs as FYI when to take a look when we you share more data.. At this point we've shipped updates to 1.X and fixed many issues before RTM of 2.0. I'm going to close this now and if anyone finds specific issues on 10.13, please open an issue about it.. LGTM. @wfurt I was saying the docs should have the details for dev and runtime. It only has dev today and only for a few distros.. Correct, you can see my comment in the linked issue. Our runtime dockerfiles have the list with transitive closure for the runtime.. @danmosemsft, following up on the conversation we had a couple days ago in email, can you create an issue tracking \"Good error messages for all possible missing dependencies\"?. I just made a PR to get the docs updated. https://github.com/dotnet/docs/pull/3344. I'm going to close this issue here now because all the right follow up issues and PR's have been created.. I'm going to close this PR for now since its been dead since June. If someone wants to finish it, please go ahead and open a new PR.. I think we'd need a repro in order to make this actionable. . UWP is a Windows only platform (Universal Windows Platform).. @migueldeicaza may have some advice. . @richlander @leecow do you want to add a rel note for preview 1 at this point? If not, we should just close this as fixed in Preview 2.. @ericstj , can you give @leecow the exact text that should be in the rel note?. @terrajobst , did this happen? Can we close this issue now?. @terrajobst did this happen? Can we close this issue out?. @terrajobst any update?. @terrajobst should we just close this issue?. @terrajobst what should we do with this issue? Its been open now for months and I'd like to have it closed either because nothing is going to happen or something has happened.. This issue is probably better to open on the aspnet/home repo where more people that know the details of HttpContext would be watching. . @Eilon do you know who could help here?. Thanks. I've sent some emails around asking for the right link to use.. Fixed with https://github.com/dotnet/core/commit/414505918e3c9dbf46def941bf84aa8b2eb629e3. Its probably best to open this issue on the https://github.com/aspnet/mvc \n@Eilon . @Eilon @barrytang @mlorbetske can you take a look at suggest which repo may be the best place to move this issue?. @livarcocc , can you take a look?. @TFTomSun it looks like it works now. Can you please reopen if you still have a problem?. Hi @CampsiteHelper , can you help clarify what you are seeing and what you would expect instead?\n/cc @rrelyea @livarcocc . Should this be in the templating repo?. This is because in Preview1 of ASP.NET Core 2.0, didn't support .NET Standard because it used API's that weren't available. In Preview2, I believe it will.\n/cc @davidfowl @DamianEdwards . In Preview2 ASP.NET moved back to .NET Standard. I'm not sure if there were specific libraries that couldn't. @DamianEdwards do you know?. I don't know much about those packages. @DamianEdwards do you?. You shouldn't need to install libuv for ASP.NET Core on .NET Core. It should be with the app if you are doing self-contained. Are you publishing the app as described here?\n. What version of the .NET Core are you using? dotnet --version?. Ok, and you installed all the prereq packages that are listed here under Ubuntu? \nDo you see libuv in your published output? Make sure you are using the output under a publish folder. like ./bin/Debug/netcoreapp2.0/linux-arm/publish.. Looking closer at your project, it looks like you are referencing a whole bunch of .NET Core 1.X nuget packages from ASP.NET. That's my guess as to why this is happening. \nIf you directly add a reference to this does it get libuv in the output?\nSince your project is targeting netcoreapp2.0. I think you should switch to referencing ASP.NET Core 2.0. If you do dotnet new web in a temp folder, you will see the single reference you need to get the whole ASP.NET platform. I think that will pull in most of the dependencies you have listed out in your project including libuv.. Yeah, that all sounds right. \n@DamianEdwards @Eilon, should we do something to make it more obvious that they need to upgrade their ASP.NET packages when upgrading to netcoreapp2.0?. You have to have the latest preview of Visual Studio installed to see 2.0 in the that dropdown. https://www.visualstudio.com/vs/preview/. I'm going to close this as it is resolved. Cause was not using ASP.NET Core 2.0 packages.. I'm going to close this now because I don't think there is anything more to be done.. Yes, this is addressed in a better way in 2.0.. One last thing. Its probably worth noting that these instructions are for .NET Core 2.0.. Sure, you can mention that you have verified it on 2.0 Preview 2. That will be shipping very soon. :). @livarcocc , can you take a look?. @rrelyea Can you give guidance on PTF and ATF?. @JeffreyMcBride , I have opened an issue in dotnet/cli to track your issue and mentioned you in it. Thanks.. Yeah, migration from asp.net core 1.X to 2.0 isn't as simple as just changing the target framework. @Damianedwards are there any docs that tell people what to do. This issue may be better on the aspnet/home repo.. @WillooWisp , can you share your project? Are you referencing WCF? The trick will be figuring out which assembly you are pulling in that has that references to that assembly.. @rrelyea for the dotnet restore issue.. @TAGC. Can you open an issue on Nuget/home?. can you try win-x64 instead of win7-x64?. Honestly, it should have worked with win7-x64 and there is probably a bug there somewhere but in 2.0 we're really encouraging people just to use win-x64.. @richlander @mairaw, we need to make sure the docs are updated for 2.0 to make sure people know that they should basically be using win-x64, linux-x64, and osx-x64 for everything by default.\n@TAGC , yes, for apps targeting any version of Windows that .NET Core 2.0 supports, you should be able to publish one application using win-x64 and it should run on all the versions.. Yes, that is the hope ;). That is a good place to report. If its clear which layer of the stack the problem is in, filing it in the matching repo can also work but it requires more knowledge of how the product is built. Reporting more details here can also work and we can help route.. @barrytang @livarcocc can you help look into issues with Publish from VS?. @JeffreyMcBride thanks for providing the feedback. I was off the grid for the past couple of weeks and didn't get a chance to respond. Looks like your first issue is now understood. @barrytang and @Eilon who is the best person to take a look at the other two issues? Should we get them filed in a difference repo to make them easier to track?\n2) IsolatedScopes=true did not append the extra logging info with \n         using (_logger.BeginScope(\"Message to append\")) { // code and logging statements }\n3) Installing controller scaffolding creates an error then a warning:\n         Error: Microsoft.VisualStudio.Web.CodeGeneration.Design package targeting v2.0.0 (final release)\n                   Downgrading to v2.0.0-preview fixes issue and eliminates error\n         Warning: Microsoft.Composition 1.0.27 is targeting .NET Framework\n                         Upgrading to 1.0.30 (or now 1.0.31) targets Core and eliminates warning. I think this issue has run it's course. We've shipped RTM. Any new issues that come up should be opened in the appropriate repo and be focused on that issue.. @rowanmiller where is the best place to track this?. @richlander , how do you want to track this? I don't know that keeping this issue open is the best way.. Ok, I'll close this now then. If you remove Preview1, perhaps it will get rid of the problem? dotnet-dev-2.0.0-preview1-005977\n/cc @livarcocc it looks like we're installing the same thing to the same location and getting a conflict.\n. Thanks @MaximoTrinidad let us know.. Glad to hear it! I've copied this issue to the dotnet/cli repo because you definitely shouldnt have had to uninstall preview1. I'm going to close this issue here now. Thanks for reporting it!. @richlander @leecow can we get a note on the instructions that Preview1 of the sdk needs to be uninstalled?. @livarcocc , this looks like it's due to adding the \"first run\" experience to the installer.. @MaximoTrinidad , Thanks for reporting this. I opened it in the dotnet/cli repo and tagged you there so it can be followed up on. I'm going to close it here.. I think there is something called the asp.net core hosting bundle that you need to install.. @DamianEdwards do you know where the link to that is?. #2 in your list looks like the one I'm thinking of. @DamianEdwards would know if that's the right one or if there is another issue here.. @yupingyong, any more details you can provide to @danroth27 so we can dig deeper?. Is this still an issue?. I'm going to close this issue now. Let us know if its still a problem.. @rrelyea should this get moved to the nuget repo to get tracked?. @richlander you make it on the nuget/home repo. @richlander @rrelyea should this be moved to either the nuget or docs repo to track it?. Closing as I opened it again in nuget/home so it actually gets tracked.. And you can't make the project look like an SDK style project? The one in there is pretty noisy.. @richlander. The. Net Core 2.0 sdk is what delivers the msbuild tasks that enable netstandard 2.0 to work correctly in .net framework projects. Can you try installing that?. @ericstj . @ericstj isn't available right now. @terrajobst or @weshaggard may have some insight to give before @ericstj is back online. \nI know System.net.http has been a challenge. . @dsplaisted also in case he has any ideas.. For OSX from a techincal angle, we moved to depend on the Apple Crypto stack to remove the OpenSSL dependency we had. The Apple Crypto libraries we needed to do this were introduced in 10.12.\nOur lifecycle policy stated that we would only support the latest servicing level of each distro that is out when we shipped. That is what led to moving support on Linux from 7.2 to 7.3. We're considering moving back to 7.2 based on feedback.. @leecow how do you want to track this discussion?. @richlander, yes, and the rhel7.2 decision for 2.0. Note there is also a difference between Microsoft support and where the binaries will run. Microsoft has a support policy but taking RHEL 7.2 for example, Microsoft is only supporting RHEL 7.3 but the binaries should run just fine on RHEL 7.2. \nAs Jeremy said, for the OSX case, we actually had to take a new dependency only available in OSX 10.12.. It is possible. We'll produce a document on how to create a fully self contained application. @janvorli was working on that.. Its 2.0. We did work in the loader to support it. In essence, depending on your distro, you can copy the dependencies into your app in a certain folder and they will be loaded from there instead of looking for it from the package manager. Ideally someone in the community can help contribute the scripts to use for each distro to pick up the right stuff.. @janvorli can you point to the doc you are writing here?. Give this a try. Feedback is welcome on the doc. https://github.com/dotnet/core/blob/master/Documentation/self-contained-linux-apps.md. I'm going to close this issue for now. If there are issues using the instructions, we should open a new issue.. How are you running the app and what commands are you using to build it? Are you using dotnet publish?. That error usually means one of the dependencies isn't there on linux. Did you yum install all the dependency packages? Sounds like you probably did because you said you were able to run the SDK on that Linux machine?. @gkhanna79 @steveharter isn't there a switch to enable verbose output that will help figure out what it's looking for?. Do you have 1.1.2 installed on the linux machine or use 1.1.0?. @tarekgh can you take a look? Should we reopen this is corefx?. This is probably a question best asked on the aspnet/home repo. Do you want to open another issue there?. Because that's where issues specific to asp.net are tracked and monitored. See the filing specific issues section of the readme. https://github.com/dotnet/core/blob/master/README.md. @RichLander we should improve the readme so it's easier to know that for asp.net/website specific issues, aspnet/home is the best place to ask questions.. I think this issue has concluded here. Closing.. Looks like people have been successful using the library you referenced. You could try opening an issue on the github site for that library https://github.com/jcurl/SerialPortStream if you have questions about it.\nIt looks like that package doesn't come with the native binary. You are going to need it in order to get it to work. See the instructions on that projects readme for Linux and how to compile the support library.\nhttps://github.com/jcurl/SerialPortStream/blob/v2.x/README.md. Awesome. Great to hear it worked! I may use this for a personal project as well. Hope it works on ARM :). Sweet!. @danmosemsft was this on any of the lists for the compatibility pack?. Closing as this is already filed in the right place: https://github.com/dotnet/core-setup/issues/2817. @leecow @blowdart can you provide the guidance for @Rovastar . Thanks @blowdart. I'm going to close this issue now. @Rovastar if you have any other questions, please let us know.. It looks like you are still using the unreleased version of everything from late 2015. I would strongly recommend that you upgrade to the supported SDK and tooling. Is there a reason you can't upgrade to the supported .NET Core tooling?. Glad to hear it worked for you.. The best option to discuss the details would be to take @richlander up on his offer to discuss via email at rlander at microsoft dot com.. The best option to discuss the details would be to take @richlander up on his offer to discuss via email at rlander at microsoft dot com.. For .NET Core 1.X, you need to use the specific Linux identifier. Is Ubuntu 14.04 the target OS? If so, ubuntu.14.04-x64 is the identifier. You can see the full list of identifiers here. . For .NET Core 1.X, you need to use the specific Linux identifier. Is Ubuntu 14.04 the target OS? If so, ubuntu.14.04-x64 is the identifier. You can see the full list of identifiers here. . You need to be netcoreapp2.0 then in your TargetFramework. Make sure you have the 2.0 sdk installed and then you can use linux-x64.. You need to be netcoreapp2.0 then in your TargetFramework. Make sure you have the 2.0 sdk installed and then you can use linux-x64.. You really have to create one for Windows, one for Osx and at least one for Linux depending on the distros. The only way we've found to try and get closer to a single one is to take a dependency on a cross platform scripting language and detecting the os, and delivering the right bits through it. Is your app all .net code? No native dependencies? Are you assuming something has already installed .net core and you are just trying to install the app on top?. You really have to create one for Windows, one for Osx and at least one for Linux depending on the distros. The only way we've found to try and get closer to a single one is to take a dependency on a cross platform scripting language and detecting the os, and delivering the right bits through it. Is your app all .net code? No native dependencies? Are you assuming something has already installed .net core and you are just trying to install the app on top?. We make zip's/tar.gz's available everywhere. On Windows we use Windows Installer, on OSX we use PKG's, and on Linux we use the distros package manger. You can see a good example of the offerings in this table. https://github.com/dotnet/core-setup/blob/master/README.md. We make zip's/tar.gz's available everywhere. On Windows we use Windows Installer, on OSX we use PKG's, and on Linux we use the distros package manger. You can see a good example of the offerings in this table. https://github.com/dotnet/core-setup/blob/master/README.md. @tarekgh , any ideas?. @tarekgh , any ideas?. Is this still an issue?. Is this still an issue?. I'm going to close this issue for now. Please let us know if you still hit this issue and we can re-open.. I'm going to close this issue for now. Please let us know if you still hit this issue and we can re-open.. @yizhang82 to point to docs on interop with native binaries and IPC.. @yizhang82 to point to docs on interop with native binaries and IPC.. @zvirja is correct. The path forward is the Microsoft.CodeAnalysis.FxCopAnalyzers NuGet package. A large portion of the rules have been moved over to analyzers. FXCop was a solution implemented before the richness of the new C# compiler existed.. @zvirja is correct. The path forward is the Microsoft.CodeAnalysis.FxCopAnalyzers NuGet package. A large portion of the rules have been moved over to analyzers. FXCop was a solution implemented before the richness of the new C# compiler existed.. Sounds good. I'm going to close this for now but we can re-open this if it doesn't work.. Sounds good. I'm going to close this for now but we can re-open this if it doesn't work.. @dvm-2k1 I opened an issue for you here: https://github.com/dotnet/roslyn-analyzers/issues/1313\nThats is the best place to get help for that specific issue.. @dvm-2k1 I opened an issue for you here: https://github.com/dotnet/roslyn-analyzers/issues/1313\nThats is the best place to get help for that specific issue.. Yes, discovery of where the published output goes has been a bit of a pain point.. Yes, discovery of where the published output goes has been a bit of a pain point.. Going to assume this is resolved. Closing now.. Going to assume this is resolved. Closing now.. LGTM. LGTM. Last comment on an already merged PR :) The only thing I don't like about this is that its a maintenance problem. The daily builds link may be better just as a single link to the repo with a comment that says to select your branch or we just make sure the table in master always has links to all daily build trains.. Last comment on an already merged PR :) The only thing I don't like about this is that its a maintenance problem. The daily builds link may be better just as a single link to the repo with a comment that says to select your branch or we just make sure the table in master always has links to all daily build trains.. Sounds like @svick has helped conclude there is nothing here to fix in .NET Core. If it gets root caused as an issue in the platform, let us know. I'm going to close this for now.. Sounds like @svick has helped conclude there is nothing here to fix in .NET Core. If it gets root caused as an issue in the platform, let us know. I'm going to close this for now.. LGTM. LGTM. Usually that's because the wrong publish folder is being copied. Make sure you are under the linux-arm folder and all the way down to the publish folde4 under there for linux. Win-arm for windows.. Usually that's because the wrong publish folder is being copied. Make sure you are under the linux-arm folder and all the way down to the publish folde4 under there for linux. Win-arm for windows.. The x64 bothers me too. The exception is also the one you get when you are trying to use x64 bits on arm. When I publish my sample app, the contents end up here IotSample\\bin\\Debug\\netcoreapp2.0\\linux-arm\\publish. \nDid you install the .NET Core 2.0 SDK? That should add dotnet.exe to your path.. The x64 bothers me too. The exception is also the one you get when you are trying to use x64 bits on arm. When I publish my sample app, the contents end up here IotSample\\bin\\Debug\\netcoreapp2.0\\linux-arm\\publish. \nDid you install the .NET Core 2.0 SDK? That should add dotnet.exe to your path.. Correct. Just a plain command prompt.. Correct. Just a plain command prompt.. Glad to hear you are off and coding now!. Glad to hear you are off and coding now!. @DustinCampbell @gregg-miskelly where should this issue be tracked?. @DustinCampbell @gregg-miskelly where should this issue be tracked?. Closing this issue here.. Closing this issue here.. @morrisjoe any other thoughts here? Can we get someone to help take a closer look?. @morrisjoe any other thoughts here? Can we get someone to help take a closer look?. Thanks @vijayrkn \nI'm going to close this issue now.  Let us know if you still see issues on the newer version of VS.. Thanks @vijayrkn \nI'm going to close this issue now.  Let us know if you still see issues on the newer version of VS.. @AlexGhiondea , should this issue be moved to CoreFX to make an API proposal?. @AlexGhiondea , should this issue be moved to CoreFX to make an API proposal?. LGTM. LGTM. @yizhang82 any ideas?. @yizhang82 any ideas?. @tarekgh any advice?. @tarekgh any advice?. Issue moved to dotnet/corefx #24482 via ZenHub\n. @davidsh any advice here?. @davidsh how about on .NET Core 2.0?. @snikeguo gave a good example of a project that is trying to go after that. \nWPF and other desktop UI stacks are out of scope right now in the .NET Core Roadmap:\nhttps://github.com/dotnet/core/issues/43. I've sent an email to our infrastructure team to see if they can figure out whats going on.. Thanks for the report. I've moved this to https://github.com/Microsoft/msbuild/issues/2397. @weshaggard @DamianEdwards . Sounds like the open issue of fixing this in 2.0.X is tracked here: dotnet/core-setup#2981. I'm going to close this issue now.. @DamianEdwards. Moved this issue to aspnet/home to get more traction. https://github.com/aspnet/Home/issues/2238. @zhenlan @ViktorHofer @danmosemsft . @zhenlan Any thoughts?. Closing as we plan on keeping these open for about 30 days.. We're trying to move away from dotnet.bootstrap.py and it's note really maintained anymore. The preferred approach is https://github.com/dotnet/source-build. Can you give that a try and see if it works for you?. @chcosta . Issue moved to dotnet/corefx #24480 via ZenHub\n. moved to: https://github.com/aspnet/Home/issues/2230. You mean in Azure App Services right?. @IssueWorld , were you able to open an issue on NewGuid performance? @stephentoub as FYI\nI'm going to close this issue now because this one looks to be addressed.... Issue moved to dotnet/cli #7779 via ZenHub\n. How are you creating the .NET Standard 2.0 library? Are you using the .NET Standard Class library template or the Portable Class Library dialog? A clean .NET Standard 2.0 class library should not reference 1.1 to my knowledge.\n@dsplaisted . @livarcocc @Pilchie who is the right person to take a look at this?. Shot in the dark but perhaps your NuGet cache is corrupt. Can you try:\ndotnet nuget locals all \u2013clear. I get similar output as you in my project.assets.json with that simple project. I don't think the problem. It builds just fine for me. It's got to have something to do with the state of your machine. @emgarten in case he has ideas.. Yes, the netstandard.dll reference is supposed to be implicitly inserted through the netstandard2.0 tfm reference. I'm not sure what's going on there. We should track this as a new issue because not having the reference at all seems to be a different problem. I've opened this issue for you in the dotnet/standard repo to track it. https://github.com/dotnet/standard/issues/538. @ericstj any thoughts on the original issue here?. You are right. Looks like this issue can be closed now.. How'd this go? As @karelz suggested, https://github.com/aspnet/home is the best place to track issues related to asp.net core.. I'm going to close this for now. If it still ends up being an issue. Please open one up on https://github.com/aspnet/home. Thanks!. @DamianEdwards to speak to any plans to port any part of System.Web.. @richlander, should we move this to corefx or to an aspnet repo so its better on the radar?. Ok, at this point @DamianEdwards has confirmed this is not on the asp.net team's roadmap. If you want to have more discussion on this, I'd suggest opening an issue on the aspnet/home repo. I\"m going to close this issue now.. The plan is that a version of 2.0.X will become LTS. We are taking feedback on 2.0 and making fixes based on that feedback from real world usage. It will then be stamped with LTS at a certain patch level. So if you are on the 2.0 train, you are in the right place to be LTS. 2.1 is not planned to be an LTS release.. My hope is that it will be in Q1 of 2018. There are active discussions about it.. This is where things have gotten a little confusing with versioning. .NET Core 2.1 is not out yet. The roadmap and dates should be published soon for when it will be released. The .NET Core SDK has shipped a 2.1.2 but that is just the SDK version. It still builds apps for a 2.0 runtime and not a 2.1 runtime. . To answer your other question, you should be able to remove older SDK's because only the latest is used. Uninstalling runtimes however requires you knowing what the applications one your machine depend on.. Yeah, @richlander can we get an update on that page! :). Hi All, I think @richlander is close to having something to post for .NET Core 2.1 all up. \nI know from a .NET Core Runtime perspective, the major focus for 2.1 has been performance. There are new API's like Span and Memory, many API's are also now leveraging those under the hood as well. We also have improvements in many other areas underway. We've significantly improved Networking performance and done a few different optimizations in the IO stack. Beyond that, we've be addressing feedback on features that shipped in 2.0 and doing general bug fixing.\nAs far as the community helping. I'd love to see how we can make that easier. At least in the corefx and coreclr repos, we've been marking things as up-for-grabs. We're also putting things in the 2.1 milestone that we would like to see get done in 2.1. Any help on work in that milestone from the community would be awesome to get. If there is a particular area or item of interest, I'd be happy to help identify good things to pick up and try to get someone from Microsoft to be on point to make sure support is available and questions can get answered.. I'm going to close this now, the roadmap was shared a month or two ago. https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/ . I'm going to close this in favor of the conversation continuing in the cli repo which is the correct place. https://github.com/dotnet/cli/issues/533. Issue moved to dotnet/corefx #24486 via ZenHub\n. The exe installations that are offered for .NET Core and the Windows Hosting Bundle are based on MSI's but they are chained together using a boostrapper exe. Are you looking for something with a .msi extension and you can't use the .exe's that have msi's in them? Like this one? https://aka.ms/dotnet-sdk-2.0.0-win-gs-x64. You can use the exe and it will install a set of msi's. They have product codes that could be used to detect and maintain successful installation.. @joeloff doesn't reference counting happen with CA's in the installers or is it all at the bundle level? For people managing their own deployments using puppet, I'm not sure they care if we enforce reference counting. \n@onyxmaster can you confirm that in your use case, you just rebuild the images rather than uninstall a bunch of stuff to clean things up?. @richlander as well as FYI. @onyxmaster Would another option here be for us to provide puppet classes/modules that do the right things for the exe's we already provide?. It looks like if there was a chocolatey module, then it would be easy to include our exe's in puppet. https://forge.puppet.com/puppetlabs/chocolatey\nDo you use chocolatey for anything else?. Looks like there are community packages for .NET Core 2.0 runtime and ASP.NET Core 2.0 Runtime store available in chocolatey.\nhttps://chocolatey.org/packages/dotnetcore-runtime.install\nhttps://chocolatey.org/packages/aspnetcore-runtimepackagestore/2.0.0\n. Seems like we should just help make those packages work well :) https://github.com/jberezanski/dotnetcore-chocolateypackages\n@jberezanski :). @joeloff is there a repo where the issue of tracking a standalone ANCM installer should be. I don't think anyone is tracking issues here.. I opened this issue to make sure there is one to track the ANCM standalone installer. I'm going to close this one now and that work can be tracked here: https://github.com/aspnet/Home/issues/2236. Is anyone that is hitting this issue able to follow the logging instructions so we can try to figure out whats going on?. Issue moved to dotnet/core-setup #3281 via ZenHub\n. Which types of applications are you trying to share your app.xaml across? WPF and UWP? These are UI frameworks and a layer above .NET Standard. Just using a .NET Framework library would allow you to share across multiple WPF applications. Can you give more insight into what you are trying to share across?. /cc @kieranmo . Issue moved to dotnet/standard #533 via ZenHub\n. Issue moved to dotnet/corefx #24481 via ZenHub\n. This conversation is better had on the aspnet/home repo. I'm going to close this one here and if anyone wants to continue the conversation, please open an issue on aspnet/home.. I think it looks fine. Merging so this doesn't get stale. We can always make more improvements if there are still issues.. closing because I moved it to https://github.com/NuGet/Home/issues/5999. Issue moved to dotnet/corefx #24483 via ZenHub\n. Issue moved to dotnet/cli #7782 via ZenHub\n. @chcosta . Closing this one because it looks like the bug was filed in corefx which is the right place.. Sounds like a bug in GraphSDKHelper. Is this what you are using?\nhttps://developer.microsoft.com/en-us/graph/code-samples-and-sdks\nIf so, this issue is probably best opened here: https://github.com/microsoftgraph/msgraph-sdk-dotnet\nLet me know if I'm missing something. I'm going to close this now as I don't see what the .NET Core platform can do to fix this.. Awesome, glad we uncrossed the wires :). Issue moved to dotnet/cli #7781 via ZenHub\n. Issue moved to dotnet/wcf #2333 via ZenHub\n. I don't think we can do anymore here. Sounds like its resolved. Closing.. I'm going to close this issue now as its been over 30 days without a response. Let us know if you need more assistance.. @vancem @Eilon \nI know there were some issues with sourcelink for ASP.NET and there is this issue tracking them. https://github.com/aspnet/Universe/issues/1049 . moved here: https://github.com/aspnet/Home/issues/2231. /cc @Eilon \n@galodoido794 , what ASP.NET packages are you referencing? If they are still the 1.X packages, that may be the cause.. @bogdan-st , probably not related. Do you want to open a new issue in the dotnet/cli with more details of how your project is configured?. @galodoido794 are you still blocked on this? Have you tried dotnet publish -c release -r linux-x64 with a .NET Core 2.0 application?. Sounds like this one is \"resolved\" in that there is a workaround and the issue is in an external project. Closing.. Thanks!. Issue moved to dotnet/corefx #24485 via ZenHub\n. @AlgorithmsAreCool The primary goal is smaller deployments that only have the code you need in them (better pay-for-play). The self contained executable scenario will definitely benefit from this but I don't think they are neccessarily tied.. It seems like providing a convenient way to root .NET Standard types would be pretty straight forward.. It definitely takes away some of the value. The only other way I can think of is to come up with a good way to be explicit about the dependencies that could be added by your rewriter. You said that wasn't feasible but it may be worth digging into that a little more.. Closing as we plan on keeping these announcements open for about 30 days.. Let's track this issue here and make sure folks have instructions on how to do it. https://github.com/dotnet/cli/issues/7570. @janvorli looks like there is a lot of probing for System.Globalization.Native.so. Any thoughts?. Issue moved to dotnet/coreclr #14444 via ZenHub\n. @terrajobst . I'm going to close this issue for now. Let us know if more follow up is needed.. @weshaggard @terrajobst do you have any insight on why this package is \"special\"?. Issue moved to dotnet/corefx #26129 via ZenHub\n. Can you create a diag log dotnet build /flp:v=diag? It will put an msbuild.log file next to your project. Can you zip that up with your project and share it? Something unexpected is going on and that should give us the info we need to understand it.. @ericstj to also take a look to see if he can see what's wrong.. Adding @nguerrera and @dsplaisted as well.. Looks like this issue can be closed as folks have identified a work around. @emgarten so you need an issue to track root causing this?. Thanks. I'll close this one then.. @leecow, did this get fixed?. Great, closing this issue now.. It looks like you already have the link to the Preview 2 final version and have filed a separate issue for your issues migrating from Preview2 to RTM. Any reason this issues needs to stay open?. Sounds good. Closing now.. Sounds like people have found a good solution. I'm going to close this out now.. Yes, I've been told the Centos one works: https://www.microsoft.com/net/core#linuxcentos. I would assume that someone needs to work with AWS to get .NET Core into their package feed.. @jaredpar @Eilon . @eerhardt for dependency model. @Eilon I believe the others are brought in as dependencies for ASP.NET, can you follow up with those owners to ensure the end to end works?. Sounds like we have this addressed for most of the core pdb's. This isn't a good repo for tracking issues in individual libraries. If there are still outliers, we should open issues for the owners of those binaries.. Issue moved to dotnet/corefx #24484 via ZenHub\n. Issue moved to dotnet/cli #7786 via ZenHub\n. Issue moved to dotnet/corefx #24495 via ZenHub\n. @Eilon . @chintan3100 since we haven't heard from you in over 30 days, I'm going to close this issue. If you still need help I think the best thing to do would be to open an issue with more of the details @Eilon asked for on the http://github.com/aspnet/home repo.. Sounds like this is resolved. Closing.. @JeremyKuhne can we get this tracked in dotnet/corefx?. Moved this issue here: https://github.com/aspnet/Home/issues/2233. This is probably better opened on the TypeScript repo: https://github.com/microsoft/typescript. Moved this to typescript. https://github.com/Microsoft/TypeScript/issues/19124. You can find all the major historical releases here: https://github.com/dotnet/core/blob/master/release-notes/download-archive.md\nThat said, you should be able to build a .NET Core 1.1 application with the .NET Core 2.0 SDK.. Moved here: https://github.com/dotnet/cli/issues/7774. @richlander . @nathanaeljones are the images on dockerhub for .NET Core 2.0 no help?. I'm aiming to have us produce \"deps\" packages. So there is one thing that aggregates all the various dependencies into one things people can install. I've opened this issue to track it. https://github.com/dotnet/core-setup/issues/3280\nI'm also going to try to get the instructions here updated to be the correct and minumal set. https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x. @johnbeisner @leecow would that be in the CLI repo? If so, we can move the issue there.. @Eilon . Is there anything else that needs to be done here or can we close this issue out?. @DustinCampbell any thoughts on where we could track making this experience better for VS Code users?. @gregg-miskelly any thoughts? I'm going to close this issue here now but if there is a followup for the debugger, we can open an issue in the right repo.. @russellhadley do you know of any options for in process interop in this direction? I'm not sure I know of any good options...\nGenrally what I've seen people do is run a local service as .NET Core and use IPC (over http or whatever other transport you choose) for the client to talk to.. I'm going to close this issue now as I think that's the best high level guidance we have at the moment. If you want to have a deeper conversation we can open an issue for discussion on the dotnet/coreclr repo where all of the code and knowledge is for interop.. closing in favor of continuing here: https://github.com/aspnet/Home/issues/2232. It goes without saying, we take security very seriously and have for decades in the .NET platform. Over the years we have taken many different strategies for helping people stay safe with respect to serialization. As mentioned above, that even included omitting certain parts of the stack in .NET Core. \nWe plan to continue to find ways to make things safer and mitigate categories of problems. If you have specific ideas or want to engage on a pushing forward a potential way to mitigate a type of attack vector, let us know. We are continually hardening our stack to be more secure.\nI'm going to close this now as we are already and always working on making these things more secure and don't need to keep this issue open to track it. :). The sdk has not shipped an arm version and is not a supported developer configuration. That's why the instructions say that. You can publish for arm from another machine and copy the app over.. Sounds good. We are looking at supporting arm32 for development but right now, the performance on arm would make it mostly unusable even if the binaries were all assembled together. . There are some issues with 4.6.1's support of .NET Standard 2.0. For example netstandard.dll version 2.0.0 isn't there and needs to be present with the application (or test in this case). I'm going to move this issue to dotnet/standard because I do think there could be a problem here that we need to look into.. Issue moved to dotnet/standard #534 via ZenHub\n. Can you share your project? Are you still stuck?. Thanks for confirming!. @weshaggard, we use the same ref's in both cases don't we? Any idea what may be going on?. Issue moved to dotnet/standard #528 via ZenHub\n. Lets get further details and track this in the dotnet/standard repo https://github.com/dotnet/core/issues/956. @ViktorHofer @danmosemsft can you take a look?. @ViktorHofer can you move this issue over to dotnet/corefx to track it?. Issue moved to dotnet/cli #7784 via ZenHub\n. Glad you found the solution. Closing now.. Should we just delete the rest of the page and just leave the pointers to the docs site? I'll make that PR now.. https://github.com/dotnet/core/pull/1014. Closing because the issue in corefx is where this should be tracked.. @danroth27 should this get tracked somewhere?. I'm going to close this now. Let us know if there are still more questions.. @livarcocc @dsplaisted should this go to the cli or sdk repo for traction?. copied here: https://github.com/dotnet/cli/issues/7770\nClosing this one now.. Issue moved to dotnet/corefx #24488 via ZenHub\n. @gregg-miskelly is there a place to file an issue for this comment?\n\n\nAt the very least, the owners of GetVsDbg.sh & Visual Studio need to have a little chat and allow one to tell the other \"No compatible debugger packages could be located.\" Better yet, also adding \"In the mean time, please try debugging against a supported platform, here is a list...\"\n\n\nFor now I'm going to close this issue because it's tracked in a larger theme of enabling first class arm32 support.. You can try this now: https://github.com/OmniSharp/omnisharp-vscode/issues/1562#issuecomment-348349242. @livarcocc is this the one people have been working around by disabling the first run experience?. Looks like this one: https://github.com/dotnet/core/issues/649#issuecomment-330445968\n@livarcocc do you have an issue tracking fixing this in the cli?. \ud83d\udc4d . Lets leave it open until @livarcocc confirms that there is an issue somewhere tracking the fix. Once we have that, this can be closed. Thanks @ierpe!. What .NET Core Runtime version are you trying to build for? You should always be able to use the latest SDK. The SDK will be optimized for building for the latest version of .NET Core that shipped with it but it works for targeting any version.. It should run fine. I don't know of any technical blocker. 7.2 is definitely a min.. If you hit bugs, let us know what you hit. We expect it to work but we aren't covering it with a lot of our testing. I'm going to close this issue now.. Thats odd, I've seen plenty of others use Newtonsoft.Json with .NET Core 2.0. \nWhich of the bin folders are you deploying to the server? Are you publishing and copying from the appropriate publish folder?\n@ericstj any ideas? \n. Sounds like we can close this. Any other follow ups can be done on the linked issue. https://github.com/dotnet/sdk/issues/1502. @sbomer @russellhadley . Hi All, I'm going to close this issue for now to help with tracking. @mig42 if you get a repro of the issue, feel free to reopen this issue.. Because we are still bug fixing 1.1 for people that are using it.. Issue moved to dotnet/corefx #24502 via ZenHub\n. Everyone happy with this? Ready to merge?. Are we good to go here. I don't want to have this PR open any longer :). Do you actually need those Package References? They should all be automatic. . What is the version of your SDK? dotnet --version?. I don't think the approach of referencing individual packages is going to work in .NET Core 2.0. The way to get a smaller app in .NET Core 2.0 + is to reference the platform but use the linker. Instructions for that are here: https://github.com/dotnet/core/blob/master/samples/linker-instructions.md. @neyromant, Glad you are trying this! You have the choice in .NET Core 2.0 to carry the native linux dependencies with your application. This is documented here: https://github.com/dotnet/core/blob/master/Documentation/self-contained-linux-apps.md\nIf you hit any problems, @janvorli may be able to help.. @barrytang @DamianEdwards @rrelyea is this a known issue?. Moved this to the aspnet/home repo. Closing now, let us know if you are still having trouble.. Thanks for reporting this. I've copied it here: https://github.com/dotnet/corefx/issues/24441. /cc @richlander @leecow\nPower PC isn't a currently supported architecture and we don't have any official plans to support it. That said, if there is community support for it, we'd be happy to engage with anyone that wants to work on bringing that support up.. I'm going to close this issue for now. If there is community interest in doing a port, feel free to start a new issue in the dotnet/coreclr repo where the work would have to start.. @borisdj , Any reason why you moved this here? I think the aspnet/home repo is actually the right place to start. @muratg can you confirm?. Ok, I'm going go close this one here. @borisdj if you need more follow up, please file an issue in the aspnet/home repo.. Thanks!. Copied this issue to here: https://github.com/dotnet/corefx/issues/24440. I opened this bug to track this. https://github.com/dotnet/corefx/issues/24439. @gregg-miskelly in case he has any insights. This isn't the best place to track this issue if there is anything to be done about it so I'll close this in a few days but I want to give folks a chance to decide if there is anything to fix and open a tracking issue for it elsewhere.. Issue moved to dotnet/project-system #2874 via ZenHub\n. @the-super-coder can you share what your project looks like?\n/cc @rrelyea . @emgarten . What happens when you explicitly run dotnet restore?\n/cc @rrelyea @emgarten could this be related to the fallback folder or other corruption I've seen in different issues?. Just a guess but maybe you are in this state? https://github.com/dotnet/core/issues/920#issuecomment-327222033. See the workarounds in the next few comments.\n. Awesome! Glad it worked.. I closed this because I think its another instance of this problem. https://github.com/NuGet/Home/issues/5995. If people continue to see this, go ahead and add more detaild there.. .NET Core 2.0 supports OSX 10.12 and higher. The same binary will work on 10.12 and greater so you don't need to worry about 10.13. It doesn't change the minimum system requirements of the binaries and in the case of .NET Core 2.0, the product relies on things that just aren't there in 10.10. If you stay away from crypto you may be able to run it on 10.11 but its not a supported scenario.. I'm going to close this because things appear to be failing in the expected way on an unsupported OSX version. Please reopen if I missed something.. I've made a PR here to clarify. https://github.com/dotnet/docs/pull/3324. The minimum Windows Server version that is supported is Windows Server 2008 SP1? I don't think the installer is the only thing thats going to fail on Windows Server 2007 SP2.\nHere is the support list for 1.X:\nhttps://github.com/dotnet/core/blob/master/release-notes/1.0/1.0-supported-os.md\nDid you always try it on 2007 or were you seeing the same thing on newer OS's?. Rather than the RC2, is there a released version you can install? My guess is that the MSU that installs VS won't install on pre-release OS's.. I'm now guessing you meant R2 and not RC2. If thats the case, its a released version of the OS. Have you tried installing this? https://support.microsoft.com/en-us/help/2999226/update-for-universal-c-runtime-in-windows. Haven't heard from you in a week. I'm going to close this now. Let us know if you are still seeing an issue.. @rakeshsinghranchi @livarcocc can you take a look?. I actually moved this to another repo where it will get better traction. https://github.com/dotnet/core-setup/issues/3275. I'm going to close this copy. . @john1726 what is bringing in the System.Runtime reference? Is that one you added explicitly? Do you know why?\nThere can often be a difference between package version and assembly version. Newer packages carry copies of older implementations that NuGet may select for you depending on your applications target.\n/cc @dsplaisted. In .NET Core 2.0, higher versions of all of those libraries are included which is likely why you were getting the downgrade problem. Does your application run fine now without ClickOnce in the picture?. @terrajobst can you help here?. @NikolaMilosavljevic do you have any ideas on how this can be worked around?. You should be fine. You shouldn't have to reference any of those things individually and if you used them, the compiler would complain when you removed them. Those libraries would be for you to call and shouldn't have anything to do with your ability to sign your app. . I'm going to go ahead and close this issue now.. This is probably best opened on http://github.com/aspnet/home\n@muratg @Eilon @davidfowl . For this install issue, I'm going to move that elsewhere so it can be tracked.\nAre you saying the docker instructions here: https://www.microsoft.com/net/core#dockercmd are giving you 1.X when you point to latest? @richlander any ideas?. I just did a clean install and got this:\n```\nC:\\Users\\Peter>docker run -it microsoft/dotnet:latest\nUnable to find image 'microsoft/dotnet:latest' locally\nlatest: Pulling from microsoft/dotnet\n219d2e45b4af: Pull complete\nef9ce992ffe4: Pull complete\nd0df8518230c: Pull complete\n38ae21afde7b: Pull complete\nd8597196fae8: Pull complete\n01a7bdcfe48a: Pull complete\na9e767050d45: Pull complete\nDigest: sha256:b3537d0eb23afa684254b74ee2dd6c99e684990896bc8491656f0c560c86271d\nStatus: Downloaded newer image for microsoft/dotnet:latest\nroot@60e430d166a2:/# dotnet --info\n.NET Command Line Tools (2.0.0)\nProduct Information:\n Version:            2.0.0\n Commit SHA-1 hash:  cdcd1928c9\nRuntime Environment:\n OS Name:     debian\n OS Version:  9\n OS Platform: Linux\n RID:         linux-x64\n Base Path:   /usr/share/dotnet/sdk/2.0.0/\nMicrosoft .NET Core Shared Framework Host\nVersion  : 2.0.0\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\n```. Yeah, I opened an issue in the core-setup repo linked above to track that. The more details you can provide there the better. I'm going to close this issue and we can make progress in https://github.com/dotnet/core-setup/issues/3278 . @gregg-miskelly @rrelyea is there a good place to track this?. Going to close this issue now. Go ahead and open new issues specific to whatever you hit as you go down that path.. @leecow . Issue moved to dotnet/corefx #24516 via ZenHub\n. Closing because @svick is correct. It can be passed in on the command line.. @divega would this be an issue that should be in the EF repo or @saurabh500 should this issue go to corefx?. Issue moved to dotnet/corefx #24586 via ZenHub\n. Issue moved to dotnet/corefx #24587 via ZenHub\n. Issue moved to dotnet/corefx #24559 via ZenHub\n. Issue moved to dotnet/corefx #24559 via ZenHub\n. @dinjonya are you saying that after deleting the global.json file, it fixed the issue?. I opened this issue to track this in the NuGet repo. https://github.com/NuGet/Home/issues/6017. Issue moved to dotnet/corefx #24610 via ZenHub\n. Moved to https://github.com/aspnet/Home/issues/2241. @dsplaisted @terrajobst @emgarten any ideas. This looks like it should work and it works for me in my simple repro:\ndotnet new console\ndotnet add package Microsoft.Azure.DocumentDB.Core --version 1.5.1\ndotnet publish\non\n```\n\n\nExe\nnetcoreapp2.0\n\n\n\n\n\n``\nsucceeds.. @FerHenrique can you trydotnet nuget locals all \u2013clearon the machine in a bad state?. @emgarten do you think this is a NuGet issue and we should move it to nuget/home?. Ok, I'll close this one here and we can use https://github.com/NuGet/Home/issues/5995 to track this.. Issue moved to [dotnet/cli #7836](https://github.com/dotnet/cli/issues/7836) via [**ZenHub**](https://www.zenhub.com/)\n. Moved this bug here: https://github.com/aspnet/Home/issues/2250. @leecow . @leecow can you review and merge if correct?. Issue moved to [dotnet/corefx #24755](https://github.com/dotnet/corefx/issues/24755) via [**ZenHub**](https://www.zenhub.com/)\n. Issue moved to [dotnet/corefx #24786](https://github.com/dotnet/corefx/issues/24786) via [**ZenHub**](https://www.zenhub.com/)\n. Can you try win-x64 instead of win10-x64?. And it does still work from the command line withdotnet publish -r win-x64`?. @BillHiebert is probably the closest person to be able to describe what VS publish does internally. I'm not sure that it calls out to dotnet.exe.. @vijayrkn do you still need this open here? Is the issue understood and is there any more that can be shared?. Just followed up internally. This is the same issue as: https://developercommunity.visualstudio.com/content/problem/101502/vs2017-153-net-core-20-publish-a-self-contained-ap.html\nThey are planning on fixing this in the release of Visual Studio 2017 v15.5.. @vijayrkn any updates on which release the fix is supposed to be in?. @mlorbetske where should this issue go?. Ok, if its already fixed, then there is no need to move the issue.. @rakeshsinghranchi . @leecow is going to publish packages for this very soon.. @leecow did you do this today? I thought I saw some things go by.. Issue moved to dotnet/corefx #24919 via ZenHub\n. Closing as this isn't specific enough. Please create an issue with details of what you'd like to discuss so we can know who the best person would be to work with you.. Issue moved to dotnet/coreclr #14720 via ZenHub\n. Issue moved to dotnet/corefx #24918 via ZenHub\n. Move this to the ASP.NET repo. https://github.com/aspnet/Home/issues/2259. Issue moved to dotnet/standard #559 via ZenHub\n. The wording could probably be better but its telling you to install the stuff under the section \"Linux distribution dependencies\" in that document from the package manager on your distro.. I made a small commit to the instructions to hopefully clarify. https://github.com/dotnet/core/commit/a500d1be4c51101e01eeed996e47c617a7b38427. Take a look here for Pi instructions. https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md. Going to close this now. The instructions provided should help you get up and running on a Raspberry Pi.. Issue moved to dotnet/corefx #25116 via ZenHub\n. This is probably as good a place as any. I'll try to answer some of the questions but will likely close this issues pretty quickly because its not really an issue with the product.\nA lot of the code is either exactly from or an evolution of .NET Framework code. I wouldn't say there is legacy code. There is code that was written a long time ago though. We did a lot of things on a case by case basis using ifdef's in the code, or refactoring into separate source files. We migrated most of our tests to XUnit for our C# code. For native code, that is just a thin wrapper that runs our native test runners. \nIs there something in particular you need or are trying to get to?. This repo is where most of the native code is: https://github.com/dotnet/coreclr\nThere is a tests folder where the tests live. Its a custom built test framework that is basically just a console application that returns various values depending on the result of test execution. That can then be wrapped in various higher level frameworks to provide reporting, etc.\nMost of the code in that repo copied or evolved from the code in .NET Framework. We recompile all of the code for .NET Core. The .NET Core code doesn't call \"old code\". Its all .NET Core code in that repo.. This should be opened at http://github.com/aspnet/home. Issue moved to dotnet/corefx #25115 via ZenHub\n. @russellhadley @valenis . Can you share any number you have for cold start times? There are things that can be done to make cold start better and some of it depends on how AWS has built and configured the runtime to work.. I noticed that article is using .NET Core 1.0. I know there have been significant investments in both startup and and throughput since. Particularly on Linux. I think it would be useful to do the exercise again with the latest bits to see where things stand. Overall I think this is a good scenario to try to tackle and improve.\nOn the comment for the size of a published application. How large is the published size of your serverless application?. On the size thing, we have our linker on the way which will allow the code in your \"app\" to be trimmed down to only what you need. https://github.com/dotnet/core/blob/master/samples/linker-instructions-advanced.md\nWe're going to take a deeper look at the serverless startup problem. We know how fast runtime startup is locally. We'll need to determine what other aspects of the serverless scenario are contributing to the coldstart problem.\nWe definitely want this to be great. Any additional insight is appreciated. . We are having someone reproduce the results so we can dig into more of the details.. Just saw this article from yesterday showing .NET Core 2.0 as the top dog https://read.acloud.guru/comparing-aws-lambda-performance-of-node-js-python-java-c-and-go-29c1163c2581 .. Understood. Thanks for pointing that out. Just to clarify, the \"other article\" is this one: http://theburningmonk.com/2017/06/aws-lambda-compare-coldstart-time-with-different-languages-memory-and-code-sizes/ right?\nIn general, I would expect that .NET and Java would be in the same ballpark. We did make improvements to coldstart in .NET Core 2.0 and have more in 2.1 and have more ideas for beyond that. I'd be interested in seeing how things are looking today with .NET Core 2.0 vs Java.\nThere are strategies that can be employed by the infrastructure whether its Azure or AWS to keep the process warm. You can see this in the efforts and variations the author had to go through to ensure they were getting cold start time.. I'm going to move this issue to corefx. The outcome here is probably to add a ref count to get this on the list of things to consider porting to .NET Framework.. Issue moved to dotnet/corefx #25079 via ZenHub\n. I moved this here: https://github.com/aspnet/Home/issues/2272 which should get it on the right radar.. Seems fine to me. Will be just close the issues that are open against this script then as well?. LGTM. Issue moved to dotnet/coreclr #14932 via ZenHub\n. Issue moved to dotnet/corefx #25127 via ZenHub\n. @richlander @mmitche @sunandabalu . I think we could build the samples but it hasn't been a problem to date. Are there any other things that CI covers here?. I'm happy to have this issue turn into. \"CI should build the samples\" if thats the only purpose of CI left :). Sounds good. I think emptying it out for now is probably the right thing to do.. Issue moved to dotnet/cli #7990 via ZenHub\n. Issue moved to dotnet/corefx #25150 via ZenHub\n. Can you describe how you installed .NET Core?. Issue moved to dotnet/core-setup #3400 via ZenHub\n. Its a good suggestion and something that I think we'll want to do eventually. At least making source one step away where packages at least have a link to the source and there are CLI commands to easily get those packages, build them from source, and then use that build instead of the package. Its a little easier for non-compiled languages but its definitely a real scenario that would be nice.. Issue moved to dotnet/cli #8814 via ZenHub\n. Moved this issue here: https://github.com/aspnet/Home/issues/2287. @kasper3 I think we need to solve the ability for distros to build and bootstrap .NET Core from a source tarball before it can be in the official package repositories. . @kasper3 this would be a great conversation to have on the https://github.com/dotnet/source-build repo which is where the effort to get this all figured out is happening.. Looks like everything on the list is done other than bug fixing functional issues. I think those can be tracked as individual issues in the product in the repo they are in. @janvorli do you agree? Do you think we can close this one now?. Yes, 2.0.3 can be installed without removing 2.0.0. Everything targeting 2.0 will start to run on 2.0.3 unless they have explicitly said they don't want to run on anything higher than 2.0.0.\nIt would be nice if we could still have yum update give the new version even though its installed side by side with the old one.. Yes, 2.0.0 can be removed unless you have applications that have specifically locked themselves to 2.0.0 which should be rare to never. :). Whatever we do, we should apply to both runtimes and SDK's if there is a good way to do it.. All the packaging for the runtime is in the dotnet/core-setup repo. @chenowen , what are you trying to update? A setting in your project file? Are you publishing a self-contained application or a shared framework application? \nIf its a shared framework application, it will run on the highest patched version of 2.0.X. So if you installed the 2.0.3 SDK that installs the 2.0.3 runtime and your shared application will run against it.. I guess the next question is why you need to upgrade the NuGet package? Are you building a self-contained application?. I see, you shouldn't need to update netcoreapp in order to upgrade EF Core. Do you have a reference to:\n<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\nIn your project? That is the reference that you can update to 2.0.3 in order to get EF Core updated?. When you are building a shared framework application, your application can run on 2.0.X for any version of X. Its not until you deploy to production that you know exactly what you are running on.\n@Ming-Sizung where in VS are you seeing the display version?. Closing in favor of https://github.com/dotnet/core/issues/1172. Dotnet build is incremental. There are places where there are bugs or things need improvement but if something hasn't changed, generally, it shouldn't get rebuilt. If you are seeing that it may be a bug in the sdk. Msbuild supports incremental build. Can you give more details on where you see this?. Can you share the console output of dotnet run. MSBuild is what is used during dotnet build and dotnet run so both support incremental build. It may say \"rebuild\" but there may be a bunch of \"no-ops\" in there. I also know that for the next release of the SDK, there is a lot of focus on finding an fixing bugs that are causing rebuilds even though things haven't changed.. Ok, I'm going to move this issue to the dotnet/cli repo where the right people can get engaged to make sure we can address the incremental run scenario.. Issue moved to dotnet/cli #8036 via ZenHub\n. Translated:\nSystem.Net.Http.dll 4.6.25220.1 and System.Net.Http.dll 4.6.25514.4 is not compatible and NuGet is not 4.6.25514.4 this version\n@davidsh is this another instance of the OOB/Binding redirect challenges with System.Net.Http?. Issue moved to dotnet/corefx #25516 via ZenHub\n. @zhenlan is this issue best moved to the WCF repo?. Moved this issue here: https://github.com/aspnet/Home/issues/2291. LGTM. That means that it can't find the 2.0.0 runtime next to where dotnet is. Where did you extract the tar.gz and if you run which dotnet where is it running from?. under /opt/dotnet do you have /opt/dotnet/host/fxr with some versions as well as /opt/dotnet/shared/Microsoft.NETCore.App/2.0.0 or higher? I'm guessing you have 2.1 there.\nI believe whats happening is that you are downloading from master which is 2.1. Either update your project to be netcoreapp2.1 or download the tar.gz from here to get the latest 2.0 runtime: \nhttps://dotnetcli.blob.core.windows.net/dotnet/Runtime/release/2.0.0/dotnet-runtime-latest-linux-arm.tar.gz. We're working on making it an option to run a 2.0 app on 2.1 but it doesn't work today. 2.1 is really early still. You should have no problem running once you install 2.0. Can you share the list of folder under dotnet/shared/Microsoft.Netcore.App? Is 2.0.0 there or 2.0.something.... Glad its working. Those instructions are aimed at making it easier because its a self contained app. Why not include all of what?. Going to close this now. If there is something more we can do in the instructions, let us know.. Moved this issue here: https://github.com/aspnet/Home/issues/2288. Actually, its not SDK/Runtime confusion, its SDK that contains two runtimes confusion :) This is by design. The 1.0.5 page is shared for runtimes 1.0.5 and 1.1.2 as well as SDK 1.0.4. Yes, the versions are confusing and there are many conversations going on about how to make them better.. Actually, this is is a bug. I don't see a link to download the 1.1.2 runtime installers. It's pointing to the SDK 1.0.4 where the runtime download links are only for the 1.0.5 and not 1.1.2.\n@leecow, there seem to have been a discrpancy in the github release. I was able to update it.. @leecow do you have to correct links. Also seems to be broken that we're pointing to corefx and coreclr for symbols. The shared framework contains both so the link to download shared framework symbols should be all someone needs.. I'm saying that there should only be one zip for the shared runtime and it should contain the symbols from coreclr and corefx. Coreclr and corefx are repos and not something we talk about in the product. Lets keep this issue open and link it to an issue create in core-setup that should be the place where a pdb zip file is being created to match the shared runtime.. @leecow I think this is the zip we need instead of the other two. \nhttps://dotnetcli.blob.core.windows.net/dotnet/Runtime/release/2.0.0/dotnet-runtime-symbols-latest-win-x64.zip\nIt needs to be versioned for each release but its the one that corresponds to the shared runtime.. Can you share which zips those are? Are they the coreclr and corefx ones we have links to or are they something else?. So there are really two things. One that is the flat folder matching whats in shared runtime. The other is the pdb's from the packages we ship right? Getting the one with the packages right is more problematic because, as you said, there is a cummulative nature to it.\nFor now, I think we should just update the links to point to the runtime zips and then for 2.1 get a good plan in place for how packages should make their symbols available.. What were the next steps here. Do we have other issues tracking getting a symbols for the runtime in one folder/archive?. @dagood is this issue resolved now?. By resolved, I mean, can this issue be closed or is it track outstanding work?. @Eilon @DamianEdwards @davidfowl. @davidfowl @muratg can we get someone to take a look and give suggestions on what may be wrong?\n@Jacquers I don't think you should need/have the reference to NETStandard.Library. That should be brought in for you at the right version if any of your dependencies are .NET Standard libraries. I don't think that will fix this issue but it would get things more consistent with how a project should look and remove a level of NuGet complexity from your package graph.. @barongnt do you hit this issue with 2.0.3 and higher or are you trying 2.0.1?. Has anyone gotten to the bottom of this one?. Sounds good. If there are issues related to this, lets open up new bugs with all the details for that issue.. Are you able to dotnet publish -r osx.10.12-x64 and then run the resulting output in the publish folder?. yeah, don't dotnet run in that folder just run your app. If your app is called foo just run foo.. Note that dotnet run is really just for development. We should figure out how to make it work but once you have an app you want to run in production, you should always publish it and not use dotnet run.. What if you leave off the run and do .\\appname?. Im on Windows and publishing a 2.0 app for osx-x64 and the app name isn't mangled. @livarcocc I assume you want this conversation to continue on https://github.com/dotnet/cli/issues/6397 and close this one here?. I'm going to close this issue here and reopened the one on the CLI where the discussion can continue. Thanks!. I'm assuming adi == sdk :) I don't think 15.4 is required but if you can share your error, we'd be able to help more. I'm going to close this now because we need more information but will re-open if you provide more info.. Weird, that KB also looks like its for the Windows Kernel. I also don't think .NET Core depends on that patch.. Seems like whoever created that chocolatey package is putting a whole bunch of things in there that aren't needed. For example, in .NET Core 2.0, the vcredist isn't needed either. There are no dependencies that are required.. https://chocolatey.org/packages/dotnetcore-sdk. I'm going to move this to the coreclr repo because it is primarily a runtime feature + some tooling.. Issue moved to dotnet/coreclr #17026 via ZenHub\n. Issue moved to dotnet/coreclr #15347 via ZenHub\n. Based on our conversation in email. I think the next step is to try to use http://www.github.com/dotnet/source-build inside the ebuild script.. Since there hasn't been any further conversation here, I'm going to close this now. If there are follow ups, please open an issue in http://www.github.com/dotnet/source-build . @richlander are you following up with the folks from https://github.com/Microsoft/OMS-Agent-for-Linux?. Issue moved to dotnet/corefx #25746 via ZenHub\n. The official released builds are all linked off of http://www.dot.net . There is no .NET Core 2.1.2. Thats the SDK version. I believe the 2.2 SDK is the one that currently supports .NET Core 2.1 targeting.\n@KathleenDollard @richlander we really need to make the SDK's not have a version cap for the runtime and somehow fix the versioning confusion.. That has to be the SDK version because there is no 2.1.2 runtime version in existence. \nI can see how this is all very confusing.\n@KathleenDollard is there a good doc that explains what dotnet --info and dotnet --version return.. What does dotnet --info return? The reality is that there can be more than one runtime available for an SDK. I believe there is a dotnet --list-runtimes command that was added recently that will give you all available runtime versions. Also, because you have have many versions, dotnet really needs to see the application you intend to run in order to say which framework it will run on. It may have explicitly set a framework version for example.. @richlander should we move this issue to the docs repo to track it?. @janvorli Did this get fixed in .NET Core 2.1?. @Eilon @davidfowl @muratg . You will likely get more help in the aspnet/home repo. I'm going to help you move this there.. opened this issue to track this in a place where more eyes with ASP.NET expertise are around. https://github.com/aspnet/Home/issues/2304. Meant to close this issue here to it can be tracked by aspnet/Home#2304. Issue moved to dotnet/cli #8209 via ZenHub\n. Issue moved to dotnet/core-setup #3506 via ZenHub\n. Issue moved to dotnet/corefx #25816 via ZenHub\n. Issue moved to dotnet/corefx #25817 via ZenHub\n. There is a preview version of the debugger available. https://github.com/OmniSharp/omnisharp-vscode/issues/1562#issuecomment-348349242 give it a try :). Closing this one as a duplicate of https://github.com/dotnet/core/issues/971. That would require someone putting .NET Core in NPM.. Issue moved to dotnet/cli #8208 via ZenHub\n. Issue moved to dotnet/corefx #25828 via ZenHub\n. Issue moved to dotnet/cli #8203 via ZenHub\n. @leecow did we get all the release notes out and we can close this issue?. @KathleenDollard @richlander \ndotnet --version isn't very intuitive and neither are the version numbers so I understand the confusion. There is work happening to try to fix some of that. At a high level though, the 2.1.2 SDK contains .NET Core 2.0.3 runtime so you have the right thing.. @leecow @livarcocc to point to release notes. I believe the minor version went up because the SDK took the the new C# compiler to support C# 7.2.. Is there a reason you are specifying 2.0.0 in your global.json?. @richlander I assume old container configurations are still available by name?. Is there a reason they have to stick to the 2.0.0 sdk? That is not the same as the 2.0.0 runtime. The 2.1.2 SDK is the latest stable release of the SDK that targets the 2.0.0 runtime. We recommend people moving forward on SDK's while still targeting 2.0 as the platform version.. yeah, you will need to remove the entry from global.json that says you can only use the 2.0.0 SDK. That feature is really only for people who are broken for some reason with the newer SDK and need to lock back until we get a fix out.. @KathleenDollard do you think we can link to the current proposed fix/spec for this and close this issue?. @KathleenDollard . I believe you can write a .NET Standard 2.0 Library in VB but haven't tried myself. You should then be able to reference that as a dll just about anywhere.. I wasn't saying that was a complete solution. You mentioned .NET Standard so I figured I'd mention that. @KathleenDollard is probably best to answer vb for .NET Core and @DamianEdwards may be able to comment on vbhtml.. I'm going to close this issue now because VB support in ASP.NET is tracked here: https://github.com/aspnet/Home/issues/2738\n@Eilon . Issue moved to dotnet/cli #8219 via ZenHub\n. Issue moved to dotnet/project-system #3394 via ZenHub\n. To produce a compiled output that is 32bit, yes, you can dotnet publish -r win-x86. That will produce a self-contained application. In .NET Core 2.0 and beyond, you can add a --self-contained=false to that command to prevent the whole runtime being placed in your output folder. \nLastly, if you want to run the SDK as 32bit, you need to create a 32-bit environment with the 32-bit dotnet.exe being the one on your path or find some other solution for ensuring that only the 32-bit SDK is used. \nI'm going to close this now. If there are still challenges. Let us know and we can help open up an issue on the specific case where there are challenges.. For completeness, what is your TargetFramework? I'm assuming it's netcoreapp2.0?. Actually, looks like it's netstandard2.0. Right?. Not sure but it may already be included in the ASP.net All package. Can you try removing Microsoft.VisualStudio.Web.CodeGeneration.Design?. .NET Core runs on basically any glibc based distro. Assuming the version of OpenWRT/LEDE you are using is glibc based, you can try this:\nDownload the runtime tar.gz and extract it somewhere and put it on your path. https://www.microsoft.com/net/download/thank-you/dotnet-runtime-2.0.4-linux-x64-binaries\nFollow the same instructions as for a RaspberryPi and publish a self contained application from any developer machine. https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md\nUse linux-x64 instead of linux-arm. Also make sure you have installed the linux pre-reqs into your distro. https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md#getting-the-app-to-run-on-the-pi\n. I'm going to close this for now. We're constantly exploring how to run on more distros. Give my suggestions a try and let us know how it goes.. Issue moved to dotnet/corefx #25962 via ZenHub\n. Issue moved to dotnet/corefx #26340 via ZenHub\n. closing in favor of https://github.com/dotnet/core/issues/1199. Issue moved to dotnet/corefx #28182 via ZenHub\n. @rrelyea probably should move to nuget/home?. I think this page has been totally changed now. Let us know if you still see 404 pages behind links.. I think you need to go back to package references and you need to do dotnet publish to produce a build of your application with everything copied. dotnet build and dotnet run do things the \"fast way\" which is to reference things where they are on disk and avoid the cost of copying to the app folder. Publish is the way to build your final application with everything copied local. Make sure you run your app from the publish folder at that point using dotnet path/to/publish/folder/App.dll.. Issue moved to dotnet/cli #8837 via ZenHub\n. @Eilon . Issue moved to dotnet/wcf #2588 via ZenHub\n. I believe this is all noted here: https://github.com/dotnet/core/blob/master/release-notes/2.0/README.md\nDoes that help?\n. @Eilon . @joeloff . @Eilon do you know which repo this should be tracked in?. @rakeshsinghranchi @wli3 . Issue moved to dotnet/cli #8838 via ZenHub\n. @Eilon . @Eilon . We're looking into it. Thanks!. @livarcocc may be able to get the right people to answer that. Are you using global.json because you want to force yourself to a specific SDK and not just use the latest that VSTS has?. @Eilon @DamianEdwards . @leecow are the runtime and SDK versions mismatched in the original post? \n.NET Core 1.0.9, 1.1.6 and .NET Core SDK 2.1.4\n.NET Core 2.0.5 and .NET Core SDK 1.1.7\nI think it should be 2.X with 2.X and 1.X with 1.X.. @christiansk , I believe you need the SDK version 2.1.4 in order to have VS support targeting 2.0.5. dotnet --version should say 2.1.4 if you have the right SDK installed.. Here are a few things to note.\n1) By just installing 2.0.5, all your tools and applications that were running on shared 2.0.0 runtime will now run on 2.0.5.\n2) 2.0.5 is not \"targetable\" per se. It doesn't have any new API's, just bug fixes. \nSo just by installing the 2.1.4 SDK, when you do things like dotnet run a 2.0.0 application, it will automatically run on 2.0.5.\nIf you are doing a self-contained application, you need to explicitly set the version of the runtime you want with your application. This can be done by adding <RuntimeFrameworkVersion>2.0.5</RuntimeFrameworkVersion> to your project in a PropertyGroup.\nHope this helps.. Because we are realigning major and minor for the runtime and sdk.. Closing this one in favor of the latest announcement: https://github.com/dotnet/core/issues/1341. Do you want to get to a newer preview or get out of preview? What version do you want? Is this the SDK you are trying to get? @livarcocc @wli3 . @rakeshsinghranchi @wli3 @leecow do we have pkg uninstall instructions anywhere?\n@zwszwszws you should be able to just install the latest installer from https://www.microsoft.com/net/download/macos and you will have the latest.. @zwszwszws does that work for you?. Closing now as we haven't heard back in a month. Let us know if there are still open questions.. Issue moved to dotnet/cli #8399 via ZenHub\n. This one needs to get moved to aspnet/home. I will likely make a pass a copy things over there unless the issue opener wants to move it themselves. . Moved here: https://github.com/aspnet/Home/issues/2785. Isn't that what the issue is? On Windows, when you set \"CreateNoWindow\" to true is when you'd expect no new window. I think @maroallegro is wanting to create a new window so setting it to false. And it works that way on Windows.. Issue moved to dotnet/corefx #26337 via ZenHub\n. This one needs to get moved to aspnet/home. I will likely make a pass a copy things over there unless the issue opener wants to move it themselves. . @Eilon . Issue moved to dotnet/corefx #26336 via ZenHub\n. Issue moved to dotnet/corefx #26293 via ZenHub\n. Issue moved to dotnet/cli #8386 via ZenHub\n. Issue moved to dotnet/cli #8398 via ZenHub\n. Issue moved to dotnet/coreclr #15857 via ZenHub\n. @livarcocc @davkean Do you think this is SDK or project system?. Which repo is the best to track this in?. Issue moved to dotnet/project-system #3399 via ZenHub\n. Issue moved to dotnet/corefx #26359 via ZenHub\n. Moved to: https://github.com/aspnet/templating/issues/233. In 2.1, I believe all the runtime/host features are there to put them wherever they want to be. The work would be in the SDK to allow for more options.. Issue moved to dotnet/cli #8840 via ZenHub\n. Closing now as this is answered.. Issue moved to dotnet/cli #8836 via ZenHub\n. Issue moved to dotnet/coreclr #17016 via ZenHub\n. In general, I expect that we will keep working on 10.12 for longer than previous versions. We made a change to depend on Apple Crypto in 2.0 to eliminate the need for users to get keep updating OpenSSL. If it weren't for that, I think we would have supported lower versions in .NET Core 2.0. Yes, we will only officially support 10.12 as long as Apple does.. Unfortunately, the chip on the RPi 1B+ is an older ARMv6 architecture. .NET Core depends on instructions only available in ARMv7 an higher.. @Eilon @muratg . @muratg @DamianEdwards @Eilon any pointers on where to start?. Issue moved to dotnet/wcf #2686 via ZenHub\n. This sounds more like a question for AWS Lambdas. https://github.com/aws/aws-lambda-dotnet . I moved this issue here: https://github.com/aws/aws-lambda-dotnet/issues/248. @DamianEdwards @muratg . @rajurh did you get everything you need from the responses? Can we close this issue?. @Eilon . @Eilon @davidfowl should this issue get moved to an ASP.NET repo?. Issue moved to dotnet/corefx #28132 via ZenHub\n. Issue moved to dotnet/corefx #27304 via ZenHub\n. Issue moved to dotnet/corefx #27305 via ZenHub\n. I'm going to close this here and let it be tracked by dotnet/sdk#1539. @leecow \nI believe we have an issue tracking this somewhere and it is on the list of things @leecow was going to drive getting fixed.. @leecow you said you had made some progress here on a spec. Is there a link?. Issue moved to dotnet/core-setup #3850 via ZenHub\n. @weshaggard any thoughts? @TerraVenil is this still a problem for you?. @muratg @Eilon @ajcvickers Is this somewhere in MVC/EF?. Good start. Do you want to open an issue on the dot.net website to make sure we get runtime instructions there as well?. @weshaggard is this a corefx issue?. Wondering if this was some temporary glitch. The script seems to be there for me now.. Issue moved to dotnet/cli #8651 via ZenHub\n. I don't believe UpDownBase is in .NET Core.. I'm going to close this issue here because its not related to .NET Core. You can open it here: https://github.com/microsoft/dotnet/issues if you'd like.. Issue moved to dotnet/coreclr #16463 via ZenHub\n. Issue moved to dotnet/corefx #27308 via ZenHub\n. @noahfalk . RHEL.6 support is currently advertised as \"preview\". I expect we'll be removing the preview marker soon and at that point the answer will be yes. Microsoft would actively support it. In the mean time, we believe it is ready to go and would love to hear that its working for you or if there are any issues so we can address them.\n@richlander we should discuss what's left in moving this to \"fully supported\".. @livarcocc can you speak to a RHEL.6 option for the SDK?\nSelf-contained applications should work just fine. You have to publish one specifically for rhel.6 like:\ndotnet publish -r rhel.6-x64 --self-contained. 1. Yes, \n2. We are testing on RHEL 6.9. \nThere are also special instructions you have to follow to get the prereqs on RHEL 6. https://github.com/dotnet/core/blob/master/Documentation/build-and-install-rhel6-prerequisites.md. Ok, I'm going to close this now as I think the question is answered. We will support this in .NET Core 2.1.. Issue moved to dotnet/cli #8650 via ZenHub\n. @tmat perhaps you can give insight here?. Issue moved to dotnet/corefx #27307 via ZenHub\n. @leecow is Debian 9 supported by 1.0?. I'm going to move this to the corefx repo where it will be tracked better.. Issue moved to dotnet/corefx #27951 via ZenHub\n. Issue moved to dotnet/corefx #27306 via ZenHub\n. Issue moved to dotnet/coreclr #16462 via ZenHub\n. @Pilchie do you know which repo this should be tracked in?. Issue moved to dotnet/project-system #3302 via ZenHub\n. Issue moved to dotnet/cli #8649 via ZenHub\n. Issue moved to dotnet/core-setup #3712 via ZenHub\n. Issue moved to dotnet/coreclr #16510 via ZenHub\n. A few comments/questions:\n\n\nAre you willing to install the runtime as a pre-requisite or do you want to ship the runtime with the application? There is a feature that is being designed to enable apps that depend on a runtime still having an exe. This world would allow your app to be much smaller but would require that .NET Core Runtime that you depend on be installed on the target machine.\n\n\nWe have a preview of a linker that will shake out code that is not used and usually makes the app smaller but doesn't change the number of dll's. Check out https://github.com/dotnet/core/blob/master/samples/linker-instructions.md\n\n\nThe next step after the linker will be something that is being called \"bundling\" which is exactly what you talked about. The ability to have a single executable artifact. There isn't a clear timeline/roadmap on that one but I know there are people looking into it.\n\n\nYou mentioned users not wanting to integrate such large numbers of files. Is the option of putting up a zip file that you just tell people to extract an option? If all the files were in a sub folder and when they opened your app it was just an exe (maybe also a config) and then a sub folder with \"dependencies\", would that help?\n\n\n. Agreed that this would be a useful feature. @sbomer @jeffschwMSFT as FYI. I think this may be tracked elsewhere but I'll leave this issue open for now unless there is a better one to point to.. Issue moved to dotnet/coreclr #17015 via ZenHub\n. Issue moved to dotnet/project-system #3307 via ZenHub\n. @terrajobst , sounds like this one is just unfortunately hitting the small set of API's that fell through the cracks. Anything actionable here? Should we move this to the standard repo or close?. Issue moved to dotnet/standard #684 via ZenHub\n. @leecow , anything I can do to help on this one?. Great. Should we upload Preview1 to it?. Ok, @leecow do you need this issue open to track it happening or can we close it?. I'm going to close this issue now because it is addressed in dotnet/corefx#26966. Because versioning got out of sync and confused people. We now plan to always alight the major and minor. . @livarcocc Can you look into this one?. @karelz should we open an issue in corefx to track @bobuva's reported issue?. Thanks!. The linked issue is the best way to track this. We are supportive of .NET Core being used on more CPU's and architectures and encourage the community to help us do that. I'm going to close this issue here and conversations can continue at dotnet/coreclr#969. Issue moved to dotnet/standard #683 via ZenHub\n. @Eilon @muratg @DamianEdwards . @Eilon @muratg @DamianEdwards . @Eilon . @sbomer . Yeah, if you like the change, go ahead.. Ah, I didn't notice that you made the PR :). Issue moved to dotnet/cli #8746 via ZenHub\n. Looks like you need to figure out what is bringing in the System.Windows.Forms dependency. What is your TargetFramework? What are the other System assemblies?. Issue moved to dotnet/corefx #27854 via ZenHub\n. Issue moved to dotnet/corefx #27936 via ZenHub\n. We have done the alignment of SDK and Core and done work to enable enumeration of whats installed and in view of the SDK and runtime. @laktak, do you have any feedback based on the planned results here? If not, we can probably close this issue because this is already and area that is tracked in other issues.. This is all being implemented in the .NET Core 2.1.300 SDK. dotnet --version will only give you the sdk version because thats why it was added initially and people use it expecting a single value that is the sdk version. There were discussions about deprecating that switch and providing things like dotnet --version sdk so you can request a specific version. I'm going to move this issue to the core-setup repo where @steveharter can comment more on exact details of the changes and when they will be merged in.. Issue moved to dotnet/core-setup #3816 via ZenHub\n. Issue moved to dotnet/cli #8757 via ZenHub\n. Issue moved to dotnet/cli #8764 via ZenHub\n. You should be able to publish for Alpine and use it on other musl-libc based distros.\nMy understanding is that in addition to just supporting musl-libc, we would have to make sure the binaries are created in a distro agnostic way with respect to other dependencies like openssl and libunwind.. I think thats something we can consider. We'd have to make the graph something like this: linux-x64->musl-linux-x64->alpine-x64->alpine.3.6-x64. And make sure the implementations that are in the alpine.3.6-x64 packages end up in the linux-musl-x64 packages. I'm going to move this to the core-setup repo where it can be tracked.. Issue moved to dotnet/core-setup #3817 via ZenHub\n. @leecow I updated the links and text to all say 2.1.0 instead of 2.0.1. Go ahead and check my work but I merged. :). Issue moved to dotnet/corefx #28007 via ZenHub\n. @IvanFarkas you said:\n\nI can't run .NET Core 2.1 at all!\n\nWhat error are you getting? Segfault? I'm trying to get my hands on one of these boards to try what you are doing but I don't have one right now. I've only tried it on Raspberry Pi 2 and 3. . Arm64v8 chips fully support armv7 instructions and 32bit execution which is what .NET Core requires. https://www.arm.com/files/downloads/ARMv8_Architecture.pdf\nThe fact that you were able to run .NET Core 2.0 on it shows that it should work. Now, there may be bugs or issues that need to be addressed but it should fundamentally work. \nBased on the container you mentioned initially, I'm guessing that you are running on a 32bit OS which would be utilizing the support to run arm32 instructions the same way that Raspberry Pi does.\nSo in short, based on everything I'm seeing, .NET Core should work there and I'd really like to understand why it doesn't.\nLike I said, I'm trying to get my hands on one :). Are you using a 410c or 820c board? From what I am reading, the 410c is basically the same as a Raspberry Pi 3B as far as chip.. I know the intent intent is that debugging fully works for all our supported runtimes.. I know you said that you don't like the quality of the Raspberry Pi chips but is it an option for a demo?. I know you said that you don't like the quality of the Raspberry Pi chips but is it an option for a demo?. Issue moved to dotnet/coreclr #16925 via ZenHub\n. Is this what you are looking for? https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md. Issue moved to dotnet/docs #4663 via ZenHub\n. Sounds like this issue isn't needed to track anything. Glad you found the info you needed.. There isn't enough information here to do anything with this. I'm closing it. Please provide more actionable information if there is an issue that needs addressing.. There isn't enough information here to do anything with this. I'm closing it. Please provide more actionable information if there is an issue that needs addressing.. @steveharter @nguerrera is this something for the host or something that needs to be fixed in publish. Host doesn't know the name of the app until publish.. I think the different here is that for a self-contained application or any application where the host is renamed to match the program name, we should be able to give something better in task manager.. @nguerrera @livarcocc I'm going to move this to the CLI repo because I think this is about what happens when the apphost exe is renamed and updated to \"look like the app\".. Issue moved to dotnet/cli #8832 via ZenHub\n. Issue moved to dotnet/cli #8818 via ZenHub\n. Issue moved to dotnet/cli #8826 via ZenHub\n. Issue moved to dotnet/corefx #28157 via ZenHub\n. @jeffschwMSFT . Issue moved to dotnet/coreclr #17014 via ZenHub\n. Issue moved to dotnet/corefx #28172 via ZenHub\n. Issue moved to dotnet/project-system #3398 via ZenHub\n. 2.0.X are not LTS releases. This issue should get moved to the website repo.. Issue moved to dotnet/dotnet-core-website #545 via ZenHub\n. @rowanmiller can you give an update?. Issue moved to dotnet/corefx #28230 via ZenHub\n. Issue moved to dotnet/core-setup #3856 via ZenHub\n. I think everything in this issue is done. I'm closing. Let us know if thats not the case.. @DamianEdwards . @Eilon this sound like its most likely an ASP.NET question.... @wfurt @karelz . @wfurt is there anything more to track here or can the issue be closed?. Translated: In asp.net core 2.0+, when writing authentication, the IE kernel browser cannot write cookies, but Google or Firefox is normal. The following is my code.\n@DamianEdwards @Eilon . @jkotas do you know where this issue should get tracked/discussed?. Issue moved to dotnet/corefx #28392 via ZenHub\n. Issue moved to dotnet/cli #8879 via ZenHub\n. Issue moved to dotnet/coreclr #17138 via ZenHub\n. Issue moved to dotnet/corefx #28409 via ZenHub\n. Looks like you will need to work with that library author to get a version that doesn't have a Windows dependency. It looks like libpcap is likely what needs to be used on linux. I'm going to close this issue here because it really is an issue to work with the library author on.. If you read the readme on that github project, it notes that it is only packaging the library for Windows and that you need to compile the library yourself and copy it into your application to get Mac and Linux support.. Issue moved to dotnet/dotnet-core-website #551 via ZenHub\n. Ok, we can leave it open here and close it when its fixed.. Doesn't repo for me either on Edge on Windows.. Yeah, I get apt-get when I switch to Ubuntu.. @leecow . Issue moved to dotnet/corefx #28642 via ZenHub\n. @richlander . @richlander it looks like this happened. Can this be closed?. There is active work underway to improve startup performance of arm32 and I expect some of that will land in 2.1 Preview2. On our x64 runtime, for example, we do a bunch of the startup compilation of the core runtime at build time. This usually results in cutting the startup time for helloworld in half. Results vary depending on the application of course. We are working on doing the same thing for arm32. \nAre you using MVC Views and if so, are you pre-compiling them? That would be another way to speed up startup for ASP.NET.. @RussKeldorph @richlander . @MeiChin-Tsai . Issue moved to dotnet/cli #9637 via ZenHub\n. Issue moved to dotnet/cli #9637 via ZenHub\n. I'm not sure there is enough information here to help. Slower drive? If you can provide more details about the performance and hardware characteristics, there is a better chance of someone being able to help.. Issue moved to dotnet/corefx #28641 via ZenHub\n. @leecow . @tmat . Issue moved to dotnet/corefx #29223 via ZenHub\n. Closing since we took the PR a while ago.. Thanks. Issue moved to dotnet/coreclr #17362 via ZenHub\n. Issue moved to dotnet/corefx #28694 via ZenHub\n. @muratg . Issue moved to dotnet/coreclr #17434 via ZenHub\n. Issue moved to dotnet/corefx #28984 via ZenHub\n. Our pattern is generally to focus on the release at hand. Once we're mostly complete, we start exploring what should be in the next minor and possibly the next major release. I would expect high level direction and thinking for whats in a 2.2 or a 3.0 to come out closer to when .NET Core 2.1 ships.. @DamianEdwards @richlander @leecow . Issue moved to dotnet/coreclr #17681 via ZenHub\n. Issue moved to dotnet/corefx #29065 via ZenHub\n. Issue moved to dotnet/corefx #29066 via ZenHub\n. @jaredpar @MadsTorgersen . @richlander @jaredpar anything else left to track here?. Issue moved to dotnet/core-setup #4049 via ZenHub\n. @leecow @livarcocc . So the app builds and runs just fine? Its just the unit testing that doesn't work? @kendrahavens Do you know the best people to loop in to help here?. @joeloff is this a known issue tracked anywhere?. Ok, closing here in favor of that one.. Great. Issue moved to dotnet/corefx #29220 via ZenHub\n. Can you try a simple console helloworld application? My guess is that you don't have the ASP.NET Core Runtime installed that matches the build you are targeting.. That error tells me that you are not running dotnet publish -r linux-arm to create the application or that you are not copying the app from the output folder of that app. Can you confirm?. That error tells me that you are not running dotnet publish -r linux-arm to create the application or that you are not copying the app from the output folder of that app. Can you confirm?. There should be a publish folder under there that is what you need to use.. There should be a publish folder under there that is what you need to use.. This is one of the places where people get confused a lot and something I'm hoping we can address in a future update. @livarcocc @KathleenDollard . This is one of the places where people get confused a lot and something I'm hoping we can address in a future update. @livarcocc @KathleenDollard . Looks like this can be closed now.. Looks like this can be closed now.. Looks like the original request here was answered so I'm going to close this now. If there are follow ups, please open new issues specific to those.. Looks like the original request here was answered so I'm going to close this now. If there are follow ups, please open new issues specific to those.. Out of curiosity, is the scenario that you are trying to publish the tests so you can run them on your Raspberry Pi? When I looked at the solution, there isn't really an \"application\" in there which is what publish is primarily designed for. The only publishable things in there are the unit tests.. Out of curiosity, is the scenario that you are trying to publish the tests so you can run them on your Raspberry Pi? When I looked at the solution, there isn't really an \"application\" in there which is what publish is primarily designed for. The only publishable things in there are the unit tests.. Where are you looking. Everything published should be signed.. Where are you looking. Everything published should be signed.. Is there a reason you need to strong name verify these? They are all authenticode signed.. Is there a reason you need to strong name verify these? They are all authenticode signed.. Hi @emanueleleoni are you still hitting this? This usually happens because the folder that is copied to the raspberry pi isn't the published folder and is missing some stuff.. Hi @emanueleleoni are you still hitting this? This usually happens because the folder that is copied to the raspberry pi isn't the published folder and is missing some stuff.. @glennc where is the best place for @patelmiral81 to follow all the work we're doing for microservices?. @glennc where is the best place for @patelmiral81 to follow all the work we're doing for microservices?. It should be able to run if you collect together the right bits.. It should be able to run if you collect together the right bits.. native dotnet arm64 support is in our future plans but it will not be a part of .NET Core 2.1.. native dotnet arm64 support is in our future plans but it will not be a part of .NET Core 2.1.. There is a community build available that works on native arm64.. There is a community build available that works on native arm64.. Check out the builds on the dotnet/core-setup repo. Check out the builds on the dotnet/core-setup repo. If everything is hooked up right 'dotnet publish -r linux-arm64' will do it. If things aren't wired up, you may need to put some things together in a less automated way.. If everything is hooked up right 'dotnet publish -r linux-arm64' will do it. If things aren't wired up, you may need to put some things together in a less automated way.. @kizambrano did you give it a try. The scenario is not blocked in the SDK. It was supposed to get E2E but there may be some bugs. Its not an officially supported scenario for arm64 but should work and if people hit issues, we can open them, get them fixed and people will be able to use our daily builds to get those fixes... @kizambrano did you give it a try. The scenario is not blocked in the SDK. It was supposed to get E2E but there may be some bugs. Its not an officially supported scenario for arm64 but should work and if people hit issues, we can open them, get them fixed and people will be able to use our daily builds to get those fixes... How did you obtain the arm64 runtime?. How did you obtain the arm64 runtime?. Ok, if you are doing that, you would be depending on a shared runtime. For starters, I would suggest just doing what I suggested above with dotnet publish -f linux-arm64. That will pull the whole runtime into your application for arm64. If you want to go the shared framework route later, we can work through that but its not as simple to get started.. Ok, if you are doing that, you would be depending on a shared runtime. For starters, I would suggest just doing what I suggested above with dotnet publish -f linux-arm64. That will pull the whole runtime into your application for arm64. If you want to go the shared framework route later, we can work through that but its not as simple to get started.. You need to be using the .NET Core 2.1 RC SDK or greater. https://www.microsoft.com/net/download/dotnet-core/sdk-2.1.300-rc1. You need to be using the .NET Core 2.1 RC SDK or greater. https://www.microsoft.com/net/download/dotnet-core/sdk-2.1.300-rc1. You also need to be targeting netcoreapp2.1.. You also need to be targeting netcoreapp2.1.. Issue moved to dotnet/cli #9657 via ZenHub\n. Issue moved to dotnet/cli #9657 via ZenHub\n. Issue moved to dotnet/cli #9659 via ZenHub\n. Issue moved to dotnet/cli #9659 via ZenHub\n. @MichaelSimons is this something you can try to get a repro for?. @MichaelSimons is this something you can try to get a repro for?. Ok, we need to figure out if it's something that has to get fixed in 2.1 RTM. I'll see if I can get someone else to figure out what is causing the failure.. Ok, we need to figure out if it's something that has to get fixed in 2.1 RTM. I'll see if I can get someone else to figure out what is causing the failure.. Is this Alpine specific or SE Linux? Is this a regression from 2.0?. Is this Alpine specific or SE Linux? Is this a regression from 2.0?. Issue moved to dotnet/coreclr #17931 via ZenHub\n. Issue moved to dotnet/coreclr #17931 via ZenHub\n. I moved this issue to coreclr so it can be tracked.. I moved this issue to coreclr so it can be tracked.. @RoySalisbury there should be one without the build number in it. @leecow sound like he has it under control :). @RoySalisbury there should be one without the build number in it. @leecow sound like he has it under control :). It should be in the SDK tar.gz and there should be an ASP.NET Core Runtime for ARM32 tar.gz @livarcocc @DamianEdwards @muratg . Can you confirm whether the ASP.NET runtime made it in or if thats something we need to address for RTM?. It should be in the SDK tar.gz and there should be an ASP.NET Core Runtime for ARM32 tar.gz @livarcocc @DamianEdwards @muratg . Can you confirm whether the ASP.NET runtime made it in or if thats something we need to address for RTM?. That may be true. It should have its own runtime tar.gz and should have been in the sdk. I opened this to track it: https://github.com/dotnet/cli/issues/9218. That may be true. It should have its own runtime tar.gz and should have been in the sdk. I opened this to track it: https://github.com/dotnet/cli/issues/9218. Closing this now as .NET Core 2.1 has released.. Issue moved to dotnet/corefx #31037 via ZenHub\n. Closing in favor of the latest updates: https://github.com/dotnet/core/issues/1765. Closing in favor of the latest updates: https://github.com/dotnet/core/issues/1765. Issue moved to dotnet/coreclr #17932 via ZenHub\n. Issue moved to dotnet/cli #9241 via ZenHub\n. @Alissonerdx I'm not sure this is the right forum for that conversation. I'm going to close this issue now.. @barrytang @Pilchie can you help with this one? Where should the issue get tracked?. Ok, I'm going to close this issue here. @darewreck54 go ahead and follow up in github.com/nuget/home to dig in.. you will need different executables for Windows and for Linux. @steveharter didn't we enable this in 2.1?. @richlander do you need this issue open to track this or can it just be closed and referenced from where you are tracking it?. @shawnro @dleeapho, you have a place you want to track this in the github. I know its listed in the larger list of important scenarios to enable but we should keep the community up to date on the plans.. Issue moved to dotnet/cli #9638 via ZenHub\n. @terrajobst . @abhisheksaxena741 I'm going to close this now based on the guidance given by @terrajobst . Let us know if that wont work and we can discuss further if needed.. Issue moved to dotnet/corefx #31036 via ZenHub\n. Issue moved to dotnet/coreclr #18449 via ZenHub\n. I'm going to close this now. The coreclr issue mentioned above is the best place to track progress and ask questions. Issue moved to dotnet/coreclr #18599 via ZenHub\n. @jaredpar . Issue moved to dotnet/corefx #30963 via ZenHub\n. Issue moved to dotnet/coreclr #18856 via ZenHub\n. Let us know if @dasMulli 's advice doesn't solve your problem.  Closing for now.. Thanks!. I think there are very rational arguments here for what we might have done in hindsight but rebranding at this point is not likely to happen.. @DamianEdwards . You likely need to copy aspnet into the right location. Should work if you do that an console apps run fine. . Issue moved to dotnet/coreclr #18448 via ZenHub\n. Just make sure you use a 32bit OS and use 32bit .NET core. There is a 64bit arm build available. No official timeline for officially supporting it.. Let us know how it goes.. Issue moved to dotnet/core-setup #4228 via ZenHub\n. Issue moved to dotnet/core-setup #4230 via ZenHub\n. @leecow should we move this to the nuget repo to track it to start?. I'd also just remove the 1.0 preview from your machine and delete your global.json unless you have a strong reason for it.. Issue moved to dotnet/coreclr #18894 via ZenHub\n. @muratg can you move this to ASP.NET's repo for the conversation?. Can you try running 'dotnet restore' on your project from the command line? . Issue moved to dotnet/cli #9476 via ZenHub\n. Does this reproduce regularly? Can you share what is happening in your application that causes the crash? We're going to need more details to find the problem. . @muratg can you have someone help take a look?. @karelz . Issue moved to dotnet/coreclr #18447 via ZenHub\n. I made a PR that should address what you found. Feel free to submit PR's for things like this. Especially the spaces problem is probably faster for everyone if you just submit a PR :) Thanks for reporting this.. @leecow I assume you intend these files to be the source of truth?. @mlorbetske what is the best place for this issue to go to get tracked?. Issue moved to dotnet/corefx #30349 via ZenHub\n. Issue moved to dotnet/corefx #30348 via ZenHub\n. Have you tried building on centos to see if you get different behavior? Trying to narrow down where the problem may be. . It looks like the problem is that you aren't publishing the application. The exception is a little misleading so this may not be it. Try 'dotnet publish' and using the contents of the publish folder on the other machine. If you have OS specific dependencies, you will need to 'dotnet publish -r linux-x64'. . were you able to try a published application?. Hi, sorry, I missed the responses and realize that its been a long time. Were you able to get this working? Is this still a problem you are facing?. Issue moved to dotnet/coreclr #18446 via ZenHub\n. Let's use the issue I created in the coreclr repo to dig deeper. Yes, getting a dump when the problem occurs would be helpful or a sample that repros the problem. . That's probably the best option. I'm going to close this here and let you open the new one there.. Here is my first guess. You are publishing the application as self-contained but trying to launch it on a shared framework. What happens if your final command is just to launch the executable itself and not try to launch it through the dotnet shared host? . -r on publish turns self-contained on by default. You can say --self-contained=false to turn it off. In your last scenario, how did you launch the application? Still trying to call dotnet app-name.dll?. Yeah, it would be good to narrow down the variable that changed. I forgot that Alpine is a different flavor of Linux so when you publish you need linux-musl-x64 for the runtime identifier. I'm not sure if that's going to fix this though.. That's right, you need to be on at least 2.1. Issue moved to dotnet/corefx #30357 via ZenHub\n. @muratg can you move this to the ASP.NET repo?. @muratg can you move this to the ASP.NET repo?. Issue moved to dotnet/corefx #31034 via ZenHub\n. @gayan1991 go ahead and move the issue over there. I'll close it here for now.. With the release now completely uploaded and available, is this still an issue?. ok, I'm going to close this. We can reopen if issue still persist.. @nattress do you have a place where .Net Native issues are tracked? We could move this to corefx.. Ok, I think that answers the question though. I'm going to close this issue here as the solution is to move to a newer version and we don't plan to bring it to older versions.. Does this leave this where there is just the need to have the docs updated as mentioned above?\nhttps://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x#supported-linux-versions says nothing about ARM so needs to have current info added. @JRAlexander. @muratg should this get moved to an ASP.NET repo to track?. Issue moved to dotnet/corefx #30584 via ZenHub\n. Closing in favor of https://github.com/dotnet/core/issues/1765. Closing in favor of https://github.com/dotnet/core/issues/1765. Moving to corefx. Issue moved to dotnet/corefx #30962 via ZenHub\n. @natemcmaster @muratg Do you know what is blocking this today? There is an SDK available and I would have expected that it could find the packages.. Its usually because one of the dependencies is missing. If you run strace you may get a hint for what so is trying to load and missing.. The answer is that while its not supported, there are ways to get it working. The full end to end experience hasn't been completed and we haven't been able to extensively test the product on arm64 which is why its not a complete product or something we officially support yet.. Issue moved to dotnet/corefx #31052 via ZenHub\n. This was addressed here: https://github.com/aspnet/Mvc/issues/7969. @PavelMekhnin can you also let us know what you updated from? For example, were you on 2.1.0 and went to 2.1.1 or were you on 1.0 and moved to 2.1.1?. Thanks for the details. Adding a few people. @karelz @davidsh . There is RHEL 6 support and given that Oracle Linux 6 is purported to be compatible with that, these are the instructions I would use to get it working on Oracle Linux 6. https://github.com/dotnet/core/blob/master/Documentation/build-and-install-rhel6-prerequisites.md. @Eilon as FYI \nI'm going to close this for now. Let us know if using the 2.1.301 or higher SDK doesn't fix this for you.. @davidfowl is the best place to open up a request like that in the aspnet/home repo?. @Eilon @muratg . Looks like your application is getting a reference assembly that you are trying to load and execute? @muratg @Eilon , can someone help provide guidance here?. Issue moved to dotnet/cli #9624 via ZenHub\n. There are no concrete dates for arm64 although it is being worked on. linux-arm is armhf. I don't think there are armel builds available but I may be wrong. @RussKeldorph @jkotas in case they know more.. Looks like the answer then is to use linux-arm for armhf and tizen-arm for armel for now. I'm going to close this issue. Let us know if you have other questions.. Issue moved to dotnet/corefx #30924 via ZenHub\n. @danroth27 . Issue moved to dotnet/corefx #30961 via ZenHub\n. Issue moved to dotnet/corefx #30961 via ZenHub\n. @dagood do you know what the appropriate links are?. @dagood do you know what the appropriate links are?. Issue moved to dotnet/core-setup #4365 via ZenHub\n. Issue moved to dotnet/core-setup #4365 via ZenHub\n. Talked to @leecow and there was a challenge with releasing some of the content to the normal place so the ones with url's are the ones in different locations.. Talked to @leecow and there was a challenge with releasing some of the content to the normal place so the ones with url's are the ones in different locations.. Issue moved to dotnet/cli #9656 via ZenHub\n. Issue moved to dotnet/cli #9656 via ZenHub\n. You followed the instructions here?: https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-current \nIs this Ubuntu 16.04 or 16.10?. You followed the instructions here?: https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-current \nIs this Ubuntu 16.04 or 16.10?. @richlander @dleeapho . @richlander @dleeapho . I think this is a good start to iterate off of.. I think this is a good start to iterate off of.. How did you publish your application?. How did you publish your application?. Is this Redhat 7.2 or higher?. Is this Redhat 7.2 or higher?. Looks like it should have worked just like it did on Ubuntu. @janvorli @jkotas @jeffschwMSFT @steveharter  any ideas?. Looks like it should have worked just like it did on Ubuntu. @janvorli @jkotas @jeffschwMSFT @steveharter  any ideas?. Adding @RussKeldorph . Adding @RussKeldorph . @davidfowl @Eilon any thoughts?. @davidfowl @Eilon any thoughts?. @leecow . @leecow . Fixed with https://github.com/dotnet/core/commit/aedc86a1963cafd6228a455c3880a02ab25d8901. Fixed with https://github.com/dotnet/core/commit/aedc86a1963cafd6228a455c3880a02ab25d8901. Without more information, we can't help. Closing for now.. Without more information, we can't help. Closing for now.. One of the packages you are referencing is likely pulling in a lower version of a package. @DamianEdwards have you seen this?. One of the packages you are referencing is likely pulling in a lower version of a package. @DamianEdwards have you seen this?. Issue moved to dotnet/core-sdk #81 via ZenHub\n. Issue moved to dotnet/core-sdk #81 via ZenHub\n. @RussKeldorph @sbomer . @RussKeldorph @sbomer . Issue moved to dotnet/core-setup #4419 via ZenHub\n. Issue moved to dotnet/core-setup #4419 via ZenHub\n. @dvdobrovolskiy did that help?. Hopefully that helped. Closing now.. Hopefully that helped. Closing now.. Closing because we are tracking this in dotnet/cli#6896. Closing because we are tracking this in dotnet/cli#6896. @dleeapho as FYI. Issue moved to dotnet/core-setup #4560 via ZenHub\n. Issue moved to dotnet/core-setup #4560 via ZenHub\n. Adding Damian,\nThose issues are flagging Asp.net binaries in two different locations.\n\n\nThe runtime \"store\". This location is cumulative and things in here are used by applications based on exact version match. If anything in here is getting used, the application using it needs to be updated.\n\n\nNugetFallbackFolder, this is a cache of nuget packages. Similar to above, the only way the version there will be used is if an application references it and in that case, the application needs to be updated.\n\n\nDamian, anything to add?\n-------- Original message --------\nFrom: Leith Tussing notifications@github.com\nDate: 8/8/18 1:03 PM (GMT-05:00)\nTo: dotnet/core core@noreply.github.com\nCc: Subscribed subscribed@noreply.github.com\nSubject: [dotnet/core] Confusion with security updates not showing resolved from Nessus (#1842)\nI do some basic development with VS so I'm familiar with it but I mainly do the IT side of things. Keeping user's systems updated and doing security scans to make sure everything is updated. For a couple months though I've been having issues reconciling what the Nessus security scanner is saying is on our developers systems and vulnerable versus what the systems show as being installed. All of our systems are Windows 10 running Visual Studio 2017 15.7.6. I've seen the other threads about how .NET Core old versions get left behind so on a test system I went in and uninstalled everything but the latest version which was \"Microsoft .NET Core SDK 2.1.202 (x64)\" and did a fresh Nessus scan and I still get findings.\nMicrosoft ASP.NET Core Privilege Escalation (March 2018)\nPath : C:\\Program Files\\dotnet\nInstalled version : 2.0.13103.0\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.server.kestrel.core\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.0.17205\nFixed version : 2.0.2\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.server.kestrel.core\\2.0.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.1.17303\nFixed version : 2.0.2\nPackage : Microsoft.AspNetCore.HttpOverrides\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.httpoverrides\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.HttpOverrides.dll\nInstalled version : 2.0.0.17205\nFixed version : 2.0.2\nPackage : Microsoft.AspNetCore.HttpOverrides\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.httpoverrides\\2.0.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.HttpOverrides.dll\nInstalled version : 2.0.1.17303\nFixed version : 2.0.2\nSecurity Updates for Microsoft .NET core and ASP.NET (Bypass) (July 2018)\nPath : C:\\Program Files\\dotnet\nInstalled version : 2.0.13103.0\nPackage : Microsoft.AspNetCore.Identity\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.identity\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Identity.dll\nInstalled version : 2.0.0.17205\nFixed version : 2.0.4\nPackage : Microsoft.AspNetCore.Identity\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.identity\\2.0.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Identity.dll\nInstalled version : 2.0.1.17303\nFixed version : 2.0.4\nPackage : Microsoft.AspNetCore.Identity\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.identity\\2.0.2\\lib\\netstandard2.0\\Microsoft.AspNetCore.Identity.dll\nInstalled version : 2.0.2.18051\nFixed version : 2.0.4\nPackage : Microsoft.AspNetCore.Identity\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.identity\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Identity.dll\nInstalled version : 2.0.3.18114\nFixed version : 2.0.4\nSecurity Updates for Microsoft .NET core and ASP.NET (DoS) (July 2018)\nPath : C:\\Program Files\\dotnet\nInstalled version : 2.0.13103.0\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.server.kestrel.core\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.0.17205\nFixed version : 2.0.4\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.server.kestrel.core\\2.0.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.1.17303\nFixed version : 2.0.4\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.server.kestrel.core\\2.0.2\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.2.18051\nFixed version : 2.0.4\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.server.kestrel.core\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.3.18114\nFixed version : 2.0.4\nI then found that the latest .NET Core wasn't even shipping with the VS updates for 15.7.x and won't be till 15.8.x so I got the latest \"Microsoft .NET Core SDK 2.1.302 (x64)\" and installed it and removed 2.1.202 from the system. I then did another fresh Nessus scan and it still continues to find vulnerable versions on the system. I honestly don't know the inner workings of .NET Core enough but it looks like old DLLs are being moved into an archive folder but still being left on the system. The NuGetFallbackFolder was new as of the 2.1.302 where in the 2.1.202 they were still in the main folders.\nMicrosoft ASP.NET Core Privilege Escalation (March 2018)\nPath : C:\\Program Files\\dotnet\nInstalled version : 2.1.13029.0\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.server.kestrel.core\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.0.17205\nFixed version : 2.0.2\n...\nSecurity Updates for Microsoft .NET core and ASP.NET (Bypass) (July 2018)\nPath : C:\\Program Files\\dotnet\nInstalled version : 2.1.13029.0\nPackage : Microsoft.AspNetCore.Identity\nPath : C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.identity\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Identity.dll\nInstalled version : 2.0.0.17205\nFixed version : 2.0.4\n...\nSecurity Updates for Microsoft .NET core and ASP.NET (DoS) (July 2018)\nPath : C:\\Program Files\\dotnet\nInstalled version : 2.1.13029.0\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.server.kestrel.core\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.0.17205\nFixed version : 2.0.4\n...\nAll that to say as a small shop with limited resources this is confusing and complicated. Keeping VS 2017 up to date on our users systems is time consuming manual process now. Not being able to provide clean compliance scans after an update has been applied to makes this even more time consuming as I have to track down what's going on and then write justification for every item.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fcore%2Fissues%2F1842&data=02%7C01%7Cpeter.marcu%40microsoft.com%7C7d47e072d0714554cbc408d5fd50ce0e%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636693445858682545&sdata=skQWaP2pFQRNSzTz6dLt%2FesTlfDAXsRe4Iy1UT0hXU8%3D&reserved=0, or mute the threadhttps://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAH2OB6TVCSmSDSeboBUTCeWvLnx-w9PIks5uOxnHgaJpZM4V0UHm&data=02%7C01%7Cpeter.marcu%40microsoft.com%7C7d47e072d0714554cbc408d5fd50ce0e%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636693445858692549&sdata=G8VK3vJUdhOkYMY51HMKyzqjTjnoJttPcQAE1dtEuxk%3D&reserved=0.\n. Adding Damian,\nThose issues are flagging Asp.net binaries in two different locations.\n\n\nThe runtime \"store\". This location is cumulative and things in here are used by applications based on exact version match. If anything in here is getting used, the application using it needs to be updated.\n\n\nNugetFallbackFolder, this is a cache of nuget packages. Similar to above, the only way the version there will be used is if an application references it and in that case, the application needs to be updated.\n\n\nDamian, anything to add?\n-------- Original message --------\nFrom: Leith Tussing notifications@github.com\nDate: 8/8/18 1:03 PM (GMT-05:00)\nTo: dotnet/core core@noreply.github.com\nCc: Subscribed subscribed@noreply.github.com\nSubject: [dotnet/core] Confusion with security updates not showing resolved from Nessus (#1842)\nI do some basic development with VS so I'm familiar with it but I mainly do the IT side of things. Keeping user's systems updated and doing security scans to make sure everything is updated. For a couple months though I've been having issues reconciling what the Nessus security scanner is saying is on our developers systems and vulnerable versus what the systems show as being installed. All of our systems are Windows 10 running Visual Studio 2017 15.7.6. I've seen the other threads about how .NET Core old versions get left behind so on a test system I went in and uninstalled everything but the latest version which was \"Microsoft .NET Core SDK 2.1.202 (x64)\" and did a fresh Nessus scan and I still get findings.\nMicrosoft ASP.NET Core Privilege Escalation (March 2018)\nPath : C:\\Program Files\\dotnet\nInstalled version : 2.0.13103.0\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.server.kestrel.core\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.0.17205\nFixed version : 2.0.2\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.server.kestrel.core\\2.0.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.1.17303\nFixed version : 2.0.2\nPackage : Microsoft.AspNetCore.HttpOverrides\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.httpoverrides\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.HttpOverrides.dll\nInstalled version : 2.0.0.17205\nFixed version : 2.0.2\nPackage : Microsoft.AspNetCore.HttpOverrides\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.httpoverrides\\2.0.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.HttpOverrides.dll\nInstalled version : 2.0.1.17303\nFixed version : 2.0.2\nSecurity Updates for Microsoft .NET core and ASP.NET (Bypass) (July 2018)\nPath : C:\\Program Files\\dotnet\nInstalled version : 2.0.13103.0\nPackage : Microsoft.AspNetCore.Identity\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.identity\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Identity.dll\nInstalled version : 2.0.0.17205\nFixed version : 2.0.4\nPackage : Microsoft.AspNetCore.Identity\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.identity\\2.0.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Identity.dll\nInstalled version : 2.0.1.17303\nFixed version : 2.0.4\nPackage : Microsoft.AspNetCore.Identity\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.identity\\2.0.2\\lib\\netstandard2.0\\Microsoft.AspNetCore.Identity.dll\nInstalled version : 2.0.2.18051\nFixed version : 2.0.4\nPackage : Microsoft.AspNetCore.Identity\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.identity\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Identity.dll\nInstalled version : 2.0.3.18114\nFixed version : 2.0.4\nSecurity Updates for Microsoft .NET core and ASP.NET (DoS) (July 2018)\nPath : C:\\Program Files\\dotnet\nInstalled version : 2.0.13103.0\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.server.kestrel.core\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.0.17205\nFixed version : 2.0.4\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.server.kestrel.core\\2.0.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.1.17303\nFixed version : 2.0.4\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.server.kestrel.core\\2.0.2\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.2.18051\nFixed version : 2.0.4\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.server.kestrel.core\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.3.18114\nFixed version : 2.0.4\nI then found that the latest .NET Core wasn't even shipping with the VS updates for 15.7.x and won't be till 15.8.x so I got the latest \"Microsoft .NET Core SDK 2.1.302 (x64)\" and installed it and removed 2.1.202 from the system. I then did another fresh Nessus scan and it still continues to find vulnerable versions on the system. I honestly don't know the inner workings of .NET Core enough but it looks like old DLLs are being moved into an archive folder but still being left on the system. The NuGetFallbackFolder was new as of the 2.1.302 where in the 2.1.202 they were still in the main folders.\nMicrosoft ASP.NET Core Privilege Escalation (March 2018)\nPath : C:\\Program Files\\dotnet\nInstalled version : 2.1.13029.0\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.server.kestrel.core\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.0.17205\nFixed version : 2.0.2\n...\nSecurity Updates for Microsoft .NET core and ASP.NET (Bypass) (July 2018)\nPath : C:\\Program Files\\dotnet\nInstalled version : 2.1.13029.0\nPackage : Microsoft.AspNetCore.Identity\nPath : C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.identity\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Identity.dll\nInstalled version : 2.0.0.17205\nFixed version : 2.0.4\n...\nSecurity Updates for Microsoft .NET core and ASP.NET (DoS) (July 2018)\nPath : C:\\Program Files\\dotnet\nInstalled version : 2.1.13029.0\nPackage : Microsoft.AspNetCore.Server.Kestrel.Core\nPath : C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.server.kestrel.core\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\nInstalled version : 2.0.0.17205\nFixed version : 2.0.4\n...\nAll that to say as a small shop with limited resources this is confusing and complicated. Keeping VS 2017 up to date on our users systems is time consuming manual process now. Not being able to provide clean compliance scans after an update has been applied to makes this even more time consuming as I have to track down what's going on and then write justification for every item.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fcore%2Fissues%2F1842&data=02%7C01%7Cpeter.marcu%40microsoft.com%7C7d47e072d0714554cbc408d5fd50ce0e%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636693445858682545&sdata=skQWaP2pFQRNSzTz6dLt%2FesTlfDAXsRe4Iy1UT0hXU8%3D&reserved=0, or mute the threadhttps://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAH2OB6TVCSmSDSeboBUTCeWvLnx-w9PIks5uOxnHgaJpZM4V0UHm&data=02%7C01%7Cpeter.marcu%40microsoft.com%7C7d47e072d0714554cbc408d5fd50ce0e%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636693445858692549&sdata=G8VK3vJUdhOkYMY51HMKyzqjTjnoJttPcQAE1dtEuxk%3D&reserved=0.\n. I'm going to close this issue now. I think we all understand how this works and that its going to be addressed in a future release.. @jkotas @jashook is this a duplicate of the other issue you were working on?. Can you close this one with a link to the one you are using to track it?. Issue moved to dotnet/corefx #32238 via ZenHub\n. Issue moved to dotnet/corefx #32238 via ZenHub\n. Issue moved to dotnet/coreclr #19796 via ZenHub\n. I think we're going to need more information or the ability to repro the problem in order to help.. Issue moved to dotnet/corefx #31769 via ZenHub\n. Yes, lets move this discussion to dotnet/corefx#24704. I'll close this one here.. Issue moved to dotnet/project-system #3934 via ZenHub\n. Issue moved to dotnet/wcf #3167 via ZenHub\n. Looks like we need more information to help. I'm going to close this now. If there is more information, we can reopen and move this to the coreclr repo.. @rrelyea . Issue moved to dotnet/corefx #32057 via ZenHub\n. It should be. Where are you looking?. Yes, that's intentional because you should get the latest patches version whenever possible.  Is there a reason you want 2.1.2 and not .3? You should be able to add a .2 on the end of the package name but we don't recommend specifying explicit patch versions because you should pick up security updates by default.. If you are hitting a behavior change in 2.1.3 that is preventing upgrade, we'd love to get an issue filed with details so we can investigate. Patches shouldn't break or regress any behavior.. Let us know. You say a random point but is there anything common on the stack in the different cases? Can you share a stack trace from any of the cases?. Closing in favor of https://github.com/dotnet/core/issues/1932. @leecow @jamshedd . I'm closing this because its a duplicate of dotnet/cli#1437 and I added this issue to track delivery of crossgen from the runtime to the SDK. https://github.com/dotnet/coreclr/issues/19797. This looks like the first run experience that write some sentinel files to know whether it has run before. Moving to the CLI repo.. Issue moved to dotnet/cli #9941 via ZenHub\n. Issue moved to dotnet/corefx #32056 via ZenHub\n. Issue moved to dotnet/cli #9933 via ZenHub\n. @glennc isn't there also a way to use site extensions to get the latest?. There currently is not any good support for this. It is something that we're exploring for .NET Core 3.0. I'm going to move this to the right repo where the people working on that problem will see it.. Issue moved to dotnet/core-setup #4525 via ZenHub\n. Issue moved to dotnet/corefx #32055 via ZenHub\n. Issue moved to dotnet/cli #9932 via ZenHub\n. We are working on supporting Desktop applications in .NET Core (WPF and WinForms).. Xamarin is the plan for mobile platforms. It is based on mono but may at some point in the future consider being based on .net core. Which runtime is under the hood shouldn't matter too much. Is there a specific reason you want .net core under the hood for mobile apps?. Issue moved to dotnet/corefx #32054 via ZenHub\n. Is the UIService Project a netstandard project while the Entities project is netcoreapp? You can't reference a netcoreapp project from a netstandard project. Only the other way around. . You can switch the UIService class library project to be netcoreapp and it should work. Otherwise, you need to make the Entities project netstandard.. I'm going to close this now. Let us know if you have more details or can clarify whether you were trying to have a .NET Standard Library reference a .NET Core library or the other way around.. Issue moved to dotnet/corefx #32068 via ZenHub\n. Issue moved to dotnet/corefx #32105 via ZenHub\n. Issue moved to dotnet/sdk #2513 via ZenHub\n. Issue moved to dotnet/corefx #32098 via ZenHub\n. There is always more to do in crypto. We will continue to bring new functionality in newer releases. I don't expect new features to go into 2.X unless critical.. Issue moved to dotnet/corefx #32237 via ZenHub\n. Which folders are you referring to here?. @joeloff . Issue moved to dotnet/corefx #32208 via ZenHub\n. @gregg-miskelly . Issue moved to dotnet/coreclr #19896 via ZenHub\n. What version of ASP. NET are you referencing in your project? . In your project file, you should have a reference to MICROSOFT.ASPNETCORE.APP. What is the version? . Issue moved to dotnet/corefx #32236 via ZenHub\n. Issue moved to dotnet/corefx #32300 via ZenHub\n. Are you targeting .NET Framework or .NET Core?. Issue moved to dotnet/wcf #3172 via ZenHub\n. Thanks!. Glad that was it and you are unblocked!. Are you publishing for Linux? How are you copying the files over to Linux?. The high level summary is that a properly published application will not depend on the NuGet or any assets from the nuget folder. If it is loading from there, its not a published application. Are you running using dotnet run?. Are you running 'dotnet Main.dll' on the contents of the publish folder? You should only need what's in the publish folder that is output after you run the publish command. . Yeah, I would expect the folder structure to have linux-arm in the path on your dev machine. If it doesn't, you probably aren't publishing for linux-arm or you are copying the wrong folder.. Glad you have it working now! :). Good catches! Fixed.\n. Debian would work if we made the zips for them. I haven't tried these bits on debian but they may work. I don't know all the reasons why we have seperate debian and ubuntu builds.. It's not something that is important to many PC users because its pretty much been the standard for a decade. It is more interesting to people who are considering porting to other processor types and IoT. For them, I think this pops enought to them.. I think the best place to point this will be the SDK repo. Thats where the common tasks and targets live that will be responsible for driving the various build components including the compiler, msbuild, cli, etc. This work is about making the whole pipeline of those tools lightning fast :) Do you want to update the PR?. I was trying to intentionally just list the minimum for any given family. Do you think it should be version ranges? Fedora 26 would also be in that list.. If we're going to tell people here to change to the helloworld directory, we should delete the words telling people to do that from two lines higher.. I'm actually thinking it may be best to give an example of a complete but minumal NuGet.config here telling people that they should have a file by that name next to their csproj. Can you make that update?. I think you are hitting the problem that the 2.0 SDK isn't taking over for the 1.0 SDK because its a pre-release. @livarcocc I believe is working to make 2.0 take precedence over 1.0. So, I think you are right that a lot of people will be generating the console app based on 1.0 because of this.\nYou can add a line that says:\nMake sure you have a nuget.config file next to your csproj that includes the dotnet-core myget feed.\n<add key=\"dotnet-core\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\nComplete file example:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <add key=\"dotnet-core\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\n  </packageSources>\n</configuration>. below. add -> add the. Rephrase-> \"To do that, you can add something like this:\". below. Can you give the same command for adding the symbolic link?. \"Getting the app ready\". where identifier -> where the identifier. I think the correct thing to do would be to always specify the arch so linux-arm, linux-x86, or linux-x64.. has the. I'm not sure what this line is meant to say. Do you mean that \"with Yocto configured this way, a normal .NET Core application works just fine. There is no need to build .NET Core itself for Yocto\"?. I would say it like this then. \"After following these steps to configure Yocto, .NET Core applications should run just like they do on other supported Linux distros\". . Should we add core-setup? That's where we build netcoreapp, the host, and the runtime installers.. one s in focused. Does web cover cloud, containers, microservices, etc? When I read web, I think websites while we are definitely focused on more.. Where does the whole support matrix live now?. focused is spelled wrong. Otherwise, looks good.. Do you really want this in the sample?. Add picture for sure.. I think we can leave it blank and doing the silent cross check for now. That way if there is something in the future, its easy to add. But I agree, it seems that this was the only reason we had CI.. https://github.com/dotnet/core/issues/1068. Why the need for these conditionals and the 7.2 specification?. Same comment, do you need these conditionals?. Also async main was added in C# 7.1 I believe. Do you even need this Property?. The 2.0 SDK support LangVersion 7.1 by default. I don't think you need this line at all.. @jaredpar . My goal is for samples to be as simple as possible. (correct as well of course). . Ok, I see now what the default ends up being and that this is needed. Can you fix the indentation (LangVersion should not be nested lower than OutputType). Then I can merge this. Thanks!. ",
    "cartermp": "(It's interesting reading this now that I'm no longer new to the team/project)\n@BethMassi 's blog post about understanding .NET was very helpful to me in terms of understanding what things looked like for the last release.  Perhaps a similar sort of diagram would suit this section well?\n. Scratch closing:\nI think we can leave it open for now.  We can copy stuff from docs into here.\n. There is no supported native compile for .NET Core applications that is shipped in .NET Core today. F# support is predicated on native compile being a valid scenario.\nHowever, you can use publish to produce a standalone folder that can contain your F# .dll and all its dependencies so that it's xcopy-deployable.. Yup, we're going to have the ASP.NET web template under the \".NET Core\" node.  When opened from there, the One ASP.NET dialog will only show ASP.NET Core templates.\n@sayedihashimi have we landed on the name of the ASP.NET template under the .NET Core node being \"ASP.NET Core Web Application\"?\n. An issue there would be compiler performance if we pulled in all reference assemblies for .NET Framework targets at build time.\nWhat I'm intending here is to mimic existing VS behavior today.  Adding an entry to a references section would be analogous to Right-Click -> Add Reference in VS.\n. For PCLs it does, but not for full .NET Framework.  E.g., if you were to use SqlClient you'd have to add a reference to System.Data - I believe we'd like to preserve that same kind of behavior here.\nFor PCL targets here everything would be auto-referenced.\n. /cc @Pilchie \n. /cc @mhutch\n. Closing this for now, as product changes have effectively made this obsolete.  This can be revisited later.\n. See here: https://github.com/dotnet/cli/issues/3705#issuecomment-274275752\nI was able to get the latest Preview2 tooling that's on the dot.net/core site running without issue.. Yep.  The project system in VS for project.json-based projects does not support file order.  You need to specify this in the project.json file itself, under buildOptions.\n. There isn't a plugin that I'm aware of.  If you're referring to the existing project system in Visual Studio, then no, I do not believe that is open source.\n. Let's close it out.  This is something that's being looked at with the new project system.  File ordering is a requirement for F# there, anyways.\n. @ajaybhargavb Which would be the correct place to list a native dependency?  What I had documented is now broken with the project.json changes.\n. @ajaybhargavb I see.  Looking at the Libuv packOptions is being used, but this is specifically for packaging it as a NuGet package.  Is that still valid?\nIs there a doc or matrix of valid configurations for placing files under sections?  Specifically:\n- Put your native .dll dependency under buildOptions in these ways to accomplish X, Y, and Z\n- Put your native .dll dependency under publishOptions in these ways to accomplish X, Y, and Z\n- Put your native .dll dependency under packOptions in these ways to accomplish X, Y, and Z\nThis is what I can gather based on the information I've found:\n- ??? To build with a native dependency, associate the path with the RID(s) you want under mappings under files under packOptions.  This will not copy to the output directory.\n- To package a native dependency with your NuGet package, associate the path with the RID(s) you want under mappings under files under packOptions\n- To publish the native dependency with your application, associate the path with the RID(s) you want under mappings under files under packOptions\nIn addition to what you just said above:\n- To build with the native dependency and copy the .dll to the output directory, associate the path with the RID you want under copyToOutput under buildOptions\n. No idea what the status of pinvoke on .NET Core is, let alone for F#.  Tagging @KevinRansom. Hey @Thorium, the link to https://packagesearch.azurewebsites.net from @svick is currently the best way to find which .NET package contains a given API when writing F# code.\nReflection was initially changed significantly in .NET Core.  The APIs are changing back to their original surface, but for the time being you can use the ApiPort tool to learn the API alternatives to .NET Framework Reflection code you may be using.\n. @Thorium note that the FSharp.Core package is a community package, and not officially built by nor supported by the F# team.  The current Microsoft-supported package to use is this one: https://www.nuget.org/packages/Microsoft.FSharp.Core.netcore/1.0.0-alpha-160805\nHowever, F# types in FSharp.Core are not supported in the Reverse Package Search website today, which should be fixed.  I don't know how many types it supports, as it does recognize types from Newtonsoft.Json, but I suspect that only some of the top NuGet packages have their symbols indexed on the site.  So if you're using a package which is not part of that index, it won't be recognized.\n. I do not think it's OSS, no.  Nor do I know of any place where issues can be reported.\n. Yep, netstandard1.6 should be the one you try to use.\n. @haf F# support for 2.0 will be in Preview 2 of .NET Core 2.0.\n...or whichever release aligns with 15.3 Preview 2 (this is jargon for @karelz).  Karel, is .NET Core 2.0 Preview 2 going to align with 15.3 Preview 2?. @haf 15 is the 15th version of Visual Studio, which is entitled Visual Studio 2017.  Note that the issue is entitled \"Visual F# Tools Announcement\", and not \"F# Announcement\".  The Visual F# Tools are on the VS update cycle.  The .NET Core release cycle has no alignment with the VS update cycle, as @leecow stated.\nWhat this means for you is that in Q3 this year, .NET Core 2.0 will be released.  F# will be in it and working.  It already works today on unreleased .NET Core 2.0 bits.. Can we open this up on the CLI since this isn't a NuGet bug?. cc @livarcocc - see this: https://github.com/NuGet/Home/issues/5583#issuecomment-314588738. ",
    "nteague22": "I know personally that the teams on some sub projects to the dotnet oss push have strong pythonic backgrounds, and the new direction seems to emulate a lot of aspects of the pyenv philosophy. Perhaps that would be a good angle to reference/allude to\n. ",
    "alex4998": "Why the issue was closed? Was it resolved? How? I have exactly the same question.\n.    I understand that but it does not explain how to use aliases with referenced assemblies of the referenced package. Once again, my situation is this. I reference Google Drive API v2 package which has a lot of dependencies and one of those dependencies have exactly the same class name which results in a bunch of compiler errors because of the naming collision. Let\u2019s say I have a namespace MyApplication.Library and there is class TaskEx. One of the package dependencies have a namespace System.Threading and there is TaskEx too. In some of my sources I have \u201cusing MyApplication.Library\u201d and \u201cusing System.Threading\u201d (with this using I didn\u2019t refer to the package dependency assembly, I referred to the system System.Threading but it happened to have the same namespace). In these conditions I\u2019m getting the naming collision errors from the compiler everywhere I\u2019m using TaskEx. With the NuGet v2.* the situation can be easily resolved changing dependent assembly aliases from \u2018global\u2019 to let\u2019s say \u2018google\u2019 and everything compiles after that. With the NuGet v3.0 I don\u2019t know how to change dependency assembly aliases to fix my problem. So, I\u2019m looking for a workaround and hope on a resolution of this lack of functionality in the future versions.\nThank you,\nAlex\nFrom: Yue Zhou [mailto:notifications@github.com] \nSent: Saturday, March 5, 2016 18:09\nTo: dotnet/core core@noreply.github.com\nCc: alex4998 alex.49.98@gmail.com\nSubject: Re: [core] How to alias a package? (#14)\nIn .NET Core, use \"same dll\" with multiple version is allowed. because the dll files are no longer sit in bin folder together. It has been referenced as a package. The problem I referenced previously, it was caused by break changes of interface. Somehow, the referenced version hasn't been updated to reflect the changes. For example, we have referenced a package System.Security.Cryptography.Algorithms: \"1.0.0.*\", which means compatible all the packages 1.0.0.0 up, includes beta and alpha. If break changes has been introduced inside any of compatible version. And our system will try match and get the latest package on our system. Then it breaks.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/dotnet/core/issues/14#issuecomment-192764162 .  https://github.com/notifications/beacon/AOUds8D7lmjZAhLqacnDfjgEH31Vq6bCks5pqhsvgaJpZM4Fwv6n.gif \n\nThis email has been checked for viruses by Avast antivirus software.\nhttps://www.avast.com/antivirus\n.    Right. It works as a workaround but ideally, of course, I\u2019d like to be able to change aliases on the dependency assemblies. Simply because in this case I don\u2019t need to change a single line in the code. With using aliases I at least need to change all the usings and change the lines referring those usings.\nThanks anyway,\nAlex\nFrom: Yue Zhou [mailto:notifications@github.com] \nSent: Sunday, March 6, 2016 16:15\nTo: dotnet/core core@noreply.github.com\nCc: alex4998 alex.49.98@gmail.com\nSubject: Re: [core] How to alias a package? (#14)\nYou always can use \"using\" to alias a namespace. In our source code, on the top using statements section, add \"using my = MyApplication.Library\", then you can use \"my.TaskEx\" just like how .NET works before.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/dotnet/core/issues/14#issuecomment-193006174 .  https://github.com/notifications/beacon/AOUds9pVQXVd310rtE1HA4uyYi0WYh9Hks5pq1HzgaJpZM4Fwv6n.gif \n\nThis email has been checked for viruses by Avast antivirus software.\nhttps://www.avast.com/antivirus\n. ",
    "joshcomley": "@alex4998 did you figure this out?\n. ",
    "singlewind": "In .NET Core, use \"same dll\" with multiple version is allowed. because the dll files are no longer sit in bin folder together. It has been referenced as a package. The problem I referenced previously, it was caused by break changes of interface. Somehow, the referenced version hasn't been updated to reflect the changes. For example, we have referenced a package System.Security.Cryptography.Algorithms: \"1.0.0.*\", which means compatible all the packages 1.0.0.0 up, includes beta and alpha. If break changes has been introduced inside any of compatible version. And our system will try match and get the latest package on our system. Then it breaks.\n. You always can use \"using\" to alias a namespace. In our source code, on the top using statements section, add \"using my = MyApplication.Library\", then you can use \"my.TaskEx\" just like how .NET works before.\n. ",
    "toddmo": "In my case the type's fullname is duplicated in two assemblies. And I can't use extern to differentiate.. ",
    "UnoSD": "I think this issue should be open, too. I referenced FSharpx.Extras and FSharp.Control.AsyncSeq which both define a FSharp.Control.AsyncSeq module. There is no way to resolve this issue and I ended up removing FSharpx.Extras. They both have the same full name so aliasing modules (as using ... in C#) does not help.. thanks @dasMulli \nEDIT: that doesn't work on F# :( no extern alias. ",
    "dasMulli": "There's a NuGet issue already with the current \"workaround\" being to write a custom target like \nhttps://github.com/NuGet/Home/issues/4989#issuecomment-311042085. Reg. electron: There are already some apps out there using electron in combination with .net core - e.g. https://catlight.io\nA lot of popular modern applications are built around electron, even MS products like VS Code.\nI'm not sure that trying to compete with Electron makes more sense than trying to use it as a platform. There is so much experimental and proof-of-concept work going on with running Xamarin.Forms on the web via WebAssembly (+ upcoming DOM APIs for WebAssembly), or making ASP.NET Core / Razor run on WebAssembly (Blazor project), all of which would leverage the effort that continuously goes into Browsers and Browser-based shells.\nThat also allows to instantly share components used in web applications with native apps, even if it is just a React/Angular/* framework calling to a .net core backend running locally.\nI don't really think that adding another platform trying to compete with the shift towards web technologies as cross-platform UI stack is worth the engineering effort.\nOn the other hand, allowing existing desktop applications to run on CoreCLR and make use of the deployment strategies introduced by .NET Core (side-by-side / self-contained) makes sense since it likely is a low engineering effort (still significant but low compared to creating a new UI stack) to port existing WinForms / XAML code to .NET Core while acknowledging that its use of Windows-only APIs restricts its use to Windows. But that instantly gives maintained existing Applications the chance to make use of new features both from .NET Core but also long stating issues in the desktop frameworks that can't really be solved without a few breaking changes so they can never be fixed in an update to .NET Framework  (high-DPI support and \"XAML Islands\" is being mentioned frequently for this).. Your version of the CLI is quite old. It should work with a new one from here: https://github.com/dotnet/cli\n. The Readme.md on the cli github repo should be fine. The current os x link is: https://dotnetcli.blob.core.windows.net/dotnet/beta/Installers/Latest/dotnet-dev-osx-x64.latest.pkg\n. You'll need to remove the old one before.. it's a known bug with the installer (location of the dotnet executable was changed and an entries in /etc/paths.d/dotnet are not removed). If you installed globally (default afaik), you can sudo rm -rf /usr/local/share/dotnet and run the installer again.\n. @kendrahavens is the table you drafted in https://github.com/dotnet/core/issues/391#issuecomment-268108521 already available somewhere? PR for discussion and to show ppl would be enough.\nHave watched and participated in quite a few of discussions on the aspnetcore slack where the table would be much more illustrative than explaining from scratch (esp. VS2015 vs. VS2017 support).\nIt would also be great to include the full CLI version numbers (e.g. 1.0.0-preview2-1-003177) in the table so you could copy&paste into a global.json.\nIt may even gain more complexity as there is now a CLI version and an SDK version for the Microsoft.NET.Sdk package. (Explicitly specified in preview3 as NuGet package. In preview4, this was included in the CLI layout but for preview5 or later, MSBuild seems to be planning a versioning strategy with resolvers to do <Project Sdk=\"Microsoft.NET.Sdk/1.0.0\">).. Did the prerequisites change for the portable linux build?\nThere is a doc at https://github.com/dotnet/core/blob/master/Documentation/prereqs.md but it may make sense to add a prerequisites section to each release note since this might change over time... Finding prerequisites currently is a pain, they are scattered around repos and docs. docs.microsoft.com currently has documents for windows and Mac, but not linux (and those are for 1.0 only which is okay). So I really have no idea where to link to in http://stackoverflow.com/a/43951331/784387 (edits welcome). Actually macOS 10.12 is required now and this error has already been reported: https://github.com/dotnet/coreclr/issues/10337 (TL;DR: glock_gettime() is 10.12+ only)\n@leecow, @richlander any chance of updating that on the installation instructions?. \ud83d\udc46  That's what I was talking about \ud83d\ude04 \ud83d\udc4d (just too lazy to make a screen shot). dotnet/cli repo. @hyeomans you need macOS 10.12(\"macOS Sierra\") or higher, 10.10.5 won't do.. @bruce31 You can try the latest betas from GitHub: https://github.com/OmniSharp/omnisharp-vscode/releases but be sure to follow the guide for installing beta releases.. @the-super-coder but vs 2017 preview can be installed side-by-side with vs 2017 \"released\" (15.2), so you can keep working on your existing projects using the stable/released version and try out new stuff with the preview. Just maybe use a global.json file in your existing solution/project directories to make sure you use a non-preview CLI wen using dotnet commands.. This is https://github.com/dotnet/cli/issues/6397 again\nI've been chatting on slack with @fbarletta and it turns out that the executable is published under a wrong name . I can reproduce this on the 2.2.0-preview1-007582 CLI like this:\n\ndotnet new console -o testcons\ncd testcons\nmv testcons.csproj test.cons.csproj\nchange project content to\n```xml\n\n\n\nExe\nnetcoreapp2.0\nosx-x64\n\n\n``\n*dotnet build`\n=>\nMartins-MacBook-Pro:testcons martin$ ls -l bin/Debug/netcoreapp2.0/osx-x64/\ntotal 3552\n-rwxrw-rw-  1 martin  staff  768928 20 Jul 16:11 libhostfxr.dylib\n-rwxrw-rw-  1 martin  staff  880968 20 Jul 16:11 libhostpolicy.dylib\n-rwxrw-rw-  1 martin  staff  123596 29 Nov 20:38 test.cons.cons\n-rw-r--r--  1 martin  staff   19620 29 Nov 20:38 test.cons.deps.json\n-rw-r--r--  1 martin  staff    3584 29 Nov 20:38 test.cons.dll\n-rw-r--r--  1 martin  staff     416 29 Nov 20:38 test.cons.pdb\n-rw-r--r--  1 martin  staff     212 29 Nov 20:38 test.cons.runtimeconfig.dev.json\n-rw-r--r--  1 martin  staff      26 29 Nov 20:38 test.cons.runtimeconfig.json\nthe executable is named test.cons.cons => breaks dotnet run and needs to be renamed in order to run correctly. \nmsbuild.binlog.zip\n. @richlander @leecow There's usually also a MD file with the links in this repo (download-archives dir), is this being discontinued or was it just forgotten?. The issue here is more about runtime vs sdk version, which could lead to even more confusion with docker tags.\ne.g. microsoft/dotnet:2.0.4-sdk-2.1.3 would be a tag that includes the current versions.. And I guess the root issue is still that global.json doesn't provide good way to specify a range/minimum/wildcard version https://github.com/dotnet/core-setup/issues/679\nI guess most ppl would be fine to have a global.json that just contains an info like \"use any 2.1+ SDK because we use C# 7.2 features\" instead of pinning a specific version (2.1.3).. Similar issue popped up on StackOverflow when a global.json conflicted with a newer version of a docker image: https://stackoverflow.com/questions/47983402/docker-running-dotnet-publish-o-output-results-in-a-nonzero-error-on-cli/47995278. How do you reference the library? a project reference or a dll reference?. You could type where dotnet to check which path is listed first. If it is the 32bit path, then it won't find the 64bit sdk. If so, you could fix this by changing the order of the entries in the PATH environment variable... Looks like https://github.com/dotnet/corefx/issues/26966\nThe workaround would be to change the TERM env var to a value that doesn't yet use the new terminfo format.. This may be due to a recent issue with ReSharper. Try deactivating ReSharper.. @leecow could you/someone update releases.json for the 103 SDK? would like to update the homebrew cask accordingly.. This package was authored for .net framework on windows, so this isn't really an issue of .NET Core per se - it fails to load WinPcap.. Oh I see that you already opened an issue on the corresponding repository: https://github.com/chmorgan/packetnet/issues/53. @yashwanthreddyg while for linux and windows the files would differ in extension (.exe vs no extension), you can't really have a fully portable application that would work on all systems since the no-extension executable would need be either an ELF or MACH-O assembly for linux/mac and also match the architecture (x64, arm, arm64,..) to be able to run and boot the runtime.. @sfkshan does this occur only when using VS code or also from executing dotnet run in the console without VS Code running? (there was/is a bug in VS live share that has dotnet processes keeping cores busy at 100%)\nAlso, which version of the SDK are you running? (dotnet --info output). To deploy the application you need to publish it:\ndotnet publish -c Release\nThis will create the published output in bin/Release/netcoreapp2.0/publish which you can then copy other computers and run using dotnet hellomvc.dll.. Is the problem just loading the assembly in \"normal\" code or in razor views/pages?. Which version of the sdk are you using?\nIn theory this should already work, minus some razor issues (which afaik are fixed in 2.1).\nDo you have a repro?. The SDK version number you need is 2.1.300 and not 2.1.0 (see https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.1.0-download.md). I really do appreciate that the installer tries to remove old versions (hope that the 2.1.1 installer will remove 2.1.0), but please don't remove versions for which there is no roll-forward logic.. @leecow thanks for investigating.\nMy repo steps were done on Windows Server 2016 using the hosting bundle installer. (repro'd with a win2016 server instance that has never seen a .net core install before)\nIf I install the asp.net core shared framework installers themselves, nothing bad happens. What I did on the machine that had broken apps was install the rc1 shared framework installers to fix the broken apps.\nNothing bad happened other than nearly busting a demo meeting with a customer (and luckily I knew what was broken from the error message). Just opening this now in hope that it doesn't happen again for 2.2 / 3.0. That's indeed great(!) as long as it doesn't break things that don't roll-forward in the host.\nPreviously, the 1., 2.0. hosting bundles installed SxS well, I only ever installed hosting bundles on servers.\nTo clarify: It only affects the asp.net core shared frameworks. The 2.1.0-rc1 microsoft.netcore.app shared fx is still there, only the rc1 asp.not core shard frameworks were uninstalled (Microsoft.AspNetCore.App ad .All).. The windows hosting bundle installer for 2.1.1 at https://github.com/dotnet/versions/tree/7a833dddfddc27f2074b755b94234a25b9757637/build-info/dotnet/product/cli/release/2.1 installs the 2.1.1 asp.net core shared frameworks side-by-side with 2.1.0.\nSo it appears the ref counting behavior only affected moving from rc to rtm.. cc @pranavkm @rynowak looks like https://github.com/aspnet/Razor/pull/2272/files didn't catch that '$(GenerateAssemblyVersionAttribute)' == 'true' will still evaluate to false because the SDK targets only define those individual properties when GenerateAssemblyInfo is set to true (see SDK targets) thus causing a warning about missing AssemblyVersionAttribute to be generated which fails the build on TreatWarningsAsErrors==true.. for dotnet it will use the version of dotnet.exe that's in the path - either the 32bit or 64bit dotnet.exe host.\nThere will be some changes that will allow patching the csproj to allow dotnet run to switch architectures (when launching a sub-process) but until then, it's a bit of a pain - https://github.com/dotnet/sdk/issues/1905. @cculver are you using dotnet ef tooling that runs into errors or are you trying to invoke dotnet ef commands from pre/post-build events?\nVS 2017 15.3 changed the project system to make MSBuild targets instead of changing the legacy build event properties.\nCan you share a project that reproduces the error? Or just a binary log (dotnet build -bl, then (zip for GitHub) and upload the msbuild.binlog file) (note that this will contain project files (csproj) and environment variable contents).\nI suggest using $(MSBuildProjectDirectory) for better compatibility.. About the source code: https://github.com/Microsoft/msbuild/blob/4972ebc6d2b81c5e967cd3260943a95c8e5eb4be/src/Tasks/Microsoft.Common.CurrentVersion.targets#L291. The SDK dlc links at https://download.microsoft.com/download/D/0/4/D04C5489-278D-4C11-9BD3-6128472A7626 aren't working. Just mentioning in case it isn't a known issue.. Nice, updating homebrew casks now. There shouldn't be any need to specify any runtime framework versions, or versions of the asp.net core shared framework.\nWhen a patch update is installed on a server / machine that you run on, 2.1.1 will be used automatically. The tooling will choose appropriate NuGet package versions to use during the build. This may not need to be patch update versions since the app will use the newest patch versions of the runtime available on the machine (roll-forward behavior).\nxml\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>netcoreapp2.1</TargetFramework>\n    \u2026\n  </PropertyGroup>\n  <ItemGroup>\n     <!--  No Version needed -->\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\n    \u2026\n  </ItemGroup>\n</Project>. There's a new implementation for the handler behind HttpClient in 2.1, can you try adding this before anything else in your Main() method and see if the behavior changes?:\ncsharp\nAppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false);\nIf so, this may be a bug with the new managed http client handler.. @stephentoub @karelz could one of you maybe help direct this issue? are there known issues with proxies and the new handler?. Do you have ay steps to reproduce? what project type is affected? I couldn't reproduce with a couple of configurations I thought you could have.. Thanks, can repro now. the important part to the repro is that no dotnet build etc. have been called before.. @nguerrera the problem here is that the new --no-build option for publish is interfering with the existing NuGet logic for GeneratePackageOnBuild which has logic to not trigger a build again while packing.\nIn essence, both pieces of logic use $(NoBuild) for this \ud83d\ude31 \nIs it still possible to rename publish's NoBuild to NoBuildOnPublish or something similar?. @gitorrin you are right, this is a regression in 2.1.3xx. The workaround is to explicitly build (dotnet build) before publishing.. In your test project, try setting\nxml\n<PropertyGroup>\n  <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n</PropertyGroup>\nin the test project.\nThis is likely caused by NuGet using different properties to restore than the actual build will use - the RuntimeIdentifier will not be forward across P2P references during the build but NuGet will evaluate all projects using the global property and thus the runtime roll-forward kicks in.\nAlso see https://github.com/dotnet/sdk/issues/1834. And btw roll-forward doesn't kick in for test projects since they are libraries by default and the test SDK changes them to <OutputType>Exe</OutputType> too late for the self-contained roll-forward IIRC.\nIn theory, you can also work around this by setting <OutputType>Exe</OutputType> in the test project instead of the TargetLatestRuntimePatch mentioned above.. The idea would be that editing the property pages would update the assembly attribute in AssemblyInfo.cs if present. Just validated that this happens if I actually have a code file with that assembly attribute. It's just unfortunate that nothing happens when such an attribute isn't present in the project and the generation of the attribute is turned off.\n@davkean I suppose this is for dotnet/project-system?. @drauch If the project is SDK-based (asp.net core), you should build with msbuild /restore foo.csproj instead of restoring with nuget.exe, then you automatically get the NuGet version included in VS. Actually it's not so much SDK vs non-SDK projects but rather a PackageReference vs. packages.config projects.\nfyi non-SDK projects can also use PackageReference and should work with msbuild /restore (migration documentation). There's an issue logged to enable packages.config restore using msbuild but that's a little more complicated.. If you ever want to move off this approach or looking for alternatives, I'm happy to chat about it here or on the community slack workspace.\nYour scenarios might help uncover tooling needs or shortcomings.\nThere's now global tools in .net core tooling and local tools are currently being implemented. And a lot of $(SolutionDir)packages\\tools\\foo.exe things in project files are being replaced by NuGet authors through packages that contain some .targets files that are auto-imported and tools (dll / exe / shell scripts / msbuild tasks) local to the package.. JetBrains does offer a zip download as well in addition to NuGet packages.\nThere is a feature coming in NuGet 4.9 / VS 15.9 / dotnet 2.1.5xx that can help migrating:\nNuGet can create MSBuild properties pointing to the path of the package - https://github.com/NuGet/NuGet.Client/pull/2271 / https://github.com/NuGet/Home/issues/6949 \nSo you could annotate the package using\nxml\n<PackageReference Include=\"Some.Inspection.Tool\" Version=\"1.2.3\" GeneratePathProperty=\"MyInspectionPackage\" />\nand then use it like:\nxml\n<Target AfterTargets=\"AfterBuild\">\n  <Exec Command=\"$(MyInspectionPackage)tools\\inspect.exe\" />\n</Target>. How does the new format account for SDK releases independent of runtime releases?\ne.g. I cannot find the 2.1.400 SDK in the new format which is present in the old format, but tools may need to find these version - independent of the runtime version.\nScenario: VSTS (or other CI tool) download tasks that only has the desired SDK version as input.\nHow do I resolve \"2.1.4\", \"2.1.400\", \"2.2.100-preview-foo\" to download URLs from the new format json files? (index + release specific json files). @leecow could you also have a look at my comment earlier? esp the question: given an SDK version number (e.g. 2.1.400), how do I get to the download URLs?. @leecow the problem is that any mapping between an SDK version and download URLs needs history of the SDKs which is being deprecated as part of this issue.\nHaving only the \"latest for runtime\" doesn't help.\nThe current azure pipeline tasks for the .NET Core tools installer tasks rely on releases.json to give download URLs for any valid SDK version number that has been released in the past. Tasks for other CI/CD systems need this as well.\nThe user story would be:\nIn order to create reproducible build definitions, as a build Author, I want to specify the exact SDK version number used during build which is to be downloaded and used during the build process.. @leecow I don't see 2.1.400 in there.\n2.1.2 runtime was released with 2.1.302\nThen a 2.1.400 was released, again for the 2.1.2 runtime\nThen a 2.1.3 runtime was released along a 2.1.401 SDK\nWe'd need download URLs for all 3 of these SDKs.\nCurrently, only 2 (2.1.302, 2.1.401) are provided.\nAFAIK there's a 2.1.500 coming up with tooling updates (e.g. containing GeneratePackagePath property for NuGet).\nIf this one is released without a runtime update, how do we get the download URL?. For linux-based systems, name it Directory.Build.props to match the expected casing. On systems with case-insensitive file names (windows, most macOS installations) it would work but not inside the linux docker container.. About the suggestion of using it for .Length / .Count: I'm sure this can be re-discussed when having multiple TBs of memory are the norm and dealing with arrays, dictionaries etc. consuming hundreds of GBs are a concern. And even then I think the discussion would be started with suggesting additional .LongLength etc. APIs or even additional \"big collections\".. I believe the \"absolutely right\" way would be to make use of compilation context preservation.\n\nIn your csproj, set\nxml\n  <PropertyGroup>\n    <PreserveCompilationContext>true</PreserveCompilationContext>\n  </PropertyGroup>\nAdd package reference to Microsoft.Extensions.DependencyModel:\nxml\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.DependencyModel\" Version=\"2.1.0\" />\n  </ItemGroup>\nUse DependencyContext to get compilation references:\ncsharp\nusing Microsoft.Extensions.DependencyModel;\nusing System.Linq;\n\u2026\nMetadataReference[] _ref = \n    DependencyContext.Default.CompileLibraries\n    .SelectMany(cl => cl.ResolveReferencePaths())\n    .Select(asm => MetadataReference.CreateFromFile(asm))\n    .ToArray();\n\nIf you absolutely only want the .NET Core references, and not all the referencest that your app has, you can use\ncsharp\nMetadataReference[] _ref = \n    DependencyContext.Default.CompileLibraries\n    .First(cl => cl.Name == \"Microsoft.NETCore.App\")\n    .ResolveReferencePaths()\n    .Select(asm => MetadataReference.CreateFromFile(asm))\n    .ToArray();\nNote that on publish, this will create a refs\\ subfolder containing compile-time reference DLLs.. > Would you please explain my code mistakes?\nNot a mistake, there's just an awful lot of things that can go wrong and you'd need detailed information about how either compilation or the layering of runtime DLLs work.\nPreserveCompilationContext makes sure that your .deps.json contains the references that your app has during compilation. When you build your app, the compile-time assemblies come from the Microsoft.NETCore.App NuGet package. Specifically, from\n.nuget/packages/microsoft.netcore.app/2.1.0/ref/netcoreapp2.1/*.dll\nThere also is a set of MSBuild targets that resolves conflicts of NuGet packages that contain implementations for older versions of .NET Core that are now part of .NET Core (specifically, the System.* NuGet packages from the 1.* timeframe).\nThe preserved compilation context will also contain the filtered results so you're not going to run into conflicts.\nDependencyContext will help you read the .deps.json at runtime and resolve the paths to the dll files you need.. > Does PreserveCompilationContext make my build time slower? \nMay be a bit, but it shouldn't matter.\n\nAnd if I don't set it to true, can't DependencyContext work?\n\nNope, it will throw exceptions. And you'll be missing the dlls once published.. While I would like not having to write break; all the time and really appreciate swift's fallthrough statement, I also don't think having a third option would be too much.. Resolving COM references isn't (yet?) supported on core msbuild. In the meantime, does it work when you use msbuild from the developer command prompt? \ne.g.\nmsbuild -r\ndotnet run --no-build. cc @rainersigwald @dsplaisted @nguerrera is there a plan for resolving COM references from core msbuild?. Are you building from inside VS or using the dotnet CLI?\nif you're using the CLI, could you try to rebuild your project using msbuild -t:Rebuild from the VS 2019 developer command prompt?\nsome resx related features still only work from the \"full framework MSBuild\" shipped with VS. @leecow I don't think this and other PRs are part of the 2.0.3 SDK but rather in the sdk shipping with the 15.5 version (2.1.1 IIRC). why do you need the tool package as both package reference and CLI tool?\nsince DotNetCliToolReference is de-facto deprecated now, what prevents you from making it a global tool?. cc @KathleenDollard . ",
    "dshalin": "What a perfect support of doing nothing!\nStill no reaction to the pain of developers?. ",
    "karelz": "@dshalin the issue was closed by the person who created it. We do not comment or reply to comments on closed issues.\nIf you believe there is still some gap here, please file clear description of the problem in the right repo (this issue is somewhat long and not quite clear to me).. @cartermp can you comment please?. LGTM\n. @Korporal do you need lexical order, or just any stable order?\nDo you mean by lexical the order in which properties/fields/methods are defined in C# source code?. So how is it supposed to work with partial classes? Which one takes precedence?\nHow common is the scenario? How many apps really need it?. Sorry, I don't follow how it answers my questions .... @Korporal every feature has to be thought through all angles, we cannot design only for a few use cases.\nSadly, I don't know what Dapper is and what are POCO classes.\nPlease provide clear short description of the use case and how common it is and why it cannot be worked around.. > How do I install .NET Core 1.1 (current) on my Ubuntu 16.04? I followed https://www.microsoft.com/net/core#linuxubuntu but it had instructions for 1.0.4 LTS.\n\nTo install .NET Core 1.1 on Ubuntu or Linux Mint, simply use apt-get isn't too helpful.\n\n@richlander @kendrahavens are the instructions correct?\nIf they are, they should explain explicitly why \"sudo apt-get install dotnet-dev-1.0.4\" installs 1.0.5 or 1.1.2. It is extremelly non-intuitive and it looks like a bug. Maybe part of our not-so-ideal versioning story?. @livarcocc in that case we should mention it in the docs, something like \"don't worry about not matching numbers\". I am confused - I thought it is a bug, and I am on the team :(. @omajid it is not about 'ad-on' docs. IMO it should be crystal clear from the main docs -- installation docs in this case. Additional documentation is just too late. The confusion has been already seeded.\n@stanuku see https://github.com/dotnet/cli/issues/3773 for discussion about dotnet --version. . @madhav5589 WinPE is specific OS setup, which does not contain all components, so I would not be surprised if some parts of .NET Core or WPF/WinForms won't work.\nSupporting WinPE for WPF is not on our backlog AFAIK.\nBTW: Neither Peter nor Eric are on our team anymore .... @weshaggard @ericstj does it sound familiar? If not, do you know where to route it?. @Petermarcu I think it would be great to distinguish distros which already have something existing + community support vs. those which are still \"in progress\" (e.g. Arch Linux). I like your idea of merging the tables.\nI'll take a stab at that, then then ping you for additional feedback .... @Petermarcu tables merged - what do you think now? Let me know if you have suggestions for further tweaks.. > @yaakov-h Speaking of prerequisites does macOS still require libssl, since .NET Core now uses the Apple crypto APIs, not openssl?\nChanneling info from @bartonjs (who made the Apple crypto happen):\nlibssl is not required anymore - see the 2.0 Preview prereqs (you can compare it with 1.x Mac prereqs where libssl is required.. I would start in aspnet/Tooling repo (based on this example https://github.com/dotnet/project-system/issues/2059) - they can move it if it is the wrong place.\nMake sure you distinguish between problem with the template vs. problem with ASP.NET Core itself.. @yaakov-h please file a new issue on CoreFX ASAP (and tag me). We can discuss details there. If it is important and hard to workaround, I'd like to know sooner rather than later. Thanks!. @garora there's no official ETA.\n@the-super-coder which TransactionScope API(s) do you mean? What is RDl/RDLC - which APIs do you mean?. @NinoFloris please don't ask for rumors confirmations or guesses from me or any other MS employee. Our jobs could be at stake if we answered such questions.\nThe truth is that whenever we can share approx. dates, or anything, we usually do (I am typically actively pushing my management to get 'ack' on sharing more info than we would typically share/publish). When we are silent/obscure about dates, it means that we either don't know or we can't say them.\nIn this particular case, I don't know more details beyond rumors/desires which are 1+ month old, which may very much be outdated by now. There is no value for you or me to share them. It is basically random info at this point.\nIf you're blocked on something, you can always try dev feed of next-preview (preview2 in this case). That way you can get ahead of the game.. > I do want you to know I would not ask any employee but as you are the community/repo manager of most dotnet core things...\nFair point :)\nUnfortunately sometimes there are bigger things in game, outside of my scope of influence.\n\nWe know about the dev feed but it's not really great to to put our company on daily's and we'd also be missing things like dotnet preview-2 docker containers from MS, could make them ourselves but too much hassle and risk at that point.\n\nFor testing / evaluation, it is perfectly fine to use dev feed of preview2. Pick one build which works for one person and go with it. It is almost as good as using official preview. Of course, you should not use it in production (which is same for preview1 / preview2 / etc.).\nIf you're not willing to invest in missing pieces, then waiting for preview2 is your best option.. @NinoFloris I poked around a bit and we were able to update estimate for Preview 2 - see ship dates. Kudos should go to @leecow \ud83d\ude03 . You can check availability of each API on https://apisof.net/\n System.Transactions is in .NET Core 2.0, except distributed transactions\n I don't know which namespace/class is \"report extensions from SQL Server Reporting Services\" - something in System.Data.SqlCient?. @smithaitufe where did you upgrade your app from? Do you have minimal isolated repro?. DirectoryServices and Drawing won't be part of .NET Core 2.0 release, but they will ship as independent packages built on top of .NET Core / .NET Standard during summer, so around the same time (as we promised at Build conference).\nYou can dogfood early builds of DirectoryServices - see https://github.com/dotnet/corefx/issues/20951 and https://github.com/dotnet/corefx/issues/2089 for details, but be warned: It was not tested at all yet (see https://github.com/dotnet/corefx/issues/20669).. @Petermarcu can you please verify IoT lines? I am not sure if I got them right (as [C], their versions, etc.)\nThanks!. @haf note that we removed our dependency on OpenSSL on Mac in .NET Core 2.0 and replaced it with using Mac crypto. If you want, you can try out .NET Core 2.0 Preview1.. @haf unrelated to this question ... but @cartermp can comment.. @cartermp no idea which VS update it will align with. @leecow will know more about VS updates aligning with .NET Core 2.0 Preview 2.. @leecow @lt72 any advice?. @leecow @danroth27 1.0.5 does not exist on ASP.NET page: https://github.com/aspnet/home/releases\nIs that expected?. Do both of your projects use the same .NET Core 2.0-preview1 version?\nThe class is in System.Net namespace, if you still have troubles, please file it in CoreFX repo.. @leecow @lt72 can you please help?. @cnxiaoby I don't understand your question. Are the special symbols in another non-English language? If yes, can you please translate the text to English?. This issue was moved to aspnet/Mvc#6342. Moved the issue to Mvc repo - it looks like that's where it belongs.. Looks like ASP.NET or WebPages question - can you please file it in appropriate aspnet repo? https://github.com/aspnet. @richlander did you remove the doc on purpose, or was it just moved to core repo?. Does it happen on more than 1 machine? Is it maybe some weird setup or distro?. I am a bit confused.\nFirst, what is 1.03 and 1.04? Did you mean 1.0.3 and 1.0.4?\nDo you see the problem only on Mac? Or also on Windows?\nDo you see the problem on more than one machine?\nWhat happens if you downgrade your machine to previous .NET Core version \"1.03\"?. Did you try to create minimal repro? HelloWorld test. Only parts of you app?\nThe changes in 1.0.4 were minimal - see the list above. It is highly unlikely a problem in .NET Core itself. Try to get minimal repro (I would start with CLI on Windows), then do first-level debugging.. Looks like aspnet specific question - did you try to ask there? https://github.com/aspnet/home. @ericstj @weshaggard what is the story here?. What does it mean for dev scenario and app deployment scenario?\nCan we add relnote for Preview 1 / Preview 2? (assuming it is not fixed in either). This issue was moved to aspnet/Home#2061. Moved to https://github.com/dotnet/corefx/issues/21305. @Liturgist no worries, we can route.. @Spongman it seems you are trying to load reference assembly at runtime. Reference assemblies contain only shape of types, but not code, that's why it fails.\nUsually this is a result of some forceful copying of reference assemblies into project output.\nBest option is to stop doing that.\nIf you think it is a bug in tooling, please create simple repro steps (ideally starting from new project) and we can route it further. Please create a new issue in such case. Thanks!. Rather old PR, what's the status @richlander? Do you plan to finish it off?. I think it is covered by #1541 - @shawnro can comment on further progress in the space .... Would it be more appropriate to move it to CoreFX repo?\ncc @divega . Try JSon.NET NuGet package. It is widely used. There is also built-in JSon API for certain specific scenarios.. @MelbourneDeveloper I recommend to ask on the https://github.com/dotnet/roslyn-analyzers repo\nRegarding VS for Mac - that's a good question, I'd ask them on their feedback channel.. @MelbourneDeveloper ok, so you should be all set then, right?. @MelbourneDeveloper understood - my point is that the discussion over here is \"finished\" and all is properly routed / addressed. If not, please let me know.. Would IKVM.NET help? http://www.ikvm.net/. What is the key problem in your repro? Is it the Unicode file name? Is it the content of the file?\nCan you please clarify what is expected vs. current output?. Seems to be resolved. Closing. @jourdant is it 100% repro or intermittent problem?\nI don't think WinHttp has useUnsafeHeaderParsing setting.. @NaelsonBR this has been fixed in .NET Core 2.1 - see the linked bug.\nYou mention PHP - I wonder if you use .NET Core at all. If not, then this is the wrong place to ask.. Thanks for the fix!. Merged - FYI: @leecow @richlander . Looks like ASP.NET specific discussion. I would suggest to move it to https://github.com/aspnet repos.. The page was updated in #853 and the edited content was removed.\nI think we can close this PR now. Please let me know if I am wrong.\ncc @leecow . I included the changes together with more updates to roadmap in PR #882.\nSorry, I didn't notice your PR before I created mine :(. Closing the PR as dupe (to avoid merge conflicts). Please let me know if you disagree.. System.Web is not part of .NET Core: https://apisof.net/catalog/System.Web.Services. @Priya91 can you please comment?. BTW: Forgot to post it last time: We do not plan to evolve System.Net.Mail. We recommend users to use other modern libraries, e.g. MailKit: https://github.com/dotnet/platform-compat/blob/master/docs/DE0005.md. You are using preview1 bits. Do you get the same error on RTM bits (released on 8/14)?\nIf you can, please post code which has chance to compile - CronwBetClient above is not part of Framework. Thanks!. Sounds reasonable (thanks for the link though!) ... cc @richlander who is language expert.\nOverall I find the word weird and harder to understand for ESLs, but I think it is ok.. @weshaggard @ericstj can you comment please?. Ooops, the notification got buried in all repo notifications folder, sorry.\n@janvorli can you please check it as well?. Thanks for your PR @mrward!. Thanks for your contribution!. Seems to be answered, closing.. PR is here: #882. The PR was merged, it is now up to date: https://github.com/dotnet/core/blob/master/roadmap.md. Thanks for your fix @sk-havok!\n@leecow @richlander is there any pre-merge verification you would like to do for script changes in this repo?. cc @richlander @terrajobst . @richlander is there ETA? Would it be valuable to update the dates at least in the mean time?. This issue was moved to dotnet/corefx#24574. @leecow FYI: Merged. @wgutierrezr it seems you're trying to use .NET Core project as .NET Standard project. That is not going to work. .NET Core can depend on .NET Standard, but not the other way around.. Looks like different problem than the one originally reported here.\nI don't think you need the package - its content is part of the platform (System.Runtime) in .NET Core 2.0+: https://apisof.net/catalog/System.Text.Encoding\nJust don't include it and it should be fine.. No activity in last 10 months, closing.. @gortok I closed the issue, because it was a poll from @richlander - asking for feedback, etc. I was not under impression that this issue is tracking the work itself (of course I may be wrong).\nClosing a poll issue is not statement of lower priority, or anything (honestly, I have no idea what's the status there - @richlander would know). This issue was closed just due to 10 months inactivity on the poll itself - and it looks like it triggered new input (which I assume is valuable to @richlander).\n@richlander do you want to track the work itself here? If yes, we should reword the top post to clarify it, then reopen.. BTW: @leecow mentioned offline that he is working on the release notes, he just didn't publish them yet :). Should be early this week.. Sure, filing questions as separate issues is a good idea. CoreFX is a good place to ask this one.\nALPN is going to be used only if you try to negotiate some application protocol via ApplicationProtocols. See a test. You can always verify by capturing networking traffic via Wireshark.. Note that 2.0 is not supported anymore.\n2.1 has built-in new networking stack that does not use libcurl at all.. I think it is still build-time dependency as we have opt-out from the new networking stack to use libcurl.. @richlander did the follow up happen? Anything to report back?\nIs this issue tracking anything actionable at this point?. @vdanilchenko-schneider did the meeting happen between you and @richlander?. Did you send the email to @richlander as he suggested above? https://github.com/dotnet/core/issues/1470#issuecomment-386122092. @richlander ping?. @richlander ping again .... @richlander ping again again .... Looks like we missed following up on this issue :(. Sorry for that!\n.NET Core 2.0 is out of support as of 10/1 - see https://github.com/dotnet/core/blob/master/microsoft-support.md#out-of-support-net-core-releases\nIf you hit the same issue on .NET Core 2.1 (or earlier versions), please let us know - e.g. file a new issue with steps to reproduce.\nClosing this one.. Hello, looks like we missed this feedback and didn't reply. Very sorry for that!\nI believe that official post-Preview .NET Core 2.1 versions are fine and there are not any troubles, so closing.\nIf you are still experiencing any troubles with latest released .NET Core 2.1 builds, please let us know.. @richlander @KathleenDollard can you please make the change?. @richlander was there any follow up here? Who should take a look?\n@SuperJMN do you still face the problem?. No response, closing.\n@SuperJMN if you still hit the issue, feel free to repopen. Thanks!. I updated the link in above comment https://github.com/dotnet/core/issues/1594#issuecomment-404273623 to point to the original URL, which redirects to the new one you listed.. From @danmosemsft on May 25, 2018 18:46\n@richlander do you want to share your thoughts on this?. @martinsuchan that should be separate bug. Is it a compiler error or \"just a warning\"?\n@HollyAM @MattWhilden where do you track UWP bugs?. Ah ok, so that one is primary and we do not need another UWP tracking bug, is that correct?. @dmitriy-shleht the fact you're seeing the problem with and without SocketsHttpHandler hints it is likely some problem in your environment. Maybe misconfigured network, proxy, or something?\nTry to isolate a repro (start with HelloWorld). Check accessibility of the endpoints, etc. Look at network capture traces (e.g. Wireshark/Fiddler) to see what's going on.\nYou can also try another VM with the same or newer OS to confirm it is not one machine problem.. Agreed, I think we need an isolated minimal repro to make heads and tails of it.\nAlternatively, you can collect a dump (either OS settings, or by running it under windbg) and check the callstack there (VS is capable of opening dumps). There is a small chance it could help to point out the problem, but a minimal repro might be needed anyway.. @edwardsky did you get chance to get it under debugger and get the stack trace? That will help us confirm we are seeing same problem as you are.. @edwardsky sorry to hear that.\nI expect that you will soon notice that C++ requires exactly same knowledge (and even deeper) - you need to know how to get exceptions info (StackOverflow, corruptions, etc.) as I suggested above (i.e. windbg / other debugger knowledge).\nI wish you good luck!. Looks like a bug in CryptoPro CSP. Happy to hear you were able to resolve your problem.\nWhen other buggy DLLs inject themselves through OS and do harm, there is not much we can do about it :(. No response, closing.\n@CrystalWindSnake if you are still hitting the problem, feel free to reopen.\nI would recommend to try it from different OS (Linux or at least different Windows VM) to avoid tracking down weird one machine setup problems.. Seems to be resolved, closing. Please let me know if you are still facing the problem.. https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x#supported-linux-versions already mentions ARM32 from PR https://github.com/dotnet/docs/pull/6901 on 8/8. Closing.. Agreed, looks like different problem - please create isolated minimal repro and file a new bug. Likely on ASP.NET repo.. @kapouille do you see the same problems on 2.1? We have brand new networking stack there, written on top of sockets.\nIf it doesn't work there, we would be interested to dig in.. @PavelMekhnin did oyu mean that once you add the credentials, things work properly?\nDo you have a small isolated repro you can share with us? (ideally without external libraries like RestSharp, etc.). Sounds like by design then. @PavelMekhnin is it ok to close? Or do you think the workaround is not acceptable?. @Cloudmersive the issue was NOT closed as Won't Fix -- it was MOVED to another repo: https://github.com/dotnet/cli/issues/9624 (see https://github.com/dotnet/core/issues/1754#issuecomment-403620515)\n@haydenhancock I would suggest to check solutions & workarounds in the CLI repo issue (or add comments there if needed).. @haydenhancock those are good things to raise on the open CLI issue. This issue is closed and further discussion here is not reaching the right experts.. .NET Core 2.0.x is out of support as of 2018/10/01 - see https://github.com/dotnet/core/blob/master/microsoft-support.md#out-of-support-net-core-releases. @leecow looks like 3 people hit the same issue ... any idea?. BTW: It would be best to file a separate issue as the latest error seems to be 2.1.6 specific. It would be great to confirm distro as well.\nIf anyone creates it, please link it here. Thanks!. @omajid thanks for expalnation (still Linux newb here) - @leecow who can help to fix it? Looks like we forgot to publish all the right packages .... 2.1 supports only CentOS 7+: https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1-supported-os.md#linux\nYour version (CentOS 6.10) is not supported.. Looks like the question was addressed, closing.\n@leecow I assume the feature asks for automatic updates are tracked elsewhere - do you have a link that people can follow?. Great. This is also related to #1541. @mrward @marek-safar any progress here?\nWhere should we route the issue? Is VS Developer Community better place? https://developercommunity.visualstudio.com/spaces/41/index.html. OK, that sounds like bug in the test itself, closing then.\n@fskroes let us know if you think we missed anything.. @bartonjs @wfurt can you help here please? We test Ubuntu 18.04 in our CI, so there should be a way to make it happen .... @jeffschwMSFT is there any update on the approximate timeline/plans?\nDo we need this tracking work item?. Great, closing here then.. It was moved: https://github.com/dotnet/corefx/issues/31772. What does the line do?\nDo we still need to update any docs?. @leecow are you ok with my change? Should I move \".NET Core Tools for Visual Studio 2015\" to the bottom? (I don't think it needs Current vs. LTS attribution). Edit & Continue is supported in Visual Studio IDE (on Windows).\nIt is IDE specific feature. If you need it in Jetbrains Rider, I would ask on their forums.. No response for 13 days, closing. Let us know if you find more information about the problem.\nThis seems related: https://github.com/dotnet/core-setup/issues/3875. @Thraka do you get the same failure with .NET Core 2.1? (2.0 is out of support)\n2.1 should not have that dependency of Runtime.. cc @wfurt to comment on the libcurl4 vs. 3.. @Thraka you are still trying to install the out-of-support SDK for .NET Core 2.0 (the version 2.1.202) - see 2.0.9 release notes or 2.0 versions table.\nInstall 2.1.5 + its SDK 2.1.403: see 2.1.5 release notes.. @gregg-miskelly ping? Should we use VS Developer Community for these bugs? https://developercommunity.visualstudio.com/spaces/8/index.html. @pietrodicaprio please file the issue on VS Developer Community and post the link here.. @toryb the issue has been moved ... check the replies above. Superseded by newer release 2.1.5 - see #1973 . @leecow @vivmishra can you please help to answer this question from CoreFX? https://github.com/dotnet/corefx/issues/32340\n\nI am trying to upgrade my .net core 2.1 solution to 2.2 preview 2. I have installed 2.2 preview 2 sdk and changed the target framework to 2.2 through project properties but getting below error when i build the solution.\nThis version of Microsoft.AspNetCore.All is only compatible with the netcoreapp2.1 target framework. Please target netcoreapp2.1 or choose a version of Microsoft.AspNetCore.All compatible with .netcoreapp2.2\nDo i need to install any other packages/libraries? I dont see Microsoft.AspNetCore.All 2.2 version anywhere.\n\ncc @MSAppsDev\nMy best guess is to follow the guidance here: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/metapackage?view=aspnetcore-2.1. @rquackenbush the easiest thing is to inspect the code: https://github.com/dotnet/coreclr/tree/v2.2.0-preview2\nIt's not there: https://github.com/dotnet/coreclr/blob/v2.2.0-preview2/src/pal/src/synchobj/mutex.cpp#L805-L808\nIt does not seem to be ported to release/2.2 branch yet: https://github.com/dotnet/coreclr/blob/release/2.2/src/pal/src/synchobj/mutex.cpp#L805-L808. Replaced by Preview3 - see #2004. @KathleenDollard @richlander this looks like a bug in our global tools story. Where do we track those?. @KathleenDollard @richlander ping?. @EngKhaled91 how did you install .NET Core SDK? (which installer did you run?)\nWhich OS do you use?\nDid you try the same steps on another machine (e.g. a VM)?. @EngKhaled91 can you please answer also the remaining questions?\n  how did you install .NET Core SDK? (which installer did you run?)\n Did you try the same steps on another machine (e.g. a VM)?\nThe issue is currently not actionable.. This issue was moved to aspnet/EntityFrameworkCore#13474. @CalvinPangch it's a bug in docs - can you please file it via Feedback button on that page? Thanks!\ncc @mairaw (I think this is a known problem). @brianrob @billwert anything you can help with?. @brianrob were you able to find anything? Do you plan to take any further action?. Are you able to reproduce this using official setup on more than 1 machine (e.g. a VM) @scherenhaenden? (trying to avoid weird one machine setup issues). @jeffschwMSFT do we have detailed information on COM support in .NET Core?. Closing as answered. Thanks @jeffschwMSFT!. Superseded by newer release 2.1.6 - see #2053. Looks like external - Azure Pipelines needs to be more resilient.\nClosing.. @leecow @Eilon do you know where to route this problem?. Thanks @natemcmaster.\nClosing as it seems to be answered.. You can use System.IntPtr (it's a bit limited, but ok - see https://github.com/dotnet/corefx/issues/20256 for further planned improvements)\n There is also proposal for native-sized number types in https://github.com/dotnet/csharplang/issues/435.. I was not aware that Linux and Windows differ in C/C++ long size - https://stackoverflow.com/a/384672/4100992\nI would definitely not use \"native int/long\" as name - that is IMO mostly associated with 32-bit vs. 64-bit.\nEven the table above is a bit confusing ... what is \"int (Int32)\" and \"long (Int64)\"? Are those meant to be C# types? ... Can you clarify that first please to avoid further confusion? Is this what you meant?\nType | Windows 32-bit | Windows 64-bit | nix 32-bit | nix 64-bit\n--- | --- | --- | --- | ---\nC#: System.IntPtr | 4 | 8 | 4 | 8\nC#: int (System.Int32) | 4 | 4 | 4 | 4\nC#: long (System.Int64) | 8 | 8 | 8 | 8\nC: long (no C# equivalent) | 4 | 4 | 4 | 8\nIt sounds like a reasonable topic for discussion on new API in interop space. Can you please file an issue in CoreFX repo? (ideally with clarified table to avoid further confusions). I just copied the table from @jherby2k :) - looks like he fixed it in the CoreFX issue. I will update it even here just to avoid further confusion.. That branch has been merged to master in PR #1953.\nThe doc is up to date: https://github.com/dotnet/core/blob/master/release-notes/README.md. I will close this PR and try to delete the branch.. Not necessary anymore, closing. If there is spike in discussion in future, we can reopen.. I let @leecow @vivmishra to sign off. I don't know how and where the files are used and if it is ok to just change them. This is expected behavior - tasks can finish before you get chance to call Task.WhenAll. If you don't want that, then you need to pause the tasks until you are ready to start them (e.g. via semaphore).. cc @tmds @omajid . What about the -O- arg?\n@guntbert do you have example of what is the difference in -q and -nv when there is error?. Thanks @guntbert!\nI think the -O- spits out rarely used information and adds unnecessary clutter to the output. I would suggest to remove it, unless there is proof this is common way install steps behave on Linux.. core repo is easier to manage if you look at number of issues and PRs. CoreFX, CoreCLR and others are more challenging ;). Confirmed - @richlander @leecow do you know who can help?. Are you able to reproduce it with latest VS? If yes, it would be great to submit bug report via Send Feedback from within VS with the steps (or via https://developercommunity.visualstudio.com).\nClosing here per suggestion above.. @danmosemsft @leecow do we have channel for WPF early adopters?. @rmkerr can you please open bug in CoreFX repo? I don't think we should track test failures here in Core. It is more for incoming issues without clear home. Thanks!. @quaker350 which new project do you create? ASP.NET?\nFor Visual Studio integration, it may be best to file the issue on VS developer community: https://developercommunity.visualstudio.com/spaces/8/index.html. Sounds like reasonable request. @leecow @vivmishra can you please help route it?. Thanks @Eilon, I incorrectly thought it was part of ASP.NET (I just saw the name T4 once before).\n@BasPaap please report it to VS via \"Report Problem\" or via https://developercommunity.visualstudio.com/spaces/8/index.html, thanks!. Just a reminder that this is closed issue, not monitored or used for +1 votes. The main issue is tracked on VS Developer Community - see link above.. Duplicate of #948 . @jenyckee did you check the primary issue?. > @jenyckee  did you check the primary issue?\n\n...\nYes, when I \"Start Without Debugging\" the application even crashes\n\nSee https://github.com/dotnet/core/issues/948#issuecomment-336284252 ... unless the right team knows about the problem and understands the root-cause, they can't provide solutions.. @jenyckee please read the link https://github.com/dotnet/core/issues/948#issuecomment-336284252 - it tells you where to file the bug (aka where to find the right team to talk to). No information you provide here or on the #948 bug is going to help as it won't reach the expert.. @ionepaul it would be best to take the discussion on the bug you linked - @muratg @Eilon @Tratcher can you please take a look?. Closing in favor of #2098 (RTW release). Is that an error from Visual Studio? If yes, then I would recommend to report it via VS Feedback (Send Feedback icon in VS or https://developercommunity.visualstudio.com/spaces/8/index.html).. Which OS do you run on?\nIt seems like there are no available ports on the system. Can you check the OS stats at the point of failure? Can you check your container configuration?\nOnce it happens (after few hours) - does it happen once / all the time / most of the time?. Closing as solved.. @Pilchie https://github.com/google/github-issue-mover\nIn the meantime, let's move it manually. Another option is to move it via ZenHub.. Moved manually to https://github.com/dotnet/cli/issues/10208. @ericstj @danmosemsft is that something in BCL or WPF?. Closing as fixed for easier traffic. It can be reopened if the issue is not fully addressed.. Analyzing crash dump on Linux is similar to analysis on Windows - except that you need to use different tools: https://github.com/dotnet/coreclr/blob/master/Documentation/building/debugging-instructions.md#debugging-coreclr-on-linux\nCollect the dump, get the callstack (ideally from multiple segfaults), then try to guess where the problem is.\nFYI: Just the fact that an app worked in one environment (Windows) does not mean it doesn't have a bug which reproduces on other environments (Linux), although it may be less likely. Once you post the callstack (make sure you have symbols right), hopefully it will be enough to say where the problem is in your app or in .NET Core.. Analyzing crash dump on Linux is similar to analysis on Windows - except that you need to use different tools: https://github.com/dotnet/coreclr/blob/master/Documentation/building/debugging-instructions.md#debugging-coreclr-on-linux\nCollect the dump, get the callstack (ideally from multiple segfaults), then try to guess where the problem is.\nFYI: Just the fact that an app worked in one environment (Windows) does not mean it doesn't have a bug which reproduces on other environments (Linux), although it may be less likely. Once you post the callstack (make sure you have symbols right), hopefully it will be enough to say where the problem is in your app or in .NET Core.. Happy to hear you were able to track it down. Identifying HW errors is often difficult and time consuming.. @tarekgh does it belong into CoreFX repo? Or is it easy to answer here? (GH issue mover is broken, so taking lazy approach before moving it manually). @wfurt is 1GB the right value here?. Did you make sure the .so is correctly placed in the app directory as the error message says?\nUnable to load shared library 'libCoolProp.so' or one of its dependencies. \nIn order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: liblibCoolProp.so.so:\n    cannot open shared object file: No such file or directory. Is the libCoolProp deployed next to the executable from where you execute the app?\ncc @janvorli @wfurt . Does it create 'build' directory on Windows as well?\nThe DLL must be next to it - so either your project somehow marks it as dependency (IMO likely), or due to some magic it ends up in the right place.\nAs it seems to be answered, closing.. @EduBic I find it fairly suspicious that Windows would load DLL from another directory on its own, unless it is part of WinSxS cache - i.e. installed globally.\nCan you check under debugger where the DLL is loaded from?. You can attach debugger (VS or windbg) to running process, or use other tools (like ProcessExplorer) to see loaded DLLs into a process.\nOr you can launch the command line under a ddbugger.. Was it maybe the current folder at the time dotnet was invoked? That would make some sense .... Sounds like that. And that would be OS difference, not something .NET has impact on.. @jobou363 just to clarify I understand your suggestion:\nYou would like to see a clear error when you deploy into Azure Web App a 64-bit app when only 32-bit apps are supported by the Azure Web App. Is that correct summary?. That sounds like a reasonable enhancement. Not sure if it is part of VS tooling, or Azure Web App service itsself - @Eilon do you know where to route it?. Thanks @vijayrkn for your guidance!\n@jobou363 can you please report your suggestion there? That way it will reach the right team. Thanks!. @saurabhnachankar did you try to clean your project to delete old compiled binaries?\nDid you double-check that all projects are correctly updated to the 2.2 SDK?\nDo you get same problem with brand new project?\nDid you compare brand new project with your existing one to double-check it is correctly udpated?. Let's wait for analysis on Dapper repo first - if it is a regression caused by .NET Core, we will need information which API regressed, then ideally filed in CoreFX repo.\nGiven that nearly nothing changed in .NET Core 2.2 against 2.1.x in lower-layers of .NET Core (most changes were in ASP.NET Core layer above), I am curious if this is indeed a regression caused by .NET Core.. @mikem8361 @noahfalk @tommcdon can you please help here?. Any update? What are the next steps?. Duplicate of https://github.com/dotnet/diagnostics/issues/79. You should be able to use sockets normally on Linux as on Windows. Some Linux distros require some permissions for listening on certain ports AFIAK. But your code seems to be just sending.\nAre you able to send data via sockets in a simple HelloWorld app? (take the code from the library and try it out)\nBecause you mention .NET Framework 4.6.1-compiled library, I assume it is not possible for you to recompile it. I wonder if the fact it is not built against .NET Core is interfering here somehow ... although I would not expect this kind of exception in such case.\nTry to narrow down what is causing the problem, create a repro and we can take a look.. cc @wfurt . My understanding was that you need to turn OFF the broadcast.\nWe do not have overrides like that, it would create giant mess. The library needs to be updated and ported to Linux.. Answered - there is no magic solution, just potential hacks or update of the library.\nClosing.. Agreed with @svick. THanks @svick for excellent analysis and help here!\nClosing as answered.. @rakeshsinghranchi @dleeapho @livarcocc can you advise where to route this issue?. I would recommend to check documentation here: https://github.com/dotnet/dotnet-docker\ncc @MichaelSimons if he has more targeted advice .... I don't think we announced any official plans/timelines for arm64 Linux support yet.\ncc @leecow @vivmishra to confirm. Here's latest official information about arm64: https://github.com/dotnet/announcements/issues/82. Please post the code demonstrating the problem you're hitting directly here (the ZIP file is corrupted).\nNote: AFAIK hash codes are randomized intentionally to NOT be stable across processes (to avoid security issues). If you need to persist hash codes, you need to create your own mechanism.. @ViktorHofer can you please help me route it? Is it something we want to move to CoreFX and fix?. Issue moved to dotnet/corefx #33470 via ZenHub\n. @KathleenDollard @wli3 @livarcocc should it go to CLI repo?. This issue was moved to dotnet/corefx#33154. @richlander @leecow @vivmishra do we have official details on our planned C++/CLI support in .NET Core 3.0?. @diverdan92 @fabiant3 any insights about MFC support in WPF?. C++/CLI is official. MFC support depends on what is expected.. It means that C++/CLI assemblies (targeting .NET Core) will be able to run on .NET Core.. As a workaround: I wonder if avoiding using statement on Foo and Foo.Bar namespaces will help.\nThe namespace aliasing is property of C#. You need to pass arguments to C# compiler to make it happen - @KathleenDollard @nguerrera do you have pointers how to do that?. Argh, I mixed up namespace aliasing with assembly aliasing which happens over command line arguments to C#, sorry.. Assuming this is purely C# compiler thing, I would expect the same result to be on .NET Framework and on .NET Core.\nIf you target netstandard20 or something else should not matter as soon as you have the same C# compiler version (which may be tricky).\nCan you please confirm that @ivaylo5ev . Definitely create minimal repro. Create .NET Framework console app and try it there. Without .NET Standard. The less specialization, the better.\nIf it repros everywhere, then it is not .NET Core specific, but rather question for \"How to do this in C#\" and we can route it.. @ivaylo5ev are you able to reproduce it when targeting .NET Framework? (not .NET Core or .NET Standard involved). Thanks @nguerrera a lot!\nGiven the info above, I think this is resolved, so closing. Let me know if I missed anything.. Do you have troubles on .NET Framework or .NET Core? (did you try both?)\nDo you have same problems in other environments? (different printer, different machine). We do not track .NET Framework bugs on GitHub. You can either contact Microsoft support or use VS Developer Community portal for that - see details: https://github.com/dotnet/core/blob/master/README.md#getting-help. Can you please describe in more details what you're doing and what exactly you expect? Ideally create a minimal repro a post it here.\nBased on your current description I have no idea what exactly you struggle with (beside the fact it makes you frustrated).\nBTW: Your question seems to be more about MVC, so it is likely more suitable for aspnet/MVC repo.. This is beyond scope of this repo, closing.\nI think your best option is to ask on StackOverflow or other kind of forums.\nOr maybe you will be lucky and someone will notice it here and answer .... Did you try to set OPTIMIZE to true? Does that work on Ubuntu?. No response, closing.\nLet us know if you find more details, we can then reopen.. @iga1976 with OPTIMIZE unset, do you still see the issue?\nIf you do, you can either track down where it comes from (from the logs), or you can try it on a brand new machine/VM from scratch. It seems like your machine is misconfigured or something.. What is app_offline? Is it ASP.NET concept? Like this one: https://stackoverflow.com/questions/1153449/asp-net-2-0-how-to-use-app-offline-htm. Which version of .NET Core do you use? Which Linux distro do you use? (Only certain distros are supported on arm)\nAre you able to collect crash dumps? (some Linux background will be needed for that)\ncc @wfurt @janvorli for additional guidance / pointers. That one was fixed in 2.1.5: https://github.com/dotnet/coreclr/issues/18486#issuecomment-428402126 ... @rgelb can you please try that version? (and check that you used earlier 2.1 version?) Thanks!\nThanks @wfurt!. @rgelb did you get chance to give it a try?. Duplicate of https://github.com/dotnet/coreclr/issues/18486. @tarekgh is it known issue? Can you please help me route it? Thanks!. @sdmaclea should we move the bug to CoreCLR? I see you have a fix there .... Are you using any interop with native code? The above looks like corrupted stack - that is typically sign of memory corruption originating in bad PInvoke, or potentially HW issue (check if you get the same problem on more than 1 machine / VM host).\ncc @janvorli @leculver. You have now 2 options - either investigate the dumps and hope to spot some pattern / sign, or create a small repro and then debug that.. Not actionable, closing.\nIf you find more details and pin point the problem and it turns out to be in .NET Core, feel free to reopen.. HTTPS proxies are not supported on .NET. The support in the industry is not wide-spread either (it just started appear in last couple of years).\nHowever, it is NOT the same thing as connecting to HTTPS endpoint via HTTP proxy (which is IMO the primary problem you want to solve). That is totally valid scenario, fully supported and should be working.\nCan you please double-check that you can use HTTP proxy URL, then use it even for HTTPS traffic?. That is a bit suspicious. Can you please double check that? Because the error you're quoting is reported only if you use HTTPS URL for the proxy itself:\nhttps://github.com/dotnet/corefx/blob/a10890f4ffe0fadf090c922578ba0e606ebdd16c/src/System.Net.Http/src/Resources/Strings.resx#L375-L377\nhttps://github.com/dotnet/corefx/blob/449190d7c873b56337ba6a7f2d9b53f5232ad16d/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPoolManager.cs#L294-L297\nThings to check on top of that:\n Does the same code work on the same machine from .NET Framework?\n Does it fail locally or only in the cloud as Azure function?\n* Which OS do you use? Did you check if it is specific failure to the OS?. I don't think we support PAC files in URL for proxy. What is the inner exception in the second case?\nCan you grab the exception in the first case? What is the callstack? Can you try to debug into CoreFX itself?\ncc @davidsh . @pmadusud any update?. The only other way would be to debug through the code on your machine ... that is, however, rather involved.. Looks like not actionable with current information, closing.\nLet us know if there is more info and we can reopen.. @John0King is that something that exists on WPF for .NET Framework?\nBTW: This repo tracks only work for porting WPF to .NET Core. We are not set up yet to track feature requests that are beyond parity with WPF on .NET Framework.\ncc @fabiant3 @diverdan92 (to correct me if I am wrong). @John0King please file your question on WPF repo: https://github.com/dotnet/wpf. We do not have official abbreviations beyond \".NET Core\" and \"ASP.NET Core\" ... the names are already short enough.\nI have seen on few occasions DNC being used for DotNetCore (in file names), but it was VERY confusing to me and others IMO. It is NOT something I would recommend to use a lot.. Duplicate of https://github.com/dotnet/corefx/issues/574. @wfurt @leecow any suggestions? I don't see libstd or libgcc in list of prereqs for Alpine or other distro: https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore21#install-net-core-for-supported-alpine-linux-versions-64-bit\ncc @bartonjs . What is Expression.dll? Is it part of your app?\nAre all prereqs installed on the Jenkins machine?\nAre you able to reproduce the same on brand new VM (without Jenkins)?. @tpardhu561 in that case I would suggest to involve some developers to help you out debug the build. It seems like the DLL is referenced at the moment it was not build yet. Maybe there is bug in parallelism of build and how projects depend on each other.. @tpardhu561 by prereqs I meant - .NET Core SDK and all other things your project needs.. @yaakov-h thanks! Fixed.. @jarz it does not seem to be related to 2.1.6, so not on this issue.\nTry to narrow down what triggers the problem - is it your environment? (Azure DevOps Artifacts - whatever that is) Or is it reproducible under some circumstances everywhere? If it is not specific problem of the environment, then this repo is a good start.. @megafinz is that output from msbuild? Are you able to track down what triggers it?\n@nguerrera @dsplaisted can you please help route it?. @joeaudette thanks! I merged your report with #2062 (same problem on another subpage). Are you able to reproduce the same problem on brand new machine/VM?. Does it fail for newly created project (with manually added dependencies) as well or is it specific to your larger project?\nIf you can repro with newly created project, can you please share your steps? Thanks!. Can you please post entire dotnet --info output? Does it have this entry?\nMicrosoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]. What is the Azure DevOps environment? Are you able to reproduce it in isolation / locally?\nIs there any proxy set up there?\nIf you don't know the answer or if you are unable to isolate the repro to local environment, I would suggest to contact Azure DevOps support first.. Possibly (there could be some misconfiguration which just \"happened to work by accident\").\nThe key is narrowing down what triggers the problem. Without that information it is not actionable :(. @h0730303779 what is \"20W\" string? Can you please post full compilable repro?\nWhat does it mean it is unable to debug? (I don't understand the non-English text in your screenshot). Duplicate of https://github.com/dotnet/roslyn/issues/20118. @leecow can you please take a look? Or recommend someone to take a look?. Any idea what caused the hiccup @leecow? Something we can watch for / avoid in future? Maybe caused by our 2.1.6 release? Or is it just mystery?. Is it possible that the \"linux supervisor\" (whatever that is) redirects console, leading to the problem?\ncc @wfurt @omajid @tmds. Not a bug, closing.. Related code:\nhttps://github.com/tomeo/dotnet-core-resource-files-example/blob/master/ResourceFilesExample/Resource.Designer.cs#L66-L71\nc#\n        internal static byte[] example {\n            get {\n                object obj = ResourceManager.GetObject(\"example\", resourceCulture);\n                return ((byte[])(obj));\n            }\n        }\nhttps://github.com/tomeo/dotnet-core-resource-files-example/blob/master/ResourceFilesExample/Resource.resx#L120-L123\nxml\n  <assembly alias=\"System.Windows.Forms\" name=\"System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" />\n  <data name=\"example\" type=\"System.Resources.ResXFileRef, System.Windows.Forms\">\n    <value>example.json;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\n  </data>\n@tarekgh @ViktorHofer can you please help me route it? Is System.Windows.Forms available on Linux?. Duplicate of https://github.com/Microsoft/msbuild/issues/2221. FYI: See the syntax above which GitHub recognizes for duplicates ;) (unfortunately any other comment in that post will break it :(). Confirmed.\n@leecow @vivmishra do you know how to fix that page? Does it live in some private repo?. And it is broken also here: https://www.microsoft.com/net/download\n.NET Core 2.1 release notes -> https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6.md instead of https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md\ncc @joeaudette who reported it in https://github.com/dotnet/core/issues/2053#issuecomment-439515946. I think msbuild has copy-file options. Can you use that?\nOtherwise you will have to have specific Linux vs. Windows copy code.\n@nguerrera @dsplaisted any insights?. Seems to be answered, closing.. Which APIs to do you use? Is it database? EntityFramework? Something entirely else?. Does it happen when you change:\n1. Server to .NET Framework\n2. Client to .NET Core\n3. Use HttpClient APIs instead (esp. on .NET Core). @sergey-b-berezin chasing where the bug is is however useful for routing to the right team - is it client side or server side?\nIs it a new problem or long existing problem?\nThe \"tests\" above will answer that.. If you suspect the server, can you please at least try different client? It should be simple.\nBased on that we will route it to the right repo. This repo is useful for nebulous or unclear bug reports.. Closing as there is nothing actionable left here. Let me know if I overlooked something.. It is Intel Celeron processor, so either x86 or amd64 should work. Did you try it?. Ah, I didn't notice that Linux is not supported on x86, thanks @bartonjs! That would explain current behavior.\nClosing - please monitor https://github.com/dotnet/coreclr/issues/9265 for x86 Linux support.. @tarekgh looks like Linux vs. Windows OS difference. Can you please confirm?. @0xd4d do you know which bug it is?\ncc @jkotas @RussKeldorph . @AndyAyersMS what is our position on backporting it to 2.1 servicing? Do we need more upvotes / impact clarification?. Duplicate of https://github.com/dotnet/coreclr/issues/18235. Duplicate of https://github.com/dotnet/roslyn/issues/20118. Thanks @0xd4d for finding the dupe!. @tarekgh any advice here?\ncc @keeratsingh @AfsanehR @David-Engel . Yes, either close it as dupe of existing CoreFX issue, or move it to CoreFX. Does it exist in CoreFX already?. In such case it is up to you if you want to track it here and then dupe it/move it, or move it right away to clarify in CoreFX.. @keeratsingh I updated your above message - this way GH recognizes it as duplicate - see https://github.com/dotnet/core/issues/2072#event-1990313873. @nguerrera @dsplaisted can you please help route this issue?. Are you able to reproduce the same problem on more than 1 machine?\nDid you try to chop off parts of the project to create small repro that you could share with us?. I still don't understand what exactly happened. Can you distill a repro? Maybe there is something we can improve .... If you can narrow it down to a small repro and info how long the directory have to be, that would be very helpful.. I am not sure which error message you mean. Can you please point me to the exact one, that will be extremelly helpful.. No more action is needed, closing.\nIf there is specific information how we can improve our tooling to be more resilient for long paths, please let us know. Thanks!. @Lxiamail @mconnew can you please help route it to the right place?. Duplicate of https://github.com/dotnet/wcf/issues/3272. Duplicate of https://github.com/dotnet/cli/issues/10396. cc @diverdan92 @fabiant3 @vatsan-madhavan\n. @nguerrera @dsplaisted can you please help route it?\ncc @diverdan92 . @jaredpar can you please help me route this issue? It looks like Roslyn specific.. @justinushermawan run HelloWorld compilation in VS. Enable verbose msbuild logs, check the args it passes to Roslyn - you will see it uses reference assemblies, none of which is called System.Private.Corelib.\nReference assemblies is where types live at compile time. At runtime many of those type-forward to implementation assemblies (like System.Private.Corelib).\nYou should never see an app or library to reference the implementation assembly - if they do, it is a bug they need to fix.. Is that HelloWorld app? Did you try to mimic what VS does with the references?. ok, can you share full repro for the HelloWorld-style repro?. This is wrong:\nhttps://github.com/justinushermawan/roslyn-test/blob/master/Core/Program.cs#L28\nYou're using implementation DLL (the one you're running on), not reference assemblies as you should.. I don't know from top of my head - as I suggested above https://github.com/dotnet/core/issues/2082#issuecomment-442657113, you can check what VS does and where the reference assemblies directory is.. @rrelyea can you please help route this issue?. @GanesanRengasamy can you please post your question on the recommended Xamarin repo?\nThanks @rrelyea for your advice!. @GanesanRengasamy your report mentions Android and Xamarin. The conclusion is that it is specific to Xamarin.Forms package specifically, so that's why starting there might be best.\nIf you have evidence it is not specific to that package or to Xamarin TFM, please provide that info and we can re-evaluate.. Seems to be addressed, closing.. You might be just lucky on .NET Framework, that it corrupted memory which is not used later on.\nDoes it happen all the time?\nAre you able to identify who and how corrupts the memory? (triple-check the PInvoke signature, get it under debugger, etc.)\nTime Travel Debugger is great tool to debug these things - get a recording of the failure and then just set data breakpoints and \"go back\". It requires windbg skills though.\nIf you have evidence it is a bug in .NET, we can take a look.. No answer for 2+ weeks, closing.\nIf there is more evidence, we can reopen it.. Also linked from README.md of this repo: https://github.com/dotnet/core/#net-core-releases-and-daily-builds. I don't believe there are any plans to support it at the moment.\nPersonally, I never heard of it. Based on wikipedia it is binary compatible with Windows, so maybe it should just work?\nIn general, our main goal is to enable all distro owners to compile and redistribute .NET Core as part of their work. We do not intend to support every single OS distro in the world, just a list of few.. FYI @richlander @leecow . @sbomer is it ready for merge?. Please move the issue to https://github.com/dotnet/csharplang repo.\nPersonally, I don't think it makes sense to add multiple syntaxes to achieve the same thing. But I am not C# designer, so I let them make the final call.\nAlso note that addition of each feature creates complexity and interaction with other features.. Duplicate of https://github.com/dotnet/winforms/issues/117. Duplicate of https://github.com/dotnet/coreclr/issues/20657. @no1melman I am a bit confused - what exactly is it you're expecting vs. what happens today?\ncc @janvorli @jeffschwMSFT . I believe there are a few prefixes and suffixes we try for DllImport on Linux, incl. \"lib\" prefix and \".so\" suffix.\n@janvorli @jeffschwMSFT may know more.. @janvorli @jeffschwMSFT post holidays ping .... Seems to be answered. Let us know if there are additional concerns I missed.. @fugaku why do you think it is gone? See https://apisof.net/catalog/System.Net.Http.HttpContentFormDataExtensions - it should be in System.Net.Http.Formatting.dll, is that not the case?. @racheldelman what do you mean by Azure in this context? What do you mean by \"no longer working\"?\nFirst try to find out if it is problem of Azure service not supporting 2.2 (I would recommend to watch official communication channels for that particular service in such case) or if your app simply is broken by the upgrade (something you would need to investigate & isolate).. @DickBaker thanks for reporting the bad URL - it seems to come from here:\nhttps://github.com/dotnet/core-setup/blob/b3b533c92fa1911767d382d174b6f2e6356cfae1/src/pkg/packaging/windows/sharedframework/bundle.wxl#L66\n@rakeshsinghranchi do you own it in core-setup repo? cc @vivmishra @leecow . @braidenstiller please monitor App Service announcements, like this one: https://github.com/Azure/app-service-announcements/issues/151. @JanVargovsky thanks for your report! @vivmishra fixed it.. @atljoseph I understand your frustration when basics things don't work. Regardless, I'd like to ask you to be polite, constructive and follow .NET Foundation Code of Conduct (which we sadly don't have linked from this repo docs - something we should fix).\nNote that 3.0 is in first Preview, so not all things work perfectly yet. We, however, welcome feedback and will be happy to address issues and make our products better.\nRegarding your report:\n\nAspNetCore not in the namespace Microsoft.\n\nWhere is it missing exactly? In IDE? Or does HelloWorld project fail to build?\n\nVersion 3.0 was not even listed as an option.\n\nListed where? In IDE? Which one?\n\nCreate button is unresponsive.\n\nBased on your further reply with MonoDevelop callstack, I assume you are using MonoDevelop.\nIf there are bugs with .NET Core 3.0 Preview in MonoDevelop, it may be best to report your problems on MonoDevelop feedback channels (I don't even know what they are, but I can help route them once it is clear what problems with what products you're hitting).\nThat said, if you see dotnet command line failures, we should root-cause them first - starting here is best.\nWhen basic things don't work, it is typically outcome of bad or corrupted installation of the product (.NET 3.0 Preview in your case), or bad/corrupted state of the machine (confirmation if it happens on other Macs would help, specific OS version might be needed, etc.).. @ghogen it will be part of VS 2019 - see WPF repo for details: https://github.com/dotnet/wpf#status or https://github.com/dotnet/wpf/issues/188. @HaidarZ .NET Core 3.0 is in preview - it is not officially supported in production, so you can use it on your own risk.\nIf you want full support, you need to wait for go-live preview (typically RC), or final release.. @ajcvickers @divega what's the word on EF6 plans?. Thanks for your fix!\nIt was fixed in the meantime in parallel in https://github.com/dotnet/core/commit/b8551323ba94df8a3636e10694bccdcc4d07e504#diff-61eb871e5f2111eb6bd3865d6ff0c171 by using the link at the bottom of the file.. Is there anything still to track / route out of here? Or can we close this issue @AaronRobinsonMSFT?. @vivmishra @leecow can you please take a look / comment?. @leecow @vivmishra can you confirm and make the change please?. @RussKeldorph can you please help route it to the right team? cc @BruceForstall . @rrelyea any idea where to route it?. @sbomer @jeffschwMSFT can you please help route the issue?. Duplicate of https://github.com/mono/linker/issues/405. Thanks @GTANAdam for spotting the dupe!\n@sidravi it is usually not recommended to cross-post same issue on multiple repos. At minimum, please link them together in future. Thanks!. @sidravi the other repo would be a good place to ask these questions ;). @rakeshsinghranchi can you please help?. Number of incomming or outgoing connections?\nIt sounds more like a task for monitoring tool, or OS tool. @DamianEdwards @glennc @Eilon is it something you can follow up on or route?. I already got the right team on internal email thread, thanks for help @Eilon @muratg!. Per offline discussion, it will be announced once the roll out is finished.\n@shirhatti answered similar question on the blog post: https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-2-2/ (see discussion comments)\n\nThe Azure App Service deployment for the ASP.NET Core Module is currently in-process and we expect to be generally available across all regions before the end of December.\n\nI am not sure if Azure App Service team plans to do just a blog post, or post on https://github.com/Azure/app-service-announcements. I let that decision and its communication to their team.\nIf you feel like that particular channel is neglected (I don't have enough background to have opinion here), I would suggest to send them the feedback (naively maybe via creating issue, although as you point out they may not like it, or via other appropriate channels - although I don't know what they would be).\nHope it helps!. FYI: https://github.com/Azure/app-service-announcements/issues/151 - .NET Core 2.2 availability on App Service.. @brianrob @billwert do we have some insights into perf on ARM64?. @taori are you able to track it down to a standalone repro?\nThis seems to be specific to your project .... Weird, why would that happen? Can you get callstack? (in textual form please)\ncc @bartonjs . @taori what is the remaining problem here? Do you have isolated minimal repro we can look at?. Do you have isolated repro we can investigate?. OK, let's close it then.. See https://github.com/dotnet/core/issues/2120#issuecomment-446693531. Thanks @MarcoRossignoli!\nClosing as I assume it answers all the questions. If not, please let me know what remains and I can reopen. Thanks!. @fdbva looks like there is multiple questions - I have harder time to understand what your remaining question is about (as I am not expert on ASP.NET Core). Would it be more appropariate to ask the question on ASP.NET Core repo, or am I missing something?. .NET Core is side-by-side. You need to either upgrade your project to latest version (netcoreapp2.2), or keep appropriate version installed (netcoreapp2.1 in your case).. Installing additional SDK should not break build of your previously-building apps. That is weird.\nAre you able to reproduce it with HelloWorld app? Or is it specific to your project?\nDoes it repro on more than 1 machine?\nIf we have a repro, we can take a look ...\ncc @nguerrera @dsplaisted . I am confused: If you're using Xamarin APIs, how come you run on .NET Core? That should not be possible AFAIK.. Can you provide minimal repro without using that library?\nIt will help to filter out if it is indeed problem in the platform, or problem in the library itself.. @Terricide I included your repro inline - it still references the library.\nWe need your help to figure out if it is problem with the library, or with .NET Core itself.\ncc @jkoritzinsky if he can help .... Thanks @jkoritzinsky for your insights. Closing for now, until there is specific .NET Core problem sign.. @Terricide that sounds like OS problem though. Not something .NET can influence, right?. @TristanApc it is not clear from the callstack if it is a bug in your code, some 3rd party library or in .NET Core itself. You will likely need to root-cause it first or at least do deeper investigation, then file a bug.. @johnkwaters what is ANCM? In general, we recommend to watch Azure App Services announcement repo: https://github.com/Azure/app-service-announcements. @johnkwaters good idea to raise it to App Service team .... For EntityFrameworkCore feedback, please use https://github.com/aspnet/EntityFrameworkCore. @tmds @wfurt can you please help here?. @tmds @bartonjs can you please help route the question?. @bartonjs ping?. @bartonjs can you please help troubleshoot it further or route it appropriately? Thanks!. @bartonjs ping. @William201807 the blog post and WPF repo both contain information, that WPF is Windows-only. Currently there are no plans to make it cross-platform. See https://github.com/dotnet/wpf/issues/48. Do you have isolated repro?\nDoes it happen on more than 1 machine?\nOnce we have actionable information, we can move it to WPF repo: https://github.com/dotnet/wpf. Which OS specifically? Is it fully patched?\nI would recommend to clarify, then file a bug on WPF repo with that information (it even asks for winver).. There's lots of details here - can someone please help me summarize the problem, what needs to happen and where should we route the issue? Or is it ready to be closed?\nIn this repo it won't get much more traction I am afraid :(\n@rakeshsinghranchi can you please help here?. @dagood any plans with this issue? There is no update for 1 week.\nIs there some real problem hiding here? (disclaimer: I didn't read it all)\nShould we move it to other repo?. @huanlin please file a new issue with all info he asked for - see above. Thanks!. You can use .NET Core 3.0 previews to install ARM64, that should get you going.. Yes, GitHub respects CODE_OF_CONDUCT.md file: https://help.github.com/articles/adding-a-code-of-conduct-to-your-project/. We can move it to .github subdir to \"hide it\" from root dir.\nHowever, GitHub does not (yet) recognize custom text in the file, so technically it does not help with community checklist: https://github.com/dotnet/wpf/community.\n@richlander which wording do you want to use? We have 2 in WPF:\n https://github.com/dotnet/wpf/blob/master/CODE_OF_CONDUCT.md\n https://github.com/dotnet/wpf#code-of-conduct. > That's the one I linked to initially.\nAh, I didn't notice it is specific link - the title hides the subsection link :(\n\nIs there a link that shows what that file does? I cannot see what that is.\n\nThe linked docs is all I have: https://help.github.com/articles/adding-a-code-of-conduct-to-your-project/\nIt is integrated in https://github.com/dotnet/wpf/community checklist.. I just addressed @richlander's feedback on the wording. Let me know if anyone wants full text instead. (we could add it by using Add button on https://github.com/dotnet/core/community). Just to clarify my understanding: The prefered way is to use \"default\" GH way and include full text of the CoC in the CODE_OF_CONDUCT.md file in root, is that correct?\nIf that's the case, I will merge this PR and create a new one via GH \"Add CoC\".\nPlease upvote if you agree. Thanks!. It seems that the feature IntelliTest supports only .NET Framework: https://docs.microsoft.com/en-us/visualstudio/test/generate-unit-tests-for-your-code-with-intellitest?view=vs-2017\n@leo2d can you please provide feedback directly to Visual Studio? https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio-2017?view=vs-2017 ... that way it will find the right team faster.\ncc @kendrahavens \nClosing as out of scope here.. Did you mean to ask a question? The text above is content of the template .... Closing for now. Please reopen if you update the top post with specific question.. Do you have a minimal repro for ASP.NET team?. Look into ASP.NET Core - it has many parts of similar framework and other goodies.. Is it specific to 3.0? Did you try the same with 2.1 / 2.2?\nAre you able to isolate the repro in HelloWorld style app? (starting with brand new app from VS). Conflict between project names and assembly names are not surprising to me - both involve file names and directory names in the project and the output directory. I wouldn't be surprised if it is by design - @nguerrera @dsplaisted can you please comment?. Can you look at the callstack where the \"hang\" is? I would guess it is some OS API blocking on NAS.\ncc @tmds @wfurt . @wfurt @janvorli anything we can do here? Or is it external OS problem?. @wfurt can you please loop them in if you think it is worth it? If not, please close the issue as \"not actionable\". Thanks!. What's the next step here?\nCan we close it?. It might be interesting to post the important part of the callstack - the start which does not repeat and the end.. > I'm struggling to understand how a code change would only break when running on the Mac host.\nThere are dozens of potential explanations: There may be bugs in .NET, in the OS, in your app. There may be different allocation patterns, stack sizes, or on some configs you may just be lucky. Without full root-cause analysis, it will be just guess work. The key takeaway here is, it is possible and not that much rare to see platform/config differences.\n\nThere is no stack trace provided when it quits. It just says StackOverflowException and then the Apple error report window pops open.\n\nThen attach a debugger, or run it under debugger, or collect crash dump and analyze that. While I don't know how to do these things specifically on Mac/Linux, they are definitely possible.\n\nIs it possible that there is a circular dependency? Does anyone know what depth the circular dependency reporting goes to?\nIf it is a circular dependency, is it possible that running on the Mac host with larger amounts of resources available causes the framework to try and construct more at a given time?\n\nI am not expert on the area, but it may be one of the possible reasons. I would still suggest to root-cause the failure in systematic way instead of guessing around - that usually takes much more time overall.. @wadebruce are you able to create a small HelloWorld-style repro with a circular dependency that would demonstrate the problem and lack of our ability to detect it in a meaningful way?\nIt may be by design, but if there is small repro, we can at least pass it to the right team to make the call.. OK, given that it is resolved for you, I am going to close the issue now.\nIf you happen to be able to isolate the problem, we can then route it to the right people. Thanks!. It seems that something in your Azure DevOps setting (or in the platform itself) decided to use wrong MS.AspNetCore.App package. If it compiles locally, I would dig into the differences of used SDKs and other tools. Contacting Azure DevOps support may be one of the ways to narrow it down.\nThis may be also helpful: https://www.hanselman.com/blog/AzureDevOpsContinuousBuildDeployTestWithASPNETCore22PreviewInOneHour.aspx\nIf you find evidence this is a problem in .NET Core itself (SDK or runtime), please let us know and we can reopen.\nClosing as this is likely problem in Azure DevOps.. @jkotas @jeffschwMSFT is there any official high-level documentation about assembly loading differences between .NET Core and .NET Framework?\nI couldn't find anything except specific documentation on AssemblyLoadContext, etc. -- which already assumes I know what to look for.. @jkotas @jeffschwMSFT ping post holidays .... Thanks @jkotas! Closing as it is answered and docs are tracked in another issue .... @rakeshsinghranchi @leecow can you take a look please and help route it?. Seems to be resolved .... Duplicate of https://github.com/dotnet/winforms/issues/266. @trondhindenes thanks for feedback. Cany you please file the issue on CLI repo? https://github.com/dotnet/cli\nThanks!. @Eilon is it something you / your team knows about? Or is it more general?. Duplicate of https://github.com/dotnet/sdk/issues/2722. I believe you can just unpack the ZIP file, set some env. vars. and run from a directory.\nThere also seems to be installation script for Windows: https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script ... maybe it does not need admin priviledges if you do not install SharedFramework.\nStandard is not something you can install. It is just spec (or think about it as interface) that .NET Core or .NET Framework (or other .NET implementations like UWP and Xamarin) implement.. I think the behavior is fairly reasonable. You need to decide what to use - env vars or config file, not both.\nI let ASP.NET experts to make final decision though.. Looks like this documented problem based on quick internet search: https://github.com/dotnet/core/blob/master/Documentation/build-and-install-rhel6-prerequisites.md#troubleshooting. Does the Docket image contain the libraries referenced in the article? Given that Docker images try to be as small as possible (esp. --slim variants - see Docker repo), I wouldn't be surprised if that's the case ...\nEither way, I assumed, the docs are enough to point in the right direction. Is that not the case? If not, what is unclear or missing?. I was about to suggest that I can see 4 possible reasons:\n1. Change in OS,\n2. Change in Docker image used,\n3. Change in the app, or\n4. The app took different code path.\nLooks like you narrowed it down to option 1.. Linux is not supported on x86. For full list of supported OS versions and architectures per each .NET Core release, please see: https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md. @sbomer @jeffschwMSFT should we move it to https://github.com/mono/linker?. @sbomer @jeffschwMSFT ping?. This issue was moved to mono/linker#443. @leitocardoso maybe it won't be needed, but in future, I recommend to report bugs with minimal repro steps / code.. Duplicate of https://github.com/OmniSharp/omnisharp-vscode/issues/2772. Thanks @IvanJosipovic for the answer!\nClosing.. Adding method to existing interface is a breaking change. As @MarcoRossignoli suggests above using extension method is likely the best option.\nCoreFX is the right repo for BCL types like lists. Closing.. Are you able to reproduce it on more than 1 machine?. @rakeshsinghranchi is it a known issue? Should we move it to core-setup repo?. OK, closing until it is confirmed that it is caused by something else than installer corruption.\nThanks @amansulaiman for the info!. @FinchYang try it on another machine to avoid HW issues or bad download.. @zsanhong are you able to reproduce the problem on 2 different machines? It feels like corrupted download ...\nClosing due to no response to original question above.. @Tratcher should we close the issue here, or transfer it to ASP.NET repo?. We do not track .NET Framework questions on GitHub, closing - please use community sites like StackOverflow or report it via VS Developer Community Portal (although, I would not expect any change in the space, given the high bar for changes in .NET Framework).. Duplicate of #2122. @199621616 please post questions and bug reports in English, we do not have capacity to support other languages. Sounds related to https://github.com/aspnet/Blazor - please ask there.. Duplicate of https://github.com/mono/linker/issues/428. @johnkors thanks for the fixes!. @richlander @leecow who handles the published CLI usage data? Do we have plans to keep publishing them?. @richlander ping. FYI: @blowdart . How often does it happen? Which OS versions?\nDoes it happen on more than 1 machine?\nAre you able to isolate a standalone minimal repro?\nCan you please post full callstack?. OK, 1 in 1K is quite high impact.\nCan you please try to isolate a repro (with artifical load)?\n@geoffkizer @davidsh does the call stack ring a bell. It seems to be missing parts of the stack .... Create a minimal HelloWorld-style repro that we can run locally. Either start from scratch, or chop off parts of your app one by one.\nIt is often time consuming to do so, but it should be not a surprise that it is often what we would have to do anyway.\nIf you are truly unsuccessful after significant effort, we can explore options to provide larger repro.\nMakes sense?. No repro available, closing.\nIf there is a repro available, feel free to reopen.. Looks like problem with external 3rd party NuGet package, closing. Thanks @svick for your analysis.\nIf you find a repro without it, please let us know and we can reopen.. @marek-safar @ericstj who has the right expertise to analyze it?. Check out AssemblyLoadContext: https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/assemblyloadcontext.md. @ygoe do you have a small isolated repro that demonstrates what is slower?\nIf you don't know which part of your app is slower, you can either experiment, or do perf analysis and compare what take where how much time.\nPlease make sure the perf difference shows on more than 1 environment / machine to avoid weird machine setup problems. Thanks!. @ygoe What is WMO?\nDid you reproduce the perf difference in 2 different environments as I suggested above?\nDid you get chance to do some basic perf analysis and comparison which part of your app is slower? That will increase chance we will prioritize the investigation sooner.. Alright, let us know what you find - it may help you find a smaller repro for the problem you're facing.. @adamsitnik @brianrob @billwert can you please help here?. Any update @ygoe?. @ygoe there is no repro attached anywhere.\nEither way, can you please minimize the repro to small app and then share that?\nPlease make sure it reproduces on more than 1 machine to avoid chasing down weird 1 machine corruptions.. @ygoe can you spin off another Linux VM. That should be fairly low cost.\nWill you be able to minimize the repro for this particular bug?. Not actionable, closing. If you have minimal repro and evidence it fails on more than 1 machine, feel free to reopen.. Are you able to reproduce it 100%?\nAre you able to reproduce it on more than 1 machine?\nAre you able to create a small repro showcasing the problem?\nBTW: We may need to move it to either msbuild repo or SDK.. Not enough info, closing. @mikem8361 @noahfalk can you please help route this question?\ncc @tommcdon . @hoyosjs do we want to move this issue to better place, or just close it as non-actionable at this point?. @elangelo I think we will need a repro to be able to help here.\nI would first try to create an environment where you can always reproduce the problem, then chop off parts of the app, move it from NuGet library to local project library, simplify it, while still checking it fails. Once you have a reasonably small repro, please share it with us and hopefully we can help.. @krwq @tarekgh can you please help route the question?. Thanks @tarekgh for your help!. @synckarthik can you please post full .NET Core 2.1+ repro that we can route to the right team? Thanks!. @synckarthik no idea from me - when @Eilon is back, he can route it on ASP.NET team.. @muratg can you please help move it & route it on ASP.NET team while @Eilon is OOF?. .NET Core 2.0 is out of support. Try it on .NET Core 2.1. If you still have the issue, please make sure it reproduces on more than 1 machine, then gather actionable information - ideally a repro, call stack, etc.. @vjirovsky would you mind submitting PR in docs repo? (edit button will lead you there - it is fairly simple) Thanks!. Thank you @vjirovsky!. @GeertvanHorrik updates to what were promised where?\n@leecow can you help here?. @GeertvanHorrik I don't understand your explanation - you did not seem to answer my question.\nThe questions in general should not be \"why not\", but \"why yes\".. @muratg can you please help route the report?. @rakesh-shrivastav looks like a mistake - no original content in the bug report. Closing.. Duplicate of https://github.com/aspnet/AspNetCore/issues/7019. Are you able to reproduce the problem outside of Azure DevOps? (i.e. locally)\nIf it is specific to Azure DevOps environment then it would be best to start with them. Do you know if they have public facing feedback channel?\n@kendrahavens you might be interested in this one.. Can you try on .102 build locally too? That would make better comparison.\nWe need to find what is most likely at fault - regression in 2.2.102 against .100, or Azure DevOps environment?. Duplicate of https://github.com/dotnet/corefx/issues/32027. Can you please try .NET Core 3.0? It was fixed there .... @yanrez not unless there is some good business justification - higher number of affected customers. Is that the case? (this is 2nd ask \"only\" so far)\nAlso, it would help to validate this is truly the root cause, e.g. by trying 3.0 preview/daily build.. BTW: It might be good for you to register as MS employees - at least by linking your accounts: https://github.com/dotnet/core/blob/master/Documentation/microsoft-team.md ... that allows other FTEs to see you are MSFT ;). @yanrez what is the service? How large is it roughly? How often it happens? ... That may support the business justification (even if you were not MSFT ;)).\nIf you can verify on 3.0 that would be great. Either way, we may need to verify on early 2.1/2.2 build as part of \"test signoff\" to make sure we are fixing the real root cause here.. Duplicate of https://github.com/dotnet/corefx/issues/34867. @OnurGumus Stowatch can be misleading and could hide many things.\nI would recommend to change the perf test into BenchmarkDotNet: https://benchmarkdotnet.org, then compare. It will also rule out statistical annomalies and show you disassembly.\ncc @adamsitnik . @nguerrera @livarcocc is it part of VS or where would you suggest to route it?. @agoni1212 fixed: ccf89ea7c20d23c0bb4b0f58e5f76f979dd5571e, thanks for report!. @andrew-boyarshin thanks! Fixed: 686dedfa18dcf58159f0b86abcdfae78bc34a063.\nPS: We would take  and be thankful for PRs for typo fixes ;). @Ramon-Balaguer which compatibility list? I see it in supported OS list: https://github.com/dotnet/core/blob/master/release-notes/3.0/3.0-supported-os.md#linux. @leecow how do those 2 pages relate to each other? It seems that the Preview 2 page has bunch of distros \"merged\" together. Maybe we should add link to the supported OS matrix?. @richlander do you have plans to move the PR forward?. .NET Core 2.0 is not supported as of 2018/10/1: https://github.com/dotnet/core/blob/master/release-notes/2.0/README.md\nClosing.\nIf you can reproduce it on supported .NET Core version on more than one machine (to avoid bad install problem), we can reopen. I can try to route it in such case (please include clear step-by-step instructions how to reproduce the problem from scratch and what is expected where). Thanks!. @nguerrera @dsplaisted @livarcocc can you please help me route it?. I believe that Environment.CurrentDirectory is what the process sets it to at OS level - IIS chose one dir, dotnet run another dir.\nIf you need to find the project location, you need to use path of your main assembly, or something like that ...\ncc @JeremyKuhne to double check my reply. @YadominJinta check supported distros: https://github.com/dotnet/core/blob/master/release-notes/3.0/3.0-supported-os.md#linux\nI don't understand if you're using Fedora, or Fedora in some Android emulation with weird behaviors ... that would be likely unsupported.\ncc @leecow @omajid . @divega can you please comment or route?. Duplicate of https://github.com/dotnet/corefx/issues/31775. Closed as dupe. If the CoreFX issue is in wrong place, let's move it to the right place, or at least mark it as \"external\".. Fixed, thanks for report!. You will need to narrow it down, get a callstack to figure out what's going on.\nFirst step: Make sure it happens on more than 1 machine (to avoid HW / bad install problems).. Not actionable, not enough info at this moment, closing.. If it is PowerShell specific, I would recommend to file it on PowerShell repos.\nIf you have evidence of changes between .NET Core versions, this would be the right place.. @shirhatti @DamianEdwards @davidfowl do you have answer to that?. What is .NET 4.7 on MacOS? Do you mean Mono? It might have entirely different performance characteristics.\nI would suggest to change the perf test to BenchmarkDotNet to get proper statistics, and avoid Stopwatch mistakes, then we can check further ...\ncc @adamsitnik @billwert . @tannergooding any comments?\ncc @adamsitnik . Seems to be answered. If you have troubles with VS, please file feedback via VS bug reporting tool. Thanks!. > Since this exact code worked flawlessly six months ago and it no longer does, it should be a bug, right?\nNot always. If you did something unsupported, it may have been actually broken on purpose as a bug fix.\nCan you post a minimal repro (HelloWorld style) we can try on our end?. Are you saying that the code above fails on EVERY assembly? (you seem to be unsure if it has to be x64 or not)\nDid you try it on built-in assemblies? (e.g. System.dll)\nDid you try it on more than 1 machine?\nWhich .NET Core version did you try? (try latest too just in case). Are you running 32-bit or 64-bit app?\nIf 64-bit app fails to load x64 System assembly, that would be a concern.. .NET Core 2.0 is not supported as of 2018/10.\nDid you try to use supported .NET Core version?\nAre you able to reproduce the same problem locally? (outside of Azure DevOps)\nI assume that no, in which case: Did you try to contact Azure DevOps support?. Not actionable, closing.. @nguerrera @dsplaisted do you know where to route this question / bug report? Is it by design?. OK, closing as dupe of https://github.com/NuGet/Home/issues/5954\nIf it is incorrect, please file a new issue on NuGet/Home where it seems to belong. Or let me know if I missed something. Thanks!. @vinothkhanna are you seeing the problem on more than one machine? (to avoid corrupted install or something)\nDid you try to debug the problem, or isolate a repro? (minimal repro would be ideal). > Btw, to your question, all the repos are facing this issue.\nFYI: I meant repro - isolated small app reproducing the problem ...\nClosing as it is being followed up on by support.\nIf there are more people hitting this problem, we can reopen and look into it deeper. Thanks for your report!. @ericstj ping?. Do you have exact steps to reproduce it? What is LicenseCompiler and where do I find it and how do I run it?\nIdeally provide steps starting with clean latest VS + latest .NET Core installed on machine. Thanks!. Actually looking at the details, it seems the app.library tries to load a reference assembly for execution: Reference assemblies should not be loaded for execution. They can only be loaded in the Reflection-only loader context\nWho owns the library / app LicenseCompiler? Is that Microsoft product?. OK, how can I reproduce it locally?\nCan you please try to create minimal repro?. Not actionable. Closing. Feel free to reopen when there is minimal repro.. No response in 9 days, closing.\nFeel free to reopen when there is a small repro for EF team to try out. Thanks!. @wfurt any idea?. Not actionable, closing.. @juniormayhe aren't the blog posts sufficient? Or TechEmpower benchmark results? ... or blog post like this one: https://www.ageofascent.com/2019/02/04/asp-net-core-saturating-10gbe-at-7-million-requests-per-second/\nThe problem is that everyone uses different benchmarks, or cares about different things, so it is EXTREMELLY hard to provide anything super-useful.\ncc @adamsitnik @billwert @brianrob . No response, closing. @cartermp is there better replacement for F# repo in this list, or should we just delete it?. @KexyBiscuit thanks for ping!. Are you able to reproduce it in standalone HelloWorld app? Or is it specific to ASP.NET environment?\ncc @bartonjs . Why does it need WCF service? Is it related to WCF?. Not enough information yet. Closing. Feel free to reopen once clarified. Thanks!. For client-side we can discuss with @geoffkizer @davidsh @wfurt @rmkerr @caesar1995 @stephentoub . Why is the {buildnumber} part breaking semver? It seems complaint to me according to: https://semver.org/#spec-item-9\nThat said, I don't think we claimed we follow semver, although it would be nice .... @leecow can you please help here?. Duplicate of #2094. Are you able to reproduce it on more than 1 machine?\nAre you able to reproduce it on more than 1 project? (what about some dummy HelloWorld?). @livarcocc @nguerrera can you please help route it?\nLooks like we need to profile CLI or msbuild?. Are you able to reproduce same problem on more than one machine?\nCan you please post clear simple repro steps? (minimal text please, just facts - long stories are hard to read and comprehend). @ahmedowsky I understand you may be frustrated by me not understanding, my appologies if I somehow caused that.\nI'd just ask for a bit of perspective: Imagine for a second being in my role - trying to help people move issues forward, route them to the right places, dealing often times with dozens random issues per day. Many of them need quite a lot of back-and-forth for routing and some are not clear. Many are user-problems and I try to help sort those out to allow other engineers to focus on \"real issues\".\nI'll be happy to help you route this issue to the right place (which is the main purpose of this repo) if you can help me understand what kind of problem you're facing.\nIf you don't want my help, that is perfectly fine - maybe @omajid will be able to help you (he is a good person and knows much more about Linux end-to-end scenarios than I do).\nIn such case I would appreciate clear information about what is status of the issue, next step, etc. If the issue sits for 1 week untouched, I assume it is ready to be closed (that is our typical rule on repos). That's why I poked at it after 5d of no reply.\nI hope we can be respectful and civil to each other. I hope and believe that we both want just the best - to get the problem understood and ideally addressed, so let's try to make it happen. What do you say?. Either create minimal repro without any 3rd party library, or get it under debugger and see what the native side has vs. what you're recieving in .NET layer.. I believe that Unicode processing is OS specific - @tarekgh can you please comment?. Isn't 0 byte allowed part of a Unicode character? That would make it impossible without interpretting the characters properly .... Seems to be answered.. I assumed that was answered by @tarekgh's response. Wasn't it?. Did you try to repair VS? (to avoid corrupted install) ... Or reinstall of VS?\nDoes it happen only on one machine?\nDoes it happen for other project types (e.g. .NET Framework). If it is problem only on one machine, I would recommend to fix it there - by repairing / reinstalling.\nIt is likely some setup / environmental issue. Tracking down such problem is super-costly for everyone involved.\nIf you find the root-cause, or if you have evidence of repro on other machines, then we can follow up. Thanks and good luck!. @mgolois interesting. If you find out more, let us know. Otherwise I suggest to ignore it as one-machine environmental problem (aka costly to track down :().. @livarcocc @nguerrera can you please help route the question?. @jaredpar should the C# feature be part of Preview 2?. I don't quite understand what is the problem - it seems that you cannot edit fields in package properties inside Visual Studio. Is that correct?\nDoes it happen on more than 1 machine?\nDid you try latest VS build?. @ahmedowsky no need to get angry here ... I am just trying to help you here. Personal attacks won't speed things up.\nThe fact is I never heard about rpm builds. The title may be self-explanatory for you, but sadly it is not clear to me. And while I read all your text, it was not clear to me either. Otherwise I would not ask the questions above.\nFor example, it is still not clear to me if you are unable to type anything in the text boxes (from keyboard), or if the values are just not being respected when typed from keyboard.\nBTW: That's why clear step-by-step repro steps (starting with new project) help clarify things. If you don't know where the issue is (which component), it is GREAT help and usually makes routing to the right place much faster.. Thanks for the steps! That will (hopefully) help me help you! ;)\n\nbuild fails (usually)\n\nWhy did you say \"usually\"? Is it intermittent? (as in repeating builds sometime fail) Or is it just random if the problem will be hit or not and once it is, then it is persistent? How often does it happen? (in either case)\nIs the error the one from title? \"Unknown tag: x.x.x.x' (x are version numbers)\" ... so in this case it would be \"... 1.1.1.1\"?\nThis is overall very weird (and interesting ;)). It sounds like VS in the \"bad case\" does not save some files. Can you please compare the project and its output between the \"good case\" and the \"bad case\" (ideally both changing to the same version number from the same original number) to observe if there is any difference.\nOnce we track down which file is different (i.e. it was not saved), maybe we can figure out which component is to blame (and to be routed to).. BTW: I updated your steps to add numbers and bad/good case titles for easier references during further discussion - I hope you don't mind.. Does the command above work? If it does, maybe we should update the doc @sbomer thoughts?. @shravan2x you need to collect dump and examine what has happened. That should be the same as for other runtimes / applications on Linux (inlc. C/C++ apps).\nSome exception in .NET cannot be caught (e.g. AV, StackOverflow, etc.). @leecow FYI: Looks like it was missed in Feb updates.. This may be better suited for https://github.com/dotnet/sourcelink repo ... can you please check to see if it was reported there and if not, ask there?\nThanks!. Is it persistent problem?\nDid you check your network connection?\nAre you able to try it on more than 1 machine to see if it is something environmental?. No response, not enough info. Closing. Feel free to reopen if there is actionable info.. Can you post a minimal .NET Core repro? Something we can copy-paste into VS, run and see the problem?\ncc @steveharter @joshfree . .NET Core and .NET Framework have the same APIs.\nIt does not matter if the WebSocket server is implemented in Java or .NET, or something else - the client code won't be affected by that.\nDoing quick internet search pops a few examples: https://www.bing.com/search?q=.NET+WebSocket+example\nBTW: In general, docs repo https://github.com/dotnet/docs is better place for filing documentation issues.\nI hope it helps, closing as answered.. @VipSaran I don't understand what is your question or ask here. Can you please clarify?. Likely bad download ... closing. Duplicate of https://github.com/dotnet/wpf/issues/397. Which distro did you try?\nDoes it happen on clean VM as well?\n@dagood can you please help here?. @dagood who should do what and where? (sorry I don't quite get it from the description). Duplicate of https://github.com/dotnet/wpf/issues/37. @jaredpar can you please help route it to the right repo?. Do you mean localhost? In that case it is likely firewall problem on your side.\nTry another machine/VM, or check your network settings.. Thanks @KexyBiscuit for catching that.\nClosing as resolved.. I don't follow ... your PR is merged. Are you pushing against it and suggesting it should be rolled back?\nOr are you asking about CLI behavior? (that would be a CLI repo bug report, not question here)\nTo be honest, personally I don't have strong opinions about BOMs, as soon as major editors work fine :) (I am practical).. @dagood @omajid @leecow is it a known problem?. Should we move it to core-setup repo?\ncc @krwq @tarekgh as FYI. No bug description. Probably created by mistake @mukhtar0?. Not enough info to make it actionable. Please provide detailed steps, OS info and symptoms. Try to donwload again or try another machine/VM.. Looks like that @richlander @martinwoodward @terrajobst @leecow can you please help there?\nThere are issues and PRs from 2016 :(. @richlander @martinwoodward @terrajobst @leecow ping?. @MichaelSimons @leecow @richlander can you please help route the problem?. @dagood @leecow is it a known issue?. Do you have a minimal repro which reproduces on multiple machines/VMs? Thanks!. Which .NET platform and which version do you run it on? -- .NET Framework, or .NET Core, or .NET Native / UWP?. What do you mean .NET Core 1.1 app which targets net452?\n.NET Core 1.1 targets .NET Core. net452 can be targeted only by .NET Framework 4.5.2+ app.\nThat said, System.Wed is not available on .NET Core. You need to remove that dependency, or stay on .NET Framework.. This is weird. Are you able to reproduce it repeatedly? Always?\nCan you reproduce it with another project?\nCan you try it on another machine/VM?. Duplicate of https://github.com/dotnet/core-setup/issues/4388. Looks like weird machine setup.\nAre you able to reproduce it on clean machine/VM?. Thanks @NextTurn!. @NextTurn are you refering to @leecow's rename above? https://github.com/dotnet/core/pull/2408#event-2190843879\nIn general, the more descriptive PR descriptions and titles, the better - why do you think name of the tutorial hurts to be in the title?\nBTW: It would be nice to have brief descriptions in PR Description, but for small changes where title describes it, it should be fine.. Last one is better. But it was done after merge, so it is not in commit message where it matters most for future :(. Try to disable Norton, firewalls and other things. It should work.. There is no problem description, symptoms, or anything actionable ... if you have a problem, please describe it and we will try to help.. @KathleenDollard is it something you can help with please?. Did you try to delete the file manually? Looks like some weird OS hiccup?\nAre you able to reproduce it on another machine/VM?. It looks like something weird happened on your machine.\nCan you please try to reinstall .NET Core?\nOr try another machine or VM?. @ajcvickers @divega is it something specific to EF?. Thanks @divega! Closing here as it will be filed in EFCore repo.. Looks like corrupted installation.\nCan you try it on clean machine/VM?. Duplicate of https://github.com/dotnet/core-setup/issues/4388. @michael-x which post? Can you provide link? This issue and the blog post both seem fine.. @michael-x thanks! Fixed ;). @PeterPann23 if you have suggestion what to change, please create PR in CoreFX, thanks!. Duplicate of #2456. Duplicate of #2456. Duplicate of #2456. What kind of shared memory do you expect? (skimming the article didn't clarify it). Duplicate of https://github.com/aspnet/AspNetCore/issues/8552. @leecow it seems we have tutorial instructions only for Ubuntu 18.04, 16.04 and 14.04, while we support also 18.10 in .NET Core 2.2: https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2-supported-os.md#linux\nBut only .NET Core 2.1 supports 14.04: https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1-supported-os.md#linux\nIt seems like the tutorials are refering to .NET Core 2.1 only ...\n@netroby did you try to use Ubuntu 18.04 steps? Did they work?. Does only the tutorial fail, nothing else?\nCan you try another machine/VM?. @leecow who can help troubleshoot Docker problems? This one seems general - maybe corrupted Docker install?. @glennc can you help with this one? (or help route it?). Is it ASP.NET Core deserialization or .NET Core deserialization? cc @tarekgh . Thanks! I actually changed it to Community-support, which IMO better captures the real status.\nI also did minor text tweaks, can you please check them Dan? Thanks!. Nit: on the supported distros -> in the suppoted distros. libcrypto.so lost the \".{version}\" suffix. Was that intentional?. I intentionally left 2.0 as it is now - we need to move it into 2.0 release-notes. And I've heard @richlander plans major surgery on the table.. Can we add ask to:\n1. Make membership public information (they will show as badges on your profile).\n2. Make sure either GH name matches GAL name, or make your MS email public -- motivation: other MS employees can recognize you & find you internally if they need to follow up.\n3. Add picture (showing face to community for better communication).. Let's reword it to \"Use 2+ core machines, or use older HttpClientHandler (as described in Preview 2 blog post)\". Nit: \"The CURL libraries need~s~\". Fixed in 36ebc6348cc2fbba37d1f56847e07bb3de34c4eb. The sample README says 2.1 or higher (twice) - maybe it is ok to leave it at 2.1? Shouldn't it build just fine even if only 2.2 is installed?. ",
    "nattress": "There's no merge button. I don't think I have access?\n. @Petermarcu Not on Github. corefx would probably be a good place for this question.\n@albertofustinoni Span<T> support was only recently added for UWP apps. It is unfortunately not available pre-16299 so if you want to keep 15063, you'll be unable to use Span<T>. You'd have to roll forward to version 6.1.5 of the Microsoft.NETCore.UniversalWindowsPlatform package in your app project.. @albertofustinoni Unfortunately a feature like Span is not just implemented in the library layer. It requires runtime support. In UWP debug mode, the CoreCLR runtime is used to run your app. It has Span support. When you deploy your app in release mode, the .NET Native ahead-of-time (AOT) compiler is used. This compiler had Span support added later than CoreCLR. As a result the newer version is needed.. ",
    "ghost": ".net doesn't support multiple inheritance to avoid the \"deadly diamond of death\". Use interfaces.\n. Additional Information:\nOS: Windows 10 Pro\nVisual C++ Redistributable for Visual Studio 2015 is installed\n. @saurabh500 , thank you for the quick reply. You are spot on with the cause of the issue. Default installation path is C:\\Program Files\\dotnet, a reinstall to C:\\dotnet and dotnet restore works as expected.\nThank you!\n. I run the dotnet build and restore and then copy the directory by using the copy command in Dockerfile. The technique works flawlessly. \n. test ci please. CI test is passing, going to hold off on one more thing - I only want the CI to run when modifying dotnet.bootstrap.py\n. @tmds Fantastic feedback! Thank you! \n\n\"The tool does not take care of dependencies\" - True, this was snipped off (too many instances out there where dependencies can't just be 'guaranteed' which makes the feature useless except for cases that are 'well known', but in the well known instances we are less likely to need this. If really in a bind for dependencies, review the docker containers in base/lab/containers that has the apt-get, yum, zypper, dnf, etc. commands to pull in packages. @gkhanna79 (Relevant to you).\n\"The script files which are created to debug a failing build step miss the execute flag\" - Will fix. \n\"It downloaded the CLI again...\" - Will fix.\n\"What is no patch?\" - This is an experimental feature that probably does not need to exist any longer (i.e. I'll remove it after a bit more review). \n\n\"How does the tool choose?\" - At the moment it does no choosing - we simply grab the latest debian dotnet bits, then we grab specific checkout commits and build, patch, run. In the future we will take the version number/commit hash from the binary and build only those pieces (in other words, whatever binary versions you provide (via -payload; or whatever we download) we will reproduce for the selected platform). \n\n\nGiven your story the DevMode makes me think this has caused a headache having this distinction. I too think DevMode should be 'default' now - or at least removed. I also like your idea of 'bootstrap --continue' - probably going to steal that ;)\n\n\nAgain, thank you for sharing your experience with using this tool! \n. @ellismg Accident. I will fix this up and close it up now actually. . @tmds Oops, I do actually have the check for chmod +x on the repro scripts. If you run the script in sudo mode this is the only time I will set the X bit on the repro script.. test ci please. test ci please\n. test ci please\n. test this please\n. @am11 @richlander Thanks! I'll see if this works for me, and then update the script. Little optimizations/improvements like this are nice. . Just realized it's because the download is bringing in the x64 instead of the x86 installer.. @Petermarcu, I hope this wasn't intentional that the announcement failed to answer one basic question: is ILLink an open source tech? If so where can I find the EXACT sources of package we are using?\nThe first line in announcement does note:\n\nThe .NET Core team has been working on a linker in collaboration with the Mono team. It is based on the Mono Linker project, and by extension, on the Cecil project.\n\nBut where are the sources of https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks package that the end consumer is using?. \u628a\u9519\u8bef\u5806\u6808\u8d34\u4e0a\u6765\uff0c\u8fd9\u6837\u624d\u80fd\u5b9a\u4f4d\u95ee\u9898. Will .NET Core 2.1 be available via Apline's native package repositories https://pkgs.alpinelinux.org/packages?. @Petermarcu, that will be great. It seems like the current approach for distro using dotnet/source-build is:\n\nfirst build tarball for your OS, this tarball will be bound to RID\nthen build .NET Core from this tarball\n\nTypically, this means we are building from git sources and tarball is not the starting point?\nIt would be nice if tarball itself is a single source of truth and the RID is configurable. This will increase the tarball size a bit, but it will match the convention:\n\ndownload and build dotnet-<version>.tar.xz with your RID\n\nthat's it, regardless of which operating system it is, BSD, Linux, Mac or Windows. If someone tries to build that tar on Solaris for example, then the build time will fail as it is not tested there yet (e.g. smartOS folk is not very Clang-savvy yet, GCC is still the most trustworthy compiler in many serious unices).\nThe hard part will be to put all combinations of those prebuild nuget packages (or the stage0 dotnet-cli, that have dependencies on native modules.. that would require to pack all combinations of all arch, os, libc kinds... So on Alpine, the tarball gets build without glibc dependency.. Glad to see that im not the only one getting confused, looking at https://github.com/dotnet/corefx/issues/25911, and other issues in dotnet/sdk and dotnet/cli and dotnet/core-setup.. i can say that it's not a good idea for folks who are stubborn for this versioning mess.\n\".NET Core 2.1 is going to be massive!\" someone said, \"scheduled to be released sometime in 2018 Q1\"\nbut lets check dotnet --version after updating VS2017 to 15.5 and we already have 2.1.2! Ah, lets check release notes in dotnet/core repo for v2.1.2 and find yourself confused, because it is too obvious that dotnet-version command is pure ... fubar!\ndotnet-core is the product here that everyone is getting familiar with and we should see version of that in the output of dotnet --version. For more information on nitty-gritty of every last tool installed with it, check dotnet --versions or dotnet --info (like VS about dialog).\nIn CLI repo, some people were considering it as a breaking changes for tools and humans, who are already relying on the console output of current releases. IMO this is a BUG that needs to be fixed as soon as possible, else there will always be some guy or gal asking these wtf-questions..\n@karelz, @richlander, @danmosemsft, hopefully this comment, this thread and dozens of other issues in the said repos and Twitter and the internet will clarify the confusion caused by the output of dotnet --version command. If you guys still think it makes perfect sense, lets open a public poll and count who else is not confused. :)\nPlease reconsider and together love this product called .NET Core!. Thanks that answers the question.\n. You can vote up this issue https://github.com/dotnet/coreclr/issues/969. I asked the mips-linux channel over at IRC for someone familiar with assembly instructions to help providing bit for MIPS based on https://github.com/dotnet/coreclr/tree/master/src/vm, but couldn't find volunteers.\nmono/java/node.js/go/ruby/lua/python and other runtimes work on mips.... @Petermarcu, sure the same way there are fallback lookup paths for dependency lib names in glibc-based distros. Those fallback paths in core-setup/coreclr/corefx repos can even be added later.\nHowever, with alpine hardcoded in RID name without a base RID with musl-libc is not neutral. Before 2.1 if this gets renamed to *musl-libc* that would be a great achievement in terms of future proofing, otherwise we are going to stick with alpine-* forever or encounter a breaking change when it's time to support the second musl-libc distro.. @Petermarcu https://github.com/dotnet/dotnet-core-website repo is not publicly accessible (try in in-private browsing) :(. Does changing the dropdown value to Ubuntu shows apt-get? I am keep seeing yum install both on FF and Edge on Windows 10.. something is wrong with my system.. F12 tool in firefox is showing an error in console:\n\nReferenceError: initOs is not defined[Learn More]\nget-started.min.js:1:1055. I can see ;$(window).on(\"popstate\",\"\",this,this.navHandler);this.updateNav(initOs)}n.prototype.navHandler=function(n).. Thanks @rowanmiller, it works! \ud83c\udf79 . You can chime in https://github.com/dotnet/coreclr/issues/9265. Basically it compiles and all runtime tests are passing. Some packaging stuff is left I think, which someone can push forward to bring it home.. @markusschaber I know that you mean, but i tried both using a 32bit and a 64bit for c++ and dotnet, and yes a already noticed that dotnet tends to totaly ignore if you set the assembly in vs to 32 bit. \n",
    "moozzyk": "Try building using Mono and not CoreClr.\n. Yeah, you can't build for mono/dnx451 with CoreClr.\n. export DNX_TRACE=1 to see what is happening. Most likely you don't have libicu or the one you have is no the one coreclr was linked against.\n. One thing to add - we have not tested dnx on SuSe and SuSe is not officially supported so if things work it's great but they may not work.\n. The error you get you are missing libicu. See https://github.com/aspnet/dnx/issues/3059 for more details.\n. Are you sure you have libcurl and libssl installed (as per https://docs.asp.net/en/latest/getting-started/installing-on-linux.html)?\n For restore you can use the -s <FEED> parameter to use a specific feed. You can use multiple -s if you want to restore from multiple feeds. I guess you could just create a NuGet.config file if it is missing. \nYou can also use dnu feeds list to see what the effective feeds for you project are. \n. You seem to be hitting this: https://github.com/aspnet/dnvm/issues/301. I think the runtime was actually installed despite the error but native images were not generated. Either try installing without ntive images or move to Powershell 3 or later.\n. ",
    "joshpearce": "Using Mono results in successful dependency resolution and building. Thanks!\n. ",
    "condemil": "I have completely the same issue with 1.0.0-rc1-final-coreclr docker image\n```\nroot@30c3fc651aaa:/app# dnu list\nMicrosoft .NET Development Utility CoreClr-x64-1.0.0-rc1-16202\nListing dependencies for app (/app/project.json)\n[Target framework DNX,Version=v4.5.1 (dnx451)]\nFramework references:\n  fx/Microsoft.CSharp  - Unresolved\n  fx/System  - Unresolved\n  fx/System.Core  - Unresolved\n  fx/mscorlib  - Unresolved\n``\n. I removeddnx451framework fromproject.jsonfile. After thatdnu restoreprocess completed successfully oncoreclr` docker image.\n. ",
    "StefanKert": "You need to replace the dependencies section of the given project.json file with following json:\n\"dependencies\": { \n    \"System.Console\": \"4.0.0-beta-*\", \n    \"System.IO\": \"4.0.10-beta-*\",\n    \"System.Runtime\": \"4.0.21-beta-*\" \n}\nSystem.Console depends on System.IO so you need to get this package to get it running. Same problem exists for Windows and for Linux. I tested this on a Windows machine and it worked for me. \nThere is another workaround that should checkout the dependencies correctly \n\"dependencies\": { \n    \"System.Console\": \"4.0.0-beta-23019\", \n    \"System.Runtime\": \"4.0.21-beta-*\" \n}\nIf you add a specific version number to the System.Console package it loads all depenencies for the Console package recursivly. If you use the wildcard for the version it checks out the newest version available. Maybe you have enabled to checkout Prerealesed packages? For the example in the Getting Started chapter this package is loaded: \nhttps://www.nuget.org/packages/System.Console/4.0.0-beta-23516\nMaybe someone else can provide you with more information on this new package and why it doesn\u00b4t restore the needed depenencies.\nAnyway I guess you are good to go with one of the two solutions I provided. Maybe this should be changed on the Getting Started package, because I guess many people run into this problem.\n. Hey there,\nbecause of this line in your error message: \nMicrosoft.NETCore.Runtime.CoreCLR 1.0.1-beta-23516 expected System.IO 4.0.11-beta-23516 but got 4.0.10-beta-23109\nI expect you have some troubles with conflicting references between the packages. I have no opportunity to test this on a Mac OSx, but I testet it on Win 10 and it worked fine.\nIf you use this dependencies it should work for you:\n\"dependencies\": { \n    \"System.Console\": \"4.0.0-beta-*\", \n    \"System.IO\": \"4.0.11-beta-*\", \n    \"System.Runtime\": \"4.0.21-beta-*\" \n}, \n\"frameworks\": { \"dnxcore50\": { } }\nJust replacing the System.IO 4.0.10 package with the 4.0.11 package should fix the problem.\n. Of course. Please close.\n. ",
    "hunter-xue": "Many thanks for your reply. Ubuntu 14.04 LTS is working well with upon settings, but still get the same error on MAC OSX EI Capitan 10.11.1\nI guess maybe there are something wrong with nuget, but I don't know what happened. \n[project.json on MAC OSX]\n\"dependencies\": { \n    \"System.Console\": \"4.0.0-beta-\", \n    \"System.IO\": \"4.0.10-beta-\",\n    \"System.Runtime\": \"4.0.21-beta-*\" \n}\n[Error msg]\n/Users/xuehaitao/Coding/dnx/p03/project.json(9,22): warning NU1012: Dependency conflict. Microsoft.NETCore.Runtime.CoreCLR 1.0.1-beta-23516 expected System.IO 4.0.11-beta-23516 but got 4.0.10-beta-23109\n/Users/xuehaitao/Coding/dnx/p03/project.json(9,22): warning NU1012: Dependency conflict. Microsoft.NETCore.Runtime.Native 1.0.1-beta-23516 expected System.IO 4.0.11-beta-23516 but got 4.0.10-beta-23109\nUnhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'System.Console, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\n[project.json on MAC OSX]\n\"dependencies\": {\n        \"System.Console\": \"4.0.0-beta-23019\", \n        \"System.Runtime\": \"4.0.21-beta-*\" \n    },\n[Error msg]\nUnhandled Exception: System.DllNotFoundException: Unable to load DLL 'api-ms-win-core-processenvironment-l1-1-0.dll': The specified module could not be found.\n (Exception from HRESULT: 0x8007007E)\n   at Interop.mincore.GetStdHandle(Int32 nStdHandle)\n   at System.Console.<>c__DisplayClass0.b__3()\n   at System.Console.EnsureInitializedT\n   at System.Console.WriteLine(String value)\n   at ConsoleApplication.Program.Main(String[] args)\n. Looks like we run into a compatibility issue on MAC OS 10.11.1\n. I ran into the same issue: \nUnhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'System.Console, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\n. ",
    "dlech": "I came across this issue because I am getting the same errors on OSX 10.11.\nOne difference I noticed between \"System.Console\": \"4.0.0-beta-23019\" and later versions are that the later versions are missing lib/DNXCore50/*. Also beta-23019 has ref/dotnet/ whereas the later versions have ref/dotnet5.1.\n. I'm still getting an error with those dependecies and dnxcore50.\n```\ngerda:dotnet-hello david$ dotnet restore\nMicrosoft .NET Development Utility CoreClr-x64-1.0.0-rc1-16048\nCACHE https://www.nuget.org/api/v2/\n  CACHE https://api.nuget.org/v3/index.json\nRestoring packages for /Users/david/work/dotnet-hello/project.json\n  GET https://www.nuget.org/api/v2/FindPackagesById()?id='System.Console'\n  GET https://api.nuget.org/v3-flatcontainer/system.console/index.json\n  GET https://www.nuget.org/api/v2/FindPackagesById()?id='System.IO'\n  GET https://api.nuget.org/v3-flatcontainer/system.io/index.json\n  GET https://www.nuget.org/api/v2/FindPackagesById()?id='System.Runtime'\n  GET https://api.nuget.org/v3-flatcontainer/system.runtime/index.json\n  OK https://api.nuget.org/v3-flatcontainer/system.io/index.json 916ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?id='System.Console' 1091ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?id='System.Runtime' 915ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?id='System.IO' 917ms\n  OK https://api.nuget.org/v3-flatcontainer/system.runtime/index.json 922ms\n  OK https://api.nuget.org/v3-flatcontainer/system.console/index.json 966ms\nWriting lock file /Users/david/work/dotnet-hello/project.lock.json\nRestore complete, 1835ms elapsed\nNuGet Config files used:\n    /Users/david/.config/NuGet/nuget.config\nFeeds used:\n    https://www.nuget.org/api/v2/\n    https://api.nuget.org/v3-flatcontainer/\n    /Users/david/work/xdg-base-directory\ngerda:dotnet-hello david$ dotnet run\nUnhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'System.Console, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\n```\nIs there a way to turn on more verbose output, like DNX_TRACE=1 in ASP.NET 5?\n. ",
    "jgowdy": "I have this exact same issue on Ubuntu.  The version of System.IO seems to be bumped to 4.0.11, which breaks the dotnet init sample project.json, but even when I fix that, it gives me:\nUnhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'System.Console, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\n. I originally tried with the \"dotnet init\" version which seems to still be the old one pointed to 4.0.10-beta-*.  Then I modified to have the 4.0.11-beta-23516 version for System.IO, which got me past that problem, but I'm stuck at the Could not load file or assembly issue.\ndnx run works, despite the fact that dotnet run doesn't work, and dotnet compile generates an executable that throws the same error as dotnet run.\n. ",
    "pjustino": "Hi,\nI'm also having problems with the dotnet restore on ubuntu.14.04-x64.\nThe error is the following:\ninfo : Installing System.IO 4.0.11-beta-23516.\nerror: System.Console 4.0.0-beta-23516 provides a compile-time reference assembly for System.Console on DNXCore,Version=v5.0, but there is no run-time assembly compatible with ubuntu.14.04-x64.\nerror: System.Text.Encoding 4.0.0 provides a compile-time reference assembly for System.Text.Encoding on DNXCore,Version=v5.0, but there is no run-time assembly compatible with ubuntu.14.04-x64.\nerror: System.Threading.Tasks 4.0.0 provides a compile-time reference assembly for System.Threading.Tasks on DNXCore,Version=v5.0, but there is no run-time assembly compatible with ubuntu.14.04-x64.\nerror: Some packages are not compatible with DNXCore,Version=v5.0 (ubuntu.14.04-x64).\ninfo : Committing restore...\nMy project.json is this one:\n{\n    \"version\": \"1.0.0-*\",\n    \"compilationOptions\": {\n        \"emitEntryPoint\": true\n    },\n```\n\"dependencies\": {\n\"System.Console\": \"4.0.0-beta-\", \n\"System.IO\": \"4.0.11-beta-\",\n\"System.Runtime\": \"4.0.21-beta-*\" \n},\n\"frameworks\": {\n    \"dnxcore50\": { }\n}\n```\n}\n. Hi @brthor ,\nThanks for the help. I created a new sample with the project.json provided and I still got an error restoring the packages:\nwarn : Dependency specified was NETStandard.Library (>= 1.0.0-rc2-23727) but ended up with NETStandard.Library 1.0.0-rc3-23720.\nwarn : Dependency specified was NETStandard.Library (>= 1.0.0-rc2-23727) but ended up with NETStandard.Library 1.0.0-rc3-23720.\nerror: System.Security.Principal.Windows 4.0.0-rc3-23720 provides a compile-time reference assembly for System.Security.Principal.Windows on DNXCore,Version=v5.0, but there is no run-time assembly compatible with ubuntu.14.04-x64.\nerror: Some packages are not compatible with DNXCore,Version=v5.0 (ubuntu.14.04-x64).\ninfo : Committing restore...\nproject.json file:\n{\n    \"version\": \"1.0.0-*\",\n    \"compilationOptions\": {\n        \"emitEntryPoint\": true\n    },\n```\n\"dependencies\": {\n    \"NETStandard.Library\": \"1.0.0-rc2-23727\"\n},\n\"frameworks\": {\n    \"dnxcore50\": { }\n}\n```\n}\n. It restored the dependencies with success, but when I tried to run (dotnet run) it gave me the following error:\nCould not resolve coreclr path\nHere is my nuget.config file:\n\ufeff<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <!--To inherit the global NuGet package sources remove the <clear/> line below -->\n    <clear />\n    <add key=\"dotnet-core\" value=\"https://www.myget.org/F/dotnet-core/api/v3/index.json\" />\n    <add key=\"api.nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n</configuration>\n. with the command:\nsudo apt-get install dotnet-nightly\n. Hi @blackdwarf  it worked.\n@brthor  the version I have installed is:\ndotnet-nightly:\n  Installed: 1.0.1.001172-1\n  Candidate: 1.0.1.001174-1\nThanks for the help\n. @brthor   the sim link is not set properly is a regular folder\n@blackdwarf  now it gives an error retrieving the deb package:\nErr http://apt-mo.trafficmanager.net/repos/dotnet/ trusty/main dotnet-nightly amd64 1.0.1.001174-1\n  404  Not Found\nE: Falhou obter http://apt-mo.trafficmanager.net/repos/dotnet/pool/main/d/dotnet-nightly/dotnet-nightly_1.0.1.001174-1_amd64.deb  404  Not Found\nIs the package still building?\n. @brthor  My distro is:  Linux Mint 17 Qiana\n. @brthor  I finally managed to get the package. \nI solved by creating myself the symbolic link with this command:\nsudo ln -s /usr/share/dotnet-nightly/ dotnet\nThanks for your help, it helped alot.\nCheers\n. ",
    "brthor": "@pjustino Please try using the project.json provided by dotnet new\nThose dependencies are very old\n. @pjustino Can you give this a try:\ndotnet restore -f https://myget.org/f/dotnet-core-rel\nI think this may resolve your issue.\n. @pjustino How did you install the cli?\n. Just gave this a try on the latest version and was not able to repro.\nIf you do apt-cache policy dotnet-nightly which version do you have installed?\n. @blackdwarf there is a symlink in place /usr/share/dotnet -> /usr/share/dotnet-nightly in the latest version which should not require that environment variable to be set.\n. What version of Ubuntu are you on?\n. The package is syncing across mirrors in that 404. I am working on getting this issue fixed.\nWe don't currently support Linux Mint. For the moment the DOTNET_HOME workaround is the way to go. I'll have to take a look at this later.\nFor the package, you can keep trying or install a previous version like\nsudo apt-get install dotnet-nightly=1.0.1.001172-1\n. @jonstoneman try changing packOptions to publishOptions \nLike this:\n\"publishOptions\": {\n  \"files\": {\n    \"mappings\": {\n      \"/\": \"libextern.dylib\"\n    }\n  }\nNot entirely sure this will work but packOptions seems wrong.\nAfter doing this do a dotnet publish and take a look at the output directory to see if the .dylib file was binplaced correctly.\n@cartermp The documentation @jonstoneman is referencing appears incorrect for project.jsons attempting to reference a native dll. \n. @cartermp Specifically\nFor the first option, you'll need to include the following in your project.json file:+  \n1.Setting allowUnsafe to true in a buildOptions section.\n2.Specifying the path to the native .dll(s) with a Runtime Identifier (RID) under files in the packOptions section.\nShould packOptions here be perhaps buildOptions or publishOptions\n@jonstoneman There is some additional info for these option types in the original announcement here:\nhttps://github.com/aspnet/Announcements/issues/175\n. @jonstoneman I didn't realize this was a library project.\nI think you are hitting this issue: https://github.com/dotnet/cli/issues/2902\nTo make this work you'll need to do a dotnet pack on that library (also going back to packOptions in your project.json). Then target the output nupkg with the consuming app rather than the project.\nYou can do this by using dotnet restore -f C:\\Directory\\Where\\The\\Nupkg\\Sits where -f adds a source to the restore call, so the nupkg can be picked up from a local directory.\nFor packOptions you'll want the original string that you had:\n\"buildOptions\": {\n  \"allowUnsafe\": true\n},\n\"packOptions\": {\n  \"files\": {\n    \"mappings\": {\n      \"runtimes/osx/native/\": \"libextern.dylib\"\n    }\n  }\n}\nLet me know if this works out.\n. Unfortunately due to the linked bug above I don't believe this will currently work for P2P references. \nan alternative to doing this, each time you update your library project:\nrm -rf ~/.nuget/packages/MyLibrary\ndotnet pack ../src/MyLibrary\ndotnet restore -f ../src/MyLibrary/bin/Debug\nis to version your library higher with each change, by putting this in your library project.json : \"version\": \"1.0.0-*\"\nThen using dotnet pack --version-suffix 000X ../src/MyLibrary where X increases with each change. \nFor the cli we use the commit count of the repo to keep versions increasing.\n. should these be from rel/1.0.0 branch for cli?\n. good catch\n. @leecow We did not mean to imply that this list should move, rather that the commits from the master branch do not reflect the same commits as went into the rc2 release. Our equivalent of master is rel/1.0.0 and the commits live in the release are in the rel/1.0.0-preview1 branch.\n. I believe rel/1.0.0 has been merged back to master since 3/21, so that would make sense although I'd expect to see some extra commits from the dotnet native folks.\nWith dates set up to today, the diff is only two commits\nhttps://github.com/dotnet/cli/compare/rel/1.0.0...rel/1.0.0-preview1\n. ",
    "svick": "I think this old PR should be closed, the helloworld sample is currently up to date for RC2.\n. @StefanKert I can't, I'm just a random passerby. You can close it yourself, or someone from MS can.\n. @mattcdavis1 See Runtime Identifier catalog in the documentation.\n. @mattcdavis1 Based on this article, you also need to remove the \"type\": \"platform\" line from your project.json.\n. @jaxspades It should be: <RuntimeIdentifier>win7-x64</RuntimeIdentifier>.. @swaletzko You shouldn't be using dnx461 anymore, use net461 instead.\n. @axtens I think that means you have the directory C:\\Users\\Bruce\\Documents\\Projects\\Work\\Resources\\packages configured as package source in your C:\\Users\\Bruce\\AppData\\Roaming\\NuGet\\NuGet.Config, but that directory does not exist.\nEither remove or disable that source (by manually editing NuGet.Config or from VS) or create that directory.\n. @blackdwarf Yes, it still behaves exactly the same: Debugger Type: Auto does not seem to recognize that the application is using .Net Core.\n. Added some more information, and split into https://github.com/dotnet/coreclr/issues/6380 and https://github.com/dotnet/coreclr/issues/6381.\n. I'm assuming you're talking about ASP.NET Core Logging.\nIn that case, I believe this behavior is correct. The format string is not standard .Net format string (which is used e.g. in string.Format or Console.WriteLine). It's a custom string format, where you're supposed to name the values you're logging. For example:\nc#\nlogger.LogInformation(\"{a} test {b}\", \"a\", \"b\");\nSo, what your code does is to confusingly name the first logged value 1 and the second 0.\n. Naming the values is not for reordering, it's for recording the names in advanced loggers.\n. If you want to propose adding new API to .Net Core, I believe you should follow the API Review Process by posting this to the corefx repo.\n. I believe the package name for libunwind is libunwind8.\n. That's the same error as https://github.com/dotnet/cli/issues/3197: it fails, because there are no binaries for ARM.\nI think if you want to use .Net Core on that machine, you will need to build and publish your code on another machine and then copy it to the Pi.\n. Both links work for me, though the first one is now just a redirect to the second one. Where should the first link point? To https://docs.microsoft.com/en-us/dotnet/articles/core/index? Or https://www.microsoft.com/net/core/platform?\n. The only supported version of Debian is 8.2, so the error might be caused by that.\n. According to https://github.com/dotnet/cli/issues/1161, this happens when you don't have openssl installed. Did you follow the guide, especially the \"Install pre-requisites\" step?\n. There's already a discussion about this here: https://github.com/dotnet/cli/issues/3093.\n. @gguimaraesbr Yeah, I think there is no reason to have two separate issues.\n. VS includes the \"Add Package\" code fix. So, if you have some code that uses a type from a package that's not referenced, activate the code fix (start using Ctrl+. or clicking the light bulb), restore packages and your code should work.\nAs an alternative, you could also use https://packagesearch.azurewebsites.net/.\n. Sorry, somehow I missed that part.\n. I can't reproduce this. When I try to run your code, the only errors I get are:\n\nProgram.cs(48,2): error CS0246: The type or namespace name 'HandleProcessCorruptedStateExceptionsAttribute' could not be found (are you missing a using directive or an assembly reference?)\nProgram.cs(48,2): error CS0246: The type or namespace name 'HandleProcessCorruptedStateExceptions' could not be found (are you missing a using directive or an assembly reference?)\n\nThese errors seem valid, since that attribute does not seem to be exposed in .Net Core.\n. Ok, after doing that, I get the same errors as you do. Some of those errors can be fixed by adding \"System.Security.Cryptography.Csp\": \"4.0.0\" as a dependency. But it seems RijndaelManaged and RSACryptoServiceProvider.FromXmlString do not exist in .Net Core, so your code won't run under .Net Core 1.0.\n. Array.ConvertAll converts one array into another by invoking a delegate on each member.\nYou can achieve the same result by using LINQ: source.Select(converter).ToArray().\n. The roadmap says that among features planned for 1.1 is:\n\nTransition to MSBuild and csproj as the default build system and project model for all versions of .NET. \n. If you run dotnet help build, you'll notice that it has a parameter that specifies configuration. You can use the default configuration called release to enable optimizations: dotnet build -c release.\n. Does your application work locally?\n. Note: I didn't use dotnet run at first, because that encounters a a different bug. But the workaround for that (use dotnet run -c Release) throws the same DllNotFoundException as above.\n. @blackdwarf Done: https://github.com/dotnet/cli/issues/3939.\n. I believe the problem is that the only supported version of OpenSUSE is 13.2.\n. AddJsonFile is in the aspnet/Configuration repository. I think you should report this issue there and close it here.\n. Could you describe what did you do and how did it fail?\n. Using \"imports\" lets you specify that something is compatible, even when it's not. And this is exactly what happens: net451 is not compatible with .Net Core, you can't use a .Net Framework 4.5.1 library from a .Net Core application.\n. @narenkv That question is using ASP.NET Core and .Net Core CLI (the dotnet command), but the application is targeting .Net Framework, not .Net Core. You can use .Net Framework libraries from such application. (Yes, it's confusing.)\n. If it's a portable application, using dotnet publish and then running it with dotnet yourapp.dll should just work.\n\nIf it's a self-contained application, with the right runtime specified, then using dotnet publish, and running ./yourapp should also just work.\nIf you encountered a problem, could you describe what exactly did you do (including your project.json) and how exactly did it fail?\n. As far as I know, the new URL is https://www.microsoft.com/net/core, so I created a PR to fix this: https://github.com/dotnet/core-setup/pull/226.\n. The issue is that nunit.framework declares System.SerializableAttribute. I think you will have to ask NUnit to stop doing that, at least for the future released version of netstandard that will contain SerializableAttribute. What you're using is a pre-release version of System.Runtime.Serialization.Formatters, I don't think NUnit should be made to depend on that.\n. Yes, .Net Core certainly supports extension methods. And the code from the article works for me just fine in .Net Core.\nIf you want help with the failure, you will have to explain:\n1. What exactly did you do?\n2. How exactly did it not work?\n. C++/CX is targeted at the (Windows-specific) WinRT, it's not a general language usable with native libraries, so I don't think it makes much sense for .Net Core.\nC++/CLI is not specific to WinRT, so it could make more sense; there's already a discussion about it at the CoreCLR repo: https://github.com/dotnet/coreclr/issues/659.\n. @webprofusion-chrisc How does your project.json look like?\n. This information is in the Releases tab of each project, which then links you to a git tag:\n- The summary is in this repository\n- The version of coreclr used is .Net Core 1.0.1 is 1.0.4\n- corefx didn't seem to change in .Net Core 1.0.1, so version 1.0.0 is the one you want\n. It's the same for all OSes: .Net Core SDK is currently at version \"1.0.0 Preview 2 (build 003131)\", while .Net Core itself is at version 1.0.1. The reason why the SDK is still called \"preview\" is because significant changes are planned for it for the near future (namely, switching from project.json to msbuild).\n. It's usually hard to figure out what the issue is just from a stack trace. Could you provide code that reproduces this?\n. @yoyoys Based on the stack trace, your issue doesn't seem to be related to the one reported here. And since the stack trace points to ASP.NET MVC, I think you should report it on the aspnet/Mvc repo, ideally after checking it's not your code that throws the exception. You should probably also include your code, since it could be relevant, and post your project file as code, not an image.. This is a duplicate of https://github.com/dotnet/core/pull/343.\n. There are already two PRs to fix that: https://github.com/dotnet/core/pull/343 and https://github.com/dotnet/core/pull/350.\n. This is a duplicate of https://github.com/dotnet/core/pull/343 and https://github.com/dotnet/core/pull/350.\n. Can you post your project file?. The sample projects use project.json. It looks like you're on SDK preview3 (or newer), which switched to msbuild. To build and run those projects with your version of the SDK, you first need to run dotnet migrate.\nThe instructions could probably mention this.. The error message is correct: MySql.Data 6.9.9 is indeed not compatible with netstandard1.4.\nThere seems to be a prerelease version of the package available: MySql.Data 7.0.6-IR31, but it only supports netstandard1.6.\nSo, if you want to use that library in your netstandard library, you will have to:\n\nupgrade the MySql.Data library to the prerelease version\nchange your library to target netstandard1.6 instead of netstandard1.4. What kind of password change are you talking about? How are you running the tests?. Minimum memory requirement of what? Building .Net Core (corefx, coreclr, cli, sdk, ...)? Building your own simple console or ASP.NET Core application? Running your own simple console or ASP.NET Core application?. There already is a PR to fix those versions: https://github.com/dotnet/core/pull/408.. This is a duplicate of https://github.com/dotnet/core/pull/399 and https://github.com/dotnet/core/pull/401.. Yes, .Net Core does not have any support for WCF servers. There is already a discussion about this on the WCF repo: https://github.com/dotnet/wcf/issues/1200.. @Korporal \n\n\nthe compiler seems to consume source files ordered by their file name spelling\n\nI don't think that's true. I created a partial type C, declaring method A in A.cs and method B in B.cs, and put this code into Main:\nc#\nforeach (var method in typeof(C).GetMethods(DeclaredOnly | Public | Instance))\n{\n    Console.WriteLine($\"{method.MetadataToken:X} {method.Name}\");\n}\nThen I ran csc on it, specifying the two files in different order and got:\n```\nPS C:\\code\\tmp\\coreapp> csc .\\Program.cs .\\A.cs .\\B.cs\nMicrosoft (R) Visual C# Compiler version 1.3.1.60616\nCopyright (C) Microsoft Corporation. All rights reserved.\nPS C:\\code\\tmp\\coreapp> .\\Program.exe\n6000003 A\n6000004 B\nPS C:\\code\\tmp\\coreapp> csc .\\Program.cs .\\B.cs .\\A.cs\nMicrosoft (R) Visual C# Compiler version 1.3.1.60616\nCopyright (C) Microsoft Corporation. All rights reserved.\nPS C:\\code\\tmp\\coreapp> .\\Program.exe\n6000003 B\n6000004 A\n```\n(And I got the same result from version 2.3.0.61703 of csc.)\nSo it looks like it depends on the order the files are specified to the compiler, not on file names. (Tools like VS or dotnet might decide to order the files by name, but I don't think that's relevant here.). You should be able to install multiple versions of the SDK side-by-side.\nTo choose which one is used, create a global.json file in the current directory with the sdk property set.. I think you're talking about the same issue as https://github.com/dotnet/core/issues/505, right? In that case, this issue should probably be closed as duplicate.. Could you enclose your code in triple backticks (```), so that is shows here correctly?. Sorry, I primarily meant the csproj code, since that's not readable right now.. @bleroy In my opinion, the main advantage of having a separate repo for announcements is that you can watch it, and you will get email notifications for announcements and only announcements. Since GitHub does not let you watch a tag, that would not work as well if announcements were added to an existing repo.\nThis repo has fairly low volume, so maybe it wouldn't be that bad. But it's still likely going to be unnecessary noise for most.\nBTW, the aspnet org on GitHub has more repos than dotnet (including aspnet/Announcements). Maybe that means having more repos is not a big issue?. > How easy life can be when you just have to say we need .NET 4.6.2 or 4.5.1 etc, compared to this versioning nightmare.\nWith .Net Framework, you use Visual Studio 2017, MSBuild 15 and C# 7 to develop and build your applications and .Net Framework 4.7 to run them. With .Net Core, you use Visual Studio 2017, MSBuild 15, C# 7 and .Net Core SDK 1.0 to develop and build your applications and .Net Core 1.1 to run them. It is more complicated and the naming can be confusing (since it's easy to overlook the \"SDK\" part), but I'm not sure it's as bad as you make it sound.\n\nthey would expect the Visual Studio or other IDE to do the heavy lifting and abstract the complexity, so they can focus on solving the business problems and delivering their tasks\n\nDo you have any specific suggestions for how the tooling can be improved?\n\nThere is not much business value addition in spending tons of hours understanding these internals, which seem to be so fluid currently.\n\nThere were huge changes in the past (dnx \u2192 dotnet, project.json \u2192 csproj), but as far as I know, the only somewhat big change that's coming is .Net Standard 2.0. So I wouldn't exactly call it \"fluid\".\nAnd if you really need \"tons of hours\" to understand that .Net Core and .Net Core SDK are distinct and versioned separately, then I think something is very wrong. (Maybe it's the documentation?). @stanuku \n\nWith all the churn happening since the past year and half or so, it delays that adoption even further.\n\n.Net Core SDK 1.0 was released this February. I don't think it's fair to complain about churn before that.\n\nAre there any more improvements or enhancements planned after EF 6.3? If EF core is the future then .NET Core is the only way to go. I know there is a promise of .NET Standard 2.0. I really hope it lives up to the hype and expectations.\n\nI don't know anything about future plans for EF or EF Core. But even if EF Core is the future, then you can still stay on .Net Framework, since EF Core is a .Net Standard library and .Net Framework does support .Net Standard. (And that's not something that's new with .Net Standard 2.0.)\n\nIs there an incentive or compelling reason for them to migrate now or in next one year?\n\nIf any of the unique features of .Net Core (not just it being cross-platform, but also e.g. different deployment strategies) do not appeal enough to you, then you should not migrate, possibly ever. Even the documentation recommends not to migrate existing .Net Framework applications.\n\nShouldn't it be left to their IDE to figure out based on one target version that he or she picks from the list? \n\nIsn't it like that already? If you install .Net Core tooling for VS from the VS installer, you don't have to care about any .Net Core SDK version, no?\nThe VS-specific section of the .Net Core getting started page also does not mention any SDK versions.. > did MS have .NET Standard 2.0 in mind all the way?\nAs far as I know, they didn't. It came from the acquisition of Xamarin and their realization that the best way to support .Net Framework, .Net Core and Xamarin/Mono all at the same time was to expand .Net Standard.\n\nfor a brief period just before the BUILD 2017, there was confusion on .NET Core 2.0 not supporting .NET Standard 2.0. The big guns at MS had to do the damage control later and clear the confusion. I suspect they must have debated about it internally and retracted based on the feedback\n\nTo clarify, the confusion was about ASP.NET Core 2.0 not supporting .Net Standard 2.0, and thus also not being able to run on .Net Framework.\n\nVS 2017 still doesn't show what versions I'm getting or targeting from the project creating dialogs. Although, I don't mind editing the project files and changing the TFMs and other details, not everyone would prefer to do that.\n\nYes, it doesn't. But you can change it from the project properties page, you don't have to edit the project file.\n\nI can't wait for it. But will watch cautiously. I had bore the brunt of early adaption in 2016 already.\n\nI'd say that in 2016, you were a very early adopter: i.e. not everything was even expected to work. In 2017, you're just an early adopter: everything should work, but the experience might not be quite polished yet. So waiting some more before switching to .Net Core sounds like a reasonable business decision to me. (Even if part of me wishes everyone would always work from master, not even wait for release, at least for the projects I'm currently most passionate about. \ud83d\ude42). Fixed by https://github.com/dotnet/core/pull/581.. I believe project.json is no longer supported. Is it possible for you to upgrade to csproj/VS2017?. Since this question is about ASP.NET Core and not .Net Core in general, I think you should ask it in aspnet/Home.. As far as I can tell, you can't. The package Microsoft.CrmSdk.CoreAssemblies only supports .Net Framework 4.5.2, but not .Net Core.. This is a duplicate of https://github.com/dotnet/core/pull/643.. That link works fine for me. Does it work for you now? If not, what exactly is the error you're getting?. As far as I can tell, https://github.com/dotnet/coreclr/pull/11944 intentionally removed that document, so I think that this link should be removed, not redirected to a branch that still has it.\ncc: @richlander . @Rovastar \n\nI am asking about .net core.\n\nI don't think you are. .Net Core does not know anything about IIS. ASP.NET Core does (see aspnet/AspNetCoreModule and aspnet/IISIntegration).\nI think this distinction is nothing new: .Net Framework also does not know anything about IIS, ASP.NET does.. The errors say that your machine failed to connect to several repositories. Are you sure the machine is properly connected to the internet?. Could you provide a short example code that reproduces the issue? What OS are you using? And what version of .Net Core?. > Could not locate the assembly Microsoft.AspNetCore.Authentication\nI think this could happen if you didn't run dotnet restore before building the project. How exactly are you deploying your project? And can you share your csproj file?. I think this is a bug in CoreRCON. It assumes that its TCPPacketReceived method will be called for every \"packet\". But TCP is a stream-based protocol, it does not really have packets (or rather, it uses packets only as an implementation detail), you can't assume that the buffer you receive contains exactly the information you want, not more or less, as is explained in the documentation:\n\nFor byte stream-style sockets, incoming data is placed into the buffer until the buffer is filled, the connection is closed, or the internally buffered data is exhausted.\n\nIf it seems to work reliably on Windows, then that's probably just luck.\nAnd CoreRCON is also the reason why the exception is uncatchable: it's thrown from TCPPacketReceived, which is the event handler for SocketAsyncEventArgs.Completed. As far as I know, if the handler throws an exception (and doesn't handle it itself), you can't catch it.. @TAGC I believe that's the version of nuget that comes from Debian Stretch repository, which is based on mono.\nI think nothing can be done about that in the Docker image, because it doesn't come from the Docker image, you installed it yourself.. If you successfully followed the installation instructions, then dotnet will be added to the PATH automatically, you shouldn't need to do anything else.\nWhat is the error you're getting? What instructions did you follow? Did you restart your command line? Which command line are you using?. What would be the advantage of making the library that contains app.xaml a .Net Standard library? I don't think you would be able to to use that app.xaml from e.g. an ASP.NET Core application, so I think making that library a .Net Framework library (not even a PCL) makes sense.\nOr am I missing something?. As far as I can tell, the reason for this is that predicate.GetType().GetGenericTypeDefinition() returns the internal type Expression1<T>, which inherits from Expression<T> and was introduced as an optimization in https://github.com/dotnet/corefx/pull/13133.\nI'm not sure what is the best way to correctly check that a Type is an Expression<T>.. You pasted two versions of GetMd5Hash: \n\nThe first one is the same as the one on MSDN (with data[i].ToString(\"x2\")) and gives the correct result (a29960f4bb180c4598c419ef7482386c, 32 characters).\nThe second one is different (with data[i].ToString(\"X\")) and indeed gives incorrect result (A29960F4BB18C4598C419EF7482386C, 31 characters).\n\nWas your intention to change the output to uppercase? In that case, you need data[i].ToString(\"X2\"), which returns A29960F4BB180C4598C419EF7482386C.. That should be the final version .Net Core 2.0 Preview 2. What makes you think it's not?\nThough I don't see any reason why you should use that version, the final version of .Net Core 2.0 should be better in every way.. Version is an MSBuild property, so you can specify it using the /p: syntax. E.g.:\ndotnet build /p:Version=1.0.123\nThough 1.0.1251923 is not a valid version.. SafeHandleMinusOneIsInvalid exists in .Net Core 2.0, but not in .Net Core 1.x. Can you upgrade to 2.0?\n\nAnd for code formatting use triple backticks. If you also want syntax highlighting, include the language name after the opening set. E.g.:\nmd\n```c#\nclass C { }\n```\nproduces:\nc#\nclass C { }. It looks like you installed the .Net Core runtime, but to use dotnet new, you need the .Net Core SDK, Did you find the error message unclear?. How do you expect Console.ReadLine() to work in a service? I would expect that services don't receive any input, so the Console.ReadLine() will return immediately, shutting down your application prematurely.\nCould you change your code so that it actually waits for the timer handler to finish?. Are you talking about lazy loading of database entities in Entity Framework Core 2.1? In that case, you might want to have a look at the EF Core roadmap and the related issue (https://github.com/aspnet/EntityFrameworkCore/issues/3797).. From .NET Core Supported OS Lifecycle Policy:\n\nWhen an OS version reaches end-of-life as defined by the OS owner, .NET Core will also cease to provide support for that OS version. Previously released packages will remain available for customers needing access but formal support and updates of any kind will no long be provided.\n\nI'm not sure what Apple's policy about supporting macOS 10.12 is, but Microsoft's policy about supporting .Net Core 2.0 on macOS 10.12 seems to depend on that.. The best documentation about this I could find is in this document (from https://github.com/dotnet/platform-compat/pull/46). Basically, TypeInfo now exists only for backwards compatibility, all new code should use Type.. As far as I know, Microsoft has no plans to bring WPF (or any similar UI framework) to .Net Core.\nThat means that if you want a XAML-based cross-platform UI framework for .Net Core, you will have to rely on third-party projects, like Avalonia.. One thing that I forgot: Xamarin.Forms does have plans to work on Linux and macOS, though it's not quite the same as a UI framework like WPF. This is expected. .Net Framework 4.6.1 behaves as if it supported .Net Standard 2.0 and it does support the vast majority of it, but not everything. Specifically, it does not support APIs that were added in .Net Standard 1.5 and 1.6.\nFor more details, see .NET Framework 4.6.1 supporting .NET Standard 2.0.\nAs for your specific case, Microsoft.Extensions.DependencyModel 2.0.4 has versions for .Net Framework 4.5.1, .Net Standard 1.3 and .Net Standard 1.6. How exactly are you distributing your application/library? Maybe there's a way to use the .Net Framework 4.5.1 version of Microsoft.Extensions.DependencyModel from your .Net Framework 4.6.2 host?. > eventually anyone wanting to combine netstandard + full framework with web will probably hit the wall here\nI don't think so, that's what the .Net Framework 4.5.1 version is for. I think you're in a special situation, where you're distributing a single DLL to multiple frameworks, so that doesn't help. But most people will be fine.\n\nWouldn't it make sense to have libraries with #ifs in runtime/, so the correct one will be resolved, based on framework at run-time, not at compile-time?\n\nI don't know, I'm not sure that would actually work. You might consider creating a new issue about that in the repo where that code lives: dotnet/core-setup.. Some of this is being changed for upcoming versions of .Net Core, see https://github.com/dotnet/designs/pull/29 and specifically this document.. In .Net Core 2.1, HttpStatusCode will contain 422, see https://github.com/dotnet/corefx/issues/4382 and the source code.\n. As far as I know, there is no plan to bring AppDomains to .Net Core. But unloading assemblies in the form of collectible assemblies is likely going to happen after .Net Core 2.1, see https://github.com/dotnet/coreclr/issues/552. Do you think that would work for you?. I believe what you're asking does not currently exist, but is planned (though it won't make it into .Net Core 2.1). See the issue https://github.com/dotnet/corefx/issues/17135 and the pull request https://github.com/dotnet/coreclr/pull/16409 (which is currently on hold).\nIn the meantime, you might be able to use the prototype implementation, which indeed uses LoadLibrary or dlopen, depending on the OS. Though you don't need conditional compilation to make that distinction, you can use RuntimeInformation.IsOSPlatform() at runtime for that. I think this is a duplicate of https://github.com/dotnet/core-setup/issues/2007.. @Moke-RS Just because you can't install it using apt doesn't mean you can't use it at all.\nWhat you can do is to download the tar.gz binaries, extract and use that.\nIt's possible you will need to install some packages or that you will encounter other issues (since it's not an officially supported OS), but at least the Hello World worked for me.. > dotnet-sdk-2.1.200 : Depends: dotnet-runtime-2.0.7 but it is not going to be installed\nWhat happens when you try to install that package? I.e. sudo apt-get install dotnet-runtime-2.0.7. If there's a similar error again, try to follow the chain until you arrive at a package that gives you a different error.. As far as I can tell, the Ubuntu 17.10 version of the package does depend on libicu57:\nbash\n$ wget https://packages.microsoft.com/ubuntu/17.10/prod/pool/main/d/dotnet-runtime-2.0.7/dotnet-runtime-2.0.7-ubuntu.17.10-x64.deb\n$ dpkg -I dotnet-runtime-2.0.7-ubuntu.17.10-x64.deb\n new debian package, version 2.0.\n size 17984388 bytes: control archive=6003 bytes.\n     931 bytes,    11 lines      control\n   20117 bytes,   176 lines      md5sums\n Package: dotnet-runtime-2.0.7\n Version: 2.0.7-1\n Architecture: amd64\n Maintainer: Microsoft <dotnetcore@microsoft.com>\n Installed-Size: 59473\n Depends: libc6 (>= 2.14), libcurl3 (>= 7.16.2), libgcc1 (>= 1:3.0), libgssapi-krb5-2 (>=\n1.14+dfsg), liblttng-ust0 (>= 2.5.0), libstdc++6 (>= 4.8), libunwind8, libuuid1 (>= 2.16),\nzlib1g (>= 1:1.1.4), libssl1.0.0, libicu57, dotnet-hostfxr-2.0.7\n Section: libs\n Priority: standard\n Homepage: https://dotnet.github.io\n Description: Microsoft .NET Core Runtime - 2.0.7 Microsoft.NETCore.App 2.0.7\n  .NET Core is a development platform that you can use to build command-line applications,\nmicroservices and modern websites. It is open source, cross-platform and is supported by\nMicrosoft. We hope you enjoy using it! If you do, please consider joining the active\ncommunity of developers that are contributing to the project on GitHub\n(https://github.com/dotnet/core). We happily accept issues and PRs.\nI think what you should do is to uninstall the Ubuntu 16.04 version of packages-microsoft-prod and install the Ubuntu 17.10 version of that package. (And don't forget to run sudo apt update after doing that.). I believe this is caused by https://github.com/dotnet/corefx/issues/6185.\nIn short, previously, reference assemblies didn't contain private fields for structs such as CancellationTokenRegistration. This meant that C# didn't check definite assignment for those types, which allowed code like your example. This bug was fixed in .Net Core 2.1, which means that code that compiled and worked fine before, but was in some sense incorrect, because it didn't initialize types that should be initialized, does not compile anymore.. It seems the yo aspnet generator is significantly outdated. Nobody should be using prerelease versions of .Net Core tools 1.0 anymore. There is already an issue about updating the tutorial (https://github.com/dotnet/docs/issues/5700), but in the meantime, what I think you should do is:\n\nUse dotnet new web to create the application.\nCreate a Dockerfile similar to this one.\n\n\nIf you're curious about more details about what the issue is: yo aspnet generates global.json that tells .Net Core to use version 1.0.0-rc4 of its tools. You don't have that installed, so instead version 1.0.0-preview2 is selected. But that version is so old that it doesn't support the \"new\" csproj project file, which is causing the error.. When I add a reference to the System.Data.SqlClient package, SqlConnection compiles for me on both .Net Core 2.0 and 2.1. Do you have an example (including .csproj) where it doesn't?\nIf the issue is only in the documentation, the it should be reported at the dotnet/docs repo.. This seems to be a duplicate of https://github.com/aspnet/Mvc/issues/7969.. Based on the output of whereis, it looks to me like you have two versions of the dotnet host installed: the one in /usr/bin, which does not contain the SDK, and the one in /usr/share/dotnet, which does. And since the one in /usr/bin is picked up when you run dotnet, it behaves as if you didn't have the SDK.\nCan you try deleting the one in /usr/bin?. Can you provide a short, self-contained code that reproduces the issue?. Can you clarify what exactly you are talking about? What grammar? How should it be improved?. > As real problem I faced the other day, I noticed that my GetHashCode implementation didn't produce unique ints for my object, since I had a lot of them, the problem could easily be solved if GetHashCode would allow long.\nGetHashCode was never intended to produce unique values. It's just an optimization (even though it's a very important optimization), and so it doesn't require unique values. And I'm not convinced 64-bit hash code would guarantee uniqueness. If that's what you need, you should use something like SHA, which is 160 bits or longer.. Microbenchmarking is notoriously hard to do right, because there are many things that can influence the microbenchmark, that are not relevant to real code.\nI tried using BenchmarkDotNet (a library to do microbenchmarking right) to reproduce your results. My code:\n```c#\n[DisassemblyDiagnoser(printAsm: true, printSource: true)]\npublic class Benchmark\n{\n    [Benchmark]\n    public void For()\n    {\n        int a = 0;\n        for (var i = 0; i < int.MaxValue; i++)\n        {\n            a++;\n        }\n    }\n[Benchmark]\npublic void EmptyFor()\n{\n    int a = 0;\n    for (var i = 0; i < int.MaxValue; i++)\n    {\n    }\n}\n\n}\n```\nMy results:\nBenchmarkDotNet=v0.10.14, OS=Windows 10.0.17134\nIntel Core i5-2300 CPU 2.80GHz (Sandy Bridge), 1 CPU, 4 logical and 4 physical cores\nFrequency=2727543 Hz, Resolution=366.6303 ns, Timer=TSC\n.NET Core SDK=3.0.100-alpha1-20180720-2\n  [Host]     : .NET Core ? (CoreCLR 4.6.26614.01, CoreFX 4.6.26614.01), 64bit RyuJIT\n  DefaultJob : .NET Core 2.0.9 (CoreCLR 4.6.26614.01, CoreFX 4.6.26614.01), 64bit RyuJIT\n|   Method |     Mean |    Error |   StdDev |\n|--------- |---------:|---------:|---------:|\n|      For | 988.1 ms | 19.36 ms | 31.27 ms |\n| EmptyFor | 923.7 ms | 13.81 ms | 11.53 ms |\nDisassembly of the loop in For:\nasm\nM00_L00:\n\u00a0 inc     eax\n\u00a0 inc     edx\n\u00a0 cmp     edx,7FFFFFFFh\n\u00a0 jl      M00_L00\nIn EmptyFor:\nasm\nM00_L00:\n\u00a0 inc     eax\n\u00a0 cmp     eax,7FFFFFFFh\n\u00a0 jl      M00_L00\nSo, empty for is faster than non-empty for and disassembly is pretty much a straightforward translation of the code in both cases.\nWithout further evidence, I'd say there isn't an issue here.. I don't know about the volume sharing issue (if there is one), but the first error message implies that you're trying to run a .Net Core SDK command when you only have the .Net Core Runtime installed.\nWhat are the commands that you're running? What Docker image are you using? Can you share your Dockerfile?. @karelz The attached ZIP file can't be opened in Windows Explorer, because it actually seems to be a mislabeled RAR file. I could open it fine in 7-Zip.\nI think there is indeed an issue here: the deserialized HashSet<T> is not consistent, in that set.Contains(set.Single()) returns false, even though GetHashCode and Equals of the contained value are implemented correctly.\nAs far as I can tell, this happens because on deserialization, HashSet<T>.OnDeserialization, which calls GetHashCode of the contained object, is called before the Parameters collection is filled. This means the HashSet<T> stores the incorrect hash code in its internal structure.\nHere is my minimal repro, created by removing unnecessary parts from the attached code:\n```c#\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Runtime.Serialization.Formatters.Binary;\n[Serializable]\nclass FilterKey\n{\n    public readonly Dictionary Parameters = new Dictionary();\npublic override int GetHashCode() => Parameters.Count.GetHashCode();\n\npublic override bool Equals(object other) =>\n    other is FilterKey that && Parameters.Count == that.Parameters.Count;\n\n}\nclass Program\n{\n    static byte[] Serialize(object obj)\n    {\n        using (var stream = new MemoryStream())\n        {\n            new BinaryFormatter().Serialize(stream, obj);\n            return stream.ToArray();\n        }\n    }\nstatic object Deserialize(byte[] data)\n{\n    using (var stream = new MemoryStream(data))\n    {\n        return new BinaryFormatter().Deserialize(stream);\n    }\n}\n\nstatic void Main()\n{\n    var set = new HashSet<FilterKey> { new FilterKey { Parameters = { { 1, 2 } } } };\n\n    // correctly prints True\n    Console.WriteLine(set.Contains(set.Single()));\n\n    var deserializedSet = (HashSet<FilterKey>)Deserialize(Serialize(set));\n\n    // this prints False, which is the issue\n    Console.WriteLine(deserializedSet.Contains(deserializedSet.Single()));\n}\n\n}\n``\n. I can reproduce the error message when I set the environment variableOptimizeto1`:\n```\n$ export Optimize=1\n$ dotnet publish -c Release -r linux-x64\nMicrosoft (R) Build Engine version 15.6.84.34536 for .NET Core\nCopyright (C) Microsoft Corporation. All rights reserved.\nRestoring packages for /home/svick/coreapp/coreapp.csproj...\n  Generating MSBuild file /home/svick/coreapp/obj/coreapp.csproj.nuget.g.props.\n  Generating MSBuild file /home/svick/coreapp/obj/coreapp.csproj.nuget.g.targets.\n  Restore completed in 721.48 ms for /home/svick/coreapp/coreapp.csproj.\n/usr/share/dotnet/sdk/2.1.105/Roslyn/Microsoft.CSharp.Core.targets(123,10): error MSB4030: \"1\" is an invalid value for the \"Optimize\" parameter of the \"Csc\" task. The \"Optimize\" parameter is of type \"System.Boolean\". [/home/svick/coreapp/coreapp.csproj]\n$ export Optimize=\n$ dotnet publish -c Release -r linux-x64\nMicrosoft (R) Build Engine version 15.6.84.34536 for .NET Core\nCopyright (C) Microsoft Corporation. All rights reserved.\nRestore completed in 99.88 ms for /home/svick/coreapp/coreapp.csproj.\n  coreapp -> /home/svick/coreapp/bin/Release/netcoreapp2.0/linux-x64/mssqlsmoapp.dll\n  coreapp -> /home/svick/coreapp/bin/Release/netcoreapp2.0/linux-x64/publish/\n```\nIs it possible that you have the environment variable Optimize set? What does echo $Optimize print?. I created a brand new .Net Core 2.1 application in VS 15.8.9 with the following code:\n```c#\nclass Program\n{\n    static void Main() { }\n}\ninterface A\n{\n    void DoSomething();\n}\ninterface B : A\n{\n    void DoSomethingElse();\n}\npublic class C : B\n{\n    public void DoSomethingElse()\n    {\n        //do something else here\n    }\n}\n```\nAnd I got the expected error:\n\nError  CS0535  'C' does not implement interface member 'A.DoSomething()'\n\nIs it possible that something else is going on on your side, like you editing a file that isn't part of the project? If not, could you provide exact steps to reproduce the problem?. C# 8.0 is already proposed to add the switch expression. I don't think a third form of switch would be a good idea.\nAlso, suggestions to change the C# language belong on the csharplang repo.. @WalterEbbers I believe that feature is not in the current preview and is tracked at https://github.com/dotnet/coreclr/issues/20287.. The package System.Net.Http.Formatting.Extension that you seem to be using is not from Microsoft. I believe you should use the Microsoft.AspNet.WebApi.Client package instead, which should support .Net Core 2.x.. This is because the / character does not represent the literal /, but is instead a custom format specifier for the date separator.\nAs the documentation says, if you want a literal /, you can use '/' in the format string.\nAlso, you're not using the culture variable in your call to ToString(), which means it's using the current culture, which may not be en-IN.\nSo, the code to do what you want is: dt.ToString(\"dd'/'MMM'/'yyyy\", culture). Its output is 02/Jan/2019, which is what you wanted.. Grammar: commands fail\n. 1. Where should I file an issue if it does not fall clearly within one of these categories (for example, .Net Core VS tools) or if I'm unsure where it belongs?\n2. These should be links.\n3. Also mention aspnet/Home?\n. Nit: since users will see the markdown here, I think the list should consistently have no indentation, and not inconsistently have one space indentation for the first three items and no indentation for the last item.\n. Should this be 2017?\n. > to make it natural for .NET Core to get everyone people need it\nI don't understand this part. Was it supposed to be \"everywhere people need it\"?\n. All packages updated, but none changed their version since 1.0.1? And the same for EF.. The page is about RC3, but this line talks about Preview 4. I think that should be fixed.. The preview4 part here looks wrong to me too.. Since dotnet/docs is not .Net Core-specific, I think this should say just:\n\nfor .NET documentation issues and questions. The SDK is used by more than just VS, specifically the CLI. So I think this should say:\nfor .NET Core SDK issues and questions\n\nThough that doesn't really say anything to those who don't already know what the SDK is, so maybe something like:\n\nfor .NET Core SDK (used by Visual Studio and CLI) issues and questions. https://docs.microsoft.com/dotnet/ links to documentation for both .Net Core and .Net Framework.\n\nSo, saying that it's just for .Net Core is inaccurate and I think that linking to .Net Framework documentation too is redundant.. Yeah, the new version looks good to me.. Nit: stray period before \"Conceptual\".. Typo: docuemnts \u2192 documents.\nThe same typo also appears in the next example.. Shouldn't the supported OS versions for .Net Core 2.0 be more than just a proposal now?. I think I would prefer explicitly specifying that this requires version 7.1, to make it clear which version introduced this option. (And in theory, if someone tried to compile this code with a 7.0 compiler, using latest would fail here.)\nAlso nit: tabs vs. spaces.. It is necessary, because the default LangVersion is default, which is the latest major version.. ",
    "qnnnnez": "I got that too with Ubuntu.\n. ",
    "rjcobain": "dotnet compile --native outputs a working executable\n. ",
    "justinmchase": ":+1: \nAfter installation steps to reproduce on osx:\n$ dotnet new\n$ dotnet restore\n$ dotnet run # error\nAlso doesn't work:\n$ dotnet compile\n$ ./bin/Debug/dnxcore50/hello # same error\nThis does work however:\n$ dotnet complie --native\n$ ./bin/Debug/dnxcore50/native/hello\n. Basically those missing dependencies are actually missing. You can see what is in the repo here:\nhttp://www.nuget.org/packages?q=Windows.Forms\nAlso, I don't think they're going to be porting Windows forms to this new system. I don't know if anything has been announced but I would imagine that some team in microsoft is working on it secretly right now.\n. Thanks for the link.\nBut I gotta say that seems like an epic fail. In the first paragraph it says \"... and enjoy all the benefits that .NET Core has to offer.\"\nYet it's windows desktop only. I just don't get it. They need a cross platform desktop UI not a windows only one. If I wanted a windows only platform I'd just use actual .NET.\nHow many years will it take them to do the thing they should have done on day one? Craziness.. @WHK102 .NET Core is cross platform I believe. It can run on windows, linux, osx. But what they're talking about is making some kind of windows only UI thing that will allow you to load .NET core libraries. So you could have some underlying shared components that run in both places but they would have to be UI-less. Like maybe some networking library. You'll be able to build your UI but pull in all the core libraries people are building and sharing.\nThis sounds ok but its really disappointing that they aren't going all the way and making the UI components also cross platform to osx and linux as well.. @mwpowellhtx I used to work for Microsoft but I no longer have have any special insider information. However, I can speculate and from my experience (purely my opinions below, not microsofts).\nThere is currently a tension between the younger teams who believe in and push open source and cross platform technologies and some of the older, bigger teams, especially the Windows team, who want to create Windows only platforms.\nThe older bigger teams have a lot of influence, top down, on the developer division and so they are able to exert pressure on bigger picture projects like this. In this case you can see that there is a desire for the existing windows only platforms to begin to adopt .NET core and so this is essentially their migration strategy. Its entirely possible that they, as stated earlier in this thread, have secret projects to create OSX and Linux UI platforms but I don't know if thats true but if I had to guess as of now I suspect they don't.\nIn my opinion, I guess its fine to do what they're doing but if I was Microsoft I would also be looking to build a non-XAML based cross platform UI system instead. If they have the resources to do both then I guess go for it but if not then I would scrap the windows only effort and focus on the cross platform one. I would also make the new cross platform UI to not be XAML based but look to make a superior technology. Evolve away from XML completely frankly. Because trying to give a lateral \"upgrade\" path for people already making windows only apps is not a real big market in my opinion. I think they should instead be looking to compete with Electron, as that is bleeding Microsoft platform technologies the most right now.\nI do have one other insight to share and that has to do with the history of .NET, XAML and their relationship with Windows. Its interesting to note that XAML was originally created by shifting a lot of developer resources away from IE and onto the WPF team, this was why IE6 sat stagnant for a long time, the developers were gone! What they then made was the windows presentation foundation for what later became known as Longhorn, which ended up being a pretty large disaster. Longhorn largely failed because in they attempted to rewrite the windows shell using .NET and WPF. At the time (and still frankly) WPF had lots of really bad memory leaks, memory consumption issues, GC issues and a variety of other bugs and performance issues. This is why Longhorn was scrapped and what they ended up doing is to straight up reverting the Windows codebase back to several years to pre-longhorn and then subsequently worked overtime for another 3 years to crank out the gem known as Vista. Some people don't remember Vista fondly but frankly it was a hurculean effort and genuine evolution considering the prior turmoil that caused it. Or, it could have been worse.\nSo ever since Longhorn the Windows team has had an extremely bitter attitude towards .NET. I don't think its completely fair as they essentially went all in on a brand new technology and .NET has done a lot of evolving since then but nonetheless that sentiment remains among some of the now top players in Microsoft. So effectively there is a sentiment that some of the largest disasters in Microsoft history (IE's fall from grace and multiple \"bad\" versions of Windows) are, essentially, totally the fault of gambling on .NET and losing (from their perspective). And that sentiment can sometimes show in decisions like this.\nSo when Microsoft went to make their new metro apps for windows 8/10, they almost didn't even support XAML apps but only C++ and javascript. It was only the passion of the developer community that pushed it over the edge and let it in. I personally think that the .net developer community is the most vibrant and passionate one they have and if they were to create a cross platform desktop UI library it would spark a bit of a revolution. I mean right now everyone is moving towards Electron because, really, what else are you going to do? And while Electron is awesome there are some legit complaints and also there is some real complexity around native modules and such as well as some rendering performance limitations. Anyway the point is if they were to try to compete in that market they could legitimately make a dent, probably take over, and it would really be interesting to see.\nPerhaps its a lack of vision, or perhaps they're actually doing it secretly right now but I suspect the truth is that the leadership, at some of the highest levels, is still stuck in the same mindset of windows desktop domination and it is prohibiting them from making correct decisions. I believe its likely that we will have to wait for some of the new guard to slowly take over before we can see these kinds of bold bigger moves.. Listen, its completely within the realm and resources of Microsoft to make a cross-platform desktop UI system. GitHub made one for crying out loud, called Electron. Video game makers do it over and over again all the time as well. Its not really that hard to do, frankly.\nYou make an abstraction over OpenGL and DirectX like every game engine ever made and layer a logical UI system over it.  .NET core is already cross platform and that is the real hard part, adding in an graphics library is not really that bad. Heck, they could probably just use SDL and boom-done it.\nLets be clear here, the reason why they're still dinking around with Windows only UI platforms is because the upper management is still holding onto a fantasy that developers will voluntarily lock themselves into Windows by adopting them. Meanwhile marketshare continues to dwindle. Making a good .NET based cross platform desktop UI is what developers want, its what they've been wanting and needing for the past 10 years. This is, however, at odds with Microsoft upper level strategy. And that is because their upper level strategists are dinosaurs still holding onto the glory years and too busy fighting each other. That's what it all really boils down to.\nXamarin and XAML were fine experiments. They learned from it, that's fine, its time to evolve past it. Throw a team of game and tool makers together, don't be shackled to the past, make something actually good. It will pay off.. > A cross-platform framework that is desktop-only is not solving any serious business problem.\nI believe this is untrue. I know there are a ton of cross platform desktop applications, despite the web. Companies like Skype and Spotify for example. And I know a lot of businesses still develop internal desktop applications designed specifically to use their internal software as well. And of course there are games, which use game engines such as Unity, Unreal or other tools and still most definitely count as cross platform desktop applications. Lets not forget VR also. As Chrome is currently pulling HMD apis into chrome and preparing to release them into an upcoming version of electron and Microsoft has no entry into this market at all. Moving last on VR could be strategically very bad.\n\nIt is both desktop and mobile.\n\nThis is also untrue, it is desktop only right now. There are others tools which are mobile so maybe you're thinking of one of those? When you say \"its also terrible\" it must be that you're thinking of a different platform because you were mistaken about the mobile aspect of it and it is actually pretty dang good. It has weaknesses though, but it is far from terrible.\nYou say there is no use-case for it but frankly there have been a number of really good desktop apps all targeting electron in the last couple years, Slack and VS Code for example (more). Apps like Spotify and Steam use the same technical technique even though they were made independently and prior to Electron by their respective companies. Native app abstraction, embedded web browser for the core logic of the app.\nIt makes sense for a range of applications which would target desktops. I know we're increasingly browser-centric but there remains a substantial number of relevant desktop apps which would benefit from a single cross-platform solution. I can think of a number of applications, even Microsoft applications which have struggled to be cross platform desktop apps and never even landed on Linux (cough Office cough) that could easily be Electron apps.\n\nWindows is just as dominant as ever in desktops.\n\nThis is also untrue. Statistics from various sources show their desktop market share shrinking as much as 8% over the last 5 years. Source. This is a downward trend that will likely continue. Microsoft itself has begun to shift strategies on Windows, becoming more Cloud/Azure-centric. There is a reason why the new CEO was selected from their cloud division rather than their desktop division. This is when Windows 10 will be the last version of Windows, sounds dramatic but the point is that they will just continually improve it and incrementally update it rather than cut whole new versions. The price of Windows is cheaper than ever. None of these things are bad for users, its all good. Its just that they're less dominant and really what users want is the ability to use the apps that they need to do their work on various desktop platforms. \n\nI assume your suggestion is to evolve Xamarin to use platform-independent graphics rendering.\n\nNo, I would not invest any more resources into Xamarin. I would let it fade away as well as XAML. Unity would be a much better partner to invest in. I would either work with them on making some plugins to make desktop application creation easier or just take a page out of their book and make a new tool that had similar underlying technology but was more focused on desktop applications.\n. I just want to point out that Microsoft just acquired Electron through\ntheir purchase of GitHub. So now they do have an xplat ui system. I predict\nwe'll see that grow in importance.. More relevant news:\nhttps://blogs.windows.com/windowsexperience/2018/12/06/microsoft-edge-making-the-web-better-through-more-open-source-collaboration/\nThis may have an affect on the technology used for non .net Windows Store Apps.\n. ",
    "akoeplinger": "See https://github.com/dotnet/cli/issues/313\n. @leecow there seem to be some inaccuracies in the contributor list, e.g. @VSadov shows up with 1 commit to corefx but he did a lot more according to GitHub's commit list. Additionally I don't show up at all (not trying to put a plug in for myself, but it makes me wonder who else was missed?).\nIt might also be a good idea to make the commit links for each author specific to the release/1.0.0 branch instead of master.\n. @leecow --since release/1.0.0@{2016-03-21} sounds wrong to me, this would only count commits to release/1.0.0 after March 21. Don't you want all commits from the beginning of the repo for the 1.0 release? E.g. git shortlog -sne --no-merges release/1.0.0\n. \".NET framework assemblies\" in this case means the BCL, like System.dll etc.\nThe NuGet docs show how to create a package from a dll: https://docs.nuget.org/create/creating-and-publishing-a-package. You can put that nuget package in a local folder and use that as a feed: https://docs.nuget.org/create/hosting-your-own-nuget-feeds\n. Your problem is likely this: https://github.com/JoshClose/CsvHelper/blob/316f62dce451dd428eb95d4997a8f29245920d5e/src/CsvHelper/project.json#L17\nThis means that the PDBs will be created in the new Portable PDB format which works cross platform. It seems TFS doesn't understand this format yet.\nYou could try switching to \"debugType\": \"full\" but this only works on Windows.\n. :+1: ~~might make sense to add .DS_Store to .gitignore~~ scratch that it already is.\n. There are gitter channels for each of the main repos: https://gitter.im/dotnet/corefx, https://gitter.im/dotnet/coreclr, https://gitter.im/dotnet/cli, etc. (those are mentioned in the READMEs)\nAdditionally there a lot of people in the ASP.NET/.NET Core community Slack: http://tattoocoder.com/aspnet-slack-sign-up \ud83d\ude04 \n. The release notes pointing to @leecow's fork seems wrong indeed \ud83d\ude04 . xbuild is deprecated in Mono now that we have msbuild (and we show a message when using xbuild about that). I'd encourage everyone to switch over to msbuild :). I think there needs to be a section somewhere that defines what exactly a \"distribution\" is in this case.\n. Rasberry Pi2 isn't an OS, it's ARM Linux (or Windows IoT?).\n. I was under the impression that ARM64 is further along at this point? Or was that just the community porting effort?\n. Do we really need CY here? I don't think anyone would think of the fiscal year here. If you want to keep it, please write it out as the abbreviation isn't commonly known to non-native speakers.\n. Makes sense :smile:\n. Missing link to System.IO.Compression.md\n. same here\n. and here\n. and here\n. and here :)\n. I'd probably clarify that the \"have to be connected to the internet\" part only applied to restoring packages, it's not like there's some sort of constant connection from the CLI to a server. This just caches a set of packages locally on first run.\n. typo: ~~and~~ an internet connection\n. missing comma in respect your contributions make engagement efficient. I wonder if this would make more sense at the start of the document, kind of like a TL;DR ?. Just to make sure: for 2. by GH name you mean the full name, not the alias right?. ",
    "Z-Clive": "@akoeplinger Great, thanks.\n. ",
    "Lewiscowles1986": "please close the issue if it's done\n. any ETA on .NET core stable, and the VS2015 tools for .NET core projects?\n. Does anyone know if this could work in a dockerised ubuntu on raspbian? Build the container, send to dockerhub, cuts down drastically on the commands needed to run.. I'd imagine it needs some overhead compared with single-machine development. It would'nt need an enterprise back-end though if that is what you are asking, only need a central VCS or single SCM active branch snapshot (much smaller than a repo), a bootstrap script for deps, and to transfer back the binaries (conveniently ignoring communications traffic overhead).. ",
    "jkotas": "cc @piotrpMSFT\nFSharp is not supported by dotnet driver yet, but it is in the roadmap\n. cc @piotrpMSFT\nFSharp is not supported by dotnet driver yet, but it is in the roadmap\n. This is dup of http://github.com/dotnet/corert/issues/436. It is problem with stale bits or packaging - hello world works fine on Ubuntu in CoreRT CI.\n. cc @MattWhilden \n. This was fixed in #4048. The problem is that the dotnet.bootstrap.py script is using very old build (Microsoft.NETCore.App/1.0.0-rc3-002733).. dotnet.bootstrap.py should be updated to use more recent .NET Core build to fix this.. This issue was moved to dotnet/corefx#23873. CoreCLR repo is the right place for this issue.. Thanks. This issue was moved to dotnet/corert#5604. This is very likely duplicate of https://github.com/dotnet/coreclr/issues/18486. The memory corruption at this calllstack has been reported by multiple people. We were not able to get to the bottom of it yet.. Samsung has been publishing armel packages for Tizen: https://www.nuget.org/packages/runtime.tizen.4.0.0-armel.Microsoft.NETCore.App/\ncc @alpencolt @gbalykov. Duplicate of https://github.com/dotnet/cli/issues/1437. Yes, this is problem in interop test coverage. We know that the interop test coverage has been weak. @AaronRobinsonMSFT has been driving the effort to fix that. cc @jeffschwMSFT \n\nclosure testing\n\nThe root cause of the problem is the reflection call here: https://github.com/dotnet/coreclr/blob/87e96eafa84545335dd6ec02cb4e233211456677/src/System.Private.CoreLib/src/System/Runtime/InteropServices/Marshal.cs#L1596. Analyzer for consistency of framework reflecting over itself may be nice, but it is not specific to CoreLib. Also, it has overlap with ILLinker - the ILLinker heuristics have to do the same analysis (once we have them).\nThe cases where the unmanaged VM code is reflecting over upstack framework are just a few, and they should be better rewritten to use the regular managed reflection so that the regular reflection analysis works fine for them.. > I don't think ILLinker will ever catch the native call from CoreCLR to GetLicenseInteropHelperType\nRight, this is the few cases of unmanaged VM code reflecting over upstack framework that I have talked about above. We have validation for all references between CoreCLR and CoreLib.. These few cases where the VM unmanaged code is reflecting over upstack framework should be trivially rewritten to look like this https://github.com/dotnet/coreclr/blob/431d041b7697a7ce307caa6090fab01ffd7ae652/src/System.Private.CoreLib/shared/System/ComponentModel/DefaultValueAttribute.cs#L66 or this https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Reflection/Emit/ILGenerator.cs#L1173 . And then it will be all equivalent to the ILLinker reflection problem. . > Were you thinking Marshal or something new?\nIt does not really matter. It is an implementation detail that nothing outside CoreCLR repo should depend on. It suspect that putting it into a dedicated type would look better once it is a bunch of methods.\n\nSo I am unclear what the difference is here\n\nWhat follows in the two case that I have highlighted is GetMethod or CreateDelegate call in C# that takes method name. For the LicenseManager case, the equivalent of GetMethod is done in C++ VM code.\n\nhow one is better than the other\n\nThe advantage of having GetMethod/CreateDelegate in C# is that it is analyzable by IL tooling like any other reflection. No need to build a special plumbing to analyze reflection done by the unmanaged C++ code in VM.. > I am assuming that change with make things better?\nCorrect.. @ericstj Are you able to reproduce this?\nApplication.Demo from above fails for me pretty early. Here is what I have done:\ngit clone https://github.com/dapplo/Dapplo.CaliburnMicro/\ncd Dapplo.CaliburnMicro\\src\\Application.Demo\ngit checkout feature/dotnetcore30\ndotnet restore\nmsbuild\ndotnet bin\\Debug\\netcoreapp3.0\\Application.Demo.dll\nResult:\nUnhandled Exception: System.IO.DirectoryNotFoundException: D:\\Application.Demo.Addon\\bin\\Debug\\netcoreapp3.0\n   at Dapplo.Addons.Bootstrapper.Resolving.AssemblyResolver.ScanForAssemblies()\n   at Dapplo.Addons.Bootstrapper.Resolving.AssemblyResolver..ctor(ApplicationConfig applicationConfig)\n   at Dapplo.Addons.Bootstrapper.ApplicationBootstrapper..ctor(ApplicationConfig applicationConfig)\n   at Dapplo.CaliburnMicro.Dapp.Dapplication..ctor(ApplicationConfig applicationConfig) in D:\\Dapplo.CaliburnMicro\\src\\Dapplo.CaliburnMicro.Dapp\\Dapplication.cs:line 57. > ControlZEx example\nI was not able to build that one (I did not spend too much time debugging that).  When I use the Build.ps1 script in the root, it fails with:\nD:\\ControlzEx>powershell .\\Build.ps1\nPreparing to run build script...\nPaket version 5.174.2\nPerformance:\n - Runtime: 1 second\nPaket failed with\n-> Extracting platforms from path 'netcoreapp3.0' failed\nResolve-Path : Cannot find path 'D:\\ControlzEx\\packages\\cake\\Cake' because it does not exist.. @AndyAyersMS Does it ring a bell? . > For example, assembly A and B(1.0) are both strong named, and A reference B(1.0). If B(1.0) is replaced by B(2.0) which is also signed, It still work, but In .netframework, it will throw exception.\nIs this by design?\nYes, this is by design. The versions are unified up in .NET Core - same or higher will satisfy the reference. You can achieve the same behavior in .NET Framework using binding redirects.\n\nis there any official high-level documentation about assembly loading differences between .NET Core and .NET Framework?\n\nThere is not one today. There are multiple issues in the docs repo about making this better, e.g. https://github.com/dotnet/docs/issues/5685. The corefxlab work is about steady state performance, not about making the inner loop faster that this paragraph talks about.. ",
    "samuela": "What's the current status of this? It looks like the dotnet compile command has been removed and I don't see a --native flag for dotnet publish.... @cartermp Ah, that's unfortunate. Is this on the roadmap for .NET Core at all?. ",
    "smartbitnl": "Try this before you compile native, it worked for me. \nbash\nsudo apt-get install -yq llvm-3.5 clang-3.5 lldb-3.6 lldb-3.6-dev libunwind8 libunwind8-dev cmake\nThen I can run the binary bin/Debug/dnxcore50/native/myapp in the latest ubuntu-image and outputs Hello World!. If I run bin/Debug/dnxcore50/myappin this same ubuntu I get failed to locate CLR files (as expected). This also runs fine in the ubuntu image although the binary is larger:\nbash\ndotnet compile -n --cpp\nStill wondering where the relevant compilation & linking logs are generated. Can anyone help with that?\n. ",
    "SesticM": "Thank you smartbitnl, worked like a charm! \n. Thank you smartbitnl, worked like a charm! \n. ",
    "tmeschter": ":+1: \n. ",
    "alexeycalinovski": "I understand that, but I hope it will work .. or I can contribute by finding why it doesn't :) . Anyway, the export helped in getting this : \n```\nLoaded module: dnx.coreclr.so\nFound export: CallApplicationMain\nUnhandled Exception:\n     Cannot print exception string because Exception.ToString() failed.\n Aborted\n```\nlibicu-devel-51.2-6.1.2.x86_64\n. I got over that part by using your suggestion. I now have this other error, when I issue dnu restore:\n```\nInformation: [LoaderContainer]: Load unmanaged library name=System.Net.Http.Native\n\nSystem.TypeInitializationException: The type initializer for 'System.Net.Http.CurlHandler' threw an exception. ---> System.TypeInitializationException: The type initializer for 'libcurl' threw an exception. ---> System.TypeInitializationException: The type initializer for 'HttpInitializer' threw an exception. ---> System.DllNotFoundException: Unable to load DLL 'System.Net.Http.Native': The specified module could not be found.\n (Exception from HRESULT: 0x8007007E)\n   at Interop.HttpInitializer.EnsureCurlIsInitialized()\n   at Interop.HttpInitializer..cctor()\n   --- End of inner exception stack trace ---\n   at Interop.HttpInitializer.Initialize()\n   at Interop.libcurl..cctor()\n   --- End of inner exception stack trace ---\n   at Interop.libcurl.curl_version_info(Int32 curlVersionStamp)\n   at System.Net.Http.CurlHandler..cctor()\n   --- End of inner exception stack trace ---\n   at System.Net.Http.CurlHandler..ctor()\n   at System.Net.Http.HttpClient..ctor()\n   at Microsoft.Dnx.Tooling.Restore.NuGet.HttpSource..ctor(String baseUri, String userName, String password, Reports reports)\n   at Microsoft.Dnx.Tooling.PackageFeedCache.CreatePackageFeed(PackageSource source, Boolean noCache, Boolean ignoreFailedSources, Reports reports)\n   at Microsoft.Dnx.Tooling.PackageFeedCache.<>c__DisplayClass1_0.b__0(PackageSource _)\n   at System.Collections.Concurrent.ConcurrentDictionary2.GetOrAdd(TKey key, Func2 valueFactory)\n   at Microsoft.Dnx.Tooling.PackageFeedCache.GetPackageFeed(PackageSource source, Boolean noCache, Boolean ignoreFailedSources, Reports reports)\n   at Microsoft.Dnx.Tooling.RestoreCommand.AddRemoteProvidersFromSources(List1 remoteProviders, List1 effectiveSources, PackageFeedCache packageFeeds, SummaryContext summary)\n   at Microsoft.Dnx.Tooling.RestoreCommand.d__68.MoveNext()\n----------\nRestore failed\nThe type initializer for 'System.Net.Http.CurlHandler' threw an exception.\n```\nI followed #1502 but still the error remains.\n. Also, I intended to add more nuget feeds but I can't find NuGet.config file, as described here and because of #3550.\n. ```\ncurl --version\ncurl 7.42.1 (x86_64-suse-linux-gnu) libcurl/7.42.1 OpenSSL/1.0.1k zlib/1.2.8 libidn/1.31 libssh2/1.5.0\nls /usr/lib64/libssl*\n/usr/lib64/libssl3.so  /usr/lib64/libssl.so  /usr/lib64/libssl.so.0.9.8\n```\nIssue #2995 also suggests the problem is from incorrect version of libcurl .\nldd ~/.dnx/runtimes/dnx-coreclr-linux-x64.1.0.0-beta8/bin/System.Net.Http.Native.so\n linux-vdso.so.1 (0x00007ffce72b5000)\n libcurl-gnutls.so.4 => not found\n libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007f1933fba000)\n libm.so.6 => /lib64/libm.so.6 (0x00007f1933cb7000)\n libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007f1933aa0000)\n libc.so.6 => /lib64/libc.so.6 (0x00007f19336f1000)\n /lib64/ld-linux-x86-64.so.2 (0x00007f19344e7000)\nSo it seems I am missing libcurl-gnutls.so.4, creating a sym link allows dnu  (/usr/lib64/libcurl-gnutls.so.4 -> libcurl.so.4.3.0) to run without error, but I don't know to what extent. So I'll try building libcurl with gnutls support.\nBuilding curl with gnutls works fine.\n. ",
    "Draqun": "Thank you very much. Installation  Windows Management Framework 4.0 from https://www.microsoft.com/en-us/download/details.aspx?id=40855 solved the problem.\nI close this issue.\n. ",
    "roncain": "@iamjasonp -- can you add any info regarding the WCF issues showing this same error?\n/cc @alexeycalinovski \n. Hi @leena-v .  A blog describing this up-coming feature is at http://blogs.msdn.com/b/webdev/archive/2015/12/15/wcf-connected-service-visual-studio-extension-preview-for-asp-net-5-projects.aspx .  Give it a try and let us know how it works for you.\nThe best place currently to file bugs or ask questions about this feature is https://github.com/dotnet/wcf.  I'd like to close this particular issue in this CoreFx repo, and you should feel free to open new issues in the WCF repo.\n/cc @zhenlan @mlacouture.\n. Hi @leena-v -- I've moved this discussion to the new issue you opened at https://github.com/dotnet/wcf/issues/728 so we can discuss it in the right repo.\n. ",
    "iamjasonp": "We've been seeing this in WCF Core when running tests. The errors look like the following: \nException: System.ServiceModel.CommunicationException: An error occurred while sending the request. ---> System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.CurlException: Peer certificate cannot be authenticated with given CA certificates\n         at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(EasyRequest completedOperation, CURLcode messageResult)\nWe're investigating this on our end. I've tried to import the root CA cert for the WCF Bridge (test) component but so far it hasn't resolved the issue\n. ",
    "ochowie": "I am getting the same issue running on Ubuntu 15.04.\n. ",
    "biaotang": "I restore ubuntu14.04,  and find that it works. Compare  the steps , i find that  in mint17  excute  \"dotnet  restore\"  , the dependence was just been load  but not install.  \n\nzero@zero:~/core/samples/helloworld$ dotnet restore\nMicrosoft .NET Development Utility CoreClr-x64-1.0.0-rc1-16048\n\nGET https://api.nuget.org/v3/index.json\n  OK https://api.nuget.org/v3/index.json 830ms\nRestoring packages for /home/zero/core/samples/helloworld/project.json\n  GET https://api.nuget.org/v3-flatcontainer/microsoft.netcore.runtime/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.io/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.console/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.runtime/index.json\n  OK https://api.nuget.org/v3-flatcontainer/system.runtime/index.json 6163ms\n  OK https://api.nuget.org/v3-flatcontainer/system.io/index.json 6202ms\n  GET https://api.nuget.org/v3-flatcontainer/system.runtime/4.0.21-beta-23516/system.runtime.4.0.21-beta-23516.nupkg\n  GET https://api.nuget.org/v3-flatcontainer/system.io/4.0.11-beta-23516/system.io.4.0.11-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.console/index.json 6502ms\n  GET https://api.nuget.org/v3-flatcontainer/system.console/4.0.0-beta-23516/system.console.4.0.0-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/microsoft.netcore.runtime/index.json 6679ms\n  GET https://api.nuget.org/v3-flatcontainer/microsoft.netcore.runtime/1.0.1-beta-23516/microsoft.netcore.runtime.1.0.1-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/microsoft.netcore.runtime/1.0.1-beta-23516/microsoft.netcore.runtime.1.0.1-beta-23516.nupkg 1111ms\n  GET https://api.nuget.org/v3-flatcontainer/microsoft.netcore.runtime.coreclr/index.json\n  GET https://api.nuget.org/v3-flatcontainer/microsoft.netcore.runtime.native/index.json\n  OK https://api.nuget.org/v3-flatcontainer/system.console/4.0.0-beta-23516/system.console.4.0.0-beta-23516.nupkg 1714ms\n  OK https://api.nuget.org/v3-flatcontainer/microsoft.netcore.runtime.coreclr/index.json 336ms\n  GET https://api.nuget.org/v3-flatcontainer/microsoft.netcore.runtime.coreclr/1.0.1-beta-23516/microsoft.netcore.runtime.coreclr.1.0.1-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/microsoft.netcore.runtime.coreclr/1.0.1-beta-23516/microsoft.netcore.runtime.coreclr.1.0.1-beta-23516.nupkg 1293ms\n  GET https://api.nuget.org/v3-flatcontainer/microsoft.netcore.windows.apisets/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.collections/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.diagnostics.debug/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.globalization/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.objectmodel/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.runtime.extensions/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.text.encoding/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.text.encoding.extensions/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.threading/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.threading.tasks/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.diagnostics.contracts/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.diagnostics.stacktrace/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.diagnostics.tools/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.globalization.calendars/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.reflection.extensions/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.reflection.primitives/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.resources.resourcemanager/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.runtime.handles/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.threading.timer/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.private.uri/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.diagnostics.tracing/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.runtime.interopservices/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.reflection/index.json\n  OK https://api.nuget.org/v3-flatcontainer/microsoft.netcore.runtime.native/index.json 1727ms\n  GET https://api.nuget.org/v3-flatcontainer/microsoft.netcore.runtime.native/1.0.1-beta-23516/microsoft.netcore.runtime.native.1.0.1-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.collections/index.json 412ms\n  GET https://api.nuget.org/v3-flatcontainer/system.collections/4.0.11-beta-23516/system.collections.4.0.11-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.io/4.0.11-beta-23516/system.io.4.0.11-beta-23516.nupkg 3903ms\n  OK https://api.nuget.org/v3-flatcontainer/system.globalization.calendars/index.json 820ms\n  OK https://api.nuget.org/v3-flatcontainer/system.resources.resourcemanager/index.json 815ms\n  GET https://api.nuget.org/v3-flatcontainer/system.globalization.calendars/4.0.1-beta-23516/system.globalization.calendars.4.0.1-beta-23516.nupkg\n  GET https://api.nuget.org/v3-flatcontainer/system.resources.resourcemanager/4.0.1-beta-23516/system.resources.resourcemanager.4.0.1-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/microsoft.netcore.windows.apisets/index.json 1024ms\n  GET https://api.nuget.org/v3-flatcontainer/microsoft.netcore.windows.apisets/1.0.1-beta-23516/microsoft.netcore.windows.apisets.1.0.1-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/microsoft.netcore.runtime.native/1.0.1-beta-23516/microsoft.netcore.runtime.native.1.0.1-beta-23516.nupkg 1051ms\n  OK https://api.nuget.org/v3-flatcontainer/system.reflection/index.json 5528ms\n  GET https://api.nuget.org/v3-flatcontainer/system.reflection/4.1.0-beta-23516/system.reflection.4.1.0-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.runtime.interopservices/index.json 6050ms\n  GET https://api.nuget.org/v3-flatcontainer/system.runtime.interopservices/4.0.21-beta-23516/system.runtime.interopservices.4.0.21-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.resources.resourcemanager/4.0.1-beta-23516/system.resources.resourcemanager.4.0.1-beta-23516.nupkg 6124ms\n  OK https://api.nuget.org/v3-flatcontainer/system.diagnostics.tracing/index.json 7063ms\n  GET https://api.nuget.org/v3-flatcontainer/system.diagnostics.tracing/4.0.21-beta-23516/system.diagnostics.tracing.4.0.21-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/microsoft.netcore.windows.apisets/1.0.1-beta-23516/microsoft.netcore.windows.apisets.1.0.1-beta-23516.nupkg 6242ms\n  OK https://api.nuget.org/v3-flatcontainer/system.runtime.handles/index.json 7505ms\n  GET https://api.nuget.org/v3-flatcontainer/system.runtime.handles/4.0.1-beta-23516/system.runtime.handles.4.0.1-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.threading.timer/index.json 7553ms\n  GET https://api.nuget.org/v3-flatcontainer/system.threading.timer/4.0.1-beta-23516/system.threading.timer.4.0.1-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.reflection.primitives/index.json 7573ms\n  GET https://api.nuget.org/v3-flatcontainer/system.reflection.primitives/4.0.1-beta-23516/system.reflection.primitives.4.0.1-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.reflection.extensions/index.json 7627ms\n  GET https://api.nuget.org/v3-flatcontainer/system.reflection.extensions/4.0.1-beta-23516/system.reflection.extensions.4.0.1-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.reflection/4.1.0-beta-23516/system.reflection.4.1.0-beta-23516.nupkg 2315ms\n  OK https://api.nuget.org/v3-flatcontainer/system.threading.tasks/index.json 8177ms\n  GET https://api.nuget.org/v3-flatcontainer/system.threading.tasks/4.0.11-beta-23516/system.threading.tasks.4.0.11-beta-23516.nupkg\n  GET https://api.nuget.org/v3-flatcontainer/system.threading.tasks/4.0.0/system.threading.tasks.4.0.0.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.objectmodel/index.json 8371ms\n  GET https://api.nuget.org/v3-flatcontainer/system.objectmodel/4.0.11-beta-23516/system.objectmodel.4.0.11-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.diagnostics.contracts/index.json 8373ms\n  GET https://api.nuget.org/v3-flatcontainer/system.diagnostics.contracts/4.0.1-beta-23516/system.diagnostics.contracts.4.0.1-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.threading/index.json 8473ms\n  GET https://api.nuget.org/v3-flatcontainer/system.threading/4.0.11-beta-23516/system.threading.4.0.11-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.text.encoding.extensions/index.json 8571ms\n  GET https://api.nuget.org/v3-flatcontainer/system.text.encoding.extensions/4.0.11-beta-23516/system.text.encoding.extensions.4.0.11-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.globalization/index.json 8723ms\n  GET https://api.nuget.org/v3-flatcontainer/system.globalization/4.0.11-beta-23516/system.globalization.4.0.11-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.globalization.calendars/4.0.1-beta-23516/system.globalization.calendars.4.0.1-beta-23516.nupkg 7931ms\n  OK https://api.nuget.org/v3-flatcontainer/system.diagnostics.stacktrace/index.json 8994ms\n  GET https://api.nuget.org/v3-flatcontainer/system.diagnostics.stacktrace/4.0.1-beta-23516/system.diagnostics.stacktrace.4.0.1-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.private.uri/index.json 9048ms\n  GET https://api.nuget.org/v3-flatcontainer/system.private.uri/4.0.1-beta-23516/system.private.uri.4.0.1-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.diagnostics.debug/index.json 9126ms\n  GET https://api.nuget.org/v3-flatcontainer/system.diagnostics.debug/4.0.11-beta-23516/system.diagnostics.debug.4.0.11-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.diagnostics.tools/index.json 9143ms\n  GET https://api.nuget.org/v3-flatcontainer/system.diagnostics.tools/4.0.1-beta-23516/system.diagnostics.tools.4.0.1-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.diagnostics.tracing/4.0.21-beta-23516/system.diagnostics.tracing.4.0.21-beta-23516.nupkg 2168ms\n  OK https://api.nuget.org/v3-flatcontainer/system.text.encoding/index.json 9267ms\n  GET https://api.nuget.org/v3-flatcontainer/system.text.encoding/4.0.11-beta-23516/system.text.encoding.4.0.11-beta-23516.nupkg\n  GET https://api.nuget.org/v3-flatcontainer/system.text.encoding/4.0.0/system.text.encoding.4.0.0.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.threading.timer/4.0.1-beta-23516/system.threading.timer.4.0.1-beta-23516.nupkg 1746ms\n  OK https://api.nuget.org/v3-flatcontainer/system.runtime.handles/4.0.1-beta-23516/system.runtime.handles.4.0.1-beta-23516.nupkg 2347ms\n  OK https://api.nuget.org/v3-flatcontainer/system.reflection.primitives/4.0.1-beta-23516/system.reflection.primitives.4.0.1-beta-23516.nupkg 2411ms\n  OK https://api.nuget.org/v3-flatcontainer/system.private.uri/4.0.1-beta-23516/system.private.uri.4.0.1-beta-23516.nupkg 1008ms\n  OK https://api.nuget.org/v3-flatcontainer/system.diagnostics.stacktrace/4.0.1-beta-23516/system.diagnostics.stacktrace.4.0.1-beta-23516.nupkg 1132ms\n  OK https://api.nuget.org/v3-flatcontainer/system.text.encoding/4.0.0/system.text.encoding.4.0.0.nupkg 7665ms\n  OK https://api.nuget.org/v3-flatcontainer/system.threading.tasks/4.0.0/system.threading.tasks.4.0.0.nupkg 9063ms\n  OK https://api.nuget.org/v3-flatcontainer/system.objectmodel/4.0.11-beta-23516/system.objectmodel.4.0.11-beta-23516.nupkg 9053ms\n  OK https://api.nuget.org/v3-flatcontainer/system.runtime.extensions/index.json 17782ms\n  GET https://api.nuget.org/v3-flatcontainer/system.runtime.extensions/4.0.11-beta-23516/system.runtime.extensions.4.0.11-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.text.encoding/4.0.11-beta-23516/system.text.encoding.4.0.11-beta-23516.nupkg 9211ms\n  OK https://api.nuget.org/v3-flatcontainer/system.reflection.extensions/4.0.1-beta-23516/system.reflection.extensions.4.0.1-beta-23516.nupkg 10856ms\n  OK https://api.nuget.org/v3-flatcontainer/system.globalization/4.0.11-beta-23516/system.globalization.4.0.11-beta-23516.nupkg 10077ms\n  OK https://api.nuget.org/v3-flatcontainer/system.threading.tasks/4.0.11-beta-23516/system.threading.tasks.4.0.11-beta-23516.nupkg 11024ms\n  OK https://api.nuget.org/v3-flatcontainer/system.diagnostics.tools/4.0.1-beta-23516/system.diagnostics.tools.4.0.1-beta-23516.nupkg 10405ms\n  OK https://api.nuget.org/v3-flatcontainer/system.diagnostics.debug/4.0.11-beta-23516/system.diagnostics.debug.4.0.11-beta-23516.nupkg 11260ms\n  OK https://api.nuget.org/v3-flatcontainer/system.runtime.interopservices/4.0.21-beta-23516/system.runtime.interopservices.4.0.21-beta-23516.nupkg 15184ms\n  OK https://api.nuget.org/v3-flatcontainer/system.diagnostics.contracts/4.0.1-beta-23516/system.diagnostics.contracts.4.0.1-beta-23516.nupkg 13472ms\n  OK https://api.nuget.org/v3-flatcontainer/system.text.encoding.extensions/4.0.11-beta-23516/system.text.encoding.extensions.4.0.11-beta-23516.nupkg 14477ms\n  OK https://api.nuget.org/v3-flatcontainer/system.runtime.extensions/4.0.11-beta-23516/system.runtime.extensions.4.0.11-beta-23516.nupkg 5429ms\n  OK https://api.nuget.org/v3-flatcontainer/system.threading/4.0.11-beta-23516/system.threading.4.0.11-beta-23516.nupkg 31571ms\n  OK https://api.nuget.org/v3-flatcontainer/system.runtime/4.0.21-beta-23516/system.runtime.4.0.21-beta-23516.nupkg 43693ms\n  OK https://api.nuget.org/v3-flatcontainer/system.collections/4.0.11-beta-23516/system.collections.4.0.11-beta-23516.nupkg 43323ms\n  GET https://api.nuget.org/v3-flatcontainer/runtime.ubuntu.14.04-x64.microsoft.netcore.runtime.coreclr/index.json\n  GET https://api.nuget.org/v3-flatcontainer/runtime.unix.system.diagnostics.debug/index.json\n  GET https://api.nuget.org/v3-flatcontainer/runtime.linux.system.runtime.extensions/index.json\n  GET https://api.nuget.org/v3-flatcontainer/runtime.unix.system.threading/index.json\n  GET https://api.nuget.org/v3-flatcontainer/runtime.unix.system.private.uri/index.json\n  GET https://api.nuget.org/v3-flatcontainer/runtime.unix.system.console/index.json\n  OK https://api.nuget.org/v3-flatcontainer/runtime.unix.system.private.uri/index.json 684ms\n  GET https://api.nuget.org/v3-flatcontainer/runtime.unix.system.private.uri/4.0.1-beta-23516/runtime.unix.system.private.uri.4.0.1-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/runtime.unix.system.console/index.json 1301ms\n  GET https://api.nuget.org/v3-flatcontainer/runtime.unix.system.console/4.0.0-beta-23516/runtime.unix.system.console.4.0.0-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/runtime.unix.system.diagnostics.debug/index.json 1364ms\n  GET https://api.nuget.org/v3-flatcontainer/runtime.unix.system.diagnostics.debug/4.0.11-beta-23516/runtime.unix.system.diagnostics.debug.4.0.11-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/runtime.unix.system.threading/index.json 1358ms\n  GET https://api.nuget.org/v3-flatcontainer/runtime.unix.system.threading/4.0.11-beta-23516/runtime.unix.system.threading.4.0.11-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/runtime.linux.system.runtime.extensions/index.json 1723ms\n  GET https://api.nuget.org/v3-flatcontainer/runtime.linux.system.runtime.extensions/4.0.11-beta-23516/runtime.linux.system.runtime.extensions.4.0.11-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/runtime.unix.system.private.uri/4.0.1-beta-23516/runtime.unix.system.private.uri.4.0.1-beta-23516.nupkg 1178ms\n  OK https://api.nuget.org/v3-flatcontainer/runtime.ubuntu.14.04-x64.microsoft.netcore.runtime.coreclr/index.json 1931ms\n  GET https://api.nuget.org/v3-flatcontainer/runtime.ubuntu.14.04-x64.microsoft.netcore.runtime.coreclr/1.0.1-beta-23516/runtime.ubuntu.14.04-x64.microsoft.netcore.runtime.coreclr.1.0.1-beta-23516.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/runtime.unix.system.console/4.0.0-beta-23516/runtime.unix.system.console.4.0.0-beta-23516.nupkg 645ms\n  GET https://api.nuget.org/v3-flatcontainer/system.runtime.interopservices/4.0.20/system.runtime.interopservices.4.0.20.nupkg\n  GET https://api.nuget.org/v3-flatcontainer/system.resources.resourcemanager/4.0.0/system.resources.resourcemanager.4.0.0.nupkg\n  GET https://api.nuget.org/v3-flatcontainer/system.runtime.handles/4.0.0/system.runtime.handles.4.0.0.nupkg\n  GET https://api.nuget.org/v3-flatcontainer/system.io.filesystem.primitives/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.linq/index.json\n  GET https://api.nuget.org/v3-flatcontainer/system.threading.tasks/4.0.10/system.threading.tasks.4.0.10.nupkg\n  GET https://api.nuget.org/v3-flatcontainer/system.text.encoding/4.0.10/system.text.encoding.4.0.10.nupkg\n  GET https://api.nuget.org/v3-flatcontainer/system.collections/4.0.10/system.collections.4.0.10.nupkg\n  GET https://api.nuget.org/v3-flatcontainer/system.threading/4.0.10/system.threading.4.0.10.nupkg\n  GET https://api.nuget.org/v3-flatcontainer/system.text.encoding.extensions/4.0.10/system.text.encoding.extensions.4.0.10.nupkg\n  GET https://api.nuget.org/v3-flatcontainer/system.runtime.extensions/4.0.10/system.runtime.extensions.4.0.10.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/runtime.unix.system.diagnostics.debug/4.0.11-beta-23516/runtime.unix.system.diagnostics.debug.4.0.11-beta-23516.nupkg 1037ms\n  OK https://api.nuget.org/v3-flatcontainer/runtime.unix.system.threading/4.0.11-beta-23516/runtime.unix.system.threading.4.0.11-beta-23516.nupkg 1303ms\n  OK https://api.nuget.org/v3-flatcontainer/runtime.linux.system.runtime.extensions/4.0.11-beta-23516/runtime.linux.system.runtime.extensions.4.0.11-beta-23516.nupkg 1659ms\n  OK https://api.nuget.org/v3-flatcontainer/system.io.filesystem.primitives/index.json 1499ms\n  GET https://api.nuget.org/v3-flatcontainer/system.io.filesystem.primitives/4.0.0/system.io.filesystem.primitives.4.0.0.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.linq/index.json 1692ms\n  GET https://api.nuget.org/v3-flatcontainer/system.linq/4.0.0/system.linq.4.0.0.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.resources.resourcemanager/4.0.0/system.resources.resourcemanager.4.0.0.nupkg 1959ms\n  GET https://api.nuget.org/v3-flatcontainer/system.reflection/4.0.0/system.reflection.4.0.0.nupkg\n  GET https://api.nuget.org/v3-flatcontainer/system.globalization/4.0.0/system.globalization.4.0.0.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.threading/4.0.10/system.threading.4.0.10.nupkg 3405ms\n  OK https://api.nuget.org/v3-flatcontainer/system.io.filesystem.primitives/4.0.0/system.io.filesystem.primitives.4.0.0.nupkg 2481ms\n  OK https://api.nuget.org/v3-flatcontainer/system.runtime.handles/4.0.0/system.runtime.handles.4.0.0.nupkg 4286ms\n  OK https://api.nuget.org/v3-flatcontainer/system.text.encoding.extensions/4.0.10/system.text.encoding.extensions.4.0.10.nupkg 4615ms\n  OK https://api.nuget.org/v3-flatcontainer/system.text.encoding/4.0.10/system.text.encoding.4.0.10.nupkg 5413ms\n  OK https://api.nuget.org/v3-flatcontainer/system.reflection/4.0.0/system.reflection.4.0.0.nupkg 3987ms\n  GET https://api.nuget.org/v3-flatcontainer/system.reflection.primitives/4.0.0/system.reflection.primitives.4.0.0.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.runtime.extensions/4.0.10/system.runtime.extensions.4.0.10.nupkg 6190ms\n  OK https://api.nuget.org/v3-flatcontainer/system.threading.tasks/4.0.10/system.threading.tasks.4.0.10.nupkg 6475ms\n  OK https://api.nuget.org/v3-flatcontainer/system.collections/4.0.10/system.collections.4.0.10.nupkg 6789ms\n  OK https://api.nuget.org/v3-flatcontainer/system.globalization/4.0.0/system.globalization.4.0.0.nupkg 5742ms\n  OK https://api.nuget.org/v3-flatcontainer/system.reflection.primitives/4.0.0/system.reflection.primitives.4.0.0.nupkg 1844ms\n  OK https://api.nuget.org/v3-flatcontainer/system.linq/4.0.0/system.linq.4.0.0.nupkg 6300ms\n  GET https://api.nuget.org/v3-flatcontainer/system.diagnostics.debug/4.0.10/system.diagnostics.debug.4.0.10.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/system.diagnostics.debug/4.0.10/system.diagnostics.debug.4.0.10.nupkg 1135ms\n  OK https://api.nuget.org/v3-flatcontainer/system.runtime.interopservices/4.0.20/system.runtime.interopservices.4.0.20.nupkg 11000ms\n  OK https://api.nuget.org/v3-flatcontainer/runtime.ubuntu.14.04-x64.microsoft.netcore.runtime.coreclr/1.0.1-beta-23516/runtime.ubuntu.14.04-x64.microsoft.netcore.runtime.coreclr.1.0.1-beta-23516.nupkg 56973ms\nInstalling System.Console.4.0.0-beta-23516\nInstalling System.IO.4.0.11-beta-23516\nInstalling System.Text.Encoding.4.0.0\nInstalling System.Threading.Tasks.4.0.0\nInstalling System.Runtime.4.0.21-beta-23516\nInstalling System.Private.Uri.4.0.1-beta-23516\nInstalling Microsoft.NETCore.Runtime.1.0.1-beta-23516\nInstalling Microsoft.NETCore.Runtime.CoreCLR.1.0.1-beta-23516\nInstalling System.Resources.ResourceManager.4.0.1-beta-23516\nInstalling Microsoft.NETCore.Windows.ApiSets.1.0.1-beta-23516\nInstalling System.Reflection.4.1.0-beta-23516\nInstalling System.Globalization.Calendars.4.0.1-beta-23516\nInstalling System.Diagnostics.Tracing.4.0.21-beta-23516\nInstalling System.Threading.Timer.4.0.1-beta-23516\nInstalling System.Runtime.Handles.4.0.1-beta-23516\nInstalling System.Reflection.Primitives.4.0.1-beta-23516\nInstalling System.Diagnostics.StackTrace.4.0.1-beta-23516\nInstalling System.ObjectModel.4.0.11-beta-23516\nInstalling System.Text.Encoding.4.0.11-beta-23516\nInstalling System.Reflection.Extensions.4.0.1-beta-23516\nInstalling System.Globalization.4.0.11-beta-23516\nInstalling System.Threading.Tasks.4.0.11-beta-23516\nInstalling System.Diagnostics.Tools.4.0.1-beta-23516\nInstalling System.Diagnostics.Debug.4.0.11-beta-23516\nInstalling System.Runtime.InteropServices.4.0.21-beta-23516\nInstalling System.Diagnostics.Contracts.4.0.1-beta-23516\nInstalling System.Text.Encoding.Extensions.4.0.11-beta-23516\nInstalling System.Runtime.Extensions.4.0.11-beta-23516\nInstalling System.Threading.4.0.11-beta-23516\nInstalling System.Collections.4.0.11-beta-23516\nInstalling Microsoft.NETCore.Runtime.Native.1.0.1-beta-23516\nInstalling runtime.unix.System.Private.Uri.4.0.1-beta-23516\nInstalling runtime.unix.System.Console.4.0.0-beta-23516\nInstalling System.Threading.4.0.10\nInstalling runtime.unix.System.Threading.4.0.11-beta-23516\nInstalling System.IO.FileSystem.Primitives.4.0.0\nInstalling System.Runtime.Handles.4.0.0\nInstalling System.Text.Encoding.Extensions.4.0.10\nInstalling System.Text.Encoding.4.0.10\nInstalling System.Runtime.Extensions.4.0.10\nInstalling runtime.linux.System.Runtime.Extensions.4.0.11-beta-23516\nInstalling System.Threading.Tasks.4.0.10\nInstalling System.Collections.4.0.10\nInstalling System.Resources.ResourceManager.4.0.0\nInstalling System.Globalization.4.0.0\nInstalling System.Reflection.4.0.0\nInstalling System.Reflection.Primitives.4.0.0\nInstalling System.Linq.4.0.0\nInstalling System.Diagnostics.Debug.4.0.10\nInstalling runtime.unix.System.Diagnostics.Debug.4.0.11-beta-23516\nInstalling System.Runtime.InteropServices.4.0.20\nInstalling runtime.ubuntu.14.04-x64.Microsoft.NETCore.Runtime.CoreCLR.1.0.1-beta-23516\nWriting lock file /home/zero/core/samples/helloworld/project.lock.json\nRestore complete, 115639ms elapsed\nFeeds used:\n    https://api.nuget.org/v3-flatcontainer/\nInstalled:\n    52 package(s) to /home/zero/.dnx/packages\n\nzero@zero:~/core/samples/helloworld$ dotnet run\nHello World!\n. \u201cdotnet restore --runtime ubuntu.14.04-x64\u201d  may  helps .   refer to  https://github.com/dotnet/cli/blob/master/src/Microsoft.DotNet.ProjectModel/RuntimeIdentifier.cs\n. \n",
    "jrwren": "Steps to reproduce:\nStart a fresh ubuntu 14.04 instance.\nsudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\necho \"deb [arch=amd64] http://apt-mo.trafficmanager.net/repos/dotnet/ trusty main\" > sudo tee /etc/apt/sources.list.d/dotnetdev.list\nsudo apt-get update\nsudo apt-get install --no-install-recommends dotnet\nmkdir a\ncd a\ndotnet new\ndotnet restore\nhangs after a single log line:\nlog  : Restoring packages for /home/ubuntu/a/project.json...\nI do not even get permission denied errors.\nRunning sudo dotnet restore shows info messages for requested urls almost immediately after invoking. As non-root (the ubuntu user) dotnet restore hangs indefinitely.\nThe package version is 1.0.0.001793-1\n. /usr/bin is a directory, not an executable. whoami is an executable which might be in that directory (I don't know centos well enough to say).\n$ /usr/bin/whoami\nIs a command run without arguments.\nChange proc.StartInfo.FileName = \"/usr/bin\"; to proc.StartInfo.FileName = \"/usr/bin/whoami\"; and delete the line with proc.StartInfo.Arguments assignment.\n. ",
    "DonSchenck": "I have this same issue; In my case, IPv6 is the preferred address lookup, and it's hanging. I moved IPv4 ahead of IPv6 in the precedence by adding the line\nprecedence ::ffff:0:0/96 100\nin the file /etc/gai.conf\n. Sorry I'm overwhelmed. Close it. Thanks.\n. What does your Dockerfile look like?\n. ",
    "rohitshrivastava04": "Opened it in coreclr, i guess that is the right place.\n. ",
    "joshfree": "There are no plans to bring application platforms (winforms, wpf, etc) to .NET Core at this time.  Closing out this issue.  Thank you.\n. Thanks @shinriyo for the contribution.  We're unfortunately not going to amend the original RC1 release notes at this point.  If you have time, please take a look at the current 1.0.0 release notes PR in progress @ https://github.com/dotnet/core/pull/142.\nThank you again.\n. Closing now that .NET Core 1.0 has shipped.  Instructions can be found at http://dot.net/core.\n. Closing this old issue.  Please feel free to reactivate if there is still a problem.\nInstructions are available at http://dot.net/core\n. This request is being tracked in the corefx repo @ https://github.com/dotnet/corefx/issues/6920\n. Hi @AndrewBarfield, Ubuntu 15.10 isn't one of the .NET Core 1.0 supported platforms (Ubuntu 14.04 LTS and 16.04 LTS are supported) https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.0.md#rtm-platform-support.\nMore information is available at http://dot.net/core.\nIf you are running into issues feel free to reactivate this or create a new issue in https://github.com/dotnet/corefx.  Thanks\n. Hi folks,\nThe .NET Core 1.0 platform support matrix is available @ https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.0.md#rtm-platform-support.\nhttps://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.0-known-issues.md#bash-on-ubuntu-on-windows\nBash on Windows (WSL) is not yet supported by .NET Core 1.0.  Attempting to run applications in the WSL environment can experience intermittent crashes.\nhttps://github.com/Microsoft/BashOnWindows/issues/520\nFeel free to report any other Bash on Windows issues @ https://github.com/Microsoft/BashOnWindows\n. It's the package that contains the runtime identifiers (RIDs) for the supported platforms - \nhttps://docs.microsoft.com/en-us/dotnet/articles/core/rid-catalog\nhttps://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.0.md#rtm-platform-support\nhttps://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json\n. Hi @BenHall does this still occur with .NET Core 1.0 / .NET Core 1.0 SDK Preview 2?\n. LGTM\n/cc @leecow \n. could you squash this into 1 commit when it's ready?\n. LGTM\n. CoreCLR issue is being tracked with: https://github.com/dotnet/coreclr/issues/6604\n. @NinoFloris we're tracking a fix for this here: https://github.com/dotnet/coreclr/issues/6604\n. Hi Folks,\nI've moved this issue to the dotnet/corefx repo where the Windows Compatibility Pack lives.\nThe new issue is https://github.com/dotnet/corefx/issues/31276. Closing this old issue.  Feel free to re-open this with more information.. Hi @IanKemp, I've moved this issue to https://github.com/dotnet/corefx/issues/28135 where the HttpClient owners can take a look.  Thanks. Closing this old issue.  Please feel free to re-open this issue with more details.. Closing old issue.  Please feel free to re-open with more details.. Hey Folks,\nI've moved this discussion to the dotnet/corefx repo where Framework Design Guidelines and API discussions occur - as you're more likely to get engagement there.  For more details on the CoreFX API and FDG see http://aka.ms/api-review\nThe new issue is https://github.com/dotnet/corefx/issues/31275. @dsplaisted . Hi @faib920, I've moved this issue to dotnet/corefx where System.Reflection lives.  The new issue tracking this is https://github.com/dotnet/corefx/issues/31279.  Thanks. Closing this old issue.  Please feel free to reactivate with more details.. Closing out this old issue with no recent response.  Please feel free to reactivate with more information.  Thanks. This issue was moved to dotnet/corefx#31336. Thanks for posting your solution @nefcanto.\n@dsplaisted @leecow do we need to update any docs / FAQs for this?  Is this issue safe to close now? . Closing this old issue which needs more info.  Please feel free to reactivate with more details.  Thanks. This issue was moved to dotnet/project-system#3791. Hi @shaulbehr, I've moved this issue to dotnet/corefx where System.Globalization and the libicu dependency for unicode casing and coalescing support for linux lives.\nThe new issue is https://github.com/dotnet/corefx/issues/31278. Hi @tamasVajda, I've moved this issue to the aspnet/kestrelhttpserver repo where the right folks can take a look.\nThe new issue is https://github.com/aspnet/KestrelHttpServer/issues/2744. Hi @FIVIL, I've moved this issue to the dotnet/corefx repo where System.Net lives and the right folks can answer your question.  The new issue is https://github.com/dotnet/corefx/issues/31277\nThanks. @dsplaisted @nguerrera . This issue was moved to dotnet/corefx#31377. @Eilon could you help route this?. Hi @ficnar, I've moved this issue to the dotnet/corefx repo where System.Security.Cryptography lives.  The new issue is https://github.com/dotnet/corefx/issues/31328.  Thanks. This issue was moved to dotnet/corefx#31429. @weshaggard . I'm glad this resolved the problem @JerryBian \n@leecow should sudo add-apt-repository universe be added to the install instructions (or as a comment) for Ubuntu 18.04?\nhttps://fabianlee.org/2016/09/18/ubuntu-enabling-the-ubuntu-universe-repository/. @MichaelSimons . @Eilon . This issue was moved to dotnet/corefx#31560. related https://github.com/dotnet/core/issues/1260\nEDIT: also including a link to more instructions for future people who search and find this github issue.  https://github.com/dotnet/core/blob/master/Documentation/build-and-install-rhel6-prerequisites.md. related https://github.com/dotnet/core/issues/1260\nEDIT: also including a link to more instructions for future people who search and find this github issue.  https://github.com/dotnet/core/blob/master/Documentation/build-and-install-rhel6-prerequisites.md. Thanks @svick for resolving this issue; and @gauravagarwal28 for posting the question.\nAs the issue is resolved, I'm closing out the bug.  @gauravagarwal28 feel free to reactivate this if there's any additional follow ups or unanswered questions.\nThanks. This issue was moved to dotnet/corefx#32442. Is there an official distribution of Amazon Linux for use outside the Amazon cloud that can be used for OSS development and testing purposes?. Hi @vellozzi you can send a PR to update Microsoft.NETCore.Platforms in the dotnet/corefx repo to add the new OS to the RID graph.  The instructions are here https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/readme.md#adding-a-new-os; but basically you\u2019ll need to add a new entry to runtimeGroups.props and then run build -- /p:UpdateRuntimeFiles=true to update the build generated runtime.compatibility.json and runtime.json artifacts.  Let me know if you have any questions and feel free to tag me in the PR.  Thanks \ud83d\ude03 . This issue was moved to dotnet/corefx#35630. This issue was moved to dotnet/corefx#35629. This issue was moved to dotnet/corefx#35771. Also typos like \"implenentation\" below. The NegotiateStream section could probably be improved further by giving exact package names. /cc @terlochan\n. > implenentation \ntypo still exists\n. ",
    "mwpowellhtx": "This is a pretty serious oversight, IMO.. WPF only? And then on Windows only? No WinForms? I tend to agree. Epic fail.. @justinmchase @WHK102 Precisely.\nI have to pause and recollect the motivation of this rabbit hole into which Microsoft dove. Wasn't it motivated by the divergence of web based stacks? That is to say, MVC versus WebAPI, request, response, server hosting, etc, etc? Likely that more than et cetera, I gather. Is that accurate?\nOver promised deliveries and scope snafus notwithstanding, perhaps it is justified, or perhaps not; I can certainly appreciate needing to align otherwise divergences in a code base having experienced domain specific forks along these lines myself.\nHowever, clearly their priorities did not include support for \"desktop applications\", never mind across platforms. But I'm happy to be proven incorrect in this case. Which kind of leaves a vast chunk of the Microsoft based developers hanging in a lurch.. @poiprotocol Well, this is at least semi-not bad news, if it's accurate, and we don't see more scheduling snafus. .NET Core/Standard is what now? 2.1? 2.2? By at least \"conventional\" versioning standards. The natural next question is, \"when\"?. Yeah, well, don't screw things up by not providing any sort of migration path for WinForms, WPF, etc.. @charlesroddie To clarify a few expectations.\n\n\nlet's assume WinForms/WPF can incorporate Core/Standard bits. Fair enough; targeting what runtime(s)? Framework 4.6.2, for instance? Could be. But I think what most folks, including myself, perhaps badly informed, are expecting, is a Core/Standard comprehension.\n\n\nyou are also assuming calls for a WinForms/WPF port into \"native\" Standard/Core, so to speak, is to the exclusion of other delivery modes, i.e. console applications, services, etc. I cannot speak for others, but that assertion is utterly FALSE, on EVERY level.\n\n\nI don't know how you can say that many systems do not have GUI's. GUIs are indeed dominant across most platforms in the desktop world. Even most modern *nix platforms have SOME sort of GUI comprehension, when you take into consideration Linux flavors, Ubuntu, Mint, etc. So, this is not a tall expectation by any means. Even if it is a shim to something like Gtk, Qt, or whatever. Make SOMETHING happen toward these ends.\n\n\nsome of us might like to run a GUI cross-plat, but are not willing to buy into the Xamarin cost of doing business.\n\n\nStill, epic fail, IMO. Planning is in the wind, discussion concerning v2.2 of Core/Standard. With a weak promise of WinForms/WPF comprehension coming in, let's say, v3.x, to be accurate. Until it happens, this will continue to be the criticism, at least for my part.. @charlesroddie Good points. It will be interesting to see how it goes.. @justinmchase The acquisition isn't done yet; they have through the end of the year for all their ducks to fall in a row, or something like that.. This is a pretty serious oversight, IMO.. ",
    "poiprotocol": "The .NET Core team announced today that WPF support will be coming in .NET Core 3, but it appears it will not be cross platform:\n\nSupport for Windows desktop will be added as a set of \u201cWindows Desktop Packs\u201d, which will only work on Windows. \n\nhttps://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/ . The MS blog post  provides some status and rationale. It really is worth reading in its entirety. But here is a key snippet: \n\nSupport for Windows desktop will be added as a set of \u201cWindows Desktop Packs\u201d, which will only work on Windows. .NET Core isn\u2019t changing architecturally with this new version. We\u2019ll continue to offer a great cross-platform product, focused on the cloud. We have lots of improvements planned for those scenarios that we\u2019ll share later.\nFrom a 1000-meter view, you can think of WPF as a rich layer over DirectX and Windows Forms as thinner layer over GDI Plus. WPF and Windows Forms do a great job of exposing and exercising much of the desktop application functionality in Windows. It\u2019s the C# code in Windows Forms and WPF that we\u2019ll include as a set of libraries with .NET Core 3. Windows functionality, like GDI Plus and DirectX, will remain in Windows.. this conversation is continuing here: https://github.com/dotnet/core/issues/43. \n",
    "WHK102": "If the .NET Core works 100% only on Windows, what is difference between .NET and .NET Core?, the .NET Core is Cross platform but the components works only on windows.. > Just as reference, there is actually a cross platform effort based on UWP XAML outside of Microsoft: https://platform.uno/\n\nIf you still like XAML as UI markup, this lib works very wel... ( web, desktop and mobile )\n\nOfficial platforms supported are Windows, Mac, Android, iOS, but not Linux. https://nwjs.io/ is a better alternative but without .net core or c#.. ",
    "masums": "This is really strange behavior. Core evolved to be cross, universal. But Microsoft again disappointing a large community. What is the reason behind WinForm only for windows?. It will be better if Microsoft includes WPF in .Net Core. One language will rule the software world.. ",
    "uffebjorklund": "I would question the decision to even support wpf, winforms etc. .NET Core is awesome, dont screw things up by adding things like wpf. If you consider desktop client support I would go for creating a new option (not anything like wpf) and make it cross platform!. @VictorioBerra Can confirm that I get the same result. \nTo get it working I had to load the external reference. The file is gettings copied into the correct place, but for some reason it cant be resolved\npublic class TestClass\n{\n    public TestClass()\n    {\n            if (isDebug)\n            {\n                var ext = Path.Combine(Directory.GetCurrentDirectory(), \"bin/Debug/netcoreapp2.0/\", \"Ext.dll\");\n                System.Runtime.Loader.AssemblyLoadContext.Default.LoadFromAssemblyPath(ext);\n            }\n            else\n            {\n                var ext = Path.Combine(Directory.GetCurrentDirectory(), \"Ext.dll\");\n                System.Runtime.Loader.AssemblyLoadContext.Default.LoadFromAssemblyPath(ext);\n            }\n    }\n    public void CreateInstanceOfStandardLib()\n    {\n        new Ext.ClassA();\n    }\n}\nThis is probably not what you want, but if you go this way you need this package in your csproj:\n<ItemGroup>\n    <PackageReference Include=\"System.Runtime.Loader\" Version=\"4.3.0\" />\n  </ItemGroup>\nSample Repo: https://github.com/uffebjorklund/ExternalReferenceNetCore. @VictorioBerra I am not sure how this is supposed to work, I have never used Ref with HinPath. Added a global.json to my sample repo and tested with the oldest sdk on my machine, same issue. However, that was 2.1.4 (not to old).\nSaw some AspNet.Core config with that setup and I doubt that they load assemblies manually. Maybe I am missing something, or maybe it really is a bug.. @Symbai Tried it without any issues. Used both .NET 4.6.1 and .NET CORE 2.*\nPost a link to a repo where the issue is reproduced and I can have a look. @Miclebrick Do not know if this will help you, but we use SQLite with dotnet core on Ubuntu. To be able to run on Linux we had to add these packages:\n<PackageReference Include=\"Microsoft.Data.SQLite\" Version=\"2.0.0\" />\n<PackageReference Include=\"SQLitePCLRaw.bundle_green\" Version=\"1.1.9\" />\nNote that there are newer releases, I just copied from our csproj. Works like a charm on Win, Mac, Linux (ARM as well). You should just google \"gettings started with dotnet core\" => https://docs.microsoft.com/en-us/dotnet/core/get-started. We control sdk-version by having a global.json in the root of our solution.\n{\n    \"sdk\": {\n        \"version\": \"2.1.401\"\n    }\n}\nWe are on Linux and Mac (vscode), but I guess this should work when you are using Visual Studio as well.. There is no global.json by default.. just add one and then copy paste the content from my first post. ",
    "charlesroddie": "There is a lot of misunderstanding here, and among desktop .Net developers at large. Developers have a vision - wave a magic wand and my WPF code will run everywhere. But this is not thought through at all.\nOf course when they crated a cross-platform .Net runtime, it could not include Windows-specific bits. This is called .Net Core.\nOf course they are allowing .Net Core in WPF. It doesn't make sense to maintain multiple versions of .Net. .Net Core is better than the .Net Framework already. They just need to take out the Windows-specific elements and put it in a separate library for use in WPF.\nOf course .Net Core is not going to have GUI components built in, let alone the whole of WPF. Many of the systems it must run on don't even have GUIs.\nOf course WPF is windows-only. Any operating system has to have a UI framework. A cross platform framework would be built on top of WPF or UWP.\nYou can take WPF and emulate it on other platforms. But: 1. It is technically hard. 2. It is only be feasible on desktop platforms, so only allows you to run on 7% more systems (mainly macs). 3. The results would not be great on those systems. This is not a project that deserves serious investment.\nThe right approach:\n\nAllow .Net code to run on all platforms, desktop and mobile (.Net Core and mono, eventually just .Net Core), and create UIs on each platform (WPF/UWP/Xamarin.Mac/Xamarin.iOS/Xamarin.Android). This is mostly done already in case you had not noticed.\nCreate an abstraction layer for people who want to do the UI code once. This is also mostly done already, by Xamarin.Forms, although desktop support is more recent and so is not at the same level as mobile support.\n\nSo if you want cross-platform .Net apps for mobile or desktop, follow Xamarin. If you want to create cross-platform apps for desktop only using platform-independent abstractions, contribute to Xamarin.Forms by using it, testing it, and writing and extending components for it.. > @mwpowellhtx let's assume WinForms/WPF can incorporate Core/Standard bits. Fair enough; targeting what runtime(s)? Framework 4.6.2, for instance?\nYou will in future be able to use WPF targeting .Net Core as a runtime instead of .Net Framework. You can already use .Net Standard libraries. Both runtimes support .Net Standard 2.0.\n\nyou are also assuming calls for a WinForms/WPF port into \"native\" Standard/Core, so to speak, is to the exclusion of other delivery modes... GUIs are indeed dominant across most platforms in the desktop world.\n\n.Net core does/will run across mobile devices and desktops, which have UIs, and servers, most of which don't. It would be similarly crazy to put \"send a text message\" inside .Net core as it would be to put \"display a ribbon\" in there.\n\nsome of us might like to run a GUI cross-plat, but are not willing to buy into the Xamarin cost of doing business.\n\nOf course I would be happy to see an approach with lower costs. I assume this refers to performance or reliability? Unfortunately the community commentary about what Microsoft should do instead has not come up with a better approach, and has just ignored the serious problems posed by the current multitude of operating systems and platform types, expecting some sort of magic.\n\nWith a weak promise of WinForms/WPF comprehension coming in, let's say, v3.x, to be accurate. Until it happens, this will continue to be the criticism, at least for my part.\n\nThe ability of WPF projects to use .Net Core has very little relationship to cross platform development. It's a convenience for WPF developers, who can take advantage of developments and performance improvements in .Net Core, and for Microsoft which can stop developing .Net Framework and focus on .Net Core.. > Its completely within the realm and resources of Microsoft to make a cross-platform desktop UI system.\nYes but there is no business case for this. You are talking about desktop-only development (a niche already), where Mac usage is critical enough to warrant an abstraction layer (a much smaller niche: hobbyist apps, design apps?), but which don't need tailored design. The intersection of these requirements is approximately zero.\n\nGitHub made one for crying out loud, called Electron.\n\nThis is not a desktop platform. It is both desktop and mobile. It's also terrible.\n\nthe reason why they're still dinking around with Windows only UI platforms\n\nAny serious desktop or mobile OS has a UI platform. Windows has one. iOS has one. Android has one. Mac has one. A cross-platform UI system has to sit on top of native UI systems.\n\na good .NET based cross platform desktop UI is what developers want... [Microsoft's] upper level strategists are dinosaurs still holding onto the glory years\n\nAs everyone knows Microsoft lost out in mobile. Windows is just as dominant as ever in desktops. A cross-platform framework that is desktop-only is not solving any serious business problem.\n\nXamarin ... fine, its time to evolve past it. ... You make an abstraction over OpenGL and DirectX like every game engine ever made and layer a logical UI system over it.\n\nI assume your suggestion is to evolve Xamarin to use platform-independent graphics rendering. That's not too hard; you can implement SkiaSharp as a target platform effectively. You would still need native controls in a lot of places (e.g. phone calls, media playback). And you can implement this piecemeal, one control at a time, as an option for developers. So really this is a much less dramatic suggestion than it sounds. And some of the work is ongoing in Xamarin.Forms. Slowly because there is some demand for this approach but not much.. > Skype and Spotify\nYes these are large enough that they need Mac support. At that level you probably wouldn't want to use an abstraction layer but can afford to maintain a second UI. This can be done easily already in .Net. E.g. WPF app and a Xamarin.Mac app sharing backend, model, viewmodel, with just one view for each.\n\nbusinesses still develop internal desktop applications designed specifically to use their internal software\n\nExtremely rare that these need to cover Macs.\n\ngame engines ... Lets not forget VR also. \n\nThese are not desktop frameworks. Cross platform desktop development, i.e. adding Mac, is of very little relevance. These are very cross platform and need to cover consoles, VR systems, and phones in addition to PCs. VR is certainly not tied to desktop platforms and has minimal need for desktop-specific features.\n\n[Electron] is desktop only right now.\n\nOK sorry about that, my mistake. I still maintain it is a terrible platform: it fills a need to get desktop apps out if already have web tech. But the performance and memory usage are appalling. \n\nMicrosoft applications ... Office ... could easily be Electron apps.\n\nMicrosoft does use Electron for some new Office apps, to the detriment of users. E.g. Teams consumes more than 10x the memory of other Office apps that do a lot more, and is sluggish even on powerful desktop PCs.\n\nUnity would be a much better partner to invest in.\n\nUnity's technology is not relevant to creating standard desktop apps.. ",
    "djProduct": "@charlesroddie - It's refreshing to see someone who understands how absurd the notion of it being Microsoft's onus to develop WPF x-plat truly is. . ",
    "Depechie": "Just as reference, there is actually a cross platform effort based on UWP XAML outside of Microsoft: https://platform.uno/\nIf you still like XAML as UI markup, this lib works very wel... ( web, desktop and mobile ). ",
    "knarfalingus": "Started over Feb 6 and not getting now, so probably a transient issue. Closing.\n. ",
    "bleroy": "Hi. Yes, lots of people have ported their code to Core. Since you seem to be working on a web app, you should look at ASP.NET 5 and MVC 6, which are the web platforms built on .NET Core. There will definitely be problems to overcome, as not everything that is available with .NET Framework is available on .NET Core. The API port tool can help you assess this by evaluating your current code for compatibility. To go beyond that would require more specific questions, which you should be able to get answers for either on the forums (https://forums.asp.net/1255.aspx/1?ASP+NET+5 or http://forums.dotnetfoundation.org/), or on Gitter.\nSince this is not a bug, but questions, I'm going to close the issue.\n. I second @terrajobst that doing that on a separate repo would not be optimal: we already have quite a few, and it seems like this is a good fit for this as it's general purpose. Seems like an Announcement tag would do the job quite well.. Are we talking about general purpose and unified GPIO APIs (with abstracted support for universal protocols and interfaces such as I2C), that can then be specialized in hardware-specific libraries?. I like the idea of a blog post with code samples, using one of the available libraries then.. Nit: the proper capitalization is \"GitHub\".. Can we have this also available on this repo, instead of on your GH?. Nit: backticks missing on the second URL.. Missing json after the three backticks.. Should be \"Only supports SourceLink with the Portable PDB format.\". Is there a plan to fix that eventually? It looks like something that could potentially lead to big problems down the road since it's common practice to refactor web sites with permanent redirects to maintain old URL schemes. If GitHub were to do something like that, it would break debugging on lots of libraries.. Ah, well, in that case, you can use js instead and put it in a comment: // ..... Oh, sorry, you're right. For some reason I misread this.. ",
    "kika123": "Windows 10 IoT Core runs on the NT kernel and supports .NET Core\nCE is near-abandonned now\n. Do that MCU have a GIC(Cortex-A7,A9,A12,A15,A17 have one, but not the Cortex-A8)?\nAnd does it have NEON?\nIf yes for both, then Windows IoT is relatively easy to run on the hardware\n. to clarify, you can run IoT on MCUs without NEON, but MS doesn't make interrupt controllers HAL extensions public\n. GIC => Generic Interrupt Controller\n. no NEON means that you are screwed, as your core will only be able to run MinWin Windows 7 builds, that no one here is allowed to share(too strong NDAs)\n. sorry about the typo, I meant GIC, not NEON for  to clarify, you can run IoT on MCUs without NEON, but MS doesn't make interrupt controllers HAL extensions public \nnewer Windows builds are compiled with NEON, which is an instruction set extension\n. ",
    "GerhardKreuzer": "Ok, but I have to use an ARMA5D3 MCU which is op-code compatible to ARMV7, as I found out. So is Win IOT running on that MCU or not? Is .net core running on that MCU or not?\nWith best regards\nGerhard\n. .. so there is no NEON on that chip. So what does this mean? I have to use SPI interface in slave mode and some serial lines.\nWith best regards\nGerhard\nVon: Mohamed MEDIOUNI [mailto:notifications@github.com] \nGesendet: Donnerstag, 25. Februar 2016 09:50\nAn: dotnet/core\nCc: GerhardKreuzer\nBetreff: Re: [core] WEC2013 on ARM7 (#47)\nto clarify, you can run IoT on MCUs without NEON, but MS doesn't make interrupt controllers HAL extensions public\n\u2014\nReply to this email directly or view it on GitHub https://github.com/dotnet/core/issues/47#issuecomment-188673260 .  https://github.com/notifications/beacon/AEA-548oOyD3Ts7NgXI9Ds_bkxZm72hDks5pnre9gaJpZM4HCF4R.gif \n. .. for what GIC stands for? Searched the manual, no hit \u2026\nVon: Mohamed MEDIOUNI [mailto:notifications@github.com] \nGesendet: Donnerstag, 25. Februar 2016 09:45\nAn: dotnet/core\nCc: GerhardKreuzer\nBetreff: Re: [core] WEC2013 on ARM7 (#47)\nDo that MCU have a GIC(Cortex-A7,A9,A12,A15,A17 have one, but not the Cortex-A8)?\nAnd does it have NEON?\nIf yes for both, then Windows IoT is relatively easy to run on the hardware\n\u2014\nReply to this email directly or view it on GitHub https://github.com/dotnet/core/issues/47#issuecomment-188672100 .  https://github.com/notifications/beacon/AEA-5_4XmpVdDDdpRCzmZyy-tYKWMwcDks5pnrZ9gaJpZM4HCF4R.gif \n. ",
    "gkhanna79": "@richlander can comment on the overall platform support roadmap for .NET Core but supporting WinCE is not on the cards for now.\n. @weshaggard PTAL as well.\n. CoreCLR section LGTM\n. Resolving event is the thing you want and is equivalent to what AppDomain.ResolveAssembly is about.\n\n\"var assembly = assemblyLoadContext.LoadFromAssemblyName(assemblyName);\" results in a cyclic loop.\n\nThis happens because you are attempting to load an assembly whose dependencies are not yet loaded and thus, since they cannot be found, we invoke the Resolving event again. This behaviour is what the Desktop would also demonstrate.\nCC @rahku . Can you please share a repro for this?\nAlso, can you please move this issue to CoreCLR repo?\nCC @rahku . To understand this better, please share a repro for the recursion you are running into.. > There is no infinite-loop detection logic in the assembly loading process.\nThe scenario above is an implication of how Resolving event is implemented by the app. Resolving event implementer needs to own the policy of how it should figure out the loading of an assembly that is already marked missing. \nAnd given that it is trying to perform a load on something that was already determined to be missing (which is why Resolving event was invoked) sounds incorrect.. Yes, this has been added in 1.2.0 (see https://github.com/dotnet/corefx/commit/5fde04fff39a6325e7ed5594807023f6958766ff#diff-f385e94efa80f66e8f1ee5d41032af30). \nCC @rahku \n. LGTM.\n. > Exec format error\n@jinhale This error usually means that one is trying to execute binaries corresponding to an architecture that is not supported on the machine.  Can you please confirm that the host machine and binary architectures are the same? That said, please also help confirm the following:\n1) Your steps above work on Debian 8.2\n2) Are you able to use https://dotnetcli.blob.core.windows.net/dotnet/master/Binaries/Latest/dotnet-linux-x64.latest.tar.gz on Debian 8.7 to execute a basic HelloWorld application?. 64bit binaries do require a 64bit machine running 64bit OS. Please do share your findings once you have tried the suggestion.. @jinhale Please have a look at Daily Build section at https://github.com/dotnet/core-setup/blob/master/README.md that describes the architectures we support for various platforms.. > was just telling me something broke them for acquiring the runtime from core-setup builds but we should fix that\nThe scripts above are hardcoded to 1.0.x layout in the blob store, which had changed in 1.1.0 for better organization but CLI never targeted 1.1.0 (until probably now) and thus, never saw it.\nThe key issue is that https://github.com/dotnet/cli/tree/rel/1.0.0/scripts/obtain needs to become resilient to various .NET Core releases. I am already on an offline thread with Peter to get this fixed.. Issue moved to dotnet/corefx #19175 via ZenHub\n. Why is this required?\nCC @schellap \n. CRT Dependency: \nOn Pre-Win10 OS, the only dependency is uCRT Windows update that can be installed from https://www.microsoft.com/en-us/download/details.aspx?id=48234. Alternately, folks can install the VC redist if they prefer from https://www.microsoft.com/en-us/download/details.aspx?id=48145.\nYou can point folks to https://blogs.msdn.microsoft.com/vcblog/2015/03/03/introducing-the-universal-crt/ for details. \nOn Win10+, this is available out of the box.\nOS Dependency:\nWe should list all the supported OS platforms and architectures.\nFor Windows, you should call out that for OneCore based OS SKUs (e.g. the ones that are not full server or client - like Nano) need to have Reverse Forwarders in their OS image.\n. Where are we calling out the list of supported OS platforms and architectures since that is part of the pre-req as well?\n. Also, see:\nhttps://social.technet.microsoft.com/Forums/en-US/e08daebc-c298-4932-a9d7-ff08fabf9536/nano-server-packages?forum=NanoServer\nSome formal definition at https://blogs.technet.microsoft.com/windowsserver/2015/11/16/moving-to-nano-server-the-new-deployment-option-in-windows-server-2016/\n. Can we point this to the pre-req document @blackdwarf wrote so that folks can install the required dependencies (which is what these \"issues\" are about)?\n. ",
    "psibernetic": "Right now the templates are under the Web subsection.\n. Right now the templates are under the Web subsection.\n. This is a Resharper bug, I finally found how to suspend it. Leaving this here as a FYI.\n. This is a Resharper bug, I finally found how to suspend it. Leaving this here as a FYI.\n. ",
    "Pilchie": "There will be a new \".NET Core\" node that will include a \"Console application (.NET Core)\" template and a \"Class Library (.NET Core)\" template, instead of the \"Console Application (package)\" and \"Class Library (package)\" templates that are currently under Web.\nI forget where we landed on also showing a web template under .NET Core.  @cartermp do you know?\ncc @rchande\n. Can you try running devenv /setup as an administrator?. @BillHiebert is this yours?. @vijayrkn - there is nothing tracking this on the project system side.  \nAlso tagging @dsplaisted here.. dotnet/project-system.. dotnet/project-system is probably the right repo.\n@cdrnet can you try adding a <Visible>False</Visible> metadata to your <None Include?\nAlso, are these packages being referenced from SDK style projects, or regular ones? If regular, using packages.config or <PackageReference> (or project.json)?. This is a NuGet issue with packages.config, not related to .NET Core at all.  Adding @rrelyea . This happens because the solution explorer doesn't know what name/path to display the file under the project folder with the Link metadata.  Adding Link=\"XamlResources.xaml\" to the <Page> element makes it show up.\n@lifengl I wonder if we could consider a default for Link metadata if it doesn't appear in the file?  Also @dsplaisted and @nguerrera and @davkean.. Same here (with https://github-issue-mover.appspot.com/). \ud83d\ude26 \nError creating new issue: NullError: Cannot call \"ez\" on null\nAnyone know who owns that issue mover?. Also adding @DustinCampbell . ",
    "sayedihashimi": "@Lewiscowles1986 we don't have a date, we are still working through it. Not trying to be secretive, just don't have any info to share currently.\n. @blackdwarf let's start with https://github.com/dotnet/roslyn-project-system/issues the team can move it if that's not the right spot.\n. @blackdwarf I went ahead and created https://github.com/dotnet/roslyn-project-system/issues/285 to replace this. Going forward please create the issue yourself  (or ask the OP to do so) with the following info.\n- URL to original issue\n- Github ID of the OP\n. @prafullbhosale let's discuss later today when you get in the office.. ",
    "leena-v": "@roncain Appreciate for your quick response. Could you please suggest which is the best way to add a third party wsdl api reference to a .net core dll? is this feature available?\n. ",
    "mlacouture": "Hi  @leena-v, I'm assuming you mean a service reference when you refer to 'a third party wsdl api reference', if this is the case using the WCF Connected Service extension Ron pointed at previously is the way to go.\n. ",
    "saurabh500": "@misnor I faced a similar problem and found that Dotnet CLI should be installed at a path which doesn't have spaces in it. \nAre you installing in C:\\Program Files\\dotnet ? \nI changed my installation path to C:\\dotnet and I can run the Hello World app. \nThis is only a workaround\n. @Petermarcu I don't know much about SSRS and its integrations. . It should go to Corefx. What is your OS that you are running the above steps on @deanilvincent ? . @deanilvincent From the screen shot it is Windows. . My name appears twice. I changed my email address but my Github alias stayed the same. Can these be consolidated via Github handle? \n. ",
    "mairaw": "@blackdwarf You mentioned someone was working on a fix for this, correct?\n. @ryanelian and @jkristia, I've created the following issue on the core-docs repo to improve discoverability of this information:\nhttps://github.com/dotnet/core-docs/issues/473\n. Wondering if you should add the contributors of core-docs to this list too? Not that my name would show up anyway. :smile: \n. I remember seeing this issue reported before and the answer was that custom paths would be disabled from the installer in the future but can't remember where I saw this. @ericstj do you know anything about this?\n. The right brand name would be OS X (until the new macOS comes :smile:). Also, are these supported in RC2 already @Petermarcu?\nBecause now we have a topic on this subject on the docs site too, so I'd like to keep up-to-date: https://dotnet.github.io/docs/getting-started/installing/system-reqs.html\n. Maybe this could explained here: https://docs.asp.net/en/latest/fundamentals/logging.html\n@danroth27?\n. Thanks @danroth27. Had trouble reading on my phone this morning. So, the function is behaving as expected and the behavior is documented. I think this issue can be closed then, @emailtowalter.\n. We're actually changing all the references of OS X to macOs in the docs and just leaving the ones that specifically talk about an OS X version. Not sure if it's something you wanna do here too.\n. /cc @leecow @richlander \nWe should also fix the reference to OSX.\n. Have you tried following the process documented here: https://docs.microsoft.com/en-us/dotnet/articles/core/porting/index?\n. @divega can you help with this EF question?. Maybe you guys would also benefit of having an issue template as @BillWagner did for core-docs:\nhttps://github.com/dotnet/core-docs/blob/master/.github/ISSUE_TEMPLATE.md\nThen this information would surface when the person is actually creating the issue. \n. should we also add the docs repos?. I agree with @svick's point on the docs. I think we should also add https://github.com/aspnet/Docs which hosts ASP.NET and ASP.NET Core docs. Other than that, LGTM.. It seems that a doc could be helpful indeed. . Fixed the small nit for @richlander \ud83d\ude04 . Sounds good. Should we also add the link to each Known Issues file from here?. also, is there a place where you have the full OS support matrix? We do link to this one but then for 2.0, only macOS 10.12 is supported not 10.11 correct?. @Petermarcu, @weshaggard has created an issue for us to add that: https://github.com/dotnet/docs/issues/2843 but I'm still working on CLI updates. I'll include you on a thread about this offline.\n. Yes, we need to add the PlatformNotSupported details. It has been in my mental backlog for a while. I've opened an issue to track this: https://github.com/dotnet/docs/issues/2934\nCan you provide more info on the soft deprecations @bartonjs? We can include warnings or remarks about those. But I'll need more details.. @karelz I made the changes you suggested. Please take a look. \n@janvorli can you please review this? I wanna make sure I didn't introduce any errors.. I think this is due to the fact that we added Platform extensions assemblies for earlier releases and we stopped doing that for 2.1 and only added shared framework assemblies. The ones for .NET Core will be removed and we'll add a new moniker for platform extensions until our build process is smart enough to identify different packages and their targets. \nWe're working on adding the extensions now with https://github.com/dotnet/dotnet-api-docs/pull/590 and we'll have to try to remove extensions from .NET Core next. We ran into some issues last time we tried to do this.. nit: missing comma after RC2\n. nit:I think a comma would help with readability here after aware of\n. It would be good to double check links. This one for example is broken: https://github.com/dotnet/cli/blob/master/Documentation/intro-to-cli.md\n. Instead of RTM, should you say 1.0 since you list 1.1 below?\n. Lot's -> Lots \n. projects's -> projects'\n. typo: contantly \n. This seems lost in the text. Perhaps move it to the first paragraph? Also, should we link somewhere or give more info on what this means? How would a customer know if their computer has that? It's not something we typically call out in a minimum system requirements, I think.. \"To file an issue, make a PR, or engage on specific topics, it is best to engage with developers working on the right repo. A largely complete set .NET Core repositories follows.\" is a bit hard to read.\nSuggestion:\n\"Different individuals (or teams) track different repositories. So, you'll get better results if you file an issue, make a PR, or engage on specific topics on the repo specific to that work. The following list shows the main .NET Core repositories:\"\n. .NET Core framework could be confusing to folks IMO. url should be on the same line, also should it have a different link text than the section title?. is this the best link for newbies to download .NET Core?. Stack Overflow (with a space). I tend to think of latest as the latest supported, not the daily build. Good catch, It wasn't intentional.. ",
    "Annih": "Seems to be fixed in 1.0.1.001091 dev but I couldn't find the commit that fixed this\n. ",
    "richardszalay": "Answered here (tldr: \"yes\"):\nhttp://stackoverflow.com/questions/34983390/is-the-dotnet5-4-tfm-forward-compatible-to-rc2\nhttps://github.com/NuGet/Home/issues/1691\n. Is that syntax valid for RC1 or just RC2?\nIf RC2, does that mean that there's no way to publish a net-core-targetting-pcl package in RC1 that can be consumed by an RC2 project without releasing a new version?\nIf RC1, ignore that second part.\n. Just to clarify, the purpose of importing dotnet5.x would be to support consuming an RC2 library from RC1, correct? (Otherwise I'm failing to understand why I would include it)\nEdit: Wait, I think I understand now - \"import\" allows an RC2 \"netstandard\"-targetting application to consume an RC1 \"dotnet5.X\" library like it was targetting netstandard.\n. Closing. Based on conversations in  linked issues, my \"edit\" assumption is correct.\n. ",
    "davidfowl": "Unfortunately, that's the wrong answer :smile: . dotnet5.x will not work with netstandard1.x. To work around this, you'll need to specify an imports statement:\nJSON\n{\n    \"frameworks\": {\n        \"netstandard1.5\": {\n            \"imports\": \"dotnet5.6\",\n            \"dependencies\": {\n               \"SomeDependency\": \"1.0.0\"\n            }\n         }\n     }\n}\n. > Is that syntax valid for RC1 or just RC2?\nRC2, part of the move is unifying dnu restore and nuget restore. DNU will be gone by the time RC2 ships. NuGet currently supports \"imports\" but not DNU, here's an example https://github.com/dotnet/cli/blob/master/src/Microsoft.DotNet.ProjectModel.Workspaces/project.json#L14. in RC2, we're adding support to make this an array so you can specify multiple overrides. https://github.com/NuGet/Home/issues/1962\n\nIf RC2, does that mean that there's no way to publish a net-core-targetting-pcl package in RC1 that can be consumed by an RC2 project without releasing a new version?\n\nCorrect. We want to keep netstandard clean, so it'll likely be a year or so before people can fully remove imports. This allows us to remove any backwards compat burden from the TFM and allows users to move forward with existing packages.\n. It's not very clean. We're looking at moving to a model where you always develop portable apps but you can choose to deploy standalone at publish time.\n. This looks like it might be a kestrel issue. Please file a bug on https://github.com/aspnet/KestrelHttpServer\n. I think this is fixed in msbuild. In project.json you just need to use the \"right\" case.. > Equally confusing - I hear that dotnet 1.1 is moving from project.json to csproj.\nThat's not quite right. The toolchain and the runtime are separate. Right now the released .NET Core Tools still target project.json as the MSBuild support is still heavily being developed. If you want to use the new csproj then you need to acquire a pre-release build of the .NET Core Tools.. Yes, we're in the thick of it. Once we have shipped msbuild support in a non-prerelease form, all things will be updated to use it. Right now we're a bit staggered.. Does your project have a global.json? Did you install vs2017? . https://docs.microsoft.com/en-us/aspnet/core/. @Ponant do you have a minimal repro that you can post to GitHub?. @Ponant Where's the project that fails? Can you write some instructions on how to reproduce the problem?. @Ponant the project you put on github doesn't have any package references:\nhttps://github.com/Ponant/AntiforgeryCryptoInternalCore20Preview2/blob/100d00de42077180be7a7afc1d1526321ddc0991/AntiforgeryCryptoInternalCore20Preview2/AntiforgeryCryptoInternalCore20Preview2/AntiforgeryCryptoInternalCore20Preview2.csproj\nI'm still not clear on what you're expecting. Did you mean to add some package reference?. That type isn't in the preview2 version of the Microsoft.AspNetCore.Antiforgery package. That's why it's not resolving. \nIt was in 1.1.x -\n https://github.com/aspnet/Antiforgery/tree/rel/1.1.0/src/Microsoft.AspNetCore.Antiforgery/Internal\nIt's missing from preview2 - https://github.com/aspnet/Antiforgery/tree/rel/2.0.0-preview2/src/Microsoft.AspNetCore.Antiforgery/Internal\nIt's back in dev - https://github.com/aspnet/Antiforgery/tree/f292fa8db5fbf89ab80eaff7f4c8a469fbe6813b/src/Microsoft.AspNetCore.Antiforgery/Internal\nThese types are what we call \"pubternal\" they're not real public API, so they can go missing from version to version that's why they are in an \"internal\" namespace. However, they can be useful if you're on a particular version of the framework.. @Ponant you might be better off calling SHA256.Create(). I believe the only way to do this today would be to use C/C++ as a bridge between the 2 languages. Also be careful as you need to make sure GC references are tracked between the 2 runtimes (if you pass GC handles back and forth). I believe Xamarin Android does this today but I don't know the details.\n@migueldeicaza this seems up your alley?\n/cc @jkotas for ideas. @heartlocker you should post a sample. I'm sure there are others that would appreciate it.. This has nothing to do with .net core. On top of that, adding the same comment to multiple issues is bad form, please avoid that.. /cc @tmat . @chintan3100 That's hard to know without more data. Are you talking about the time to communicate with an external api via HTTP? Or the time it takes your API itself to respond. Do you have any more specific data (Have you tried using application insights to measure?).. How did you run the application?. It's likely something to do with how the process is being launched. dotnet run doesn't forward control + c to the child process.. @foo-baar if you hit stop debugging it works fine.. Your code has is expecting to inject s CorecContext but you configured an AppContext in your code. Dependency injection doesn\u2019t work that way. You need to specify the service type as CoreContext.\nYes this issue belongs on asp.net. @Petermarcu is right. \n@JedatKinports if you cd to the path where the DLL is it will work. The default content root (where configuration files are searched) is the current working directory, not the dll folder.. @Jacquers if you look at Help -> About in your visual studio installation, what version of Nuget are you running:\n\nHere's mine.. Is your coworker using the same version of visual studio as you (and nuget?)?\nCan you do me a favor and look at:\n%userprofile%\\.nuget\\packages\\microsoft.aspnetcore.authentication.abstractions\\2.0.1\\\nAnd open up the nuspec and paste it in here. \nAlso if you downgrade to 2.0.0 does it start working again?. > If I downgrade to .Net Core 2.0.0 Visual Studio does not pick it up in the list of available frameworks.\nCan you show your project file?. This is by design. There is no interop story beteeen ASP.NET Core and WebAPI. .NET Standard does not apply to different ASP.NET versions (Core and System.Web). Can you reproduce this locally? . Don\u2019t write services that depend on the http context that need to be used in background threads. That won\u2019t work. If you need state then you\u2019ll need to copy it from the request and pass it to the background thread.. aspnet/Docs. Google's GPRC server doesn't integrate with DI, nor does it have a middleware pipeline (AFAIK). We haven't done enough work yet in this area to give a definitive answer but I can tell you the current thinking (at least my thinking). \n- We're working on HTTP2 support right now in Kestrel\n- Support GRPC as a feature within MVC itself\n\nBut the way I am doing is bit ugly, I myself is not satisfied with it. I did refer to some of the git repositories which has some solution like\n\nThe sample has a bunch of problems but to your point there is no guidance here and we could do a better job by working with google to come up with something that fits more naturally. . > So if someone want to work with dotnet core with grpc framework, then they have to cook their own project structure(like the one in the link)?\nYou'd probably host the GRPC server side by side with the main server instead of replacing it since it doesn't compose very well. For middleware, you'd have to use whatever google provided. Basically, the GRPC support that exists today from Google is a different framework that doesn't integrate at all. I'm not sure integrating it is trivial without design changes to their stack but I haven't looked deeply enough to make that call.\n\nWhen will the points you mentioned about http2 support and grpc as a feature available ?\n\nHTTP2 is slated for ASP.NET Core 2.2 GRPC would be after that (GRPC requires HTTP2).. That's not enough information to help you solve your dependency issues.. Can you show your entire csproj and .runtimeconfig.json (this is in the bin folder). @buehler Can you also specify your runtimeconfig.json. You posted your deps.json which is less important.. @buehler So this is a class library, not an application?. cc @bricelam . cc @javiercn . \ud83d\ude04 . I don't know that we have a definitive answer as yet and the GRPC experience while great isn't nearly as smooth (as of writing) as the WCF experience. I would say that it's definitely going to be one of the main RPC option of choice going forward but it;s a bit early to say that this is THE blessed new way.. You can already do this on the server side with Kestrel, the custom transport. We already have support today via libuv for named pipes/unix sockets. We could add this support natively to the socket transport or write a named pipe transport.. @simonferquel Yes I don't think the libuv transport supports named pipes (it needs some tweaks) but it does support unix sockets. We'd need to write another transport for the stream based support. File an issue on https://github.com/aspnet/aspnetcore. @simonferquel Ah I would start with a separate package for now but still file the issue because we've likely going to add unix socket support to the socket transport. Named pipes is less likely at least for this release.. cc @rynowak @pranavkm . ",
    "scionwest": "Asked this in the wrong repository.\n. ",
    "CreativeManix": "I do have same issue\n. ",
    "SMASH1337": "One issue you have is there's errors in your restore.\n. One issue you have is there's errors in your restore.\n. ",
    "tiomke": "maybe you choose the wrong NuGet Feeds, the default Feed don't have NETStandard.Library yet.\ntry \ndotnet restore -s https://myget.org/f/dotnet-core\nor write a NuGet.Config file adding the myget feed into it.\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <!--To inherit the global NuGet package sources remove the <clear/> line below -->\n    <clear />\n    <add key=\"dotnet-core\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\n    <add key=\"api.nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n    <add key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" />\n  </packageSources>\n</configuration>\n. maybe you choose the wrong NuGet Feeds, the default Feed don't have NETStandard.Library yet.\ntry \ndotnet restore -s https://myget.org/f/dotnet-core\nor write a NuGet.Config file adding the myget feed into it.\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <!--To inherit the global NuGet package sources remove the <clear/> line below -->\n    <clear />\n    <add key=\"dotnet-core\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\n    <add key=\"api.nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n    <add key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" />\n  </packageSources>\n</configuration>\n. ",
    "AndreyMonastyrskiy": "After dotnet restore, i try to run dotnet run and get this error:\nCan not find runtime target for framework 'DNXCore,Version=v5.0' and RID's 'win7-x64'. Possible causes:\n1. Project is not restored or restore failed - run dotnet restore\n2. Project is not targeting runable framework (netstandardapp* or net*)\nwhile dotnet restore run i have error:\nerror: The HTTP request to 'GET https://api.nuget.org/v3-flatcontainer/system.io.filesystem/index.json' has timed out after 100000ms.\nInternet connection is up, nothing blocked.... how to fix this error?\n. ",
    "adrua": "hi, \nare you update  to .NET Core 1.0 for Visual Studio?. \nPlease change your frameworks list in 'Project.json' by \n\"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"dependencies\": {\n        \"Microsoft.NETCore.App\": {\n          \"type\": \"platform\",\n          \"version\": \"1.0.0\"\n        }\n      },\n      \"imports\": \"dnxcore50\"\n    }\n  },\nrebuild your application\nGood luck\n. ",
    "mms-": "System.Addin seems to be forgotten by the .Net team perhaps because it's only mean for larger projects, though it's still just as relevant, even in the new .Net Core/UWP env. With nothing to replace it, and with .Net Remoting going away, it may finally be time to update it. Why not release it on Nuget? With PCL implementation to allow UWP/Net core usage.\n. ",
    "TJSoftware": "I did ask in a few chat rooms (gitter, jabbr) about this.  Pinpoint Towers thought that David Fowler might be working on something along these lines.  Outside of that I have not heard of anything concrete.\n. ",
    "bitbonk": "@davidfowl once promised a blog post about it. But it seems it never happened. https://twitter.com/davidfowl/status/703475472592572416\n. I can't share the whole application because it is too big, but this is basically what we do:\nOur root applications are (have now become) regular C# WPF application projects. In System.Windows.Application.OnStartup we call into a mixed mode (C++/CLI) assembly to initialize MFC (using a ref class MfcInitializer).\nMyApp.cpp in the mixed mode assembly:\n```c\n// static instance, with is declared as follows:\n// class _declspec(dllexport) CMyApp : public CWinAppEx\nCMyApp* myApp;\npublic ref class MfcInitializer\n{\npublic:\n    static bool Initialize()\n    {\n        myApp = new CMyApp();      \n        ComponentDispatcher::ThreadFilterMessage += gcnew System::Windows::Interop::ThreadMessageEventHandler(&MfcInitializer::OnThreadFilterMessage);\n        ComponentDispatcher::ThreadIdle += gcnew System::EventHandler(&MfcInitializer::OnThreadIdle);\n        return theApp->InitInstance() != 0;\n    }\nstatic void Exit()\n{\n    myApp->ExitInstance();\n    ComponentDispatcher::ThreadFilterMessage -= gcnew System::Windows::Interop::ThreadMessageEventHandler(&MfcInitializer::OnThreadFilterMessage);\n    ComponentDispatcher::ThreadIdle -= gcnew System::EventHandler(&MfcInitializer::OnThreadIdle);\n}\n\nstatic void OnThreadFilterMessage(System::Windows::Interop::MSG %msg, bool %handled)\n{\n    ::MSG m;\n    m.message = msg.message;\n    m.hwnd = (HWND)msg.hwnd.ToPointer();\n    m.wParam = (WPARAM)msg.wParam.ToPointer();\n    m.lParam = (LPARAM)msg.lParam.ToPointer();\n    m.pt.x = msg.pt_x;\n    m.pt.y = msg.pt_y;\n    m.time = msg.time;\n    handled = ::AfxPreTranslateMessage(&m) != 0 ? true : false;\n}\n\nstatic void OnThreadIdle(Object^, EventArgs^)\n{\n    LONG lIdle = 0;\n    while (AfxGetApp()->OnIdle(lIdle++))\n    {\n    }\n}\n\n}\n```\nOur application has an extensibility model for MFC/C++ developers. They can write purely unmanaged MFC dlls that get loaded by us using LoadLibraryEx. The extensibility APIs are declared in a header file we deploy. This header file is also the place where class _declspec(dllexport) CMyApp : public CWinAppEx is declared. Extension authors can derive from a special plugin class that is declared as_declspec(dllexport). At runtime we load (LoadLibraryEx) an instantiate those classes.\nThe native MFC content is wrapped in a System.Windows.Forms.Integration.WindowsFormsHost which is then wrapped in a System.Windows.Forms.Integration.ElementHost which is then dispayed in a WPF panel.\n. Any update on this? I suppose at some point before the release of 3.0 you'd need to make a somewhat official statement. I would guess that the integration of MFC into WPF and WinForms Apps was one main things C++/CLI was used for. cc @onovotny. @jeffschwMSFT\nC++/CLI support is one thing and it is great to know that it is coming along. But what about the MFC support (which this issue is about)?\nThe developer in me kind of hopes that MFC will not be supported (so I have arguments to get rid of the old stuff) but my boss may think differently. \ud83e\udd37\ud83c\udffb\u200d\u2642\ufe0f. ",
    "gregg-miskelly": ":+1: \n. @blackdwarf I would suggest porting this to coreclr. Fixing this would require work from both the coreclr team and the VS debugger team.\n. /cc @tzwlai @caslan \n. Unless you are trying to debug into CoreFX, seeing a Cannot find or open the symbol file isn't actually a problem. We are planning to remove this message in the future (tracked with https://github.com/OmniSharp/omnisharp-vscode/issues/837).. @PeterKottas If symbols are loading, I am not quite sure what is going on. You are hitting the step-in command but the debugger is acting like you asked for a step over? Is the calling project also from the release configuration? If you open the disassembly window and step into the right 'call' instruction what happens?. @PeterKottas having any amount of release configuration bits may make things confusing/annoying, but you shouldn't be blocked like you are seeing. Mixing debug and release should actually be better than 'all release' as this will prevent some optimizations like inlining across modules.\nDo you have a project that you can share?. I don't have any additional feedback.. To be clear, if the question is \"can 'Go To Definition' be made to work with source link today\", then the answer is 'no'.. @NightWatchman a few questions:\n1. Do you have symbols downloaded for whatever dll contains the implementation of 'Challenge'? (check the modules window)\n2. If so: what happens if you try and step into that function via the disassembly window?\n3. If not: why is downloading symbols failing? (Check symbols information)\n. If you get a prompt about a source path than symbols were loaded successfully.\nQuestions:\n1. Did you get a prompt asking if you would like to download the source file?\n2. What version of VS do you have?\n3. What version of .NET Framework are you trying to debug?\n4. In the 'No Source' tool window (it looks like a document) there is a log of the places where the debugger looked, can you paste that in?\n. @Fruchuxs Can you go to 'Help->About Visual Studio' and tell us what version of VS you have (see first screen shot below)? Also, is the text in your \"No Source\" window (second screen shot)? \n\n\n. @Fruchuxs \nAfter downloading the new PDBs, did you go to solution properties, go to the \"Debug Source Files\" tab, and clear out the 'Do not look for these source files' pain?\nDo you have Tools->Options->Debugging->Enable Source Link support checked?\n. @ronenfe this means that the process you are debugging is still using the pre-compiled native image for the code you are referencing. Unfortunately, I don't know if there is a good way to start the xunit worker process directly under the debugger with the environment variable COMPlus_ZapDisable=1 set from before CoreCLR loads.. What this almost definitely means is that whatever version of Microsoft.AspNetCore.Mvc.Core.pdb that is loading in your app is somehow not on the Microsoft symbol server. Can you --\n\nPull up the modules window (Debug->Windows->Modules)\nRight click on the Microsoft.AspNetCore.Mvc.Core.pdb row\nJust to be sure, invoke 'Load Symbols' to force a load. This will likely bring up a file open dialog. Cancel out of that if it does.\nAssuming that doesn't succeed, right click on Microsoft.AspNetCore.Mvc.Core.pdb again, and invoke 'Symbol Load Information'\nCopy paste the relevant lines about trying to download from the Microsoft symbol server into here.. @Petermarcu duncangravill's issue isn't related to that - he can't even download the PDB.. @duncangravill to make sure I understand, your target app is running locally on Windows?. Symbol server will work on Linux starting with .NET Core 2.1 and VS 2017 version 15.7 (both need to be updated).\n\nThere aren't any great options for getting this to work with .NET Core 2.0. There are symbols zip files with each release (example). But I am not sure if they have a portable PDB for all the parts of the runtime or not. Hopefully someone else on this thread can comment more about this.\nYou would then need to copy the symbols into the target container next to the module, and for source you would need to clone the repo and check it out at the right tag.. @duncangravill If you open the Debug pain of the output window, and scroll up to the top, do you see something like this? This is a bug in the Docker Tools, which I believe they have fixed, but not shipped yet. I am trying to fugue out how to work around it.\nWARNING: The specified symbol cache directory 'C:\\Users\\greggm\\AppData\\Local\\Temp\\SymbolCache' is an invalid fully qualified directory name and was ignored.\nWARNING: Symbol server entries in the symbol path are being ignored because the symbol cache path setting is missing or an invalid path.. @duncangravill Thanks. The VS Docker Tools team did some work to improve this experience. Unfortunately that work didn't get done in time for 15.7, and further unfortunately my team didn't realize quite how broken things were without their work. This feature will get much better in 15.8.\nIn the mean time, you can work around this thusly --\n\nOpen a developer command prompt\nRun: \"%DevEnvDir%vsregedit.exe\" set \"%VSINSTALLDIR:~0,-1%\" HKLM AD7Metrics\\Engine\\{2833D225-C477-4388-9353-544D168F6030} ExcludeLocalSymbols DWORD 1\nRestart VS\n\nThis setting will get overwritten when you install a VS update, so you may need to redo this from time to time. . @duncangravill what URL was giving the 404? I haven't seen this issue.. @duncangravill: Thanks! What seems to be happening is that when we try to connect to GitHub with your credentials, GitHub doesn't like your credentials and so the SourceLink request fails. Visual Studio should probably try the URL again without authentication to handle cases where authentication isn't required.\nYou can probably work around the issue if you go to Control Panel and open the Credential Manager, switch to 'Windows Credentials, find 'git:https://github.com' in the list, and delete it.\nExample:\n\nCC @chuckries . The language services team is interested in leveraging SourceLink in Go To Definition. That work is tracked with: https://github.com/dotnet/roslyn/issues/24349\nHere are the work arounds I can think of today:\n1. You could just download the file manually from HitHub and open it. You can use the tag to make sure you have the right version.\n2. You could make a tiny console app and call an API you know is implemented in it. Now you can step in.\n3. (Windows debugging only) You could set a breakpoint by function name, and then right click on the breakpoint in the breakpoints window and invoke 'Go To Source'.. @foo-baar does David's suggestion work for you? \nIf not - does the process you are debugging get killed when you stop debugging? (diff the process list before and after)\nIf the process you are debugging gets killed - does your process spawn child processes?. @foo-baar Thanks. In that case can you file a bug at https://github.com/omnisharp/omnisharp-vscode/issues and we can see why you are running into this problem.. This issue tracks supporting ARM debugging for the vsdbg side: https://github.com/OmniSharp/omnisharp-vscode/issues/1562\nThe .NET Runtime likely also has work, but I don't know if they have an issue tracking it.. @IvanFarkas arm is now supported, but NOT arm64. I opened https://github.com/OmniSharp/omnisharp-vscode/issues/2105 to track arm64 support. Also, .NET Core 2.0 doesn't support debugging on either ARM or ARM64 - you need 2.1 for ARM, and I don't believe anyone has every tested ARM64.. Assuming this happens only when you are debugging - this is a known bug in the .NET Core project system in Visual Studio. I can't seem to find the bug to reference it at present. You can open or search for a problem through Visual Studio's Report a problem feature if you want to track it.. Found it. Here is the issue: https://developercommunity.visualstudio.com/content/problem/88707/debugging-multiple-dotnet-core-applications-all-te.html. @bbski As of VS 2017 version 15.5 you can embed sources in your PDB, and Visual Studio will automatically open them. Does this solve your issue?\nhttps://stackoverflow.com/questions/42714352/embedding-c-sharp-sources-in-pdb-with-new-csproj. Microsoft/dotnet:2.0.5-runtime-stretch-arm32v7 is an arm32 image. So I don't see why you can't get debugging to work if you switch to a .NET Core 2.1 tag. Try Microsoft/dotnet:2.1-runtime-stretch-slim-arm32v7. See https://github.com/OmniSharp/omnisharp-vscode/issues/1562#issuecomment-348349242 for more info.. Not that it matters much, but I have no idea what blog post you are talking about. Microsoft employees aren't assimilated into a collective :).\nWe have tried ARM debugging with the .NET Core 2.1 preview 1 build. My team doesn't have doesn't have the hardware you are using, so I can't claim my team has tried your exact scenario.\nIf you want to provide more information, we can see if we can help. If you think you will get more help on whatever blog you are referring to, you are welcome to try that way too.. @pietrodicaprio do you see this for all variables? In all methods, or just some? \nAre you sure a debug version of your dll is being used? You can confirm/deny by:\n\nCopy the dll back to Windows from your container\nOpen a developer command prompt and run ildasm <path-to-dll>\nCheck View->Verbal CA Blobs\nLook for the 'DebuggableAttribute'\nCheck if the DisableOptimizations DebuggingModes flag (256) is set\n\nExample:\n  // --- The following custom attribute is added automatically, do not uncomment -------\n  //  .custom instance void [System.Runtime]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [System.Runtime]System.Diagnostics.DebuggableAttribute/DebuggingModes)\n  //           = {int32(263)}\n. Sorry for the delay.\nA VS Developer community issue would be a more logical home than this repo, so that probably makes sense. Please post the issue link here.\nBy chance do you have a project that is shareable and reproduces this issue?. I wonder if this should be at the top of the section rather than at the end since we probably would like folks to use SourceLink rather than copy/pasting the wheel.. Should we add:\n<!-- NOTE: Replace 'CodeFormatter' with the appropriate git remote -->\nOr replace it with 'origin' since it seems likely that that is the right remote, and what is used on line 26?. Should we say 'github' instead of 'git' here. Since this example is using GitHub URLs.. Suggest adding a comment:\n<!-- Write out the source file for this project to point at raw.githubusercontent.com -->. Can you fix this part also while you are updating? It should say: \"Supports Source Link as of C# extension version 1.15\"\n. After the first sentence, should we add \"This supports GitHub and BitBucket out of the box\"?\n. ",
    "tmat": ":+1: \n. Files an issue on Roslyn: https://github.com/dotnet/roslyn/issues/17666. >  I think our new PDB format has line information for everything\nWe haven't implemented that feature yet.\n\nMetadataToken order is - going forward - guaranteed to be source file order.\n\nWe can't guarantee that. In some scenarios, like Edit and Continue it is not true. Consider scenario when a member is added in between two other members during debugging.\nRegarding the SQL scenario:\nstring query = \"select something from somewhere wehere a = {0} and b = {1} and c = {2}\";\nstring f = Parameters.Parameterize(query, new { Username = \"Tony\", Department = \"Admin\", Group = \"Seniors\" });\nHow about using tuples instead of anonymous types? \nstring query = \"select something from somewhere where a = {0} and b = {1} and c = {2}\";\nstring f = Parameters.Parameterize(query, (Username: \"Tony\", Department: \"Admin\", Group: \"Seniors\" ));\nTuples have well defined ordering. You can easily read fields Item0, Item1, etc...\n. Just realized you won't be able to get element names from tuples like that. Maybe array of tuples?\nstring query = \"select something from somewhere where a = {0} and b = {1} and c = {2}\";\nstring f = Parameters.Parameterize(query, new[] { (\"Username\", \"Tony\"), (\"Department\", \"Admin\"), (\"Group\", \"Seniors\") });. @ctaggart FYI. @ctaggart I see SourceLink build task still depends on dotnet cli: https://github.com/ctaggart/SourceLink/blob/v2/SourceLink.Create.GitHub/GitCreateTask.cs#L42\nThat means it can't be used in repos that don't run their build thru dotnet cli. \nAnother issue: in repos that build thru dotnet cli the dotnet tool doesn't necessarily need to be on search paths. Can we avoid the dependency on dotnet completely?. @ctaggart I think ideally https://github.com/ctaggart/SourceLink/blob/v2/dotnet-sourcelink-git/Program.cs would be an msbuild task that can be called directly from msbuild as well as from a dotnet cli tool.. @ctaggart Ah, I see. I haven't noticed that project. Will check it out.. @ctaggart Cool. Seems to be working :). \ud83d\udc4d . /cc @nguerrera\nAt some point we had an idea that we could recreate a source project from information stored in the PDB -- it would require the compiler to add a bit more information to the PDB (such as unique ids of referenced assemblies and the compilation options used to build the assembly). But the idea hasn't been implemented yet.\nRe reference assemblies vs. implementation assemblies -- I could imagine that if the reference assembly is in a nuget package, we could provide UI (e.g. combo box in the editor) with a selection of target frameworks that the package includes implementation assemblies for and then you could select one and that would navigate to the corresponding source.  \nUPDATE: The above doesn't take into consideration the current debugging context. If we are attached to a process then we know what the current runtime is and thus should be able to find the corresponding implementation assembly automatically. The IDE is currently not taking the current debugging context into consideration in features like Go To Definition, but it perhaps could.. @GuerrillaCoder Not currently. It's a feature we are considering to add to VS.. Any chance the DLLs whose PDBs fail to convert are postprocessed by some IL rewriter (like ILLinker)?. We should also include info how to enable Portable PDBs in stack traces on 4.7.2 if the app wasn't built against 4.7.2.\nSomething like: \nhttps://github.com/dotnet/designs-microsoft/blob/symbols2/proposed/publishing-symbols.md#stack-traces. SourceMap encodes similar information to PDB. Since it's just JSON format it can presumably be extended and store any additional information that managed compilers need to store in PDB beyond what's specified by https://sourcemaps.info/spec.html. We could have used SourceMap. That said, the Portable PDB format is more compact and it's based on the managed metadata format that managed compilers already produce (i.e. ECMA-335 standard). It's optimized for both size and speed of access to various information based on common access patterns of managed debuggers.\nYou can find the specification here: https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/specs/PortablePdb-Metadata.md for comparison with SourceMap.. Github highlights this as an error if using the text type \"json\". Typo: \"Visaul\". Add a link to https://github.com/ctaggart/SourceLink. I wouldn't specifically called out \"Portable PDB\". We'll have support for Windows PDB as well. Perhaps as a not you can add that VS 2017 only supports this feature in Portable PDBs.. Again, I'd remove \"Portable\". Typo: \"availble\". Typo: \"originfal\". Typo: descripttion. Isn't the asterisk only allowed at the end of the document path?. Typo: aterisk. I wouldn't say the behavior is undefined. It is defined - the first matching one wins.. Typo: \"implentation\". We should include exact rules the debugger implementation uses when validating the data -- e.g. can't have more than one *, if present * must be the last character of the document name, etc.. Shouldn't the sort be stable?. It's coming, but we are not sure yet when we will be able to ship the Windows PDB support. . Sounds like something we should fix.. Yeah, I'd add it to the build task section as an example of an OSS tool that generates source link.. ",
    "AlexChesser": "This is a great write up. I really love the high level and historical overview. Documents like this are often hard to find but can really help developers make informed decisions... \nI can remember times in the past when I've asked questions like: \"Do we have to copy PDBs to production?\" and, \"What will happen if I turn off that Create PDB Files checkbox?\"\nThis high level theoretical overview allows me (and others) to answer those types of questions for ourselves. (Thanks)\nAnyways, If we're still \"pre-feedback\" I might also suggest linking the first mention of Roslyn to a similar document explaining what that is. From the point of view of a novice, \"Roslyn\" is often a term that is thrown around with the assumption that users know exactly what that is.  (At Microsoft it is probably true)\nAs a member of an external team however, I could recount a reasonably hilarious tale of folly and woe where a small team of developers spent way too long befuddled by an error message to which our response upon reading was: \"Who the heck is Roslyn?\"\n. Hey @czesiu it's an interesting question and I have to admit that I don't know the answer, but I did a bit of hunting to find out, and I suspect that answer is \"no for now, probably in future\". Though I'd also suspect that even the \"no\" might be supported by a third party somewhere.\nIf you look at the stack overflow answers for \"how do I play sound with C#\" you see people talking about the System.Media namespace:\n- http://stackoverflow.com/questions/5756855/c-sharp-play-sound-with-one-line-of-c-sharp-code\n- http://stackoverflow.com/questions/3502311/how-to-play-a-sound-in-c-net\n- https://msdn.microsoft.com/en-us/library/System.Media.SystemSounds(v=vs.110).aspx\nand if you go into the dotnet API reference you see that system.media isn't there yet:\n- http://dotnet.github.io/api/index.html\nIf you search the dotnet forums for Audio - you get a couple leads in terms of third party products that might be worth looking at in more detail: https://github.com/reignstudios/ReignSDK \nAnd you can also look towards UNITY (perhaps)\nIf I start to dig around a bit more, things start to get hazier.  Sorry I can't be more help. It's an interesting question. \n. @blackdwarf what about two new CLI commands for feedback?\ndotnet :)        -- send positive feedback\n dotnet :(        -- send negative feedback (includes system and diagnostic profile)\nThe user experience could plug into whatever internal systems you've got set up for feedback around VS Code and the like (that little smiley face button)\n\nCommand line & remote shell users could send their smiles and frownies directly from the affected  system. I'm only joking here, because I think an emoticon for a command line option is funny... but the use case isn't actually terrible\n. ",
    "noahfalk": "I made a follow up commit based on the feedback here: https://github.com/dotnet/core/commit/1beaf16021b93221a2554cd87a9056b7ac8af4e8\n@richlander - Thanks for editing!\n@AlexChesser - Its great to hear that these kinds of docs are useful and I fully agree about adding the Roslyn link. Thanks for very actionable feedback.\n. @tmat - look good?. @mikem8361 is our expert on dumps.  Sorry you are running into trouble! Feel free to start with me as the investigator and I can pull in others as needed. To help get us started:\n1) Could you post steps I can follow to try reproducing the problem?\n2) Can you let me know what you observed while debugging that lead you to your conclusions?. @joseclament - Are you aware of any .NET profiler or monitoring agent being used in your deployment environment? If not we should probably a open a new issue because there would be a decent chance that the root cause for you will be unrelated to the root cause here.. @joseclament - Glad you were able to get the bottom of it and very appreciated that you came back to post your findings in case others hit the same issue in the future! Indeed it looks like your issue had a similar symptom but different root cause than the other ones here. I created #1670 to track any further work there.\n@nil4 - Thanks for the repro! Let me try repro your issue so we can figure out if this is the same root cause or something else. . @nil4 - Thanks, I was able to reproduce the problem easily using your excellent instructions! Although the AppDynamics issue is slighly different than the NewRelic one (AppDynamics does not call ICorProfilerInfo::SetILFunctionBody or ICorProfilerFunctionControl::SetILFunctionBody) , the fix I submitted earlier today (#18322) does solve both issues at the same time.\nI wasn't sure if you were an employee with AppDynamics or a customer of AppDynamics? For potential short term resolutions to the issue you could either continue to use .Net Core 2.0 or use a daily build of .Net Core that has this fix as soon as the installers are ready for download (I'll write back again when they are). A little further in the future I'm attempting to get this fix into the official servicing releases for 2.1. I can also try to reach out to AppDynamics to see if there are any additional solutions available for the issue.\nLet me know if you've got any other questions or concerns?. Adding @tommcdon \n@mikem8361 sounded like it was on his todo list to look into but he is on vacation right now so there wouldn't be an update from him for a while.. ",
    "bartonjs": "Just as a quick guess, you might need to install OpenSSL (1.0.1 or 1.0.2): https://github.com/dotnet/coreclr/blob/master/Documentation/building/osx-instructions.md#openssl\n. @onecentlin @gguimaraesbr assuming you used Homebrew to install OpenSSL, it seems like you have only run one of the two commands.\nIf you run brew link --force openssl that should fix your problem.\nThe preview1 build could accidentally function without the link step, but we changed the library linking method for RTM (which is in the preview2 build of the sdk tools) to support loading copies from the current directory, which brought back the requirement of having symlinked the library into a system path.\nThe openssl tool version after that step should be 1.0.2(and a letter); 0.9.8 is not supported.\n. @ascarter It's possible to have the /usr/bin/openssl version as a higher precedent in your path. The important part is whether libcrypto.1.0.0.dylib is on the library loader path.  If you use Homebrew and brew link, then it'll be in /usr/local/lib/.  $HOME/lib/ and /usr/lib/ are also acceptable locations (by default),   (https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/DynamicLibraryUsageGuidelines.html#//apple_ref/doc/uid/TP40001928-SW21 for more information)\n. @mikeho $PATH is only for execution, and the openssl utility isn't actually used.  What we need is libcrypto.1.0.0.dylib and libssl.1.0.0.dylib; and they need to be in a standard rpath probing location, which is any of $HOME/lib, /usr/local/lib/, /usr/lib/, or the current directory.\nOr you can try altering the DYLD_LIBRARY_PATH environment variable to include /opt/local/lib (which is where I assume MacPorts put it); but the Internet seems full of people who complain that DYLD_LIBRARY_PATH overrides aren't as successful as advertised on El Capitan.\nPersonally, I'd just add symlinks in /usr/local/lib to those two libraries wherever MacPorts put them (unless MacPorts has a command similar to brew link, which puts them in that path for you... then I'd run that).\n. @mikeho Intriguing. I don't suppose you can give me a primer on making my machine look like yours?  (Like, how to get/use MacPorts, what options you've used (if applicable) and manual symlink commands you've done to try to remediate).\n. @mikeho Oh, good, I was concerned that the rules had somehow changed out from under me :smile:.\nGlad it's working for you now!\n. Okay, by my re-scan everyone who has chimed in has attained success; so I'm going to give a quick closing summary and close the issue:\nResolution Summary\nThe dotnet utility (or, rather, the cryptographic subsystems within the framework libraries) requires libcrypto.1.0.0.dylib (and libssl.1.0.0.dylib) to be present in a standard rpath location, e.g. /usr/local/lib/.\nHomebrew users using default paths\n$ brew link --force openssl\nThe primary effect of this command is to create a symlink from /usr/local/lib/libcrypto.1.0.0.dylib to /usr/local/Cellar/openssl//lib/libcrypto.1.0.0.dylib (and similalry for libssl.1.0.0.dylib).  It also links the openssl utility into /usr/local/bin, and creates other symlinks useful for building new libraries/applications against openssl.\nOther users (MacPorts, DIY, non-standard paths from Homebrew)\nYou need to create versioned dylib symlinks from a standard library directory to wherever your installed copies are.  For example:\nln -s /opt/local/lib/libcrypto.1.0.0.dylib /usr/local/lib/libcrypto.1.0.0.dylib\nln -s /opt/local/lib/libssl.1.0.0.dylib /usr/local/lib/libssl.1.0.0.dylib\nWhere the source path (/opt/local/lib/) may be different depending on your particular system and source of installation.\n. @AlyssaDaemon Did you do brew link --force openssl?  In particular, you're looking for /usr/local/lib/libcrypto.1.0.0.dylib.  (See https://github.com/dotnet/core/issues/173#issuecomment-229130612)\n. @AlyssaDaemon Sorry, just had to check; sort of like the IT question \"have you tried turning it off and on again?\".\nI can't think of any reason why the presence of Mono would affect loading that library.  It needs\n- libcrypto.1.0.0.dylib, from rpath\n- libssl.1.0.0.dylib, from rpath\n- /usr/lib/libc++.1.dylib\n- /usr/lib/libSystem.B.dylib\nThe first two dependencies should be met by brew install/link of the OpenSSL package.  The second two should just be there on the Mac.\nThe library asserts that in addition to the standard rpath it includes loader_path; so it will first try the directory the library itself is in before falling back to system probing.\nWhile the default probing path is $HOME/lib;/usr/local/lib;/usr/lib, it can be altered by some environment variables.  See https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/DynamicLibraryUsageGuidelines.html#//apple_ref/doc/uid/TP40001928-SW21 for more information.\nThe only things that I can think of at this point are:\n- Check that the /usr/local/lib symlinks are valid\n- Check that you don't have any of the rpath-changing environment variables defined (or, that if you do, you try unsetting them to diagnose the problem)\nYou're the first person who has reported that brew link --force openssl didn't fix everything for them, so I'm at a bit of a loss, advicewise.\n. Yeah, Homebrew fixed the part where the older version could bypass the block.\nWe'll be putting out new instructions soon, which don't involve brew link.\n. @kamcma The OpenSSL dependency is reduced, but not removed.  There's still quite a lot of work left, crypto's big :smile:.  https://github.com/dotnet/corefx/issues/9394 is the work/tracking issue.\n. @krzychu2 Try launching it as \"Start Without Debugging\" (Ctrl+F5).  I had a similar error and Ctrl+F5 let me see an error saying that the shared framework for version 1.1.0 was not found.  Then I ran the SDK installer from https://www.microsoft.com/net/core#windowscmd (https://go.microsoft.com/fwlink/?LinkID=835014) and everything was fine.\n. Your symlinks might not match where Homebrew put your libcrypto and libssl.\nThe quick check is\notool -L /usr/local/lib/libcrypto.1.0.0.dylib\notool -L /usr/local/lib/libssl.1.0.0.dylib\nWith a bad symlink otool -L will report No such file or directory.  If both libraries print their dependencies successfully then you've run into a unique version of the problem :smile:.  Assuming one, or both, fails, check the target of the symlink (e.g. /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib) to see what's up.  Perhaps, for example, your Homebrew was configured to install to somewhere other than /usr/local.. ::ponders::\nThat seems right to me.  The other thing to check, I guess, is what System.Security.Cryptography.Native.OpenSsl.dylib is trying to load.  The ideal answer uses rpath for those two references:\nsh\n$ otool -L System.Security.Cryptography.Native.OpenSsl.dylib \nSystem.Security.Cryptography.Native.OpenSsl.dylib:\n    @rpath/System.Security.Cryptography.Native.OpenSsl.dylib (compatibility version 0.0.0, current version 0.0.0)\n    @rpath/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n    @rpath/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n    /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 307.4.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.0.0)\nI don't really know how to determine what copy of System.Security.Cryptography.Native.OpenSsl.dylib is failing to initialize, other than to use gdb with follow-fork-mode=child.  Or, use locate and just check every one of them.... Yeah, it hopefully is a simple matter of having the debugger attached and breaking on process exit, then looking at the loaded modules to see which System.Security.Cryptography.Native.OpenSsl.dylib was running at the time.\nOne other thing to check is that you're not overriding DYLD_FALLBACK_LIBRARY_PATH, which is why dyld knows to look in /usr/local/lib/ in the first place.  The long answer is available at https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/DynamicLibraryUsageGuidelines.html#//apple_ref/doc/uid/TP40001928-SW12.. > Is there a doc/FAQ around setup?\nNot that I can think of off the top of my head.  @blackdwarf, do you have one?\nThis is slightly moot for the future, because .NET Core 2.0 on macOS will use Security.framework instead of OpenSSL, so the problem of making that one dependency work right has gone away (as of 4 days ago \ud83d\ude04).. The instructions at https://www.microsoft.com/net/core#macos haven't involved brew link in quite some time.\nsh\nbrew update\nbrew install openssl\nmkdir -p /usr/local/lib\nln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/\nln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/\nThat's the runtime directions.  If you're wanting to build corefx, there are some extra steps to make pkg-config happy.. For a dotnet application, or some other application?  How do you know you're getting 0.9.8zh?  (Note that these steps are only for the openssl libraries, they don't change which openssl command line tool has preference on the path). No worries, you're welcome.  I always get a bit worried that the directions don't work anymore when someone runs into trouble :smile:.. @pinaraf The back-compat package seems to be called libssl1.0.2: https://packages.debian.org/stretch/libssl1.0.2.  If you install that, do things start working?. @pinaraf Ah, yeah, I thought that sounded familiar... we fixed it two weeks ago: https://github.com/dotnet/corefx/pull/19070.  The latest daily builds should work on Debian 9.. @Petermarcu If it's badly pervasive, maybe?  libcrypto.so.1.0.0 (and libssl.so.1.0.0) is the name recommended by OpenSSL.  Debian is deviating from that recommendation and naming it libcrypto.so.1.0.2.  Preferring Debian's name above OpenSSL's recommended name on Ubuntu seems weird.\nThough, I guess that we could assert that libcrypto and libssl need the same SONAME version fragment and we load them locked, or not at all.  @janvorli, thoughts?  (I'm assuming that there was an aberrant libssl.so.1.0.0, but not also an aberrant libcrypto.so.1.0.0). @jobrien721 Does it happen right away, or is it after the process has been running for several minutes?. @jobrien721 Hmm.  Maybe they decreased the auto-lock timeout.  I think this is fixed for preview2 by https://github.com/dotnet/corefx/pull/20577.  I think the links from https://github.com/dotnet/cli/blob/release/2.0.0/README.md will let you get a current/almost-preview2 build.. @TingluoHuang The runtime is what no longer has support for 10.11 (and therefore the SDK automatically no longer has support).  We needed new functionality from 10.12 to make the cryptography stack not need OpenSSL.\n\nI haven't heard node.js drop OS supports for their runtime\n\nnodejs/node pull 5167 (avoiding the link 'cuz it feels weird) dropped support for Vista and prior.  That was the first hit when I Google'd \"node.js Windows support\".\nOccasionally one needs to change the minimum version to make use of new/different functionality.. Duplicate of https://github.com/dotnet/corefx/issues/22626.\nYou need to either use (HashAlgorithm)CryptoConfig.CreateFromName(algName) or (preferred) just use what you want, e.g. MD5.Create().. @mairaw Do we have a plan for incorporating the PlatformNotSupported details in Core into the docs?  And all of the other soft-deprecations that we're going to add to an analyzer pack?. https://github.com/dotnet/corefx/wiki/ApiCompat is one place that we have a lot of the data.  In addition to being in the PNSE section up top it's in the deprecated section at the bottom: https://github.com/dotnet/corefx/wiki/ApiCompat#systemsecuritycryptographyhashalgorithmcreatestring. Yep.  In .NET Framework networking, XML, and cryptography all live in one library (mscorlib).  In .NET Core they're in three separate libraries, and making this method work requires a circle:\n\nXML needs networking, because (even though we discourage it) DTDs can initiate downloads.\nNetworking needs cryptography because TLS/https have X.509 certificates.\nCryptography needs XML for ToXmlString/FromXmlString.\n\nThe easiest link to snip is the ToXmlString/FromXmlString methods.\nTechnically ToXmlString can be written without XML (like in .NET Framework's implementation, but FromXmlString requires an XML parser.\nMy recommendation would be to make a public static string ToXmlString(this RSAParameters rsaParameters) method, and a public static RSAParameters FromXmlString(string xml) method; borrowing from NetFx and CoreFx's SignedXml; and to ultimately try moving off of the XML representations.. > Wondering why this issue is closed. \ndotnet/core isn't the right place for issues like this.  This one belongs in dotnet/corefx.\nhttps://github.com/dotnet/corefx/issues/23686 is open, and marked for .NET Core 3.0.. I find it a little odd that we have non-LTS releases (and non-supported releases) listed under LTS.\nYeah, \"1.0\" is LTS, but the preview builds weren't.  And \"1.0.0\" is out of support (if I understand our policy correctly) since we'd immediately say \"jump to 1.0.5\" and see if we've already fixed your problem.  Likewise, 1.1.current was the first 1.1 build to be inherited into the LTS support cycle.\nSo I think I'd expect\n\n\"Current\" releases\n2.0.1 when it releases\n2.0.0 (also) until 30 days (or whatever the number is) after 2.0.1\nLTS releases\n1.1.next when it releases\n1.1.current (also) until 30 days (etc) after 1.1.next\n1.0.next when it releases\n1.0.current (also) until (etc)\nHistory\n2.0\nrelease date | 2.0.1 | release train | (empty) | links\nrelease date | 2.0.0 | Current | (empty) | links\nrelease date | 2.0.0-Preview2 | Preview | whatever date support ended (if applicable for preview) | links\n(etc)\n\n\n1.1\nrelease date | 1.1.2 | Promoted to LTS | (empty) | links\nrelease date | 1.1.1 | Current | whatever date support ended | links\n(etc)\n\n\n1.0\n2017/05/09 | 1.0.5 | LTS | (empty) | links\n(etc)\n\n\n\nSo it's clearer of \"these are supported\", and \"this is the history\" (and right next to the download link for a \"history\" build it says that it's out of support).  But that's easily a followup change.\n  . Assuming you haven't installed any runtimes since the last SDK install, you have runtime 1.0.5 (per https://github.com/dotnet/core/blob/master/release-notes/download-archives/1.0.4-sdk-download.md).\nHigh Sierra support was added to runtime 1.0.6, and the current runtime is 1.0.9 (https://www.microsoft.com/net/download/all).  Ideally, installing the 1.0.9 runtime (and leaving the SDK as-is) will fix your problems.. Oh, netcoreapp1.1.  I missed that previously (thought you were 1.0)  Did you also get the 1.1.6 runtime?  (A fresh SDK 1.0.4 comes with 1.1.1, I think, and you need at least 1.1.4). This is already on the CoreFx plan (https://github.com/dotnet/corefx/issues/20414).\n(But when I write it, where will all my rep come from?). No worries, it shows that there are customers who care about the feature :).. @ltworf That will be fixed in the next release of .NET Core 2.1 and .NET Core 2.2 (https://github.com/dotnet/corefx/pull/34443). Seems like it would be due to a change in JwtSecurityTokenHandler.  Nothing in corefx changed how disposability worked.\nSo, probably https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/?  (I don't know if we can move items from here to there). This is/was https://github.com/dotnet/corefx/issues/29942, it will be fixed in .NET Core 2.1.3.\nIn /etc/ssl/certs (assuming that's the path on CentOS) there's either a file that you don't have permission to read, or it's a symlink to a file you don't have permission to read, or it's a broken symlink.. There are two main possibilities.  One is you don't have any trusted roots installed.  The second is that you're seeing a problem that we've so far only seen on SLES15 and Fedora28 regarding the contents of the trusted roots store.\nI can't reproduce the problem on Ubuntu 18.04, I just did an update/upgrade and manually invoked sudo update-ca-certificates just to see if it was a new(ish) package update, but can't reproduce it.\nThe simplest diagnostic test is to set two environment variables before running your program:\nsh\nexport SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt\nexport SSL_CERT_DIR=/dev/null\nIf your program is successful after that, then this is the same as https://github.com/dotnet/corefx/issues/32224.. The cert store just makes the path via Directory.Create(string), which should be the same as mkdir -p (uid:pgid and umask).\nIf the command which created the directory was run by sudo and not sudo -H then root (or whomever the sudo was as) created it using the $HOME value of the login user.\nsh\n$ sudo bash -c 'echo $HOME'\n/home/jbarton\n$ sudo -H bash -c 'echo $HOME'\n/root\n(Using the default Ubuntu rules for sudo)\nSo there may just be some bad sudo-ing going on.  I don't know anything that would chown ~/.dotnet/ after the fact.. @karelz sizeof(long) on Unix C is sizeof(void*).. Given that I have no idea what Bouncy Castle is doing, the best thing I can recommend:\n\nGenerate a new throwaway key.\nProvide the Pkcs8 for it.\nPrint (hex, preferably) what you're putting in Q.X, Q.Y, and D after having read that particular key.\n\nSince the array lengths seem to be valid, my only real guess is a Big/Little-Endian encoding problem, but I might get more insight with data in front of me.. D = 9F9BD156374FB78F3D69EFF10DEF8C296EC4F03EACA42F4257130D0CE9316FCD (looks correct).\nQ.X in the file says: C995C0C4DD52077EA5FFD4BBBD3F8D251ACCC19B55B3957B8F8F1D0B1DA70502\nQ.Y in the file says: 741A1B88D26B12F57BC0D7D09FE9FC51FDD13747A2B972F16ED69950BCD79E82\nIn a moment of inspiration I searched the Q.X value.  You're getting G.X from Bouncy Castle (G being the curve generator point), not Q.X.  Sure enough, you're reading Parameters.G.\nWindows must be ignoring Q when D is provided, and recomputing it.  Sigh.. > .NET does not support reading keys from PEM encoded files (as far as I know)\nnetcoreapp30 has this functionality :smile: https://github.com/dotnet/corefx/issues/20414.\n\nI would like to see the Windows/Unix implementations more consistent (eg have the Unix implementation generate Q automatically)\n\nThe Apple implementation doesn't have access to a point multiplier, only \"import this PKCS8\"; so the least common denominator is probably to make the Windows implementation reject the import of bad parameters, even if CNG allowed it (or see if there's a \"make sure this makes sense\" flag).\nMoved the meat of this issue to https://github.com/dotnet/corefx/issues/33278.. I think i686 is a 32-bit Intel architecture.  .NET Core on Linux is only supported for amd64 and arm32.  (https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1-supported-os.md).\nhttps://github.com/dotnet/coreclr/issues/9265 is the best open issue I could find dealing with the subject of x86.. @xinschen .NET Core 2.1 doesn't use OpenSSL 1.1, so updating the 1.1 package wouldn't do anything.  Updating to the newest openssl-libs 1.0 package would be the thing to try; or to move from CentOS 7.3 (12 Dec 2016) to 7.5 (10 May 2018) or 7.6 (3 Dec 2018).\n. JWS's base64 is defined to NOT include the trailing padding characters.\nhttps://tools.ietf.org/html/rfc7515#section-2:\n\nBase64url Encoding\n      Base64 encoding using the URL- and filename-safe character set\n      defined in Section 5 of RFC 4648 [RFC4648], with all trailing '='\n      characters omitted (as permitted by Section 3.2) and without the\n      inclusion of any line breaks, whitespace, or other additional\n      characters.  Note that the base64url encoding of the empty octet\n      sequence is the empty string.  (See Appendix C for notes on\n      implementing base64url encoding without padding.)\n\n(emphasis mine)\nThat said, https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet is where JwtSecurityToken (and all of JWT) lives.. Yep, the behavior of the Format methods is not guaranteed to be the same across the operating systems, it is deferred to the underlying provider for pretty-printing.. @terrajobst Do we have a simple or technical explanation anywhere of \"inbox + nuget\" assemblies?. Mostly these already existed; but the API-diff shows overrides that weren't listed in the contract.\nHMACMD5 is the only type that was new in the contracts (which was only missing due to an error)\n. I'm about to send you the crypto RC1->RC2 release notes.  Yeah, I know, they're late...\n. Just sent it to you in my release notes mail :smile:.  We require openssl to be installed from homebrew.  We have a dependency on the 1.0.0 library family version; the actual library version can be any supported 1.0.2 version.  (1.0.1 might work, but wasn't tested)\n. Oh, but for Linux distros we just require the openssl package from their distro package manager.  That includes 1.0.1 on Ubuntu 14.04.  (Sorry, I scoped it to only OS X in my head)\n. Stephen took number 1 and number 2, I see.  I seem to also have a split personality.  And some others where their author email address will show up more than once in the same block.\n. >= 1.0.1.\nThe current version from homebrew is 1.0.2, and 1.1 isn't quite released yet, and may not even be compatible.\n. Presumably you mean \"RTM\" or \"v1\", or something other than \"RC2\".\n. Style: Do we want to use \"foll.\", or expand it to \"following\"?\n. This line may or may not want to be promoted to something more titular, since someone could accidentally read that we always don't support NTFS, instead of that we don't support it on Linux and OS X.  (We might also want to normalize the document style for \"OS X\", \"OSX\", etc.)\n. These preceding two lines are almost the same as the two lines before them.  Probably only one or the other set should be used.\n. We might want to make the title more clear that we mean the utility, not the framework. Replace \"dotnet\" with \"global.json\", perhaps?  (Unless it also applies to project.json?)\n. Looks like some of these files came in with merge markers, @leecow.. soruce => source. ",
    "livarcocc": "@anguoyang Just open the project.json file directly in VS. VS will generate an xproj file for it.\n. run dotnet restore on your project.\n. @ericstj \n. You can download the SDK binaries directly: https://dotnetcli.blob.core.windows.net/dotnet/preview/Binaries/Latest/dotnet-dev-win-x86.latest.zip\nThis is a link to our latest preview2.\n. In project.json world, publishing a standalone app and a portable app were a development decision (type: platform in the project.json).\nIn msbuild, this is actually a deployment decision, meaning, that when you run dotnet publish, if you want to publish it as a standalone app, you just need to pass the --runtime flag to it indicating for which runtime you want to publish it for.. CC @mlorbetske . The version of the tooling (1.0.4) and the versions of runtime(s) that it carries (1.1.2 and 1.0.5 in this case) are not tied together, as they have a different release cadence. For instance, we don't want to rev the runtime because of a tooling bug.. Can you share your csproj? Also, in the folder that you are running restore and run, do you have a csproj there? dotnet restore will no longer restore all projects in a folder. It will restore a sln (and all projects in the SLN) or a project (and that project's dependencies).. if you run dotnet --info, what is the output?. I wanted to make sure of how you obtained that information.\nCan you try running dotnet restore path/to/csproj and likewise for the other commands?. We must be talking past each other. What do you mean the project file does not exist in the production environment?\nrestore/build/run/publish all need a csproj file.\nIf what you are doing is publishing a project from one machine and then copying the published content to another machine and trying to run it, then you don't need to restore and you can't use dotnet run to execute it.\nYou need one of two things:\n1. If the app is a portable application, you need to have at least the shared framework for which the app was published installed in the machine where you want to run it. And you execute it by running dotnet . Just be sure that dotnet with the shared framework is in your path or when invoking dotnet give it its full path.\n2. If the app is a self-contained app, then, just run your app.exe directly from the published folder.\nDoes this help a bit?. The shared framework is the .NET runtime for .NET Core.\nThe SDK contains a set of tools (the CLI) which allows restore/build/run/publish amongst other things and it also conveniently ships with the shared framework(s).\nIf all you care about is running a portable application, then you don't need the SDK and you only need the runtime. The link I sent you above has pointers to both.. You can run dotnet <path_to_your_published_app_dll>.\nWhen you install the shared framework, it will bring with it the host (dotnet).. No worries. Happy it is working now and sorted out.. I would say this belongs in core-setup, given that it is a native crash.. Correct. Migrate your xproj to csproj using the dotnet migrate command.. @eerhardt . @vijayrkn @mlorbetske Do you guys own the view compilation tool? The error above is happening when we try to run that tool during publish.. @mlorbetske I wonder if this is actually an issue in dotnet new. Since it happens during dotnet new when instantiating the template. Mike, can you take a look?. This only happens from VS? From the command line migration succeeds?. You are correct in the sense that it is compatible with 15.3, but the resolvers is not the only compatibility point. This CLI carries the same version of dependencies as VS.. It shipped in VS 15.3 Preview3. We need to make a separate release so that it is available for download out of VS.. There should be no API updates.. Can you share the contents of the created csproj?. @eerhardt and @steveharter for the symbols question.. Move it to the CLI please. The SDK repo will go away at some point and this is one less bug that we will have to move.. @Petermarcu @steveharter can you help debug this and understand why the telemetry code is causing a seg fault? If this were in native code, I would expect a stack trace somewhere. But we will investigate.. This issue was moved to NuGet/Home#5909. NuGet requires you to have HOME set when running on a Unix box. I would imagine that you don't on the machine where you are running right now.. No, this has been true for as long as I can remember actually.\nHOME is a special environment variable in Linux, meaning that it controls many different things.\nStrictly speaking, you just need to run set HOME=, but I would recommend reading up on it to make sure unexpected things won't happen.\ncc @emgarten here, so that he is aware this is coming up again.. Hum, I wonder if that variable remains set when running under supervisor.\nThis is our code:\n```\nstring profileDir = Environment.GetEnvironmentVariable(\n                    RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ? \"USERPROFILE\" : \"HOME\");\n            return Path.Combine(profileDir, \".dotnet\");\n\n```\n. Sorry, the snippet that I shared above was the for the code that is failing. To show the Path.Combine we are trying to do. We are just resolving the HOME environment variable and combining with .dotnet.\nI don't know how supervisor works, sorry about that. What are the inputs to it? A script file? A set of commands? I suspect that the problem you are running into is that supervisor runs under a different account than yours and in that context, HOME is not set. I would update your supervisor \"script\" to call set HOME= and I would see if that works.. Ok, I think I figured out what is going on.\n@emgarten you are absolutely right. I realized that this was not a NuGet issue but did not comment back here. Sorry about that.\n@mbrookson The problem that you are running into is because your supervisor file is invoking dotnet with this as its argument: /var/www/myapplication.mydomain/MyApplication.dll. However, on your supervisor machine, this file does not exist, as such, the host (dotnet), instead of simply executing your application, in which case no HOME is required, thinks that you are trying to run an SDK command and goes into the SDK code path.\nI would recommend double checking the location of your assemblies in the supervisor machine and the path you are passing in your script.. Like I said, I haven't used supervisor.\nIf you want to do a quick test, just change the dotnet command to a ls command and see if it finds anything at the path that you are expecting the supervisor to find the dll.. If you are setting the directory to \ndirectory=/var/www/myapplication.mydomain have you tried setting the command to command=/usr/bin/dotnet MyApplication.dll since in theory the working directory is already the application directory?. @mbrookson you are welcome. Glad we could sort it out.. This happens because you only installed the runtime, which is used to run applications.\nThe dotnet --version and other development commands are implemented by the SDK, which you can acquire at https://dot.net.. You don't need the SDK to run your application.\nThe error you are getting above indicates that you have missing files in your deployment. To deploy your app, you should execute dotnet publish and then you should copy all the contents under the publish folder that will be generated.\nIf you are just building and copying the build contents, that's not really deployable bits.\ndotnet --version is an SDK command that displays the version of the SDK that is being resolved by the host, not the runtime version.. Does this only happen if you set the RuntimeIdentifiers? If you remove that property, does VS build successfully?\nIt seems like VS is looking for the dll in the wrong output folder: it should look under bin and not obj. Does it work if you run msbuild.exe ConsoleApp3.csproj?\nIf that fails as well, could you run msbuild.exe ConsoleApp3.csproj /bl:log.binlog and then share the binlog file with us?. @Pilchie given that this works in VS and the command line, can you have someone take a look at it from the ProjectSystem point of view. Also noted that I tried on the latest 15.5 bits and I can't repro it.. @Pilchie @natidea this stack seems to be inside VS itself. Can you guys direct this to the right person?. @doggy8088 @vijayrkn can confirm, but I don't believe we put this fix in the servicing of 15.5, but rather in 15.6.. Yeah, is there a way to know who is he author? So that we can reach out to them and maybe get them to update the package? That is not us.. This issue was moved to dotnet/cli#8197. cc @mlorbetske to comment on the CodeGeneration package failure.. @joeloff to comment on the hosting bundle. But if you are trying to use the SDK on Windows Server, I would say it should be ok to just install the latest released SDK.\nI will also try to find the right person regarding the version in VSTS. @leecow in case he can help here.. @mlorbetske to confirm the version that should be used!. 2.1.101 is now the latest release of the .NET Core SDK.\nYou can still obtain the 2.1.4 from the all downloads link here: https://www.microsoft.com/net/download/all.. cc @leecow . @chakrabar Does a build of this project work from the command line?. @chakrabar glad it worked.\n@Pilchie can you take a look? Seems to be failing only when trying to add it through VS.. We currently have the change available for our 2.1.300 release, that will match the .NET Core 2.1 release.. This issue was moved to Microsoft/vstest#1555. Agreed. We have unify build/publish in our backlog.. I believe this is a known breaking on dotnet ef and the recommendation is to pin yourself using global.json to 2.1.200 (latest 2.0 released version of the SDK).\n@ajcvickers can confirm add details if necessary, I believe.. You get the error message if you have a DotnetCliToolReference in your project. Given that this is failing to execute dotnet ef, I imagine the user is missing that reference.\n@TonyWoo can you share the output of dotnet --info when executed within your project folder?. If you have the SDK pinned to 1.1.5, then you need to continue referencing the Microsoft.EntityFrameworkCore.Tools.DotNet package as a DotNetCliToolReference. When you tried running dotnet ef, had you executed dotnet restore before? Did you have the project.assets.json generated for it?\nAs for the fallback folder error, it seems like you have a fallback folder declared in your NuGet.Config that does not exist. Check the NuGet.Config file under %appdata%/local/NuGet/NuGet.Config (or something similar to this, don't remember exactly and I don't have a windows box to double check right now).. --version is an SDK only command and it has never been supported by the runtime alone.. Adding @bricelam to comment on the EF issue.\nAdding @Pilchie to comment on the ProjectDir issue. I don't believe the SDK sets it.. We have a feature coming for .NET Core 3.0 called local tools, where your repo can specify a tool manifest file and then, once you run dotnet tool restore (@wli3 can confirm the exact gesture and provide more info), your tools will be available in your repo.. This issue was moved to NuGet/Home#7516. @DickBaker not really. The SDKs are side-by-side and installed next to each other. However, by default, we use the latest one available. So, if you have 2.2.101 and 3.0.100-preview, 3.0 being greater will be picked up. However, with the 3.0 SDK you should be able to target all the previous TFMs as well.\nSo, you can build a netcoreapp2.2 app using the 3.0 SDK.. @DickBaker we believe that is quite the opposite. Wanting to stay on a particular version if the exception, which is why we roll forward by default and we don't warn. We have no intention of doing so.\nAs for pinning to a particular version, you can find more information about it here: https://docs.microsoft.com/en-us/dotnet/core/tools/global-json. However, do notice that pinning your SDK version as nothing to do with the .net core version that your application runs against. That is solely determined by the target framework of your application.. WinForms applications (or WPF applications for that matter) are not supported crossplatform and only work on Windows.\nThis is by design.. @jsoques what happens when you run dotnet --info on the project folder?. For some reason, when it restores the project it is using the 2.1.500 props/targets, as seen in the logs here:\nC:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(137,5): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2. [D:\\VSProjects\\DotNet2.2\\DotNet2.2.csproj]`\nEmphasis in sdk\\2.1.500. Do you have MSBuildSDKsPath environment variable set for any reason? Could you share a binlog with us of running dotnet restore /bl on the newly created project and then share the binlog file?. @jaredpar to comment. I believe this issue is actually on roslyn and the vbcscompiler.. @vijayrkn @mlorbetske . @Dresel can you tell us more about your setup? Do you happen to have MSBuildToolsVersion as an environment variable set to 15.0 for some reason? Or have it set as a property somewhere in your build?\ncc @rainersigwald . @tkstanczak is there a repro that you can share with us? Perhaps a binlog for the failed build? Do keep in mind that in a binlog secrets and other sensitive information may be capture in the log. If that's the case, let us know and we can share an email that you can use to share the log directly to us instead of through a file attachment on github.\n@peterhuene to help take a look.. Do we want to advertise 1.1 builds?. Do we want to say vNext (currently 2.1) here? Or it is fine to keep updating this as branding changes?. I believe this has been fixed. @wli3 @peterhuene to comment.. Do we want to add examples of tool list and tool update?. ",
    "seanshpark": "@livarcocc , wow, I was also looking something like this.\n. @anguoyang , try with \"File\" > \"Open\" > \"Project/Solution...\"\n. @anguoyang , \"chun man e yo~\", for me, I've copied the output DLL, say \"output.dll\" file to my Linux(Ubuntu 14.04) and ran with\n./corerun output.dll\nwhere required DLLs exist in the same directory, just for testing.\n. If you can't find the DLL, right click on the \"Project\" and select \"Properties\". In the left \"Build\" tab, check on the \"Product outputs on build\".  You can see the DLL in \"../artifacts/bin/..../Debug/dnxcore50/\" folder.\n. @anguoyang , hello. I had the same problem. I'm not sure but please try adding this in project.json.\ncommands: {\n     \"start\": \"(your project name appearing in VS IDE)\"\n  },\nstart string will appear in the debug go button on the toolbar. You can give anything if you want :)\nOne more thing. When I open the project.json file in the IDE, there appears an URL on top of the window: http://json.schemastore.org/project . If you open this link, it shows the schema of this project.json with some useful information.\n. Could https://github.com/dotnet/cli/issues/1179 do some help?\n. ",
    "anguoyang": "@livarcocc when I opened the json file in VS, it acted as common editor as notepad, no relevant project files created.\n. @seanshpark  Thanks a lot, it worked!!!\n. Kang sa mi da! @seanshpark , it could be opened and compiled successfully in VS, however, it could not be run due to \"there is no command in project.json, so it could not be startup\"?\n.  \uad7f \ubaa8\ub2dd @seanshpark , I would like to build and run/debug it within visual studio, the IDE is powerful for debugging, after that, I will copy it into ubuntu to run it. My problem is, I could not run/debug the project in visual studio. \n. ",
    "stephentoub": "Like this?\nhttps://msdn.microsoft.com/en-us/library/dd268231(v=vs.110).aspx\n. Like this?\nhttps://msdn.microsoft.com/en-us/library/dd268231(v=vs.110).aspx\n. cc: @ericeil. @pgavlin \n. cc: @ericeil. @pgavlin \n. LGTM\n. LGTM\n. Yes, it isn't supported on Unix.\n. Yes, it isn't supported on Unix.\n. cc: @janvorli. @RassulYunussov, the repro you provided has a bug in it: the students you're intending to add to g2 are actually being added to g:\nC#\n        Group g2= new Group(){Name = \"Group B\"};\n        g.students.Add(new Student(){Id=1,Name=\"Askar Akber\"});\n        g.students.Add(new Student(){Id=2,Name=\"Tamerlan James\"});\n        g.students.Add(new Student(){Id=3,Name=\"Viktor Kopernik\"});\nWhen I fix that, I see the expected output on both .NET Framework and .NET Core.. No problem :smile:. > It seemed that only a single CPU core was consumed below\nThat's because the AsParallel is operating on an enumerable, which means that it needs to lock to get access to the elements, and as there's basically no work happening as part of the aggregation itself, all of the work here is really happening under a lock and is getting serialized.  Aggregate in corefx does support executing in parallel, you just need to give it more work to do on each element.. Have you tried ParallelEnumerable rather than Enumerable?. Can you share the code you used in each case?. Linux doesn't have a creation time as a concept for files.. > Would returning the last modification time be reasonable here?\nThat's basically what we do starting in 2.0.. cc: @bartdesmet, @VSadov . What happens if you run with sudo?\nAre you able to write/run a C program that creates a raw socket successfully?. And what about a C program... you have a program in C that runs successfully opening a raw socket on the same machine?. > sometimes, I mean string of old socketB from socketA.Accept() will appear in new socketB\nIs there a loop you're leaving out of your example?. > I've fixed my code on 1F\nAnd this is exactly how the code looks?  For example, the Session s is defined inside the loop rather than outside of it?  The behavior you describe is almost certainly not a bug in .NET, but rather a bug of some kind in your program, likely due to changing an object that ends up being shared across multiple threads.\nRather than sharing a small snippet, it'd be helpful if you could share a small but complete runnable repro that demonstrates the issue.. Fixed:\nhttps://github.com/dotnet/corefx/issues/30330\nhttps://github.com/dotnet/corefx/issues/30166\nNot yet fixed:\nhttps://github.com/dotnet/corefx/issues/30327\ncc: @davidsh. > Do you have any context to add here?\nNot really; like you say, we need to make the call, or else the FileShare is meaningless.. On the client side, I see a few approaches:\n1. You can do what you're already doing and write a custom HttpMessageHandler. That lets consumers use the HttpClient APIs over your custom handler/transport implementation, but as you say requires also implementing all of the HTTP logic.\n2. Add an API like SocketsHttpHandler.ConnectCallback that's a Func<Uri, Cancellation token, ValueTask<Stream>> which if non-null SocketsHttpHandler would use instead of its internal ConnectHelper.ConnectAsync method. This in theory would allow SocketsHttpHandler to be used but with you supplying the mapping from Uri to Stream.\n3. Add support in Sockets for additional end points (it already supports Unix domain sockets), create some mechanism for mapping Uris to EndPoints, allow HttpClient to work with schemes besides http/https/ws/was, etc.\n4. Expose a bunch of new public API for all of SocketsHttpHandlers internal processing to let you compose a new handler from lots of individual little pieces.\nI expect (2) is closest to what you want, and is likely also both fairly simple and feasible. It would require some prototyping to prove it out, and once proven, as it's new API, it would need to go through corefx API review: https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md.. > I will open a PR doing that. \nThanks, but API will need to be agreed upon first.\nhttps://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md. @leemgs, I believe the list includes commits made to master through March 21st, which is why your entry is in the list below with (4).\n. We appear to be missing both of these:\nhttps://github.com/dotnet/corefx/issues/9235\nhttps://github.com/dotnet/corefx/issues/9240\nNot sure if that's by choice or an accident.\n. No, as long as it's truthful and it actually is read-only.. What are the above?  Where are they coming from?  I don't see them anywhere in coreclr or corefx.. We deleted overrides? Do we need to highlight that like this?. This wasn't a deletion; a private set accessor was made public.  From an API perspective, that's just a new API.. It looks like you're including corefx test helpers. Those are not public API.. What are you diff'ing to generate this?  These names changed in the implementation, but in the contract they're still the same as they previously were:\nhttps://github.com/dotnet/corefx/blob/2cb82bb953f8e304c3f75556d4263a5ea546d122/src/System.Diagnostics.StackTrace/ref/System.Diagnostics.StackTrace.cs#L13\nChanging parameter names in public signatures is a breaking change, so we generally don't do it unless there's a really good reason to do so.. Removing a finalizer from a sealed type is not an API change.. These parameter names (here and elsewhere) have not changed.  What did you diff?\nhttps://github.com/dotnet/corefx/blob/2cb82bb953f8e304c3f75556d4263a5ea546d122/src/System.Drawing.Common/ref/System.Drawing.Common.cs#L670. This makes it look like we deleted something, but we just marked the existing struct as readonly.. Again, not a deletion, we just made it implement another interface.  Is this how we generally depict that, as a deletion and an addition?. FYI, these have since been deleted.. I'm confused by this change; the contract for System.Net.Sockets doesn't have either of these overrides included in .NET Core 2.2.  What is this comparing against?. These aren't deletions: the APIs are still implemented, still accessible via the interface, they're just now public, so it's really just an API addition.. Ditto.  Same for any others like this.. In a bunch of places where overrides are showing up, the types already provided overrides, they were just missing from the contracts.. > Should I exclude this from the diff?\nIf they're not exposed (yet), yes.. ",
    "le4ker": "Yes! :+1: \nI found it a few moments ago and I was about to close my issue :smile: \n. ",
    "AndrewBarfield": "Thank you! I'll look into it.\n. ",
    "jchannon": "I also see this behaviour\n. @leecow can you link to it please?. Installing Net Core 2.1 on Amazon Linux still seems to be an issue :(. I did sudo rpm -Uvh https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm and yum update and yum install dotnet-sdk-2.1\nOutput is below:\n```\namazon-linux-ami: Resolving Dependencies\n    amazon-linux-ami: --> Running transaction check\n    amazon-linux-ami: ---> Package dotnet-sdk-2.1.x86_64 0:2.1.301-1 will be installed\n    amazon-linux-ami: --> Processing Dependency: dotnet-runtime-2.1 >= 2.1.1 for package: dotnet-sdk-2.1-2.1.301-1.x86_64\n    amazon-linux-ami: --> Processing Dependency: aspnetcore-runtime-2.1 >= 2.1.1 for package: dotnet-sdk-2.1-2.1.301-1.x86_64\n    amazon-linux-ami: --> Running transaction check\n    amazon-linux-ami: ---> Package aspnetcore-runtime-2.1.x86_64 0:2.1.2-1 will be installed\n    amazon-linux-ami: ---> Package dotnet-runtime-2.1.x86_64 0:2.1.2-1 will be installed\n    amazon-linux-ami: --> Processing Dependency: dotnet-hostfxr-2.1 >= 2.1.2 for package: dotnet-runtime-2.1-2.1.2-1.x86_64\n    amazon-linux-ami: --> Processing Dependency: dotnet-runtime-deps-2.1 >= 2.1.2 for package: dotnet-runtime-2.1-2.1.2-1.x86_64\n    amazon-linux-ami: --> Running transaction check\n    amazon-linux-ami: ---> Package dotnet-hostfxr-2.1.x86_64 0:2.1.2-1 will be installed\n    amazon-linux-ami: --> Processing Dependency: dotnet-host >= 2.1.2 for package: dotnet-hostfxr-2.1-2.1.2-1.x86_64\n    amazon-linux-ami: ---> Package dotnet-runtime-2.1.x86_64 0:2.1.2-1 will be installed\n    amazon-linux-ami: --> Processing Dependency: dotnet-runtime-deps-2.1 >= 2.1.2 for package: dotnet-runtime-2.1-2.1.2-1.x86_64\n    amazon-linux-ami: --> Running transaction check\n    amazon-linux-ami: ---> Package dotnet-host.x86_64 0:2.1.2-1 will be installed\n    amazon-linux-ami: ---> Package dotnet-runtime-2.1.x86_64 0:2.1.2-1 will be installed\n    amazon-linux-ami: --> Processing Dependency: dotnet-runtime-deps-2.1 >= 2.1.2 for package: dotnet-runtime-2.1-2.1.2-1.x86_64\n    amazon-linux-ami: --> Finished Dependency Resolution\n    amazon-linux-ami:  You could try using --skip-broken to work around the problem\n    amazon-linux-ami: Error: Package: dotnet-runtime-2.1-2.1.2-1.x86_64 (packages-microsoft-com-prod)\n    amazon-linux-ami:            Requires: dotnet-runtime-deps-2.1 >= 2.1.2\n    amazon-linux-ami:            Available: dotnet-runtime-deps-2.1-2.1.0-1.x86_64 (packages-microsoft-com-prod)\n    amazon-linux-ami:                dotnet-runtime-deps-2.1 = 2.1.0-1\n    amazon-linux-ami:            Available: dotnet-runtime-deps-2.1-2.1.1-1.x86_64 (packages-microsoft-com-prod)\n    amazon-linux-ami:                dotnet-runtime-deps-2.1 = 2.1.1-1\n    amazon-linux-ami:  You could try running: rpm -Va --nofiles --nodigest\n```. just followed the instructions here https://www.microsoft.com/net/download/linux-package-manager/centos/sdk-current. ",
    "onovotny": "Why do we need a references section for the desktop frameworks? Is there harm in passing all the libraries in? One current issue is that a few of the files in the targeting pack are not .NET assemblies, but I would think putting those in a ref directory would solve that?\nMain point is to not make the user do all the work and to treat the targeting pack just like the netstandard.library where it pulls in the world.\n. The thing is, today it already refs all of them anyway, doesn't it? It does for the PCLs and expands/adds the contract assms.\n. Right, i get that. I'm asking if there's an opportunity to make it better. I was pointing out that for perf, the num of assms is already large. And you have to keep in mind the implicit expand of contract assms that also happens for desktop.\n. Whatever the UX/delivery mechanism is, I think there's value in having a single switch to opt-in to the configuration, even with some default values. \nWhat I do in the MSBuild.Sdk.Extras is default TPV to the current and TPMV to n-3 (15063 currently). All can be overridden by the csproj, they're just defaults. I hope some kind of default can be achieved for WinRT too.\nThanks!. The announce post lists 2.2.1, not 2.2.3 as the version.. ",
    "ericstj": "\nThe thing is, today it already refs all of them anyway, doesn't it? It does for the PCLs and expands/adds the contract assms.\n\nPCL is significantly smaller than all of desktop.  @jaredpar would you want us passing every desktop assembly to roslyn?\n\nimplicit expand of contract assms that also happens for desktop.\n\nThose are just type-forwards.  They don't do much in the compiler if they targets aren't provided.\nOne thing we haven't done but could do to mitigate this problem would be add frameworkAssembly entries to our packages which have inbox facades.  That'd be something special you'd get from CoreFx packages, random PCL's wouldn't benefit.\n. Usually you won't need to directly reference this.  \nAs a package developer you should only need to reference it if your package uses runtimes (eg: runtimes/rid/lib/tfm/foo.dll) and doesn't already bring it in indirectly.\nIn your project you only need to reference it if you are using the \"runtimes\" section in the project.json and it isn't already brought in by the packages you've referenced.\nThe link you posted was out of date, but I suspect that link predated the work we did to automatically reference this package in all CoreFx packages: https://github.com/dotnet/corefx/issues/8239.\n. Just use the ZIP if you want this.  https://github.com/dotnet/cli/issues/3568\n. Yep, I believe the linked issue is tracking the removal.\n. Are we sure GH can actually render this?  All the views I click on say it is too large.\n. >  However, our build servers (Windows Server 2008 R2) are missing VS and are not building the project instead erroring with msbuild\nCan you clarify which MSBuild you are using to do this?. That's the MSBuild that's built into the desktop framework.  I wouldn't recommend using that to build new projects, it's missing quite a lot of fixes, and will be substantially different than the MSBuild used by VS 2015.  I could give you workarounds to make that old MSBuild work but that's just treating the symptoms and you could have more issues crop up in the future.\nI believe the MSBuild team produces a standalone package for build servers so that you don't have to install all of VS: https://www.microsoft.com/en-us/download/details.aspx?id=48159.  I'd reccomend using that to make your build machines closer to your dev environment (without installing all of VS, which I gather is undesirable).. Package is being put into the tooling.  See https://github.com/dotnet/sdk/issues/1288.. In any scenario you need to add support for netstandard2.0 to desktop since it wasn't something that was inbox.  This is done by passing additional libraries to the compiler and redistributing a version of those with the app.\nA Preview 1 rel note could say to add a reference to the NETStandard.Library.NETFramework package from any desktop app referencing a netstandard library.\nThe work to automate the support library addition is being done for preview2, but some of that work is still in progress (/cc @dsplaisted).. \"When referencing a NETStandard2.0 library from a .NETFramework application you must add a reference to the NETStandard.Library.NETFramework package to the .NETFramework project.\". That's just work that hadn't been completed at the time we shipped Preview1.  You could reference https://github.com/dotnet/sdk/issues/1267 if you'd like.  There are probably earlier issues that were tracking the work prior to preview1, but this is the one I opened to represent the final form.. NET461 used to be netstandard1.4 but the latest version of NuGet remapped that to netstandard2.0.  It looks like you're using that new version of NuGet with the old packages.\nThe older packages (like the System.Runtime 4.3.0 package) have a mismatch when installed on .NET 4.6.1.  This is because they have a version of their library for net461 that matches the version that was in the netstandard1.4 folder, but now that NuGet allows netstandard1.6 libraries to install they are broken.\nWe aren't shipping new versions of these packages, the intent is for folks to get the latest facades from the tooling.\nCan you try the following:\n1. set <DependsOnNETStandard>true</DependsOnNETStandard> in your project and see if it fixes it.\n2. If not, then reference the latest NETStandard.Library.NETFramework package in your net461 project.\n. When you say original issue, you mean that NETStandard.Library references Platfroms 1.1.0?  That's already discussed here: https://github.com/dotnet/standard/issues/497.  Let me know if you had a different question.\n. I took a look at the referenced issue.  It looks to me like a problem in mono's MSBuild project evaluation : https://github.com/fsprojects/Paket/issues/2616#issuecomment-322746371.\nSomething about the syntax we use in our targets file is causing mono to null ref.  None of our code is running here nor are we using invalid syntax, I suspect it's just a bug in xbuild.  /cc @akoeplinger \nIf I had to guess, it seems that xbuild is trying to evaluate metadata when the condition on the item is false and the item is empty.  That's just a wild guess though.. @haf we might be able to workaround it if someone could actually point out what the problem is.  As I've already mentioned this isn't a bug in our targets but a bug in XBuild and @akoeplinger has mentioned not to use xbuild...\nOne thing you could try is the following:\nLocate  NETStandard.Library.targets inside the package.\nModify this line:\nhttps://github.com/dotnet/standard/blob/d2b6c46ce1fa1d7d76a7f8f34b96da1d1053583e/netstandard/pkg/targets/NETStandard.Library.targets#L6\nFrom\n<ItemGroup>\nTo\n<ItemGroup Condition=\"'$(_NetStandardLibraryRefPath)' != '' OR '$(_NetStandardLibraryLibPath)' != ''\">\nLet me know if that works-around the issue.  If it does I might even have a workaround that doesn't require a package update.\n. @galodoido794 it sounds like you have a small isolated repro.  Can you zip that up and attach it to the bug (deleting the bin and obj folder, and providing the repro steps)?  I'll have a look at why you're getting the reference-assembly error.. I believe that this is https://github.com/dotnet/sdk/issues/1502.. Firstly, It seems NuGet made a breaking change around downgrades warnings in the latest release see https://github.com/NuGet/Home/issues/5594.  @emgarten \nSecondly,  Devart.Data.PostgreSql does downgrade that package so NU1605  is correct.  To get rid of that by default the package owner needs to remove the downgrade.  I'd recommend an issue in that owning package's repository to get this fixed.\nYour workaround of directly referencing the higher versions is appropriate to undo the downgrade.\nNow finally, the missing dependency.  If I examine the dependencies of the library you installed I see the following:\nDevart.Data.PostgreSql, 7.9.958.0\n        Missing: System.Security.Principal.Windows, 4.0.0.0\n        Missing: System.Security.Claims, 4.0.1.0\nJust to be certain those weren't previously coming from packages, I ran the test both with the downgrade workaround and with <NoWarn>$(NoWarn);NU1605</NoWarn>.  In both cases these were missing.\nSo it would seem that Devart.Data.PostgreSql built against these two assemblies (via packages) but didn't include them in their nuspec as dependencies.  Again for this one I'd file an issue on DevArt.PostgreSql. \n. @KevinRansom looks like the FSharp targets need something like @dsplaisted added to dotnet SDK around honoring the project over the implicit package.  https://github.com/dotnet/sdk/blob/a0ba16704bb83054dc7cdda2fc0f7628a1c0935f/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.Sdk.DefaultItems.targets#L192-L210.  @loop-evgeny you may want to file this over in https://github.com/Microsoft/visualfsharp if you think there isn't an existing issue covering it.. Something is wrong with the assets file.  Perhaps your NuGetFallBack folder (C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder) is corrupt?  If you are able to reproduce this perhaps @emgarten could find out why NuGet is returning partial results.\nIn the project.assets.json, I see the following:\njson\n      \"Microsoft.NETCore.App/2.0.0\": {\n      ...\n        \"compile\": {\n          \"ref/netcoreapp2.0/Microsoft.CSharp.dll\": {},\n          \"ref/netcoreapp2.0/Microsoft.VisualBasic.dll\": {},\n          \"ref/netcoreapp2.0/Microsoft.Win32.Primitives.dll\": {},\n          \"ref/netcoreapp2.0/System.AppContext.dll\": {},\n          \"ref/netcoreapp2.0/System.Buffers.dll\": {},\n          \"ref/netcoreapp2.0/System.Collections.Concurrent.dll\": {},\n          \"ref/netcoreapp2.0/System.Collections.Immutable.dll\": {},\n          \"ref/netcoreapp2.0/System.Collections.NonGeneric.dll\": {},\n          \"ref/netcoreapp2.0/System.Collections.Specialized.dll\": {},\n          \"ref/netcoreapp2.0/System.Collections.dll\": {},\n          \"ref/netcoreapp2.0/System.ComponentModel.Annotations.dll\": {},\n          \"ref/netcoreapp2.0/System.ComponentModel.Composition.dll\": {},\n          \"ref/netcoreapp2.0/System.ComponentModel.DataAnnotations.dll\": {},\n          \"ref/netcoreapp2.0/System.ComponentModel.EventBasedAsync.dll\": {},\n          \"ref/netcoreapp2.0/System.ComponentModel.Primitives.dll\": {},\n          \"ref/netcoreapp2.0/System.ComponentModel.TypeConverter.dll\": {},\n          \"ref/netcoreapp2.0/System.ComponentModel.dll\": {},\n          \"ref/netcoreapp2.0/System.Configuration.dll\": {},\n          \"ref/netcoreapp2.0/System.Console.dll\": {},\n          \"ref/netcoreapp2.0/System.Core.dll\": {},\n          \"ref/netcoreapp2.0/System.Data.Common.dll\": {},\n          \"ref/netcoreapp2.0/System.Data.dll\": {},\n          \"ref/netcoreapp2.0/System.Diagnostics.Contracts.dll\": {},\n          \"ref/netcoreapp2.0/System.Diagnostics.Debug.dll\": {},\n          \"ref/netcoreapp2.0/System.Diagnostics.DiagnosticSource.dll\": {},\n          \"ref/netcoreapp2.0/System.Diagnostics.FileVersionInfo.dll\": {},\n          \"ref/netcoreapp2.0/System.Diagnostics.Process.dll\": {},\n          \"ref/netcoreapp2.0/System.Diagnostics.StackTrace.dll\": {},\n          \"ref/netcoreapp2.0/System.Diagnostics.TextWriterTraceListener.dll\": {},\n          \"ref/netcoreapp2.0/System.Diagnostics.Tools.dll\": {},\n          \"ref/netcoreapp2.0/System.Diagnostics.TraceSource.dll\": {},\n          \"ref/netcoreapp2.0/System.Diagnostics.Tracing.dll\": {},\n          \"ref/netcoreapp2.0/System.Drawing.Primitives.dll\": {},\n          \"ref/netcoreapp2.0/System.Drawing.dll\": {},\n          \"ref/netcoreapp2.0/System.Transactions.Local.dll\": {},\n          \"ref/netcoreapp2.0/System.Transactions.dll\": {},\n          \"ref/netcoreapp2.0/System.ValueTuple.dll\": {},\n          \"ref/netcoreapp2.0/System.Web.HttpUtility.dll\": {},\n          \"ref/netcoreapp2.0/System.Web.dll\": {},\n          \"ref/netcoreapp2.0/System.Windows.dll\": {},\n          \"ref/netcoreapp2.0/System.Xml.Linq.dll\": {},\n          \"ref/netcoreapp2.0/System.Xml.ReaderWriter.dll\": {},\n          \"ref/netcoreapp2.0/System.Xml.Serialization.dll\": {},\n          \"ref/netcoreapp2.0/System.Xml.XDocument.dll\": {},\n          \"ref/netcoreapp2.0/System.Xml.XPath.XDocument.dll\": {},\n          \"ref/netcoreapp2.0/System.Xml.XPath.dll\": {},\n          \"ref/netcoreapp2.0/System.Xml.XmlDocument.dll\": {},\n          \"ref/netcoreapp2.0/System.Xml.XmlSerializer.dll\": {},\n          \"ref/netcoreapp2.0/System.Xml.dll\": {},\n          \"ref/netcoreapp2.0/System.dll\": {},\n          \"ref/netcoreapp2.0/WindowsBase.dll\": {},\n          \"ref/netcoreapp2.0/mscorlib.dll\": {},\n          \"ref/netcoreapp2.0/netstandard.dll\": {}\n        },\nNote that System.Runtime is absent.\nNow, if I look at the log file, I see RAR is finding System.Runtime.dll inside the package.\nUnified Dependency \"System.Runtime, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". (TaskId:17)\n...\nResolved file path is \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0\\ref\\netcoreapp2.0\\System.Runtime.dll\". (TaskId:17)\nReference found at search path location \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0\\ref\\netcoreapp2.0\". (TaskId:17)\n...\n                     Output Item(s): \n                         ReferenceDependencyPaths=\n                             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0\\ref\\netcoreapp2.0\\System.Runtime.dll\nThis makes me think it is unlikely that the package folder is incomplete, since MSBuild is able to see the files in there, just not NuGet.  Perhaps it has to do with a difference between the nupkg file and the expanded file layout (nuget may be looking at the nupkg).  I imagine this could happen if the setup operation that creates the fallback folder was interrupted.  That's actually consistent with an error message I'm seeing in your screenshot (which @Petermarcu pointed out to me) : Permissions denied to modify the ...  Do you think you can rename C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder then run dotnet new (or restore, build, etc) command from an elevated command prompt to see if that fixes the issue?  /cc @wli3 \nIf so, then I think a fix here to make this a less broken error would be to make the NuGetFallbackFolder more transactional: extract to temp folder then rename on completion.\n. The System.Threading issues appear to be https://github.com/dotnet/sdk/issues/1502 you'll run into this when publishing on windows from MSBuild to another OS.  You can  workaround it by using dotnet publish instead.  You also may be able to workaround it by referencing the latest MS.NETCore.Targets (if the conflict is coming from a runtime.* package) or explicitly setting ExcludeAssets on a conflicting package.\nLet me know if you'd like any more information about the workarounds.  The reccomended approach is to use dotnet publish until a fix can be made in the SDK.. @leecow it looks like the contents of this https://github.com/dotnet/core/pull/1505/files#diff-a1a11bce243e189532b1bcb05c434621 file all refer to preview2 and the links are for preview2 bits.. Here's the native stack:\n00 (Inline Function) --------`-------- coreclr!MethodDesc::GetMethodDescChunk [e:\\a\\_work\\164\\s\\src\\vm\\method.hpp @ 2193] \n01 (Inline Function) --------`-------- coreclr!MethodDesc::GetMethodTable_NoLogging [e:\\a\\_work\\164\\s\\src\\vm\\method.hpp @ 3445] \n02 (Inline Function) --------`-------- coreclr!MethodDesc::GetMethodTable+0xc [e:\\a\\_work\\164\\s\\src\\vm\\method.hpp @ 3455] \n03 (Inline Function) --------`-------- coreclr!SigTypeContext::InitTypeContext+0xc [e:\\a\\_work\\164\\s\\src\\vm\\typectxt.cpp @ 52] \n04 00000031`e1d74660 00007ffc`f6c4e67a coreclr!SigTypeContext::InitTypeContext+0x3c [e:\\a\\_work\\164\\s\\src\\vm\\typectxt.cpp @ 78] \n05 (Inline Function) --------`-------- coreclr!SigTypeContext::{ctor}+0x51 [e:\\a\\_work\\164\\s\\src\\vm\\typectxt.h @ 63] \n06 00000031`e1d746e0 00007ffc`f6c48983 coreclr!MetaSig::MetaSig+0x6e [e:\\a\\_work\\164\\s\\src\\vm\\siginfo.cpp @ 689] \n07 00000031`e1d74760 00007ffc`f6e73725 coreclr!MethodDescCallSite::MethodDescCallSite+0x27 [e:\\a\\_work\\164\\s\\src\\vm\\callhelpers.h @ 202] \n08 00000031`e1d74790 00007ffc`f6ee1a74 coreclr!AppDomain::GetLicenseInteropHelperMethodTable+0x85 [e:\\a\\_work\\164\\s\\src\\vm\\appdomain.cpp @ 1997]\nAs @0xd4d mentioned it's trying to get the method \nhttps://github.com/dotnet/coreclr/blob/da6498e6c1013dd38d33e782bc777bd89aa0f0ee/src/vm/appdomain.cpp#L1961-L1962\nThis method was present in desktop https://referencesource.microsoft.com/#System/compmod/system/componentmodel/LicenseManager.cs,183\nC#\n        private static IntPtr GetLicenseInteropHelperType() {\n            return typeof(LicenseInteropHelper).TypeHandle.Value;\n        }\nBut appears to be missing in CoreFx: https://github.com/dotnet/corefx/blob/master/src/System.ComponentModel.TypeConverter/src/System/ComponentModel/LicenseManager.cs\nI'm a bit surprised that this shows up as an AV instead of a missing method exception, so that's a bug in CoreCLR, but we should add back this method in CoreFx to enable the scenario.\nGood find, and thanks for looking into it @0xd4d!. That one doesn't feel so random, its another part of the same issue, looks like https://github.com/dotnet/corefx/commit/d067d8de57d817fe7e9f2e17cd9d776b187502f3 removed this code.\nAgree that this is a gap in the compat/closure testing.  Seems like something could be done to emit a set of doc-IDs that we feed into APICompat to validate.  @jkotas is that something that could be done in CoreCLR build?  I'd be able to plumb it into CoreFx / APICompat.. I don't think ILLinker will ever catch the native call from CoreCLR to GetLicenseInteropHelperType.  That's the problem here, not the call from Marshal that you point out.  That call from Marshal succeeds, LicenseManager is present, but the nested type was removed along with the method that gives access to it (indeed because linker removed it, it showed in a diff, and a was cleaned up because it was dead code).  I was just thinking that it might be interesting to emit everything from the native build that makes up-stack calls: both from DEFINE_METHODS and MemberLoader as @danmosemsft points out, as well as anything else that might do something similar.\n. I see.  We'd need to choose an appropriate type in S.P.C to do that upstack reflection.  Were you thinking Marshal or something new?  I'll file a bug in CoreCLR to take care of that.. @jkotas / @Lakritzator I can repro.  I'm seeing lots of noise in this repro but I'll try to get to the bottom of the render thread exception.  /cc @vatsan-madhavan  @rladuca. Awesome, it is a much easier repro and I am seeing the same assert in wpfgfx which indicates its likely the root cause:\nMIL FAILURE: Unexpected HRESULT 0x80070715 in caller: batch processing error\nThis is coming from a failure to FindResource which is looking for  resource 0x00000387 (903) in wpfgfx.\n00 KERNELBASE!FindResourceW\n01 wpfgfx_cor3!CMilEffectDuce::LockResource\n02 wpfgfx_cor3!CMilBlurEffectDuce::Initialize\n03 wpfgfx_cor3!CMilSlaveHandleTable::CreateEmptyResource\n04 wpfgfx_cor3!CComposition::Channel_CreateResource\n05 wpfgfx_cor3!CComposition::ProcessCommandBatch\n06 wpfgfx_cor3!CComposition::ProcessPartitionCommand\n07 wpfgfx_cor3!CCrossThreadComposition::ProcessBatches\n08 wpfgfx_cor3!CCrossThreadComposition::OnBeginComposition\n09 wpfgfx_cor3!CComposition::ProcessComposition\n0a wpfgfx_cor3!CComposition::Compose\n0b wpfgfx_cor3!CPartitionThread::RenderPartition\n0c wpfgfx_cor3!CPartitionThread::Run\n0d wpfgfx_cor3!CPartitionThread::ThreadMain\n0e KERNEL32!BaseThreadInitThunk\n0f ntdll!RtlUserThreadStart\n@vatsan-madhavan this appears to be an issue with the native build of WPFGFX.  Seems to be missing some native resources.\nSee \n\n. This is a native component in WPF.  _v0400 is the one from .net desktop. _cor3 is the one in .net core.  It's part of the Microsoft.DesktopUI.App package so you'll see new versions as the SDK updates.\nWe'll make sure to update this issue with more information about a fix as it is known.. I think the latest announcement was @richlander\u2019s comment:\n\nWe are investigating that, but haven\u2019t yet made a decision. We\u2019ve been focused on the parts I\u2019ve written about above. We see the value it would have, but don\u2019t have anything to announce yet.\n\nFrom https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/. I think the latest announcement was @richlander\u2019s comment:\n\nWe are investigating that, but haven\u2019t yet made a decision. We\u2019ve been focused on the parts I\u2019ve written about above. We see the value it would have, but don\u2019t have anything to announce yet.\n\nFrom https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/. Yeah, coresdk is still on a build that's 8 days old: https://github.com/dotnet/core-sdk/blob/b4fe871ab87f6ddc4561efcc3e510a9b529ad5ce/build/DependencyVersions.props#L41  @livarcocc  / @nguerrera / @dsplaisted would be the ones to ask if we can have them pick up a new one (and see about automating that codeflow).. This is a WPF issue.  I think @rladuca is looking at this.. That doesn't sound right, I'll see about a repro.. Here's a repro: \nrd.zip\nFound the problem.  XamlTypeMapper is comparing runtime type to reference type here:\nhttps://referencesource.microsoft.com/#PresentationBuildTasks/Framework/System/Windows/Markup/BamlMapTable.cs,150\nThe passed in parameters will refer to the reference location but the probeType will come from an actual type object, and thus be runtime type (since PBT is running on .NETCore).\nThat doesn't work when the runtime type is in a different location.  In this case the difference is that System.String reference is in System.Runtime.dll but runtime is in System.Private.CoreLib.dll.\nIt then falls back to try reflection to read a TypeConverter attribute, which won't be there, since this is the core assembly-far below TypeConverter, then fails.\nThis code would have been broken on desktop if we ever forwarded types.  Its similar to the serializer case which uses \"TypeForwadedFrom\" in order to locate the assembly from which the type was forwarded from.\n/cc @nguerrera @ryalanms @rladuca @vatsan-madhavan. Fix for this has been checked into WPF yesterday, leaving this open until fix makes it to the SDK. We were missing the XMLNS attribute for System.Windows.Controls.Ribbon and System.Windows.Documents.DocumentStructures as well which were fixed in the same commit.. System.Windows.Controls.Ribbon was only introduced in .NET 4.5.  https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.ribbon.ribbon. I see, that sounds like a bug with the Microsoft.NET.Sdk.WindowsDesktop implicit references.  You can set DisableImplicitFrameworkReferences to true to disable that, then you have to list your references manually on net4x.  I'll file the bug in the WPF repo on the SDK targets.\nAlternatively, just update it to target net45 instead if your end goal is to get it to core.. ",
    "MichalStrehovsky": "@blackdwarf PTAL\n. @jjindrich I saw you closed Microsoft/OMS-Agent-for-Linux#612. Can we close this one too?. ",
    "zerkms": "Yep, the same here for ubuntu 14.04:\n```\nvagrant@vagrant-ubuntu-trusty-64:~/src/helloworld$ dotnet restore\nlog  : Restoring packages for /home/vagrant/src/helloworld/project.json...\ninfo :   GET https://api.nuget.org/v3-flatcontainer/netstandard.library/index.json\ninfo :   NotFound https://api.nuget.org/v3-flatcontainer/netstandard.library/index.json 1314ms\nerror: Unable to resolve NETStandard.Library (>= 1.0.0-rc2-23704) for DNXCore,Version=v5.0.\ninfo : Committing restore...\nlog  : Restore failed in 1990ms.\nErrors in /home/vagrant/src/helloworld/project.json\n    Unable to resolve NETStandard.Library (>= 1.0.0-rc2-23704) for DNXCore,Version=v5.0.\nNuGet Config files used:\n    /home/vagrant/.nuget/NuGet/NuGet.Config\nFeeds used:\n    https://api.nuget.org/v3/index.json\n```\nThe solution though is\ndotnet restore -s https://myget.org/f/dotnet-core\n. ",
    "galich": "same trouble here\n. ",
    "TigerLeep": "I have the same problem.  I'm trying to use dot net core in Windows Subsystem for Linux on the latest Windows Insiders Preview (14332), so I'm not sure if this is a WSL or Ubuntu issue.\n. I think that by \"being promoted as a feature for developers\", Microsoft\nmeant it was providing access to standard Linux developer tools (like grep,\nsed, tail, nano, etc.) for use when doing development under Windows.  That\nbeing said, I would still love it if the Windows Subsystem for Linux could\nget the point that it could be used for more than just bringing native\nLinux developers tools to Windows, such as developing .Net Core\napplications, MEAN stack development under Linux, etc.\nOn Wed, May 18, 2016 at 8:57 AM, Robb Eads notifications@github.com wrote:\n\nBeing promoted as a feature for developers, I was surprised that getting\ndotnet working wasn't one of the first priorities. Building and testing\n.NET Core for Ubuntu seemed like one of the best reasons for doing\nWSL/Ubuntu. Hope this gets addressed soon.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/dotnet/core/issues/67#issuecomment-220017567\n\n\nLee Perkins\nTigerBase Technologies\nleep@tigerbase.com\n[image: Hampton Roads .NET Users Group]2nd Tuesday of every month. Come\nmeet, learn, network and eat pie!\nhttp://www.meetup.com/Hampton-Roads-NET-Users-Group/\n. ",
    "kekyo": "14342 same problem too.\n. ",
    "vyurchenko": "build 14342 same problem\n. ",
    "rweads0520": "Being promoted as a feature for developers, I was surprised that getting dotnet working wasn't one of the first priorities. Building and testing .NET Core for Ubuntu seemed like one of the best reasons for doing WSL/Ubuntu. Hope this gets addressed soon.\n. ",
    "styfle": "@TigerLeep In a demo video by Microsoft, they specifically show a ruby app being developed using the WSL/Ubuntu. It seems like if they support ruby development, they should also support .NET Core development.\n. ",
    "diryboy": "He demonstrated a time zone issue, it's C# code running on Linux.\n. ",
    "tonysneed": "Yes, I thought it was a nice motivation for developing apps with source code mapped to a Docker container volume.  I'm just trying to piece together the debugging story.\n. Cool, yes happy to share. I have nice demo of using dotnet-watch with Docker: https://github.com/tonysneed/Demo.DotNetWatchDocker\nIt would be cool to be able to attach a debugger and set breakpoints. :)\n. ",
    "joelmartinez": "@tonysneed I too am trying to piece together a nice dev workflow for working with docker ... would you care to share your Dockerfile that shows how to map the container volume? \nAside from the question, also wanted to comment so that I get notifications for this issue :)\n. ",
    "tzwlai": "Looks like @gregg-miskelly has already answered this question in OmniSharp/omnisharp-vscode#220.\n. ",
    "fpawel": "sorry, it seems the reinstalling of dotnet helps\n. ",
    "AleksanderGondek": "RC2 and release of .NET Core Tooling Preview 1 for Visual Studio 2015 has fixed everything.\n. ",
    "palutz": "This is the version provided with the \"official package\" got directly from the \"Getting started\" page on the official site.\nhttps://dotnet.github.io/getting-started/#/macosx\nWhich one is the latest version and how can I get it, pls?\n. The result is exactly the same. Didn't change anything and didn't update anything, at least with the version number (maybe it wasn't updated).\nWhich version do you have on your Mac?\n. I actually did it.\nAnyhow, installing the new (just released) version solved all.\nI used the uninstall script provided and the new installer.\nNow the F# project is compiling and running. \nNice!\n. ",
    "Hochman85": "@MattWhilden \nHi Matt, the VOIP library we have integrated is definitely a UWP one. Apart from the email address provided, could you please suggest another repo (e.g. MSBuild / store / packaging related) so I can move this issue?\nIf the reason of closing this issue was the fact that it did not target UWP could you please re-open it? If it was the repo scope then that'd make sense.\nThanks.\n. Thanks Matt - already sent you an email and I think we got our first conversation (just going through the emails now as we speak). I really appreciate!\n. ",
    "mellinoe": "Right now, there's no \"high-level\" API for audio playback. If you are adventurous, you can try things like OpenTK, which expose lower-level OpenAL functionality. This will be much more difficult than something ready-to-go like System.Media.SoundPlayer, but will be cross-platform and much more flexible.\nDisclaimer: I've never tried to use the OpenAL functionality of OpenTK on .NET Core. I've only used the graphics portions of the library.\n. > Ubuntu xenial, kernel: 4.7.0-999-generic\nUnfortunately, I think this is the problem. There's a known issue with kernel versions > 4.6 which can result in a seg-fault similar to the one you're seeing. We already have a fix for the issue, but current builds of the product haven't shipped with it yet. We should have a new version that fixes the issue soon, but until then there's not really a workaround that I know of (other than a different kernel version). See this issue and this PR for more info about the bug and the fix we made.\n. Great, sorry about the inconvenience. A new version with the bug fixed should be available before too long.\n. Since we are moving all of the tooling to use MSBuild, we most likely aren't going to be investing in fixes for problems like this in the json-based project system. MSBuild will/already does support this particular scenario (just add a <Reference Include=\"<path.dll>\">).\n. I wasn't making any recommendations about what anyone should do, necessarily; it all depends on your project, its requirements and restrictions, etc. The original question was about how to reference a binary directly rather than through a nuget package, so I was just answering that question.\n\nAre you able to point me in the right direction for using MSBuild and specifically if possible referencing an external DLL with a core app? Any feedback would be greatly appreciated because I would love to use Core for proper projects.\n\nRight now, the best thing to do is to go to https://github.com/dotnet/cli and download one of the latest preview CLI's. There is also preview support available in VS 2017 RC, available for download.\n. No, that is not supported. You will need to port the dependency as well, and that will involve working around types and methods that the dependency uses that are not available in .NET Core.\n. Yep, PInvokes work fine. Keep in mind that any native dependency you have needs to be available on all of the platforms you intend to run on. If you only intend on running on Windows, there's no problem, but do keep in mind that any native code used will limit your flexibility.\n. @gkhanna79 Any pointers for AssemblyLoadContext usage?. > That's because .NET core is using the current working directory to discover the standalone/bundled runtime etc. .NET desktop apps used the installed framework so weren't dependent on the current working directory to be where the Exe was deployed.\nI don't think that's accurate. All of my standalone applications can be run from any working directory. Are you sure you don't have other assumptions in your code regarding the working directory?. @madhav5589 If you have a self-contained deployment, then you don't need to invoke it with dotnet. You should have an actual executable file (\"myappname.exe\") in the published output that you can run directly.. @madhav5589 Disclaimer: I don't know much about WinPE, and as far as I know it's an untested scenario.\n\nI was using Exe in the project file with RunTimeIdentifier as \"Any\".\n\nIf you are using a self-contained deployment (which I think makes sense in this case), then you need to choose a specific, concrete RID. In this case, I would try \"win7-x64\". The output of this should include coreclr.dll, \"myapp.dll\", and \"myapp.exe\", as well as a bunch of other miscellaneous files.. > I have a Header file(.h) and a share object(.so), how can I use it in my .net core app.\n.NET Core supports PInvoke, just like the .NET Framework. Define \"static extern\" functions with a compatible signature in your C# code.\nNative function:\nC\nextern \"C\" int32_t MyNativeFunction(int32_t x, int32_t y, int32_t z)\n{\n    return x + y + z;\n}\nC#:\nC#\n[DllImport(\"mysharedobject\")]\npublic static extern int MyNativeFunction(int x, int y, int z);\n(for example)\n\nor How to complete Inter-Process Communication\n\nThere are a variety of ways to do IPC; the same options exist in .NET as in other programming languages. Pipes or Sockets are two main options.\n. If you want to directly share objects in memory, you need to be very careful about the physical layout of your structures. This means that you should use the appropriate fixed-size types, packing directives, etc. on the native side to ensure that their shape is well-defined and predictable. On the C# side, you need to match the structure shape exactly, using the same-sized shapes, as well as LayoutKind.Sequential or LayoutKind.Explicit in a StructLayoutAttribute.\nSharing memory like this is pretty fragile, though. Usually you would want to create a well-defined interface between your managed and native layers, and perform explicit calls between them:\nC#:\nC#\n[DllImport(\"mysharedobject\")]\npublic static extern void GetCameraInfo(out CameraInfo cameraInfo);\nNative:\nC\nextern \"C\" void GetCameraInfo(CameraInfo* pCameraInfo) { return whatever; }\nWith the above, you still need to match the shape of the CameraInfo structure.\nThis is all very hand-wavy. This is a broad topic, and there are many approaches that can be taken. Given that you are talking about a \"CameraInfo\" structure, I'm going to say that you should avoid serializing and deserializing large amounts of state through JSON or XML.. Should these dockerfiles just be removed for now, then? It doesn't even look like most of them will actually build at all since they're all using the same Ubuntu commands.\n. Does this stuff work in docker containers? I'm pretty wary of us putting any colors into stuff now, since our attempts elsewhere rarely work in docker, and often break basic text output and formatting.\n. We don't need all of the *so files from coreclr's output, only the ones that should be in the shared framework directory.\n. Is there a way to override this path? I think FreeBSD uses a different path, for example. Ditto for the next line.\n. What about non-Linux platforms?\n. I was just suggesting that we add them with the follow-up PR instead, since a lot of these don't actually work in their current state (they all use apt-get commands). It's not a big deal either way.\n. I just tested and this works on an alpine container for me. core-setup and cli have their own variant of console color, and it doesn't work in most docker containers. There's also some shell scrpts around that don't work unless you install stuff that they use for console coloring.\nBut this works, so I'm cool with it. \ud83d\udc4d \n. EDIT: Oops, didn't see you commented again; this one is in response to the first reply above.\nYes, it makes sense. It's a difficult thing to solve unless the coreclr build tells you in some way where it is putting the binaries. The other problem with coding the logic here in this script is that, if the logic changes in coreclr, then the script here will work for some coreclr commits and not others.\nIn my script, I essentially pattern-matched the output location of CoreCLR from the build log. That is fragile in its own way, but it's also sort of similar to other pattern matching stuff in this script (to determine the commit hash). And it lets you be resilient to changes between commits, as long as the build output format doesn't change drastically. I don't know if that is a great, robust solution, either, but it's something to consider.\n. This is only relevant for x86/64 processors, though. Should there be a list of architectures supported, instead, and put this as a sub-bullet under x86-64?. There might also be similar \"min-bar\" prereqs for ARM, but I'm not sure what they are.. ",
    "czesiu": "I did own research and I found following libraries/solutions:\n- BASS.NET - .NET wrapper (P/Invoke) for multiplatform un4seen BASS audio library\n- ManagedBass - also wrapper for BASS audio library, but with non restrictive license as BASS.NET. Additionally all P/Invoke part is in PCL library.\n- OpenAL and OpenTK - OpenAL is a cross-platform 3D audio API appropriate for use with gaming applications and many other types of audio applications. OpenTK is a C# wrapper for OpenAL and OpenGL.\n- Gstreamer# - I found this probably on stack overflow. Looks outdated. Looks like P/Invoke bindings to gstreamer library. Banshee is a open source application which uses gstreamer under the hood.\n- Vorbis# - OggVorbis decoder written purely in C#. Not an audio library, but can be used with System.Media.SoundPlayer to play ogg files.\n- PortAudioSharp - .NET bindings (P/Invoke) for the cross-platform low-latency audio library PortAudio.\n- irrKlang - high level 2D and 3D cross platform (Windows, Mac OS X, Linux) sound engine and audio library.\nHere's stack overflow question with some of this libraries mentioned: http://stackoverflow.com/questions/35896/how-can-i-play-compressed-sound-files-in-c-sharp-in-a-portable-way\nI tested only BASS.NET and ManagedBass and they are working with .NET Core on Mono.\nMost of these C# libraries are only P/Invoke bindings to some multiplatform C library. I like ManagedBass because it has PCL library which is .NET Core compatible (DNX and DNX Core environments). BASS.NET (and probably other mentioned libraries) have only full .NET version, so I can run it only with #if DNX451 switches and only in Mono runtime. With PCL ManagedBass I have code without #if DNX451 switches which compiles properly for DNX and DNX Core version.\nBut there is one issue in DNX Core, from which reason I can run ManagedBass only on Mono. This issue is related with name of P/Invoked library. Binding in PCL library looks like that:\n[DllImport(\"bass\", EntryPoint = \"BASS_Start\")]\npublic static extern bool Start();\nand because this is a PCL, then name of library in a code must be same for all platforms. But library name in various platforms is different, e.g. \"libbass.so\" in Linux and \"bass.dll\" in Windows.\nMono has automatic library mapping mechanism described here (there is also manual mechanism described here).\nIs there similar mechanism in DNX Core runtime or do you have plans for adding it?\n. Do you have plans for adding DllMap (automatic or/and manual) mechanism in CoreCLR?\n. ",
    "n9": "@czesiu Maybe ask in a new issue.. ",
    "oaiey": "dotnet run path/to/helloworld.dll\nYour published project looks like a portable application which does not have a native bootstrapper like a shell script or a executable.\n. dotnet run path/to/helloworld.dll\nYour published project looks like a portable application which does not have a native bootstrapper like a shell script or a executable.\n. ",
    "ryanelian": "Heya. Thanks for responding but that doesn't seem to be working.\n\nYeah I'm curious about that too. I wonder if there's a way to generate the console app as executable.\n. Oh wow that worked. Thanks Peter! Managed to spit out the executable by using this project.json (for those who are wondering as well):\n{\n  \"version\": \"1.0.0-*\",\n  \"buildOptions\": {\n    \"emitEntryPoint\": true\n  },\n  \"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      //\"type\": \"platform\",\n      \"version\": \"1.0.0-rc2-3002702\"\n    }\n  },\n  \"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"imports\": \"dnxcore50\"\n    }\n  },\n  \"runtimes\":{\n    \"win10-x64\": { }\n  }\n}\nManaged to dig out abit about project.json here.\n\nYou can also run dotnet\n\nAny idea how to do that against the previously compiled helloworld.dll using the command line? I'm still curious about this one.\nAlso, since the .NET Core is cross-platform, can I run that helloworld.dll compiled on Windows on \nLinux or Mac?\n\nEDIT\nSlightly off-topic but after reading around I tried playing around and used this configuration:\n{\n  \"version\": \"1.0.0-*\",\n  \"buildOptions\": {\n    \"emitEntryPoint\": true\n  },\n  \"dependencies\": {\n    \"NETStandard.Library\": {\n      \"type\": \"platform\",\n      \"version\": \"1.5.0-rc3-24116-00\"\n      //https://dotnet.myget.org/feed/dotnet-core/package/nuget/NETStandard.Library\n    }\n  },\n  \"frameworks\": {\n    \"netstandard1.5\": { }\n  }\n}\nThen I do dotnet run. This appears:\n```\nE:\\helloworld>dotnet run\nProject helloworld (.NETStandard,Version=v1.5) will be compiled because inputs were modified\nCompiling helloworld for .NETStandard,Version=v1.5\nCompilation succeeded.\n    0 Warning(s)\n    0 Error(s)\nTime elapsed 00:00:01.7820775\nThe targeted framework { 'NETStandard.Library': '1.5.0-rc3-24116-00' } was not found.\n  - Check application dependencies and target a framework version installed at:\n      C:\\Program Files\\dotnet\\shared\\NETStandard.Library\n  - Alternatively, install the framework version '1.5.0-rc3-24116-00'.\n```\nNo error but it asks me to install a framework. How to do this?\n. > You mean convert a previously compiled portable app into a standalone one? I don't think that's possible, at least not with the current version of the tooling\nNonono, I meant running the .dll itself. I can't seem to run the compiled binary with dotnet (the command line simply says Object reference not set to an instance of an object. (See screenshot)\n. Regarding the edit, yes I meant to run on RC3 bits. Just pure curiosity. Do you know how to do it?\n. > To run a published dll-\n\ndotnet app.dll\nDon't use \"dotnet run\".\n\nOh wow. That's unexpected. Maybe someone ought to make that clearer in the docs. Thanks!\n. ",
    "aL3891": "You mean convert a previously compiled portable app into a standalone one? I don't think that's possible, at least not with the current version of the tooling\n. I see, that should work.. if the app is compiled as portable it should run anywhere dotnet is installed. (shouldn't net a null reference error anyway) i'd file a bug on the cli repo\nRegarding you edit, did you mean to run on the rc3 bits? \n. ok :) \nYou need to add the right myget feeds to nuget.config so for example: \n<configuration>\n  <packageSources>\n    <add key=\"coreFx\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\n    <add key=\"NuGet\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n</configuration>\nor you can just add it in the vs options\nHere is a sample project.json for a console app:\n```\n{\n  \"version\": \"1.0.0-*\",\n  \"buildOptions\": {\n    \"emitEntryPoint\": true\n  },\n\"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.0.0-rc3-\"\n    },\n    \"System.Runtime.CompilerServices.Unsafe\": \"4.0.0-rc3-\"\n  },\n\"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"imports\": \"dnxcore50\"\n    }\n  },\n\"runtimes\": {\n    \"win10-x64\": { }\n  }\n}\n```\n. It's windows 7+ as far as I know. I don't think even self contained will work on lower windows versions because the dependencies to windows 7+ are in the coreclr/jit\n. Just to clarify, I think we'll never see a single native assembly work cross platform, but the CoreRT team is working on having native compilations for multiple platforms. So you'll be able to natively compile .net core apps for Linux, it will just be a different binary than the windows one.\n. ",
    "gulshan": "To run a published dll-\n    dotnet app.dll\nDon't use \"dotnet run\".\n. ",
    "jkristia": "@ryanelian, agree - it would be good if it was mentioned  right in 'dotnet --help'. I spend a bit of time this morning Bing'ing how to get my console app running on OSX from the publish folder\n. ",
    "mattcdavis1": "can someone point me to where i can get a list of all the options for runtimes?  I'm trying to publish an executable for mac os but i'm not sure what i should be putting as a value in the runtimes json field.  Right now when i run publish i'm just getting a folder with the same files listed in the first comment.\n. @svick - thanks!  based on that article - i've created a json file that looks like this.  However when i run dotnet publish i'm still not seeing a mac executable file.  Am i missing something (right now the app is just a \"Hello World\" single line app)?\n. yep - that worked.  thanks!\n. ",
    "bitslasher": "First off, I'd like to say thank you to you guys for all this information.  It really helped me out.  Secondly, however, after reading this, I felt really sad in the pit of my stomach that this is so convoluted.  This seems like a real mess.  It feels like we've went backwards somehow.\n. ",
    "tbird321": "This did not work for centos linux just for windows mac\n. ",
    "vad710": "I am not sure if it's appropriate for me to add to this thread, but with the obsoletion of project.json and using the new msbuild tools as part of Visual Studio 2017 RC - what is the process of specifying the runtimes in the csproj file?. @albertromkes - were you able to actually generate the proper build for debian? According to this other bug, there is an issue generating builds for specific platforms: https://github.com/dotnet/sdk/issues/527. @Sebosek - I think that the situation that @albertromkes was describing is using the new tooling in csproj xml files since project.json is becoming obsolete. ",
    "albertromkes": "I tried it with the following snippet:\n<PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>netcoreapp1.1</TargetFramework>\n    <RuntimeIdentifier>win10-arm64</RuntimeIdentifier>\n    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>\n    <RuntimeIdentifier>debian.8-x64</RuntimeIdentifier>\n  </PropertyGroup>\nIt does publish succesfully: dotnet publish -r debian.8-x64. No. After running dotnet build -r debian.8-32 I run into the same issue. \nSee blow screenshot:\n\nPublish does produce the correct RID folder and files, but I cannot really test it because there's no ARM support yet for dotnet cli for my Raspberry PI 3 :(\n. @Sebosek  @vad710 Indeed. I am using the 'new' csproj file.. @Petermarcu Yes. I'm watching the releases closely :). ",
    "Sebosek": "@albertromkes I ran in similar issue, check your project.json and ensure, that followings is similar like this:\n```\n\"dependencies\": {\n    \"Microsoft.NETCore.App\": \"1.1.0\"\n},\n\"frameworks\": {\n    \"netcoreapp1.1\": {\n        \"imports\": [\n            \"netstandard1.6\",\n            \"portable-net45+win8\"\n        ]\n    }\n},\n\"runtimes\": {\n    \"win10-x64\": {},\n    \"debian.8-x64\": {}\n}\n```. ",
    "AlexGhiondea": "I ran into this as well and wrote a small msbuild target for this.\nBasically, after the Publish target (which will publish the assets targeting the shared framework), invoke msbuild for each of the RuntimeIdentifiers specified.\n```xml\n\n\n\n\n\n<MSBuild Projects=\"$(MSBuildProjectFullPath)\" Targets=\"Publish\" \n         Properties=\"RuntimeIdentifier=%(RIDsToPublish.Identity)\" \n         RemoveProperties=\"RuntimeIdentifiers\"/>\n\n\n\n\n\n\n```\nYou can import this target into your .csproj and then dotnet publish will publish for all of the RIDs defined in your project.. That would be awesome! :). @Petermarcu yes -- I will move it.. Issue moved to dotnet/corefx #22660 via ZenHub\n. ",
    "srivatsn": "A publishallrids target? No I'm not tracking that for 1.0 . ",
    "JesseChisholm": "re: dotnet run ... vs. dotnet ...\nThe dotnet run ... expects the directory that contains the project.json file - builds it, runs it.\nThe dotnet ... expects the path to the resulting DLL, runs it.\nIMHO: seems like a silly distinction.. ",
    "OlekRia": "\n\"To run a published dll-\ndotnet app.dll\nDon't use \"dotnet run\".\"\n\n\nOK OK. But using dotnet run app.dll  I can use --server.urls http://localhost:12345\nHow can I use another port than default 5000 in case of  \"dotnet run\" ?\n. ",
    "jaxspades": "Hey all,\nMy csproj looks like this:\nxml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>netcoreapp1.1</TargetFramework>\n    <RuntimeIdentifiers>win7-x64</RuntimeIdentifiers>\n  </PropertyGroup>\n</Project>\nHowever, when I use build or publish, I still only get a dll, pdb, and other random output files. What am I missing for creating a standalone exe?. Still getting just a dll with that change.. ",
    "csells": "ditto. no exe output for me, either.. ",
    "jonstodle": "To get an exe you have to specify that you want to build for a specific runtime:\ndotnet publish -c Release -r win10-x64\n\nThis will output the exe in bin\\Release\\netcoreapp1.0\\win10-x64\\publish. The output in the terminal only mentions the dll as that's your actual application, but it will output an exe as well.\nThe docs on this are available here: https://docs.microsoft.com/en-us/dotnet/articles/core/deploying/index#self-contained-deployments-scd. ",
    "Genbox": "Spun up a couple of VMs to test the new RC2 release. Windows XP and Vista is not supported it seems. Native builds does not work either.\n@aL3891 can't imagine any dependencies for a particular OS version in the JIT, but the CLR could have some hard dependencies. For now, people will have to stick with Mono for full Windows support it seems.\n. @VladimirAkopyan I highly doubt there will be cross-platform native assemblies. The assemblies requires the C++ runtime specific to the platform you are using, and the PE/ELF compatibility has always been an issue. Emulation with Wine is the closest we come to native cross platform assemblies, as it emulates running PE files on a layer of Win32 API written to interact with the Linux subsystem.\n.NET Native on the other hand is an ongoing process of compiling IL code to native assemblies. It works fine at the moment, and the CoreRT team is https://github.com/dotnet/corert improving it.\n. @VladimirAkopyan No, it is neither working or ready at the moment. They changed from project.json to MSBuild templates which seems to break everything related to .NET native. Before the change the build tools did have a native switch (dotnet build --native) which generated a working binary (I've tested Windows and Linux). However, since the template change they have retracted .NET Native from all the tools until it is ready to be released.\n. ",
    "VladimirAkopyan": "This is interesting. Should we, at some point, expect cross-platform native executables? \nOr is .net Native team scrambling, trying to get it to work well for UWP? \n. @Genbox my bad. Bascally what I means is - is .Net Native working / ready now? \nI couldn't find it on the roadmap / documentation.\n. ",
    "Deilan": "Here's the corresponding issue in that repo: https://github.com/dotnet/corert/issues/6402. ",
    "zhenlan": "@leecow do you mind to include a section for dotnet/wcf repo as well?\n. Hi @vincentshow, dotnet/wcf is the right repo for any questions regarding WCF. As you have been aware of, WCF is only supported for the client side currently on .NET Core. The only way to build a WCF service is by using WCF in full .NET Framework at this point. \nHowever, we are very interested to understand your scenarios where WCF server side is required on .NET Core for you. Lots of discussions have happened on dotnet/WCF#1200. Do you mind to share more of your details there too?\n. Thanks for the feedback @vincentshow. I am closing this issue now.\n. @gosukonda-gopala you don't need to use \"add service reference\". You can just write WCF client code like you normally did for full .NET Framework. Below is one of tests as an example. Please feel free to check out other tests too.\nhttps://github.com/dotnet/wcf/blob/master/src/System.Private.ServiceModel/tests/Scenarios/Binding/Http/BasicHttpBindingTests.4.0.0.cs. +@shmao . Is this MEF?\n@pavankoppineni, do you have a code snippet or call stack when encountering this error?. @pavankoppineni this does look like asp.net related issue. @Petermarcu has moved the issue to asp.net repo. Please share any extra information you have at aspnet/Home#2291 and right folks should be able to help there.. @leecow can we have WCF called out as a separate bullet point for better discovery? The WCF release note does not really provide additional details for serialization. Thanks!\n. Is this a typo \"... rename of the tooling from RC2 to ~~RC2 -~~ Preview 1.\"?\n. Yes, the change looks great. Thanks @leecow.\n. This step is a bit confusing until I read everything and understood what is for. How about we explain the purpose at the beginning? For example, change this line to \"Add dotnet-core MyGet feed to the project. This step won't be necessary when this tool is released to NuGet.org eventually.\". We have been using MyData as an example throughout this instruction. Why not change \\<AssemblyName>.XmlSerializers.dll to MyData..XmlSerializers.dll?. Why this is still \"5.\"?. Can we add a note something like below?\n\"The following is required for Microsoft.XmlSerializer.Generator to work. You can use command dotnet --info to check which versions of .NET Core SDK and runtime you may already have installed.\". Maybe just \".Net Core SDK 2.0.2 or later\"?. Can this be changed to 2.1 and 2.2?. Just noticed, we had different casing of \".NET\" above.. ",
    "yhhno": "me\uff0ctoo   help\uff1f\n. \u6211\u7684\u89e3\u51b3\u4e86\uff0c  \u56e0\u4e3a\u662f\u7f51\u7edc\u539f\u56e0\u3002\u3002\n\u662f\u6211\u7528\u4e86 \u7ffb\u5899\u5de5\u5177\u7684\u539f\u56e0\uff0c\uff0c\u7ffb\u5899\u5de5\u5177\u6ca1\u6709\u6b63\u5e38\u9000\u51fa\n\u89e3\u51b3\u65b9\u6cd5\uff1a \u6253\u5f00\u7ffb\u5899\u5de5\u5177\uff0c\u9000\u51fa \uff0c\u7136\u540e\u518d\u5b89\u88c5\u5c31\u53ef\u4ee5\u4e86\n. @panyanming  \u7ed9\u4f60\u63d0\u4f9b\u4e0b\u53c2\u8003\n. ",
    "yizhang82": "[1C7C:09B4][2016-05-17T13:30:21]e000: Error 0x80072efd: Failed to send request to URL: https://download.microsoft.com/download/4/6/1/46116DFF-29F9-4FF8-94BF-F9BE05BE263B/packages/aspnetcoremodule_x64_en_rc2_14.msi, trying to process HTTP status code anyway.\n@yhhno @panyanming \u4ece\u65e5\u5fd7\u4e0a\u770b\u786e\u5b9e\u662f\u7f51\u7edc\u95ee\u9898 \uff1a\uff09 \u7ffb\u5899\u5de5\u5177\u8bf7\u8c28\u614e\u4f7f\u7528 :)\n. Closing - it's a case of bad proxy in their network environment. \n. @schellap Could this be a problem with the host?\n. @cartermp p/invoke works in .NET Core. We've been using it in CoreFX implementations without issues. The problem folks are having here are packaging / project related.\n@czifro Can you post another GitHub issue and provide more detail? Are you loading dylib that you package yourself or supplied by the OS?. This looks like a bug to me. @luqunl Can you take a look?\n@Petermarcu Right now the best way is to mail your question/issue to dotnetnative@microsoft.com. I've cc @AlfredoMS in https://github.com/dotnet/cli/issues/6699\n. I'm seeing the same problem with a blank asp.net core application project as well. \nSteps:\n1. Open VS 2017, create a ASP.NET Core Web Application\n2. Change .csproj and add  <RuntimeIdentifiers>win10-x64;ubuntu.16.04-x64</RuntimeIdentifiers>  into a PropertyGroup\n3. Change the publish profile setting to ubuntu.16.04-x64 and publish\n4. Copy the PublishOutput folder into a clean ubuntu 16.04 machine and run\nIt fails with\nUnhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Runtime.Extensions, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\n   at Microsoft.AspNetCore.Hosting.WebHostBuilder..ctor()\n   at Microsoft.AspNetCore.WebHost.CreateDefaultBuilder(String[] args)\n   at WebApplication1.Program.BuildWebHost(String[] args)\n   at WebApplication1.Program.Main(String[] args)\nAborted\nHowever, if I run dotnet publish -c release -r ubuntu.16.04-x64, and copy the result publish folder into that same machine. it works fine. The difference seems to be that System.Runtime.Extension is 4.1.1 in the failing case (when publish from VS) and 4.2.0 when publishing from command line. \nLooks like this is a bug in VS tooling. . @ericstj @Petermarcu FYI. Thanks. That looks like it. I'm closing this issue now. . ",
    "panyanming": "@yizhang82 @yhhno \n\u662f\u4ee3\u7406\u9020\u6210\u7684\u539f\u56e0\uff0c\u6211\u5f00\u4e86\u4e00\u4e2a\u7ffb\u5899\u8f6f\u4ef6\uff0c\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u7a33\u5b9a\uff0c\u628a\u8f6f\u4ef6\u5173\u4e86\u5c31\u6b63\u5e38\u5b89\u88c5\u4e86\n. ",
    "leecow": "LGTM\n. LGTM\n. Hey @akoeplinger - I used the following to generate the list. Being a git neophyte, any suggestions on how to increase the accuracy would be great!\ngit shortlog -sne --no-merges --since release/1.0.0@{2016-03-21}\n. @akoeplinger - arg, of course! I've gotten a bit bleary headed today ;-) Re-running the scripts. \n. lgtm\n. lgtm\n. Yep, accidentally included and will watch more closely for that. \n. lgtm\n. lgtm\n. lgtm\n. cc @ericstj , @terrajobst for the OK\n. Working on an update that will use separate files per namespace and work better than the single giant file. \n. @Petermarcu , I've already implemented the proposed structure so closing the issue.. @lemmaa \nYou're correct that Microsoft releases .NET Core rather than the Foundation and official support .NET Core is provided by Microsoft. You can absolutely use the Microsoft release for your product. The .NET documentation is ever growing and this topic should give you a start on how to think about deploying your applications. \n/cc @blackdwarf @richlander \n. @svick Thanks for the feedback. Our relatively new openness with upcoming plans certainly creates opportunities and challenges in keeping information fresh! Generally speaking, roadmap pages should provide a better view into coming activities and be updated as needed. Unless there are rather grave errors, blog posts will tend to be static and it won't be unexpected if forward looking release information diverges a bit over time. \nI'll update roadmap.md with some \"1.0,1\" information and will add details to the 1.1 section as appropriate. We're expecting to have a blog post ready for publication around the first of September updating everyone on MSBuild progress. \n/cc @richlander @blackdwarf \n. Hi @z2xlong - We've just released an updated installer for macOS. Give it a try and let me know if it resolves the issue. \n. @diogodamiani Yes, these downloads are hosted on download.microsoft.com but the GUID portion will likely be different from release to release. In this case the final URL is https://download.microsoft.com/download/1/0/C/10C868F3-EF61-47A7-95CF-FF2AE042D65F/dotnet-dev-osx-x64.1.0.0-preview2-003148.pkg. Best to utilize the https://go.microsoft.com/fwlink/?LinkID=xxxxx links if you can but I understand the formula you're working with. \n. @diogodamiani One easy way to see the link target is to download the released installer and then check the source URL in whatever download manager you used. Here's the example from Chrome:\n\n. @vaindil Added package refs to the install page. Let me know if that's the right idea. Also fixed Ubunt ;-)\n. @vaindil Gotcha ... will fix that. \n. Apologies for that @tanaka-takayoshi ! Fedora 24 support did not make it into the Preview release but I have confirmed that it's in for the final release. \nFrom the core-setup repo:\ngit shortlog -n --format=\"%h %cd %s\" | grep \"edora 24\"\n      13a1fce Mon Oct 24 13:20:22 2016 -0700 Add build logic and packaging for Fedora 24\n      7aab2f7 Mon Oct 24 13:30:05 2016 -0700 Small modifications to enable fedora 24 build\n      2ac2d09 Tue Oct 25 15:38:49 2016 -0700 Add handling for Fedora 24 in some build code.\n. @Ponant - yes, that's expected until the upcoming Dev15 RC and .NET Core / ASP.NET Core update. \n. Thanks for letting us know about the bad link @Thunderchie-f. Download page has been updated. \n. @rhires, thanks for the feedback. This is inline with discussions we having to Include some gesture to choose what version to target with dotnet new. Will add your vote!\n/cc @richlander \n. Hi @radding, how are you installing .NET Core? . Sorry about that ... fixed!. @blackdwarf - need to wire up the Ubuntu feeds. . Eesh .. indeed ;-) Thanks!\n. lgtm. LGTM. @mikeball - sorry for the inconvenience. Ubuntu links have been fixed up and are working now. Unless there's is a need to use the tarballs, installing from the deb feed as detailed on rc3-download https://github.com/dotnet/core/blob/master/release-notes/rc3-download.md works well. \nCould you check the Mac link again? Seems to work for me. \n. @nil4 yes, the Windows installers should be signed. We're ironing that out right now. . Thanks @benscobie. @Petermarcu, can you help route to the right person?. Opened https://github.com/dotnet/cli/issues/5663 to track this. . LGTM. Thanks for the proposal @tannergooding. We're having similar discussions around here and share the desire for a more transparent, if not predictable, download url scheme. I don't know if we will get it ironed out by the next round, which will coincide with the final release of VS2017, but it will be as soon as we can work it out. . Thanks all. Updating the download archive pages to include runtime downloads. . @Petermarcu - just not done yet. . All download pages should now include runtime archive links. eg\n\n1.0.4\n1.1.1\n\n/cc @preetikr . LGTM. @refack - soup is a good description! We have not been very successful in helping folks track along as the Shared Framework and SDK progressed at different rates. Certainly something we are working to remedy in 2.0. \nThe primary version split is between the project.json based tools, which we are moving away from, and csproj. The Shared Framework doesn't have any restriction so you can target any version using either project type. The following have been pre-releases of SDK 1.0.\n\nSDK Preview 2 and 2.1 support project.json\nSDK Preview 3+ and the recent RC3 and RC4 support csproj\n\n1.0.x and 1.1 refer to Share Framework (Microsoft.NETCore.App) version as the .NET Core \"umbrella\".\nLet me know if this was helpful or if I've just stirred the pot :-)\n. @bryanar - have you had a chance to update the script so we can close this issue?. https://github.com/dotnet/announcements/. The SDK install links at https://www.microsoft.com/net/download/core will be up at 7:30 pacific time. In the meantime you can use https://github.com/dotnet/core/blob/master/release-notes/download-archives/1.1.1-download.md. . https://www.microsoft.com/net/download/core is live. . LTS table formatting is broken. . My initial thought was that the minimal diff didn't warrant separate release notes. . @enricosada - I added the fsharp wiki link to release notes for 1.0.4 and 1.1.1. @yesman85 - I've confirmed that the 1.0.1 SDK and 1.1.1 Runtime are on the feed using for Ubuntu 16.04 and 16.10. You should be able to sudo apt-get update  and sudo apt-get install dotnet-dev-1.0.1. I have seen dependency errors in some situations. If you see something like that, apt-get should recommend running sudo apt-get -f install (with no packages referenced) to clean things up. . @yesman85 - First off, everything looks correct so you're in good shape :-). Second, I apologize for our versioning and the way it's reported is unclear and confusing. When you do an install there are three components which can version independently: host, runtime/shared framework and the SDK. All of these can live side-by-side. Trying to organize and tell a coherent story with all of these versions floating around is proving very difficult.\nYour apt-get install output indicates the packages included in the 1.0.1 SDK are set up. \nSetting up dotnet-host (1.1.0-preview1-001100-00-1) ...\nSetting up dotnet-hostfxr-1.0.1 (1.0.1-1) ...\nSetting up dotnet-sharedframework-microsoft.netcore.app-1.0.4 (1.0.4-1) ...\nSetting up dotnet-hostfxr-1.1.0 (1.1.0-1) ...\nSetting up dotnet-sharedframework-microsoft.netcore.app-1.1.1 (1.1.1-1) ...\nSetting up dotnet-dev-1.0.1 (1.0.1-1) ...\ndotnet will return the Host version (1.1.0) where dotnet --version returns the SDK version. If you poke around the directories under /usr/share/dotnet, you'll probably see a number of installed versions. There is policy in the various components to automatically choose the highest patch version within a minor version \"family\". So if you have 1.0.1, 1.0.3, 1.0.4 under /shared/Microsoft.NETCore.App, 1.0.4 will be used unless you specifically configure a project to use something different. The same rules apply to the other components. \nHope that brief explanation is helpful.. Hi @nikamsshekhar, many of those errors have to do with reaching the ubuntu feeds and not just the dotnet feed so something is definitely amiss. Can you confirm the contents of /etc/apt/sources.list.d/dotnetdev.list? . Good catch @portaljacker and your change looks just right. . Hey folks, link to the Preview 2 tooling have been added to the current 1.0.4 / 1.1.1 release notes as well as the Download Archive index page. Will be updating dot.net shortly. \nSorry for unintentional omission!\n/cc @preetikr . @dazinator - The SDK builds for Preview 2 were 3133 for Windows and 3131 for everything else. We'll update the download archive index to include that information. This download page will have what you're looking for.\nhttps://github.com/dotnet/core/blob/master/release-notes/download-archives/1.0.1-preview2-download.md\n/cc @preetikr . Hi @mohamedmansour - you can use http://landinghub.visualstudio.com/migrate-dotnetcore to connect with folks closest to migration. . LGTM. @richlander @mairaw - seems like we could remove https://github.com/dotnet/core/tree/master/cli entirely?  . Moved to https://github.com/dotnet/core/blob/master/release-notes/1.0/cli-known-issues.md and looks like all issues are captured in the 1.0 known issues doc. \nComplete OS matrix per Core version is at https://github.com/dotnet/core/blob/master/roadmap.md.. We're striving to ease the version story with .NET Core 2 so hopefully it will be a bit cleaner across the Core, SDK, ASP stack but divergences at some point would not be surprising. Have a look at these documents addressing some of this. \n\n.NET Core 2+ Naming and Versioning\n.NET Core 2+ Version Binding\n. Thanks @potatopankakes - link fixed. . Thanks!. To wrap up the comment from @NikolaosWakem - the Azure deployment of 1.0.5/1.1.2 was completed. . LGTM - thanks!. I kinda like standalong ;-) . Thanks @colbylwilliams, fixed.. Hey @yaakov-h, the VS for Mac team has a few items relating to .NET Core 2.0 in this gist.. @dasMulli @powellcj12 - PR submitted to update min macOS version on the getting started page. Thanks for the catch!. Updated Mac Preview page is live updating the min OS ver - net/core/preview#macos. Web site is a private repo so linking the PR doesn't seem like it makes sense?\n\n/cc @jchannon . @egilh - thanks for the feedback. I submitted this as an issue for investigation at core-setup/issues/2613. . Hi @mm-s - which version of Debian so I can give it a go?. @eerhardt Yes, it's my understanding that Debian 9 will be supported by 2.0. \n/cc @richlander @Petermarcu . @haf The macOS installer places .NET Core files in /usr/local/share/. We're working on polishing up the installer experience for 2.0. \nBecause .NET Core installs side-by-side so there's not a true 'upgrade'. Running the new version of an installer (the pkg, not the tar.gz) will place files into versioned directories under the component directories in /usr/local/share/dotnet.\nWhat are you experiencing with homebrew? The only thing that should be used for is installing OpenSSL. Step-by-step instructions as well as a video can be seen at https://www.microsoft.com/net/core#macos. . @haf - got a bit caught up on the desire for a Homebrew formula. Still a possibility but nobody is looking at it right now. I understand that bringing in OpenSSL for 1.0/1.1 is not a great experience and, as @karelz points out, this has been remedied for 2.0.\nI haven't seen our installer fail just because /usr/local/share/dotnet/ is present so I'm interested to understand more. As I mentioned earlier, .NET Core components install side-by-side so there could be any number of versioned directories under /usr/local/share/dotnet/sdk, for example. There is only a single dotnet.exe at the root of the dotnet director structure and this should updated with each install. . At these time, there is no alignment between a VS update and .NET Core Preview 2.. @haf - I would like to understand the installer issue (homebrew is a separate matter) so I can attempt to reproduce the behavior. Can you accurately, and in detail, describe how you had installed .NET Core previously and how you initially attempted to install the update before resorting to manually overwriting? What versions did you have installed at the time of the attempted update? /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ will show the versioned directories (semver fwiw).. I think @vancem was working on a solution for 2.0 Preview 1. I've added download links for 1.0.5 / 1.1.2 to the respective download pages. . Looks like the ASP.NET Core 1.0.5 release tag is live. . Confirmed I can reach the site as well. . Sorry about that - links added to the 2.0 Preview 1 download page. . Post the relevant text for Preview 1 and I can amend those notes. . Thanks @ericstj - is there an issue number which I could also reference or is this just a configuration heads-up?. The SlickEdit folks acknowledged the feature request and marked the post 'logged' so I think tracking at this point happens on their side? Looks like releases happen ~1/yr and v22 released a couple weeks ago.. Notes added to the download page, known issues doc and made the requirement more obvious on the Preview getting started page.. @morrisjoe - can you take a look a the above?. @MichaelSimons @richlander @kendrahavens to have a look. . Thanks @wuzzeb - missing entries have been added to the checksum files. . @nicksav - Azure App Services deployment is complete so should be good to go in all regions. . @Tealons - working with the App Services team on on how that would play out. Stay tuned!.. Moving issue to corefx repo. Issue moved to dotnet/corefx #23343 via ZenHub\n. @rohit21agrawal - sorry for the confusion and I'll try to come up with a way to represent this on the support site. Basically we're going to maintain both as LTS until a 2.0 LTS is declared which will then start the 1 year end of life countdown for both.\nOne thing to clarify. The lifecycle dates begin with the first release in the band and it is not reset by subsequent patch releases. . Correct, 2.0 has not been declared LTS yet. See the 2.0 release notes and the Support Lifecycle section of the 2.0 blog announcement.. @omajid and @rohitshrivastava04 - could you have a look at the note I added after the table on https://www.microsoft.com/net/core/support and let me know it helps clarify?. @divega @danroth27 . @danroth27 . Looks good to me and I'm not aware of any formal verification for this script. cc @johnbeisner who maintains dotnet-install.sh and may have review insights. . LGTM . Yes, latest 1.0 and 1.1 are on all feeds. Here's 16.04\n```\nleecow@lbc-1604:~$ apt search dotnet-\nSorting... Done\nFull Text Search... Done\ndotnet-dev-1.0.4/xenial 1.0.4-1 amd64\n  .NET Core SDK 1.0.4\ndotnet-dev-1.1.4/xenial 1.1.4-1 amd64\n  .NET Core SDK 1.1.4\ndotnet-host/xenial,now 2.0.0-preview2-25407-01-1 amd64 [installed,automatic]\n  Microsoft .NET Core Host - 2.0.0 Preview 2\ndotnet-hostfxr-1.0.1/xenial 1.0.1-1 amd64\n  Microsoft .NET Core 1.0.6 - Host FX Resolver 1.0.1\ndotnet-hostfxr-1.1.0/xenial 1.1.0-1 amd64\n  Microsoft .NET Core 1.1.3 - Host FX Resolver 1.1.0\ndotnet-hostfxr-2.0.0/xenial,now 2.0.0-1 amd64 [installed,automatic]\n  Microsoft .NET Core Host FX Resolver - 2.0.0 2.0.0\ndotnet-hostfxr-2.0.0-preview2-25407-01/xenial 2.0.0-preview2-25407-01-1 amd64\n  Microsoft .NET Core Host FX Resolver - 2.0.0 Preview 2 2.0.0-preview2-25407-01\ndotnet-runtime-2.0.0/xenial,now 2.0.0-1 amd64 [installed,automatic]\n  Microsoft .NET Core Runtime - 2.0.0 Microsoft.NETCore.App 2.0.0\ndotnet-runtime-2.0.0-preview2-25407-01/xenial 2.0.0-preview2-25407-01-1 amd64\n  Microsoft .NET Core Runtime - 2.0.0 Preview 2 Microsoft.NETCore.App 2.0.0-preview2-25407-01\ndotnet-sdk-2.0.0/xenial,now 2.0.0-1 amd64 [installed]\n  Microsoft .NET Core SDK - 2.0.0\ndotnet-sdk-2.0.0-preview2-006497/xenial 2.0.0-preview2-006497-1 amd64\n  Microsoft .NET Core SDK 2.0.0 Preview 2\ndotnet-sharedframework-microsoft.netcore.app-1.0.5/xenial 1.0.5-1 amd64\n  Microsoft .NET Core 1.0.5 - Runtime Microsoft.NETCore.App 1.0.5\ndotnet-sharedframework-microsoft.netcore.app-1.0.7/xenial 1.0.7-1 amd64\n  Microsoft .NET Core 1.0.7 - Runtime Microsoft.NETCore.App 1.0.7\ndotnet-sharedframework-microsoft.netcore.app-1.1.2/xenial 1.1.2-1 amd64\n  Microsoft .NET Core 1.1.2 - Runtime Microsoft.NETCore.App 1.1.2\ndotnet-sharedframework-microsoft.netcore.app-1.1.4/xenial 1.1.4-1 amd64\n  Microsoft .NET Core 1.1.4 - Runtime Microsoft.NETCore.App 1.1.4\n```. Looks like the updated runtime-deps and sdk didn't make the upload. Checking into this now. . Alrighty, sorry about that. Give it another whirl now.. The 1.1.0 SDK first shipped with Visual Studio. Today was the first standalone .NET Core release which included the 1.1 SDK and you can see details and download links in the release notes.. @johnbeisner to look into updating dotnet-install.sh to account for gpg changes. . Issue moved to dotnet/cli #7808 via ZenHub\n. They're the same. We needed an easy way to track downloads from either the 'getting started' pages versus downloads that came from other places. Copy and rename to the rescue :-) . Thanks @omajid. Quick and dirty fix for now ... I've added a note to the existing document redirecting to the docs site. . Updates merged.. Updates merged.. @xLabel - a technical blocker would be an issue which prevented .NET Core functioning correctly.. LGTM. Thanks for the report @BJMdotNET! Link should be correct now. . Sorry about that and thanks for the report @johnnyasantoss , fixed!. Thank @johnnyasantoss but I already fixed up the dl page yesterday. . Yep, changes are live - https://github.com/dotnet/core/pull/1043. Sorry about that @martincostello , fixed. . @DavBrennan - enabling yum/dnf/apt-get update behavior is on the list to work through. Because .NET Core is entirely side-by-side, it presents a few interesting challenges which will need to be figured out.. Excellent, thanks for the pointer @DavBrennan ! fyi @rakeshsinghranchi @wli3 . Sorry about that @rgl . Fixed!. Thanks @Petermarcu - copy/paste error :-(. The links are correct but definitely something wrong with the corefx symbols zip - it's only 9k. @Petermarcu are you saying the coreclr zip is the only one needed?. cc @dagood who has been generating the zips. . Good news that that's the file we want as -runtime-symbols- files are already getting captured when we produce the stabilized builds (eg https://dotnetcli.blob.core.windows.net/dotnet/Runtime/2.0.3/dotnet-runtime-symbols-2.0.3-win-x64.zip). \nThe zips which @dagood has been gathering are significantly larger. Is there anything in the delta that is important?. @dasMulli - this release managed to sneak around me and I'm still catching up to it. download-archives page will be up shortly. . 2.1.2 SDK was a 15.5 release with no runtime updates - https://github.com/dotnet/cli/releases/tag/v2.1.2. Everything else should be caught up in the github archive. . I don't have the usual, full featured release notes. Highlights included in https://github.com/dotnet/cli/releases/tag/v2.1.2. I've updated all downloads to use wget instead of curl to clear up some other inconsistencies.. https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.4.md. Issue moved to dotnet/core-setup #4296 via ZenHub\n. Thanks @AluminiumTech. Yes, we will be making this changes to the support policy. . https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0-supported-os.md updated. . @liamdawson - can you include the contents of /etc/zypp/repos.d/dotnetdev.repo?. Thanks. I confirmed on things are working correctly on my 42.3 VM.\nJust to check, you've both installed the Microsoft repo key with sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc?\nIf so, it might be good to refresh things to use the latest config info. To clean things up:\nRemove cached repo data and previous dotnetdev.repo: \n\nsudo rm-rf /var/cach/zypp/raw/packages-microsoft* \nsudo rm /etc/zypp/repos.d/dotnetdev.repo\n\nInstall the updated repo definitions with \n\nwget https://packages.microsoft.com/config/opensuse/42.2/prod.repo\n\nLooks like the config file doesn't enable gpg checking by default so you'll need to add the following\n\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\n\nThen move it into place\n\nsudo mv prod.repo /etc/zypp/repos.d/microsoft-prod.repo\n\nNot strictly necessary but sudo zypper refresh will rebuild the repo data in /var/cach/zypp/ before trying update but I usually do when performing this kind of cleanup. \n. @Petermarcu , @christiansk - sorry about the version scrambling. Fixed!. There is no pkg uninstall and I don't believe we have written down what manual removal looks like.\n@zwszwszws - as Peter suggests, you can just run the latest Mac installer and you'll be good to go. . fixed - thanks @BJMdotNET . Thanks @namax - all of the dl commands have been updated to use wget. . Thanks, @namax ! You can see the updates in https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.5-download.md. Would you mind having a look before I prop them to the main website?. Thanks for the catch @namax.\nHave a look at the contributing doc for the best places to finds issues to coding issues to work on.. Issues that no one is working on are marked \"up for grabs\". Commenting in the issue that you are working on it will be enough. \nWith respect to wget -qO-, specifically the -O- portion; this saves the contents of the file to STDOUT which allows it to be directly piped to the gpg command. . Closing as it looks like the conversation was continued with the Azure folks. . Ideas are coming together at https://gist.github.com/leecow/afc1cda5262a702c05978f5a149e2fdc. Will be moving to the designs repo soon. Feel free to comment @CRCinAU !. No, Debian 9 is 2.0. https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md. . Supported OS documents updated. Still work to do to get the core-setup repo builds updated.. Hey @murbanowicz - working with the team that manages packages.microsoft.com and hope to have an 18.04 feed up in the next few weeks. . 18.04 PPA is up. The next 2.1 Preview will be pushed there as well as an upcoming 2.0 update as soon as 18.04 support is added.  . 18.04 support was added to Master so I don't believe we have Preview 1 builds that would work. Certainly the tarball could be used along with a daily build of the dependency installer (or manually install them). Issue moved to dotnet/corefx #27565 via ZenHub\n. Thanks @savornicesei - I'm looking into our options. . Thanks @billpratt - Fixed and changes should be live soon. Noticed similar errors in a few other deb feed definitions. . Thanks @kumpera !. Issue moved to dotnet/corefx #27564 via ZenHub\n. Looks like this was already fixed. . Looks like this was already fixed. . LGTM! cc @preetikr . cc @preetikr . We're looking into the hosting bundle issues. https://github.com/aspnet/Home/issues/2954#issuecomment-373025371 . @fabiano - the bundle does not contain the 2.0.6 Runtime Package Store. We're in the process of rebuilding and testing the bundle and will update as soon as it's ready. https://github.com/aspnet/Home/issues/2954#issuecomment-373116879. @DoCode - 2.1.0 will be updated at the next preview release. . For updates which take tooling updates for VS, we haven't be doing notes beyond the CLI repo release tag - https://github.com/dotnet/cli/releases/tag/v2.1.2 is the last example. Waiting on @livarcocc for the 2.1.102 tag so that repo release info can be published.\nLet me know if the 2.1.2 example is sufficient or if notes similar to the larger updates would be helpful.  . Thanks all for the feedback. We're fixing things so that everyone has sufficient information on release day to make appropriate choices for their situation. . @dasMulli - will do as soon as a few other tasks related to the release are complete. Hopefully this morning. \ncc @livarcocc @preetikr . 2.1.103 release docs are published. . Thanks @SabotageAndi - Will make these updates and they'll be live the next time we need to update the site metadata. . Quite a few recent updates to https://www.microsoft.com/net/download which included the server hosting packages.. Lots of updates to https://www.microsoft.com/net/download which included making the server hosting bundles more discoverable. . Looks like these were fixed up already. . Closing as 2.1 GA (and 2.1.1) has released. . Hmmm, what do you get when you run apt search dotnet-runtime-2.0.6?. Could be though I don't know anything about appveyor. I wonder if there is some package caching going on.  . https://github.com/dotnet/core/blob/master/roadmap.md includes 2.2 and 3.0 mentions. . @robert-ovens is correct. The host package is authored such that the latest version is pulled in by the package manager. Until we get the packages re-posted, I was able to workaround this by manually install the specific version of the host first. This can be done with apt-get install dotnet-host=2.0.6-1. Available versions on deb-based systems can be seen with apt-cache madison dotnet-host. Once the host is installed, install whatever version of the runtime or sdk you need.\nHere's what it looked like in my 17.10 vm\nleecow@lbc-1710:~$ sudo apt-get install dotnet-host=2.0.6-1\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following NEW packages will be installed:\n  dotnet-host\n0 upgraded, 1 newly installed, 0 to remove and 30 not upgraded.\nNeed to get 33.9 kB of archives.\nAfter this operation, 133 kB of additional disk space will be used.\nGet:1 https://packages.microsoft.com/repos/microsoft-ubuntu-artful-prod artful/main amd64 dotnet-host amd64 2.0.6-1 [33.9 kB]\nFetched 33.9 kB in 0s (63.1 kB/s)\nSelecting previously unselected package dotnet-host.\n(Reading database ... 100797 files and directories currently installed.)\nPreparing to unpack .../dotnet-host_2.0.6-1_amd64.deb ...\nUnpacking dotnet-host (2.0.6-1) ...\nSetting up dotnet-host (2.0.6-1) ...\nProcessing triggers for man-db (2.7.6.1-2) ...\nleecow@lbc-1710:~$ sudo apt-get install dotnet-sdk-2.1.104\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following additional packages will be installed:\n  aspnetcore-store-2.0.0 aspnetcore-store-2.0.3 aspnetcore-store-2.0.5 aspnetcore-store-2.0.6 dotnet-hostfxr-2.0.6 dotnet-runtime-2.0.6 liblttng-ust-ctl2\n  liblttng-ust0 libunwind8 liburcu6\nThe following NEW packages will be installed:\n  aspnetcore-store-2.0.0 aspnetcore-store-2.0.3 aspnetcore-store-2.0.5 aspnetcore-store-2.0.6 dotnet-hostfxr-2.0.6 dotnet-runtime-2.0.6 dotnet-sdk-2.1.104\n  liblttng-ust-ctl2 liblttng-ust0 libunwind8 liburcu6\n0 upgraded, 11 newly installed, 0 to remove and 31 not upgraded.\nNeed to get 94.0 MB/126 MB of archives.\nAfter this operation, 376 MB of additional disk space will be used.\nDo you want to continue? [Y/n] y. Fix is done and tested. Should have everything updated by midday tomorrow at the latest.. Update on this: \nDebian, Ubuntu, OpenSUSE and SLES feeds should be up and running for Preview 2 with a fix dotnet-host fix to resolve the compat issue. Still having trouble with the rhel feed used for RHEL, Fedora, CentOS and Oracle need another team to do some surgery to the repo so will need to wait for Monday.. Ubuntu feeds should be up and running now for Preview 2.. Update on this: Debian, Ubuntu, OpenSUSE and SLES feeds should be up and running for Preview 2 with a fix dotnet-host fix to resolve the compat. Update SDK build is 2.1.300-preview2-008533.\nStill having trouble with the rhel feed used for RHEL, Fedora, CentOS and Oracle need another team to do some surgery to the repo so will need to wait for Monday.. Feed for RHEL, Fedora, CentOS and Oracle is up an running correctly now. \nThanks, @asadsahi - will be re-enabling the various documentation locations today. . @asadsahi - looks like the https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-2.1.300-preview2 page is correctly referencing the updated SDK build now. . Need to add 2.1.300-preview2-008533 as that's the re-release we just finished. . Language version supported added to releases.json which is used to populate the download pages such as https://www.microsoft.com/net/download/dotnet-core/2.1.. I've confirmed the 17.10 repo is working correctly and was able to install dotnet-sdk-2.1.104 (we released 2.1.105 today). It may be that you need to do a little house cleaning. The easiest first step is to sudo apt-get remove dotnet-host. This will uninstall the host and all dependencies leaving you in a fairly clean state to try in re-install. . closing pull request so we can clean a few things up. . Thanks for pointing this out @BJMdotNET - fixed. . Thanks Gregg, submitted an issue on the site repo to have those steps removed. . Thanks @riezebosch - releases files have been updated and we'll get this propagated to the download pages. \ncc @rowanmiller . Can update as soon as RC diffs are available at https://github.com/dotnet/core/tree/master/release-notes/2.1/Preview/api-diff. @weshaggard or @terrajobst, can you generate the RC diff?. Sorry @RoySalisbury, we'll get it worked into the download pages. . Hopefully this will get you going while we work out the documentation\n\ndotnet-sdk-2.1.300-rc1-008673-linux-arm.tar.gz\ndotnet-runtime-2.1.0-rc1-linux-arm.tar.gz\naspnetcore-runtime-2.1.0-rc1-final-linux-arm.tar.gz\n\ncc @preetikr \n. @NinoFloris - soon-ish ;-). @laultman - 2.1.300-rc1-00873 and https://github.com/dotnet/core/blob/master/release-notes/releases.json is the 'canonical' release version list.. @jasonkenneth - The 2.1.4 SDK instructions should not reference 18.04 as support for that version was only added in April. The 2.1.4 SDK is not available on the 18.04 feed which accounts for the error you see. The latest available .NET Core 2.0 Runtime and SDK for 18.04 is SDK 2.1.200 and Runtime 2.0.7. \nsudo apt-get install dotnet-sdk-2.1.200 and you'll be good to go. . Looking into this ... Good to go now. . Sorry about that @kalch - fixed. \ncc @preetikr . @muratg , PTAL. There isn't anything in the .NET Core SDK or Runtime that depends on aadlogin. \ndpkg-deb -I dotnet-sdk-2.1.200_2.1.200-1_amd64.deb\n new debian package, version 2.0.\n size 76327588 bytes: control archive=30532 bytes.\n     717 bytes,    11 lines      control\n  129210 bytes,  1044 lines      md5sums\n    1710 bytes,    28 lines   *  postinst             #!/usr/bin/env\n Package: dotnet-sdk-2.1.200\n Version: 2.1.200-1\n Architecture: amd64\n Maintainer: Microsoft <dotnetcore@microsoft.com>\n Installed-Size: 204998\n Depends: aspnetcore-store-2.0.8, dotnet-runtime-2.0.7\n Section: devel\n Priority: standard\n Homepage: https://dotnet.github.io/core\nWhere are you seeing the ask for this package? \nWith respect to the hash issue, probably easiest to start by sending a note to the listed maintainer Azure AD <azuread@microsoft.com>.. Contacting repo admins.. @muratg @natemcmaster, PTAL. . Closing as conversation has gone quiet and it looks like you're on the path. If further help is need, a topic on either https://github.com/aspnet/ or stackoverflow would be a good next step. . @ajcvickers @livarcocc - PTAL. Created - https://github.com/dotnet/core/releases/tag/v2.0.7-2. This was a strange release to figure out how to communicate since there was not .NET Core Runtime update. We'll make it better the next time this scenario pops up!. Done - https://github.com/dotnet/core/pull/1570. @natemcmaster @ajcvickers @muratg . @andtii  - blob permissions to not enable browsing at that level. Tested a couple SDK and Runtime links and should be good to go now. . /cc @preetikr \n@andtii - something is truncating the build number in the path and filename. I've confirmed the csv is correct in this case. \nYou have ...\n* https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.300-rc1-00867/dotnet-sdk-2.1.300-rc1-00867-win-x64.zip\nShould be ...\n* https://dotnetcli.azureedge.net/dotnet/sdk/2.1.300-rc1-008673/dotnet-sdk-2.1.300-rc1-008673-win-x64.zip\nThat said, I believe VSTS relies on Azure App Services and the RC1 deployment is still underway. Hopefully live in the next day or so. You can download the using the blob addresses provided in the csv.\n@da1rren - exactly what are you doing when you see 'invalid response'? As I mention above, the blob stores are not directly browsable. \n\nhttps://dotnetcli.blob.core.windows.net/dotnet/Sdk/2.1.300-rc1-008673/ will fail\nhttps://dotnetcli.blob.core.windows.net/dotnet/Sdk/2.1.300-rc1-008673/dotnet-sdk-2.1.300-rc1-008673-win-x64.zip works. . @chuckries - links added to the RC1 download archive page. . @kwiknick - I'll have a look. How are you installer PowerShell on 18.04? I don't see that it's available on https://packages.microsoft.com/ubuntu/18.04/prod. \n\napt-get update will look at all installed packages for possible updates. This might would account for the clamav and slack stuff. There's definitely nothing related to either in the .NET Core SDK installer or dependencies. . Thanks @kwiknick - will do some poking around.. Grabbed the 17.04 installer from https://github.com/PowerShell/PowerShell which would require some unnatural acts to install 'properly' as the deb has system dependencies specified which are older than what are available on 18.04. I was able to install the SDK 2.1.200, which brought along most of the dependencies that powershell defines (though current versions) then installed the 17.04 powershell deb and was able to launch pwsh and run a few rudimentary commands successfully. \nStill am not sure about the uninstall behavior you saw though it may be linked to the unmet dependencies as defined in the powershell deb. apt-get update is a really big hammer and, AFAIK, evaluates the dependency trees of every installed package and tries to figure out what to do with them if something is off. . Closing as this hasn't popped up anywhere else.. @Saevar2000 - yep, that looks like a successful install. I'll remove the errant space in compat-openssl10 in the instructions. . @rainersigwald , @AndyGerlicher - does this look related to https://github.com/Microsoft/msbuild/pull/2384?. Implementing support for a given OS version, no matter the vendor, has a number of associated costs. Those costs are considered alongside customer feedback and other data that point to where customers either are, or will be soon. The line has has to be drawn somewhere and it was generally decided to begin with what was in active support by the various OS owners (Apple, Linuxes and Windows) at the time we began .NET Core 2.0 which somewhat straddled the 10.11 / 10.12 line.. @natemcmaster @JunTaoLuo @muratg . Closing as the conversation has gone quiet. Please re-open if there are still issues. The latest (as of this post) 2.0 Hosting installer can be downloaded from https://www.microsoft.com/net/download/dotnet-core/runtime-2.0.8. @vellozzi there was a single package updated - detailed in https://github.com/dotnet/core/blob/master/release-notes/2.0/2.1.200-sdk.md.. Link mentioned in this issue is updated. . LGTM. Tracked by https://github.com/aspnet/Razor/issues/2422. The 2.0.8 release was a little different in that the ASP assets were updated and versioned but the .NET Core Runtime components had no changes so were not rebuilt with the matching version. This turns out to have been a mistake. Going forward, there will alway be a full version update across ASP Core and .NET Core when either side has an update which results in a new patch version. . Names are definitely hard to get right. .NET Core can be thought of as the overarching umbrella brand for .NET Core, ASP.NET Core and Entity Framework Core. Core is the lightweight, cross platform stack, whereas .NET Framework (ie Desktop) is Windows-only. https://docs.microsoft.com/en-us/dotnet/standard/choosing-core-framework-server details a number of the differences.  . Issue moved to dotnet/cli #9428 via ZenHub\n. Should probably live in release-notes/2.1 rather than Preview.. Hadn't thought of the api-diff directory but I like it. . @tanaka-takayoshi - we're aware of the issue and tracking in https://github.com/dotnet/core/issues/1620. @damageboy - contacting the repo admins to see if they can resolve. . @mrichards3 - yes, the RHEL release is still being finalized. Talked with the Red Hat folks yesterday and they're on track to release next week. . Closing this issue now that 2.1.1 is released. . @gnjack and @bording - I think things are cleaned up at this point. Did a check on 18.04 and Fedora and both look good. Holler if you see something else. . Metadata for the /rhel/7/ repo needs a kick of some kind. Back to the admins ...\nWorkaround is still to explicitly yum install -y dotnet-host-2.1.0 first. . rhel/7/ repodata has been regenerated and my CentOS test passed. @gnjack, let me know if things look good from your end.. Thanks @svick ! . Sorry about that, the correct package name is aspnetcore-runtime-2.1. Fixing up the site. \nThis was called dotnet-hosting in 2.0 but has been changed. Still not a great name so will be looking at a better option for this package. . @SergeyChanaev - yes, I have an issue logged with @rowanmiller to make the change. . Closing this issue as it's a dupe of https://github.com/dotnet/core/issues/1620. Thanks for reporting this @akunaatrium . I think the correct fix for the standard instructions (docker run may well need something a little different) is to just remove the first packages-microsoft-prod-deb. The updated command will be wget -q https://packages.microsoft.com/config/ubuntu/17.10/packages-microsoft-prod.deb. I've tested this on 14.04 through 18.04 VMs and seems to be ok. . Issue moved to dotnet/cli #9426 via ZenHub\n. @daemnin - can you provide the info @natemcmaster is requesting?. Thanks for the submission. Looks like @preetikr updated the file already. . Looks like this was resolved by the round of repo metadata updates that finished yesterday. . Bumping this over to CoreFX.. Issue moved to dotnet/corefx #30174 via ZenHub\n. The RC-final package should not be uninstalled by the 2.1.0 because RC was prior to our implementing the package name and versioning updates to enable updates. So not sure what might be going on. \nPackage name and versions of RC and GA should have no interaction by the package manager.\n```\n$rpm -qip aspnetcore-runtime-2.1.0-x64.rpm \nName        : aspnetcore-runtime-2.1\nVersion     : 2.1.0\n$rpm -qip aspnetcore-runtime-2.1.0-rc1-final-x64.rpm \nName        : aspnetcore-runtime-2.1.0-rc1-final\nVersion     : 2.1.0_rc1_final\n```\nMy install test on Fedora 28 correctly retained RC1 after installing GA.\n```\nleecow at fedora-28 in [/usr/share/dotnet]\n$find . -maxdepth 3 -type d -iname 2*\n./shared/Microsoft.AspNetCore.All/2.1.0-rc1-final\n./shared/Microsoft.NETCore.App/2.1.0-rc1\n./shared/Microsoft.AspNetCore.App/2.1.0-rc1-final\n./host/fxr/2.1.0-rc1\nleecow at fedora-28 in [/usr/share/dotnet]\n$sudo dnf install aspnetcore-runtime-2.1\n[sudo] password for leecow: \nLast metadata expiration check: 0:50:29 ago on Mon 04 Jun 2018 09:03:39 AM PDT.\nDependencies resolved.\n====================================================================================================\n Package                      Arch         Version          Repository                         Size\n====================================================================================================\nInstalling:\n aspnetcore-runtime-2.1       x86_64       2.1.0-1          packages-microsoft-com-prod        29 M\nInstalling dependencies:\n dotnet-hostfxr-2.1           x86_64       2.1.0-1          packages-microsoft-com-prod       195 k\n dotnet-runtime-2.1           x86_64       2.1.0-1          packages-microsoft-com-prod        27 M\nTransaction Summary\nInstall  3 Packages\nTotal download size: 56 M\nInstalled size: 56 M\nIs this ok [y/N]: y\nDownloading Packages:\n(1/3): dotnet-hostfxr-2.1.0-x64.rpm                                  37 kB/s | 195 kB     00:05  \n(2/3): aspnetcore-runtime-2.1.0-x64.rpm                             2.9 MB/s |  29 MB     00:09  \n(3/3): dotnet-runtime-2.1.0-x64.rpm                                 2.6 MB/s |  27 MB     00:10    \n\nTotal                                                               5.4 MB/s |  56 MB     00:10   \nRunning transaction check\nTransaction check succeeded.\nRunning transaction test\nTransaction test succeeded.\nRunning transaction\n  Preparing        :                                                                            1/1 \n  Installing       : dotnet-hostfxr-2.1-2.1.0-1.x86_64                                          1/3 \n  Installing       : dotnet-runtime-2.1-2.1.0-1.x86_64                                          2/3 \n  Installing       : aspnetcore-runtime-2.1-2.1.0-1.x86_64                                      3/3 \n  Verifying        : aspnetcore-runtime-2.1-2.1.0-1.x86_64                                      1/3 \n  Verifying        : dotnet-runtime-2.1-2.1.0-1.x86_64                                          2/3 \n  Verifying        : dotnet-hostfxr-2.1-2.1.0-1.x86_64                                          3/3 \nInstalled:\n  aspnetcore-runtime-2.1.x86_64 2.1.0-1              dotnet-hostfxr-2.1.x86_64 2.1.0-1           \n  dotnet-runtime-2.1.x86_64 2.1.0-1                 \nComplete!\nleecow at fedora-28 in [/usr/share/dotnet]\n$find . -maxdepth 3 -type d -iname 2*\n./shared/Microsoft.AspNetCore.All/2.1.0-rc1-final\n./shared/Microsoft.AspNetCore.All/2.1.0\n./shared/Microsoft.NETCore.App/2.1.0-rc1\n./shared/Microsoft.NETCore.App/2.1.0\n./shared/Microsoft.AspNetCore.App/2.1.0-rc1-final\n./shared/Microsoft.AspNetCore.App/2.1.0\n./host/fxr/2.1.0-rc1\n./host/fxr/2.1.0\n``. Thanks for the Windows platform clarification. @joeloff will have a look at that side of things.. @joeloff - can you confirm the work on your side is done? If so, I'll close this issue. . @joeloff - is there a github issue we can reference then close this one?. Issue moved to [dotnet/cli #9425](https://github.com/dotnet/cli/issues/9425) via [**ZenHub**](https://www.zenhub.com/)\n. Moved to ASP.NET Core.. If Google Translate is to be believed, I think this can be closed.  . I ran your code on Mac, Fedora 28 and a clean CentOS 7 image and all returnfalse`. Going to move this to the CoreFX to start. . Issue moved to dotnet/corefx #30173 via ZenHub\n. @damageboy - to make sure I understand, the issue isn't necessarily the packaging, but the representation on the repo, right?\ncc/ @mbearup. I don't know how much governance we have around submissions to the repos at this point but have included Matt so they are aware. Do let me know if there is any trouble with the .NET Core files as that is what I can directly do something about ;-). Hi @tristan957 - This is an issue on a few distros that I haven't gotten to the bottom of yet. Let me shake some bushes around here and figure out what conditions can lead to the errors. . Don't know yet if it's related but found this - https://github.com/dotnet/corefx/issues/29942. Chasing another issue has lead me to a possible solution for this one ;-) Looks like this is related to the switch to SocketsHttpHandler (see the 2.1 Preview 2 blog post). \n@tristan957 - I was able to get restore working on my Solus box by first running export DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0. Once I did that, dotnet restore worked. . I think it may have more to do with Ubuntu Core which is the root of the Snap environment where snaps really run. Still need to poke around a bit more. . Issue moved to dotnet/core-setup #4295 via ZenHub\n. Closing this as it's gone quiet. Please re-open if you're still having issues. . Adding a few ASP folks that may have insight - cc @danroth27 @glennc . @natemcmaster @danmosemsft . @preetikr . The json should be considered the source of truth. . @natemcmaster @muratg . @livarcocc . Issue moved to https://github.com/aspnet/Home/issues/3248. Closing - thanks @mikedn !. cc @muratg \nIf it's the same problem, there may be an issue with the SocketsHttpsHandler in that sample. Have a look at the workarounds detailed in https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/. . @RyanFarrah - let me know if setting the environment variable resolves the error for you. \nexport DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0. Currently there's no UI stack in .NET Core. Lots of work in this area has been added to the roadmap for future releases. . Issue moved to dotnet/docs #6069 via ZenHub\n. Something happed with the azure account which has been corrected. Should be good to go now. . Something happed with the azure account which has been corrected. Should be good to go now. . Issue moved to https://github.com/aspnet/Home/issues/3247. @DamianEdwards . Thanks @dasMulli - massive infrastructure issues. SDK likes should be good now. . Issue moved to https://github.com/aspnet/Home/issues/3246. cc @muratg . Moving to ASPNET repo - https://github.com/aspnet/Home/issues/3245. The currently supported ARM targets are detailed in the 2.1-supported-os document.  ARM32 on Debian and Ubuntu are the supported platforms at the moment. \nWe have begun building ARM64 runtime and SDK. These are in the experimental stages right now. The same is true for the Win ARM builds. \n@richlander for additional info and to fact check me. \n. Where needed, yes. \n\nhttps://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x#supported-linux-versions says nothing about ARM so needs to have current info added. @JRAlexander \nhttps://github.com/dotnet/core/blob/master/release-notes/2.1/2.1-supported-os.md#linux is current and correct?\nhttps://docs.microsoft.com/en-us/dotnet/core/rid-catalog#using-rids ~https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1-supported-os.md#linux~ should be thought as as API documentation and is not a statement of support. \n. Yes, sorry about that!. Issue moved to dotnet/cli #9526 via ZenHub\n. Issue moved to dotnet/cli #9527 via ZenHub\n. Moved to https://github.com/aspnet/Home/issues/3269. Issue moved to dotnet/corefx #30671 via ZenHub\n. Moved to https://github.com/aspnet/Home/issues/3268. @muratg . Thanks Arthur, removed from the EF section. . Moved to ASP.. thanks @doubleyewdee !. arm32 links are only on the download archive pages at the moment (https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.1.1-download.md). If it's time to promote them to the marketing pages, we can make that addition. . @JunTaoLuo - can you have a look and move this issue to the right repo?. Issue moved to dotnet/cli #9586 via ZenHub\n. I'm sure we'll need more information. @RussKeldorph to help with the right questions. . @danmosemsft to help route. . I can't provide details but can acknowledge large .NET Core investments on Linux either in development or under investigation by the likes of American Express, General Motors, Barclays, Morgan Stanley, Walmart and others. . @mrbigtities and @Scandal-UK - let me know if you're still having issues with CentOS installs. . @beylkhanovdamir - The update cycles into VS are a bit different. The 2.1 runtime and supporting SDK will be in VS 15.8 (and already in the Previews which VS has been releasing).. 2.1.3 released. Closing this issue.\n\ncc @vivmishra . Strange, we had not seen that issue on CentOS before. There are a couple options - 1) update the CentOS to the latest (7.4 I think) which should remove the dependency or 2) since I don't see the package on the default centos feeds, download the compat-openssl10 rpm (possibly from https://pkgs.org/download/compat-openssl10) and install.\n/cc @omajid for other ideas.. @nhuthan did it install 2.1.2 or 2.1.1? dotnet --info will report everything that's installed.. Looks like 2.1.2 is installing OK. Closing the issue. . We're in the middle of release 2.1.6 and looks like part of the publish didn't happen. Looking into it. . Confirmed 2.1.6 / SDK 2.1.500 now working on CentOS 7.. Fixed by https://github.com/dotnet/core/pull/1789\n@kdubau - There is a significant (ie, breaking) change coming to the metadata format probably with the August release.. Have a look at https://github.com/dotnet/core/blob/master/release-notes/releases-v2.json. . Yes it is. Work is in the new-json branch and PR (https://github.com/dotnet/core/pull/1960) is out for review right now. Plan to have it merged to master by end of week. . Everything looks ok from the repo so something is keeping your local package list from updating. Have you tried apt-get clean to reset the caches?\nOutput from a test on a clean Docker container.\n```\nroot@acf80bf22cb1:/# cat /etc/os-release\nNAME=\"Ubuntu\"\nVERSION=\"16.04.4 LTS (Xenial Xerus)\"\nID=ubuntu\nID_LIKE=debian\nPRETTY_NAME=\"Ubuntu 16.04.4 LTS\"\nVERSION_ID=\"16.04\"\nHOME_URL=\"http://www.ubuntu.com/\"\nSUPPORT_URL=\"http://help.ubuntu.com/\"\nBUG_REPORT_URL=\"http://bugs.launchpad.net/ubuntu/\"\nVERSION_CODENAME=xenial\nUBUNTU_CODENAME=xenial\nroot@acf80bf22cb1:/# apt list | grep dotnet-sdk-2.1\nWARNING: apt does not have a stable CLI interface. Use with caution in scripts.\ndotnet-sdk-2.1/xenial 2.1.302-1 amd64\ndotnet-sdk-2.1.100/xenial 2.1.100-1 amd64\ndotnet-sdk-2.1.101/xenial 2.1.101-1 amd64\ndotnet-sdk-2.1.102/xenial 2.1.102-1 amd64\ndotnet-sdk-2.1.103/xenial 2.1.103-1 amd64\ndotnet-sdk-2.1.104/xenial 2.1.104-1 amd64\ndotnet-sdk-2.1.105/xenial 2.1.105-1 amd64\ndotnet-sdk-2.1.2/xenial 2.1.2-1 amd64\ndotnet-sdk-2.1.200/xenial 2.1.200-1 amd64\ndotnet-sdk-2.1.201/xenial 2.1.201-1 amd64\ndotnet-sdk-2.1.202/xenial 2.1.202-1 amd64\ndotnet-sdk-2.1.3/xenial 2.1.3-1 amd64\ndotnet-sdk-2.1.300-preview1-008174/xenial 2.1.300-preview1-008174-1 amd64\ndotnet-sdk-2.1.300-preview2-008533/xenial 2.1.300-preview2-008533-1 amd64\ndotnet-sdk-2.1.300-rc1-008673/xenial 2.1.300-rc1-008673-1 amd64\ndotnet-sdk-2.1.4/xenial 2.1.4-1 amd64\n```. @Jcouls29 - This is a topic we're definitely talking about. Today, you could do work on your side to keep monitor our release metadata file for updates. The current version is here and a draft of a major update (going live with the August release) is here. There's ample data in this file to reason pretty deeply about what an update is about. . Hey @Jcouls29 , yes, this file will be regularly maintained. In fact, all of the download and Core versioning information presented on https://www.microsoft.com/net/ is driven from the current version of this file. Also, it will likely become a hub for some update monitoring features we've been thinking about. . Not yet but probably in the next week or so. . Hi @Jcouls29 - the 'raw' files can be found under https://raw.githubusercontent.com (for example). \nHowever, the 'production' files will be hosted in Azure storage and that's the location you should count on. The index available at https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json.\nI'll be writing up guidance around the jsons after the first of the year covering details such as this.. Thanks @drk-mtr - fixed. We're working on some structural and content updates which we hope will help.. Fixes https://github.com/dotnet/core/issues/1790. The current entry is a workaround until an issue with https://download.microsoft.com can be resolved. Hopefully that issue will be addressed in the next day or so, then the releases.json can be updated. There is a breaking change coming to the json file in which the entire url will be included in the file metadata. Have a look at https://github.com/dotnet/core/blob/master/release-notes/releases-v2.json for the direction. . Went through cli, core, coreclr, corefx and coresetup releases back to 1.1.8 and corrected links. Hopefully I didn't miss anything. . @natemcmaster / @Eilon . Would it be possible to give a detailed example of your configuration, or even better, a sample project. As it is, I don't think there's enough information for us to go on to try and help.. At this time, the releases.json file only tracks releases meant for broader public consumption (eg public previews, release candidates and ga releases). We're looking into ways to better enable consumption of daily builds but it likely won't be in this file or its replacements. \n. 2.1.2 docs and template fixed for upcoming releases. . @omajid I thought I ran into libunwind while testing my way through the matrix but checked again and looks like it can be pulled from the table for 2.1.. Omair is correct. You'll need to update your /etc/apt/sources.list.d/[dotnetrepo].list to point to deb [arch=amd64] https://packages.microsoft.com/ubuntu/16.04/prod xenial main. Hm, everything is definitely on the repo and working. From a quick test ...\n```\nleecow@lbc-1804:~$ cat /etc/apt/sources.list.d/microsoft-prod.list \ndeb [arch=amd64] https://packages.microsoft.com/ubuntu/18.04/prod bionic main\nleecow@lbc-1804:~$ sudo apt install dotnet-sdk-2.1\nReading package lists... Done\nBuilding dependency tree     \nReading state information... Done\nThe following additional packages will be installed:\n  aspnetcore-runtime-2.1 dotnet-host dotnet-hostfxr-2.1 dotnet-runtime-2.1 dotnet-runtime-deps-2.1\n  liblttng-ust-ctl4 liblttng-ust0 liburcu6\nThe following NEW packages will be installed:\n  aspnetcore-runtime-2.1 dotnet-host dotnet-hostfxr-2.1 dotnet-runtime-2.1 dotnet-runtime-deps-2.1 dotnet-sdk-2.1\n  liblttng-ust-ctl4 liblttng-ust0 liburcu6\n0 upgraded, 9 newly installed, 0 to remove and 18 not upgraded.\nNeed to get 128 MB of archives.\nAfter this operation, 375 MB of additional disk space will be used.\nDo you want to continue? [Y/n] y\n``\n@mateti - yourapt-get updateoutput is suspicious aspackage.microsoft.com` is not listed among the hits. \n@JerryBian - do you have any preview versions installed? There was an issue with previous packages getting in the way of dependency resolution. You can check this with apt search dotnet | grep installed. This is strange - what happens with apt search liblttng-ust0. My 18.04.1 output is \nleecow@lbc-1804:~$ apt search liblttng-ust0\nSorting... Done\nFull Text Search... Done\nliblttng-ust0/bionic,now 2.10.1-1 amd64 [installed,automatic]\n  LTTng 2.0 Userspace Tracer (tracing libraries). So the fact that liblttng-us0 is not being presented to you is the problem. Looks like the package is probably in universe amd 64 which I don't see in your apt-get \"Get\" list. Here's the archive list I have on a pretty clean box with the default ubuntu repos active in /etc/apt/sources.list.\nsudo apt-get update\nHit:1 http://us.archive.ubuntu.com/ubuntu bionic InRelease\nHit:2 https://packages.microsoft.com/ubuntu/18.04/prod bionic InRelease\nGet:3 http://us.archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]\nGet:4 http://security.ubuntu.com/ubuntu bionic-security InRelease [83.2 kB]          \nGet:5 http://us.archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]                   \nGet:6 http://us.archive.ubuntu.com/ubuntu bionic-updates/main i386 Packages [247 kB] \nGet:7 http://us.archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages [268 kB]\nGet:8 http://us.archive.ubuntu.com/ubuntu bionic-updates/main amd64 DEP-11 Metadata [138 kB]\nGet:9 http://us.archive.ubuntu.com/ubuntu bionic-updates/main DEP-11 48x48 Icons [31.4 kB]\nGet:10 http://us.archive.ubuntu.com/ubuntu bionic-updates/main DEP-11 64x64 Icons [53.7 kB]\nGet:11 http://us.archive.ubuntu.com/ubuntu bionic-updates/universe i386 Packages [153 kB]    \nGet:12 http://security.ubuntu.com/ubuntu bionic-security/main amd64 DEP-11 Metadata [204 B]\nGet:13 http://us.archive.ubuntu.com/ubuntu bionic-updates/universe amd64 Packages [152 kB]        \nGet:14 http://us.archive.ubuntu.com/ubuntu bionic-updates/universe amd64 DEP-11 Metadata [149 kB]\nGet:15 http://us.archive.ubuntu.com/ubuntu bionic-updates/universe DEP-11 48x48 Icons [153 kB]\nGet:16 http://us.archive.ubuntu.com/ubuntu bionic-updates/universe DEP-11 64x64 Icons [263 kB]\nGet:17 http://us.archive.ubuntu.com/ubuntu bionic-updates/multiverse amd64 DEP-11 Metadata [2,464 B]\nGet:18 http://us.archive.ubuntu.com/ubuntu bionic-backports/universe amd64 DEP-11 Metadata [5,100 B]\nGet:19 http://security.ubuntu.com/ubuntu bionic-security/universe amd64 DEP-11 Metadata [4,448 B]\nFetched 1,867 kB in 1s (1,748 kB/s)                                     \nReading package lists... Done. @JerryBian, was Universe deliberately removed at some point? Don't think I've ever seen a default setup that didn't already include that.\n@joshfree - Possibly as a general comment to the Linux Prereqs and Setup pages?. Thanks for the extra info @JerryBian - we'll note the need to look for this in Server image scenarios. . @rakeshsinghranchi - anything in the output catch your eye?. @Lxiamail . https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x needs to be updated to include RHEL6. @mairaw @JRAlexander . https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x needs to be updated to include RHEL6. @mairaw @JRAlexander . https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md is the official entry point for the .NET Core version / OS version support matrix and RHEL6 is included in the 2.0 and 2.1 specific docs. . https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md is the official entry point for the .NET Core version / OS version support matrix and RHEL6 is included in the 2.0 and 2.1 specific docs. . The duplicate is strange, not sure how that might have happened. @rakeshsinghranchi, any ideas there?\nUnless you have a specific need for previous versions of the SDK, you can uninstall all but the latest. The tooling is fully compatible with previous versions of the Runtime so older projects can be maintained on specific runtimes if needed. . Excellent points. Thanks @Levi--G . There are currently not plans to add package manger support for ARM64 but that could certainly change. Will work on some dl instruction content to make it clear that it's all referring to AMD64.\ncc @vivmishra . > The end result of all this is that vulnerable assemblies will continue to be found in the NuGet Fallback Folder for the life of 2.x, but that doesn't mean they're necessarily used at runtime by your applications. \nIt seems like we should determine if there are reasonable ways to not leave vulnerable assemblies in the FallbackFolder. \n/cc @natemcmaster . @ajcvickers . Seems fine to me. . @janvorli for possible troubleshooting suggestions. . @ranjicgnr are you referring to dotnet-hosting-2.1.2-win.exe?\n@joeloff . Generally, the commit lists will be referenced by the Runtime version. 2.1.400 is a little different as that was just an SDK update. Here's the change list.\n2.1.302 was in support of 2.1.2, which was a security update. Details in the release notes. \n. .NET Core SDK 2.1.401 released. Closing this issue.\ncc @vivmishra . Also, visit https://www.microsoft.com/net and click \"Getting Started\".. Issue moved to dotnet/cli #9853 via ZenHub\n. Thanks for the feedback @StephenBonikowsky, this is something that we really want to do. My dream is an aggregated, per package change list but that will require some build tooling changes so we'll see how far we can get :-) . Sigh ... I love autocomplete in all it's forms.. @Amine-Smahi - Arch packages are community maintained and the latest AUR is linked from https://wiki.archlinux.org/index.php/.NET_Core. . Thanks, @jo-ninja !\ncc @vivmishra . @vivmishra . Great stuff @kphillisjr, thanks. \n@danmosemsft, this post references an original issue in corefx though it seems this should also be there?. @richlander @terrajobst . Hi @akalcik - the 2.1.4 SDK was not released for 18.04. If you want the latest then apt install dotnet-sdk-2.1 will get you going.. @akalcik - can what is returned by apt search donet-sdk?. Thanks for the additional info. Looks like you're not validating the package feed signature and are therefore not reading any packages from the repo. \n\nErr:5 https://packages.microsoft.com/repos/microsoft-ubuntu-bionic-prod bionic InRelease\n  The following signatures couldn't be verified because the public key is not available: NO_PUBKEY EB3E94ADBE1229CF\nReading package lists... Done\nW: GPG error: https://packages.microsoft.com/repos/microsoft-ubuntu-bionic-prod bionic InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY EB3E94ADBE1229CF\n\nI have confirmed this works fine on 16.04 install on WSL so there's just something configured incorrectly on your system. The AZLinux team has recently add a configuration installer for 18.04 which takes care of repo registration and key installation in a single command. I just ran the following on an 18.04 on WSL install and the SDK installed correctly and 'hello world' built and ran.\n\nwget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb\nsudo dpkg -i packages-microsoft-prod.deb\nsudo apt-get install apt-transport-https\nsudo apt-get update\napt search dotnet-sdk-2.1\n. The suggestion is to complete steps 1 - 5 in my last reply. . Thanks @MihaZupan , looks good. . @branstraub West Central US is up and running with 2.1.3 as of this morning. Other regions will roll out over the next few days. . The latest Preview release is for .NET Core / ASP.NET Core 2.2 (preview 2 coming later this week). The September update for 2.1 was released this morning. The SDK runs on a somewhat different versioning cadence which does confuse matters a bit but you can easily tell what goes together on our download pages. Here's the 2.1 page as an example - https://www.microsoft.com/net/download/dotnet-core/2.1\n . @farazahmed879 - Please follow the configuration guidance at https://www.microsoft.com/net/download/linux-package-manager/ubuntu18-04/runtime-2.0.9 and you should be good to go. Just tried this on a clean 18.04 image and everything is fine. \n\n```\nroot@9ca485c88922:/# cat /etc/os-release\nNAME=\"Ubuntu\"\nVERSION=\"18.04 LTS (Bionic Beaver)\"\nID=ubuntu\nID_LIKE=debian\nPRETTY_NAME=\"Ubuntu 18.04 LTS\"\nVERSION_ID=\"18.04\"\nHOME_URL=\"https://www.ubuntu.com/\"\nSUPPORT_URL=\"https://help.ubuntu.com/\"\nBUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\"\nPRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"\nVERSION_CODENAME=bionic\nUBUNTU_CODENAME=bionic\nroot@9ca485c88922:/# apt install dotnet-hosting-2.0.9\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following additional packages will be installed:\n  aspnetcore-store-2.0.0 aspnetcore-store-2.0.3 aspnetcore-store-2.0.5 aspnetcore-store-2.0.6 aspnetcore-store-2.0.7\n  aspnetcore-store-2.0.8 aspnetcore-store-2.0.9 dotnet-host dotnet-hostfxr-2.0.9 dotnet-runtime-2.0.9 krb5-locales libasn1-8-heimdal\n  libcurl3 libgssapi-krb5-2 libgssapi3-heimdal libhcrypto4-heimdal libheimbase1-heimdal libheimntlm0-heimdal libhx509-5-heimdal\n  libicu60 libk5crypto3 libkeyutils1 libkrb5-26-heimdal libkrb5-3 libkrb5support0 libldap-2.4-2 libldap-common liblttng-ust-ctl4\n  liblttng-ust0 libnghttp2-14 libroken18-heimdal librtmp1 libsasl2-2 libsasl2-modules libsasl2-modules-db libsqlite3-0 libssl1.0.0\n  libunwind8 liburcu6 libwind0-heimdal\nSuggested packages:\n  krb5-doc krb5-user libsasl2-modules-gssapi-mit | libsasl2-modules-gssapi-heimdal libsasl2-modules-ldap libsasl2-modules-otp\n  libsasl2-modules-sql\nThe following NEW packages will be installed:\n  aspnetcore-store-2.0.0 aspnetcore-store-2.0.3 aspnetcore-store-2.0.5 aspnetcore-store-2.0.6 aspnetcore-store-2.0.7\n  aspnetcore-store-2.0.8 aspnetcore-store-2.0.9 dotnet-host dotnet-hostfxr-2.0.9 dotnet-hosting-2.0.9 dotnet-runtime-2.0.9 krb5-locales\n  libasn1-8-heimdal libcurl3 libgssapi-krb5-2 libgssapi3-heimdal libhcrypto4-heimdal libheimbase1-heimdal libheimntlm0-heimdal\n  libhx509-5-heimdal libicu60 libk5crypto3 libkeyutils1 libkrb5-26-heimdal libkrb5-3 libkrb5support0 libldap-2.4-2 libldap-common\n  liblttng-ust-ctl4 liblttng-ust0 libnghttp2-14 libroken18-heimdal librtmp1 libsasl2-2 libsasl2-modules libsasl2-modules-db\n  libsqlite3-0 libssl1.0.0 libunwind8 liburcu6 libwind0-heimdal\n0 upgraded, 41 newly installed, 0 to remove and 13 not upgraded.\nNeed to get 69.3 MB of archives.\nAfter this operation, 237 MB of additional disk space will be used.\nDo you want to continue? [Y/n]\n```. Tried on my 18.04.1 machine and it worked fine both with no version of libcurl installed and with libcurl4 installed before installing dotnet-hosting-2.0.9.. @Thraka , the system components are installed by the dotnet-runtime-deps-2.1 package. If you try installing that directly, we should see exactly what library is causing the trouble. \nsudo apt install dotent-runtime-deps-2.1. More specifically, run sudo apt install dotnet-sdk-2.1 and you should be golden. This will install the latest version of the 2.1 SDK. . Thanks, @SpaceShot! Yes, the 2.1 supported patch version in microsoft-support.md needs to be incremented. Release date remains unchanged as that marks the initial 2.1 release. Go ahead and submit a PR. . @tanaka-takayoshi - We did publish 2.1 preview releases to the package manager feeds but mixing production stable and previews on the same feed caused quite a bit of grief for some folks. Because of that, we decided to not publish preview installers to this feed any longer. There may come a time where we have a preview-only feed but no plans on the calendar yet.. @steveoh - You can use the add/remove programs control panel on Windows. All other OS's will be a manual process. If you can share your output from dotnet --info, I can be more specific.. Thanks Steve. Mac removals are all manual at this point. Details are available in this article. We do want to make managing installed versions a better experience and can hopefully make progress in 3.0.. The instructions will be the same, just substitute in the directory you're looking to clean up. For example, the following (using your list as the starting point) will leave only AspNetCore.All/2.1.3 installed. \ncd /usr/local/share/dotnet/shared/Microsoft.AspNetCore.All\nsudo rm -rf 2.1.0 2.1.1 2.1.2. @mkleijn - yes, this is intentional. We have changed our publishing CDN  and they do not have a stable \"container\" portion of the resulting URL. Without this, it would be extremely unpleasant to construct URLs in the current json file. Apologies for the breaking change.. [chatted with Bishal offline and this captures what we discussed along with a little more detail on the 'why']\n@bishal-pdMSFT this is the same type of issue as what broke you a few months ago. At that time, we talked about the need for you to deal with full URLs when present. We use this file to drive the .NET Core marketing site and logic is included in the parser. My recommendation is the same as the last time; this a change in robustness you really should adopt. \nWe have moved to a different publishing pipeline which does not produce a stable release \"container\" (the guid portion of the url). Rather, every file has a unique path. I don't see a workable solution in this json format given the unique urls for every file, combined with the flat schema of the current json format, would make splitting the url and file difficult.\nThe json schema redesign is in final review now and it would be great to get your feedback so that it can be stable out of the gate. https://github.com/dotnet/core/pull/1960\n. @ststeiger - is this for Windows?\nhttps://dotnetcli.blob.core.windows.net/dotnet/aspnetcore/Runtime/2.2.0-preview2-35157/aspnetcore-runtime-2.2.0-preview2-35157-win-x64.zip might be what you need. Hopefully @Eilon or @natemcmaster can confirm.. Sorry @matkoch was on a bit of vacation and missed this. Yes, this is 2 trips 1) the latest channel-version from releases-index.json which would point you to the correct releases.json for picking up the latest release. . @dasMulli - got it. Put that on my mental todo list yesterday while doing something completely different :-) \nA possible solution is to include the latest SDK version in release-index.json. Since 'latest-release' == latest runtime version, an sdk field would communicate the latest SDK which carries that runtime.\nHow does that strike you? \nOn a slightly different topic, I think a security release note needs to be included in the index. A goal is to provide the ability to determine whether an update is both available and interesting on the first trip to the data. . Yep, I understand. The index is just a lightweight entry for discovery. The channel releases.json files would have all of the history and details (including download url) to cover what you describe.. I'm thinking through the case where we have an updated toolset which contains an existing runtime. \n2.1.500 will be shipping with an updated runtime (2.1.6) so that will be a 'normal' case. . Made a few adjustments to cover @dasMulli's scenario and back filled data.  . Closing this release discussion issue in favor of https://github.com/dotnet/core/issues/2304.. I've sent up a few flares to find help. . Site is back up. Something about the metadata update for today's release didn't agree with it. . Sounds like this is the spot for the time being. \ncc @diverdan92. cc @diverdan92. Sorry for the delay. Will have this looked over by tomorrow. . @janvorli to help puzzle out the sys dependency issue. . Yep, do need to add Alpine steps to the docs. . Closing older release. If there are pending discussions, please keep them going in the 2.1.7 issue. Everything looks fine on the Azure storage - https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.403/dotnet-sdk-2.1.403-linux-x64.tar.gz downloads the file as expected. . Looking at the time this was created, he tried to use the install script before I had updated all of the latest.version files with 2.1.500 info.. It's a private repo and Vivek has checked in a fix. Should be live soon. . Thanks for the feedback and patience as we polish these up. \nThe release-version is giving me a bit of a fit. As you noticed this week, we do sometimes have an SDK release which carries a previously released runtime. With this scenario in mind, what should latest-release and release-version mean? I did add latest-runtime and latest-sdk to the top element as well as runtime-version to the sdk to enable better reasoning about those versions. \nIf the runtime and sdk versions are represented at each level to tie the data together, latest-version is really just a release identifier and almost unnecessary. \nOnce this bit is worked out, I'll run some update code on all of the channel jsons so that each will have the same field layout.\ncc @vivmishra . @tristanbarcelon - I'm going to make a pass through the releases.json files and clean up the field inconsistencies this morning. . Publishing a schema is on the todo list once we're full settled. \npr covering the inconsistencies and a few other bits - https://github.com/dotnet/core/pull/2141. Hopefully this will ease the current scripting troubles.. - rid field/values will be backfilled to prior releases\n- file.names is version agnostic. It's the same as the on-disk filename with version info stripped.\n- the gs file is what we reference for downloads from https://dotnet.microsoft.com/download. The unique file name was needed so that we could have good telemetry from that site. Files are identical to the non-gs counterpart.. Closing this release discussion issue in favor of https://github.com/dotnet/core/issues/2304.. Sorry for the confusion around this. \nFor this release, there was an unexpected rebuild of the SDK which was published to https://dotnetcli.blob.core.windows.net/dotnet/Sdk/2.2.100. The build was analyzed and found to have no changes from the previous build (the one on https://download.visualstudio.microsoft.com/download). Because this was discovered late and found to represent no functional changes, we left things alone. . @vivmishra - if needed, please add a commits doc link to the 2.2 release notes.. @tristanbarcelon, I hadn't planned on updated the 2.0 file but, as you say, having it structurally in line with everything else could be helpful. Will add that to the list. \naspnet and net core runtime version version alignment from 2.0 onward will be stable.. @tristanbarcelon - most of the changes have been implemented and you can see them from https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json. We'll be using this azure storage rather than github to host the 'production' json files. Something will be added to the github files to make it clear they should not be used as the production endpoint for the data. . @tristanbarcelon \n\nadded runtime-version to 2.1.100 so should be good there now. \nlooks like I switched to sha512 last November. \n\n2.0.3 was released with the 2.0.3 SDK in November then again with the 2.1.2 SDK in December. The minor version bump was lIkely due to updated toolset features for VS but would have to dig a little to know for sure. At any rate, toolset changes would not result in changes to the hosting bundle which is why that's the same as well.\nNow that we're tracking runtime and sdk versions in all the right places, the release-version field is really starting to bother me ;-). @tristanbarcelon ... sorry about that - fixed up. . @shirhatti for ideas on ANCM announcement channels.. @tristanbarcelon - there was a refresh of the sdk yesterday. Looks like an errant comma slipped into the file. Fixed. . Closing this release discussion issue in favor of https://github.com/dotnet/core/issues/2304.. Thanks @tristanbarcelon . I left a longer reply in the other issue. As mentioned there it is possible to have an SDK release which includes previously released runtimes. Discussion in https://github.com/dotnet/core/issues/2134 to work through solutions.\ncc @vivmishra . I've confirmed on a clean 18.04 box that the sdk is available and installs correctly. \n@rickrain - have you registered the feed as detailed at https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current? This will properly register the feed with apt-get and enable installation from the native installers. If you're not sure, let me know what the output of the following command is for you.\nls /etc/apt/sources.list.d/. Looks like this is the key line if folks encounter the issue sudo dpkg --purge packages-microsoft-prod && sudo dpkg -i packages-microsoft-prod.deb. \nCertainly isn't needed if you're not having troubles.. No it's a generic \"I can't find what you asked for\" message. From the o.p. -\nsudo apt-get install dotnet-sdk-2.2\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nE: Unable to locate package dotnet-sdk-2.2\nE: Couldn't find any package by glob 'dotnet-sdk-2.2'\nE: Couldn't find any package by regex 'dotnet-sdk-2.2'\nOnce the user has ensured  packages.microsoft.com was properly registered, this step would be worthwhile. . @dagood, @rowanmiller  -  folks who upgrade their distro in-place (eg 16.04 -> 18.04) after first setting up .NET Core will hit the problem and not necessarily return to https://dotnet.microsoft.com/download/linux-package-manager/. Likely something that we can add to be of help though.. Thanks @arthurrump. I had been mulling this over so thanks for the PR!. @Ryszka - I just checked nuget.org and see the appropriate versions available for affected packages detailed in the release notes. Is there a specific package you're not seeing?. @murat / @bradygaster, can you have a look at @jsoques issue above?. Closing this release discussion issue in favor of https://github.com/dotnet/core/issues/2304. Not something that I've worked with. @richlander ?. Hardly a scientific test but a few data points - \nMacBook Pro (i7 dual core/16gb RAM) - 85.5 seconds \nUbuntu 18.04 vm on the above machine - 416.5\nWin10 vm with same specs - 375.9\n. @riezebosch - these 2 files are identical except for the name. The gs files are referenced by the dot.net download pages so that we can get accurate telemetry of usage from those pages. The dupe situation will be for Win-x86/x64 and OSX installers and am looking into wrong values now. . Made a pass through the json and made hash corrections. . @devlead - this was an SDK-only refresh which is why the Runtime is not listed. I have corrected the property names and am looking at what went wrong with generator. . updated release notes and going forward, will make sure to also update symbols for SDK-only releases. FYI - the symbols referenced are only needed for linux debugging. Windows will correctly pick up symbols published to nuget and symweb.. Sorry for the troubles here. \nThere are 3.0 features which have (or will have) dependencies on new Visual Studio and, given the scope, migrating this work back to Visual Studio 2017 isn't practical. This is the reason for blocking on VS2017. We chose to not block the use of 3.0 in 2017 on the first Preview because none of these features were yet available in 2019.. @gortok is pointing in the right direction. You're code will need to deal with a platforms file share access idioms, eg, clear unc on Windows or smb / cfs on Linux. I believe I have seen libraries available to help on Linux, or you can programmatically mount/unmount the shares.. @karelz , @davidsh - can you have a look?. @muratg - can you have a look and redirect if necessary?. The download tables on the Release Notes and the Download page are not meant to be used as a reference for supported distros. That's covered entirely by the docs linked from the OS Lifecycle Policy. \n@karelz - Agreed that a link to the os policy will be helpful. . Fixed!. re termux support - there's no work planned to specifically support the environment. . Hi @jjpepper , We don't have any subscription channels beyond what is already provided by Visual Studio. I'm surprised that Visual Studio is not prompting you for .NET Core updates as the functionality for included versions (eg VS2017 has 1.0, 1.1 and 2.1) is definitely there.\nWe do have a metadata endpoint which many are starting to monitor for update notification. You can find this at https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json. . closing in favor of later pr. LGTM. @juniormayhe - the corresponding SDK for this release is 2.1.202. Let us know if that's not what you're seeing. . Adding a few folks to try and tease out some information - @danmosemsft @davidsh @rmkerr @mconnew . Sorry for the inconvenience. There are times where moving .NET Core forward also means new work in Visual Studio which is not practical to port to a previous release. At times like that, we have to bring the VS and .NET Core Previews along mostly in parallel. \nHave you tried to recover you VS2017 state by uninstalling any 3.0 previews using the Remove Programs control panel?\n@Andrew-MSFT . Thanks @Rutix - fixed.. @muratg and @joeloff - can you look at @PolitovArtyom 's issue above (https://github.com/dotnet/core/issues/2304#issuecomment-463154664)?. @kieronlanning - I see it in line 5 of the csv? If you're referring to the exe installer, those have not typically been included in the csv (though I see a few releases where they snuck in). \ncc/ @vivmishra . I suspect the Azure folks have not finished their deployment yet.. Thanks @bschapendonk ... looks like this my fault :-/ Resolved 2.2.2 field names with https://github.com/dotnet/core/pull/2313.\n@kieronlanning - hopefully this PR unblocks you. Regarding tracking, that's something we're still trying to get visibility into. . LGTM - thanks @jo-ninja . Thanks for the report @martincostello. The versions in the field names was missed by my validation code. Will get that fixed up right away. \nWith respect to the Hosting installer, it includes both x86 and x64. Because there are no .NET Core rids which cover that situation, I couldn't decide on a route so left it empty. Perhaps 'win-x86-x64' would be appropriate?. @Eilon and @muratg for possible input on the server-side question.. We're in the process of standing up release branches which would make sense for you to follow. For the sdk, picking up the latest from release/3.0.1xx should do the trick. \n@livarcocc to confirm.. All components should be picking up the *-preview{n}-{buildnumber} scheme. . I would think that's OK (no \".\" in the prerelease string)? \nWe're in the process of finishing up Preview 3 (hopefully out Tuesday) and the SDK version will look like 3.0.100-preview3-010402 (not finale, just an example from the current build). . Thanks @EarthlingRich - lgtm.. @vivmishra . Fixing up my generator code as part of this review to resolve the root cause. Will approve and merge this PR when that's done. \ncc @vivmishra . @SoukainaHyn - could you elaborate on what you're seeing?. Feel free to re-open with additional details,. . Very odd - looks like the installer is blowing up because it can't find any of the internal msi's\n[0C4C:4430][2019-03-01T17:02:43]i100: Detect begin, 5 packages\n[0C4C:4430][2019-03-01T17:02:44]i101: Detected package: dotnet_runtime_2.2.2_win_x64.msi, state: Absent, cached: None\n[0C4C:4430][2019-03-01T17:02:44]i101: Detected package: dotnet_hostfxr_2.2.2_win_x64.msi, state: Absent, cached: None\n[0C4C:4430][2019-03-01T17:02:44]i101: Detected package: dotnet_host_2.2.2_win_x64.msi, state: Absent, cached: None\n[0C4C:4430][2019-03-01T17:02:44]i101: Detected package: dotnet_sdk_internal_2.2.104_win_x64.msi, state: Absent, cached: None\n[0C4C:4430][2019-03-01T17:02:44]i101: Detected package: AspNetCoreSharedFramework_x64, state: Absent, cached: None\nI successfully installed using the link from the hello world page so the installer is working as expected. @VipSaran - could you try downloading and installing again? Here's the download link.. @irreverencieux - could you run sudo apt-get install dotnet-runtime-deps-2.2? This should tell us exactly which system dependency is unable to be installed. . Moving to the ML repo. @Emmagrabergs - chances are they will need additional details on what you were doing and the errors you see. . Issue moved to dotnet/machinelearning #2823 via ZenHub\n. @dagood - Part of the mitigation I'm thinking of would be a note on the linux installer pages calling out the issue and adding a section to linux-setup detailing the various ways to fix up prod.list.\nDetecting the correct repo and potentially fixing things up automatically on our side feels like it's verging on \"too clever\". . Looks like it's now an entry point to docs.microsoft.com?. @Eilon @danroth27 . Apologies for being slow getting the repo release pages up. We'll do a full release of 2.1.6xx and 2.2.2xx when VS 2019 is GA. In the meantime, you can install using the dotnet-install script.Links for usage can be seen on the release pages:\nhttps://github.com/dotnet/cli/releases/tag/v2.2.200\nhttps://github.com/dotnet/cli/releases/tag/v2.1.600. Kali is not an officially supported distro and this is likely a subtle system dependency difference. \nCouple of things you can try that may work. \n1) install using the tar.gz instead of apt-get, \n2) install using dotnet-install.sh, \n3) install using our Snap. \nOption 3 would be my first recommendation to try. Each of these methods are detailed in our Linux Setup document. . I should have included that option and is basically the manual version of using dotnet-isntall.sh.\nRegarding the path, you can either add an EXPORT to your .bashrc to append PATH or you can create a symlink in /usr/bin. Either route should work fine. . Confirmed that https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb exists and downloads as expected. Give it another go? Alternatively, just click on the following to download: https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb  . Confirmed that libssl1.0.2 and libicu57 are available in default Debian 9 archives and confirmed by searching https://packages.debian.org/stretch/. Do an apt search libicu57 to see if your archive config can find the needed versions. If not, you'll need to figure out what archive to register. As an example, here's what I have on the container I just tested:\n```\nroot@4237e6dedf6d:~# cat /etc/os-release\nPRETTY_NAME=\"Debian GNU/Linux 9 (stretch)\"\nNAME=\"Debian GNU/Linux\"\nVERSION_ID=\"9\"\nVERSION=\"9 (stretch)\"\nID=debian\nHOME_URL=\"https://www.debian.org/\"\nSUPPORT_URL=\"https://www.debian.org/support\"\nBUG_REPORT_URL=\"https://bugs.debian.org/\"\nroot@4237e6dedf6d:~# cat /etc/apt/sources.list\ndeb http://deb.debian.org/debian stretch main\ndeb http://deb.debian.org/debian stretch-updates main\ndeb http://security.debian.org/debian-security stretch/updates main\n``. Closing due to insufficient information. Need information on what you're doing and what you see. Feel free to re-open after the issue has been updated. . Debian 10 is not yet supported by .NET Core. When we do add support, it will likely be to 2.1 (the LTS channel) and 3.0.. Did youcd myAppbeforedotnet run`?. We do not provide native installers for ARM devices yet. You will need to follow the guidance for installing from tar.gz found in the Linux Setup document. . Are you trying to install the update which released today? Are you using the rpms from our feed (packages.microsoft.com) or something else?\n@dagood . Probably some environment differences so, grain of salt, I was able to install and run basic tests with the new 2.1 and 2.2 SDKs on a clean Amazon Linux Docker image.\n```\nbash-4.2# dotnet --info\n.NET Core SDK (reflecting any global.json):\n Version:   2.2.105\n Commit:    7cecb35b92\nRuntime Environment:\n OS Name:     amzn\n OS Version:  2\n OS Platform: Linux\n RID:         linux-x64\n Base Path:   /usr/share/dotnet/sdk/2.2.105/\nHost (useful for support):\n  Version: 2.2.3\n  Commit:  6b8ad509b6\n.NET Core SDKs installed:\n  2.1.505 [/usr/share/dotnet/sdk]\n  2.2.105 [/usr/share/dotnet/sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.All 2.1.9 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.2.3 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.App 2.1.9 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.2.3 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 2.1.9 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.2.3 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\nTo install additional .NET Core runtimes or SDKs:\n  https://aka.ms/dotnet-download\nbash-4.2# cat /etc/os-release\nNAME=\"Amazon Linux\"\nVERSION=\"2\"\nID=\"amzn\"\nID_LIKE=\"centos rhel fedora\"\nVERSION_ID=\"2\"\nPRETTY_NAME=\"Amazon Linux 2\"\nANSI_COLOR=\"0;33\"\nCPE_NAME=\"cpe:2.3:o:amazon:amazon_linux:2\"\nHOME_URL=\"https://amazonlinux.com/\"\n```. https://packages.microsoft.com/rhel/7/prod/. @picrap - we currently do not have plans to officially support Synology at this time. If it's a glibc-based distro, you may be able to use .NET Core from our tar.gzs to get up and running though, no promises :-). Is Synology provided support for Snaps, that would be another option as we do provide Snap installers for the SDK and Runtimes.\n\nLinux Prereqs\nLinux Setup\n . @ehhnwidex - are you running this in the Windows Subsystem for Linux? \n\n@livarcocc @KathleenDollard . Closing this issue in favor of dotnet/corefx#36003. Not enough information to know what's being encountered.. Need a bit more information to know how to help. What version of Windows? What steps did you perform leading up to the error message? . @Nothing-Works - answered the question in https://github.com/dotnet/core/issues/2435. 2.2 is not included in 15.9 but if you update, it can be targeted. . Sorry for the confusion on this. 2.2 is not included \"in-box\" with 15.9. When you install it separately, it will show up in the Target Framework drop down of the Project Options dialog. \ncc @vivmishra . I believe it will default to targeting 2.2 after you install. The only time you would need to re-target is if you needed to build for something older. . How did you install? Using the SDK installer from https://dotnet.microsoft.com/download is the preferred method. . That's correct, .NET Core installs don't alter the path. We create a symlink which points to the dotnet host location. ls -al /usr/bin/dotnet should show you if this happened correctly.\nAre you looking to build an application, then run it or do you already have an application? If the former, then you need to start with the SDK. sudo apt-get install dotnet-sdk-2.2 will get you the latest channel release of the SDK. . @livarcocc . Did a quick successful test on my Mac using the 2.2.104 SDK so need to dig a little deeper to try and understand what you have going on. \n\nWhat version of macOS\nWhat version(s) of .NET Core on the machine (dotnet --info will provide all of this)?\nWhat is the exact error?. Thanks @smpeters - I believe --no-https was added in the 2.1 release so you should upgrade to at least that channel. It looks like you are running 2.0 and that went end of life October 2018.\n\n2.1 (our LTS release)\n2.2 (a bunch of ASP enhancements). Thanks @jkotalik - What action does a customer impacted by this issue need to take? Install the January (or newer) hosting bundle? Change the AspNetCoreHostingModel setting back to InProcess? Both? . So I don't need to install an updated ANCM? That doesn't seem to make sense. . Gotcha, makes sense. I didn't read enough of the original issue to see the app services tie in.. Issue moved to dotnet/cli #10982 via ZenHub\n. We need information about what you are seeing in order to try and help. If you are still having troubles, reopen this issue and please provide details about the problem you are experiencing. Include your operating system version, exact error message, code sample, and anything else that is relevant.\n. @dougbu @Eilon. We do not provide native installers for ARM devices yet. You will need to follow the guidance for installing from tar.gz found in the Linux Setup document. . @danmosemsft and @jaredpar for possible insights. . We need to know some details in order to try and help. If you are still having trouble, reopen this issue and please provide details about the problem you are experiencing. Include your operating system version, exact error message, code sample, and anything else that is relevant.. Since you can build outside of VS for Mac using the CLI, I'm suspicious that it may be something on the VS for Mac side. Adding a few folks @livarcocc @sayedihashimi @mhutch ?. Possibly related to https://github.com/dotnet/core/issues/2460?. @ovicrisan - you need to use the VS 2019 Previews in order to work with .NET Core 3.0 Previews. 3.0 will not be supported from VS 2017. . Thanks @NextTurn - I have added a few comments to the PRs. . @Ruben2015 - We'll need more information to attempt to help. Operating system and did the install appear to complete correctly will be a good start. Please re-open the issue with this information if you're still have troubles. . Need details on what you're experiencing in order to try and help. . what version of .NET Core do you have installed? The --no-https flag requires 2.1 or newer. Run dotnet --info for complete installed version information. . Thanks for bringing this up. I have a PR out for the website to add 18.10 to the dropdown. In the meantime, 18.10 instruction can be found in the linux-setup doc.. @livarcocc - any ideas?. The error you quote usually happens which you double-click or download and run and file which Windows doesn't know about. Can you describe the steps you take to get the error?. @karelz - the illegal characters snuck in during the OP's copy/paste when creating the Dockerfile. Clean those out and it should build fine. . @bartonjs Are you recommending that everything but HMACMD5 be removed?\n. @blackdwarf : I'd love to include min versions. Please detail. \ncc @ellismg , @joshfree \n. How about the top level of the portal rather than directly to Getting Started?\n. Cool, thanks. \n. Internal email thread started to hash through min vers \n. Ah yes, that needs to be worked in somehow. \n. Sure thing @zhenlan . So just a WCF header with the release notes link?\n. Chatted with Z and it makes sense now. \"RC2 - Preview 1\" is correct for tooling. I was confused until I thought of it as the tooling Preview 1 for RC2.\n. done\n. done\n. We could probably factor the list for each repo but I think I prefer keeping this under Core and it can be referenced from the other repo release pages.\n. I'll collapse names if I can find a way to tease the info out of the git log in such a way that I can still construct a link to each individuals commit history. \n. Thanks @brthor , that makes sense. Here's where I need help understanding git revision specs as git shortlog -s -n -e --since rel/1.0.0-preview1@{2015-10-26} --until rel-preview1/1.0.0@{2016-03-21} and git shortlog -s -n -e --since master@{2015-10-26} --until master@{2016-03-21} (yeah, dates are likely wrong for cli as well) produce identical output. \n. @saurabh500 - looks like mapping to the username would required going in through the git APIs rather than querying the log as I am now. Perhaps something I'll try in the future.\n. Without the 2012 crt, dotnet build will toss an error that it cannot find Microsoft.DiaSymReader.Native.amd64.dll.\n. @akoeplinger , @blackdwarf \nHow about - \n- Offline support: now you don't have to be connected to the internet to write applications that target only the .NET Core runtime and libraries. This means the core libraries are cached locally after running various dotnet commands the first time. Restoring packages which are not part of the Shared Framework do generally require and internet connection to gather the packages from NuGet.\n. @stephentoub - got 'em\n. Ubuntu 17.04 is expected in April. Possibly add a note that support is pending official release? Same would apply to macOS 10.13 and Debian 9.. @livarcocc to confirm. Should this point to the latest patch release?. First, we don't have 18.04 signed packages yet so should maybe exclude this section for now. \nSecond, there is no config .deb for 18.04 yet. Steps need to be the manual variety: \n+bash\n+wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.asc.gpg\n+sudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/\n+wget -q https://packages.microsoft.com/config/ubuntu/18.04/prod.list\n+sudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list\n+. We need to combine this section and the aspnetcore-store. Not needed for this morning.. \"RTM\" is probably meaningless to the reader.. I think the changes are largely captured by [7ce9270ac7] Fix Sockets hang caused by concurrent Socket disposal (#29786) (#29846). This is the 64bit download, right? I see in the storage account that asp is producing\n\naspnetcore-runtime-internal-2.1.1-linux-arm.tar.gz\naspnetcore-runtime-internal-2.1.1-linux-musl-x64.tar.gz\naspnetcore-runtime-internal-2.1.1-linux-x64.tar.gz\n\nI presume the *linux-arm-tar.gz is 32bit. If this is true, wouldn't it be better to append the release asset with the correct architecture (x64) which will make the eventual addition of the 32 bit asset natural? Otherwise, when that time comes, the thing people have been accessing as \"asp-runtime-linux-arm\" will change from 64 to 32 bit.. fixed. Working on it and final formatting resolution will happen when generator tooling is in place. . Hand crafted at the moment. The checksums file ref will be dropped from this json.. I have been treating it as an unversioned identifier rather than a filename. Will need to think through changing it to mean 'filename'.. agreed, see other comment regarding the checksum entry. . Massaged your suggestion just a bit. How about this?\n{\n    \"channel-version\": \"2.1\",\n    \"latest\": \"2.1.5\",\n    \"release-date\":\"2018-10-12\",\n    \"lts\": true,\n    \"eol\": false,\n    \"eol-date\": null,\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",  \n    \"releases\": \n    [\n        {\n            \"release-date\":  \"2018-10-02\",\n            \"release-version\":  \"2.1.5\",\n            \"security\":  false,\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\n            \"runtime\":\n            {\n                \"version\":  \"2.1.5\",\n                \"version-display\":  \"2.1.5\",\n                \"vs-version\":  \"15.8.6\",\n                \"files\":\n                [. Updated name values to be what we chatted about in IM. eg filename=dotnet-runtime-2.1.5-linux-arm.tar.gz would yield name=dotnet-runtime-linux-arm.tar.gz\n. Fixed. Also updated releases-index.json.. Sigh, the hazards of hand editing / pattern matching. Fixed up these instances then hit on a good way to view all \"name\" fields in a contiguous list which made reviewing everything much easier. Found a handful of other patterns that were incorrect and a few other errors in the process. Updated the 2.0 file as penance for being sloppy. . It's already in the target releases.json files. The question is, is duplicating this top level information in the index useful?. Change will be in the next commit.. Was thinking the same thing after our 'maintenance' exchange. Change will be in the next commit. . going with 'releases-index'. latest-release and latest-date make sense. channel-version has a specific meaning in both files that I would like to retain. . I don't know that we would ever have a list of ancm versions for a given release. @shirhatti ?. Shouldn't this be (after build) `dotnet /bin/Debug/netcoreapp3.0/app.dll? When I try to run directly I get \nleecow at Brandywine in ~/test\n$ ./bin/Debug/netcoreapp2.2/test\n-bash: ./bin/Debug/netcoreapp2.2/test: No such file or directory. Installing from tar.gz to the \"blessed\" location (/usr/share) stopped working with 2.1 because of first run command permissions requirements. Binary install steps should be - \nmkdir -p $HOME/dotnet && tar zxf dotnet.tar.gz -C $HOME/dotnet\nexport PATH=$PATH:$HOME/dotnet\nWith the export command also going into $HOME/.bashrc if the user want's it persisted. . hm, something not quite right - can only get 3.0 to work from /usr/share .... ",
    "xabikos": "I am also curious about this as it is used in cli samples repository on project.json of the example for the full .net framework\n. ",
    "andriysavin": "@joshfree These links explain the content of the package, but its still not clear (at least to me) when and why I need to reference that package. For example, XUnit docs instruct to add this package (besides framework itself) to be able to run tests for desktop CLR targeting code, but I can't find any reason why: https://xunit.github.io/docs/getting-started-dotnet-core.html#targeting-desktop\n. Sorry, I've fixed the link. Thanks for clarification!\n. ",
    "HellBrick": "The functionality to reference .NET Core projects from the full framework projects was the most important thing I was waiting for in RC2, ever since it was announced at one of asp.net community stand-ups. If you consider a scenario of porting parts of a large solution to .NET Core, this is definitely a blocker: you can't really port ~100 projects simultaneously, and you can't do it gradually if the tooling doesn't allow referencing new projects from classic projects (or vice versa).\nI must admit, what I'm currently seeing in the RC2 tooling is kind of disappointing =( So... is there a new estimation on when we can expect .NET Framework -> .NET Core project references to start working properly?\n. ",
    "SebastianLang": "+1 This is very important. I currently manually reference the produced .dll file in my COM add-in projects and others which cannot and will not be ported to .NET Core. This is a key scenario for me.\n. ",
    "wmsmitty": "BTW, you will get the same behavior by creating a Net Core Console application. \n1) Create a net core console application project.\n2) Create a net core library project.\n3) Reference the core library project in your project.json file at the root of the net core console app.\n4) Now try referencing the library project with a simple using statement.  Not happening; can't reference it and the intellisense doesn't even see it.\n. ",
    "swaletzko": "This is also important for those who want to write components like Powershell commands that can't be compiled as Net Core assemblies but need to reference Net Core assemblies to re-use business logic. \n. This is getting ridiculous. I have linked code files all over my solution because I can't reference my own projects from my Powershell or MS Unit Test projects if I also want to reference them from my ASP.NET Core project. Which of course I do want to do, this is pretty standard and I've always done it in the past, obviously. Feels like we're taking huge steps backwards here.\n. Thanks for posting this link. I just tried it, and as far as I can tell (maybe I'm doing something wrong), it doesn't solve the problem. Or at least it doesn't solve my problem.\nWhile it DOES let you reference the project from both xproj and csproj projects, those projects still have to be based on .NET Core or else the reference fails (for obvious reasons) with a \"current project's target is not compatible with the targets of the referenced library\" error.\nSo my Powershell and MS Unit Test projects still can't reference my .NET Core assemblies, because they have a different target (and they have to, because the assemblies they depend on haven't been ported to .NET Core yet).\nThis is a big problem. Here's why: if you have a new ASP.NET project, you cannot reuse any functionality or code that you write for it with any non-.NET Core library, because the latest version of ASP.NET requires .NET Core assemblies, and other projects (i.e. Powershell or MS Unit Test projects) can't reference .NET Core projects. \nSo while I can now publish my ASP.NET project to web servers on any platform (which I have NEVER needed to do and probably never will), I can't re-use my own code between my ASP.NET project and other projects, even for the purposes of unit testing. That's a huge problem. \n. I was about to respond to tell you that I had already double-checked the versions when I tested this (I did), and so that couldn't possibly be the problem. \nThankfully, before I did that I went ahead and triple-checked - and you are absolutely correct. Somehow I had mixed up the target version numbers of my projects in my head and the referencing library WAS older than the .NET Core library I was trying to reference, even though I thought it was the same.\nSo to sum up: creating a Portable library (in VS 2015 RC Update 3) and retargeting it to .Net Standard did the trick. I can now reference .Net Core projects from regular .Net Framework projects. \nI take back my snarkiness from earler. Thank you @dsplaisted for having the patience to give me a second nudge in the right direction.\n. Sorry, I need a little more help here. After much wrangling I finally got all of my projects upgraded to the proper versions of whatever frameworks they use and they can all reference each other and all is well. \nExcept for my ASP.NET project, which is using framework \"dnx461\", and when I reference my other projects that use the \"netstandard1.4\" framework I get a \"Project does not support framework DNX, Version=v4.6.1\". But according to the documentation, .NET Standard 1.4 and .NET Framework 4.6.1 are compatible. Unless I'm reading that chart wrong, or doing something else wrong?\n. Thanks, @svick but using \"net461\" has the same result: \"[my referenced netstandard1.4 project] does not support framework DNX, Version=v4.6.1\".\nEdit: Seems to all be good now. Something was being cached, I deleted by \"bin\" and \"packages\" folders and restore / rebuilt and all references seem to be on the same page with each other. Thanks all for the help.\n. ",
    "erikzhang": "Agree with @HellBrick , I'm waiting for this functionality every day.\n. it still doesn't work in RTM, and really disappoint me.\n. I don't think the problem has been fixed since I can't reference xproj in csproj directly.\nAnd it seems the PCL doesn't support netstandard1.6. If you retargeting your PCL project to netstandard1.6, you will get this message:Predefined type 'System.Object' is not defined or imported\n. ",
    "jaredthirsk": "+1 This was the very first thing I tried to do in .NET Core and it doesn't work.  This might (scare people away (but hopefully not) if they think it can't be done.  It may at least slow down adoption of .NET Core.\n. ",
    "mayuanyang": "I kinda think that it a must to have feature, i just want to do a simple project reference and expecting it should be available from my ASP.NET Core project\n. ",
    "dsplaisted": "Here is an answer on Stack Overflow from @onovotny on How to reference a .NET Core class library from a .NET 4.6 project.\nBasically, you can create a Portable Class Library, which will be a .csproj, and retarget it to .NET Standard.  You will be able to reference it from both .xproj and .csproj projects.  Alternatively, if you want to use .xproj for your .NET Core class library, you can add a reference from the .csproj to the DLL in the output folder of the .xproj, and add a project build dependency in the solution.  See the answer on Stack Overflow for more details.\n. @swaletzko Probably what is happening is that the .NET Core library is targeting a higher version of .NET Standard than works with the version of .NET Framework you are targeting.  Target a lower version of .NET Standard with the .NET Core library and your .NET Framework projects should be able to reference it.\nSee the \".NET Platforms Support\" table in the .NET Standard Library documentation to determine what versions of .NET Standard can be used with what version of .NET Framework.  The table might be confusing, but basically if you are targeting .NET 4.5 then you can reference libraries targeting .NET Standard 1.1 or lower.  If you target .NET 4.6 then you can reference .NET Standard 1.3 or lower.\n. @stamminator Referencing a .NET Core library from a .NET Framework project is not supported (intentionally).  If you want to create a library that can be used from both .NET Core and .NET Framework, then you should target .NET Standard (probably .NET Standard 2.0).\nThanks!. Thanks for reporting this issue.  Can you move it to https://github.com/dotnet/roslyn-project-system?\n(The bug is probably in code that's internal to Visual Studio and not actually in that repo, but it's close enough.). Moved to dotnet/roslyn-project-system#818. @paqogomez It's not clear to me what project you're trying to reference from what. Can you open a new issue with a description of your project structure, and ideally a repro?. See https://github.com/Microsoft/msbuild/issues/1603#issuecomment-283104367 for information on how to do this correctly.. @bubert Can you provide the same information we asked Nikas for?  IE, what errors you're seeing, whether you can successfully build from the command line, and a zip of your project with a log?  You can create a binary log with the /bl argument, which is easier for us to investigate than an /flp:v=diag log.  You might want to create a separate issue for all this, since it seems like the original issue reported here has been fixed.. > This issue is not Publish specific, If you clean all the projects. add a single RID to the Console App and build, you will notice that the ClassLibraryA is not built for the RID specified in ConsoleApp. Publish fails because publish doesnt find the RID specific artifacts for ClassLibraryA\n@vijayrkn Does this fail when you run dotnet publish -r <rid> from the command line too?  If so, can you file a bug in https://github.com/dotnet/sdk?  If not, then maybe project-system is the right place to file it.. > When the RuntimeIdentifiers is specified in the dependent project, the dotnet project system is looking for the dlls in the RID specific folder for some reason.\n@vijayrkn It sounds like this should be filed as a separate bug, possibly in dotnet/project-system.. This was intentional, I think.  I don\u2019t have the details immediately available but I can probably find them.\nSent from my Windows 10 phone\nFrom: Kevin Pilch\nSent: Thursday, February 22, 2018 8:33 AM\nTo: dotnet/core\nCc: Subscribed\nSubject: Re: [dotnet/core] Unmanaged DLLs of a nuget package show up in theroot .csproj in vs2017 Solution Explorer (#1270)\ndotnet/project-system is probably the right repo.\n@cdrnet can you try adding a False metadata to your  (or project.json)?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This issue was moved to dotnet/sdk#2434. @nefcanto It looks like there may be something wrong with your .NET Core SDK installation.  Instead of the error message at the beginning of the output of dotnet --info, you should be seeing something like this:\n```\n.NET Core SDK (reflecting any global.json):\n Version:   2.1.301\n Commit:    59524873d6\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.17134\n OS Platform: Windows\n RID:         win10-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.301\\\n```\nDo you have this file on your machine? C:\\Program Files\\dotnet\\sdk\\2.1.301\\runtimes\\win\\lib\\netcoreapp2.0\\System.Text.Encoding.CodePages.dll\nCan you try repairing (or uninstalling and then reinstalling) the 2.1.301 .NET Core SDK?\nThanks. OK, sorry this is still not working for you.\nDo you get the failure if you create a new project from a template?\nCan you enable more detailed output to provide more details about the failure?\nCan you share a binary log of your build?  You can create a binary log by building with the -bl parameter, it will then create a file called msbuild.binlog.  That file is very useful for debugging build issues, however note that it includes very detailed information about your build (including the contents of your project files, your environment variables, and the inputs and outputs of all the targets and tasks that were run), so depending on your project you may not be able to share all that information.  You can download a viewer for the .binlog files at http://msbuildlog.com/ if you would like to look at what's in them yourself.. Unfortunately it's still no clear what the root cause was here.  So I wouldn't update docs unless we understand what's going on.  But since @nefcanto was able to get things working, I think we can close the issue.. This issue was moved to dotnet/cli#9742. Yes, we should consider adding Page to the item types that get automatic Link metadata, either in the WPF SDK or just by default.  This issue can be moved to dotnet/cli or dotnet/sdk.\n(I would move it myself but the issue mover I normally use seems to be broken).. @megafinz Can you file an issue in https://github.com/microsoft/vstest with as much information as possible?. @tiayi You can do this with the MSBuild Copy task in a target.  Something like this:\nxml\n<Target Name=\"CopyMocks\" AfterTargets=\"Build\">\n  <ItemGroup>\n      <MockFile Include=\"$(OutDir)Mocks\\**\\*.*\" />\n  </ItemGroup>\n  <Copy \n      SourceFiles=\"@(MockFile)\" \n      DestinationFolder=\"$(ProjectDir)\\Mocks\\%(RecursiveDir)\" \n      SkipUnchangedFiles=\"true\" />\n</Target>. Issue moved to dotnet/cli #10450 via ZenHub\n. ",
    "yanglee": "I think this bug is NOT fixed yet. You can easily reproduce it:\n1) Create a classic console app using full .net framework;\n2) Create a net core library project, set framework to \"net46\";\n3) Add reference from console project to library project;\n4) Try to reference any type of the library project in the console app, you will get error saying the type does not exist;\nSee also: http://forums.asp.net/t/2098587.aspx?Reference+to+NET+Core+Class+Library+project+not+working\n. ",
    "StingyJack": "@swaletzko - this was a problem for me because the csproj file had ToolsVersion=12.0 instead of 14.0. \nWhen referencing .net core dll from non-core projects, new projects work but projects upgraded from vs 2013 don't unless you change this value. \n. ",
    "Leonardo-Ferreira": "I don't think this should be closed because I just reproduced this as @yanglee said, and my Tools Version is 14.0 on all involved projects. ",
    "ofirgeller": "Please do not close this issue.\nMight help in fixing:  building the core project writes dll files to the  netcoreapp1.0  folder but not to the other target folder(s). If I try to add a reference by picking the dll in that folder it works (from a net461 project). \n. ",
    "stamminator": "Is this functionality improved at all in .NET Core 2.x?. ",
    "caserzer": "curl -sSL https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0/scripts/obtain/dotnet-install.sh | bash /dev/stdin --version 1.0.0-preview1-002702 --install-dir ~/dotnet\nbefore that I install libunwind8 & gettext\nafter I change the HDP.list permission to read, it just simple report command not found\n. Sorry , I found I used the wrong script , I should use the ubuntu script\n. ",
    "appcoreopc": "@HellBrick  - \nTo answer your question \n\n\nanalyzer + codefixes needs a different way to package as a nuget package.  It is quite easy if you follow the link here :- https://roslyn-analyzers.readthedocs.io/en/latest/create-nuget-package.html\n\n\nFor now i think we have to configure our ruleset manually for .netcore projects. \ne.g. \n\n..\\RuleSet1.ruleset\n\n\n\nAs for your other issues - , 3.4.5 - This has to do with your project configuration. If you follow the template given in Microsoft Extensiblility -> Analyzer with Code Fix (Nuget + VSIX) - You should be able to get it package and work well on both .Net Framework 4.5 + .Net Core project (i tried it with NetCore 2.1) \nIn short, use the template wizard to kick off your roslyn development. ",
    "MikeJoyce19": "Are you getting a message upon opening that solution that you have an incompatible dotnet sdk version?\nIf so, I had to uninstall the existing dotnet.exe after installing the new sdk version.  Both versions were on PATH and I believe the earlier version was taking precedence\n. ",
    "viktor-evdokimov": "Was this right repo to report it ?\n. Actually it goes away with 1.0 release. Closing it.\n. ",
    "AustinWinstanley": "Even with the other bug filed, I wanted to update this one just in case.\nRunning through the command line does not have the problem.\ndotnet restore\ndotnet run\n\n. ",
    "Eilon": "Closing this issue, as it was moved to the aspnet org.\n. @Tratcher is this something gone wrong in AspNetCoreModule?\n. This issue was moved to aspnet/EntityFramework#7353. Moved to the EF repo to start the investigation there. Thanks!. Actually it's best to file this through VSFeedback from within VS2017 itself (there's a \"Send Feedback\" button on the upper-right corner).. @AbhimanyuAryan is the problem that you're not sure how to install the Bower dependencies from your csproj? I believe you could do that in some post-restore step in the csproj, right?. @AbhimanyuAryan I think from the CSPROJ file you just need to run the appropriate command to have Bower restore its packages. In other words, add a command to the CSPROJ to run bower install at the appropriate time (it's up to you to decide what that time is - for example, in the post-restore stage).. @Tratcher - any idea where this issue should go?. That linked blog post has the answer. However, in general we don't recommend using that pattern at all. Any component that needs to know the current HttpContext needs to have the HttpContext passed to it - the same as you would do for any other piece of data that the component needs.. @naveedahmed1 yes that sounds like it would work. However, I think in common/popular app architectures a \"repository\" class generally doesn't need access to HttpContext.Current. There would usually be some other app/scenario-specific interface that you'd create that the \"repository\" would depend on, and the implementation of that interface would use something like IHttpContextAccessor to get the data it needs. But both ways should work.. This issue was moved to aspnet/Mvc#6435. This issue was moved to aspnet/Scaffolding#522. @muratg - who can look at the logging BeginScopes issue mentioned at https://github.com/dotnet/core/issues/711#issuecomment-324781916 ?. @pranavkm - any idea on this? Why does the filename look weird in the MSBuild error?\n@gregbradley - can you upload your app to GitHub so we can see if something got generated incorrectly by the template?. This issue was moved to aspnet/Mvc#6725. This issue was moved to aspnet/HttpAbstractions#930. I don't think any of these DLLs are owned by my team. Json.NET is of course 3rd party.. @livarcocc does your team own Microsoft.Extensions.DependencyModel.dll? Do you have a plan for missing public symbols for this DLL?\n@jaredpar re: Microsoft.CodeAnalysis.dll. Do you have a plan for missing public symbols for these DLLs?\nNot sure who owns the AI DLL, I've never seen that one before.\n. @chintan3100 can you share more info about the logs and data you've collected? It's nearly impossible to say what's going on without knowing where the time is spent. If you turn on detailed logging and/or Application Insights, hopefully you can at least see what part of the request is taking so long. Once you find that out, we can try to figure out why the slow part of the request is being slow.. Looks like this was moved to https://github.com/aspnet/Home/issues/2225.. This issue was moved to aspnet/Mvc#7499. This issue was moved to aspnet/Mvc#7499. @Elias-Heydarpour thank you for filing this issue. In order for us to investigate this issue, could you please provide us with a minimal repro project that illustrates the problem? If so, please log a new issue in the https://github.com/aspnet/Home/issues repo and we can try to investigate further.. @Elias-Heydarpour thank you for filing this issue. In order for us to investigate this issue, could you please provide us with a minimal repro project that illustrates the problem? If so, please log a new issue in the https://github.com/aspnet/Home/issues repo and we can try to investigate further.. This issue was moved to aspnet/Mvc#7498. @coultonluke can you post what your CSPROJ file looks like before/after adding the BuildBundlerMinifier package? At this point it's hard to tell if it's a VS issue, NuGet issue, or something else. Thanks!. Pinging @madskristensen - any chance you've seen this behavior before? This seems quite odd.. This issue was moved to madskristensen/BundlerMinifier#373. @TomCJones - can you share more info about your setup? If you could upload a repro app to GitHub that would be ideal, but otherwise please share your launchSettings.json, appsettings.json, Program.cs, Startup.cs, and other relevant files. It could be that an environment variable or other config setting is overriding your desired port value.. This issue was moved to aspnet/JavaScriptServices#1582. I'm pretty sure that the Authorize attribute is designed to work with the rest of ASP.NET Core's security/auth system. It might be possible to use it in other ways, but that is probably outside of the scope of supported scenarios. If you still have issues with this, please log a new issue at https://github.com/aspnet/Security/issues. @halter73 @davidfowl @jkotalik - any ideas on this? Kestrel issue? Libuv? Other?. @muratg any ideas? Or any idea where to get more logs to dig into this?. @Petermarcu I think that isn't yet clear at this time. Could be an Azure issue.\n@ayazaliuk101 - have you been able to find any more info on this?. This issue was moved to aspnet/Home#3047. This issue was moved to aspnet/Mvc#7471. This issue was moved to aspnet/JavaScriptServices#1578. This issue was moved to aspnet/Hosting#1353. This issue was moved to aspnet/Home#2976. @joeloff - is this in your wheelhouse?. @joeloff - can you log an issue for that suggestion in the appropriate repo and tag me and @muratg in it.. Dup of https://github.com/aspnet/Home/issues/2984 and https://github.com/aspnet/Mvc/issues/7517.\nPlease try not to open the same issue in multiple repos - it causes duplicate work to be done.. Dup of https://github.com/aspnet/Home/issues/2985.\n@Hsinky - please try not to open the same issue in multiple repos.. Hi all, I'm closing this issue because I think answers were provided to the question. If people have additional ASP.NET Core specific questions, please log them at https://github.com/aspnet/Home. Thanks!. This issue was moved to aspnet/Home#3329. Hi. We're closing this issue as no response or updates have been provided in a timely manner and we have been unable to reproduce it. If you have more details and are encountering this issue please add a new reply and re-open the issue.. This issue was moved to aspnet/Home#3328. This issue was moved to aspnet/Mvc#8054. This issue was moved to https://github.com/aspnet/JavaScriptServices/issues/1718. @Petermarcu this issue appears to be related to errors in the client, not the server (the server isn't ASP.NET Core).. @lucasgalone there is not enough information to reproduce this issue. It likely means that the required service ISaleService was not registered in the DI container. Please note that services need to be registered as the interface and not the concrete type. For example, registering the SaleService implementation as the SaleService service type wouldn't work - it needs to be registered at the ISaleService service type.\nIf you still have issues, please log a new issue at https://github.com/aspnet/Home/issues. @Petermarcu this doesn't seem related to ASP.NET Core directly.\n@PavelMekhnin - can you provide more info about the problem, such as your code, or other project info?. @pranavkm can you move this issue to the appropriate repo and answer it?\nI believe the short answer is: by default the precompiled views assembly will use the same metadata as the app's metadata, though there might also be a way to customize it beyond that.. @Sivasekare can you provide more info on your app, such as the contents of the CSPROJ file? Or perhaps upload your app to GitHub so we can take a look?. Hi. We're closing this issue as no response or updates have been provided in a timely manner and we have been unable to reproduce it. If you have more details and are encountering this issue please add a new reply and re-open the issue.. @DamianEdwards / @jongalloway / @shanselman - do we have any public-facing list of sites running ASP.NET Core, especially on Linux? Maybe some whitepapers? I did a few searches and couldn't find anything.. I'm closing this issue because it is somewhat off topic for this forum. If you do have further ASP.NET Core questions, please post them at https://github.com/aspnet/Home. Thanks!. This issue was moved to aspnet/Logging#858. Closing this issue because there are no current plans to implement these suggestions. If you have further thoughts, please log an issue in the ASP.NET Core Templating repo: https://github.com/aspnet/Templating/. Thanks!. Hi @VitaliiNikitchyn , there is no direct T4 support in runtime in ASP.NET Core MVC. If you're looking for T4 support in Visual Studio, please use the Report a Problem tool in VS.\nIf you encounter a problem with Visual Studio, we want to know about it so that we can diagnose and fix it. By using the Report a Problem tool, you can collect detailed information about the problem, and send it to Microsoft with just a few button clicks. See here for more details.\nThanks!. @VitaliiNikitchyn sorry not that I'm aware of. All I meant was that in theory someone could write support for it, but there isn't anything built-in.. This issue was moved to aspnet/Routing#623. This issue was moved to aspnet/Security#1825. @JunTaoLuo / @natemcmaster - any ideas on this? Likely an ASP.NET Core issue?. This issue was moved to aspnet/Home#3381. This issue was moved to aspnet/JavaScriptServices#1751. Hi. We're closing this issue as no response or updates have been provided in a timely manner and we have been unable to reproduce it. If you have more details and are encountering this issue please add a new reply and re-open the issue.. @Dongata do you have a sample app that can reproduce this issue? If you can share your app in a GitHub repo that would be ideal. Same goes to anyone else who can show us a broken app.. Thanks, we'll take a look when you have that ready.. @Dongata did you have a chance to get to this?. Closing for now because we don't have a repro. If you have a change to get this done, please open a new issue at https://github.com/aspnet/Home/issues. This issue was moved to aspnet/Mvc#8300. This issue was moved to aspnet/Templating#712. This issue was moved to aspnet/Templating#711. @shirhatti / @jkotalik - do you know where this bug should go?. This issue was moved to aspnet/IISIntegration#1383. @vijayrkn - any idea where this issue should go?. This issue was moved to aspnet/websdk#410. Sounds like Edit & Continue? This probably isn't ASP.NET Core specific.\n@Petermarcu - do you know who a contact is regarding E&C?. Hi. We're closing this issue as no response or updates have been provided in a timely manner and we have been unable to reproduce it. If you have more details and are encountering this issue please add a new reply and re-open the issue.. Hi. We're closing this issue as no response or updates have been provided in a timely manner and we have been unable to reproduce it. If you have more details and are encountering this issue please add a new reply and re-open the issue.. OK, so I'll close this issue. If you hit a new issue, please provide detailed steps to reproduce the problem and we will investigate.. This issue was moved to aspnet/Home#3557. @ngoctubk does this happen if you return a standard status code such as 200? Or only with the non-standard ones?\nTagging @Tratcher in case you've seen something like this.... @scherenhaenden , just checking in, did you find any more info on this?. Closing because we are unable to reproduce this and have not been able to determine the cause of the bug. If you find more info, please let us know. Thank you!. This issue was moved to aspnet/Configuration#895. ASP.NET Core's Angular template has been updated to Angular 6, and it will be available as part of the .NET Core 2.2 SDK later this year. There's a new preview of it that should be available later this week. I hope you can check it out!. @karelz - this looks like an issue with running the VS Text Templating Engine (T4), not specific to ASP.NET Core.\nIt could be that reporting this issue through VS's built-in \"Report a Problem\" tool is the best avenue for this issue.. This issue was moved to aspnet/Scaffolding#917. @vijayrkn - should we move this bug to the https://github.com/aspnet/websdk repo? Or is there a better home for it?. @linghuchong123 there is no direct support for localizing the Identity Area, but if you Scaffold the UI and convert it into files in your own project, you can then use ASP.NET Core's built-in localization features to localize it however you want.\n\nScaffolding the Identity UI: https://docs.microsoft.com/en-us/aspnet/core/security/authentication/scaffold-identity?view=aspnetcore-2.1&tabs=visual-studio\nGlobalization and localization in ASP.NET Core\n: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/localization?view=aspnetcore-2.1. If you have further questions on this, please ask on https://github.com/aspnet/AspNetCore/issues\n\nThanks!. This issue was moved to aspnet/AspNetCore#3949. Projects should generally not reference Microsoft.AspNetCore.App with a specific version:\nxml\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" Version=\"2.1.4\"/>\nBut instead they should leave off the version and the SDK will choose the appropriate version:\nxml\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\nBut, if you think you have 2.1.4 installed, that should still work...\nMore info on the package version can be found in the migration doc: https://docs.microsoft.com/en-us/aspnet/core/migration/20_21?view=aspnetcore-2.1#update-the-project-file-to-use-21-versions\n\n\nRemove the \"Version\" attribute on the package reference to Microsoft.AspNetCore.App. Projects which use  do not need to set the version. The version will be implied by the target framework and selected to best match the way ASP.NET Core 2.1 works. (See below for more information.). Here's what I got:\n\n0 references 10 authors, o items change 10 exceptions static void Main(string [] args)e::strings \"organize\\: 7a579db2-f4e3-489c-aed9-d39cf? Console. WriteLine (s. Length); currently not The executable code of the target code type of the debugger that has no associated debuggers may include: conditional compilation, compiler optimization, or the current debugger code type does not support the target architecture of this line ConsoleAppl.Program.Main 0 references 10 authors, o items change 10 exceptions, static void Main(string [] args)\n\nThough I don't know what 20W is either.. Taking a look now... (Was on vacation last week, sorry for the delay.). OK this is possibly a duplicate of https://github.com/aspnet/BasicMiddleware/issues/247, which we plan to fix in ASP.NET Core 3.0.\nIf you can get a dump of the ASP.NET Core process while it's hung, then you can open up the dump in VS and see where the thread stacks are. If the stacks look like the ones in https://github.com/aspnet/BasicMiddleware/issues/247, then it is the same issue. If the stacks are different, we will investigate further.\n@sergey-m-pega - can you take a look at the threads to see if it's the same issue?. Tagging @Tratcher here.. @Tratcher - what workarounds do you know of?. This issue was moved to aspnet/Extensions#796. This issue was moved to aspnet/AspNetCore#4549. @muratg - any thoughts on this?. @muratg / @shirhatti - do you know the latest on 2.2 running in Azure App Services?. This issue was moved to aspnet/AspNetCore#5970. This issue was moved to aspnet/Extensions#684. This issue was moved to aspnet/AspNetCore#5681. This issue was moved to aspnet/AspNetCore#5700. This issue was moved to aspnet/AspNetCore#5707. @natemcmaster - any ideas on this?. This issue was moved to aspnet/AspNetCore#6140. @martore can you show what your CSPROJ looks like?. Adding @natemcmaster who is an expert on this.\nTwo things I suspect:\n1. This line: <PackageReference Include=\"Microsoft.AspNetCore.App\" Version=\"3.0.0-preview-18579-0056\" /> I think shouldn't have the version specified - it's figured out automatically by the SDK based on other things. Or maybe it's not even needed at all anymore (@natemcmaster ?)\n2. The project should be using the Web SDK instead of the plain .NET SDK, so the first line should probably be \ufeff<Project Sdk=\"Microsoft.NET.Sdk.Web\">. This issue was moved to aspnet/Extensions#911. This issue was moved to aspnet/Scaffolding#940. @Tratcher - thoughts on this?\n@robinwilson16 - is there a reverse proxy in play here, such as nginx, something with Docker, ARR, etc.?. Hi @IanYates83 , sorry you are running into this issue. We have identified this as a recent bug and you can find workarounds and other discussion here: https://github.com/aspnet/AspNetCore/issues/3503. This issue was moved to aspnet/AspNetCore#6621. This issue was moved to aspnet/Extensions#1000. This issue was moved to aspnet/AspNetCore#7013. To report issues with Visual Studio, use the Report a Problem tool.\nIf you encounter a problem with Visual Studio, we want to know about it so that we can diagnose and fix it. By using the Report a Problem tool, you can collect detailed information about the problem, and send it to Microsoft with just a few button clicks. See here for more details.. From @Eilon on Friday, 25 January 2019 08:35:23\n@Tratcher / @blowdart - any idea on this? Is this an ASP.NET Core issue?. From @blowdart on Friday, 25 January 2019 14:45:10\nNo, it's an SslStream issue. So .NET Core.. @mammadkoma OK so this issue is resolved?. And cc @DamianEdwards . This issue was moved to aspnet/AspNetCore#8180. I moved it to the ASP.NET org: https://github.com/aspnet/AspNetCore/issues/8180. This issue was moved to aspnet/AspNetCore#8179. @glennc - do you know about this article?. @shirhatti / @Tratcher - is this an ANCM thing or an IIS thing?. The NuGet error is a known NuGet issue: https://github.com/NuGet/Home/issues/7341\nUnfortunately I don't know of a workaround to it.. @halter73 / @shirhatti - any idea on this?. Yup, what @benaadams said. Thanks, @benaadams !. @ryanbrandenburg - any idea on this particular template option? Did anything change regarding it in some version?. This issue was moved to aspnet/AspNetCore#8567. Dup of https://github.com/aspnet/AspNetCore/issues/8552. Please try not to open the same exact bug in 2 places because it creates duplicate work.. This is Json.NET deserialization but I'm not sure where the DateTime / timezone issue comes in. In other words, is this an issue with time zone data, or how Json.NET is using that info?\ncc @JamesNK as well. ",
    "axtens": "In my case that makes no difference whatsoever\n```\nC:\\Users\\Bruce\\Desktop>md test\nC:\\Users\\Bruce\\Desktop>cd test\nC:\\Users\\Bruce\\Desktop\\test>dotnet new\nCreated new C# project in C:\\Users\\Bruce\\Desktop\\test.\nC:\\Users\\Bruce\\Desktop\\test>dir\n Volume in drive C is TI10665200H\n Volume Serial Number is 384F-4E8A\nDirectory of C:\\Users\\Bruce\\Desktop\\test\n25/06/2016  11:27 PM              .\n25/06/2016  11:27 PM              ..\n25/06/2016  11:27 PM               214 Program.cs\n25/06/2016  11:27 PM               302 project.json\n               2 File(s)            516 bytes\n               2 Dir(s)  425,735,077,888 bytes free\nC:\\Users\\Bruce\\Desktop\\test>dotnet run\nProject test does not have a lock file.\nProject test does not have a lock file.\nC:\\Users\\Bruce\\Desktop\\test>dotnet restore\nlog  : Restoring packages for C:\\Users\\Bruce\\Desktop\\test\\project.json...\nerror: Failed to retrieve information from remote source 'C:\\Users\\Bruce\\Documents\\Projects\\Work\\Resources\\packages'.\nC:\\Users\\Bruce\\Desktop\\test>dotnet --info\n.NET Command Line Tools (1.0.0-preview1-002702)\nProduct Information:\n Version:     1.0.0-preview1-002702\n Commit Sha:  6cde21225e\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.10586\n OS Platform: Windows\n RID:         win10-x64\n```\nAnd the project.json says\n```\n{\n  \"version\": \"1.0.0-*\",\n  \"buildOptions\": {\n    \"emitEntryPoint\": true\n  },\n  \"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"type\": \"platform\",\n      \"version\": \"1.0.0-rc2-3002702\"\n    }\n  },\n  \"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"imports\": \"dnxcore50\"\n    }\n  }\n}\n```\nNot happy \n. ",
    "tonidy": "@livarcocc I think the error message should be describe solution (explicit or with link)\n\"project TodoApi does not have a lock file. Please run \"dotnet restore\" or see http://link-to.solution\"\nNeed to google it to find the right solution :smile: \n. ",
    "BenHall": "Ah, no it doesn't. Turned out to be an AUFS bug.\n. ",
    "dumbledad": "I've just updated the tools in Visual Studio and am getting the same error on most of my 'dependencies' rows in the project.json file. What's the fix?\n. I got the answer on stackoverflow and pointed to this issue: MVC now serializes JSON with camel case names by default\n. It does. Works fine locally. No deployment errors reported during publishing. It's just when I go to the published site on Azure I see the CGI error reported\n. I've set stdoutLogEnabled=\"true\" in the web.config file and redeployed. I cannot see where to get the events from. I'll keep looking.\nUsing the console in the Azure Portal tools I can see the log files generated by each failure, but they are empty.\n\n. Found the logs. In that Azure Portal console I needed ../../LogFiles/eventlog.xml That's full of entries like this:\n<Event>\n    <System>\n        <Provider Name=\"IIS AspNetCore Module\"/>\n        <EventID>1000</EventID>\n        <Level>0</Level>\n        <Task>0</Task>\n        <Keywords>Keywords</Keywords>\n        <TimeCreated SystemTime=\"2016-07-06T08:55:16Z\"/>\n        <EventRecordID>532761796</EventRecordID>\n        <Channel>Application</Channel>\n        <Computer>RD0003FFB01B32</Computer>\n        <Security/>\n    </System>\n    <EventData>\n        <Data>Failed to start process with commandline '%LAUNCHER_PATH% %LAUNCHER_ARGS%', Error Code = '0x80070002'.</Data>\n    </EventData>\n</Event>\nThe web.config is the same between RC2 (which works) and 1.0 (which fails) and looks like this:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <system.webServer>\n    <handlers>\n      <add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModule\" resourceType=\"Unspecified\" />\n    </handlers>\n    <aspNetCore processPath=\"%LAUNCHER_PATH%\" arguments=\"%LAUNCHER_ARGS%\" forwardWindowsAuthToken=\"false\" stdoutLogEnabled=\"true\" />\n  </system.webServer>\n</configuration>\n. I'm wrong there, the web.config files are not the same (I was confused by there being two web.config files in each deployment). In RC2 the %VARIABLES% are replaced with values, in 1.0 they are not. Has something changed there? Is this still the correct entry in the project.json file?\n\"scripts\": {\n  \"postpublish\": [ \"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%\" ]\n}\n. Fixed: http://stackoverflow.com/a/38228793/575530\n. ",
    "Villason": "Replace \n\"Regan.Lib\": \" \"\nby \n\"Regan.Lib\": \"1.0.0-*\"\n. I close the issue as the fix is my last comment.\n. ",
    "vivekmishra-sft": "@blackdwarf I am closing this issue here and opening the new one as told by you. Thanks\n. ",
    "gulbanana": "UAP implements a subset of netstandard, not the whole thing. there must be some code in ClassLibrary1 or CodicePlastico which uses apis unavailable in uwp\n. ",
    "mrts": "I figured it out - dotnet bin/Debug/netcoreapp1.0/hello_world.dll works well. Will send a patch to update docs.\n. However, neither dotnet path/to/netcoreapp1.0/application.dll nor cd path/to/netcoreapp1.0; dotnet application.dll work with console apps that reference other DLLs, resulting in the following coredump:\n```\nUnhandled Exception: System.BadImageFormatException: Could not load file or assembly 'MyApp.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. An attempt was made to load a program with an incorrect format.\nAborted (core dumped)\n```\nHow should one run these apps without dotnet run?\n. The correct way to run the console apps that reference other DLLs seems to be\ndotnet publish\ndotnet bin/Debug/netcoreapp1.0/publish/application.dll\nShould I update the merge request accordingly?\n. ",
    "m-ghaoui": "Looks good to me! \n. ",
    "Chrisboh": "It told me it was missing libunwind and gettext.  What it didn't tell me was that I need to specify libunwind8 to apt-get in order for it to work.  \nOn a whole though I think its a bad experience to have someone to hit errors for dependencies that we know about.  We should either install them for them or tell them up front.\n. @blackdwarf it is a terrible experience that we know the user is very likely to hit an error message out of box.  What I don't understand is I already have to sudo apt-get curl as step 1 why can't we add libunwind8 and gettext to the end of that command and make it a better user experience?\n. When you say they are known are you meaning they can go click on the community tab and maybe find the right place to ask their question?  My first instinct was to click on a support or feedback link.  I don't think it would hurt if we had an extra call out that says something like the following.\nNeed help?  Click here! <- and have the link take you to the specific place we want the user to go to get help.  If I look on the community tab I am not sure if I should go to the CLI github repo link or the forums.  \nI like @AlexChesser idea for sending feedback.  In my case though I ran into issues getting CLI installed so I wouldn't have been able use this.\n. ",
    "daviatorstorm": "The problem with dependencies in project.json. When all dependencies are resolved, problem disapeared. But here we have the next problem, that sometimes I cannot find a uncorrect dependencies with \"Object is not set to an instanse of object\" error, so I must to find it manually.\n. ",
    "zoeysaurusrex": "Found the answer in dotnet/coreclr#2222\n\n'TypeBuilder' does not contain a definition for 'CreateType' and no extension method 'CreateType' accepting a first argument of type 'TypeBuilder' could be found (are you missing a using directive or an assembly reference?)\nUse typeBuilder.CreateTypeInfo() instead.\n. \n",
    "zorbasolutions": "Yes, same results. From the page you sent me, I downloaded https://go.microsoft.com/fwlink/?LinkID=809122 which is version Preview 2. I clicked on options and changed the directory to C:\\mydotnet\nInstaller ran just fine but after install is complete my c:\\mydotnet is still Empty.\nThanks,\nOn Thu, 14 Jul 2016 18:58:43 -0700\n Zlatko Knezevic notifications@github.com wrote:\n\n@zorbasolutions does this repro with the RTM installers you can download from https://dot.net/core?\n\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/dotnet/core/issues/118#issuecomment-232841446\n. Fine, Zip can work but please remove the option from the installer msi. It is confusing to any user if it doesn't work.\n\nOn Fri, 15 Jul 2016 07:57:45 -0700\n Eric StJohn notifications@github.com wrote:\n\nJust use the ZIP if you want this.  https://github.com/dotnet/cli/issues/3568\n\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/dotnet/core/issues/118#issuecomment-232974742\n. \n",
    "NVentimiglia": "Solved, I needed to import \n\n\"Microsoft.AspNetCore.WebSockets.Server\": \"0.1.0-rc2-final\",\n. \n",
    "christianreddington": "Submitted this in the wrong repository, now opened in ASP.NET core at https://github.com/aspnet/Home/issues/1567\n. ",
    "jonfasking": "Just to confirm, I deployed the code to a linux box, and I saw the same results. Back to back tests consistently reveal drastically different numbers between windows OS and linux OS.\n. Just to confirm, I deployed the code to a linux box, and I saw the same results. Back to back tests consistently reveal drastically different numbers between windows OS and linux OS.\n. sampletrace2.trace.zip\nI'm trying to make heads or tails of this but I'm not getting anywhere, haha.\n. sampletrace2.trace.zip\nI'm trying to make heads or tails of this but I'm not getting anywhere, haha.\n. ",
    "ericeil": "@jonfasking, can you collect a perf trace on Linux?  Instructions are here: https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/linux-performance-tracing.md\n. I'm having trouble finding much specific information about the actual dotNET process in that trace.  However, it does look like, at least in terms of CPU usage, the \"bro\" process is using much more CPU than the dotNET process.  There is also a Java process using a little more CPU.  Perhaps those are useful clues.\n. @vancem, @brianrob, any chance one of you could help us make more sense of this trace?\n. ",
    "vancem": "First if you look at the CPU STacks you see that all the activity is in the first 6 seconds.    I am assuming that is expected.   It also looks like you are not CPU bound (most CPU time is spend in the idle process, you have an 8 proc system and are only using at most half of your available CPU).   The 'bro' and 'java' processes are fairly active, but the dotnet process consumes CPU in the start (500msec) and then uses very little.   This implies that you are not CPU bound but something else is slowing down the requests (thus this is probably not going to be a CPU investigation, which is unfortunate, as we don't really have good wall clock time investigation tools on Linux yet).  \nHoming in on the dotnet process,  we see that libcoreclr.so!unknown is where most of the time is spent.  Thus we have a symbol problem (we need the symbol packages).  We have a plan to improve this experience, but for now you need to get symbols put in the right place.  Brian can help here.  however I don't think that this will help much as my expectation is that al tha time is JIT compile time.  Still having the symbols can help.  \nHowever as mentioned, this is nto likely to be a CPU problem but some sort of blocked time problem.  To investigate this is is best to put in an System.Diagnostics.Tracing.EventSource and 'interesting' places so that we can see where time is spent (basically you get logging with accurate time stamps that let you break down the time).   \nI would recommend using PerfView to collect a trace on Windows (simply do PerfView /threadTime collect).   Our instrumentation is MUCH better there and having a baseline of how it is SUPPOSED to work is very valuable.   \nI would start there, as also instrument your code with an EventSource (see https://blogs.msdn.microsoft.com/vancem/2015/09/14/exploring-eventsource-activity-correlation-and-causation-features/), and get some measurements on Windows.   Then we can tell you how to turn this on for Linux and see what can be learned from that.  \nHowever, it will take some effort.  You are on the bleading edge.  We want to make investigations like this much better, but Linux performance investigation is in its infancy. \n. I would recommend that @jonfasking take a new trace with perfCollect with a RTM version of the runtime (this will at least solve many of the symbol problems, as we know we have symbols for that version of the runtime.   If he adds EventSource instrumentation to his code as I have recommended previously that would also be good.   Finally if he can run it on Windows easily enough, that would certainly main the investigation easier as well...\n. @lt72 As Lee indicates I was only working with 2.0 Preview 2 and even then only for the Native PDBs (only needed for profiling).   \n. > Is it possible to debug the .NET Core and ASP.NET Core source code in my projects?\nYes.  These instructions are for windows (since we are talking about Visual Studio which only runs on windows.    It is also important that we are talking about V2.0 (or later) .NET Core (e.g. what you get from https://www.microsoft.com/net/core#windowscmd) \n\nUncheck the (Tools -> Options -> Debugging -> Just  My Code) checkbox.   \nInsure that the (Tools -> Options -> Debugging -> Symbol Settings -> Microsoft Symbol Servers) checkbox is set \nInsure that the (Tools -> Options -> Debugging -> Enable Source Link support) checkbox is checked\n\nThese steps will allow Visual Studio to find the .PDB files that are needed for the .NET Core and ASP.NET Core libraries.    However you need more than just the .PDB files you also need the source code itself.    Going forward we intend for all our libraries to have 'SourceLink' information so that you can fetch the source directly from GitHub.   When this is present, VS will simply fetch the source from GitHub and the experience is beautiful.     I have tested this on Visual Studio 15.3 (the latest released version).  \nThis 'it just works' experience (when you step into or set breakpoints on framework code VS should simply fetch the correct source code), should work for V2.0 ASP.NET DLLs (that is Microsoft.aspnet.dll).   Sadly the CoreFX, and CoreClr dlls (Typically System. dlls), will not be fixed until the V2.01 release (In a few weeks) and thus you need to fetch source code yourself using the instructions below. \nGetting source from GitHub\nUltimately you should not need to do this, all our DLLs will have SourceLink information and VS will simply fetch it from GitHub for you.    However some of our libraries currently do not have SourceLink information.   We will fix this but the experience in that case is VS will ask you where to fetch the file from.   You can work around this by fetching the source code from GitHub yourself and pointing VS at it.    \n\nIf the source code path contains src\\mscorlib  it lives in the https://github.com/dotnet/coreclr \nIf the source code path contains   corefx\\src it lives in https://github.com/dotnet/corefx \nIf the source code path has the form  .r*\\src where it is an ASP.NET DLL and it lives in https://github.com/aspnet/*  (where * is the name from the source code path).\nFor example\nC:\\b\\w\\f92f3e96777ec37d\\.r\\Mvc\\src\\Microsoft.AspNetCore.Mvc\\MvcServiceCollectionExtensions.cs \nlives in https://github.com/aspnet/Mvc \n\nOnce you know the repository, you can fetch the repository and set it to the 2.0.0 version of the source like this. \ngit clone https://github.com/dotnet/coreclr\n    cd coreclr \n    git checkout v2.0.0\nAt this point you can answer the VS dialog prompting you for the source file path.   Once you set it for one source file it will work for any other source file in the same directory structure.   \nYou can also set up where VS searches without having to wait to be prompted by right clicking on the solution -> Properties -> Debug Source Files  and then add your directory to the 'Directories Containing Source Code'.     Once you set up these paths, VS should simply find your source code.\nFinally there is an option in (Tools -> Options -> Debugging -> General -> Require Source Files to match Exactly) which is set by default.   If you have problems getting VS to find your source, you can try unselecting that checkbox to see if your version is wrong and the source checksums don't match.  \nASP.NET 2.0 SourceLink (VS fetches from GitHub directly) should be working\nThe V2.0 ASP.NET DLLs (aspnet.dll) have the needed SourceLink information, they should just work.   the instructions above for fetching source code for these DLLs.   Please comment below if this is not the case.  \nNote that we did UPDATE the ASP.NET PDBs so they have sourceLink, which means that if you tried to step into ASP.NET dlls before, you may have already cached an old version of the PDBs and if so, Visual Studio will not try to refetch it.    You can force the refetch by exiting Visual Studio deleting the %TEMP%\\SymbolCache directory and then retrying.   In addition once Visual Studio has attempted to fetch a particular source file it will not attempt doing it again.   You can clear that history by right clicking on the solution -> Properties -> Debug Source Files and removing all names from the 'Do not look for these source files' textbox.  . I have a update on this for the current version of .NET Core (Version 2.0.3).\nOn Windows, if you install this version of the .NET Framework then the normal Microsoft symbol server http://msdl.microsoft.com/download/symbols can find all the necessary symbolic (PDB) and annotated with SourceLink information to do source stepping in both the .NET Runtime Framework (CoreFX) as well as ASP.NET by fetching the symbolic information from that server and the source code from the appropriate GIT repository.  \nThe upshot of this is that if you debug a .NET Core application using version 2.0.3 of the runtime (e,g. from https://www.microsoft.com/net/download/windows) and do the following \n\nUncheck the (Tools -> Options -> Debugging -> Just My Code) checkbox.\nInsure that the (Tools -> Options -> Debugging -> Symbol Settings -> Microsoft Symbol Servers) checkbox is set\nInsure that the (Tools -> Options -> Debugging -> Enable Source Link support) checkbox is checked\n\nThen you should be able to step into (or set breakpoints in) Framework or ASP.NET code and the source code will automatically be brought up.   \nNote that the framework code is precompiled and optimized by default, which means that stepping and local variable access in framework code may not be nice as you would like (variables may be unavailable) . One other useful note.   As mentioned above, by default the code in the Framework is optimized, however you can force it to NOT be.   First you have to run the program with the COMPLUS_ZapDisable=1 environment variable set.   You can set this variable conveniently by\n\nRight clicking on the Project (csproj) file in SolutionExplorer -> Properties -> Debug\nClick the 'Add' button in the 'Environment Variables' section of the Debug Pane.  \n\nThis will cause the code to NOT use the rregenerated (Zapped) code.    Next tell Visual Studio to suppress optimization by \n\nCheck the checkbox in Tools -> Options -> Debugging -> General -> Suppress  JIT optimization on module Load\n\nOnce you do this for your project, you don't need to do it again (until you have another project in which you want to step through framework code. \n. I have written a blog post that is likely to be more user friendly here \nhttps://blogs.msdn.microsoft.com/vancem/2017/12/20/update-debugging-through-the-net-core-framework-v2-0-3-windows/\n. @GuerrillaCoder \nSomething I have found to be very useful when understanding other people's code is to run a good profiler to allow me to understand it.       The basic idea is to collect a DETAILED profile that will show you what your program is doing not to tune is performance but just to browse the execution and goto the source code as you do so.  This has the advantage of focusing you in on the important code that actually RUNS in your case.\nThe PerfView tool is particularly good at doing this because it supports a 'Goto Source' feature that 'just works (if you use Version 2.0.3 of the .NET Core runtime and the  V2.0.0 version of PerfView you can run (on windows).   \nIt is pretty slick and works well for the kind of browsing you seem to want to do.   \nTO do this download the V2.0.0 version of PerfView and run the command \nPerfView /DotnetAllocSampled /CpuSampleMSec=.125 collect  \nThus turns on sampling (about 5K /sec) on any allocation as well as 8 times a millisecond.   This does not slow the program down much but might not give you the level of detail you want (code that does not allocate much or use much CPU will be missed).    If you want to catch everything use the /dotnetCalls, but be warned you should only do that in small scenarios because it slows the program down alot.  \nOnce you have your data you can then open up the trace and go to the 'Advanced Group -> Any Stacks' view  go to the 'Call Tree' tab (You should also read the tutorial / video on PerfView basics, including symbol resolution and grouping). \nBut the very cool thing is that once you find a method of interest, for example\nsystem.console!System.Console.WriteLine(System.String)\nyou can select the node, right click and select 'Goto Source' and PerfView knows enough to fetch the right code from GitHub, download it and show you an annotated version of it.  \nVery Handy!. How third party software (like Newtonsoft), handle symbols is of course up to them.  \nIn the case of Newtonsoft, it would seem that https://github.com/JamesNK/Newtonsoft.Json/issues/881 is relevant.\n. @dozer75,   In your link you mention that the technique here (definitely the preferred solution) forces you to debug optimized code.  \nThat is not true.   As mentioned in this blog post I referenced above there is a straightforward way of disabling optimization of the .NET framework while debugging.   \nThis is certainly not something that you can discover without help,  so if you care please vote on this Visual Studio Suggestion\n. @Fruchuxs - As greg mentions, the fact that it is looking for source code means that you found the symbol file (PDB).   You will actually see which particular one if you look at the Debug -> Modules display for that DLL.   \nThe fact that it is looking on your machine (in the original location it was built (on some other machine). means it is trying to find the source.    This means for whatever reason it could not find it with SourceLink.    This is what Greg is trying to debug with his information.  \nNow that could be because you are running a version of the runtime that does not have source link information (that is the git URL) in its PDBs, or that you are running a version of Visual Studio that does not support Source Link (you need VS 2017), or something about the configuration is wrong.   \nNote that you can work around this problem by fetching the source you care about from GIT and pointing VS at it.   If you right click on your *.sln file in the solution explorer and select Properties -> Common Properties -> Debug Source Files, you will see all the places that it tries to look, as well as the files it had prompted you for and failed (it will not prompt again).  \nWhat I do is clear the set of failed files and then try to step through again.  It will prompt you and now you have a file to give it.  Once you give in one, it will figure out to look near it for other files so you tend to not have to give it much help (but you can by putting directories in the 'Debug Source Files' dialog. . I believe both @npnelson  and @Fruchuxs  issue is related to a build-time issue in .NET Core (see https://github.com/dotnet/buildtools/issues/1896).     Effectively some framework DLLs need extra processing via a tool called 'GenFacades' and this tool drops the SourceLink information necessary to step into them.\nYou can tell this issue because it happens to only SOME parts of the framework (indeed exactly the list in https://github.com/dotnet/buildtools/issues/1896).    The work-around is to download the source code for those particular DLLs locally (Note that only https://github.com/dotnet/corefx has this problem so if you clone that repository to the correct commit (which is in the version information for every DLL in CoreFX), then you can step through source. . On further investigation, while the issue I mentioned above (1896) CAN be relevate to @npnelson s issue it is definitely not associatd with @Fruchuxs  issue because that one clearly is trying to fetch things form 'mscorlib' which only exists in CoreCLR and CoreCLR does not generate facades (which is needed for issue 1896 to manifest).\nI looked into it a bit, and most likely (and maybe in both cases) the issue is that while Version 2.0.3 of the runtime HAS proper sourceLink support, it is not true for Version 2.0.5.   \nOne work-around is to simply go back to Version 2.0.3 (if you simply uninstall 2.0.5 it likely will fix things).   You can download the source as mentioned in 1896 as well)\nThis should not affect ASP.NET DLLs (Since they were not updated in Version 2.0.5).  \nI should be able to fix this (by patching the PDBS).  I will let you know when I have done this. . @Fruchuxs - My spot-tests of stepping into ASP.NET Code using V2.0.3 of ASP.NET  That is the following line in my *.csproj\n<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\nI can successfully step into something like ImageTagHelper(...). \nIt also worked for 2.0.5 (this is the lastest public release).   \nSomething you can try is to close VS, delete the %TEMP%\\SymbolCache and then try again.   This will force the symbols to be re-downloaded.\nFor TagHelpers the important DLL is probably Microsoft.AspNetCore.Mvc.TagHelpers, and if you go to the debug -> Windows ->  Modules pane you will see this DLL and its cooresponding PDB.   Mine is at\n...\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.Mvc.TagHelpers.pdb\\A742A2B29D2B4658831AD145DC0849BD1\nAnd yours should have this same GUID-like number.    My PDB is \n02/06/2018  11:32 AM           247,296 Microsoft.AspNetCore.Mvc.TagHelpers.pdb\nand yours should have exactly the same size.   If you get that far, and you are using a recent version of Visual Studio, I would expect it to work.\n . I have patched the symbol files for .NET Core Framework dlls for version 2.0.5 of the .NET Runtime but ran into a snag getting the files uploaded to the Microsoft symbol server.   We will get it figured out, but it may be a matter of days if we are unlucky.\nIn the mean time, if you are running on .NET Core V2.0.5 (X64) and want to step into .NET Framework code with source code in VS 2017 you can download and unzip DotNetCore_V2.05_X64_Symbols.zip and place them on the symbol path (go to tools -> Options -> Debugging -> Symbols).   \nWith luck very soon I will tell you that it 'just works'.  \n. I have just confirmed that my updated PDBs have been published to the Microsoft symbol server.   Thus you should now be able to step into code in framework code in V2.0.5 of .NET Core.  \nThere is one caveat, which is that if you have ALREADY attempted to do this you have cached 'bad' information that needs to be flushed.   To fix this.\n\n\nclose Visual Studio and delete the %TEMP%\\SymbolCache directory.  THis gets rid of the old PDBs.\n\n\nYou may also need to got the solution explorer right click on the solution file -> Properties -> Common Properties -> Debug Source Files, and then look if there are any entries in the 'Do not look for these Source Files' textbox.   Delete any of these (this tells VS to try again to fetch the source code). . Another reminder that the instructions here \n\n\nhttps://blogs.msdn.microsoft.com/vancem/2017/12/20/update-debugging-through-the-net-core-framework-v2-0-3-windows/\n\n\nWork (and in particular tell you how to see local variables in framework code if those are important to your debugging.\nAlso if you think that Visual Studio should diasable optimizations in the framework when you are stepping through it by default, please see this Visual Studio suggestion and vote for it.  . @Fruchuxs - what version of Visual Studio are you using?\nDoes source lookup from the framework for any part of the framework?     If it works sometimes but not others, it becomes very important to get the details right.   Ideally you can repro your result on say the .NET sample MVC program (which we have here internally), and we can see if we can reproduce your issue internally.  If so we have a very good chance of fixing it.   \nVance. The symbol packages for .NET Core 2.0 build for Linux machines should have the portable PDBs necessary to debug the framework.  As Gregg mentions, there is not symbol server support or source line support, until the 2.1 release (which by the way, there a  Preview out  that should work (see https://github.com/dotnet/core/blob/master/release-notes/download-archive.md).   \nFor runtimes before that, you need to download the symbol package place the PDBs on your symbol path.  This should allow VSCode to find the (portable) PDBs.  However these PDBs may not have the SourceLink information for finding the source code automatically form GitHub.  TO work around that you need to clone the appropriate repository to the correct version and then add that to your source path.   It is a multistep process that requires some care.   \nIf you can debug using the 2.1 preview, you should strongly consider doing that. . If you need the .NET Core or .NET Framework symbols (as opposed to Microsoft.ASPNET code) there is a link for the 2.0.6 release off of https://github.com/dotnet/core/blob/master/release-notes/download-archive.md.   THen click on the 'runtime' link under the 'Debug Symbols'  YOu then have to unzip it and you will find .nupkgs for each of the OSes.   unpack the nugget package for your OS and then you have the symbols you need.\nASP.NET dlls are not in there.  I don't know off hand where they are.  . I wanted to add that it is also possible (and pretty easy)( to debug through the framework if you use Visual Studio Code instead of Visual Studio.   This is how you would do it on Linux for example (It also works on Windows).     \nSee See https://github.com/OmniSharp/omnisharp-vscode/wiki/Debugging-into-the-.NET-Framework-itself for instructions on setting VSCode launch settings to make this work.  \nIf anyone has specific instructions for doing this on Visual Studio for Mac, we should also add them here (it was raised recently in https://github.com/aspnet/Docs/issues/4155).. @youssefabidi  I was able to reproduce your issue about 1/2 hour ago.    When trying to investigate it however the problem went away, and everything seems to work properly.    This is what I get now (which looks correct)\nC:\\Program Files\\dotnet\\Microsoft.AspNetCore.Hosting.Abstractions.pdb: Cannot find or open the PDB file.\nC:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\2.1.2\\Microsoft.AspNetCore.Hosting.Abstractions.pdb: Cannot find or open the PDB file.\nC:\\WINDOWS\\Microsoft.AspNetCore.Hosting.Abstractions.pdb: Cannot find or open the PDB file.\nC:\\WINDOWS\\symbols\\dll\\Microsoft.AspNetCore.Hosting.Abstractions.pdb: Cannot find or open the PDB file.\nC:\\WINDOWS\\dll\\Microsoft.AspNetCore.Hosting.Abstractions.pdb: Cannot find or open the PDB file.\nC:\\Users\\Vancem\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.Hosting.Abstractions.pdb\\8a73a0e10c65481c827a7c925884d661ffffffff\\Microsoft.AspNetCore.Hosting.Abstractions.pdb: Cannot find or open the PDB file.\nC:\\Users\\Vancem\\AppData\\Local\\Temp\\SymbolCache\\MicrosoftPublicSymbols\\Microsoft.AspNetCore.Hosting.Abstractions.pdb\\8a73a0e10c65481c827a7c925884d661ffffffff\\Microsoft.AspNetCore.Hosting.Abstractions.pdb: Cannot find or open the PDB file.\nC:\\Users\\Vancem\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.Hosting.Abstractions.pdb\\8a73a0e10c65481c827a7c925884d6611\\Microsoft.AspNetCore.Hosting.Abstractions.pdb: Cannot find or open the PDB file.\nC:\\Users\\Vancem\\AppData\\Local\\Temp\\SymbolCache\\MicrosoftPublicSymbols\\Microsoft.AspNetCore.Hosting.Abstractions.pdb\\8a73a0e10c65481c827a7c925884d6611\\Microsoft.AspNetCore.Hosting.Abstractions.pdb: Cannot find or open the PDB file.\nSYMSRV:  BYINDEX: 0xB\n         C:\\Users\\Vancem\\AppData\\Local\\Temp\\SymbolCache*https://msdl.microsoft.com/download/symbols\n         Microsoft.AspNetCore.Hosting.Abstractions.pdb\n         8A73A0E10C65481C827A7C925884D661ffffffff\nSYMSRV:  UNC: C:\\Users\\Vancem\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.Hosting.Abstractions.pdb\\8A73A0E10C65481C827A7C925884D661ffffffff\\Microsoft.AspNetCore.Hosting.Abstractions.pdb - path not found\nSYMSRV:  UNC: C:\\Users\\Vancem\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.Hosting.Abstractions.pdb\\8A73A0E10C65481C827A7C925884D661ffffffff\\Microsoft.AspNetCore.Hosting.Abstractions.pd_ - path not found\nSYMSRV:  UNC: C:\\Users\\Vancem\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.Hosting.Abstractions.pdb\\8A73A0E10C65481C827A7C925884D661ffffffff\\file.ptr - path not found\nSYMSRV:  HTTPGET: /download/symbols/Microsoft.AspNetCore.Hosting.Abstractions.pdb/8A73A0E10C65481C827A7C925884D661ffffffff/Microsoft.AspNetCore.Hosting.Abstractions.pdb\nSYMSRV:  HttpQueryInfo: 801900c8 - HTTP_STATUS_OK\nSYMSRV:  Microsoft.AspNetCore.Hosting.Abstractions.pdb from https://msdl.microsoft.com/download/symbols: 2432 bytes \nSYMSRV:  PATH: C:\\Users\\Vancem\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.Hosting.Abstractions.pdb\\8A73A0E10C65481C827A7C925884D661ffffffff\\Microsoft.AspNetCore.Hosting.Abstractions.pdb\nSYMSRV:  RESULT: 0x00000000\nhttps://msdl.microsoft.com/download/symbols: Symbols downloaded from symbol server.\nC:\\Users\\Vancem\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.Hosting.Abstractions.pdb\\8A73A0E10C65481C827A7C925884D661ffffffff\\Microsoft.AspNetCore.Hosting.Abstractions.pdb: Symbols loaded.\nI conclude from this that there was a intermittent failure with the msdl server but it has been fixed.  \nPlease try it again.   . @youssefabidi : like you I was also led astray by the HTTP_STATUS_NOT_FOUND.    Like you I assumed that the most common kind of intermittent error would be simply a timeout (the service is simply not responding).   A HTTP_STATUS_NOT_FOUND implies that the service tried but failed to find something.  I am assuming there was some service glitch with the service that a human probably found and fixed between the time we tried the first time and the second time.     I was starting to guess this because symbols that HAD BEEN FOUND previously started to not be found.   But before got further, it started to work.   . ",
    "gitmaheshk": "@blackdwarf thanks for reaching out. For time constraints and my inability to address the issue I have since converted the test project to a regular class library project. As I seek to learn, I have created a sample test project. All I am trying to do here is create a .net core test class library project using xunit targeting the full framework and read an app setting key from the app.config.  I understand the preferred way is to use strongly typed configuration via appsettings.json however my actual solution has references to several custom built class libraries on the older fwk(4.0) which are referenced as nuget packages and these libraries need the app.config. The app.config file has app settings, connection strings and other custom configuration settings (msdn.microsoft.com/en-us/library/2tw134k3.aspx). \nPlease let me know if you need additional information, below is the project.json appended. \n--\n{\n   \"version\": \"1.0.0-\",\n  \"testRunner\": \"xunit\",\n  \"dependencies\": {\n    \"xunit\": \"2.2.0-beta2-build3300\",\n    \"dotnet-test-xunit\": \"2.2.0-preview2-build1029\",\n    \"Microsoft.Extensions.Configuration\": \"1.0.0\"\n  },\n    \"frameworks\": {\n      \"net461\": {\n        \"dependencies\": {\n          \"Microsoft.NETCore.Platforms\": \"1.0.1\"\n        },\n        \"frameworkAssemblies\": {\n          \"System.Configuration\": \"4.0.0.0\",\n          \"System.Data.Entity\": \"4.0.0.0\"\n        }\n      }\n      }\n    }\n. ",
    "akuzhan": "Have you found solution yet?. ",
    "emailtowalter": "thanks. Just tested, and it still does not work \nstring a = \"a\";\nstring b = \"b\";\nlogger.LogCritical(\"{b} like {a}\", a, b);\nresult: a like b\nthought?\n. Thanks for the help. I will close this one. \n. ",
    "danroth27": "I believe it already is explained:\n\nThe call to the log method can utilize a format string with named placeholders (like {path}). These placeholders are populated in the order in which they appear by the args values passed into the method call. Some logging providers will store these names along with their mapped values in a dictionary that can later be queried. In the example below, the request path is passed in as a named placeholder:\n. I don't think we have a good built-in solution for this today in the framework.\n\n@leastprivilege @brockallen Is this something you can setup with IdentityServer?\n. This issue was moved to aspnet/Security#1141. @M-Curtis Sounds like there was an issue with the modified project.json file. If you can share the problematic project.json file with us we can take a look and see what might be amiss.\n. @terrajobst @zhenlan Is the issue here that the solution folks are currently using requires CodeDOM support, which doesn't exist in .NET Core? Is this perhaps something that gets addressed with all the APIs we are adding back?. Yeah, this dialog is super confusing when you already have MVC included in a project. \n@barrytang @sayedihashimi Please take a look. @DamianEdwards . @yupingyong Could you please provide more details on the steps you performed and the error you are seeing?. @yupingyong We generated the required web.config file to add the ASP.NET Core Module to your app when you run dotnet publish. Can you confirm that you have run dotnet publish on your app and that the web.config file is present in the publish output?. @Eilon @mlorbetske Can you guys take a look?. I believe https://github.com/dotnet/corefx/issues/2089 tracks adding support for LDAP to .NET Core.\nASP.NET Core already provides support for validating JWT tokens sent as bearer tokens. We support acquiring JWT tokens via OIDC. We also plan to provide an OIDC provider component in an upcoming release.\nThere are no plans to ditch Kestrel - we need Kestrel as a high performance cross-platform web server that is independent of any one particular host. But you can still use ASP.NET Core with Nginx\nDoes that cover all of the scenarios you are interested in?\n. This is tracked by https://github.com/aspnet/Mvc/issues/7652. I believe NaCl has been largely deprecated in favor of WebAssembly. We are working on bringing .NET to WebAssembly via Mono)\n. This issue was moved to aspnet/AspNetCore#7560. All the content should be indented under this entry. ",
    "rafalkwol": "Hello,\nYes I tried both with VS2015 Update 2 and Update 3. Also have all the required Redistributables for Visual C++. More details about my issue you can find under link to VS forums. One of the users also reproduced it.\nhttps://social.msdn.microsoft.com/Forums/vstudio/en-US/88310535-5013-4304-bd2b-c58b54d5d678/visual-studio-2012-is-missing-a-winforms-partial-class-in-solution-explorer?forum=visualstudiogeneral#b5ab628a-60bf-4727-bef0-2a0111d22d5c\nhttps://social.msdn.microsoft.com/Forums/vstudio/en-US/20cd09c5-705f-4324-8009-2af974ffd8cb/problem-with-missing-winforms-form-class-file-in-solution-explorer?forum=visualstudiogeneral#20cd09c5-705f-4324-8009-2af974ffd8cb\nBest regards.\n. ",
    "vincentshow": "i dont know which repo is suitable for getting help between dotnet/wcf and dotnet/core, so i create this issue both here and wcf #https://github.com/dotnet/wcf/issues/1310\n. thanks a lot, i've put my story in #https://github.com/dotnet/wcf/issues/1200\n. ",
    "gosukonda-gopala": "Hi I am new to .net core I want to consume a wcf service without adding service reference in .net core project... can someone help me on how to consume. .net core version I am using is 1.1.\nalso can someone help me is it possible to add a nugget package developed in 4.5.1 in a .net core 1.1 project?. ",
    "MarkPieszak": "Closing, just realized there's a PR for it already!\n. Oh really, yeah strangely it's actually making the whole project not able to run (throws that error that the package isn't installed). Very bizarre, doesn't happen on MAC of course.\n. I'm currently on holiday, but I believe it might of been a rc2 issue, unable to try if it works with the RTM (I'm guessing it's fixed in that one)\n. I'm still experiencing this with RTM as well, but read something today that potentially this might be linked with using nvm or some type of node version manager. I'm going to try removing the nvm and uninstalling/reinstalling node, and giving it another shot. I'll get back to you in the morning! @blackdwarf \nIn my case it won't let the project run since dotnet thinks the packages aren't installed (yet they are in node_modules)\n. Not a problem! I'll update today if it fixes the issue as well. Thanks again Zlatko.\n. ",
    "neyromant": "I have the same problem on Win7 x64, VS 2015. There was after an upgrade to RC2.\nBut it does not cause any problems , does not affect the build of the project .\n. I have the same problem on Win7 x64, VS 2015. There was after an upgrade to RC2.\nBut it does not cause any problems , does not affect the build of the project .\n. @blackdwarf , I upgraded to the RTM , but the problem has not disappeared . It does not interfere with the work , but the label and warning icon confused me.\n. @blackdwarf , I upgraded to the RTM , but the problem has not disappeared . It does not interfere with the work , but the label and warning icon confused me.\n. DynamicMethod located in \"System.Reflection.Emit.Lightweight\" package.\nILGenerator located in \"System.Reflection.Emit.ILGeneration\" package\n. DynamicMethod located in \"System.Reflection.Emit.Lightweight\" package.\nILGenerator located in \"System.Reflection.Emit.ILGeneration\" package\n. @svick Thank you!\nBut I have another problem:\npi@raspberrypi:~ $ sudo curl -sSL https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0-preview1/scripts/obtain/dotnet-install.sh | bash /dev/stdin --version 1.0.0-preview1-002702 --install-dir ~/dotnet\ndotnet-install: Downloading https://dotnetcli.blob.core.windows.net/dotnet/beta/Binaries/1.0.0-preview1-002702/dotnet-dev-debian-x64.1.0.0-preview1-002702.tar.gz\ndotnet-install: Extracting zip\ndotnet-install: Adding to current process PATH: /home/pi/dotnet. Note: This change will be visible only when sourcing script.\ndotnet-install: Installation finished successfuly.\npi@raspberrypi:~ $ sudo ln -s ~/dotnet/dotnet /usr/local/bin\npi@raspberrypi:~ $ dotnet\n-bash: /usr/local/bin/dotnet: cannot execute binary file: Exec format error\npi@raspberrypi:~ $ sudo dotnet\n/usr/local/bin/dotnet: 1: /usr/local/bin/dotnet: Syntax error: redirection unexpected\nWhat is the problem ?\n. @svick Thank you!\nBut I have another problem:\npi@raspberrypi:~ $ sudo curl -sSL https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0-preview1/scripts/obtain/dotnet-install.sh | bash /dev/stdin --version 1.0.0-preview1-002702 --install-dir ~/dotnet\ndotnet-install: Downloading https://dotnetcli.blob.core.windows.net/dotnet/beta/Binaries/1.0.0-preview1-002702/dotnet-dev-debian-x64.1.0.0-preview1-002702.tar.gz\ndotnet-install: Extracting zip\ndotnet-install: Adding to current process PATH: /home/pi/dotnet. Note: This change will be visible only when sourcing script.\ndotnet-install: Installation finished successfuly.\npi@raspberrypi:~ $ sudo ln -s ~/dotnet/dotnet /usr/local/bin\npi@raspberrypi:~ $ dotnet\n-bash: /usr/local/bin/dotnet: cannot execute binary file: Exec format error\npi@raspberrypi:~ $ sudo dotnet\n/usr/local/bin/dotnet: 1: /usr/local/bin/dotnet: Syntax error: redirection unexpected\nWhat is the problem ?\n. @OskarKlintrot, I'm not imagine how to do it.\nFor example, on another computer I'm doing:\nmkdir app\ncd app\ndotnet new\ndotnet restore\ndotnet build\nAs a result, I get app.dll file.\nHow to run it on Raspberry, if dotnet does not work?\ndotnet run app.dll?\npi@raspberrypi:~/test $ dotnet run app.dll\n-bash: /usr/local/bin/dotnet: cannot execute binary file: Exec format error\nNote: On raspbery not installed mono. I want to run the .net core programs without mono.\n. @OskarKlintrot, I'm not imagine how to do it.\nFor example, on another computer I'm doing:\nmkdir app\ncd app\ndotnet new\ndotnet restore\ndotnet build\nAs a result, I get app.dll file.\nHow to run it on Raspberry, if dotnet does not work?\ndotnet run app.dll?\npi@raspberrypi:~/test $ dotnet run app.dll\n-bash: /usr/local/bin/dotnet: cannot execute binary file: Exec format error\nNote: On raspbery not installed mono. I want to run the .net core programs without mono.\n. Thanks for answers. \nBut, apparently, has no runtime for linux arm: https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json\nI saw only arm runtimes for windows (ex. \"win8-arm\"), but for linux only x64.\n. Thanks for answers. \nBut, apparently, has no runtime for linux arm: https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json\nI saw only arm runtimes for windows (ex. \"win8-arm\"), but for linux only x64.\n. @arkadiuszwojcik , @ahmed-sherien  No. I created a simple project:\nProgram.cs:\nC# \nusing System;\nnamespace TestConsole\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello, world!\");\n            Console.WriteLine(\"This is a .net core app!\");\n        }\n    }\n} \nproject.json:\n```json\n{\n  \"version\": \"1.0.0-*\",\n  \"buildOptions\": {\n    \"emitEntryPoint\": true\n  },\n\"dependencies\": {\n    //\"Microsoft.NETCore.Runtime.CoreCLR-arm\": \"1.0.1-beta-23225\",\n    \"Microsoft.NETCore.Runtime.CoreCLR\": \"1.1.0\",\n    \"Microsoft.NETCore.DotNetHostPolicy\": \"1.2.0-beta-001299-00\",\n    //\"System.Console\": \"4.3.0\"\n    \"system.console\": {\n      \"version\": \"4.4.0-beta-24911-08\"\n    }\n  },\n\"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"imports\": \"dnxcore50\"\n    }\n  },\n\"runtimes\": {\n    \"win10-x64\": {},\n    \"linux-arm\": {}\n  }\n}\n```\n```cmd\ndotnet build\nProject TestConsole (.NETCoreApp,Version=v1.0) will be compiled because inputs were modified\nCompiling TestConsole for .NETCoreApp,Version=v1.0\nCompilation succeeded.\n    0 Warning(s)\n    0 Error(s)\nTime elapsed 00:00:00.9394322\n```\nWhen compiling for ARM linux i get an error:\n```cmd\ndotnet build -r linux-arm\nProject TestConsole (.NETCoreApp,Version=v1.0) will be compiled because expected outputs are missing\nCompiling TestConsole for .NETCoreApp,Version=v1.0\nCompilation succeeded.\n    0 Warning(s)\n    0 Error(s)\nTime elapsed 00:00:00.9334337\n```\nFailed to make the following project runnable: TestConsole (.NETCoreApp,Version=v1.0) reason: Expected coreclr library not found in package graph. Please try running dotnet restore again.. @arkadiuszwojcik , @ahmed-sherien  No. I created a simple project:\nProgram.cs:\nC# \nusing System;\nnamespace TestConsole\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello, world!\");\n            Console.WriteLine(\"This is a .net core app!\");\n        }\n    }\n} \nproject.json:\n```json\n{\n  \"version\": \"1.0.0-*\",\n  \"buildOptions\": {\n    \"emitEntryPoint\": true\n  },\n\"dependencies\": {\n    //\"Microsoft.NETCore.Runtime.CoreCLR-arm\": \"1.0.1-beta-23225\",\n    \"Microsoft.NETCore.Runtime.CoreCLR\": \"1.1.0\",\n    \"Microsoft.NETCore.DotNetHostPolicy\": \"1.2.0-beta-001299-00\",\n    //\"System.Console\": \"4.3.0\"\n    \"system.console\": {\n      \"version\": \"4.4.0-beta-24911-08\"\n    }\n  },\n\"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"imports\": \"dnxcore50\"\n    }\n  },\n\"runtimes\": {\n    \"win10-x64\": {},\n    \"linux-arm\": {}\n  }\n}\n```\n```cmd\ndotnet build\nProject TestConsole (.NETCoreApp,Version=v1.0) will be compiled because inputs were modified\nCompiling TestConsole for .NETCoreApp,Version=v1.0\nCompilation succeeded.\n    0 Warning(s)\n    0 Error(s)\nTime elapsed 00:00:00.9394322\n```\nWhen compiling for ARM linux i get an error:\n```cmd\ndotnet build -r linux-arm\nProject TestConsole (.NETCoreApp,Version=v1.0) will be compiled because expected outputs are missing\nCompiling TestConsole for .NETCoreApp,Version=v1.0\nCompilation succeeded.\n    0 Warning(s)\n    0 Error(s)\nTime elapsed 00:00:00.9334337\n**Failed to make the following project runnable: TestConsole (.NETCoreApp,Version=v1.0) reason: Expected coreclr library not found in package graph. Please try running dotnet restore again.**. Are you interested in this?\nhttps://github.com/aspnet/Tooling/blob/master/known-issues.md\n. Are you interested in this?\nhttps://github.com/aspnet/Tooling/blob/master/known-issues.md\n. For create, edit and read pdf docs you can use iTextSharp. \nPackage for .net core: \nhttps://www.nuget.org/packages/iTextSharp.LGPLv2.Core/\n. For create, edit and read pdf docs you can use iTextSharp. \nPackage for .net core: \nhttps://www.nuget.org/packages/iTextSharp.LGPLv2.Core/\n. I tried to turn off the DisableImplicitFrameworkReferences.\nNow got another error:\nUnhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Console, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\nAborted\n. I tried to turn off the DisableImplicitFrameworkReferences.\nNow got another error:\nUnhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Console, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\nAborted\n```. I wanted to compile a minimal application that depends only System.Console.\nFor this I set < DisableImplicitFrameworkReferences >true< /DisableImplicitFrameworkReferences >. dotnet --version\n2.0.0\n. It's a pity. This approach worked for .net core 1.0.\n\u041e\u043a, Thank you so much.. @Petermarcu, Thank you very much for the answer!\nThis documentation will be very useful to me!. I have yet another issue with self contained application and .net core 2.0.\n@Petermarcu, @janvorli could you please look at https://github.com/dotnet/core/issues/989 ?. ",
    "ehajri": "nvm, that was for an earlier version.\n. ",
    "hismichael": "Okay. Yes I see they are there now. Thanks!\n. ",
    "OskarKlintrot": "\nI think if you want to use .Net Core on that machine, you will need to build and publish your code on another machine and then copy it to the Pi.\n\nSo it works to run an ASP.NET Core app on Raspberry Pi but not building the source code?\n. @neyromant: Neither do I. I really hoped ASP.NET Core would work without Mono on RPi.\n. ",
    "jmevel": "@neyromant I haven't tried but I think you didn't read the previous comments carefully \n\nyou will need to build and publish your code on another machine and then copy it to the Pi\n\nIn your code sample, you just forgot the most important part: publishing\n. ",
    "Ausm": "@OskarKlintrot, I think, what you need is a ASP.Net Core Standalone Application.\nWhen you remove \"type\": \"platform\" from your Microsoft.NETCore.App dependency, and add a runtimes section at the root level of your project.json, you can call dotnet publish -c Release -r {yourRuntime}.\nAfter that you get an export, which run on the platform you specified without installing dotnet cli. There should be a binary with the name of your project you can call to start your app, but I never tried it on a Raspberry Pi.\nDont forget, you still need the right glibc, libunwind, and libicu.\nExample for the runtimes section:\njson\n{\n  \"runtimes\": {\n    \"win7-x64\": {},\n    \"centos.7-x64\": {},\n    \"ubuntu.14.04-x64\": {},\n    \"osx.10.11-x64\": {}\n  }\n}\nA list of current valid rid's, which can be used in the runtimes section can be found here.\nHope that helps.\n. ",
    "arkadiuszwojcik": "@neyromant check it once again, recent commit added linux arm runtimes. ",
    "ahmed-sherien": "@neyromant did you manage to run the dotnet core app on raspberry pi ?. ",
    "Izuzusama": "@neyromant \nDoing dotnet restore with linux-arm shows: \n\nSystem.Diagnostics.Process 4.1.0 provides a compile-time reference assembly for System.Diagnostics.Process on .NETCoreApp,Version=v1.0, but there is no run-time assembly compatible with linux-arm.\n    System.Globalization.Extensions 4.0.1 provides a compile-time reference assembly for System.Globalization.Extensions on .NETCoreApp,Version=v1.0, but there is no run-time assembly compatible with linux-arm.\n    System.IO.FileSystem.Watcher 4.0.0 provides a compile-time reference assembly for System.IO.FileSystem.Watcher on .NETCoreApp,Version=v1.0, but there is no run-time assembly compatible with linux-arm.\n    System.IO.MemoryMappedFiles 4.0.0 provides a compile-time reference assembly for System.IO.MemoryMappedFiles on .NETCoreApp,Version=v1.0, but there is no run-time assembly compatible with linux-arm.\n    System.Net.NameResolution 4.0.0 provides a compile-time reference assembly for System.Net.NameResolution on .NETCoreApp,Version=v1.0, but there is no run-time assembly compatible with linux-arm.\n... \n\nSuggest that those dependencies has no build yet. ",
    "mrpmorris": "Your project is being referenced indirectly, this is as designed. What you can do is right-click the project in the middle and select \"Edit\", then find the relevant  node and include the XML attribute PrivateAssets=\"All\". ",
    "naamunds": "@blackdwarf I think the known issues should also mention that even with the workaround for dotnet restore, dotnet run will still fail for projects in the root of the file system, and I'm not aware of a workaround for that. See https://github.com/dotnet/cli/issues/3697\n. @svick Thanks for pointing that out.  I'll close this one.. ",
    "aochagavia": "I hope the updated information is accurate. Otherwise let me know so I can correct it.\n. ",
    "AustinWise": "There are some .DS_Store files checked in:\n.DS_Store\nrelease-notes/.DS_Store\nPerhaps they should be removed?\n. Check out Open-XML-SDK. Specifically, carefully read the \"How to install the NuGet package section\"; you will need to add a custom package source.\nThen you can write something like this:\n```csharp\nusing DocumentFormat.OpenXml.Packaging;\nusing DocumentFormat.OpenXml.Wordprocessing;\nusing System;\nusing System.Linq;\nnamespace ConsoleApp1\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            using (var doc = WordprocessingDocument.Open(@\"d:\\AustinWise\\Documents\\Turtles.docx\", false))\n            {\n                foreach (var el in doc.MainDocumentPart.Document.Body.Elements().OfType())\n                {\n                    Console.WriteLine(el.InnerText);\n                }\n            }\n        }\n    }\n}\n```\nThe API is not simple, so it might take a while to figure out how to get what you are looking for,. ",
    "jolson88": "This is the case for me on Ubuntu as well :(. \n. ",
    "gregkalapos": "This is already addressed in:\nhttps://github.com/dotnet/cli/issues/3705\nand something was even merged from here:\nhttps://github.com/Microsoft/visualfsharp/pull/1290\nI guess the platform is not relevant, since the dependencies are wrong. \nThis bug also prevents me to work with F# on RTM... \n. Great idea, but unfortunately it can potentially break our product, so I\u2019d like to describe our scenario:\nMy team works on an APM product which is basically a Profiler with IL Rewriting. We use the profiler API to inject our code with AssemblytRefs and TypeRefs to existing types into the customers application. Now these references can be trimmed, which leads to crashes.\nUntil this point our approach for .NET Core was that we only used references to Types that are part of Netstandard. We thought with that we are on the safe side, now it turns out this is not the case.\nI looked at this  and I understand that we can exclude dlls from trimming, but we do our injection runtime, so our customers with this approach have to recompile their applications and we have to extra maintain the list of Types we use. This is extremely hard in our case -I\u2019d say this is not feasible at all. (I can go into more details, but I guess you can imagine the situation\u2026e.g.: what if we update our stuff, etc. ). \nDid you consider this scenario? The problem itself is similar to the problem with reflection I guess. Our goal would be that we don\u2019t have to say that \u201cthis is an unsupported scenario\u201d. Furthermore, crashes caused by this are I think very problematic and we should figure out a solution to at least prevent TypeLoad-crashes caused by this. \nMaybe one option that comes to my mind:\nWould it be an option to implement a flag within the Linker that ensures that e.g. Netstandard types won't be removed? That way we can at least have a fix set of APIs that we can use and customers then compile the application with this single flag. Of course, we also should somehow handle scenarios where the application is not built with this flag.\nThanks!\ncc @richlander @terrajobst @karelz \n. @Petermarcu thanks for the feedback. That's good news. Of course the question is: does mono linker make sense with that setup? I mean, if with that setup the application only gets a few percent smaller, then the idea isn't so good. Anyway, this was just my first suggestion... Maybe somone comes up with another solution. \nAnd please don't forget the other part: it would still be nice if a profiler could somehow figure out that important dlls (Like System.Runtime, System.Threading.*, System.Collections)  were trimmed, so we can prevent crashes. . ",
    "ForNeVeR": "@blackdwarf try to create new project. The bug I think was fixed yesterday; I was able to compile and run F# project generated by dotnet new -l F# (because new packages were published).\n. ",
    "sivabudh": "@ForNeVeR thanks for updating us. It works now. Closing the ticket. =)\n. @ForNeVeR thanks for updating us. It works now. Closing the ticket. =)\n. ",
    "rubberduck203": "Does anyone know how to solve this. Downloaded dotnet core on my mac today, 6 months later and am having the same issue.. So, this completely burnt me this week, and I ended up referring to the Dockerfiles as well. What makes this really bad is that you might not even get an indication of what's wrong if you have libicu and libunwind installed, but not some of the other dependencies. \nI ended up blindly installing all of the dependencies in the docker, but it would be nice to know exactly which dependencies I need to tell my users to install as pre-reqs to running my self-contained app.. ",
    "fogzot": "I think the segfault is related to the kernel version: \"dotnet new\" (when populating the initial cache) and \"dotnet restore\" segfault on Debian 8.2 if running on newer kernels (tested with 4.5 and 4.6) but work with the original 3.16.\n. ",
    "mcepl": "\nMissing separate debuginfos, use: dnf debuginfo-install glibc-2.22-17.fc23.x86_64 keyutils-libs-1.5.9-7.fc23.x86_64 krb5-libs-1.14.1-6.fc23.x86_64 libcom_err-1.42.13-3.fc23.x86_64 libgcc-5.3.1-6.fc23.x86_64 libicu-54.1-5.fc23.x86_64 libselinux-2.4-4.fc23.x86_64 libstdc++-5.3.1-6.fc23.x86_64 libunwind-1.1-10.fc23.x86_64 libuuid-2.28-2.fc23.x86_64 openssl-libs-1.0.2h-1.fc23.x86_64 pcre-8.39-1.fc23.x86_64 zlib-1.2.8-9.fc23.x86_64\n\nPlease, do it, and then regenerate the backtrace.\n. ",
    "alberts": "```\n(gdb) run new\nStarting program: /usr/local/bin/dotnet new\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\nMissing separate debuginfo for /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/libcoreclr.so\nTry: dnf --enablerepo='debug' install /usr/lib/debug/.build-id/16/3bd3eeeeb180eecb014677bc672669ee9a20da.debug\n[New Thread 0x7ffff5608700 (LWP 20219)]\n[New Thread 0x7ffff4e07700 (LWP 20220)]\n[New Thread 0x7ffff4606700 (LWP 20221)]\n[New Thread 0x7ffff3a8c700 (LWP 20222)]\nMissing separate debuginfo for /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/libclrjit.so\nTry: dnf --enablerepo='debug' install /usr/lib/debug/.build-id/85/de6b8a1ae0f913e8389f43cbd2819b848b3344.debug\nMissing separate debuginfo for /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/System.Globalization.Native.so\nTry: dnf --enablerepo='debug' install /usr/lib/debug/.build-id/1f/f0451ea975d7a44b8f10850387f8080785cc7c.debug\nMissing separate debuginfo for /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/System.Native.so\nTry: dnf --enablerepo='debug' install /usr/lib/debug/.build-id/9f/535023d2e8ffa291aaa2b58c200379308e1fb2.debug\nMissing separate debuginfo for /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/System.Security.Cryptography.Native.so\nTry: dnf --enablerepo='debug' install /usr/lib/debug/.build-id/b9/e058776cccc851fb07cc3f0c6d32d9331bd238.debug\nWelcome to .NET Core!\nLearn more about .NET Core @ https://aka.ms/dotnet-docs. Use dotnet --help to see available commands or go to https://aka.ms/dotnet-cli-docs.\nTelemetry\n\nThe .NET Core tools collect usage data in order to improve your experience. The data is anonymous and does not include commandline arguments. The data is collected by Microsoft and shared with the community.\nYou can opt out of telemetry by setting a DOTNET_CLI_TELEMETRY_OPTOUT environment variable to 1 using your favorite shell.\nYou can read more about .NET Core tools telemetry @ https://aka.ms/dotnet-cli-telemetry.\nConfiguring...\n\nA command is running to initially populate your local package cache, to improve restore speed and enable offline access. This command will take up to a minute to complete and will only happen once.\nDecompressing 100% 2771 ms\nMissing separate debuginfo for /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/System.IO.Compression.Native.so\nTry: dnf --enablerepo='debug' install /usr/lib/debug/.build-id/d7/502e67f0a8ea06ae8d048e98caf8dbad690830.debug\n[New Thread 0x7fffee6b6700 (LWP 20223)]\n[New Thread 0x7fff57ffd700 (LWP 20224)]\n[New Thread 0x7fff577fc700 (LWP 20225)]\n[New Thread 0x7fff56ffb700 (LWP 20226)]\n[New Thread 0x7fff567fa700 (LWP 20227)]\n[New Thread 0x7fff55ff9700 (LWP 20228)]\n[New Thread 0x7fff557f8700 (LWP 20229)]\n[New Thread 0x7fff54ff7700 (LWP 20230)]\n[New Thread 0x7fff37fff700 (LWP 20231)]\n[New Thread 0x7fff377fe700 (LWP 20232)]\nExpanding 0%\nProgram received signal SIG34, Real-time event 34.\n[Switching to Thread 0x7fff54ff7700 (LWP 20230)]\npthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\n185 62: movl    (%rsp), %edi\n(gdb) bt\n0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\n1  0x00007ffff63479b2 in CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int*) ()\nfrom /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/libcoreclr.so\n2  0x00007ffff63475e3 in CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int*) ()\nfrom /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/libcoreclr.so\n3  0x00007ffff634c52e in CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread, unsigned int, void const*, int, unsigned int, int) () from /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/libcoreclr.so\n4  0x00007ffff634c742 in WaitForSingleObjectEx () from /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/libcoreclr.so\n5  0x00007ffff609ef32 in CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) () from /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/libcoreclr.so\n6  0x00007ffff60a3603 in Thread::RareDisablePreemptiveGC() () from /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/libcoreclr.so\n7  0x00007ffff6041027 in JIT_RareDisableHelperWorker () from /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/libcoreclr.so\n8  0x00007ffff60d3f22 in JIT_RareDisableHelper () from /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/libcoreclr.so\n9  0x00007fff7cdaf17f in ?? ()\n10 0x00007fff54ff6170 in ?? ()\n11 0x00000000080cf062 in ?? ()\n12 0x0000000000eed503 in ?? ()\n13 0x00007ffff67b3a68 in vtable for InlinedCallFrame () from /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/libcoreclr.so\n14 0x00007fff54ff6c60 in ?? ()\n15 0x00007fff7ce5abf8 in ?? ()\n16 0x00007fff7ce5abf8 in ?? ()\n17 0x00007fff54ff6170 in ?? ()\n18 0x00007fff7cdaf15c in ?? ()\n19 0x00007fff54ff6210 in ?? ()\n20 0x00007fff7ce5abf8 in ?? ()\n21 0x00007fff58561b98 in ?? ()\n22 0x00007fff44001780 in ?? ()\n23 0x48d4062349ed67ff in ?? ()\n24 0x00007fff00000001 in ?? ()\n25 0x00007fff58561b18 in ?? ()\n26 0x0000000000001000 in ?? ()\n27 0x0000000000000000 in ?? ()\n```\n. ",
    "PAStheLoD": "Hello!\nThis seems to be the same null pointer reference I got. (I ran dotnet new a few times and managed to get a .NET stacktrace.)\nUbuntu xenial, kernel:  4.7.0-999-generic #201606292202 SMP Thu Jun 30 02:04:20 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\ndotnet --version: 1.0.0-preview2-003121\nExpanding 17%\nUnhandled Exception: System.AggregateException: One or more errors occurred. (One or more errors occurred. (Object reference not set to an instance of an object.)) (One or more errors occurred. (Object reference not set to an instance of an object.)) (Object reference not set to an instance of an object.) (Object reference not set to an instance of an object.) ---> System.NullReferenceException: Object reference not set to an instance of an object.\n   at Interop.Sys.Read(SafeFileHandle fd, Byte* buffer, Int32 count)\n   at System.IO.UnixFileStream.ReadNative(Byte[] array, Int32 offset, Int32 count)\n   at System.IO.UnixFileStream.ReadCore(Byte[] array, Int32 offset, Int32 count)\n   at System.IO.UnixFileStream.Read(Byte[] array, Int32 offset, Int32 count)\n   at System.IO.FileStream.Read(Byte[] buffer, Int32 offset, Int32 count)\n   at System.IO.Compression.SubReadStream.Read(Byte[] buffer, Int32 offset, Int32 count)\n   at System.IO.Compression.DeflateStream.Read(Byte[] array, Int32 offset, Int32 count)\n   at System.IO.Stream.CopyTo(Stream destination, Int32 bufferSize)\n   at Microsoft.DotNet.Archive.IndexedArchive.ExtractSource.CopyToStream(Stream destinationStream)\n   at Microsoft.DotNet.Archive.IndexedArchive.ZipOperation.Execute()\n   at Microsoft.DotNet.Archive.IndexedArchive.ExtractOperation.DoOperation()\n   at Microsoft.DotNet.Archive.IndexedArchive.<>c__DisplayClass19_1.<Extract>b__0(ExtractOperation extractOperation)\n   at System.Linq.Parallel.ForAllOperator`1.ForAllEnumerator`1.MoveNext(TInput& currentElement, Int32& currentKey)\n   at System.Linq.Parallel.ForAllSpoolingTask`2.SpoolingWork()\n   at System.Linq.Parallel.SpoolingTaskBase.Work()\n   at System.Linq.Parallel.QueryTask.BaseWork(Object unused)\n   at System.Linq.Parallel.QueryTask.RunTaskSynchronously(Object o)\n   at System.Threading.Tasks.Task.Execute()\n   --- End of inner exception stack trace ---\n   at System.Linq.Parallel.QueryTaskGroupState.QueryEnd(Boolean userInitiatedDispose)\n   at System.Linq.Parallel.MergeExecutor`1.Execute()\n   at System.Linq.Parallel.MergeExecutor`1.Execute[TKey](PartitionedStream`2 partitions, Boolean ignoreOutput, ParallelMergeOptions options, TaskScheduler taskScheduler, Boolean isOrdered, CancellationState cancellationState, Int32 queryId)\n   at System.Linq.Parallel.PartitionedStreamMerger`1.Receive[TKey](PartitionedStream`2 partitionedStream)\n   at System.Linq.Parallel.ForAllOperator`1.WrapPartitionedStream[TKey](PartitionedStream`2 inputStream, IPartitionedStreamRecipient`1 recipient, Boolean preferStriping, QuerySettings settings)\n   at System.Linq.Parallel.UnaryQueryOperator`2.UnaryQueryOperatorResults.ChildResultsRecipient.Receive[TKey](PartitionedStream`2 inputStream)\n   at System.Linq.Parallel.ListQueryResults`1.GivePartitionedStream(IPartitionedStreamRecipient`1 recipient)\n   at System.Linq.Parallel.UnaryQueryOperator`2.UnaryQueryOperatorResults.GivePartitionedStream(IPartitionedStreamRecipient`1 recipient)\n   at System.Linq.Parallel.QueryOperator`1.GetOpenedEnumerator(Nullable`1 mergeOptions, Boolean suppressOrder, Boolean forEffect, QuerySettings querySettings)\n   at System.Linq.Parallel.ForAllOperator`1.RunSynchronously()\n   at System.Linq.ParallelEnumerable.ForAll[TSource](ParallelQuery`1 source, Action`1 action)\n   at Microsoft.DotNet.Archive.IndexedArchive.Extract(String compressedArchivePath, String outputDirectory, IProgress`1 progress)\n   at Microsoft.DotNet.Configurer.NuGetPackagesArchiver.ExtractArchive()\n   at Microsoft.DotNet.Configurer.NuGetCachePrimer.PrimeCache()\n   at Microsoft.DotNet.Configurer.DotnetFirstTimeUseConfigurer.Configure()\n   at Microsoft.DotNet.Cli.Program.ConfigureDotNetForFirstTimeUse(INuGetCacheSentinel nugetCacheSentinel)\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\nEnd of a strace trace (maybe you're interested):\n....\n20994 futex(0x1e80888, FUTEX_WAKE_PRIVATE, 1 <unfinished ...>\n20999 read(86,  <unfinished ...>\n20996 read(85,  <unfinished ...>\n20999 <... read resumed> \"PK\\3\\4\\24\\0\\0\\0\\10\\0\\326\\210\\363H\\361\\3153\\326\\25q\\6\\0Qd>\\0000\\0\\0\\0li\"..., 4096) = 4096\n20996 <... read resumed> \"\\253\\1\\271p\\245i$\\17=R]nK\\253\\313m8Q`\\372\\324\\32OB\\263\\377\\243\\304j\\222\\231\\235\"..., 8192) = 8192\n20999 fstat(86,  <unfinished ...>\n20995 stat(\"/home/pas/.nuget/packages/System.Reflection.Emit.ILGeneration/4.0.1\",  <unfinished ...>\n20999 <... fstat resumed> {st_mode=S_IFREG|0764, st_size=6850814, ...}) = 0\n20995 <... stat resumed> 0x7f9f8dff9110) = -1 ENOENT (No such file or directory)\n20999 lseek(86, -4070, SEEK_CUR <unfinished ...>\n20995 lstat(\"/home/pas/.nuget/packages/System.Reflection.Emit.ILGeneration/4.0.1\",  <unfinished ...>\n20999 <... lseek resumed> )             = 1859698\n20995 <... lstat resumed> 0x7f9f8dff9128) = -1 ENOENT (No such file or directory)\n20999 read(86,  <unfinished ...>\n20994 <... futex resumed> )             = 0\n20999 <... read resumed> \"0\\0\\0\\0lib/net45/Microsoft.CodeAnal\"..., 4096) = 4096\n20995 stat(\"/home/pas/.nuget/packages/System.Reflection.Emit.ILGeneration\",  <unfinished ...>\n20999 fstat(86, {st_mode=S_IFREG|0764, st_size=6850814, ...}) = 0\n20999 lseek(86, -4044, SEEK_CUR)        = 1859750\n20999 fstat(86, {st_mode=S_IFREG|0764, st_size=6850814, ...}) = 0\n20999 gettid()                          = 20999\n20999 mprotect(0x7f9fa0c4a000, 4096, PROT_READ|PROT_WRITE) = 0\n20999 mprotect(0x7f9fa0c4a000, 4096, PROT_NONE <unfinished ...>\n20996 futex(0x7f9ef0002f64, FUTEX_WAIT_PRIVATE, 25, NULL <unfinished ...>\n20999 <... mprotect resumed> )          = 0\n20999 tgkill(20984, 20994, SIGRT_2)     = 0\n20995 <... stat resumed> 0x7f9f8dff9120) = -1 ENOENT (No such file or directory)\n20994 --- SIGRT_2 {si_signo=SIGRT_2, si_code=SI_TKILL, si_pid=20984, si_uid=1000} ---\n20999 futex(0x7f9eec0201c4, FUTEX_WAIT_BITSET_PRIVATE|FUTEX_CLOCK_REALTIME, 7, {1468940810, 621770178}, ffffffff <unfinished ...>\n20995 futex(0x1e82bc4, FUTEX_WAIT_PRIVATE, 273, NULL <unfinished ...>\n20994 rt_sigreturn({mask=[]})           = -4051246653667626240\n20994 --- SIGSEGV {si_signo=SIGSEGV, si_code=SI_KERNEL, si_addr=0} ---\n20994 rt_sigprocmask(SIG_UNBLOCK, [SEGV], NULL, 8) = 0\n20994 gettid()                          = 20994\n20994 gettid()                          = 20994\n20994 gettid()                          = 20994\n20994 rt_sigprocmask(SIG_UNBLOCK, [SEGV], NULL, 8) = 0\n20994 rt_sigaction(SIGSEGV, {SIG_DFL, [], SA_RESTORER, 0x7f9fa1e3f3d0}, NULL, 8) = 0\n20994 unlink(\"/tmp/clr-debug-pipe-20984-165514231-in\") = 0\n20994 unlink(\"/tmp/clr-debug-pipe-20984-165514231-out\") = 0\n20994 rt_sigreturn({mask=[]})           = -4051246653667626240\n20994 --- SIGSEGV {si_signo=SIGSEGV, si_code=SI_KERNEL, si_addr=0} ---\n20999 +++ killed by SIGSEGV +++\n20998 +++ killed by SIGSEGV +++\n20994 +++ killed by SIGSEGV +++\n20995 +++ killed by SIGSEGV +++\n20992 +++ killed by SIGSEGV +++\n20991 +++ killed by SIGSEGV +++\n20990 +++ killed by SIGSEGV +++\n20989 +++ killed by SIGSEGV +++\n20988 +++ killed by SIGSEGV +++\n20987 +++ killed by SIGSEGV +++\n20986 +++ killed by SIGSEGV +++\n20985 +++ killed by SIGSEGV +++\n20996 +++ killed by SIGSEGV +++\n20984 +++ killed by SIGSEGV +++\nSadly GDB gives no interesting hints. (I cannot find dbg packages for Ubuntu.)\n. Thanks for the blazing fast response!\nUsing COMPlus_INTERNAL_ThreadSuspendInjection=0 dotnet new works as expected.\n. ",
    "ina-cali": "@PAStheLoD Thanks man, you saved my night!!!\n. ",
    "onecentlin": "Yes, I did have openssl installed.\nIt was working in 1.0.0.preview1-002702.\n``` bash\n[~] $ openssl version\nOpenSSL 0.9.8zh 14 Jan 2016\n[~] $ which openssl\n/usr/bin/openssl\n```\n. Yes, I did have openssl installed.\nIt was working in 1.0.0.preview1-002702.\n``` bash\n[~] $ openssl version\nOpenSSL 0.9.8zh 14 Jan 2016\n[~] $ which openssl\n/usr/bin/openssl\n```\n. @bartonjs  Thank you. This works!!\nI did link openssl before while developing with RC2.\nAfter executing the command, now it works perfectly.\n$ brew link --force openssl\nLinking /usr/local/Cellar/openssl/1.0.2h_1... 1601 symlinks created\n. @bartonjs  Thank you. This works!!\nI did link openssl before while developing with RC2.\nAfter executing the command, now it works perfectly.\n$ brew link --force openssl\nLinking /usr/local/Cellar/openssl/1.0.2h_1... 1601 symlinks created\n. @ascarter This is my openssl version and path.\n```\n$ openssl version\nOpenSSL 1.0.2h  3 May 2016\n$ which openssl\n/usr/local/bin/openssl\n```\n. @ascarter This is my openssl version and path.\n```\n$ openssl version\nOpenSSL 1.0.2h  3 May 2016\n$ which openssl\n/usr/local/bin/openssl\n```\n. ",
    "gguimaraesbr": "+1\n\n. Thanks @bartonjs Symlinking the library did the trick.\n. @svick Should I close this one?\n. Closing because there is another issue regarding this theme: https://github.com/dotnet/cli/issues/3093\n. ",
    "ascarter": "@onecentlin can you run which openssl? I followed the instructions for brew link but it still is using 0.9.8 (system openssl) for me. Curious to see what path yours has since it works.\n. @bartonjs Thanks - I think you are exactly right. I install homebrew in /opt/homebrew to keep it isolated and I think that's precisely why I don't see the paths the same. I can make it work out.\n. ",
    "mikeho": "Is there a particular reason why brew's version of OpenSSL is recommended (or required)?\nI  am using MacPorts for all of my package management, and I can confirm that I am using the latest version of OpenSSL:\n$ which openssl\n/opt/local/bin/openssl\n$ openssl version\nOpenSSL 1.0.2h  3 May 2016\nThe opt-releated paths are set up correctly in my PATH settings and show up first (which is the default approach for MacPorts).\nYet I'm getting the same error that others are reporting:\nUnhandled Exception: System.TypeInitializationException: The type initializer for 'Crypto' threw an exception. ---> System.TypeInitializationException: The type initializer for 'CryptoInitializer' threw an exception...\nIs the dotnet command line not able to utilize the PATH setting to locate the openssl files to use?\nEDIT: I have also symlinked the macports version of libcrypto and libssl into /usr/local/lib, but I'm still getting the same error/issue.\n. @bartonjs looks like our messages got crossed over the wire.\nI actually did go ahead and symlink the macports version of libcrypto.1.0.0.dylib and libssl.1.0.0.dylib into /usr/local/lib, but I'm still getting the same error/issue.\n. @bartonjs never mind.  I had actually used a non-version named file (libssl.dylib and libcrypto.dylib instead of libssl.1.0.0.dylib and libcrypto.1.0.0.dylib).\nAdding the version numbers in the names fixed it.\nThanks for your help!\n. ",
    "joshka": "The stackoverflow / earlier version of openssl approach will cease working once you update brew (see https://github.com/Homebrew/brew/pull/612).\nThe following workaround worked for me on a hello world project:\nconsole\nexport DYLD_LIBRARY_PATH=/usr/local/opt/openssl/lib\ndotnet new\nSee https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/DynamicLibraryUsageGuidelines.html#//apple_ref/doc/uid/TP40001928-SW21 for info on how the library search process works on OS X.\n. @KushalP  - the brew link approach is deprecated as you've no doubt noticed.\nYes, dotnet does not use $PATH, but this is expected as the dynamic loader never uses $PATH to find libraries (see man dyld). Your fix is correct for your environment :)\n. ",
    "KushalP": "I just had this issue, despite having openssl installed and having run brew link --force openssl. I use boxen to manage my environment and it places the homebrew directory in a different location.\nMy environment\n```\n\u1405 dotnet --info\n.NET Command Line Tools (1.0.0-preview2-003121)\nProduct Information:\n Version:            1.0.0-preview2-003121\n Commit SHA-1 hash:  1e9d529bc5\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  10.11\n OS Platform: Darwin\n RID:         osx.10.11-x64\n```\nWhat I did to fix this error\nI ran the following:\nln -s /opt/boxen/homebrew/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/\nln -s /opt/boxen/homebrew/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/\nCould this be related to the dotnet tool not using the $PATH to pick up these libraries?\n. ",
    "lw-schick": "you miss Console.WriteLine(output) - or?\n. you miss Console.WriteLine(output) - or?\n. ",
    "hickford": "See also https://github.com/NuGet/NuGetGallery/issues/3098\n. ",
    "rogersachan": "lack of interest = closed issue\n. Possibly related to: https://github.com/dotnet/announcements/issues/26. ",
    "Thorium": "Is the plugin open source? Shouldn't be so hard to add the Visual Studio file order to come from buildOptions instead of alphabetical order?\n. Thanks for the link, however Visual studio help works only on C# project, not helping me with the existing F# code.\n. This is not solved. Apiport tool is not working microsoft/dotnet-apiport#304 so I'm trying to use the https://packagesearch.azurewebsites.net but: It doesn't found anything. Not even FSharp.Core package which clearly supports .NET Core.\n. Is the https://packagesearch.azurewebsites.net source code open?\nOr do you know if it has any kind of issue reporting site on somewhere?\nI can't find the official package either:\nhttps://packagesearch.azurewebsites.net/?q=Microsoft.FSharp.Core.netcore\n. ",
    "schellap": "@jonstoneman, would you be able to share the entry for this \"MyLibrary\" in your deps.json file in your app base?\nI'm suspecting an instance of https://github.com/dotnet/core-setup/issues/194\n. Sorry, I would need the \"type\" in the \"libraries\" section for this library.\n. @SeanSnyders, Could you also mention the version of the SDK and the runtime (Microsoft.NETCore.App) you are using?\ndotnet.exe appname.dll (shared FX app) and appname.exe (standalone app) find the DLLs referenced in the appname.deps.json files. Do you have your library in the appname.deps.json?. @piotrpMSFT, @blackdwarf, @livarcocc, can you help @SeanSnyders understand how native libraries are referenced in the project file? (i.e., as project to project dependency instead of making nupkgs for them). ",
    "ajaybhargavb": "If the dll need to be copied to the output directory, then it needs to be included in copyToOutput in buildOptions.\nJSON\n\"buildOptions\":{\n        \"copyToOutput\":{\n            \"runtimes/win7-x64/native/\":\"native-lib.dll\"\n        }\n    }\n. ",
    "jonstoneman": "@schellap:  MyApp.deps.json contains:\n{\n  \"runtimeTarget\": {\n    \"name\": \".NETCoreApp,Version=v1.0\",\n    \"signature\": \"da39a3ee5e6b4b0d3255bfef95601890afd80709\"\n  },\n  \"compilationOptions\": {},\n  \"targets\": {\n    \".NETCoreApp,Version=v1.0\": {\n      \"MyApp/1.0.0\": {\n        \"dependencies\": {\n          \"MyLibrary\": \"1.0.0\"\n        },\n        \"runtime\": {\n          \"MyApp.dll\": {}\n        }\n      },\n      \"MyLibrary/1.0.0\": {\n        \"runtime\": {\n          \"MyLibrary.dll\": {}\n        }\n      }\n    }\n  },\n  \"libraries\": {\n    \"MyApp/1.0.0\": {\n      \"type\": \"project\",\n      \"serviceable\": false,\n      \"sha512\": \"\"\n    },\n    \"MyLibrary/1.0.0\": {\n      \"type\": \"project\",\n      \"serviceable\": false,\n      \"sha512\": \"\"\n    }\n  }\n}\n. @brthor: I can't use dotnet publish with a library\n. @ajaybhargavb: copyToOutput resulted in the dylib being copied into the output directory of the library project but I still get the DllNotFoundException when calling the test method from the app.\n. I've put example code here: https://github.com/jonstoneman/nativelibrepro\nThe master branch has the dylib in the MyApp project and works.\nThe feature/packaged_lib branch demonstrates the problem.\n. Thanks @brthor - that does work!  I had previously tried that but using a NuGet.config file instead of dotnet restore -f.  The NuGet.config seemed to be working (MyLibrary appeared in ~/.nuget/packages) so I guess I must have had something else different without realising.\nIs there any way of getting this working with project references?  I found this aspnet/dnx sample but I don't know if it worked.  dotnet restore certainly complains about dependencies without version numbers.\nWithout project references working then presumably I'll need to do this each time I make a change to my library project:\n- rm -rf ~/.nuget/packages/MyLibrary\n- dotnet pack ../src/MyLibrary\n- dotnet restore -f ../src/MyLibrary/bin/Debug\n. @blackdwarf The workaround works but is no faster than what I was already doing and actually less convenient.  I still need to call dotnet restore -f ../src/MyLibrary/bin/Debug but I also need to increment the --version-suffix.  With my method I can just rerun the same commands (which I have all on one line so can just up arrow and enter).\nIn any case, using package references is still a pretty bad experience compared to project references.  I'd suggest keeping this issue open until project references work but won't object if you feel that https://github.com/dotnet/cli/issues/2902 really covers it and want to close this one.\n. ",
    "SeanSnyders": "I'm also struggling getting to specify and use a native library with my .Net Core project.\nIn my traditional Net461 VS solution, the native lib is compiled and project-referenced as a dependency.\nI've tried all recommendations here (except making a NuGet package of it) and nothing seems to work as one would expect.\nI literally just want to specify the .dll file as a dependency and have the Core app find and load it appropriately. Even copying the specific native dll into all folders in my output path (incl the folder where the .exe is build to), I still get that the dll fails to be found.\nIs there some new magic in .Net Core runtime to how it is finding assemblies? I've fiddled with the additionalProbingPaths setting in *.runtimeconfig.json as well to no joy.\nWhere is the de facto reference doc on is stuff?\nIs making a NuGet package of my native dll the only way it can work? Seems a bit overkill..... @schellap It is netcoreapp1.1 and I'm targeting runtime win10-x64.\nI ended up making a NuGet package of my native lib and added a local folder as a NuGet source where this package is deployed.\nI can see my dependency in appname.deps.json:\n\nBut I still get a DllNotFoundException:\n\n. On the topic of referenced native libraries, how is the c++ runtime referenced? Does the dotnet app run in a sandbox (implicating it should be specced as a dependency) or does an installed runtime redist get picked up? Or both?. @schellap I found the problem. It was in the end my own error as I was pulling in an incorrect dll into my NuGet package as a dependency of my top-level native dll. I monitored my running app with SysInternal's  Process Monitor (procmon.exe) and found the loading was working for the one dll but not for the other.\nI would still like to know what is the recommended procedure for specifying vc runtime dependencies in .Net Core projects. Can we make a SCD that includes the runtimes as well. What of other platforms like linux, osx, etc....?. I am also interested in an answer on this topic.. ",
    "czifro": "@blackdwarf I am experiencing this exception as well. I can only assume that I am doing something wrong. I outlined all details in this StackOverflow post: http://stackoverflow.com/questions/41432671/unable-to-load-dll-dotnet-core . Any help would greatly be appreciated.. ",
    "ubbeK": "Issue fixed in https://github.com/aspnet/Tooling/issues/699 if anyone is interested.. ",
    "plioi": "Thanks, @akoeplinger. This approach worked. To ensure the project works well for people who clone from scratch, I also included a nuget.config in the root of the project which defines the relative path to the local package source:\nxml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear />\n    <add key=\"api.nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n    <add key=\"local\" value=\"lib\" />\n  </packageSources>\n</configuration>\nI believe this issue can be closed now.\n. @lipeng1991 The XML that I posted above? \"nuget.config in the root of the project\"\n. @lipeng1991 Take a look here: https://github.com/fixie/fixie/tree/df2b201a178a6da736699ffa6757548ceebfa0d1\nThe nuget.config file is here, and there is also a folder called \"lib\" (short for \"libraries\"), where I put nuget packages. \"local\" is just a name for that line in the XML and I could have chosen a different name.\n. @lipeng1991 If your project doesn't have a project.json file, then this whole issue is irrelevant to you. I suggest posting a very specific question about what you're actually trying to accomplish at stackoverflow.com\n. ",
    "CoreyKaylor": "In this scenario would dotnet pack create a nuget dependency for something only available on your local filesystem feed?\n. @blackdwarf I'm aware of how dotnet pack works, but thanks. I was more trying to call out that the original statement of \"is not available as a nuget package\" and this workaround now creates a new problem that also needs to be worked around by managing your own nuspec when the tooling should handle all of those details for you. I'm glad it works for his needs though. \n. ",
    "lipeng1991": "@plioi\nIs it added in the web.config or other files\uff1fthanks\n. @plioi yeah\uff0ci have seen it ,but I want to  konw 'local' and 'lib' represents what.thanks\n. @plioi yeah thanks for your answer,if i have added this config,what should i do next?\n. @plioi  but this project does't have a project.json file\n. ",
    "lilpug": "i don't quite understand how this has been closed off, this issue still persists 2 months later and there is no ETA on the fix for this nor a mention that i can find, having to support local feeds and create nuget specifications to just add a .net dll library which could be a private library seems daft. There are so many issues opened across all dotnet core git repositories for this one issue, would it not be wise to look at addressing it or at least explain why the issue persists at the moment rather than sitting on it?\nhttp://forums.asp.net/t/2100395.aspx?Can+t+Add+Net+4+6+Reference\nhttps://github.com/aspnet/Mvc/issues/4682\nhttps://github.com/aspnet/Home/issues/1612\nhttps://github.com/aspnet/Tooling/issues/565\nhttps://github.com/aspnet/Tooling/issues/700#issuecomment-236490237\n. thanks for testing this, that is rather interesting, as the steps that you have taken seem to be exactly what i have done on three different machines :-S, are you using 1.1?\nalso are you using visual studio and are you using .NET Core within the core apps or .NET Full framework? wondering if its a VS issue.\non all three machines we have both visual studio 2015 and 2017 but were using 2017 for this error replication.. that is definitely the same version as me and yes i have and unfortunately still get the issue, i even got my colleague to try on his version just in case as i did used to have development versions of .NET Core before it was released but i know he didn't and we still get the same issue :-S. i think mine might be a version behind yours actually:-\n\n. o thank you very much i will give it a go tomorrow morning and hopefully that will solve the issue im just glad its not a .Net Core issue haha, thanks for helping look into this :). unfortunately after updating my VS 2017 version that has not fixed the issue for me, i have even recreated the web and library projects from scratch again to test it and i still get the same error. \nI will ask my colleague to update his version today and see if it starts working for him as he did not use any previous development versions of .Net Core like me.\n\nUpdate:-\nunfortunately this still has not solved the issues for us, it would be nice to see if anyone else is having issue and if updating VS is still breaking it.\n. this does not seem to be an issue any longer in the future versions so i will close this down.. ",
    "jgauffin": "Reopen this. See the comment by @lilpug. This has a big impact on enterprise development, as many of us are not willing to generate nuget packages for internal DLLs.\nping @blackdwarf \n. ",
    "MeTitus": "This shows how bad MS guidance is nowadays when it comes to release new technologies... this .NET Core tooling is nothing but a whole mess.\n. ",
    "ct14it": "@mellinoe So basically you don't recommend going with the current solution of packaging up a DLL in a nuget package? The proper solution is/will be adding a reference to the DLL? I'm confused as to how this is different to the original way of doing things, which was to just add a reference to the DLL?\nAre you able to point me in the right direction for using MSBuild and specifically if possible referencing an external DLL with a core app? Any feedback would be greatly appreciated because I would love to use Core for proper projects.. ",
    "jmbeach": "@plioi I can't get VS 2015 to recognize the nuget.config. Should it? After adding it, VS does not have a \"local\" package source.. Nevermind. Got it to work, by referencing at the solution level. Nevermind. Got it to work, by referencing at the solution level. Okay, I still have a problem. I am trying to turn several dlls from this OPC project into a nuget package to use locally. I put the dlls in a lib folder:\nD:.\n\u2514\u2500\u2500\u2500lib\n    \u2514\u2500\u2500\u2500netstandard1.6\nI packaged the nuget package using this nuspec: \n```\n<?xml version=\"1.0\"?>\n\n\n The identifier that must be unique within the hosting gallery \nOpc.Core.Ua\n    <!-- The package version number that is used when resolving dependencies -->\n    <version>1</version>\n\n    <!-- Authors contain text that appears directly on the gallery -->\n    <authors>OPC Foundation</authors>\n\n    <!-- Owners are typically nuget.org identities that allow gallery\n             users to earily find other packages by the same owners.  -->\n    <owners>jmbeach</owners>\n\n    <!-- License and project URLs provide links for the gallery -->\n    <licenseUrl>https://opcfoundation.org/license/gpl.html</licenseUrl>\n    <projectUrl>https://github.com/OPCFoundation/UA-.NETStandardLibrary</projectUrl>\n\n    <!-- The icon is used in Visual Studio's package manager UI -->\n    <iconUrl>http://opcfoundation.github.io/UA-.NETStandardLibrary/images/OPCF_250px_72ppi_RGB.jpg</iconUrl>\n\n    <!-- If true, this value prompts the user to accept the license when\n             installing the package. -->\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\n\n    <!-- Any details about this particular release -->\n    <releaseNotes>init</releaseNotes>\n\n    <!-- The description can be used in package manager UI. Note that the\n             nuget.org gallery uses information you add in the portal. -->\n    <description>.NET Core implementation of OPC foundation UA tools</description>\n\n    <!-- Copyright information -->\n    <copyright>Copyright c2016 OPC Foundation Corporation</copyright>\n\n    <!-- Tags appear in the gallery and can be used for tag searches -->\n    <tags>opc ua net core</tags>\n\n    <!-- Dependencies are automatically installed when the package is installed -->\n    <references>\n        <reference file=\"Opc.Ua.Client.dll\"/>\n        <reference file=\"Opc.Ua.Configuration.dll\"/>\n        <reference file=\"Opc.Ua.Core.dll\"/>\n    </references>\n</metadata>\n\n\n```\nBut when I try to add it to my .NET core project in Visual Studio 2015, I get the following error:\nErrors in D:\\Code\\GitHub\\<my-project-path>\n    Unable to resolve 'Opc.Core.Ua (>= 1.0.0)' for '.NETStandard,Version=v1.6'.\nOpc.Core.Ua is what I named the package.\nI don't know if the dlls aren't built to NetStandard version v1.6, but they compile to a folder called 'netstandard1.3'. Any pointers would be much appreciated. . Okay, I still have a problem. I am trying to turn several dlls from this OPC project into a nuget package to use locally. I put the dlls in a lib folder:\nD:.\n\u2514\u2500\u2500\u2500lib\n    \u2514\u2500\u2500\u2500netstandard1.6\nI packaged the nuget package using this nuspec: \n```\n<?xml version=\"1.0\"?>\n\n\n The identifier that must be unique within the hosting gallery \nOpc.Core.Ua\n    <!-- The package version number that is used when resolving dependencies -->\n    <version>1</version>\n\n    <!-- Authors contain text that appears directly on the gallery -->\n    <authors>OPC Foundation</authors>\n\n    <!-- Owners are typically nuget.org identities that allow gallery\n             users to earily find other packages by the same owners.  -->\n    <owners>jmbeach</owners>\n\n    <!-- License and project URLs provide links for the gallery -->\n    <licenseUrl>https://opcfoundation.org/license/gpl.html</licenseUrl>\n    <projectUrl>https://github.com/OPCFoundation/UA-.NETStandardLibrary</projectUrl>\n\n    <!-- The icon is used in Visual Studio's package manager UI -->\n    <iconUrl>http://opcfoundation.github.io/UA-.NETStandardLibrary/images/OPCF_250px_72ppi_RGB.jpg</iconUrl>\n\n    <!-- If true, this value prompts the user to accept the license when\n             installing the package. -->\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\n\n    <!-- Any details about this particular release -->\n    <releaseNotes>init</releaseNotes>\n\n    <!-- The description can be used in package manager UI. Note that the\n             nuget.org gallery uses information you add in the portal. -->\n    <description>.NET Core implementation of OPC foundation UA tools</description>\n\n    <!-- Copyright information -->\n    <copyright>Copyright c2016 OPC Foundation Corporation</copyright>\n\n    <!-- Tags appear in the gallery and can be used for tag searches -->\n    <tags>opc ua net core</tags>\n\n    <!-- Dependencies are automatically installed when the package is installed -->\n    <references>\n        <reference file=\"Opc.Ua.Client.dll\"/>\n        <reference file=\"Opc.Ua.Configuration.dll\"/>\n        <reference file=\"Opc.Ua.Core.dll\"/>\n    </references>\n</metadata>\n\n\n```\nBut when I try to add it to my .NET core project in Visual Studio 2015, I get the following error:\nErrors in D:\\Code\\GitHub\\<my-project-path>\n    Unable to resolve 'Opc.Core.Ua (>= 1.0.0)' for '.NETStandard,Version=v1.6'.\nOpc.Core.Ua is what I named the package.\nI don't know if the dlls aren't built to NetStandard version v1.6, but they compile to a folder called 'netstandard1.3'. Any pointers would be much appreciated. . I'll try that.. I'll try that.. @Petermarcu This worked. I'm not sure if it's because I was targeting \".NET Core\" in VS 2015 and now I'm targeting \".NET Standard\" or what the difference between the two is (to be honest). \nThanks for the help.. @Petermarcu This worked. I'm not sure if it's because I was targeting \".NET Core\" in VS 2015 and now I'm targeting \".NET Standard\" or what the difference between the two is (to be honest). \nThanks for the help.. I ended up switching back to VS 2015 because VS 2017 was glitching out on me and saying \"opening file...\" forever when I tried to open my solution.\nI got it working, by creating a portable class library, converting it to .NET Standard by following this blog post's instructions and then installing my NuGet package.. I ended up switching back to VS 2015 because VS 2017 was glitching out on me and saying \"opening file...\" forever when I tried to open my solution.\nI got it working, by creating a portable class library, converting it to .NET Standard by following this blog post's instructions and then installing my NuGet package.. ",
    "pekunicki": "Guys, I've question, because I see that you probably have similar issue.\nI'm working on the .NET Core WEB API project, but it's builded on the .NET Framework.\nI've Unit Tests in different library in .NET Framework. Unfortunately I can't get refernces to .net core projekt in .net framework. Do you have some workaround ? ;). ",
    "WallaceKelly": "For the record, this issue is also discussed at https://github.com/dotnet/coreclr/issues/10037\nThe conclusion is the same as what @mellinoe suggested. Use <Reference Include=\"<path.dll>\"> . . @xplicit My conclusion was that the current toolset does not support referencing loose DLLs.. ",
    "xplicit": "@WallaceKelly how to use <Reference Include=\"<path.dll>\"> if it does not work? You showed the sample in https://github.com/dotnet/coreclr/issues/10037#issuecomment-289138830 which clearly describes this bug with <Reference Include=\"\">. How did you workaround this issue?\nIn previous version of .NET Core SDK (-3177) with project.json it was possible to reference dlls without creating nuget packages (by creating the wrapping project), but with moving to new csproj system it does not work anymore. How to use external dlls without creating nuget packages for them?. ",
    "JoshClose": "Yes! At least for the non-portable builds. Not sure about the portable ones, but it sounds like TFS needs to be updated for those.\n. What is the case with \"degutType\": \"portable\"? Will TFS support this soon?\n. ",
    "Applebit": "OK just comment HandleProcessCorruptedStateExceptions. You will be easily able to produce. \n. Ok glad that you helped me. \nThanks for confirmation.\n. ",
    "rdghickman": "Try using Resharper 2016.2 EAP 6, this fixed the issue for me.\n. ",
    "TheRealPiotrP": "This is a known UI issue. The installer should not be exposing this option. The installation path for the installers on Windows is fixed, like on other OSs.\n. Duplicate of https://github.com/dotnet/cli/issues/3568\n. This should go to the nuget repo. FWIW, in the CLI repo we use relative paths to specify local package feeds, but set the packages folder using the NUGET_PACKAGES environment variable. I'm curious to see how the NuGet.config option works.\n. I'd like to hear @rrelyea's input on this one. We're doing a bunch of work to make sure transitive dependencies work as they did in PJ, but this error message is coming from NuGet and we need to be sure the scenario is covered in the new client.\n. ",
    "fujihara": "Sure, thanks for tip.\n. ",
    "lyptt": "Ah cool, thanks for confirming!\n. ",
    "BogalooDev": "Hi, \nI had same the issue on Visual Studio 2015 with Update 3. Failed to create .NET Core projects. In my case I updated VS and after that installed .NET Core tooling. Check here:  https://lnkd.in/dqsHmcE\n. ",
    "Seany84": "When I added the XML node as described in the article:\n<dependentAssembly> \n    <assemblyIdentity name=\"Microsoft.VisualStudio.ProjectSystem.DotNet.Wizard\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\"/> \n    <codeBase version=\"14.0.0.0\" href=\"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\DotNet\\ProjectSystem\\Microsoft.VisualStudio.ProjectSystem.DotNet.Wizard.dll\"/>\n</dependentAssembly>\nIt allowed me to create the project and it populates the solution explorer with files, however Visual Studio hangs and I need to kill it via Task Manager.\nWhen I viewed the ActvityLog.xml it said that the DLL was missing:\n<entry>\n    <record>803</record>\n    <time>2016/07/04 20:01:23.515</time>\n    <type>Information</type>\n    <source>VisualStudio</source>\n    <description>Begin package load [Project K Project System]</description>\n    <guid>{98F77210-A364-4168-BAE6-4D46FA7E19FE}</guid>\n  </entry>\n  <entry>\n    <record>804</record>\n    <time>2016/07/04 20:01:23.515</time>\n    <type>Error</type>\n    <source>VisualStudio</source>\n    <description>CreateInstance failed for package [Project K Project System]Source: &apos;mscorlib&apos; Description: Could not load file or assembly &apos;file:///C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\Web Tools\\ProjectK\\Microsoft.VisualStudio.Web.ProjectSystem.dll&apos; or one of its dependencies. The system cannot find the file specified.&#x000D;&#x000A;System.IO.FileNotFoundException: Could not load file or assembly &apos;file:///C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\Web Tools\\ProjectK\\Microsoft.VisualStudio.Web.ProjectSystem.dll&apos; or one of its dependencies. The system cannot find the file specified.&#x000D;&#x000A;File name: &apos;file:///C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\Web Tools\\ProjectK\\Microsoft.VisualStudio.Web.ProjectSystem.dll&apos;&#x000D;&#x000A;   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)&#x000D;&#x000A;   at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)&#x000D;&#x000A;   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)&#x000D;&#x000A;   at System.Reflection.RuntimeAssembly.InternalLoadFrom(String assemblyFile, Evidence securityEvidence, Byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm, Boolean forIntrospection, Boolean suppressSecurityChecks, StackCrawlMark&amp; stackMark)&#x000D;&#x000A;   at System.Reflection.Assembly.LoadFrom(String assemblyFile, Evidence securityEvidence)&#x000D;&#x000A;   at System.Activator.CreateInstanceFromInternal(String assemblyFile, String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, Evidence securityInfo)&#x000D;&#x000A;   at System.AppDomain.CreateInstanceFrom(String assemblyFile, String typeName)&#x000D;&#x000A;&#x000D;&#x000A;WRN: Assembly binding logging is turned OFF.&#x000D;&#x000A;To enable assembly bind failure logging, set the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog] (DWORD) to 1.&#x000D;&#x000A;Note: There is some performance penalty associated with assembly bind failure logging.&#x000D;&#x000A;To turn this feature off, remove the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog].&#x000D;&#x000A;</description>\n    <guid>{98F77210-A364-4168-BAE6-4D46FA7E19FE}</guid>\n    <hr>80004005 - E_FAIL</hr>\n  </entry>\n</activity>\nThis is a list of the files in C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\Web Tools\\Project\n- Microsoft.Azure.ActiveDirectory.GraphClient.FirstParty.dll\n- Microsoft.Data.Edm.dll\n- Microsoft.Data.OData.dll\n- Microsoft.Data.Services.Client.dll\n- Microsoft.VisualStudio.Web.AzureAD.Contracts.dll\n- Microsoft.VisualStudio.Web.Project.dll\n- Microsoft.VisualStudio.Web.Project.pkgdef\n- Microsoft.VisualStudio.Web.ProjectCreation.Contracts.dll\n- System.Spatial.dll\nI have tried uninstalling and re-installing the DotNetCorev1.0.0VS2015ToolsPreview2.\nDoes anyone have any ideas how I can resolve this issue ?\n. @Petermarcu @barrytang @Pilchie Does anyone have any idea how I could attempt to fix this or is there anything I can provide you with?\n. @balachir I have tried this exact step several times and still have the exact same error when trying to create a new .NET core project.\nI have attached the ProcessMonitor output for the devenv.exe process while I ran the /setup command and also up to when I tried to create a new .NET core project (including the error dialog).\n[Logfile.zip](https://github.com/dotnet/core/files/360270/Logfile.zip) (The output is filtered where RESULT is not SUCCESS.)\n. ",
    "balachir": "@Seany84 we had other reports of similar issues -- see here  and here. This was due to an issue in Visual Studio 2015 Update 3 setup that sometimes caused stale entries in the devenv.exe.config file.\nCan you try the following workaround:\n1. Close Visual Studio \n2. Delete the C:\\Users\\AppData\\Local\\Microsoft\\VisualStudio\\14.0\\devenv.exe.config file.\n3. Run the Developer Command Prompt for VS2015 as the Administrator, and execute the devenv /setup command. \n. ",
    "amicalrahul": "I am also facing the same issue. I have installed VS2015 update 2.\nI tried to follow the above steps but strangely the below directory is empty\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\DotNet\nEven there is no dnx folder at below path\n*:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\Web Tools\\DNX *\nI've run RC1 installation successfully and even repaired it many time. But somehow there is nothing installed in the dotnet folder at C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\DotNet path\n@bernharde @olegburov or anyone - Can you please suggest something else to solve this problem.\nI even repaired \nVS2015 installation. \ndeleted dev.exe.config file\nran devenv /setup in vs2015 command prompt (as administrator)\nI guess the root problem is nothing is installed in dotnet folder in programfiles and no dnx folder is created.\nNeed help urgently.\n. I am also facing the same issue. I have installed VS2015 update 2.\nI tried to follow the above steps but strangely the below directory is empty\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\DotNet\nEven there is no dnx folder at below path\n*:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\Web Tools\\DNX *\nI've run RC1 installation successfully and even repaired it many time. But somehow there is nothing installed in the dotnet folder at C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\DotNet path\n@bernharde @olegburov or anyone - Can you please suggest something else to solve this problem.\nI even repaired \nVS2015 installation. \ndeleted dev.exe.config file\nran devenv /setup in vs2015 command prompt (as administrator)\nI guess the root problem is nothing is installed in dotnet folder in programfiles and no dnx folder is created.\nNeed help urgently.\n. ",
    "songqiang0521": "after adding CodePagesEncodingProvider as a dependency,everything is ok.\n. ",
    "JduChina": "No one answer this issue . So sad . Do you have some plan about this ?\nThanks\nJeff Du\n. No one answer this issue . So sad . Do you have some plan about this ?\nThanks\nJeff Du\n. ",
    "Gvo87": "maybe this will help\nhttp://tattoocoder.com/asp-net-core-getting-clean-with-soap/. ",
    "fansgit": "I did but below was too concise to grasp. Thanks anyway for your info.\n-c|--configuration <CONFIGURATION>  Configuration under which to build\n. FYI, the simliar style of parallel aggregation processing in Java 8 takes up all the CPU cores below,\njava\nLongStream.range(1, 10000000000L).parallel().reduce(0, (sum, n) -> sum + n - n);. Test results below,\n| Data Source  | Iterations of Aggregation | Order of Performance | Busy CPU Cores |\n| - | - | - | - |\n| Enumerable(C#) | 1E9 (#AsParallel) | some seconds | 1 |\n| Enumerable(C#) | 1E9 | some seconds | 1 |\n| ParallelEnumerable(C#) | 1E9 (#AsParallel) | some 10 seconds | 1 |\n| ParallelEnumerable(C#) | 1E9 | some 10 seconds | 1 |\n| LongStream(Java) | 1E10 (#parallel) | some seconds | all |\n. ",
    "AlyssaDaemon": "As I said in the beginning, yes, I did do brew link --force openssl before trying this. /usr/local/lib/libcrypto.1.0.0.dylib does exist on my system. \n$ ls /usr/local/lib/libcrypto.1.0.0.dylib\n/usr/local/lib/libcrypto.1.0.0.dylib\n. Sorry that I came off a bit cross, thank you for helping me. I have been thinking about reinstalling El Capitan anyway, so perhaps that might fix things. I checked my symlinks, and my environment variables and they seemingly checkout (well $DYLD_FALLBACK_LIBRARY_PATH was defined and had mono's libs defined, but even unsetting it didn't help). See you on the other side as it were.\n```\n$ ls -l /usr/local/lib/libssl.1.0.0.dylib\nlrwxr-xr-x  1 alyssadaemon staff  49 Jul  3 09:40 /usr/local/lib/libssl.1.0.0.dylib -> ../Cellar/openssl/1.0.2h_1/lib/libssl.1.0.0.dylib\n$ ls -l /usr/local/lib/libcrypto.1.0.0.dylib\nlrwxr-xr-x  1 alyssadaemon  staff  52 Jul  3 09:40 /usr/local/lib/libcrypto.1.0.0.dylib -> ../Cellar/openssl/1.0.2h_1/lib/libcrypto.1.0.0.dylib\n$ ls /usr/local/Cellar/openssl/1.0.2h_1/lib/\nengines               libcrypto.1.0.0.dylib libcrypto.a           libcrypto.dylib       libssl.1.0.0.dylib    libssl.a              libssl.dylib          pkgconfig\n$ echo $LD_LIBRARY_PATH\n$ echo $DYLD_LIBRARY_PATH\n$ echo $DYLD_FALLBACK_LIBRARY_PATH\n/Library/Frameworks/Mono.framework/Versions/Current/lib:/Users/alyssadaemon/lib:/usr/local/lib:/usr/lib\n$ unset DYLD_FALLBACK_LIBRARY_PATH; dotnet new\nUnhandled Exception: System.TypeInitializationException: The type initializer for 'Crypto' threw an exception. ---> System.TypeInitializationException: The type initializer for 'CryptoInitializer' threw an exception. ---> System.DllNotFoundException: Unable to load DLL 'System.Security.Cryptography.Native': The specified module could not be found.\n (Exception from HRESULT: 0x8007007E)\n   at Interop.CryptoInitializer.EnsureOpenSslInitialized()\n   at Interop.CryptoInitializer..cctor()\n   --- End of inner exception stack trace ---\n   at Interop.Crypto..cctor()\n   --- End of inner exception stack trace ---\n   at Interop.Crypto.GetRandomBytes(Byte buf, Int32 num)\n   at System.IO.Path.GetCryptoRandomBytes(Byte bytes, Int32 byteCount)\n   at System.IO.Path.GetRandomFileName()\n   at Microsoft.DotNet.InternalAbstractions.TemporaryDirectory..ctor()\n   at Microsoft.Extensions.EnvironmentAbstractions.DirectoryWrapper.CreateTemporaryDirectory()\n   at Microsoft.DotNet.Configurer.NuGetPackagesArchiver..ctor()\n   at Microsoft.DotNet.Cli.Program.ConfigureDotNetForFirstTimeUse(INuGetCacheSentinel nugetCacheSentinel)\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\n```\n. I am sorry, I forgot to report what happened. Indeed reinstalling OS X fixed the issue. Sorry to trouble you all.\n. ",
    "Tratcher": "Usually it's an environmental/config problem causing the application to crash on start. Check the events (in the portal?) and enable logs (stdoutLogEnabled=\"true\") in web.config. See https://github.com/aspnet/Docs/issues/1358\n. https://github.com/aspnet/aspnetcoremodule\n@shirhatti \nNote that forwardWindowsAuthToken's default value was changed to true so most apps no longer need it in the web.config.. I'll defer to @shirhatti and @BillHiebert.. Duplicate of https://github.com/aspnet/Home/issues/2950.. UriPartial.Authority only returns the scheme and host (e.g. http://example.com), not a full url.\nvar _location = HttpContext.Request.Scheme + \"://\" + HttpContext.Request.Host;\nThere's also the HttpContext.Request.GetEncodedUrl() and GetDisplayUrl() extensions.. Use GetEncodedUrl instead.. The No Errors example never awaits stringTask, so it would never observe an error that was thrown asynchronously.\nWhat's the full exception and stack trace?\nIf it's broken by adding a single dependency then it's likely that your dependency graph is trying to pull in two conflicting versions of something.. Values less than 100 are invalid. Where are you getting those?. @ionepaul please open a new issue at https://github.com/aspnet/aspnetcore with the details for your scenario including a Fiddler or WireShark trace file please.\nThere is no configuration for this scenario, it should just work.. Let's confirm the stack traces before getting deep into the mitigations.. Using task manager is the easiest, if you have direct access to the machine.\nhttps://blogs.msdn.microsoft.com/debugger/2009/12/30/what-is-a-dump-and-how-do-i-create-one/. The only guaranteed fix requires API and language changes in 3.0 (IAsyncDispose).\nYour case is certainly the most severe we've seen, likely because HTTPS compression is off by default and most people use IIS's compression module instead.. Right, Apache is acting as a reverse proxy. See the proxy setup instructions here:\nhttps://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/proxy-load-balancer?view=aspnetcore-2.2\n. Closing, you can open a new one in AspNetCore if you have additional trouble.. @synckarthik I was able to reproduce this with your samples and I see the difference. This is not caused by any code changes in the framework, it's caused by a project configuration change.\nThe 2.0 project templates did not have HTTPS enabled by default, the 2.1 templates do. When using HTTP the browser uses HTTP/1.1 and ReasonPhrase works as expected. When using HTTPS the browser uses HTTP/2 and ReasonPhrase no longer works. The reason it doesn't work is because the HTTP/2 protocol has removed the concept of ReasonPhrase. That's one of the reasons we excluded it from HttpResponse.\nSuggested workaround: use a custom header instead.. Are you sure it's not using Http/2 a like discussed above?. ",
    "nilavghosh": "I commented the sdk version from global.json of the solution and everything started working when deploying the application to azure web apps.\n{\n  \"projects\": [ \"src\", \"test\" ]\n  //,\n  //\"sdk\": {\n  //  \"version\": \"1.0.0-preview2-003131\"\n  //}\n}\n. ",
    "wpostma": "I'm curious about this as well.   I was thinking of moving projects I would build to be project.json based and to use multi targeting so that I could build a PCL ,and a native .net core package, and a full .net framework, all from a single set of sources without a pile of different .csprojs for this very reason.\nhttp://stackoverflow.com/questions/38206209/create-a-single-source-project-with-full-net-pcl-and-dotnet-core-assemblies-bu\n. I'm going to try to build from sources on OpenSuse Tumbleweed. Haven't found a readme. \nBut I did find a repo that is necessary in order to get some of the rare dependencies like LTTNG-UST-DEVEL.\nhttp://software.opensuse.org/download.html?project=home%3Admacvicar%3Adotnet&package=lttng-ust\nOpenSuse dependency/tool fetch \"zypper install lttng-ust-devel\" will work after adding the above repo.\nlttng-ust-devel is some trace tool that .net core depends on.\nIf this issue should be logged somewhere else let me know.\n. I have asked this question and will self answer it on stack overflow if I can figure out what the recommended way to diagnose startup crashes is going to be on dotnet tool crashes, on Linux.\nSince Linux dependency hell will be a common theme now that Linux support has shipped, this is going to be fun.\nhttp://stackoverflow.com/questions/38235855/when-dotnet-tool-wont-start-up-failed-to-initialize-what-environment-variable\n. Definitely only OpenSuse 13.2 which is an ancient 2013/2014 release of OpenSuse, is officially supported.  the build scripts do not recognize newer versions and download binary blobs that I can only imagine is a silly way to target linux.\nI also tried installing ICU 53  libs (built from source) and I still get the dotnet: symbol lookup error: /opt/dotnet/shared/Microsoft.NETCore.App/1.0.0/System.Globalization.Native.so: undefined symbol: uloc_getDefault_53_1\nI believe it's dying pretty early in startup.  I'll keep updating this issue if I figure out how to get it to work.\nI've tried building dotnet coreclr, dotnet corefx, and dotnet cli from sources, and have not had complete success.  Of course part of my trouble is that it's not easy to build the preview3 bits from sources when the documentation is incomplete.\nI'm studying a working system (centos 7) and will use that working system to figure out how to get OpenSuse Tumbleweed to work.   \nIt seems OBVIOUS to me that the place to target a brand new platform like Dotnet Core on linux is on a bleeding edge rolling release distribution, which will become the future state of ALL linux desktops. For example, OpenSUSE Tumbleweed is using Linux 4.6.2, which I hear will break dotnet if you upgrade the kernel on a working dotnet install, dotnet's coreclr internals stop working.\n. ",
    "linvi": "Thank you for the link I will take a look at this.\n. I am not sure what you mean. Are you saying that you are currently migrating PCL into compatible version 1.0 .NET Core library or that you have access to some kind of new PCL target for .NET Core 1.0?\n. ",
    "KirilRusev": "We are migrating a project to version 1.0. and can test if you have something in the pipeline. \n. ",
    "mrmeek": "wpostma, this issue might be relevant: https://github.com/dotnet/cli/issues/2018\n. ",
    "aleks-sidorenko": "It would be good to have really xplat XAML based UI for .NET Core, but Xamarin is definitely the way to go in xplat UI development for .NET.\nHowever, all MS's UI xplat products for now are Javascript based: Visual Studio Code, Skype for Linux etc.\nMaybe they don't believe in XAML?\n. Got the same problem on Ubuntu 16.04 and \nsudo apt-get install dotnet-hostfxr-1.0.2\nfixed the problem for me too!\n. ",
    "dankellett": "Thanks, will do.\n. ",
    "Senorsen": ". DS_Store is already in .gitignore, these two files might be introduced into the repo before added to .gitignore, I guess \ud83d\ude06 \n. ",
    "EtherTyper": "Also may have been introduced by an internal TFS Server.\n. ",
    "cdaringe": "Thanks!\n. ",
    "MatthewR": "Just rebooted into that environment, and the system did some updates and it worked. Sorry for the fals post :$\n. ",
    "SerhiiS-in6k": "@mellinoe Thank you for your quick reply. I have analyzed dependency in .NET 4 projects. And I found that project uses native C method. Can I Do something like:\n[DllImport(ServiceDll, CallingConvention = CallingConvention.Cdecl)]\npublic static extern Service Service();\nin the .NET Core\n. Thanks, guys. Today I tried use Pinvokes and it works fine. I also tried to use Pinvokes in Ubuntu it also works. But I can't find 'System.Security.Permissions' in NET Core\nPermissionSetAttribute(SecurityAction.LinkDemand, Name = \"FullTrust\")] or \n [EnvironmentPermission(SecurityAction.LinkDemand, Unrestricted = true)], ''\nDo you know any packages which I Can use instead;\n. Hi. Thanks all, your answer is very helpful for me. I almost port project to Net Core. But have some error:\n1) Can I remove Clonable interface;\n2) How can I replace these lines: \n```\nAttribute.IsDefined(property, typeof(ServiceSerializableAttribute))\nnew JsonFormatter().Print(respObj)\nConfigurationManager.AppSettings[\"ServiceName\"];\n```\n3)Why hasn't ManualResetEvent got Close method?\nThanks.\n. Thanks. Ok. Will be waiting release 1.1 .\n. Hi. No.\n. ",
    "swgillespie": "@SerhiiS-in6k yes, platform invoking like that is supported on .NET Core.\n. So if anyone reading this is like me and you're surprised to see your personal email show up for commits that should be attached to a work email, I learned today that GitHub by default will attach your account's primary email address to any squash commits it introduces on your behalf (through the squash PR button), regardless of the email addresses attached to the commits being squashed. I had to go to my GitHub settings and set my primary email to be my work email to fix this for future commits.. ",
    "mjrousos": "Those permission attributes are related to CAS, which is gone in .NET Core, so you shouldn't need them. .NET Core doesn't enforce security restrictions the way the old .NET Framework (sort of) did. Instead, if resources need to be protected, it's expected to be done at the OS level via ACLs or some similar mechanism.\nSo, it should be fine to just remove those attributes.\n. - Yes, the ICloneable interface can be removed - it's not used by the .NET Core Framework. If you need cloning functionality, you can still keep the methods you've implemented (or provide your own ICloneable interface if it's useful to your apps).\n- ManualResetEvent.Close can be replaced with ManualResetEvent.Dispose.\n- For Attribute.IsDefined, use the System.Reflection.CustomAttributeExtensions.IsDefined() extension method the in System.Reflection.Extensions contract.\n- I'm not very familiar with JsonFormatter, but it's probably possible to get similar functionality with the Newtonsoft.Json package or with the DataContractSerializer type.\n- Configuration has changed in .NET Core since different targets will have different underling config systems. If this is for ASP.NET, you can use the new ASP.NET configuration system.\n. I've confirmed this issue is fixed. Thanks @ryalanms!. ",
    "jan-johansson-mr": "Hi,\nFirst step was to create skeleton code, via dotnet new -t lib. This creates a class library project template, with a default file name Library.cs (my directory, folder, name is mylib) In this case, I'm trying to understand the tool chain, so next step is simply to build the artifact via dotnet restore and dotnet build.\nThe produced artifact is default configured for netstandard1.6.\nNow I have an (class library) assembly in the output directory (folder) at bin/Debug/netstandard1.6/mylib.dll.\nThis is very nice! But then I want to use my assembly in another project, and it is unclear to me how to do that, so I guessed that maybe the assembly must be packaged into a NuGet package.\nTo do this, I run the dotnet pack command. This produces a NuGet package mylib.1.0.0.nupkg. Next step is to publish the package (from a local repository), so I created a local directory (in my case I did that at .nuget/mypackages/, I'm testing this in Ubuntu 16.04).\nTo make NuGet aware of my repository, I edited the NuGet.config file:\n< configuration >\n  < packageSources >\n    < add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n    < add key=\"local\" value=\"~/.nuget/mypackages/\" />\n  < /packageSources >\n< /configuration >\nAnd then copied mylib.1.0.0.nupkg to .nuget/mypackages/.\nI have no idea if I'm doing this right. I've tested to modify the repository path to a canonical path, or to have a simple path (mypackages) (a simple path is relative to the NuGet root - according to NuGet documentation). But I simply can't use my class library from any project, when I reference the package.\nAnd it does not show up in Visual Studio Code when I edit the project.json file.\nI need some guidance in how to make class library assemblies available to .NET Core projects, and if it's possible to make it available in the Visual Studio Code.\nIn short, it fails because I can not use my class libraries in my .NET Core projects.\n. Hi Peter,\nThanks for your description, it does indeed work!\nI want to use assembly (or assemblies) (dll) in my projects. I've not found any clear way to do that (it's easy in VS). However, by following what I wrote earlier today, it does actually work (using dll that comes from building libraries)! As you know, there is no NuGet utility on native Linux, but as far as I understand it dotnet restore does some lifting with the NuGet repository. I found out that once the NuGet.config file points to my local repository (where I put the generated NuGet files from dotnet pack command), then dotnet restore creates the needed directory structure under ~/.nuget/package directory (folder) and pushes the package(s) there.\nOnce this is done, it works quite well with both Visual Studio Code, and dotnet CLI.\nThe only thing that doesn't work that well is intellisense in the project.json file. But once the package is referenced in the dependencies \"section\", with the correct version (no help from intellisense though), it works quite well.\nI'm sure more support will come from tooling soon, but until then, it's a little bit of manual labor to get it to work... :-)\n. ",
    "ewaschenko": "With my EF6 project I'm using System.Runtime.Remoting.Messaging and then use CallContext.LogicalSetData(...);   So with my new .Net Core project this is obviously not supported but I do not know what / how to replace it in core.. ",
    "divega": "@ewaschen for replacing call context data, take a look at AsyncLocal<T>.. @bricelam does this ring any bells? Does it look to you like a possible issue in EF Core? If it is, we can move it there. . >  I think that if i am selecting project from PMC's dropdown then it will automatically switch to that directory.\n@mehtanilay10 I agree that would be nice. I am not sure changing the behavior of the PMC would be safe, but in any case https://github.com/NuGet/Home/ is a good place to provide that feedback.. @karelz it is a SqlClient feature, so I think yes.. Cool. It seems @corivera added it post 2.0.. @richlander Yes. I didn't close it myself because I don't know what exact state (e.g. labels and milestone) you guys would use in this repo.. @Luis-DdlFG from the same documentation page:\n\nIn an ASP.NET Core 2.0 project targeting .NET Core 2.0, a single metapackage reference in the .csproj file replaces the collection of packages:\n...\nASP.NET Core 2.0 projects targeting .NET Framework should continue to reference individual NuGet packages. Update the Version attribute of each  node to 2.0.0.\n\nIt seems you are trying to use the ASP.NET Core meta-package in a project that targets .NET Framework 4.6.1, which isn't supported.\n. @joehoeller please see https://github.com/aspnet/EntityFrameworkCore/issues/3797#issuecomment-345040322 for a recent update on the plan for lazy loading in EF Core 2.x. \nYour other comment about auth seems related to the features maintained at https://github.com/aspnet/Security/ or https://github.com/aspnet/Identity/. It would probably be best to provide your feedback (or ask any questions you have about the subject) in that repo.. @nishant-newton Microsoft.SqlServer.Types is part of the SQL Server product. We have talked to SQL Server team about adding support for .NET Core but there isn't a concrete plan we can share at the moment. \nIn the meantime, for spatial data, we have implemented compatibility with other types that exist in .NET Core, called NetTopologySuite. In the comment at https://github.com/dotnet/corefx/issues/12034#issuecomment-436732668 explains how we are using that library in EF Core 2.2, but the types and the ability to serialize and deserialize geography and geometry columns from SQL Server is available at the ADO.NET layer using NetTopologySuite.IO.SqlServerBytes. \nAlso @dotmorten has created a version of Microsoft.SqlServer.Types. the library for .NET Core, but my understanding is that it does not implement spatial calculations. \nThere are also a few challenges to make Microsoft.SQLServer.Types available to .NET Core:\n\nMicrosoft.SqlServer.Types.dll is SQL Server version-specific\nAt least part of the code is written in C++\n\n@karelz This issue can be considered a duplicate of https://github.com/dotnet/corefx/issues/31775. However it is not directly actionable by the .NET team, but by an internal partner. What do you think would be the best place to keep this open as a feature request? \n. @karelz It looks like this. \n@rexyque I am not able to understand the issue. If you can provide a complete code listing (including entity types) that repros the behavior you are seeing, please create a new issue with that information at https://github.com/aspnet/EntityFrameworkCore/issues/new. . ",
    "SenyaMur": "I have the same problem\nSystem.Security.Principal.WindowsImpersonationContext not found \n```\n\nnetcoreapp2.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nError text:\nCould not load type 'System.Security.Principal.WindowsImpersonationContext' from assembly 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.\n```\n. ",
    "narenkv": "i happen to see a thread , https://github.com/dotnet/cli/issues/3199#issue-156249706\nThey claim that you can refer a .Net 4.5.1 from a Core Application, Could you please throw some light here please\n/Naren\n. Hope some one posts a sample soon in github\n. ",
    "glennc": "See this issue: https://github.com/dotnet/coreclr/issues/917\n. @patelmiral81 Specifically for CF stuff checkout out Steeltoe (https://github.com/SteelToeOSS). It's sponsored by Pivotal with the goal of bringing all the CF stuff you are used to into .NET. They are .NET Foundation members and we've talked a bunch of times about making .NET better for them to extend in this direction.\nFor the env vars, we support retrieving and overriding config values from env vars by default. Do you mean support for understanding the CF VCAP JSON?\nI have the charter for trying to bring more of the things that projects like Spring Boot have for Microservices to .NET Core, so I am interested in as many details and examples you want to give. glennc is my MS alias if you want to email me @ microsoft.com rather than here. But I am hapy with either.\nTo answer Peters actual question, the announcements repo of the aspnet org are where you will see most things related to this announced. In general this sort of work layers on-top of the work done in the dotnet org so it appears in orgs like aspnet.\n. Looks like the Steeltoe config provider binds VCAP variables to config data: http://steeltoe.io/docs/steeltoe-configuration/#1-0-cloud-foundry-provider\nThat seems like the right place for it, a package built by a team closest to CF supporting the CF features like VCAP. Did you expect something more than just getting the data or was there something stopping you from using Steeltoe that we should talk about? Are they missing a type to expose the data in more than just KeyValue pairs for example?\nI don't know if it's discoverability of Steeltoe that's the problem or something else.\n. @shamexln this look like something wrong with Docker on the machine. Does docker run hello-world work on the commandline?. @shamexln Right, that means there is something wrong with the Docker for Windows installation on your machine, Docker itself is not working regardless of what you are trying to do. Which is a bit outside the scope of what we can help you with in the .NET repo. All I can suggest is the Docker troubleshooting guide (https://docs.docker.com/docker-for-windows/troubleshoot/), Stackoverflow, and other Docker specific help channels. Just removing all of Docker from your machine and starting again might help, making sure you have the latest of everything.. ",
    "jskeet": "Attempted to work around this:\n$ sudo apt-get install dotnet-hostfxr-1.0.2\n...\n$ dotnet restore\nerror: Access to the path '/home/jon/.dbus' is denied.\nerror:   Permission denied\nOops.\n. @juanram: There's a broader point here though - even if preview3 is ready and available (which surprises me anyway), releasing a subset of packages which breaks anyone who has installed preview2 is a really bad idea. Ideally (IMO) anyone explicitly installing preview2 would keep preview2 anyway, but if that's not possible, the update shouldn't break them. I suspect the problem is that some packages have been released but others haven't... I don't know enough about apt to say for sure.\nI don't like the idea of Travis breaking with no warning every time there's a new build available.\n. @blackdwarf: That's great, thanks very much. I can certainly confirm that's fixed the Noda Time build :)\n. @yajiya: That's really a question unrelated to this issue, to be honest.\n. Yup, will close the issue now.\n. Guidance on using the preview from Travis would be welcome. I've got a certain distance in NodaTime by downloading the tgz file and following the instructions, but then any tests that use the netcoreapp2.x fail because only the 3.0 preview runtime is discovered.\nUnlike on Windows where the installer sets everything up happily to run side-by-side, the instructions for Linux effectively create a compartmentalized installation directory.\nI've bodged it together, but I'm not convinced it's necessarily correct:\n```sh\ncurl -o preview-sdk.tgz https://download.visualstudio.microsoft.com/download/pr/9f071c35-36b4-48c9-bcc2-b381ecb6cada/5be4784f19c28cb58f8c79219347201a/dotnet-sdk-3.0.100-preview-009812-linux-x64.tar.gz\nmkdir -p $HOME/dotnet && tar zxf preview-sdk.tgz -C $HOME/dotnet\nexport DOTNET_ROOT=$HOME/dotnet \nexport PATH=$HOME/dotnet:$PATH\nMake older SDKs and runtimes available\nfor i in /usr/share/dotnet/sdk/; do ln -s $i $DOTNET_ROOT/sdk; done\nfor i in /usr/share/dotnet/shared/Microsoft.AspNetCore.All/; do ln -s $i $DOTNET_ROOT/shared/Microsoft.AspNetCore.All; done\nfor i in /usr/share/dotnet/shared/Microsoft.AspNetCore.App/; do ln -s $i $DOTNET_ROOT/shared/Microsoft.AspNetCore.App; done\nfor i in /usr/share/dotnet/shared/Microsoft.NETCore.App/; do ln -s $i $DOTNET_ROOT/shared/Microsoft.NETCore.App; done\necho \"New dotnet --info\"\ndotnet --info\n```\n(I then install the 2.2 SDK as normal, along with the 1.0.5 runtime for compatibility testing.)\n. ",
    "jisbert": "I have the same error message related to libhostfxr. In my case, after a fresh installation on Ubuntu 14.04.\n$ sudo apt-get install dotnet-dev-1.0.0-preview2-003121\n...\n$ dotnet --version\nFailed to resolve library symbol hostfxr_load, error: /usr/share/dotnet/host/fxr/1.0.1/libhostfxr.so: undefined symbol: hostfxr_load\nFailed to resolve library symbol hostfxr_unload, error: /usr/share/dotnet/host/fxr/1.0.1/libhostfxr.so: undefined symbol: hostfxr_unload\nThis executable relies on newer functionality (exports) provided by 'libhostfxr.so'\n  - Updating 'libhostfxr.so' to version '1.0.2-beta-000581-00' might help resolve this problem.\n. ",
    "danielcor": "I am also seeing the same issue...    Got a brand new laptop running Mint 17.2, did an apt-get upgrade, and then install dot net, as well as Code.\nGetting the exact same message when I type \"dotnet new\".\n. ",
    "vtomasr5": "I'm experimenting the same issue on Ubuntu 16.04 64bits.\nQuick fix is downgrade to the previous version:\n$apt-get install dotnet-host=1.0.2-beta-000566-00-1\n. @jplebre It dit because it was the only package that was updated from the repo. I was using dotnet-hostfxr-1.0.1 so I updated manually sudo apt-get install dotnet-hostfxr-1.0.2-beta-000583-00 and it solved the problem indeed.\nThe version (i.e. 000583-00-1) has to be the same\ndotnet-host-1.0.2-beta-000583-00-1\ndotnet-hostfxr_1.0.2-beta-000583-00-1\nIt seems to be a dependencies/packaging problem.\n. ",
    "jplebre": "+1 for the exact same error on Travis CI.\n@vtomasr5 did that fix the issue?\n. So, @aleks-sidorenko  solution worked for me, if you are stuck with travis\n``` yml\ninstall:\nInstall .net using linux CLI commands\n\nsudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet/ trusty main\" > /etc/apt/sources.list.d/dotnetdev.list'\nsudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\nsudo apt-get update\nsudo apt-get -qq install dotnet-dev-1.0.0-preview2-003121\nsudo apt-get install dotnet-hostfxr-1.0.2\n```\n. \n",
    "juanram": "I think that web page for Ubuntu / Linux Mint install is not up to date.\n1 - Please remove any previous versions of .NET Core from your system (as told on web page...)\n2 - Download and install latest version from repository (using browser)\nFrom URL:\n     https://apt-mo.trafficmanager.net/repos/dotnet/pool/main/d/dotnet-dev-1.0.0-preview3-003203/\nDownload and install:\n     dotnet-sdk-ubuntu.16.04-x64.1.0.0-preview3-003203.deb  \n3 -From jskeet comment:\nsudo apt-get install dotnet-hostfxr-1.0.2\nAfter that, the following worked for me (with Linux Mint 18, using the Ubuntu 16.04 repository):\n```\nmkdir hwapp\ncd hwapp\ndotnet new\ndotnet restore\ndotnet run\n```\n. @jskeet: I agree with you. Ideally, if you do a .deb package correctly, it will satisfy all dependencies (or, at least, warn about any unresolved dependency) so I think something was not done right: maybe they missed something.\nBy the way, when I installed preview 3 (with GDebi), it said on the Description that it was Microsoft .NET Core 1.0.0 - SDK Preview 2 ...\n@jfaquinojr: \nLinux Mint 17 is based on Ubuntu 14.04 'Trusty Tahr'. (I think still uses libstdc++ 5)\nLinux Mint 18 is based on Ubuntu 16.04 'Xenial Xerus'. (I think already uses libstdc++ 6)\nSo they use different repositories with different dependencies.\nIn any case, I think that the people from the 'dotnet core' project should take a look at this issue. \n. Yeah, it seems that version 1.0.1 of:\n    libhostfxr.so\ndoesn't have the functions:\n    hostfxr_load\n    hostfxr_unload\nso I removed 'previous' version (dotnet-dev-1.0.0-preview3-003203) with the script, and then\n    sudo apt-get autoremove\n    sudo apt-get autoclean\njust to clean all, and then I reinstalled dot-net-dev-1.0.0-preview2-003121 as jplebre tells:\nsudo apt-get install dotnet-dev-1.0.0-preview2-003121\nsudo apt-get install dotnet-hostfxr-1.0.2\nand it also worked for me.\nPlease, note that this is a PREVIEW release.\nPlease, remember that for Ubuntu 14.04 or Linux Mint 17 you should use before install:\nsudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet/ trusty main\" > /etc/apt/sources.list.d/dotnetdev.list'\nsudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\nsudo apt-get update\nAnd for Ubuntu 16.04 or Linux Mint 18 you should use  instead:\nsudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet/ xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\nsudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\nsudo apt-get update\n. ",
    "jfaquinojr": "@juanram the link seems to be for ubuntu 16.04, I am on ubuntu 14.04 (Mint 17.3) so when I try to install it it says \"Dependency is not satisfiable: libstdc++6...\"\nso I went ahead with \nsudo apt-get install dotnet-hostfxr-1.0.2\nand that fixed it.\n```\n.NET Command Line Tools (1.0.0-preview2-003121)\nProduct Information:\n Version:            1.0.0-preview2-003121\n Commit SHA-1 hash:  1e9d529bc5\nRuntime Environment:\n OS Name:     ubuntu\n OS Version:  14.04\n OS Platform: Linux\n RID:         ubuntu.14.04-x64\n```\nThanks all.\n. ",
    "yajiya": "@jskeet  How to set up .net core in production env. I just searched and found how to set up .net core sdk on ubuntu. IMO, for production env,  sdk is a little over weight. \n. ",
    "sb421": "Is is a portable application.  With I run it with dotnet my.dll it says run with Visual Studio\n\nHere is my project json:\n{\n  \"version\": \"1.0.0-*\",\n  \"buildOptions\": {\n    \"emitEntryPoint\": true\n  },\n\"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"type\": \"platform\",\n      \"version\": \"1.0.0\"\n    }\n  },\n\"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"imports\": \"dnxcore50\"\n    }\n  }\n}\nThis was created in Visual Studio.\n. Nevermind, it is working.\n. ",
    "paulopez78": "@blackdwarf I agree with you it's a brew issue but it's the recommended way to install the dependencies in the home page for macusers. I really want to help to make dotnetcore better for macusers as in my company we're working with that setup. From my point of view I'd like to have that warning or workaround just after or before the workaround for oh-my-zsh, if not at least some link pointing to known issues. I can write the workaround for that problem I'm willing to help that community.\nThanks.\n. Thanks @blackdwarf  for the update, from my side the issue is closed.\n. ",
    "Daniel15": "\nI believe this should be mitigated with moving to csproj\n\n@blackdwarf Is there a Github issue I can follow for this?\n. Seems okay now, I think this might have been on my end.. ",
    "Kinani": "Anything on this? \nJust to make sure, Currently there's noway to run .NET Core apps on ARM devices. more specifically Windows 10 IoT?\n. ",
    "BenjaminAbt": "@Kinani .NET Core on ARM is on roadmap for Q4 2016 / Q1 2017\nhttps://blogs.msdn.microsoft.com/dotnet/2016/07/15/net-core-roadmap/\n. This is online now: https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md. ",
    "Brilbroeder": "How do you install the core on the IOT-device ?\n. ",
    "pwoestmann": "@Petermarcu it would be relly nice if you could write a short tutorial about how to get .net Core beta working on Windows 10 IoT. Thanks in advance. @Petermarcu Thank you very much! It seems to auspicious. Ill definitely give it a try next week.. ",
    "h3smith": "Excited for this. Great job guys. . I maybe missing it somewhere, but it maybe useful to add some instructions of what exactly need to be updated as versions get upgraded. I bumped the versions from 1.0 to 1.0.1 and had a litany of build issues (had to make sure VS and CLI were updated, as well as project.json changes) \nJust to help streamline the process?\n. on macOS Sierra, (fresh install) the latest installer didn't set the correct path - dotnet in terminal returned command not found\nOS version\nmacOS Sierra\nRepro steps\nFresh install of macOS without prior dotnet core\nRepro code (if you can share it / is relevant)\nError messages\ncommand not found\nWhether this worked before\nMethod of installing .NET Core\npackage installer \nRan \nln -s /usr/local/share/dotnet/dotnet /usr/local/bin \nand started working\n. In what context? There are several ways to get it - you can't grab it statically anymore. . If you want to use AWS, drop it in Docker and use ECS. . Very interested in this as well - our DOD work would benefit from this. . If you are thinking about encrypting URL parameters, don\u2019t. This is a bad security approach and you shouldn\u2019t do it. . People guessing URL parameters should be mitigated by 1) enduring that the user can access the resource defined in the URL parameter 2) never use primary keys as identifiers you send to the world, use guid / random values. \n. Ah yes the old condescending approach to asking for help in open source projects. Always works out well. . Now that 2.1 is out, curious if anyone can share their Dockerfile for Ubuntu or RHEL. ",
    "BitawareUnleashed": "@Petermarcu thanx for this great news! I tried to follow your instructions, but how can I do that?\n\nExtract dotnet-win-arm.1.2.0-beta-001291-00.zip to a folder on your Pi and cd into that folder in the terminal.\n\nThanx a lot!. @Petermarcu Please, on Raspberry PI how you can do that:\n\nAdd the folder where you extracted it to your path.\n\nThanx. Thanx a lot!\nNow I have another error while running a simple asp.net core app\n\nc:\\DotNETCore\\dotnet : The specified framework 'Microsoft.NETCore.App', version '1.0.1' was not found.\n    + CategoryInfo          : NotSpecified: (The specified f... was not found.:String) [], RemoteException\n    + FullyQualifiedErrorId : NativeCommandError\n\nCheck application dependencies and target a framework version installed at:\n      c:\\DotNETCore\\shared\\Microsoft.NETCore.App\\\nThe following versions are installed:\n      1.2.0-beta-001291-00\nAlternatively, install the framework version '1.0.1'.\n\n\n\nWhat could be?\nI'm sorry to bug you.. Hi @Petermarcu and thanx,\nno, I've made the dll with visual studio 2015 enterprise with ASP.NET Core preview installed. On my PC it works well in each configuration, but when I try to run it on PI that error appear.\nNote that I've created the solution with the tempalte and I haven't modified the code.\nThanx for answer. Oh... I've lost that step... Now I can't try, but asap I'll try and I'll answer you, but I think could be that the problem.\nThanx a lot. ",
    "0807Jpatel": "@Petermarcu @BenjaminAbt   can you update RaspberryPiInstructions.md  since console .net core apps don't generate .exe  but .dll. @pjanotti Hey so is there a way for me to communicate with ports on linux for .net core? preview or stable. \nThank You. @Petermarcu  I was able to use SerialPortStream and get it working on .dotnet preview for linux. \nsteps to follow: clone SerialPortStream, cd into dll/serialunix and Run following commands\n# cmake . && make && make install \nThis might give you \nMakefile:116: recipe for target 'install' failed\nmake: *** [install] Error 1\nIgnore it.\nNow Copy the generated libnserial.so.1.1 to project folder and rename it to libnserial.so.1 this should do the trick.  If you the ports don't show up, run program as root.\n@pjanotti @Petermarcu  Thank You\n. @Petermarcu  I was able to get it running on Ubuntu Mate arm for Raspberry Pi 3, so you should be able to.. ",
    "noelitoa": "Submitted an issue as well - https://github.com/dotnet/cli/issues/3968\n. ",
    "venil7": "I'm afraid solution suggested here http://stackoverflow.com/questions/38670295/brew-refusing-to-link-openssl doesn't solve an issue\nI encounter the same issue while installed openssl101\nthey no longer alow linking of any openssl version https://github.com/Homebrew/brew/pull/612/files\n. ",
    "sylveon": "Then maybe during the setup find old versions and ask the user if he wants to remove them\n. p. ",
    "rusty21": "+1\n. ",
    "jacobsmith928": "Howdy @Petermarcu @fonix232  i realize this is closed but you guys need ondemand build servers, we can offer  up (via Packet.net) our 96-core ARMv8 to anyone in the community.    . Howdy @Petermarcu @fonix232  i realize this is closed but you guys need ondemand build servers, we can offer  up (via Packet.net) our 96-core ARMv8 to anyone in the community.    . ",
    "tehbilly": "Unless I'm mistaken, this is something on the roadmap for 1.1: https://blogs.msdn.microsoft.com/dotnet/2016/07/15/net-core-roadmap/\n. ",
    "weshaggard": "lets use https://github.com/dotnet/corefx/issues/10822 for this issue so closing. \n. Agreed. I filed https://github.com/dotnet/buildtools/issues/1376 to track getting the tools to understand ref returns (PR's welcome :)). . Reflection simply reads it in the order they are put in the PE file the compiler is the right place to try and get this ordering so https://github.com/dotnet/roslyn/issues/16733 is the place continue this conversation. . I agree this crosses many boundaries but it has to first start with the CLI spec and then the compiler then the runtime. However I think it is still best to start the conversation in the roslyn repo. . @jbomhold3 can you share you assets file (obj/project.assets.json) from both your windows and linux builds somewhere? It would seem that for some reason the package graph is different between those. . Your Linux packages seem to be in a bogus state. What are the feeds you are using on both windows and linux? You can see that from the restore log. We should make sure your feeds are the same and I would also suggest you delete your package cache (/root/.nuget/packages/) on your linux machine and retry the restore. . Great I'm glad that fixed your issue. I'm not sure what would have caused the corrupt package cache. . It sounds like a issue with the msbuild filtering issue with the facades. I think that was fixed in a newer version of msbuild. @cdmihai @AndyGerlicher do you knows what is necessary to fix this?. @kierenj there is a lot of issues called out in this thread so it is kind of hard to follow. Can you post a sample project demonstrating your issue somewhere and I will help diagnose it and get to the bottom of the issue. . There are a lot of moving parts so it is hard to say what the real issue is just from your description. \n[BadImageFormatException: Could not load file or assembly 'System.ComponentModel.Annotations' or one of its dependencies. Reference assemblies should not be loaded for execution. They can only be loaded in the Reflection-only loader context. (Exception from HRESULT: 0x80131058)\nThat to me says you are deploying the wrong version of this library. It looks like it is deploying the reference assembly instead of the implementation assembly. That assembly should not even need to be deployed as it ships inbox on .NET Framework.  If I were to guess the issue with System.ComponentModel.Annotations has nothing to do with the other System.ComponentModel.* assemblies as it is pretty isolated from them. \n\nAs I say, the NuGet package now targets both net451 and netstandard1.6. \n\nYou seem to be consuming a locally built nuget package does this issue still occur if you directly consume the binary?\nIf you can get a repro that you can share with your scenario then I can hunt this down but right now I'm still at a loss as to how to help because there are too many moving pieces. \n. In your web project install the \"System.ComponentModel.Annotations\" \"4.3.0\" nuget package, which should automatically cause your web.config to update to add the following binding redirect.\n<dependentAssembly>\n        <assemblyIdentity name=\"System.ComponentModel.Annotations\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\n        <bindingRedirect oldVersion=\"0.0.0.0-4.1.1.0\" newVersion=\"4.1.1.0\" />\n      </dependentAssembly>\nAnd also cause System.ComponentModel.Annotations.dll to be copied to your bin folder. Once that happens your web project works.\nLet me know if that didn't fix your main project. \n. >Should either the tooling or me have added that as an explicit dependency to the nuget project?\nI think somewhere along the lines when if you installed the nuget packages via the UI it should have pulled this dependency, if you manually edited the packages.config file that might be why it didn't show up. \nFuture tooling will help flow these dependencies better. If you are able to it would be good to switch away from packages.config based projects and instead use the newer PackageReference items and that will help flow these dependent packages.\nI'm going to close this issue now but feel free to ask further questions. . Honestly I'm not entirely sure. \n@emgarten any ideas why System.ComponentModel.Annotations package isn't correctly installed when installing https://www.nuget.org/packages/Repro110717.MainPackage/ into a net461 packages.config based project? It is in the package closure from https://www.nuget.org/packages/Microsoft.AspNetCore.Mvc.DataAnnotations/1.1.2. Perhaps there is some issue around the install picking the net451 dependencies instead of the netstandard1.6 dependencies but later we pick up the netstandard1.6 asset which is then missing this dependency. . For some reason it looks like your ClassLibrary is not getting deployed. Can you verify if it exists on disk? . >@weshaggard Yes, the ClassLibrary.dll file is on disk. The two projects are in separate solutions, so after building the .NET Standard library, I added a reference to it in the web project by browsing for the dll.\nOK perhaps the issue isn't that file being missing then perhaps it is one of its dependencies. When you reference it as a raw binary the tooling doesn't do anything pull in any missing dependencies that might be needed. \nCan you try loading the ClassLibrary in the same solution and do a ProjectReference to it and see if the same issue occurs? You could also take a look at the dependencies and try to see if any are missing. . This still feels like some missing dependency. Can you diff the set of files that are in your output in the working and non-working case and see what is different? . I suspect you might be hitting https://github.com/dotnet/sdk/issues/901. Can you try the workarounds listed in that issue?. @lawrencejohnston I took a look at your sample project and figured out what is happening. You aren't consuming a ProjectReference like I first thought you are consuming a PackageReference to Lextm.SharpSnmpLib which doesn't correctly identify its full dependency set.\nYou can work around this but opt-ing in to netstandard in your project by setting <DependsOnNETStandard>true</DependsOnNETStandard> which should get you all the missing dependencies you have. \nPlease give that a try and let me know if it works for you.. Yes we use the same ref everywhere when targeting netstandard20. @danielgerlag can you share more of how you are building? \nClose should be available on both of those types when targeting netstandard20. I suspect this is because of the older toolset that doesn't support conflict resolution. @ivan-vargas please update your .NET SDK and try again I believe this will not be any issue for you. . Issue moved to dotnet/standard #708 via ZenHub\n. I just pushed an API diff for rc1 https://github.com/dotnet/core/commit/1ba7fa2a4fdfd789f61b71ace03608d4f8427eca. . So you suggest I put it here release-notes/2.1/api-diff/2.0-vs-2.1.md. Moved. . I used a UI version of our tools which don't understand this concept, we did add support with https://github.com/dotnet/buildtools/pull/1849. I will use a commandline version to update the diff. Thanks for pointing out @jnm2 . Based on the error screenshot it looks like a couple of your test projects are directly referencing 2.1.0 of the runtime either via a direct PackageReference or via overriding the RuntimeFrameworkVersion. Can you provide a pointer to your Rubicon.ReversProxy.Tests.Common.csproj? . I don't know if MS has any documentation around this but reverse forwarders are shims for things like kernal32.dll which forward to the various api-set libraries on OneCore based OS's. They are there to help make existing native dependencies just work on OneCore based OS's.\nOn the opposite side we actually need api-set shims for Win7 bases OS's, otherwise a number of our managed libraries will not work there. Today we pull these in via a nuget package but there is still a lot of unknowns about how to correctly handle them long term.\n. @VSadov @stephentoub @jkotas can you guys refresh my memory is adding readonly to an existing struct a breaking change? . What defines it to be readonly? Do all the fields need to marked readonly? . Thanks. I just wanted to be sure that if someone was using it in some mutable way in the past and we now added readonly to that the compiler wouldn't start complaining. . ",
    "dmccaffery": "The version of OpenSSL that is included in macOS Sierra (and previous versions) uses a custom crypto library, which is why you need to install OpenSSL via brew (or some other alternative) and then force link the crypto library:\nFollow the directions here:\nhttps://www.microsoft.com/net/core#macos\nThis should solve your issue.\n. Also, I just found this:\nhttps://docs.microsoft.com/en-us/dotnet/articles/core/getting-started\nAt the bottom of that page, it indicates that Sierra is not (officially) supported yet, but will be soon. That document was last modified on 08 Aug 2016. I have been running it successfully on Sierra but a build of the native runtime libraries doesn't exist for the platform (yet).\nIf you run dotnet --info, you can see the runtime identifier (RID): osx.10.12-x64\nIf you try to restore a project.json with an RID of osx.10.12-x64 you will get errors as follows:\nMicrosoft.Win32.Primitives 4.0.1 provides a compile-time reference assembly for Microsoft.Win32.Primitives on .NETCoreApp,Version=v1.0, but there is no run-time assembly compatible with osx.10.12-x64.\n. ",
    "zuosc": "Thank you!   Hope support Sierra as soon as possible\n. ",
    "carusology": "In case Google brings anyone else here...\nProblem\nI had been using macOS Sierra for some time with .NET Core without issues. I never saw the aforementioned warning at the bottom of the getting started page before today. This morning I updated to macOS Sierra 10.12.1, and now I cannot run my xUnit test suites locally. About 95% of the time, I get the following errors whenever I try to run them, even when I comment out every test in the suite:\n```\n\ndotnet test ./test/MyProject.WebApi.Tests/\nProject MyProject.WebApi (.NETCoreApp,Version=v1.0) was previously compiled. Skipping compilation.\nProject MyProject.WebApi.Tests (.NETCoreApp,Version=v1.0) was previously compiled. Skipping compilation.\nxUnit.net .NET CLI test runner (64-bit .NET Core osx.10.12-x64)\n  Discovering: MyProject.WebApi.Tests\nSystem.Threading.Tasks.TaskSchedulerException: An exception was thrown by a TaskScheduler.\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\nSUMMARY: Total: 1 targets, Passed: 0, Failed: 1.\n```\n\nI can still perform dotnet run for the web api natively, but tests are a no go. Researching this issue is what brought me here, giving me the realization only now that I have been running .NET Core for quite some time on an unsupported version of macOS.\nWorkaround\nFortunately, Docker for Mac is quite stable these days and makes for a somewhat simple workaround. Using the microsoft/dotnet image, I ran the following to get a shell:\ndocker run -it --name dotnet --volume /path/to/MyProjectDirectory/:/MyProjectDirectory microsoft/dotnet:1.0.0-preview2-sdk bash\nThen within the container:\ncd /MyProjectDirectory\ndotnet restore\ndotnet test ./test/MyProject.WebApi.Tests\n. ",
    "Knaackee": "After waiting the whole day doing other things, it is now working.\n. ",
    "stevenshort": "Did you ever solve this?\n. ",
    "DongLei-tw": "Anybody got a solution?. ",
    "adamreed90": "Moved issue to correct place, sorry for adding in wrong spot. \n. ",
    "Charmatzis": "Well, I mean something like that for R \nJavaScriptServices \n. ",
    "zeusro": "Couldn't use normally\n``` bash\n[root /]# dotnet\nMicrosoft .NET Core Shared Framework Host\nVersion  : 1.0.1\n  Build    : cee57bf6c981237d80aa1631cfe83cb9ba329f12\nUsage: dotnet [common-options] [[options] path-to-application]\nCommon Options:\n  --help                           Display .NET Core Shared Framework Host help.\n  --version                        Display .NET Core Shared Framework Host version.\nOptions:\n  --fx-version            Version of the installed Shared Framework to use to run the application.\n  --additionalprobingpath    Path containing probing policy and assemblies to probe for.\nPath to Application:\n  The path to a .NET Core managed application, dll or exe file to execute.\nIf you are debugging the Shared Framework Host, set 'COREHOST_TRACE' to '1' in your environment.\nTo get started on developing applications for .NET Core, install .NET SDK from:\n  http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\nExit code: 129\n[root /]# uname -a\nLinux localhost.localdomain 2.6.32-042stab111.11 #1 SMP Tue Sep 1 18:19:12 MSK 2015 x86_64 x86_64 x86_64 GNU/Linux\n[root /]# dotnet version\nFailed to load /opt/dotnet/shared/Microsoft.NETCore.App/1.0.1/libcoreclr.so, error: libunwind.so.8: cannot open shared object file: No such file or directory\nFailed to bind to CoreCLR at '/opt/dotnet/shared/Microsoft.NETCore.App/1.0.1/libcoreclr.so\n```\nerror: libunwind.so.8: cannot open shared object file: No such file or directory\n. @richlander \n``` bash\n[root /]# cat /proc/version\nLinux version 2.6.32-042stab111.11 (root@kbuild-rh6-x64.eng.sw.ru) (gcc version 4.4.6 20120305 (Red Hat 4.4.6-4) (GCC) ) #1 SMP Tue Sep 1 18:19:12 MSK 2015\n[root /]# getconf LONG_BIT\n64\n[root /]# cat /etc/redhat-release\nCentOS Linux release 7.2.1511 (Core) \n```\n. @blackdwarf  Do you mean libunwind,libicu?YES,I followed the steps as https://www.microsoft.com/net/core#centos says.\nsudo yum install libunwind libicu\ncurl -sSL -o dotnet.tar.gz https://go.microsoft.com/fwlink/?LinkID=827529\nsudo mkdir -p /opt/dotnet && sudo tar zxf dotnet.tar.gz -C /opt/dotnet\nsudo ln -s /opt/dotnet/dotnet /usr/local/bin\n. ",
    "Thaoden": "\nOS version\n\nWin 10 Enterprise 1511\n\nRepro steps\n\nOpening a solution in Visual Studio 2015 Professional Update 3\n\nError messages\n\nThe following error occurred attempting to run the project model server process (1.0.0-preview2-003131). \nNo connection could be made because the target machine actively refused it [::ffff:127.0.0.1]:51753.\nThe project model server process provides intellisense, build, and reference information to Visual Studio and without it your experience will be very limited. Please try closing and reopening Visual Studio to see if that corrects the problem. Alternatively, check that the .NET core SDK is properly installed.\n\nWhether this worked before\n\nIt did.\n\nMethod of installing .NET Core\n\nUsing the downloader available here.\nUsing the SDK installer available on the same page to Repair the SDK seems to have fixed it.\n. Typo: Should be \"manifest\". ",
    "agoretsky": "Windows 10, install from https://www.microsoft.com/net/core#windows.\nDuring installation I am getting error:\ndd_DotNetCoreTools__20160914112850.log.txt\n. ",
    "webprofusion-chrisc": "If I upgrade my project to 1.0.1 via nuget, then rebuild and deploy to production IIS server (with latest DotNetCore 1.0.1 Windows Hosting package installed) I get HTTP Error 502.5 - Process Failure - running the compiled .exe for the app reveals that it can't find Microsoft.AspnetCore.Server.Kestrel, Version 1.0.0 , so something is hanging on to the old reference. Kestrel 1.0.1 is reference in the project.json.\n. project.json: https://gist.github.com/webprofusion-chrisc/acf9f999be369e7ec94d310e9080a5c4\nMay be a little unusual as it's basically using dotnet 4.6 due to other dependencies (Soap stuff)\nUpdate: note that it works fine under IIS Express on dev machine, it's after deployment to Server 2008 R2 with IIS that the issue occurs.\n. Ok, resolved for me. I hadn't installed the updated VS2015 tooling,  although I'd updated my nuget packages in the solution and hosting bundle on the server. I'd tried reverting to 1.0.0 of the Kestrel and MVC assemblies and that obviously worked. After installing the VS tooling update I updated my nuget packages back to 1.0.1 and it worked in production.\nUpdate 1:  it appears the difference was the generate .exe.config after the tooling update now adds the bindingRedirect entries for EntityFrameworkCore\n. When upgrading another project I found that to get it to build I needed to add a runtimes section to the project.json:\n\"runtimes\": {\n    \"win7-x64\": {}\n  }\nThe project was previously building and working in production without that.\n. ",
    "MarcelWouters": "Running Asp.Net MVC Core project in Visual Studio 2015 with Update 3 I get:\nThe program '[9412] dotnet.exe' has exited with code -2147450749\nWhen I changed the setting    \n\"Microsoft.NETCore.App\": {\n      \"version\": \"1.0.1\",\n      \"type\": \"platform\"\n    },\nback to version 1.0.0 the web app runs in IIS Express. I followed this blog for updating my project: https://blogs.msdn.microsoft.com/dotnet/2016/09/13/announcing-september-2016-updates-for-net-core-1-0/\n. Solution of @chrisgreen42  worked for me. Installed .NET Core Installer x86 and debugging works in Visual Studio.\n. ",
    "jamesabolton": "I have the same problem as @webprofusion-chrisc. After reading the changelog I didn't see anything indicating this was required. I rolled back to v1.0.0 and I am still forced to provide the runtimes section in project.json\nEdit 1: change this in project.json after changing the packages to 1.0.1\n\"Microsoft.NETCore.App\": \"1.0.1\"\nto\n\"Microsoft.NETCore.App\": {\n      \"version\": \"1.0.0\",\n      \"type\": \"platform\"\n    }\nTo avoid adding runtimes section using 1.0.1 change\n\"Microsoft.NETCore.App\": \"1.0.1\"\nto\n\"Microsoft.NETCore.App\": {\n      \"version\": \"1.0.1\",\n      \"type\": \"platform\"\n    }\n. @chrisgreen42 I started having the same issue. I brought up a command prompt, navigated to my project's folder and tried to run the web app:\nE:\\Programming\\GitHub\\HuskyRescueCore\\src\\HuskyRescueCore>dotnet run\nProject HuskyRescueCore (.NETCoreApp,Version=v1.0) was previously compiled. Skipping compilation.\nThe specified framework 'Microsoft.NETCore.App', version '1.0.1' was not found.\n  - Check application dependencies and target a framework version installed at:\n      C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\n  - The following versions are installed:\n      1.0.0\n  - Alternatively, install the framework version '1.0.1'.\nAt that point I realized I didn't actually install 1.0.1 which you can get here. Now I can debug via VS again.\n. ",
    "DamianEdwards": "My hunch is perhaps they're hitting the issue where the NuGet VS tooling drops the \"type\": \"platform\" from the reference, which effectively changes the project to stand-alone and thus would force the requirement of a runtimes section.\n. @madskristensen . e.g. you can see how I do it it at\nhttps://github.com/aspnet/live.asp.net/blob/dev/src/live.asp.net/live.asp.net.csproj#L40\nOn Thu, Feb 16, 2017 at 3:55 PM, Eilon Lipton notifications@github.com\nwrote:\n\n@AbhimanyuAryan https://github.com/AbhimanyuAryan I think from the\nCSPROJ file you just need to run the appropriate command to have Bower\nrestore its packages. In other words, add a command to the CSPROJ to run bower\ninstall at the appropriate time (it's up to you to decide what that time\nis - for example, in the post-restore stage).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/494#issuecomment-280504383, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAPNAN9F4d1a35G77YnjYwaRfV7sq8Mqks5rdOH-gaJpZM4L_wKE\n.\n\n\n-- \nCheers,\nDamian\n. Generally no. Depends on what you reference, but some of our less common packages have dependencies that used to require it that have since update to support netstandard directly, e.g. Microsoft.AspNetCore.AzureAppServices. In those cases you can often fix by adding a direct dependency to the new version of the package, e.g. WindowsAzure.Storage. The ASP.NET Core templates were changed a while back to not include any components via NPM, e.g. gulp. This is why there is no longer a package.json. It's simply a template change though and you can of course add NPM packages back to any project you choose to.. The migration docs for ASP.NET Core are in progress and will be done by the time we ship 2.0.0 RTW.. There is no plan to port any part of System.Web to .NET Core. Can you explain more of what the class library is doing so that we might recommend some different approaches?. 2.1.101 is a higher version than 2.1.4\nThe numbers in each part are whole numbers, not fractions, so the 101 is > 4. Rest assured, we're hard at work on the early stages of 2.2 planning and beyind, but as Peter said, we're focused on getting 2.1 out the door right now.. I think this is a question best asked of the Azure Mobile Services team. @paulbatum is that you these days?. Which packages are claiming a dependency on Microsoft.Extensions.DependencyModel 2.1.1?. Unfortunately the SDK download has got caught up in an issue getting it posted to the download center. We're working to resolve it. We don't have a mechanism for removing packages from NuGet so this is just an unfortunate situation right now.\nPlease note, for ASP.NET Core projects targeting netcoreapp2.1 you don't need to specify a version number for the Microsoft.AspNetCore.App package reference. This version is now implied based on the SDK version you have installed. If you create a new ASP.NET Core 2.1 project you'll see what I mean:\n``` xml\n\n\nnetcoreapp2.1\n\n\n\n\n\n\n\n\n```\nThis is covered in the migration doc: https://docs.microsoft.com/en-us/aspnet/core/migration/20_21?view=aspnetcore-2.1\nYou're update process now simply is wait until the SDK is released and then install that. Once that's done, you'll start running on the new version. For packages that aren't included in Microsoft.AspNetCore.App, you'll continue to update those the usual way on NuGet, but do so after you've installed the new SDK.\n. Understood, and this is exactly why we made this change in 2.1, as folks have been suffering this issue in some form since 1.0. We're thinking about ways we can make it more obvious in a future update (perhaps emit a build warning if the version is present).. Have you tried updating your reference to Microsoft.AspNetCore.TestHost to the latest version?. There's a few things at play here which I agree makes this more difficult than it ideally could (should) be. For what it's worth, these are things we're actively looking to improve in .NET Core 3.0 and beyond, but let me try to explain the moving pieces as they are now.\nAs Peter said, there are two locations being flagged here by the scan for contain vulnerable pieces: the \"runtime store\", and the NuGet Fallback Folder. They're both used for different things at different times, but by themselves don't necessarily indicate that apps are using those versions and are thus vulnerable. Furthermore, how these things are used is different between .NET Core 1.x, 2.0, and 2.1 projects. It's different again if your ASP.NET Core application is targeting and thus running on .NET Framework, rather than on .NET Core.\nOf these two locations, only the \"runtime store\" is tracked by installers, such that when you uninstall the files go away. The NuGet Fallback Folder is not removed when you uninstall .NET Core SDK versions and so older files will remain there until they're removed manually. The other important difference is that the \"runtime store\" is used by deployed applications at runtime (as they name implies), whereas the NuGet Fallback Folder is only used by projects during development. Once the project is published (and thus becomes an application) it either takes the assemblies it needs with it, or gets them from the \"runtime store\" (in 2.0) or a \"shared framework\" (in 2.1 and beyond).\nIn .NET Core 1.x and all .NET Framework projects, ASP.NET Core assemblies come from NuGet packages and are published with your application. The version you get is determined by the version of the package you reference in the project. So to ensure your project is up to date, you need to update the package versions referenced in the csproj file, then build/publish and redeploy it.\nIn .NET Core 2.0 projects, the ASP.NET Core assemblies come from NuGet packages at design/compile time, but typically aren't published with your application. Instead, at runtime they come from the \"runtime store\". However, the version the application needs is still dictated by the package version specified in the project file, so it's the same process for ensuring the project is up to date: update the package versions referenced in the csproj file, then build/publish and redeploy it. It also requires the additional step of ensuring the \"runtime store\" update is installed on the machines where the deployed application will actually run (i.e. the server).\nIn .NET Core 2.1 projects, the ASP.NET Core assemblies still come from NuGet packages at design/compile time, and they still aren't published with your application, but at runtime they come from a \"shared framework\" (located under C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App). The key difference with this is that you don't need to change the version of ASP.NET Core in the project file, but rather you can leave it completely blank (e.g. <PackageReference Include=\"Microsoft.AspNetCore.App\" />) . The build process will then transparently set that to the \"baseline\" version (currently 2.1.1) which is the same version you'll find in the NuGet Fallback Folder (so that the restore can complete without going online). However, at runtime, the application will roll-forward onto the latest patch version of the shared framework it finds on the machine (currently 2.1.2). This means that as patches are released, the NuGet Fallback Folder doesn't need new packages (as the baseline stays at 2.1.1), you just need to get a new shared framework (which of course is included in the updated SDKs). It also means on the servers, you simply need to install patched shared frameworks as they're released (2.1.2, 2.1.3, 2.1.4, etc.) and all apps on that server that were compiled against 2.1.0 will automatically roll forward onto the patched runtime when they next restart (rather than having to have their project files updated, build/published, and redeployed).\nThe end result of all this is that vulnerable assemblies will continue to be found in the NuGet Fallback Folder for the life of 2.x, but that doesn't mean they're necessarily used at runtime by your applications. Scanning of machines that install the SDK will continue to show these results, but scanning of servers (where you typically only install runtime assets) should be more inline with what one would expect.\nI hope that helps.. This will be fixed with the changes coming in 3.0, but fixing in 2.1.x is challenging without giving up other things, e.g. offline restore.. ",
    "yishaigalatzer": "I don't know the root cause @emgarten should be able to take a look. My guess is that we require a rid restore where before there was an implicit rid running in restore based on the machine you run on\n. ",
    "emgarten": "Updating through the NuGet UI calls into the project system to update project.json, \"type\": \"platform\" is dropped during that edit.  NuGet 3.5.0 RTM (not released yet) will have a workaround for this issue.\n. You can also work around this by clearing WarningsAsErrors in your project. By default netcoreapp2.0 projects have <WarningsAsErrors>NU1605</WarningsAsErrors>.. @KshitizGIT try <NoWarn>NU1605</NoWarn>. @NikasZalias also try removing all obj folders also and restoring again, this will force restore to read the package directory again for the file list.. @Petermarcu I've opened https://github.com/NuGet/Home/issues/5995 to track this. I was not able to repro this either, this package should be compatible due to the netstandard1.3 support.\njson\n\"compile\": {\n  \"ref/netstandard1.3/System.Net.Security.dll\": {}\n}\n@FerHenrique would you make a copy of the obj folder for the project including project.assets.json before trying to fix the problem.\nAfter that\n1. Clear the caches as @Petermarcu mentioned\n1. Delete the obj folder for the project to force restore to create a new project.assets.json file\nIf the above fixes your issue it would be great if you could share the original project.assets.json file, if it doesn't fix the issue then I would still like to see it to figure out what is wrong.\n. I think this should be tracked with https://github.com/NuGet/Home/issues/5995, it is likely that nuget is unable to see the ref file and that leads to this compat error.. On the NuGet side the NRE was improved with a helpful error message when HOME isn't set: https://github.com/NuGet/Home/issues/4671\nBased on the stack trace above it looks like the CLI may need to do the same.\nNote that env var names are case-sensitive on Linux.. ",
    "chrisgreen42": "OS Version:\nWindows 8.1 Enterprise\n Repro Steps:\nUpdating .NetCore.App in existing project via Nuget.  \nSimilar issue occurs as @jamesabolton reported and have to edit the project.json file as described.  However, IIS Express would not launch when trying to debug. in 1.0.1  When I rolled back to 1.0.0, IIS Express would launch. \n. ",
    "stevejgordon": "Since installed .NET 1.0.1 I am having problems working on a project still targeting 1.0.0.\nI am using 1.0.1 successfully in some solutions but an open source project https://github.com/HTBox/allReady still targets the prior release in our master branch.\nOS is Windows 7\nWhen trying to debug the application from VS 2015 I get the following error:\nSystem.IO.FileLoadException was unhandled\nMessage: An unhandled exception of type 'System.IO.FileLoadException' occurred in Unknown Module.\nAdditional information: Could not load file or assembly 'Microsoft.AspNetCore.Server.Kestrel, Version=1.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\nThe application is targeting Kestrel 1.0.0 in the project.json\nI don't believe there are any other changes except for the install of .NET core. I've tried deleting the packages folder and local nuget cache with no improvement.\n. Further to my recent comment after upgrading the project to use 1.0.1 it runs. This is not ideal though since until the project formally moves to this version I can only work on it by adjusting my dependencies and avoiding checking them in.\n. ",
    "ellismg": "@blackdwarf No.  I don't believe there were any changes in native dependencies or their versions for 1.0.1\n. It may make sense to move .gitignore and .gitattributes to the top level of the repository (and maybe just crib from the version we have in corefx)?\n. This PR also adds a ubuntu directory with submodules.  Was that expected or was output from a local invocation of the tool accidentally included?. Sharing here as well.  I think the concept of a minimum version is a bit confusing.  I'd rather we just provide the names of packages we depend on for our supported distros.  To that end:\nDebian/Ubuntu:\n-   libunwind8\n-   libicu52\n-   liblttng-ust0\n-   libuuid1\n-   libcurl3\n-   libssl1.0.0\n-   zlib1g\nCentOS/RHEL:\n-   libunwind\n-   libicu\n-   libuuid\n-   libcurl\n-   openssl-libs\n-   zlib\nOn CentOS and RHEL, LTTNG is not provided in the default package sources.  It is not necessary for .NET Core to run, but users will be unable to collect detailed performance traces.  If an end user desires it, she may install it from a third party source (http://packages.efficios.com/).\n. Please note I have edited the above to remove \"gettext\" which is a build time dependency (the runtime impl is in libc).\n. Why do we have to go out of our way to set line endings here?  Won't git just do the right thing on windows system if you have core.autocrlf set (which is the default)?\n. Maybe you can put an example here of what the working directory is?\n. Might be nice to document the layout of the working directory and where artifacts are once a build is complete.\n. Are we unable to flow the commit hash from the program we are patching?  We should already have it because we checked out the correct SHA to build, right?\n. Can we just remove all this stuff?  I don't think it's super worthwhile.  I don't know of another project that tries to automagically install a tool-chain on your behalf.  I also worry that we'll just constantly be adding packages for different things.  We should just document the toolchain at a high level.\n. It's by design that these docker files don't have toolchains installed right?\n. Consider doing all this setup in one run command to reduce the number of layers that are constructed.  Also consider cleaning the apt-get cache as part of the same command to reduce layer size (the dockerfiles that we have for dotnet core should do this if you need an example).\n. We could consider just doing this:\n```\n\nSet default behavior to automatically normalize line endings.\n\n\ntext=auto\n```\n\nin a top level .gitattributes (that's what most other dotnet projects do).\n. Gotcha.  Sorry.\n. Can you guard writing these escape codes with a check for sys.stdout.isatty()?  That will prevent them from being written when output is redirected (which folks may want to do while debugging).\n. I think it's fine to be specific for Linux right now...\n. ",
    "nicodewet": "This is surely a case of RTFM & PEBKAC. That said, when it comes to \"dotnet run\", if NuGet cannot and will not magically update 'Microsoft.NETCore.App' and gives you the message \"Alternatively, install the framework version '1.0.1'\", this is to suggest that the command reminds the user that they need to download the necessary installer. I got stuck in a headspin wondering why NuGet has failed me on my Mac.\nIn terms of the installer, I'd put the version number in the name, dotnet-dev-osx-x64.1.0.0-preview2-003131.pkg installs \"Microsoft .NET Core 1.0.1 - SDK Preview 2-003131 (x64)\".\n. ",
    "dromanchenko": "i had the same problem as @webprofusion-chrisc. The solution was to add a binding redirect for Microsoft.AspNetCore.Server.Kestrel. My project is an empty asp.net core app (no mvc dependencies at all)\n. i had the same problem as @webprofusion-chrisc. The solution was to add a binding redirect for Microsoft.AspNetCore.Server.Kestrel. My project is an empty asp.net core app (no mvc dependencies at all)\n. ",
    "3ropka": "1) OS: Linux version 4.7.0-kali1-amd64 (devel@kali.org) (gcc version 5.4.1 20160803 (Debian 5.4.1-1) ) #1 SMP Debian 4.7.5-1kali3 (2016-09-29)\ndotnet:\n```\nProduct Information:\n Version:            1.0.0-preview2-003131\n Commit SHA-1 hash:  635cf40e58\n```\n2) dotnet restore => Segmentation fault\n```\n(gdb) run\nStarting program: /usr/local/bin/dotnet restore\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n[New Thread 0x7ffff47c7700 (LWP 5540)]\n[New Thread 0x7ffff3fc6700 (LWP 5541)]\n[New Thread 0x7ffff37c5700 (LWP 5542)]\n[New Thread 0x7ffff2fc4700 (LWP 5543)]\n[New Thread 0x7ffff27c3700 (LWP 5544)]\n[New Thread 0x7ffff1c49700 (LWP 5545)]\n[New Thread 0x7fffe20c7700 (LWP 5546)]\n[New Thread 0x7fffe18c6700 (LWP 5547)]\n[New Thread 0x7fffe10c5700 (LWP 5548)]\n[New Thread 0x7fffe08c4700 (LWP 5549)]\n[New Thread 0x7fffe00c3700 (LWP 5550)]\n[New Thread 0x7fffdf8c2700 (LWP 5551)]\n[New Thread 0x7fff5cfab700 (LWP 5552)]\n[New Thread 0x7fff3ffff700 (LWP 5553)]\n[Thread 0x7fff3ffff700 (LWP 5553) exited]\nlog  : Restoring packages for /home/*/**/MyFirstApp/project.json...\nThread 14 \"dotnet\" received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7fff5cfab700 (LWP 5552)]\n0x00007fffe24a2ddd in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0\n```\ncat project.json \n{\n  \"version\": \"1.0.0-*\",\n  \"buildOptions\": {\n    \"debugType\": \"portable\",\n    \"emitEntryPoint\": true\n  },\n  \"dependencies\": {},\n  \"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"dependencies\": {\n        \"Microsoft.NETCore.App\": {\n          \"type\": \"platform\",\n          \"version\": \"1.0.1\"\n        }\n      },\n      \"imports\": \"dnxcore50\"\n    }\n  }\n}\n4) Problem also exists on 4.3 kernel.\n5) dotnet installed via:\nsudo apt-get install curl libunwind8 gettext\n    curl -sSL -o dotnet.tar.gz https://go.microsoft.com/fwlink/?LinkID=827530\n    sudo mkdir -p /opt/dotnet && sudo tar zxf dotnet.tar.gz -C /opt/dotnet\n    sudo ln -s /opt/dotnet/dotnet /usr/local/bin\n. ",
    "chrisdrobison": "I'm seeing the following error on VS 2015. I've uninstalled all the SDKs and tooling packages and reinstalled just the latest and I'm still seeing this.\n\n. I figured it out. It looks like JustMock gets in the way. I had to disable it and then this error went away.\n. ",
    "antonfirsov": "I had similar issue with an existing project after installing VS 2017 RC.\nFor me the solution was adding\u02db\"sdk\": {\"version\": \"1.0.0-preview2-003131\"} to global.json\n(Maybe this helps some googler in the future)\n. ",
    "bsagal": "thanks\n. ",
    "DandelionI": "@CodeWithVaibhav \nLog has written a very clear.\nVC_redist.x64.exe not be download.\nyou can download from: http://go.microsoft.com/fwlink/?LinkID=615460&\nThen reinstall DotNetCoreSDK\n. @laksh-parab  I also want to know.\nIf you know,Can you tell me why?\n. ",
    "CodeWithVaibhav": "Thanks Dandelioni,\nI have tried with VC_REDIST.x64.exe install before installing Dotnetcore\nSDK. But may be I have install VC_REDIST.x64.exe version 15.0, that's why\nthis issue not get resolve.\nI will check this version and let u know.\nThanks for reply.\nOn Mon, Sep 19, 2016 at 6:38 AM, Dandelioni notifications@github.com\nwrote:\n\nLog has written a very clear.\nVC_redist.x64.exe not be download.\nyou can download from: http://go.microsoft.com/fwlink/?LinkID=615460&\nThen reinstall DotNetCoreSDK\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/271#issuecomment-247896147, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ASwDjdeYx_bn9ta8pMorUQgLLJFD7A1eks5qreCWgaJpZM4J_13f\n.\n\n\nWith Regards,\nVaibhav A. Salwe\n. ",
    "laksh-parab": "I have to same issue, why we have to download dependency separately? why cant installer download it and installs it\n. ",
    "mrtrandinhvn": "Thanks @DandelionI , your solution works like a charm.\n\nyou can download from: http://go.microsoft.com/fwlink/?LinkID=615460&\nThen reinstall DotNetCoreSDK\n. \n",
    "FreezeSoul": "Thanks @DandelionI , your solution works for me too.\n. ",
    "TheDenys": "To install the latest SDK (Preview2 003133) and dotnet 1.0.1 runtime on clean Win2012R2 server it helped to install _Microsoft Visual C++ 2015 Redistributable Update 3\n_ from here https://www.microsoft.com/en-us/download/details.aspx?id=53587\nWithout VC package installer was failing.\n. ",
    "jbmckean": "I was unable to get past Error 0x80070490 until I temporarily disabled my firewall.\n. ",
    "Cage24": "Thanks @DandelionI , your solution works for me too.. ",
    "abhiphirke": "Thanks, Livar!\n. ",
    "iamsid": "Hi. Found any solution or workaround for this?\n. ",
    "yunfandev": "@iamsid only method, rollback to 5.1.0. ",
    "julianonunes": "In fact there is already a C# kernel project for iPython at https://github.com/zabirauf/icsharp, thus it has not been updated since May.\n. ",
    "milijan": "@julianonunes there is and I have not tried it on linux (nor on windows) with mono but it is my understanding that it targets windows (clue in the chm help file) and its GPL...\n. ",
    "cdrnet": "(there is also nicely working .Net kernel for F# - https://github.com/fsprojects/IfSharp)\n. Yes, I'm seeing this as well.\nIn my case, this is related to an ItemGroup along the lines of the following being added through a .targets file, for example as in the MathNet.Numerics.MKL.Win NuGet package:\n<ItemGroup>\n  <None Include=\"..\">\n    <Link ../>\n    <CopyToOutputDirectory../>\n  </None>\n</ItemGroup>\nSuch <None> items used to be hidden in earlier VisualStudio versions, now it seems they always show up. Should such libraries be packaged differently now?. In my case, with VS 15.6.0 Preview 5.0:\n\nC#/F#, SDK style, with PackageReference: files do show up\nC#, regular, with PackageReference: files do not show up\nF#, regular, with packages.config: files do not show up. If I add <Visible>False</Visible>, then the files no longer show up, but their folders are still visible as empty link folders (in my case the files are structured in an x64 and an x86 folder, using %(RecursiveDir) in the link). So it does not really help much to remove the noise.. \n",
    "PrashanthKarnam": "Hi @richlander \nDo we have support for C# applications targeting dotnet core using jupyter notebook ?\nThanks and Regards,\nPrashanth Karnam. ",
    "blowdart": "@danroth27 No - it's something entirely different. It's signing the request, with a preshared key. It's not something we support out of the box, but you should be able to do it with authorization middleware.\n. @Xavierh95 Do you mean something like https://github.com/blowdart/Idunno.WebApi.SharedKeyAuth, except for core?\n. I could look at porting my one. \n. There are no plans to publish on Windows Update unless it's an active 0-day exploit with a severity that requires such a process. That severity is decided by management.\n.NET Core and ASP.NET Core are published as advisories, not bulletins, because bulletins are linked to MSU patches.  The advisory is mirrored in the announcements repo for .net core and asp.net core and labeled as security. \n. @nicksav see https://github.com/aspnet/Announcements/issues/262. In .NET Core 1 we dropped a lot of dangerous stuff, and, well, customers complained bitterly, so they all came back in 2.0 to enable people to migrate. It's more complicated by the fact that you can use these things securely. Take for example encryption. Encrypting without adding an HMAC is problematic, but we have to expose the crypto primitives because that's what people want, the low level primitives. While there's some scope for static analysis to fix the simple things (don't use MD5, don't use Binary Formatter), there are still legitimate reasons for using both and people then just ignore the false positives, or disable any such analysis.\nWe can do some things at a higher level, take data protection in asp.net, we force all sorts of opinions on you there and it's secure by default, but because the primitives must be present people are always going to roll their own, and we simply can't stop that. Even sandboxing isn't going to help, we tried that with Code Access Security - but you can't implement it properly within a framework, it needs to be provided by the OS, not something that runs in the same process as your own code.. This issue was moved to aspnet/Security#1418. This was addressed in the security patch for October. Please update your runtime by following the instructions in https://github.com/dotnet/announcements/issues/34. The hosting instructions are located at https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?tabs=aspnetcore2x#install-the-net-core-windows-server-hosting-bundle - as you can see the hosting bundle is separate, and part of asp.net rather than .net core. \n@shirhatti you might want to see about making this more obvious.\n. This issue was moved to aspnet/Home#3293. The problem I guess is nessus has no way to tell if applications are targetting the older pieces, nor does anyone else, you'd have to delete that version from the store / fallback folder and see. Nor does nessus realise there are updated versions available for things that don't version match.\nThere's nothing we can do here unfortunately.. ",
    "xavier-heysch": "@blowdart Yes, or something like : http://www.codeguru.com/csharp/.net/net_asp/learn-to-secure-an-asp.net-web-api-using-hmac.html\n. ",
    "mani0070": "moved to tooling project\n. ",
    "yoyoys": "I Have this problem too, it's just happened on iis started the web application thread.\nWindows 10 IIS 10.0.14393.0\nASP.Net Core 1.1\nand my project.json\n\n\nand log\n\nit's happened when my iis sleep the site thread and re-open,\nand some of my content will trigger this exception.\ni just update the .net runtime to lastest(1.0.5 and 1.1.2),\nAnd it's still happened.\n. ",
    "allenz0810": "@richlander this issue still exist.\n. ",
    "patricknolan": "Would anyone know?\n. Could someone please provide an answer here? I'm guessing that no answer means that this very important capability has been overlooked in dotnetcore?\n. Does anyone know?. ",
    "Praburaj": "does anyone know the answer? . ",
    "nosider": "\nThis happens because you are attempting to load an assembly whose dependencies are not yet loaded and thus, since they cannot be found, we invoke the Resolving event again.\n\nThis would be the expected behaviour if further calls to the 'Resolving' event were attempting to load those not-yet-loaded dependencies. Unfortunately what seems to be happening is that the 'Resolving' event is called with the exact same AssembyName parameter, and not it's dependencies, causing the infinite loop. . @patricknolan \nBelow is a hack workaround for this issue. It's not pretty, but it works:\n```\nprivate static readonly object _lock = new object();\nAssemblyLoadContext.Default.Resolving += this.OnAssemblyResolve;\nprotected virtual Assembly OnAssemblyResolve(AssemblyLoadContext assemblyLoadContext, AssemblyName assemblyName)\n{\n    lock (_lock)\n    {\n        AssemblyLoadContext.Default.Resolving -= this.OnAssemblyResolve;\n        var assembly = assemblyLoadContext.LoadFromAssemblyName(assemblyName);\n        AssemblyLoadContext.Default.Resolving += this.OnAssemblyResolve;\n        if (assembly == null)\n        {\n            assembly = this.HandleDiscovery(assemblyName);\n        }\n        return assembly;\n    }\n}\n```\nYou should also want to put a try-catch on this to make sure that the event is re-added if there is an exception.. The issue can be reproduced with the following (as shown my @patricknolan ): \n```\nAssemblyLoadContext.Default.Resolving += this.OnAssemblyResolve;\nAssemblyLoadContext.Default.LoadFromAssemblyName(AssemblyThatCannotBeFoundByDefault);\nprotected virtual Assembly OnAssemblyResolve(AssemblyLoadContext assemblyLoadContext, AssemblyName assemblyName)\n{\n    var assembly = assemblyLoadContext.LoadFromAssemblyName(assemblyName);\n    if (assembly == null)\n    {\n        assembly = this.HandleDiscovery(assemblyName);\n    }\n    return assembly;\n}\n```\nThe issue as far as I can see is due to the following scenario:\nWhen AssemblyLoadContext fails to load an assembly (after calling Assembly.Load behind the scenes), the logic back to the Resolving event. If the Resolving event tries to fall-back to default resolving logic and in-turn calls the AssemblyLoadContext Load methods for the same AssemblyName, it will fail to load again, calling the Resolving event again, creating the infinite loop. \nIn the above code, the call assemblyLoadContext.LoadFromAssemblyName(assemblyName) will result in the infinite loop, since the fact that the event is being called, means the default logic failed to load the assembly. There is no infinite-loop detection logic in the assembly loading process.\nIt should probably be documented that the Resolving event is called only after the default assmebly loading fails (and not when it succeeds). It is not a way to override default assembly discovery.\n. Agreed.\nI believe the confusion stems from the name Resolving, where the developer is likely to assume that hooking into the event will have their logic called for every assembly load, overriding the default assembly discovery logic, while in-fact the event is only called after the default load logic failed (Does it get called when discovery succeeds but loading fails, or only when discovery fails?). If the event was called ResolvingFailed, it would be more intuitive to the developer, who is not intimately familiar with the workings of the framework, about the purpose of the event. . ",
    "radekpribyl": "Closing as I moved it to nuget\n. ",
    "z2xlong": "The new version works fine, thanks.\n. ",
    "diogodamiani": "Great! \nWill it be available at the following url like the other packages?\nhttps://download.microsoft.com/download/0/A/3/0A372822-205D-4A86-BFA7-084D2CBE9EDF/dotnet-dev-osx-x64.1.0.0-preview2-0031xx.pkg\nI'm asking because I'd like to update the brew cask formula, but the link is not working.\n. @leecow Thank you! In this case I need to use the final URL, as long as I know about casks. I submitted the pull request today. For future releases, how can I get the final URL without bothering you?\nRegards.\n. @leecow Oh! It's quite obvious! Sorry about the stupid question. :) Thanks!\n. ",
    "orhuncirakli": "Solved. Open the Programs and Features, then right click Microsoft Visual C++ 2015 Redistributable (x64), chose the \"Change\", click \"Repair\" and apply same process for Microsoft Visual C++ 2015 Redistributable (x86).\n. ",
    "vaindil": "Is that blog post supposed to be live? There's nothing on the .NET blog about 1.1.0.\nEDIT: Since posting this comment the article has been posted. Thanks!\n. The packages referenced in the release notes for Ubuntu downloads do not exist, at least in the xenial repository. Also the 16.10 section says Ubunt. :P\ntext\n$ apt-cache search dotnet\nlibgtk2.0-cil - CLI binding for the GTK+ toolkit 2.12\nlibgtk2.0-cil-dev - CLI binding for the GTK+ toolkit 2.12\nlibgtk-dotnet3.0-cil - GTK.NET library\nlibgtk-dotnet3.0-cil-dev - GTK.NET library - development files\ndotnet-dev-1.0.0-preview2-003121 - Microsoft .NET Core 1.0.0 - SDK Preview 2\ndotnet-dev-1.0.0-preview2-003131 - Microsoft .NET Core 1.0.1 - SDK 1.0.0 Preview 2-003131\ndotnet-dev-1.0.0-preview2.1-003155 - Microsoft .NET Core 1.1.0 Preview1 - SDK 1.0.0 Preview 2.1-003155\ndotnet-host - Microsoft .NET Core 1.1.0 - Host\ndotnet-hostfxr-1.0.1 - Microsoft .NET Core 1.0.0 - Host FX Resolver 1.0.1\ndotnet-hostfxr-1.1.0-preview1-001100-00 - Microsoft .NET Core 1.1.0 - Host FX Resolver 1.1.0-preview1-001100-00\ndotnet-sharedframework-microsoft.netcore.app-1.0.0 - Microsoft .NET Core 1.0.0 - Runtime Microsoft.NETCore.App 1.0.0\ndotnet-sharedframework-microsoft.netcore.app-1.0.1 - Microsoft .NET Core 1.0.1 - Runtime Microsoft.NETCore.App 1.0.1\ndotnet-sharedframework-microsoft.netcore.app-1.1.0-preview1-001100-00 - Microsoft .NET Core 1.1.0 - Runtime Microsoft.NETCore.App 1.1.0-preview1-001100-00\n. @leecow Helpful, definitely, but not quite the problem. Instructions say to run this command:\nsudo apt-get install dotnet-sdk-ubuntu.16.04-x64.1.0.0-preview2.1-003155\nbut that package does not exist so the command fails. I believe the correct command should be:\nsudo apt-get install dotnet-dev-1.0.0-preview2.1-003155\nInstalling that package resolved the error I was getting about 1.1.0 not being installed.\n. ",
    "MartinJohns": "\nThe current design is that dotnet new will create new projects for the latest .NET Core version installed. If you don\u2019t think that\u2019s the right choice, tell us what you would like to see.\n\nI think it should be the latest stable .NET Core version installed.\n. ",
    "kamcma": "Since the release notes say nothing about it, I'm assuming this preview does not remove the OpenSSL dependency in macOS?\n. ",
    "aggieben": "Chiming in on the dotnet new thing: why couldn't it be user-determined via command line switch?   i.e., dotnet new --sdk 1.1?  If we had that, having it pick the latest as the default would be just fine.\n. ",
    "tanaka-takayoshi": "dotnet new doesn't work on Fedora 24.\n- OS version\n$ cat /etc/fedora-release\n  Fedora release 24 (Twenty Four)\n- Repro steps\n$ dotnet new \n  Failed to initialize CoreCLR, HRESULT: 0x80131500\n- Repro code (if you can share it / is relevant)\n  N/A\n- Error messages\n  Failed to initialize CoreCLR, HRESULT: 0x80131500\n- Whether this worked before\n  Fedora 24 is newly supported at .NET Core 1.1 preview.\n- Method of installing .NET Core\n  https://github.com/dotnet/core/blob/master/release-notes/preview-download.md#installation-from-a-binary-archive\n$ wget https://go.microsoft.com/fwlink/?LinkID=831489 -O dotnet.gz\n  $ sudo mkdir -p /opt/dotnet\n  $ sudo tar zxf dotnet.gz -C /opt/dotnet\n  $ sudo ln -s /opt/dotnet/dotnet /usr/local/bin\n. @leecow Thanks for the confirmation. I'm looking forward to the final release.\n. @Petermarcu  Thanks, but it doesn't include dotnet SDK, only runtime. So I could try few things.\n. Do you have a plan to release Linux Package Manager version of .NET core 2.2 previews? I think your team has provided at 2.1 previews.\nhttps://www.microsoft.com/net/download/dotnet-core/2.1#runtime-2.1.0-preview2. As I commented to the blog, checksum text is not available.\nhttps://www.microsoft.com/net/download/dotnet-core/2.2\nhttps://www.microsoft.com/net/download/thank-you/dotnet-runtime-2.2.0-preview2-checksums\nhttps://www.microsoft.com/net/download/thank-you/dotnet-sdk-2.2.100-preview2-checksums. Also, Microsoft has closed the previous issue without any reply to my comment.\nhttps://github.com/dotnet/core/issues/1883#issuecomment-416857953\nI'd like to know your plan.. @vivmishra Thanks!\nI confirmed checksums are available. Also, thank you for sharing the plan.. ",
    "Ponant": "dotnet new produces the correct project.json, but creating a new ASP.NET Core (Core) from VS 2015 will generate the older 1.0 project.json; is that expected?\n. Issues with ASP.NET Core 2.0 Templates should go also here?. I have an issue with the ASP.NET Identity template, will follow your link.. question vs issue https://github.com/dotnet/core/issues/700 . @Petermarcu , I think it is still not in preview 2.... https://apisof.net/catalog/Microsoft.AspNetCore.Antiforgery.Internal. Antigforgery 2.0.0-preview2-final does not recognize yet Microsoft.AspNetCore.Antiforgery.Internal.CryptographyAlgorithms . @davidfowl , I need to strip out my project; give me some time.. @davidfowl , see class1, CryptographyAlgorithms is not recognized.\nhttps://github.com/Ponant/AntiforgeryCryptoInternalCore20Preview2. If you open the project and goto class1.cs, you should see the CultureCryptoService class that CryptographyAlgorithms \"does not exist in the current context\". Whereas I installed the preview 2 antiforgery nuget.. \n. OH that is strange, probably an upload issue. Here is my csproj on my desktop\n```\n\n\nnetstandard2.0\n\n\n\n\n\n```. @davidfowl , to answer your question, what I expect is CryptographyAlgorithms.cs to be public.\nhttps://raw.githubusercontent.com/aspnet/Antiforgery/master/src/Microsoft.AspNetCore.Antiforgery/Internal/CryptographyAlgorithms.cs. Are they expected to be in 2.0? thanks. ",
    "M-Curtis": "Windows 10\nCreate a new ASP .Net Core Web Application, update all template packages to prerelease.\nWhen running the page even with nothing changed the output window displays the errors\nThe program '[yyyy] dotnet.exe' has exited with code -2147450749 (0x80008083). \nThe program '[xxxx] iisexpress.exe' has exited with code 0 (0x0).\nYeah since then I've not been able to get my IIS to work even when deleting the IISExpres folder in documents and rebooting PC\nEdit: Yeah IIS doesn't work now even when downgrading all packages to stable release\nSecond Edit: For anyone else that does get this problem, I managed to fix it by going into my bin/debug/netcoreapp1.0 folder and deleting all files in there then deleting project.json and project.lock.json and copying in a fresh asp.net core template, project.json and project.lock.json and after restoring packages I no longer got this error.\n. ",
    "Jacfal": "Hi, OpenSUSE 42.1 link on \".NET Core 1.1 Preview 1 and .NET Core SDK 1.0 Preview 2.1\" (core/release-notes/preview-download.md) page is wrong. Link refers to the version without sdk. Can you fix it?\n. ",
    "rhires": "Feedback was requested on the \"dotnet new\" design choice for it using Preview 1 instead of 1.0. I think that perhaps you should add a command line option parameter for a version number if the default is not the choice you want. So \"dotnet new\" would give you the default most recent installed version, but if I explicitly want 1.0, then I can type \"dotnet new --version 1.0\" . As I write this, it seems roughly similar to dnvm. Maybe we could have that back in some form? \n. ",
    "BalassaMarton": "Using the 1.1.0 version of Microsoft.NETCore.App from the ASP.NET vNext myget feed (https://www.myget.org/F/aspnetvnext/api/v2) definitely causes this problem:\nThe program '[xxxx] dotnet.exe' has exited with code -2147450749 (0x80008083).\nThe program '[yyyy] iisexpress.exe' has exited with code 0 (0x0).\nUPDATE: The official 1.1.0 packages are working without problems of course.. ",
    "VahidN": "Is there a new version of the IIS Hosting module for .NET Core 1.1 RTM?\nI could find only this old page which is not for Windows Server Hosting 1.1 RTM.\n. ",
    "shirhatti": "@VahidN There is a new version of the ASP.NET Core Module for IIS for .NET Core 1.1 RTM. The download link is listed on https://www.microsoft.com/net/download/core. @leecow \n. This issue was moved to aspnet/AspNetCoreModule#104. We're aware that's it's pretty hard to find right now. There's a pending design update to the the .NET Core website which should make it better.\nAdditionally, there is already a doc bug tracking updating the doc you've linked to in this post.\ncc @rowanmiller for visibility\n. https://github.com/aspnet/Docs/issues/5505. @vivmishra Filed a separate issue to track that. This is an IIS thing.\nYou can remove by adding this to your web.config. This works on versions of Windows Server, version 1709 and newer.\nxml\n<configuration>\n  <system.webServer>\n     <security>\n       <requestFiltering removeServerHeader=\"true\" />\n     </security>\n  </system.webServer>\n</configuration>\n. I've seen this error manifest before when there's a conflicting port reservation via Http.Sys.\n@AndyFVesper Perhaps you have a conflicting IIS binding?. ",
    "CodingSamurai": "I was getting the same issue as @BalassaMarton when using the upgrade via NuGet functionality in Visual Studio.  Had to rollback the upgrade.. ",
    "Indyy66": "I have an app using .net core 1.1.0 and having a hell of a time getting the polyfills.ts file to be picked up by webpack or any part of the compile system. The application is required to work with IE11 and is currently hindered because of this issue.  I would say that my biggest issue, is where to place the file polyfills.ts in the project so that it will be compiled and bundled with the rest of the application?\nServer setup is Windows server 2012 with IIS 8.0, Development machine is Windows 10 with IIS 8.5. \nThe development tool is VS2017 latest updates 15.3+.\n. ",
    "patanne": "and... with a single stroke you just turned me off to the entire movement. \nwe have an enormous infrastructure of 32-bit servers that run just fine and will not be replaced earlier than for \"natural\" reasons, but still need regular improvement of management tools and utilities. while many believe in the saying, \"if it ain't broke redo it in javascript\", we take a more prudent approach to expenditures.\ni was getting amped up that FINALLY we'd have a ubiquitous development environment to target everything. years ago MS was abandoned on the server platform for linux. MS finally realized no one was coming back, so they brought their tools to where the party is, but now i learned they actually didn't.. ",
    "lemmaa": "@patanne , anyway, you can see activities to support Linux/x86 in https://github.com/dotnet/coreclr/issues/9265. :). @Petermarcu Tizen's first official .NET support is from version 4.0, which will be released this fall. This will supported from NuGet 4.3.0 client. As for the target architecture, currently Tizen only supports arm32. x64(or x86) will only be supported as an emulator environment for development convenience in the SDK.. @Petermarcu What does 'support' mean on this document? \nDoes it mean customer service or partner service? If so, it would be better to remove the [S] tag from Ubuntu/arm32. We do our best to ensure that .NET Core works properly on Ubuntu/arm32, but we have no plans to officially support Ubuntu/arm32 yet. For now, only Tizen is on that range. \nBut, if it means a leading contribution, that's good. We will do our best to be part of the .NET community. :). @Petermarcu, Thanks!. ",
    "jemiller0": "It does seem like a shame not to support 32 bit. I have an old PC that I was going to use for testing, but, then realized that it isn't supported. Even though I'm sure .NET Core would run fine on it.. ",
    "cahitbeyaz": "is there any progress on x32 builds. ",
    "Luo-Liang": "Thanks a lot! \ud83d\udc4d \n. ",
    "tmds": "I tried the dotnet.bootstrap.py tool on Fedora 25.\nWhat I found out:\n The tool does not take care of dependencies, which is okay because each repo does a pretty good job of reporting it's own dependencies. It means \"development mode\" is not exceptional but it is a typical part of bootstrapping. Why isn't this the 'only' mode?\n The script files which are created to debug a failing build step miss the execute flag. They need a manual chmod +x.\n Each time I restarted the tool, it downloaded the cli again saying \"Could not locate a payload at path ''\". Perhaps the tool can store the downloaded file as dotnet.tar.gz file and automatically use it if no other payload was provided?\n I don't get what the -nopatch is for. The goal of the tool is to patch? Or perhaps I don't understand what the nopatch does.\n I had to make some changes to the repositories which were already fixed on master due to the compiler being a more recent one. This is a normal part of bootstrapping.\n In the end, I had a dotnet. It managed to 'dotnet new' and 'dotnet restore'. But the 'dotnet build' hang. It was using msbuild. This was a bit of a surprise since there hasn't been an SDK release with msbuild. How does the tool chose a tar.gz file to download? And how does it chose the tags/branches of the different repositories it is using?\n At that point I decided to manually pick the fedora LTS release and provide it using the -payload option. It took me a bit longer to find on the dot.net website that it would for a Windows/Mac user. When running it providing the payload option I got an uncaught exception: \"SemanticVersion instance has no attribute 'find'\" of type .\n Not sure what to delete, I deleted the fedora.25-x64-dotnet folder to get things in order again. I didn't expect the src folder to be in there, so this accidentally caused me to delete the changes I made to the repositories. Perhaps the src folder can move up one level?\nAll in all, I liked how the tool helps bootstrapping. Using the scripts, it has a nice workflow a la \"bootstrap --continue\".. Second attempt of bootstrapping on Fedora 25.\nInstall Fedora 25\nUsed iso: https://download.fedoraproject.org/pub/fedora/linux/releases/25/Workstation/x86_64/iso/Fedora-Workstation-Live-x86_64-25-1.3.iso\nInstall dependencies\n$ sudo dnf -y install python cmake clang llvm libicu-devel lldb-devel libunwind-devel lttng-ust-devel libuuid-devel zlib-devel libcurl-devel krb5-devel openssl-devel automake libtool\nGet Rover\n$ git clone https://github.com/dotnet/core\n$ cd core\n$ git checkout bootstrap\n$ git rev-parse HEAD\nf895ac6b595ff03a22bd1278f803dbfe29c61e75\n$ cd tools/dotnet-bootstrap\nGet payload SDK\nUsing Fedora 24 .NET Core 1.1 SDK:\n$ curl -sSL -o dotnet.tar.gz https://go.microsoft.com/fwlink/?LinkID=835025\nSelect your branches\n$ mkdir -p fedora.25-x64-dotnet/src\n$ cd fedora.25-x64-dotnet/src\n$ git clone https://github.com/dotnet/corefx\n$ cd corefx\n$ git checkout release/1.1.0\n$ git rev-parse HEAD\n639eeadbf43c0b2be334ea0ee83ae9da2ca03578\n$ cd ..\n$ git clone https://github.com/dotnet/coreclr\n$ cd coreclr\n$ git checkout release/1.1.0\n$ git rev-parse HEAD\n673561935b3112e1128392b61b4e974f1b04545c\n$ cd ../..\nI let rover pick branches for libuv and core-setup:\ncore-setup at v1.1.0 (928f77c4bc3f49d892459992fb6e1d5542cb5e86)\nlibuv at v1.9.0 (229b3a4cc150aebd6561e6bd43076eafa7a03756)\nBootstrap\n$ ./dotnet.bootstrap.py -payload dotnet.tar.gz\n...\n** ROVER spawned a 'dotnet' in ./fedora.25-x64-dotnet/bin/(enjoy!)\nDoes it work?\nEdited:\nFirst time I tried this dotnet new;dotnet restore;dotnet run got stuck compiling.\nRetried everything from scratch after merge (core at 1f2bab73c10142fbdc4f851124f52b4eeb906d9e) with same versions for coreclr, corefx, libuv and core-setup and it was working fine. Unclear what the root cause was for the fail.. The compiler process is loading the cpu:\n/home/tmds/repos/core/tools/dotnet-bootstrap/fedora.25-x64-dotnet/bin/dotnet /home/tmds/repos/core/tools/dotnet-bootstrap/fedora.25-x64-dotnet/bin/sdk/1.0.0-preview2-1-003177/csc.dll -noconfig @/tmp/hwapp/obj/Debug/netcoreapp1.1/dotnet-compile-csc.rsp\nstrace shows continuous calls to sigprocmask:\nrt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0\nrt_sigprocmask(SIG_SETMASK, ~[RTMIN RT_1], [], 8) = 0\nrt_sigprocmask(SIG_SETMASK, ~[RTMIN RT_1], ~[KILL STOP RTMIN RT_1], 8) = 0\nrt_sigprocmask(SIG_SETMASK, ~[KILL STOP RTMIN RT_1], NULL, 8) = 0\nrt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0\nrt_sigprocmask(SIG_SETMASK, ~[RTMIN RT_1], [], 8) = 0\nrt_sigprocmask(SIG_SETMASK, ~[RTMIN RT_1], ~[KILL STOP RTMIN RT_1], 8) = 0\nrt_sigprocmask(SIG_SETMASK, ~[KILL STOP RTMIN RT_1], NULL, 8) = 0\nrt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0\nrt_sigprocmask(SIG_SETMASK, ~[RTMIN RT_1], [], 8) = 0\nrt_sigprocmask(SIG_SETMASK, ~[RTMIN RT_1], ~[KILL STOP RTMIN RT_1], 8) = 0\nrt_sigprocmask(SIG_SETMASK, ~[KILL STOP RTMIN RT_1], NULL, 8) = 0\nrt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0\nrt_sigprocmask(SIG_SETMASK, ~[RTMIN RT_1], [], 8) = 0\nrt_sigprocmask(SIG_SETMASK, ~[RTMIN RT_1], ~[KILL STOP RTMIN RT_1], 8) = 0\nrt_sigprocmask(SIG_SETMASK, ~[KILL STOP RTMIN RT_1], NULL, 8) = 0\nstacktrace:\n```\n0  0x00007f77e4194c20 in sigprocmask () from /lib64/libc.so.6\n1  0x00007f77e29d2475 in _Ux86_64_dwarf_find_proc_info ()\nfrom /lib64/libunwind-x86_64.so.8\n2  0x00007f77e29cea7d in fetch_proc_info () from /lib64/libunwind-x86_64.so.8\n3  0x00007f77e29d069f in _Ux86_64_dwarf_find_save_locs ()\nfrom /lib64/libunwind-x86_64.so.8\n4  0x00007f77e29d1959 in _Ux86_64_dwarf_step ()\nfrom /lib64/libunwind-x86_64.so.8\n5  0x00007f77e29ca2c1 in _Ux86_64_step () from /lib64/libunwind-x86_64.so.8\n6  0x00007f77e36e94bc in PAL_VirtualUnwind ()\nfrom /home/tmds/repos/core/tools/dotnet-bootstrap/fedora.25-x64-dotnet/bin/shared/Microsoft.NETCore.App/1.1.0/libcoreclr.so\n7  0x00007f77e335da19 in Thread::VirtualUnwindToFirstManagedCallFrame(_CONTEXT*) ()\nfrom /home/tmds/repos/core/tools/dotnet-bootstrap/fedora.25-x64-dotnet/bin/shared/Microsoft.NETCore.App/1.1.0/libcoreclr.so\n8  0x00007f77e3481843 in DispatchManagedException(PAL_SEHException&, bool) ()\nfrom /home/tmds/repos/core/tools/dotnet-bootstrap/fedora.25-x64-dotnet/bin/shared/Microsoft.NETCore.App/1.1.0/libcoreclr.so\n9  0x00007f77e350c522 in PreStubWorker ()\nfrom /home/tmds/repos/core/tools/dotnet-bootstrap/fedora.25-x64-dotnet/bin/shared/Microsoft.NETCore.App/1.1.0/libcoreclr.so\n10 0x00007f77e348f0d8 in ThePreStub ()\n```\nI ran the coreclr pal testsuite:\n$ ./build.sh release skipmscorlib skipgenerateversion\n...\n$ src/pal/tests/palsuite/runpaltests.sh `pwd`/bin/obj/Linux.x64.Release\n...\nPAL Test Results:\n  Passed: 808\n  Failed: 0. @janvorli I tried to provide some debug info already. Please let me know if you need something else.. I am unable to reproduce this. Using the versions listed here: https://github.com/dotnet/core/pull/326#issuecomment-262479168 I now get a working dotnet.. > Those 1 million instances are fix and only generated once.\nThe repro code is not re-using the list across request.\nOn Linux, the time is spent building the list.\nvar startTime = Environment.TickCount;\n                list = new PrintOutList();\n                list.Build(1000000);\n                System.Console.WriteLine($\"Building list took {Environment.TickCount - startTime}ms\");\noutputs\nBuilding list took 14672ms\nThe reproduces on Fedora 25 using .NET Core 2.0.. Replacing Guid.NewGuid() with Guid.Empty makes it work fast.. @wfurt, @jchannon is installing from Microsoft feed. Are those packages missing?. The RHEL rpms are available, you can install and use .NET Core 2.1 as follows:\n$ sudo yum install rh-dotnet21 -y\n$ scl enable rh-dotnet21 bash\nRHEL container images (and documentation) are expected in 1 to 2 weeks.. @johnmelodyme an example:\nCreate a web webapplication\ndotnet new web -o webapp\ncd webapp\nPublish it:\ndotnet publish -c Release\nCopy the publish folder to your server (/tmp/myserver represents a folder on the server):\ncp -r bin/Release/netcoreapp2.2/publish /tmp/myserver\nOn the server:\ncd /tmp/myserver\nASPNETCORE_URLS=http://*:8080 dotnet webapp.dll\n\nyou mustn't use dotnet run on your server, that command is for development.\nuse the ASPNETCORE_URLS environment variable to configure the binding address. > It worked sir\n\nGreat!\n\n''According to visual i got 136 error in just this code. OMG\"\n\nTake some time to learn to understand the IDE and compiler. Start from a working version and see when it starts to fail. Version control can be helpful to help you keep track of things that work.\nCan you close the issue?. Locking files is indeed a mess on Linux.\nThe OS doesn't check the permissions on read/write, and everything is left over to the applications. So non .NET Core applications won't respect the FileShare unless they are using the same APIs.\nMaybe we can add an envvar that disables the locking.\n@Nanook Maybe your NAS logs give some hint about why the locking is taking so long.. > I was told at dotnet/corefx#32730 that System.Net.Http being version 4.3.0 in .NET Core is a false positive. I have verified locally that this is indeed the case - the System.Net.Http.dll from the .NET Core installation is used. How does .NET Core decide to both download 4.3.0 from nuget, but decide to use the version inbox in .NET Core?\nThe sdk ends up with a number of possible assemblies and then picks what it considers the best.\nEach assembly is turned into a:\n```c#\n    internal enum ConflictItemType\n    {\n        Reference,\n        CopyLocal,\n        Runtime,\n        Platform\n    }\ninternal interface IConflictItem\n{\n    Version AssemblyVersion { get; }\n    ConflictItemType ItemType { get; }\n    bool Exists { get; }\n    string FileName { get; }\n    Version FileVersion { get; }\n    string PackageId { get; }\n    string DisplayName { get; }\n\n    Version PackageVersion { get; }\n\n}\n```\nand the code https://github.com/dotnet/sdk/tree/master/src/Tasks/Common/ConflictResolution picks the proper assembly based on the type, assemblyversion, etc.\n\nWhere is this version 4.3.0 defined in (ASP).NET Core? Can we bump it to 4.3.4 or something similar to remove a false positive for anything that tries to check for CVE-2018-8292.\n\nIf you look in the yourapp.deps.json file you can follow the breadcrumbs to System.Net.Http 4.3.0: Microsoft.AspNetCore.App  -> Microsoft.AspNetCore.Authentication.JwtBearer -> Microsoft.IdentityModel.Protocols.OpenIdConnect -> Microsoft.IdentityModel.Protocols -> System.Net.Http. All those packages would have to be republished for the false positive to no longer appear.\n\nIs there a list of other packages that exist on nuget.org but are also available inbox where the inbox version is always preferred?\n\nNote sure where this is. It may be the file in the sdk at sdk/2.2.103/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.DefaultPackageConflictOverrides.targets.\nOr maybe it's the Microsoft.NETCore.App.PlatformManifest.txt file in the Microsoft.NETCore.App package.. > There are several different things we take into consideration when getting the winner, but in this particular case, we just check the Assembly Version of the inbox assembly and the one from the NuGet package, and the inbox one was choosen because it has a higher assembly version.\nAt some point the SDK also trims away assemblies which are part of the 'shared framework'. Is this part of conflict resolution?\nCould an assembly from a nuget package 'override' a shared framework assembly if it as a higher assembly version?\nCan you give some more info on the version numbers used? System.Net.Http has a version number for the NuGet package. In that NuGet package there are a number of assemblies, which each have their own version number. And then there is for each version of .NET Core also an assembly version number. How do you pick these different version numbers so they work well together?. ",
    "joaomello": "Yes, because with the code from post I can read WSDL, create my client and use it dynamic. But not with .net core.. I don't know if I'm doing in the best way this. I downloaded all wsdl from server and compile the client at runtime. Because Url can change (about 32 times) for same service/method, and I don't want to compile or add reference for each one, it's one of reasons.\nFor example my code: (I did in this way, because it was that worked for me.)\n```C#\nprivate void Teste()\n{\n    var ass = CriarAssemblie(wsdl);\n    dynamic service = Activator.CreateInstance(ass.GetType(\"Type1\"));\n}\nprivate Assembly CreateAssembly(Stream wsdlFile)\n{\n    var serviceDescription = ServiceDescription.Read(wsdlFile);\n    StringWriter strWriter = new StringWriter(CultureInfo.CurrentCulture);\n    CSharpCodeProvider cProvider = new CSharpCodeProvider();\n    cProvider.GenerateCodeFromNamespace(GerarNameSpace(serviceDescription), strWriter, null);\nstring codigoClasse = strWriter.ToString();\n\nCompilerParameters parameters = new CompilerParameters(new string[] { \"System.dll\", \"System.Xml.dll\", \"System.Web.Services.dll\", \"System.Data.dll\" });\nparameters.GenerateExecutable = false;\nparameters.GenerateInMemory = true;\nparameters.TreatWarningsAsErrors = false;\nparameters.WarningLevel = 4;\n\nCompilerResults results = cProvider.CompileAssemblyFromSource(parameters, codigoClasse);\nreturn results.CompiledAssembly;\n\n}\nprivate CodeNamespace GerarNameSpace(ServiceDescription serviceDescription)\n{\n    var importer = new ServiceDescriptionImporter();\n    importer.AddServiceDescription(serviceDescription, string.Empty, string.Empty);\n    importer.CodeGenerationOptions = CodeGenerationOptions.GenerateProperties;\nvar @namespace = new CodeNamespace();\nvar unit = new CodeCompileUnit();\nunit.Namespaces.Add(@namespace);\nimporter.Import(@namespace, unit);\n\nreturn @namespace;\n\n}\nXDocument parseXmlDocument(XmlElement ele)\n{\n    var xml = new XmlDocument();\n    xml.LoadXml(ele.OuterXml);\nreturn xml;\n\n}\n```\nAnd I'm trying to do this at .net core, to run on linux.. ",
    "MiyamuraMiyako": "@joaomello Hi, What namespace have ServiceDescription class in dot net core, I can't find it.. @dasMulli I run msbuild -r, but seems not use netcore3.0 sdk to build:\n```ps\nD:\\HLST\\\u66f4\u65b0\u7a0b\u5e8f\\UpDateClient>dotnet --version\n3.0.100-preview-009812\nD:\\HLST\\\u66f4\u65b0\u7a0b\u5e8f\\UpDateClient>msbuild -r\n\u7528\u4e8e .NET Framework \u7684 Microsoft (R) \u751f\u6210\u5f15\u64ce\u7248\u672c 15.9.20+g88f5fadfbe\n\u7248\u6743\u6240\u6709(C) Microsoft Corporation\u3002\u4fdd\u7559\u6240\u6709\u6743\u5229\u3002\n\u751f\u6210\u542f\u52a8\u65f6\u95f4\u4e3a 2018/12/5 18:25:53\u3002\nD:\\HLST\\\u66f4\u65b0\u7a0b\u5e8f\\UpDateClient\\UpDateClient.csproj : error : C:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk.Wind\nowsDesktop\\Sdk not found. Check that a recent enough .NET Core SDK is installed and/or increase the version specified i\nn global.json.\nD:\\HLST\\\u66f4\u65b0\u7a0b\u5e8f\\UpDateClient\\UpDateClient.csproj : error : C:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk.Wind\nowsDesktop\\Sdk not found. Check that a recent enough .NET Core SDK is installed and/or increase the version specified i\nn global.json.\n\u8282\u70b9 1 \u4e0a\u7684\u9879\u76ee\u201cD:\\HLST\\\u66f4\u65b0\u7a0b\u5e8f\\UpDateClient\\UpDateClient.csproj\u201d(\u9ed8\u8ba4\u76ee\u6807)\u3002\nD:\\HLST\\\u66f4\u65b0\u7a0b\u5e8f\\UpDateClient\\UpDateClient.csproj : error MSB4236: \u627e\u4e0d\u5230\u6307\u5b9a\u7684 SDK\u201cMicrosoft.NET.Sdk.WindowsDesktop\u201d \u3002\n\u5df2\u5b8c\u6210\u751f\u6210\u9879\u76ee\u201cD:\\HLST\\\u66f4\u65b0\u7a0b\u5e8f\\UpDateClient\\UpDateClient.csproj\u201d(\u9ed8\u8ba4\u76ee\u6807)\u7684\u64cd\u4f5c - \u5931\u8d25\u3002\n\u751f\u6210\u5931\u8d25\u3002\nD:\\HLST\\\u66f4\u65b0\u7a0b\u5e8f\\UpDateClient\\UpDateClient.csproj : error : C:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk.Wi\nndowsDesktop\\Sdk not found. Check that a recent enough .NET Core SDK is installed and/or increase the version specified\n in global.json.\nD:\\HLST\\\u66f4\u65b0\u7a0b\u5e8f\\UpDateClient\\UpDateClient.csproj : error : C:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk.Wi\nndowsDesktop\\Sdk not found. Check that a recent enough .NET Core SDK is installed and/or increase the version specified\n in global.json.\n\u201cD:\\HLST\\\u66f4\u65b0\u7a0b\u5e8f\\UpDateClient\\UpDateClient.csproj\u201d(\u9ed8\u8ba4\u76ee\u6807) (1:2) ->\n  D:\\HLST\\\u66f4\u65b0\u7a0b\u5e8f\\UpDateClient\\UpDateClient.csproj : error MSB4236: \u627e\u4e0d\u5230\u6307\u5b9a\u7684 SDK\u201cMicrosoft.NET.Sdk.WindowsDesktop \u201d\u3002\n0 \u4e2a\u8b66\u544a\n3 \u4e2a\u9519\u8bef\n\n\u5df2\u7528\u65f6\u95f4 00:00:00.10\n```\n. ",
    "lee576": "\n@joaomello Hi, What namespace have ServiceDescription class in dot net core, I can't find it.\n\nme too. ",
    "slang25": "This had me confused\n. ",
    "shaunluttin": "What will it take to merge this PR?\n. Lol. Why not merge those fixes? It's been three days and the code review is trivial.\n. ",
    "nietras": "@Petermarcu you can see this for yourself at:\nhttps://github.com/dotnet/corefx/blob/master/src/System.Runtime.CompilerServices.Unsafe/src/System.Runtime.CompilerServices.Unsafe.il#L242\nhttps://github.com/dotnet/corefx/blob/master/src/System.Runtime.CompilerServices.Unsafe/src/System.Runtime.CompilerServices.Unsafe.il#L234\nhttps://github.com/dotnet/corefx/blob/master/src/System.Runtime.CompilerServices.Unsafe/src/System.Runtime.CompilerServices.Unsafe.il#L277\nReturn is \"!!T&\", I assume this might be due to a tool, generating these diffs, that does not support ref returns.\n. ",
    "AdrienTorris": "I had the same problem, .NET Core 1.1 SDK wasn't installed. You can use the command dotnet --info in the Package Manager Console to have the version of the dotnet framework your project uses (if it's not 1.1.0, the framework isn't installed). To know if you have correctly install the .NET Core 1.1 SDK, you can also open the windows program and features and check if 1.1.0 SDK is installed.. @hugosmarques The extension is available with LINQ. @hugosmarques Yes it has. This is working :\nDataTable products = ...\nproducts.AsEnumerable().Select(x => x[\"COLUMN1\"]);\nand allows something like :\nList<string> productRefs = products.AsEnumerable().Select(x => x[\"Ref\"].ToString()).ToList();. I don't think so. The project file is different between .NET Core 1.x and .NET Core 2.0. Every communication from Microsoft about the preview of .NET Core 2.0 mentions Visual Studio 2017, so I think it's highly recommanded to use Visual Studio 2017 to work with .NET Core 2.0.. ",
    "charlesbetros": "Duplicate\n. ",
    "benaadams": "Try adding an imports section to project Alfa's project.json\ncsharp\n    \"netcoreapp1.0\": {\n      \"imports\": [\n        \"dotnet5.6\",\n        \"portable-net45+win8\"\n      ]\n    }. Like the open sourced ILMerge? https://github.com/Microsoft/ILMerge\nThough .NET Core and corefx itself is uses the mono linker which the .NET Core version itself is called IILLink https://github.com/mono/linker/pull/25 so that may work better?. Most of the time seems to be in time_starttransfer on the linux versions?. @IssueWorld you should raise an issue in https://github.com/dotnet/coreclr about NewGuid being slow on the platforms you have noticed it on.. Add it as a param to Configure and it will pick up that you need it and inject it (i.e. use the same signature for Configure you were using before)\nAssuming you need it; as you can still inject it into your classes without picking it up in Configure, unless you need it for something specific in that function.. Do you want aspnet 3.0 roadmap? You may want to raise issue in https://github.com/aspnet/Home\nYou may also want to look at Introduction to Razor Pages in ASP.NET Core and tutorial Getting started with Razor Pages in ASP.NET Core . /cc @csharpfritz. Very nice \nBefore linking (B)   After linking (B)    Size decrease\n-----------                 -----------          -----------          -----------\nTotal size of assemblies    48,494,336           15,093,496           68.88%\n-----------                 -----------          -----------          -----------\nThough it doesn't touch\nSystem.Private.CoreLib.dll  11,860,184           11,860,184           0.00%\nOr any Microsoft.AspNetCore libs, is this because the versions I'm referencing are precompiled native libs in the runtime cache; rather than pure il? If so maybe call this out?. Binary Serialization (using BinaryFormatter) is problematic and wasn't included in .NET Core originally. However, has come back with 2.0 as part of matching the .NET Standard 2.0 api set.\nHowever all help pages about Binary Serilization carry this warning\n\nBinary serialization can be dangerous. Never deserialize data from an untrusted source and never round-trip serialized data to systems not under your control.\n\nAnd suggest always using a different type of serialization (e.g. JSON, protobuf, xml etc)\nSecure Coding Guidelines has the following recommendation\n\nSecuring Resource Access\nWhen designing and writing your code, you need to protect and limit the access that code has to resources, especially when using or invoking code of unknown origin. So, keep in mind the following techniques to ensure your code is secure:\n\nDo not use Code Access Security (CAS).\nDo not use partial trusted code.\nDo not use .NET Remoting.\nDo not use Distributed Component Object Model (DCOM).\nDo not use binary formatters.\n\nCode Access Security and Security-Transparent Code will not be supported as a security boundary with partially trusted code. We advise against loading and executing code of unknown origins without putting alternative security measures in place. The alternative security measures are:\n\nVirtualization\nAppContainers\nOperating system (OS) users and permissions\nHyper-V containers\n\n\nWCF has a long section on Security Considerations for Data that's probably worth reading as its recommendations are applicable to more areas than just WCF.\n/cc @blowdart . It seems to be fixed in corefx?\nhttps://github.com/dotnet/corefx/blob/master/src/System.Linq/src/System/Linq/Single.cs\nHowever, for a performance improvement, you should be able to just open and Issue in the repository that has the source or open a PR change.\nAlthough what reference source shows is the code for full framework/desktop so it could probably still do with this change (or to pick up corefx's Linq code). System.Net.Http.WinHttpException: Not enough storage is available to process this command\nThat's a pretty weird exception (message)\n  . Similar message https://github.com/dotnet/corefx/issues/24139\nSeems to be a ERROR_NOT_ENOUGH_MEMORY message; probably should say that rather than storage.\nThough that's an aside.... Might want to add that to description and leave open?. If you install the .NET SDK directly? https://www.microsoft.com/net/learn/get-started/windows. Install seems to fail\nAcquiring container: WixAttachedContainer, copy from: D:\\Apps\\dotnet-sdk-2.1.4-win-x86.exe\nSetting string variable 'WixBundleLastUsedSource' to value 'D:\\Apps\\'\nError 0x80070570: Failed to extract all files from container, erf: 1:4:0\nError 0x80070570: Failed to begin and wait for operation.\nError 0x80070570: Failed to extract payload: a4 from container: WixAttachedContainer\nFailed to extract payloads from container: WixAttachedContainer to working path: \nC:\\Users\\AHMEDM~1\\AppData\\Local\\Temp\\{825D08DF-531B-4C33-8B90-0E64863E7EFE}\\4286601885F9C70FEE9CE9F7D74131D11BA0AA22, error: 0x80070570.\nError 0x80070570: Cache thread exited unexpectedly.. Closest I can see is https://github.com/dotnet/cli/issues/6218. C:\\Program Files\\dotnet\\host\\fxr\\2.0.5\\hostfxr.dll\nAh... do you have 2.0.5 installed? Seems to be what its looking for.... Or check your csproj and see if its referencing to specific runtime version; other than netcoreapp2.0. I think its by design https://github.com/dotnet/corefx/issues/26293, try using Ordinal \ncsharp\nConsole.WriteLine(lLine1.IndexOf(lSOH1, StringComparison.Ordinal));\n instead. One Windows you can use the NuGet Package Microsoft.Windows.Compatibility https://docs.microsoft.com/en-us/dotnet/core/porting/windows-compat-pack which will give you access to System.Drawing\nOr you could use something like SixLabors.ImageSharp which is fully .NET Standard and on NuGet\n. Might want ti open this issue in https://github.com/aspnet/KestrelHttpServer. May also be related https://github.com/Microsoft/msbuild/pull/2384. The Microsoft.AspNetCore.All meta package is 159 dlls and uses the local runtime cache (which is installed with 2.1) so I believe this is intentional.\nOTOH you should be able to use the individual packages directly on netcoreapp2.0 and net47x as they are netstandard2.0. Install the new version of the SDK? https://www.microsoft.com/net/download/ .NET Core  2.1 SDK v2.1.300\nThat should also update the templates for any new projects you create.\nFor existing projects (upgarde) in their .csproj files change \n<TargetFramework>netcoreapp2.0</TargetFramework>\nTo\n<TargetFramework>netcoreapp2.1</TargetFramework>\nMore detailed instructions are provided here: https://docs.microsoft.com/en-us/aspnet/core/migration/20_21?view=aspnetcore-2.1\nHTH. Might have console logging at Information level? (There are faster forms of logging)\nTry switching reducing it to Warning off by adding a appsettings.json file\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Warning\"\n    }\n  }\n}\nAlso ensure you are using Server GC; the top of your .csproj should have .Web at the end\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\nAlso you are running the published dll?\ndotnet bin\\release\\netcoreapp2.1\\publish\\myapp.dll. The issue with Console logging is it has a lock on the output so only one thing can Write at a time (also is slow); coupled with Information level being very verbose. Opened issue  https://github.com/aspnet/Home/issues/3473. > As an interesting aside, tracking the memory consumption reveals that this hello world example consumed around 127mb of pageable memory at it's peak and opened 729 process handles. \nAdd to your .csproj\nxml\n<PropertyGroup>\n  <ServerGarbageCollection>false</ServerGarbageCollection>\n</PropertyGroup>\nAnd it should use less memory; though also not support as high a throughput. > What are the side effects of using that property? \nServer Garbabge collection runs on all cores; uses multiple allocating heaps and much larger triggering threasholds; it operates as if the machine is dedicated to running\n@sebastienros did a good overview on this week's ASP.NET Community Standup: https://youtu.be/DiqqlDPfch4?t=49m51s\nAlso he has done a write up at: https://github.com/sebastienros/memoryleak\n. > I find it so strange that disabling Server Garbage Collection which is supposed to facilitate high throughput and scalability, actually improves performance here.\nMight be freeing up resources for the benchmarker to run as you are running them both on the same machine (the Server GC also uses all cores when it runs). For graphics you can use https://github.com/mellinoe/veldrid (which is .NET Standard and runs on .NET Core)\nDo you mean a game engine?. Should be better in 2.2 with tiered compilation? https://github.com/dotnet/coreclr/issues/18973. Might want to file it here: https://github.com/aspnet/AspNetCore. Can use Clear()?. > The source code of the project is attached.\nIsn't attached anywhere?. Probably want to open issue in AspNetCore repo? https://github.com/aspnet/AspNetCore/issues. > can you mention one case where using vectors will boost the speed compared to arrays? \nShorter arrays; accessing 256MB is going to dominate over the CPU instructions for that size of array as it can't fit into CPU cache\nhttps://gist.github.com/jboner/2841832\n```\nLatency Comparison Numbers (~2012)\n\nL1 cache reference                           0.5 ns\nBranch mispredict                            5   ns\nL2 cache reference                           7   ns                      14x L1 cache\nMutex lock/unlock                           25   ns\nMain memory reference                      100   ns                      20x L2 cache, 200x L1 cache\nCompress 1K bytes with Zippy             3,000   ns        3 us\nSend 1K bytes over 1 Gbps network       10,000   ns       10 us\nRead 4K randomly from SSD*             150,000   ns      150 us          ~1GB/sec SSD\nRead 1 MB sequentially from memory     250,000   ns      250 us\n. At most ugly and using Unsafecsharp\npublic static int[] SIMDArrayAddition(int[] lhs, int[] rhs)\n{\n    if (lhs.Length > rhs.Length)\n    {\n        throw new ArgumentOutOfRangeException();\n    }\n    else if ((lhs.Length & (Vector.Count - 1)) != 0)\n    {\n        throw new ArgumentOutOfRangeException(\"Not a multiple of vector length\");\n    }\n    else if (lhs.Length == 0)\n    {\n        return Array.Empty();\n    }\nvar result = new int[lhs.Length];\n\nref var resultStart = ref result[0];\nref var lhsStart = ref lhs[0];\nref var rhsStart = ref rhs[0];\n\nfor (var i = 0; i <= (result.Length - Vector<int>.Count); i += Vector<int>.Count)\n{\n    var va = Unsafe.ReadUnaligned<Vector<int>>(ref Unsafe.As<int, byte>(ref Unsafe.Add(ref lhsStart, i)));\n    var vb = Unsafe.ReadUnaligned<Vector<int>>(ref Unsafe.As<int, byte>(ref Unsafe.Add(ref rhsStart, i)));\n    ref var r = ref Unsafe.As<int, Vector<int>>(ref Unsafe.Add(ref resultStart, i));\n    r = (va + vb);\n}\nreturn result;\n\n}\nGive you an inner loop ofasm\nG_M40479_IG07:\n       movsxd   r9, r8d\n       shl      r9, 2\n       vmovupd  ymm0, ymmword ptr[rdi+r9]\n       vmovupd  ymm1, ymmword ptr[rsi+r9]\n       add      r9, rdx\n       vpaddd   ymm0, ymm1\n       vmovupd  ymmword ptr[r9], ymm0\n       add      r8d, 8\n       cmp      ecx, r8d\n       jge      SHORT G_M40479_IG07\n. Tried switching off `TieredCompilation`\nset COMPlus_TieredCompilation=0\n```. Probably want to raise in https://github.com/aspnet/AspNetCore\nThough announcement issue for it https://github.com/aspnet/Announcements/issues/347 and discussion on change https://github.com/aspnet/AspNetCore/issues/8117. ",
    "gimlichael": "Now this is weird; after to much frustration, I pulled the plug and restarted the machine.\nThe problem seems to have disappeared?!\nMaybe NuGet caching issue or similar?\nAlso, a folder (which I cannot delete) has emerged in my project: \n\nUnknown.zip\n. I believe there is a bug hidden somewhere in Visual Studio 2017, but I don't believe there is a problem with the ASP.NET Core 1.1 anymore. Also, I learned that an EmptyResult() is the way to go in terms of 304 response. You can decide if the VS 2017 team should know about this odd behavior or not :-). ",
    "ciel": "This behavior is affecting me all over too, and I'm having a lot of trouble with it. I can't pin down exactly what is wrong, but it seems to happen when I reference one project in another within the same solution.\nI'm a novice, so I'm not fully aware of how it all works, but it is only happening with classes and such in my own code. Things from the GAC and NuGet don't appear affected.\nWill try to make reproduction steps and post them here. This is really frustrating, though. I know it's just a release candidate and not the RTM, so I should expect bugs, but this is a pretty critical one.\nUntil I can sit down and work out greater specifics in a bit, this is how I've reproduced it before... I'm using net46 because it's what I was on when I first began to encounter it, but I can repro this in net45[1,2] as well as netstandard1.[5,6,7] and netcoreapp1.0 as well.\n1) create a new project Class Library (.NET Standard)\n2) open the csproj and change the FTM to net46\n3) create a new class or two.\n4) create another project Class Library (.NET Standard) in the same solution.\n5) create a new class or two in the new project\n6) in the solution explorer, navigate to the References node, right click it and select Add Reference\n7) start creating code in the project that references the other project, making sure you use the classes in both\n8) hit build a few times.\nAt first, it appears fine - but after some point, it begins to start underlining my classes and says \"Ambiguous Reference\" when I hover over them.\nI'll try to prepare a video, too. I'm pretty sure this is a problem with Visual Studio 2017 RC, not .NET Core specifically though. But I'm not completely sure where to file this bug for the Visual Studio team.. ",
    "wcdeich4": "I had a similar error.  As an experiment, I created a \"Class Library (.NET Core)\" project in Visual Studio Enterprise 2015 & tried to add OpenTK & I got this error:\nErrors in C:\\CODE\\WinOpenGL\\OpenTKExamples.NETCore\\Entities\\Entities.xproj\nPackage OpenTK 2.0.0 is not compatible with netstandard1.6 (.NETStandard,Version=v1.6). Package OpenTK 2.0.0 supports: net20 (.NETFramework,Version=v2.0)\nWhen do you think .NET Core will be at least up to .NETFramework, Version = v2.0 ?. ",
    "cydhaselton": "Thanks for the info; I'll add the instruction when I'm in the office next. ",
    "justdmitry": "Workaround: add Microsoft.DotNet.InternalAbstractions to test dependencies manually (https://github.com/xunit/xunit/issues/1015). ",
    "wvandeneede": "Updated as suggested, works now\n. ",
    "psoszynski": "Ok, I will do it.. ",
    "RassulYunussov": "Dear Stephen,\nShame on me, my mistake! So sorry!. ",
    "Messilimeng": "@svick  I changed  library to target netstandard1.6 It works But when it install completed  the target netstandard return to 1.4\n\nMicrosoft Visual Studio\n\u9879\u76ee\u7cfb\u7edf\u9047\u5230\u9519\u8bef\u3002\nCould not resolve mscorlib for target framework '.NETStandard,Version=v1.6'.  This can happen if the target framework is not installed or if the framework moniker is incorrectly formatted.\n\u5df2\u5c06\u8bca\u65ad\u65e5\u5fd7\u5199\u5165\u4ee5\u4e0b\u4f4d\u7f6e: \u201cC:\\Users\\pcdalao\\AppData\\Local\\Temp\\VsProjectFault_e97e8302-6e31-48a4-a5e9-dd40c277853e.failure.txt\u201d\u3002\n\n\u786e\u5b9a \n---------------------------. ",
    "maikebing": "I hope this . \n. My fault!!!. thinks! @Petermarcu  . ",
    "Mds92": "Does Microsoft .NET team has a plan to bring .Net WinForm in .Net Core?. ",
    "ricardopolo": "Any way to create a Windows Service using .net core?\nOr just console apps?. ",
    "markusschaber": "@roji I know, we have some large Windows Forms Codebase in our house. We had plans to replace the UI by WPF and started some prototypes, but then stopped those plans, as WPF also is not quite the future. \nAs far as I can see, Xamarin.Forms is already heading this direction (https://blog.xamarin.com/glimpse-future-xamarin-forms-3-0/), but it's not ready for prime time yet on some platforms, and missing the \"Web\" platform.\nOn the other hand, it should be possible to port the Windows Forms clone which comes with Mono to work with .NET Core - however, I'm not sure whether it's worth the effort... See https://github.com/dotnet/corefx/issues/21803 for a discussion on this. Removing the old versions could be optional in the installer.... In my experience, the main reason for this exception is when you try to load a 32-bit DLL into a 64 Bit process, or the other way round.\nMismatch between x86/ARM is also possible, in theory. :-)\nNote that sometimes, .NET core on Windows runs in an unexpected CPU architecture, as some tools (e. G. Visual Studio, xUnit etc.) tend to ignore the target CPU architecture defined in the project, and just run the code in the first installation they find in PATH, so if both 32 and 64 bit runtimes or SDKs are installed, it's random which one you get.\nWe had to change the order of entries in PATH environment variable to run our code with x86, as the native DLL we depend on is not (yet) 64 bit.. ",
    "darrellbooker": "I get the same \"Unknown solution item type\" error trying to open any Core 1 solution in VS for Mac. ",
    "geminiyellow": "maybe the same error.\n```\ndotnet --info\n.NET Command Line Tools (1.0.0-preview2-1-003177)\nRuntime Environment:\n OS Name:     Mac OS X\n```\nbut the project options show \nTarget framework: .NetCoreApp 1.0(Not installed). yep, I did the same thing, so, I think maybe is a problem with the version for mac. Because it's too old.. @mhutch thanks. csproj also not working now on VS for Mac (Alpha channel), hope it will working next update.. when i upgrade to the latest version of vs for mac, everything working well. woo~. ",
    "armartinez": "Same error here, solution and projects created with Visual Studio 2015 Community Edition \n```\ndotnet --info\n.NET Command Line Tools (1.0.0-preview4-004233)\nRuntime Environment:\nOS Name:     Mac OS X \nOS Version:  10.12\nOS Platform: Darwin\n``. I've also tried to open a Visual Studio 2017 RC migrated solution and I get the same error but now the error message mentions the new csproj project files :{filename}.csproj: Unknown solution item type`. I did the migration when I opened the project in Visual Studio 2017 RC but still got the same problem. I also noticed that when creating a new ASP.NET Core solution in Visual Studio for Mac Preview, the solution version is marked as Visual Studio 2012.. Latest Preview 3 now opens the new csproj based projects, but I'm getting the following error when building any project.\nError MSB4057: The target \"Build\" does not exist in the project. (MSB4057)\nI have updated the  .NET Core SDK 1.0.0-rc4 as instructed in the release notes.. Thanks, that fixed the issue!. ",
    "rmcfarlane82": "I'm getting the same issue, I saw somewhere that you might need to do a dotnet migrate command. https://docs.microsoft.com/en-us/dotnet/articles/core/preview3/tools/dotnet-migrate. ",
    "mhutch": "VS for Mac supports the new .NET Core csproj format introduced in VS 2017 RC. It does not support the old xproj format. As mentioned earlier you can migrate xproj to csproj on the commandline using dotnet migrate.\nAn update to the VS 2017 RC made further simplification to project files using a new MSBuild concept called SDKs, as explained here:\nhttps://blogs.msdn.microsoft.com/dotnet/2016/12/12/updating-visual-studio-2017-rc-net-core-tooling-improvements\nYou can identify csproj projects that use the SDK feature by the Sdk attribute in the toplevel Project attribute and a lack of <Import> elements. VS for Mac (as of Preview 2) does not yet support MSBuild SDKs, but we're working on adding it.. @evermeire yes, Mono ships msbuild on Mac, which can be used from the command-line, and VS for Mac and the dotnet command-line both use MSBuild to build projects.\nWe don't currently ship Azure deployment support in VS for Mac, what screenshot are you seeing this in? We do have support for integrating mobile apps with Azure connected services but that's something different.. cc @mrward. ",
    "evermeire": "I miss the project.json file because it was easy to perform a build and release on a Mac using terminal or with Azure and Visual Studio Team service builds/release.\n\ndotnet restore\ndotnet publish -c Release --version-suffix $(Build.BuildId)\n\nand viola I would have a build done in VSTS and get the build id into my ASP.NET core assembly.  Now, with VS 2017 and Visual Studio for Mac ASP.NET Core web application projects no longer have a project.json file and are using MSBuild instead.  Hopefully, I can execute msbuild on the Mac and figure out how to deploy to Azure from the Mac terminal.  I shouldn't have to rely on my IDE to always perform a build and deploy.  Speaking of Visual Studio for Mac, where is the Azure deployment feature that I see a screenshot of at the Xamarin website???. Thanks for the quick reply.  On this page, https://www.visualstudio.com/vs/visual-studio-mac/, I was looking at this screenshot.\nhttps://www.visualstudio.com/wp-content/uploads/2016/11/2_Screen-Shot-516@x2.png\nbut now that I look closer at it, it is the Azure App Service and not Azure WebApp Service\nI quickly realized that msbuild does execute on a Mac via terminal after I posted the above comment, so I am good there. . ",
    "mrward": "You need a recent Mono 4.8 which should fix that build error:\nhttps://dl.xamarin.com/MonoFrameworkMDK/Macx86/MonoFramework-MDK-4.8.0.459.macos10.xamarin.universal.pkg. @erikmartinessanches - Visual Studio 2015 does not support .NET Core projects. You will need to use Visual Studio 2017.. @iBeizsley - Sorry to be more clear I mean Visual Studio 2015 does not support the new sdk style MSBuild projects. As far as I am aware the .NET Core support in Visual Studio 2015 uses the xproj project file format.. @smnbss - Visual Studio for Mac does not correctly report the .NetCoreApp target framework as being installed in the project options. The 'Not installed' message can be ignored if you have a recent .NET Core SDK installed, which you have.. @fskroes Does the crash occur if the tests are run from the command line using dotnet test? That would rule out JetBrains test runner from being involved in the crash.. ",
    "erikmartinessanches": "I made a .NETCore app in VS for Mac and tried to open the project in VS Enterprise 2015 for Win, but the one-way project upgrade dialog appears in VS for Win. After accepting the dialog my Program.cs file does not appear in the Project Explorer and when debug-building: \"Project not selected to build for this solution configuration\" and when release-building: \"error MSB4040: There is no target in the project.\". ",
    "iBeizsley": "@mrward @erikmartinessanches Visual Studio 2015 does support .Net Core, if you install the .Net Core tools for it. I've had no issues using VS Enterprise 2015.\nhttps://www.microsoft.com/net/core#windowsvs2015 (step 2). @mrward Ah, yep, this is correct.. ",
    "smnbss": "brand new mac, brand new install of VS \nVisual Studio for Mac Preview\nVersion Preview 3 (7.0 build 1077)\nInstallation UUID: ceb38681-66a2-4bcc-a307-ae740919b339\nRuntime:\n    Mono 4.8.0 (mono-4.8.0-branch/cd26828) (64-bit)\n    GTK+ 2.24.23 (Raleigh theme)\n    Package version: 408000459\nlatest version of mono\nMono JIT compiler version 4.8.0 (mono-4.8.0-branch/cd26828 Fri Jan 13 14:32:29 EST 2017)\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\n    TLS:           normal\n    SIGSEGV:       altstack\n    Notification:  kqueue\n    Architecture:  x86\n    Disabled:      none\n    Misc:          softdebug \n    LLVM:          yes(3.6.0svn-mono-master/8b1520c)\n    GC:            sgen\nlatest version of dotnet\n.NET Command Line Tools (1.0.0-rc4-004793)\nProduct Information:\n Version:            1.0.0-rc4-004793\n Commit SHA-1 hash:  6091a4704c\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  10.12\n OS Platform: Darwin\n RID:         osx.10.12-x64\n Base Path:   /usr/local/share/dotnet/sdk/1.0.0-rc4-004793\nI still have the \nTarget framework: .NetCoreApp 1.0(Not installed\n. Petermarcu commented 2 hours ago\nThis is an error you are getting from VS for Mac?\nYes\nIt was compiling and running the app though.. ",
    "JonDouglas": "@Petermarcu Thanks for the comments. I do agree that this will all go away hopefully once the MSBuild push takes over. I figured I'd document it for the time being as it wasn't straight-forward for me!. @Petermarcu \nReferencing the Stack Overflow question:\nhttp://stackoverflow.com/questions/39020289/microsoft-dotnet-props-was-not-found/40955825#40955825\nviewed 4253 times\nThere's been quite a bit of traffic here, might be worth revisiting this issue!. ",
    "icnocop": "Since Visual Studio 2017 has been released, https://www.microsoft.com/net/core has changed, probably adding more to the confusion if we're still using Visual Studio 2015. \ud83d\ude15 . ",
    "mmaguigan": "Here is a gist of the original project.json file and the migrated csproj.\n. ... and I feel rather silly. It did publish it, the output simply did not list it as having been published.\n```\n[root@a601d681038f grr]# dotnet publish -f netcoreapp1.0 -r centos.7-x64\nMicrosoft (R) Build Engine version 15.1.454.57113\nCopyright (C) Microsoft Corporation. All rights reserved.\ngrr -> /sandbox/grr/bin/Debug/netcoreapp1.0/grr.dll\n``. I see, thank you @livarcocc, yeah I was running it with-r`, but I guess I was used to the old output and didn't bother to browse the bin folder myself - my apologies :) keep up the great work guys! . ",
    "kellah": "I believe what you're seeing is the confusion around the version of the SDK (1.0.0) as compared to the .NET runtime version (1.1.0). I have the SDK installed on macOS and this what I see:\n```\n$ dotnet --version\n1.0.0-preview2-1-003155\n$ dotnet\nMicrosoft .NET Core Shared Framework Host\nVersion  : 1.1.0\n  Build    : 928f77c4bc3f49d892459992fb6e1d5542cb5e86\n\n```. As far as I know runtime 1.1.0 still relies on project.json even if you create a csproj. Though I'm not the right person to provide details on that.. ",
    "tLXvGt": "That's a great news, indeed you're right.\nBut why my projects are still using project.json while on Windows I created one with .csproj?. ",
    "CodeChaser": "I came here looking for the same information.  I guess it is not documented or at the very least buried inside of another point.. Yea an Arduino ;)..   Well looks like I will be using it on a Raz PI 3 in the near future.  My goal is to see if I can get EF Core running against a SQLite db on a PI3.   I have been using EF Core for the pass few months on a desktop, DB first.  If I remember , I believe it requires .Net Standard, so I am not sure if it is even going to work.  I need the ability use a SQL based DB such as SQLite to store the decision tree's, as in realtime ML results \"Edge Computing\".  Long story...  Time will tell.. ",
    "crowdwave": "@CodeChaser - I am getting the impression from the answers here and elsewhere that I have asked, that .NET core effectively takes almost no memory, thus it will work on the smallest possible RAM and CPU configurations, and the needed RAM is defined by the size of your application. . @Petermarcu when using any new software, the first question is \"how much RAM does this need?\", that answers the basic question of \"how small is the machine I can run this on?\".\nMy base expectation is that .NET is some sort of big virtual machine that needs lots of memory to get going.  That's why I ask the question.\nAnd yes I would also like to know, well just how small can the machine be that runs this?\nIt seems to be assumed knowledge in the community that .NET core runs on any sized RAM.\nPut more succinctly: .NET core should specify the minimum hardware requirements to run it.\n. ",
    "bgribaudo": "Thanks for all the hard work you've put into this new version!\nWhen I go to https://www.microsoft.com/net/download/core/#/runtime and download then launch .Net Core 1.0.3 SDK - Installer, Windows x64, the installer indicates that it's installing Microsoft .Net Core 1.0.3 - SDK 1.0.0. Preview 2-003156. \nIs the SDK a preview release?. Thanks, @Petermarcu!. Hi @kendrahavens! In your https://blogs.msdn.microsoft.com/dotnet/2016/12/13/december-2016-update-net-core-1-0/ post, the 'see the .NET Core 1.0.3 release notes' link points to the ASP.Net Core 1.0.3 release notes. Did you mean to instead link to https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.3.md?. @kendrahavens, thanks for working on the version chart!\nDo you know if https://www.microsoft.com/net/core/support will be updated to reflect .Net Core 1.01 & 1.0.3?. ",
    "kendrahavens": "@bgribaudo Yes, I did! Thank you for the catch!. @enricosada I pulled in @cartermp to help me with the update. Posted!\n@enricosada I'm not sure if I'm doing the preview4 blog post, but I know who will be. Can you email me? Edit: to erase email now that we are in touch :). @replete I'm building a table of this information and I'll post it here as well as docs.msft.com. You are definitely not the only one with this issue.. This is a rough draft of the table that I'll post to our docs. I still want to add columns for Entity Framework and ASP.NET.\nNOTE: We are looking into ways of simplifying the version issues in the next releases.\n|    LTS or Current     |    .NET Core version   (Framework and runtime)    |    SDK Version (CLI)               |    csproj/project.json    |    IDE              |\n|-----------------------|---------------------------------------------------|------------------------------------|---------------------------|---------------------|\n|    LTS (outdated)     |    1.0.0                                          |    Preview 1                       |    project.json           |    VS2015 or CLI    |\n|    LTS (outdated)     |    1.0.1                                          |    Preview 2                       |    project.json           |    VS2015 or CLI    |\n|    LTS (supported)    |    1.0.3                                          |    Preview 2                       |    project.json           |    VS2015 or CLI    |\n|    Current            |    1.1.0                                          |    Preview 2.1                     |    project.json           |    CLI Only         |\n|    LTS                |    1.0.3                                          |    Preview 3 = RC1                 |    csproj                 |    VS2017 or CLI    |\n|    LTS                |    1.0.3                                          |    Preview 4 = RC2                 |    csproj                 |    VS2017 or CLI    |\n|    LTS                |    1.0.3                                          |    Preview 5 = NOW   working on    |    csproj                 |    VS2017 or CLI    |\n\nGeneral Versioning Documentation\nSupport Life Cycle Fact Sheet (LTS and Current). @replete That is frustrating. I'd like to help. Can I ask a few more questions about the issues you brought up?\n\nFirst: What OS are you developing on? What code editor are you mainly using? (I'm assuming from your comment its macOS using VS Code.)\n\nCan you provide links to the code repos that are out-of-date? We definitely have a challenge of keeping our docs up-to-date with each release! Of course, the other challenge is deciding which release track our docs must focus on.\nHave you seen the Getting Started with ASP.NET Core? There are many ASP.NET Core tutorials there. Not all of them are specific to 1.1 tooling, but they don't need to be for many of the important concepts. This one shows you how to get started debugging in VS Code on a Mac. (It uses a project.json example but the steps are the same when using csproj.) \nThere does appear to be a significant lack of tutorials for macOS. Is that the main problem with these tutorials?\nAre you referring to the aspnet/Templates as being out-of-date? If so, what appears to be missing? Please note: the dev branch and the master branch have different tooling with the dev branch using the \"Current\" track.\nWhen you say you are getting a load of symbol missing errors on debug - are you using VS Code or another editor? Is it still able to debug properly? Some of the symbol missing errors in VS Code are normal and just letting the editor know its on a Mac. The best way to get help with VS Code and its C# extension is to search the issues in their repo and create one if yours doesn't exist.\nNot sure what you mean by dnxcore50 being ancient. We do use this import in our latest tooling. Can you elaborate?\n\nI'm always trying to figure out what a new user would want to do! :-) It gets tricky when many new users are familiar with different OSes, tools, and languages. I'd love to hear a little more background on your ideal scenario?. @bgribaudo No problem! Thank you for pointing that out! We just made the PR to update the support page. . @robianmcd Yes, this problem as it relates to our Docker images is addressed in our release notes. You can look back through the history to see previous versions. Project.json versus msbuild is noted as part of the tag name in earlier versions.\nSince a lot of these issues were resolved by .NET tooling going RTM I did not add the chart above to docs.microsoft.com. Also, the download archive had been simplified to reflect the fact that the sdk can target different runtimes. There has also been much discussion on how to make the versions of .NET components better understood by making dotnet --version more verbose. I think this issue is best addressed in how we implement that.. It looks like the LTS SDK and Runtime installs for Windows x64 and x84 are also missing.\n@leecow @blackdwarf . Rich's feedback included:\n Only using 1st tag of Docker image to reduce verboseness of table\n Erase runtimes listed in deps images. (Deps images do not have runtimes)\n Erase \"-runtime\" in runtime collumn\n Edit phrasing in *Note. I can make a PR after the merge, but these are the added Docker Images to the download table:\n| .NET Core 1.0 RC 4      | Installer                                        | Binaries                                        |Docker Images                                        |\n| ----------------------- | :----------------------------------------------: | :----------------------------------------------:| :----------------------------------------------:|\n| Windows                 | 32-bit / 64-bit  | 32-bit / 64-bit | 1.1.0-sdk-msbuild-rc4-nanoserver|\n| macOS                   | 64-bit  | 64-bit                          ||\n| CentOS 7.1              | -                                                         | 64-bit                          ||\n| Debian 8                | -                                                         | 64-bit                          | 1.1.0-sdk-msbuild-rc4|\n| Fedora 23               | -                                                         | 64-bit                          ||\n| openSUSE 13.2           | -                                                         | 64-bit                          ||\n| Ubuntu 14.04            | See notes below for Ubuntu 14.04 and Mint 17 installers   | 64-bit                          ||\n| Ubuntu 16.04            | See notes below for Ubuntu 16.04 and Mint 18 installers   | 64-bit    . Thanks @leecow. I don't have permission to merge here. Could you help me out?. @enricosada The F# link was added to the post earlier. :). @enricosada Hmm, I can't find it either. \n@richlander Where did you add https://github.com/dotnet/netcorecli-fsc/wiki/.NET-Core-SDK-1.0.1 ?. Thanks @karelz.\nWe are tracking adding Intellitest support for .NET Core on developer community here. It is on the roadmap. (Please upvote if it's an important scenario to you. It does help us prioritize.)\nUnfortunately, I don't have any recommendations for other .NET Core MSTest generation tools at this time.. Sure, I'll add a comma.. Good idea.. I'd prefer to continue listing the full .NET Core SDK version number in this table since it is different from the .NET Core download version. \nThere is confusion when users download the 1.0.4 .NET Core SDK but they see 1.0.1 installed in their C:\\Program Files\\dotnet\\sdk folder. They also see 1.0.1 when they run dotnet --version and in their Programs and Features view. . Gotcha, consolidating!. ",
    "enricosada": "@kendrahavens it's possible to update the blog post to add some info about f# changes too? We do some work and that is committed inside dotnet/cli (the sdk), so is nice if we can show that release notes too (like EF and ASP.net does).\nAbout preview2 i have f# changes there https://github.com/dotnet/netcorecli-fsc/wiki/.NET-Core-SDK-preview2#100-preview2-003156\nA summary extracted from wiki notes about this specific release:\n\nupdated all dotnet new templates (web/console/lib/xunittest)\nadded dotnet new ASP.NET Core template ( dotnet new -l fsharp -t web ) \nadded dotnet new XUnit test library template ( dotnet new -l fsharp -t xunittest )\n\n@kendrahavens maybe we can chat a bit if you are doing also preview4 release notes? the templates are fixed not, and f# works. I'd like to contribute a bit with current f# development in the next release notes too\n. @kendrahavens seen the updated blog! thx a lot! @cartermp you too!\nSend email about preview4, anyway my mail is enrico@sada.io (or @enricosada in twitter)\n. @g4genious projects is not supported anymore in global.json (i think what you pasted is the global.json).\nleave just sdk. @terrajobst awesome! can i also mention https://github.com/dotnet/netcorecli-fsc repo?\nBecause it's where f# sdk issue are posted. There is also source code for integration, wiki for info about .net core versions, example project per version, etc\nAnd there are the TODO issues :D \nI can add it with this pr if you want\n. @leecow @kendrahavens is possible to add the f# info from wiki to blog post? \nhttps://github.com/dotnet/netcorecli-fsc/wiki/.NET-Core-SDK-1.0.1 \nthat add some important info and workarounds (like how fix intellisense \ud83d\ude04 ).\n. @kontomondo abouut f#, can you open an issue in https://github.com/dotnet/netcorecli-fsc/issues ?\nCan you please add redo build with a bit more verbose log? it;s dotnet build -v n ? (just for compiler args, or -v d for more). And dotnet --info to show info about environment. @kontomondo no need to add issue, probably is the same as https://github.com/dotnet/netcorecli-fsc/issues/91 . check that issue for status updates. @kendrahavens i cannot find it in that blog post now, but thx anyway.\nI think will be really good to have that wiki link in the blog post because is about .net core 1.0 tools (that works ok for f#, VS instead not, the wiki give more info exactly about that).\nbut np anyway, it's msdn blog, so until VS fully supports it, is not the target audience. ",
    "replete": "Is there anywhere that explains the current scheme for versioning/naming across the board?\nI've dipped in and out of this stuff over the last year, and it's always difficult to figure out what the latest version of x is and how version numbers relate to each other. e.g. now their's tools, CLI, framework, clr?\n. That's great until you guys change it all again. \nWhere are the templates? I've done dotnet new - now what? How do I use WebAPI? There are no answers. Templates are out of date. Code repo samples are out of date.\nI installed the SDK on OSX, and get a load of symbol missing errors on debug, and no idea how to get started with packages (plus resolving issues, finding AspNet but not AspNetCore). I checked the doc site (missing stuff from the old one) and find no answers. \nThe MVC repo had a samples folder, but it referenced 'dnxcore50' - ancient!\nIt was frustrating when I invested my time learning RC1 for my app (let's be honest, it was alpha not an RC). Now it's ridiculous that I'm struggling so much at 1.1.\nI guess the people doing stuff all use visual studio\nIt's mostly there, can someone just sit down, think what a new user would want to do, and put some instructions together?\nIn 15 minutes I'm writing an API in node.js. Install packages. Read the documentation. Do stuff.\nSorry for the rant, it's just so frustrating. \n. ",
    "g4genious": "I had Visual Studio 2015 CE and all my Asp.net core projects were working fine. I have just installed VS 2017 CE and none of my VS 2015 CE Asp.net projects are working. I have checked dotnet --info. It is returning 1.0.3. My porject.json currently looks like\n{\n  \"projects\": [ \"src\" ],\n  \"sdk\": {\n    \"version\": \"1.0.0-preview2-003121\"\n  }\n}\nI have 1.0.0-preview2-003121 folder in C:\\Program Files\\dotnet\\sdk too. But still getting following error while building any vs2015 asp.net core project.\nerror MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1.\nAny suggestions?\n. ",
    "robianmcd": "@kendrahavens is there an up to date / official version of the table you posted on Dec 19 (https://github.com/dotnet/core/issues/391#issuecomment-268108521)?. ",
    "ojoadeolagabriel": "Dot. Net core is a joke, why spend so much time learning an rc only for it\nto change again. The effort required to achieve the same old things\npossible in other platforms with out hassle is not worth it. My\nrecommendation to u all.... Move it. Java, groovy and python provide\nexcellent alternatives without all the hassle. You will never miss a\nfeature, tool or paradigm. ",
    "OnurGumus": "Thanks. It's fixed.. @0xd4d \nYes when tiered compilation is off it is 3 times faster.. @mikedn Thanks for clarifiying. Yes making it local variable works. I think I can live with it. So I will close the ticket. Strangely loop2 got also faster but from assembly code I can see it keeps the bounds check.\nAnd Thanks for the span hint. That's a clever way to eliminate bounds check that I didn't think it was possible. And I would have avoided foreach for performance but that also runs as fast.\n. @mikedn , so how should we use it then? Via unsafe?. @mikedn , can you mention one case where using vectors will boost the speed compared to arrays? If there is none that means I would always use arrays instead and vectors are useless.\nAlso for similar loops, c++  does auto vectorization.. Actually in the question arrays were 64 MB. I just changed the 64 KB still, no difference! This really doesn't sound right. I remember I have tested System.Numberics.Vector few years ago for a similar case. It was fast. Obviously above assembly code is correct. It has to copy each item to ymm and do the addition. I think I am misinformed of something.. @mikedn \n\nActually in the question arrays were 64 MB\nThey're int so it's 64MB * 4 = 256MB. Doesn't really matter, they still don't fit in any CPU cache.\n\nOh yes how dumb I am :) And yes moving the array allocation made it approx 2 faster. so it was my bad way of benchmarking regardless the array size!\n@benaadams \nThat code is very impressive however from BDN I see the following output:\n``\nmov     rcx,qword ptr [rbp-30h]\n--\n\u00a0 | mov     edx,dword ptr [rbp-3Ch]\n\u00a0 | call    System.Runtime.CompilerServices.Unsafe.Add[[System.Int32, System.Private.CoreLib]](Int32 ByRef, Int32)\n\u00a0 | mov     rcx,rax\n\u00a0 | call    System.Runtime.CompilerServices.Unsafe.As[[System.Int32, System.Private.CoreLib],[System.Byte, System.Private.CoreLib]](Int32 ByRef)\n\u00a0 | mov     qword ptr [rbp-0A0h],rax\n\u00a0 | mov     rdx,qword ptr [rbp-0A0h]\n\u00a0 | lea     rcx,[rbp-70h]\n\u00a0 | call    System.Runtime.CompilerServices.Unsafe.ReadUnaligned[[System.Numerics.Vector1[[System.Int32, System.Private.CoreLib]], System.Private.CoreLib]](Byte ByRef)\n\u00a0 | mov     rcx,qword ptr [rbp-38h]\n\u00a0 | mov     edx,dword ptr [rbp-3Ch]\n\u00a0 | call    System.Runtime.CompilerServices.Unsafe.Add[System.Int32, System.Private.CoreLib]\n\u00a0 | mov     rcx,rax\n\u00a0 | call    System.Runtime.CompilerServices.Unsafe.As[System.Int32, System.Private.CoreLib],[System.Byte, System.Private.CoreLib]\n\u00a0 | mov     qword ptr [rbp-0A8h],rax\n\u00a0 | mov     rdx,qword ptr [rbp-0A8h]\n\u00a0 | lea     rcx,[rbp-90h]\n\u00a0 | call    System.Runtime.CompilerServices.Unsafe.ReadUnaligned[System.Numerics.Vector1[[System.Int32, System.Private.CoreLib]], System.Private.CoreLib]](Byte ByRef)\n\u00a0 | mov     rcx,qword ptr [rbp-28h]\n\u00a0 | mov     edx,dword ptr [rbp-3Ch]\n\u00a0 | call    System.Runtime.CompilerServices.Unsafe.Add[[System.Int32, System.Private.CoreLib]](Int32 ByRef, Int32)\n\u00a0 | mov     rcx,rax\n\u00a0 | call    System.Runtime.CompilerServices.Unsafe.As[[System.Int32, System.Private.CoreLib],[System.Numerics.Vector1[[System.Int32, System.Private.CoreLib]], System.Private.CoreLib]\n\u00a0 | mov     qword ptr [rbp-98h],rax\n\u00a0 | vmovupd ymm0,ymmword ptr [rbp-70h]\n\u00a0 | vmovupd ymm1,ymmword ptr [rbp-90h]\n\u00a0 | vpaddd  ymm0,ymm0,ymm1\n\u00a0 | mov     rax,qword ptr [rbp-98h]\n\u00a0 | vmovupd ymmword ptr [rax],ymm0\n\u00a0 | mov     eax,dword ptr [rbp-3Ch]\n\u00a0 | add     eax,8\n\u00a0 | mov     dword ptr [rbp-3Ch],eax\nI will close the ticket but I am willing to discuss further if you have time.. @tannergooding nope it is release. Benchmark Dot Net doesn't allow debug benchmarking anyway. \nHaving that said I have added the following :\npdbonly\ntrue\n```\nTo the project file which are required to print disassembly. But it is being built with release mode.. @tannergooding  yes my bad again. It was tiering. BDN would take care of it if you run it more than 30 times. I don't wait that much. I added aggressive optimization, now it is fast!. . Is it possible to do loop unrolling ? I tried hand unrolling the loop 4 times when used LoadVector256  all of them still uses YMM0, when I use Vector they use different YMM, though I have not observed any perf difference.. I guess CPU renames registers anyway. Lol, Old CPU's were more predictable.. ",
    "dpen2000": "I've amended and pushed my commit, @Petermarcu with change to sdk. Hi @Petermarcu I'm going to send .net foundation an email about a CLA issue so perhaps this may have to wait to be merged.. ",
    "Joker666": "+1. ",
    "erhanyasar": "+1\nThere is no related app seen on Mac Sierra even after installed .Net Core 1.1 or 1.0.3. Niether I could find any related symbol to be able to execute.. +1\nThere is no related app seen on Mac Sierra even after installed .Net Core 1.1 or 1.0.3. Niether I could find any related symbol to be able to execute.. ",
    "andrius-k": "It appears that those are just informational messages from debugger stating that we will not be able to step into dot net core libraries. This behavior is just fine because usually we don't have to debug .net libraries. Your app should run without problems and debugging (your own code) should also work. But is there any way to disable these messages? Because there are quite a few of them and they are very annoying.. Hey @Petermarcu. For me, yes, this happens when using VS Code to launch debugger. . ",
    "muojp": "dupl: https://github.com/dotnet/core/pull/399\n(I actually noticed the duplication when I tried to send yet another pull-request \ud83d\ude06 ). ",
    "hikalkan": "For #399, \"Update roadmap.md\" title is not clear :stuck_out_tongue_closed_eyes:. Thanks @Petermarcu for the explanation.. ",
    "TechiMe": "Just to add that that the major reason for doing this would be if it could be made available on OSX as well as Windows, thereby offering cross-platform portability of applications that interwork with Microsoft Office (externally via COM objects) on Windows and OSX.. Hi Immo, Yes, exactly!\nThe only way to automate Excel for Mac at present is via embedded VBA or Javascript (Office Addins), neither of which come anywhere close to the power and flexibility of the manipulation of objects in C# which is possible for Excel for Windows.  So we were hoping that .Net Core might be able to fix this hole!\nMany thanks.. Well the first is definitely possible because we do it all the time, just by referencing Office.Interop.Excel.\nBut, in line with what you suspect I think, I have read in various places that (up until now at least, before the advent of .Net Core) it would not be possible to make this API available on the Mac because the \"unix-like architecture of OSX is not compatible with COM automation\".\nBut, exactly as you say in your final para, somehow it is being done for the JavaScript/VBA interfaces on the Mac, so if you can make \"whatever THAT is\" available in .NET Core, you'll be the hero of the hour!!!. ",
    "chintan3100": "For reproduce issue apply attribute   [ValidateAntiForgeryToken] on class level and use    [IgnoreAntiforgeryToken] on some of method. Thanks @davidfowl \nYes I am using application insights.  The Same API will take 2-3 second to response and some time it takes 30second - 60 seconds.\nSome API communicate with azure blob storage for upload and download file. I analys bolb storage performance matrix but it shows max it took 120 ms to respond.\nUpload file: we are using IFormFile file to get file.\nDownload file: we are using FileResult \nNote: All API and DB Operation are async. FIle upload, download Async, We created an index on DB.. @davidfowl @eilon @Petermarcu\nCan you please look for this issue. Sorry for delay. \nIssue with Azure logging/.net core logging feature.  when we enable logging to blob storage after 20 min we got out of memory error at string builder.. I am using .net core. Please refer below code\npublic IActionResult DownloadDocument(Guid documentUniqueId)\n{\nvar bytes = System.IO.File.OpenRead(@\"D:\\home\\site\\wwwroot\\file\\Organizer01_2017-09-03 (14) (3).zip\");\nreturn File(bytes, \"application/octet-stream\");\n}. I can not change client call who calling API with \"\\\"bb2f3da7-bf79-4d14-9d54-0a1f7ff5f902\\\"\". Client has code freeze.. Hi \n.net core 1.1 : When we return string from api it like\n\"bb2f3da7-bf79-4d14-9d54-0a1f7ff5f902\"\n.net core 2.0\n\"\\\"bb2f3da7-bf79-4d14-9d54-0a1f7ff5f902\\\"\". ",
    "lukasz-pyrzyk": "mistake, moved to https://github.com/dotnet/cli/issues/5146. ",
    "jpierson": "Adding the following line to .gitattributes seems to have worked around this issue for me for the time being. \n*.md -text -diff\nWithout looking into it too more it appears that the .md files may have mixed line endings.\nRunning git --version on my machine yields git version 2.8.1.windows.1 in case that is important.\n. I'll take a look but o I doubt it matters much. I just didn't want others to stumble the same way I have been trying to jump in and learn about .net core. For myself these changes were a way to motivate me to figure it out so that I could contribute back.. ",
    "dnbr2002": "@Petermarcu \nSorry for the delayed response.  Here is what we are currently using.  \nDescription = Microsoft Office 15.0 Object Library\nMicrosoft.Office.Core -> Office.dll\nMicrosoft.Office.Interop.Word -> Microsoft.Office.Interop.Word.dll\nMicrosoft.Office.Interop.Excel -> Microsoft.Office.Interop.Excel.dll\nThe main issue is we have to have Office installed on the server to run our conversion engine. As we modernize our infrastructure we would like to take our engine, break it down by conversion type and microservice these conversions as containerized docker applications in the cloud so they are scalable.  Office automation is the big hangup in this modernization process since it needs a full install of office on the server.  I may be in fantasy land but if Microsoft could offer some cross platform API (not saying it has to be open source) that we could plug into dotnet core (or maybe a jar for Java) then it allows us to modernize our conversion engine for office documents in a way that makes the most sense.   . ",
    "electricessence": "I am using .NET Core 1.1 and VS Code.. To add a bit of context, there is only one '.Add' entry point and it occurs just after the above code.\nThe intention is to use a SortedDictionary as a Heap.  Also, I've used SortedDictionary many times before in .NET 3.5+ and never saw an issue.. Okay, I may have found out why this is happening.  I'll report back.\nIf the underlying values are mutable, it may be screwing up the underlying algorithm.\nHaving a similar issue with Red-Black BST.. ",
    "denishuvelle": "Hello,\nThank you for your quick response!\nI have installed Visual Studio 2017 RC and I have tried to convert project.json to csproj: the project references are now working with the new changes in the preview :)\nBut for my case: a part of my dependencies are not ready if I want to use NetStandard so I will wait a little bit and I will directly reference the DLLs that I need in VS 2015.. ",
    "paqogomez": "I've gone this same route.  I'm now on 2017 RC and using the csproj format in my solution.  \nMy older .NET 451 projects are able to be referenced, but when I build and run I get a runtime error saying:\nFileNotFoundException: Could not load file or assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.\nAny chance this configuration is supported?. ",
    "igor-1024": "Apologies if it\u2019s not the right place or not related, but I get @paqogomez 's \u201cSystem.Core\u201d issue and can\u2019t find the solution for it.\nTo replicate using Visual Studio 2017\n\nCreate ASP .NET Core Web Application (.NETCoreApp 1.1), say ProjectA\nCreate Class Library (.NET Framework 4.6.1), say ProjectB\nAdd a class with method, which uses anything from System.Linq namespace to ProjectB (for example, => new List().Count();)\nAdd \u201cMicrosoft.NETCore.Portable.Compatibility\u201d NuGet package to ProjectA (say version 1.0.1)\nReference (project reference) Class Library (ProjectB) from .NET Core project (ProjectA) \nInstantiate dummy class anywhere in ProjectA and call that method, which uses anything from System.Linq namespace \n. \n",
    "juking": "It seems that I encountered the same problem. ",
    "roberto-abs": "Hello \nThank you for your reply; I have just tried VS 2017 RC and the issue is not present there; I guess you can close this issue (or do I have to close it myself?). ",
    "LorenzMichels": "Hi, I get the same message. Because I want to follow some book tutorials, I want to work with VS2015 and .NET core 1.0.1. Therefore I need to install .NET Core 1.0.1 VS 2015 Tooling Preview 2, but it shows the error \"IIS Express 8.0 or higher is not installed\". I am on Windows 10. How can I fix this?. ",
    "barrytang": "@LorenzMichels, VS 2015 tooling is in Preview. VS 2017 15.3 is now released and supports both 1.x and 2.0.. @prafullbhosale?\ncc @mlorbetske @balachir . @Srivatsn/@Pilchie?. /cc @mlorbetske and @phenning \nHi @weiwangda2014, do you mean when adding a file to the project via VS Add New Item dialog? . @mlorbetske?. @Srivatsn?. I believe the publish issue is a .NET Core CLI issue. @livarcocc is currently on vacation. @nguerrera, are you right guy to take a look on Livar's absence? Adding @MattGertz as well.\n@prafullbhosale, can you take a look at the Scaffolding issue above? Adding @mlorbetske as well.. > The description of the publish issue mentions things working on the command line but not with VS: #711 (comment).\nSorry, I missed that. @vijayrkn, can you take a look?. > Installing controller scaffolding creates an error then a warning:\nError: Microsoft.VisualStudio.Web.CodeGeneration.Design package targeting v2.0.0 (final release)\nDowngrading to v2.0.0-preview fixes issue and eliminates error\nWarning: Microsoft.Composition 1.0.27 is targeting .NET Framework\nUpgrading to 1.0.30 (or now 1.0.31) targets Core and eliminates warning\n@prafullbhosale , can you take a look?. ",
    "harisbotic": "https://github.com/aspnet/SignalR/issues/111. ",
    "Korporal": "@kendrahavens - Perhaps you can get someone to look at this?. @weshaggard - I did start it in the roslyn repo here:\nhttps://github.com/dotnet/roslyn/issues/16733\nI need some guidance please as to which repo I should really be directing this to, currently the discussion/issue has been closed in both places !\n. @karelz - Hi.\nI'm seeking to get reflected members in their lexical order (i.e. ordered by the declared name token's absolute offset in the source file). Every (validly) declared property or field has a name and that name text begins at some offset into the source file.\nIf this were recorded as part of the member's metadata (during the tokenize processing) then it would be trivial to use reflection and get the members in the desired order (...Orderby(PropertyInfo.SourceOffset)).\nAs I mentioned above, we have code (that works but assumes MetadatToken order is what we want) that makes it very natural to use the declared order.\n. Line 4165 here: https://github.com/dotnet/roslyn/blob/282679022963c053b7c2553b8e18faa6836e770b/src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenClosureLambdaTests.cs\nUse MetadataToken in a test.\n. Actually this may be enough:\nhttp://stackoverflow.com/questions/9062235/get-properties-in-order-of-declaration-using-reflection\n. @karelz - Well I never said it should work with partial classes, but if that too were a requirement then yes that's a great question. The core use case is for situations where we use stuff like Dapper - numerous POCO classes.\n. @karelz - A use case that has come up where I work is this (mentioned in my OP):\n\"(For example we have Dapper utility code that formats SQL queries with {0} and {1} etc where parameters are expected and then use reflection to replace these with @ ensuring the SQL text always contains a parameter name that exactly matches the anonymous object's property name, 0 being the first property, 1 the second etc.).\"\nIn this example an anonymous object is passed in (with a sequence of properties that are assigned values in the initializer).\nConsider this:\nstring query = \"select something from somewhere wehere a = {0} and b = {1} and c = {2}\";\nstring f = Parameters.Parameterize(query, new { Username = \"Tony\", Department = \"Admin\", Group = \"Seniors\" });\n\nIn this code the query text does not need to include the property names used in the anonymous class, indeed it doesn't care and is insensitive to them - the developer can call them what he wants:\nstring query = \"select something from somewhere wehere a = {0} and b = {1} and c = {2}\";\nstring f = Parameters.Parameterize(query, new { Junk = \"Tony\", Stuff = \"Admin\", Garbage = \"Seniors\" });\n\nWhen the Parameterizew method completes the returned string in the second example is:\n\"select something from somewhere wehere a = @Junk and b = @Stuff and c = @Rubbish\"\nWe (and many places too) have lots of code (and much of it old) that uses this kind of DB access, the queries in this code have hard-coded SQL parameter names (like in the output string above) and are hard to port and reuse and so on.\nThe above \"Parameterize\" method needs some way to order the properties it reflects from the anonymous type and lexical order is by far the most obvious and intuitive.\nThis is just one use case and there are more, currently we are discouraged from writing this kind of support code because reflection order is undefined - it need not be though.\n. @terrajobst - Hi, well consider my example above where an anonymous object is used (as in Dapper etc).\nThis is a real world requirement, since its an anonymous object we're not going to annotate members etc.\nAlso I'm not requesting sorting or ordering - but rather providing the metadata to enable me to do sorting.\nI use the phrase \"lexical order\" simply to mean the order that they're consumed by the compiler's lexical analyzer, yes I do mean declared order, offset within the source file etc.\nYes partial classes do raise questions but lets leave these aside for now (in my example of course the class is small and anonymous). \nI don't know much about MetadatTokens but since these do seem to work here, it implies these are generated sequentially as the compiler pulls tokens from the input source so perhaps it's possible to review that code and say that yes MetadataToken order is - going forward - guaranteed to be source file order.. What I'm proposing is that we change either the CLR, the compiler or both to enable us to reflect items in their declared order. I'm not seeking a workaround as such but a change so that it becomes a supported capability in the CLR/Framework.\nMost of the feedback is here is simply reiterating what we all already know - it can't be done today - what I'm asking is for is a change that allows us to do this. Surely this is not a hugely complicated thing? to be able to reflect a type's members in their declared order?\n. From what I can deduce by some basic experiments the compiler seems to consume source files ordered by their file name spelling. So partial classes are then processed in that order and the members (when sorted by MetadataToken) seem to be ordered by a) source file name sort order then b) declaration order.\nIf this is true (I'm just experimenting) then perhaps that could be enforced so that going forward it is documented that partial classes \"perceive\" their member ordering to be as described above?. @terrajobst - Hi,\nOK I guess this is dead in the water as a realistic expectation for future support. But I would argue that supporting this for non-partial types is better than not supporting it at all. \nAfter all saying \"Ordering a type's reflected members by MetadataToken is guaranteed to order members in their declared order but only if the type is not a partial type.\" is rather a useful thing to be able to say. Like any feature there are limits on its flexibility.\nThis isn't a feature that's going to be used by every developer every day but the ability to get things in a predictable order like this is hugely useful when one does require it. \nIf you look at the exposed properties of the PropertyInfo class from .Net 1.1 to today, there are quite a few properties that have been added over the years (e.g. CustomAttributes, ReflectedType) old contracts are honored but those using new contracts get the new features - so we could in principle see a new property on a Type named (say) \"SourceOffset\" a long if the MetadataToken is too challenging as a way to do this.\nAll this amounts to is implicit metadata, as opposed to explicit metadata (attributes etc).  \nAs for the promise that would be simply what I outlined above - no guarantee is made for partial classes - simple as that, just like renaming a property in some class is not guaranteed to have no impact on XAML consumers of that class or other mechanisms that use reflection on that class.\nI cannot say just how much effort is involved or what the pros/cons are for this - I am suggesting it and if it really is too hard to do then that's that !\nThanks for discussing this anyway, I'll consider this well and truly closed.\n. @myloveCc @bartonjs @danmosemsft @Petermarcu  - Hi.\nI'm seeing the same problem but I must say the \"solution\" here is rather unimpressive. If after all these years we've come back full circle and the much lauded \"code reuse\" promised by .Net is now nothing more than copying/pasting source code. then we're in trouble.\nThe reason is I think obvious, frantically copying snippets of code every time we encounter an \"issue\" leads to fragility, once we actually get a non-trivial app constructed and we test it, we have much more work to do to prove if our code is flawed or something in the hand-copied-framewrork-support-logic is somehow in error, perhaps copied wrongly for example.\nMay I suggest that in situations like this at the very least Microsoft formally publish a recommended workaround until the platform itself gets the proper support. At least this way we'd be sure we're all using the same workaround and reduce risk.\nHow are companies expected to build rock solid mission critical applications when fundamental parts of their system (in this case stuff associated with identity, encryption and authentication) are gleaned by copying/pasting snippets from Github issues!\nGiven Microsoft's desire to be a strong player in cloud hosting it is absolutely astonishing that something as fundamental as this is apparently overlooked.\nThanks\n. ",
    "digital-nomad17": "I am encountering the same issues when trying to launch sample projects and seed projects. I always have the wrong version installed despite having the latest version installed...\nWhy isn't these versions backward compatible? We are still on 1.* right? Is .net core following semvers? . ",
    "Lutando": "I agree with OP. It is even confusing when you try your best to keep up. It sometimes feel like they use preview postfixes to jump out of the ruleset that semantic versioning requires you to adhere to.. ",
    "filipw": "this calls for @terrajobst . ",
    "n-alex-white": "Equally confusing - I hear that dotnet 1.1 is moving from project.json to csproj. On my Mac I'm generating things with project.json, so I try to get dotnet 1.1 - but all the installers are 1.0.0*. However, it then turns out that that installer was installing dotnet 1.1 ... but still creates project.json rather than csproj files.\nSo I'm confused. Is dotnet 1.1 different for different platforms? What else can I expect to find or not find?. Thanks for the clarification (perhaps it is just the messaging around this that I've found confusing). \nOddly it seems that Visual Studio Mac preview 3 only understands csproj projects, while everything else on the mac (aspnet new, yo aspnet) only produces .json projects. This element of being out of step doesn't help while attempting to grok what is going on.. @jigarce I notice you closed this - did you find out what the problem was? I\u2019m experiencing the same problem right now.... ",
    "Jeremiad": "It would be also nice to have meta-packages for Linux repos so that you can easily upgrade between versions without installing every minor version manually.\nAs a example:\ndotnet-dev-1.0.0-preview\ndotnet-dev-1.0.0-rc\ndotnet-dev-1.0\ndotnet-dev-1\nand so on.. ",
    "r0f3n": "I think David's question means, \"A global.json file with the correct version information could help you\". Well, did the trick for me.. ",
    "radding": "The same way the first link describes. I follow those instructions exactly. . ",
    "JeremyKuhne": "@truunk If you're already using System.Configuration for library/app settings you'll be able to use System.Configuration.ConfigurationManager to continue to do so cross framework (we needed to name the  assembly differently from NetFX to allow running against it, 99% of System.Configuration is there).\nAs you've noted, we haven't provided guidance on how to deploy settings in Core- we don't use System.Configuration ourselves. While we didn't have the library in CoreFX until now, we're unlikely to use it. The key reasons for that is that System.Configuration brings in a lot of dependencies (heavy) and those dependencies need the ability to read settings (notably XML).\nWhile we don't use them internally, config files are a pattern that is fairly well understood and can continue to be used. While it isn't part of the official .NET Standard 2.0 it is fully cross plat outside of the built-in encrypted Protected Sections (which is a bit obscure).\nWe're definitely interested in your continued thoughts on the matter and will try to come up with some clear guidance.. I'm not familiar with those classes- you're probably better off moving the discussion to https://github.com/aspnet/Configuration. Please tag me- I'll follow along and try and rationalize how the old config model fits in.. This issue was also opened as: https://github.com/aspnet/Performance/issues/246\n@chintan3100 We need to know exactly how the FileStream is being written. What is the File class you're using? If you're writing via ASP.NET apis it would probably be better to start on that end.. Presumably you're talking about System.Web.Mvc.Controller.File. You should probably start with https://github.com/aspnet/Mvc/issues. The ASP.NET team is the right starting point.. We need to make the call or the feature just doesn't make any sense. Your current process may not care about locking the file but it should care about it being locked by some other process.\n@stephentoub Do you have any context to add here?\nI'll note that locking of files on *nix is a known mess. A few links for reference:\nhttps://loonytek.com/2015/01/15/advisory-file-locking-differences-between-posix-and-bsd-locks/\nhttp://0pointer.de/blog/projects/locking.html\nhttp://nfs.sourceforge.net/ (search for flock)\n. ",
    "truunk": "@JeremyKuhne Thanks for the reply. At this moment i am not using anything, this is a new project. Not being the biggest fan of System.Configuration anyway and as you say kinda defeats the purpose of the clean architecture of Core.\nMaybe its better to outline the scenario as it may give some indication into what i am doing and why.  The application i am building will have a few clients (Web, API etc) and as such will share boundaries such as data, databases etc, but in my scenario the entry point into the data classes for example will not be the same, so Web will be a standalone application, the API endpoints will be standalone to power other clients such as mobile, and at that point we have multiple entry points into the data classes where i will probably have to define items such as the connection strings etc as configuration elements on the top end projects (Web, API) which is fine, but obviously means that i might multiple configuration files for the same thing, instead of containing it all in the Data class library and having it in one place.\nThe way settings are applied in the startup.cs is a great API (i.e. loading a configuration file via the builder), not sure if that would work in a class library without some form of entry point/bootstrapper (i have seen program.cs be used and the project converted to a console app to similar things) so the process may not work here.\nThinking out loud, could ConfigurationBuilder  be used in a class library via constructor of method? so for example, in my data scenario, instead of my startup.cs instantiating a DbContext directly it is abstracted into a DbContextFactory that uses Configuration Builder to load a configuration set out by the class library, or is that pie in the sky stuff?. ",
    "serhioV": "\"set the <EnableDefaultCompileItems> property to false\"\nwhere , in what file should we set that property to false?. the phrase is from the Readme file, \"Rename release note files and titles (#437)\". \nThanks! Maybe is worth specifying in the Doc(readme file) as well.. ",
    "AbhimanyuAryan": "Done. But how do I fix that for all new applications that I create. Do I need to run dotnet migrate everytime I create a dotnet app? @Petermarcu . @Petermarcu when I create asp.net core application with dotnet new -t Web it doesn't contain Project.json. How should I install Entity Framework? . You need to download newer version of SDK @PeterAronZentai\nTry 1.1 preview 4 . dotnet watch & dotnet watch run  command says: No executable found matching command \"dot-watch\". Great to hear @Petermarcu . @Petermarcu dotnet migrate command does that migration right? But does that convert a project.json to csproj one as well?\nI looking for some solution like we have for Ruby on Rails(rbenv & rvm). so i have used bundler <DotNetCliToolReference Include=\"BundlerMinifier.Core\" Version=\"2.0.238\" /> for minification of .cs & .js files. It did the job \nLooking for bower.json solution to download ...font awesome dependencies . @Eilon but I'm using CLI & VS Code. @Eilon I have added font awesome to bower json but when I doesn't download font awesome to wwwroot/libs \nIf I had a gulp project...I could tell gulp to download bower dependencies but I am using csproj version of project ....In which gulp has been removed \nSo not sure what to do . ",
    "PeterAronZentai": "How did you solve?. ",
    "Jagadeesh-Govindaraj": "possible duplicate aspnet/DotNetTools. ",
    "weitzhandler": "Where can I find a legend or so that describe all the .NETs and the compatibility between them, or maybe you can make up a quick one please?\n\n.NET Core\n.NET Standard\nXamarin .NET (Mono?)\nPortable .NET. @manigandham thanks a lot!. \n",
    "manigandham": "@weitzhandler \nThe official documentation has the info you need: https://docs.microsoft.com/en-us/dotnet/articles/standard/library. ",
    "TVoc": "As an addendum, when I run dotnet.bootstrap.py as outlined here, this is the result:\npi@raspberrypi:~/src/core/tools/dotnet-bootstrap $ ./dotnet.bootstrap.py\n** ROVER Building: ['coreclr', 'corefx', 'core-setup', 'libuv']\n** ROVER Patching? True\n** ROVER Staging in raspbian.8-x64-dotnet\n** ROVER RID: raspbian.8-x64\n** ROVER is downloading latest .NET CLI for bootstrapping (dotnet.latest.tar.gz)\n** ROVER CAUGHT AN UNEXPECTED EXCEPTION: \"SemanticVersion instance has no attribute 'find'\" of type: <type 'exceptions.AttributeError'>\n  File \"./dotnet.bootstrap.py\", line 545, in <module>\n    SpawnPatchTarget(RoverSettings._binDirectory, RoverSettings.PayloadPath)\n  File \"./dotnet.bootstrap.py\", line 342, in SpawnPatchTarget\n    RoverSettings.SetPatchTargetPath(path.join(RoverSettings._ScriptDirectory, destination_folder))\n  File \"./dotnet.bootstrap.py\", line 261, in SetPatchTargetPath\n    RoverSettings.PatchTarget_Shared   = path.join(shared_containerFolder, RoverSettings.SelectGreatestPrecendenceDirectory(shared_containerFolder))\n  File \"./dotnet.bootstrap.py\", line 248, in SelectGreatestPrecendenceDirectory\n    maxVersion = RoverSettings.MaxPrecedence(dirName, maxVersion)\n  File \"./dotnet.bootstrap.py\", line 234, in MaxPrecedence\n    versionB = SemanticVersion(versionStrB)\n  File \"./dotnet.bootstrap.py\", line 156, in __init__\n    self.VersionTuple = self.GetVersionTuple(versionStr)\n  File \"./dotnet.bootstrap.py\", line 141, in GetVersionTuple\n    middleIndex = versionStr.find('-')\n** ROVER None. I compiled it on my Raspberry Pi, but there were some things I did differently:\n\nedited dotnet.bootstrap.py as follows:\n```\ndiff --git a/tools/dotnet-bootstrap/dotnet.bootstrap.py b/tools/dotnet-bootstrap/dotnet.bootstrap.py\nindex 92749bc..1093c40 100755\n--- a/tools/dotnet-bootstrap/dotnet.bootstrap.py\n+++ b/tools/dotnet-bootstrap/dotnet.bootstrap.py\n@@ -382,21 +382,22 @@ def BuildNativeComponents(  coreclr_git_directory,\n         # Build CoreCLR\n         # skipping non-essential for bootstrapping.\n         if 'coreclr' in RoverSettings.BuildSet:\nRoverShellCall('./build.sh x64 release skiptests skipnuget', cwd=coreclr_git_directory)\n\nRoverShellCall('./build.sh x64 release skiptests skipnuget', cwd=coreclr_git_directory)\n\n\nRoverShellCall('./build.sh arm release skiptests skipnuget skipmscorlib clang3.7', cwd=coreclr_git_directory)\n # Build CoreFX Native Pieces\n if 'corefx' in RoverSettings.BuildSet:\n     # at different points in the history of CoreFX there have been differing build behaviors, these conditionals\n     # cover that. However, if we find these differences, we will need to adapt.s\n     if path.exists(path.join(corefx_git_directory, 'src', 'Native', 'build-native.sh')):\n\n\nRoverShellCall('./build-native.sh x64 release Linux --numProc 1', cwd=\"%s/src/Native\"%(corefx_git_directory))\nRoverShellCall('./build-native.sh arm release Linux --numProc 1', cwd=\"%s/src/Native\"%(corefx_git_directory))\n         else:\nRoverShellCall('./build.sh native x64 release', cwd=corefx_git_directory) \n\nRoverShellCall('./build.sh native arm release', cwd=corefx_git_directory) \n# Build corehost from core-setup\n # TODO: Pull versions from the runtimes.\n if 'core-setup' in RoverSettings.BuildSet:\n-            RoverShellCall('./build.sh --arch x64 --rid %s --hostver 0.0.0 --fxrver 0.0.0 --policyver 0.0.0 --commithash %s'%(RoverSettings._Rid, RoverSettings.DotNetCommitHash), cwd=\"%s/src/corehost\"%(core_setup_git_directory))\n+            RoverShellCall('./build.sh --arch arm --rid %s --hostver 0.0.0 --fxrver 0.0.0 --policyver 0.0.0 --commithash %s'%(RoverSettings._Rid, RoverSettings.DotNetCommitHash), cwd=\"%s/src/corehost\"%(core_setup_git_directory))\n# Build libUV\n if 'libuv' in RoverSettings.BuildSet:\n@@ -502,8 +503,8 @@ if name == \"main\":\n     core_setup_working_git_directory    = path.join(RoverSettings._srcDirectory, 'core-setup')\n     libuv_working_git_directory         = path.join(RoverSettings._srcDirectory, 'libuv')\n\n\n\n\ndefault_coreclr_bin_directory       = '%s/bin/Product/Linux.x64.Release/'%(coreclr_working_git_directory)\n\ndefault_corefx_native_bin_directory = '%s/bin/Linux.x64.Release/Native'%(corefx_working_git_directory)\ndefault_coreclr_bin_directory       = '%s/bin/Product/Linux.arm.Release/'%(coreclr_working_git_directory)\ndefault_corefx_native_bin_directory = '%s/bin/Linux.arm.Release/Native'%(corefx_working_git_directory)\n     default_core_setup_cli_bin_directory= '%s/src/corehost/cli'%(core_setup_working_git_directory)\n     default_libuv_bin_directory         = '%s/.libs'%(libuv_working_git_directory)\n```\nedited build files for CoreCLR to support clang 3.7/lldb 3.7, like here\ndownloaded latest release for Debian (from here) to use as payload\nran dotnet.bootstrap.py with ./dotnet.bootstrap.py -b coreclr corefx core-setup libuv -payload dotnet.tar.gz (with dotnet.tar.gz the archive I mentioned in the previous step)\n\nWhen I run ./dotnet --version in /core/tools/dotnet-bootstrap/raspbian.8-x64-dotnet/bin, the result is Failed to initialize CoreCLR, HRESULT: 0x80004005\nDoes anyone have an idea of what I did wrong?. Where exactly do we need to go to get a working dotnet runtime binary? Or do we need to build it ourselves?. @Tealons If I may ask, how did you accomplish this? Coreclr fails to build on my Raspberry Pi 3 when I try to build dotnet on it.. I see. The application that I want to run on my Pi requires the dotnet runtime, so unfortunately, that is not an option for me.. It's not my application, and as far as I'm aware, there is no version that is built for the Pi, specifically.. As I understand it, you can build your app on a different machine such that it runs on Raspbian; it is self-contained. There is currently no SDK or runtime for Raspbian.. I think I remember installing all of the packages listed under Ubuntu on Raspbian. I suspect it should work if you did that as well and tried to run your app.. ",
    "perlun": "This would be very, very nice! .NET core is already a great piece of software, being able to use it on my Raspberry Pi(s) would be even greater. Raspbian is a much more natural and popular choice there, so adding support for it should be considered.. This would be very, very nice! .NET core is already a great piece of software, being able to use it on my Raspberry Pi(s) would be even greater. Raspbian is a much more natural and popular choice there, so adding support for it should be considered.. > Or do we need to build it ourselves?\nI think that's the current status. @Petermarcu, is there any chance Raspbian could get added eventually as an official target with prebuilt packages?. > Or do we need to build it ourselves?\nI think that's the current status. @Petermarcu, is there any chance Raspbian could get added eventually as an official target with prebuilt packages?. @Petermarcu - you're welcome. Thanks for a great platform! \ud83d\ude04 . @Petermarcu - you're welcome. Thanks for a great platform! \ud83d\ude04 . @AiOO \n\nI'm sorry. I don't understand what you said.\n\nI think you're not the only one. \ud83d\ude06 Seems like a bot/troll comment to me.. @AiOO \n\nI'm sorry. I don't understand what you said.\n\nI think you're not the only one. \ud83d\ude06 Seems like a bot/troll comment to me.. ",
    "moozoo64": "I just wanted to add that there are 11+ million raspberry pi's sold. Most of which will be running Raspbian.\n\"The Raspberry Pi Foundation sells about 350,000 to 400,000 units a month\"\nFrom http://www.belfasttelegraph.co.uk/business/news/raspberry-pi-sales-hit-11-million-and-could-overtake-commodore-64-35245709.html\nI'd also like to see dotnet core support aarch64 (suse, debian stretch) on the raspberry pi 3+. ",
    "kmleow": "@Petermarcu on documentation, it says Ubuntu 16.04 is supported. Is this the Ubuntu Core or Ubuntu MATE?. ",
    "valeriob": "I've been following the guide here https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md with .net core 2.0.0-beta-001834-00 i published the app, but it does not generate an executable with the name of the project, the folder contains instead an \"apphost\" elf. When i run it it says :\n\"root@ubuntu:/home/ubuntu/dev/publish# ./apphost\nThis executable is not bound to a managed DLL to execute. The binding value is: 'c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2'\nA fatal error was encountered. This executable was not bound to load a managed DLL.\n\"\n. Thanks @Petermarcu you nailed it !! \ud83d\udc83 \nI was confused by the version of the shared framework host !\nI did the same thing with a AspNet Core app with the same procedure, but it did not produce an executable, however it works running \"dotnet mywebapp.dll\".\n\n. ",
    "shripathi-kamath": "Any update on when .NET Core and ASP.NET Core will be available on Raspbian?. Any update on when .NET Core and ASP.NET Core will be available on Raspbian?. Thank you, the instructions say Linux, and not Raspbian (specifically), which is why I wanted to make sure, given that the thread above hints that it may not run on Raspbian.. Thank you, the instructions say Linux, and not Raspbian (specifically), which is why I wanted to make sure, given that the thread above hints that it may not run on Raspbian.. I apologize for being a little bit dense about this, but is there currently a way to run .NET Core and ASP.NET Core apps on Raspbian.  I see instructions and help about how to run apps for those platforms on the Raspberry Pi, but they all involve using non-Raspbian OSes.. I apologize for being a little bit dense about this, but is there currently a way to run .NET Core and ASP.NET Core apps on Raspbian.  I see instructions and help about how to run apps for those platforms on the Raspberry Pi, but they all involve using non-Raspbian OSes.. Thanks @TVoc \n@Petermarcu I am fine building the app elsewhere, and not interested in developing on the Pi.  I guess I will wait until the Pi has runtime(s) for the Raspbian OS.\nThank you.\n. Sigh!\nPerhaps I am missing the trick.\nI go over to the page you indicated.  It tells me how I should build my app, how to change the .csproj, and publish my app to a folder.\nThen there is a section on Getting the app to run on the Pi.\nThe first step is to install Linux.   Let's say I do that as well and install Raspbian.\nThe next step says to install prereq packages.  I click on that link, and there is no section for Raspbian.  Which makes me wonder if the Linux I had to install in the first step was Ubuntu?\nWhat am I missing?\n. OK @Petermarcu, that clears it up.  Thanks again to @TVoc.. Not that anyone asked, but after I added the above-mentioned prerequisites for Raspbian, I successfully built, deployed and executed a sample application on the Pi.\nThank you. ",
    "Tealons": "I followed the instructions and got it working with Raspbian. I think Raspbian is preferred over Ubuntu, because Ubuntu has a major bug with respect to the Raspberry Pi 3: \nhttps://stackoverflow.com/questions/41353092/ubuntu-freezes-after-boot-starting-kernel-raspberry-pi-3\nhttps://bugs.launchpad.net/ubuntu/+source/linux-raspi2/+bug/1652270. I followed the instructions and got it working with Raspbian. I think Raspbian is preferred over Ubuntu, because Ubuntu has a major bug with respect to the Raspberry Pi 3: \nhttps://stackoverflow.com/questions/41353092/ubuntu-freezes-after-boot-starting-kernel-raspberry-pi-3\nhttps://bugs.launchpad.net/ubuntu/+source/linux-raspi2/+bug/1652270. Like mentioned in the instructions I'm publishing on a Windows machine with linux-arm as the target. The resulting files are copied to the Raspberry Pi: https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md\n. Like mentioned in the instructions I'm publishing on a Windows machine with linux-arm as the target. The resulting files are copied to the Raspberry Pi: https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md\n. From what I understand the runtime is included in the app when you publish it. Or do you need the cli available for your application?. From what I understand the runtime is included in the app when you publish it. Or do you need the cli available for your application?. Manual for an MVC application:\n1. Create a new MVC app with the latest SDK and via the command line: dotnet new mvc on a windows laptop/pc\n2. Change the cproj file with the following:\n```\n\n\nnetcoreapp2.0\nfalse\nwin-arm;linux-arm\naspnet-test6-1765DAD7-51F4-4572-8443-7F7BD9581173\n\n\n\n\n\n\n\n\n``\n3. rundotnet restore4. run dotnet publish -r linux-arm\n5. copy the output in the pubished folder (bin\\Debug\\netcoreapp2.0\\linux-arm\\publish) to a folder on your raspberry pi (in my case raspbian)\n6. go to the folder by ssh and run:sudo ./yourprojectname`\nTada! A working MVC application on your raspberry pi!\n. Manual for an MVC application:\n1. Create a new MVC app with the latest SDK and via the command line: dotnet new mvc on a windows laptop/pc\n2. Change the cproj file with the following:\n```\n\n\nnetcoreapp2.0\nfalse\nwin-arm;linux-arm\naspnet-test6-1765DAD7-51F4-4572-8443-7F7BD9581173\n\n\n\n\n\n\n\n\n``\n3. rundotnet restore4. run dotnet publish -r linux-arm\n5. copy the output in the pubished folder (bin\\Debug\\netcoreapp2.0\\linux-arm\\publish) to a folder on your raspberry pi (in my case raspbian)\n6. go to the folder by ssh and run:sudo ./yourprojectname`\nTada! A working MVC application on your raspberry pi!\n. @TVoc Yeah, forgot about that. I did that as the first step in trying to get it working on the raspberry pi. I used the following command: \nsudo apt-get install libunwind8 libunwind8-dev gettext libicu-dev liblttng-ust-dev libcurl4-openssl-dev libssl-dev uuid-dev. @TVoc Yeah, forgot about that. I did that as the first step in trying to get it working on the raspberry pi. I used the following command: \nsudo apt-get install libunwind8 libunwind8-dev gettext libicu-dev liblttng-ust-dev libcurl4-openssl-dev libssl-dev uuid-dev. @Petermarcu Funny, seems like de dependencies changed over time?. @Petermarcu Funny, seems like de dependencies changed over time?. @Petermarcu Do you have a ETA for when we can do this on a raspberry pi: https://www.hanselman.com/blog/PublishingAnASPNETCoreWebsiteToACheapLinuxVMHost.aspx. @Petermarcu Do you have a ETA for when we can do this on a raspberry pi: https://www.hanselman.com/blog/PublishingAnASPNETCoreWebsiteToACheapLinuxVMHost.aspx. @Petermarcu : When I create a new MVC project via the cli, change the project file as described and upload the output to my Pi, i get the following error:\nError: assembly specified in the dependencies manifest was not found -- package: 'Microsoft.Data.Edm', version: '5.8.2', path: 'lib/netstandard1.1/de/Microsoft.Data.Edm.resources.dll'\n. @Petermarcu : When I create a new MVC project via the cli, change the project file as described and upload the output to my Pi, i get the following error:\nError: assembly specified in the dependencies manifest was not found -- package: 'Microsoft.Data.Edm', version: '5.8.2', path: 'lib/netstandard1.1/de/Microsoft.Data.Edm.resources.dll'\n. One bug down, 99 to go :)\nWhen publishing for ubuntu.16.04-arm I get the following error:\nC:\\Users\\Martin & Monique.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.viewcompilation\\2.0.0-preview1-24647\\build\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.Razor.ViewCompilation.targets(26,5): error MSB3073: The command \"dotnet exec --runtimeconfig \"C:\\Users\\Martin & Monique\\Documents\\Visual Studio 2017\\Projects\\test3\\bin\\Debug\\netcoreapp2.0\\ubuntu.16.04-arm\\Projects.runtimeconfig.json\" --depsfile \"C:\\Users\\Martin & Monique\\Documents\\Visual Studio 2017\\Projects\\test3\\bin\\Debug\\netcoreapp2.0\\ubuntu.16.04-arm\\Projects.deps.json\" \"C:\\Users\\Martin & Monique.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.viewcompilation\\2.0.0-preview1-24647\\build\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.Razor.ViewCompilation.dll\" @\"obj\\Debug\\netcoreapp2.0\\ubuntu.16.04-arm\\microsoft.aspnetcore.mvc.razor.viewcompilation.rsp\"\" exited with code -2147450749. [C:\\Users\\Martin & Monique\\Documents\\Visual Studio 2017\\Projects\\test3\\Projects.csproj]. One bug down, 99 to go :)\nWhen publishing for ubuntu.16.04-arm I get the following error:\nC:\\Users\\Martin & Monique.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.viewcompilation\\2.0.0-preview1-24647\\build\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.Razor.ViewCompilation.targets(26,5): error MSB3073: The command \"dotnet exec --runtimeconfig \"C:\\Users\\Martin & Monique\\Documents\\Visual Studio 2017\\Projects\\test3\\bin\\Debug\\netcoreapp2.0\\ubuntu.16.04-arm\\Projects.runtimeconfig.json\" --depsfile \"C:\\Users\\Martin & Monique\\Documents\\Visual Studio 2017\\Projects\\test3\\bin\\Debug\\netcoreapp2.0\\ubuntu.16.04-arm\\Projects.deps.json\" \"C:\\Users\\Martin & Monique.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.viewcompilation\\2.0.0-preview1-24647\\build\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.Razor.ViewCompilation.dll\" @\"obj\\Debug\\netcoreapp2.0\\ubuntu.16.04-arm\\microsoft.aspnetcore.mvc.razor.viewcompilation.rsp\"\" exited with code -2147450749. [C:\\Users\\Martin & Monique\\Documents\\Visual Studio 2017\\Projects\\test3\\Projects.csproj]. \nIf you need more info, let me know!\nBtw: I was working with preview2 in my previous test. But this new test with the latest build of preview1 gives the same error.\n. \nIf you need more info, let me know!\nBtw: I was working with preview2 in my previous test. But this new test with the latest build of preview1 gives the same error.\n. Got it working on a Raspberry Pi 3 with Raspbian! Unbuntu has some problems with the Raspberry Pi 3: \nhttps://stackoverflow.com/questions/41353092/ubuntu-freezes-after-boot-starting-kernel-raspberry-pi-3\nhttps://bugs.launchpad.net/ubuntu/+source/linux-raspi2/+bug/1652270\nI created a new mvc project with the cli using the latest preview2 version. I followed the intructions at https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md and got it working. I will create a pull request with more details about the specific steps later on. \nStill need to figure out how to expose the dotnet server to the internet, but that will be a matter of figuring out the correct configuration. \nThanks for the help!. Got it working on a Raspberry Pi 3 with Raspbian! Unbuntu has some problems with the Raspberry Pi 3: \nhttps://stackoverflow.com/questions/41353092/ubuntu-freezes-after-boot-starting-kernel-raspberry-pi-3\nhttps://bugs.launchpad.net/ubuntu/+source/linux-raspi2/+bug/1652270\nI created a new mvc project with the cli using the latest preview2 version. I followed the intructions at https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md and got it working. I will create a pull request with more details about the specific steps later on. \nStill need to figure out how to expose the dotnet server to the internet, but that will be a matter of figuring out the correct configuration. \nThanks for the help!. Simply adding .UseUrls(\"http://*:8088\") did the trick:\n```\npublic static IWebHost BuildWebHost(string[] args) =>\n            WebHost.CreateDefaultBuilder(args)\n                .UseStartup()\n                .UseUrls(\"http://*:8088\")\n                .Build();\n    }\n```\n. Simply adding .UseUrls(\"http://*:8088\") did the trick:\n```\npublic static IWebHost BuildWebHost(string[] args) =>\n            WebHost.CreateDefaultBuilder(args)\n                .UseStartup()\n                .UseUrls(\"http://*:8088\")\n                .Build();\n    }\n```\n. @leecow : Any indication if running dotnet.exe will be possible in x64 in the near future?. @leecow : Any indication if running dotnet.exe will be possible in x64 in the near future?. @leecow Thanks for the reply! Would be nice to have access to more memory in my application :). @leecow Thanks for the reply! Would be nice to have access to more memory in my application :). @leecow Any update on the x64 support?. @leecow Any update on the x64 support?. Yes. Yes. ",
    "kinglionsoft": "@Tealons It works fine with a console application, but not mvc application as dotnet publish failed.\nhttps://github.com/dotnet/cli/issues/6746. ",
    "pksorensen": "It should work. Go ahead and try the instructions at https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md and let us know if you hit any problems.\nI followed it, but getting a Segmentation fault when running it on raspberry pi zero w.\n/cc @Petermarcu\n. thanks @Petermarcu  - is this a dependency that will alsways be there or would there be a solution/workaround that would allow us to run on pi zero?. ",
    "TFTomSun": "Are you planning to create docker images for Raspbian? . Works. thx.. ",
    "MichaelSimons": "@TFTomSun, Yes, .NET Core Docker images that can be used on RaspberryPis are actively being worked on.  This is the issue tracking the work.. @zhili1208 - can provide details about which version of the the SDK docker image you are using?  Which version of the SDK does it include?\n$ docker run --rm microsoft/dotnet:2.0-sdk dotnet nuget --version\nNuGet Command Line\n4.3.0.5. Agreed with @svick - this is not an issue with the .NET Core Docker image.. @TAGC, Are you alright with closing this issue?. @Petermarcu, I have no bandwidth w/Docker releases this week.  Will try to find time next week.. I don't believe this issue is specific to docker containers rather it is an issue related to running dotnet restore from the root (the default working directory for containers).  Running SDK commands like restore from the root is generally not a recommended practice because the way the tools scan all sub-folders looking for projects.  Using a project folder as @omerlh discovered is the recommended pattern. \n I would recommend following up with the CLI/NuGet folks regarding the hang.. The formatting this in the rendered MD isn't super IMO.  If you glance at the page, they almost look as one number.  Would it make sense to have an explicit delimiter between the two?. Can this be reworded to avoid 'and ... and'?  Could we get by with \n\nDocker images and .NET Core Content Reference\n. \"This document described\" => \"This document describes\". I question if the eol, eol-date properties are being handled property.  It seems weird that eol is present but not set for old servicing releases once a new release is out (e.g. 2.0.8).  I kind of feel that eol is more of a channel property however and shouldn't be specified at all on the individual releases.  Here is a snippet to illustrate what I am thinking for this file:\n\n{\n  \"channel-version\": \"2.0\",\n  \"latest\": \"2.0.9\",\n  \"release-date\":\"2018-05-21\",\n  \"lts\": false,\n  \"eol\": false,\n  \"eol-date\": \"2018-10-01\",\n  \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\n  \"releases\": [\n  {\n    \"release-date\": \"2018-07-10\",\n    \"release-version\": \"2.0.9\",\n    \"security\": true,\n    \"release-notes\": \"https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.9.md\",\n    \"runtime\": {\n        \"version\": \"2.0.9\",\n        \"version-display\":\"2.0.9\",\n        \"vs-version\":\"15.7\",\n        \"files\": [\n...\n        ]\n    },\n    \"sdk\": {\n        \"version\": \"2.1.202\",\n        \"version-display\":\"2.1.202\",\n        \"vs-version\":\"15.7\",\n        \"csharp-language\": \"7.2\",\n        \"files\":[\n...\n        ]\n    },\n    ...\n}\n. Array properties should have a plural name.. This doesn't seem necessary when the checksum is included in the files.. These json files should be formatted consistently.  In general they seem rather inconsistent.  Here the closing } is are the end of the file.  Other places the Files are one-liners.. I find the file name formatting to be inconsistent.  IMO it should always be the full name of the including the extension.. Is this being generated by a tool or hand crafted?  These documents should be validated against a published schema. \n Mistakes like checksums- should be caught before being published.. Looks good.. The part that is confusing to me is that it is being treated as an intelligent key/identifier yet the value is not unique enough to distinguish the difference between the various files.  By that I mean \"name\": \"sdk-win-x64\" doesn't contain enough information to distinguish between the zip and exe.  This could lead to issues with consuming code.  IMO filename would be a better choice here.. This seems incorrect.  This entry is repeated in more than one place.. This should be set to true now and get propagated to the 2.0 file.. There are move of these incorrect names.. search for dotnet-dev-wizip and you will find a number of them.  I'm not sure if there are more as well.. The formatting is not correct here.  When rendered on GitHub, '2.' is not on a separate line.. You may consider adding the cmd to cleanup 'dotnet.tar.gz'. Why not include the same level of detail as provided for Linux?  . > switching the casing will enable the same commands to work on windows\nI'm not sure I follow this statement?  What casing are you referring to?. What do you think about referencing the ARM samples directly?\nhttps://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/dotnet-docker-arm32.md\nhttps://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/README.md\nI wonder if noobs may have the impression this would work from an x64 machine.  It might be good to clarify this is about running .NET with Docker on ARM hardware.. It would be nice to not have a versioned url here as it is just another artifact to keep up-to-date when the next preview/release is available.. Thoughts on including instructions for Windows ARM?. Should there be an * explaining that ARM32 support starts in 1809?. ",
    "jeremylindsayni": "If anyone is still hitting problems getting a C# app deployed and working on Raspbian, I wrote a post about my experiences, and how I managed it - https://jeremylindsayni.wordpress.com/2017/07/23/running-a-net-core-2-app-on-raspbian-jessie-and-deploying-to-the-pi-with-cake/\nHopefully this'll help any folks still trying to get running on Raspbian.. ",
    "LeonidasFettikus": "Hi guys, would it be possible to run a dotnet core app inside a docker container on a Raspberry Pi Zero?. I thought so. Just wanted a confirmation before I abandoned/committed to the idea.. @muratg ok will do. . ",
    "wfurt": "no, it won't @LeonidasFettikus . The CPU (ARMv6) does not have instructions .NET needs. \n(https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md). core 1.1. has known problem @gu3st .  Can you  reproduce it with 2.0 preview? @bartonjs submitted fix for 1.0 and 1.1 and it is in testing right now. There is no pre-built binary yet AFAIK.. Are we positive the link has runtime dependencies @Petermarcu ? I would expect the -dev packages be needed only for building. They typically contains headers and static libraries. . agreed. I'll do some testing and I can update docs - unless we already know the answer. If @omajid is right, we should look at build process. I would expect -devel packages not needed for runtime. . I was wondering about adding reference to 2.0 preview2 as preview1 still has some issues and current head is much better. I can add something to place where I reference tested Yocto version. . Are you sure you have all prerequisites and no older dotnet versions lingering around? \nAlso what is you OS version. You did not provide any details about that. . It is possible to have both, one just needs to be careful not to mix them. \nI repeated your steps on 10.12.5 and I don't see any crash. \nI assume you used the pkg installer in both cases, right? \nYou can run:\ndotnet build  -v d| grep System.IO.FileSystem\nThat will produce more verbod=se output and it would show you where the System.IO.FileSystem is coming from. \nYou can also try to publish standalone app and see if that makes any difference. \ndotnet publish  -r osx.10.12-x64\n./bin/Debug/netcoreapp2.0/osx.10.12-x64/sample20\n. good to know. I don't know why the .nuget would get polluted with incompatible version but at least you have some path to 2.0 now. You do not need to recreate the directories. \"dotnet restore\" should take care of all dependencies for your project.  . If you already have openssl you can try to run yum with  --skip-broken (as the message suggests)\nAll what dotnet needs is to find dynamic libraries from openssl. (and libcurl) . BTW AMI Linux is NOT one of the supported and test platforms. There should be no surprise that there are some bumps. This is one reason for publishing the tar file so you do not need to fight package dependencies. . What base OS do you use and what .Net package? Did you check that everything works using tar distro? I'm trying to figure out if this is pure packaging issue or if there are really missing dependencies.  . cc: @tmds. seems like  it cannot find dotnet-runtime-deps-2.1 -2.1.2. That goes back to original issue. AMI Linux names packages different than RedHat. Now, assuming you have correct openssl 1.0.x installed you can try following trick:\nopenssl-libs-ami.spec.txt\nDownload attached spec file.\nrpmbuild --bb  openssl-libs-ami.spec.txt\nThat should produce empty openssl-libs in  /root/rpmbuild/RPMS/ \n(use find if not there as the location may wary) \nrpm -i openssl-libs-1.0.0-0.x86_64.rpm\nand try the install again. \nGood luck. AMI linux is not tested so .net may or may not work properly. \nThe instructions should help you to at least try. \n. Did you check with netstat -an| grep 5000 what state the port is in @foo-baar . Thanks @foo-baar It really looks like the dotnet process is hogging the port. \nI wanted to make sure this is not a race condition closing the port. . https://stackoverflow.com/questions/19732145/python-raw-socket-protocol-not-supported\nYou need to use AF_PACKET (17 on Linux) but that does not seems to be defined for .net.\nTry Cprogram as @stephentoub suggested and check it with strace. . How exactly do you execute this? I don't see new window when executed from simple app running in  xterm. Conceptually .NET Core does not have GUI functions - like opening window. It is possible that the windows is created by your desktop manager or something else. \nIf you still think it is bug please provide full repro app and instructions how to run it.. can you come up with some simplified repro app? \nDoes it crash when you start it from shell? \nDid you get core file after the crash? . What version of curl and openssl do you have? This may be same as #24891 and #24552\nYou can try container with supported OS. That should get you around linkage problems. . oh, the link did not work ;( \nhttps://github.com/dotnet/corefx/issues/24552 and https://github.com/dotnet/corefx/issues/24891 . can you come up with simplified repro @SirwanAfifi? . I'll take a look @jamespettigrew Last time I tried was poky-morty. \nIt seems like curl it self got updated. . I'm glad you got it working @jamespettigrew. In general I think we build on oldest supported distro and that may suck in some dependencies - possibly unintentionally. \nDid you check https://github.com/dotnet/source-build ??? There is effort to allow building from sources and that should avoid troubles like this. As minimum you may be able to rebuild native dependencies for corefx. But I understand if you want to use whole consistent package. . probably not. I was planing to update Yocto  notes, but that can be done independently. . not necessarily. libcul is still build and runtime dependency. Even if 2.1 has default http handler implemented in c#, the old handler is still part of distribution.\nHowever, to get it you need to target 2.1 in your project files. Simply using new runtime is not sufficient. . my goal is to get that done in next week or so. I did only limited testing on RP2.\nIt would be great if you can give it try on your platform when ready @WangAngIOT . note that the output looks like (old and new):\nfurt@Ubuntu:~$ wget -q https://packages.microsoft.com/config/debian/8/prod.list\nfurt@Ubuntu:~$\nfurt@Ubuntu:~$ wget -nv https://packages.microsoft.com/config/debian/8/prod.list\n2018-10-08 13:58:16 URL:https://packages.microsoft.com/config/debian/8/prod.list [75/75] -> \"prod.list\" [1]\nthe -q provides no feedback. . run the app under strace -f -s 20 -e trace=%network dotnet foo.dll\nThat will show you what is happening. \nNote that you need root privilege to use ports bellow 1024. \nCheck if you have SELinux enabled in enforcing mode. \nIf so, policy there may need to be adjusted. \n. That is good clue. \nAre you setting SocketOptionName.Broadcast on the socket? \n(https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.socketoptionname?view=netcore-2.1)\nSending broadcast is restricted operation on Linux.\nhttps://stackoverflow.com/questions/16217958/why-do-we-need-socketoptions-so-broadcast-to-enable-broadcast\nYou should be able to see same problem with running echo foo | nc -v  -u 127.255.255.255. I'm not aware of any global flag.  But that does not need to be done at creation. \nYou can do it any time after - just before the send. . What API do you have available? You can try to find the socket object via reflection and make the call as needed. . https://github.com/dotnet/coreclr/issues/18486 ???. try apk add libstdc++. That is normally part of OS so it is not listed as extra prerequisite. \n. mistyped what? You should not need version when adding package and it is libstdc++ not liststdc++\nbash-4.4# apk info libstdc++\nlibstdc++-6.4.0-r9 description:\nGNU C++ standard runtime library\n . note that apk add libgcc should not be needed. That should be pulled in as dependency for libstdc++\ndo we plan Alpine specific instructions @leecow ?\n. most certainly. In order for some console functions to work you need to TTY -> controlling terminal.\nThat is normally created by login or sshd and it will associate it with your session. That will not work if your stdin is not terminal.\nssh for example has -t to force pseudo-terminal allocation for cases when it is needed. Your supervisor app may need to do something similar. I'm not sure at this point if that would make it working but at least you would get over the exception. . Does it happen only when running in visual studio @johnmelodyme? Check that you don't have another copy running in background. . strace -f -s 200 -e trace file dotnet XX\nTraditionally, I would look for any appearance of \"sync\" call. Some simple repro code would still be nice se I can get better idea what functions and calls are involved.  . The Activity.log does not have info I was looking for. It seems like the 'file' group has only subset of the system calls ;( Could you please re-run it with strace -tt -f -s 200 -T -e trace=%file,%desc \nI run the code fragment you posed and I see openat, fstat, flock, ftruncate, lseek, write, flock and close sequence. It takes 3-4 ms on my system. There is also some timezone processing but I'm not sure if that matters. \n. yes, locking seems to be the problem.  You can try to mount your volume with nolock option.\nI don't know if there is any option to do IO without locking.\ncc: @JeremyKuhne \n. cc: @janvorli I'm still not sure why the flock() would take so long to fail.  . I think observed problem is specific to particular OS/NAS combination. it is clear from the trace that we spent time in OS call and I don't think there is much we can do about it. If anything, the question is why do we lock in such trivial cases.  It would be nice if there is some way how to choose. Perhaps question for IO experts. . any thought @JeremyKuhne ? It would be nice if there is some way how to avoid locks in trivial cases like this. . There were few cases when things moved between corefx and coreclr and you would get strange errors when caught in wrong snapshot. That would not explain why other platforms would work. I assume you build in same tree? When cross-compiling or changing target OS or ARCH, make sure you clean whole build tree.\nIf you still have issue please post exact steps and perhaps bit of logs so we can try to reproduce it.   . That spec file only creates fake dependencies so our package would install without much wrestling. From what distro did you get RPM @leecow ? I did quick check with Centos7 and it still asks for openssl-libs (missing on AWS)\n[root@cent tmp]# rpm -qRp dotnet-runtime-deps-latest-centos.7-x64.rpm\nopenssl-libs\nlibicu\nkrb5-libs\nrpmlib(PayloadFilesHavePrefix) <= 4.0-1\nrpmlib(CompressedFileNames) <= 3.0.4-1\nnote for @ptdel that the fake spec does not build anything. If it hangs you will need to debug it on your system.  Make sure you don't have other processes holding rpm database lock. . what do you get from: rpm -qi openssl-libs. Maybe there is standard provider now. \nI don't have access to any AMI Linux to check.\n. BTW you should be also able to use rpm -i --nodeps --force dotnet-runtime-deps*.rpm.\nWith that, rest should install as well. . The intention was to explicitly say that standalone app on Yocto works same way as standalone app on any other distribution. Maybe that is implicitly assumed but from now on, generic instructions can be followed. If we have any generic pointer that may be handy here. . This gives me error:\nfurt@Ubuntu:~$ wget -nvO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor\nwget: illegal option -- `-nO'\nIt should probably be \nwget -nv -O -  https://packages.microsoft.com/keys/microsoft.asc. ",
    "christianspecht": "Another related issue: about half of the \"release notes\" links here (from where I found the file I submitted the pull request for) point to https://github.com/leecow/core instead of https://github.com/dotnet/core.\nIs this intended? (I'm asking because it's only half of the links, not all of them)\nIf not, I can submit a pull request for that too.. ",
    "TimurZanagar": "@AbhimanyuAryan Why you would like to run .NET Core on Android device? I think you're looking for https://www.xamarin.com.. ",
    "aloisdg": "Ok sure.. ",
    "SailorMax": "@Petermarcu\n\"25MB Disk Space\" Is it for native compiled application? \"Self-contained\"?\nCan you also add information for \"Framework-dependent\"? (including framework size)\nhttps://docs.microsoft.com/en-us/dotnet/articles/core/deploying/. ",
    "mikeball": "Links working great now. Yes, I need the tarball because I'm installing on Solus Linux (which doesn't use .deb) and the ubuntu tarballs seems to work fine. Thanks!. Sorry to re-open but it now appears that the Ubuntu 16.04 tarball may not be correct tarball.\ndotnet-dev-debian-x64.1.0.0-rc3-004530.tar.gz\ndotnet-dev-opensuse.13.2-x64.1.0.0-rc3-004530.tar.gz\ndotnet-sdk-ubuntu.16.04-x64.1.0.0-rc3-004530.tar.gz\nNotice that the ubuntu file name is sdk, not dev?\nIt's not same folder structure as previous dotnet preview releases of ubuntu, nor the debian or opensuse tarball. When extracted, you get a directory \"sdk\", without a dotnet executable contained. I'm unable to locate a dotnet exectuable within ubuntu tarball.\n. Ok, I see the download links have updated and now download what appear to be valid tarballs of the name \"dotnet-dev-ubuntu.16.04-x64.1.0.0-rc3-004530.tar.gz\". Thanks!. ",
    "jinhale": "@gkhanna79 I'm currently using the i686 version, which may be the problem. I'll try Debian for AMD 64 and let you know if that fixes the problem. I'm not sure how to assess the binary architecture from https://go.microsoft.com/fwlink/?LinkID=835021. That appears to be a 64 bit binary when I tried to download it from my browser. I'm now guessing Microsoft assumes we all use a 64 bit processor and kernel.. I couldn't get a necessary wireless driver to work with the 64 bit version of Debian, Ubuntu, or CentOS so I abandoned that. I did get dotnet to work on 64 bit Fedora 24. I feel resolved on the issue. \nI would have liked to know before hand that dotnet was a 64-bit binary on Linux, but maybe I'm the only one that tried to install dotnet on a 32-bit Linux machine without realizing the dotnet binary was 64-bit. . ",
    "chikehenderson": "I'm on old 32 bit hardware using debian 8, trying to get SOMETHING to run... Ahhrghh!! ok do you have any suggestions.. or seen any workarounds by any\nchance...\nOn Wed, Jul 19, 2017 at 4:23 PM, Peter Marcu notifications@github.com\nwrote:\n\nWe don't have an official build of x86 (32-bit) Linux.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/467#issuecomment-316440742, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AGDyiPPUJHz7QkZGBPwgjYzO0TX7kt4dks5sPi2QgaJpZM4L31l6\n.\n. Sounds interesting..\n\nOn Wed, Jul 19, 2017 at 4:36 PM, Peter Marcu notifications@github.com\nwrote:\n\nSamsung and the community have been working on building Linux x86.\n@jyoungyun https://github.com/jyoungyun do you have any advice on how\nsomeone could build an x86 linux build or can you point to a place they are\nbeing built?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/467#issuecomment-316444198, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AGDyiD3z50TS-_OZgFb8LoQDoK6iMLWvks5sPjCCgaJpZM4L31l6\n.\n. Sure\n\nOn Wed, Jul 19, 2017 at 8:40 PM, Peter Marcu notifications@github.com\nwrote:\n\n@janvorli https://github.com/janvorli may also be able to give advice.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/467#issuecomment-316510287, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AGDyiAu7b1Gs2A-EeTejdG6RfmWUam6Rks5sPmnTgaJpZM4L31l6\n.\n. \n",
    "nil4": "Is it expected that the RC4 installer has no digital signature (I looked at the Windows 64-bit one only)? . \ud83d\udc4d to both suggestions, and particularly to using ISO dates (2017-03-07) everywhere.. @onyxmaster https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.0-download.md#windows-server-hosting. @onyxmaster apologies, I did not notice that the download link points to an exe file and not an MSI.  I see now what you mean.. Confirmed, same here.. @noahfalk I am seeing a similar issue using the AppDynamics .NET Core profiler agent on a netcoreapp2.1 application and .NET Core SDK 2.1.300. \nWhen the application starts, the following exception is thrown:\nSystem.BadImageFormatException\n  HResult=0x8007000B\n  Message=Bad IL format.\n  Source=System.Private.CoreLib\n  StackTrace:\n   at System.AppDomainManager..ctor()\n   at System.Reflection.Assembly.GetEntryAssembly()\n   at Microsoft.AspNetCore.Hosting.WebHostBuilder.BuildCommonServices(AggregateException& hostingStartupErrors)\n   at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build()\n   at MyApp.Web.Startup.Main(String[] args)\n. I am not using Azure. The error occurs on my local PC when launching the application, with IIS Express, under the VS debugger, regardless of whether IIS Express 64-bit or 32-bit is selected.\nThe application starts up correctly if I remove the AppDynamics.Agent.Windows NuGet package, or set CORECLR_ENABLE_PROFILING environment variable to 0 in my Web.config (disabling the profiler).. @noahfalk  Here are the steps to reproduce the issue I see. In a command prompt, run:\ncmd\nmkdir Repro1622 && pushd Repro1622\ndotnet new web\ndotnet add package AppDynamics.Agent.Windows --version 4.4.3\nOpen the project in Visual Studio, and build it once. \nA number of files brought by the AppDynamics package show up under the project, including Repro1622.AppDynamicsConfig.json. Edit this file and replace its content with:\njson\n{\n  \"controller\": {\n    \"host\": \"localhost\",\n    \"port\": 443,\n    \"account\": \"customer1\",\n    \"password\": \"c025be84-d72d-4f6e-b5b4-b33ce264992b\",\n    \"ssl\": true,\n    \"enable_tls12\": true\n  },\n  \"application\": {\n    \"name\": \"irrelevant\",\n    \"tier\": \"irrelevant\",\n    \"node\": \"irrelevant\"\n  }\n}\nThese values are not important, they just need to be different than the default placeholders for the profiler to activate.\nAdd a Web.config file to the project, with the following content:\n```xml\n\n\n\n\n\n\n\n\n\n    <environmentVariable name=\"CORECLR_PROFILER_PATH_32\" value=\"D:\\Repro1622\\bin\\Debug\\netcoreapp2.1\\AppDynamics.Profiler_x86.dll\"/>\n    <environmentVariable name=\"CORECLR_PROFILER_PATH_64\" value=\"D:\\Repro1622\\bin\\Debug\\netcoreapp2.1\\AppDynamics.Profiler_x64.dll\"/>\n  </environmentVariables>\n</aspNetCore>\n\n\n\n```\n\u26a0\ufe0f Per the AppDynamics docs, the two CORECLR_PROFILER_PATH_* variables must be full paths; adjust as required.\nStart debugging (F5) with IIS Express and note BadImageFormatException is thrown at System.AppDomainManager..ctor() when the application starts.\nFind the newest .log file under %ProgramData%\\AppDynamics\\DotNetAgent\\Logs\\Profiler, which should be similar to:\n2018-06-07 18:22:31.086553<info>:Use CoreCLR profiler\n2018-06-07 18:22:31.089553<info>:Should instrument standalone profiler process (config found at D:\\Repro1622\\bin\\Debug\\netcoreapp2.1\\Repro1622.AppDynamicsConfig.json): dotnet as app Repro1622.dll\n2018-06-07 18:22:31.092555<info>:Agent Configuration: {\"controller\":{\"account\":\"customer1\",\"enableTls12\":true,\"ssl\":true,\"host\":\"localhost\",\"password\":\"***\",\"port\":443},\"application\":{\"tier\":\"irrelevant\",\"node\":\"irrelevant\",\"name\":\"irrelevant\"}}\n2018-06-07 18:22:31.092555<info>:Enabled rejit normally, disabled all NGEN images.\n2018-06-07 18:22:31.163553<error>:InjectMEE failed.\n2018-06-07 18:22:31.935346<info>:Transforming 57540:clrhost:System.Void System.AppDomainManager..ctor() with [[],[]]. @noahfalk glad I could help, and thank you for the update, much appreciated! I am a customer, and have opened an AppDynamics support ticket about this; will update it shortly with a link to this issue.. Similarly, VS 2019 RC installs SDK 2.1.600, while version 2.1.504 is the latest documented at .NET Core 2.1 downloads. \nHere is the dotnet --info output:\n```\n.NET Core SDK (reflecting any global.json):\n Version:   2.1.600\n Commit:    d9a9af25eb\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.17763\n OS Platform: Windows\n RID:         win10-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.600\\\nHost (useful for support):\n  Version: 2.2.2\n  Commit:  a4fd7b2c84\n```. Did you mean 12/13/2016?. Could the time machine be turned on once more to retroactively fix the merge to master? /cc @leecow @blackdwarf \n\nhttps://github.com/dotnet/core/blob/master/release-notes/README.md#release-notes\n1.0.3 released 12/13/1016. Did you mean 2018-10-02 (i.e. Oct 2nd, not Feb 10th). \n",
    "hgleaves-ncuadmin": "@Petermarcu @weshaggard \nI'm not sure that this is a 100% compiler only change. What I'm suggesting is we modify reflection logic to provide an additional ordering option (so that we provide backward compatibility). If we change the compiler so that it writes stuff in a different ordinal manner then this changes existing behavior, which I'm not advocating.\nAs I see things we need this:\n\nCLR/.Net Type change to include an additional data member \"LexicalPosition\" (0, 1, 2, etc)\nCompiler changes to record a members lexical order by populating \"LexicalPosition\"\nCLR/.Net change to support a new BindingFlags value \"LexicalOrder\".\n\nI'm unfamiliar with the innards of this so apologies if this is simplistic/unrealistic.\n. @Petermarcu @weshaggard \nAlternatively someone could take steps to commit to the view that current MetadataToken ordering is in fact the same as lexical ordering and takes steps to ensure this remains in force, then existing behavior will remain unchanged and we can all understand - going forward - that ordering by MetadataToken is garuanteed to always be the lexical order (as many believe to be the case today).\nIn fact if this were done we could still add the new BindingFlags member to under the hood, order by MetedataToken.. ",
    "benscobie": "Thanks @leecow - this is now also the case for the RC4 release.. Here's a download link for it: http://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/DotNetCore.1.0.0-VS2015Tools.Preview2.exe. ",
    "nikolenkoanton92": "@Petermarcu sorry cookie issue in chrome.. ",
    "tannergooding": "@Petermarcu, while something like those scripts would work, I think a 500 line powershell or a 700 line shell script is really a lot more complicated then it needs to be \ud83d\ude04.\nThose scripts, which are just for downloading dotnet cli are larger than the scripts we currently use for Build, Restore, and Test in some of our repositories.\nWhat I want is the ability to give three things and call a string format function to download the bits I need:\n Version\n Operating System (Windows, Ubuntu, Mac, etc -- possibly including the OS Version, if required. Such as: ubuntu.14.04)\n* Target Platform (x86, x64, ARM, etc)\nThat is simple, self explanatory, and can be done in very few lines of shell script on any platform.. @richlander, was this ported elsewhere?. Some file systems store the creation time (ext4 does, iirc), but it is not directly accessible.\nWould returning the last modification time be reasonable here?  It seems to be as close as you can get to creation time for all file systems, and (imp) is better than returning 1/1/0001. @dotnet/roslyn-compiler (specifically @agocke / @jaredpar) might be a better tag \ud83d\ude04 . > Well, unsafe won't work very well with Vector because there's no way to load Vector from a pointer.\nThis should be possible in the latest C# 8 preview, with the unmanaged constructed types feature. The new feature lets you take the address of and have a pointer to a generic struct, like Vector<int>, if the compiler can statically determine it is unmanaged.\nIt would probably have about the same perf as using Unsafe.As or Unsafe.Read/Write, however.. > Shorter arrays; accessing 256MB is going to dominate over the CPU instructions for that size of array as it can't fit into CPU cache\nProbably a good case for HWIntrinsics and the NonTemporal store functions?. > That code is very impressive however from BDN I see the following output:\n@OnurGumus, are you testing a Debug configuration? Almost all of those calls should have been inlined.. Well, there is definitely something up there. Maybe tiering, but I had thought BDN took care of that as well.... I don't believe this is marked as shipping yet.. Not sure if it's worth mentioning, but for the HWIntrinsics, the snap happened in a somewhat irregular place and there are several APIs (basically the delta between preview1 and preview2) that no longer exist and will always throw PNSE when called (if on preview1).. ",
    "nikibobi": "Thanks for the info. I would love to see System.IO.Ports work on Linux. It will be very useful. I would love to see System.IO.Ports work on Linux. It will be very useful. ",
    "MurtuzaTravadi": "When i am using System.IO.File.ReadAllLines it give me garbage value.... Thank you so much @AustinWise  it helps a lot and save my time. one more thing what about .pdf file?. thanks a lot @neyromant  its work... Any Please Help me out\n@shanselman @AArnott @anurse @AustinWise @devhawk \n. Thank for quick replay @anurse  but i cant change StudentsController to IUnitOfWork \nhow can i change my controller ctor to Other Class name \ncan you please Follow this link (https://github.com/MurtuzaTravadi/DotNetCoreRepositoryPattern)  and guide me to how can i add UnitOfWork concept \nThank you. Its simple solution thanks to @glennc i just replace this part \n```\n private IUnitOfWork _unitofWork;\n    public StudentsController(IUnitOfWork unitOfWork)\n    {\n        _unitofWork = unitOfWork;\n    }\n\n``` . ",
    "SergiiKliebanov": "Hi guys, could you please point out to a library able to convert .docx to .pdf on .net core?. Hi guys, could you please point out to a library able to convert .docx to .pdf on .net core?. ",
    "ulrichb": "Duplicate of #399.. ",
    "jarenduan": "Hi, @Petermarcu, there are 1.03 and 1.1 runtime in the link you post, which partially solved the issue. But for an archive, each version released should be there, right? What about 1.0 - 1.02? I can not find them.. ",
    "PeterSawyer": "Totally agree.  ISO dates naturally sort as well, its the only logical option.  I try to use them in all my UI's (avoid so much confusion) unless the clients specify they need local date format.. ",
    "jonorossi": "Thanks @Petermarcu, hopefully it was clear I was referring specifically to the release dates in the roadmap which currently has \"Spring 2017\" and \"Summer 2017\":\n\nIt would be great if the release dates listed in the roadmap [...]\n\ni.e. https://github.com/dotnet/core/blob/master/roadmap.md#ship-dates. ",
    "hemalrathod": "I tried to install with following commands as available on Readme\nsudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 417A0893\nsudo apt-get update\nsudo apt-get install dotnet-dev-1.0.0-rc3-004530\nNow the problem is its for xenial and I have yakkety so its not installing. \nI tried install full tar file and done following\nsudo mkdir -p /opt/dotnet\nsudo tar zxf [tar.gz filename] -C /opt/dotnet\nsudo ln -s /opt/dotnet/dotnet /usr/local/bin\nBut still dotnet command gives error. dotnet core works fine but asp.net is giving me error.\nI generated project with yeoman and used dotnet restore but it couldnt find project file with .json extension. So someone on StackOverflow told me to download RC3 from github. I downloaded according to instructions on Readme page. Then I downloaded tar file for Ubuntu 16.04 and unpacked it in /opt/dotnet and made a link. Still dotnet not running.. I downloaded tar file from https://go.microsoft.com/fwlink/?linkid=839636. Its for 16.04 because 16.10 not available.. I get following error. Its after tar file installation. Previously dotnet was running fine.\n\n . @Petermarcu sure. Ok I will try and let you know. Thank you.. Yes, its working now @Petermarcu.\nThank you so much.\nI really liked new rc4.\nNow console application is very clean with two files only.\nAlso I dont need yeoman to generate MVC app. \ndotnet new mvc generates full MVC Web app. dotnet run just gives me full application running at http://localhost:5000 and thats it. Its just amazing that after 15 years, I can run my dotnet on Linux.\nThank you again.\n\n. ",
    "Van-Dame": "I already had 1.0.0-preview2-1-003177 installed on Ubuntu 16.10 and wanted to update to the latest bits. Found your answer and was able to get it to work for me. Here is what I did:\n\nDownloaded rc4 sdk linked in your answer\nExtracted to local folder ~/Downloads/dotnet-dev-ubuntu-x64.1.0.0-rc4-004771/\nCopied 1.0.0-rc4-004771 folder from ~/Downloads/dotnet-dev-ubuntu-x64.1.0.0-rc4-004771/sdk/ to /usr/share/dotnet/sdk/ folder\nPROFIT!!\n\nSample dotnet --info run:\n```\n$ dotnet --info\n.NET Command Line Tools (1.0.0-rc4-004771)\nProduct Information:\n Version:            1.0.0-rc4-004771\n Commit SHA-1 hash:  4228198f0e\nRuntime Environment:\n OS Name:     ubuntu\n OS Version:  16.10\n OS Platform: Linux\n RID:         ubuntu.16.10-x64\n Base Path:   /usr/share/dotnet/sdk/1.0.0-rc4-004771\n```. ",
    "wbern": "@Petermarcu provided a working solution. @Van-Dame's helpful re-phrasing unfortunately only helps half-way (dotnet run won't work). I'll contribute with some raw commands under Ubuntu 16.10.\ncd ~/Downloads\n\nTake the runtime archive from here:\nhttps://go.microsoft.com/fwlink/?LinkID=835024\n\nwget -O runtime.tar.gz https://go.microsoft.com/fwlink/?LinkID=835024\nmkdir -p runtime && tar -xzvf runtime.tar.gz -C runtime/\n\nThen get the sdk archive here:\nhttps://go.microsoft.com/fwlink/?linkid=841687\n\nwget -O sdk.tar.gz https://go.microsoft.com/fwlink/?linkid=841687\nmkdir -p sdk && tar -xzvf sdk.tar.gz -C sdk/\n\nCopy the contents out of shared\\Microsoft.NETCore.App\\1.1.0 folder in the runtime archive into two places in the sdk archive:\nshared\\Microsoft.NETCore.App\\1.1.0\nshared\\Microsoft.NETCore.App\\1.0.3\n\ncp -r runtime/shared/Microsoft.NETCore.App/1.1.0/* sdk/shared/Microsoft.NETCore.App/1.0.3\ncp -r runtime/shared/Microsoft.NETCore.App/1.1.0/* sdk/shared/Microsoft.NETCore.App/1.1.0\n\nCopy [...] to /usr/share/dotnet/sdk/ folder (Van-Dame)\n\nsudo cp -r sdk/1.0.0-rc4-004771 /usr/share/dotnet/sdk\nsudo cp -r sdk/shared /usr/share/dotnet/\nsudo chmod -R +r /usr/share/dotnet/shared\nsudo chmod -R +r /usr/share/dotnet/sdk/1.0.0-rc4-004771\n\nThat should work. If it doesn't, also do the same thing for the host folder copying the host\\fxr\\1.1.0\\ contents into both the host\\fxr\\1.1.0\\ and host\\fxr\\1.0.1\\ folders in the sdk\n\ncp -r runtime/host/fxr/1.1.0/* sdk/host/fxr/1.0.1\ncp -r runtime/host/fxr/1.1.0/* sdk/host/fxr/1.1.1\nsudo cp -r sdk/host/fxr /usr/share/dotnet/host/\nsudo chmod -R +r /usr/share/dotnet/host/fxr\nNow you should be able to do the following in succession..\ndotnet --version (should yield 1.0.0-rc4-004771)\nmkdir test\ncd test\ndotnet new console\ndotnet restore\ndotnet build\ndotnet run. Additionally if anyone runs into a problem in Visual Studio Code that no imports can be found using the below template:\n```\nusing System;\nnamespace testproject\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n```\nThe solution for me was to (strangely) do the following:\n Modify testproject.csproj netcoreapp1.0 to netcoreapp1.1\n Do dotnet build in terminal\n* Modify testproject.csproj netcoreapp1.1 back again to netcoreapp1.0\nNot sure why this works even though I tried dotnet new several times, but it just did. Maybe something with the templating files not running with 1.1.0/RC4...?\nAlso not sure if I should let it be at netcoreapp1.1, because it seems I can't install some packages via dotnet add package ... depending on the version.. ",
    "manikandan05": "Hi @Petermarcu ,\nYour short and crispy answer was cleared my all doubts.\nThanks.. Hi @Petermarcu ,\nThanks for your detailed information. I am very cleared now.\nI have an another one concern, when i have create a WebApplication(.NET Core) from Visual Studio 2015, the project created with netcoreapp1.0 framework entry in project.json.\nDuring project creation time, we have framework selection combobox in project creation window. If i have choose any framework means, the selected framework will influenced in my (netcoreapp) project in any one places (cases) or not?\nIf its not affected means, then why framework selection options available during .NET Core application creation time.\n\nThanks,\n. Hi @Petermarcu,\nI have one final concern as, in ASP.NET Core projects netcoreapp1.0, netcoreapp1.1 and netstandard1.6 have some default entry values like \n\"netcoreapp1.0\": {\n      \"imports\": [\n        **\"dotnet5.6\",\n        \"portable-net45+win8\"**\n      ]\n    }\nIn this above code blocks, i need to know the imports section and its values purpose!\nThanks.. Ok thanks, i will ask this question in aspnet/Home.\n. ",
    "McNerdius": "Pure speculation on my part, but i wonder if the answer to this is in the name of the license itself - \"MICROSOFT PRE-RELEASE SOFTWARE LICENSE\"\nNot wanting to fuss about with (potential) third-party compatibility issues in pre-release seems reasonable.\n\u00a2\u00a2. ",
    "miyu": "Relevant blog post from jetbrains: Rider EAP 17: NuGet, unit testing, good and bad news on debugging. ",
    "lundcm": "I suppose this would explain why there aren't decent plugins with other editors like Atom, Sublime, etc.. ",
    "pedershk": "Come on, Microsoft. This is no good. You need an open community around .Net Core. Try not to become the next Java.. ",
    "Rutix": "This issue has also been raised here: https://github.com/OmniSharp/omnisharp-vscode/issues/1059 in the past. To be honest it's quite understandable that Microsoft wants to protect the value of Visual Studio and their other tools. As far as I can see the package is an implementation of the ICorDebug interface. Microsoft invested a lot of money and energy in building advanced debugging features around this so it's kinda understandable if they don't want to open source that. There is nothing stopping other developers to implement their own implementation of the interface. \nWhat many people seem to forget is that Microsoft is a big organization. The implementation was not made by the team which does all the open source work. It's totally fair if other teams use the open source stuff to make products which they can sell. . @tetious TBH the demands you are making are kind of not making sense. The key thing in this incident is that Microsoft made it's own debugger implementation based on a public interface. That debugger is part of their commercial products like Visual Studio. Nothing stops another person/team/company to make their own debugger implementation. This is also what Rider started doing: (https://blog.jetbrains.com/dotnet/2017/02/23/rider-eap-18-coreclr-debugging-back-windows/) . You can't just give everything away for free and legally wise it's a whole process when it comes to licensing ect. If you suspect Microsoft to give the debugger away for free do you also expect Jetbrains to give all their stuff away for free? It's a flawed demand you are making.. @tetious except the debugger that they used wasn't made by the team which develops the OpenSource platform. So you can totally see the people who made the debugger implementation as a \"third-party\". You can argue that a command-line debugger not offered by the platform is a lack of feature but that can be contributed to the fact that the platform is pretty new. A lot of features are still missing. . @tetious They have commented on this issue in https://github.com/OmniSharp/omnisharp-vscode/issues/1059 . But as you can see the people commenting on that thread say that it is above their pay grade and there have been conversations. Even though Microsoft says \"One Microsoft\", Microsoft is so big that there are many stakeholders wanting different things. \nI understand your feelings though, but to be frankly emotions almost never have an influence on the level these decisions are made. They are business decisions and people need to convince people to change their views.. @salaros That's a little bit shortsighted tbh. It's an undeniable fact that Microsoft gives a lot back to the community and actively participate in the community. It's ethically incorrect to expect them to share everything for free.. @scherenhaenden \"We love Open Source\" doesn't mean they have to open source everything. And I think https://opensource.microsoft.com/ is indication enough of the \"We love Open Source\" statement. \nIt works on Mac so how is this a strategy to get them back to Windows? There also also opensource implementations now (and it isn't stopping anyone of making their own implementation).. And again. Saying you love open-source doesn't mean you have to open source\neverything. But like others said in this thread, it's kind of irrelevant.\nWe would just like a yes or no answer.\nOn Fri, Oct 26, 2018, 17:43 scherenhaenden notifications@github.com wrote:\n\n\"How would you recommend they monetize Visual Studio\" I never recommended\nto do that or not to do that...\nApple asks for money for everything... and I pay the things I have to\npay... without a word... this is not about \"paying\"... this is about the\nhuge manipulation. you see, Apple never said \"We love Open Source\"...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/505#issuecomment-433451943, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAOvLCdiwUaJ6K-FNhZmp1LJBK4lB02kks5uoy2YgaJpZM4MDYAf\n.\n. @karelz Any chance this can be merged :)?. @UweKeim yes it did. See also https://blogs.msdn.microsoft.com/webdev/2018/12/04/asp-net-core-2-2-available-today/ . @leecow Some links in the opening post are wrong. The link for .NET Core 2.1.8 release notes should be: https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.8/2.1.8.md and not https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.8.md\n\nAnd for .NET 2.2.2:\nhttps://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.2/2.2.2.md and not https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.2.md. Oops forgot that US switches the day and month. Fixed it in the next commit :). ",
    "tetious": "I'm dissapointed but not surprised that Microsoft has completely ignored this issue. Every time I think maybe they've changed and actually intend to be open and collaborative with the community, even around touchy subjects like licensing, they do something like this which leaves a bad taste in my mouth.\nI wish someone would just assign the parties fighting against those who want change to a special project and be done with it. Why do they continue to have so much power to frustrate?\nSorry for the tone, but I've just spent the last 15 minutes trying to work around not having a debugger in Rider. I love Rider and it was the deciding factor for my using .net core for a fairly large project. Now my development is crippled unless I want to switch back to Windows. This is completely opposed to the supposed \"we want you to be happy using .net on any platform\" marketing.\nIt shouldn't be this way. This should have been resolved in a day via a quick email from the Rider team to MS. \nTLDR: making .net core annoying to work for outdated reasons that make no sense is not going to win hearts and minds. Please stop being frustrating!\n. @stefan-schweiger Yep, that was where my \"switch back to Windows\" comment in my wall of text came from. :)\nThere are a number of (imperfect) workarounds and this will likely be a non-issue Soon(TM). My point is that this is another of the dozen papercuts that I've experienced trying to use .net core on a non-Windows platform. The next biggest was expecting RC1 to resemble the final version and not drop dnx and mono-wrapping. A tangent for sure.\n@Rutix I'd argue that the debugger is part of the platform. If the platform is to be free/open, I don't think it is unreasonable to expect a command-line debugger should be included. It seems arbitrary to me to put it behind licensing restrictions that prevent other projects like Atom, Sublime, etc using it. . @Rutix Microsoft was also touting their \"One Microsoft\" initiative not too long ago. Wouldn't your third-party argument go against that? :) \nBut seriously, I do understand that .net core is new, and some features are missing. I made the decision to use it based on the features that existed at the time. I didn't expect things to go backward post rc1. (Losing dnx was even more frustrating.) \nI also realize that Jetbrains is partially to blame here as they violated the license and should not have included the debugger at all. Also, I am partly to blame for relying on pre-release software. :)\nI just don't like silence. Why hasn't Microsoft commented on this? Instead of frustrating the folks who use Rider, why couldn't they have made even a temporary concession so as not to be frustrating? That's my real point. I shouldn't have to follow the politics and care about this stuff. I just wanna write code. . ",
    "stefan-schweiger": "@tetious actually the current Rider version for Windows should already have debugging enabled again, and the Mac and Linux version are soon to follow (in the comments they mentioned that they wrote their own implementation - for what I assume is a wrapper - of the debugger):\nhttps://blog.jetbrains.com/dotnet/2017/02/23/rider-eap-18-coreclr-debugging-back-windows/. Can we please lock the conversation on this issue? The discussion is mostly off-topic and I think probably all valid points for or against it were already made.\nAs much as I would like a clear decision from Microsoft, I don't think arguing about if Microsoft loves open source or not will get us there any sooner.\n@karelz @Eilon you two seem like the most active \"offical\" members in this repo, so please consider this suggestion.. ",
    "lol768": "I agree with @tetious on this. If MS want the platform and ecosystem to be taken seriously and adopted it needs to appear homogeneous externally - regardless of any internal politics that may be in play.\nIf the platform is open, it's entiirely reasonable to expect that the debugger (as such a crucial development tool) comes under the platform umbrella. The lack of acknowledgement of the problem here/discussion of plans moving forward and the bureaucracy seemingly prevented this getting sorted  is incredibly disappointing to see but perhaps not surprisiing from such a large company. It's especially discouraging to see JetBrains, who are putting in the effort to make an IDE comparable to -- better than -- Visual Studio which works on Linux (something Microsoft never bothered doing) and isn't a web browser in disguiise, being hurt by this.. ",
    "paulsapps": "Then why can't the MS open source team write yet another debugger that is open? Not having an open debugger with an open platform is rather strange.. ",
    "0xd4d": "MS released MDbg a long time ago, it's open source, should be trivial to support .NET Core (on Windows). Could take a little bit more work to make it work on Linux/macOS.. It's a missing method in System.ComponentModel.LicenseManager. It doesn't have the method GetLicenseInteropHelperType that returns a type that's referenced by CoreCLR.. Latest daily build fixed it.. Latest daily build fixed it.. This is a known Roslyn bug: https://github.com/dotnet/roslyn/issues/20118\nA workaround is to split the string into many smaller strings, eg.:\nC#\nstring s = \"abc.................\" +\n\"def..................\" +\n...etc...\n\"zzz.............\";. This is a jitter bug and doesn't repro with .NET Core 3.0.. https://github.com/dotnet/roslyn/issues/20118\nhttps://github.com/dotnet/core/issues/2058. Have you tried .NET Core 3.0 daily build? https://github.com/dotnet/core/blob/master/daily-builds.md. Tiered compilation is enabled by default. What happens if you disable it? (set COMPlus_TieredCompilation=0)\nhttps://github.com/dotnet/coreclr/issues/19751. Try dotnet and not ~$dotnet. ",
    "giggio": "We haven't had any answer from Microsoft ever. It is time to at least address the problem, even if the answer is to say that it is what it is.. @carloreggiani This is not a good way to discuss the issue. If you have criticism to bring to the table, than do it, but do it respectfully. Nobody owes you anything, not Microsoft, nor the thousands of people who contributed to the several projects. They can open source, or not, whatever they choose to. Their business model is their problem, and you don't get a say in it (or me). If you don't like it, you can go ahead and build your own open source .NET Core debugging library, or ask them about a position, respectfully, as others here have done.\nYes, they should answer if they are going to open it or not (and this answer is overdue), but no, they don't have to do it. It is not crazy, it is a common business decision, and it is not up to us.. So what @scherenhaenden is saying is that because of one closed source project among hundreds of open sourced ones (with very permissive licenses) Microsoft doesn't love open source. So I guess this means that also Google, Amazon, Red Had, and pretty much every single company on the planet also don't, as I don't seem to remember a for profit company open sourcing every single project it works on.\nAnd this is besides the point, and this discussion is fruitless. Your opinion on whether Microsoft loves OS or not makes no difference in the problem being discussed here. So, can we please stop this discussion and go back and focus on the real problem here?\nMicrosoft, please tell us what is the decision on the .NET Core debugging libraries. It is a simple yes or no answer, are you open sourcing it or not?. ",
    "brockallen": "That license link on NuGet goes to a 404 page. . My guess is that IIS is eating OPTIONS requests. Do you have anything configured in IIS to process those? \nhttps://brockallen.com/2012/10/18/cors-iis-and-webdav/. Are you sure the scheme is correct? Normally it should be \"Bearer\" (not \"Token\") if you're doing an OAuth2 style client.. ",
    "hartmannr76": "Is this still being talked about? Like @giggio said, I'm really just looking for an \"ok\" or \"not happening\" answer from Microsoft. It's unfortunate other IDE's will have to build their own custom debuggers to work with this instead of just building the interface from the IDE to the debugger. I understand why Microsoft wouldn't want to share that but as others have mentioned, it would be nice for a common debugger to be a part of the \"open platform\".. ",
    "Daniel-V1": "Found this today after reading through this issue and searching for a debugger. Haven't used it yet, but it is open source and MIT licensed, and implements GDB/MI spec and Debug Adapter Protocol. \nhttps://github.com/Samsung/netcoredbg. ",
    "omajid": "@Daniel-V1 It's being used by at least one IDE already: https://github.com/eclipse/aCute#concept. Hey @EmmaZhu\n\nI followed instruction : https://www.microsoft.com/net/core#linuxredhat to install .Net Core. Seems I need to enable dotnet with \"scl enable rh-dotnetcore11 bash\" whenever I started a new bash session. Is this behavior intended?\n\nYes. There's a few reasons for use-via-scl. The most important one is that .NET Core requires certain libraries that are just too old on base RHEL. In particular, some networking API requires features that are not a part of libcurl on base RHEL. So we build a modified version of libcurl that only gets activated via SCL. This lets all programs on the system continue working without being aware of the modified libcurl but .NET Core can see it and make use of more advanced features that part of the networking API in .NET Core needs.\nAnother reason is that without SCL, we would be tied to RHEL's release cycle and not be able to get updates out within days or weeks of upstream release. We would be doing non-security updates at 6 month (or longer) cycles.\n\nI know I can put the command in .bashrc. I just think it'd be much convenient if the installation can enable dotnet automatically.\n\nPlease feel free to file bugs at bugzilla.redhat.com. User pains help us direct effort and weigh options. It's kind of hard for us Red Hat folk to monitor all github issues :). @karelz I tried documenting it once: https://stackoverflow.com/documentation/.net-core/9592/components-and-versioning-in-net-core (copy on my blog).\nIs this something that might be useful as part of .NET Core 1.x docs?. > .Net Core SDK 1.0 was released this February. I don't think it's fair to complain about churn before that.\nI think it is, especially given .NET Core 1.0 was released last year. I - and many others - had no idea SDK and non-SDK were different components, were being developed independently and were versioned separately. And I was talking to folks working on .NET Core every week.... AFAIK, many .NET Core packages try and use lib<name>.so. The -dev packages provide these lib<name>.so files. The non -dev packages generally provide lib<name>.so.<version>.\nEdit: I should clarify that this was true for 1.0 and pre-release 1.0. Maybe the situation is now much better but the page hasn't been updated?. Thanks!. Dupe of https://github.com/dotnet/core-setup/issues/2613?. The End of IKVM.NET. Can you try with this patch: https://gist.github.com/omajid/90ebbd58cc54473d2a295c261451c166 ?. @tmds this looks like something you were looking into recently.. The link for 2.0.0 download points to Preview 2 and the link to Preview 2 download points to 2.0.0.. Thanks!\nNot an official reviewer, but looks good to me.. @leecow The updated table at https://www.microsoft.com/net/core/support is causing confusion. It is pretty obvious to me that 1.0.x and 1.1.x will EOL on the same date but the table doesnt clarify that.. > Basically we're going to maintain both as LTS until a 2.0 LTS is declared which will then start the 1 year end of life countdown for both\nUhh.... So 2.0.0 isn't the start of an LTS train? The 2.0 series will be declared LTS with some future patch update? We shouldn't start the countdown for 1.x EOL?. Thanks Lee. That addresses my immediate concern.. See https://github.com/dotnet/cli/issues/3773 for more on the confusion between runtime and sdk versions. The good news is that for 2.0, the confusion should mostly be gone. 2.0 has consistency between sdk and runtime versions.. FWIW, someone reported this on some slack/mattermost/irc channel to me some time ago and I came up with this exact same fix too. The current code is broken and the patch makes sense to me.. Any chance you could try a distribution other than Amazon Linux? The .NET Core project publishes packages for several distributions (such as CentOS, Debian, Ubuntu) and several other distributions are now starting to carry .NET Core too (such as Arch, CentOS, Fedora, RHEL). I dont know if we have a way to contribute packages to Amazon Linux directly.. > Is there a SRPM for the dotnet-runtime package? Or is there a spec file in the repo somewhere?\nWe use fpm to produce RPMs (and debs) instead of using rpmbuild. There are no SPRMs or spec files because of that.\nThe configuration for -runtime and -host RPMs is available here: https://github.com/dotnet/core-setup/tree/master/src/pkg/packaging/rpm\nHere is the source that reads that config files above to build command line for fpm: https://github.com/dotnet/core-setup/blob/master/tools-local/tasks/BuildFPMToolPreReqs.cs\n. Ah, sounds like the old Ctrl-C is killing parent but not dotnet children: https://github.com/dotnet/cli/issues/7426. There is no SDK for arm platforms (including raspberry pi). Please see https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md#net-core-on-raspberry-pi which says:\n\nThere is no SDK that runs on ARM32 but you can publish an application that will run on a Raspberry Pi.\n\nIf you want to use .NET Core on Raspberry Pi, you should use the SDK on a x64 (or x86_64/amd64 as it called by most linux distros) machine and publish for arm and run it on the Raspberry Pi. Please see the doc I linked for more information.. Can you run an strace and upload the log file (logfile below) somewhere?\nstrace -f -o logfile dotnet new console -o hwapp\n\nEdit: does dotnet --info work?. Could this be an incompatibility via libcurl? See https://github.com/dotnet/core/issues/963#issuecomment-330842070 and https://github.com/dotnet/corefx/issues/8951#issuecomment-299793545. @icedfish \n\nI checked the dotnet help (dotnet core sdk 2.0)\n\nCan you confirm this? What does dotnet --version say? What does dotnet --info say?\n\n~ dotnet help new\n.NET Initializer\n\nUsage: dotnet new [options]\n\nOptions:\n  -h|--help             Show help information\n  -l|--lang <LANGUAGE>  Language of project [C#|F#]\n  -t|--type <TYPE>      Type of project\n\u279c  source mkdir dotnet\n\n\nThat looks like the older 1.0 Preview SDK. -t does not work with the 1.x or 2.x SDKs.. For anyone wondering why, please see https://github.com/dotnet/core/issues/964 for the background context.. Same way! For example, see \nhttps://github.com/dotnet/corefx/blob/dce54eac6369631bf9e0af274cb0abd484edb331/src/System.Drawing.Common/src/System/Drawing/LibX11Functions.cs#L14. Fixed via https://github.com/dotnet/core/pull/1034 already?. I try and use dotnet --info as a replacement for dotnet --version which I know works even when the SDK is not around.. FWIW, you can still use timers with systemd (assuming you prefer that). For some examples, see https://wiki.archlinux.org/index.php/Systemd/Timers.. This seems to be an SDK vs runtime versioning confusion. If you follow the link and go to the document, you will see that the download contains:\n\n.NET Core Runtime 1.0.5\n.NET Core Runtime 1.1.2\n.NET Core SDK 1.0.4\n\nSo it is the right document, just a little confusing in terms of versioning.. @gortok @h3smith Have you run into any SELinux issues with recent versions of .NET Core recently? Is there anything you can share here? Any pointers to how we can reproduce the bugs/issues? \n(I work for Red Hat, and I care about resolving any SELinux issues that turn up. Either by fixing the issue or by extending the default SELinux policies where it makes sense.). FYI, the 2.0 policy page now contains a broken table: https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0-supported-os.md#linux. Related to https://github.com/dotnet/core-setup/issues/3791. FWIW, I am on Firefox/Linux here. I can't reproduce the problem.. Possible duplicate of https://github.com/dotnet/docs/issues/4154 ?. And for self-documentation, https://github.com/dotnet/cli/issues/8871 is about the dotnet command telling users which C# language version it supports.. There is a lot of old history about why --version works the way it does here: https://github.com/dotnet/cli/issues/3773. Pretty much everyone finds it confusing. But we are stuck with it.\nMeanwhile, you probably want to use dotnet --info instead.. Hi @SeanMartz! 2.1 isn't an LTS release just yet. To quote @richlander from the very blog you linked to:\n\nWe haven\u2019t announced the LTS part yet, but it is coming. I suspect we\u2019ll do two updates of 2.1 and then announce LTS. There are a number of fixes that didn\u2019t make 2.1. We want to call 2.1 LTS after we\u2019ve made any significant updates and not switch to critical updates only.\n\nAnd the source of the 3 year date is: https://www.microsoft.com/net/Support/Policy. compat-openssl10? That almost sounds like a Fedora package. Are you sure this is CentOS? Where did you get the package from? What does yum info dotnet-sdk-2.1 say?. @karelz It looks like aspnetcore-runtime 2.1.6 has landed in yum repos but the dependency dotnet-runtime 2.1.6 hasn't. dotnet-runtime 2.1.5 is found, but that's not sufficient for aspnetcore-runime 2.1.6. That's causing the error in both the logs above.. I thought libunwind was included with coreclr (see https://github.com/dotnet/coreclr/pull/17094). Does it really need to be installed separately for .NET Core 2.1?\nEdit: If it's intentional - say, to make dependencies consistent - then please ignore my comment.. The .NET Core apt feeds are no longer hosted on apt-mo.trafficmanager.net. They are instead hosted on packages.microsoft.com.\nPlease see https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-2.1.302 for steps on how to enable the repository and install the packages.. For your case, you probably want to set UseShellExecute to false to run dotnet --info, or pretty much any other program. Unless you actually care about /bin/bash being used to invoke it? I can't see how that would be useful in your example.. @LincolnYang1 I suggest bringing it up here: https://github.com/dotnet/corefx/issues/24704. That's an ongoing discussion about this exact same issue.\nIn the meantime, can you invoke /bin/bash explicitly?. > sudo apt-get install dotnet-sdk-2.1.105\nThat installs an SDK that can only target .NET Core runtime 2.0 (see here for the sdk version to runtime version mapping for SDK 2.1.105). You should install SDK version 2.1.300 or later to get support for .NET Core runtime 2.1.. I just answered this on stackoverflow: https://stackoverflow.com/a/53309571/3561275.\nAside from what @wfurt said, I don't even understand what the goal is here. An application can't be both interactive for users and a system deamon. These are two opposite design goals.. I think we agree that this is not a bug in .NET Core.\n\nCheck if the input is redirected using this property and start directly the crawler method.\n\nThis should work. Personally, I would add a separate flag like --daemon or --non-interactive that gets passed by the .service file to make this explicit.\n\nCreate something like a cronjob that start the console with dotnet AppRazen.dll command every time the system is not executing it.\n\nIs this command supposed to configure the crawler? Or just to start it if the crawler is not running?\nIf it's the first, then it might be worth looking into to having this console application write to a well-known path, and the crawler daemon just checking this file periodically, or on-demand using SIGHUP.\nIf you just want to make sure the crawler is always running, you can do that via the .service file. Maybe something like Restart=always.. AFAIK, no current stable/public release of .NET Core supports OpenSSL 1.1. So when openssl version -a says OpenSSL 1.1.1a or when ldd says libssl.so.1.1, that's not very helpful for fixing this issue.\nWe want to know what rpm -q openssl and rpm -q openssl-libs. If that says \"1.1\", we need to remove those packages and install (actually downgrade to) OpenSSL 1.0 on CentOS. An strace dotnet new console would be useful after OpenSSL 1.0 has been installed to find out what fails and when.. If there's a chroot involved, a strace log of dotnet new console would be really nice to have. We have seen failures involving a chroot before, such as https://github.com/dotnet/coreclr/issues/18634. Anyone have any pointers or answers? I can try and do a writeup for number 1, but I dont know about 2 and 3 at all.. Let's see if we can break this problem down into smaller problems.\n\nx86_64 centos7\n\nJust for the record, can you show us the output of /etc/os-release ?\n\nthe rpm i built (x86_64 arch)\n\nCan you tell us a bit more? What is this RPM? What does the spec file look like? How are you building the rpm? Can you reproduce this issue with a simple console project built by the RPM?\n\ni'm having a few more dependency issues, just because i've updated visual studio\n\nDoes that mean you are building the .NET Core project on your Windows machine, and then copying the built project onto the CentOS machine and then wrapping it up in an RPM?\nCan you show us the output of dotnet --info on Windows (where Visual Studio is installed) and on CentOS?\n\nI don't even know why i need glibc 2.17 & 2.4 both\n\nYou don't. The dependency output just says which versions specify the features that the built rpm needs. A single version of glibc will provide multiple versions. On my machine, rpm -q --provides glibc | egrep '\\(GLIBC_2\\.[[:digit:]]' lists about 50 or so versions.\n\nI also installed gcc, updated yum, installed dotnet core 2.2 on linux machine, i moved the project to dotnet core 2.2, i tried to install rpm's over my repository (hoping that maybe yum can resolve/install those dependencies). Nothing changed.\n\nPlease tell us how to reproduce this issue: the exact .NET Core code, project file, RPM spec file and the exact build steps you are running on the Windows box and on the CentOS box. Please do include the output and the error messages of each step where possible.. Is there any way you can try and extend your new WebApi project - say by adding those nuget references - until it produces the errors you are seeing in your main project? A way to reproduce the issue would be nice.\n\n%define debug_package %{nil}\n\nThat tells RPM to not generate -debuginfo packages. It sounds like RPM is aborting the build because it sees that your package has no unmanaged/native (aka c/c++) debug information - which is expected. Can you share your dotnet publish command?. An error of the type Unknown tag: Foo generally means rpmbuild thinks the file contains this line:\nFoo:  Bar\nAs a test, I did:\n%define assemblyFileVersion %(echo -e '1.\\\\n2.3\\n4')\nVersion: %{assemblyFileVersion}\n\nAnd the rpmbuild error is:\nerror: line 6: Unknown tag: 2.3n4\n\nSo, I can't help but wonder what assemblyFileVersion actually evaluates to. Can you print it out in hex form? I suspect newlines are somehow sneaking in.\nSet Version to a hardcoded value in the spec file and put this in %prep:\nxxd<<EOF                                                                                                          \n%assemblyFileVersion                                                                                              \nEOF\n(You might have to install vim-common package which provides xxd)\nFor my example, the rpmbuild log shows:\n+ xxd                                                    \n00000000: 312e 0a32 2e33 6e34 0a                   1..2.3n4.. I think this is a bug in Ubuntu 14.04. Have you tried upgrading dpkg itself?\n\nhttps://bugs.launchpad.net/ubuntu/+source/dpkg/+bug/1730627\nhttps://askubuntu.com/questions/1065231/dpkg-deb-error-archive-has-premature-member-control-tar-xz-before-contr/1065237#1065237\nhttps://github.com/travis-ci/travis-ci/issues/9361#issuecomment-408431262. There's a typo in title, I think. Should be March, right?. As an outsider to this project, a missing known-issues.md sounds like someone neglected creating it. Perhaps the file can be kept around but modified to say that there are no know issues?\n\nAlso, some other existing documents (like https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.0/2.2.0.md) link to it.. Typo? Should be 26, I think :). This doesn't match the earlier announcement:\n\nCVE-2017-8585 : Malformed Culture can cause application crash\nCVE-2017-11770 : Malformed Certificate can cause Denial of Service. The note says .App but the Include value doesn't include that. Am I just reading it wrong or is it a typo?. \n",
    "carloreggiani": "Dear Microsoft... or better to call you again M$???\n\"Error processing 'configurationDone' request. Unknown Error: 0x89720010\" using vscode-oss with omnisharp-vscode extension (both rebuilded, MIT license) trying to build a dotNet core application in environment completly opensource. \nSure, dotNet Core and VS Code are Open Source project, great M$:\n\nIt seems crazy not only to me, fortunally!\n(https://github.com/OmniSharp/omnisharp-vscode/issues/1431#issuecomment-297578930)\n. OpenSource is not free.\nOn Thu, Oct 18, 2018 at 7:25 AM Srikant Krishna notifications@github.com\nwrote:\n\nPlain and simple, I would have to agree with MSFT on this. There has to be\n-some- aspect of development that has to be justifiable on a cost/benefit\nbusiness level. I'm getting a little bit tired of open-source/free\neverything.\nWhen was the last time your lawyer open-sourced the case and did it for\nfree?\nOr your doctor open-sourced your checkup and did it for free?\nFor one thing, Visual Studio Community Edition, VS Code, SQL Server Dev.\nEdition, Typescript, .NET Core, Teams, etc. and a host of associated\ntechnologies are absolutely free - MSFT doesn't see a single penny up front\n(of course, for non-enterprise versions).\nSo if as developers, we expect to earn a good living based on our work and\nexperience, then we in return have to establish value for all development\nwork - and giving it away for free diminishes/commoditizes the role of good\nengineering.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/505#issuecomment-430879142, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA96nVNa4ud3Uj8OYI9KRYR_B_ETjcRgks5umBDTgaJpZM4MDYAf\n.\n\n\n-- \nCarlo Reggiani\nabout.me/reggianicarlo\n[image: Carlo Reggiani on about.me]\n  http://about.me/reggianicarlo\n. ",
    "salaros": "Visual Studio for Mac owes a lot to MonoDevelop project. Making such decisions (as they did with vsdbg) is ethically incorrect, especially if lately you build your success on the shoulders of open-source community.\nBasically they want to benefit from what the community offers and then add proprietary licenses on projects based on / derived from open-source solutions.. ",
    "ceremony": "Plain and simple, I would have to agree with MSFT on this.  There has to be -some- aspect of development that has to be justifiable on a cost/benefit business level.  I'm getting a little bit tired of open-source/free everything.\nWhen was the last time your lawyer open-sourced the case and did it for free?\nOr your doctor open-sourced your checkup and did it for free?\nFor one thing, Visual Studio Community Edition, VS Code, SQL Server Dev. Edition, Typescript, .NET Core, Teams, etc. and a host of associated technologies are absolutely free - MSFT doesn't see a single penny up front (of course, for non-enterprise versions).  \nSo if as developers, we expect to earn a good living based on our work and experience, then we in return have to establish value for all development work - and giving it away for free diminishes/commoditizes the role of good engineering.. ",
    "scherenhaenden": "I would like to put my 2 Cents. \nIndeed MS is not obligated to do so. BUT! they use this new Strategy of \"We love Open Source\" and at the very same time they do this.. \nThey just try to make ppl see a cherry of the whole tree, to try to get em back to Windows and Visual Studio. This is not love for Open source, this is pure strategy. \n. I did NOT say that.... \n1.- That was always their strategy.\n2.- They do NOT love Open Source... and that is the point... their are selling that, indeed they are just trying to get the users into their rails... as they always did... there is a reason why C# exits in first place.... \nthat \"We love Open Source\"... is bullshit... if they wouldnt feel risk on losing the market, or money... they would be still on the well known line... . \"How would you recommend they monetize Visual Studio\" I never recommended to do that or not to do that... \nApple asks for money for everything... and I pay the things I have to pay... without a word... this is not about \"paying\"... this is about the huge manipulation. you see, Apple never said \"We love Open Source\"... \n. I've solved the problem by changing the ownership of the folder ~/.dotnet/ to the user (in this case, to me)\n. as far as i can tell... changing the ownership of  ~/.dotnet/ is not a real solution apparently. Everytime that the folder is generated, it has the root ownership, which is wrong.. The setup on both machines are the same... but on my laptop i cannot even run dotnet dev-certs https without root... then that creates credencials, but those have the root-ownership... I've installed my pc and my laptop exactly the same. I do not know what is happening :S. I've just installed both machines, at the very sametime with everything (really everything) equaly configured... but for some reason the Laptop has this weird issue...  I installed the machines with Kubuntu 18.04 and then i added the list of the packages to DPKG, everything got installed automatically... I've been looking for what could have gone wrong, but till now, i found nothing. \nI can do change the folder by my own. I'll be working today and the weekend, If I find something I'll let you guys know. noup... it is still hapening... I've tried everything... I think, I'm just away from the knowledge to catch it up... tomorrow I'll have time to check it again... . @javiercn  noup.\nI'm gonna try to picture how I did everything. \nI've installed both machines at the very sametime witht he list (dpkg list) of programs. OS is kubuntu 18.04 + programs. Then i put the source of Mono, I installed mono, monodevelop and so on.\nAs i wanted to use dotnetcore, on my PC worked like a charm, but on the laptop it didnt work... I ran it as root and it work (ofc, after i saw that it was a permissions issue). \nthen i deleted that folder, created that again and it had the root ownership. So i changed by myself... it is working... but if i create it again than belongs to the root. \nI don't know what can be doing that... but even trying to create the certificated, on my PC it works... on my Laptops, works only as root. Therefor, it creates the Folder with root ownership. \n. Sorry, I'm right full of things, i did not have time to try that solution. I'll try either today or at monday. ",
    "nelsontkq": "\nI would like to put my 2 Cents.\nIndeed MS is not obligated to do so. BUT! they use this new Strategy of \"We love Open Source\" and at the very same time they do this..\nThey just try to make ppl see a cherry of the whole tree, to try to get em back to Windows and Visual Studio. This is not love for Open source, this is pure strategy.\n\nHow would you recommend they monetize Visual Studio if they make free the only reason anybody still uses Visual Studio?. ",
    "JacobHenner": "This would be helpful. At least add a provision allowing users of the unbranded vscode to use the debugger.... ",
    "refack": "P.S. When do I use project.json and when myname.csproj?. Thank you so much @leecow \nWe're getting there. So project.json = old SDK tools (bye, bye \ud83d\ude22) => *.csproj new SDK tools...\nNow please help me understand my accumulated tree:\n\nWhat's the host?\nWhat's the 2.xxx in the SDK if you're talking about SDK 1.0 RC4?\nAnd what's in Shared?. @Petermarcu , yes thank you very much! A thick soup indeed...\n(So even though SDK 1.0 is in RC, there's work on nextgen 2.0?! that actually nice). ",
    "iberodev": "I'm also interested in finding information about the src folder and all the changes in file structure and dependency management from ASP.NET Core 1.0 to ASP.NET Core 1.1\nI'm afraid this issue has been closed without any clear answer about that. Any link where these changes are summarized would be nice, especially for the ones like me that learned about AspNet Core 1.0 and see now that many things are different. ",
    "StrangeWill": "Yeah inconsistency in the project structure is really annoying (and somewhat worrying). Considering Core 1.0 is LTS I'll probably be bringing Core 1.1 into line with 1.0's structure and hoping we continue to keep a sensible structure that is less flat and crowded.\nAny word from official staff @richlander @Petermarcu @tmat?. ",
    "olivier-voutat": "And why entity framework is in the dependencies? I have a very special scenario where I just cannot use EntityFramework.... And in the scaffolding file it is written:\n\nAdd Scaffolding CLI tool to the project:\n   <ItemGroup>\n        <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\n    </ItemGroup>\n\nBut when I try to do it, it says that is not supported.. My bad. Now I understood. Add manually to project file... :-P \nBut when I try to add manually \"Microsoft.VisualStudio.Web.CodeGeneration.Design\" I get this error.\nRestoring packages for C:\\Development\\CustomerCenter\\Assura.CustomerCenter.WebApp\\Assura.CustomerCenter.WebApp.csproj...\nPackage Microsoft.Composition 1.0.27 is not compatible with netcoreapp1.1 (.NETCoreApp,Version=v1.1). Package Microsoft.Composition 1.0.27 supports: portable-net45+win8+wp8+wpa81 (.NETPortable,Version=v0.0,Profile=Profile259)\nOne or more packages are incompatible with .NETCoreApp,Version=v1.1.\nPackage restore failed. Rolling back package changes for 'Assura.CustomerCenter.WebApp'.\nTime Elapsed: 00:00:00.8155988\n========== Finished ==========\nBut the \"Add MVC Dependencies\" is able to install it.. ",
    "prafullbhosale": "Moving this to scaffolding repo: https://github.com/aspnet/scaffolding/issues/243\n. Ah, it was a typo. It was moved to aspnet/scaffolding#423 and not 243.\naspnet/scaffolding#423 was closed as dupe of aspnet/scaffolding#411. > Installing controller scaffolding creates an error then a warning:\nError: Microsoft.VisualStudio.Web.CodeGeneration.Design package targeting v2.0.0 (final release)\nThis should no longer be happening as the 2.0.0 version of the package is available on NuGet.org.. >>Installing controller scaffolding creates an error then a warning:\nError: Microsoft.VisualStudio.Web.CodeGeneration.Design package targeting v2.0.0 (final release)\nDowngrading to v2.0.0-preview fixes issue and eliminates error\nWarning: Microsoft.Composition 1.0.27 is targeting .NET Framework\nUpgrading to 1.0.30 (or now 1.0.31) targets Core and eliminates warning\n\n@prafullbhosale , can you take a look?\n\nI did comment about this earlier : https://github.com/dotnet/core/issues/711#issuecomment-322364947\nThis should be fixed already as 2.0 (final) packages are available on NuGet.org\nAre you still seeing this issue? \n. > NU1202: Package Microsoft.VisualStudio.Web.CodeGeneration.Tools 2.0.1 is not compatible with netcoreapp2.0 (.NETCoreApp,Version=v2.0). Package Microsoft.VisualStudio.Web.CodeGeneration.Tools 2.0.1 does not support any target frameworks.\n\nNU1202: Package Microsoft.VisualStudio.Web.CodeGeneration.Contracts 2.0.1 is not compatible with netcoreapp2.0 (.NETCoreApp,Version=v2.0). Package Microsoft.VisualStudio.Web.CodeGeneration.Contracts 2.0.1 does not support any target frameworks.\n\nThe part of the error message does not support any target frameworks. in the above seems very fishy. Could it be an installation issue or perhaps the NuGet cache is corrupted somehow? \n@Gfweis have you tried clearing out the nuget cache and re-installing the dotnet CLI\n. ",
    "rocknet": "\nMoving this to scaffolding repo: aspnet/Scaffolding#243\n\nThis was moved to a previously closed issue?\n. ",
    "alexwiese": "Try setting up the task with the \"Start in\" option set to the folder your executable lives in. Are you running the scheduled task as local system or a user account?. That's because .NET core is using the current working directory to discover the standalone/bundled runtime etc. .NET desktop apps used the installed framework so weren't dependent on the current working directory to be where the Exe was deployed. . ",
    "jucoxvt": "It was the missing \"start in\" option.  Can't believe it was that simple and that I overlooked it! None of our applications prior to .NET Core needed that option set, so it never even occurred to me to even try that.  Thanks!. ",
    "jbomhold3": "Did some of the code is omitted as it's not relevant to issue. . There you go sorry. didn't notice how bad it was until just now.. Will not build on Linux.\nhere is the full build outfit. \n2017-02-27T18:46:29.3076770Z Controllers/DMVController.cs(96,24): error CS0433: The type 'Stream' exists in both 'System.IO, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and 'System.Runtime, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' [/home/myagent/myagent/_work/1/s/TownControl/TownControl.csproj]\n2017-02-27T18:46:29.3090540Z CSC : warning CS1685: The predefined type 'MethodBase' is defined in multiple assemblies in the global alias; using definition from 'System.Reflection, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' [/home/myagent/myagent/_work/1/s/TownControl/TownControl.csproj]\n2017-02-27T18:46:29.3103690Z CSC : warning CS1685: The predefined type 'MethodInfo' is defined in multiple assemblies in the global alias; using definition from 'System.Reflection, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' [/home/myagent/myagent/_work/1/s/TownControl/TownControl.csproj]\n2017-02-27T18:46:29.3116920Z CSC : warning CS1685: The predefined type 'ConstructorInfo' is defined in multiple assemblies in the global alias; using definition from 'System.Reflection, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' [/home/myagent/myagent/_work/1/s/TownControl/TownControl.csproj]\n2017-02-27T18:46:29.3130450Z CSC : warning CS1685: The predefined type 'MemberInfo' is defined in multiple assemblies in the global alias; using definition from 'System.Reflection, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' [/home/myagent/myagent/_work/1/s/TownControl/TownControl.csproj]\n2017-02-27T18:46:29.3136970Z \n2017-02-27T18:46:29.3148010Z Build FAILED.\n. Command Line in both. RC4 on both boxes. . http://xaltech.com/Linux-project.assets.json\nhttp://xaltech.com/Windows-project.assets.json\n. feeds are both the same trying to cache though this was a clean server. That worked. must have pulled in corrupt first time by. ",
    "PeterKottas": "Yeah ... you know what they say. Try everything, bang your head against the table for 2 days. Then submit a bug to github and be sure you'll figure it out in 5 minutes yourself. \nSo through tears ... Here's the solution :\nMy global.json was missing \"Source/Common/Hosts\" in it. Therefore this, the final version now works ok:\n{\n  \"projects\": [ \n\"Source/Services\", \n\"Source/Tests/Services\", \n\"Source/Common\", \n\"Source/Common/Hosts\", \n\"Source/Plugins\", \n\"Source/Proxies\",\n \"Source/Tests\" ],\n  \"sdk\": {\n  }\n}. And it stopped working again. What the hell? Reopening the issue as it's not resolved and there might even be some sort of instability around it. . Thanks @Petermarcu . Sounds fair. Tbh I was expecting this to happen and just trying to buy time :) I will update and let you know if the problem persists.. Solved by upgrading to vs17 and rc4. Thanks . Hi guys, thanks for getting back to me. \n@Petermarcu I am trying this with the latest sdk available here https://www.microsoft.com/net/download/core\n@gregg-miskelly Yep step in and it steps over automatically. If I put a break point on a method directly like here,  it goes into disassembly. \nGood point about release configuration. My nugets are 'release' (that kind of makes sense for nugets) while my app is in debug during development. Would that be causing the problem? If so, I kind of struggle to see the best practice with this. Cause on one hand, I want release conf for nugets for optimizations. On other, I probably want to debug in debug as that seems to be the sensible thing to do. And I definitely don't want to keep switching (and maintaining) both debug and release nugets. What do you guys do when debugging into net core nugets? (I would assume it's a common practice as the framework is still fairly new). ",
    "TWinsnes": "I would love to see a separate announcement repo, I'm trying to follow development on this repo, but I have limited time and I have been getting flooded with notifications. Having an announcement repo would be great, as it would improve the signal/noise ratio for people that want to stay on top of what is happening, but don't have time to get deeply involved.. ",
    "shanselman": "Agreed that an announcements repo makes sense. dotnet/core feels very \"Core\" and internal. Announcements is totally unambiguous and means folks can sub to it without getting all the regular Core noise.\n:shipit: . :shipit: . ",
    "jongalloway": "The https://github.com/aspnet/Announcements/issues repo has been really helpful for me, and I point a lot of people to it in my talks. It's great to have a separate repo I can subscribe to that just has announcements, no discussion, no code churn, etc.. From looking at other projects, the standard seems to be linking to code of conduct rather than copying the text in (k8s, rails). So LGTM as-is.. Okay, after looking at this more, the Contributor Covenant guidance recommends adding the text or markdown version at the root of the project. Also, at a minimum we also need to add a contact method.. The update to add the contact method is good. I don't have a strong opinion on linking vs. adding the text in, and both models are used in large projects. I'm okay with this as-is, unless anyone's got strong arguments to the contrary.. ",
    "tushartyagi": "I am interested in this as well. There's already some documentation to build this on Freebsd.\nMoreover, there's a discussion going on  Issue#6115 with a (probably working? don't know) port here.. ",
    "mikeandersun": "I have the same issue!. ",
    "portaljacker": "When running the install steps from https://github.com/dotnet/core/blob/master/release-notes/download-archives/1.1.1-download.md:\nsudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 417A0893\nsudo apt-get update\nsudo apt-get install dotnet-sdk-ubuntu-x64.1.0.1\nI get the following error:\nportaljacker@vps:~$ sudo apt-get install dotnet-sdk-ubuntu-x64.1.0.1\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nE: Unable to locate package dotnet-sdk-ubuntu-x64.1.0.1\nE: Couldn't find any package by glob 'dotnet-sdk-ubuntu-x64.1.0.1'\nE: Couldn't find any package by regex 'dotnet-sdk-ubuntu-x64.1.0.1'\nDoing dotnet -v returns version 1.0.0-rc4-004771.. Seems that it should be sudo apt-get install dotnet-dev-1.0.1\nI'll submit a pull request.\nEdit: Submitted it, let me know if I'm horribly wrong. #534 \nEdit 2: It was approved!. I just tested building my project with it, seems to work fine. dotnet build succeeded and my program is running.. I forgot to mention my reference for the change!\nIt's https://www.microsoft.com/net/core#linuxubuntu. ",
    "kontomondo": "On Ubuntu 16.10, with dotnet SDK 1.1.1 (same happening with 1.0.4) when doing (lang is irrelevant):\n$ dotnet new console -lang f#\nI get:\nObject reference not set to an instance of an object.\n   at Microsoft.TemplateEngine.Cli.New3Command.ParseTemplateArgs(ITemplateInfo templateInfo)\n   at Microsoft.TemplateEngine.Cli.New3Command.<EnterSingularTemplateManipulationFlowAsync>d__64.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\n   at Microsoft.TemplateEngine.Cli.New3Command.<EnterTemplateManipulationFlowAsync>d__65.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\n   at Microsoft.TemplateEngine.Cli.New3Command.<ExecuteAsync>d__66.MoveNext()\nThis worked fine previously with RC4.. @mlorbetske I see what the problem is now -- it got initialised in one directory and then I moved it to another, but the template engine settings still has the old \"mount points\", so it essentially wasn't able to find the files. It should probably check whether dotnet's path has changed and if so, re-initialise the template engine data ? (or simply when files are not found, attempt to re-init maybe). @enricosada After creating a sample F# application, dotnet restore works, but dotnet build fails with \n/home/user/.nuget/packages/fsharp.net.sdk/1.0.1/build/FSharp.NET.Core.Sdk.targets(170,9): error MSB6006: \"dotnet\" exited with code 131\nNote that a C# sample application restores builds and runs properly.\nThis happens for the Ubuntu 16.10 SDK 1.1 download: https://go.microsoft.com/fwlink/?LinkID=843446\nThe SDK 1.0.4 download for Ubuntu 16.04 seems to be working properly.. ",
    "mlorbetske": "@kontomondo could you zip up the directory at ~/.templateengine and mail it to me at mlorbe@microsoft.com please? After zipping it up and moving it out of that directory, please try running dotnet new --debug:reinit, after that runs things should return to working normally. @kontomondo we agree, we're actively working on handling these sorts of scenarios. I've just tried this out by adding all the different things (via add new item from the project context menu) that produce cshtml files in VS2017.3's upcoming preview and am seeing that they're producing files encoded as UTF-8 with BOM. @weiwangda2014, could you post the exact steps you're using when you're seeing this to make sure that I've verified that the case you're hitting is working correctly in that release please? /cc @phenning \n@WeihanLi for the add view flow, this should have been fixed with https://github.com/aspnet/Scaffolding/pull/293. /cc @prafullbhosale \nAre either of your projects using an .editorconfig file that indicates that file encoding should be UTF-8 without BOM?. Based on the information from @WeihanLi, I'll move this to the scaffolding repo. . This issue was moved to aspnet/Scaffolding#539. Yes, this should be moved to the templating repo. I'll move it when I get in to the office.\n@richlander did you install the 1.x templates? The 2.0 CLI (or 2.1 in this case) does not carry them by default as the 1.0/1.1 runtimes are not carried by the 2.x CLIs. There are two approaches for using the 1.x templates after installing a 2.x CLI, either drop a global.json that indicates a 1.x CLI that carries the templates you want or add the MyGet feed for the templates to your global NuGet.config (https://dotnet.myget.org/F/templating/api/v3/index.json if I recall correctly), and call dotnet new -i Microsoft.DotNet.Common.ProjectTemplates.1.x::1.0.0-* to install them.\nOnce installed, the --framework option should show in help as the will now be more than one option for its value.. This issue was moved to dotnet/templating#965. @livarcocc reading through the comments, there seems to be a variety of things being discussed - which thing is happening while instantiating templates?. @livarcocc created https://github.com/dotnet/templating/issues/1028 for the dotnet new file permissions issue. We could move it to aspnet/websdk & my team can pick it up from there.. @prafullbhosale. While this wasn't an intentional change (the move back to 312), the only impact here should be that the root namespace wouldn't be included in vbproj files for test projects (as it would have been introduced in build 313 which failed due to some CI issues which were corrected with 314) - the item templates should contain no differences.. This issue was moved to aspnet/websdk#365. This issue was moved to dotnet/templating#1773. ",
    "farlock85": "When can we expect 1.1.1 to be pushed to the repositories? I upgraded my project to 1.1.1 but Ubuntu 10.4 is still on 1.1.0.. @leecow very odd, I tried multiple times and even with a clean install but it stays on 1.1.1.\nWhen I do an install:\n```\nuser@ubuntu:~$ sudo apt-get install dotnet-dev-1.0.1\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following additional packages will be installed:\n  dotnet-host dotnet-hostfxr-1.0.1 dotnet-hostfxr-1.1.0 dotnet-sharedframework-microsoft.netcore.app-1.0.4 dotnet-sharedframework-microsoft.netcore.app-1.1.1\nThe following NEW packages will be installed:\n  dotnet-dev-1.0.1 dotnet-host dotnet-hostfxr-1.0.1 dotnet-hostfxr-1.1.0 dotnet-sharedframework-microsoft.netcore.app-1.0.4\n  dotnet-sharedframework-microsoft.netcore.app-1.1.1\n0 upgraded, 6 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 0 B/97.1 MB of archives.\nAfter this operation, 280 MB of additional disk space will be used.\nDo you want to continue? [Y/n] Y\nSelecting previously unselected package dotnet-host.\n(Reading database ... 29386 files and directories currently installed.)\nPreparing to unpack .../dotnet-host_1.1.0-preview1-001100-00-1_amd64.deb ...\nUnpacking dotnet-host (1.1.0-preview1-001100-00-1) ...\nSelecting previously unselected package dotnet-hostfxr-1.0.1.\nPreparing to unpack .../dotnet-hostfxr-1.0.1_1.0.1-1_amd64.deb ...\nUnpacking dotnet-hostfxr-1.0.1 (1.0.1-1) ...\nSelecting previously unselected package dotnet-sharedframework-microsoft.netcore.app-1.0.4.\nPreparing to unpack .../dotnet-sharedframework-microsoft.netcore.app-1.0.4_1.0.4-1_amd64.deb ...\nUnpacking dotnet-sharedframework-microsoft.netcore.app-1.0.4 (1.0.4-1) ...\nSelecting previously unselected package dotnet-hostfxr-1.1.0.\nPreparing to unpack .../dotnet-hostfxr-1.1.0_1.1.0-1_amd64.deb ...\nUnpacking dotnet-hostfxr-1.1.0 (1.1.0-1) ...\nSelecting previously unselected package dotnet-sharedframework-microsoft.netcore.app-1.1.1.\nPreparing to unpack .../dotnet-sharedframework-microsoft.netcore.app-1.1.1_1.1.1-1_amd64.deb ...\nUnpacking dotnet-sharedframework-microsoft.netcore.app-1.1.1 (1.1.1-1) ...\nSelecting previously unselected package dotnet-dev-1.0.1.\nPreparing to unpack .../dotnet-dev-1.0.1_1.0.1-1_amd64.deb ...\nUnpacking dotnet-dev-1.0.1 (1.0.1-1) ...\nProcessing triggers for man-db (2.7.5-1) ...\nSetting up dotnet-host (1.1.0-preview1-001100-00-1) ...\nSetting up dotnet-hostfxr-1.0.1 (1.0.1-1) ...\nSetting up dotnet-sharedframework-microsoft.netcore.app-1.0.4 (1.0.4-1) ...\nSetting up dotnet-hostfxr-1.1.0 (1.1.0-1) ...\nSetting up dotnet-sharedframework-microsoft.netcore.app-1.1.1 (1.1.1-1) ...\nSetting up dotnet-dev-1.0.1 (1.0.1-1) ...\nuser@ubuntu:~$ dotnet\nMicrosoft .NET Core Shared Framework Host\nVersion  : 1.1.0\n  Build    : 928f77c4bc3f49d892459992fb6e1d5542cb5e86\nUsage: dotnet [common-options] [[options] path-to-application]\nCommon Options:\n  --help                           Display .NET Core Shared Framework Host help.\n  --version                        Display .NET Core Shared Framework Host version.\nOptions:\n  --fx-version            Version of the installed Shared Framework to use to run the application.\n  --additionalprobingpath    Path containing probing policy and assemblies to probe for.\nPath to Application:\n  The path to a .NET Core managed application, dll or exe file to execute.\nIf you are debugging the Shared Framework Host, set 'COREHOST_TRACE' to '1' in your environment.\nTo get started on developing applications for .NET Core, install the SDK from:\n  http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\n```\nIt looks like it installed \"dotnet-sharedframework-microsoft.netcore.app-1.1.1\", but is it maybe the tooling that is reporting the wrong version?. ",
    "milla": "We have projects handling XSD, so we previously only use .net core 1.0 full framework, and wait Q3 .net core 2.0. So in this case, since full version can reference .net framework 4.6.1, so we can have part of projects using .net core 1.0, part of 4.6.1, they work well. But after I upgraded to visual studio 2017, it's said the projects are all not compatible with .netcore1.1, does this mean that .net core 1.1 doesn't support full framework?. Close this, as tried further and verified this is not an issue.. Thanks, I've upgraded to 2.0. Now it works. Closing this case. . ",
    "nikamsshekhar": "Hi @leecow ,\n    I am trying to install .net core on ubuntu 14.04 LTS. I have installed it fresh and using it first time. I followed steps from here. The .net core version is dotnet-dev-1.0.4. I am getting this log when i run sudo apt-get install dotnet-dev-1.0.4\n     Reading package lists... Done\n     Building dependency tree     \n     Reading state information... Done\n     E: Unable to locate package dotnet-dev-1.0.4\n     E: Couldn't find any package by regex 'dotnet-dev-1.0.4'\nHere are the logs \nuser@user-VirtualBox:~$ sudo apt-get update\n[sudo] password for user: \nGet:1 http://security.ubuntu.com trusty-security InRelease [65.9 kB]\nIgn http://in.archive.ubuntu.com trusty InRelease                        \nIgn http://extras.ubuntu.com trusty InRelease                                \nGet:2 http://extras.ubuntu.com trusty Release.gpg [72 B]                     \nGet:3 http://extras.ubuntu.com trusty Release [11.9 kB]  \nGet:4 http://extras.ubuntu.com trusty/main Sources [14 B]                    \nGet:5 http://extras.ubuntu.com trusty/main i386 Packages [14 B]              \nGet:6 http://in.archive.ubuntu.com trusty-updates InRelease [65.9 kB]        \nGet:7 http://security.ubuntu.com trusty-security/main Sources [130 kB]       \nGet:8 http://security.ubuntu.com trusty-security/restricted Sources [4,941 B]\nGet:9 http://in.archive.ubuntu.com trusty-backports InRelease [65.9 kB]      \nGet:10 http://security.ubuntu.com trusty-security/universe Sources [52.5 kB] \nGet:11 http://security.ubuntu.com trusty-security/multiverse Sources [3,206 B] \nIgn http://extras.ubuntu.com trusty/main Translation-en_IN                   \nIgn http://extras.ubuntu.com trusty/main Translation-en                      \nGet:12 http://in.archive.ubuntu.com trusty Release.gpg [72 B]\nGet:13 http://in.archive.ubuntu.com trusty-updates/main Sources [398 kB] \nGet:14 http://in.archive.ubuntu.com trusty-updates/restricted Sources [6,327 B]\nGet:15 http://in.archive.ubuntu.com trusty-updates/universe Sources [178 kB] \nGet:16 http://in.archive.ubuntu.com trusty-updates/multiverse Sources [7,767 B]\nGet:17 http://in.archive.ubuntu.com trusty-updates/main i386 Packages [937 kB] \nGet:18 http://in.archive.ubuntu.com trusty-updates/restricted i386 Packages [16.9 kB]\nGet:19 http://in.archive.ubuntu.com trusty-updates/universe i386 Packages [406 kB]\nGet:20 http://in.archive.ubuntu.com trusty-updates/multiverse i386 Packages [14.6 kB]\nGet:21 http://in.archive.ubuntu.com trusty-updates/main Translation-en [484 kB]\nGet:22 http://in.archive.ubuntu.com trusty-updates/multiverse Translation-en [7,430 B]\nGet:23 http://in.archive.ubuntu.com trusty-updates/restricted Translation-en [3,975 B]\nGet:24 http://in.archive.ubuntu.com trusty-updates/universe Translation-en [215 kB]\nGet:25 http://in.archive.ubuntu.com trusty Release [11.9 kB]                 \nGet:26 http://in.archive.ubuntu.com trusty-backports/main Sources [9,712 B]  \nGet:27 http://in.archive.ubuntu.com trusty-backports/restricted Sources [28 B] \nGet:28 http://in.archive.ubuntu.com trusty-backports/universe Sources [35.3 kB]\nGet:29 http://in.archive.ubuntu.com trusty-backports/multiverse Sources [1,898 B]\nGet:30 http://in.archive.ubuntu.com trusty-backports/main i386 Packages [13.3 kB]\nGet:31 http://in.archive.ubuntu.com trusty-backports/restricted i386 Packages [28 B]\nGet:32 http://in.archive.ubuntu.com trusty-backports/universe i386 Packages [43.2 kB]\nGet:33 http://in.archive.ubuntu.com trusty-backports/multiverse i386 Packages [1,552 B]\nGet:34 http://in.archive.ubuntu.com trusty-backports/main Translation-en [7,503 B]\nGet:35 http://in.archive.ubuntu.com trusty-backports/multiverse Translation-en [1,215 B]\nGet:36 http://in.archive.ubuntu.com trusty-backports/restricted Translation-en [28 B]\nGet:37 http://in.archive.ubuntu.com trusty-backports/universe Translation-en [36.8 kB]\nGet:38 http://in.archive.ubuntu.com trusty/main Sources [14 B]               \nGet:39 http://security.ubuntu.com trusty-security/main i386 Packages [570 kB]\nGet:40 http://security.ubuntu.com trusty-security/main i386 Packages [570 kB]\nGet:41 http://security.ubuntu.com trusty-security/restricted i386 Packages [13.8 kB]\nGet:42 http://security.ubuntu.com trusty-security/universe i386 Packages [157 kB]\nGet:43 http://security.ubuntu.com trusty-security/multiverse i386 Packages [4,289 B]\nGet:44 http://security.ubuntu.com trusty-security/main Translation-en [334 kB] \nGet:45 http://security.ubuntu.com trusty-security/multiverse Translation-en [2,201 B]\nGet:46 http://security.ubuntu.com trusty-security/restricted Translation-en [3,505 B]\nGet:47 http://security.ubuntu.com trusty-security/universe Translation-en [91.4 kB]\nFetched 4,414 kB in 3min 44s (19.6 kB/s)                                     \nW: Failed to fetch http://in.archive.ubuntu.com/ubuntu/dists/trusty/Release  Unable to find expected entry 'restricted/source/Sources' in Release file (Wrong sources.list entry or malformed file)\nE: Some index files failed to download. They have been ignored, or old ones used instead.\nuser@user-VirtualBox:~$ sudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main\" > /etc/apt/sources.list.d/dotnetdev.list'\nuser@user-VirtualBox:~$ a\na: command not found\nuser@user-VirtualBox:~$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 417A0893\nExecuting: gpg --ignore-time-conflict --no-options --no-default-keyring --homedir /tmp/tmp.vIi2jWIXTY --no-auto-check-trustdb --trust-model always --keyring /etc/apt/trusted.gpg --primary-keyring /etc/apt/trusted.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 417A0893\ngpg: requesting key 417A0893 from hkp server keyserver.ubuntu.com\ngpg: key 417A0893: public key \"MS Open Tech interop@microsoft.com\" imported\ngpg: Total number processed: 1\ngpg:               imported: 1  (RSA: 1)\nuser@user-VirtualBox:~$ sudo apt-get update\nGet:1 http://security.ubuntu.com trusty-security InRelease [65.9 kB]\nIgn http://in.archive.ubuntu.com trusty InRelease                        \nIgn http://extras.ubuntu.com trusty InRelease                                \nGet:2 http://extras.ubuntu.com trusty Release.gpg [72 B]                     \nGet:3 http://extras.ubuntu.com trusty Release [11.9 kB]  \nGet:4 http://extras.ubuntu.com trusty/main Sources [14 B]                    \nGet:5 http://in.archive.ubuntu.com trusty-updates InRelease [65.9 kB]\nGet:6 http://extras.ubuntu.com trusty/main i386 Packages [14 B]              \nGet:7 http://security.ubuntu.com trusty-security/main Sources [130 kB]       \nGet:8 http://security.ubuntu.com trusty-security/restricted Sources [4,941 B]\nGet:9 http://security.ubuntu.com trusty-security/universe Sources [52.5 kB]  \nGet:10 http://security.ubuntu.com trusty-security/multiverse Sources [3,206 B] \nHit http://in.archive.ubuntu.com trusty-backports InRelease                  \nGet:11 http://in.archive.ubuntu.com trusty Release.gpg [72 B]                \nHit http://security.ubuntu.com trusty-security/main i386 Packages            \nGet:12 http://security.ubuntu.com trusty-security/restricted i386 Packages [13.8 kB]\nGet:13 http://in.archive.ubuntu.com trusty-updates/main Sources [398 kB]     \nHit http://security.ubuntu.com trusty-security/universe i386 Packages        \nGet:14 http://security.ubuntu.com trusty-security/multiverse i386 Packages [4,289 B]\nGet:15 https://apt-mo.trafficmanager.net trusty InRelease                    \nHit http://security.ubuntu.com trusty-security/main Translation-en           \nGet:16 https://apt-mo.trafficmanager.net trusty/main amd64 Packages          \nGet:17 https://apt-mo.trafficmanager.net trusty/main Translation-en_IN       \nHit http://security.ubuntu.com trusty-security/multiverse Translation-en     \nHit http://security.ubuntu.com trusty-security/restricted Translation-en     \nIgn http://extras.ubuntu.com trusty/main Translation-en_IN                   \nHit http://security.ubuntu.com trusty-security/universe Translation-en      \nIgn http://extras.ubuntu.com trusty/main Translation-en                      \nIgn https://apt-mo.trafficmanager.net trusty/main Translation-en_IN          \nIgn https://apt-mo.trafficmanager.net trusty/main Translation-en\nGet:18 http://in.archive.ubuntu.com trusty-updates/restricted Sources [6,327 B]\nGet:19 http://in.archive.ubuntu.com trusty-updates/universe Sources [178 kB]\nGet:20 http://in.archive.ubuntu.com trusty-updates/multiverse Sources [7,767 B]\nGet:21 http://in.archive.ubuntu.com trusty-updates/main i386 Packages [937 kB]\nGet:22 http://in.archive.ubuntu.com trusty-updates/restricted i386 Packages [16.9 kB]\nGet:23 http://in.archive.ubuntu.com trusty-updates/universe i386 Packages [406 kB]\nGet:24 http://in.archive.ubuntu.com trusty-updates/multiverse i386 Packages [14.6 kB]\nHit http://in.archive.ubuntu.com trusty-updates/main Translation-en          \nHit http://in.archive.ubuntu.com trusty-updates/multiverse Translation-en    \nHit http://in.archive.ubuntu.com trusty-updates/restricted Translation-en    \nHit http://in.archive.ubuntu.com trusty-updates/universe Translation-en      \nGet:25 http://in.archive.ubuntu.com trusty Release [11.9 kB]                 \nHit http://in.archive.ubuntu.com trusty-backports/main Sources               \nHit http://in.archive.ubuntu.com trusty-backports/restricted Sources         \nHit http://in.archive.ubuntu.com trusty-backports/universe Sources           \nHit http://in.archive.ubuntu.com trusty-backports/multiverse Sources         \nHit http://in.archive.ubuntu.com trusty-backports/main i386 Packages         \nHit http://in.archive.ubuntu.com trusty-backports/restricted i386 Packages   \nHit http://in.archive.ubuntu.com trusty-backports/universe i386 Packages     \nHit http://in.archive.ubuntu.com trusty-backports/multiverse i386 Packages   \nHit http://in.archive.ubuntu.com trusty-backports/main Translation-en        \nHit http://in.archive.ubuntu.com trusty-backports/multiverse Translation-en  \nHit http://in.archive.ubuntu.com trusty-backports/restricted Translation-en  \nHit http://in.archive.ubuntu.com trusty-backports/universe Translation-en    \nGet:26 http://in.archive.ubuntu.com trusty/main Sources [14 B]               \nFetched 2,340 kB in 11s (210 kB/s)                                           \nW: Failed to fetch http://in.archive.ubuntu.com/ubuntu/dists/trusty/Release  Unable to find expected entry 'restricted/source/Sources' in Release file (Wrong sources.list entry or malformed file)\nE: Some index files failed to download. They have been ignored, or old ones used instead.\nuser@user-VirtualBox:~$ sudo apt-get install dotnet-dev-1.0.4\nReading package lists... Done\nBuilding dependency tree     \nReading state information... Done\nE: Unable to locate package dotnet-dev-1.0.4\nE: Couldn't find any package by regex 'dotnet-dev-1.0.4'\nuser@user-VirtualBox:~$ ^C\nuser@user-VirtualBox:~$ dotnet help\ndotnet: command not found\nuser@user-VirtualBox:~$ \nI am using ubuntu on VirtualBox\nCan you please help me? what am i missing?. ",
    "seguler": "A couple of issues with the RedHat installation procedure:\nOS version: Red Hat Enterprise Linux Server release 7.3 \nRepro steps: Azure VM / Redhat 7.3 and install .NET Core:\nsudo subscription-manager repos --enable=rhel-7-server-dotnet-rpms\nsudo yum install scl-utils\nsudo yum install rh-dotnetcore11\nsudo scl enable rh-dotnetcore11 bash\nError messages\nsudo subscription-manager repos --enable=rhel-7-server-dotnet-rpms\nError: 'rhel-7-server-dotnet-rpms' does not match a valid repository ID. Use \"subscription-manager repos --list\" to see valid repositories.\nand then running \"sudo scl enable rh-dotnetcore11 bash\" takes me to root user (?), but the following command still cannot find the dotnet: sudo which dotnet\nIf I run the 'scl' command without sudo, then the current user path recognizes where the dotnet is installed (/opt/rh/rh-dotnetcore11/root/usr/bin/dotnet), however this doesn't seem to be persistent, as after a re-login, 'which dotnet' returns the following:\nwhich dotnet\n/usr/bin/which: no dotnet in (/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/seguler/.local/bin:/home/seguler/bin)\n. ",
    "EmmaZhu": "I followed instruction : https://www.microsoft.com/net/core#linuxredhat to install .Net Core. Seems I need to enable dotnet with \"scl enable rh-dotnetcore11 bash\" whenever I started a new bash session. Is this behavior intended? \nI know I can put the command in .bashrc. I just think it'd be much convenient if the installation can enable dotnet automatically.. ",
    "stanuku": "@omajid @karelz @livarcocc  Thanks for the responses. It is clear to me now from below snip, but it isn't super obvious that the latest SDK 1.0.4 includes both LTS and current runtimes.\n\n\n\n\nAlso, on the instructions page for Ubuntu:\nBefore you start, please remove any previous versions of .NET Core from your system by using this    script. \n --> So, is 'side by side' not possible on Ubuntu? like windows?\n\n\nUsing dotnet cli how do I find out what .NET Core runtimes are available on my system. dotnet -- version only tells you the SDK number -> Am I missing something?\n\n\nthanks. @karelz: Thanks\nThe discussion https://github.com/dotnet/cli/issues/3773, basically had a disappointing end in spite of many valid concerns and suggestions. I've been a .NET dev for over a decade (since 2.0) and consider myself a decent one at it. But, never before I'm subjected to such confusion and uncertainty. I'm having a hard time wrapping my head around this stuff. I'm not sure if I'm prepared to answer questions that would follow when I propose the adoption of .NET Core in new projects at my work. And also when I try to guide and mentor mid and junior level developers on this stuff. Let alone the issues I might face communicating to the server and IT teams about the bits that I would need them to install on build and hosting servers. \nHow easy life can be when you just have to say we need .NET 4.6.2 or 4.5.1 etc, compared to this versioning nightmare. In my experience, an average developer (not so curious kind) would hardly care about the internals/SDK/CLI, they would expect the Visual Studio or other IDE to do the heavy lifting and abstract the complexity, so they can focus on solving the business problems and delivering their tasks. There is not much business value addition in spending tons of hours understanding these internals, which seem to be so fluid currently.\nI hope common sense would prevail. One of the perils of the \"open source\" perhaps (Not that I'm against it, actually I love it when it is managed well and at a smaller scale. I don't expect everyone here to agree with me) however, exposing all the moving parts to a developer who could care less about the CLI/SDK etc etc and just wants to know a single one version number that can be used to pick up in the Target framework drop down in Visual Studio for example and be done with it and move on to more important business problems.. @svick Thanks for your response (A disclaimer: I'm a very loyal .NET developer most of my professional career. I made and still making my living because of it. So far, I'm glad I didn't have to go through the constant catch up and churn that you find in the other popular and competing stacks)\nHere are my thoughts/concerns:\n\n\nMicrosoft .NET development story has a long and solid history with Visual Studio + .NET full framework (albeit restricted to Windows). All the Businesses (LOB apps, SAAS, Product based) would be very anxious to move to .NET Core yet. Unless there is a great benefit. With all the churn happening since the past year and half or so, it delays that adoption even further. You can count me in that boat. I would have to cite the example of Entity Framework here. Are there any more improvements or enhancements planned after EF 6.3? if EF core is the future then .NET Core is the only way to go. I know there is a promise of .NET Standard 2.0. I really hope it lives up to the hype and expectations. I know, there is no point in dwelling on what has happened in the past, however, in the daily life of Architects/Developers who were early adopters, the reality is that they have been feeling misguided and in jeopardy of losing traction at work and with the management. The selling point of \"cross-platform\" is mostly for startups/midsize and green field development, whom historically not have been MS's focus or customer base. Those shops/organizations would still continue to be targeting full framework unless there is a simple and rock solid story for .NET Core migration which seems to be still long ways away. Is there an incentive or compelling reason for them to migrate now or in next one year?\n\n\nI'm wondering how important/crucial it is for a developer to know what tooling /SDK/CLI/SharedHost/Runtime versions. Shouldn't it be left to their IDE to figure out based on one target version that he or she picks from the list? I'm referring to the traditional VS Architects/Developers, they never really needed to know anything other than the .NET framework version and a Managed language of their choice, for the most part.\nI agree that VS 2017 has shown promise and hope, however we already have applications in production based on the project.json (from VS2015) . To upgrade all the servers with relevant bits and migrate to MSBuild/.csproj again takes a lot of convincing and confidence building measures.\n\n\nSome suggestions/comments:\n\nIn VS 2017 IDE, I would ideally prefer the .NET Core listed in the target framework drop down instead of under templates. For a traditional VS developer, it is hard to relate to.\n\n\n\nThe documentation is getting better, not perfect though. Please refer to some of the issues that I've reported. https://github.com/dotnet/core/issues/656, and my comments in this post.\n\nNOTE: I'm super excited about the .NET Core and ASP.NET Core but it is so far just limited to my personal projects and a couple simple cookie cutter web applications at work. I don't feel too confident yet to start building a case for a wider adoption at my work place at a bigger scale especially, training the devs. Given the management has bigger problems to solve and other priority and don't really see a pressing need to migrate. I'll have to sit out and watch .NET Standard 2.0 unfold and target .NET 4.6.1 till then. Sometimes I wonder who is MS targeting with the .NET Core movement.\n. @svick: Again I'm not debating on the decisions, but giving an outside perspective. This perspective is from people like me who would ultimately take the result of the efforts of people like you (within and outside MS) to a bigger picture, people who would utilize your product to build bigger things, solve real problems and generate revenue and act as ambassadors of the .NET brand.\nMy main point is, did MS have .NET Standard 2.0 in mind all along? if so, then the pain and rough ride for the early adopters could have been mitigated with proper and timely communication and guidance. If not, and if .NET Standard 2.0 just evolved based on the feedback, then it makes me feel a bit uncertain of what else could change in the future (for a brief period just before the BUILD 2017, there was confusion on .NET Core 2.0 not supporting .NET Standard 2.0. The big guns at MS had to do the damage control later and clear the confusion. I suspect they must have debated about it internally and retracted based on the feedback)\n\n.Net Core SDK 1.0 was released this February. I don't think it's fair to complain about churn before that.\n\nNot just the SDK I was referring to the other components of the .NET Core.  Same sentiment as @omajid has expressed.\n\nIsn't it like that already? If you install .Net Core tooling for VS from the VS installer, you don't have to care about any .Net Core SDK version, no?\nThe VS-specific section of the .Net Core getting started page also does not mention any SDK versions.\n\nUnless I'm missing something, the VS 2017 still doesn't show what versions I'm getting or targeting from the project creation dialogs. Although, I don't mind editing the project files and changing the TFMs and other details, not everyone would prefer to do that.\nVS2017 is promising but, I'm suspecting we have good couple of iterations of .NET Core/Standard i.e. 2.*, 3.0 and VS 2018, 2019. Before, we get there where we want to be. I can't wait for it. But will watch cautiously. I had bore the brunt of early adoption in 2016 already.\nThanks \n. @svick: \n\nTo clarify, the confusion was about ASP.NET Core 2.0 not supporting .Net Standard 2.0, and thus also not being able to run on .Net Framework.\n\nYou're right, my concern still applies though.\n\nYes, it doesn't. But you can change it from the project properties page, you don't have to edit the project file.\n\nYes, you still wouldn't know what the runtime version (major.minor.patch) is. Shouldn't we need to know?. @wfurt: \n\nno older dotnet versions lingering around?\n\nIsn't side by side the whole point? I've 1.1 lingering around on my Mac.\n\nAlso what is you OS version. You did not provide any details about that.\n\nMacBook Pro 2017 comes with latest OS. (Sierra). @wfurt Thank you, I'll try and let you know soon.. @wfurt This the output\n``` \n$ dotnet build -v d| grep System.IO.FileSystem\nEncountered conflict between \n'Reference:/Users/sudarshan/.nuget/packages/microsoft.netcore.app/2.0.0/ref/netcoreapp2.0/System.IO.FileSystem.dll' \nand 'Reference:/Users/sudarshan/.nuget/packages/system.io.filesystem/4.3.0/ref/netstandard1.3/System.IO.FileSystem.dll'.\nChoosing 'Reference:/Users/sudarshan/.nuget/packages/microsoft.netcore.app/2.0.0/ref/netcoreapp2.0/System.IO.FileSystem.dll' \nbecause AssemblyVersion '4.1.0.0' is greater than '4.0.1.0'.\n```. Ok, I deleted the /Users/myusername/.nuget/NuGet folder and /Users/myusername/.nuget/packages folder and recreated empty ones by the same names. This seemed to fix the 'dotnet run' crash.\n. ",
    "muratg": "The download link is being updated on the download page (could be up already).\nFor your convenience, the download link is: https://go.microsoft.com/fwlink/?linkid=844461 . @pakrym, could you take a look at that issue and file a bug for tracking it further?. @Jacquers does dotnet restore from command line work for you? I tried restoring your project file and it seems to restore 2.0.3 .All metapackage just fine. (except for the project-to-project dependencies one the Vsc... package which I assume one your of packages.). I believe this was mostly user error, and should be good to close. Folks can file other bugs if they're seeing issues.  \n@Petermarcu agree?. @AdamJachocki / @onahirniak, could you guys file a new bug with the details? This particular issue was resolved and closed so it's not getting a lot of attention from the team.\nThanks.\n. @dexterhussain @hmuhdkamran It's not guaranteed that that an app running in developer mode would run the same way in production mode. For example, in your example, you're running some additional code in your Startup.cs in dev mode only.  Have you tried running the app locally, in production mode?   At the very least, if you get the error, you'd be viewing it from a developer exception page.  . You guys can also request official support from https://connect.microsoft.com/ . Dup of: https://github.com/aspnet/KestrelHttpServer/issues/2269 . @rajurh I agree with @h3smith, there are probably better ways to do what you want.  That being said, I think the answer somewhat depends on your setup. Kestrel/HttpSysServer?  Behind IIS/nginx or as an edge server? Azure?\ncc @halter73 @Tratcher . @rajurh And what's the problem with people changing the ID in the browser?  \n\nIf you're trying to hide a resource (from folks putting it's ID a URL in the browser), the right way to do it is through proper access control mechanisms.\nIf you're trying to hide it from man-in-the-middle attacks, just use HTTPS.. @joeloff @Eilon I did (before seeing your comment). @Tratcher . @khancyai A few pointers:\n\nAre you able to reproduce this locally on a dev machine? You should easily be able to provide that type of load locally. This way you can check with a debugger and see what eats up memory.\nAlso you can take a dump of the offending process to analyze what's going on with the memory. Let me know if you need any guidance on that!\nAlso, just to make sure, are you 100% sure that the memory doesn't stop growing (like a memory leak)?  We have tons of buffers and caches throughout the system that take a while to saturate (based on the load profile.) Some of these (especially in Kestrel) are not returned back and memory is reused as long as the process is alive.  But the memory usage should growth after a while limits are reached. What kind of growth are you seeing?\n. https://github.com/aspnet/Home/issues/3226. @edwardsky could you please share your repro code on a GitHub repo? \nAlso, what do you mean by \"WebServer on TcpListener\"? Are you using Kestrel? . @edwardsky Can you create a simple app that reproduces the problem and share it on GitHub then? That way more people can take a look to understand what the issue may be.\n. @edwardsky \nI think this is your problem:\n```csharp\n        // catch requests\n        while (true)\n        {\n            // \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043a\u043b\u0438\u0435\u043d\u0442 \u0431\u044b\u043b \u043f\u0440\u0438\u043d\u044f\u0442,\n            // \u043e\u043d \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442\u0441\u044f \u0432 \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a (ClientThread)\n            // \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0443\u043b\u0430 \u043f\u043e\u0442\u043e\u043a\u043e\u0432.\n            ThreadPool.QueueUserWorkItem(new WaitCallback(ClientThread),\n                Listener.AcceptTcpClient());\n        }\n\n```\nYou're trying to create an infinite number of WaitCallbacks. \n@karelz may talk about the right pattern to use here instead. . @mkartakmsft can you take a look please?. @LeonidasFettikus could you please raise your question on StackOverflow? Or if you think there's an issue, please file a bug report on https://github.com/aspnet/home/ Thanks.. cc @karelz . cc @Eilon . @javiercn could you take a look at the CORS behavior change above?  . @javiercn @pranavkm could one of you guy create a bug under aspnet/cors for this issue?. @mkArtakMSFT @rynowak  @pranavkm \nCould you take a look at @AlexSapple's question above? Related to ProblemDetails feature?. @MeiChin-Tsai Was there any change in 2.2 to cause any memory usage increase in @tomap's scenario above?. @racheldelman Try West Central US region. I know 2.2 is there. \nThough your issue could well be unrelated as well. So more info needed.. @Eilon We do not know the current status, but last I heard from App Service folks is that they expect to be done on all public regions by the end of next week.. @jsoques You don't happen to have a global.json do you?\n@leecow This looks like a CLI/SDK question to me.  @livarcocc any thoughts here? . @Leon99 ANCM was deployed to Azure in late December. What's the exact issue you're having?. @Leon99 Ah, so you haven't deployed to Azure. Did you install the latest .NET Core SDK/runtime? (dotnet --info output would tell.). @Leon99 could you please share your csproj file?. @tarekgh What namespace is that in? I couldn't find it with a cursory search.. Thanks! @mkArtakMSFT, seems like this is in Localization. Is this an area you own? Was there a change between 1.x and 2.x here?. @Tratcher Can you take a look?. @mkArtakMSFT @rynowak  Could you guys take a look. cc @mkartakmsft, @danroth27 . @PolitovArtyom we are tracking that issue here: https://github.com/aspnet/AspNetCore/issues/7546. @davidfowl for his opinions here.. Kestrel 2.x is supported on .NET Framework (\"full framework\").\nKestrel 3.x will be only on .NET Core.. ",
    "Skoucail": "Thank you!\nI now see that https://www.microsoft.com/net/download/core#/runtime is updated also.. ",
    "tompazourek": "Ok, thanks for the explanation.\nAre there any download links for tooling for VS2015 or is it all VS2017-only now? I unfortunately cannot update to VS2017 at the moment.\nI cannot get VS2015 to work with a .NET Core project based on project.json (even a brand new project from a VS template), I always get this:\n\nTried uninstalling everything and installing the SDKs from the links above, so now I am looking for older versions, because I remember this used to work.\n. @richlander Yeah, you're right, it seems that it's the preview2 tooling that I'm looking for (AFAIK the move from project.json to msbuild was in preview3). Is it still possible to get it somewhere?. ",
    "daschult": "@blackdwarf What about the installers that contain the MSBuild DotNet Core targets and props files for Visual Studio 2015? I can't seem to find anything that installs those files.. ",
    "iAmjad1": "So the workload is on the network, does that add overhead.. ",
    "ChristianHaase": "\n<PropertyGroup>\n  <TargetFramework>netcoreapp1.1</TargetFramework>\n  <DebugType>portable</DebugType>\n  <PreserveCompilationContext>true</PreserveCompilationContext>\n  <AssemblyName>OurGhostsOfWar</AssemblyName>\n  <OutputType>Exe</OutputType>\n  <PackageId>OurGhostsOfWar</PackageId>\n  <RuntimeFrameworkVersion>1.0.4</RuntimeFrameworkVersion>\n  <PackageTargetFallback>$(PackageTargetFallback);dotnet5.6;portable-net45+win8</PackageTargetFallback>\n</PropertyGroup>\n\n<ItemGroup>\n  <None Update=\"bin\\**\\*;wwwroot\\**\\*;Views\\**\\*;Areas\\**\\Views\">\n    <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>\n  </None>\n</ItemGroup>\n\n<ItemGroup>\n  <PackageReference Include=\"MailKit\" Version=\"1.10.2\" />\n  <PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"1.1.1\" />\n  <PackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"1.0.2\" />\n  <PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"1.0.2\" />\n  <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics\" Version=\"1.0.2\" />\n  <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore\" Version=\"1.0.2\" />\n  <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Cookies\" Version=\"1.0.2\" />\n  <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"1.0.2\" />\n  <PackageReference Include=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore\" Version=\"1.0.2\" />\n  <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"1.0.0\">\n    <PrivateAssets>All</PrivateAssets>\n  </PackageReference>\n  <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.0.3\" />\n  <PackageReference Include=\"Microsoft.AspNetCore.Server.IISIntegration\" Version=\"1.0.2\" />\n  <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel\" Version=\"1.0.3\" />\n  <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"1.0.2\" />\n  <PackageReference Include=\"Microsoft.Extensions.Configuration.EnvironmentVariables\" Version=\"1.0.2\" />\n  <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"1.0.2\" />\n  <PackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"1.0.2\" />\n  <PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"1.0.1\" />\n  <PackageReference Include=\"Microsoft.AspNetCore.Session\" Version=\"1.0.2\" />\n  <PackageReference Include=\"Sakura.AspNetCore.PagedList\" Version=\"2.0.1\" />\n  <PackageReference Include=\"Sakura.AspNetCore.Mvc.PagedList\" Version=\"2.0.11\" />\n  <PackageReference Include=\"jQuery.mvc.LightBox\" Version=\"1.0.2\" />\n  <PackageReference Include=\"HtmlAgilityPack\" Version=\"1.4.9.5\" />\n  <PackageReference Include=\"MySql.Data\" Version=\"7.0.6-IR31\" />\n  <PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql\" Version=\"1.1.1-prerelease-10017\" />\n</ItemGroup>\n\n<Target Name=\"PrepublishScript\" BeforeTargets=\"PrepareForPublish\">\n  <Exec Command=\"bower install\" />\n  <Exec Command=\"dotnet bundle\" />\n</Target>\n\n<ItemGroup>\n  <DotNetCliToolReference Include=\"BundlerMinifier.Core\" Version=\"2.2.301\" />\n  <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"1.0.0\" />\n</ItemGroup>\n\n<ItemGroup>\n  <Compile Update=\"Resources\\Emails.Designer.cs\">\n    <DesignTime>True</DesignTime>\n    <AutoGen>True</AutoGen>\n    <DependentUpon>Emails.resx</DependentUpon>\n  </Compile>\n  <Compile Update=\"Resources\\Error.Designer.cs\">\n    <DesignTime>True</DesignTime>\n    <AutoGen>True</AutoGen>\n    <DependentUpon>Error.resx</DependentUpon>\n  </Compile>\n  <Compile Update=\"Resources\\General.Designer.cs\">\n    <DesignTime>True</DesignTime>\n    <AutoGen>True</AutoGen>\n    <DependentUpon>General.resx</DependentUpon>\n  </Compile>\n</ItemGroup>\n\n<ItemGroup>\n  <EmbeddedResource Update=\"Resources\\Emails.resx\">\n    <Generator>PublicResXFileCodeGenerator</Generator>\n    <LastGenOutput>Emails.Designer.cs</LastGenOutput>\n  </EmbeddedResource>\n  <EmbeddedResource Update=\"Resources\\Error.resx\">\n    <Generator>PublicResXFileCodeGenerator</Generator>\n    <LastGenOutput>Error.Designer.cs</LastGenOutput>\n  </EmbeddedResource>\n  <EmbeddedResource Update=\"Resources\\General.resx\">\n    <Generator>PublicResXFileCodeGenerator</Generator>\n    <LastGenOutput>General.Designer.cs</LastGenOutput>\n  </EmbeddedResource>\n</ItemGroup>\n\n\nThere is no project nor solution file in my published folder. If I create a completely new .NET Core MVC application, and publish said project, the same things happens. No project/solution file present in the working directory.. I have already provided the info for two different environments giving the same error. One for my local windows machine, and one for a debian environment. Would you like me to just test this on my local machine since the project\nfile doesn't exist in the production environment (debian)\nI guess I could just run dot net restore in my local publish folder and\npoint to the project file in my development folders?\nman. 13. mar. 2017 kl. 22.27 skrev Livar notifications@github.com:\n\nI wanted to make sure of how you obtained that information.\nCan you try running dotnet restore path/to/csproj and likewise for the\nother commands?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/552#issuecomment-286249302, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AG5vxva4iB_y9eBJRtcwxuB1A-A56jNpks5rlbTTgaJpZM4MbzzU\n.\n-- \n\nBest Regards,\nChristian Haase\nTorvegade 13 2. sal\n6700 Esbjerg\nPhone: (+45) 61 13 19 37\nE-mail: Christian.haase.93@gmail.com Christian.haase.93@gmail.com\nSkype: christian.haase.93\nSkype calling hours:\nMon-Fri: 16:15 - 17:30 & 19:30 - 22:30 (4:15pm - 5:30pm & 7:30pm -\n10:30pm)\nSat-Sun: 10:00 - 17:30 & 19:30 - 21:00 (10:00am - 5:30pm & 7:30pm - 9:00pm\n) *\nAll times are in GMT+1 (Copenhagen)*\nUnless otherwise agreed*\n\n\nhttps://dk.linkedin.com/in/christian-haase-93507488\nhttps://www.facebook.com/christian.p.haase\nhttp://www.twitter.com/crytch\nhttps://social.msdn.microsoft.com/profile/christianhaase/*\n. Okay that makes sense. Would do you mean by shared framework though?\ntir. 14. mar. 2017 kl. 06.03 skrev Livar notifications@github.com:\n\n\nWe must be talking past each other. What do you mean the project file does\nnot exist in the production environment?\nrestore/build/run/publish all need a csproj file.\nIf what you are doing is publishing a project from one machine and then\ncopying the published content to another machine and trying to run it, then\nyou don't need to restore and you can't use dotnet run to execute it.\nYou need one of two things:\n\nIf the app is a portable application, you need to have at least the\n   shared framework for which the app was published installed in the machine\n   where you want to run it. And you execute it by running dotnet\n   . Just be sure that dotnet with the shared\n   framework is in your path or when invoking dotnet give it its full path.\nIf the app is a self-contained app, then, just run your app.exe\n   directly from the published folder.\n\nDoes this help a bit?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/552#issuecomment-286323000, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AG5vxgnsGZ8t2Y9-4lnyLI3bAUSu7ieWks5rlh-KgaJpZM4MbzzU\n.\n-- \n\nBest Regards,\nChristian Haase\nTorvegade 13 2. sal\n6700 Esbjerg\nPhone: (+45) 61 13 19 37\nE-mail: Christian.haase.93@gmail.com Christian.haase.93@gmail.com\nSkype: christian.haase.93\nSkype calling hours:\nMon-Fri: 16:15 - 17:30 & 19:30 - 22:30 (4:15pm - 5:30pm & 7:30pm -\n10:30pm)\nSat-Sun: 10:00 - 17:30 & 19:30 - 21:00 (10:00am - 5:30pm & 7:30pm - 9:00pm\n) *\nAll times are in GMT+1 (Copenhagen)*\nUnless otherwise agreed*\n\n\nhttps://dk.linkedin.com/in/christian-haase-93507488\nhttps://www.facebook.com/christian.p.haase\nhttp://www.twitter.com/crytch\nhttps://social.msdn.microsoft.com/profile/christianhaase/*\n. Sorry, I don't see any links?\n\nHow come this has changed? With VS 2015 and .NET Core 1.0.0, I could publish, transfer the files to my production environment, and run the command dotnet run. This would run the project on my debian machine, and everything would work fine. I'm not sure about how I run the project with the new structure and the new publish flow?. I think my problem is that I don't know how to publish an run the project. Perhaps you could guide me? By publishing the project I only get a dll file of my project so I suppose this is a portable publish. So I need to install .NET core runtime on my Debian server correct? Then how do I run the project as I did before with dotnet run?. Oh wow. I didn't really catch the fact that it's not dotnet run <path_to_my_published_app_dll> but that it's just dotnet <path_to_my_published_app_dll>. It looks like it's wroking now, except for some MySQL error. \nThank for your assistance. Hope I didn't take to much of your time \ud83d\udc4d . I suppose that would explain some issues, but the application runs fine on the server. It's only remote HTTP request that causes the segfault?. @wfurt \nOpenSSL version:\nOpenSSL 1.10f 25 May 2017\ncurl version:\ncurl 7.52.1 (x86_64-pc-linux-gnu) libcurl/7.52.1 OpenSSL/1.0.2l zlib/1.2.8 libidn2/0.16 libpsl/0.17.0 (+libidn2/0.16) libssh2/1.7.0 nghttp2/1.18.1 librtmp/2.3\nI don't know what issues you are referring to (#24891 and #24552)?. I'm trying to convert my project to .NET core 2.0, and updating the installed version on my server. I will update my progress here once done. Thanks for the inputs.. I updated the project to 2.0, but it's still a problem. I'll take a look at the links you provided @wfurt . I looked at the installed version of libcurl, and this is what I could find: \n\nAnything I can do here?\n. ",
    "SalvorinFex": "https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md. Alright, thanks!. ",
    "RamblingGeekUK": "I have built the app on PC, I have it copied over.. but how do I install dotnet core on to raspberry pi, I have pulled the build down but it won't run when I enter ./helloworld ?  dotnet runs but it doesn't feel installed?. ",
    "eerhardt": "This is a different issue.  The issue @Tealons is hitting is https://github.com/aspnet/MvcPrecompilation/issues/103\nYou can't cross-publish from a Windows machine to a Linux app with the default ASP.NET template.\nTo workaround this set:\n<MvcRazorCompileOnPublish>false</MvcRazorCompileOnPublish>\nin your .csproj.. For general usage, https://github.com/raspberry-sharp/raspberry-sharp-system was the one I looked into briefly when prototyping/designing my drone/RF24 work.\nHowever, I took a slightly different route.  Since I was only concerned about radio signals, I ended up wrapping the native RF24 library in a managed wrapper and used that to talk to the radio. My reasoning was that the RF24 library already had a good API for talking to the radio and I didn't want to rewrite it in managed code over a general purpose GPIO API. I think it worked out well for me, and if there was a native library that already exists and solved my needs, I would take the same approach.. That said, I would love to see https://github.com/raspberry-sharp/raspberry-sharp-io ported to .NET Core.  \ud83d\ude09 \nUPDATE:  I should have taken 2 seconds to look.  Looks like someone already did: https://github.com/ScramOnline/raspberry-sharp-io. @bartonjs let me know that we have an issue to support OpenSSL 1.1, but .NET Core 2.0 doesn't support it yet.  Debian 9 comes with OpenSSL 1.1, which we don't support.\n@leecow @Petermarcu @richlander - our supported versions roadmap says that .NET Core 2.0 supports Debian 8.7+.  Is the intention that we support Debian 9 with .NET Core 2.0?. @brendandburns  - did you install libssl1.0.2 that @bartonjs recommends above?\n. I'm not sure if Raspberry Pi Zero is supported (yet) or not.\n@Petermarcu - ?. @Liturgist - I assume you are referring to http://www.regular-expressions.info/posixbrackets.html, ex. [:alpha:], [:digit:], etc\nI don't think there is any work currently going on to support these (or at least I haven't heard of any).  The full .NET Framework didn't support these classes.\nhttps://stackoverflow.com/questions/9643717/why-cant-i-match-posix-character-classes\nAccording to https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions#CategoryOrBlock, you can use Unicode categories and blocks, and http://www.regular-expressions.info/posixbrackets.html seems to have a mapping between POSIX character classes and Unicode.. The 1st case of \n\nReferencing a .NET Standard 1.4 or 1.6 class library from a .NET Core 1.1 Web App\n\nis a duplicate of https://github.com/dotnet/coreclr/issues/10037.  In short, the scenario wasn't supported in the 1.1 time frame.  It only worked in 1.0 because of a bug in the dotnet host.  We only supported Project-to-Project references and NuGet references.\nThe 2nd case of \n\na .NET Standard 2.0 class library from a .NET Core 2.0 Web App fails at runtime.\n\nIs tracked by https://github.com/dotnet/core-setup/issues/2981.  Basic console and WebAPI apps work in this scenario.  It is only ASP.NET MVC apps that are broken.  The fix has been merged into the master branch, and @steveharter is working on porting the change into a 2.0.x service release.. Microsoft.Extensions.DependencyModel.dll is owned by the runtime team and ships out of the dotnet/core-setup repo.\n@dagood - it looks like no symbols for the dotnet/core-setup repo were published for 2.0.0.  Can we fix that?. @dagood - it wasn't listed here, but PlatformAbstractions has the same problem. It is built from core-setup and its symbols are not on the symbol server. I wasn't aware of the manual nature, I thought the whole repo would be taken care of in one shot.\nWe also have native assemblies - dotnet host, fxr, policy.\nDid you just do this single .dll?  Or did you upload all the symbols for this repo?. ",
    "xsoul": "i having problem compiling my existing vs2015 project (.net core preview2) after i upgrade nuget package with latest .net core 1.1.1\nDo you have same problem?. I reverted all my changes so i only have this copy of project.json which was have no problem for compiling before i upgrade to .net core 1.1.1\n\n{\n  \"dependencies\": {\n    \"Microsoft.ApplicationInsights.AspNetCore\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.0\",\n    \"Microsoft.Extensions.Configuration.EnvironmentVariables\": \"1.0.0\",\n    \"Microsoft.Extensions.Configuration.FileExtensions\": \"1.0.0\",\n    \"Microsoft.Extensions.Configuration.Json\": \"1.0.0\",\n    \"Microsoft.Extensions.Logging\": \"1.0.0\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0\",\n    \"Microsoft.Extensions.Logging.Debug\": \"1.0.0\",\n    \"Microsoft.Extensions.Options.ConfigurationExtensions\": \"1.0.0\",\n    \"Serilog.Sinks.RollingFile\": \"2.2.0\",\n    \"Serilog.Sinks.Literate\": \"2.0.0\",\n    \"Serilog\": \"2.1.0\",\n    \"Microsoft.AspNetCore.Authentication.Google\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Authentication.Cookies\": \"1.0.0\",\n    \"Newtonsoft.Json\": \"9.0.1\",\n    \"Serilog.Extensions.Logging\": \"1.1.0\",\n    \"Microsoft.AspNetCore.Authentication.JwtBearer\": \"1.0.0\",\n    \"System.Linq.Dynamic\": \"1.0.7\",\n    \"NReco.PdfGenerator\": \"1.1.12\",\n    \"RestSharp\": \"105.2.3\"\n  },\n\"tools\": {\n    \"Microsoft.AspNetCore.Server.IISIntegration.Tools\": \"1.0.0-preview2-final\"\n   },\n\"frameworks\": {\n    \"net461\": {\n      \"dependencies\": {\n        \"Biota.Auth\": {\n          \"target\": \"project\"\n        },\n        \"Biota.Models\": {\n          \"target\": \"project\"\n        },\n        \"Biota.QRGenerator\": {\n          \"target\": \"project\"\n        },\n        \"Biota.Storage\": {\n          \"target\": \"project\"\n        }     },\n      \"frameworkAssemblies\": {\n        \"System.Configuration\": \"4.0.0.0\"\n      }\n    }\n  },\n\"buildOptions\": {\n    \"emitEntryPoint\": true,\n    \"preserveCompilationContext\": true\n  },\n\"publishOptions\": {\n    \"include\": [\n      \"wwwroot\",\n      \"Views\",\n      \"Areas/**/Views\",\n      \"appsettings.json\",\n      \"web.config\"\n    ]\n  },\n\"scripts\": {\n    \"postpublish\": [ \"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%\" ]\n  }\n}\n\nafter upgrade, those microsoft related assemblies should be version 1.1.1, and here is my global.json\n{\n  \"projects\": [ \"src\", \"test\" ],\n  \"sdk\": {\n    \"version\": \"1.0.0-preview2-003121\"\n  }\n}. ",
    "MaximRouiller": "Please ensure that supports with VS2015 is kept for a bit, please? I know of a client who just recently upgraded to 2015. Won't update to 2017 for at least 2 years as far as I know.. Since .NET Core is mostly driven with command line tooling, can we expect VS2015 tooling to be supported for longer than previous .NET Tooling?. ",
    "benrr101": "Thanks very much for updating the download archive page!. ",
    "hqueue": "@Petermarcu PTAL. I've removed -n helloworld option from dotnet command, since this option make a new  helloworld directory under current directory. And also refine the paragraph. \n. /cc: @lemmaa @jyoungyun Please take a look at Tizen version and architecture. For architecture, did we have build dotnet for Tizen x64 ?. @Petermarcu In short, 4.0 is minimum version. And please remove x64 from Tizen architecture.\n. You are right, I will update it. \nWith recent SDK, if I ran dotnet new console -n helloworld, a new directory helloworld is created under current directory. I will update this paragraph.\n. ",
    "autodidaddict": "@petermarcu suggested I create this issue here.. My core need is just to be able to detect pin status and to raise and lower pins. Obviously wrapper libraries above such a core would be useful for specialized tasks. But for now I'd love to be able to demo a microservice running on a Pi that controls an LED and reports the status of a temperature sensor, etc.. In other words, a demo for the maker community indicating that you're not stuck with Python or Node for all the things.. ",
    "philcarbone": "We need .NET in this space again!  I've used Netduino, and gadgeteer for years, but getting .NET Core with general purpose and unified GPIO APIs would be awesome!. ",
    "utilitydelta": "I have a library you could use. It's .NET Standard 2.0, you can read/write to GPIO and PWM pins on any linux device. \nhttps://github.com/utilitydelta-io/dotnet-gpio. ",
    "baronfel": "@bartonjs thanks for the pointers!  \nHere's the output of both commands, which seems to suggest that the links are setup correctly:\n```\n 17-03-17/12:17\ue0b0 ~/code/OSS \ue0b0 otool -L /usr/local/lib/libcrypto.1.0.0.dylib\n/usr/local/lib/libcrypto.1.0.0.dylib:\n    /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.0.0)\n17-03-17/12:17\ue0b0 ~/code/OSS \ue0b0 otool -L /usr/local/lib/libssl.1.0.0.dylib\n/usr/local/lib/libssl.1.0.0.dylib:\n    /usr/local/opt/openssl/lib/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n    /usr/local/Cellar/openssl/1.0.2k/lib/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.0.0)\n```\nSo at this point I'm verifying where brew installed openssl to:\n17-03-17/12:21\ue0b0 ~/code/OSS \ue0b0 brew --prefix openssl\n/usr/local/opt/openssl\nAnd here are the links setup on my system (from /usr/local/lib):\nlrwxr-xr-x 1 chet admin 48 Mar 16 12:15 libcrypto.1.0.0.dylib -> /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib\nlrwxr-xr-x 1 chet admin 45 Mar 16 12:15 libssl.1.0.0.dylib -> /usr/local/opt/openssl/lib/libssl.1.0.0.dylib. I'm here yet again to delight and amaze:\n17-03-17/13:38\ue0b0 /usr/local/share/dotnet/shared/Microsoft.NETCore.App/1.1.1> locate System.Security.Cryptography.Native.OpenSsl.dylib\nSystem.Security.Cryptography.Native.OpenSsl.dylib:\n    @rpath/System.Security.Cryptography.Native.OpenSsl.dylib (compatibility version 0.0.0, current version 0.0.0)\n    @rpath/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n    @rpath/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n    /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1)\nThough I do have many copies of that dll, so maybe the wrong one is getting picked up:\n17-03-17/13:40\ue0b0 /usr/local/share/dotnet/shared/Microsoft.NETCore.App/1.1.1 \ue0b0 locate System.Security.Cryptography.Native.OpenSsl.dylib\n/Applications/Visual Studio.app/Contents/Resources/lib/monodevelop/AddIns/DotNetCore.Debugger/Adapter/System.Security.Cryptography.Native.OpenSsl.dylib\n/Users/chet/.nuget/packages/runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl/4.3.0/runtimes/osx.10.10-x64/native/System.Security.Cryptography.Native.OpenSsl.dylib\n/Users/chet/.vscode/extensions/ms-vscode.csharp-1.7.0/.debugger/System.Security.Cryptography.Native.OpenSsl.dylib\n/Users/chet/.vscode-insiders/extensions/ms-vscode.csharp-1.7.0/.debugger/System.Security.Cryptography.Native.OpenSsl.dylib\n/usr/local/microsoft/powershell/6.0.0-alpha.14/System.Security.Cryptography.Native.OpenSsl.dylib\n/usr/local/share/dotnet/shared/Microsoft.NETCore.App/1.1.0/System.Security.Cryptography.Native.OpenSsl.dylib\nYou're suggesting I hook gdb into the invocation of dotnet restore and see where it's probing for dlls?  Just to make sure before I lose myself in the debugger :). That was a prophetic statement, as my DYLD_FALLBACK_LIBRARY_PATH has mono 4.8 inserted into it before user lib:\n17-03-17/16:11\ue0b0 ~/code/OSS \ue0b0 echo $DYLD_FALLBACK_LIBRARY_PATH\n/Library/Frameworks/Mono.framework/Versions/Current/lib:/usr/lib\nI did this so that I'd be able to load versions of libgdiplus without crashing, but resetting the path to the default fixes the entire issue!\nThanks so much for your help.  Is there a doc/FAQ around setup?  I'd like to contribute parts of our discussion there in case other folks using mono have similar issues.. ",
    "WonyoungChoi": "In addition, The TFM \"Tizen 4\" can be used from NuGet 4.3.0. https://github.com/NuGet/NuGet.Client/pull/1232. ",
    "jyoungyun": "Here is the patches for Tizen nupkgs. These PR supported to generate Tizen.4.0.0 nupkgs.\nhttps://github.com/dotnet/coreclr/pull/8827\nhttps://github.com/dotnet/corefx/pull/14792\nhttps://github.com/dotnet/core-setup/pull/1025\n. How about Ubuntu arm? Could you please let me know the reason why you didn't add arm architecture here?. And.. We do not support Tizen x64  yet. . ",
    "madhav5589": "@Petermarcu I have an windows application (using .NET 4.6) which I use to run in WInPE environment for Imaging purpose (using Ghost for Windows platform). Now, I want to support Linux platform as well and I guess .NET core would support cross platform. . @Petermarcu Thanks. I followed the doc from here for simple SCD console application. After publishing the app, when I try to run the published app.dll inside WinPE, it shows an error that \n\ndotnet is not recognized as internal or external command\n\nin the command prompt.\nI thought that SCD project contains the .net core library files and dependent dll files with it. Any thoughts? . @mellinoe I was using <OutputType>Exe</OutputType> in the project file with RunTimeIdentifier as \"Any\". Since I am trying to run it in WinPE, is there specific RID dedicated for that? RID catalog reference: click here. @MrM40  Yes, I could run .NET core console app in WinPE environment. But not WPF app. I installed .NET  core 3.0 preview version and created a sample WPF app using default template and published it using Self Contained Deployment. Couldn't run it in WinPE environment. It throws \"an unknown software exception\".  @Petermarcu @mellinoe  Any thoughts on this?. @karelz Thanks for the update. It makes sense now to me.. ",
    "MrM40": "madhav5589, did you succeed running dotnet in WinPE?. I just installed \"dotnet-runtime-2.2.0-linux-x64.tar.gz\" on a clean Debian Burster.\nI get the error when trying to run a dotnet app:\n\nNo usable version of the libssl was found\nAborted\n\nDo I need to install additional dependencies?\n. Quick guide to get dotnet core runtime 2.2.3 on Debian Buster:\n(You cannot use MS's Debian9 install guide. You have to install it manually, the good thing is you don't have to add MS's repository to your installation :-))\n\nDownload library files:\nwget -O /tmp/dotnet_runtime_2.2.3.tar.gz https://download.visualstudio.microsoft.com/download/pr/28271651-a8f6-41d6-9144-2d53f6c4aac4/bb29124818f370cd08c5c8cc8f8816bf/dotnet-runtime-2.2.3-linux-x64.tar.gz\nMake binary folder:\nmkdir /usr/share/dotnet/\nAdd binary to PATH:\nexport PATH=$PATH:/usr/share/dotnet/\nUnpak:\ntar zxf\u00a0/tmp/dotnet_runtime_2.2.3.tar.gz -C /usr/share/dotnet/\nConfirm installation:\ndotnet --info\n\nFind newest version here link\n:-)\n. Manual installation of runtime 2.2.3 on Debian Buster:\n\n\nDownload binaries:\nwget -O /tmp/dotnet_runtime_2.2.3.tar.gz https://download.visualstudio.microsoft.com/download/pr/28271651-a8f6-41d6-9144-2d53f6c4aac4/bb29124818f370cd08c5c8cc8f8816bf/dotnet-runtime-2.2.3-linux-x64.tar.gz\n\n\nMake dir\nmkdir /usr/share/dotnet/\n\nUnpak\ntar zxf\u00a0/tmp/dotnet_runtime_2.2.3.tar.gz -C /usr/share/dotnet/\nCreate symbolic link to dotnet\nln --symbolic /usr/share/dotnet/dotnet /usr/bin/dotnet\nConfirm installation\ndotnet --info\n. \n",
    "vladimirkrstic": "This is the first thing I've tried and still got 0.9.8zh in use, not the new version. . Oh I see. Command line was referring to that version. I've thought it is connected somehow... I'm a big newb obviously. :/ Didn't even tried will .net work properly. Sorry for wasting your time, and thank you sir.. ",
    "MaxMommersteeg": "@Petermarcu Sorry for my late response. I will update this pull request tomorrow.. Today I tried the steps over again.\nSo I reinstalled Microsoft .NET Core 2.0.0 - SDK Preview 1. I expected 2.0.0 when running the dotnet --version command,  however it returned 1.0.0. I used the following link to install the .NET Core SDK: Windows x64 - Installer\n\nProbably using the 1.0 SDK?\n\nSo yes, you are correct. I was not given a NuGet.config file probably due to the fact that I was using .NET Core 1 SDK. Others could be running into the same issue. I had to manually add the package source with Visual Studio 2017. Perhaps the first line should be elaborated on, since it only points to the repository without giving a 'how-to':\n\nInstall .NET Core 2.0 SDK into a supported developer configuration\n\nCreating multiple paths for multiple environments could be an option, but could confuse the reader even more. I'm not sure what the correct approach is.\n. Nit: 'cproj' to 'csproj'.. ",
    "npruehs": "Sorry, duplicate of https://github.com/aspnet/Tooling/issues/633. ",
    "SirGordon": "\"restore\" helped, the application works.\nThank you. ",
    "makcakaya": "@Petermarcu \"I think I've seen scenarios where VS/VSCode and the command line fight with eachother on this\" was correct for me, closing VS 2017 helped. Hope it will be resolved.. ",
    "mmitche": "@dotnet-bot test ci please. It has samples.  Maybe we should be building them?  There is CI available for this repo already.. @Petermarcu I'm not that familiar with what is in this repo.  If no CI is needed, then just empty out the netci.groovy file for now, or augment it to build the samples.. @DamianEdwards @leecow @richlander This is a first stab at an updated table.  The individual repos already have large tables, so I don't really want to duplicate that much info here.\nI envision that the linked core-sdk SDK pages will contain the links to coherent components. Ubuntu?\n. ",
    "DominikDitoIvosevic": "Could we maybe also get more exact dates/months for the preview?  Q2 started this month right?. ",
    "rakeshsinghranchi": "VC redist failed to install : \n[1D20:21D4][2017-04-07T00:56:55]i319: Applied execute package: VC_redist.x64.exe, result: 0x80070666, restart: None\n. Below workaround may resolve the installation issue:\n1. Uninstall vcredist 14.10.25008.0 \n2. Try re-installing the setup. . cc @Petermarcu, @gkhanna79 , @vivmishra \nGlad to know that you are unblocked. Thanks for reporting the issue, the fix will be available in next release of Runtime and Sdk setup. Closing this now.. Here are the details : \n.NET Core 2.0.0 x64 installer bundle:\n http://dotnetcli.blob.core.windows.net/dotnet/Runtime/2.0.0/dotnet-runtime-2.0.0-win-x64.exe\nMSI Verbose logging : http://wixtoolset.org/documentation/manual/v3/howtos/general/get_a_log.html\nTo extract a bundle package :\nExtract wix toolset: https://github.com/wixtoolset/wix3/releases/download/wix311rtm/wix311exe.zip\nLocate dark.exe and run below command :\n   dark.exe -x  \nTo collect VS setup log : \nDownload and run the collection tool - https://aka.ms/vscollect. Instruction is on the page.. https://github.com/dotnet/core-setup/tree/master/src/pkg/packaging/rpm/scripts . There is an issue with uninstall script that's causing major upgrade remove the symbolic link . Binary RPMs are built using FPM tool.. @chenowen , Thanks. Yes, the proposed fix needs an update in https://github.com/dotnet/core-setup/blob/master/src/pkg/packaging/rpm/scripts/after_remove_host.sh . Opened https://github.com/dotnet/core-setup/issues/3455 to track this issue.. @JerryBian , can you please try installing dotnet-runtime-deps-2.1 and dotnet-runtime-2.1 package separately and share the log here? . Please share output of the following commands to help further diagnose the issue : \napt-cache policy dotnet-runtime-deps-2.1\napt-cache policy dotnet-runtime-2.1. cc @leecow . Thanks @dbegg35 for sharing the reproducible step.. This issue was moved to dotnet/core-setup#4732. @RenshuozZ  , .NET Core is not supported on Windows Server 2008. Here is the supported OS matrix : https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1-supported-os.md\nLet me know if you still want to explore testing this setup issue, I can further look into this. Please share setup logs using aka.ms/vscollect , it has tool download & install instructions and collects all the required setup logs.. @DanJ210 , can you please click on the duplicate product names and share the version number it shows ? \nFor e.g : \n\nIt is possible that you have different version of the same product being installed. \ncc @wli3 . This issue was moved to dotnet/core-setup#4707. cc @joeloff \nThis is an ASP.NET setup where the setup payload is either corrupted or incomplete. \nhttps://github.com/wixtoolset/issues/issues/5716\n. @schotime , while problem related to packages-microsoft-prod.deb has been identified as per this issue.  Can you please share below details to further diagnose the issue you are encountering ? \n1.  List the feeds runtime package is configured. \napt-cache policy dotnet-sdk-2.2\napt-cache policy dotnet-runtime-2.2\n2.  OS details \ncat /etc/os-release\n3.  List which system package is failing to install \nsudo apt-get install dotnet-runtime-deps-2.2\n4.  List which all libicu packages are available \napt-cache search libicu\n. This issue was moved to dotnet/core-setup#4890. @natemcmaster  , @joeloff  - can you take a look into this issue ? Also,can you please move this issue to appropriate repo ? . ",
    "chantisnake": "In fact I have installed many versions of vc redist installed via choco, it is just the installer do not pick them up:\n\u276f choco list -lo | Select-String vc\nInputStream:76:vcredist140 14.10.25008.0\nInputStream:77:vcredist2008 9.0.30729.6161\nInputStream:78:vcredist2010 10.0.40219.2\nInputStream:79:vcredist2012 11.0.61031\nInputStream:80:vcredist2013 12.0.30501.20150616\nInputStream:81:vcredist2015 14.0.24215.20170201\nInputStream:82:vcredist2017 14.10.25008.0\nis there any way I can by pass this error? For now my F# development has become a pain, since I cannot debug it via vscode.. the work around works!\nI don't know whether this issue is still useful to you guys, if it is not, feel free to close this issue. ",
    "cdmihai": "AFAIK, the change we did was to allow Nuget based dependencies to win against the ones on disk: https://github.com/Microsoft/msbuild/pull/1520/\n@ericstj or @dsplaisted should know the scenarios better for this.. ",
    "kharlamov": "If it helps I do have the 4.6.2 SDK installed on those servers that do not compile the code. \nSmall discovery, copying the C:\\Program Files (x86)\\MSBuild\\14.0 from the VS server to the non VS Server fixes the issue. \nThe non VS folder structure only has the Bin folder and ThirdPartyNotices where as the VS server has Bin, Imports, Microsoft.Common.Targets folders and Microsoft.Common, Microsoft.VisualStudioVersion.v14.Common project property files. The Bin folders also do not have the same amount of files.. Besides the work around I provided, yes this is still a problem. @rjschmertz could you look into what version the build servers are using.. That works, dev ops can roll that out to the build servers. Thank you Eric.. ",
    "RJSchmertz": "devbuild01 says 4.6.1590.0 when running .\\MSBuild.exe -version from the latest version folder, \\%windir%\\Microsoft.NET\\Framework\\v4.0.30319. ",
    "arashbahreini": "@svick Actually i am planning for it but not now. I prefer to keep going with 2015 for this project . ",
    "psilogroup": "Thanks. ",
    "joelharkes": "@d4e666 Or whatever your name might be.\nThe problem is not the version sync but its the bad naming of things that make it confusing.\nthe whole idea of versions is that you can depend on SemVer for you. An update is an update:\n\nMajor update potentially breaks things\nMinor update adds features\nBugfix updates fixes bugs. (Although this could be a major update sometimes)\n\nThats why there is different versions for different packages and im happy we do. (otherwise everything had to be release at once, good luck with that). ",
    "multic0r3": "Inside this folder, you have to use the filename of your executable dll, in your example something like dotnet ./helloworld.dll. Inside this folder, you have to use the filename of your executable dll, in your example something like dotnet ./helloworld.dll. ",
    "BlaDrzz": "Thanks for the reply, I will try this when I revert back to ubuntu. Currently playing around with windows IoT.. ",
    "MeetOct": "i found this in docker images(microsoft/dotnet:1.1.2-runtime) when i used  EPPlus.Core\nThe type initializer for 'System.Drawing.KnownColors' threw an exception.\n   at System.Drawing.KnownColors.FromKnownColor(KnownColor kc)\n   at System.Drawing.Color.get_White(). ",
    "adamsitnik": "you need to call .GetTypeInfo()\nprior to .NET Standard:\ntype.Assembly\nnow:\ntype.GetTypeInfo().Assembly\nthe advantage is that System.Object has no direct dependency to reflection now. @nguerrera thanks for help!. Hi @ZeroPKI \nI have ported the benchmarks that you have provided and run them with BenchmarkDotNet.\nThe project file:\n```cs\n\n\nExe\nnet471;netcoreapp2.0;netcoreapp2.1;netcoreapp2.2\n\n\n\n\n\n```\nThe code:\n```cs\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Running;\nnamespace arrays\n{\n    class Program\n    {\n        static void Main(string[] args) => BenchmarkSwitcher.FromAssembly(typeof(Program).Assembly).Run(args);\n    }\npublic class ArrayBenchmarks\n{\n    const int dim = 100;\n\n    [Benchmark]\n    public int[][][] Jagged()\n    {\n        var jagged = new int[dim][][];\n        for (var i = 0; i < dim; i++)\n        {\n            jagged[i] = new int[dim][];\n            for (var j = 0; j < dim; j++)\n            {\n                jagged[i][j] = new int[dim];\n                for (var k = 0; k < dim; k++)\n                {\n                    jagged[i][j][k] = i * j * k;\n                }\n            }\n        }\n\n        return jagged;\n    }\n\n    [Benchmark]\n    public int[,,] Multi()\n    {\n        var multi = new int[dim, dim, dim];\n        for (var i = 0; i < dim; i++)\n        {\n            for (var j = 0; j < dim; j++)\n            {\n                for (var k = 0; k < dim; k++)\n                {\n                    multi[i, j, k] = i * j * k;\n                }\n            }\n        }\n\n        return multi;\n    }\n\n    [Benchmark]\n    public int[] Single()\n    {\n        var single = new int[dim * dim * dim];\n        for (var i = 0; i < dim; i++)\n        {\n            for (var j = 0; j < dim; j++)\n            {\n                for (var k = 0; k < dim; k++)\n                {\n                    single[i * dim * dim + j * dim + k] = i * j * k;\n                }\n            }\n        }\n\n        return single;\n    }\n}\n\n}\n```\nThe command to run for all the targeted .NET Frameworks, assuming that Mono is added to PATH:\ncmd\ndotnet run -c Release -f net471 --filter *ArrayBenchmarks.Multi --runtimes net471 netcoreapp2.0 netcoreapp2.1 netcoreapp2.2 mono --memory --job medium\nResults on my hardware:\n``` ini\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.17763.253 (1809/October2018Update/Redstone5)\nIntel Xeon CPU E5-1650 v4 3.60GHz, 1 CPU, 12 logical and 6 physical cores\n  [Host]     : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.3324.0\n  Job-AIWCQU : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.3324.0\n  Job-SORFFA : .NET Core 2.0.9 (CoreCLR 4.6.26614.01, CoreFX 4.6.26614.01), 64bit RyuJIT\n  Job-SKWKTU : .NET Core 2.1.6 (CoreCLR 4.6.27019.06, CoreFX 4.6.27019.05), 64bit RyuJIT\n  Job-AEBYLY : .NET Core 2.2.0 (CoreCLR 4.6.27110.04, CoreFX 4.6.27110.04), 64bit RyuJIT\n  Job-QYQICX : Mono 5.10.0 (Visual Studio), 64bit \nIterationCount=15  LaunchCount=2  WarmupCount=10  \n```\n| Method | Runtime |     Toolchain |     Mean |     Error |    StdDev | Ratio | RatioSD | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\n|------- |-------- |-------------- |---------:|----------:|----------:|------:|--------:|------------:|------------:|------------:|--------------------:|\n|  Multi |     Clr |        net471 | 2.707 ms | 0.1307 ms | 0.1915 ms |  1.00 |    0.00 |    222.6563 |    222.6563 |    222.6563 |           4000048 B |\n|  Multi |    Core | netcoreapp2.0 | 3.447 ms | 0.0844 ms | 0.1238 ms |  1.28 |    0.11 |    332.0313 |    332.0313 |    332.0313 |           4000048 B |\n|  Multi |    Core | netcoreapp2.1 | 2.546 ms | 0.0590 ms | 0.0883 ms |  0.95 |    0.09 |    332.0313 |    332.0313 |    332.0313 |           4000048 B |\n|  Multi |    Core | netcoreapp2.2 | 2.300 ms | 0.0228 ms | 0.0341 ms |  0.85 |    0.07 |    332.0313 |    332.0313 |    332.0313 |           4000048 B |\n|  Multi |    Mono |       Default | 6.137 ms | 0.0586 ms | 0.0877 ms |  2.28 |    0.21 |    171.8750 |    171.8750 |    171.8750 |                   - |\nAs you can see, .NET Core 2.1 AND 2.2 are faster that .NET 4.7.1, 2.0 is not. Which .NET Core did you test?\nCould you please run the same benchmarks on your hardware and share the results?. ",
    "chuckries": "@gregg-miskelly @tmat @caslan . @ctaggart Authentication is planned but not yet supported. cc @caslan . @ctaggart @tmat I updated the msbuild example with a pointer to https://github.com/ctaggart/SourceLink. Please take one last look. . I was mistaken about redirect. .NET's HttpListener supports auto redirection. I did a simple test with a local server that would redirect to github and VS 2017 handles the redirection correctly. I will remove this from the issues. . @tmat I don't have permission to merge this so please hit the button when you are happy with the doc. . @duncangravill  are you copying the Source Link error text from the \"Source Not Found: Source Link Authentication Failed\" page in Visual Studio? If so, what happens when you click the first hyperlink to try to authenticate to Source Link? . @gregg-miskelly @tmat please review. . new PR against the designs repo: https://github.com/dotnet/designs/pull/37\nI have changed this PR to just update the doc to be a link to the new location. . @gregg-miskelly I have update https://aka.ms/sourcelinkspec to point to the new location as well. . @tmat I don't have rights to merge this, can you hit the button?. @leecow . @leecow . >a \nremove. fixed.. I believe you are correct, I will double check. There was a time when I thought VSTS urls would require the relative path to be placed in the middle of a URL. \n. We do a sort of the map entries though, they are not matched in the exact order they appear in the json file. I wasn't 100% sure how our sort would treat case. I will double check. . @tmat suggested removing all 'Portable' references. It is being resolved. . The current implementation uses qsort and compares the strings based on length. qsort does not guarantee the ordering of equivalent elements.\n\nThe order of equivalent elements is undefined. . resolved. I will clarify this, the exact rules are these:\n1. The only acceptable wildcard is one and only one '', which if present will be replaced by a relative path\n2. If the filepath does not contain a , the uri cannot contain a * and if the filepath contains a * the uri must contain a \n3. If the filepath contains a , it must be the final character\n4. If the uri contains a *, it may be anwhere in the uri. I will log a bug on the debugger for this, but I am leaving it here for now.. @ctaggart are these only supported for dotnet cli projects?. @tmat Where should this link be added? Is this what we want to use as an example of the msbuild task?. fixed. . intentional, the ... will show in red error color if json is used. . We have a debugger bug to fix this.. fixed. fixed. fixed. I do not think it makes sense to try to replicate the documentation here.. replaced with origin\n. fixed.. fixed.. Turns out redirection does work.. \n",
    "ctaggart": "Can you please add specs on authentication support? https://github.com/dotnet/roslyn/issues/12759#issuecomment-282793617\nAny idea when that may be supported? Those of us at Tachyus really want to enable source link for our private GitHub repositories.. @chuckries @caslan It is something that will really help all the developers that share private binaries with each other within a company. It seems like a relatively easy feature to make for such a big win.. @tmat Yes, I made SourceLink.Create.CommandLine based on your feedback and feedback from GitLink authors and others. It simply uses the git command line. Rx.NET and Paket have both adopted it. That will be the one I promote going forward. I'll update the documentation soon.. I'm not sure where to log the bug with Azure App Services, cc @suwatch & @davidebbo.\nSince 2.0.0-preview2-006497 was rolled out on Friday, our builds using Azure Kudu have gone from 5 minutes to 50 minutes. The last 5 minute build was using 2.0.0-preview1-005977.. Thanks @forki, that dropped the build time down to 15 minutes. Fable is taking up about 11 minutes though, which is much longer than it was before even with the attempted workaround on that line too:\nps1\ndotnet restore /p:EnableDefaultItems=false\ndotnet fable npm-run build /p:EnableDefaultItems=false. > Do you have access to logs for kudo build? If you did, we'd appreciate seeing them to help diagnose the issue. Send to rlander@ms.\n@richlander Diagnostics for our internal company dashboard build are in your inbox. I built it using Fable and the builds auto-deploy using Azure Kudu. We are really looking forward to a stable dotnet 2. Let me know if I can assist further.. I added a global.json to hopefully allow dotnet 2.1.2 from Mac:\njson\n{\n  \"sdk\": {\n    \"version\": \"2.1.2\"\n  }\n}\nUpdate: this did not work. :(. I am looking for how to download the sdk outside of Visual Studio 2017.\n![image](https://user-images.githubusercontent.com/80104/33721596-4d53e1fe-db46-11e7-8b70-1609aee2988b.png)\n. @peterhuene Do you see a 2.1.2 listed there? I do not.. This original issue here was about being able to download the SDK 2.1.2 outside of Visual Studio 2017. There was a few days of lag time between publishing the VS release and the downloads being available. The downloads have been published and they are going to try and fix the lag time next time. This issue is  fixed. Please open up separate GitHub issues for other problems.. *Please* support redirects if not already supported. They work in source server support.. It is no longer just Portable PDB files, right?. Yeah, hoping it doesn't have to be the last character. That doesn't sound right.. A simple example that will work with GitHub or BitBucket and is highly configurable would be adding aDirectory.Build.propswith:\n``` xml\n<Project>\n  <ItemGroup>\n    <PackageReference Include=\"SourceLink.Create.CommandLine\" Version=\"2.1.0\" PrivateAssets=\"all\" />\n  </ItemGroup>\n</Project>\n```\nThat and setting theDebugTypetoportableorembeddedis all it takes. Or you can [do it manually](https://github.com/Microsoft/visualfsharp/blob/818c6277c8360cd095f404ee158a519d2cc72649/src/FSharpSource.targets#L517-L537). The result of those two is the same.. You should be able to adjust the properties of that MSBuild task to support Hg or Subversion, etc. Let me know if you have an example in mind.. No, bothSourceLink.Create.CommandLine&SourceLink.Create.GitHubwork on both dotnet and framework. See the 2.1 test plan for several tests https://github.com/ctaggart/SourceLink/issues/188. The latter makes use of thedotnet sourcelink-git` tool, and has more features. The former just uses command line tools and is easy to get started with.. ",
    "jpcarrascal": "I have exactly the same problem.\nI am running OS X El Capitan (10.11.6).\ndotnet --version output is 1.0.4.\nI tried both the installer and running the binary from the tar.gz and the result is the same. The only difference is that in the former case I also get a \"dotnet quit unexpectedly\" window.\nI'd appreciate any help and I'll be happy to provide more diagnostics information if needed.\nThanks!\nJP. ",
    "Nate-Wilkins": "This would be fantastic! I've wanted an easier way to do this from .NET for so long.. ",
    "conterio": "Is there any  around this?. ",
    "kgacova": "I couldn't get it to work with Core 2.0.. The working part didn't work. . ",
    "daneise": "I just today tried the same thing and got to the point:\nMethod not found: 'Void System.ServiceModel.ClientBase`1..ctor(System.ServiceModel.Description.ServiceEndpoint)'.\naccording to:\nhttps://stackoverflow.com/questions/45545013/system-servicemodel-not-found-in-net-core-project\nSystem.ServiceModel seems to be deprecated in .Net Core.\nI needed to install System.ServiceModel.Primitives to get to that point - i installed System.ServiceModel.Http and System.ServiceModel.Security along with it just to try if it would solve the problem.\nOr did anybody manage to get it working already and can share a solution?. ",
    "hinaria": "heya, pull request #603 and this pull request (#605) are fixes for the same issue (with #603's scope being a little bigger). not sure which one the team will decide, but we'll only need to merge one of them.. ",
    "karolklp": "Ahh, ok. \nClosing then.. ",
    "the-super-coder": "I think if you chose ASP.Net Core Web Application (.Net Framework), it will support all Libs and Dlls for .Net.\nI was looking for TransactionScope in .Net Core which is not yet implemented in .Net Core v1 so I chose the target framework as .Net for now, until the feature arrives for .Net Core.\nHope it helps.. Is there any way I could use .Net Core v2 Preview in my existing project using VS2017 15.2. I don't want to update my VS to 17.3 preview.\n. Thanks @neman and @dasMulli \nI wonder why did they hard-code \".Net Core v1.x\" in VS 2017 15.0/1/2.. Does this version support TransactionScope and RDL/RDLC?. @karelz TransactionScope API is in System.Transactions. RDL/RDLC are the report extensions from SQL Server Reporting Services. Are these both supported in .Net Core 2.0 preview 1?\nThanks.. One of the web apps, I got a lot of errors similar to the following:\nC:\\Users\\Super.Coder\\source\\repos\\WebApplication8\\WebApplication8\\WebApplication8.csproj : error NU1202: Package Microsoft.AspNetCore 2.0.0 is not compatible with netcoreapp2.0 (.NETCoreApp,Version=v2.0). Package Microsoft.AspNetCore 2.0.0 supports: netstandard2.0 (.NETStandard,Version=v2.0). @philippgille Sorry for late response, I was busy with some family work. Well, I am using .Net Core SDK v2.0\n@Petermarcu Unfortunately, I cannot expose the personal project. However, I face the same issue with all the default templates for DotNetCore in VS2017 v15.3\n. Thanks I deleted the \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\" which fixed the issue. . ",
    "nilanthasj": "Is this possible in .NET Core 2.0..? I have some issues in doing this.... ",
    "weiwangda2014": "@barrytang yes.. @WeihanLi we are same problem.i have no time that i am busy.  you can show detail problem to them.. ",
    "WeihanLi": "I also met this problem,when I add a view via visual studio 2017,the file's encoding is not utf-8 as before. I do not have an .editorconfig file with my project  and I develop with VisualStudio 2017(15.2). Sorry for not replying in time @richlander . The problem is as follows: \nThere's a option named [add] --> [add view]  in views  folder's context menu,I added a view this way and typed in some Chinese characters, and when I reopen the view just created,there's a encoding problem. \nJust as follows:\n\n. ",
    "taadis": "\u6211\u4e5f\u9047\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898,\u5728 Visual Studio 2017 \u4e2d[\u53f3\u952e\u83dc\u5355] -> \u76f4\u63a5\u6dfb\u52a0\u7684.cshtml & controller.cs & class.cs\u6587\u4ef6\u90fd\u4f1a\u51fa\u73b0\u4e00\u6837\u7684\u95ee\u9898.\n\u4f46\u662f\u5728[\u53f3\u952e\u83dc\u5355] -> [\u65b0\u5efa\u9879] -> [\u6dfb\u52a0\u6587\u4ef6]\u5c31\u662f\u6b63\u5e38\u7684.\u6211\u76ee\u524d\u662f\u90fd\u5230\u65b0\u5efa\u9879\u4e2d\u6dfb\u52a0\u9700\u8981\u7684\u6587\u4ef6.. ",
    "sxbjy": "Please install vc++2015 . ",
    "mohamedmansour": "It happened again while playing with branches. It seems dotnet core doesn't respect the:\n<BaseIntermediateOutputPath>..\\obj</BaseIntermediateOutputPath>\nWhen I build it, it does work, it uses the new ..\\obj path.  But if the obj folder already exists in the root of the project, dotnet core build uses that obj instead of the one I defined.\nI will open a msbuild issue to track it. https://github.com/Microsoft/msbuild/issues/2070. ",
    "NikolaosWakem": "VS2017 15.2 release seems to install dotnetcore 1.1.2 on your PC which means freshly compiled code is no longer comparable with Azure as 1.1.2 isn't on azure until next week.. need to edit csproj fille of all projects to reference 1.1.1 in the meantime prior to publish . ",
    "Jonathan34": "About time! thanks team! and thanks to have updated the docker along with the release!. ",
    "yaakov-h": "Visual Studio for Mac doesn't seem to be able to handle .NET Core 2.0, although the command-line tools do.\nI have a netstandard2.0 library and a netcoreapp2.0 executable which references it. dotnet build works fine, but Visual Studio for Mac gives the following error:\n/Library/Frameworks/Mono.framework/Versions/5.0.0/lib/mono/msbuild/15.0/bin/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.Common.targets(73,5): error : Project '/Users/yaakov/Development/Projects/ValveKeyValue/ValveKeyValue/ValveKeyValue/ValveKeyValue.csproj' targets '.NETStandard,Version=v2.0'. It cannot be referenced by a project that targets '.NETCoreApp,Version=v2.0'.\nWhich repo, if any, is the appropriate place for this?. Speaking of prerequisites does macOS still require libssl, since .NET Core now uses the Apple crypto APIs, not openssl?. @AdrienTorris He's right. System.Data.DataTableExtensions, System.Data.DataSetExtensions doesn't appear to have made it's way into .NET Standard 2.0 or .NET Core 2.0 as far as I can tell.. No idea. Probably best to open an issue on dotnet/corefx.. @karelz  I have no idea how important it is because don't use it, @hugosmarques does.. @hugosmarques https://github.com/dotnet/corefx/issues/new. VS for Mac doesn't quite support the .NET Core 2.0 Preview SDK yet, AFAIK.. @sillyousu You should be able to use the command-line tools from the .NET Core 2.0 Preview SDK, e.g. dotnet restore, dotnet build and dotnet add Foo.csproj package Mono.Posix.NETStandard -v 1.0.0-beta1. It looks like you're running on a Raspberry Pi.\nIf so, only the .NET Core Runtime supports the Pi, not the SDK. You'll need to develop your application on another machine, then publish your application and copy it to the Pi.. @leecow the October link is broken in the related Announcements issue. . ",
    "copernicus365": "I would like to verify that we can install .NET Core 2.0 Preview 1 on the latest version of Visual Studio 2017 (15.2)? I'm not referring to VS 2017 Preview, which of course would work. And if so: will this allow us to build .netstandard 2.0 class libraries?, again, on the current version (15.2) of Visual Studio 2017? None of the posts have clarified this, and maybe it seems obvious that the answer is yes, but things are so convoluted about what drives what, I would like verification first. I do understand that this is not marked as production ready. \nTHANKS for all the terrific work! So awesome, been waiting for this day for literally years now .... ",
    "hyeomans": "I got this when trying to install.\nPackage: dotnet-dev-osx-x64.2.0.0-preview1-005977.pkg\n\n```\nProcess:               dotnet [48516]\nPath:                  /usr/local/share/dotnet/dotnet\nIdentifier:            dotnet\nVersion:               0\nCode Type:             X86-64 (Native)\nParent Process:        zsh [48514]\nUser ID:               501\n\nDate/Time:             2017-05-12 22:24:04.210\nOS Version:            Mac OS X 10.10.5 (14F2109)\nReport Version:        11\nAnonymous UUID:        16C4099C-F1DE-BEC7-DBE6-92EFF1E2FC85\n\nSleep/Wake UUID:       BD31F401-9753-4763-8D59-9E786A95DC92\n\nTime Awake Since Boot: 320000 seconds\nTime Since Wake:       18000 seconds\n\nCrashed Thread:        0  Dispatch queue: com.apple.main-thread\n\nException Type:        EXC_BREAKPOINT (SIGTRAP)\nException Codes:       0x0000000000000002, 0x0000000000000000\n\nDyld Error Message:\n  Symbol not found: _clock_gettime\n  Referenced from: /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.0-preview1-002111-00/libcoreclr.dylib (which was built for Mac OS X 10.12)\n  Expected in: /usr/lib/libSystem.B.dylib\n\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\n0   dyld                            0x00007fff6e955075 dyld_fatal_error + 1\n1   dyld                            0x00007fff6e9582a8 dyld::fastBindLazySymbol(ImageLoader**, unsigned long) + 180\n2   libdyld.dylib                   0x00007fff869cf3ba dyld_stub_binder + 282\n3   ???                             0x000000010ddaa008 0 + 4527398920\n4   libcoreclr.dylib                0x000000010da9657d EEStartupHelper(tagCOINITEE) + 333\n5   libcoreclr.dylib                0x000000010da95f15 EEStartup(tagCOINITEE) + 325\n6   libcoreclr.dylib                0x000000010da95d91 EnsureEEStarted(tagCOINITEE) + 273\n7   libcoreclr.dylib                0x000000010d9a3045 CorHost2::Start() + 133\n8   libcoreclr.dylib                0x000000010d8da52d coreclr_initialize + 557\n9   libhostpolicy.dylib             0x000000010d8538b9 run(arguments_t const&) + 4585\n10  libhostpolicy.dylib             0x000000010d854ba5 corehost_main + 341\n11  libhostfxr.dylib                0x000000010d80e829 execute_app(std::__1::basic_string, std::__1::allocator > const&, corehost_init_t*, int, char const**) + 153\n12  libhostfxr.dylib                0x000000010d815a2d fx_muxer_t::read_config_and_execute(std::__1::basic_string, std::__1::allocator > const&, std::__1::basic_string, std::__1::allocator > const&, std::__1::unordered_map, std::__1::allocator >, std::__1::vector, std::__1::allocator >, std::__1::allocator, std::__1::allocator > > >, std::__1::hash, std::__1::allocator > >, std::__1::equal_to, std::__1::allocator > >, std::__1::allocator, std::__1::allocator > const, std::__1::vector, std::__1::allocator >, std::__1::allocator, std::__1::allocator > > > > > > const&, int, char const**, host_mode_t) + 2205\n13  libhostfxr.dylib                0x000000010d814bfd fx_muxer_t::parse_args_and_execute(std::__1::basic_string, std::__1::allocator > const&, std::__1::basic_string, std::__1::allocator > const&, int, int, char const**, bool, host_mode_t, bool*) + 1437\n14  libhostfxr.dylib                0x000000010d81632c fx_muxer_t::execute(int, char const**) + 1340\n15  dotnet                          0x000000010d7b4350 run(int, char const**) + 480\n16  libdyld.dylib                   0x00007fff869d15c9 start + 1\n\nThread 1:\n0   libsystem_kernel.dylib          0x00007fff8f34f4de mach_msg_trap + 10\n1   libsystem_kernel.dylib          0x00007fff8f34e64f mach_msg + 55\n2   libcoreclr.dylib                0x000000010d8d6f2a MachMessage::Receive(unsigned int) + 74\n3   libcoreclr.dylib                0x000000010d8d5dd9 SEHExceptionThread(void*) + 105\n4   libsystem_pthread.dylib         0x00007fff8893305a _pthread_body + 131\n5   libsystem_pthread.dylib         0x00007fff88932fd7 _pthread_start + 176\n6   libsystem_pthread.dylib         0x00007fff889303ed thread_start + 13\n\nThread 2:\n0   libsystem_kernel.dylib          0x00007fff8f35521a kevent + 10\n1   libcoreclr.dylib                0x000000010d8cab13 CorUnix::CPalSynchronizationManager::WorkerThread(void*) + 147\n2   libcoreclr.dylib                0x000000010d8d3718 CorUnix::CPalThread::ThreadEntry(void*) + 328\n3   libsystem_pthread.dylib         0x00007fff8893305a _pthread_body + 131\n4   libsystem_pthread.dylib         0x00007fff88932fd7 _pthread_start + 176\n5   libsystem_pthread.dylib         0x00007fff889303ed thread_start + 13\n\nThread 0 crashed with X86 Thread State (64-bit):\n  rax: 0x00007fff6e98d288  rbx: 0x00007fc350650860  rcx: 0x0000000000000000  rdx: 0x0000000000000000\n  rdi: 0x00007fff6e98d3f0  rsi: 0x0000000000000000  rbp: 0x00007fff5244e590  rsp: 0x00007fff5244e578\n   r8: 0x00007fff6e977b4c   r9: 0x00000000fffff800  r10: 0x00007fff5244e2f9  r11: 0x00007fff6e98d3f0\n  r12: 0x0000000000000000  r13: 0x0000000000000000  r14: 0x00007fff6e98d3f0  r15: 0x00007fff5244ed38\n  rip: 0x00007fff6e955075  rfl: 0x0000000000000246  cr2: 0x000000010d8cb3c0\n\nLogical CPU:     0\nError Code:      0x00000000\nTrap Number:     3\n\n\nBinary Images:\n       0x10d7b0000 -        0x10d7b9fff +dotnet (0) <4ED57628-C44C-3723-B98E-7AE9413663A0> /usr/local/share/dotnet/dotnet\n       0x10d7f5000 -        0x10d81fff3 +libhostfxr.dylib (0)  /usr/local/share/dotnet/host/fxr/2.0.0-preview1-002111-00/libhostfxr.dylib\n       0x10d83c000 -        0x10d86aff3 +libhostpolicy.dylib (0) <84E3AEB9-0007-3AEC-8D86-A984DD6E08C4> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.0-preview1-002111-00/libhostpolicy.dylib\n       0x10d88a000 -        0x10dda9fff +libcoreclr.dylib (0)  /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.0-preview1-002111-00/libcoreclr.dylib\n    0x7fff6e954000 -     0x7fff6e98a92f  dyld (353.2.4) <708E385E-50C6-32A3-983C-42E97BEE4346> /usr/lib/dyld\n    0x7fff8499a000 -     0x7fff849a3ff3  com.apple.CommonAuth (4.0 - 2.0) <9A484EE6-0003-3AB1-AE4F-AA543BBBF53F> /System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth\n    0x7fff849a7000 -     0x7fff849b2fff  libGL.dylib (11.1.6) <38B3FF9A-5660-3080-9DB8-1CAE0E8CD739> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib\n    0x7fff849b3000 -     0x7fff849ffff7  libcups.2.dylib (408.2)  /usr/lib/libcups.2.dylib\n    0x7fff84a00000 -     0x7fff84a08fff  libsystem_platform.dylib (63) <64E34079-D712-3D66-9CE2-418624A5C040> /usr/lib/system/libsystem_platform.dylib\n    0x7fff84a2a000 -     0x7fff84a70ff7  libFontRegistry.dylib (134.1)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib\n    0x7fff84a71000 -     0x7fff84da2fff  com.apple.Foundation (6.9 - 1154) <49EE64E1-9F53-35D1-A481-2EFE2789B254> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation\n    0x7fff84da3000 -     0x7fff84da6fff  com.apple.IOSurface (97.4 - 97.4)  /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface\n    0x7fff84de1000 -     0x7fff84e50fff  com.apple.SearchKit (1.4.0 - 1.4.0) <80883BD1-C9BA-3794-A20E-476F94DD89A9> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit\n    0x7fff85121000 -     0x7fff85121fff  com.apple.ApplicationServices (48 - 48) <5BF7910B-C328-3BF8-BA4F-CE52B574CE01> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices\n    0x7fff85122000 -     0x7fff85129ff7  libcompiler_rt.dylib (35)  /usr/lib/system/libcompiler_rt.dylib\n    0x7fff85380000 -     0x7fff853c6ff7  libauto.dylib (186)  /usr/lib/libauto.dylib\n    0x7fff85862000 -     0x7fff8586efff  com.apple.speech.synthesis.framework (5.3.11 - 5.3.11)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis\n    0x7fff85911000 -     0x7fff85921ff7  libbsm.0.dylib (34)  /usr/lib/libbsm.0.dylib\n    0x7fff8592f000 -     0x7fff85a20fff  libJP2.dylib (1247)  /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib\n    0x7fff85a21000 -     0x7fff85a95ffb  com.apple.securityfoundation (6.0 - 55126) <344401F5-4016-3AEB-BFDC-CE8E5546D39F> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation\n    0x7fff85a96000 -     0x7fff85ac3fff  com.apple.CoreVideo (1.8 - 145.1) <18DB07E0-B927-3260-A234-636F298D1917> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo\n    0x7fff85e09000 -     0x7fff85e1aff3  libsystem_coretls.dylib (35.40.1) <155DA0A9-2046-332E-BFA3-D7974A51F731> /usr/lib/system/libsystem_coretls.dylib\n    0x7fff85e1b000 -     0x7fff85e25ff7  com.apple.NetAuth (5.2 - 5.2) <2BBD749A-8E18-35B8-8E48-A90347C1CCA7> /System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth\n    0x7fff85e27000 -     0x7fff85e52ffb  libarchive.2.dylib (30.50.1)  /usr/lib/libarchive.2.dylib\n    0x7fff85eb6000 -     0x7fff85eb7fff  libDiagnosticMessagesClient.dylib (100) <2EE8E436-5CDC-34C5-9959-5BA218D507FB> /usr/lib/libDiagnosticMessagesClient.dylib\n    0x7fff85eb8000 -     0x7fff85ee2ff7  libdispatch.dylib (442.50.1)  /usr/lib/system/libdispatch.dylib\n    0x7fff85ee3000 -     0x7fff85efdff7  com.apple.Kerberos (3.0 - 1) <7760E0C2-A222-3709-B2A6-B692D900CEB1> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos\n    0x7fff860c2000 -     0x7fff86161e27  com.apple.AppleJPEG (1.0 - 1) <6627DDD9-A8FE-3968-B23A-B6A29AA3919A> /System/Library/PrivateFrameworks/AppleJPEG.framework/Versions/A/AppleJPEG\n    0x7fff86177000 -     0x7fff8637146f  libobjc.A.dylib (647) <759E155D-BC42-3D4E-869B-6F57D477177C> /usr/lib/libobjc.A.dylib\n    0x7fff8690f000 -     0x7fff869a4ff7  com.apple.ColorSync (4.9.0 - 4.9.0) <9150C2B7-2E6E-3509-96EA-7B3F959F049E> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/ColorSync\n    0x7fff869bc000 -     0x7fff869befff  libsystem_configuration.dylib (699.40.2) <56F94DCE-DBDE-3615-8F07-DE6270D9F8BE> /usr/lib/system/libsystem_configuration.dylib\n    0x7fff869c0000 -     0x7fff869c4fff  com.apple.TCC (1.0 - 1)  /System/Library/PrivateFrameworks/TCC.framework/Versions/A/TCC\n    0x7fff869ce000 -     0x7fff869d1ff7  libdyld.dylib (353.2.4) <224F35C5-6E35-3EC4-A97C-80949CE444E7> /usr/lib/system/libdyld.dylib\n    0x7fff869d2000 -     0x7fff86ac4ff7  libiconv.2.dylib (42) <2A06D02F-8B76-3864-8D96-64EF5B40BC6C> /usr/lib/libiconv.2.dylib\n    0x7fff86ac5000 -     0x7fff86b12ff7  com.apple.print.framework.PrintCore (10.3 - 451.1)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore\n    0x7fff86b13000 -     0x7fff86b8bff7  com.apple.SystemConfiguration (1.14.4 - 1.14) <3DFFD7F7-BD23-3F4C-A209-C4A0D99F6573> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration\n    0x7fff86b9b000 -     0x7fff86becfff  com.apple.audio.CoreAudio (4.3.0 - 4.3.0) <8E6AE326-9F3E-3182-BD9E-FDF561211E2E> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio\n    0x7fff86bed000 -     0x7fff86c04ff7  libLinearAlgebra.dylib (1128)  /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLinearAlgebra.dylib\n    0x7fff86c63000 -     0x7fff86ce1fff  com.apple.CoreServices.OSServices (640.4 - 640.4) <9D175CD9-B27F-3529-8269-66D8AA83582E> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices\n    0x7fff86ce6000 -     0x7fff86cebfff  libsystem_stats.dylib (163.30.2)  /usr/lib/system/libsystem_stats.dylib\n    0x7fff86cec000 -     0x7fff86d11fff  libPng.dylib (1247) <1E8B06AA-1DC5-3845-88D9-B2F8E6E1E540> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib\n    0x7fff86e27000 -     0x7fff86e7bfff  libc++.1.dylib (120) <1B9530FD-989B-3174-BB1C-BDC159501710> /usr/lib/libc++.1.dylib\n    0x7fff87880000 -     0x7fff879c6fef  libsqlite3.dylib (168.2) <53F6A294-15D7-3804-9ABF-47D35E15CDFB> /usr/lib/libsqlite3.dylib\n    0x7fff879c7000 -     0x7fff879d4fff  libxar.1.dylib (255) <7CD69BB5-97BA-3858-8A8B-2F33F129E6E7> /usr/lib/libxar.1.dylib\n    0x7fff879d5000 -     0x7fff879f0fff  com.apple.AppleVPAFramework (1.4.5 - 1.4.5)  /System/Library/PrivateFrameworks/AppleVPA.framework/Versions/A/AppleVPA\n    0x7fff879f1000 -     0x7fff879f1fff  libOpenScriptingUtil.dylib (162.2)  /usr/lib/libOpenScriptingUtil.dylib\n    0x7fff87be0000 -     0x7fff87cd2ff7  libxml2.2.dylib (26.12) <769FD755-D24A-3A7C-ABEE-9A82BB1196D0> /usr/lib/libxml2.2.dylib\n    0x7fff87ea0000 -     0x7fff87ebaff7  libextension.dylib (55.2) <3BB019CA-199A-36AC-AA22-14B562138545> /usr/lib/libextension.dylib\n    0x7fff87ebb000 -     0x7fff87ec7ff7  com.apple.OpenDirectory (10.10 - 187) <22FF4721-03D8-381B-AA83-2B07D690C777> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory\n    0x7fff8817d000 -     0x7fff88180fff  com.apple.xpc.ServiceManagement (1.0 - 1)  /System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement\n    0x7fff883d2000 -     0x7fff883efffb  libresolv.9.dylib (57) <26B38E61-298A-3C3A-82C1-3B5E98AD5E29> /usr/lib/libresolv.9.dylib\n    0x7fff883f0000 -     0x7fff88723ff7  libmecabra.dylib (666.7) <0ED8AE5E-7A5B-34A6-A2EE-2B852E60E1E2> /usr/lib/libmecabra.dylib\n    0x7fff8885d000 -     0x7fff88881fef  libJPEG.dylib (1247) <78AA0479-176D-3C69-ADFB-4609A4A676FF> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib\n    0x7fff8892f000 -     0x7fff88938fff  libsystem_pthread.dylib (105.40.1)  /usr/lib/system/libsystem_pthread.dylib\n    0x7fff88c93000 -     0x7fff88c9cff7  libsystem_notify.dylib (133.1.1) <61147800-F320-3DAA-850C-BADF33855F29> /usr/lib/system/libsystem_notify.dylib\n    0x7fff88d59000 -     0x7fff88d73ff7  liblzma.5.dylib (7) <1D03E875-A7C0-3028-814C-3C27F7B7C079> /usr/lib/liblzma.5.dylib\n    0x7fff88d74000 -     0x7fff88dceff7  com.apple.LanguageModeling (1.0 - 1)  /System/Library/PrivateFrameworks/LanguageModeling.framework/Versions/A/LanguageModeling\n    0x7fff88dd8000 -     0x7fff8904efff  com.apple.security (7.0 - 57031.40.8)  /System/Library/Frameworks/Security.framework/Versions/A/Security\n    0x7fff8904f000 -     0x7fff8907aff7  com.apple.DictionaryServices (1.2 - 229.1) <62EC3E1B-5A28-3252-90FF-C2E9999C2A2A> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices\n    0x7fff8907b000 -     0x7fff89488ff7  libLAPACK.dylib (1128)  /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib\n    0x7fff8948a000 -     0x7fff8948fff7  libmacho.dylib (862) <126CA2ED-DE91-308F-8881-B9DAEC3C63B6> /usr/lib/system/libmacho.dylib\n    0x7fff8965e000 -     0x7fff89660fff  libsystem_sandbox.dylib (358.20.5) <3F5E973F-C702-31AC-97BC-05F5C195683C> /usr/lib/system/libsystem_sandbox.dylib\n    0x7fff89661000 -     0x7fff89665fff  libcache.dylib (69) <45E9A2E7-99C4-36B2-BEE3-0C4E11614AD1> /usr/lib/system/libcache.dylib\n    0x7fff8a0da000 -     0x7fff8a0e0ff7  libsystem_networkextension.dylib (167.40.3)  /usr/lib/system/libsystem_networkextension.dylib\n    0x7fff8a0e1000 -     0x7fff8a111ff3  com.apple.GSS (4.0 - 2.0) <97F2A028-44CF-3188-B863-F4EEB39CBDBD> /System/Library/Frameworks/GSS.framework/Versions/A/GSS\n    0x7fff8a16e000 -     0x7fff8a353ff7  libicucore.A.dylib (531.50)  /usr/lib/libicucore.A.dylib\n    0x7fff8a65a000 -     0x7fff8a65efff  libpam.2.dylib (20)  /usr/lib/libpam.2.dylib\n    0x7fff8a6b9000 -     0x7fff8a6bafff  libsystem_secinit.dylib (18) <581DAD0F-6B63-3A48-B63B-917AF799ABAA> /usr/lib/system/libsystem_secinit.dylib\n    0x7fff8a6bb000 -     0x7fff8a6c1fff  libsystem_trace.dylib (72.20.1) <840F5301-B55A-3078-90B9-FEFFD6CD741A> /usr/lib/system/libsystem_trace.dylib\n    0x7fff8a6c6000 -     0x7fff8a6d1ff7  libkxld.dylib (2782.50.9)  /usr/lib/system/libkxld.dylib\n    0x7fff8a6de000 -     0x7fff8a819fff  com.apple.ImageIO.framework (3.3.0 - 1247)  /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\n    0x7fff8ab25000 -     0x7fff8ab2afff  com.apple.DiskArbitration (2.6 - 2.6) <0DFF4D9B-2AC3-3B82-B5C5-30F4EFBD2DB9> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration\n    0x7fff8ab78000 -     0x7fff8ac6cff7  libFontParser.dylib (134.10) <6CF434A2-91CA-3477-BDE2-124508EDA05D> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib\n    0x7fff8ac6d000 -     0x7fff8ac6dff7  libunc.dylib (29) <5676F7EA-C1DF-329F-B006-D2C3022B7D70> /usr/lib/system/libunc.dylib\n    0x7fff8b20f000 -     0x7fff8b213fff  libCoreVMClient.dylib (79.1) <201EF6DF-5074-3CB7-A361-398CF957A264> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib\n    0x7fff8b26f000 -     0x7fff8b2a7fff  libsystem_network.dylib (412.20.3) <6105C134-6722-3C0A-A4CE-5E1261E2E1CC> /usr/lib/system/libsystem_network.dylib\n    0x7fff8b2a8000 -     0x7fff8b2c1ff7  com.apple.CFOpenDirectory (10.10 - 187)  /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory\n    0x7fff8b2c2000 -     0x7fff8b2c3ff3  libSystem.B.dylib (1213) <4B24B5BE-45F2-355A-9A35-D438A516D140> /usr/lib/libSystem.B.dylib\n    0x7fff8b2c4000 -     0x7fff8b2fffff  com.apple.QD (301 - 301)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD\n    0x7fff8b300000 -     0x7fff8b3affe7  libvMisc.dylib (516) <6739E390-46E7-3BFA-9B69-B278562326E6> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib\n    0x7fff8b57a000 -     0x7fff8b57cfff  com.apple.loginsupport (1.0 - 1)  /System/Library/PrivateFrameworks/login.framework/Versions/A/Frameworks/loginsupport.framework/Versions/A/loginsupport\n    0x7fff8b57d000 -     0x7fff8b598ff7  libCRFSuite.dylib (34)  /usr/lib/libCRFSuite.dylib\n    0x7fff8b599000 -     0x7fff8b5c1fff  libxpc.dylib (559.40.1) <5C829202-962E-3744-8B50-00D38CC88E84> /usr/lib/system/libxpc.dylib\n    0x7fff8b611000 -     0x7fff8b615ff7  libGIF.dylib (1247) <5EA6D19A-9922-39F6-82DB-DE7A5B8860CF> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib\n    0x7fff8b616000 -     0x7fff8b67dffb  com.apple.datadetectorscore (6.0 - 396.1.2)  /System/Library/PrivateFrameworks/DataDetectorsCore.framework/Versions/A/DataDetectorsCore\n    0x7fff8b80c000 -     0x7fff8b81aff7  com.apple.opengl (11.1.6 - 11.1.6)  /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL\n    0x7fff8b99b000 -     0x7fff8bd33ff7  com.apple.CoreFoundation (6.9 - 1153.18) <5C0892B8-9691-341F-9279-CA3A74D59AA0> /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\n    0x7fff8be35000 -     0x7fff8be35fff  com.apple.Accelerate.vecLib (3.10 - vecLib 3.10) <9D749502-A228-3BF1-B52F-A182DEEB2C4D> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib\n    0x7fff8be43000 -     0x7fff8be9efe7  libTIFF.dylib (1247) <43CB4BDE-84FD-3CCE-96C0-FB33BA2753BD> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib\n    0x7fff8bea1000 -     0x7fff8bfc5ff7  com.apple.LaunchServices (644.56 - 644.56) <20AABB1C-9319-3E4D-A024-51B0DD5FCD3B> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices\n    0x7fff8c05d000 -     0x7fff8c0fbfff  com.apple.Metadata (10.7.0 - 917.36) <00C4CB5D-E723-3612-84E0-439098392CDD> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata\n    0x7fff8c0fc000 -     0x7fff8c11cff7  com.apple.MultitouchSupport.framework (264.6 - 264.6) <1539F1F6-6334-37F3-9C52-02EFFBF4835D> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport\n    0x7fff8c219000 -     0x7fff8c235ff7  libsystem_malloc.dylib (53.30.1)  /usr/lib/system/libsystem_malloc.dylib\n    0x7fff8c5a3000 -     0x7fff8c5a3ff7  libkeymgr.dylib (28) <77845842-DE70-3CC5-BD01-C3D14227CED5> /usr/lib/system/libkeymgr.dylib\n    0x7fff8c5a4000 -     0x7fff8c5eefff  com.apple.HIServices (1.22 - 523) <99ADA325-53C8-368E-A5FA-3F913CD2245A> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices\n    0x7fff8c61c000 -     0x7fff8c621ffb  libheimdal-asn1.dylib (398.40.1) <7D2BE3DE-60F7-3A6E-A92E-DA0EF9D3417E> /usr/lib/libheimdal-asn1.dylib\n    0x7fff8c6a7000 -     0x7fff8c6a7ff7  liblaunch.dylib (559.40.1) <4F81CA3A-D2CE-3030-A89D-42F3DAD7BA8F> /usr/lib/system/liblaunch.dylib\n    0x7fff8cdb1000 -     0x7fff8cdc2fff  libcmph.dylib (1) <46EC3997-DB5E-38AE-BBBB-A035A54AD3C0> /usr/lib/libcmph.dylib\n    0x7fff8cdc3000 -     0x7fff8cdc4ff7  libsystem_blocks.dylib (65) <9615D10A-FCA7-3BE4-AA1A-1B195DACE1A1> /usr/lib/system/libsystem_blocks.dylib\n    0x7fff8cdc5000 -     0x7fff8ce51fef  libsystem_c.dylib (1044.40.3) <2E673D96-E334-37D2-833A-E57383BBA377> /usr/lib/system/libsystem_c.dylib\n    0x7fff8ce53000 -     0x7fff8ce64ff7  libz.1.dylib (55) <88C7C7DE-04B8-316F-8B74-ACD9F3DE1AA1> /usr/lib/libz.1.dylib\n    0x7fff8ce65000 -     0x7fff8ced7fff  com.apple.framework.IOKit (2.0.2 - 1050.20.2) <09C0518C-90DF-3FC3-96D6-34D35F72C8EF> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n    0x7fff8cefc000 -     0x7fff8cf25ff3  libxslt.1.dylib (13.12) <19B2D915-DC29-3F79-9756-D7EB9051FEFF> /usr/lib/libxslt.1.dylib\n    0x7fff8cf3b000 -     0x7fff8cf3cfff  liblangid.dylib (117)  /usr/lib/liblangid.dylib\n    0x7fff8cf3d000 -     0x7fff8cf3effb  libremovefile.dylib (35) <3485B5F4-6CE8-3C62-8DFD-8736ED6E8531> /usr/lib/system/libremovefile.dylib\n    0x7fff8cfa5000 -     0x7fff8cfadfff  libsystem_dnssd.dylib (576.50.2) <9EC5AF92-D0D2-3BDE-92B6-D3730D3865C8> /usr/lib/system/libsystem_dnssd.dylib\n    0x7fff8cfe7000 -     0x7fff8cfe7fff  com.apple.Accelerate (1.10 - Accelerate 1.10) <2C8AF258-4F11-3BEC-A826-22D7199B3975> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate\n    0x7fff8cfe8000 -     0x7fff8d018fff  libsystem_m.dylib (3086.1) <1E12AB45-6D96-36D0-A226-F24D9FB0D9D6> /usr/lib/system/libsystem_m.dylib\n    0x7fff8e47b000 -     0x7fff8e482fff  com.apple.NetFS (6.0 - 4.0)  /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS\n    0x7fff8e483000 -     0x7fff8e4abfff  libsystem_info.dylib (459.40.1) <2E16C4B3-A327-3957-9C41-143911979A1E> /usr/lib/system/libsystem_info.dylib\n    0x7fff8f0ac000 -     0x7fff8f0b4ffb  libcopyfile.dylib (118.1.2) <0C68D3A6-ACDD-3EF3-991A-CC82C32AB836> /usr/lib/system/libcopyfile.dylib\n    0x7fff8f33e000 -     0x7fff8f35bfff  libsystem_kernel.dylib (2782.50.9)  /usr/lib/system/libsystem_kernel.dylib\n    0x7fff8f585000 -     0x7fff8f5fefe7  libcorecrypto.dylib (233.30.1) <5779FFA0-4D9A-3AD4-B7F2-618227621DC8> /usr/lib/system/libcorecrypto.dylib\n    0x7fff8f602000 -     0x7fff8f602fff  com.apple.CoreServices (62 - 62)  /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices\n    0x7fff8fcbe000 -     0x7fff8fce9fff  libc++abi.dylib (125) <88A22A0F-87C6-3002-BFBA-AC0F2808B8B9> /usr/lib/libc++abi.dylib\n    0x7fff90353000 -     0x7fff9035efff  libcommonCrypto.dylib (60061.30.1)  /usr/lib/system/libcommonCrypto.dylib\n    0x7fff907d6000 -     0x7fff90817fff  libGLU.dylib (11.1.6) <4BC6579D-A6D0-3A19-880E-E29FAEA698E7> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib\n    0x7fff90aa3000 -     0x7fff90b11ff3  com.apple.Heimdal (4.0 - 2.0) <8D1667CF-D454-3E07-A58E-E15591B5A95E> /System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal\n    0x7fff90c03000 -     0x7fff90c74ffb  com.apple.ApplicationServices.ATS (360 - 375.4) <888FE0B1-835C-30B1-80AD-5066CADB0364> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS\n    0x7fff90d23000 -     0x7fff91567ff7  com.apple.CoreGraphics (1.600.0 - 788.3.6) <3C5D7B35-2EB7-3907-A6B1-9186BDEA2CC8> /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics\n    0x7fff91eb1000 -     0x7fff92130ff7  com.apple.CoreData (111 - 526.3) <5A27E0D8-5E5A-335B-B3F6-2601C7B976FA> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData\n    0x7fff92131000 -     0x7fff92171ff7  libGLImage.dylib (11.1.6)  /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib\n    0x7fff92258000 -     0x7fff9226eff7  libsystem_asl.dylib (267)  /usr/lib/system/libsystem_asl.dylib\n    0x7fff92368000 -     0x7fff92371fff  libGFXShared.dylib (11.1.6)  /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib\n    0x7fff92421000 -     0x7fff9242eff7  libbz2.1.0.dylib (36) <2DF83FBC-5C08-39E1-94F5-C28653791B5F> /usr/lib/libbz2.1.0.dylib\n    0x7fff92bf1000 -     0x7fff92f0cfcf  com.apple.vImage (8.0 - 8.0) <1183FE6A-FDB6-3B3B-928D-50C7909F2308> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage\n    0x7fff9300c000 -     0x7fff93125ffb  com.apple.CoreText (454.11 - 454.11) <7E5228C8-8657-3B6C-B3A4-98B79A3041EA> /System/Library/Frameworks/CoreText.framework/Versions/A/CoreText\n    0x7fff93126000 -     0x7fff93336ff7  com.apple.CFNetwork (720.5.7 - 720.5.7)  /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork\n    0x7fff93410000 -     0x7fff9346ffff  com.apple.AE (681.5 - 681.7) <2BF39455-1CDD-392C-824A-9972C6B1FB57> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE\n    0x7fff9366d000 -     0x7fff93672ff7  libunwind.dylib (35.3)  /usr/lib/system/libunwind.dylib\n    0x7fff93c04000 -     0x7fff93eebffb  com.apple.CoreServices.CarbonCore (1108.6 - 1108.6) <8953580E-7857-33B2-AA64-98296830D3A8> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore\n    0x7fff93eec000 -     0x7fff93ffeff7  libvDSP.dylib (516) <151B3CCB-77D3-3715-A3D0-7C74CD5C7FFC> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib\n    0x7fff94006000 -     0x7fff94008ff7  libsystem_coreservices.dylib (9) <41B7C578-5A53-31C8-A96F-C73E030B0938> /usr/lib/system/libsystem_coreservices.dylib\n    0x7fff9403a000 -     0x7fff94049fff  com.apple.LangAnalysis (1.7.0 - 1.7.0)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis\n    0x7fff9406f000 -     0x7fff94077ff3  com.apple.CoreServices.FSEvents (1210.20.1 - 1210.20.1) <84F79D3E-7B5E-3C93-8479-35794A3F125E> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/FSEvents\n    0x7fff94177000 -     0x7fff94179fff  libCVMSPluginSupport.dylib (11.1.6)  /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCVMSPluginSupport.dylib\n    0x7fff94198000 -     0x7fff942ffffb  com.apple.audio.toolbox.AudioToolbox (1.12 - 1.12) <5678FC94-456A-3F5F-BA9A-10EB6E462997> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox\n    0x7fff9432d000 -     0x7fff9432ffff  libquarantine.dylib (76.20.1) <7AF90041-2768-378A-925A-D83161863642> /usr/lib/system/libquarantine.dylib\n    0x7fff94330000 -     0x7fff94332fff  libRadiance.dylib (1247) <0028A2E3-7928-3479-9BF7-CB64234F85AF> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib\n    0x7fff94333000 -     0x7fff944c1fff  libBLAS.dylib (1128) <497912C1-A98E-3281-BED7-E9C751552F61> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib\n\nExternal Modification Summary:\n  Calls made by other processes targeting this process:\n    task_for_pid: 0\n    thread_create: 0\n    thread_set_state: 0\n  Calls made by this process:\n    task_for_pid: 0\n    thread_create: 0\n    thread_set_state: 0\n  Calls made by all processes on this machine:\n    task_for_pid: 147919\n    thread_create: 0\n    thread_set_state: 0\n\nVM Region Summary:\nReadOnly portion of Libraries: Total=146.3M resident=116.2M(79%) swapped_out_or_unallocated=30.1M(21%)\nWritable regions: Total=46.2M written=1312K(3%) resident=2216K(5%) swapped_out=0K(0%) unallocated=44.1M(95%)\n\nREGION TYPE                      VIRTUAL\n===========                      =======\nKernel Alloc Once                     4K\nMALLOC                             36.3M\nMALLOC (admin)                       32K\nSTACK GUARD                        56.0M\nStack                              9232K\nVM_ALLOCATE                         1.9G\n__DATA                             6484K\n__LINKEDIT                         72.5M\n__TEXT                             73.8M\n__UNICODE                           552K\nshared memory                         4K\n===========                      =======\nTOTAL                               2.2G\n\nModel: MacBookPro11,4, BootROM MBP114.0172.B10, 4 processors, Intel Core i7, 2.2 GHz, 16 GB, SMC 2.29f23\nGraphics: Intel Iris Pro, Intel Iris Pro, Built-In\nMemory Module: BANK 0/DIMM0, 8 GB, DDR3, 1600 MHz, 0x80AD, 0x484D54343147533642465238412D50422020\nMemory Module: BANK 1/DIMM0, 8 GB, DDR3, 1600 MHz, 0x80AD, 0x484D54343147533642465238412D50422020\nAirPort: spairport_wireless_card_type_airport_extreme (0x14E4, 0x152), Broadcom BCM43xx 1.0 (7.15.166.24.3)\nBluetooth: Version 4.3.6f4 17916, 3 services, 27 devices, 1 incoming serial ports\nNetwork Service: Wi-Fi, AirPort, en0\nSerial ATA Device: APPLE SSD SM0256G, 251 GB\nUSB Device: Internal Memory Card Reader\nUSB Device: Bluetooth USB Host Controller\nUSB Device: Apple Internal Keyboard / Trackpad\nThunderbolt Bus: MacBook Pro, Apple Inc., 27.1\n\n```\n\n. Hi, I updated to 10.10.5 and I get:\n\n```\nProcess:               dotnet [7276]\nPath:                  /usr/local/share/dotnet/dotnet\nIdentifier:            dotnet\nVersion:               0\nCode Type:             X86-64 (Native)\nParent Process:        zsh [7274]\nUser ID:               501\nDate/Time:             2017-05-13 16:37:27.438 -0700\nOS Version:            Mac OS X 10.10.5 (14F2315)\nReport Version:        11\nAnonymous UUID:        16C4099C-F1DE-BEC7-DBE6-92EFF1E2FC85\nSleep/Wake UUID:       5C368E69-4F9E-4CE9-97FF-9CE427D877B8\nTime Awake Since Boot: 22000 seconds\nTime Since Wake:       200 seconds\nCrashed Thread:        0  Dispatch queue: com.apple.main-thread\nException Type:        EXC_BREAKPOINT (SIGTRAP)\nException Codes:       0x0000000000000002, 0x0000000000000000\nDyld Error Message:\n  Symbol not found: _clock_gettime\n  Referenced from: /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.0-preview1-002111-00/libcoreclr.dylib (which was built for Mac OS X 10.12)\n  Expected in: /usr/lib/libSystem.B.dylib\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\n0   dyld                            0x00007fff643b0075 dyld_fatal_error + 1\n1   dyld                            0x00007fff643b32a8 dyld::fastBindLazySymbol(ImageLoader, unsigned long) + 180\n2   libdyld.dylib                   0x00007fff8b6093ba dyld_stub_binder + 282\n3   ???                             0x00000001074fd008 0 + 4417638408\n4   libcoreclr.dylib                0x00000001071e957d EEStartupHelper(tagCOINITEE) + 333\n5   libcoreclr.dylib                0x00000001071e8f15 EEStartup(tagCOINITEE) + 325\n6   libcoreclr.dylib                0x00000001071e8d91 EnsureEEStarted(tagCOINITEE) + 273\n7   libcoreclr.dylib                0x00000001070f6045 CorHost2::Start() + 133\n8   libcoreclr.dylib                0x000000010702d52d coreclr_initialize + 557\n9   libhostpolicy.dylib             0x0000000106fa68b9 run(arguments_t const&) + 4585\n10  libhostpolicy.dylib             0x0000000106fa7ba5 corehost_main + 341\n11  libhostfxr.dylib                0x0000000106f61829 execute_app(std::__1::basic_string, std::__1::allocator > const&, corehost_init_t*, int, char const) + 153\n12  libhostfxr.dylib                0x0000000106f68a2d fx_muxer_t::read_config_and_execute(std::__1::basic_string, std::__1::allocator > const&, std::__1::basic_string, std::__1::allocator > const&, std::__1::unordered_map, std::__1::allocator >, std::__1::vector, std::__1::allocator >, std::__1::allocator, std::__1::allocator > > >, std::__1::hash, std::__1::allocator > >, std::__1::equal_to, std::__1::allocator > >, std::__1::allocator, std::__1::allocator > const, std::__1::vector, std::__1::allocator >, std::__1::allocator, std::__1::allocator > > > > > > const&, int, char const, host_mode_t) + 2205\n13  libhostfxr.dylib                0x0000000106f67bfd fx_muxer_t::parse_args_and_execute(std::__1::basic_string, std::__1::allocator > const&, std::__1::basic_string, std::__1::allocator > const&, int, int, char const, bool, host_mode_t, bool*) + 1437\n14  libhostfxr.dylib                0x0000000106f6932c fx_muxer_t::execute(int, char const) + 1340\n15  dotnet                          0x0000000106f07350 run(int, char const) + 480\n16  libdyld.dylib                   0x00007fff8b60b5c9 start + 1\nThread 1:\n0   libsystem_kernel.dylib          0x00007fff8c6e94de mach_msg_trap + 10\n1   libsystem_kernel.dylib          0x00007fff8c6e864f mach_msg + 55\n2   libcoreclr.dylib                0x0000000107029f2a MachMessage::Receive(unsigned int) + 74\n3   libcoreclr.dylib                0x0000000107028dd9 SEHExceptionThread(void*) + 105\n4   libsystem_pthread.dylib         0x00007fff85a2a05a _pthread_body + 131\n5   libsystem_pthread.dylib         0x00007fff85a29fd7 _pthread_start + 176\n6   libsystem_pthread.dylib         0x00007fff85a273ed thread_start + 13\nThread 2:\n0   libsystem_kernel.dylib          0x00007fff8c6ef21a kevent + 10\n1   libcoreclr.dylib                0x000000010701db13 CorUnix::CPalSynchronizationManager::WorkerThread(void) + 147\n2   libcoreclr.dylib                0x0000000107026718 CorUnix::CPalThread::ThreadEntry(void) + 328\n3   libsystem_pthread.dylib         0x00007fff85a2a05a _pthread_body + 131\n4   libsystem_pthread.dylib         0x00007fff85a29fd7 _pthread_start + 176\n5   libsystem_pthread.dylib         0x00007fff85a273ed thread_start + 13\nThread 0 crashed with X86 Thread State (64-bit):\n  rax: 0x00007fff643e8288  rbx: 0x00007fd66870ae40  rcx: 0x0000000000000000  rdx: 0x0000000000000000\n  rdi: 0x00007fff643e83f0  rsi: 0x0000000000000000  rbp: 0x00007fff58cfb590  rsp: 0x00007fff58cfb578\n   r8: 0x00007fff643d2b4c   r9: 0x0000000000000000  r10: 0x00007fff58cfb2f9  r11: 0x00007fff643e83f0\n  r12: 0x0000000000000000  r13: 0x0000000000000000  r14: 0x00007fff643e83f0  r15: 0x00007fff58cfbd38\n  rip: 0x00007fff643b0075  rfl: 0x0000000000000246  cr2: 0x000000010701e3c0\nLogical CPU:     0\nError Code:      0x00000000\nTrap Number:     3\nBinary Images:\n       0x106f03000 -        0x106f0cfff +dotnet (0) <4ED57628-C44C-3723-B98E-7AE9413663A0> /usr/local/share/dotnet/dotnet\n       0x106f48000 -        0x106f72ff3 +libhostfxr.dylib (0)  /usr/local/share/dotnet/host/fxr/2.0.0-preview1-002111-00/libhostfxr.dylib\n       0x106f8f000 -        0x106fbdff3 +libhostpolicy.dylib (0) <84E3AEB9-0007-3AEC-8D86-A984DD6E08C4> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.0-preview1-002111-00/libhostpolicy.dylib\n       0x106fdd000 -        0x1074fcfff +libcoreclr.dylib (0)  /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.0-preview1-002111-00/libcoreclr.dylib\n    0x7fff643af000 -     0x7fff643e592f  dyld (353.2.4)  /usr/lib/dyld\n    0x7fff845c9000 -     0x7fff845c9fff  com.apple.Accelerate.vecLib (3.10 - vecLib 3.10) <9D749502-A228-3BF1-B52F-A182DEEB2C4D> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib\n    0x7fff846b5000 -     0x7fff846c0ff7  libkxld.dylib (2782.50.9.1.1) <7248E539-9FBA-39E9-8BD1-DBE0F34889D3> /usr/lib/system/libkxld.dylib\n    0x7fff8471c000 -     0x7fff84737fff  com.apple.AppleVPAFramework (1.4.5 - 1.4.5)  /System/Library/PrivateFrameworks/AppleVPA.framework/Versions/A/AppleVPA\n    0x7fff84738000 -     0x7fff8473cfff  libCoreVMClient.dylib (79.1) <201EF6DF-5074-3CB7-A361-398CF957A264> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib\n    0x7fff84b0d000 -     0x7fff84b15fff  libsystem_platform.dylib (63) <64E34079-D712-3D66-9CE2-418624A5C040> /usr/lib/system/libsystem_platform.dylib\n    0x7fff84b16000 -     0x7fff84b1bff7  libmacho.dylib (862) <126CA2ED-DE91-308F-8881-B9DAEC3C63B6> /usr/lib/system/libmacho.dylib\n    0x7fff84b1c000 -     0x7fff84bbafff  com.apple.Metadata (10.7.0 - 917.36) <00C4CB5D-E723-3612-84E0-439098392CDD> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata\n    0x7fff84c1d000 -     0x7fff84c20fff  com.apple.IOSurface (97.4 - 97.4)  /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface\n    0x7fff84c21000 -     0x7fff84f52fff  com.apple.Foundation (6.9 - 1154) <49EE64E1-9F53-35D1-A481-2EFE2789B254> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation\n    0x7fff84f53000 -     0x7fff84fa0ff7  com.apple.print.framework.PrintCore (10.3 - 451.1)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore\n    0x7fff84fa1000 -     0x7fff850b3ff7  libvDSP.dylib (516) <151B3CCB-77D3-3715-A3D0-7C74CD5C7FFC> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib\n    0x7fff850b4000 -     0x7fff852ae46f  libobjc.A.dylib (647) <759E155D-BC42-3D4E-869B-6F57D477177C> /usr/lib/libobjc.A.dylib\n    0x7fff8534d000 -     0x7fff8538dff7  libGLImage.dylib (11.1.6)  /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib\n    0x7fff853a3000 -     0x7fff853acfff  libGFXShared.dylib (11.1.6)  /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib\n    0x7fff854bb000 -     0x7fff854bfff7  libGIF.dylib (1248) <6102CFE3-029E-32DE-B954-93797A4EF5B0> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib\n    0x7fff855ed000 -     0x7fff855edfff  libOpenScriptingUtil.dylib (162.2)  /usr/lib/libOpenScriptingUtil.dylib\n    0x7fff855ee000 -     0x7fff855feff7  libbsm.0.dylib (34)  /usr/lib/libbsm.0.dylib\n    0x7fff8566e000 -     0x7fff8566efff  com.apple.CoreServices (62 - 62)  /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices\n    0x7fff85a26000 -     0x7fff85a2ffff  libsystem_pthread.dylib (105.40.1)  /usr/lib/system/libsystem_pthread.dylib\n    0x7fff85a30000 -     0x7fff85a34fff  libcache.dylib (69) <45E9A2E7-99C4-36B2-BEE3-0C4E11614AD1> /usr/lib/system/libcache.dylib\n    0x7fff85a35000 -     0x7fff85a35ff7  libkeymgr.dylib (28) <77845842-DE70-3CC5-BD01-C3D14227CED5> /usr/lib/system/libkeymgr.dylib\n    0x7fff85b30000 -     0x7fff85c49ffb  com.apple.CoreText (454.11 - 454.12)  /System/Library/Frameworks/CoreText.framework/Versions/A/CoreText\n    0x7fff85d62000 -     0x7fff85d8afff  libxpc.dylib (559.40.1) <5C829202-962E-3744-8B50-00D38CC88E84> /usr/lib/system/libxpc.dylib\n    0x7fff85e45000 -     0x7fff85ea0fe7  libTIFF.dylib (1248) <0530CBFE-09BF-3A37-B5AE-B1CF918A377E> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib\n    0x7fff85fa2000 -     0x7fff85fc2ff7  com.apple.MultitouchSupport.framework (264.6 - 264.6) <1539F1F6-6334-37F3-9C52-02EFFBF4835D> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport\n    0x7fff85fc3000 -     0x7fff85fc8ffb  libheimdal-asn1.dylib (398.40.1) <7D2BE3DE-60F7-3A6E-A92E-DA0EF9D3417E> /usr/lib/libheimdal-asn1.dylib\n    0x7fff863da000 -     0x7fff86420ff7  libauto.dylib (186)  /usr/lib/libauto.dylib\n    0x7fff86421000 -     0x7fff86423fff  libsystem_sandbox.dylib (358.20.5) <3F5E973F-C702-31AC-97BC-05F5C195683C> /usr/lib/system/libsystem_sandbox.dylib\n    0x7fff86ad7000 -     0x7fff86ae8ff7  libz.1.dylib (55) <88C7C7DE-04B8-316F-8B74-ACD9F3DE1AA1> /usr/lib/libz.1.dylib\n    0x7fff86ae9000 -     0x7fff86aebfff  libquarantine.dylib (76.20.1) <7AF90041-2768-378A-925A-D83161863642> /usr/lib/system/libquarantine.dylib\n    0x7fff86ca2000 -     0x7fff86ca4ff7  libsystem_coreservices.dylib (9) <41B7C578-5A53-31C8-A96F-C73E030B0938> /usr/lib/system/libsystem_coreservices.dylib\n    0x7fff86cad000 -     0x7fff86d2bfff  com.apple.CoreServices.OSServices (640.4 - 640.4) <9D175CD9-B27F-3529-8269-66D8AA83582E> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices\n    0x7fff86d67000 -     0x7fff86ef5fff  libBLAS.dylib (1128) <497912C1-A98E-3281-BED7-E9C751552F61> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib\n    0x7fff87c39000 -     0x7fff87c63ff7  libdispatch.dylib (442.50.1)  /usr/lib/system/libdispatch.dylib\n    0x7fff882eb000 -     0x7fff88380ff7  com.apple.ColorSync (4.9.0 - 4.9.0) <9150C2B7-2E6E-3509-96EA-7B3F959F049E> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/ColorSync\n    0x7fff884cb000 -     0x7fff885bdff7  libiconv.2.dylib (42) <2A06D02F-8B76-3864-8D96-64EF5B40BC6C> /usr/lib/libiconv.2.dylib\n    0x7fff88653000 -     0x7fff888c9fff  com.apple.security (7.0 - 57031.40.8)  /System/Library/Frameworks/Security.framework/Versions/A/Security\n    0x7fff888ca000 -     0x7fff888f5ff7  com.apple.DictionaryServices (1.2 - 229.1) <62EC3E1B-5A28-3252-90FF-C2E9999C2A2A> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices\n    0x7fff88903000 -     0x7fff88b13ff7  com.apple.CFNetwork (720.5.7 - 720.5.7)  /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork\n    0x7fff88b14000 -     0x7fff88b2bff7  libLinearAlgebra.dylib (1128)  /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLinearAlgebra.dylib\n    0x7fff88bf2000 -     0x7fff88c51fff  com.apple.AE (681.5 - 681.7) <2BF39455-1CDD-392C-824A-9972C6B1FB57> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE\n    0x7fff891e7000 -     0x7fff891f6fff  com.apple.LangAnalysis (1.7.0 - 1.7.0)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis\n    0x7fff89b84000 -     0x7fff89b8cffb  libcopyfile.dylib (118.1.2) <0C68D3A6-ACDD-3EF3-991A-CC82C32AB836> /usr/lib/system/libcopyfile.dylib\n    0x7fff89fbe000 -     0x7fff89fc3ff7  libunwind.dylib (35.3)  /usr/lib/system/libunwind.dylib\n    0x7fff89ffe000 -     0x7fff8a044ff7  libFontRegistry.dylib (134.1)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib\n    0x7fff8a0e5000 -     0x7fff8a101ff7  libsystem_malloc.dylib (53.30.1)  /usr/lib/system/libsystem_malloc.dylib\n    0x7fff8a121000 -     0x7fff8a13bff7  com.apple.Kerberos (3.0 - 1) <7760E0C2-A222-3709-B2A6-B692D900CEB1> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos\n    0x7fff8a13c000 -     0x7fff8a148ff7  com.apple.OpenDirectory (10.10 - 187) <22FF4721-03D8-381B-AA83-2B07D690C777> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory\n    0x7fff8a3d0000 -     0x7fff8a441ffb  com.apple.ApplicationServices.ATS (360 - 375.4) <888FE0B1-835C-30B1-80AD-5066CADB0364> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS\n    0x7fff8a442000 -     0x7fff8a533fff  libJP2.dylib (1248) <1E5E95F9-8B0B-3708-A7C3-4A04CAAF061D> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib\n    0x7fff8a534000 -     0x7fff8a551ffb  libresolv.9.dylib (57) <26B38E61-298A-3C3A-82C1-3B5E98AD5E29> /usr/lib/libresolv.9.dylib\n    0x7fff8a5e9000 -     0x7fff8a5eefff  libsystem_stats.dylib (163.30.2) <5563862F-FEB4-3F0C-AE54-20C1CC49252A> /usr/lib/system/libsystem_stats.dylib\n    0x7fff8a620000 -     0x7fff8ae64ff7  com.apple.CoreGraphics (1.600.0 - 788.3.6) <791F307E-D9A1-3779-AA9A-53D5B0F32A1E> /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics\n    0x7fff8b118000 -     0x7fff8b20cfff  libFontParser.dylib (134.11) <7EF90469-C714-3756-B21A-B1F6EA4C8EDC> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib\n    0x7fff8b259000 -     0x7fff8b394fff  com.apple.ImageIO.framework (3.3.0 - 1247)  /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\n    0x7fff8b3f1000 -     0x7fff8b3f3fff  libCVMSPluginSupport.dylib (11.1.6)  /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCVMSPluginSupport.dylib\n    0x7fff8b3f4000 -     0x7fff8b40eff7  liblzma.5.dylib (7) <1D03E875-A7C0-3028-814C-3C27F7B7C079> /usr/lib/liblzma.5.dylib\n    0x7fff8b42c000 -     0x7fff8b4b8fef  libsystem_c.dylib (1044.40.3) <2E673D96-E334-37D2-833A-E57383BBA377> /usr/lib/system/libsystem_c.dylib\n    0x7fff8b4df000 -     0x7fff8b50fff3  com.apple.GSS (4.0 - 2.0) <97F2A028-44CF-3188-B863-F4EEB39CBDBD> /System/Library/Frameworks/GSS.framework/Versions/A/GSS\n    0x7fff8b510000 -     0x7fff8b588ff7  com.apple.SystemConfiguration (1.14.4 - 1.14) <10700747-067C-30A6-B07A-83EBB5F83238> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration\n    0x7fff8b608000 -     0x7fff8b60bff7  libdyld.dylib (353.2.4) <224F35C5-6E35-3EC4-A97C-80949CE444E7> /usr/lib/system/libdyld.dylib\n    0x7fff8b60c000 -     0x7fff8b616ff7  com.apple.NetAuth (5.2 - 5.2) <2BBD749A-8E18-35B8-8E48-A90347C1CCA7> /System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth\n    0x7fff8b631000 -     0x7fff8b755ff7  com.apple.LaunchServices (644.56 - 644.56) <20AABB1C-9319-3E4D-A024-51B0DD5FCD3B> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices\n    0x7fff8b77b000 -     0x7fff8b784ff3  com.apple.CommonAuth (4.0 - 2.0) <9A484EE6-0003-3AB1-AE4F-AA543BBBF53F> /System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth\n    0x7fff8b7f7000 -     0x7fff8b7f9fff  libsystem_configuration.dylib (699.40.2)  /usr/lib/system/libsystem_configuration.dylib\n    0x7fff8b7fa000 -     0x7fff8b835fff  com.apple.QD (301 - 301)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD\n    0x7fff8bb22000 -     0x7fff8bb25fff  com.apple.xpc.ServiceManagement (1.0 - 1)  /System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement\n    0x7fff8c4b1000 -     0x7fff8c4c7ff7  libsystem_asl.dylib (267)  /usr/lib/system/libsystem_asl.dylib\n    0x7fff8c4c8000 -     0x7fff8c53afff  com.apple.framework.IOKit (2.0.2 - 1050.20.2) <09C0518C-90DF-3FC3-96D6-34D35F72C8EF> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n    0x7fff8c53b000 -     0x7fff8c542fff  com.apple.NetFS (6.0 - 4.0)  /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS\n    0x7fff8c6d8000 -     0x7fff8c6f5fff  libsystem_kernel.dylib (2782.50.9.1.1)  /usr/lib/system/libsystem_kernel.dylib\n    0x7fff8c728000 -     0x7fff8c758fff  libsystem_m.dylib (3086.1) <1E12AB45-6D96-36D0-A226-F24D9FB0D9D6> /usr/lib/system/libsystem_m.dylib\n    0x7fff8c873000 -     0x7fff8c880ff7  libbz2.1.0.dylib (36) <2DF83FBC-5C08-39E1-94F5-C28653791B5F> /usr/lib/libbz2.1.0.dylib\n    0x7fff8c881000 -     0x7fff8c8c2fff  libGLU.dylib (11.1.6) <4BC6579D-A6D0-3A19-880E-E29FAEA698E7> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib\n    0x7fff8c95a000 -     0x7fff8c96bff3  libsystem_coretls.dylib (35.40.1) <155DA0A9-2046-332E-BFA3-D7974A51F731> /usr/lib/system/libsystem_coretls.dylib\n    0x7fff8c9b3000 -     0x7fff8c9b4fff  liblangid.dylib (117)  /usr/lib/liblangid.dylib\n    0x7fff8c9cd000 -     0x7fff8c9d9fff  com.apple.speech.synthesis.framework (5.3.11 - 5.3.11)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis\n    0x7fff8ca1c000 -     0x7fff8ca90ffb  com.apple.securityfoundation (6.0 - 55126) <344401F5-4016-3AEB-BFDC-CE8E5546D39F> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation\n    0x7fff8cab7000 -     0x7fff8cad2ff7  libCRFSuite.dylib (34)  /usr/lib/libCRFSuite.dylib\n    0x7fff8cad3000 -     0x7fff8cae1ff7  com.apple.opengl (11.1.6 - 11.1.6)  /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL\n    0x7fff8d1b6000 -     0x7fff8d1beff3  com.apple.CoreServices.FSEvents (1210.20.1 - 1210.20.1) <84F79D3E-7B5E-3C93-8479-35794A3F125E> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/FSEvents\n    0x7fff8d1bf000 -     0x7fff8d3a4ff7  libicucore.A.dylib (531.50)  /usr/lib/libicucore.A.dylib\n    0x7fff8daa5000 -     0x7fff8daa5ff7  liblaunch.dylib (559.40.1) <4F81CA3A-D2CE-3030-A89D-42F3DAD7BA8F> /usr/lib/system/liblaunch.dylib\n    0x7fff8dcdb000 -     0x7fff8dce6fff  libcommonCrypto.dylib (60061.30.1)  /usr/lib/system/libcommonCrypto.dylib\n    0x7fff8dce7000 -     0x7fff8dd0bfef  libJPEG.dylib (1248)  /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib\n    0x7fff8dd0c000 -     0x7fff8e0a4ff7  com.apple.CoreFoundation (6.9 - 1153.18) <5C0892B8-9691-341F-9279-CA3A74D59AA0> /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\n    0x7fff8e3ff000 -     0x7fff8e400fff  libsystem_secinit.dylib (18) <581DAD0F-6B63-3A48-B63B-917AF799ABAA> /usr/lib/system/libsystem_secinit.dylib\n    0x7fff8e40a000 -     0x7fff8e40bffb  libremovefile.dylib (35) <3485B5F4-6CE8-3C62-8DFD-8736ED6E8531> /usr/lib/system/libremovefile.dylib\n    0x7fff8e455000 -     0x7fff8e47dfff  libsystem_info.dylib (459.40.1) <2E16C4B3-A327-3957-9C41-143911979A1E> /usr/lib/system/libsystem_info.dylib\n    0x7fff8e599000 -     0x7fff8e5aafff  libcmph.dylib (1) <46EC3997-DB5E-38AE-BBBB-A035A54AD3C0> /usr/lib/libcmph.dylib\n    0x7fff8e5c1000 -     0x7fff8e5f9fff  libsystem_network.dylib (412.20.3) <6105C134-6722-3C0A-A4CE-5E1261E2E1CC> /usr/lib/system/libsystem_network.dylib\n    0x7fff8e658000 -     0x7fff8e65cfff  libpam.2.dylib (20)  /usr/lib/libpam.2.dylib\n    0x7fff8efc2000 -     0x7fff8efcbff7  libsystem_notify.dylib (133.1.1) <61147800-F320-3DAA-850C-BADF33855F29> /usr/lib/system/libsystem_notify.dylib\n    0x7fff8f020000 -     0x7fff8f06afff  com.apple.HIServices (1.22 - 523) <99ADA325-53C8-368E-A5FA-3F913CD2245A> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices\n    0x7fff8f0cb000 -     0x7fff8f17afe7  libvMisc.dylib (516) <6739E390-46E7-3BFA-9B69-B278562326E6> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib\n    0x7fff8f18e000 -     0x7fff8f194ff7  libsystem_networkextension.dylib (167.40.3)  /usr/lib/system/libsystem_networkextension.dylib\n    0x7fff90178000 -     0x7fff902dfffb  com.apple.audio.toolbox.AudioToolbox (1.12 - 1.12) <5678FC94-456A-3F5F-BA9A-10EB6E462997> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox\n    0x7fff902e0000 -     0x7fff9033aff7  com.apple.LanguageModeling (1.0 - 1)  /System/Library/PrivateFrameworks/LanguageModeling.framework/Versions/A/LanguageModeling\n    0x7fff90736000 -     0x7fff90a51fcf  com.apple.vImage (8.0 - 8.0) <1183FE6A-FDB6-3B3B-928D-50C7909F2308> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage\n    0x7fff90fdc000 -     0x7fff910ceff7  libxml2.2.dylib (26.13) <32E33B6B-12E2-3C47-99BD-35A408D02132> /usr/lib/libxml2.2.dylib\n    0x7fff9134d000 -     0x7fff915ccff7  com.apple.CoreData (111 - 526.3) <5A27E0D8-5E5A-335B-B3F6-2601C7B976FA> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData\n    0x7fff915cd000 -     0x7fff91646fe7  libcorecrypto.dylib (233.30.1) <5779FFA0-4D9A-3AD4-B7F2-618227621DC8> /usr/lib/system/libcorecrypto.dylib\n    0x7fff916f1000 -     0x7fff916f9fff  libsystem_dnssd.dylib (576.50.2) <9EC5AF92-D0D2-3BDE-92B6-D3730D3865C8> /usr/lib/system/libsystem_dnssd.dylib\n    0x7fff916fa000 -     0x7fff916fcfff  com.apple.loginsupport (1.0 - 1)  /System/Library/PrivateFrameworks/login.framework/Versions/A/Frameworks/loginsupport.framework/Versions/A/loginsupport\n    0x7fff9185b000 -     0x7fff91b42ffb  com.apple.CoreServices.CarbonCore (1108.6 - 1108.6) <8953580E-7857-33B2-AA64-98296830D3A8> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore\n    0x7fff91b73000 -     0x7fff91ba0fff  com.apple.CoreVideo (1.8 - 145.1) <18DB07E0-B927-3260-A234-636F298D1917> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo\n    0x7fff91c64000 -     0x7fff91c8dff3  libxslt.1.dylib (13.13) <18F488CB-AA53-3503-A199-044CA7664DE5> /usr/lib/libxslt.1.dylib\n    0x7fff91c8e000 -     0x7fff91c90fff  libRadiance.dylib (1248) <64ADB7FC-4640-3111-A88A-463BFD63C5D3> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib\n    0x7fff91c93000 -     0x7fff91cdfff7  libcups.2.dylib (408.2)  /usr/lib/libcups.2.dylib\n    0x7fff91dca000 -     0x7fff91dcefff  com.apple.TCC (1.0 - 1)  /System/Library/PrivateFrameworks/TCC.framework/Versions/A/TCC\n    0x7fff91ed1000 -     0x7fff91ed6fff  com.apple.DiskArbitration (2.6 - 2.6) <0DFF4D9B-2AC3-3B82-B5C5-30F4EFBD2DB9> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration\n    0x7fff91ed7000 -     0x7fff91ee2fff  libGL.dylib (11.1.6) <38B3FF9A-5660-3080-9DB8-1CAE0E8CD739> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib\n    0x7fff91ee7000 -     0x7fff91eedfff  libsystem_trace.dylib (72.20.1) <840F5301-B55A-3078-90B9-FEFFD6CD741A> /usr/lib/system/libsystem_trace.dylib\n    0x7fff91eee000 -     0x7fff922fbff7  libLAPACK.dylib (1128)  /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib\n    0x7fff9230c000 -     0x7fff92360fff  libc++.1.dylib (120) <1B9530FD-989B-3174-BB1C-BDC159501710> /usr/lib/libc++.1.dylib\n    0x7fff92362000 -     0x7fff92362ff7  libunc.dylib (29) <5676F7EA-C1DF-329F-B006-D2C3022B7D70> /usr/lib/system/libunc.dylib\n    0x7fff92d2e000 -     0x7fff92d3bfff  libxar.1.dylib (255) <7CD69BB5-97BA-3858-8A8B-2F33F129E6E7> /usr/lib/libxar.1.dylib\n    0x7fff92d4b000 -     0x7fff92d70fff  libPng.dylib (1248) <0E2D7F6C-0163-35A3-BD6D-A336A3A36B33> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib\n    0x7fff92d78000 -     0x7fff930abff7  libmecabra.dylib (666.7) <0ED8AE5E-7A5B-34A6-A2EE-2B852E60E1E2> /usr/lib/libmecabra.dylib\n    0x7fff930ac000 -     0x7fff930fdfff  com.apple.audio.CoreAudio (4.3.0 - 4.3.0) <8E6AE326-9F3E-3182-BD9E-FDF561211E2E> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio\n    0x7fff931d9000 -     0x7fff93204fff  libc++abi.dylib (125) <88A22A0F-87C6-3002-BFBA-AC0F2808B8B9> /usr/lib/libc++abi.dylib\n    0x7fff932fe000 -     0x7fff93305ff7  libcompiler_rt.dylib (35)  /usr/lib/system/libcompiler_rt.dylib\n    0x7fff9330f000 -     0x7fff9333affb  libarchive.2.dylib (30.50.1.1.1) <3E66E4A5-B992-3D94-9218-839B34BDAAA8> /usr/lib/libarchive.2.dylib\n    0x7fff93410000 -     0x7fff93429ff7  com.apple.CFOpenDirectory (10.10 - 187)  /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory\n    0x7fff935c1000 -     0x7fff935dbff7  libextension.dylib (55.2) <3BB019CA-199A-36AC-AA22-14B562138545> /usr/lib/libextension.dylib\n    0x7fff935e0000 -     0x7fff93647ffb  com.apple.datadetectorscore (6.0 - 396.1.2)  /System/Library/PrivateFrameworks/DataDetectorsCore.framework/Versions/A/DataDetectorsCore\n    0x7fff93951000 -     0x7fff939f0e27  com.apple.AppleJPEG (1.0 - 1) <6627DDD9-A8FE-3968-B23A-B6A29AA3919A> /System/Library/PrivateFrameworks/AppleJPEG.framework/Versions/A/AppleJPEG\n    0x7fff93b86000 -     0x7fff93b87ff3  libSystem.B.dylib (1213) <584E24DE-134A-371E-B4AD-A6ACFFBC424F> /usr/lib/libSystem.B.dylib\n    0x7fff93c45000 -     0x7fff93c46ff7  libsystem_blocks.dylib (65) <9615D10A-FCA7-3BE4-AA1A-1B195DACE1A1> /usr/lib/system/libsystem_blocks.dylib\n    0x7fff93c53000 -     0x7fff93cc1ff3  com.apple.Heimdal (4.0 - 2.0) <8D1667CF-D454-3E07-A58E-E15591B5A95E> /System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal\n    0x7fff93cdd000 -     0x7fff93d4cfff  com.apple.SearchKit (1.4.0 - 1.4.0) <80883BD1-C9BA-3794-A20E-476F94DD89A9> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit\n    0x7fff93e3f000 -     0x7fff93e3ffff  com.apple.Accelerate (1.10 - Accelerate 1.10) <2C8AF258-4F11-3BEC-A826-22D7199B3975> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate\n    0x7fff93e8d000 -     0x7fff93e8dfff  com.apple.ApplicationServices (48 - 48) <5BF7910B-C328-3BF8-BA4F-CE52B574CE01> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices\n    0x7fff93e8e000 -     0x7fff93e8ffff  libDiagnosticMessagesClient.dylib (100) <2EE8E436-5CDC-34C5-9959-5BA218D507FB> /usr/lib/libDiagnosticMessagesClient.dylib\n    0x7fff93e92000 -     0x7fff93fd8fef  libsqlite3.dylib (168.2) <53F6A294-15D7-3804-9ABF-47D35E15CDFB> /usr/lib/libsqlite3.dylib\nExternal Modification Summary:\n  Calls made by other processes targeting this process:\n    task_for_pid: 0\n    thread_create: 0\n    thread_set_state: 0\n  Calls made by this process:\n    task_for_pid: 0\n    thread_create: 0\n    thread_set_state: 0\n  Calls made by all processes on this machine:\n    task_for_pid: 9173\n    thread_create: 0\n    thread_set_state: 0\nVM Region Summary:\nReadOnly portion of Libraries: Total=146.3M resident=82.0M(56%) swapped_out_or_unallocated=64.4M(44%)\nWritable regions: Total=46.2M written=1032K(2%) resident=2148K(5%) swapped_out=0K(0%) unallocated=44.1M(95%)\nREGION TYPE                      VIRTUAL\n===========                      =======\nKernel Alloc Once                     4K\nMALLOC                             36.3M\nMALLOC (admin)                       32K\nSTACK GUARD                        56.0M\nStack                              9232K\nVM_ALLOCATE                         1.9G\n__DATA                             6484K\n__LINKEDIT                         72.5M\n__TEXT                             73.8M\n__UNICODE                           552K\nshared memory                         4K\n===========                      =======\nTOTAL                               2.2G\nModel: MacBookPro11,4, BootROM MBP114.0172.B10, 4 processors, Intel Core i7, 2.2 GHz, 16 GB, SMC 2.29f23\nGraphics: Intel Iris Pro, Intel Iris Pro, Built-In\nMemory Module: BANK 0/DIMM0, 8 GB, DDR3, 1600 MHz, 0x80AD, 0x484D54343147533642465238412D50422020\nMemory Module: BANK 1/DIMM0, 8 GB, DDR3, 1600 MHz, 0x80AD, 0x484D54343147533642465238412D50422020\nAirPort: spairport_wireless_card_type_airport_extreme (0x14E4, 0x152), Broadcom BCM43xx 1.0 (7.15.166.24.3)\nBluetooth: Version 4.3.6f4 17916, 3 services, 27 devices, 1 incoming serial ports\nNetwork Service: Wi-Fi, AirPort, en0\nSerial ATA Device: APPLE SSD SM0256G, 251 GB\nUSB Device: Internal Memory Card Reader\nUSB Device: Bluetooth USB Host Controller\nUSB Device: Apple Internal Keyboard / Trackpad\nThunderbolt Bus: MacBook Pro, Apple Inc., 27.1\n```\n. @dasMulli damn, sorry about that. ",
    "powellcj12": "@hyeomans it looks like you're running 10.10 on your Mac, and this page says you need to at least be running 10.11: https://www.microsoft.com/net/core/preview#macos. Would also be helpful to update the download page which really makes it look like 10.11 is supported...\n\n. Ahh, I misread and thought you were talking about the installer itself, which hopefully already doesn't let you install on unsupported versions?. *sigh* the installer just chugs right along... @dasMulli what's the right place to file a bug to get the .NET Core installer fixed? dotnet/cli repo? It is there I see some code for packaging, but their template already says it requires 10.12 - from here:\n```xml\n<volume-check>\n    <allowed-os-version>\n        <os-version min=\"10.12\" />\n    </allowed-os-version>\n</volume-check>\n\n```. ",
    "hugosmarques": "Hello.\nI want know if .AsEnumerable() propertie for datatable will be available. Thanks. datatable does not have the .AsEnumerable() to work with linq, like \nDatatable products = ...\nproducts.AsEnumerable().Select(x => ......\nHow i can use Datable with linq without .AsEnumerable() ?. Adrien the problem is that Datatable does not have the propertie .AsEnumerable() on .Net Core 2.0. @yaakov-h  did you know if .NET Core 2 will have this propertie?. Hello. This is very important for me. I have thousands of line code and it's impossible for me right know change everything to EF and because of that I need the datatable with linq . @yaakov-h i already open the issue https://github.com/dotnet/corefx/issues/19771#issuecomment-301519800. ",
    "kylesferrazza": "Where should I post an issue relating to errors thrown by the 2.0 binaries? I consistently get the following error, even with \"dotnet --version\":\nError: assembly specified in the dependencies manifest was not found -- package: 'runtime.linux-x64.microsoft.netcore.app', version: '2.0.0-preview1-002111-00', path: 'runtimes/linux-x64/native/System.Native.a'. @Petermarcu On this page in the SDK Binaries column for Linux.. ",
    "nicksav": "Guys, not able to deploy to Azure. Getting starter template and simply deploy to Azure. \nGet HTTP Error 502.5 - Process Failure\nAm I missing something? Run fine in localhost. Guys where is AddJwtBearerAuthentication now?. @blackdwarf  Thanks. That works.\nAlso not able to Deploy to Azure Web App in Australia. \nCGI error \nThis error occurs when a CGI application does not return a valid set of HTTP headers, or when a proxy or gateway was unable to send the request to a parent gateway. You may need to get a network trace or contact the proxy server administrator, if it is not a CGI problem.\nApplication 'MACHINE/WEBROOT/APPHOST/ACCOUNTMANAGEMENTAPI' with physical root 'D:\\home\\site\\wwwroot\\' failed to start process with commandline 'dotnet .\\AuthAPI.dll', ErrorCode = '0x80004005 : 80008083.. @zenixgrace Yes. @zenixgrace not sure, I know for sure that to be able to use .Net Core 2 preview we forced to install VS2017 Preview 15.3. I am testing new VS and it looks really good. Just need to make Azure to work and I am happy Customer:). ",
    "bruce31": "Ubuntu 16.04 LTS\nInstall instructions say to remove all older versions.\nEverything working okay except dotnet watch ...\n$ dotnet watch build\nIt was not possible to find any compatible framework version\nThe specified framework 'Microsoft.NETCore.App', version '1.0.5' was not found.\n  - Check application dependencies and target a framework version installed at:\n      /\n  - Alternatively, install the framework version '1.0.5'.\nLatest version of watcher I can find is 1.0.5 (there is nothing found when using Version=\"2.*\")\n<ItemGroup>\n    <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" Version=\"1.*\"/>\n  </ItemGroup>\n. Doh!\n<ItemGroup>\n    <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" \n                            Version=\"2.0.0-preview1-final\"/>\n</ItemGroup>\nForgot you don't see preview packages by default. Obvious when I went to the nuget.org page\nWorking well.\nCan now run unit tests from interactive terminal in VS Code.. Is there is an equivalent preview version of c# add-in for VS Code. 1.9.0 does not know about netcoreapp2.0 and netstandard2.0 and complains a lot.. ",
    "dawsongh": "Installed VS2017 15.3 (Preview) and then the .NET Core 2.0 SDK (64-bit) but when I launch VS2017 15.3 (Preview) I do not get to see .NET Core 2.0 in the Target framework selection combo.\nHow do I get VS 2017 15.3 to see the .NET Core 2.0 ? Suggestions please. ",
    "neman": "@the-super-coder No, you can't. VS2017.3 is part of 2017 Preveiw edition, which is different instance of VS2017. Similar like VS Code insiders edition. And btw they hard coded netcoreapp1.1 in VS2017 (1 & 2) so you can not use 2.0. \nIt's explained already here https://github.com/dotnet/core/issues/640#issuecomment-301121230. ",
    "egilh": "I'm not able to install dotnet-dev-2.0.0-preview1-005977 on Ubuntu 16.04 via instructions found here https://www.microsoft.com/net/core/preview#linuxubuntu when I have fish as my default shell.\nUnsupported use of '||'. In fish, please use 'COMMAND; or COMMAND'.\nfish: dotnet new > /dev/null 2>&1 || true\n                                   ^\ndpkg: error processing package dotnet-dev-2.0.0-preview1-005977 (--configure):\n subprocess installed post-installation script returned error exit status 127\nErrors were encountered while processing:\n dotnet-dev-2.0.0-preview1-005977\nE: Sub-process /usr/bin/dpkg returned an error code (1)\nDoesn't  matter if I switch to bash or not, the error is the same. To be able to complete installation, bash needs to be set as default shell\nchsh -s /bin/bash\nInstallation works as expected after this.\nUsing fish as my default shell is a big advantage for me (and others). Please make sure Debian/Ubuntu packages allows for the use of fish as default shell.. Encountering error when trying to install  Setting up dotnet-sdk-2.0.0-preview2-006497 on a Ubuntu 16.04 based machine having fish installed as default shell:\n```bash\n$ sudo apt install dotnet-sdk-2.0.0-preview2-006497 \nReading package lists... Done\nBuilding dependency tree     \nReading state information... Done\nStarting pkgProblemResolver with broken count: 0\nStarting 2 pkgProblemResolver with broken count: 0\nDone\nThe following additional packages will be installed:\n  dotnet-host dotnet-hostfxr-2.0.0-preview2-25407-01 dotnet-runtime-2.0.0-preview2-25407-01 liblttng-ust-ctl2\n  liblttng-ust0 liburcu4\nThe following NEW packages will be installed:\n  dotnet-host dotnet-hostfxr-2.0.0-preview2-25407-01 dotnet-runtime-2.0.0-preview2-25407-01\n  dotnet-sdk-2.0.0-preview2-006497 liblttng-ust-ctl2 liblttng-ust0 liburcu4\n0 upgraded, 7 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 104 MB of archives.\nAfter this operation, 293 MB of additional disk space will be used.\nDo you want to continue? [Y/n] y\nGet:1 http://no.archive.ubuntu.com/ubuntu xenial/universe amd64 liburcu4 amd64 0.9.1-3 [47,3 kB]\nGet:2 http://no.archive.ubuntu.com/ubuntu xenial/universe amd64 liblttng-ust-ctl2 amd64 2.7.1-1 [72,2 kB]\nGet:3 http://no.archive.ubuntu.com/ubuntu xenial/universe amd64 liblttng-ust0 amd64 2.7.1-1 [127 kB]\nGet:4 https://apt-mo.trafficmanager.net/repos/dotnet-release xenial/main amd64 dotnet-host amd64 2.0.0-preview2-25407-01-1 [36,5 kB]\nGet:5 https://apt-mo.trafficmanager.net/repos/dotnet-release xenial/main amd64 dotnet-hostfxr-2.0.0-preview2-25407-01 amd64 2.0.0-preview2-25407-01-1 [134 kB]\nGet:6 https://apt-mo.trafficmanager.net/repos/dotnet-release xenial/main amd64 dotnet-runtime-2.0.0-preview2-25407-01 amd64 2.0.0-preview2-25407-01-1 [18,5 MB]\nGet:7 https://apt-mo.trafficmanager.net/repos/dotnet-release xenial/main amd64 dotnet-sdk-2.0.0-preview2-006497 amd64 2.0.0-preview2-006497-1 [85,0 MB]\nFetched 104 MB in 1min 9s (1\u00a0489 kB/s)                                                                       \nSelecting previously unselected package dotnet-host.\n(Reading database ... 206889 files and directories currently installed.)\nPreparing to unpack .../dotnet-host_2.0.0-preview2-25407-01-1_amd64.deb ...\nUnpacking dotnet-host (2.0.0-preview2-25407-01-1) ...\nSelecting previously unselected package dotnet-hostfxr-2.0.0-preview2-25407-01.\nPreparing to unpack .../dotnet-hostfxr-2.0.0-preview2-25407-01_2.0.0-preview2-25407-01-1_amd64.deb ...\nUnpacking dotnet-hostfxr-2.0.0-preview2-25407-01 (2.0.0-preview2-25407-01-1) ...\nSelecting previously unselected package liburcu4:amd64.\nPreparing to unpack .../liburcu4_0.9.1-3_amd64.deb ...\nUnpacking liburcu4:amd64 (0.9.1-3) ...\nSelecting previously unselected package liblttng-ust-ctl2:amd64.\nPreparing to unpack .../liblttng-ust-ctl2_2.7.1-1_amd64.deb ...\nUnpacking liblttng-ust-ctl2:amd64 (2.7.1-1) ...\nSelecting previously unselected package liblttng-ust0:amd64.\nPreparing to unpack .../liblttng-ust0_2.7.1-1_amd64.deb ...\nUnpacking liblttng-ust0:amd64 (2.7.1-1) ...\nSelecting previously unselected package dotnet-runtime-2.0.0-preview2-25407-01.\nPreparing to unpack .../dotnet-runtime-2.0.0-preview2-25407-01_2.0.0-preview2-25407-01-1_amd64.deb ...\nUnpacking dotnet-runtime-2.0.0-preview2-25407-01 (2.0.0-preview2-25407-01-1) ...\nSelecting previously unselected package dotnet-sdk-2.0.0-preview2-006497.\nPreparing to unpack .../dotnet-sdk-2.0.0-preview2-006497_2.0.0-preview2-006497-1_amd64.deb ...\nUnpacking dotnet-sdk-2.0.0-preview2-006497 (2.0.0-preview2-006497-1) ...\nProcessing triggers for man-db (2.7.5-1) ...\nProcessing triggers for libc-bin (2.23-0ubuntu9) ...\nSetting up dotnet-host (2.0.0-preview2-25407-01-1) ...\nSetting up dotnet-hostfxr-2.0.0-preview2-25407-01 (2.0.0-preview2-25407-01-1) ...\nSetting up liburcu4:amd64 (0.9.1-3) ...\nSetting up liblttng-ust-ctl2:amd64 (2.7.1-1) ...\nSetting up liblttng-ust0:amd64 (2.7.1-1) ...\nSetting up dotnet-runtime-2.0.0-preview2-25407-01 (2.0.0-preview2-25407-01-1) ...\nSetting up dotnet-sdk-2.0.0-preview2-006497 (2.0.0-preview2-006497-1) ...\nThis software may collect information about you and your use of the software, and send that to Microsoft.\nPlease visit http://aka.ms/dotnet-cli-eula for more information.\nWelcome to .NET Core!\n\nLearn more about .NET Core @ https://aka.ms/dotnet-docs. Use dotnet --help to see available commands or go to https://aka.ms/dotnet-cli-docs.\n.NET Core Tools Telemetry\nThe .NET Core Tools include a telemetry feature that collects usage information. It is important that the .NET Team understands how the tools are being used so that we can improve them.\nThe data collected is anonymous and will be published in an aggregated form for use by both Microsoft and community engineers under the Creative Commons Attribution License.\nThe .NET Core Tools telemetry feature is enabled by default. You can opt-out of the telemetry feature by setting an environment variable DOTNET_CLI_TELEMETRY_OPTOUT (for example, 'export' on macOS/Linux, 'set' on Windows) to true (for example, 'true', 1). You can read more about .NET Core tools telemetry at https://aka.ms/dotnet-cli-telemetry.\nInitializing new SSH agent ...\nsucceeded\nfish: Unknown command 'nice_hostname'\n~/.config/fish/functions/start_agent.fish (line 1): nice_hostname\n                                                    ^\nin command substitution\n        called on line 1 of file ~/.config/fish/functions/start_agent.fish\nin function \u201cstart_agent\u201d\n        called on line 19 of file ~/.config/fish/config.fish\nfrom sourcing file ~/.config/fish/config.fish\n        called during startup\nUnsupported use of '||'. In fish, please use 'COMMAND; or COMMAND'.\nfish: dotnet new > /dev/null 2>&1 || true\n                                   ^\ndpkg: error processing package dotnet-sdk-2.0.0-preview2-006497 (--configure):\n subprocess installed post-installation script returned error exit status 127\nProcessing triggers for libc-bin (2.23-0ubuntu9) ...\nErrors were encountered while processing:\n dotnet-sdk-2.0.0-preview2-006497\nE: Sub-process /usr/bin/dpkg returned an error code (1)\n```\nUnlike preview1, it doesn't help to change to bash as long as fish is default:\n```bash\n$ bash\negil@egil-XPS:~/$ sudo apt install dotnet-sdk-2.0.0-preview2-006497 \nReading package lists... Done\nBuilding dependency tree     \nReading state information... Done\ndotnet-sdk-2.0.0-preview2-006497 is already the newest version (2.0.0-preview2-006497-1).\nStarting pkgProblemResolver with broken count: 0\nStarting 2 pkgProblemResolver with broken count: 0\nDone\n0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\n1 not fully installed or removed.\nAfter this operation, 0 B of additional disk space will be used.\nDo you want to continue? [Y/n] y\nSetting up dotnet-sdk-2.0.0-preview2-006497 (2.0.0-preview2-006497-1) ...\nThis software may collect information about you and your use of the software, and send that to Microsoft.\nPlease visit http://aka.ms/dotnet-cli-eula for more information.\nWelcome to .NET Core!\n\nLearn more about .NET Core @ https://aka.ms/dotnet-docs. Use dotnet --help to see available commands or go to https://aka.ms/dotnet-cli-docs.\n.NET Core Tools Telemetry\nThe .NET Core Tools include a telemetry feature that collects usage information. It is important that the .NET Team understands how the tools are being used so that we can improve them.\nThe data collected is anonymous and will be published in an aggregated form for use by both Microsoft and community engineers under the Creative Commons Attribution License.\nThe .NET Core Tools telemetry feature is enabled by default. You can opt-out of the telemetry feature by setting an environment variable DOTNET_CLI_TELEMETRY_OPTOUT (for example, 'export' on macOS/Linux, 'set' on Windows) to true (for example, 'true', 1). You can read more about .NET Core tools telemetry at https://aka.ms/dotnet-cli-telemetry.\nUnsupported use of '||'. In fish, please use 'COMMAND; or COMMAND'.\nfish: dotnet new > /dev/null 2>&1 || true\n                                   ^\ndpkg: error processing package dotnet-sdk-2.0.0-preview2-006497 (--configure):\n subprocess installed post-installation script returned error exit status 127\nErrors were encountered while processing:\n dotnet-sdk-2.0.0-preview2-006497\nE: Sub-process /usr/bin/dpkg returned an error code (1)\nSwitching to root which uses bash as default:bash\n$ sudo su -\nroot@egil-XPS:~# apt install dotnet-sdk-2.0.0-preview2-006497 \nReading package lists... Done\nBuilding dependency tree     \nReading state information... Done\ndotnet-sdk-2.0.0-preview2-006497 is already the newest version (2.0.0-preview2-006497-1).\nStarting pkgProblemResolver with broken count: 0\nStarting 2 pkgProblemResolver with broken count: 0\nDone\n0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\n1 not fully installed or removed.\nAfter this operation, 0 B of additional disk space will be used.\nDo you want to continue? [Y/n] y\nSetting up dotnet-sdk-2.0.0-preview2-006497 (2.0.0-preview2-006497-1) ...\nThis software may collect information about you and your use of the software, and send that to Microsoft.\nPlease visit http://aka.ms/dotnet-cli-eula for more information.\nWelcome to .NET Core!\n\nLearn more about .NET Core @ https://aka.ms/dotnet-docs. Use dotnet --help to see available commands or go to https://aka.ms/dotnet-cli-docs.\n.NET Core Tools Telemetry\nThe .NET Core Tools include a telemetry feature that collects usage information. It is important that the .NET Team understands how the tools are being used so that we can improve them.\nThe data collected is anonymous and will be published in an aggregated form for use by both Microsoft and community engineers under the Creative Commons Attribution License.\nThe .NET Core Tools telemetry feature is enabled by default. You can opt-out of the telemetry feature by setting an environment variable DOTNET_CLI_TELEMETRY_OPTOUT (for example, 'export' on macOS/Linux, 'set' on Windows) to true (for example, 'true', 1). You can read more about .NET Core tools telemetry at https://aka.ms/dotnet-cli-telemetry.\n```. ",
    "pms1969": "Having a look at the dotnet.myget.org feed, looks like preview2 might not be that far away.  I've spent the last few weeks converting our application code to netcore2.0 and netstandard2.0, and although I struggled to get it done (no more webapi for instance threw me a bit), ultimately I got it all working, which is fabulous.  Before I commit the company to this tho, do you think there will be any major interface changes or structural changes in netcore2.0 before release?  I know it's  a bit hard to know these things in advance, but to be honest, we haven't really used the mvc framework to it's fullest, so I'm hoping that the few bits we do have don't change much.  Then we can commit to dotnet core and move forward.  It's such a no brainer for us to do this (with cloud workloads) and we really appreciate all the hard work that's gone into it.. Thank you @Petermarcu .  Is there a way to get preview 2 form the myget feeds?  I've run into a bit of a problem when adding SignalR (from aspnetcore-dev) to our app.  Since that update, although the websocket stuff works, just about everything else is failing with System.MissingMethodException: Method not found: 'Void Microsoft.Net.Http.Headers.EntityTagHeaderValue..ctor(System.String)'.  I understand this to be a mismatch between dotnet versions, which makes sense since I ended up getting the preview2 dependencies for it.  Given that the repo has moved onto naming things preview3, I assume preview2 will be forthcoming shortly anyway, just wanted to get a head start.\nEDIT: actually, I found the nightly docker container which would be good enough for me, except that I get the following warning when restoring:\nDependency specified was Microsoft.NETCore.App (>= 2.0.0-preview2-25324-03) but ended up with Microsoft.NETCore.App 2.0.0-preview2-25406-03\nbuilds fine afterwards, but then leads to the following runtime error:\nIt was not possible to find any compatible framework version\nThe specified framework 'Microsoft.NETCore.App', version '2.0.0-preview2-25406-03' was not found.\n  - Check application dependencies and target a framework version installed at:\n      /\n  - Alternatively, install the framework version '2.0.0-preview2-25406-03'.\nI've done my best to try and figure that out, but I've come up short :(\nAny ideas?. ",
    "garora": "@Petermarcu - is there any expected date for announcement of preview2 ?. >  I poked around a bit and we were able to update estimate for Preview 2 - see ship dates\nawesome! Lots of  \u2764\ufe0f Thank you so much!. ",
    "ilFusta": "As @dawsongh \nI've installed .net Core 2.0 Preview 1 and VS Preview 15.3 but It doesn't shows up .net Core as target framework it's stopping at .net Framework 4.7\nDo you have ani hints?\n. ",
    "NinoFloris": "@karelz unofficially, I've heard rumours of first weeks of july because of shipping delays (vs update 3), that sounds plausible to you?\nWe're waiting on that preview for f# to be integrated into the sdk as combining f# and c# project refs in a netstandard 2.0 project is completely broken on preview 1. After that release we'll try another upgrade. :) Alright good to know, sorry for putting you in that position. I do want you to know I would not ask any employee but as you are the community/repo manager of most dotnet core things...  \nI admit I thought I was being clever by asking you if that sounds plausible as that's a long way off from a real confirmation. And yes I'd really like to see that 'ack' from management on sharing more coming through as well ^_^\nWe know about the dev feed but it's not really great to to put our company on daily's and we'd also be missing things like dotnet preview-2 docker containers from MS, could make them ourselves but too much hassle and risk at that point.\nI will put in a request in https://github.com/dotnet/dotnet-docker for daily builds though, could be useful!. Hugs and \u2764\ufe0f Thank you!. Is there a soft guestimate on RTW date?. ",
    "sillyousu": "Can I use dotnet standard dll in dotnet core app project?. @Petermarcu \nI tried installing Mono.Posix.NETStandar 1.0.0-beta1  for a dotnet core 2.0 project (via VS for Mac). \nI got the following error:\nPackage Mono.Posix.NETStandard 1.0.0-beta1 is not compatible with netcoreapp2.0 (.NETCoreApp,Version=v2.0) / win-x86. Package Mono.Posix.NETStandard 1.0.0-beta1 supports:\n  - net40 (.NETFramework,Version=v4.0)\n  - netstandard2.0 (.NETStandard,Version=v2.0). @yaakov-h \nCan I handle the dependency manually, via command line tools like dotnet restore?. Is dotnet core 2.0 preview2 SDK Linux x64 available now?\nI found latest Linux x64 release is preview 1:\nhttps://dotnetcli.blob.core.windows.net/dotnet/Sdk/release/2.0.0/dotnet-sdk-latest-linux-x64.tar.gz. visual studio freeze ~15 seconds when:\n1. switch git branch from command line\n2.  add/remove file/dir from solution resource manager\nproject size: 900 cs file / 200k  LOC\ndotnet --info:\n```\n.NET Command Line Tools (2.0.0-preview2-006497)\nProduct Information:\n Version:            2.0.0-preview2-006497\n Commit SHA-1 hash:  06a2093335\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.15063\n OS Platform: Windows\n RID:         win10-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0-preview2-006497\\\nMicrosoft .NET Core Shared Framework Host\nVersion  : 2.0.0-preview2-25407-01\n  Build    : 40c565230930ead58a50719c0ec799df77bddee9\nvisual studio version:\nMicrosoft Visual Studio Community 2017 Preview\nVersion 15.3.0 Preview 5.0\nVisualStudio.15.Preview/15.3.0-pre.5.0+26720.2\nMicrosoft .NET Framework\nVersion 4.7.02046\n```\n. ",
    "smithaitufe": "Please is this the right place to talk about this ? I upgraded my existing app to netcoreapp2.0 but I am having this error.\n```\nInvalidCastException: Unable to cast object of type 'System.Linq.Expressions.PropertyExpression' to type 'Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression'.\nand this is the codec#\nvar books=bookService.GetAllBooks().OrderBy(b=>b.Title).OrderByDescending(b=>b.InsertedAt).ToList();\n```\n. ",
    "normanfan": "does this version can use GetResourceSet  to get all key in resx?. ",
    "libsamek": "I have installed version 2.0.0-preview1-005977, I'm looking at the API reference and dependencies in Visual Studio and there are a couple of namespaces missing. One example, System.DirectoryServices.\nWill this be added into the final release or do I have to do something to \"enable\" it?. ",
    "tarekgh": "@a764578566 We don't support any type named \"ChineseChar\" could you send some more info what exactly this class does? and where did you use it before? we never supported such class even in the full framework. . Thanks @a764578566 for the pointer. \nI have ran the APIPort https://github.com/Microsoft/dotnet-apiport on a couple of assemblies existed in this International Pack and it is fully compatible with the netcore 2.0. so if you target netcore app 2.0 you'll be able to use these assemblies in your app. \nApiPort.exe analyze -f \"ChnCharInfo.dll\" -t \".NET Core, Version=2.0\" -r HTML -o AnalysisReport.html\nPortability Summary   \nAssembly: ChnCharInfo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=18f031bd02e5e291\n.NET Core,Version=v2.0:     100.00 %\n. @Drapondur I'll take a look. I'll move the issue to corefx repo too.. Issue moved to dotnet/corefx #21983 via ZenHub\n. @Sam00061 I think the problem here is the Console window is not displaying the text properly when you do \nC#\n            Console.WriteLine(SubProcess.StandardOutput.ReadToEnd());\n            Console.WriteLine(SubProcess.StandardError.ReadToEnd());\nThis is likely a Windows console issue. \nTo know if this is the case, instead of writing the text to the console, try to write it to a file and then share the file. \nCC @bitcrazed. I'll take a closer look. thanks for sharing the project and the output file.. The problem here is you are doing \nC#\nConsole.OutputEncoding = Encoding.UTF8;\nwhich will change the encoding of the current console window from Big5 950 codepage to UTF8. Then when getting the redirected output text from the child process and try to render it, Windows console is not handling UTF8 correctly which display garbled text. I am aware of Windows team already working on fixing console with UTF8 encoding. \nTo fix your issue, don't use UTF8 for now. Just delete the line \nC#\nConsole.OutputEncoding = Encoding.UTF8;\nand make sure you recycle your console window before you rerun your app.\nLet me know if this didn't work for you. \n. @Sam00061 I am closing this issue as there is nothing need to be done in the framework side but feel free to send any question or if you need any help. Thanks.. Did you have \nC#\n    System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance)\nin your app initialization when you removed \nConsole.OutputEncoding = Encoding.UTF8;\nAnd, did you recycle the console Window before you run the app?\nAlso, could you please go to the console windows properties and send me the value of \"Current code page\" listed there?. I have tried the same code on zh-TW machine with using \nC#\n   System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance)\nand it is producing the correct text \n\u767c\u751f\u4e0b\u5217\u932f\u8aa4: \u5b58\u53d6\u88ab\u62d2\u3002 (0x80070005)\nI removed the line \nC#\n  Console.OutputEncoding = Encoding.UTF8;\n. Please try to reference the library System.Text.Encoding.CodePages and then add the following line in your app initialization code:\nC#\n    Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);\nThat is what the exception message suggested. You may look at the link https://msdn.microsoft.com/en-us/library/mt643899(v=vs.110).aspx#Remarks for more info. \n. @mailfcly could you send more info how did you build the assemblies and what framework and version you are targeting?\ncould you please share a small project repro this?. CC @sdmaclea \n@mailfcly are you using net core in your project? I just want to confirm.\nIf this is the case, @jeffschwMSFT mentioned, satellite assemblies will not be found with LoadFrom... you need to subscribe to the resolve event to find them.. @sdmaclea I assigned this one to you. could you please have a look why the satellite assembly didn't get loaded?. Sorry, I  meant to assign it to @sdmaclea . @nguerrera is this related to Microsoft/msbuild#2221?. https://github.com/dotnet/corefx/issues/12565. @nguerrera could you please answer the question https://github.com/dotnet/core/issues/2061#issuecomment-439537179? thank you!. @rainersigwald this issue is the same https://github.com/Microsoft/msbuild/issues/2221, right? do you know when this will be fixed in msbuild? . CC @maryamariyan . Yes, net core depends on the underlying OS for the globalization data. this is by design. in general, apps shouldn't assume the globalization data never change or even be consistent between OS's and even different versions of the same OS. . SQL team need to take a look to know why the connection is failed. the issue here is not clear to me why this is failed.. AssemblyResourceStringProvider is ASP.NET class. @muratg or @Eilon can help. \n@karelz I think this can be moved to the asp.net repo.. > What namespace is that in? I couldn't find it with a cursory search.\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.localization.internal.assemblyresourcestringprovider?view=aspnetcore-2.0\n. @muratg the doc I sent link for saying this apply to 1.1 and 2.0 but it is not mentioning 2.1. I am not sure how we support such libraries especially it is listed inside a namespace Microsoft.Extensions.Localization.Internal (which kind indicating it is internal).. @ahsonkhan are we going to do the same after preview 3 too?. @bachowny I believe this operation depends on the default codepage on your system. On Windows I believe the default code page in your system is 1252 which has the code point 0xD6 as \"\u00d6\". But on Linux you can have different codepage (which is most of the time is Utf8). decoding 0xD6 using UTF8 will result invalid character (or 0xFFFD)\nFirst, you want to know what encoding of the bytes you are receiving over the wire, then would be better to use the encoding class to do the decoding using that bytes encoding. \nHere is some example if you want to use 1252 codepage:\nC#\n            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);\n            Encoding encoding1252 = Encoding.GetEncoding(1252);\n            string s = new String(encoding1252.GetChars(new byte[] { 0xD6 }));\n. It looks to me for your scenario you'll just need to use the ISO-8859-1 encoding, which you can use without using Encoding.RegisterProvider(CodePagesEncodingProvider.Instance); at all. so you can just do \nC#\nEncoding isoEncoing = Encoding.GetEncoding(28591);\nYour way casting the byte to a char may be acceptable if you don't care about the code point ranges 0~0x20 and 0x80~0x9F. I believe the ISO encodign would be more desirable to use. \nLet me know if you have any more questions.\n. @bachowny PtrToStringAnsi is simply calling the String constructor with the SByte* you are passing. The string constructor is simply converting the bytes to Unicode values using the system code page. on Linux we always use Utf8 as system code page for all bytes conversions. So, this is by design on Linux.. I looked at the Range and Index changes and looks good to me. \n. ",
    "a764578566": "@tarekgh \nDownload  Visual Studio International Pack \nusing Microsoft.International.Converters.PinYinConverter;\nstring obj=\"\u4e2d\u6587\";\nChineseChar chineseChar = new ChineseChar(obj);\nstring pinyin = chineseChar.Pinyins[0].ToString();\n. ",
    "Frostbite952": "Hi, \nI followed what you said but did not get \"FileNotFoundException: Could not load file or assembly\" error. Below I have included the steps I took, let me know if I missed any steps or did something wrong here. \n\nCreated a new Core app. \nCreated a Core Class Library.\nLeft it empty initially.\nRight clicked my web app and went to Add > Reference.\nSelected the class library I created.\nOpened the home controller. \nAdded the namespace. \nIn the Index IActionResult I put Class1 lstclass = new Class1();\nRan the app no error. \n\nI then went back to the class and did the following. \n- Added field called name public string name;\n- Set it to equal some text - public string name = \"test\";\n- In the controller under index I used ViewData[\"Class\"] = lstclass.name;\n- Then on the index page I placed @ViewData[\"Class\"] = lstclass.name; on to the page. \nIf I\u2019m way off what you have said, ignore everything I just put. \n. I'm using Visual Studio 2017 professional. When I created the new project I selected ASP.Net Core Web Application(.NET Core). The .csproj states i'm using 1.1 -netcoreapp1.1 \nI have both VS 15 and 17 installed, don't want to do the one way conversion with some the projects we have running yet. I don't suppose you have ran a repair on VS encase something got corrupted during the install?. If you go to help > About Microsoft Visual Studio what version do you have? I've attached mine below. I'm wondering as I just seen a new update came out 3 hours ago for VS 2017 and I haven't done that yet. \n\n. I just had a colleague try his 15.2 and he got the same error as you. If you can find a 15.1 download hopefully your error goes away. . If that doesn't work I'm sure someone more knowledgeable than I can help you on here. I'm going to try and update my VS at home here to 15.2 and see if the issue is here or localised to the work PC's. I will let you know if the issue is still there. \nEdit\nSo I updated my VS at home too 15.2 and interestingly enough It worked straight away. I got no errors and I used the same process as before. \nI would try updating to 15.2 and if that doesn't work for you I would remove VS and I would remove everything core related if you can. Then just do a fresh install of VS and Core.  . ",
    "wstaelens": "asp.net core mvc: \nI started with VS2015 Pro on 1.0 tried upgrade to 1.1.\nAfter hours of trying to get the config working I gave up and said f*ck it and created an asp.net mvc app like we used to do.. ",
    "epoyraz": "duplicate. ",
    "pinaraf": "I've got the same problem on my computers running Debian sid, and I can not get it running on Debian testing (stretch) because it requires OpenSSL 1.0.0 that is no longer packaged.. I removed on my sid the old unmaintained libssl 1.0.0 package, and now I get the error message No usable version of the libssl was found. At least that's not a segfault.\nA strace shows that only libssl.so.1.0.0 is searched, with a fallback on libssl.so.10, while the libssl1.0.2 package provides only libssl.so.1.0.2.\nI tried to put a symlink, but the symbols changed in libssl 1.0.2 (SSLv3_method missing). That's why Debian did not simply upgrade the previous package and kept my old version installed: the OpenSSL package broke the binary compatibility\u2026\nSo right now, .NET Core 2.0 may work on Debian 8.(7+), not on Debian 8.7+ \nConsidering that Debian 9 will be out in the next months, supporting it is imho important. And it will come with OpenSSL 1.0.2 as a fallback so you should be able to use it.\nhttps://packages.debian.org/search?keywords=libssl&searchon=names&suite=testing&section=all\n. So, basically, for Debian 9+ corefx must be compiled with OPENSSL_NO_SSL3_METHOD defined\u2026\nThis was changed in OpenSSL 1.0.2d-2 package back in 2015.. @bartonjs And I confirm the latest builds work on Debian 9 with OpenSSL 1.0.2.. ",
    "brendandburns": "fwiw, I still see this on:\n```\n$ dotnet --version\n2.1.0-preview1-006491\n$ dotnet restore\nSegmentation fault\n```\nLatest debian stretch (now the stable release). console\n$ sudo apt-get install libssl1.0.2\n[sudo] password for bburns: \nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nlibssl1.0.2 is already the newest version (1.0.2l-2).\n0 upgraded, 0 newly installed, 0 to remove and 17 not upgraded.\nIt appears to be the right version. Happy to help with further debugging, let me know what you need me to do.. Ah, I dug around a little more. I had a stray /usr/lib/x86_64-linux-gnu/libssl.so.1.0.0 sitting around on my system (Jessie to Stretch upgrade) \nNot sure why that was there, but moving it out of the way (adding .old) fixed things.\nThanks.. ",
    "xPaw": "@brendandburns Oh wow, thanks for the solution! I was hitting segfaults with latest preview on Debian 9, and this fixed it.. @brendandburns Oh wow, thanks for the solution! I was hitting segfaults with latest preview on Debian 9, and this fixed it.. ",
    "malachib": "Experienced this issue, but pulling down the newest (preview 2 2.0 SDK) seems to fix it nicely. ",
    "GreenRidingHood": "I had the same problem, and solution for me was \nadding dotnet before \"-o hwapp\"  (dotnet -o hwapp)\nand now working \n. ",
    "AlexBander": "I have the same problem.\nlogically as dotnet -o hwapp  dont work -> Unknown option: -o.\nit dont work on default settings\ndotnet new\nWird vorbereitet...\nSpeicherzugriffsfehler\n```dotnet --info\n.NET-Befehlszeilentools (2.0.0)\nProduct Information:\n Version:            2.0.0\n Commit SHA-1 hash:  cdcd1928c9\nRuntime Environment:\n OS Name:     debian\n OS Version:  9\n OS Platform: Linux\n RID:         linux-x64\n Base Path:   /usr/share/dotnet/sdk/2.0.0/\nMicrosoft .NET Core Shared Framework Host\nVersion  : 2.0.0\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\n```\nlsb_release -da\nDistributor ID: Debian\nDescription:    Debian GNU/Linux 9.1 (stretch)\nRelease:        9.1\nCodename:       stretch\nStatusinformationen werden eingelesen.... Fertig\nlibssl1.0.2 ist schon die neueste Version (1.0.2l-2).\n. ",
    "randomizedthinking": "Just encountered the same issue on debian stretch while following the instruction on https://www.microsoft.com/net/core#linuxdebian. Also, libssl.1.0.2 are installed as suggested, but it does not solve the problem.. ",
    "3ronco": "Same here, segfault on Debian Stretch when using\ndotnet new ...\nTemporary fix:\nexport DOTNET_CLI_TELEMETRY_OPTOUT=1\nAlthough not nice to disable telemetry but works for now link. ",
    "thetravis": "@brendandburns The reason I had libssl.so.1.0.0 seem to be that spotify-client requires that version. Checked apt-cache showpkg libssl1.0.0 and I got\nReverse Depends: \n  librhash0,libssl1.0.0 1.0.0\n  spotify-client-0.9.17,libssl1.0.0\n  spotify-client,libssl1.0.0\n  rhash,libssl1.0.0 1.0.0\nI have no rhash installed so no other program than Spotify should need it on my install. I moved the /usr/lib/x86_64-linux-gnu/libssl.so.1.0.0 library to Spotify folder under my home folder and ran Spotify with \nexport LD_LIBRARY_PATH=/home/heikki/Spotify && spotify\nand it works. Now dotnet restore and dotnet run seem to work too.. @steveharter The reason I had 1.0.0 version was that spotify-client depends on it and I had manually installed it. Please refer to my post in #649 . ",
    "belshoff": "I just wrote\nexport DOTNET_CLI_TELEMETRY_OPTOUT = 1\nin my .bashrc, and it has worked. Thank you guys.. ",
    "dnfclas": "@jnm2,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@shanselman,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@Tealons,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\nIt will cover your contributions to all .NET Foundation-managed open source projects.\nThanks,\n.NET Foundation Pull Request Bot. @Tealons, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, .NET Foundation Pull Request Bot. \n@wfurt,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\nIt will cover your contributions to all .NET Foundation-managed open source projects.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@maartenba,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@janvorli,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. @jpjohnson, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, .NET Foundation Pull Request Bot. \n@jnm2,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@italopessoa,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@mrward,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@bricelam,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@sbomer,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@janvorli,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@huanwu,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot.  All CLA requirements met..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.:x: pong121021 sign nowYou have signed the CLA already but the status is still pending? Let us recheck it..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met.. ",
    "jnm2": "So it is.. Awesome, came here to do the same. =). Found a different one too: https://github.com/dotnet/core/pull/826. Thank you!. ",
    "nmdias": "I got an answer on Stack Overflow. Thanks for poking @barrytang , @Petermarcu  :)\nIt can be disabled in the launch.json file, located in the .vscode folder.\nhttp://stackoverflow.com/a/43958782/1544047\n. ",
    "haf": "@leecow I believe it places it not there, but in a subfolder there. Since I had /usr/local/share/dotnet/ the installer didn't work. It could pretty easily check where my dotnet binary is.\nThe problem is that you don't have a homebrew installer, marginalising dotnet's uptake in comparison to other languages and forcing the user to do an ungodly openssl symlink themselves without even briefly discussing why that symlink might not already be there and how it can affect programmers who compile native software themselves (making the install experience a bit YOLO.). @karelz How's F# for 2.0?. It's related if I'm going to try to release my F# packages with it, isn't it?. @leecow I didn't get my dotnet executable overwritten by the installer; I had to manually download the binaries and overwrite.\n~~\nI've found https://github.com/Microsoft/visualfsharp/issues/3069 but it only talks in terms of Visual Studio, so that's not relevant to me or anyone on linux or anyone on Mac \u2013 can't you use semver? What's v15????\nIt would be great if you had a homebrew installer for .Net Core v2 and F# \u2013 it would show the world you care about cross-platform development.. @cartermp Thank you for the clarification.. Ping, this needs fixing.. @ericstj I followed your heavy-handed, non-community discussed, deprecation and moved away from xbuild and onto the unproven and for F#-untested v5.2 of Mono, but the problem is still there, as described https://github.com/fsharp/FSharp.Compiler.Service/issues/795\nSo no, it's not xbuild that's at fault.\nI'll try changing that line, be right back with how it goes.. Thank you so much! \ud83d\ude0d . ",
    "lt72": "@vancem: did we upload the 1.1.2 symbols to DLC and //symweb ?. @sywhang @gregg-miskelly for investigation.. @mikem8361 PTAL. ",
    "anurse": "The problem is that you're registering a services associated with IUnitOfWork here:\ncsharp\n            services.AddTransient<IUnitOfWork, UnitOfWork>();\nBut then in your controller you're requesting a UnitOfWork here:\ncsharp\n       public StudentsController(UnitOfWork unitOfWork)\n       {\n           _unitofWork = unitOfWork;\n       }\nIf you change StudentsController to accept IUnitOfWork your error should go away.\nClosing, since this isn't a bug in .NET Core and the answer should resolve the problem. If you have further questions or issues about ASP.NET Core or Dependency Injection, I suggest posting issues in http://github.com/aspnet/Home or on StackOverflow, as you're more likely to find people familiar with ASP.NET Core in those forums.\nHope that helps!. ",
    "mackayj": "@Tratcher when was it changed? In the 1.1 version with VS 2017 I have to manually set it in the web.config or it doesn't authenticate properly.\nFor example deploying the default project will show:\n\"Hello, !\" in the top right where its supposed to show the username, with anon, asp.net impersonation, forms disabled and windows auth enabled in IIS. ",
    "liucong913": "test.docx\n@richlander , i want to dowdload data from the url(with fixed signature) in .net web proj ,it doesn't work since the url has changed(broke the signature),but worked in console proj.  see the file test.docx i uploaded.   \nbtw, both proj based on .net 4 framework.. ",
    "eByte23": "I am also having the same issue. see https://github.com/dotnet/cli/issues/6726\n. ",
    "RussKeldorph": "Correct, 32-bit ARM CoreCLR currently requires ARMv7 as a minimum.  64-bit requires ARMv8.  Wouldn't run on Pi Zero without major work.. From @shahid-pk on March 19, 2018 8:47\n2.0.0 is LTS, 2.0.  releases are bug fixes versions to the LTS so the latest version in that line the better and more bug fixes. 1.0.  are LTS versions too. But yes it should be mentioned somewhere if not already.. @richlander . @RhavoX \nThere's not much we can do without more information--preferably instructions to reproduce the crash.\nCan you provide a callstack when the crash happens at least?\nIs this a regression from a previous .NET Core version, or is 2.1.1 the first build you've tried?\nOthers may have better advice and/or questions.\n@jkotas @janvorli @dotnet/dotnet-diag . @jeffschwMSFT . From @ghost on June 30, 2018 16:45\nCurrent blocker for ARM32 in general is https://github.com/dotnet/cli/issues/8998. In my understanding it's about couple of lines of XML changes in dotnet/cli to pack the right binaries (like done for ARM64 https://github.com/dotnet/cli/pull/9011/files) and then testing cross build on x64 (which is a more involved task).\nThat said, CoreCLR/CoreFx/CoreSetup parts for ARM32 are done.. @Petermarcu Wasn't sure how big the gap is or where this request should be tracked.  Sorry if this is already covered somewhere else.. I don't think coreclr is the right place for this issue, but I'm not sure where to redirect it, so moving to core in hopes of finding the right home.. @sbomer @jeffschwMSFT . ",
    "melzoghbi": "Thanks for confirming this issue about .NET core is not supported on Pi Zero due to ARMv6 is not supported. . ",
    "cnxiaoby": "I think that in the future version, you should add the RouteContext parameter to the SelectBestActions virtual method. When some guy override the SelectBestActions method, some information in RouteContext will help us do some business logic judgments.. ",
    "CodeCharm": "You're right; https://github.com/dotnet/coreclr/pull/11944/commits/9a94cd2b5c8fe5143633c4823330e9d1c09fdef8 shows the deliberate cleaning out of that. I'll remove the link entirely.. ",
    "dazinator": "And here is the csproj file contents:\n````\n\n\nnet452\ntrue\nGluon.WebApplication\nExe\nGluon.WebApplication\n*obfuscated*\ntrue\n\n\n\n\n\n\nPreserveNewest\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPreserveNewest\n\n\nPreserveNewest\n\n\n\n```. The only difference seems to be this project uses \"Microsoft.NET.Sdk.Web\" rather than \"Microsoft.NET.Sdk\" - would that prevent msbuild /t:Restore from working?. I have closed this, and raised it here instead as thought it might be a more appropriate location: https://github.com/dotnet/sdk/issues/1314. ",
    "jobrien721": "When using IdentityServer4 and developing in macOS High Sierra with .NetCore Version 2.0.0 preview 1, It just randomly Stops the \"MVC\" (Web Application with Membership and Authorization)project. However the Web API project  works fine and has no problem. MVC is on port 5000 the API is on 49996 as some additional Information.Also when running the Identity Server Locally It will allow me to at least get to the Login Page but then this pops up after typing in credentials.\n\nBefore I updated to .NetCore 2.0 I was getting other errors which upgrading my .NetCore got rid of.\n . @bartonjs it happens right away, and thank you for the response\n. OK, thank you! I will check it out and let you know! . @bartonjs I just wanted to let you know, That updating to .NetCore 2.0.0-preview2 Did the fix for the Identity server and MVC issue! Im now facing another issue with the API, but with that said im gonna try to figure It out! If it becomes a huge problem I will post it here and if I solve it I will post it here if its not something small that I may have missed! Thank you again for your help!. @Petermarcu  Yes it is solved thank you but I believe I found another bug when running it locally it works perfectly fine(IdentityServer4,MVC, and API) however if I have the MVC or API try to hit the https Identity Server it Crashes and If I have the MVC try to point to the https API url it crashes as well. So my assumption at this point without further testing would be it may have something to do with the routing to a https.  Im not sure if it is just https or http as well but I thought I would mention it.   \nThank you in advance for your time!. @Petermarcu \nFirst off the Image above is the box its in but this is whats inside..\nProcess:               dotnet [2651]\nPath:                  /usr/local/share/dotnet/dotnet\nIdentifier:            dotnet\nVersion:               0\nCode Type:             X86-64 (Native)\nParent Process:        dotnet [2645]\nResponsible:           dotnet [2651]\nThere is more info but some is private info about my Max and what not..Thats the gist of the top part tho then theres a full CallStack with .dylib info etc. . . . yes I will try to sanitize it and and get it to you this evening or tomorrow morning!. ",
    "gu3st": "Hi:\nAttached is a crash log that I'm seeing in High Sierra.  It appears to occur when Crypto is attempted in High Sierra.\nThis is with dotnet core 1.1  \ndotnet_2017-06-19-182626_Gu3sts.crash.txt\n. I tried with 2.0, but my project doesn't seem to compile in 2.0. I haven't spent a lot of time to investigate into running it in 2.0 quite yet.\nEDIT: 2.0 does fix it.. ",
    "kevcunnane": "We've found an issue using SqlClient with High Sierra. See https://github.com/dotnet/corefx/issues/22453 for the bug report. It's a simple repro and seems like it may be related to the SSL issues you reported to Apple?. ",
    "vijayrkn": "+owners of razor view compilation tool\n@NTaylorMullen @pranavkm . Currently all webprojects have this set to true by default. Should we change this? \nhttps://github.com/aspnet/websdk/blob/afbcec9b0951d09088f26e98e6aca6114e0d32ee/src/ProjectSystem/Microsoft.NET.Sdk.Web.ProjectSystem.Targets/netstandard1.0/Microsoft.NET.Sdk.Web.ProjectSystem.props#L24. @JeffreyMcBride I just tried publishing a netcoreapp2.0 (empty web app) with win10-x64 rid from VS & it created an exe in the publish output folder. This is the sample project that I tried- https://github.com/vijayrkn-test/netcoreapp20_win10_x64/blob/master/WebApplication1/WebApplication1.csproj\nWould it be possible to provide a sample project where publish from VS is not working correctly? I would be happy to take a look.. @JeffreyMcBride \nThe publish profiles were missing the RuntimeIdentifier which was causing the issue:\nCan you please add this to all the publish profiles?\n<RuntimeIdentifier>win10-x64</RuntimeIdentifier>\nhttps://github.com/JeffreyMcBride/ASPNETCore2PreviewTemplates/blob/master/01%20Empty/Properties/PublishProfiles/FolderProfile.pubxml\nhttps://github.com/JeffreyMcBride/ASPNETCore2PreviewTemplates/blob/master/02%20Web%20API/Properties/PublishProfiles/FolderProfile.pubxml\nhttps://github.com/JeffreyMcBride/ASPNETCore2PreviewTemplates/blob/master/03%20Web%20Application/Properties/PublishProfiles/FolderProfile.pubxml\nAlternatively,  if you are planning to have only 1 RID, then you can update the 'RuntimeIdentifiers' to 'RuntimeIdentifier' in the csproj and that should also work. \n. >Then I tried changing the CSPROJ to use win10-x64. This did produce an .EXE file, but curiously there was no win10-x64 added to the .PUBXML.\nThis is the expected behavior. We don't write the RuntimeIndentifer to the pubxml if it is already present in the csproj. The pubxml automatically gets all the properties from the csproj since pubxml is an msbuild file.\nFrom the description of the issue, It looks like there is still an issue here with the publish settings RID dropdown that it is not writing the RID to the pubxml unless a value is changed in the dropdown. We will investigate this issue.  As a work-around , you can add the RID to the pubxml and publish from VS should work as expected. Thanks for reporting this issue.\n. >Is VS using dotnet publish behind the scenes?\nVS does not call 'dotnet publish' directly, but uses the same set of targets that 'dotnet publish' uses. VS publish and dotnet publish should behave the same when the same set of parameters are passed to it. \nIn this case, a specific runtime property was passed to 'dotnet publish' from commandline but from VS this property was not passed\n\nI did not provide it a profile but instead specified a runtime directly dotnet publish --runtime win10-x64. Is that correct? Is there a way to pass a PUBXML to dotnet.exe?\n\nBoth are fine. You can pass the properties directly to 'dotnet publish' or you can pass a profile to 'dotnet publish'. Passing the profile to dotnet publish is only supported for web projects. \nfor e.g: if you want to publish your web app to azure from commandline, then you can use \ndotnet publish <webapp>.csproj /p:PublishProfile=<AzureProfile> /p:Password=<DeploymentPassword>\nYou can find samples of profiles here https://github.com/aspnet/websdk#microsoftnetsdkpublish. The above command will look for a profile named 'AzureProfile.pubxml' in Properties\\PublishProfiles\\\n. @sturlath @MovGP0 \nThis issue is fixed in Visual Studio 2017 version 15.3\nYou can find the release notes with the list of issues fixed in this release.\nhttps://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes#15.3\nVS download link - https://www.visualstudio.com/downloads\n. I think It is failing from VS because the runtimeIdentifier to use during publish is not specified. You are specifying it for the commandline scenario when you pass this flag  (-r win-x64) but this is not specified in the VS publish scenario.\nSolution:\n1.You can either change the RuntimeIdentifiers to RuntimeIdentifier in the csproj and publish from VS should succeed.\n2. You can keep the RuntimeIdentifiers in csproj but for the profile that you are publishing, you can specify the RuntimeIdentifier to use. This can be done from the profile settings UI or adding this property(RuntimeIdentifier) to the pubxml under Properties\\PublishProfiles\\profilename.pubxml\n. if you want to specify multiple RIDs in the csproj, then you need to set RuntimeIdentifiers instead of RuntimeIdentifier in the csproj (In the above screenshot you are missing the trailing 's' ).\n<RuntimeIdentifiers>win-x64;osx.10.11-x64;rhel-x64</RuntimeIdentifiers>\nOnce this is set, you can restore the project and go to the publish setting page and pick the RID that you need to publish with (and click save). Then you will be able to publish for that specific RID. . @vulcanlee Thank you for reporting this issue. We can reproduce the issue on our side with the latest released bits. We will investigate the root cause and get back.\n/cc @mlorbetske \n. @FelschR - The fix for this issue will be available in the next upcoming release. Until then the work-around will be to add the following to the csproj\n<RuntimeIdentifier>win-x64</RuntimeIdentifier>\n. The fix is available in the current VS preview - https://www.visualstudio.com/thank-you-downloading-visual-studio/?ch=pre&sku=Enterprise&rel=15 . @yangar The fix is in 15.6 preview (link in the above comment). Can you please try with the latest VS preview build?. As I mentioned in my above comment the fix is only available in 15.6. @vaklove The fix is available only in 15.6 and above. https://github.com/dotnet/core/issues/1039#issuecomment-361039743\nYou can install the latest preview version of 15.6 from here and that should have the fix  https://www.visualstudio.com/thank-you-downloading-visual-studio/?ch=pre&sku=Enterprise&rel=15. @Retik - Can you please confirm if you have the RuntimeIdentifiers/RuntimeIdentifier specified in csproj & RuntimeIdentifier specified in the pubxml?\n. @Retik - I just tried this scenario with the latest 15.6 preview release and VS was generating the right publish outputs for the RIDs you specified above:\nSample app that I tried: https://github.com/vijayrkn/RIDPublishSample\nwin10-x64 output - https://github.com/vijayrkn/RIDPublishSample/tree/master/ConsoleApp32/bin/Release/PublishOutput/win10-64\nUbuntu-x64 output - https://github.com/vijayrkn/RIDPublishSample/tree/master/ConsoleApp32/bin/Release/PublishOutput/Ubuntu-x64\nPublishProfiles - https://github.com/vijayrkn/RIDPublishSample/tree/master/ConsoleApp32/Properties/PublishProfiles\nThe above output matched the output from cli. Are you seeing a different behavior? If so, can you please share a sample project?\n. Glad to know it is working. . @gitchomik you can set the RuntimeIdentifier on the dependent projects csproj and publish should succeed. \n\nBTW: It also does NOT work, when publish ASP.NET Core\n\nJust tried the same scenario on ASP.NET core projects and it behaves the same way as .NET core projects. Can you please provide a sample project where you are seeing an issue with publish?. @joepour you need to update the VS version to 15.6. The above VS version is still 15.5.7\n@gitchomik I will take a look at the same project you provided.\n. @gitchomik - Sorry for the late response. I thought I replied to this thread but apparently didn\u2019t. \nThe issue you are running into is that the RID is not flowing to the dependenct projects. If you specify the RuntimeIdentifier in ClassLibraryA, then publish should work fine. \nThis issue is not Publish specific, If you clean all the projects. add a single RID to the Console App and build, you will notice that the ClassLibraryA is not built for the RID specified in ConsoleApp. Publish fails because publish doesnt find the RID specific artifacts for ClassLibraryA\n@Pilchie - Is this something tracked by the .NET Project system - To pass the RID to all the dependent projects during build?\n. @dsplaisted - Running dotnet publish -r <rid>works fine. \n@gitchomik - I looked at your repro project again and if you remove this line from classlibrary, then publish should work fine.\nhttps://github.com/gitchomik/dotnet_core_issues_1039/blob/master/ClassLibraryA/ClassLibraryA.csproj#L4\nWhen the RuntimeIdentifiers is specified in the dependent project, the dotnet project system is looking for the dlls in the RID specific folder for some reason. . @afernandes This issue is fixed in VS 15.7. Can you please update to the latest version and try?. @gitchomik - What issues are you running into? With 15.7, Publish supports both SCD (Self-Contained) & FDD (Framework dependent) deployments with RIDs. It is not required to add RIDs to the csproj any more. Publish will do a restore and publish. \nI took your repro project (https://github.com/gitchomik/dotnet_core_issues_1039) removed all the RIDS from all the csproj. From the Publish dialog, selected SCD with RID & published and everything worked as expected. \n\nWhen the RuntimeIdentifiers is specified in the dependent project, the dotnet project system is looking for the dlls in the RID specific folder.\n\nIf you have multiple RIDs in the depdent project, then you may run into this issue but you dont need to add RIDs to the csproj any more.\n. @doggy8088  - can you please share the output log?\n@gitchomik - What I meant is - you are not required to add RIDs to the csproj if they are using it only during publishing (Adding the RIDs in csproj is still supported). If you want to add additional RIDs, you can add them to the publish profile as well under -  Properties\\Publish Profiles\\<profile>.pubxml. @doggy8088 - I saw the video and the stack above. Can you also please share the build output log? It should have information on the restore and build during publish.. @doggy8088 - Thank you for sharing the log. From the log, it looks like you have an older version of CLI. With the new CLI, the restore should happen to obj\\Publish\\<RID> folder instead. Can you please update the CLI version to the latest - https://www.microsoft.com/net/download/dotnet-core/sdk-2.1.300-rc1 ? This should fix the issue.. @afernandes - I tried your repro project (https://github.com/afernandes/Projeto-Piloto). If you add the following RuntimeIdentifier to all the dependent projects, then it should work fine. \n<RuntimeIdentifier>win-x64</RuntimeIdentifier>\n. @Eilon - You can move this to aspnet/websdk and we will take a look.. This is a VS request. The right place for this feature request would be https://developercommunity.visualstudio.com/spaces/8/index.html.\nFrom VS -> Help -> Send Feedback -> Provide a Suggestion.. >  Is this something that happens with packages.config, but not PackageReference? \nYes, Running the transform is only supported with packages.config. This feature is not available with PackageReference. Both NuGet and Websdk uses the same Xml document transformation technology. \nhttps://www.nuget.org/packages/Microsoft.Web.Xdt/\nYou can use the Xdt to run your own transforms. This specific issue should go to NuGet/Home. ",
    "pranavkm": "@livarcocc this is a known issue (https://github.com/aspnet/MvcPrecompilation/issues/102) and isn't getting fixed until 2.1.0. Disabling the tool (like you did via MvcRazorCompileOnPublish is an acceptable option for now).. cc @DamianEdwards. I think we were ok shipping it this way for 2.0.. @richlander - there's an bug with the precompilation tool that prevents publishing for a target that's not the current OS. There are workarounds available for it (https://github.com/aspnet/MvcPrecompilation/issues/102#issuecomment-287653103) for it. The other alternative is to disable precompilation as part of publish which is what this PR is attempting to do.. This seems like csc is trying to compile the _ViewStart.cshtml. Could you verify that you haven't accidentally included it to in the Compile itemgroup in your csproj?. > Just out of curiosity, is this the expected behavior or will this change in a future version?\nI'd think this is expected behavior - with RazorCompileOnBuild or RazorPublishOnBuild enabled, you're effectively getting two binaries per project - one for the app and one for Razor views. They compile different sets of files but we want to share meaningful properties, like versions, between the two assemblies. Our thought was that turning off assembly info for the main one should also disable it for the compiled view, you're more than likely doing something not standard. \nIf there's a better approach we could take to addressing this, we'd be happy to consider it. Feel free to file an issue in https://github.com/aspnet/Razor/issues with suggestions.. This issue was moved to aspnet/Mvc#8044. @memark what browser \\ OS are you using?. \ud83c\udd99 \ud83d\udcc5 . ",
    "olivd": "Sorry yes, 1.0.3 and 1.0.4\nMac (cli works, visual studio for mac does not), Windows nothing works, tests just hang.. Seeing it works in the CLI I am not going to do that. I was just trying to give you guys a heads up.. Just an FYI as it looks like you deleted the issue I was having.\nIt seems like the issue was due to a version discrepancy in our\ndependencies in our csproj files on referenced projects, after getting the\nlatest versions across all our csproj files the unit tests are running\nwithout any issues on all platforms.\nCheers,\nOliver D'Alton Software Development Team Lead\nT: 02 9694 0397 F: 02 9694 0351\nE: oliver.dalton@winning.com.au\nA: Level 2, 20A Danks Street, Redfern, NSW 2016\nwww.winningappliances.com.au http://www.winningappliances.com.au/\n[image: www.winningappliances.com.au] http://www.winningappliances.com.au/\nOn 15 June 2017 at 12:42, Peter Marcu notifications@github.com wrote:\n\nI think we'd need a repro in order to make this actionable.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/681#issuecomment-308612694, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ASqG7FPeMfEuHqifyycjAgLShGWNEdREks5sEJoAgaJpZM4N2Sxr\n.\n. Oh cool, I couldn't find this earlier. No worries I will close it now. \n",
    "nopara73": "I see, thank you. Is there any conversation going on about cross platform GUI on .NET Core? I thown it together with Electron for my testing release, however before I give out my first stable release in the coming years I have to properly rewrite it. My point is if Microsoft would support cross platform GUI, I would choose to not go down on the nodejs path.. I think no need to reopen it, the issue is resolved (=the original question is answered), the followup questions would rather go to something like \"personal guidance\" category.. ",
    "bgardner87": "I wasn't sure where to ask, I'll definitely post it there, thanks!. ",
    "fuquanli": "OK\uff0cthank you\uff01. ",
    "ukphillips": "The correct (and only) way to really do this is to inject the HttpContextAccessor into the class or service you want to use it in.. The correct (and only) way to really do this is to inject the HttpContextAccessor into the class or service you want to use it in.. This should be able to get you in the right direction. https://www.strathweb.com/2016/12/accessing-httpcontext-outside-of-framework-components-in-asp-net-core/. This should be able to get you in the right direction. https://www.strathweb.com/2016/12/accessing-httpcontext-outside-of-framework-components-in-asp-net-core/. ",
    "naveedahmed1": "@Eilon so for the sake of clarity, suppose we have a repository class, that neesd access to HttpContext.Current , we would first inject HttpContextAccessor  in the controller calling that class, and then pass reference to context to the class from controller correct?. Thank you so much @Eilon for quick reply, sorry I meant a utility class but got your point.. ",
    "Liturgist": "Sorry. When I could not find my post, it appears that I happened into another group. I honestly do not know the best group to address this. Thank you for closing this one.. ",
    "kengey": "Hi @Petermarcu , yes, I followed those steps. Except that I first created my ASP.NET Core project using VS2017 (NET Core 1.1) and then followed the steps on the link to A: change to .NET Core 2.0 and B: publish to linux-arm. D:\\Documenten\\dev\\NetCoreWebApplication1\\NetCoreWebApplication1>dotnet --version\n2.0.0-preview1-005977\nAnd this is my csproj:\n```\n\n\nnetcoreapp2.0\nwin-arm;linux-arm\n\n\n$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;\n\n\naspnet-NetCoreWebApplication1-8560e8ed-3309-4fc5-bd6e-eff390c15b9f\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPreserveNewest\n\n\n\n``\n. @Petermarcu , I've installed all packages by doingsudo apt-get install libunwind8 libunwind8-dev gettext libicu-dev liblttng-ust-dev libcurl4-openssl-dev libssl-dev uuid-dev unzip`\nMy output is not containing libuv, only:\n\n. Creating and publishing a new project from command line is corretly outputting libuv.\nReferencing the pointed libuv nuget package from my project is trouble, but that is all related to having these 1.X references.\nAnyhow, I think it is clear that this is related to me having initially created a .Net Core 1.1 project and then switching to 2.0.. please also notice that VS2017 is not showing .NET core 2.0 as a selectable Target Framework.\n\nBut I understand this is an entirely different issue non related to this one.. ",
    "g0t4": "I like the idea of having a single place to go to see everything that happened but this list is daunting. Commits are too granular and quite often irrelevant or indecipherable.\nI really like what Docker does (https://github.com/moby/moby/releases/tag/v17.03.2-ce). They link to pull requests (maybe issues too) and only list substantial changes. They also group related PRs and I believe they sanitize a one-liner per change for quick consumption. This makes it incredibly easy to keep up with all the change in Docker and its related components. I would love to have the same for .NET Core and ASP.NET Core, etc.\nSomething like we have now in individual components but aggregated: \nhttps://github.com/aspnet/Mvc/releases/tag/rel%2F2.0.0-preview2\n . ",
    "JeffreyMcBride": "dotnet --version\ndotnet --info\ndotnet --diagnostics\nAll work fine\ndotnet -v\ndotnet -i\ndotnet -d\nAll return Unknown option even though help indicates\n-v|--version\n-i|--info\n-d|--diagnostics. dotnet --version\ndotnet --info\ndotnet --diagnostics\nAll work fine\ndotnet -v\ndotnet -i\ndotnet -d\nAll return Unknown option even though help indicates\n-v|--version\n-i|--info\n-d|--diagnostics. @Petermarcu, is there an appropriate place to post VS2017 Preview issues related to .NET Core 2 Preview in addition to the normal in-app \"Report a Problem...\" system?  Thanks. . @Petermarcu, is there an appropriate place to post VS2017 Preview issues related to .NET Core 2 Preview in addition to the normal in-app \"Report a Problem...\" system?  Thanks. . @Petermarcu Thanks.  Quick version, I can provide more detail if appropriate.  VS2017 appears not to use dotnet publish for its publishing process.  When I publish a web app using a win10-x64 RID SCD profile with VS2017 15.3 P7, no EXE is produced to start Kestrel in lieu of dotnet run.  But dotnet publish --runtime win10-x64 does produce .exe, and it can start the app fine.. @Petermarcu Thanks.  Quick version, I can provide more detail if appropriate.  VS2017 appears not to use dotnet publish for its publishing process.  When I publish a web app using a win10-x64 RID SCD profile with VS2017 15.3 P7, no EXE is produced to start Kestrel in lieu of dotnet run.  But dotnet publish --runtime win10-x64 does produce .exe, and it can start the app fine.. @Petermarcu FYI, I ran a class last week using ASP.NET Core 2 preview 2.  Almost everything was fine! \n3 issues:\n1) .exe publish issue above\n2) IsolatedScopes=true did not append the extra logging info with \n         using (_logger.BeginScope(\"Message to append\")) { // code and logging statements }\n3) Installing controller scaffolding creates an error then a warning:\n         Error: Microsoft.VisualStudio.Web.CodeGeneration.Design package targeting v2.0.0 (final release)\n                   Downgrading to v2.0.0-preview fixes issue and eliminates error\n         Warning: Microsoft.Composition 1.0.27 is targeting .NET Framework\n                         Upgrading to 1.0.30 (or now 1.0.31) targets Core and eliminates warning\nNot bad for preview version.... @Petermarcu FYI, I ran a class last week using ASP.NET Core 2 preview 2.  Almost everything was fine! \n3 issues:\n1) .exe publish issue above\n2) IsolatedScopes=true did not append the extra logging info with \n         using (_logger.BeginScope(\"Message to append\")) { // code and logging statements }\n3) Installing controller scaffolding creates an error then a warning:\n         Error: Microsoft.VisualStudio.Web.CodeGeneration.Design package targeting v2.0.0 (final release)\n                   Downgrading to v2.0.0-preview fixes issue and eliminates error\n         Warning: Microsoft.Composition 1.0.27 is targeting .NET Framework\n                         Upgrading to 1.0.30 (or now 1.0.31) targets Core and eliminates warning\nNot bad for preview version.... @vijayrkn Please find a solution with 3 projects, an Empty Web App, Web API, and Web App (MVC) at this location:\nhttps://github.com/JeffreyMcBride/ASPNETCore2PreviewTemplates\nThese are unmodified project templates created using VS2017 15.3 Preview 7.  I left the bin, obj, and wwwroot/lib folders as is so its a bit big.  But wanted you to see the output from the publish I did on each of the 3 projects.  No .EXE created on any of the 3.  This is not the solution I originally noticed the issue, and I can push that as well but since these were clean I thought they would be more useful.  Please note the other solution has multiple projects in it as well, MVC, Web API, and Class Library (Core), not sure if that is related.\nJeff\n. @vijayrkn Please find a solution with 3 projects, an Empty Web App, Web API, and Web App (MVC) at this location:\nhttps://github.com/JeffreyMcBride/ASPNETCore2PreviewTemplates\nThese are unmodified project templates created using VS2017 15.3 Preview 7.  I left the bin, obj, and wwwroot/lib folders as is so its a bit big.  But wanted you to see the output from the publish I did on each of the 3 projects.  No .EXE created on any of the 3.  This is not the solution I originally noticed the issue, and I can push that as well but since these were clean I thought they would be more useful.  Please note the other solution has multiple projects in it as well, MVC, Web API, and Class Library (Core), not sure if that is related.\nJeff\n. @vijayrkn  Interesting results.  Before I changed anything, I checked the Publish Profile Dialog Box | Settings options, and it showed that the profile was set to use win10-x64 as the RID, even though as you pointed out, there is no <RuntimeIdentifier>win10-x64</RuntimeIdentifier> in the PUBXML.  See link for image:\nhttps://github.com/JeffreyMcBride/ASPNETCore2PreviewTemplates/blob/master/PublishProfileDialogBeforeEditingPUBXML.png\nThen I tried changing the CSPROJ to use <RuntimeIndentifer>win10-x64</RuntimeIdentifier>.  This did produce an .EXE file, but curiously there was no <RuntimeIndentifer>win10-x64</RuntimeIdentifier> added to the .PUBXML.  The Publish Profile Dialog | Settings again indicated that it was using the win10-x64 RID.\nThen I changed the CSPROJ to use <RuntimeIdentifiers>win10-x64;osx.10.11-x64</RuntimeIdentifiers>.  This did not produce an .EXE file and again no runtime was listed in the .PUBXML.  The Publish Profile Dialog | Settings again indicated it was using win10-x64 RID.  \nI then changed Publish Profile Dialog | Settings to use the osx.10.11-x64 RID, but did not actually publish since .EXE wouldn't necessarily be produced for this RID, and I verified that the PUBXML now had <RuntimeIdentifier>osx.10.11-x64</RuntimeIdentifier>.  If I then changed the setting back to win10-x64 RID, the PUBXML also had <RuntimeIdentifier>win10-x64</RuntimeIdentifier>.  And this did produce an .EXE file.\nSo the issue seems to be with CSPROJ <RuntimeIndentifiers> not adding the appropriate RID to the PUBXML initially but will if you manually change the runtime setting, and CSPROJ <RuntimeIndentifier> doesn't seem to need to in order to produce the .EXE file.\n. @vijayrkn  Interesting results.  Before I changed anything, I checked the Publish Profile Dialog Box | Settings options, and it showed that the profile was set to use win10-x64 as the RID, even though as you pointed out, there is no <RuntimeIdentifier>win10-x64</RuntimeIdentifier> in the PUBXML.  See link for image:\nhttps://github.com/JeffreyMcBride/ASPNETCore2PreviewTemplates/blob/master/PublishProfileDialogBeforeEditingPUBXML.png\nThen I tried changing the CSPROJ to use <RuntimeIndentifer>win10-x64</RuntimeIdentifier>.  This did produce an .EXE file, but curiously there was no <RuntimeIndentifer>win10-x64</RuntimeIdentifier> added to the .PUBXML.  The Publish Profile Dialog | Settings again indicated that it was using the win10-x64 RID.\nThen I changed the CSPROJ to use <RuntimeIdentifiers>win10-x64;osx.10.11-x64</RuntimeIdentifiers>.  This did not produce an .EXE file and again no runtime was listed in the .PUBXML.  The Publish Profile Dialog | Settings again indicated it was using win10-x64 RID.  \nI then changed Publish Profile Dialog | Settings to use the osx.10.11-x64 RID, but did not actually publish since .EXE wouldn't necessarily be produced for this RID, and I verified that the PUBXML now had <RuntimeIdentifier>osx.10.11-x64</RuntimeIdentifier>.  If I then changed the setting back to win10-x64 RID, the PUBXML also had <RuntimeIdentifier>win10-x64</RuntimeIdentifier>.  And this did produce an .EXE file.\nSo the issue seems to be with CSPROJ <RuntimeIndentifiers> not adding the appropriate RID to the PUBXML initially but will if you manually change the runtime setting, and CSPROJ <RuntimeIndentifier> doesn't seem to need to in order to produce the .EXE file.\n. @vijayrkn Thanks for taking the time to troubleshoot it with me and giving me some more insight into the inner workings of VS Publish.  \nQuestion if I may?  Is VS using dotnet publish behind the scenes?  Based on our findings, I'm thinking the difference between it not working in VS and the same project producing an EXE using dotnet publish is that I did not provide it a profile but instead specified a runtime directly dotnet publish --runtime win10-x64.  Is that correct?  Is there  a way to pass a PUBXML to dotnet.exe?. @vijayrkn Thanks for taking the time to troubleshoot it with me and giving me some more insight into the inner workings of VS Publish.  \nQuestion if I may?  Is VS using dotnet publish behind the scenes?  Based on our findings, I'm thinking the difference between it not working in VS and the same project producing an EXE using dotnet publish is that I did not provide it a profile but instead specified a runtime directly dotnet publish --runtime win10-x64.  Is that correct?  Is there  a way to pass a PUBXML to dotnet.exe?. ",
    "danwalmsley": "Since trying the preview2 building my project I get:\nC:\\dev\\repos\\AvalonStudio\\AvalonStudio\\AvalonStudio.Toolchains.LocalGCC\\AvalonStudio.Toolchains.LocalGCC.csproj : error NU1003: PackageTargetFallback and AssetTargetFallback cannot be used together. Remove PackageTargetFallback(deprecated) references from the project environment. [C:\\dev\\repos\\AvalonStudio\\AvalonStudio\\AvalonStudio\\AvalonStudio.csproj]\nI am referencing some .net 4.5 project and nugets, which has worked on preview 1, but now there is some asset fallback.\nHow do I make this work again?\n. @Petermarcu ah I removed all  in my project and it started to work again.. ",
    "rrelyea": "@danwalmsley - \nWe have since improved that error to:\nPackageTargetFallback is deprecated. Replace PackageTargetFallback references with AssetTargetFallback in the project environment.\nMore details...PackageTargetFallback worked like imports did in Project.json.\nThe teams have realized that our implementation of that wasn't ideal.\nIn order to not break old projects/packages -- we created AssetTargetFallback which is implicitly set for netcoreapp/netstandard2.0 projects via targets.\nSome project templates, in the past, used PackageTargetFallback.\nWhen upgrading those projects to v2.0, you end up with both PTF and ATF in effect. Thus we error.\nIdeally, you just move to ATF from your existing PTF.\n. Working on creating NuGet/home issues ... will link when created. \nUpdate: Actually, I lied...let's drill into these 2 issues a bit first.... @dsyme  - in dotnet cli v1 previews, we used to walk all the sub directories. I had thought we changed that when we switched to make restore recursive (across project references) by defeault. do you have the same problem if you do a \"dotnet restore --no-dependencies\" in that same directory?. @MathiasKowoll - can you please give me repro steps for your problem (full details), and how you avoided it.. @forki - I am unable to repro.\nafter you have done dotnet new, a restore should have already been completed. \nwhen you do a build, it will also do a restore, if it deems that one is necessary.\nCan you please file an issue in NuGet/Home about the issue you are seeing, with repro steps (including setup steps if necessary?\n. Yes, this is a known limitation of projects which use packages.config (nuget v1) to manage their dependencies.\nMoving that project to PackageReference (nuget v4) will avoid that problem.\nPlease engage with the nuget team at github.com/nuget/home as needed.. This probably requires a fix in the templates or the SDK? (SDK team?)\nMVC wants 2.1.1 of NetCoreApp\nUnit test projects wants 2.1.0 of NetCoreApp.\nNormally, this is a NuGet warning, but SDK projects have turned NU1605 into an error on purpose (Warning as Error).. My guess is that this should be closed, in favor of the following info I got from @dsplaisted in email:\nThis is part of a class of issues we have.  If a RID is specified, and the project is an Exe, then by default we\u2019ll use the latest patch of Microsoft.NETCore.App.  We run into issues when you reference a project that uses the latest patch from one that doesn\u2019t.\nOther related issues:\nhttps://github.com/dotnet/sdk/issues/2364\nhttps://github.com/dotnet/sdk/issues/2253\n. likely xamarin repos are the right place to ask for best assistance. we are working with those folks to continue to improve error messages and guidance...but their world has challenges due to android platform requirements (as I understand them).. also, we have warning/error documentation that may help explain ways to address: https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1605 . Generally, this is how this kind of thing works:\nPut a packagereference in you csproj\nDotnet build\n   This will do an implicit restore, and put any packagereference sand their transitive dependencies into the global package folder on the dev box. This also builds a deps.json file in the bin dir.\nDotnet publish \n    This is probably necessary to take all the binaries from the dev machine and create a directory full of the entire set of files that need to be copied to the other computer (the pi?)\nThen run the app.\nYou should never need to do a nuget install or restore on the execution computer...just the dev box.\nGiven that info, once they try that, or give reasons why that may not make sense, maybe we\u2019ll know where to route.. Nuget 5.0p3 just shipped support for making build assets transitive.\nUsing targets, it is possible to do xdt transforms.\nMay have example if you work with us at nuget/home. See https://github.com/NuGet/Home/issues/5954. ",
    "cmaslen": "Not sure if this is the right place since this looks more like a VS issue but the following doesn't work after preview 2:\n\nCreate ASP.NET Core Web project in VS 15.3.0 Preview 3.\nThis defaults to targeting .NET Core 1.1.\nOpen project properties and change project to target .NET Core 2.0\n\nBuilding the project results in a bunch of package downgrade errors:\nThe work around is to manually edit the project file and change the dependencies as follows:\n    error NU1605: Detected package downgrade: System.Diagnostics.Tools from 4.3.0 to 4.0.1. Reference the package directly from the project to select a different version. \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> Microsoft.AspNetCore.Hosting.Abstractions (>= 1.1.2) -> NETStandard.Library (>= 1.6.1) -> System.Diagnostics.Tools (>= 4.3.0) \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> System.Diagnostics.Tools (>= 4.0.1)\n    error NU1605: Detected package downgrade: System.Net.Primitives from 4.3.0 to 4.0.11. Reference the package directly from the project to select a different version. \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> Microsoft.AspNetCore.Hosting.Abstractions (>= 1.1.2) -> NETStandard.Library (>= 1.6.1) -> System.Net.Primitives (>= 4.3.0) \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> System.Net.Primitives (>= 4.0.11)\n    error NU1605: Detected package downgrade: System.Net.Sockets from 4.3.0 to 4.1.0. Reference the package directly from the project to select a different version. \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> Microsoft.AspNetCore.Hosting.Abstractions (>= 1.1.2) -> NETStandard.Library (>= 1.6.1) -> System.Net.Sockets (>= 4.3.0) \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> System.Net.Sockets (>= 4.1.0)\n    error NU1605: Detected package downgrade: System.Diagnostics.Tools from 4.3.0 to 4.0.1. Reference the package directly from the project to select a different version. \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> Microsoft.AspNetCore.Http.Abstractions (>= 1.1.2) -> NETStandard.Library (>= 1.6.1) -> System.Diagnostics.Tools (>= 4.3.0) \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> System.Diagnostics.Tools (>= 4.0.1)\n    error NU1605: Detected package downgrade: System.Net.Primitives from 4.3.0 to 4.0.11. Reference the package directly from the project to select a different version. \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> Microsoft.AspNetCore.Http.Abstractions (>= 1.1.2) -> NETStandard.Library (>= 1.6.1) -> System.Net.Primitives (>= 4.3.0) \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> System.Net.Primitives (>= 4.0.11)\n    error NU1605: Detected package downgrade: System.Net.Sockets from 4.3.0 to 4.1.0. Reference the package directly from the project to select a different version. \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> Microsoft.AspNetCore.Http.Abstractions (>= 1.1.2) -> NETStandard.Library (>= 1.6.1) -> System.Net.Sockets (>= 4.3.0) \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> System.Net.Sockets (>= 4.1.0)\n    error NU1605: Detected package downgrade: System.Diagnostics.Tools from 4.3.0 to 4.0.1. Reference the package directly from the project to select a different version. \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> Microsoft.AspNetCore.Http.Extensions (>= 1.1.2) -> NETStandard.Library (>= 1.6.1) -> System.Diagnostics.Tools (>= 4.3.0) \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> System.Diagnostics.Tools (>= 4.0.1)\n    error NU1605: Detected package downgrade: System.Net.Primitives from 4.3.0 to 4.0.11. Reference the package directly from the project to select a different version. \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> Microsoft.AspNetCore.Http.Extensions (>= 1.1.2) -> NETStandard.Library (>= 1.6.1) -> System.Net.Primitives (>= 4.3.0) \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> System.Net.Primitives (>= 4.0.11)\n    error NU1605: Detected package downgrade: System.Net.Sockets from 4.3.0 to 4.1.0. Reference the package directly from the project to select a different version. \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> Microsoft.AspNetCore.Http.Extensions (>= 1.1.2) -> NETStandard.Library (>= 1.6.1) -> System.Net.Sockets (>= 4.3.0) \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> System.Net.Sockets (>= 4.1.0)\n    error NU1605: Detected package downgrade: System.Diagnostics.Tools from 4.3.0 to 4.0.1. Reference the package directly from the project to select a different version. \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> Microsoft.Extensions.FileProviders.Physical (>= 1.1.1) -> NETStandard.Library (>= 1.6.1) -> System.Diagnostics.Tools (>= 4.3.0) \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> System.Diagnostics.Tools (>= 4.0.1)\n    error NU1605: Detected package downgrade: System.Net.Primitives from 4.3.0 to 4.0.11. Reference the package directly from the project to select a different version. \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> Microsoft.Extensions.FileProviders.Physical (>= 1.1.1) -> NETStandard.Library (>= 1.6.1) -> System.Net.Primitives (>= 4.3.0) \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> System.Net.Primitives (>= 4.0.11)\n    error NU1605: Detected package downgrade: System.Net.Sockets from 4.3.0 to 4.1.0. Reference the package directly from the project to select a different version. \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> Microsoft.Extensions.FileProviders.Physical (>= 1.1.1) -> NETStandard.Library (>= 1.6.1) -> System.Net.Sockets (>= 4.3.0) \n    error NU1605:  MVCPreview2App (>= 1.0.0) -> Microsoft.VisualStudio.Web.BrowserLink (>= 1.1.2) -> System.Net.Sockets (>= 4.1.0)\n    1>MVCPreview2App -> C:\\gitcode\\MVCPreview2App\\MVCPreview2App\\bin\\Debug\\netcoreapp2.0\\MVCPreview2App.dll\nThe work around is to manually change the versions in the project file as follows\n<ItemGroup>\n    <PackageReference Include=\"Microsoft.ApplicationInsights.AspNetCore\" Version=\"2.0.0\" />\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.0.0-preview2-final\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.0.0-preview2-final\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.0.0-preview2-final\" />\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"2.0.0-preview2-final\" />\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"2.0.0-preview2-final\" \n/>\n</ItemGroup>\n\n<ItemGroup>\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0-preview2-final\" />\n</ItemGroup>\n\n. ",
    "WillooWisp": "Running a self-contained netcoreapp2.0 preview 2 on arm (RPI2) gives me this exception now matter what I do or what references I try to update.\nCould not load file or assembly 'System.Private.ServiceModel, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.. @Petermarcu I cannot share the project, but I can try to reproduce it, my guess is that it might be due to referencing the Microsoft.AspNet.WebApi.Client 5.2.3, but I have tried the Microsoft.AspNet.WebApi.Client 5.2.4-alpha1-170629 as well without any difference. It is only a problem on arm, not on windows.. @Petermarcu No that was a wrong guess from my side, removed the WebApi.Client dependency and commented out all code related to that. Still get:  Could not load file or assembly 'System.Private.ServiceModel, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.. @Petermarcu I finally nailed it down to this line of code, throw new CommunicationException. When referencing CommunicationException in the code I get the \"Could not load file or assembly 'System.Private.ServiceModel, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\" when running the console app, otherwise not.. I am able to build and run our ported .NET Core 2.0 app with CLI tools, dotnet build and publish. It is not possible in latest preview of Visual Studio 2017 with latest updates however. I get different build errors. Is this a know issue or something you want to investigate further?. @richlander I nailed it down to this: Unable to build .NET Core 2.0 app in Visual Studio 2017 (latest preview) when referencing the one and only NuGet package \"Microsoft.AspNetCore.All\".  Referencing the individual packages as in .NET Core 1.1 works though.\nErrors:\nerror CS0234: The type or namespace name 'Mvc' does not exist in the namespace 'Microsoft.AspNetCore' (are you missing an assembly reference?)\nerror CS0246: The type or namespace name 'Controller' could not be found (are you missing a using directive or an assembly reference?)\nerror CS0246: The type or namespace name 'RouteAttribute' could not be found (are you missing a using directive or an assembly reference?)\nerror CS0246: The type or namespace name 'HttpGetAttribute' could not be found (are you missing a using directive or an assembly reference?)\nerror CS0246: The type or namespace name 'HttpPostAttribute' could not be found (are you missing a using directive or an assembly reference?). ",
    "ed-ilyin": "after I have upgraded from preview1 dotnet restore and dotnet fable yarn-run split-server takes minutes before anything appear on screen or hangs on macOs and Windows.\nhttps://github.com/fable-compiler/Fable/issues/1042. ",
    "dsyme": "\nActually its hangs for long long time (on MacOs and on Windows)\n\nI also have one Windows 10 machine where \"dotnet restore\" hangs indefinitely with the latest preview installed.  It works on my other Windows 10 machine.  I have no idea why it hangs - it seems a network request is just timing out indefinitely.  No proxy involved. I tried resetting my firewall settings but that didn't seem to help.\n. I put a full process dump of a hung dotnet.exe here: https://1drv.ms/u/s!Aq5gXOPBI5HdiroRLPy1hDY3yK80kQ\nC:\\GitHub\\misc>dotnet --version\n2.0.0-preview2-006497\n. I eventually realised that I had a very large number of files in the subdirectories under the c:\\misc in which I was running \"dotnet\".  The c:\\misc directory itself contained just the results of a dotnet new. The subdirectories included Git repos and much more - 20,000 files and 1.6GB\nNow, it's my belief that the presence of these files shouldn't have caused problems for a simple dotnet restore but it seems they did.\nI tried to procmon.exe the activity of dotnet.exe but the trace was large.  The screenshot below showed that it is indeed accessing all the subdirectories,  In this case, it seemed like the thing just never terminated, I don't know what it was doing though o all those blocked threads\n\nAnyway, I think the bug here is that running dotnet.exe in a folder containing 1GB of misc files in subdirectories either takes a very long time or simply doesn't terminate\nNow I know that I can get on with the rest of my work :)\n. ",
    "rmunn": "https://github.com/dotnet/cli/issues/6286 (which is ultimately caused by https://github.com/NuGet/Home/issues/4424 according to the comments in that thread) appears to not be fixed yet in preview2: I was able to reproduce that bug in https://github.com/TheAngryByrd/MiniScaffold/issues/19. See https://github.com/NuGet/Home/issues/4424#issuecomment-307315106 for specific version details of when that NuGet bug was fixed (in a commit that does not appear to have been included into dotnet preview2).. I don't know if this should be reported here or not, since it might simply be a PEBKAC issue. But I've been getting what appears to be the same error as https://github.com/OmniSharp/omnisharp-vscode/issues/1495#issuecomment-302751595:\n\nerror MSB4018: System.MissingMethodException: Method not found: 'System.Collections.Generic.IList`1 NuGet.ProjectModel.LockFileTargetLibrary.get_Dependencies()'.\n\nI have SDK version 2.0.0-preview2-006497 installed, but the project I'm running was written to work with .NET Core 1.0.4 according to its README. This is surprising to me: I would expect that a project written against .NET Core 1.x would continue to work when run with the .NET Core 2.x SDK. Is there a breaking change documented anywhere that I missed (in which case it's a simple PEBKAC issue), or is this really a bug that should be reported here?. ",
    "TAGC": "After installing this version of .NET Core, my downgrade warnings have become errors. I'm forced to rely on an older version of AspNetCore.JsonPatch due to aspnet/JsonPatch#59. I know from testing that my application works fine even with this downgrade, and breaks if I upgrade it. Is there a way to turn the errors back to warnings again so that I can successfully run dotnet restore?. When I try to publish a .NET Core 2.0 project as a standalone application targeting the win7-x64 runtime, I get the following error trying to execute it (<project>/bin/Release/netcoreapp2.0/win7-x64/publish/product.exe):\nFailed to initialize CoreCLR, HRESULT: 0x80004005\nI'm developing this on a 64-bit Windows 7 machine and it works fine trying to run it in Visual Studio. There's another executable version of it in the directory right above the publish directory (<project>/bin/Release/netcoreapp2.0/win7-x64/product.exe) and that works fine too.\n$ dotnet --version\n2.0.0-preview2-006497. @Petermarcu Thanks, that works. Will win10-x64 still work for Windows 10, or do I need to change that too?. @Petermarcu Where are you encouraging people to make that switch? All the docs I've seen (like this) reference RIDs like win7-x64, win10-x64, etc.\nI can't actually find reference to \"win-x64\" anywhere. Is it safe to assume that I can use win-x64 for versions of the app targeting 64-bit Windows 10 too?. That should simplify my deployment. Nice.. .NET Core 2.0 Docker images are based on Debian Stretch, which uses a slightly newer (but still ancient) version of NuGet - v2.8.7.0 as opposed to v2.8.1.0 which came with Debian Jessie (used by .NET Core 1.1). Somewhere between these two releases, a bug was introduced that broke nuget sources update (see NuGet/Home#5707 for further details).\nI recently updated one of my ASP.NET Core projects to target netcoreapp2.0. This meant that I needed to switch to using the .NET Core 2.0 SDK Docker image to build and test my project during CI builds. During that CI build, I need to inject private credentials into my NuGet.Config file, but this fails due to the bug in the version of NuGet that comes with the .NET Core 2.0 SDK image.\n```yaml\n- BUILD_CONFIGURATION=Debug\nAdd credentials\n\nnuget setapikey $MYGET_API_KEY -source https://www.myget.org/F//api/v3/index.json -configFile NuGet.Config\nnuget sources update -name \"\" -source https://www.myget.org/F//api/v3/index.json -user $MYGET_USER -pass $MYGET_PASS -StorePasswordInClearText -configFile NuGet.Config\n\nRestore dependencies\n\ndotnet restore\n```\n\nI'm probably not the only person who needs to update their NuGet.Config during CI builds to resolve private NuGet packages, so other people may encounter this issue as they update to using .NET Core 2. Can you or anyone at Microsoft advise a workaround until the Stretch maintainers upload a newer NuGet package?. @troncomputers I think having a global.json file in the solution directory with this content helps:\njson\n{\n  \"sdk\": {\n    \"version\": \"2.0.0-preview2-006497\"\n  }\n}\nIf you run dotnet --version in the terminal with the solution folder as its working directory, you should see: 2.0.0-preview2-006497.\n. microsoft/dotnet:2.0-sdk, same as @MichaelSimons. However, Michael is using dotnet nuget (which is 4.3.0.5 as he shows). My understanding is that this is a stripped down version of NuGet that doesn't allow me to do things like updating local feeds, setting API keys, etc. (it's not displayed under dotnet nuget --help).\nIf you try apt-get update && apt-get install -y nuget && nuget, you should see it listed as v2.8.7.0.\nFWIW, dotnet --version gives me 2.0.0.. Yeah, I'm aware and agree with you. This is something that the Debian Stretch maintainers would need to resolve I guess. I was hoping with NuGet/Home#5707 that the NuGet team would have a way of contacting (or even be the same people as) the people maintaining this package, or else have an alternative they can suggest.\nAt the moment it's not too much of an issue for me - I'm maintaining a NuGet.Config.template which I populate during CI builds:\n```\nAdd credentials (temporary workaround for NuGet/Home#5707)\n\napt-get install -y gettext\ncat NuGet.Config.template | envsubst > NuGet.Config\nnuget setapikey $MYGET_API_KEY -source https://www.myget.org/F//api/v3/index.json -configFile NuGet.Config\n```. Yeah, I guess so.. \n",
    "bartread": "I'm brand new to .NET Core and wanted to try experimenting with ASP.NET Core 2.0. I'm following this tutorial here:\nhttps://docs.microsoft.com/en-us/aspnet/core/tutorials/web-api-vsc\nI realise this is probably aimed at 1.x but the problem I'm running into is weird. Basically I can create the app fine and have no problem debugging it, but every URL I browse to returns a 404. For example, the following should work but doesn't: http://localhost:5000/api/values.\nYou'll see that I've posted at the bottom of the tutorial, so I've tried changing the listen port and have verified that the process is listening on the correct port using netstat. Clearly something is listening because I'm getting 404s back, which I suppose is a form of progress.\nI'd think this was just a mismatch with the tutorial, but the CLI does create an app with a ValuesController class whose route is set as [Route(\"api/[controller]\")] so I must admit I was expecting it to just work (TM), and I'm now slightly baffled that it doesn't.. The issue seems to be that the controllers just aren't hooked up. For example, I created a simple catch-all controller to return a 429 regardless of the URL that is used, but what I still invariably get back is a 404:\npublic class CatchAllController : Controller\n    {\n        [Route(\"{*url}\", Order = 999)]\n        [HttpGet]\n        public IActionResult Get()\n        {\n            Response.StatusCode = 429;\n            return View();\n        }\n    }\nWhat I will say, and this strikes me as a bit weird, is that the Controllers folder, containing both ValuesController.cs and my new CatchAllController.cs, has been placed below the obj folder in my hierarchy. This might be expected in .NET Core but is certainly very odd when coming at it from a .NET Classic (or whatever the original version of .NET is called these days) background. Is this actually the correct structure?\nI also have an obj\\Debug folder that contains MyProjectName.AssemblyInfo.cs. Again, that seems odd. Is it expected?. Sorry, false alarm.\nThat whole controllers in the obj folder thing got me deeply suspicious so I went and created another test project. This time the Controllers folder was in the project root folder so I can only imagine I somehow managed to inadvertently drag it into the obj folder in VS Code. Whatever, definitely a PEBKAC.. ",
    "troncomputers": "How to upgrade from 2.0-preview1-final to 2.0-preview2-final?\nLatest runtime & sdk installed with latest VS2017 15.3 preview 7.0\nPM> dotnet restore\n  Restoring packages for C:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz\\OptimoKasiarz.csproj...\n  Restoring packages for C:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz\\OptimoKasiarz.csproj...\n  Restoring packages for C:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz\\OptimoKasiarz.csproj...\n  Restore completed in 1.15 sec for C:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz\\OptimoKasiarz.csproj.\nC:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz\\OptimoKasiarz.csproj : warning NU1701: Package 'Microsoft.AspNet.Razor 3.2.3' was restored using '.NETFramework,Version=v4.6.1' instead the project target framework '.NETCoreApp,Version=v2.0'. This may cause compatibility problems. [C:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz.sln]\nC:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz\\OptimoKasiarz.csproj : warning NU1701: Package 'Microsoft.Composition 1.0.27' was restored using '.NETFramework,Version=v4.6.1' instead the project target framework '.NETCoreApp,Version=v2.0'. This may cause compatibility problems. [C:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz.sln]\n  Restore completed in 1.5 sec for C:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz\\OptimoKasiarz.csproj.\nC:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz\\OptimoKasiarz.csproj : error NU1607: Version conflict detected for Microsoft.CodeAnalysis.Common. Reference the package directly from the project to resolve this issue.  [C:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz.sln]\nC:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz\\OptimoKasiarz.csproj : error NU1607:  OptimoKasiarz (>= 1.0.0) -> Microsoft.AspNetCore.All (>= 2.0.0-preview2-final) -> Microsoft.AspNetCore.Mvc.Razor (>= 2.0.0-preview2-final) -> Microsoft.CodeAnalysis.CSharp (>= 2.3.0-beta1) -> Microsoft.CodeAnalysis.Common (>= 2.3.0-beta1)  [C:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz.sln]\nC:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz\\OptimoKasiarz.csproj : error NU1607:  OptimoKasiarz (>= 1.0.0) -> Microsoft.VisualStudio.Web.CodeGeneration.Design (>= 2.0.0-preview1-final) -> Microsoft.VisualStudio.Web.CodeGenerators.Mvc (>= 2.0.0-preview1-final) -> Microsoft.VisualStudio.Web.CodeGeneration (>= 2.0.0-preview1-final) -> Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore (>= 2.0.0-preview1-final) -> Microsoft.VisualStudio.Web.CodeGeneration.Core (>= 2.0.0-preview1-final) -> Microsoft.VisualStudio.Web.CodeGeneration.Templating (>= 2.0.0-preview1-final) -> Microsoft.VisualStudio.Web.CodeGeneration.Utils (>= 2.0.0-preview1-final) -> Microsoft.CodeAnalysis.CSharp.Workspaces (>= 2.0.0) -> Microsoft.CodeAnalysis.Workspaces.Common (>= 2.0.0) -> Microsoft.CodeAnalysis.Common (>= 2.0.0). [C:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz.sln]\n  Restore failed in 3.73 sec for C:\\OptimoKasiarz_Zdarzenia\\OptimoKasiarz\\OptimoKasiarz.csproj.. Assemblies listed on screenshot aren't mine. I've changed debuging to x86 and in Visual Studio Output tab is the same error but pointing to my project dll - Optima365.dll\nUnhandled Exception: System.BadImageFormatException: \nCould not load file or assembly 'C:\\Users\\AdamWozniak\\source\\repos\\Optima365\\Optima365\\bin\\x86\\Debug\\netcoreapp2.0\\Optima365.dll'. \nAn attempt was made to load the program in an incorrect format.\nIn browser I'm getting HTTP Error 502.5 - Process Failure. Is there any chance to choose bit version in .NET Core? I have installed both 32 and 64.. ",
    "nguerrera": "@barrytang Happy to help however I can. The description of the publish issue mentions things working on the command line but not with VS: https://github.com/dotnet/core/issues/711#issuecomment-322046436. Is there a way to get the msbuild invocation that VS uses when publishing? I would like to understand how it might be different from the dotnet publish command that is working.. @Drasius2 That error is from nuget restore, which happens before compilation, not after it. It is saying that there are indirect references to both v4.0.0 and v4.3.0 of System.Net.NameResolution, and the lower v4.0.0 was chosen because it is \"nearer\" to your project. Similarly for v4.0.11 and v4.1.0 of System.Net.Primitives. In previous versions of the .NET Core SDK, this would have been treated as a warning, but in 2.0 it is an error by default. \nYou can get back to the v1 warning only behavior by removing NU1605 from the warnings treated as error in the project property pages. But instead of doing that, we should get to the root cause and fix it.\nThis case is a little odd with the runtime. 4.3.0 packages getting pulled in somehow without their non runtime. companions. Can you share AlertManager.csproj so that I can see how that is happening and help you determine the best fix?. By default, VS (and dotnet run) will just use the dotnet.exe that comes first on your PATH to run the application. So, one (very inconvenient, ugly) approach is to make sure c:\\Program Files (x86)\\dotnet comes before c:\\Program Files\\dotnet on PATH before launching VS. But since that's global, it will give you the opposite problem: failure to run x64 apps.\nBetter option: you can override the default `$(RunCommand)~ to redirect to the more appropriate dotnet:\n\n\nAdd a file named Directory.Build.targets in a folder that is common to all of your projects, e.g. the root of your repo. See https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build\n\n\nGive it the following content:\nxml\n<Project>\n  <PropertyGroup \n      Condition=\"'$(OS)' == 'Windows_NT' and\n                 '$(PlatformTarget)' == 'x86' and\n                 '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and\n                 '$(SelfContained)' != 'true'\"\n                  >\n    <RunCommand>$(MSBuildProgramFiles32)\\dotnet\\dotnet</RunCommand>\n  </PropertyGroup>\n</Project>\n\n\nThis says: if I'm evaluating the project on Windows and I'm targeting x86 with a framework-dependent .NET Core app, use dotnet from Program Files(x86).\nAs a cheap fix. we could consider putting this directly in the SDK as the new default. I have some more elaborate thoughts on how to make the experience switching between x86 and x64 to account for scenarios other than just F5 and where dotnet 32-bit/64-bit are in locations other the Program Files defaults. I plan to write those ideas up soon, but hopefully above is enough to keep folks unblocked.... Both links have info about Directory.Build.targets/props. Glad that worked for you. Having the symmetric case for x64 handled is goodness. Thanks for sharing that improvement. \n. You can simplify handling both x86 and x64 by using a single property group and moving the PlatformTarget condition to the RunCommand:\nxml\n<Project>\n  <PropertyGroup \n      Condition=\"'$(OS)' == 'Windows_NT' and\n                 '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and\n                 '$(SelfContained)' != 'true'\"\n                  >\n    <RunCommand Condition=\"'$(PlatformTarget)' == 'x86'\">$(MSBuildProgramFiles32)\\dotnet\\dotnet</RunCommand>\n    <RunCommand Condition=\"'$(PlatformTarget)' == 'x64'\">$(ProgramW6432)\\dotnet\\dotnet</RunCommand>\n  </PropertyGroup>\n</Project>. Closing this as a duplicate of https://github.com/dotnet/cli/issues/7532. I'll be inserting the most recent bits later this afternoon.. The insertion has been delayed until tomorrow morning in order to pick up another fix and save some effort while they are still manual. I will post a link to a build when it's done.. Great, glad the update worked, and sorry for the delay and the difficulty of determining when a fix will land in a build.. This would reproduce in a traditional project as well. It is behaving by design.\n\nIn former .NET project types, it was possible to alias the entire reference for Foo.Bar.dll as bar, and then use it like:\n\nYou can do this in SDK-style projects as well. You need to set Aliases metadata on the ProjectReference. \nHere is a change to your repro that shows how to do that: https://github.com/nguerrera/csharp-namespace-resolution-issue/commit/571ae9db3d43b28e9d7b619a78eaf57076062a62. This issue was moved to dotnet/sdk#2654. Sorry, I was away. Yes, this is a duplicate of Microsoft/msbuild#2221. Closing as such. I don't know when it will be fixed but it is high priority for .net core 3.. I expected the following to work, but it does not:\n``` xml\n\n\nnetcoreapp3.0\nWinExe\ntrue\n Don't make ApplicationDefinition for me \nfalse\n\n\n This is my application definition -- I should be able to call it whatever I want \n\n\n\n```\nSo there are two issues here:\n\nDefault application definition for VB doesn't match VB tradition\nIf you opt out of EnableApplicationDefinition, but not EnabledDefaultPageItems, you have to remove your own ApplicationDefinition from pages yourself.\n\n. I think this is a simpler workaround if you're going to paste it into your project and not a targets file trying to light-up on Application.xaml  presence and different values of EnableDefaultApplicationDefinition.\n``` diff\n\n\nnetcoreapp3.0\nWinExe\ntrue\n+    false\n\n\n+    \n+    \n\n\n```\nIt is basically what I expected to work + the Page remove as a workaround for bug (2).. I wonder if it's worth making the targets have different defaults for VB or C#. Another solution would be for default to try App.xaml first and fall back Application.xaml (based on existence), irrespective of language. That feels less surprising to me. If I were porting something from VB to C# or vice versa, I'd get very confused otherwise.. @rido-min @jeffschwMSFT  . > .NET Core is side-by-side\nIndeed, but dotnet build will use latest SDK unless you have a global.json file specifying an older version.\n\nYou need to either upgrade your project to latest version (netcoreapp2.2), or keep appropriate version installed (netcoreapp2.1 in your case).\n\nThis isn't exactly the case. Latest SDK can build projects targeting older versions of .NET Core. To run the output (if framework-dependent), you need the older runtimes installed. That can either be through having the full older SDK installed SxS or only the older runtime.\n\nInstalling additional SDK should not break build of your previously-building apps. That is weird.\n\nIt should not, but latest used by dotnet can come with a bug. :(\n\nSo it looks to me (apologies if this is obvious or commonly known) as though there is some issue with some 2.1.x versions prior to 2.1.500, which only manifests itself once you install the 2.2.x SDK or above.\n\nThis is not obvious or commonly known. I am moving this issue to our repo to investigate further.. This issue was moved to dotnet/cli#10466. I don't think it's by design. Moving to SDK.. This issue was moved to dotnet/sdk#2764. This is the expected behavior. For framework-dependent apps, you usually do not want to specify a patch version. The reason is that if you upgrade to a patch before a hoster (web app)/customer (client app) then your app will not launch on their machines. Nevertheless, framework-dependent apps will use the latest patch available automatically at runtime via roll-forward. So you get the security benefit without having to rebuild your app for every patch.\nGenerally speaking, just specify the TargetFramework and let the system pick the right packages.\nThere are a few scenarios where you need to twiddle with the defaults and they are covered in this doc: https://docs.microsoft.com/en-us/dotnet/core/deploying/runtime-patch-selection\n. This issue was moved to dotnet/sdk#2890. @nkolev92 @rrelyea  I am not familiar with this NuGet feature. Is this something that happens with packages.config, but not PackageReference? Should we move this to NuGet/Home?. cc @vijayrkn as I think there is some support for web.config transforms in web sdk.. Duplicate of https://github.com/dotnet/roslyn/issues/33452. ",
    "Drasius2": "Using latest .NetCore:\nC:\\Users\\dra60074\\Dropbox\\Temp\\SV_ETL\\SV_.NET\\SingleView\\Source>dotnet --version\n2.0.0\nCode compiles, but  when I try to run it throws an error:\n...\\AlertManager.csproj : error NU1605: Detected package downgrade: System.Net.NameResolution from 4.3.\n0 to 4.0.0. Reference the package directly from the project to select a different version. \\r [AAA.sln]\n...\\Source\\src\\AlertManager\\AlertManager.csproj : error NU1605:  AlertManager (>= 1.0.0) -> SingleView.Logging (>= 1.0.0) -> lo\ng4net (>= 2.0.8) -> System.Net.Sockets (>= 4.1.0) -> runtime.win.System.Net.Sockets (>= 4.3.0) -> System.Net.NameResolution (>= 4.3.0) \\r [..AAA.sln]\n...\\Source\\src\\AlertManager\\AlertManager.csproj : error NU1605:  AlertManager (>= 1.0.0) -> SingleView.Logging (>= 1.0.0) -> lo\ng4net (>= 2.0.8) -> System.Net.NameResolution (>= 4.0.0) [AAA.sln]\n...\\Source\\src\\AlertManager\\AlertManager.csproj : error NU1605: Detected package downgrade: System.Net.Primitives from 4.3.0 to\n 4.0.11. Reference the package directly from the project to select a different version. \\r [AAA.sln]\n...\\Source\\src\\AlertManager\\AlertManager.csproj : error NU1605:  AlertManager (>= 1.0.0) -> AAA.Logging (>= 1.0.0) -> lo\ng4net (>= 2.0.8) -> System.Net.Sockets (>= 4.1.0) -> runtime.win.System.Net.Sockets (>= 4.3.0) -> System.Net.Primitives (>= 4.3.0) \\r [AAA.sln]\n...\\Source\\src\\AlertManager\\AlertManager.csproj : error NU1605:  AlertManager (>= 1.0.0) -> AAA.Logging (>= 1.0.0) -> lo\ng4net (>= 2.0.8) -> System.Net.Sockets (>= 4.1.0) -> System.Net.Primitives (>= 4.0.11) [AAA.sln]\nI want to implement/use Log4Net logger (v2.0.8).\nVS version 15.3.2.\nPlease help how to resolve this.\n. ",
    "pakrym": "@muratg  I suspect IsolatedScopes=true is IncludeScopes=true if so it's https://github.com/aspnet/Logging/issues/643. ",
    "mehtanilay10": "It work perfectly from CMD but in VS 2017 15.3 it gives that error.. Create a new ASP.Net Core 2.0vproject using VS 2017 15.3\nAnd add above packages from Nuget. And add CLI library, \nAfter adding CLI, i can use dotnet ef from CMD however in VS to give an error.. I am previously posted issue on EF Core.\nhttps://github.com/aspnet/EntityFramework/issues/8996#issuecomment-311734955\nBut @bricelam told it follow up with CLI.\nNow issue is for PMC only not CMD.. Thanks @bricelam It works. I think that if i am selecting project from PMC's dropdown then it will automatically switch to that directory.. ",
    "rowanmiller": "Adding @divega and @ajcvickers who now own EF. @kasper3 that info is super helpful thanks! I'll see if I can work out what is happening based on that.. Hmmm, so it appears that an outdated version of the js has been cached for you, but this shouldn't happen, because we use a cache breaker on the file, so the URL changes whenever the contents change. Code using the initOs variable was removed from the file about a month ago.\nJust to be 100% certain, could you load https://www.microsoft.com/net/bundles/js/get-started.min.js?v=UJfiUJKa4gKy09VBnU4dEw3svrcR1E5r3fMWXvR0FfM and confirm that the string initOs appears in the result.. I forced a hash change on that file, so you should get the current version now. Can you confirm the page works? \nI'm not sure what happened here, somehow you got an old version of the file cached on the URL for the updated version. Change is live. @ffes many thanks for suggesting this \ud83d\udc4d \n\n. It sounds like we need to update the instructions on https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current. We had a 8 people report an issue on that page thru our in site feedback mechanism. Several pointed to this issue as where they found a way to resolve the problem.\n@leecow do you know what the change we need to make is?. I'll add a note to the step to run that command if needed.\n@leecow is there a consistent error message that would suggest this command is needed?. On the Linux install pages I guess we should call out the issue on the non-18.04 versions in the hopes that some folks remember it when they hit the issue and come back. \nWhat operation would someone be doing when they encounter the issue after upgrading? Running a command with dotnet?. There was a mistake in the instructions on this one (as @grenadin pointed out). Issue is now fixed.. ",
    "bricelam": "@mehtanilay10 I thought the issue was resolved--you need to cd to the project directory before running dotnet ef.. Closing: pull request timeout.. @TonyWoo Out of curiosity, is there anything blocking your upgrade to EF Core 2.x? (Other than the usual lack of time, of course, which plagues us all. \ud83d\ude09). EF Core has read $(ProjectDir) via MSBuild since the beginning. This is the first issue I've seen reported on it.. Does it work when you add...\nxml\n<PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.1.1\" />\n~~If so, I think this is a new manifestation of the \"no design-time lifting\" issue.~~ (Possibly not.). Better question: If you don't add Microsoft.EntityFrameworkCore.Design, but instead add this...\nxml\n<PropertyGroup>\n  <GenerateRuntimeConfigurationFiles>True</GenerateRuntimeConfigurationFiles>\n</PropertyGroup>\nDoes it tell you to add the design package?. EF needs the .runtimeConfig.json file to get framework roll forward behavior. Class libraries don't generate a .runtimeConfig.json by default. The Design package basically adds this line to your project. If none of that happens, we fall back to running on the exact version the library is compiled against which fails if it's not installed.. If it works just by adding the line, I'd do that--less work for NuGet.. ",
    "clrjunkie": "Reached out:\nhttps://community.slickedit.com/index.php/topic,15336.0.html. ",
    "MaximoTrinidad": "Thanks @Petermarcu!  I'll give it a try and see if uninstalling the previous version will clear the issue.\n:). HURRAY!!! @Petermarcu \nSomeone need to add this additional step in the instruction:\n\nremove previous version:\nsudo apt remove dotnet-dev-2.0.0-preview1-005977\nThen, install the latest one:\nsudo apt-get install dotnet-sdk-2.0.0-preview2-006497\n\nI got it loaded now.\n\nThanks for the tip!. @Petermarcu!!  Awesome!  Thanks again.\n:). @Petermarcu, Thanks for the update!\n:). ",
    "yupingyong": "@Petermarcu\nthank you for your reply.\nI installed the following files:\n1.AspNetCore.2.0.0-Preview2.RuntimePackageStore_x64.exe\n2.DotNetCore.2.0.0-Preview2-WindowsHosting.exe\n3.dotnet-runtime-2.0.0-preview2-25407-01-win-x64.exe\nWhether there are other packages that need to be installed.. @danroth27  @Petermarcu \nThank you for your reply.\nI provide my server installation environment information, whether it helps to find the problem.\n1. System version: Windows Server 2016 Datacenter Chinese version\n2.IIS Version: 10.0.14393.0\nSteps:\n1. Remove the original 1.1.2 version of Windows Server Hosting and 1.1.2 version of the Runtime\n2. Start installing the following three files\n    A) .AspNetCore.2.0.0-Preview2.RuntimePackageStore_x64.exe\n    B) .DotNetCore.2.0.0-Preview2-WindowsHosting.exe\n    C) .dotnet-runtime-2.0.0-preview2-25407-01-win-x64.exe\n3. After installing the IIS module can not see AspNetCoreModule, restart the server is useless. ",
    "nzcoward": "You can add it manually into the pipeline: Go into the modules feature in IIS for the server, and 'Configure Native Modules' on the right. You will see AspNetCoreModule in the list. You can add it there.\n\nHowever, even after adding it, I still see the dreaded 502.5 error on both standalone and framework dependent apps. Now, the version it is referencing, after removing all .netcore 1.x installations from my machine is 7.1.1982 - is this the correct .netcore 2 version?\nI have followed all the steps for getting a 1.x site deployed. I have added the Kestrel and IISConfiguration elements to my Program.cs (ootb template doesn't for some reason). I have tested that Kestrel runs it just fine (dotnet myapp.dll) but the reverse proxy between IIS and Kestrel is still not working. It is not an app issue, but an AspNetCore Module problem.\nDo we have anyone from the .net core team even looking into this? IIS just makes administration so much easier.. And after removing and then manually installing the 2.x SDKs, my projects no longer opened. Had to do a complete repair on VS 2017 to get the right things installed, and even then, not everything was installed properly. \nGoing back to PHP at this rate sounds like the best way to get my sanity back! . Ok - so I am not aware of anything changing, but it seems to have resolved itself as of this morning.\nI had given up, and went back to a WebApi2 project instead, which was easy to get up and running. I came to the conclusion that IIS itself was fine - so on a whim, I thought that I would try once more (I still had a single hair on my head, what could go wrong?)\nBoth Stand Alone and Framework Dependent deployments are working now.\nThere was ONE thing I never checked - which was that the AspNetCoreModule had installed itself into the site - it may not have been available there for whatever reason (I don't know this for certain - but I never checked). Perhaps the 4th restart of my computer managed to give that a kick.\nOne thing that I did change (but change back) was the site bindings. I had originally set it up with a hostname (referenced in my computer's hosts file to point to 127.0.0.1) and it sat alongside the Default Website that had :80 binding. Now, I had thought about this earlier and disabled the Default Website, but the issue was still occurring. But the change I DID make was to set this site that wasn't working to have the :80 binding when I deployed the WebApi2 app to it. I have since switched it back to just the api.mysite.com:80 binding and it is working. \nNeither of the above 2 things seem likely resolutions - surely the module was there, and if not, yet another restart wouldn't do something a previous restart hadn't - and tweaking bindings, unless somehow they were cached, seems just as unlikely. \nI do think that this issue is a good list of all the things to try, collated from a number of sites (official and unofficial) and blogs. It may help someone in the future if the list can be put somewhere. \nBut, things are working now, so the issue can be closed - I didn't want to do it myself, just in case it meant the issue was not longer easily searchable for the attempted resolutions. . Actually, I think I may have discovered it... I thought I had made a change yesterday, where the 502.5 was still occurring, but perhaps not. I have just deployed another app this morning, and it had the 502.5 error, except that I was able to resolve it:\nI had the application deployed to a folder, and had set up a virtual directory against the parent - path-wise it was a child folder also. Leaving it as a virtual directory, or letting IIS resolve the path resulted in the 502.5. \nSo I converted it to an application. And it works...\nIt is worth pointing out though, that the application is still using the parent application pool - it does not have its own. \nThis does actually feel like a bug with the AspNetCoreModule still - surely the application pool is defining the isolation level, and virtual directories should fall inside the scope of the app pool. Having said that, the root/parent is a blank site - there is no web.config at that level. Defining the directory as an application does indicate that there is an executable app - which may signal to the module, but does a top level site not defer to a child web.config in a virtual directory if there is one? Does this not happen in MVC5 or Owin regardless of a parent web.config existing? Curious.... ",
    "MathiasKowoll": "I looked that while having many libs in the folder wwwroot\\lib dotnet restore takes a while to restore the files, If I remove that folder it restores immediately.\nThis happens with al dotnet commands. CLI and Visual Studio 2017 Preview 3. @rrelyea create mvc app with individual authentication.\nreplace bower.sjon with the following.\n{\n  \"name\": \"ItsomaxCms\",\n  \"private\": true,\n  \"dependencies\": {\n    \"jquery\": \"^3.2.1\",\n    \"jquery-ui\": \"1.12.1\",\n    \"bootstrap\": \"^3.3.7\",\n    \"font-awesome\": \"4.3.0\",\n    \"jquery-validation\": \"1.16.0\",\n    \"jquery-validation-unobtrusive\": \"3.2.6\",\n    \"datatables.net\": \"^1.10.15\",\n    \"datatables.net-bs\": \"^2.1.1\",\n    \"datatables.net-buttons\": \"^1.3.1\",\n    \"datatables.net-buttons-bs\": \"^1.3.1\",\n    \"datatables.net-fixedheader\": \"^3.1.2\",\n    \"datatables.net-fixedheader-bs\": \"^3.1.2\",\n    \"datatables.net-keytable\": \"^2.2.1\",\n    \"datatables.net-responsive\": \"^2.1.1\",\n    \"datatables.net-responsive-bs\": \"^2.1.1\",\n    \"datatables.net-scroller\": \"^1.4.2\",\n    \"datatables.net-scroller-bs\": \"^1.4.2\",\n    \"pdfmake\": \"^0.1.29\",\n    \"echarts\": \"^3.6.1\",\n    \"smartwizard\": \"latest\",\n    \"fastclick\": \"latest\",\n    \"nprogress\": \"latest\",\n    \"ionicons\": \"latest\",\n    \"slim-scroll\": \"latest\",\n    \"icheck\": \"latest\",\n    \"switchery\": \"latest\",\n    \"bootstrap-table\": \"latest\",\n    \"tableExport.jquery.plugin\": \"latest\",\n    \"x-editable\": \"latest\"\n  },\n  \"resolutions\": {\n    \"jspdf\": \"1.1.239 || 1.3.2\"\n  }\n}\nmake bower install\nrun dotnet restore.\n. ",
    "Lanayx": "I got the same issue. For me the problem was that new dotnet restore (from dotnet-sdk-2.0.0-preview2-006497-win-x64) ignores disabledPackageSources configuration in NuGet.Config, and I had some of them unreachable. Removing these sources helped.. ",
    "forki": "Same issue here: https://github.com/fable-compiler/Fable/issues/1042. @rrelyea thanks for looking into this. I notified the original author of the issue. We have multiple people reporting this on the fable gitter chat. I assume it's related to node_modules and dotnet restore iterating long time over it. Seems that things worked with preview1 see https://github.com/fable-compiler/Fable/issues/1042. @davkean The same thing happens for dotnet build. It's probably more an issue with dotnet cli than nuget . @ctaggart it's by design to increase your azure bill ;-) . @richlander @ctaggart  in the linked issues the root cause is analysed as gobbling going rogue in restore and build. Workaround dotnet restore /p:EnableDefaultItems=false. yes that's exactly the same thing. somehow all dotnet commands are broken now.. There is another proposed workaround https://github.com/NuGet/Home/issues/5583#issuecomment-316227772. ",
    "davkean": "This issue was moved to NuGet/Home#5583. Moving this to NuGet for now, @rrelyea it seems NuGet is involved in this, if this ends up not being the case - feel free to move it a product-based repo.. It's not a CLI bug either, let @emgarten figure out the cause or then it will either be against SDK or MSBuild.  . @dsplaisted is going to investigate this.. ",
    "kierenj": "I certainly can, although I'm not using .NET Core 2.0 or netstandard2.0.  Will report back in a moment, thank you. Thanks for the suggestion, unfortunately I get the same error.  Any advice around how to approach this would be very much appreciated.\nEdit: there's a build error/warning I didn't see before, this is on the consuming project:\n20>  No way to resolve conflict between \"System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" and \"System.Runtime, Version=4.0.20.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". Choosing \"System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" arbitrarily.\nAlso:\n20>  Consider app.config remapping of assembly \"System.Runtime, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" from Version \"4.0.20.0\" [C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\Facades\\System.Runtime.dll] to Version \"4.1.0.0\" [] to solve conflict and get rid of warning.\nand:\n20>C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Professional\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(1984,5): warning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\nAgain, not sure if this is related.  The NuGet package I'm consuming shows a System.Runtime (4.1.0.0) reference in ILSpy, which is confusing.. Ah, interesting.  Targeting .netstandard1.6 on a new, blank NuGet package, with no references, it too references System.Runtime, 4.1.0.0 according to ILSpy.  So I guess the issue isn't with the NuGet package, but the way I'm consuming it.. ?\nEdit: so I guess I'm not understanding the 4.3.0.0 / 4.1.0.0 deal.  The NuGet deps file shows 4.3 everywhere, ILSpy references shows 4.1, and in my net461 consuming project, it's had 4.3 added as a dependency (though, not a reference), presumably as a result of the nuget deps file.  I could probably add an assemblyBinding redirect to 4.3, or downgrade to 4.1, but I don't understand why any of that would be necessary?\n(What's more, despite the nuget package reference being there in packages.config, there's no System.Runtime reference actually showing in the References list, but there's a System.Runtime.dll in the bin folder, AssemblyVersion 4.0.20.0 and AssemblyFileVersion 4.6.1055.0.  Yup - confused!). Adding that project property fixed that issue, thanks.  This may not be the same issue, but I do now also get:\nCould not load file or assembly 'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\n(via [TypeInitializationException: The type initializer for 'System.Web.Http.GlobalConfiguration' threw an exception.])\nTo give some background, this was a copy-pasted version of an old project which I updated to 4.6.1/VS2017 from 4.5/VS2015.\nNote that in this case, there's an assembly binding redirect:\nxml\n      <dependentAssembly>\n        <assemblyIdentity name=\"System.Net.Http\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\n        <bindingRedirect oldVersion=\"0.0.0.0-4.1.1.0\" newVersion=\"4.1.1.0\" />\n      </dependentAssembly>\nand in packages.config:\n<package id=\"System.Net.Http\" version=\"4.3.0\" targetFramework=\"net461\" />\n..there's also a build warning:\n2>  Consider app.config remapping of assembly \"System.Net.Http, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" from Version \"4.1.1.0\" [C:\\git\\kierenj\\some-referenced-project-here\\bin\\Debug\\System.Net.Http.dll] to Version \"4.2.0.0\" [C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Professional\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\\\net461\\ref\\System.Net.Http.dll] to solve conflict and get rid of warning.\n(edit: if I set the redirect to 4.2.0.0, I get Could not find a part of the path 'C:\\git\\kierenj\\my\\project\\here\\bin\\roslyn\\csc.exe'. from IIS.  Wow!)\nThe other project (in some-referenced-project-here) is .NET 4.5.1 and has no nuget references, but does reference System.Net.Http 4.1.1.0.\nAnd finally, the reference (on the main project) has a yellow warning icon in VS.. On this new one, is it this - https://github.com/dotnet/corefx/issues/9846 - that I'm hitting?  I'm not sure what the appropriate workaround would be if so, can anyone advise please?. @ericstj please forgive me for being forward, but this is blocking me for a big new project and has eaten a fair amount of my time.  I realise there's no SLA or anything here, but if you are able to recommend any course of action at all - even something time-consuming - I'd be very grateful indeed.. Thanks, since then I've had the idea to recreate the project from scratch (since it was initially a copy-paste job into VS2017, then I updated VS2017, then fiddled with the above), so I'm trying that in the meantime.. I've been rebuilding the project from scratch.  Still a very similar mix of problems.  I've added the project property and the NETStandard.Library.NETFramework package.\nI added a binding redirect for Http, which solved that error this time (no roslyn compiler issue) - but am finally left with the System.Runtime error again,  I then double-clicked the build warning around multiple reference version conflicts, which introduced a manifest-not-matching assembly exception for System.ComponentModel.Annotations.  There are still several references in the References solution explorer node under the project with yellow exclamation errors (and the associated warnings are simply that the referenced component was not found).\nDo let me know if there's anything else I can try / do to diagnose or assist.\n. I've now made all of the nuget packages under my control target net451 too (as well as netstandard1.6).  I get the same error - currently Could not load file or assembly 'System.ComponentModel.Annotations' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040), with Calling assembly : (Unknown). with a stack trace including System.Web.Configuration.CompilationSection.LoadAllAssembliesFromAppDomainBinDirectory().\nIn my scenario, will referencing a net451-and-netstandard16 package result in net451 being picked?\nWhat else can I try?  I figured this would fix it!  Thanks again.. Sorry for the comment spam.  It's moved on and I can be more specific:\nI'm using Windsor for DI in the .NET project and it's reflecting over the NuGet package's classes.\nSystem.Reflection.RuntimeAssembly.GetExportedTypes(RuntimeAssembly assembly, ObjectHandleOnStack retTypes) +0 in the stack trace is throwing Could not load file or assembly 'System.ComponentModel.Annotations, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040).\nAs I say, the NuGet package now targets both net451 and netstandard1.6.  The consuming project is .NET 4.6.1, and references System.ComponentModel (as well as .Primitives and .TypeConverter) package version 4.3.0.  Via VS build warnings, there are redirects as follows:\n```xml\n\n\n\n\n\n\n\n\n\n\n\n```\nThe nuget package, when targeting netstandard1.6, has no specific references in this area.  For net451, there's a <Reference Include=\"System.ComponentModel\" /> which comes into play.\nIf I keep the bindingRedirect to 4.1.0.0 as the other outstanding VS build warning suggests, there's a runtime exception that the assembly version manifest didn't match.  The version in the bin folder is 4.0.10.0.  If I add a bindingRedirect to 4.0.10.0, I get:\n[BadImageFormatException: Could not load file or assembly 'System.ComponentModel.Annotations' or one of its dependencies. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context. (Exception from HRESULT: 0x80131058)]. @weshaggard thanks, I'd like to help get to the bottom of this. It's tricky because the code is confidential.   I guess a repro would involve creating two solutions and publishing a public NuGet package from one, setting up the same references in the other.  It might take me a while to find the time for that, but of course I understand the value of it.\nThe only issue I'm currently experiencing is the final one, which I think is described entirely by my previous comment.  While I see if I can get a repro together, is there nothing in there that might be a clue?. Ok I understand, thanks.  The package is not locally built, it's built on travis-ci (linux/.net core/mono) and pushed to a private MyGet feed.  Looking in the nuget package and nuspec, neither target directly references System.ComponentModel at all, there's no mention of it and no binaries in the package.  (Only) the netstandard16 dll itself references System.ComponentModel 4.1.0.0.  I don't understand why but the repro may help with that.\nI was going to give up on .NET Standard stuff with this multi-targeting, but VS keeps using the netstandard16 version and not the net45 binary.  If I can beg one more question while I get a repro together - is there anyway to override/stop that behaviour?  A precedence to target selection?  Any docs for that?  Just trying to kick my project off before I get medieval on the repro :). Yipee, I found a fairly minimal-case repro!\nhttps://github.com/kierenj/dotnet-core-issue-730-repro\nThe folder structure is a little funky - I created a solution called whatever.sln and of course that created a subfolder called whatever.sln.  Either way, the case should be solid.\nA breakdown:\n\nNuGet package, targeting netstandard1.6\nReferences <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.2\" /> and uses RequiredAttribute (via using  System.ComponentModel.DataAnnotations;)\nThis causes the assembly to reference System.ComponentModel.Annotations 4.1.0.0\nNuGet package then published, and referenced by a .NET 4.6.1 project (MVC / Web API if that makes any difference)\nUsing reflection to get type/attribute info causes a TypeLoadException, that System.ComponentModel.Annotations cannot be found\n\nException thrown at https://github.com/kierenj/dotnet-core-issue-730-repro/blob/master/consumer/consumer/ConsumerWeb/Controllers/HomeController.cs#L19\nThe repro repo doesn't have a gitignore, in case looking at the packages folder would be useful.  Each commit documents the process, the errors I encountered on the way.\nhttps://github.com/kierenj/dotnet-core-issue-730-repro/commits/master\n. Thanks, that fixed it!  I'm unblocked and very happy, gives me a couple of days to pull a demo together for our client on Friday. :)\nShould either the tooling or me have added that as an explicit dependency to the nuget project?. Thanks.  Just to make sure we're not missing a bug - I didn't edit packages.config, I used the VS2017 UI.\nIt's also a .NET 4.6.1 consuming project - not .NET standard/dotnet tooling. \nWith that in mind, should it have happened automatically?. ",
    "Alex-DE-74": "HERE IS ONE SOLUTION:\nIf you get this message (like many other weird messages something can't be loaded or not found) during debugging in Visual Studio, so restart Visual Studio with Administrator privilegies - message will be gone. So it must be a bug somewhere.. ",
    "spottedmahn": "Setting <DependsOnNETStandard>true</DependsOnNETStandard> on my project fixed my problem!  Thanks @ericstj!\nVS Error List (a warning entry)\n\nFound conflicts between different versions of \"System.Net.Http\" that could not be resolved. These reference conflicts are listed in the build log when log verbosity is set to detailed.\n\nFrom Detailed MS build Log:\nThere was a conflict between \"System.Net.Http, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" and \"System.Net.Http, Version=4.1.1.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\n    \"System.Net.Http, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was chosen because it was primary and \"System.Net.Http, Version=4.1.1.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was not.\n    References which depend on \"System.Net.Http, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [C:\\Users\\mdepouw\\.nuget\\packages\\system.net.http\\4.3.1\\ref\\net46\\System.Net.Http.dll].\n        C:\\Users\\mdepouw\\.nuget\\packages\\system.net.http\\4.3.1\\ref\\net46\\System.Net.Http.dll\n          Project file item includes which caused reference \"C:\\Users\\mdepouw\\.nuget\\packages\\system.net.http\\4.3.1\\ref\\net46\\System.Net.Http.dll\".\n            System.Net.Http\n    References which depend on \"System.Net.Http, Version=4.1.1.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [C:\\Users\\mdepouw\\Source\\Repos\\MyProject\\MyProject.Services.Common\\bin\\x64\\Debug\\System.Net.Http.dll].\n        C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.applicationinsights.aspnetcore\\2.1.1\\lib\\net451\\Microsoft.ApplicationInsights.AspNetCore.dll\n          Project file item includes which caused reference \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.applicationinsights.aspnetcore\\2.1.1\\lib\\net451\\Microsoft.ApplicationInsights.AspNetCore.dll\".\n          ... more dlls that reference 4.1.1.2\n\nI am curious though... I don't understand the part that tells me which \"References\" depend upon System.Net.Http, Version=4.1.1.0 from the build log. I'm reading it as it depends upon itself. What am I misunderstanding?. ",
    "Spongman": "i'm seeing this error in a 4.7.2 project.\n[BadImageFormatException: Could not load file or assembly 'System.ComponentModel.Annotations' or one of its dependencies. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context. (Exception from HRESULT: 0x80131058)]. ",
    "akarimovbytewerk": "Found a temporary solution in https://github.com/Particular/Workshop.Microservices/issues/64. And duplicate dotnet/corefx#11639. The final solution is using the following code:\nvar assembly = AssemblyLoadContext.Default.LoadFromAssemblyPath(Path.Combine(providersFolder, assemblyName));\ninstead of \nvar loader = new AssemblyLoader();\nvar assembly = loader.LoadFromAssemblyPath(Path.Combine(providersFolder, assemblyName));. ",
    "TingluoHuang": "Thanks for the explanation.\nToday our vsts-agent produces 5 self-contained packages for different platforms. win7-x64, ubuntu16-x64, ubuntu14-x64, osx10.11-x64, redhat7.2-x64\nWe consider adopt netcore 2.0 since it will support on more OS and i can just build Linux-x64 for all linux flavors.\nI guess if we still want to support customers to use vsts-agent on osx10.11 and redhat7.2. we need use netcore1.1 build those packages.\nwin7-x64 (netcore2.0)\nLinux-x64 (netcore2.0)\nosx10.12-x64 (netcore2.0)\nredhat7.2-x64 (netcore1.1)\nosx10.11-x64 (netcore1.1)\n. Few other thoughts/questions:\n       Dotnet core has 2 parts, SDK and Runtime, SDK is for write a dotnet core app, and Runtime is for run the dotnet core portable app (not self-contained). Is the dropped support on OSX 10.11 in 2.0 only for SDK or it's for both SDK and Runtime?\nIf the support only dropped for SDK, i am fine with it, since it make sense say if you want to develop dotnet core app use new tooling you have to on latest OS.\nHowever, if the support is also dropped for the runtime, i am confused. isn't the xplat story for coreclr is to run my dotnet core portable app on any version for any platform, as long as i use the right runtime for that platform.\nTake example of node.js, node.exe on windows, node on linux/osx is the runtime for node.js. As long as i have the node runtime binary, i can run my node.js script on any platform. I haven't heard node.js drop OS supports for their runtime, they already at version 8.x.\nThanks,\nTing\n. Sorry about what i said about node never drop OS support. :D\nWell Vista is OS that released more than 10 years ago, however OSX 10.11 was only 3 years before. So the customer impact are different.\n. Another part that always bother me is all the prereq dotnet runtime needs per platform. like libuv/libcurl/openssl, etc. Is it possible to make dotnet runtime just like node, xcopy the runtime package, then dotnet myapp?\n. @Petermarcu cool, glad to hear that. will the doc to fully self contained app works for netcore 1.1 or it's only for 2.0?. Should we update all docs to make them consist?. I assume your are reference to  https://docs.microsoft.com/en-us/dotnet/core/rid-catalog#using-rids for should be thought as as API documentation and is not a statement of support.. ",
    "gortok": "My concern is primarily for large enterprises that don't upgrade quickly.  ASP.NET Core is being used in scenarios where the customer has a months long process to upgrade their minor versions.  For 'the cloud' this isn't a problem; but there are still self-hosted infrastructure places where it's important not to lose support so quickly.\nIs ASP.NET Core just meant for the public 'cloud', or is it meant to work with the type of OS upgrades that larger enterprises do the way that .NET Framework works? \nKeep in mind, officially DISA just released their STIGs for 7.1. (Has to be manually approved to be able to use 7.2 or 7.3):\nhttp://iase.disa.mil/stigs/os/unix-linux/Pages/index.aspx. I don't have a full understanding of what's involved; but as I understand Homebrew, couldn't anyone create a homebrew installer for .NET Core?. @karelz I don't understand closing this issue. I'm watching this issue because we need support for SELinux.  Heck, @Petermarcu asked if this issue was fixed; and we even raised bugs because .NET Core on Alpine linux fails due to SELinux being enabled. \nPut simply, this is a priority issue for us.    With the bugs against SELinux documented for .NET Core, I thought that SELinux was a priority for you as well. Is it not?. > How important is SELinux support for you?\nIt's important to be able to deploy to our customer environments (typically Red Hat with SELinux enabled).  As .NET Core is the only well-supported C# runtime environment for linux; it is necessarily part of our development and testing strategy. Our Product's SAM is currently made up of agencies across the US Government; and in order to sell to them we must be able to support their security posture.  SELinux is a part of that. \nSource, DISA STIGs surrounding Red Hat 7:\n\nRHEL-07-020210 | CCI-002696 | high | The operating system must enable SELinux. | Setting the SELinux state to enforcing ensures SELinux is able to confine potentially compromised processes to the security policy, which is designed to prevent them from causing damage to the system or further elevating their privileges. | If , this is a finding. | The SELinux state should be set to\u00a0at system boot time. In the file\u00a0/etc/selinux/config, add or correct the following line to configure the system to boot into enforcing mode:SELINUX=\n-- | -- | -- | -- | -- | -- | --\nRHEL-07-020220 | CCI-002696 | high | The operating system must enable the SELinux targeted policy. | Setting the SELinux policy to\u00a0targeted\u00a0or a more specialized policy ensures the system will confine processes that are likely to be targeted for exploitation, such as network or system services.\u00a0Note: During the development or debugging of SELinux modules, it is common to temporarily place non-production systems in\u00a0permissive\u00a0mode. In such temporary cases, SELinux policies should be developed, and once work is completed, the system should be reconfigured to\u00a0. | If , this is a finding. | The SELinux\u00a0targeted\u00a0policy is appropriate for general-purpose desktops and servers, as well as systems in many other roles. To configure the system to use this policy, add or correct the following line in\u00a0/etc/selinux/config:SELINUXTYPE=Other policies, such as\u00a0mls, provide additional security labeling and greater confinement but are not compatible with many general-purpose use cases.\nhttps://people.redhat.com/swells/scap-security-guide/tables/table-rhel7-stig.html\nWhat workloads do you intend to run with SELinux (or are doing so already)?\n\nServer based (Web and background process) workloads; as well as crypto, SSH, and SNMP based workloads (Also WMI, but that's down the path).\n\nHave you had challenges?\n\nYes. We wanted to use Alpine with .NET Core (reduced binary size from over 100MB to 35 MB per microservice), but there were showstopper bugs with SELinux and .NET Core 2.1.\n\nWhat more should we be doing to support SELinux?\n\nIt should be a part of your testing and support strategy if you intend for products or usage within the secure US Government space.. The Known Issues page does not list a known issue we hit (and a pretty big one). The Alpine .NET Core images will segfault on a host running with SELinux on. https://github.com/dotnet/dotnet-docker/issues/561. @KennyChen0909 The deeper issue you're having is that you want a way for your Console program to access a Windows file share from an Ubuntu Server.  To make that happen, you'd need to mount that windows network share using the instructions here.\nWhat's your deployment scenario? Is this a console program in an environment you control (where you can set up this share before hand) or is this in an environment you don't control (where you'd need to script setting up the share in C#?)\n. @KennyChen0909 you\u2019d have to write the code to programmatically access the shares. If they\u2019re dynamic then your code would be the rules that determine the dynamic logic to use. If they aren\u2019t dynamic you could always try to use the configuration provider in .NET Core to load them. . @brennfoster I copy and pasted the Dockerfile into a hex editor and didn't see those characters in the beginning. What did you copy the sample dockerfile into?  It's possible it left in a BOM or some other artifact when you copied the text.  Can you upload your sample repo and link us to it?. To resolve your issue, I'd open the dockerfile into a text editor capable of showing it in hex (I use notepad++ with HexEditor plugin); and manually removing those non characters.  The first hex addresses you should see are 46 52:\n\n. ",
    "vcsjones": "\nOur lifecycle policy stated that we would only support the latest servicing level of each distro that is out when we shipped. \n\nFor what it's worth, I am a proponent of this model. It's easy to understand and predict, and often follows what other platforms and technology stacks are doing.. @leecow This was for 2.1.403 though, not 2.1.500 (see image in original post).\nFor a period of time 2.1.403 would not install and gave a 404 error - I tested this from multiple machines from multiple networks (office internet, Travis CI, and AWS instance). ",
    "fobaz": "Was using Visual Studio publish, now tried dotnet publish with no difference. \nRunning with dotnet /var/www/api/bin/appname.dll\nTried  adding --fx-version 1.1.2 but didn't make a difference.. Yes, I have installed all the dependencies. There is also another app (runtime version 1.1.0) running fine on the server. Just tried right now downgrading this app to 1.1.0, but it did not make a difference. Maybe there is some way to debug to find out what is causing the error?. There is /opt/dotnet/shared/Microsoft.NETCore.App/1.1.2 directory, so I guess it's installed. Otherwise, I think, it would throw an error when ran with --fx-version 1.1.2. There are some skips like this:\n\nProcessing TPA for deps entry [microsoft.aspnetcore.mvc.dataannotations, 1.1.3, lib/netstandard1.6/Microsoft.AspNetCore.Mvc.DataAnnotations.dll]\n  Considering entry [microsoft.aspnetcore.mvc.dataannotations/1.1.3/lib/netstandard1.6/Microsoft.AspNetCore.Mvc.DataAnnotations.dll] and probe dir [/opt/dotnet/shared/Microsoft.NETCore.App/1.1.2]\n    Skipping... probe in deps json failed\n    Local path query exists /var/www/ourapp/bin/Microsoft.AspNetCore.Mvc.DataAnnotations.dll\nAdding tpa entry: /var/www/ourapp/bin/Microsoft.AspNetCore.Mvc.DataAnnotations.dll\nProcessing TPA for deps entry [microsoft.aspnetcore.mvc.formatters.json, 1.1.3, lib/netstandard1.6/Microsoft.AspNetCore.Mvc.Formatters.Json.dll]\n  Considering entry [microsoft.aspnetcore.mvc.formatters.json/1.1.3/lib/netstandard1.6/Microsoft.AspNetCore.Mvc.Formatters.Json.dll] and probe dir [/opt/dotnet/shared/Microsoft.NETCore.App/1.1.2]\n    Skipping... probe in deps json failed\n    Local path query exists /var/www/ourapp/bin/Microsoft.AspNetCore.Mvc.Formatters.Json.dll\nAdding tpa entry: /var/www/ourapp/bin/Microsoft.AspNetCore.Mvc.Formatters.Json.dll\nProcessing TPA for deps entry [microsoft.aspnetcore.mvc.localization, 1.1.3, lib/netstandard1.6/Microsoft.AspNetCore.Mvc.Localization.dll]\n  Considering entry [microsoft.aspnetcore.mvc.localization/1.1.3/lib/netstandard1.6/Microsoft.AspNetCore.Mvc.Localization.dll] and probe dir [/opt/dotnet/shared/Microsoft.NETCore.App/1.1.2]\n    Skipping... probe in deps json failed\n    Local path query exists /var/www/ourapp/bin/Microsoft.AspNetCore.Mvc.Localization.dll\nAdding tpa entry: /var/www/ourapp/bin/Microsoft.AspNetCore.Mvc.Localization.dll\nProcessing TPA for deps entry [microsoft.aspnetcore.mvc.razor.host, 1.1.3, lib/netstandard1.6/Microsoft.AspNetCore.Mvc.Razor.Host.dll]\n  Considering entry [microsoft.aspnetcore.mvc.razor.host/1.1.3/lib/netstandard1.6/Microsoft.AspNetCore.Mvc.Razor.Host.dll] and probe dir [/opt/dotnet/shared/Microsoft.NETCore.App/1.1.2]\n    Skipping... probe in deps json failed\n\nI think, they're normal, considering that similar output is in the working app.\nThe ending of the output:\n\nProperty NATIVE_DLL_SEARCH_DIRECTORIES = /opt/dotnet/shared/Microsoft.NETCore.App/1.1.2:\nProperty PLATFORM_RESOURCE_ROOTS =\nProperty AppDomainCompatSwitch = UseLatestBehaviorWhenTFMNotSpecified\nProperty APP_CONTEXT_BASE_DIRECTORY = /var/www/ourapp/bin\nProperty APP_CONTEXT_DEPS_FILES = /var/www/ourapp/bin/OPMtrAPI.deps.json;/opt/dotnet/shared/Microsoft.NETCore.App/1.1.2/Microsoft.NETCore.App.deps.json\nProperty FX_DEPS_FILE = /opt/dotnet/shared/Microsoft.NETCore.App/1.1.2/Microsoft.NETCore.App.deps.json\nProperty JIT_PATH = /opt/dotnet/shared/Microsoft.NETCore.App/1.1.2/libclrjit.so\nProperty System.GC.Server = true\nFailed to initialize CoreCLR, HRESULT: 0x80004005\n\nOn the working app, instead of the failure there is a line like this:\n\nLaunch host: /opt/dotnet/dotnet, app: ....\n\nI can't see anything wrong... The installed packages in app:\n\nPomelo.EntityFrameworkCore.MySql    {1.1.2}                                                                                                                                                \nMicrosoft.AspNetCore                {1.1.2}                                                                                                                                                         \nMicrosoft.EntityFrameworkCore       {1.1.2}                                                                                                                                              \nMicrosoft.Extensions.Logging.Debug  {1.1.2}                                                                                                                                              \nMicrosoft.AspNetCore.Cors           {1.1.2}                                                                                                                                                             \nMicrosoft.NETCore.App               {1.1.2}                                                                                                                                                               \nMicrosoft.AspNetCore.Mvc            {1.1.3}     . Simple Console app which only prints out \"Hello world\", created and compiled using VS works fine, however, new WebAPI project fails with the same error. Tried creating new WebAPI project on the server, using dotnet new webapi, but got a few errors when tried to run it:\n\n\n.assets.json' not found. Run a NuGet package restore to generate this file.\nStartup.cs(35,16): error CS0518: Predefined type 'System.Void' is not defined or imported \nand etc.\n\nMaybe upgrading the project to netcore 2 preview would help, as it supports RHEL 7.3? After all, will have to do that sooner or later.\nCan't downgrade to Centos 7.1, as it's a production server for other projects.. After upgradint to netcore 2.0 preview 2, it works, so I guess netcore 1.1.2 doesn't support Centos 7.3 and netcore 2.0 does.\nThanks for the help.. ",
    "steveharter": "To capture verbose output:\nexport COREHOST_TRACE=1\n. From the output, it looks like it is finding the 1.1.2 directory.\nHave you tried Centos 7.1? I'm asking as this is what we're testing on.\nDid you try a simple \"Hello World\" assembly (no extra dependencies)? If this still fails, we can try debugging using gdb or I can try a local repro.. @livarcocc I'm installing fresh debian now, will report back tomorrow.. I couldn't repro. I used debian stretch. One difference is that dotnet --info reports the RID as Linux-x64 instead of debian-x64.\n```\ndotnet --info\n.NET Command Line Tools (2.0.0)\nProduct Information:\n Version:            2.0.0\n Commit SHA-1 hash:  cdcd1928c9\nRuntime Environment:\n OS Name:     debian\n OS Version:  9\n OS Platform: Linux\n RID:         linux-x64\n Base Path:   /usr/share/dotnet/sdk/2.0.0/\nMicrosoft .NET Core Shared Framework Host\nVersion  : 2.0.0\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\n```\n@ierpe what is the contents of your /etc/apt/sources.list.d/dotnetdev.list file? I have:\ndeb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-stretch-prod stretch main\n. FWIW here's my Debian Stretch environment (no repro, clean install)\n```\n$ curl -V\ncurl 7.52.1 (x86_64-pc-linux-gnu) libcurl/7.52.1 OpenSSL/1.0.2l zlib/1.2.8 libidn2/0.16 libpsl/0.17.0 (+libidn2/0.16) libssh2/1.7.0 nghttp2/1.18.1 librtmp/2.3\nProtocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp\nFeatures: AsynchDNS IDN IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz TLS-SRP HTTP2 UnixSockets HTTPS-proxy PSL\n$ openssl version\nOpenSSL 1.1.0f  25 May 2017\n$ cat /proc/version\nLinux version 4.9.0-3-amd64 (debian-kernel@lists.debian.org) (gcc version 6.3.0 20170516 (Debian 6.3.0-18) ) #1 SMP Debian 4.9.30-2+deb9u5 (2017-09-19)\n$ cat /etc/*-release\nPRETTY_NAME=\"Debian GNU/Linux 9 (stretch)\"\nNAME=\"Debian GNU/Linux\"\nVERSION_ID=\"9\"\nVERSION=\"9 (stretch)\"\nID=debian\nHOME_URL=\"https://www.debian.org/\"\nSUPPORT_URL=\"https://www.debian.org/support\"\nBUG_REPORT_URL=\"https://bugs.debian.org/\"\n```. @icedfish \n\nthe same issue @mac\n\nSo you're also getting the seg fault during dotnet new console?\nDoes export DOTNET_CLI_TELEMETRY_OPTOUT=1 prevent the seg fault?. @ierpe have you tried to debug the seg fault, or look at any dumps in order to determine the crashing module\\stack? I can send you gdb instructions.. @ierpe probably the easiest way is to catch the seg fault with gdb if you can. You'll likely need to be root to install that. So\nsu\napt-get install gdb\nexit\nand then run dotnet:\ngdb --args dotnet new console\nrun\nafter seg fault\nbacktrace\nhopefully you get a crashing module (libcurl?) and stack.. @ierpe yes thanks. It is likely crashing when calling into OpenSsl.\nCan you run a couple commands please:\n$ openssl version\nand\nls /usr/lib/x86_64-linux-gnu/libssl.so.*\nYou should get back \nOpenSSL 1.1.0f  25 May 2017\nand\n/usr/lib/x86_64-linux-gnu/libssl.so.1.0.2  /usr/lib/x86_64-linux-gnu/libssl.so.1.1\nIf not, and you're getting the 1.0.0 version you can give this a try:\napt-get remove ssl1.0.0\napt-get install ssl1.0.2. @ierpe since you have the 1.0.0 version, that is likely conflicting and has been a problem for others. You can remove that by doing an apt-get remove ssl1.0.0\nTypically the 1.0.0 version is there due to an upgrade to stretch or buster, and not a clean install. It could have come from another app's dependency as well.\ncc @bartonjs is there an issue to address this in some manner? Like if 1.0.2 is there use that first. Thanks. @jjxtra some thoughts\n1) Verify the permission of your executable. Compare with /opt/rh/rh-dotnet21/root/usr/bin/dotnet\n2) Verify you have the correct executable. Run file <myapp> to see if it reports back a valid executable file and as x86-64. Compare that with file /opt/rh/rh-dotnet21/root/usr/bin/dotnet\n3) Run strace on your executable and report back the output. ",
    "Drapondur": "Sorry for not having mentioned the .NET Core version in the title!. ",
    "Rovastar": "Ummh I will but why is this the wrong place. Is this not the place for the asp.net core?\nConfused as to 2 projects that have a similar description.......\nCan you explain the difference?. I have asked over there. I have read the readme still doesn't not explain the difference between what question should be asked where.\nI am asking about .net core. \nThe readme first line is:\n\"The dotnet/core repository is a good starting point for .NET Core.\". Yes the are differences. Finding them is a tricky. I suppose I considered this to be the master project and asp.net to be a sub project of it.\nOften .net and asp.net for a decade or more have been mostly interchangeable. Erroneous maybe but for the majority of people out there you will here them used interchangeably.\nAnd .net might not know about IIS but IIS knows about both .net and asp.net.\nAnyway I have asked in the other section now.\n. ",
    "pjanotti": "Hi @0807Jpatel  this nuget is not part of dotnet/corefx. Its owner is @jaime-olivares. Currently dotnet/corefx generates a nuget, still in preview, for System.IO.Ports but for now only for windows.. @0807Jpatel I am going to close the issue but feel free to continue the conversation here if you still have any questions.. @wfurt is working on a PR to get this started (see #29033).\nWhile that is not ready yet some people had success with https://github.com/jcurl/SerialPortStream (see here for example), but that may not be an option to you since it seems you already have code using the Fx API. . ",
    "606simps": "Hi,\nI am writing a program to communicate with serial ports on both Windows and Linux using System.IO.Ports. \nSo far working fine on Windows but shows \"System.IO.Ports is currently only supported on Windows.\" on Linux. So, what is the ETA of \"System.IO.Ports\" for Linux support? Is there a preview version I can test out?\nThanks!. ",
    "danmosemsft": "The Windows version is in the compatibility pack. There isn't work scheduled right now to port it to Linux. We'd certainly be happy to see it ported to Linux. If folks would like to look at that, @pjanotti is the person to work with.. @omerk perhaps you can try or  help with https://github.com/dotnet/corefx/pull/29033\n@wfurt . Thanks @tonyferrell !. any reason for wget instead of curl as the other ones?. Merging as this does not seem controversial doc edit. Closing in favor of that issue... Some of the feedback I've heard on the naming seems to stem from the fact that \"Core\" suggests that it has only a small subset of the features that .NET Framework has. This was true in 1.0 but is much less true now, as .NET Core has added more and more functionality, and will be even less true in 3.0 next year when we add desktop app models also. Nevertheless to me \"Core\" is still appropriate because .NET Core is lighter weight at runtime (higher performance and lower memory use), and lighter weight at deployment (using the linker or manually subsetting to only required parts of the framework) compared to .NET Framework.. @richlander thoughts?. Issue moved to dotnet/corefx #30287 via ZenHub\n. Should this remain closed then (and the corefx one)?. @dleeapho do you know who owns this? Powershell folks need it to do profiling for us.. @SteveL-MSFT good to go?. I do not know what the correct values are. If they are these, feel free to merge... @astrophys I think so. (cc @janvorli )\nThe supported platforms for 2.1 are listed here: https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1-supported-os.md. @ericstj. @ericstj I wonder if it is worth doing some quick and dirty script to try to look for more cases of missed native->managed entrypoints. Eg., checking that the 3rd parameter in every DEFINE_METHOD at least greps somewhere in the corefx/corelib sources. I could do it.\nDEFINE_METHOD(MARSHAL,              LOAD_LICENSE_MANAGER,   LoadLicenseManager,         SM_Void_RetIntPtr)\nhttps://github.com/dotnet/coreclr/blob/f90b65858d7ca0604e7aa1a1d04e9e5261e7f7af/src/vm/mscorlib.h#L518. Eh, maybe there's too many cases of dead code. I picked a MemberLoader::FindMethod at random\nMethodDesc *pMD = MemberLoader::FindMethod(pHelperMT, \"AllocateAndValidateLicense\", &gsig_SM_LicenseInteropHelper_AllocateAndValidateLicense);\nand it seems to be missing. In NETFX there is a LicenseManager.LicenseInteropHelper class which CoreFX does not have.\nI haven't looked further.\n. Maybe one of the TypeConverter work items we already have. @ericstj. Codegen.\n``\n(a50.651c): Stack overflow - code c00000fd (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\nclrjit!Compiler::fgMorphSmpOp+0x4d:\n00007ffaf9ba2abd 664489752c      mov     word ptr [rbp+2Ch],r14w ss:00000095d6043ffc=0000\n0:042> k\n # Child-SP          RetAddr           Call Site\n00 00000095d6043f90 00007ffaf9ba20c3 clrjit!Compiler::fgMorphSmpOp+0x4d [e:\\a\\_work\\307\\s\\src\\jit\\morph.cpp @ 11667] \n01 00000095d6044140 00007ffaf9ba2d2a clrjit!Compiler::fgMorphTree+0xf3 [e:\\a\\_work\\307\\s\\src\\jit\\morph.cpp @ 15933] \n02 00000095d6044210 00007ffaf9ba20c3 clrjit!Compiler::fgMorphSmpOp+0x2ba [e:\\a\\_work\\307\\s\\src\\jit\\morph.cpp @ 12478] \n03 00000095d60443c0 00007ffaf9ba2d2a clrjit!Compiler::fgMorphTree+0xf3 [e:\\a\\_work\\307\\s\\src\\jit\\morph.cpp @ 15933] \n04 00000095d6044490 00007ffaf9ba20c3 clrjit!Compiler::fgMorphSmpOp+0x2ba [e:\\a\\_work\\307\\s\\src\\jit\\morph.cpp @ 12478] \n05 00000095d6044640 00007ffa`f9ba2d2a clrjit!Compiler::fgMorphTree+0xf3 [e:\\a_work\\307\\s\\src\\jit\\morph.cpp @ 15933] \n```. This issue was moved to dotnet/coreclr#23309. \"unsupported\". is framework lower case?. Runtime is capitalized. .. and ... ?. .. .and ? . add also https://github.com/dotnet/csharplang. .. is a... was none of this useful? if it's somewhere else maybe link to it?. ",
    "willhuo": "pretty good, i also let it run on raspberry pi under dotnet2.0. ",
    "omerk": "+1 for SerialPort support on Linux, really could benefit a lot embedded engineers.. ",
    "DanJ210": "I could ask @blowdart something @Petermarcu it would help to know this. The IT department is telling me to use .Net instead of .Net Core because .Net is given security updates through WSUS while .Net Core is not. I'm still going to use Core and update manually but is that pretty much the case for enterprise? Should enterprise not use Core? If I'm away on vacation or gone then someone would have to know if there's a security vulnerability and also know how to update Core in order to keep the company safe?\nI don't want to use .Net but I can see their point. If I don't know about a severe security threat and I don't manually update .Net Core then the company is wide open. Is this correct?. @richlander Yea I had this same concern also. I didn't know .Net Core was server focused, I see it pushed heavily but for creating web apps as those are templates in Visual Studio. I also heard the rumor was that .Net Core was named .Net 5 at one time. So as a web app developer, should I be turned off from .Net Core due to leaving clients vulnerable to possibly huge risks?. It looks like using a web service is generated and used different in .Net Core than it is in regular .Net and Core converts everything to async. So manipulation of the generated code has to happen which is ok.. Just to update, the Web Service Reference actually does work and it does generate .Net Core compatible code. .Net Core uses the .Net standard anyway so I'm guessing it shouldn't matter too much, it's all just C# code. The Web Service Reference does seem to wrap everything into async calls which I don't know if that can be turned off or not and I don't know if that's a .Net Core only thing. However, the generated code does work and I'm using it with a .Net Core project. The ambiguous authentication comes from the generated code using ALL parameters possible from the Web Service when you may only want a couple, so you'll have to modify the generated code some.\nFirst time I've worked with Web Service, SOAP, and I hope it's the last lol. But the Web Service Reference tool seems to do a good job for consuming the intense and very large Web Service that it did. . Sure I will get these once I return  home. Thanks.. And I'm guessing that's what it is then. Different sub versions. Idk we'll see.. Ok so I just checked @rakeshsinghranchi and of the two versions above, one is 2.1.100 and the other is 2.1.100.7326.\nSo I don't know what I need and what I can remove. I'm guessing that I can remove the 1.* versions because I don't use those versions at all? And I can remove all versions of 2.1 except for the latest?\nIn five years I don't want a building up 50 versions because I install the updated versions but leave the old ones behind where at half a GB a piece, that would take up 25 GB on my 256GB Surface Pro 4. In 5 years I'll probably have a new Surface Pro with a 1 TB drive but for now this is what I've got. So I'm just trying to get a grasp on deleting what I don't need.. Ok, thank you @wli3 and @Petermarcu . @Eilon why was this closed?. Oh excuse me, thank you.. ",
    "shawnro": "CC @leecow, @dleeapho.  We are actively thinking about these types of enterprise scenarios for .NET Core and how best to keep things updated and secure. Thanks for tagging us, @Petermarcu.  Agree.  We're still working on getting everything in place for tracking and will be mindful of this as we do.. ",
    "dleeapho": "@DanJ210 for now the best place to track our thinking around servicing .NET Core for Windows clients is #1541 as @karelz mentioned. . /cc @leecow . @Jcouls29 have you considered containerizing your apps with Docker (in this case, using containers as a means to ease deployment and update-- not necessarily as microservices)? @richlander recently blogged about it: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/. @leecow , @dagood PTAL.. ",
    "subek": "@Petermarcu  Thanks for the reply man.. i finally was able to solve the issue but not with the latest version but the version i did the update was ..\nMicrosoft .Net Core 1.0.1 -SDK 1.0.0 Preview 2- 003131\nMicrosoft .Net Core 1.0.1 -VS 2015 Tooling Preview 2\nand this worked for me.\n. ",
    "shooreshi": "Same problem here except the installation of the listed SDK and Tooling did not resolve the issue for me in a particular solution while it did work in others after updating my global.json.  I am currently getting dozens of errors  in a specific solution of type:\n\nSeverity  Code    Description Project File    Line    Suppression State\nError NU1002  The dependency Microsoft.AspNetCore.Hosting.Abstractions 2.0.1 does not support framework .NETFramework,Version=v4.6.1. \n\nWhere the listed dependencies in project.json are not supported.  E.g. error from output:\n\nerror: Package Microsoft.Extensions.Logging.Abstractions 2.0.0 is not compatible with net461 (.NETFramework,Version=v4.6.1). Package Microsoft.Extensions.Logging.Abstractions 2.0.0 supports: netstandard2.0 (.NETStandard,Version=v2.0)\n\nAny suggestions other than the nuclear option of removing dotnet 2.1.4 and VS 2017 completely?  Upgrading the solution is out of the question for the moment.\n. ",
    "LGinC": "thank you, but I just add the .net core previewer 2 sdks's path to user environment variable. @Petermarcu oh...For .NET Core 2.0 Previewer 2 .................................. @manikandanm1757 just try more times. or How to complete Inter-Process Communication. @mellinoe oh....struct, for example, I define a struct named \"struct CameraInfo\" in server.h,  how can I use it,\nand I communicate with another process by shared memory....how to do it. Only serialize to JSON or XML\uff1f. Unhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Threading, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\ntoo...... I use CLI      \"dotnet publish -c Release -r linux-x64\" \n@laibulle . ",
    "ChristopherRobinSuperStar": "Core 2.0 is released, but how to use SqlDependency now? I can't find it in ResponseCache attribute parameters.. Thank you! . Is it in Core 2.1 Preview1?. Oh, thank you very very much! You are the best!. ",
    "corivera": "@ChristopherRobinSuperStar Query notification features will be in 2.1.. Yes, SqlDependency is available in the preview1 SqlClient builds on nuget.. ",
    "VenkateshSrini": "@richlander ,\nWe are expecting a quite a few migration projects. if you could share me your email then I can drop you a note from live id. . @richlander,\nI see that as per this link https://www.youtube.com/watch?v=WfFbFhD4q6A the release is planned on September 18 to 20th. Are those the mile stone dates or will it be available before that. Since .NET core 2.0 .NET standard 2.0 are released. I'm closing this issue. ",
    "rdzidziguri": "guys the funny staff here is that just few hours ago NET Standard 2.0 was officially released, but it reqs VIS 2017.3 preview and will only work with NET CORE 2.0 which we still have no idea when MS is going to release so maybe MS will end up with something that google did with Angular when they skipped V3 and released V4? :) MS please sync staff. we are having hard time following all this distributed releases across .. Ha ha guys they listened to us finally Microsoft started reading what users are writing and taking actions on that. Wow good surprise from MS.. NET Standard Class library template no portable and I am doing this from VS 2017 update 3\n\n. sure\n\n`. https://github.com/dotnet/standard/issues/497\nHere is the issue created over standard Repo. I think those are very similar and but that issue does not bring much light on this. so this is very annoying.. ",
    "mguinness": "@rdzidziguri Most likely .NET Core 2.0 release will be announced September 19-21 at DEVintersection Europe.  Save the date and follow .NET Conf.. @emiliano84 LOL, they must've heard you, see release notes.. ",
    "emiliano84": "@mguinness Why wait for more than a month if everything looks ready? hopefully they're waiting just for the RTM of VS 15.3 that hopefully will come before :). @mguinness yeah I thought so... LOL. @zenixgrace nahh it's smaller (and faster) than 2015, of course depends on how much stuff you need to install :). ",
    "angelsix": "I have multiple apps but the one I'm thinking right now it's pure .Net Core\nOk so another question what installers does the .Net Core SDK use on each platform?. ",
    "manikandanm1757": "Some of the links can be opened in the browser but failed to load in the terminal.. ",
    "Sam00061": "Example code:\n```\nusing System;\nusing System.Text;\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.OutputEncoding = Encoding.UTF8;\n            System.Diagnostics.Process SubProcess = new System.Diagnostics.Process()\n            {\n                StartInfo = new System.Diagnostics.ProcessStartInfo()\n                {\n                    FileName = \"C:\\Windows\\System32\\w32tm.exe\",\n                    Arguments = \"/config /manualpeerlist:\\\"time.stdtime.gov.tw clock.stdtime.gov.tw tick.stdtime.gov.tw watch.stdtime.gov.tw\\\" /syncfromflags:manual /reliable:yes /update\",\n                    RedirectStandardError = true,\n                    RedirectStandardOutput = true,\n                }\n            };\n            SubProcess.Start();\n            SubProcess.WaitForExit();\n            Console.WriteLine(SubProcess.StandardOutput.ReadToEnd());\n            Console.WriteLine(SubProcess.StandardError\n                .ReadToEnd());\n            Console.ReadKey();\n        }\n}\n\n}\n```\nResult:\n```\nPS C:\\Users\\sam.jheng\\Desktop\\netcoreapp1.1> dotnet --info\n.NET Command Line Tools (2.0.0-preview2-006497)\nProduct Information:\n Version:            2.0.0-preview2-006497\n Commit SHA-1 hash:  06a2093335\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.15063\n OS Platform: Windows\n RID:         win10-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0-preview2-006497\\\nMicrosoft .NET Core Shared Framework Host\nVersion  : 2.0.0-preview2-25407-01\n  Build    : 40c565230930ead58a50719c0ec799df77bddee9\nPS C:\\Users\\sam.jheng\\Desktop\\netcoreapp1.1> dotnet .\\ConsoleApp1.dll\n\ufffdR\ufffdO\ufffdw\ufffdg\ufffd\ufffd\ufffd\\\ufffd\ufffd\ufffd\ufffd\ufffdC\nPS C:\\Users\\sam.jheng\\Desktop\\netcoreapp1.1>\nOs Info:\nPS C:\\Users\\sam.jheng\\Desktop\\netcoreapp1.1> Get-WmiObject Win32_OperatingSystem | fl *\nPSComputerName                            : SAM-PC-2\nStatus                                    : OK\nName                                      : Microsoft Windows 10 \u4f01\u696d\u7248|C:\\WINDOWS|\\Device\\Harddisk0\\Partition2\nFreePhysicalMemory                        : 28449776\nFreeSpaceInPagingFiles                    : 4980736\nFreeVirtualMemory                         : 31729456\n__GENUS                                   : 2\n__CLASS                                   : Win32_OperatingSystem\n__SUPERCLASS                              : CIM_OperatingSystem\n__DYNASTY                                 : CIM_ManagedSystemElement\n__RELPATH                                 : Win32_OperatingSystem=@\n__PROPERTY_COUNT                          : 64\n__DERIVATION                              : {CIM_OperatingSystem, CIM_LogicalElement, CIM_ManagedSystemElement}\n__SERVER                                  : SAM-PC-2\n__NAMESPACE                               : root\\cimv2\n__PATH                                    : \\SAM-PC-2\\root\\cimv2:Win32_OperatingSystem=@\nBootDevice                                : \\Device\\HarddiskVolume1\nBuildNumber                               : 15063\nBuildType                                 : Multiprocessor Free\nCaption                                   : Microsoft Windows 10 \u4f01\u696d\u7248\nCodeSet                                   : 950\nCountryCode                               : 886\nCreationClassName                         : Win32_OperatingSystem\nCSCreationClassName                       : Win32_ComputerSystem\nCSDVersion                                :\nCSName                                    : SAM-PC-2\nCurrentTimeZone                           : 480\nDataExecutionPrevention_32BitApplications : True\nDataExecutionPrevention_Available         : True\nDataExecutionPrevention_Drivers           : True\nDataExecutionPrevention_SupportPolicy     : 2\nDebug                                     : False\nDescription                               :\nDistributed                               : False\nEncryptionLevel                           : 256\nForegroundApplicationBoost                : 2\nInstallDate                               : 20170618052248.000000+480\nLargeSystemCache                          :\nLastBootUpTime                            : 20170719160111.228760+480\nLocalDateTime                             : 20170719164944.327000+480\nLocale                                    : 0404\nManufacturer                              : Microsoft Corporation\nMaxNumberOfProcesses                      : 4294967295\nMaxProcessMemorySize                      : 137438953344\nMUILanguages                              : {zh-TW}\nNumberOfLicensedUsers                     : 0\nNumberOfProcesses                         : 134\nNumberOfUsers                             : 10\nOperatingSystemSKU                        : 4\nOrganization                              :\nOSArchitecture                            : 64 \u4f4d\u5143\nOSLanguage                                : 1028\nOSProductSuite                            : 256\nOSType                                    : 18\nOtherTypeDescription                      :\nPAEEnabled                                :\nPlusProductID                             :\nPlusVersionNumber                         :\nPortableOperatingSystem                   : False\nPrimary                                   : True\nProductType                               : 1\nRegisteredUser                            : Windows \u4f7f\u7528\u8005\nSerialNumber                              : 00329-10280-00000-AA067\nServicePackMajorVersion                   : 0\nServicePackMinorVersion                   : 0\nSizeStoredInPagingFiles                   : 4980736\nSuiteMask                                 : 272\nSystemDevice                              : \\Device\\HarddiskVolume2\nSystemDirectory                           : C:\\WINDOWS\\system32\nSystemDrive                               : C:\nTotalSwapSpaceSize                        :\nTotalVirtualMemorySize                    : 38501516\nTotalVisibleMemorySize                    : 33520780\nVersion                                   : 10.0.15063\nWindowsDirectory                          : C:\\WINDOWS\nScope                                     : System.Management.ManagementScope\nPath                                      : \\SAM-PC-2\\root\\cimv2:Win32_OperatingSystem=@\nOptions                                   : System.Management.ObjectGetOptions\nClassPath                                 : \\SAM-PC-2\\root\\cimv2:Win32_OperatingSystem\nProperties                                : {BootDevice, BuildNumber, BuildType, Caption...}\nSystemProperties                          : {__GENUS, __CLASS, __SUPERCLASS, __DYNASTY...}\nQualifiers                                : {dynamic, Locale, provider, Singleton...}\nSite                                      :\nContainer                                 :\nCulture :\nPS C:\\Users\\sam.jheng\\Desktop\\netcoreapp1.1> [System.Globalization.CultureInfo]::CurrentCulture\nLCID             Name             DisplayName\n----             ----             -----------\n1028             zh-TW            \u4e2d\u6587 (\u7e41\u9ad4\uff0c\u53f0\u7063) \n```\nThank you very much!. Sample Code and Result:\nhttps://github.com/Sam00061/SomeLittleExampleCode\n. Update:\nRemove Console.OutputEncoding = Encoding.UTF8; not work.. I didn't use \nSystem.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance)\nI always restart console.\nThs codepage console used is named:\n950   (ANSI/OEM - \u7e41\u9ad4\u4e2d\u6587 Big5) (\u6587\u5b57)\n. Also get the correct text now, thank you very much.. ",
    "DavoBR": "there it is\n```xml\n\n\n\n\nnet452\nwin7-x86\n\n\naspnet-CorePanel-f4d80286-a681-45fd-b535-74b3f2b9f604\n\n <ItemGroup>\n    <Content Include=\"menu.config\">\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\n    </Content>\n  </ItemGroup> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```. ",
    "mokeyish": "@mizbrodin I have this problem, too\uff0cbut I think you can use jetbrains rider instead\u3002did you solved the problem\uff1f. @AlexanderJ-ULabs Your version of Visual Sdtudio and dotnet core might not  be latest enough.. @ghd258 \u54e5\u4eec\uff0c\u73b0\u5728\u8c01\u8fd8\u7528Web Form\u554a?\u6784\u5efa\u5927\u578b\u9879\u76ee\u4e00\u70b9\u90fd\u4e0d\u65b9\u4fbf\uff0c\u53cd\u800cAngular\u4e0d\u9519\uff0c\u50cf\u5806\u79ef\u6728\u4e00\u6837\uff0c\u6784\u5efaWeb\u9879\u76ee\u3002. ",
    "mizbrodin": "@mokeyish I don't have a solution for this problem yet. \nOur company doesn't have a license for JetBrains Rider and, at the moment, I don't know anything about this IDE and its build tools. We have Visual Studio Enterprise licenses as part of our MSDN Subscription and I'd prefer to be able to use MSBuild for running code analysis in our CI build configuration as we do it for other projects.. ",
    "ShrenikOne": "Hi All, We are facing similar issue. Any workaround or solution, Also I additional observation, while compile with \"netstandard2.0\" as \"TargetFramework\", generated assembly Platform Target coming as Unknown while with \"netstandard1.4\" its coming as \"Windows Runtime\".. ",
    "CFlatWouldbeMinor": "Same issue here.\nIt seems to me static code analysis is very fuzzy, or I just used to the existing full framework FxCop solution . ",
    "skorunka": "Same problem.. ",
    "sindamnataraj": "same issue here.. ",
    "FarisFAhmed": "I have Visual Studio 2017 (15.2) and a .NetStandard core library project.\n If the project is targeted for 1.4 and I run MSBuild.exe then everything works\n If the project is targeted for 1.5 and I run MSBuild.exe then I get this error:\nMSBUILD : error : CA0055 : Coult not identify platform for \"...dll path...\". I have Visual Studio 2017 (15.2) and a .NetStandard core library project.\n If the project is targeted for 1.4 and I run MSBuild.exe then everything works\n If the project is targeted for 1.5 and I run MSBuild.exe then I get this error:\nMSBUILD : error : CA0055 : Coult not identify platform for \"...dll path...\". ",
    "csano": "Are there any plans to address this? Any other options for running FxCop against .NET core projects?. ",
    "zvirja": "I have a feeling that Microsoft will not continue to support FxCop. Rather, it's expected that you install Microsoft.CodeAnalysis.FxCopAnalyzers NuGet package to your solution and it will run the code analysis via Roslyn API. Actually, they are cooler than FxCop as they:\n\nwork quicker;\nprovide feedback instantly (highlight errors while you are typing);\nprovide quick fixes.\n\nSee more detail here: https://github.com/dotnet/roslyn-analyzers.\nNotice, not all the analyzers have been already ported, so it might still make sense to run code analysis for the supported frameworks (e.g. net 452).. I've used this package in the AutoFixture project and it seems to respect everything you mentioned.. ",
    "jahmai": "@zvirja Do you know if the Nuget package respects the CodeAnalysis MSBuild configuration settings like <RunCodeAnalysis>false</RunCodeAnalysis>, CodeAnalysis dictionarys and the ruleset files?. Thanks all I'll give the package a try today.. ",
    "dvm-2k1": "Please let me know Is this CA0055 and CA0052 issues got resolved for .Net Core 2.0 (netcoreapp2.0) projects?\nAsking this because I'm still getting these errors when enabled our .Net Core 2.0 projects to use code analysis ruleset which are defined for our projects and trying to build from Visual Studio 2017 (updated to 15.3.5 version) and by using MSBuild command.\nAs per this conversion thread, I've installed Nuget package of  Microsoft.CodeAnalysis.FxCopAnalyzers to our .net core 2.0 projects, but still getting CA0055 and CA0052 errors. Please help me out to resolve these issues which are blocking our builds.. ",
    "msd-kharazi": "same here.. ",
    "MelbourneDeveloper": "@Petermarcu has anyone committed to fixing this issue?\nWhy is this issue closed? It's still a problem.\nThe other closed issue says that we need to install a NuGet package and compile at the command line. \nIs anyone actually bothering to fix the problem inside Visual Studio?. This article seems pretty relevant:\nhttps://docs.microsoft.com/en-us/visualstudio/code-quality/fxcop-analyzers-faq?view=vs-2017. @Petermarcu \nI just added the FX Cop Analyzers NuGet package to my project, and I can see that it does add new errors to the build output. So, I promoted warning to errors, and I get similar errors to those that used to exist in the Visual Studio code rules in the old csproj format, but the issue at first glance is that I can't choose which errors to turn on or off. I have to type them in the suppress field. That's pretty fiddly. Using a suppress puts a pragma in the code which isn't so nice.\nCan we get some kind of explanation and history for why Visual Studio has gone down this path? Is it so that code rules could be supported on other platforms like Visual Studio for Mac?\nI've written a blog article on how to use the code rules here: https://christianfindlay.wordpress.com/2019/02/11/c-code-rules-part-1/ . I'd really appreciate some feedback, and if someone would write up why FxCop as a command line app is not the recommended approach anymore, I'd be glad to append it to the blog post.. @karelz yep, that's already been asked here:\nhttps://github.com/dotnet/roslyn-analyzers/issues/2026. @karelz when they answer the question, yeah.. @karelz , I understand that there is a path from migrating from the FxCop tool, to the Roslyn Analyzer NuGet package. Basically, it's not finished, and it's not completely integrated in to Visual Studio, but for now, people have some level of code rules. The issue is already closed, so I don't think there's anything to be said for this particular question.. ",
    "AlexanderJ-ULabs": "This is still an issue.. ",
    "Styxxy": "I came across the same problem when having a solution mixed with .NET Full (non-SDK style projects) and .NET  Standard projects (SDK style projects).\nI fixed it by adding following custom target at the end of the project (I actually created a shared targets file which I imports in each SDK style project):\nxml\n  <Target Name=\"IgnoreRunCodeAnalysis\" Condition=\" '$(RunCodeAnalysis)' == 'true' \" BeforeTargets=\"RunCodeAnalysis\">\n    <Message Importance=\"normal\" Text=\"Set RunCodeAnalysisOnThisProject to false\" />\n    <PropertyGroup>\n      <RunCodeAnalysisOnThisProject>false</RunCodeAnalysisOnThisProject>\n    </PropertyGroup>\n  </Target>\nIf you want code analysis, you can include the (nuget) package Microsoft.CodeAnalysis.FxCopAnalyzers. I did it like below (in my project files), so I can still leverage the global property RunCodeAnalysis:\nxml\n  <ItemGroup Condition=\" '$(RunCodeAnalysis)' == 'true' \">\n    <PackageReference Include=\"Microsoft.CodeAnalysis.FxCopAnalyzers\" Version=\"2.6.1\" />\n  </ItemGroup>. ",
    "JeremyCaney": "The idea of replacing the legacy FXCop tooling built into Visual Studio with the NuGet package makes good sense to me. That said, ideally, developers wouldn\u2019t need to Google this error and find this thread to understand the problem. Instead, the tooing should detect the incompatibility and suggest the upgrade path to the user. (Fully recognizing that this level of tooling is likely outside the scope of the team maintaining this repository.). ",
    "mattcanty": "Wow. That must be a record for the time taken to resolve an issue myself after raising an issue. I've been looking at this for several hours. But just glanced at the .\\publish directory and saw MyProject.exe in there.\nNeedless to say. The resolution is to either:\n\nExecute .\\publish\\MyProject.exe on the server.\n\nor \n\nPublish the publish folder.\n\nI would like to point out that the publish folder is not present in .\\bin\\Debug which is why this probably took me a lot longer to get to the bottom of than I'd like.. ",
    "RealDotNetDave": "No, did not realize that was the only version it worked in. I'll check it out.. ",
    "maartenba": "Thanks!. ",
    "silverf1re": "Yep that is the correct folder. Could it have to do with what command tool i use to compile? here is the folder structure i deployed ..\\Documents\\Visual Studio 2017\\Projects\\ConsoleApp3\\bin\\x64\\Debug\\netcoreapp2.0\\linux-arm\\publish\\\nthe x64 bothers me. What command line tools is everyone using? Any other Ideas?. Someone in another thread said I should be using the normal command prompt to create/compile however that doesnt recognize dotnet as a valid command. I have been using cross tools x86_64 visual studio command prompt 2017 perview 15.3.. Yes I have installed .net core 2.0 preview 2 SDK. So when you build your app you are using the normal windows command line, not any of the visual studio command line tools correct? If that is the case Ill install the sdk on my other computer and try it there. Looking forward to your response and thanks for the help so far.. reinstalled the sdk and it works. Not sure what was wrong, thanks for your time i appreciate it. Looking forward to .net core development.. ",
    "heartlocker": "@karelz  IKVM.NET is base on Mono and the .NET Framework. Is it possible for me to use it between java and .net core lib? Or you mean that I can do a migration job to change IKVM to.net Core?.  It seems like I would have a really hard damn time.\n @omajid . Hi guys, I finally achieved this by using JNI to call c++ and use c++ to host a coreclr . It works.. The basic code for core CLR host;\nhttps://github.com/dotnet/coreclr/tree/master/src/coreclr/hosts/unixcoreruncommon\nFor Java invoke C#:\nhttps://github.com/heartlocker/JavaCallCSharp\nFor C# invoke Java:\nhttps://github.com/heartlocker/CSharpCallJava\n. ",
    "dheijl": "It's quite easy calling Java using Pinvoke and a plain C-wrapper as a go-between that uses JNI to load the JVM and to expose  functions that call into Java using JNI. You would have to deal with the restrictions of the JNI though (data types). I've done this in Delphi to call Java. Perhaps there are better possibilities than JNI nowadays, as I haven't used Java for many years. Calling a C# dll from Java could be done using \"unmanaged exports\" (nuget) to expose c# as a plain C or COMM interface.. ",
    "commonsuppliz": "IKVM.NET seems to work only under full .net framework or mono. dotnetcore still missing some api to allow ikvm.net to run.... ",
    "tvildo": "IKVM is alive\nhttps://www.windwardstudios.com/blog/ikvm-is-alive-well \nhttps://github.com/wwrd/ikvm8. ",
    "GuruprasadYellappaK": "I have Reinstalled the C# Extension and after having the below Error. Please help.\nUpdating C# dependencies...\nPlatform: win32, x86_64\nDownloading package 'OmniSharp (.NET 4.6 / x64)'    Retrying from 'https://omnisharpdownload.blob.core.windows.net/ext/omnisharp-win-x64-1.21.0.zip' Downloading package '.NET Core Debugger (Windows / x64)'   Retrying from 'https://vsdebugger.blob.core.windows.net/coreclr-debug-1-10-1/coreclr-debug-win7-x64.zip' \nInstalling package 'OmniSharp (.NET 4.6 / x64)'\nFailed at stage: installPackages\nError: end of central directory record signature not found. @aldass  Thank you for the help.\nI have downloaded and placed the same in the below folder. and when I am facing the below issue when I reopen the VS code, \n.vscode\\extensions\\ms-vscode.csharp-1.11.0\\debugger\n.vscode\\extensions\\ms-vscode.csharp-1.11.0\\bin\\omnisharp\nUpdating C# dependencies...\nPlatform: win32, x86_64\nSkipping package 'OmniSharp (.NET 4.6 / x64)' (already downloaded).\nDownloading package '.NET Core Debugger (Windows / x64)'    Retrying from 'https://vsdebugger.blob.core.windows.net/coreclr-debug-1-10-1/coreclr-debug-win7-x64.zip' \nInstalling package '.NET Core Debugger (Windows / x64)'\nFailed at stage: installPackages\nError: end of central directory record signature not found\nFinished\nKindly suggest is there something I am missing.\nThanks in Advance.\nRegards,\nGuruprasad. Microsoft Windows [Version 6.1.7601]\nCopyright (c) 2009 Microsoft Corporation.  All rights reserved.\nD:\\TECHNOLOGY\\Coresample1>dotnet --info\n.NET Command Line Tools (1.0.4)\nHerewith I am adding the information.\nProduct Information:\n Version:            1.0.4\n Commit SHA-1 hash:  af1e6684fd\nRuntime Environment:\n OS Name:     Windows\n OS Version:  6.1.7601\n OS Platform: Windows\n RID:         win7-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.4. Hi,\nKindly suggest, I could't able to fix the debug issue.\nThanks in Advance.\nRegards,\nGuruprasad. ",
    "aldass": "@GuruprasadYellappaK I used the steps in this link to help point me in the right direction. After some tinkering, I got everything to work (both OmniSharp's integration with VSCode as well as the dotnet core debugger). The only thing odd was I had to put the files in the bin\\omnisharp\\ folder, not the .bin\\omnisharp\\ (note the . prefixing bin) as the link above suggested.\nI'm running Windows 10 64bit and .Net Core SDK/CLI v1.0.4 with VSCode v1.14.2. Here are the steps:\n\nInstall OmniSharp in VSCode and then close VSCode\nIf it does not already exist, create bin\\omnisharp and .debugger folders under %userprofile%\\.vscode\\extensions\\ms-vscode.csharp-1.11.0\\\nIn the runtimeDependencies section of this packages.json, download the zip files for OmniSharp (.NET 4.6 / x64) and for .NET Core Debugger (Windows / x64)\nUnzip omnisharp-win-x64-<version>.zip into %userprofile%\\.vscode\\extensions\\ms-vscode.csharp-1.11.0\\bin\\omnisharp\\\nUnzip coreclr-debug-win7-x64.zip into %userprofile%\\.vscode\\extensions\\ms-vscode.csharp-1.11.0\\.debugger\\\nLaunch VSCode and run thru a simple Hello World dotnet core example... everything should work.\n\nI hope the info help. :). ",
    "ZhijiaCHEN": "@aldass Great! This guide works for me. Thanks!. ",
    "JasonMKane": "@GuruprasadYellappaK   The later versions have changed the .vscode\\extensions\\ms-vscode.csharp-\\bin\\omnisharp to \n.vscode\\extensions\\ms-vscode.csharp-.omnisharp.  Create this directory, and extract the zip into here.  This resolved the same issue for me.. ",
    "DustinCampbell": "This is https://github.com/OmniSharp/omnisharp-vscode/issues/1712.. > @DustinCampbell any thoughts on where we could track making this experience better for VS Code users?\nI think this is primarily a debugging question, yes? Including @gregg-miskelly in case he has any ideas.. I agree. Supporting both App.xaml and Application.xaml for both languages seems sensible.. ",
    "seandwyer": "This works great, thanks.\nI'm behind work proxy which just wont let VSCode get stuff. \nSo, I manually downloaded these:\nDownloading package 'OmniSharp (.NET 4.6 / x64)' 'https://omnisharpdownload.blob.core.windows.net/ext/omnisharp-win-x64-1.21.0.zip' \npackage '.NET Core Debugger (Windows / x64)' \n'https://vsdebugger.blob.core.windows.net/coreclr-debug-1-10-1/coreclr-debug-win7-x64.zip'\nThen created\n.omnisharp\n.debugger\ndirectories in %userprofile%.vscode\\extensions\\ms-vscode.csharp-1.12.2\\\nunzip each archive to relevant directory.\n(Re)Start VSCode, and all works.\nThanks,\nSean.\n. ",
    "dmumladze": "I'm using OmniSharp 1.13.1 and this is how I fixed a similar issue on my machine:\nI looked at the JS source code, which was responsible for setting up both the extensions\n```\n%userprofile%.vscode\\extensions\\ms-vscode.csharp-1.13.1\\out\\src\\coreclr-debug\\install.js\n%userprofile%.vscode\\extensions\\ms-vscode.csharp-1.13.1\\out\\src\\omnisharp\\launcher.js\n```\nOnce I knew where they expected extensions, all I had to do was: \n\nDownload the .zip files it was complaining about\nCreate .debugger and .omnisharp directories under %userprofile%\\.vscode\\extensions\\ms-vscode.csharp-1.13.1\\\nUnzip omnisharp-win-x64-1.26.3.zip into .omnisharp\nUnzip coreclr-debug-win7-x64.zip into .debugger\n\nYou can't create folder with [.] prefix from the Folder Explorer so you'll have to use \ncd %userprofile%\\.vscode\\extensions\\ms-vscode.csharp-1.13.1\nmkdir .debugger\nmkdir .omnisharp\nFor some reason OmniSharp or VS Code ignore my http.proxy settings and I don't know why... :-1: . I'm trying to install only the hosting part for self-contained apps, and using the below command, but it installs the runtimes as well, which I do not want. Anything changed recently, how can I install only the hosting module part?\nDotNetCore.2.0.6-1-WindowsHosting.exe OPT_INSTALL_LTS_REDIST=0 OPT_INSTALL_FTS_REDIST=0. @joeloff Unfortunately previews aren\u2019t allowed in client\u2019s production env as well as the runtime, so my only option is #1. Question: I can see three components installed from 2.0.* package, out of which, two are runtime x86 and x64, but can I remove them manually?. ",
    "yehanghanGE": "@dmumladze  Thanks. Your answer is the only works. Also found that http.proxy setting never works.. ",
    "morrisjoe": "@sturlath can you please try if this repro with .NET Core SDK 2.0 or not? You can install from the daily build location at https://github.com/dotnet/cli/tree/release/2.0.0 . ",
    "MovGP0": "I have exactly the same issue. Also created a new project and get the exact same error. dotnet build works fine and publish to Azure fails. . ",
    "GudjonGunnlaugsson": "@morrisjoe I'm a coworker of @sturlath been trying to get the publish to work while he is on vacation. In the CLI the publish works fine and maybe my solution would be to upload the files myself to azure. But the Visual studio publish still brings the same error as before.\nBecause the CLI works i figured i would try to setup an auto build deploy on check in. Still working on that.\n. ",
    "MicFang": "my mysql drive:\nMySqlConnector or MySql.Data.Core. Update:\nI have resolved the problem ; \nthank you!. ",
    "janvorli": "@Petermarcu I've moved it here as per our discussion. @johnnyasantoss yes, that's correct. That is a private repo used by the infrastructure team. . @Petermarcu makes sense, closing this issue now.. I've debugged the issue. The issue is that the FreeSignalAlternateStack fails to reset the guard page on the alternate stack that we create for handling hardware exceptions. \nWe change the protection of the first page in the allocated area to PROT_NONE when we allocate the alternate stack in EnsureSignalAlternateStack. This makes the page serve as a guard page for stack overflow detection.\nWhen we are freeing the alternate stack, we need to reset the protection back. And that mprotect call fails. Since such a failure is not expected to happen, we only have debug assert to check for it. So in release build, the failure goes unnoticed and we call \"free\" to free the alternate stack memory. But since the first page is still inaccessible, the free function crashes when trying to access it.\nI am still looking into why the mprotect fails to restore the protection of the page. It fails with EPERM, which means \"permission denied\". We are trying to change the page protection from PROT_NONE to PROT_READ | PROT_WRITE, so that should just work.. So, my assumption is that kernel adds PROT_EXEC as a result of VM_MAYEXEC being set for mprotect in the memory allocated from the heap. I've noticed that when running in the alpine docker container on the SELinux enabled Fedora 28, the heap has all three RWX flags set. \nI've tried to fix it by allocating the alternate stack using mmap instead of getting it from the heap and it worked fine. I am going to create a PR for this fix.\n. > I believe there are a few prefixes and suffixes we try for DllImport on Linux, incl. \"lib\" prefix and \".so\" suffix.\nYes, that's true. We try to prepend lib and append .so (so for your librdkafka, we try librdkafka, liblibrdkafka, librdkafka.so and liblibrdkafka.so).. ",
    "JamieKeeling": "Potential duplicate of https://github.com/dotnet/cli/issues/6699\nNot sure on what the end resolution was at this point.. Discussed and resolved in https://github.com/dotnet/cli/issues/6699. ",
    "edgan8": "@richlander . ",
    "tianmaoyu": "```\n---------boundary\nContent-Disposition: form-data; name=files; filename=\"=?utf-8?B?5paw5bu65paH5pys5paH5qGjLnR4dA==?=\"; filename*=utf-8''%E6%96%B0%E5%BB%BA%E6%96%87%E6%9C%AC%E6%96%87%E6%A1%A3.txt\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n---------boundary--. I want to use httpclient to upload files. When the name of the file is Chinese, the garbled code appears. I want to be able to upload Chinese files correctly. For example: filename=\u201c\u65b0\u5efa\u6587\u672c\u6587\u6863.txt\u201c  instead of: filename=\"=?utf-8?B?5paw5bu65paH5pys5paH5qGjLnR4dA==?=\". I want to encode the Content.header with UTF-8 and calculate the length instead of using DefaultHttpEncoding (Encoding.GetEncoding (28591)).\nThe source code is: System.Net.Http.HttpRuleParser\n``` c#\n internal static readonly Encoding DefaultHttpEncoding = Encoding.GetEncoding(28591);. ",
    "davidsh": "I just tried this myself using .NET Framework 4.7 on a Windows 10 Version 1703 machine.\nI don't see any error.  It works fine:\nc#\nvar client = new HttpClient();\nHttpResponseMessage response = client.GetAsync(\"https://www.cryptopia.co.nz/api/GetMarkets\").GetAwaiter().GetResult();\nConsole.WriteLine($\"{(int)response.StatusCode} {response.ReasonPhrase}\");\nstring body = response.Content.ReadAsStringAsync().GetAwaiter().GetResult();\nConsole.WriteLine(body);. I also ran a quick test building a netcoreapp on the GitHub CoreFx master branch and it also had no errors.. Capturing Wireshark traces would be useful.. I tried the code:\nc#\nvar url = \"https://www.waikatoregion.govt.nz/services/regional-services/river-levels-and-rainfall/river-levels-and-flow-latest-reading/\";\nvar client = new HttpClient();\nvar resp = client.GetAsync(url).Result;\nvar body = resp.Content.ReadAsStringAsync().Result;\nand ran this against .NET Core 2.0.  I don't see any errors.  I get back a 200 OK from the server.\n. >I have a fiddler capture I can provide showing what I\u2019m seeing, would they help?\nYes, please post the Fiddler logs. Please post/zip them as binary captures and not simply text output of Fiddler.  Wireshark logs would be useful too.  Does this repro both with and without Fiddler?  Fiddler acts as an HTTP proxy and sometimes that skews repro scenarios.  Wireshark traces are preferred because they don't change the repro scenario.. >It seems when I run that code using .NET Core 2.0, Content-Length header is missing from the response (and I get the exception). However the same page requested by a browser has the field. \nThat by itself isn't bad.  Looking at the Fiddler traces, it seems the server is sending back responses using \"Transfer-Encoding: chunked\" format.  That means there won't be any \"Content-Length\" response headers.\nI don't see anything wrong in the traces right now.  Are you getting an exception when doing HTTP requests?  I wasn't able to repro that.\nIt would be best for you to open a new bug since this bug is closed and might not have anything to do with the behavior you see.  Please try out the new .NET Core 2.1 Preview 2 and see if you have problems still.\nSee: https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/\n. @PavelMekhnin what OS are you using? Windows?  Linux?. .NET Core 2.0 on Linux used CurlHandler as the HTTP stack.  CurlHandler supported embedded username/password in the URL with formats such as:\nhttp://username:password@example.com/\n.NET Core 2.1 on Linux uses SocketsHttpHandler.  SocketsHttpHandler is following a stricter security model where embedded username/password is ignored in the URL.\nIn general, the recommendation is to place username/password in the HttpClientHandler.Credentials property using a NetworkCredential object.\n. >I also checked the URI which i am sending to the WebProxy.\nIf the URI is provided like the below\nAddress = new Uri($\"servername:port\")\nthen i get the error \"Only the 'http' scheme is allowed for proxies\".\nIt is invalid to specify a proxy using just the \"servername:port\" format.  That is not a valid URI since it doesn't have a scheme.  You must specify it as \"http://servername:port\"\n\nthen i get the error \"Only the 'http' scheme is allowed for proxies\".\n\nThe error that you're getting is an incorrect error message, unfortunately.  That is probably a different bug of sorts.\nI would suggest that you retry this scenario using the latest .NET 2.1.6 release which contains all known fixes for proxies and enterprise authentication scenarios.\nhttps://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6-download.md\n. >HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, Uri); //Send request to endpoint.\nAlso, can you try an experiment?  If you change this from 'POST' to 'GET' does it work?\n. >I would like to know if there is some way of having an equivalent of in .NET Framework in .NET Core. \nWhat \"equivalent\" are you referring to?  I don't understand.. >oops.. sorry... setting in App.config which is available in ,NET Framework. Is there an equivalent of that in .NET Core.\nCurrently there are no default config files (app.config/web.config) for .NET Core apps that are similar to .NET Framework.  So, it will not be possible to map this concept directly.\nThere is generalized support for configuration such as that provided by ASP.NET for example:\nhttps://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/index?view=aspnetcore-2.1\nThere are also configuration patterns using 'appsettings.json' as well:\nhttps://adamrussell.com/2018/11/05/appsettings-json-in-a-net-core-console-application/\nBut those configuration mechanisms are not something that CoreFx itself could use.\nWe are considering adding environment variable support on Windows .NET Core for static proxies similar to 'http_proxy' etc. that is available in the Linux implementation of .NET Core.  See issues such as https://github.com/dotnet/corefx/issues/29934.. >Windows .NET core doesn't support environment variable like http_proxy. Please correct me if I am wrong.\nCorrect.  Windows .NET Core doesn't support environment variables.  We are considering adding that feature in a future release.\nHowever, Windows. NET Core supports the standard IE settings for proxies including automatic discovery of PAC files, explicit PAC files or explicit proxy server settings.  This is the recommended thing to use for enterprise scenarios where proxies are used on the network.\n\n. >I get a 407 proxy authentication error. \nHow are you passing in credentials to the proxy?  If you are using the \"default system\" proxy, then the HTTP stack will read the proxy settings from IE settings.  But you are required to tell HttpClient to use some credentials to pass to the proxy.  In the case of the \"default system\" proxy, you need to write code like this:\n```c#\nvar handler = new HttpClientHandler();\nhandler.DefaultProxyCredentials = System.Net.CredentialCache.DefaultNetworkCredentials;\nvar client = new HttpClient(handler);\n// ...\n```\nI'm assuming in the example above that your enterprise networking topology uses an authenticating proxy and that the proxy use Windows auth schemes (such as Negotiate or NTLM).  Using the code above will use the default credentials of the logged in user and pass those to the authenticating proxy.  Thus, it should prevent getting the 407 from the proxy.. >Option 2\nHttpClient client = new HttpClient();\nThis option will never work because you are not specifying credentials for the proxy at all.  So, if the default system proxy requires credentials, you will always get a 407.\nLet's start with collecting some information.\n\nWhat version of Windows OS are you running?  Please open up a CMD.EXE window and type \"ver\".\nWhat version of .NET Core are using?  Type \"dotnet --info\" from a CMD.EXE window.\nPlease show a screenshot of your IE settings dialog for proxy settings. \n\nCan you attach a Wireshark trace of the failing scenario?\nWhat happens if you switch to the older HTTP stack implementation?  Add the following line of code to your application:\nc#\nAppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false);\n. Thank you for the information.\nWhat happens if you change the IE settings so that instead of specifying \"Use automatic configuration script\", you instead type the name of the server and the port number into the \"Use a proxy server for your LAN\" section.  Then uncheck the \"Use automatic configuration script\" and check the \"Use a proxy server for LAN\" checkbox.\nIn all cases, make sure you use the following pattern for setting up HttpClientHandler, HttpClient:\n```c#\nvar httpClientHandler = new HttpClientHandler()\n{\n    DefaultProxyCredentials = CredentialCache.DefaultNetworkCredentials\n};\nHttpClient client = new HttpClient(httpClientHandler);\n```\n. Also, are you able to do a Wireshark trace as well?. Can you provide Wireshark traces?\nAlso, can you provide PerfView traces as well?  See:\nhttps://github.com/dotnet/corefx/blob/master/Documentation/debugging/windows-instructions.md#using-perfview\n. @pmadusud Were you able to take additional traces?  Otherwise, we will unable to diagnose further.  Thank you.. >@geoffkizer @davidsh does the call stack ring a bell. It seems to be missing parts of the stack ...\nI haven't seen this.  There is not enough information to diagnose. The callstack above doesn't even include the text of the HttpRequestException. So, it isn't clear what is going here.\nIdeally, we need a repro we can run and debug.  . >I have verified locally that this is indeed the case - the System.Net.Http.dll from the .NET Core installation is used. How does .NET Core decide to both download 4.3.0 from nuget, but decide to use the version inbox in .NET Core?\n@ericstj @joperezr Can you help explain how this works?  It is \"binding\" magic that makes sure that the \"inbox\" System.Net.Http.dll is used instead of NuGet version.  Note that in this case, \"inbox\" refers to a version of System.Net.Http.dll from Microsoft.NETCore.App instead of using the one from System.Net.Http NuGet package.\nNote also that in the .NET Framework case, this is \"binding\" magic as well to prefer the GAC version of System.Net.Http.dll instead of any System.Net.Http.dll from a Nuget package.. ",
    "maltium": "I can confirm it's working correctly now. During last week it was failing intermittently, but then early Sunday and the next few days it started failing 100%. These few days it's working normally.\nUnfortunately I don't have control over that endpoint. What would be useful information to keep in case I manage to reproduce it again?. ",
    "jourdant": "@davidsh I have another URL where I encounter this issue.\nvar url = \"https://www.waikatoregion.govt.nz/services/regional-services/river-levels-and-rainfall/river-levels-and-flow-latest-reading/\";\nvar client = new HttpClient();\nvar resp = client.GetAsync(url).Result;\nvar body = resp.Content.ReadAsStringAsync().Result;\nHow do we do the equivalent of <httpWebRequest useUnsafeHeaderParsing=\"true\" /> on .NET Core 2.0?. 100% repro in this case. The web server is feeding back a malformed set of headers.\n[EDIT] Delete previous email reply by @karelz. I have a fiddler capture I can provide showing what I\u2019m seeing, would they help?\nIt seems when I run that code using .NET Core 2.0, Content-Length header is missing from the response (and I get the exception). However the same page requested by a browser has the field. I\u2019ve tried getting .NET Core to match the headers exactly on the request,  but still have issues.\nSent from my iPhone\nOn 13/04/2018, at 3:19 AM, David Shulman notifications@github.com<mailto:notifications@github.com> wrote:\nI tried the code:\nvar url = \"https://www.waikatoregion.govt.nz/services/regional-services/river-levels-and-rainfall/river-levels-and-flow-latest-reading/\";\nvar client = new HttpClient();\nvar resp = client.GetAsync(url).Result;\nvar body = resp.Content.ReadAsStringAsync().Result;\nand ran this against .NET Core 2.0. I don't see any errors. I get back a 200 OK from the server.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/dotnet/core/issues/783#issuecomment-380880650, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AAOFimk8kLyW6Aj_jqsTkJH1YYMTwclEks5tn4yBgaJpZM4OpPIo.\n. Please find the Fiddler capture attached\nfiddler_capture.saz.zip\n. ",
    "snikeguo": "@dpjain https://github.com/AvaloniaUI/Avalonia      look it!. ",
    "parsalotfy": "https://github.com/andlabs/libui\nand\nhttps://github.com/noliar/DevZH.UI\nmay help you ;). ",
    "flybeyond": "A very good suggestion.  MS need to consider it seriously.. ",
    "chcosta": "I'll make sure we are tracking this internally and get someone investigating.  Thanks for reporting this potential problem.. I'd also add a link to the documentation.  Actually, maybe just change this to a link to the documentation, and then update the documentation to add a link to this script (since it's not immediately obvious how to get here from there) - https://github.com/dotnet/source-build/blob/dev/release/2.0/Documentation/boostrap-new-os.md\nFYI @janvorli . Also, file an issue to update this once the code has made it to master. hmm... not sure why I didn't see that.  Same comments though.  The documentation doesn't tell you where to go to get to the script (or not obviously).  A link to the documentation and updating the documentation to clearly link to the script would be friendlier (IMO).  And these links should get updated when the code gets moved to master.\n. Reading through it seems a little weird to specifically call out a script here that no longer exists.  Might be confusing to someone coming to this page for the first time.  Maybe change this to...\nThe .NET CLI Bootstrapping tool has been deprecated... blah blah blah \nAnd then above, (in the \"Name\" section) change \".NET Cli Bootstrapping Tool\" to \".NET Cli Bootstrapping Tool (deprecated)\". With these commented out, what is the CI testing?  Can the CI just be removed for dotnet-core?. Sounds good.  Maybe just delete these lines and call it good.. ",
    "jcagme": "@Tragetaschen thanks for reporting. \nWhen checking our CDN I found some latency spikes from 9PM to 7AM PST. This is when you ran init-tools.sh and tried downloading the package. I tried on my end a hour back and the package was downloaded in no time.\nAlso, there was am Azure network infra outage in the Asia-Pacific region. This might also affect the download time.\nAre you still experiencing the same?. I see there was again a rise in latency that began at 2:57AM UTC today and looks like it started getting better at 12PM UTC. I've opened an Azure support ticket to get some help on their side to get things squared out. As soon as I hear back from them I update this issue.. @Tragetaschen Azure support guys have asked to ask you to run the same wget command but with -S -O NUL (wget -S -O NUL [URL]) so we get more details on the request. Also, are you using some sort of VPN? In your logs 93.184.221.200 is located in Central US and not in Germany.\nPlease post the output here so I can send it to the support folks.. Interesting. I don't know where the VS installer is hosted but it might be related. I'll pass all your report information to the Azure support folks.\nThanks for the detailed information!. @Tragetaschen Azure Support found that the content is being served from Verizon's POP server cache so they've opened a ticket on them. I'll keep this issue up to date as they update the ticket.. @Tragetaschen Verizon support just replied and asked if you could copy-paste the following and after waiting some time provide the output of the page please. The URL is: http://wpc.366F4.kappacdn.net/002DCC/nc/headers.html?url=http://wpc.366F4.kappacdn.net/crossdomain.xml&req=HEAD . Thanks, details have been shared with Verizon support.. Good to know there are workarounds this problem!\nVerizon folks reported they haven't found an issue neither their tests nor with the data you have provided and asked that if you are still hitting this issue if you could kindly provide the output of running mtr against the CDN url. With this we can pinpoint if and where there might be an slow hop in the middle or something. For more information about mtr please check: https://www.digitalocean.com/community/tutorials/how-to-use-traceroute-and-mtr-to-diagnose-network-issues. Thanks. I've sent this output to the Verizon folks. \nJust as a side question, this happens in all your machines, all under the same network connection? Have you tried different network/machines?. Looks like Verizon still is not finding anything noticeable from the traces and asked if you could share your public IP so they can run an inverse MTR. Feel free to send it to my profile email. Also, I was thinking in adding you to the ongoing email thread with them so the link is \"direct\" and I am not playing a proxy role :). I'd check tomorrow and see whether the slow behavior repros or not and then we can decide if we want to follow up or close this issue.. ",
    "Tragetaschen": "I just realized I forgot to mention my connection type: It's a German T-Online VDSL with 100MBit/s downstream. I can regularly get to 11 MiB/s download speeds.\nI tested it just now with mixed results. The speed varies between the full 11MiBs and sometimes goes down to 1 MiB/s during just one download. I had one run (starting at 07:41:12 UTC) that resulted in an average of 979KiB/s going to as low as 450 KiB/s.. @jcagme The IPv4 address is the one from dotnetcli.azureedge.net as well as the IPv6 address:\n$ host dotnetcli.azureedge.net\ndotnetcli.azureedge.net is an alias for dotnetcli.ec.azureedge.net.\ndotnetcli.ec.azureedge.net is an alias for cs9.wpc.v0cdn.net.\ncs9.wpc.v0cdn.net has address 93.184.221.200\ncs9.wpc.v0cdn.net has IPv6 address 2606:2800:133:206e:1315:22a5:2006:24fd\nAs you can see, wget chooses the IPv6 connection\nHere's the output with the additional parameters: It again started with the full bandwidth and then broke down to below 600 KiB/s. I've taken the liberty to replace NUL by /dev/null\n```\nwget -S -O /dev/null https://dotnetcli.azureedge.net/dotnet/Sdk/2.0.0-preview1-005899/dotnet-dev-linux-x64.2.0.0-preview1-005899.tar.gz\n--2017-08-07 13:05:10--  https://dotnetcli.azureedge.net/dotnet/Sdk/2.0.0-preview1-005899/dotnet-dev-linux-x64.2.0.0-preview1-005899.tar.gz\nResolving dotnetcli.azureedge.net (dotnetcli.azureedge.net)... 2606:2800:133:206e:1315:22a5:2006:24fd, 93.184.221.200\nConnecting to dotnetcli.azureedge.net (dotnetcli.azureedge.net)|2606:2800:133:206e:1315:22a5:2006:24fd|:443... connected.\nHTTP request sent, awaiting response...\n  HTTP/1.1 200 OK\n  Accept-Ranges: bytes\n  Content-Type: application/octet-stream\n  Date: Mon, 07 Aug 2017 11:05:11 GMT\n  Etag: 0x8D48E7FA37E89AC\n  Last-Modified: Fri, 28 Apr 2017 21:43:42 GMT\n  Server: ECAcc (arn/458A)\n  X-Cache: HIT\n  x-ms-blob-type: BlockBlob\n  x-ms-lease-status: unlocked\n  x-ms-request-id: f06a610a-0001-00d1-116c-0fdbda000000\n  x-ms-version: 2009-09-19\n  Content-Length: 94172246\nLength: 94172246 (90M) [application/octet-stream]\nSaving to: \u2018/dev/null\u2019\n/dev/null                     100%[===============================================>]  89.81M   782KB/s    in 59s\n2017-08-07 13:06:10 (1.51 MB/s) - \u2018/dev/null\u2019 saved [94172246/94172246]\n```\n. Bingo:\nWhen I force wget to use IPv4 with a -4 parameter, the download is always fast. Only running via IPv6 is slow (without parameter or -6). I've checked back and forth and the correlation is very, very high.\n```\n$ wget -4 -S -O /dev/null https://dotnetcli.azureedge.net/dotnet/Sdk/2.0.0-preview1-005899/dotnet-dev-linux-x64.2.0.0-preview1-005899.tar.gz\n--2017-08-07 13:11:13--  https://dotnetcli.azureedge.net/dotnet/Sdk/2.0.0-preview1-005899/dotnet-dev-linux-x64.2.0.0-preview1-005899.tar.gz\nResolving dotnetcli.azureedge.net (dotnetcli.azureedge.net)... 93.184.221.200\nConnecting to dotnetcli.azureedge.net (dotnetcli.azureedge.net)|93.184.221.200|:443... connected.\nHTTP request sent, awaiting response...\n  HTTP/1.1 200 OK\n  Accept-Ranges: bytes\n  Content-Type: application/octet-stream\n  Date: Mon, 07 Aug 2017 11:11:13 GMT\n  Etag: 0x8D48E7FA37E89AC\n  Last-Modified: Fri, 28 Apr 2017 21:43:42 GMT\n  Server: ECAcc (frc/8F8E)\n  X-Cache: HIT\n  x-ms-blob-type: BlockBlob\n  x-ms-lease-status: unlocked\n  x-ms-request-id: 54fdeddd-0001-00aa-529f-0bb06a000000\n  x-ms-version: 2009-09-19\n  Content-Length: 94172246\nLength: 94172246 (90M) [application/octet-stream]\nSaving to: \u2018/dev/null\u2019\n/dev/null                     100%[===============================================>]  89.81M  10.2MB/s    in 9.4s\n2017-08-07 13:11:23 (9.58 MB/s) - \u2018/dev/null\u2019 saved [94172246/94172246]\n```. I had reported a similar bandwidth problem against the Visual Studio 2017 installer. The behavior there is extremely comparable to this issue:\nhttps://developercommunity.visualstudio.com/content/problem/88440/the-installer-doesnt-use-the-available-download-ba.html\n. Hmm, there's a slight problem: On my Linux (server) box with wget, there's no way to run the JavaScript embedded on headers.html. I've instead put the URL into Edge on my Windows box. Below is the Select-All+Copy from the page as well as an image.\n```\nEND USER IP:     USER INFO: Browser CodeName: MozillaBrowser Name: NetscapeBrowser Version: 5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36 Edge/15.15063Cookies Enabled: truePlatform: Win32User-agent header: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36 Edge/15.15063REQUEST: URL:  http://wpc.366F4.kappacdn.net/crossdomain.xmlMethod: HEADTime: 0.012 secondsHTTP Status: 200 RES. HEADERS::Accept-Ranges: bytes Content-Type: text/xml Date: Tue, 08 Aug 2017 07:28:38 GMT Last-Modified: Thu, 27 Jul 2017 12:40:13 GMT Server: ECAcc (frc/8F52) Content-Length: 329 | \u00a0\n-- | --\n\u00a0\n```\n\n. Just as a point of interest: I disabled IPv6 on Windows and then ran the Visual Studio installer. This gave me back the full download bandwidth.. Yes, still hitting. I tried it first thing this morning and immediately got an average of <1Mb/s with lows in the 400 kb/s range.\nHere's some mtr output:\nMy traceroute  [v0.86]\nnative-linux (::)                                                           Thu Aug 10 09:47:45 2017\nKeys:  Help   Display mode   Restart statistics   Order of fields   quit\n                                                            Packets               Pings\n Host                                                     Loss%   Snt   Last   Avg  Best  Wrst StDev\n 1. fritz.box                                              4.0%   631    5.0   6.1   0.6  81.6   6.5\n    p200300C513BF05F40000000000000001.dip0.t-ipconnect.de\n 2. p200300C513BF05F40000000000000001.dip0.t-ipconnect.de  4.8%   631    5.0   9.1   4.7  93.3  10.9\n 3. ???\n 4. 2003:0:fc03:4005::2                                    4.4%   630   35.0  36.8  34.5 153.6   9.8\n 5. 2606:2800:133:206e:1315:22a5:2006:24fd                 0.0%   630   30.6  31.6  30.3  96.9   5.0\nThere's a rather high packet loss percentage, but these don't happen continuously but in bursts.. The bursts also appear in the IPv4 version:\nMy traceroute  [v0.86]\nnative-linux (0.0.0.0)                                                      Thu Aug 10 09:53:32 2017\nKeys:  Help   Display mode   Restart statistics   Order of fields   quit\n                                                            Packets               Pings\n Host                                                     Loss%   Snt   Last   Avg  Best  Wrst StDev\n 1. fritz.box                                              5.7%   333    4.9   6.4   0.4  79.9   9.1\n    62.155.244.139\n 2. 62.155.244.139                                         5.1%   333    4.9   7.0   4.5  76.7   8.8\n 3. 217.5.118.26                                           4.8%   333   10.2  10.5   9.5  45.3   3.0\n 4. 80.156.163.94                                          5.1%   333   10.3  11.6   9.5  94.7   6.7\n 5. 152.195.100.129                                        5.1%   333   10.2  14.5   9.6 101.1   8.5\n 6. 93.184.221.200                                         0.3%   333    9.0   9.5   8.7  58.8   3.5. If Verizon is fine with that (I'm not the one with the contract) I'm perfectly fine with it. However:\nThis morning, nothing reproduces. Everything is as fast as it should be.\n```\n$ wget -6 -S -O /dev/null https://dotnetcli.azureedge.net/dotnet/Sdk/2.0.0-preview1-005899/dotnet-dev-linux-x64.2.0.0-preview1-005899.tar.gz\n--2017-08-14 10:06:10--  https://dotnetcli.azureedge.net/dotnet/Sdk/2.0.0-preview1-005899/dotnet-dev-linux-x64.2.0.0-preview1-005899.tar.gz\nResolving dotnetcli.azureedge.net (dotnetcli.azureedge.net)... 2606:2800:133:206e:1315:22a5:2006:24fd\nConnecting to dotnetcli.azureedge.net (dotnetcli.azureedge.net)|2606:2800:133:206e:1315:22a5:2006:24fd|:443... connected.\nHTTP request sent, awaiting response...\n  HTTP/1.1 200 OK\n  Accept-Ranges: bytes\n  Content-Type: application/octet-stream\n  Date: Mon, 14 Aug 2017 08:06:10 GMT\n  Etag: 0x8D48E7FA37E89AC\n  Last-Modified: Fri, 28 Apr 2017 21:43:42 GMT\n  Server: ECAcc (arn/458A)\n  X-Cache: HIT\n  x-ms-blob-type: BlockBlob\n  x-ms-lease-status: unlocked\n  x-ms-request-id: f06a610a-0001-00d1-116c-0fdbda000000\n  x-ms-version: 2009-09-19\n  Content-Length: 94172246\nLength: 94172246 (90M) [application/octet-stream]\nSaving to: \u2018/dev/null\u2019\n/dev/null                     100%[===============================================>]  89.81M  11.0MB/s    in 8.9s\n2017-08-14 10:06:19 (10.1 MB/s) - \u2018/dev/null\u2019 saved [94172246/94172246]\n```. Still wonderful. Also, downloading/installing VS 15.3 was a real pleasure.\nI'm rather curious what happened, but I wouldn't want to consume more of your time than I already have. Let's just assume this here resulted is someone finding some faulty/misconfigured hardware somewhere and close the issue.\nThanks for all your time and effort!. ",
    "Knusan": "Having a similar problem, only running on windows 10.. ",
    "thomaswolff": "@weshaggard Yes, the ClassLibrary.dll file is on disk. The two projects are in separate solutions, so after building the .NET Standard library, I added a reference to it in the web project by browsing for the dll.. > OK perhaps the issue isn't that file being missing then perhaps it is one of its dependencies. When you reference it as a raw binary the tooling doesn't do anything pull in any missing dependencies that might be needed.  \n@weshaggard The only dependencies the class library has is the NETStandard.Library under the SDK section. \n\nI tried adding the NETStandard.Library in the web project, but this didn't solve the problem. I still got a runtime error accessing the \"About\" page.\n\nCan you try loading the ClassLibrary in the same solution and do a ProjectReference to it and see if the same issue occurs? You could also take a look at the dependencies and try to see if any are missing.\n\nAfter removing the NETStandard.Library from the web project, I loaded the class library in the same solution as the web project, and did a project reference to it. The same issue does not occur referencing the class library this way. So this works. \nHowever, adding the class library in the web project solution is not a viable option in our case as the fictional class library in the original post represents a common library in our project that is meant to be referenced in various solutions. \nI should point out that this is only a problem with .NET Core web apps >= 1.1. ",
    "amugox": "I am having the same issue here. ",
    "sonphnt": "Actually I have the same problem with error 502.5 in IIS when migrating from core 1.1 to core 2.0 final.\nHas anyone have the official document about how to deploy .net core 2.0 webapp to IIS?\nThanks. ",
    "ViktorHofer": "It's not related to binary serialization with BinaryFormatter.. @chintan3100 I spent some time trying to reproduce your issue but I don't have enough information to understand what's going on here.\nPlease post a small reproduction code. I don't know which APIs you are using (even it they aren't .NET Core related but Json.NET). . Issue moved to dotnet/corefx #24473 via ZenHub\n. cc @janvorli. UWP feature suggestion should be filled at dev.windows.com. For this specific request there's already an item: https://wpdev.uservoice.com/forums/110705-universal-windows-platform/suggestions/6185763-allow-direct-printing-without-modern-ui-print-dial. Thanks @svick. Took a quick look. The cause is that OnDeserialization on the HashSet<> is called before OnDeserialization is called on the Dictionary<,>. \nA more general issue description: The hash code computation of stored childs is wrong it the (n-deep) child defers its deserialization logic, i.e. with IDeserializationCallback.OnDeserialization.\nFor a possible solution I would need to dig deeper. For now I'll move the issue to corefx.. @karelz I'm not an admin here, can you please move it? Thanks.. ",
    "shmao": "Issue moved to dotnet/corefx #22965 via ZenHub\n. .NET Core 2.1 RUNTIME -> .NET Core runtime 2.1.0 preview daily builds\nWhat does supported developer configuration. mean?. .NET Core 2.1 SDK -> .NET Core SDK 2.1.0 preview daily builds\nThe link should be https://github.com/dotnet/cli#installers-and-binaries\nWe may also want to include the version of the build that we've verified.. @huanwu can you please verify whether the console app created by sdk 2.1 uses netcoreapp2.0 or netcoreapp2.1? . Added the above note.. Done. Done. Change this to \n\ni. \n. Done.. Good catch. I'll fix it.. Changed all \".Net\" to \".NET\" throughout the doc.. \n",
    "srpeterson": "I just tried building on VSTS and have exactly the same problem. Builds just fine locally with VS 2017.3, but the \"Restore\" build step on VSTS  fails. I'm using the  'Hosted VS2017' agent queue and the 'Version 2.* (preview)'  (the only one available) in the restore step. \nI will also attach my .csproj file\ncsprojproject.txt\n. Yep! Worked also for me!. ",
    "Pierl0": "I've got the same issue. \nBuild on local VS2017.3 on my desktop. I've update my azure build agent on VS2017.3, with Netcore2.0 SDK, but it failed each \nI attach my csproj file. csproj.txt. ",
    "mirind4": "I've got the same issue.  Build is fine locally with VS 2017.3. It seems that I am not alone, hopefully soon we find a solution for that. I attach my  csproj.txt\n. ",
    "rosieks": "I have the same problem - try to update NuGet to version 4.3 on build machine.. I have that problem for project that target version 2.0 from beginning.. It looks like build server just lack Visual Studio 15.3. ",
    "patoncrispy": "I had this problem and had to modify my build configuration. I answered a similar question with my solution on Stack Overflow: https://stackoverflow.com/questions/45717283/vsts-build-packages-failed-to-restore-unable-to-resolve-netstandard-library/45739237#45739237.. No problem! I just wish these things were better documented, or at least, more visible. . ",
    "jsheetzati": "Awesome, that worked for us too.  Thanks @patoncrispy . ",
    "mdesenfants": "@patoncrispy Worked for us as well!. ",
    "takazm": "Works, Thanks. ",
    "hkshambesh": "update your visual studio 2017 to latest version and it worked for me. ",
    "Jacquers": "I'm on VS2017 15.4.4 and still can't build due to these errors. The weird thing is that it used to work, then I had to go back to a restore point due to blue screen issues and even after completely uninstalling and reinstalling VS it still won't build.. It resolved when VS updated. I have 4.4.1.4633\nI'm hoping that an update to VS will solve the issue, but the weird thing is that a coworker has an older version of VS than me and he doesn't have the issue.\n. My coworker is using a lower version of VS20107 (and nuget).\nIf I downgrade to .Net Core 2.0.0 Visual Studio does not pick it up in the list of available frameworks.\nI don't have that folder user my userprofile folder. I use a program called Everything to find files / folders.\nI do have have it in other places:\nC:\\Program Files (x86)\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.abstractions\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n\nMicrosoft.AspNetCore.Authentication.Abstractions\n2.0.1\nMicrosoft\nMicrosoft\ntrue\nhttps://raw.githubusercontent.com/aspnet/Home/2.0.0/LICENSE.txt\nhttps://asp.net/\nhttps://go.microsoft.com/fwlink/?LinkID=288859\nASP.NET Core common types used by the various authentication components.\nCopyright \u00a9 Microsoft Corporation\naspnetcore authentication security\ntrue\n\n\n\n\n\n\n\n\n\n\n```\nC:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.abstractions\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\n  <metadata>\n    <id>Microsoft.AspNetCore.Authentication.Abstractions</id>\n    <version>2.0.1</version>\n    <authors>Microsoft</authors>\n    <owners>Microsoft</owners>\n    <requireLicenseAcceptance>true</requireLicenseAcceptance>\n    <licenseUrl>https://raw.githubusercontent.com/aspnet/Home/2.0.0/LICENSE.txt</licenseUrl>\n    <projectUrl>https://asp.net/</projectUrl>\n    <iconUrl>https://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>\n    <description>ASP.NET Core common types used by the various authentication components.</description>\n    <copyright>Copyright \u00a9 Microsoft Corporation</copyright>\n    <tags>aspnetcore authentication security</tags>\n    <serviceable>true</serviceable>\n    <repository type=\"git\" url=\"https://github.com/aspnet/HttpAbstractions\" />\n    <dependencies>\n      <group targetFramework=\".NETStandard2.0\">\n        <dependency id=\"Microsoft.AspNetCore.Http.Abstractions\" version=\"2.0.1\" />\n        <dependency id=\"Microsoft.Extensions.Logging.Abstractions\" version=\"2.0.0\" exclude=\"Build,Analyzers\" />\n        <dependency id=\"Microsoft.Extensions.Options\" version=\"2.0.0\" exclude=\"Build,Analyzers\" />\n      </group>\n    </dependencies>\n  </metadata>\n</package>\nC:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.authentication.abstractions\nNo nuspec here.\nThanks for you help, I do appreciate it.. Here you go. I've tried a couple of different things like changing the 2.0.1 to 2.0.0, etc, but in the end all that worked was changing Microsoft.AspNetCore.All back to 2.0.0\n```\n\n\nnetcoreapp2.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n. dotnet restore from the package manager console didn't solve the issue.\nI updates VS2017 this morning to 15.5.1 (with Package Manager Console Host Version 4.5.0.4685)\nUpdated to 2.0.3 and it restored and built successfully :). It will probably be fixed with the next VS update.. Make sure you have the latest Visual Studio version / update, it usually solves the issue.. ",
    "VinnieThePooh": "@Jacquers , have you resolved this issue?. ",
    "John0King": "\n'Support' means that .NET Core is built and tested on the OS and Microsoft Developer Support may be contacted for assistance with .NET Core on the environment.\n\nwhat's the meaning of  Out of support in the document ,  Can not  run  or  just not officially support.\nI'm kind of worry about win7 after 2020. what about new version of  dotnet core ?  Does that mean the new version of dotnet core can no install or run on those OS.  For me I really worry about win7 after 2020 and it still have lots of users \u3002 Linux is free but windows not.   there are  lots of win xp  users after 2014  and that almost kill .Net (  in China it does  )  ,\n .net is the first language that do not support xp.\nand if developers stay on old version of .net, then .net community will once again be separated.\nI really hope .net's Lifecycle Policy can consider more on users  . ",
    "jogibear9988": "What about Linux on ARM? (for example RPI). ",
    "digitalray": "Thanks. That fixed the original error. But now I get the following:\n********ERROR LOG START***********\nERROR: An error occured in /home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr/Tools/dotnetcli/dotnet /home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr/Tools/run 2. Check 2 logs under /home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr.\n/home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr/bin/obj/Linux.x64.Release /home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr\nInvoking \"/home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr/src/pal/tools/gen-buildsys-clang.sh\" \"/home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr\" 3 5 x64 Release    -DCLR_CMAKE_TARGET_OS=Linux -DCLR_CMAKE_PACKAGES_DIR=/home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr/packages -DCLR_CMAKE_PGO_INSTRUMENT=0 \n-- The C compiler identification is Clang 3.6.2\n-- The CXX compiler identification is Clang 3.6.2\n-- Check for working C compiler: /usr/bin/clang\n-- Check for working C compiler: /usr/bin/clang -- broken\nCMake Error at /usr/share/cmake/Modules/CMakeTestCCompiler.cmake:61 (message):\n  The C compiler \"/usr/bin/clang\" is not able to compile a simple test\n  program.\nIt fails with the following output:\nChange Dir: /home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr/bin/obj/Linux.x64.Release/CMakeFiles/CMakeTmp\nRun Build Command:/usr/bin/gmake \"cmTryCompileExec1621937052/fast\"\n/usr/bin/gmake -f CMakeFiles/cmTryCompileExec1621937052.dir/build.make\n  CMakeFiles/cmTryCompileExec1621937052.dir/build\ngmake[1]: Entering directory\n  `/home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr/bin/obj/Linux.x64.Release/CMakeFiles/CMakeTmp'\n/usr/bin/cmake -E cmake_progress_report\n  /home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr/bin/obj/Linux.x64.Release/CMakeFiles/CMakeTmp/CMakeFiles\n  1\nBuilding C object\n  CMakeFiles/cmTryCompileExec1621937052.dir/testCCompiler.c.o\n/usr/bin/clang -Wall -std=c11 -o\n  CMakeFiles/cmTryCompileExec1621937052.dir/testCCompiler.c.o -c\n  /home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr/bin/obj/Linux.x64.Release/CMakeFiles/CMakeTmp/testCCompiler.c\nLinking C executable cmTryCompileExec1621937052\n/usr/bin/cmake -E cmake_link_script\n  CMakeFiles/cmTryCompileExec1621937052.dir/link.txt --verbose=1\n/usr/bin/clang -Wall -std=c11\n  CMakeFiles/cmTryCompileExec1621937052.dir/testCCompiler.c.o -o\n  cmTryCompileExec1621937052 -rdynamic\n/usr/bin/ld: cannot find crt1.o: No such file or directory\n/usr/bin/ld: cannot find crti.o: No such file or directory\n/usr/bin/ld: cannot find crtbegin.o: No such file or directory\n/usr/bin/ld: cannot find -lgcc\n/usr/bin/ld: cannot find -lgcc_s\n/usr/bin/ld: cannot find -lc\n/usr/bin/ld: cannot find -lgcc\n/usr/bin/ld: cannot find -lgcc_s\n/usr/bin/ld: cannot find crtend.o: No such file or directory\n/usr/bin/ld: cannot find crtn.o: No such file or directory\nclang: error: linker command failed with exit code 1 (use -v to see\n  invocation)\ngmake[1]: Leaving directory\n  `/home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr/bin/obj/Linux.x64.Release/CMakeFiles/CMakeTmp'\ngmake[1]: *** [cmTryCompileExec1621937052] Error 1\ngmake: *** [cmTryCompileExec1621937052/fast] Error 2\n  CMake will not be able to correctly generate this project.\nCall Stack (most recent call first):\n  CMakeLists.txt:9 (project)\n-- Configuring incomplete, errors occurred!\nSee also \"/home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr/bin/obj/Linux.x64.Release/CMakeFiles/CMakeOutput.log\".\nSee also \"/home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr/bin/obj/Linux.x64.Release/CMakeFiles/CMakeError.log\".\n/home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr\n/home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr/bin/obj/Linux.x64.Release /home/ec2-user/dotnet/amzn.2017.03-x64-dotnet/src/coreclr\nFailed to generate native component build project!\n ROVER has detected a failure. A repro shell script has been placed at amzn.2017.03-x64-dotnet/src/coreclr/rover_failure-repro.sh\n ROVER To reproduce the failure:\n    cd amzn.2017.03-x64-dotnet/src/coreclr\n    ./rover_failure-repro.sh\n ROVER is forcefully closing. Note that re-running Rover will execute it with DevMode enabled (no git commands will be run)\n********ERROR LOG END**********\nHere is the clang version on that instance: clang.x86_64 0:3.6.2-1.12.amzn1\nThanks,\nSarkis. ",
    "Ataden": "I confirm such an issue. On Windows EF Core and SQL library work great but on Linux they are way too slow. It is almost imposible to use them on Linux at all.. I confirm such an issue. On Windows EF Core and SQL library work great but on Linux they are way too slow. It is almost imposible to use them on Linux at all.. ",
    "ayurjev": "I noticed the same slow performance while I was trying to use Core 2.0 on MacOS...\nIt had been taking 40-50 seconds to execute simple query..... ",
    "zhili1208": "@TAGC Could you provide the details about your docker image SDK?. @TAGC Could you provide the details about your docker image SDK?. ",
    "varnav": "Looks like microsoft/dotnet:2.0.0-runtime-jessie now contains 2.0 RTM, since today.. ",
    "68681395": "There is the same problem with my project, the workaround to resolve it successfully is that remove the item 'C:\\Program Files (x86)\\dotnet' from the Path of Environment Variable because I found I did not install the right netcore version under X86. I have not tried to install the proper version with x86, appreciate that you tell me if you have done that test.. ",
    "dermeister0": "Fixed the issue by changing microsoft/aspnetcore-build:2.0.0-preview2 base image to microsoft/aspnetcore-build:2.0.6-2.1.104 in Dockerfile.. Resolved the issue by updating nuget.commandline from 4.1.0 to 4.3.0.. ",
    "wuzzeb": "The checksums file doesn't seem to be updated properly:\nThe page https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.0-download.md\ncorrectly links to the new combined linux runtime dotnet-runtime-2.0-linux-x64.tar.gz but when\nyou open the runtime checksum file also linked from the same page (https://dotnetcli.blob.core.windows.net/dotnet/checksums/2.0.0-runtime-sha.txt) it still has the broken out debian, rhel, ubuntu, etc and the sha256sum for dotnet-runtime-2.0-linux-x64.tar.gz is missing.  For reference, this is the sha256sum of the file I downloaded\n~~~\n69ecad24bce4f2132e0db616b49e2c35487d13e3c379dabc3ec860662467b714  dotnet-runtime-2.0.0-linux-x64.tar.gz\n~~~. ",
    "zenixgrace": "hello ,\nis the net core 2.0 can use vs 2015 for ide?\nnow i'm still using net core 1.1 and vs 2015 for the ide.\nif I want to upgrade to 2.0, is it necessary to install vs 2017 for the ide?\n. @nicksav just wanna ask a stupid question \nis that any reason why they have to force using vs 2017 ?\nis it have a break compability issued with vs 2015?. @nicksav the installer for vs 2017 so HUGE :( . anyway thanks for the reply :). @emiliano84  maybe, i get wrong installer, because i try to make it offline installer. ",
    "markmcdowell": "Thanks for the update guys, we've been waiting to use this!\nI ran into this issue pretty much straight away though: https://github.com/dotnet/corefx/issues/18406 \nWould be nice to have this listed somewhere, took me an hour to find I had to add a nuget package! (i'm just using System.Data.SqlClient direct not entity framework). ",
    "toddpmain": "Where is System.IO.Packaging in netcore 2.0? And System.Drawing.Drawing2D?. ",
    "Damon227": ".Net Core Library cann't reference .Net Standard Library\uff1f. ",
    "MaklaCof": "@nicksav \nHow did you solve problem with Error code 0x80004005:\nApplication 'MACHINE/WEBROOT/APPHOST/SH-TESTING' with physical root 'D:\\Data\\SH\\Testing\\www\\' failed to start process with commandline '\"dotnet\" .\\SH.dll', ErrorCode = '0x80004005 : ff.. ",
    "IssueWorld": "sorry for the bad text format :(. Just make a little measurement on OSX Sierra 10.12.6\nThis time i was using the official release of .net core 2.0.\nThe result of 4,4 seconds is GOOD.\n```\n       remote_ip:  192.168.178.5\n           local_ip:  192.168.178.5\n        num_connect:  1\n      num_redirects:  0\n    time_namelookup:  0,004189 Seconds\n       time_connect:  0,004691 Seconds\n    time_appconnect:  0,000000 Seconds\n     time_pretransfer:  0,004782 Seconds\n           time_redirect:  0,000000 Seconds\n   time_starttransfer:  1,810075 Seconds\n        size_download:  294888859 Bytes\n             size_header:  148 Bytes\n            size_request:  91 Bytes\n     speed_download:  66548592,000 Bytes/s\n\n     time_total:  4,431181\n\n```\nMay the huge time difference on linux is the json serialization.\nThe applications start to convert the 1 million instances into a json string.\nAfter that, the resulting string is transmitted to the requesting client.\n. I made one more test using Windows Server 2012 R2 Standard, 4 GB RAM, 2 Cores, hosted within VMWare Workstation 12 Pro. Within this test I was using the official release 2.0.0. Still GOOD.\n```\n$ curl -w \"@curl-format.txt\" -s http://192.168.178.117:5000/api/print -o /dev/null\n          remote_ip:  192.168.178.117\n           local_ip:  192.168.178.120\n        num_connect:  1\n      num_redirects:  0\n    time_namelookup:  0,000000 Seconds\n       time_connect:  0,000000 Seconds\n    time_appconnect:  0,000000 Seconds\n   time_pretransfer:  0,000000 Seconds\n      time_redirect:  0,000000 Seconds\n time_starttransfer:  1,716000 Seconds\n      size_download:  294888859 Bytes\n        size_header:  148 Bytes\n       size_request:  93 Bytes\n     speed_download:  60789292,000 Bytes/s\n\n     time_total:  4,851000\n\n```\nThis is a value I expected. I suspect there are some internal \"things\" within the JSON serialization in Linux. My test class has 7 properties. All togehter there are 7 millions \"json strings\" to create. BUT, maybe i am wrong and it's just a setting to activate on a linux machine.\nHopefully it's only this kind of tricky setting or a simple bug which can be fixed within a future release. For me, the availability of a cross plattform c# is a kind of dream, 10 years old :)\n. On Windows Server 2016 Core (2 GB RAM, 4 Cores) running within VMware Workstation i get the following:\n```\n$ curl -w \"@curl-format.txt\" -s http://10.40.10.158:5000/api/print -o /dev/null\n          remote_ip:  10.40.10.158\n           local_ip:  10.40.10.23\n        num_connect:  1\n      num_redirects:  0\n    time_namelookup:  0,000000 Seconds\n       time_connect:  0,000000 Seconds\n    time_appconnect:  0,000000 Seconds\n   time_pretransfer:  0,000000 Seconds\n      time_redirect:  0,000000 Seconds\n time_starttransfer:  1,295000 Seconds\n      size_download:  294888859 Bytes\n        size_header:  148 Bytes\n       size_request:  90 Bytes\n     speed_download:  59072287,000 Bytes/s\n\n     time_total:  4,992000\n\n```\n. @tmds Thanx. So its \"only\" a little problem with the NewGuid function. Hopefully it ca be fixed in a future release. . ",
    "crmckenzie": "I'd love to see this as a standard part of the release pipeline. Yay!. ",
    "scullinan": "+1 for chocolatey. ",
    "ehouarn-perret": "+1 for chocolatey. ",
    "beforan": "+1 for chocolatey. ",
    "EdouardM": "+1 for chocolatey. ",
    "tomlazelle": "+1 for chocolatey. ",
    "chwebdude": "+1 for chocolatey. ",
    "navimondo": "+1 4 chocolatey. ",
    "JRBonnema": "Strange that nobody has apparently looked at this yet. I get the same mistake when creating a Net standard class library. It must be a problem that doesn't affect most people.  When I compile I see lots of warnings like the one below. Apparently something has gone wrong downloading the .NET Core 2.0 SDK. The Dll's are apparently kept at different locations and are not all the same, some ones contains .NET Core 2.0 Dlls, others .Net Core 1.1 Dlls. A part of the problem is solved by emptying the NuGet cache. A repair load of 2.0 SDK goes ok, but doesn't solve the problem. Maybe it has something to do with roaming users\nEncountered conflict between 'Reference:C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.0\\build\\netstandard2.0\\\\ref\\System.Reflection.dll' and \n    'Reference:C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.reflection\\4.3.0\\ref\\netstandard1.5\\System.Reflection.dll'.  \nChoosing 'Reference:C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.0\\build\\netstandard2.0\\\\ref\\System.Reflection.dll' \n    because AssemblyVersion '4.1.2.0' is greater than '4.1.0.0'.. I managed to solve the problems I had. Part of my installlation of VS 2017 had become corrupt, especially the .Net4.7 part. I solved this by using the Repair option in Visual Studio. I experimented with using project template Class Library (.Net Standard). When just created such a project references Microsoft.NETCore.platforms ( 1.1.0), which is confusing, but I think it's not wrong. It's easy to forget that .Netstandard is a specification, not a framework and .Netstandard supports .Net.Core 1.1. After you add the propertygroup below to the project directory, the project will however create both a .Net Core 2.0 and .Net 4.6.1 dll. Try it out yourself.\n\n     <PropertyGroup>\n           <TargetFrameworks>netcoreapp2.0;net4.6.1</TargetFrameworks>\n     </PropertyGroup>. It's confusing, but not wrong.\n",
    "ratidzidziguri": "@JRBonnema  Do u mean i need to clean some cache on my local machine? could you please provide more info on how to test what u suggest?\nBeside that maybe other simply did not pay attention and they think they are using 2.0,but  in reality it is 1.1?:) folks could you please check the same behavior and let us know if u see the same issue?. @JRBonnema  Did not get your point. do you mean that this issue will be fixed if i do VS installation rep or u say that this behavior is normal and there is nothing to worry about? \nFolks at Microsoft maybe you take a look at this and let us know what the issue is?. ",
    "alexeyzimarev": "This is even worse. I converted RestSharp to be on netstandard2.0. It builds fine on my machine. But on my other machine and on anyone else's it is throwing errors on everything - CultureInfo, List, etc.\nSo I looked how it shows and compared it with a completely new .NET Standard class library. Here is how they look:\n\nThe csproj files are completely identical:\n```\n\n\nnetstandard2.0\n\n\n```\nI tried using <NetStandardImplicitPackageVersion>2.0.0</NetStandardImplicitPackageVersion> and it has no effect. But hence that the RestSharp project does not even have a reference to netstandard.dll. How this is even possible???. I have the same issue and I am sure I completed all steps from the referenced page. I get the following error:\n```\n~/ $ sudo apt-get install dotnet-sdk-2.2\nReading package lists... Done\nBuilding dependency tree     \nReading state information... Done\nE: Unable to locate package dotnet-sdk-2.2\nE: Couldn't find any package by glob 'dotnet-sdk-2.2'\nE: Couldn't find any package by regex 'dotnet-sdk-2.2'\n```\nThe output of ls /etc/apt/sources.list.d/ is:\nazure-cli.list           kubernetes.list            skype-stable.list  sublime-text.list                     vscode.list\ngoogle-chrome.list       mono-official-stable.list  slack.list         system76-ubuntu-pop-bionic.list       vscode.list.save\ngoogle-chrome.list.save  nodesource.list            spotify.list       system76-ubuntu-pop-bionic.list.save  yarn.list. It seems that the packages-microsoft-prod.deb tool doesn't properly handle third-party Bionic-based distributions. I use PopOS! from System76 and I have no issues installing any packages for Bionic.\nI copied the list manually and it worked:\nwget -q https://packages.microsoft.com/config/ubuntu/18.04/prod.list\nsudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list\nsudo apt update. ",
    "grokky1": "@darewreck54 @benaadams Would it not be better to inject it into the Startup constructor itself. Since logging is now setup in  Program, so I assume it's available via constructor injection.\nI suppose you could even do public Startup(ILogger<Startup> logger) { ... } if you need to perform logging during startup.. ",
    "darewreck54": "Thanks, I'll try it out.  I think It's is actually asp.net core specific since it deals with the params passed into the configure method.  In asp.net core 1.1, it was passed in the params.  With asp.net core 2 it changed.  Didn't know you can add it back.\nI'll test it out and close it when I've verified.\nThanks,\nDerek. ",
    "dlaporte40": "Hi,\nWebListener has been replace by HttpSys for ASP.NET Core 2.0\nSee : https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys\nRegards\n. ",
    "Dave3of5": "@dlaporte40 I seemed to miss that in the documentation lol thanks !. ",
    "daflame76": "It's fine. Just noticed it was overlooked. Doesn't matter to me who fixes it.. ",
    "roozbehid-ic": "@karelz Is there a plan to port it? It seems Xamarin already has it, so shouldn't be that hard to port it to different oses?. ",
    "steji113": "No worries, just wanted to check in and see what was cookin' so to speak.. @richlander / @Petermarcu just to clarify, when I originally inquired about the roadmap for 2.1 way back in August, I was looking more specifically for what features and concerns are being worked on and perhaps something like API surface area that is being brought in. While release date forecasts are very handy as a consumer of .NET Core, I was asking more from the perspective of a community contributor. It is obvious things like Span and overall performance improvements based on Span have been taking place, but it is not entirely clear what the priorities have been that are driving Microsoft teams and where the community could potentially help fill in the gaps.. ",
    "jcapellman": "I was just looking as well, excited to see what is in store.. I was just looking as well, excited to see what is in store.. ",
    "ghd258": "Enterprise Library \uff0cUnity and AntiXss support net core?. The latter will add to those API, and with those enhancements, the general release date, with these, I can plan whether the project will soon .Net core 2. aspx Pages in ASP.NET Core\nCan support the current web from ASPX page and the current controls\n. Can support the  Web from controls. Can support the ASP.NET  server control. System.Web.UI\nSystem.Web.UI.Adapters\nSystem.Web.UI.HtmlControls\nSystem.Web.UI.WebControls.Adapters\nSystem.Web.UI.WebControls.WebParts\nSystem.Web.UI.WebControls;\nDo you support these API?  . Do you support these\nAntiXss\npatterns & practices\u2013Enterprise Library\npatterns & practices -Unity . Razor Pages support ASP.Net server controls or have server controls?\nThe MVC programming model to his advantage, but there are also disadvantages, page data and logic processing mainly by JS control, C# is only to the front-end data transfer function, the C# instead of weakening, the enhanced JS and web; from ASPX, aspx.cs aspx.cs played this way with powerful back-end processing capabilities of C#, not only can provide data, but also can process the front interface with C# display or logical processing; hope to use the Razor Pages Cs, play the powerful function of C#. ",
    "alexzaytsev-newsroomly": "Any updates on this?. @Petermarcu it's just that the page with the roadmap says The .NET Core 2.1 project has not yet started.\n. @joehoeller I am not a .net core dev, but just wanted to clarify:\nauth - that is already there, what is missing?\nmicroservice support/auto discovery like what, a built-in prescriptive way of discovery? why would that be part of the development framework? That is a service (product) that lets you locate a map in your environments where bits are. how is that a .net core responsibility? (also, personally i run microservices without any discovery because why is it even needed? treat each microservice as you would an external 3rd party API)\nlazy loading - wrong repository for that comment, also that is on EF Core roadmap.\na decent & seamless way to handle many to many on PUT and POST can you illustrate what you mean? everything kind of works for me.... @brooksyott did you build on ubuntu also? or did you build on windows?. ",
    "genifycom": "Without a 2.0 LTS version, we are currently dead in the water wrt AWS Lambda. This is a huge bottleneck now.. So what does this mean? Since DotNet 2.0 is not yet LTS, will 2.1 become LTS?\nWe need to know quickly since project development does not turn on a dime!. @joehoeller Your comment did not contribute to the DotNet core roadmap discussion. We are not comparing development environments. Of course you can compare features with other lambda offerings.. ",
    "joehoeller": "It would be really nice if they would implement lazy loading for 2.1. I'd just like to see lazy loading added, and better/easier handling of many to manys on PUT and POST. . PERFORMANCE??? Its fast enough add some features like auth, microservice support/auto discovery, lazy loading, a decent & seamless way to handle many to many on PUT and POST!. We are planning to dicth .NET Core and go w/ Python - same performance and a ton of features. One suggestion is to ditch the immature Kestrel server completely and have .NET Core run on NGINX, and use NGINX's JWT modules and LDAP features for authentication via RESTful services.. I saw it listed as a stretch goal, when it should be moved to a priority. Another priority should be 2 factor auth using something like Google Authenticator with JWTs for secure REST services. Enterprise will be slow to adopt in these times without these 2 req's being fulfilled. . Other than that the .NET Core team has done a great job, its an excellent start for something to build web api's from.. ",
    "lburkovsky": "Hi,\nvisual studio silently installed the .NET Core SDK 2.1.1.7118. There is no official statement about it.\nMore transparency would not hurt.\nRegards,\nLadislav. In the meantime I have on my system 4 .NET Core 2.1 SDK inclusive the newest 2.1.2. I haven't been asked or informed about the installation. I want to remove at least some of them. Which are safe to remove?\nDo you find it serious after 4 monts after releasing 2.0 and in the time of 2.1.2 to state we haven't started to plan 2.1? Is this the way to strengthen the confidence of the community?. It looks like we get a preview instead of roadmap update :D. ",
    "mockjv": "@Petermarcu I know sometimes these things can be nebulous, but do you have a loose estimate as to when you expect 2.0 to be stamped LTS?  Even if it's a very loose estimate like between Q1 or Q2 of 2018?. ",
    "iSazonov": "It seems they still don't know how to live with MSFT internal non-public roadmap and public community roadmap.. ",
    "cglong": "+1 for Homebrew; also FYI there's a very active discussion already at dotnet/cli#533.\nI'm far from an expert on Homebrew, but I have made a number of contributions and would be glad to help write one for .NET Core \ud83d\ude04\nI work at Microsoft, so feel free to ping me here or offline if there's anything I can do to help! \ud83d\ude42. ",
    "Monns": "@karelz   Thanks for translating. \n@Priya91  It's been a long time.. Here is a detailed description of the problem.\nhttps://blogs.msdn.microsoft.com/webdav_101/2008/06/02/system-net-mail-with-ssl-to-authenticate-against-port-465/\nhttps://support.microsoft.com/en-us/help/950260/you-cannot-use-system-net-mail-smtpclient-to-send-an-e-mail-message-wi\n. ",
    "italopessoa": "You're welcome.. ",
    "onyxmaster": "To be most specific, I need the WindowsHosting package in MSI form. Certain CM tools (like Puppet or cfn-bootstrap [Amazon Elastic Beanstalk]) that bring systems to a desired state are picky about what is considered a \"package\" and often use the MSI product ID to check if it should be installed in the next state update phase. There of course are ways to fix this, but providing MSIs along with other methods seems like the most \"right\" way to do this.. @nil4 I do not understand what do you mean. You copied the same link I provided. It does not contain the WindowsHosting package in MSI form.. Unfortunately, they can't be installed with \"msiexec /i \" or via WindowsInstaller.Installer COM object. Well, I have a workaround mentioned above, so if you do not feel like this should be changed, go ahead and close the issue. Thank you for considering the options.. Also, Ansible (we're considering moving to, also considered more modern among the configuration management systems) has the same level of MSI support, along with Chef. Excluding containers, these three are, as far as I know, the most widely used CM systems.. We rebuild machines when we repurpose them, with Windows machines it happens rarely, because the only software we install after provisioning is updates to the Windows itself and updates to our monitoring agents.. We rebuild machines when we repurpose them, with Windows machines it happens rarely, because the only software we install after provisioning is updates to the Windows itself and updates to our monitoring agents.. We're not looking to integrate .NET core into installer WIMs though, we prefer base installer to be as unchanged as possible.. We're not looking to integrate .NET core into installer WIMs though, we prefer base installer to be as unchanged as possible.. ",
    "joeloff": "We have a separate bundle for just the runtime stores or for the hosting bundle (which contains the runtime, runtime package store and ANCM). We don't ship the MSI individually because of reference counting.\nThere are links on https://www.microsoft.com/net/download/core#/runtime for the hosting bundle and on https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.0-download.md#aspnet-core-package-store for the individual package store bundles.\nDirect links for 2.0:\nhttps://aka.ms/aspnetcore.2.0.0.runtimepackagestore_x64\nhttps://aka.ms/aspnetcore.2.0.0.runtimepackagestore_x86\nhttps://aka.ms/dotnetcore.2.0.0-windowshosting\n. @Petermarcu the reference count is done through a CA in the MSI, but it's done at the bundle level. We currently ship the MSIs for the stores in three bundles: SDK, Server Hosting and a standalone store only bundle. When you install the MSIs directly in environment where these bundles are present.. I took a quick peek. The current package checks for IISExpress, which is not supported by the hosting bundle. We only redist ANCM for IIS in the hosting bundle. IISExpress ANCM is supported in VS for development.\nHaving IIS is also not a requirement, only if you want to use ANCM. If IIS is absent, the bundle will just skip the ANCM package and install the rest: the runtime and package store \n. The check for IIS is definitely good to have since ANCM will fail if IIS isn't present. However, the bundle doesn't carry ANCM for IISExpress so that check is not necessary. We only carry ANCM for IISExpress as part of Visual Studio.\nAs for the commandline flags, there is a bug tracking to update them for 2.1.0. In 2.0, we don't currently have an LTS/FTS stream, there's only a single runtime.. I'll raise this with the ANCM owners. In the past we refrained from doing that because it breaks the reference counting for ANCM when installing the hosting bundle. But if ANCM were to create a separate bundle we could use that. FYI @shirhatti . We had an internal email thread. @shirhatti might know if we have any other issues tracking it. Are the runtime installers mucking with environment variables? The hosting bundle itself makes no changes to the environment, but it will attempt to install both x86 and x64 versions of the runtime. It's intended to be a single bundle that provides as much as can be installed.. Ok, so that might explain the issue. The hosting bundle actually wraps the runtime bundle. However the runtime bundles themselves don't actually remove the runtimes when they are uninstalled. You have to manually uninstall the runtimes (the bundles for the runtime actually wrap 3 separate windows installer packages).. This almost sounds that the 2.0.x and 2.1.x runtime/SDK installers aren't playing together in SxS situations.. You should consider updating the hosting bundle as the new one carries the package store for 2.0.5 as well as the 2.0.5 runtime. Additionally it has a newer version of ANCM for IIS as well. The hosting bundle though doesn't carry the SDK, so if you had a previous version of the SDK on the machine you'll probably want to update that separately.\nAre you using the machine as a development environment? VS carries a copy of ANCM as well, but because the changes in ANCM for this release impacts hosting applications in IIS, VS was not updated with a new copy of ANCM.\n. @Eilon Yes.\n@dmumladze The LTS/FTS options are only supported in the 1.x hosting bundle since there is no LTS/FTS designation for 2.x at this point.\nWe added better support in 2.1 for selecting separate items (runtime, shared framework and ANCM), but for 2.0 this is a known problem unfortunately.\nThe work-arounds are not that ideal:\n\nYou can decompile and extract ANCM from the two hosting bundle\nYou can take the 2.1 preview bundle and run it to only install ANCM. With the 2.1 bundle you can pass in OPT_NO_RUNTIME=1 OPT_NO_SHAREDFX=1 and that will only install ANCM for you.\n\n@Eilon , @muratg we might want to look at back porting the 2.1 swithces to 2.0\n. Yes, we have another thread on it at https://github.com/aspnet/IISIntegration/issues/493#issuecomment-382485998. That's the runtime installer that's failing. The detail of the exact failure would be in the log from the runtime installer itself. The hosting bundle log will just contain a summary of the individual items it installs. . I'll take a look.. I'm setting up a repro machine. I looked at the individual installers and the MSIs have separate upgrade codes so they should install SxS. However, if the hosting bundle itself is designed for upgrade, regardless of what the individual installers do, bundles will uninstall the previous copy (and bundled installers) if it performs an upgrade.. OK, I can confirm that the hosting bundle is marked for upgrade instead of SxS. I'll send a PR to get this fixed.. We haven't done this yet. We have a setup meeting later today to discuss. @muratg and I chatted. We're going to get this in the next patch for 2.1 and 2.2 will have the fix as well.. @ranjicgnr Do you have logs? There was an issue in a previous 2.1 release where the hosting bundle would fail to install the ASP.NET shared framework if you had another 2.x version on the machine, but that was fixed for 2.1.2 AFAIK.. @JunTaoLuo since he builds the non-Windows package. ",
    "jberezanski": "Hi all,\nThe dotnetcore-windowshosting Chocolatey package is designed to install the ANCM (and only the ANCM).\n\n\nIf the user requests Chocolatey to install the dotnetcore-windowshosting package, the expected result after the installation is that the ANCM gets installed on the machine. That is the reason for the IIS/IIS Express precondition check in the package installation script: because the installation bundle skips installing the ANCM if neither of them is installed, it would not make sense for the dotnetcore-windowshosting package to report successful installation if nothing is actually installed on the system.\n\n\nThe runtime and the package store have their own packages (dotnetcore-runtime.install and aspnetcore-runtimepackagestore). Required dependencies are modelled using package dependency (the dotnetcore-windowshosting package depends upon aspnetcore-runtimepackagestore) and they are resolved by the package manager. Installation of optional dependencies (the runtime) is left to the discretion of the user*.\n\n\n*At least, this is how things worked in 1.0 and 1.1. I can see that the 2.0 hosting bundle does not respect the OPT_INSTALL_LTS_REDIST and OPT_INSTALL_FTS_REDIST flags anymore and installs the 2.0 runtime anyway. Is this a bug or intentional? (If the latter, then https://github.com/aspnet/AspNetCoreModule/blob/dev/README.md should probably be updated.)\nFrom packaging standpoint, it would be most convenient if you distributed an installer containing the ANCM only.. Indeed, the bundle does not install the ANCM for IISExpress. Honestly, I have no idea what made me believe otherwise back when I made the package for 1.0.0. I will remove all IISExpress related code.\nWould it be possible for you to publish ANCM MSIs for packaging purposes? This would save people some bandwith - they would not have to download the entire hosting bundle (containing components which would not be used anyway, because they would already have been installed by other packages).. ",
    "msd90": "moved to /core-setup. ",
    "ThuCommix": ".exe does not have any meaning to other systems like MacOS or Linux, so why bother?. ",
    "Sebazzz": "If you want to distribute a direct executable binary to your end users, you may use self-contained deployment.. ",
    "DaveSlinn": "Then the docs need to be updated to reflect this.  It is confusing when the docs indicate something should work when in fact, it doesn't.. Then the docs need to be updated to reflect this.  It is confusing when the docs indicate something should work when in fact, it doesn't.. The recent update of VS 2017 to 15.6 has broken the build of our solution. It seems to have installed a new folder in the dotnet/sdk called 2.1.100 - and the dotnet cli seems to no longer resolve the references in our solution file properly.\n\nWhen I do a dotnet --version, I get 2.1.100.  Dev boxes that have are still on 1.5.5.7 do not have 2.1.100 (they have 2.1.4) and still work fine.\nWhat is 2.1.100 and what changed in it from 2.1.4 that is now breaking our builds?  . The recent update of VS 2017 to 15.6 has broken the build of our solution. It seems to have installed a new folder in the dotnet/sdk called 2.1.100 - and the dotnet cli seems to no longer resolve the references in our solution file properly.\n\nWhen I do a dotnet --version, I get 2.1.100.  Dev boxes that have are still on 1.5.5.7 do not have 2.1.100 (they have 2.1.4) and still work fine.\nWhat is 2.1.100 and what changed in it from 2.1.4 that is now breaking our builds?  . Update: after I posted this, I looked into it further and discovered that the dotnet restore was now stopping our builds (whereas prior to the update, it would just display an MSB4019 error.  @livarcocc has already redirected my issue on that to the NuGet team for input at  https://github.com/NuGet/Home/issues/6665. Update: after I posted this, I looked into it further and discovered that the dotnet restore was now stopping our builds (whereas prior to the update, it would just display an MSB4019 error.  @livarcocc has already redirected my issue on that to the NuGet team for input at  https://github.com/NuGet/Home/issues/6665. ",
    "marcusts": "I am a client-server programmer working with Visual Studio 15.3 in Windows 1.  I did indeed follow all of the instructions . The name is not known when typing it from a command line, so there is no path to that executable.. I am a client-sever guy, hence the nature of my request.  I am not a web developer.. ",
    "colinbowern": "I am seeing this as well - Windows 10 x64. Looking at the install logs in temp there is no indication of path variable change. I do see the Environment parameter in the Wix source however:\nhttps://github.com/dotnet/core-setup/blob/6887ab556bc8302390782711dcdd75b75e769cf5/src/pkg/packaging/windows/host/host.wxs\nAny way to unpack the installer executable to get at the MSI or pass along verbose logging parameters?. ",
    "onematchfox": "I have also run into a similar issue which may be related whilst building a self-contained app for target framework ubuntu.16.04-x64 which previously worked fine with 1.1.\nUnhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Runtime.Extensions, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040) \nThrough investigation I have found that a brand new console app works fine, but as soon as I reference something (in my case Newtonsoft.Json), the version of System.Runtime.Extensions in the published output becomes the signed v4.6.25519.3. Not sure where the dependency is coming from as everything seems to reference 4.3.0.\nI suspect your issue is a result of dependencies introduced by the inclusion of Microsoft.AspNetCore.All.\nP.S: I can get the app to work by overwriting all system dlls with those from the blank app.. @TimoBohl, FYI, after further investigation (i.e. discussion with far more knowledgeable folk), it seems that this issue actually lies with msbuild not correctly running the conflict resolution logic (see https://github.com/dotnet/corefx/issues/23436#issuecomment-324694287 and comments below it). In case you do need to reference libraries like Microsoft.AspNetCore.All or any others that result in this issue then you can workaround the issue by using the native dotnet publish command instead of publishing from within VS.. \ud83d\udc4d  You can also follow https://github.com/dotnet/sdk/issues/1502 for progress on the issue. . @galodoido794 how are you publishing your application? Are you making use of the command line option  \"dotnet publish\" or are you using VS (folder profile) to publish? . ",
    "TimoBohl": "Removing the include of Microsoft.AspNetCore.All resolved it for me too.\nThank you!\nSupposing that there is a reference issue in the metapackage since this was recommended in the migration description here Migrating from ASP.NET Core 1.x to ASP.NET Core 2.0.. @onematchfox Thank you, I've reported this already in the developer network - VS2017 15.3 Net Core 2.0 publish a self-contained app for Linux fails in VS.\nHope they can fix it.\n. ",
    "csharpfritz": "While I love this idea, and it's something that I think could benefit the AspNetCore platform by migrating the webforms programming model to it, it's a very hard task. \nWeb forms is intertwined with IIS and will require a lot of work to disconnect the two so that it could be plugged in to the pipeline. \n\nOn Aug 17, 2017, at 09:03, Ben Adams notifications@github.com wrote:\n/cc @csharpfritz\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "sgf": "turn back the wheel of history. ",
    "samcov": "I have a 100% .net core 2.0 project, originally 1.1, and I'm getting something similar.\nError   CS0012  The type 'DbConnection' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\n. I just noticed that switching to 2.0 didn't upgrade the csproj, it looks like this,\n<NetStandardImplicitPackageVersion>1.6.1</NetStandardImplicitPackageVersion>\nShould I just change it there, or is there a way to do it in VS2017?. @qqbuby - I didn't see your response, so I just replaced the old version with 2.0.0 and everything worked.\nHowever, if what you said is true, maybe those sections are no longer needed, but if there, must target the correct version.\nEither way, people upgrading will likely be confused because the process misses those things.. ",
    "qqbuby": "hi @rosieks \nI have a similar problem, and I remove the RuntimeFrameworkVersion, and the problem was fixed.\nTry to remove <RuntimeFrameworkVersion>1.1.1</RuntimeFrameworkVersion> or <NetStandardImplicitPackageVersion section in the csproj.. Should we provide two versions, 1.0 and 2.0?\nBest, Regards\nRoy Xu\n\nOn Aug 20, 2017, at 17:54, grokky1 notifications@github.com wrote:\nI have the same problem. The upgrade guide does not cover this problem.\nI am not using RuntimeFrameworkVersion or NetStandardImplicitPackageVersion. I hope someone from the dotnet team will address this problem.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "diegofalciola": "@qqbuby this didn't work for me, and I am still being asked to add a reference. Is anybody still experiencing this during upgrade? \n. ",
    "redwards510": "What is the solution for this? I'm getting it in lots of projects now.  For example, https://github.com/Arch/UnitOfWork is supposed to work with netcore 20. When I clone and build that repo, it complains about references to System.Data and System.Text.RegularExpressions as well as DbConnection. ex:\nSeverity    Code    Description Project File    Line    Suppression State\nError   CS0012  The type 'DbConnection' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.    Microsoft.EntityFrameworkCore.UnitOfWork    C:\\Users\\redwards\\Downloads\\UnitOfWork-2.0.1\\src\\Microsoft.EntityFrameworkCore.UnitOfWork\\UnitOfWork.cs 48  Active\n. ",
    "risurina": "Add System.Data to your reference. It solve my problem. . ",
    "sudheerah": "I had the same issue and when I upgraded VS2017 Enterprises IDE to version 15.5.5 it has been resolved magically.. ",
    "masaab": "this code worked for me \n <ItemGroup>\n    <PackageReference Update=\"Microsoft.NETCore.App\" Version=\"2.0.0\" />\n  </ItemGroup>. ",
    "vs6681": "I am still facing the same issue even after adding the \n\n\n\n\n                                            OR\n1.0.4 removed in csproj file. \n                                            OR\n2.   \n                                            OR\n\n\nAny help ??\n. ",
    "narinderparmar": "solution that worked for me \"upgrading target framework to 4.7.1\"\nwith out changing any other configuration . ",
    "akagGt": "I have created a new asp.net standard Library that is based on .NET Framework 4.6.2 and it doesn't build on my build server. Below is error message that I receive the same error: \nYou must add a reference to assembly netstandard. ",
    "QtRoS": "In my case the same issue was caused by xUnit - it turned out that xUnit requires .NET Core build tools. More details in this answer.. ",
    "kamalkumar1": "I having same issue while running uwp Xamarin project in windows emulator\nError   CS0012  The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\n. ",
    "AdilTalkpool": "you are targeting different version of dll In my case the error was \nError   CS0012  The type 'Task<>' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.  EboIotEdgeConnector.Extension   D:\\projects\\EboIoTEdgeConnector-master\\EboIotEdgeConnector.Extension\\RetainedMqttMessageHandler.cs\nI ) change the IMqttServerStorage  to MQTTnet.Server.IMqttServerStorage\n2) remove the reference and  of net461 version and add the reference from \n\\packages\\MQTTnet.2.8.4\\lib\\netstandard2.0\nRebuild the solution the issue will be resolved \n. ",
    "jigarce": "\nhi @rosieks\nI have a similar problem, and I remove the RuntimeFrameworkVersion, and the problem was fixed.\nTry to remove <RuntimeFrameworkVersion>1.1.1</RuntimeFrameworkVersion> or <NetStandardImplicitPackageVersion section in the csproj.\n\nThanks. Yes,\nIt was website publish issue.\nSelect Deployment Mode : Self-Contained \n\n. ",
    "pedasmith": "I just solved a similar problem when I imported a VS2015 UWP C# app into VS2019 and added the UWP Community toolkit. The solution (apart from my other dinking around) was to set the C# compiler from from \"MOST RECENT\" (which may have told it to use c# 8.0 (beta) and instead forced the project to compile using C# 7.0. ",
    "orobert91": "Closing the issue, just saw a duplicate issue here:\nhttps://github.com/aspnet/EntityFrameworkCore/issues/9470. I have vaguely the same problem since upgrading to Visual Studio 2017.5.2. About 1 time out of 3 I have to kill the IIS Worker Process manually. Never experienced this before.. ",
    "antonellil": "Update: \n\nSeems to have leveled off and is GC'ing correctly. But still very interesting behavior that would be good to get to the bottom of. And.... it seems to have begun rising yet again. Definitely concerning.\n\n. @halter73 great find, yes this seems to be related. ",
    "halter73": "@antonellil In case you're not seeing the back references, I want to point out that this might be caused by an issue reading cgroup limits described in dotnet/coreclr#13489. :+1: about it being a bad idea to encrypt URL parameters. Others have already suggested alternative for that.\nIf there is some other reason you want to increase Kestrel's allowed URL length, you can do so via KestrelServerLimits.MaxRequestLineSize.\nAs the MaxRequestLineSize doc comments point out, Kestrel already allows URLs approaching 8KB, so I doubt you're actually running into that limit. You're probably running into a limit enforced by either a proxy (e.g. IIS, nginx) or the client/browser.. The following might show the conflict:\nnetsh http show urlacl. ",
    "Luis-DdlFG": "Thank you, divega.\nI eliminated that part and made sure I had SDK versi\u00f3n 2.0 and also Visual Studio up to date.\nIssue was solved with those steps.\nThanks. Solved by updating Visual Studio to version 15.3.3. ",
    "myloveCc": "This feature is not difficult, and I have been achieved in my project\u3002\n```csharp\nusing System;\nusing System.Security.Cryptography;\nusing System.Xml;\nusing Newtonsoft.Json;\nusing NETCore.Encrypt.Shared;\nusing NETCore.Encrypt.Internal;\nnamespace NETCore.Encrypt.Extensions.Internal\n{\ninternal static class RSAKeyExtensions\n{\n    #region JSON\n    internal static void FromJsonString(this RSA rsa, string jsonString)\n    {\n        Check.Argument.IsNotEmpty(jsonString, nameof(jsonString));\n        try\n        {\n            var paramsJson = JsonConvert.DeserializeObject<RSAParametersJson>(jsonString);\n\n            RSAParameters parameters = new RSAParameters();\n\n            parameters.Modulus = paramsJson.Modulus != null ? Convert.FromBase64String(paramsJson.Modulus) : null;\n            parameters.Exponent = paramsJson.Exponent != null ? Convert.FromBase64String(paramsJson.Exponent) : null;\n            parameters.P = paramsJson.P != null ? Convert.FromBase64String(paramsJson.P) : null;\n            parameters.Q = paramsJson.Q != null ? Convert.FromBase64String(paramsJson.Q) : null;\n            parameters.DP = paramsJson.DP != null ? Convert.FromBase64String(paramsJson.DP) : null;\n            parameters.DQ = paramsJson.DQ != null ? Convert.FromBase64String(paramsJson.DQ) : null;\n            parameters.InverseQ = paramsJson.InverseQ != null ? Convert.FromBase64String(paramsJson.InverseQ) : null;\n            parameters.D = paramsJson.D != null ? Convert.FromBase64String(paramsJson.D) : null;\n            rsa.ImportParameters(parameters);\n        }\n        catch\n        {\n            throw new Exception(\"Invalid JSON RSA key.\");\n        }\n    }\n\n    internal static string ToJsonString(this RSA rsa, bool includePrivateParameters)\n    {\n        RSAParameters parameters = rsa.ExportParameters(includePrivateParameters);\n\n        var parasJson = new RSAParametersJson()\n        {\n            Modulus = parameters.Modulus != null ? Convert.ToBase64String(parameters.Modulus) : null,\n            Exponent = parameters.Exponent != null ? Convert.ToBase64String(parameters.Exponent) : null,\n            P = parameters.P != null ? Convert.ToBase64String(parameters.P) : null,\n            Q = parameters.Q != null ? Convert.ToBase64String(parameters.Q) : null,\n            DP = parameters.DP != null ? Convert.ToBase64String(parameters.DP) : null,\n            DQ = parameters.DQ != null ? Convert.ToBase64String(parameters.DQ) : null,\n            InverseQ = parameters.InverseQ != null ? Convert.ToBase64String(parameters.InverseQ) : null,\n            D = parameters.D != null ? Convert.ToBase64String(parameters.D) : null\n        };\n\n        return JsonConvert.SerializeObject(parasJson);\n    }\n    #endregion\n\n    #region XML\n\n    public static void FromXmlString(this RSA rsa, string xmlString)\n    {\n        RSAParameters parameters = new RSAParameters();\n\n        XmlDocument xmlDoc = new XmlDocument();\n        xmlDoc.LoadXml(xmlString);\n\n        if (xmlDoc.DocumentElement.Name.Equals(\"RSAKeyValue\"))\n        {\n            foreach (XmlNode node in xmlDoc.DocumentElement.ChildNodes)\n            {\n                switch (node.Name)\n                {\n                    case \"Modulus\": parameters.Modulus = (string.IsNullOrEmpty(node.InnerText) ? null : Convert.FromBase64String(node.InnerText)); break;\n                    case \"Exponent\": parameters.Exponent = (string.IsNullOrEmpty(node.InnerText) ? null : Convert.FromBase64String(node.InnerText)); break;\n                    case \"P\": parameters.P = (string.IsNullOrEmpty(node.InnerText) ? null : Convert.FromBase64String(node.InnerText)); break;\n                    case \"Q\": parameters.Q = (string.IsNullOrEmpty(node.InnerText) ? null : Convert.FromBase64String(node.InnerText)); break;\n                    case \"DP\": parameters.DP = (string.IsNullOrEmpty(node.InnerText) ? null : Convert.FromBase64String(node.InnerText)); break;\n                    case \"DQ\": parameters.DQ = (string.IsNullOrEmpty(node.InnerText) ? null : Convert.FromBase64String(node.InnerText)); break;\n                    case \"InverseQ\": parameters.InverseQ = (string.IsNullOrEmpty(node.InnerText) ? null : Convert.FromBase64String(node.InnerText)); break;\n                    case \"D\": parameters.D = (string.IsNullOrEmpty(node.InnerText) ? null : Convert.FromBase64String(node.InnerText)); break;\n                }\n            }\n        }\n        else\n        {\n            throw new Exception(\"Invalid XML RSA key.\");\n        }\n\n        rsa.ImportParameters(parameters);\n    }\n\n    public static string ToXmlString(this RSA rsa, bool includePrivateParameters)\n    {\n        RSAParameters parameters = rsa.ExportParameters(includePrivateParameters);\n\n        return string.Format(\"<RSAKeyValue><Modulus>{0}</Modulus><Exponent>{1}</Exponent><P>{2}</P><Q>{3}</Q><DP>{4}</DP><DQ>{5}</DQ><InverseQ>{6}</InverseQ><D>{7}</D></RSAKeyValue>\",\n              parameters.Modulus != null ? Convert.ToBase64String(parameters.Modulus) : null,\n              parameters.Exponent != null ? Convert.ToBase64String(parameters.Exponent) : null,\n              parameters.P != null ? Convert.ToBase64String(parameters.P) : null,\n              parameters.Q != null ? Convert.ToBase64String(parameters.Q) : null,\n              parameters.DP != null ? Convert.ToBase64String(parameters.DP) : null,\n              parameters.DQ != null ? Convert.ToBase64String(parameters.DQ) : null,\n              parameters.InverseQ != null ? Convert.ToBase64String(parameters.InverseQ) : null,\n              parameters.D != null ? Convert.ToBase64String(parameters.D) : null);\n    }\n\n    #endregion\n}\n\n}\n```. ",
    "Mitch-Wheat": "Totally agree with @Korporal: it is utterly astonishing and very disappointing that such a basic issue still exists a year later.\nI made a design decision to go with Azure, and I'm totally regretting it. Azure Functions V1 are plagued with assembly version issues (most notably the reliance on Newtonsoft.JSON v9.0.1), Azure functions V2 seem to have been in preview mode for an embarassing amount of time. \nAt this rate I'll be moving to AWS.. ",
    "MapleWithoutWords": "We hope to solve this problem as soon as possible.. ",
    "gsantopaolo": "Wondering why this issue is closed. The problem is still there, at least on UWP. \n@myloveCc 's solution seems pretty neat, why don't implement it?. ",
    "Mani0811": "@myloveCc  How This will be solved with extension method .? RSA have an implementation for hiding that we need to derive the class. According to my understanding .\n```c#\npublic abstract partial class RSA : AsymmetricAlgorithm\n    {\n        public override void FromXmlString(string xmlString)\n        {\n            throw new PlatformNotSupportedException();\n        }\n    public override string ToXmlString(bool includePrivateParameters)\n    {\n        throw new PlatformNotSupportedException();\n    }\n}\n\n```. ",
    "gregbradley": "@Eilon - I have uploaded the app to GitHub https://github.com/gregbradley/Core20Razor\n@pranavkm, @Eilon - This is just a new project I created with dotnet new razor and then tried to build it without changing anything.\n```\nD:\\DP\\Core20Razor>dotnet --version\n2.0.0\nD:\\DP\\Core20Razor>dotnet new razor\nThe template \"ASP.NET Core Web App\" was created successfully.\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/template-3pn for details.\nProcessing post-creation actions...\nRunning 'dotnet restore' on D:\\DP\\Core20Razor\\Core20Razor.csproj...\n  Restoring packages for D:\\DP\\Core20Razor\\Core20Razor.csproj...\n  Restoring packages for D:\\DP\\Core20Razor\\Core20Razor.csproj...\n  Restore completed in 4.99 sec for D:\\DP\\Core20Razor\\Core20Razor.csproj.\n  Generating MSBuild file D:\\DP\\Core20Razor\\obj\\Core20Razor.csproj.nuget.g.props.\n  Generating MSBuild file D:\\DP\\Core20Razor\\obj\\Core20Razor.csproj.nuget.g.targets.\n  Restore completed in 8.94 sec for D:\\DP\\Core20Razor\\Core20Razor.csproj.\nRestore succeeded.\nD:\\DP\\Core20Razor>dotnet build\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\nCopyright (C) Microsoft Corporation. All rights reserved.\nPages_ViewStart.cshtml(1,1): error CS1646: Keyword, identifier, or string expected after verbatim specifier: @ [D:\\DP\\Core20Razor\\Core20Razor.csproj]\nPages_ViewStart.cshtml(1,2): error CS1022: Type or namespace definition, or end-of-file expected [D:\\DP\\Core20Razor\\Core20Razor.csproj]\nPages_ViewStart.cshtml(2,12): error CS1022: Type or namespace definition, or end-of-file expected [D:\\DP\\Core20Razor\\Core20Razor.csproj]\nPages_ViewStart.cshtml(3,1): error CS1022: Type or namespace definition, or end-of-file expected [D:\\DP\\Core20Razor\\Core20Razor.csproj]\nPages_ViewStart.cshtml(2,5): error CS0116: A namespace cannot directly contain members such as fields or methods [D:\\DP\\Core20Razor\\Core20Razor.csproj]\nBuild FAILED.\nPages_ViewStart.cshtml(1,1): error CS1646: Keyword, identifier, or string expected after verbatim specifier: @ [D:\\DP\\Core20Razor\\Core20Razor.csproj]\nPages_ViewStart.cshtml(1,2): error CS1022: Type or namespace definition, or end-of-file expected [D:\\DP\\Core20Razor\\Core20Razor.csproj]\nPages_ViewStart.cshtml(2,12): error CS1022: Type or namespace definition, or end-of-file expected [D:\\DP\\Core20Razor\\Core20Razor.csproj]\nPages_ViewStart.cshtml(3,1): error CS1022: Type or namespace definition, or end-of-file expected [D:\\DP\\Core20Razor\\Core20Razor.csproj]\nPages_ViewStart.cshtml(2,5): error CS0116: A namespace cannot directly contain members such as fields or methods [D:\\DP\\Core20Razor\\Core20Razor.csproj]\n    0 Warning(s)\n    5 Error(s)\nTime Elapsed 00:00:09.24\n```. ",
    "RedwoodForest": "@weshaggard \nThanks for your help. \nI just tried the workarounds (<RestoreProjectStyle>PackageReference</RestoreProjectStyle>\nand\n<AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects> and re-adding the nuget reference) and I'm still getting the same issue.\nI've uploaded my test project to make it easy to see what's going on.. Is anybody able to take a look at this? It's preventing us from upgrading to netstandard-based libraries.\nCC @weshaggard . @weshaggard thanks for looking into this. We will open an issue with SharpSnmpLib to fix their dependency declarations. Also thanks for the workaround, I've confirmed it fixes the issue in our test project.. ",
    "swaroop-sridhar": "Overall. the documentation looks good; a few minor comments are inline.. Should the nullable parameters be written with the ? syntax instead of Nullable for better readability? \nOther than that, changes for System.Runtime.Interop.NativeLibrary APIs and System.Runtime.Loader.AssemblyLoadContext.ResolvingUnmanagedDllevent look good to me. Thanks.. Should we say here that ILLiker is built on mono-linker?. This line is redundant, because we've already specified the set of values forRID. I think it is helpful to describe very briefly what the linker does -- remove unreachable definitions -- at this stage. This will help users understand the later usage such as \"linker is too aggressive\" later. Typo: be. Maybe move this paragraph to the advanced document, since we haven't talked about theILLink.Tasks` package here.. Suggestion: clarify \"describe the benifit\" to something like \"show the code-size win for each file\" . \"More\" should be dropped, unless we describe some functionality in the basic document.. I think it would be good to call out the limitations of the linker in its own section.. Can we add a hyperlink to the nuget docs that describe the mechanism. ",
    "russellhadley": "Thanks Rich.  As we discussed we will provided updates as PRs to this initial doc.  . For the above cases, would an example about that illustrated the \"root whole assembly\" vs the \"add particular field/method/type\".   This would help answer the \"what do I do when something goes wrong\" question.. ",
    "atifmir": "Closing this issue as Installing latest package for Microsoft Composition 1.0.31 resolved the warning. ",
    "randolfrf": "Just to be clear, If I try again with another project (of another type) the behavior is the same.. ",
    "MBODM": "Why is nobody also having this problem (seems so, because Inet nothing reflects). On every (clean) machine i install Visual Studio 2017 15.3 i can not build a totally standard .net core 2.0 app from the template, cause Visual Studio shows this errors:\n1>C:\\Users\\marcel\\Desktop\\WebApplication1\\WebApplication1\\WebApplication1.csproj : error NU1202: Package Microsoft.ApplicationInsights.AspNetCore 2.1.1 is not compatible with netcoreapp2.0 (.NETCoreApp,Version=v2.0). Package Microsoft.ApplicationInsights.AspNetCore 2.1.1 supports:\n1>C:\\Users\\marcel\\Desktop\\WebApplication1\\WebApplication1\\WebApplication1.csproj : error NU1202:   - net451 (.NETFramework,Version=v4.5.1)\n1>C:\\Users\\marcel\\Desktop\\WebApplication1\\WebApplication1\\WebApplication1.csproj : error NU1202:   - netstandard1.6 (.NETStandard,Version=v1.6)\n1>C:\\Users\\marcel\\Desktop\\WebApplication1\\WebApplication1\\WebApplication1.csproj : error NU1202: Package Microsoft.ApplicationInsights.DependencyCollector 2.4.1 is not compatible with netcoreapp2.0 (.NETCoreApp,Version=v2.0). Package Microsoft.ApplicationInsights.DependencyCollector 2.4.1 supports:\n1>C:\\Users\\marcel\\Desktop\\WebApplication1\\WebApplication1\\WebApplication1.csproj : error NU1202:   - net40 (.NETFramework,Version=v4.0)\n1>C:\\Users\\marcel\\Desktop\\WebApplication1\\WebApplication1\\WebApplication1.csproj : error NU1202:   - net45 (.NETFramework,Version=v4.5)\n1>C:\\Users\\marcel\\Desktop\\WebApplication1\\WebApplication1\\WebApplication1.csproj : error NU1202:   - netstandard1.6 (.NETStandard,Version=v1.6)\ni do not understand how anyone out there could run a .net core 2.0 app at the moment, since there is no newer version of that applicationinsights package ???. 7h after my issue was closed (with a hillarious answer) by MS, they \"magically\" released 15.3.3. Which fixes the above problem (Release Notes show a slightly another problem, but obviously it also do some fixing stuff for my problem).\nNo communication by MS. Just a fucked up support closing my issue withou even reading it or asking something, just to silently work on a fix (15.3.3). MS just became a fucked up company. Nothing less.\nOr in short: Now that they released 15.3.3 you can close this issue. Thx anyway.. Hey,\nit seems that the current state of the repo is missing some of the aspnetcore-store-2.0.x packages which seem to be a dependency of the .105 or .200 SDK. Using the official install instructions on a fresh installation of Ubuntu 18.04 apt reports dependency errors while installing.\nMaybe just some packages are missing in the repo currently ?. ",
    "aqibgatoo": "@guylando though late to the party but here is a good one for pdf generation\nRotativa .NetCore. @Phyrom i don't think so . You can generate images and pdf files from it. The pdf generator that i ended using up is a slighlty modifed running version of it with the package reference as.     <PackageReference Include=\"RotativaCore\" Version=\"2.1.1\" />. @guylando yes, it has different ActionResults available which you can easily use. For the example below you have to just design your view and pass the model accordingly.\npublic ActionResult TestViewWithModel(string id)\n{\n    var model = new TestViewModel {DocTitle = id, DocContent = \"This is a test\"};\n    return new ViewAsPdf(model);\n}\nlink  to the one that i am using.. ",
    "Phyrom": "@aqibgatoo, can we convert a .doc file to pdf using Rotativ .NetCore?. ",
    "guylando": "@aqibgatoo we are looking to generate a pdf document describing a list of objects (a page for each object) including inserting text, images, styling, bullets. Rotative can be used for that? (basically export objects to pdf). ",
    "ValentinaNelson": "hey , you can try zetpdf.com.. By using it you can edit , view and manipulate PDF easily.. ",
    "ForkBug": "I encountered the same problem. \nAfter followed the Json.net code, I found that this problem was caused by RSAParameters.GetType();\nRSAParameters.GetType(); return a type, which has a field DeclaredFields    {System.Reflection.FieldInfo[8]}.\nFieldInfo has a field called Attributes .\nThe Attributes for RSAParameters.D,DP,Q.. are  Public | NotSerialized.\nJson.net will ignore NotSerialized fields.\nIt seems to be a enhancement for RSAParameters.  Someone do this without think all user scenarios carefully/ \n. After a second thought, this should be a bug. I open a new one for corefx https://github.com/dotnet/corefx/issues/23847. ",
    "pableess": "This is invalid.  I realized that wait operations on multiple handles which include a named mutex is not supported on non windows platforms.\nThe inner thread actually throws a System.PlatformNotSupportedException: Wait operations on multiple wait handles including a named synchronization primitive are not supported on this platform.\nI would suggest improving the documentation.. ",
    "dotnetgator": "I don't know how these wires got crossed, but yes - this was supposed to be an issue logged against the ASP.NET Core Graph SDK Sample code in the collection you lined to above. Apologies for the confusion.. ",
    "patridge": "[Migrated to dotnet/templating#1226 and closing this one, per tweets with @sayedihashimi]. ",
    "jstallm": "dotnet new --debug:reinit. ",
    "palodequeso": "Here's a stack-trace from the cmd line:\nSystem.AggregateException: One or more errors occurred. (Fault) ---> System.ServiceModel.FaultException: Fault\n   at System.ServiceModel.Channels.ServiceChannel.HandleReply(ProxyOperationRuntime operation, ProxyRpc& rpc)\n   at System.ServiceModel.Channels.ServiceChannel.EndCall(String action, Object[] outs, IAsyncResult result)\n   at System.ServiceModel.Channels.ServiceChannelProxy.TaskCreator.<>c__DisplayClass1_0.<CreateGenericTask>b__0(IAsyncResult asyncResult)\n   --- End of inner exception stack trace ---\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\n   at System.Threading.Tasks.Task.Wait()\n   at BoxingAndShipping.Logic.Shipping.FedEx.GetRate(Service service, List`1 packedBoxes, Address sourceAddress, Address destinationAddress) in C:\\Users\\username\\Projects\\boxpack\\BoxingAndShipping\\Logic\\Shipping\\FedEx.cs:line 214\n   at BoxingAndShipping.Controllers.ShippingController.Post(RateRequest request) in C:\\Users\\username\\Projects\\boxpack\\BoxingAndShipping\\Controllers\\ShippingController.cs:line 69\n   at lambda_method(Closure , Object , Object[] )\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeActionMethodAsync>d__27.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeNextActionFilterAsync>d__25.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ResourceExecutedContext context)\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeAsync>d__20.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\n---> (Inner Exception #0) System.ServiceModel.FaultException: Fault\n   at System.ServiceModel.Channels.ServiceChannel.HandleReply(ProxyOperationRuntime operation, ProxyRpc& rpc)\n   at System.ServiceModel.Channels.ServiceChannel.EndCall(String action, Object[] outs, IAsyncResult result)\n   at System.ServiceModel.Channels.ServiceChannelProxy.TaskCreator.<>c__DisplayClass1_0.<CreateGenericTask>b__0(IAsyncResult asyncResult). ",
    "wli3": "@torhovland  add /l*v log.txt to the end of execution in command line can generate the log ex dotnet-sdk-2.0.0-win-x64.exe /l*v log.txt\nHowever, I think in this case you should just wait for it. The \"hanging\" is extracting packages for offline scenario, on my machine, SSD, it will take about a minute, for HDD it could take 4 minutes.. We have an issue existing issue https://github.com/dotnet/cli/issues/6896. And I created the one above for the specific issue. This issue was moved to dotnet/cli#10241. I removed this issue to CLI. You can close this issue.. activepackagesource is deprecated\nYou need to change it to the following\nxml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n     <add key=\"NuGet official package source\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n</configuration> \n. Filed https://github.com/dotnet/corefx/issues/36003\nAnd apparently you can run an exe in WSL (!!!). missing leading dot of .dotnet\\toolspkgs \nimplementation is in `[missing dot]dotnet\\toolspkgs.. $HOME/tools/.store -> $HOME/.dotnet/tools/.store\nSorry I think I sent you this. And I missed /.dotnet in some case. There are 2 places \nmoved from $HOME/.dotnet/toolspkgs to $HOME/!!HERE!!/tools/.store. The Preview2 SDK will try to delete package content from $HOME/!!HERE!!/tools/.store where it did not exist. . ",
    "torhovland": "Thank you. It was hanging for a lot longer than 4 minutes (and I use SSD), so it was truly hanging. But as I said, a reboot fixed it.. ",
    "bartoszkp": "Happened to me as well. Unfortunately, also in my case running it again after a reboot with /l*v log.txt didn't allow to reproduce the issue and the package installed successfully,. ",
    "scheshan": "@vancem Thank you for your detailed introductions. And I still have some advises.\n1. It seems people can easily debugging the nuget packages' source code if the authors add the 'SourceLink information'. Is there any documents about the SourceLink?\n2. Can we directly view the source code by the 'go to the definition' button? Other languages' IDEs(Java, Python, Go) have this feature and I think it will be very useful.. @mikem8361 Thanks, I'll have a try.\nAnd I hope this could be a feature in SDK so we can use some built-in commands to do it, like 'dotnet dump', 'dotnet profile'. As I know there are some tools in java like jmap, jstack and they are very popular and useful.. @fqybzhangji No, tried but failed. Seems like my dump file was not correct, so I gave up.\nYou can follow this documentation debugging-core-dumps-with-lldb, and GOOD LUCK!. ",
    "NightWatchman": "Stepping into core source code doesn't work at all for me. I'm trying to figure out why my custom authentication service isn't working properly but I can't step into the ControllerBase.Challenge() method in the following code (which was created by the default project template).\n[HttpPost]\n    [AllowAnonymous]\n    [ValidateAntiForgeryToken]\n    public IActionResult ExternalLogin(string provider, string returnUrl = null)\n    {\n      // Request a redirect to the external login provider.\n      var redirectUrl = Url.Action(nameof(ExternalLoginCallback), \"Account\", new { returnUrl });\n      var properties = this.signInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl);\n      return Challenge(properties, provider);\n    }\nIf I set a breakpoint at return Challenge(properties, provider); it gets hit when I debug, but when I click \"step into (F11)\" it skips right over it and goes to the } on the next line.\nI'm using VS 2017 (15.3.3) with, as far as I can tell, the proper settings.\n\n\nI deleted my %TEMP%/SymbolCache directory which at least caused visual studio to spend a long time downloading various symbols the next time I tried to debug the project.\nThe project is a DotNetCore 2.0 project.. ",
    "GuerrillaCoder": "Is there currently a way to set it up so that go to definition brings me to the core source code?  It's not really debugging I want this for, it is just to get an idea of what the magic method an article tells me to add actually does for my own understanding as searching on github can be a bit confusing and cumbersome (for me at least).. @vancem That sounds excellent I will give it a go!. @vancem That sounds excellent I will give it a go!. ",
    "wiiNinja": "Are there additional steps for debugging an open sourced package that is not a framework package? I am trying to step through the code for the Newtonsoft serializer, and have followed the instructions given in the blog post, but cannot step into the serializer code.. Go to Tools->Options->Debugging->Symbols and check to see if that path is there in the \"Symbol file (.pdb) locations\" list box. I would also blow away the cached symbols there and let it rebuild the next time you debug.. ",
    "dozer75": "I stumbled across this post today while writing an alternative solution to the stack overflow link this issue links to. I don't write the solution again here, but can be viewed in the referenced stack overflow post.. @vancem Interesting, missed that, however the issue remains that not all libraries handles symbols and sourcelink, and as I understand this you can't debug them? . ",
    "Fruchuxs": "My Visual Studio installation trys to access a Source Path which doesnt exists on my machine, if I try to jump into framework specific code: E:\\A_work\\1791\\s\\src\\mscorlib\\src ... Any Ideas?. Thank you all!\nI use the last released Version of VS 17 / .net core. He doesn't ask me for downloading the sources. I assume it's a problem with my proxy. Can I configure it?\nI deleted the symbols cache by myself, it doesn't work.\nI will try the workaround with the sources at Monday.. VS 15.5.6 - the latest one.\n\nLocating source for 'E:\\A_work\\1791\\s\\src\\mscorlib\\src\\System\\Threading\\Tasks\\Task.cs'. (No checksum.)\nThe file 'E:\\A_work\\1791\\s\\src\\mscorlib\\src\\System\\Threading\\Tasks\\Task.cs' does not exist.\nLooking in script documents for 'E:\\A_work\\1791\\s\\src\\mscorlib\\src\\System\\Threading\\Tasks\\Task.cs'...\nLooking in the projects for 'E:\\A_work\\1791\\s\\src\\mscorlib\\src\\System\\Threading\\Tasks\\Task.cs'.\nThe file was not found in a project.\nThe debug source files settings for the active solution indicate that the debugger will not ask the user to find the file: E:\\A_work\\1791\\s\\src\\mscorlib\\src\\System\\Threading\\Tasks\\Task.cs.\nThe debugger could not locate the source file 'E:\\A_work\\1791\\s\\src\\mscorlib\\src\\System\\Threading\\Tasks\\Task.cs'.\n\nBut I don't have a drive called \"E:\".\nI'm behind a Web-Proxy. No download prompt or something similiar.\n. Hmm okay, but if I want to jump into an asp.net method-call like a TagHelper from asp.net, I get the same problem.\nEDIT: And I use version 2.0.3 of the Microsoft.AspNetCore.All nuget package.. Sorry for my late response.\nThanks for your work, but it didn't work for me. VS loads the PDBs from the symbol servers. I cleared them and he loads them again.\n<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\nChecked.\nA742A2B29D2B4658831AD145DC0849BD1 My\nA742A2B29D2B4658831AD145DC0849BD1 Yours\nChecked.\nSize of my TagHelpers.pdb: 241 KB (247.296 Bytes) \nHmmm, maybe strange.\nIf I want to debug an attribute-Tag-Helper he wants to open the Task.cs and always looks in the E:-Path. Now I tried to Debug the View()-Method-Call inside a controller and he tries to open\n\nC:\\b\\w\\e1736bbee5c34dca\\modules\\Mvc\\src\\Microsoft.AspNetCore.Mvc.ViewFeatures\\Controller.cs\n\nSource Search Information:\n\nLocating source for 'C:\\b\\w\\e1736bbee5c34dca\\modules\\Mvc\\src\\Microsoft.AspNetCore.Mvc.ViewFeatures\\Controller.cs'. Checksum: SHA1 {89 cd 27 45 c0 e 2 8d cc 31 a7 f2 38 4 3e ef 59 90 87 ec}\nThe file 'C:\\b\\w\\e1736bbee5c34dca\\modules\\Mvc\\src\\Microsoft.AspNetCore.Mvc.ViewFeatures\\Controller.cs' does not exist.\nLooking in script documents for 'C:\\b\\w\\e1736bbee5c34dca\\modules\\Mvc\\src\\Microsoft.AspNetCore.Mvc.ViewFeatures\\Controller.cs'...\nLooking in the Edit-and-Continue directory 'D:\\Desktop\\Projekte\\eswawi\\enc_temp_folder\\'...\nThe file with the matching checksum was not found in the Edit-and-Continue directory.\nLooking in the projects for 'C:\\b\\w\\e1736bbee5c34dca\\modules\\Mvc\\src\\Microsoft.AspNetCore.Mvc.ViewFeatures\\Controller.cs'.\nThe file was not found in a project.\nSearching for documents embedded in the symbol file.\nAn embedded document was not found.\nLooking for source using source server...\nThe debugger will ask the user to find the file: C:\\b\\w\\e1736bbee5c34dca\\modules\\Mvc\\src\\Microsoft.AspNetCore.Mvc.ViewFeatures\\Controller.cs.\nThe user pressed Cancel in the Find Source dialog. The debug source files settings for the active solution have been modified so that the debugger will not ask the user to find the file: C:\\b\\w\\e1736bbee5c34dca\\modules\\Mvc\\src\\Microsoft.AspNetCore.Mvc.ViewFeatures\\Controller.cs.\nThe debugger could not locate the source file 'C:\\b\\w\\e1736bbee5c34dca\\modules\\Mvc\\src\\Microsoft.AspNetCore.Mvc.ViewFeatures\\Controller.cs'.\n. I tried multiple \"Step Into\", he evertime asks me for finding the source manually. \nAs previously said, I'm using 15.5.6. I'm wondering that the path has changed but is still wrong.. Did you mean the new downloaded PDBs by  VS after deleting them? Yep, cleared the whole text field. I mean Source Link is activated, but I will check it tomorrow.\n\nI didn't tried the linked PDBs cuz they are for 2.0.5.\n. ",
    "npnelson": "I have the same problem as @Fruchuxs on VS 2017 Enterprise 15.5.6. \n\nI'm using the 2.0.5 runtime. Trying to step into a new List<string>() failed, it didn't even prompt me to download the source code.\nI also tried stepping into a new DefaultHttpContext(), which worked fine (the debugger prompted me to download the source code). \nclass Program\n    {\n        static void Main(string[] args)\n        {       \n            var temp2 = new DefaultHttpContext();\n            var temp = new List<string>();         \n        }\n    }\nWhen I look at the pdb for Microsoft.AspNetCore.Http.Abstractions with a text editor, I can see a reference to GitHub. When I do the same for the Systems.Collections.pdb which should contain List<string>, I don't see any reference to GitHub.. @vancem Thanks a bunch, I just tested it and it works great. This is an awesome feature.. ",
    "ronenfe": "I read all the posts here and i still can't watch a variable in the .net core 2.0.0 source file AssemblyLoadContext.cs.\nThis file throws an exception, and I get jumped to the right line, but setting a breakpoint there doesn't get it to stop, and I get the attached error. When I try to watch for the variable, I get the following error:\n\n\u00a0 | Name | Value | Type\n-- | -- | -- | --\n\u00a0 | assemblyName | Cannot obtain value of the local variable or argument because it is not available at this instruction pointer, possibly because it has been optimized away. | System.Reflection.AssemblyName\nThis is coming from an xunit test I'm trying to debug, and I did set the environment variable. going to dissasembly reveals some lines with question marks and some code, I don't know the meaning of it.\nI'm trying to understand why it can't find a file   $exception  {System.IO.FileNotFoundException: Could not load the specified file.\nFile name: 'Microsoft.VisualStudio.TestPlatform.Common.resources'\n   at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingEvent(AssemblyName assemblyName)}   System.IO.FileNotFoundException\nEven after installing Microsoft.VisualStudio.TestPlatform Nuget Package.. ",
    "duncangravill": "I'm experiencing this error:\n\nMicrosoft.AspNetCore.Mvc.Core.pdb could not be found in the selected paths\n\nI have followed the instructions. I have unchecked Just My Code, I have enabled Microsoft Symbol Servers, I have enabled Source Link Support. \nThe only symbol server path I have is the default Microsoft Symbol Server, which I have enabled. Could VS somehow not be connecting to the Microsoft Symbol Server? \nMy project is an ASP Net Core 2.0 MVC app (created with 'dotnet new mvc'). It says in the project properties that it is targeting .net core 2.0.\nVisual Studio is version 15.6.6\nWhat could be preventing this from working?\n. @gregg-miskelly I have followed your instructions but the only information given in the Symbol Load Information is 'Symbols not loaded' \nI have checked dotnet version info. I'm on SDK version 2.1.104 and Shared Framework Host version 2.0.6. I went to the official dotnet download page and saw that these versions are the same as the current downloads. I downloaded the current SDK download anyway and did a repair on mine. The commit SHA was exactly the same after as it was before, no changes, and this made no difference to not being able to load symbols.\nAny other ideas? Could I somehow not be connecting to the symbol server? I'm just on a regular home wifi network? Many thanks for your help.. @gregg-miskelly No, I've dockerized the app using the VS Add Docker Support, it's running in a Linux Docker container.\nDoes this mean it's not possible? I thought perhaps it was just visual studio that needs the symbols and source code.. @vancem Thanks for the great help. Where can I find the symbol package for .net core 2.0.6 ?. @gregg-miskelly @vancem \nI'm still unable to acquire the debug symbols. I now have the released VS 15.7, I've updated my Dockerfile and project target framework to target microsoft/dotnet:2.1.0-rc1-aspnetcore-runtime and 2.1.0-rc1-final. I have repeated your steps to delete the debug folders. However I am still unable to download any symbols from the Microsoft Symbol server, I always get the error message 'Microsoft.AspNetCore.Mvc.Core.pdb could not be found in the selected paths'. I have checked the Symbol Cache on my machine and confirmed that no symbols have been downloaded.\nAre there no symbols for RC1? Any ideas on why I'm still unable to download symbols? Thanks :)\n. @gregg-miskelly Thanks, yes, I'm seeing these warning messages.. @gregg-miskelly Thank you, VS is now downloading the symbols, however, the source files are not being found by the Source Link.\nIn the 'Source search information' in the 'Source Not Found' tab there is information with the GitHub URL of the source file. I have checked the URL and am able to access the source files in a browser, however, the search information is reporting an error with error code 404.\nI have tried to find a work around by downloading the source files and adding them to the asp.net core project, but unfortunately I encountered complications.\nI appreciate that these features are currently under construction, I'm looking forward to upcoming improvements :). @gregg-miskelly \nhttps://raw.githubusercontent.com/dotnet/coreclr/a226c3507db5f001840501652be82856c1b72cad/src/mscorlib/src/System/IO/Stream.cs\nhttps://raw.githubusercontent.com/aspnet/Mvc/595e83d0ebc3b601666b286c94bcdbfe610048f1/src/Microsoft.AspNetCore.Mvc.Core/Infrastructure/FileStreamResultExecutor.cs\nLooking for source using Source Link (https://raw.githubusercontent.com/aspnet/Mvc/595e83d0ebc3b601666b286c94bcdbfe610048f1/src/Microsoft.AspNetCore.Mvc.Core/Infrastructure/FileStreamResultExecutor.cs)...\nSource Link errors:\ngit-credential-manager.exe: Using credentials for username \"Personal Access Token\".\nERROR: The request failed with code 404: \"Not Found\".\nThe file was not found with Source Link.\nAs the URLs can be viewed in a browser I'm wondering if the 404 is related to the credentials as 'Personal Access Token' seems a strange username, it seems strange though as credentials aren't needed to access the URL in the browser.\n. I'm stepping through the source of FileStream.cs, Source Link has loaded the appropriate source for my Linux debug environment, however, I'd like to set a breakpoint in Stream.cs. Is there an easy way to load Stream.cs? I can't easily spot a call into Stream.cs so I'm not sure if I can step into it to get Source Link to automatically download Stream.cs. I've tried right clicking on the declaration of Stream as base class of FileStream and following Go To Definition and Go To Implementation, however these only show a version of Stream.cs from Metadata.\nIs there a way I can instruct VS to download and display Stream.cs ?\nWill the finished version of the Source Link feature enable Go To Definition to automatically download the source?\n. ",
    "szilvaa": "@vancem Thank you for your confirmation. I can't migrate beyond 2.0.5 because that's the latest that AWS Lambdas support. But I can use 2.1 on my machine and learn the things I want to learn by stepping through the source. I suspect most of that will be applicable to 2.0.x. . ",
    "samconn": "Confirming the 3rd option that @gregg-miskelly recommends ...\nI was having trouble stepping into the Identity UserManager.GetUserAsync() method. I nuked my local symbols as described by @vancem, restarted VS17 and compiled the project (this may not be required), and then created a new breakpoint by simply entering the name \"GetUserAsync\" (no quotes).\nWhen I ran the project it took forever to start-up, but I stopped panicking when I noticed that the %Temp%\\SymbolCache was growing like crazy downloading all the PDB files. ;-}\nOnce the home page rendered in the browser, I right-moused on the breakpoint, selected the \"Go to Source Code\" option and boom like that ... it opened up the file!. ",
    "youssefabidi": "I followed the instructions (Unchecked \"Enable Just My Code\", checked \"Microsoft Symbol Servers\" and checked \"\"Enable Source Link support\"), but still can't step into ASP.NET Core source code because symbols are not loaded.\nHere is the \"Symbol Load Information\" from the Modules window for Microsoft.AspNetCore.dll (empty lines were removed and personal information was redacted):\nC:\\Program Files\\dotnet\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\2.1.2\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\WINDOWS\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\WINDOWS\\symbols\\dll\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\WINDOWS\\dll\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8e776b6e10b14bcab493c987e0107684ffffffff\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\MicrosoftPublicSymbols\\Microsoft.AspNetCore.pdb\\8e776b6e10b14bcab493c987e0107684ffffffff\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8e776b6e10b14bcab493c987e01076841\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\MicrosoftPublicSymbols\\Microsoft.AspNetCore.pdb\\8e776b6e10b14bcab493c987e01076841\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\Users\\[REDACTED]\\Documents\\Code\\[REDACTED]\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nSYMSRV:  BYINDEX: 0x2C7\n         C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache*https://msdl.microsoft.com/download/symbols\n         Microsoft.AspNetCore.pdb\n         8E776B6E10B14BCAB493C987E0107684ffffffff\nSYMSRV:  UNC: C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8E776B6E10B14BCAB493C987E0107684ffffffff\\Microsoft.AspNetCore.pdb - path not found\nSYMSRV:  UNC: C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8E776B6E10B14BCAB493C987E0107684ffffffff\\Microsoft.AspNetCore.pd_ - path not found\nSYMSRV:  UNC: C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8E776B6E10B14BCAB493C987E0107684ffffffff\\file.ptr - path not found\nSYMSRV:  HTTPGET: /download/symbols/Microsoft.AspNetCore.pdb/8E776B6E10B14BCAB493C987E0107684ffffffff/Microsoft.AspNetCore.pdb\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\nSYMSRV:  HTTPGET: /download/symbols/Microsoft.AspNetCore.pdb/8E776B6E10B14BCAB493C987E0107684ffffffff/Microsoft.AspNetCore.pd_\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\nSYMSRV:  HTTPGET: /download/symbols/Microsoft.AspNetCore.pdb/8E776B6E10B14BCAB493C987E0107684ffffffff/file.ptr\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\nSYMSRV:  RESULT: 0x80190194\nSYMSRV:  BYINDEX: 0x2C8\n         C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache*https://msdl.microsoft.com/download/symbols\n         Microsoft.AspNetCore.pdb\n         8E776B6E10B14BCAB493C987E01076841\nSYMSRV:  UNC: C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8E776B6E10B14BCAB493C987E01076841\\Microsoft.AspNetCore.pdb - path not found\nSYMSRV:  UNC: C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8E776B6E10B14BCAB493C987E01076841\\Microsoft.AspNetCore.pd_ - path not found\nSYMSRV:  UNC: C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8E776B6E10B14BCAB493C987E01076841\\file.ptr - path not found\nSYMSRV:  HTTPGET: /download/symbols/Microsoft.AspNetCore.pdb/8E776B6E10B14BCAB493C987E01076841/Microsoft.AspNetCore.pdb\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\nSYMSRV:  HTTPGET: /download/symbols/Microsoft.AspNetCore.pdb/8E776B6E10B14BCAB493C987E01076841/Microsoft.AspNetCore.pd_\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\nSYMSRV:  HTTPGET: /download/symbols/Microsoft.AspNetCore.pdb/8E776B6E10B14BCAB493C987E01076841/file.ptr\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\nSYMSRV:  RESULT: 0x80190194\nhttps://msdl.microsoft.com/download/symbols: Symbols not found on symbol server.\nFurther information:\n- I'm using Visual Studio Community 2017 version 15.7.3.\n- I'm debugging a netcoreapp2.1 application that is running locally (not in a container).\n- I'm using version 2.1.302 of the .NET Core SDK and version 2.1.2 of the .NET Core runtime.\nIf anyone knows what I'm doing wrong, that would be very helpful!. I followed the instructions (Unchecked \"Enable Just My Code\", checked \"Microsoft Symbol Servers\" and checked \"\"Enable Source Link support\"), but still can't step into ASP.NET Core source code because symbols are not loaded.\nHere is the \"Symbol Load Information\" from the Modules window for Microsoft.AspNetCore.dll (empty lines were removed and personal information was redacted):\nC:\\Program Files\\dotnet\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\2.1.2\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\WINDOWS\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\WINDOWS\\symbols\\dll\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\WINDOWS\\dll\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8e776b6e10b14bcab493c987e0107684ffffffff\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\MicrosoftPublicSymbols\\Microsoft.AspNetCore.pdb\\8e776b6e10b14bcab493c987e0107684ffffffff\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8e776b6e10b14bcab493c987e01076841\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\MicrosoftPublicSymbols\\Microsoft.AspNetCore.pdb\\8e776b6e10b14bcab493c987e01076841\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nC:\\Users\\[REDACTED]\\Documents\\Code\\[REDACTED]\\Microsoft.AspNetCore.pdb: Cannot find or open the PDB file.\nSYMSRV:  BYINDEX: 0x2C7\n         C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache*https://msdl.microsoft.com/download/symbols\n         Microsoft.AspNetCore.pdb\n         8E776B6E10B14BCAB493C987E0107684ffffffff\nSYMSRV:  UNC: C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8E776B6E10B14BCAB493C987E0107684ffffffff\\Microsoft.AspNetCore.pdb - path not found\nSYMSRV:  UNC: C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8E776B6E10B14BCAB493C987E0107684ffffffff\\Microsoft.AspNetCore.pd_ - path not found\nSYMSRV:  UNC: C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8E776B6E10B14BCAB493C987E0107684ffffffff\\file.ptr - path not found\nSYMSRV:  HTTPGET: /download/symbols/Microsoft.AspNetCore.pdb/8E776B6E10B14BCAB493C987E0107684ffffffff/Microsoft.AspNetCore.pdb\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\nSYMSRV:  HTTPGET: /download/symbols/Microsoft.AspNetCore.pdb/8E776B6E10B14BCAB493C987E0107684ffffffff/Microsoft.AspNetCore.pd_\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\nSYMSRV:  HTTPGET: /download/symbols/Microsoft.AspNetCore.pdb/8E776B6E10B14BCAB493C987E0107684ffffffff/file.ptr\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\nSYMSRV:  RESULT: 0x80190194\nSYMSRV:  BYINDEX: 0x2C8\n         C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache*https://msdl.microsoft.com/download/symbols\n         Microsoft.AspNetCore.pdb\n         8E776B6E10B14BCAB493C987E01076841\nSYMSRV:  UNC: C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8E776B6E10B14BCAB493C987E01076841\\Microsoft.AspNetCore.pdb - path not found\nSYMSRV:  UNC: C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8E776B6E10B14BCAB493C987E01076841\\Microsoft.AspNetCore.pd_ - path not found\nSYMSRV:  UNC: C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\SymbolCache\\Microsoft.AspNetCore.pdb\\8E776B6E10B14BCAB493C987E01076841\\file.ptr - path not found\nSYMSRV:  HTTPGET: /download/symbols/Microsoft.AspNetCore.pdb/8E776B6E10B14BCAB493C987E01076841/Microsoft.AspNetCore.pdb\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\nSYMSRV:  HTTPGET: /download/symbols/Microsoft.AspNetCore.pdb/8E776B6E10B14BCAB493C987E01076841/Microsoft.AspNetCore.pd_\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\nSYMSRV:  HTTPGET: /download/symbols/Microsoft.AspNetCore.pdb/8E776B6E10B14BCAB493C987E01076841/file.ptr\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\nSYMSRV:  RESULT: 0x80190194\nhttps://msdl.microsoft.com/download/symbols: Symbols not found on symbol server.\nFurther information:\n- I'm using Visual Studio Community 2017 version 15.7.3.\n- I'm debugging a netcoreapp2.1 application that is running locally (not in a container).\n- I'm using version 2.1.302 of the .NET Core SDK and version 2.1.2 of the .NET Core runtime.\nIf anyone knows what I'm doing wrong, that would be very helpful!. Yes, I confirm that it works now. The symbols are loaded and I can step into .NET Core and ASP.NET Core source code with no problem (most of it anyway, because of https://github.com/dotnet/buildtools/issues/1896).\nI didn't think it was an intermittent issue because of the HTTP_STATUS_NOT_FOUND error. Anyway, I'm glad that the issue is fixed now: being able to step into framework source code is an extremely valuable feature!\nThanks a lot for your help, @vancem! And thanks to the team for their great work!. Yes, I confirm that it works now. The symbols are loaded and I can step into .NET Core and ASP.NET Core source code with no problem (most of it anyway, because of https://github.com/dotnet/buildtools/issues/1896).\nI didn't think it was an intermittent issue because of the HTTP_STATUS_NOT_FOUND error. Anyway, I'm glad that the issue is fixed now: being able to step into framework source code is an extremely valuable feature!\nThanks a lot for your help, @vancem! And thanks to the team for their great work!. ",
    "Katulus": "Damn, how did this happen? So embarrassing. Consider this issue fixed. :-D. ",
    "johanskoldekrans": "This is probably closer to what I did IRL that didn't work, if there is a difference:\n<a @(x == y ? \"class=\\\"something\\\"\" : \"\")\" asp-controller=\"Some\" asp-action=\"Something\" asp-route-id=\"1\">Click me</a>. This is probably closer to what I did IRL that didn't work, if there is a difference:\n<a @(x == y ? \"class=\\\"something\\\"\" : \"\")\" asp-controller=\"Some\" asp-action=\"Something\" asp-route-id=\"1\">Click me</a>. ",
    "fahadash": "I need image to be 32 bit. I am referencing a com interop 32 bit assembly. . ",
    "Wraith2": "I've just hit the same problem. I need a 32 bit image for interop as well. \nThe problem is that visual studio is using the 64 bit version of dotnet.exe to try and debug which results in a BadImageFormatException. I've verified that I have both x86 and x64 builds installed and that invoking the 32 bit dotnet exe with the project output does work so the compilation if fine but visual studio isn't attempting to resolve the correct debugging executable correctly when changing build platform targets.\nI just experimented. Visual studio is using the path environment variable to locate dotnet.exe so the temporary fix seems to be to ensure that 32 is higher in the search order than 64. However I think this is really something the programming environment should handle not the user externally.. I think that's the wrong link, did you mean MSBuild .Targets Files? Using that I've added a specific x64 override as well do no matter your environment variable order it'll pick the right version for the platform if you specify the platform. AnyCPU will use the default.\n```\n\n$(MSBuildProgramFiles32)\\dotnet\\dotnet\n\n\n$(ProgramW6432)\\dotnet\\dotnet\n\n\n```. ",
    "galodoido794": "I tried to migrate, but as I gave error I'm doing a simpler test. I've created a new project (CORE 2.0) for test. All packages are NET CORE 2.0. \n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>netcoreapp2.0</TargetFramework>\n    <RuntimeIdentifiers>win10-x64;ubuntu.14.04-x64</RuntimeIdentifiers>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\n  </ItemGroup>\n  <ItemGroup>\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\n  </ItemGroup>\n</Project>\nI posted an image of the project on this [link] (http://imgur.com/a/9KvB1)\nWhen publishing in Ubuntu 14.04 gives the following error:\n```\nUnhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.IO.FileSystem, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\n   at Test.Program.BuildWebHost(String[] args)\n```\nOn this server I have an ASP NET CORE 1.1 application worked. I have already upgraded the server to Asp NET CORE 2.0.. I will read the articles and test those possibilities later.. I tested some possibilities and I did not succeed. I did the same process I do in NET CORE 1.1. Compile on windows and copy the files to Ubuntu 14.04 x64 and it works. NET CORE 2.0 does not work. I tested publishing with MSBuild and with dotnet publish -c release -r ubuntu.14.04-x64 /flp: v = diag.\nWill only I have a problem with ASP CORE 2.0 on ubuntu 14.04? To test it is very simple, create a CORE 2.0 MVC project (simple) and try to publish it in ubuntu. In my case the error now is: Microsoft.Win32.Registry, Version = 4.1.0.0 Can not load a reference assembly for execution.. I have not tried with the new patch from Visual Studio 15.4 or this does not solve this problem? \nI've tried compiling anyway and I could not get it to work.. I did the following steps:\nIn linux:\napt-get update\napt-get upgrade\nI installed the new Visual Studio 15.4.0 \nRun the command: dotnet publish -c release -r ubuntu.14.04-x64\nAnd it worked.. ",
    "evgshk": "@galodoido794 got exactly the same problem with .NET Core 2.0.0 runtime: \n\nCould not load file or assembly 'System.Runtime.Extensions, Version=4.2.0.0\n...\n...and so forth\n\nAnd similarly to you my project works fine with .NET Core 1.1.2 runtime (LTS). \np/s Just in case, I use Windows Server 2012.. ",
    "bogdan-st": "Not sure if this is related, but I just got this error trying to run a project inside visual studio on windows: \nAn unhandled exception of type 'System.IO.FileNotFoundException' occurred in Unknown Module.\nCould not load file or assembly 'System.Runtime, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\nApparently I had opened the folder containing the folder with the solution (.sln) file. It seemed I was inside the solution, intellisense was fine, but right clicking on the folders did not bring the usual options like clean/build solution. Although F5 worked to debug it, but it gave this error. . ",
    "user135711": "@bogdan-st What did you do to fix it? I have the same error.\n. ",
    "wantaotao1994": "Duplicate of #Thanks a  lot~\n\n. \n",
    "GavinScottQss": "@janvorli,\nI'm confused because as far as I can tell, current .Net Core apps built for a linux-64 target have dependencies on C/C++ runtime versions which can't be built on a 2.6 kernel and thus aren't available on RHEL 6, and this document does not mention that issue. Is this something new since you documented this, or am I missing something. Thanks!. ",
    "KshitizGIT": "@emgarten  - How do we clear the\n<WarningsAsErrors>NU1605</WarningsAsErrors>.\n???. ",
    "loop-evgeny": "I've also been getting errors like this since upgrading MathNet.Numerics.FSharp from 4.0.0-beta2 to 4.1.0:\n\n9>FSharpModules.fsproj : warning NU1605: Detected package downgrade: FSharp.Core from 4.3.3 to 4.2.3. Reference the package directly from the project to select a different version. \n9>FSharpModules.fsproj : warning NU1605:  FSharpModules -> MathNet.Numerics.FSharp 4.1.0 -> FSharp.Core (>= 4.3.3) \n9>FSharpModules.fsproj : warning NU1605:  FSharpModules -> FSharp.Core (>= 4.2.0)\n\nThe really bizarre thing was that my project referenced neither of the mentioned versions. It had\n<PackageReference Include=\"FSharp.Core\" Version=\"4.3.4\" />\n\nThe fix was to add\n<FSharpCoreImplicitPackageVersion>4.3.*</FSharpCoreImplicitPackageVersion>\n\nto all F# projects in my solution.\nIt works now, but how ON EARTH is the user supposed to know they need to add that?! 2 developers wasted at least 4 hours on this.. ",
    "axelwass": "@KshitizGIT  You can clear it by adding: \n<PropertyGroup>\n    <WarningsAsErrors></WarningsAsErrors>\n  </PropertyGroup>\nto your csproj. I prefer this solution, though it could clear other warnings as errors.. ",
    "piurass": "The solution that I found for this problem is to find out the package and donwgrade its version for the version sugested during compilation.\nAfter downgrade the package, clean solution and reopen project, it compiled fine.. ",
    "shalaka198": "Is there any update on this issue? I am facing the same.. ",
    "msvprogs": "+1, I have the same problem. OS CentOS 7, .NET Core 2.0. ",
    "AlgorithmsAreCool": "Is the end goal here smaller deployments or does this get us closer to being able to ship single file self contained applications executable?. \ud83d\udc40 \nhttps://github.com/grpc/grpc-dotnet/pull/63#issuecomment-460698855\n\ndavidfowl commented 38 minutes ago\nI disagree. Experimental means that we don't know if this is going to work, not that it's going to ship eventually but we're in the early phases right now. We use that experimental term for actual experiments that we're trying to figure out if it'll work out. I'd rather say something like this is under active development and there's no release for it as yet. That's much more the reality of the situation rather than calling it an experiment.\n\n. Perfect! I figured it was too early for firm commitments of direction, but acknowledgement of support from an architect is plenty good for me.\nP.S. \nPlease don't forget about Bond over GRPC. It's not as popular as protobufs, but it brings some great features to the table that bring it pretty much up to parity with WCF on functionality.\n...except the flexible transports like named pipes and such but you can't win them all.. ",
    "galvesribeiro": "\nIs the end goal here smaller deployments or does this get us closer to being able to ship single file self contained applications executable?\n\nI wonder if after linting we could leverage something like ILMerge as a secondary (and optional) build step for a single executable scenario.. ",
    "masonwheeler": "\nAnd, it wouldn't be right to announce this linker without a hat tip to Joel Spolsky who we can give the honorary and historical distinction of feature requestor.\n\n13 years.  Better late than never, I suppose.... ",
    "Phrohdoh": "\nThe IL Linker currently only supports .NET Core Self Contained Applications with this first preview version.\n\nDoes this mean the linker will eventually support .NET Framework / Mono, or is it planned to be Core-only?. ",
    "hjc4869": "My project has references to some (large) libraries but only a small part of them are actually used. (No reflection is used)\nAccording to the docs, non-framework assemblies are all root assemblies by default. Can I remove some of them from LinkerRootAssemblies without adding the ILLink to the csproj?. ",
    "markrendle": "Will this be chainable with the /t:LinkNative target from CoreRT? So I can trim down my assemblies before AOT compilation?. ",
    "mikedn": "@markrendle Why would you do that? AOT compilation does this by default.. > Ok so issue here is that single thread instance cannot be executed twice even if first execution was completed (This works fine in Framework)\nThis doesn't work in the .NET Framework either. It's also stated in the documentation:\n\nOnce the thread terminates, it cannot be restarted with another call to Start.. The following should work as expected:\nC#\nint[] items = TestSuite.items;\nfor (var i = 0; i < items.Length; i++)\n{\n    items[i] *= 3;\n}\nIn general, the index and the array reference must be local variables. Range check elimination might work when they're not but a relatively recent JIT bug fix has made the JIT more conservative in this regard.. > and Loop2 should be slower\n\nFWIW cases like Loop2 may be better served by spans:\nC#\nSpan<int> s = items.AsSpan().Slice(0, itemCount - 10);\nfor (var i = 0; i < s.Length; i++)\n    s[i] *= 3;\nor the more compact\nC#\nforeach (ref int item in items.AsSpan().Slice(0, itemCount - 10))\n    item *= 3;\n. > Strangely loop2 got also faster but from assembly code I can see it keeps the bounds check.\nNot surprising, things tend to work better if you use local variables. The JIT can sometimes introduces such local variables by itself by CESing loads, but it doesn't always work as well.\n\nAnd I would have avoided foreach for performance but that also runs as fast.\n\nNote that foreach always had special support in the C# compiler for arrays (and now spans) so that foreach (var i in a) is the same as for (int i = 0; i < a.Length; i++). Bonus, if a is not a local variable the C# compiler automatically creates a temporary variable for it thus avoiding the issues associated with using the array reference from a static/instance field.\nIf it weren't for the fact that your code modifies the array, the best solution for code like Loop1 would be to simply use foreach:\nC#\nforeach (var i in items)\n    sum += i;\nwill have the range check eliminated without you having to copy items to a local variable.\n. Using Vector<T> with arrays is kind of problematic because the range checks are not eliminated and loop cloning is not performed. You basically go from:\nasm\n       4863CA               movsxd   rcx, edx\n       448B448F10           mov      r8d, dword ptr [rdi+4*rcx+16]\n       4403448E10           add      r8d, dword ptr [rsi+4*rcx+16]\n       4489448810           mov      dword ptr [rax+4*rcx+16], r8d\n       FFC2                 inc      edx\n       3BDA                 cmp      ebx, edx\n       7FE8                 jg       SHORT G_M55886_IG04\nto\nasm\nG_M55886_IG03:\n       3BD3                 cmp      edx, ebx\n       7350                 jae      SHORT G_M55886_IG05\n       8D4A07               lea      ecx, [rdx+7]\n       3BCB                 cmp      ecx, ebx\n       7349                 jae      SHORT G_M55886_IG05\n       C5FD10449710         vmovupd  ymm0, ymmword ptr[rdi+4*rdx+16]\n       448B4608             mov      r8d, dword ptr [rsi+8]\n       413BD0               cmp      edx, r8d\n       733A                 jae      SHORT G_M55886_IG05\n       413BC8               cmp      ecx, r8d\n       7335                 jae      SHORT G_M55886_IG05\n       C5FD104C9610         vmovupd  ymm1, ymmword ptr[rsi+4*rdx+16]\n       C5FDFEC1             vpaddd   ymm0, ymm1\n       448B4008             mov      r8d, dword ptr [rax+8]\n       413BD0               cmp      edx, r8d\n       7327                 jae      SHORT G_M55886_IG06\n       413BC8               cmp      ecx, r8d\n       7327                 jae      SHORT G_M55886_IG07\n       C5FD11449010         vmovupd  ymmword ptr[rax+4*rdx+16], ymm0\n       83C208               add      edx, 8\n       3BD5                 cmp      edx, ebp\n       7EBC                 jle      SHORT G_M55886_IG03\n. Well, unsafe won't work very well with Vector<T> because there's no way to load Vector<T> from a pointer. You could use Span<Vector<int>> and MemoryMarshal.Cast:\nC#\nvar vlhs = MemoryMarshal.Cast<int, Vector<int>>(lhs);\nvar vrhs = MemoryMarshal.Cast<int, Vector<int>>(rhs);\nvar vres = MemoryMarshal.Cast<int, Vector<int>>(result);\nfor (var i = 0; i < vlhs.Length; i++)\n    vres[i] = vlhs[i] + vrhs[i];\nunsafe would work well with the SSE/AVX intrinsics:\nC#\nfixed (int* plhs = &lhs[0])\nfixed (int* prhs = &rhs[0])\nfixed (int* pres = &result[0])\n{\n    for (var i = 0; i < lhs.Length; i += 8)\n        Avx2.Store(pres + i, Avx2.Add(Avx.LoadVector256(plhs + i), Avx2.LoadVector256(prhs + i)));\n}\nBut a quick test on my machine shows that all variants have basically the same performance. Shouldn't be too surprising, those arrays have 256 megabytes each. The cost of accessing all that memory is so high that everything else is pretty much irrelevant.. > Shorter arrays; accessing 256MB is going to dominate over the CPU instructions for that size of array as it can't fit into CPU cache\nIndeed. And that only if the array memory is already in cache (probably reasonable to assume, the data must have been written there previously and if you're not using tons of memory it's probably still in the cache).\nAnd of course, another case is when you have more expensive computations, though you probably need quite a bit of computation to raise above memory access cost.\n\nAlso for similar loops, c++ does auto vectorization.\n\nYeah, they tend to be overly optimistic and perform optimizations that aren't necessarily needed/useful.\n\nProbably a good case for HWIntrinsics and the NonTemporal store functions?\n\nSeems to help a bit but not a lot, around 10%. And some of that (3-4%) seems to come from alignment.\n\nActually in the question arrays were 64 MB\n\nThey're int so it's 64MB * 4 = 256MB. Doesn't really matter, they still don't fit in any CPU cache.\n\nI just changed the 64 KB still, no difference! This really doesn't sound right. I remember I have tested System.Numberics.Vector few years ago for a similar case. It was fast. Obviously above assembly code is correct. It has to copy each item to ymm and do the addition. I think I am misinformed of something.\n\nWell, it might depend on what exactly you are measuring. Your benchmarks include the cost of array allocation, whatever that cost might be. If you allocate those arrays only once and reuse them then the results might be different.\nWith pre-allocated 65536 element arrays the AVX version variant I posted above is ~2x faster than the scalar version. Sure, 2x is not 8x but getting an ideal speed-up from SIMD code isn't exactly the norm.. Might be worth adding that the AVX version I posted doesn't generate ideal code:\nasm\nG_M54511_IG03:\n       4D63DA               movsxd   r11, r10d\n       49C1E302             shl      r11, 2\n       4A8D3419             lea      rsi, [rcx+r11]\n       C5FE6F06             vmovdqu  ymm0, ymmword ptr[rsi]\n       4A8D341A             lea      rsi, [rdx+r11]\n       C5FDFE06             vpaddd   ymm0, ymm0, ymmword ptr[rsi]\n       4D03D9               add      r11, r9\n       C4C17E7F03           vmovdqu  ymmword ptr[r11], ymm0\n       4183C208             add      r10d, 8\n       413BC2               cmp      eax, r10d\n       7FD8                 jg       SHORT G_M54511_IG03\nThose LEAs should not be there, that's a limitation of the current JIT. But it's unlikely that it has any measurable impact. Other versions, such as:\n```C#\nint plhs1 = plhs;\nint plhsEnd = plhs1 + lhs.Length;\nint prhs1 = prhs;\nint pres1 = pres;\nfor (; plhs1 < plhsEnd; plhs1 += 8, prhs1 += 8, pres1 += 8)\n    Avx2.Store(pres1, Avx2.Add(Avx.LoadVector256(plhs1), Avx2.LoadVector256(prhs1)));\n```\nhave similar performance.\n. > Is it possible to do loop unrolling ?\nThe JIT doesn't do that today.\n\nI tried hand unrolling the loop 4 times when used LoadVector256 all of them still uses YMM0, when I use Vector they use different YMM, though I have not observed any perf difference.\n\nAnd as you already found, it doesn't help. I actually tried that too earlier and came to the same result. Though what I did\nC#\nfor (; plhs1 < plhsEnd; plhs1 += 32, prhs1 += 32, pres1 += 32)\n{\n    Avx2.Store(pres1, Avx2.Add(Avx.LoadVector256(plhs1), Avx2.LoadVector256(prhs1)));\n    Avx2.Store(pres1 + 8, Avx2.Add(Avx.LoadVector256(plhs1 + 8), Avx2.LoadVector256(prhs1 + 8)));\n    Avx2.Store(pres1 + 16, Avx2.Add(Avx.LoadVector256(plhs1 + 16), Avx2.LoadVector256(prhs1 + 16)));\n    Avx2.Store(pres1 + 24, Avx2.Add(Avx.LoadVector256(plhs1 + 24), Avx2.LoadVector256(prhs1 + 24)));\n}\nalso suffers from that extra LEAs issue. Perhaps if that's fixed it would work better. But I don't expect wonders.. > I guess CPU renames registers anyway. Lol, Old CPU's were more predictable.\nAh, if you're referring to the use of the same register multiple times in the loop then yes, modern CPUs tend to handle that well via register renaming.\n\nLol, Old CPU's were more predictable.\n\nIn a way, yes. New CPUs are too pretty predictable, but unfortunately that's @#$% complicated and not well documented :). ",
    "MGuerra7007": "What about something like anotations? Maybe some kind of attribute that specifies to the linker which types to consider as roots. The linker then would mark those types as roots and combine that information with the other channels (like creating your own target).\nFinally, the linker would remove from the final assembly the references to the attributes used to annotate.\nI think that would be a very easy way of protecting a type you know you are going to use with reflection or whatever.\nWhat do you think?\n. ",
    "sandorfr": "@kasper3 I\u2019m pretty sure the source are going to appear at some level of maturity. I don\u2019t think that was a good reason to open an issue on announcements which as a result will spam us all ;) . ",
    "erozenfeld": "@kasper3 \n\nBut where are the sources of https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks package that the end consumer is using?\n\nHere they are:\nhttps://github.com/mono/linker/tree/master/corebuild/integration/ILLink.Tasks. ",
    "ManishJayaswal": "I don't think we have a good solution at this time other than to publish the tests as apps and then run them.\n@codito - do you know if you guys are thinking about this?. ",
    "Parth6288": "Attached is the log file.\ndotnetstracelog.txt\n. ",
    "msmolka": "@svick <PackageReference> is not a option. I have old not Core project. I need this reference to use OpenXml nuget package which relies on Packaging one. Also it is problem because I have a lot duplicate dependency errors.. @svick are you sure:\nbased on that: Microsoft Docs\n\nAt present, package references are supported in Visual Studio 2017 only, for .NET Core projects, .NET Standard projects, and UWP projects targeting Windows 10 Build 15063 (Creators Update).\n\nAbout the error I cannot reproduce it right now. @Petermarcu Could you reopen this issue? My project is using .NET Framework 4.7.1 which is compatible with .NETStandard 2.0, So there is no need to install tens of dependencies, but because of this bug it is painful with deployment. \nI'm considering this as bug, because no other package has such strange dependency.\nEven in latest alfa version this dependency exists. And I cannot find reason for that.\nI've tried  but gave up after 5 hours. I have some incompatible msbuild references, which are not working. And simply don't want to create workarounds for bugs.\n  . @Petermarcu Could you reopen this issue? My project is using .NET Framework 4.7.1 which is compatible with .NETStandard 2.0, So there is no need to install tens of dependencies, but because of this bug it is painful with deployment. \nI'm considering this as bug, because no other package has such strange dependency.\nEven in latest alfa version this dependency exists. And I cannot find reason for that.\nI've tried  but gave up after 5 hours. I have some incompatible msbuild references, which are not working. And simply don't want to create workarounds for bugs.\n  . ",
    "Sc0tTyXL": "We still have an issue where is tries to load .NET Standard in a .NET Framework application. We do not want to be dependent on Standard, could somebody please fix this error? There shouldn't be a dependency!\nWe cannot downgrade because the previous version of the package (https://www.nuget.org/packages/DocumentFormat.OpenXml/) that is dependent on this package has a bug (we ourselves don't use this package).. ",
    "JCPuerto": "Updating to 4.4.0 is causing errors in the Visual Studio Team Services Build:\nError : This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is ..\\..\\packages\\NETStandard.Library.2.0.1\\build\\NETStandard.Library.targets\nSince it's adding some extra lines to the web.config:\n<Import Project=\"..\\..\\..\\packages\\NETStandard.Library.2.0.1\\build\\NETStandard.Library.targets\" Condition=\"Exists('..\\..\\..\\packages\\NETStandard.Library.2.0.1\\build\\NETStandard.Library.targets')\" />\n  <Target Name=\"EnsureNuGetPackageBuildImports\" BeforeTargets=\"PrepareForBuild\">\n    <PropertyGroup>\n      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>\n    </PropertyGroup>\n    <Error Condition=\"!Exists('..\\..\\..\\packages\\NETStandard.Library.2.0.1\\build\\NETStandard.Library.targets')\" Text=\"$([System.String]::Format('$(ErrorText)', '..\\..\\..\\packages\\NETStandard.Library.2.0.1\\build\\NETStandard.Library.targets'))\" />\n  </Target>\nSo please remove that dependency.\nThank you!. ",
    "itanex": "I have not been able to reproduce this issue. I removed all core frameworks and put just 2 into my VM and nothing seems to be wrong.\nI have seen VS behave like this before though with various other things and it usually has to do with a number of language services crashing or locking up. Have you tried a hard reset of your computer?\nEdit: Also to note I have installed the latest asp.net core sdk even though the version still reports 2.0.0. Perhaps removing the sdk and reinstalling or trying the repair function of the installer.. ",
    "NikasZalias": "@Petermarcu I've just tried with CMD and here's what I got...\n\nand when I type dotnet --version I can see it's 2.0.0 so basically it's all good, but maybe it is possible that many .NET Core SDKs are somehow disturbing each other??. @itanex no I have not tried hard reset my computer and it would be nice to stay that way.... So i made diag log, zipped my entire project and added it to Google Drive. Here is the link:\nhttps://drive.google.com/drive/folders/0Byw8_OcVom5XWFl4SXNJN1hOYXc?usp=sharing\nHope you'll find the problem, because I'm desperete... . ",
    "hakonrossebo": "I had the same issue. A new class library build failed. The issue was fixed by renaming C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder and deleting obj/bin folders for the project.. ",
    "vvsotnikov": "I had the same issue, a new console application build failed. I've tried the fix that @hakonrossebo did, but it didn't work for me. I've also tried to reinstall .NET Core SDK 2.0 and to repair my VS 2017, but without any success.. @dsplaisted I've got exactly the same errors in IDE and when called dotnet restore as a Nikas, dotnet --version also returned 2.0.0. However, completely removing the IDE and .NET Core 2.0 SDK and installing them from scratch fixed the error, but now I can't reproduce it and provide the logs, sorry.  Anyway, thank you for your response!. ",
    "joeseggie": "@ericstj thank you, saved my week. I got the same problem. Renaming the NuGetFallbackFolder, deleting the bin and obj folders from the project, running dotnet restore from command prompt with elevated privileges resolved the problem.. ",
    "dhcgn": "Mails to clrlinker@microsoft.com are geeting rejected from microsoft-com.mail.protection.outlook.com. \n```\nRemote Server returned '<\nmicrosoft-com.mail.protection.outlook.com #5.4.1 \nsmtp; 550 5.4.1 \n[clrlinker@microsoft.com]: Recipient address rejected: Access denied \n[BL2NAM06FT004.Eop-nam06.prod.protection.outlook.com]\n\n'\n```. \n",
    "mqudsi": "So long as they can be installed side-by-side and running a .NET Core 1.x project is not possible without user action when only version 2.x is installed, both should be provided.. ",
    "KelsonBall": "Memory beyond the array was being accessed (gl parameter PixelType doesnt describe the type of the whole pixel, only the type of each rgba element). ",
    "goforgold": "Hi @svick \nAt your recommendation, I tried migrating from Preview 2 Final to Latest Stable but facing issues.\nI've posted detailed in a separate issues #930 for this.. No.\nOn 07-Oct-2017 02:59, \"Peter Marcu\" notifications@github.com wrote:\n\nIt looks like you already have the link to the Preview 2 final version and\nhave filed a separate issue for your issues migrating from Preview2 to RTM.\nAny reason this issues needs to stay open?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/929#issuecomment-334874612, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABpaVZ-qGf9j8G-aKZFi7nA1-HgegLDPks5sppukgaJpZM4PK3FS\n.\n. I managed to install .NET Core 2.0 using the source code as instructed here.\n\nI didn't find any complexity in that way. It hardly took 10 minutes to get everything setup.. This is exactly how I did this around a month ago.\nThank you very much to confirm the solution.\nOn 06-Oct-2017 21:31, \"Bruno Paschoali Regis\" notifications@github.com\nwrote:\n\nLike hchungi said, I just did:\nDownload .NET Core 2.0.0 runtime libraries (always check if URL is right,\nmaybe it can be changed):\nwget https://download.microsoft.com/download/5/F/0/5F0362BD-\n7D0A-4A9D-9BF9-022C6B15B04D/dotnet-runtime-2.0.0-linux-x64.tar.gz\nCreate folder to .NET Core and extract your tar.gz:\nmkdir -p $HOME/dotnet && tar zxf dotnet-runtime-2.0.0-linux-x64.tar.gz -C\n$HOME/dotnet\nFinally, export dotnet to globally variable:\nexport PATH=$PATH:$HOME/dotnet\nJust it :)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/930#issuecomment-334797494, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABpaVdhf_5I669PIpGH-5LqGA8H83mSCks5spk7JgaJpZM4PK47F\n.\n. But I wish if I could install this simply using package manager on AWS AMI.\n\nOn 06-Oct-2017 21:55, \"Peter Marcu\" notifications@github.com wrote:\n\nSounds like people have found a good solution. I'm going to close this out\nnow.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/930#issuecomment-334803730, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABpaVZb1hBFEZ3GcMuot2i26cZiFmhQiks5splSFgaJpZM4PK47F\n.\n. Yes, I thought about that and researched on that too.\n\nBut, many resources suggests that AWS AMI perofoms best in AWS\ninfrastructures.\nOn 06-Oct-2017 22:05, \"Omair Majid\" notifications@github.com wrote:\n\nAny chance you could try a distribution other than Amazon Linux? The .NET\nCore project publishes packages for several distributions (such as CentOS,\nDebian, Ubuntu) and several other distributions are now starting to carry\n.NET Core too (such as Arch, CentOS, Fedora, RHEL). I dont know if we have\na way to contribute packages to Amazon Linux directly.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/930#issuecomment-334806056, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABpaVbvaBiUBObEdMh3psUzFHrdJJFd2ks5spla3gaJpZM4PK47F\n.\n. \n",
    "heathhey": "You might have better luck following the instructions here:\nhttps://github.com/dotnet/core/blob/0b1a1631593d6d379fbdfe2b23597a5c25ea4fc9/Documentation/build-and-install-rhel6-prerequisites.md\nAmazon Linux already has a later version of curl, so you might need libcurl-devel installed as well. . Is there a SRPM for the dotnet-runtime package? Or is there a spec file in the repo somewhere? I couldn't find one.. ",
    "hchungi": "I was almost desperate.\nI tries many ways, none of them can work for me.\nAfterwards, I download the .NET Core 2.0 runtime directly with following link:\n\nhttps://download.microsoft.com/download/5/F/0/5F0362BD-7D0A-4A9D-9BF9-022C6B15B04D/dotnet-runtime-2.0.0-linux-x64.tar.gz\n\nAnd, use the old fashion way like installing .net core 1.1 with commands:\nsudo mkdir -p /opt/dotnet && sudo tar zxf dotnet-runtime-2.0.0-linux-x64.tar.gz -C /opt/dotnet\nsudo ln -s /opt/dotnet/dotnet /usr/local/bin\nIt worked. Very simple like you used to do.. ",
    "zl4bv": "Does not work with Amazon Linux when following these instructions.\n[ec2-user@ip-xx-xx-xx-xx ~]$ sudo yum install dotnet-sdk-2.0.0\nLoaded plugins: priorities, update-motd, upgrade-helper\nResolving Dependencies\n--> Running transaction check\n---> Package dotnet-sdk-2.0.0.x86_64 0:2.0.0-1 will be installed\n--> Processing Dependency: dotnet-runtime-2.0.0 >= 2.0.0 for package: dotnet-sdk-2.0.0-2.0.0-1.x86_64\n--> Processing Dependency: aspnetcore-store-2.0.0 >= 2.0.0 for package: dotnet-sdk-2.0.0-2.0.0-1.x86_64\n--> Running transaction check\n---> Package aspnetcore-store-2.0.0.x86_64 0:2.0.0-1 will be installed\n---> Package dotnet-runtime-2.0.0.x86_64 0:2.0.0-1 will be installed\n--> Processing Dependency: openssl-libs for package: dotnet-runtime-2.0.0-2.0.0-1.x86_64\n--> Processing Dependency: dotnet-hostfxr-2.0.0 for package: dotnet-runtime-2.0.0-2.0.0-1.x86_64\n--> Running transaction check\n---> Package dotnet-hostfxr-2.0.0.x86_64 0:2.0.0-1 will be installed\n--> Processing Dependency: dotnet-host >= 2.0.0 for package: dotnet-hostfxr-2.0.0-2.0.0-1.x86_64\n---> Package dotnet-runtime-2.0.0.x86_64 0:2.0.0-1 will be installed\n--> Processing Dependency: openssl-libs for package: dotnet-runtime-2.0.0-2.0.0-1.x86_64\n--> Running transaction check\n---> Package dotnet-host.x86_64 0:2.0.0-1 will be installed\n---> Package dotnet-runtime-2.0.0.x86_64 0:2.0.0-1 will be installed\n--> Processing Dependency: openssl-libs for package: dotnet-runtime-2.0.0-2.0.0-1.x86_64\n--> Finished Dependency Resolution\nError: Package: dotnet-runtime-2.0.0-2.0.0-1.x86_64 (packages-microsoft-com-prod)\n           Requires: openssl-libs\n You could try using --skip-broken to work around the problem\n You could try running: rpm -Va --nofiles --nodigest. ",
    "Paschoali": "Like hchungi said, I just did:\nDownload .NET Core 2.0.0 runtime libraries (always check if URL is right, maybe it can be changed): \nwget https://download.microsoft.com/download/5/F/0/5F0362BD-7D0A-4A9D-9BF9-022C6B15B04D/dotnet-runtime-2.0.0-linux-x64.tar.gz\nCreate folder to .NET Core and extract your tar.gz:\nmkdir -p $HOME/dotnet && tar zxf dotnet-runtime-2.0.0-linux-x64.tar.gz -C $HOME/dotnet\nFinally, export dotnet to globally variable:\nexport PATH=$PATH:$HOME/dotnet\nJust it :). Aliyun ECS? Whatever, did you read the comments? We suggested some solutions. Sure that of them will help you.. ",
    "robyle": "I use the Aliyun ECS,The OS version is Centos 6.8. I also met this problem.The Information like this:\n[root@iZwz9bh8rvZ ~]# sudo yum install dotnet-sdk-2.0.0\nLoaded plugins: fastestmirror\nSetting up Install Process\nLoading mirror speeds from cached hostfile\nResolving Dependencies\n--> Running transaction check\n---> Package dotnet-sdk-2.0.0.x86_64 0:2.0.0-1 will be installed\n--> Processing Dependency: dotnet-runtime-2.0.0 >= 2.0.0 for package: dotnet-sdk-2.0.0-2.0.0-1.x86_64\n--> Processing Dependency: aspnetcore-store-2.0.0 >= 2.0.0 for package: dotnet-sdk-2.0.0-2.0.0-1.x86_64\n--> Running transaction check\n---> Package aspnetcore-store-2.0.0.x86_64 0:2.0.0-1 will be installed\n---> Package dotnet-runtime-2.0.0.x86_64 0:2.0.0-1 will be installed\n--> Processing Dependency: openssl-libs for package: dotnet-runtime-2.0.0-2.0.0-1.x86_64\n--> Processing Dependency: dotnet-hostfxr-2.0.0 for package: dotnet-runtime-2.0.0-2.0.0-1.x86_64\n--> Running transaction check\n---> Package dotnet-hostfxr-2.0.0.x86_64 0:2.0.0-1 will be installed\n--> Processing Dependency: dotnet-host >= 2.0.0 for package: dotnet-hostfxr-2.0.0-2.0.0-1.x86_64\n---> Package dotnet-runtime-2.0.0.x86_64 0:2.0.0-1 will be installed\n--> Processing Dependency: openssl-libs for package: dotnet-runtime-2.0.0-2.0.0-1.x86_64\n--> Running transaction check\n---> Package dotnet-host.x86_64 0:2.0.0-1 will be installed\n---> Package dotnet-runtime-2.0.0.x86_64 0:2.0.0-1 will be installed\n--> Processing Dependency: openssl-libs for package: dotnet-runtime-2.0.0-2.0.0-1.x86_64\n--> Finished Dependency Resolution\nError: Package: dotnet-runtime-2.0.0-2.0.0-1.x86_64 (packages-microsoft-com-prod)\n           Requires: openssl-libs\n You could try using --skip-broken to work around the problem\n You could try running: rpm -Va --nofiles --nodigest\n. ",
    "AlexLeung": "The old links may not work so go here https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.0-download.md and use the SDK binary link for the latest tar.gz file.. ",
    "gtechx": "I am a client programmer.\nI do not like to install any dependency myself on linux.\nsome problems are too difficulty to solve.\nsee golang.. ",
    "ddobric": "Unfortunately I didn't make this working. Using hortonworks sandbox withCentOS.\nError as already mentioned above:\n\nError: Package: dotnet-runtime-2.0.6-2.0.6-1.x86_64 (packages-microsoft-com-prod                                                   )\n           Requires: openssl-libs\nError: Package: dotnet-runtime-deps-2.1.0-rc1-2.1.0_rc1-1.x86_64 (packages-micro                                                   soft-com-prod)\n. \n",
    "sjwoodard": "The @wfurt solution worked for me, just run sudo yum install rpm-build to get started.. ",
    "juancrl": "Perfect also in my case. The folder was different, as stated :\nsudo yum install rpm-build\nwget https://github.com/dotnet/core/files/2186067/openssl-libs-ami.spec.txt\nrpmbuild --bb openssl-libs-ami.spec.txt\nsudo rpm -i /root/rpmbuild/RPMS/x86_64/openssl-libs-1.0.0-0.x86_64.rpm\nsudo yum install -y powershell\n. ",
    "ptdel": "Processing files: openssl-libs-1.0.0-0.x86_64\nProvides: openssl-libs = 1.0.0-0 openssl-libs(x86-64) = 1.0.0-0\nRequires(rpmlib): rpmlib(CompressedFileNames) <= 3.0.4-1 rpmlib(PayloadFilesHavePrefix) <= 4.0-1\nChecking for unpackaged file(s): /usr/lib/rpm/check-files /usr/src/rpm/BUILDROOT/openssl-libs-1.0.0-0.x86_64\nWrote: /usr/src/rpm/RPMS/x86_64/openssl-libs-1.0.0-0.x86_64.rpm\nExecuting(%clean): /bin/sh -e /var/tmp/rpm-tmp.13DnAm\nfor whatever reason this chose today to start hanging forever during deployments.  I don't see an actual %clean step in the rpm spec.. @wfurt doesn't appear to be any official packages via yum or rpm for openssl-libs still.  not able to see anything under /var/lib/rpm that would cause issues like .rpm.lock or .dbenv.lock. @leecow I've been grabbing it from https://go.microsoft.com/fwlink/?LinkID=835019 I'll try re-running bootstraps fetching dotnet sdk from the rpm and see if that helps.  This is for Jenkins workers I might just need to own up to making some windows nodes. @wfurt would this be to just skip openssl-libs during the dotnet runtime install?  I gave it a go, but it appears the lack of openssl-libs is a show stopper:\n```\n--> Processing Dependency: openssl-libs for package: dotnet-runtime-deps-2.2-2.2.3-1.x86_64\nPackages skipped because of dependency problems:\n    dotnet-runtime-deps-2.2-2.2.3-1.x86_64 from /dotnet-runtime-deps-2.2.3-rhel.7-x64Checking for unpackaged file(s): /usr/lib/rpm/check-files /usr/src/rpm/BUILDROOT/openssl-libs-1.0.0-0.x86_64\nI switched rpmbuild's flags from `--bb` to `--bi` thinking maybe I could skip the clean step, but its just stopping at the previous step of\nChecking for unpackaged file(s): /usr/lib/rpm/check-files /usr/src/rpm/BUILDROOT/openssl-libs-1.0.0-0.x86_64\n``` \nlooking again under the rpm directories I still don't see anything to indicate that yum or rpm have any kind of lock on anything.\nIf I'm grabbing the dotnet runtime, and sdk from packages.microsoft.com, and using this psuedo-rpm spec is there anything atypical in this setup?\n```\ncurl -SL -o openssl-libs.ami.spec.txt \"https://github.com/dotnet/core/files/2186067/openssl-libs-ami.spec.txt\"\nrpmbuild --bi openssl-libs.ami.spec.txt\nrpm -i openssl-libs-1.0.0-0.x86_64.rpm\nDOTNET_RUNTIME=https://packages.microsoft.com/rhel/7/prod/dotnet-runtime-deps-2.2.3-rhel.7-x64.rpm\ncurl -SL -o dotnet-runtime-deps-2.2.3-rhel.7-x64.rpm $DOTNET_RUNTIME\nyum -y install dotnet-runtime-deps-2.2.3-rhel.7-x64.rpm\nDOTNET=https://packages.microsoft.com/rhel/7/prod/dotnet-sdk-2.2.105-x64.rpm\ncurl -SL -o dotnet-sdk-2.2.105-x64.rpm $DOTNET\nyum -y install dotnet-sdk-2.2.105-x64.rpm\n```\nI'll admit I'm not very versed in the .NET ecosystem so maybe I'm leaving out entire dependencies or something of the sort. ",
    "jaredpar": "CC @tmat for symol publishing. @Eilon these symbol should all be public today. I dont have a good explanation for why they arent showing up. \nCC @jasonmalinowski. @tmat \n. CC @jcouv another place where we track the C# version. . No this is being discussed again. Meeting next week IIRC. Goal, at least from me, is to make this automatic.. Looks like a duplicate of https://github.com/dotnet/roslyn/issues/24137\nProblem is a combination of a long user name, a long temp path ends up causing us to spin on named pipe creation APIs. . Sounds like this is definitely a dupe of the roslyn issue then. I think we may have to implement the hueristic around pipe name limits in our code. Short term you can disable this via UseSharedCompilation = false either as an explicit build property or an environment variable.. The problem here is that you shoudl never reference System.Private.Corelib directly. It's a runtime DLL, not a compile time one. It's in some cases designed specifically to not be referencable. You need to compile against the reference libraries, like netstandard, instead. . What is the exact error and the full list of DLLs that are referenced? Should also include where you are referencing them from. \nIt's much trickier to do this on CoreCLR than Desktop.  Have to be careful to reference the correct reference DLLs. Referencing the runtime ones, or mixing the two, will lead to a lot of issues.. > Now I try to reference my those DLLs (MyCurrentClass.dll and MyFirstProject.dll) into the second project,\nMentioned this in my first response though: don't reference System.Private.Corelib. It's not supported and if it works it's an accidental success. \n . It asks you to give that reference because you're providing other runtime libraries instead of reference libraries. As I mentioned in my earlier comment:\n\nWhat is the exact error and the full list of DLLs that are referenced? Should also include where you are referencing them from.\n\nThe latter part will likely point to the runtime directory which is the source of the problem. . @AlexAtNet \n\nAccording to the preview 1 release notes, default implementation of interface members should be implemented.\n\nYes but that's referring to the runtime support for the feature. That must necessarily come first. The C# compiler support is still in progress. The target for completion is .NET Core Preview 4 at the moment. But based on scheduling it may be in Preview 5. \n. This is still hand authored and i just found out about it today. Im' trying to back fill all of the versions that I know of. \nThe pattern seemed to be using - to separate words in this file hence I followed that for csharp-language. . Working that out. . ",
    "dagood": "I'm working on getting the Core-Setup 2.0.0 symbols indexed/archived.. It seems that the problem for Microsoft.Extensions.DependencyModel.dll was that the PDB wasn't converted from Portable PDB to Windows PDB. (This is automated in CoreCLR and CoreFX, but not Core-Setup yet.) I've created a converted copy myself and submitted a new request for archiving. It's now available on symweb and the public Msft symbol server. Unassigning myself for now because I don't know about the other DLLs.. I ran the conversion tool on all Core-Setup symbol package files, which gave me these to archive: https://gist.github.com/dagood/9237921c06cc37970913bbc89ca99e4d. (Microsoft.DotNet.PlatformAbstractions, Microsoft.Extensions.DependencyModel, runtime.linux-arm.Microsoft.NETCore.App.)\nA few packages had portable PDBs in them to try to convert, but hit The PDB doesn't match debug directory record in the PE file. Another instance of that is tracked here, for CoreCLR 2.0 branch builds: https://github.com/dotnet/core-eng/issues/1771. The Core-Setup packages with the issue are runtime.linux-x64.Microsoft.NETCore.App, runtime.osx-x64.Microsoft.NETCore.App.. I'm putting discussion about runtime.linux-x64.Microsoft.NETCore.App and runtime.osx-x64.Microsoft.NETCore.App in https://github.com/dotnet/core-eng/issues/1771, since those won't help with the problem in the issue description.. Each release, I create a zip for coreclr, corefx, and core-setup. For 2.0.3, the only CoreFX package released was Microsoft.NETCore.Platforms 2.0.1, and I don't go backwards to try to accumulate everything from older 2.0 releases which are still in use. The end result for 2.0.3 is the corefx zip only has the one small Platforms symbol package in it.\nThe core-setup symbol package zip is available, just not linked on the markdown doc at the moment: https://download.microsoft.com/download/5/C/1/5C190037-632B-443D-842D-39085F02E1E8/core-setup-2.0.3-symbols.zip\n\nIs there anything in the delta that is important?\n\nOne difference is that the core-setup symbol package zip contains the nuget package structure overhead and the dll's/so's/dylib's. The symbol zip only has symbol files in a flat format. I think the same symbol files should be in both, though.. The Core-Setup packages/symbol packages (specifically Microsoft.NETCore.App) should contain everything in the shared framework, so it accumulates automatically. The issue is that right now, the doc only links to the coreclr and corefx symbol package zips, not core-setup's. The flat folder might be easier to use (I think it might make sense to link to those for that reason), but the contents that matter should be in either one.. The docs now point to all symbol archive zips that apply to a given servicing release. This can be up to three, depending on which Runtime repos are involved. (For example, Core-Setup wouldn't have anything new if CoreFX serviced packages that aren't in the shared runtime.)\nWe've talked about the symbol zips mostly in this issue, but symbol indexing to the public MSDL symbol server has also been integrated better into our release steps so it's less likely for there to be gaps in availability there.\nI think this is resolved, but it seems like my idea of resolved is different from what you have in mind.. I see, I don't think there's any outstanding work here. Closing.. I don't. /cc @leecow @SusLes (+Padmasri, but I don't know the alias)\nThe correct links should be CoreCLR, CoreFX, and Core-Setup, like 2.1.1.. I set up WSL with Ubuntu on my machine (which has never had WSL enabled before) and the Microsoft instructions worked fine: no hiccups, and no need to purge and reinstall.\nI reset WSL Ubuntu (Searched for Ubuntu in start menu => clicked App settings option => clicked Reset button) and ran the Microsoft steps again, and they worked fine again. \ud83d\ude15\nFrom my understanding of what packages-microsoft-prod.deb is doing, the steps on ntweekly.com are basically doing the same thing, but manually:\nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.asc.gpg\nsudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/\nwget -q https://packages.microsoft.com/config/ubuntu/18.04/prod.list\nsudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list\n(gpg --dearmor catches my eye, but I think (based on a few searches) it just changes the key to a binary format (\"de-armor\") to save on disk space. Also, the ntweekly.com steps don't include sudo add-apt-repository universe, but the message I get when I execute it tells me 'universe' distribution component is already enabled for all sources..)\n\n@goobering I think it would help to gather the info @mbearup listed above to get a fuller picture:\n\n\nOS (specifically if it is a derivative of Ubuntu, not stock Ubuntu). [Maybe the version listed in the Ubuntu app settings will be related?]\nOutput of dpkg -l | grep \"packages-microsoft-prod\"\n\nOutput of dpkg -L packages-microsoft-prod\n\n\nOut of curiosity, could you do a sha256sum of the deb package? I get ~54fb3782...~\n      [now bf47049a5838ac6b7f79063b8908727f2ec2a83d95d3da23333bc3c006016583 for me]\n\nTry getting the relevant logs via $ grep \"packages-microsoft-prod\" /var/log/dpkg.log. The package status is ii which means it's installed successfully, but maybe there's something in the logs?\n. @sweetpants, @betocollin, can you please gather the diag info mentioned in this thread? I'd really like to figure out how to fix this, but I can't figure out how to reproduce (or at least understand) what's going wrong.\n\n\nAlso to any future commenters, this is the list of information that I think will be useful to get any additional problems understood:\n\nOS (specifically if it is a derivative of Ubuntu, not stock Ubuntu).\nOutput of dpkg -l | grep \"packages-microsoft-prod\"\nOutput of dpkg -L packages-microsoft-prod\nA sha256sum of the deb package.\nI get bf47049a58...\nRelevant logs via $ grep \"packages-microsoft-prod\" /var/log/dpkg.log.. Thanks for the info. The instructions are specific to a distro version, you shouldn't need to manually change the package's files if you use the right one:\n\nhttps://dotnet.microsoft.com/download/linux-package-manager/ubuntu14-04/sdk-current\nhttps://dotnet.microsoft.com/download/linux-package-manager/ubuntu16-04/sdk-current\nhttps://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current\n@leecow @rowanmiller Do you think a change to the existing note would make a difference? (Adding a bit about \"ensure you selected the version of the instructions matching your distro version\"?)\n. The original problem seems to be fixed, workarounds are published on the download page, and we don't seem to have enough info to investigate any of the new problems being reported. I'm closing this issue.\n@leecow I split out https://github.com/dotnet/core/issues/2362 to track/discuss how we can help correct the Microsoft package feed after an in-place distro upgrade.\n\nIf anyone runs into this error message again, it would be really helpful if you have time to help us out by gathering this information and submitting a new issue before trying a workaround:\n\nOS (specifically if it is a derivative of Ubuntu, not stock Ubuntu).\nNote that the instructions are for the x64 CPU Architecture. You won't find packages for others like ARM64 in the package repository right now.\nOutput of dpkg -l | grep \"packages-microsoft-prod\"\nOutput of dpkg -L packages-microsoft-prod\nA sha256sum of the deb package.\nRelevant logs via $ grep \"packages-microsoft-prod\" /var/log/dpkg.log.\n\nSorry for repeating it yet again. \ud83d\ude04 Since we're unable to repro new instances of this problem, we're relying on this info to give us a clue where to look.. Interesting, looking at the gist you linked, @huanlin, you're on Ubuntu 18.04 ARM64. That would explain why the package manager isn't working for you, it only applies to x64. I didn't even think to ask about arch before, sorry about that.\nCheck out the table on https://dotnet.microsoft.com/download?initial-os=linux: package manager instructions are only available for x64, but you can see there are SDK binaries available for x64 | ARM32 | ARM64 | x64 Alpine. Those SDK binaries are the same kind of asset the gist describes using. (Although the download page recommends different steps that don't require sudo to do the install.). I'm not sure if we know the exact action yet--here's the things I see to investigate:\n@leecow, maybe you have ideas related to this:\n\nLikely something that we can add to be of help though.\n\n@mbearup also mentioned that we might be able to programmatically determine the feed, which I think would address the issue if doable. (Look further into this?)\n\nI know that for the packages.microsoft.com repos the folders are structured so that you can programmatically determine the correct path. For instance the following works with Ubuntu, would need some refinement to work on more distros.\nshell\n$ distro=$(cat /etc/lsb-release  | grep \"DISTRIB_ID\" | cut -d '=' -f 2)\n$ version=$(cat /etc/lsb-release  | grep \"DISTRIB_RELEASE\" | cut -d '=' -f 2)\n$ wget https://packages.microsoft.com/config/${distro,,}/${version}/prod.list\n\nMaybe there's a better place to track this? Not sure where Microsoft repository installer package stuff happens.. Impact, I think:\n Unable to install a new .NET Core package after a distro upgrade.\n Unable to get patch updates for installed .NET Core packages after a distro upgrade.\nHow I understand it, this is the easiest way to hit Unable to locate package dotnet-sdk-2.2 via distro upgrade:\n\nOn Ubuntu 16.04, install .NET Core 2.1.\nUpgrade distro in place to Ubuntu 18.04.\nTry to install .NET Core 2.2. (sudo apt-get install dotnet-sdk-2.2)\n\nYou wouldn't be able to get patches after (2), I think, because your package manager only knows about the 16.04 feed which doesn't provide 18.04 packages.\nI believe the sudo dpkg --purge packages-microsoft-prod && sudo dpkg -i packages-microsoft-prod.deb workaround on the download page right now fixes this problem. (I wonder if people might be missing that you have to also run sudo apt-get update before trying the install command again? At least I think you do.). I think we'd need to specifically support Kali to make this work by default. The version of libicu available on certain distros varies a lot, and at least in the kalilinux/kali-linux-docker image, Kali has libicu60 and libicu63 available in its default repos.\nSee dotnet-runtime-deps-debian_config_debian.9-x64.json vs. dotnet-runtime-deps-debian_config_ubuntu.18.04-x64.json for another example version difference. (57 vs 60.). Issue moved to dotnet/core-setup #5320 via ZenHub\n. This is interesting. For api-ms-win-crt-runtime-l1-1-0.dll, this issue is known to be missing prereqs: https://github.com/dotnet/core-setup/issues/4388. I can't find any record of api-ms-win-crt-runtime-|1-1-1.dll.\n@Kirbybu1 can you please:\n Check if you made a typo, if you typed this up manually? The | rather than l makes me think that's possible.\n Make sure you have the updates listed in the note at https://docs.microsoft.com/en-us/dotnet/core/windows-prerequisites?tabs=netcore2x#net-core-dependencies ?. Thanks! That is the 1-1-0 version with the known fix. I'm going to go ahead and close this issue because the cause is well-known, but please do let me know if following those instructions doesn't work.\nTo pass along a tip, pressing Control-C while a dialog box is focused should copy all the text inside it. Then you can paste it somewhere, rather than typing it up manually. It's really too bad Windows doesn't have a more obvious way to do this. \ud83d\ude04 . @wfurt, it sounds like this is specific to your spec file in https://github.com/dotnet/core/issues/930#issuecomment-404296184?. ",
    "jasonmalinowski": "Indeed, those should be archived. We'll figure out what's up but as a warning we're a bit slammed right now so might be a day or two.. ",
    "daningalla": "Assembly explorer shows that the Task type is defined in System.Private.CoreLib and not System.Threading.Tasks. Does the code you are trying to compile have the 'using System.Threading.Tasks' directive?. ",
    "vijayshinva": "Thanks @daningalla it turned out to be an issue with the using directive. One of my base classes was missing the directive and that was causing the compile issue.. ",
    "Idanby": "apparently, MARS in SqlClient caused the memory leak. In my connection string MultipleActiveResultSets was set to true.I still don't know why this is affected just in Ububntu and not Windows too but when I set it to false, memory back to be stabled.. How your connection string looks like? With MultipleActiveResultSets = True also?. OK, so no MultipleActiveResultSets enabled.\nDo you want to create a dump file to investigate? . Yes.\nCan you connect to server via ssh right?\nIf so, you need to install lldb and execute few commands to get the dump.\nPay attention that while you connected to lldb your service will be freeze.\nhttp://blogs.microsoft.co.il/sasha/2017/02/26/analyzing-a-net-core-core-dump-on-linux/)\nhttps://blogs.msdn.microsoft.com/wushuai/2017/03/13/debug-asp-net-core-via-lldb-on-ubuntu/\nps -ejH //Find you process id\nsudo lldb-3.6 open lldb\nprocess attach -p xxx(your processId)\nplugin load /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libsosplugin.so\nsetclrpath /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5\nNow type any SOS command,. My pleasure.\n. ",
    "Tiaoyu": "in dotnet-sdk-2.1.4 or 2.1.200\nI meet the problem too\uff0cMemory Leak in Centos7.4\uff0cbut it's very super stable in Windows!\uff08T . T\uff09\nand it looks good use the Mono to run .exe \nCould you please tell me how to get the dump like upstairs ? thanku!!!(\u0e51\u2022\u1d17\u2022\u0e51). just like this, no MultipleActiveResultSets\nreturn string.Format(\"server = {0}; port = {1}; user id = {2}; password = {3}; database = {4}; charset=utf8\",Database.Ip, Database.Port, Database.User, Database.Pwd, Database.Name);. yes, do you know how to get the dump file in centos? Any help would be greatly appreciated.. \uff08T . T\uff09i donot know how to descript  my gratitude ...it's very kind of you.\nI'll try right now. thank u!!!!!!!!o(\u2229_\u2229)o . ",
    "caokennedy": "Solved by updating from NuGet 4.0 to NuGet 4.6. ",
    "kostyamy": "I had similar issue when IIS AppPool allows 32 bit apps on 2012 x64 server. I saw a bunch of URL Redirect fails in system event log while trying to access my site.\nas far as i recall (at least in mine case) URL rewrite was 32 bit and for some reason it didn't like it i'm guess. so oddly enough disabling 32bits support in the app pool fixed it.\nbut i'm still seeing issues with MVC + CORS. it simply doesn't work even so static files are ok. all clean. no filters of any kind. looks like my original post is missing content of the web.config\nbut it's actually a default one produced by the dotnet publish -c  command\nso only AspDotNetModule entry and that's it\n. ",
    "maythamfahmi": "so is there any solution?. ",
    "PoppyPham": "@tkggusraqk you save my day, the drawback of Microsoft is when we face common issue, many post on internet related to many version of .NET, products, and choose the right one suit with your problems is too hard. . ",
    "asandoval4wall": "I've come to the conclusion that I've misunderstood how I should have approached this problem. I assume the exception I get is by design. You get limited ability to do IO operations for a reason. (may not be a good enough reason for me but it's a reason nonetheless).\nSee https://docs.microsoft.com/en-us/windows/uwp/files/file-access-permissions for doing limited IO operations with UWPjs projects, be it someone else having this issue.\nIn short you can actually do IO based things via winjs which is actually nicer than what I was doing.. ",
    "hervit0": "Hi there,\nI've encountered the same issue, and indeed, having special characters (\u00e9 in my case) in the path of the fsproj is lead to this problem.\nI'm running under .NET Core 2.1.4.. ",
    "lilith": "They are not for Ubuntu.\nOn Oct 5, 2017 7:32 PM, \"Peter Marcu\" notifications@github.com wrote:\n\n@nathanaeljones https://github.com/nathanaeljones are the images on\ndockerhub for .NET Core 2.0 no help?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/947#issuecomment-334635621, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAGln2hJffrRsBZ1wobyeQgn0U4PtHm5ks5spYMagaJpZM4POkII\n.\n. \n",
    "foo-baar": "@davidfowl hey, using vscode: 'Start Debugging' command, and stopped the same way: Ctrl + C o 'Stop Debugging'. @hugobritobh I don't think your understood the issues: Port has not been released by Kestrel, irrespective of whichever one you use.. @wfurt: I try with lsof -i:5000 it shows occupied by dotnet, so I kill it manually and then continue.\n\n. @wfurt : Welcome man, I have tested most of the basic features rest all happens to work fine, its my first time with core on mac, will check in case I face anything else.\n@davidfowl : Hey, I have been launching it via vscode (not manually) However running kestrel server has no stop command, besides general Ctrl + C.\nOn a separate note I have posted it to kestrel team however I believe since its not a mainstream component for them I doubt they'll focus on it much.\nThanks \u270c\ufe0f. @omajid What is documented there makes sense, but I havn't had a chance to loot into the dohet processes hence can't comment anything on that.. @Petermarcu I think we can close the issue, though it continue to exists today workaround is how to execute the code, i.e doing dotnet clean\\build\\run form terminal just runs fine, but if someone tries from Vs Code, then it runs into these issues.\nThanks anyhow \u270c\ufe0f. @gregg-miskelly Well the thing is process never got killed by any vscode commands, I did it manually every time from terminal.. Hello @Petermarcu ,\nI sorted most of the issues, this one gets sorted when you rather use dotnet core commands from terminal (instead of executing form IDE\\vscode).\nAs the dotnet command points to the right location of libraries, so dotnet clean, build, run works fine.\nWe can close this issue.\nThanks much,\n\u270c\ufe0f. ",
    "hugobritobh": "It has happened to me and what I did was change the port. Try using the command\nc#\n        WebHost.CreateDefaultBuilder(args)\n                .UseKestrel()\n                .UseContentRoot(Directory.GetCurrentDirectory())\n                .UseUrls(\"http://*:5001\")\n                .UseStartup<Startup>()\n                .Build();. ",
    "MatheusGoncalvs": "Just close it the vscode and open it again.. ",
    "davisgreg1": "This same thing happened to me. I went into inspect mode at http://localhost:5000 and went into the Application tab, and clicked Clear Site Data at the bottom. Hope this works for you.. ",
    "johnmelodyme": "So silly that I am, I commanded \"killall\" in my ssh terminal , and now I have to reset all. The issues raised here kind of helpful tho... > I had the same issue on a dotnet generate web project recently. But I can fix the issue by editing Properties\\launchSettings.json to modify the applicationUrl in your app config.\n\nFrom this\n\"applicationUrl\": \"https://localhost:5001;http://localhost:5000\",\nto this\n\"applicationUrl\": \"http://localhost:5000\",\nI suspect it could be an issue of the dotnet boilerplate project \"ASP.NET Core Web API\".\n\nStill can't\n{\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\n  \"iisSettings\": {\n    \"windowsAuthentication\": false, \n    \"anonymousAuthentication\": true, \n    \"iisExpress\": {\n      \"applicationUrl\": \"http://localhost:5001\",\n      \"sslPort\": 5001\n    }\n  },\n  \"profiles\": {\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"launchBrowser\": true,\n      \"launchUrl\": \"api/values\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"johnTestBO\": {\n      \"commandName\": \"Project\",\n      \"launchBrowser\": true,\n      \"launchUrl\": \"api/values\",\n      \"applicationUrl\": \"https://localhost:5001\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}. > Does it happen only when running in visual studio @johnmelodyme? Check that you don't have another copy running in background.\nYeap I use visual studio. And this happen. \nusually I use Pycharm. (any other than python , I really clueless of it) \nNo sir, there's nothing running in the background. . @karelz @wfurt @radical @shanselman \nFirst when I deploy the API to the localhost:5001, all work fine until I put everything together in the server. I did dotnet publish the project. before this I sudo scp - r the (all files) relevant project to the server's /home . dotnet build && dotnet run, and all work fine. I  came to mind that that wasn't a good idea for uploading all files without compounding it. Then I did only upload the 'Publish' folder which had already a 'compound' . As soon as I dotnet build && dotnet run it in my Visual prompted this error.\nSources: \nFrom the server(using Termius(no longer using puTTY)-Ubuntu):\n\nand also prompted  \n\n\"MSBUILD : error MSB1003: Specify a project or solution file. The current working directory does not contain a project or solution file.\"\n\nFrom My Visual Code Studio:\n\nI clicked Debug anyway\nthen this prompt came.\n\nThank you.\n. > @karelz @wfurt @radical @shanselman\n\nFirst when I deploy the API to the localhost:5001, all work fine until I put everything together in the server. I did dotnet publish the project. before this I sudo scp - r the (all files) relevant project to the server's /home . dotnet build && dotnet run, and all work fine. I came to mind that that wasn't a good idea for uploading all files without compounding it. Then I did only upload the 'Publish' folder which had already a 'compound' . As soon as I dotnet build && dotnet run it in my Visual prompted this error.\nSources:\nFrom the server(using Termius(no longer using puTTY)-Ubuntu):\n\nand also prompted\n\n\"MSBUILD : error MSB1003: Specify a project or solution file. The current working directory does not contain a project or solution file.\"\n\nFrom My Visual Code Studio:\n\nI clicked Debug anyway\nthen this prompt came.\n\nThank you.\n\nI'm sorry my bad. I didn't see there's something after the } tag.  Sorry, (time to learn C#; first time using tho) Now the problem is just it keep listening to localhost instead of server, plus i am not familiar with yet. any idea, sir?\n\n. @tmds thanks for the tutorial sir. . \nIt worked sir, but my supervisor, accidentally did something to my script. \n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nnamespace johnTestBO.Controllers{\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class ValuesController : ControllerBase\n    {\n        // GET api/values\n        [HttpGet]\n        public ActionResult> Get()\n        {\n            Console.WriteLine(\"asdf\");\n            return new string[] { \"value1\", \"value2\" };\n        }\n    // GET api/values/5\n    [HttpGet(\"{id}\")]\n    public ActionResult<string> Get(int id)\n    {\n        return \"value\";\n    }\n\n    // POST api/values\n    [HttpPost]\n    public void Post([FromBody] string value)\n    {\n    }\n\n    // PUT api/values/5\n    [HttpPut(\"{id}\")]\n    public void Put(int id, [FromBody] string value)\n    {\n    }\n\n    // DELETE api/values/5\n    [HttpDelete(\"{id}\")]\n    public void Delete(int id)\n    {\n    }\n}\n\n}\n```\n''According to visual i got 136 error in just this code. OMG\"\nand \n```using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nnamespace johnTestBO\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateWebHostBuilder(args).Build().Run();\n        }\n    public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n        WebHost.CreateDefaultBuilder(args)\n        //Open to loop back localhost\n        //  .UseKestrel(options =>\n        // {\n        //    options.Listen(IPAddress.Loopback, 5001);       \n        // })\n            .UseStartup<Startup>();\n}\n\n}\n```. Sure.. ",
    "pandazzurro": "Sorry, dotnet-sdk-2.0.0 must not install on Raspberry.\n\"dotnet publish -r linux-arm\" for Linux running on Raspberry Pi. @TomasHubelbauer \nYou must deploy only DLL and start program or website.\nYou must pusblish your project in developer environment with \"dotnet publish -r linux-arm\", then copy on Raspberry. ",
    "TomasHubelbauer": "@pandazzurro Can you please reopen this? I am getting the same issue.\nWhat do you mean must not install on Raspberry? Is .NET Core 2 not supported on the platform? This suggests it should be: https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md\nIt explicitly mentions 2.0 and Raspberry Pi in one document.. @pandazzurro But why? The guide leads me to believe it should be possible to set up a dev env on a Raspberry Pi. Is it out of date? Raspian should be just like Debian and Raspberry Pi 3 does have armv7 instructions required by the JIT, so what the problem?. @Petermarcu yeah reading the guide again I seem to have misunderstood it the first few times I skimmed through it. Not the keywords such as supported developer configuration make more sense. Shame on me, should have read it twice, thank you and @pandazzurro!. @Petermancu that's exciting, hopefully it will become viable at some point. :-). ",
    "robert-j-engdahl": "This could be caused by my test projects being 4.6.1 and my production being 4.6.  \nIt did, however, not help to\nInstall-Package NETStandard.Library -Version 2.0.0\n\nThere might be issues that concern the backwards compatibility of 4.6.1 that I am not aware of.. ",
    "a-vishar": "Running into the same issue on 4.6.2.. ",
    "robertbaker": "You will need to install the VS 2017 (MSBuild 2017) on your team city server. Additionally 4.6.0 won't work, you need at least 4.6.2.\nhttps://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=15\nAdditionally, I would recommend changing your nuget's to package reference if you haven't already. Look for packages that were installed using an older .net framework version, you will need to reinstall those to ensure you get the correct versions.\nPlease close this issue as it's not related to .net/standard/core. This is not an issue with core.\nTo fix your issue, open the visual studio installer, click modify. Under workloads, scroll all the way to the bottom, under Other Toolsets you will see .NET Core cross-platform development. Check the box and click the modify button. See image: https://imgur.com/a/QPfFA. ",
    "SilverDragon135": "Both file have same SHA256 - CC490D28F55B67185688FF51DC6274AEA6A582E47A07E9D084437E940C69F7A0.\nSo it is the same file. \nBut I don't know, what s means. Sorry. . ",
    "ststeiger": "Strange. \nInstalled win-gs-x64, and it didn't show in visual studio. \ninstalled win-x64, and it showed in visual studio.\nMaybe it was the restart.. OK, I see the why - thanks for the response. \nI think it's superfluous to say this, but it would be more professional to use the refer(r)er for that purpose. . ",
    "papanito": "Downgrade of libcurl solves the problem for me as well. Thanks to https://github.com/dotnet/corefx/issues/8951#issuecomment-299793545. ",
    "leedavi": "I have the same problem with different code base.. ",
    "softeering": "FYI, I opened the same issue in dotnet/corefx repository:\nhttps://github.com/dotnet/corefx/issues/24229\n. FYI, I opened the same issue in dotnet/corefx repository:\nhttps://github.com/dotnet/corefx/issues/24229\n. ",
    "rahulmistry25425": "also posted same issue in Identity server\nHere : https://github.com/IdentityServer/IdentityServer4/issues/1531. i got my solutions\nawait HttpContext.SignOutAsync(IdentityConstants.ApplicationScheme);. ",
    "BrendanGrant": "After my second post I did eventually find that OmniSharp ticket.\nAt the very least, the owners of GetVsDbg.sh & Visual Studio need to have a little chat and allow one to tell the other \"No compatible debugger packages could be located.\" Better yet, also adding \"In the mean time, please try debugging against a supported platform, here is a list...\"\nIn the end, I deployed my app to the Ubuntu VM and was able to debug it and solve my issues there, which then unblocked my initial problem on the Pi... however there must be a better experience in this, as clearly I am not the only person to spend quite a bit of time trying to figure out why something (which currently isn't supported (which is ok)) doesn't work.. ",
    "IvanFarkas": "How about ./getvsdbgshbeta -v latest -r linux-arm -l ~/vsdbg?\nIt's from https://vsdebugger.azureedge.net/vsdbg-15-1-11120-1/vsdbg-linux-arm.zip.\nI could not get it going on arm64 with .NET Core 2.0.\n. I need to be able to run and debug .NET Core 2.1 C# console app on arm64v8.\nDragonBoard 820c is a powerful single board computer to be used as an Azure IoT Edge hub.\nWe need to be able to run and debug .NET Core 2.1 C# console app on arm64v8 running in a Docker container.\nLet's hope that this will be achieved by .NET Core 2.1 RTM!. I opened ticket #1337. How Microsoft expect .NET Core 2.1 to be popular for any IoT app if it does not run on arm64v8 architecture?\nThe success of Azure IoT Edge depends on this!\nWe MUST be able to Run and Remote Debug an Azure IoT Edge module that is a .NET Core 2.1 C# Docker app on an arm64v8 architecture like the DragonBoard 410c or DragonBoard 820c.\nIs this the next Microsoft Bob?. Have you tried it or just guessing?\nI did. It does NOT work.\nI am waiting on your blog post about running and debugging .NET Core 2.1 Alpine, Debian, Ubuntu Linux arm64v8 on a DragonBoard 410c or similar SBCs :-). I think I was VERY descriptive Gregg!\nIf you would like to provide any constructive feedback as a distinguished member of the Microsoft elite, who do not assimilate with commoners like me, here is your list:\n\nWrite a simple .NET Core 2.1 console app that counts up and the output is logged into a file and also visible on the console.\nPut the app into a Docker container.\nRun the app in Docker container on your PC.\nDebug the app in Docker container on your PC.\nDeploy the app onto an amd64v8 architecture like the DragonBoard 410c (DB410c), DragonBoard 820c (DB820c) or any other amd64v8 SBC (single board computer).\nRun the app in Docker container on the amd64v8 SBC.\nRemote Debug the app in Docker container on the amd64v8 SBC.\n\nThank you very much for your constructive help in advance Gregg!. No. It's a product.. At the .NET Core Runtime & Host Setup Repo GitHub page we find all supported runtimes.\nMostly x64 that is more precisely the amd64 architecture.\nOnly the following arm architectures are supported\n\nWindows (arm32)\nWindows (arm64)\nLinux (armhf) or (ARM hard float) refers to the ARMv7, used by Raspberry PI (32 bit Raspbian), that is for makers only and not for production use due to quality and scarce availability for large-scale production.\n\nIt seems to me that the only arm64v8 option is Windows IoT.\nMicrosoft does not have official plans yet to support arm64v8 Linux.\nThat is said since the DragonBoard 820c running the Linaro supported Debian Stretch or Debian Buster would make a killer Azure IoT Edge device!. I was able to run a .NET Core 2.0 console app cross-compiled for arm Linux using the armhf .NET Core 2.0 runtime. The remote debugger does not work.\nMicrosoft should have an official supported arm64v8 .NET Core 2.1 runtime.\nMicrosoft should provide a Docker image for arm64v8 Linux OSes (Stretch, Buster, Xenial, Bionic)\nMicrosoft also should provide means to remote debug code on the arm64v8 .NET Core 2.1 runtime.\nI think it's reasonable given the fact that Microsoft wants Azure IoT Edge to succeed and does not want another Microsoft Bob, or dismal Windows Mobile.. No!\nThe Raspberry Foundation gets reject chips free from manufacturers. It's armv7.\nModern SBCs use arm64v8.\nI am using 410c and soon 820c.. @richlander That is great. I can't wait for the arm64v8.\nThx for the Alpine Docker info. I removed it from my earlier post.\nI will be a speaker at the Orlando CodeCamp this Saturday.\nDonovan Brown, Principal DevOps Manager on Microsoft's Cloud Developer Advocacy team, will be there too. He is the Key speaker.\nMy topic is Apply Azure IoT Edge to bring disruptive innovation to healthcare\nI wanted to have a nice demo of running Azure IoT Edge on the DB410c, but I had to scratch that since remote debugger does not work.\nIt would have been a cool demo to remote debug an Azure IoT Edge module, that is a Docker container, over SSH.. @Petermarcu As a person, I love Raspberry Pi.\nI have 1 Raspberry Pi 2, 2 Raspberry Pi 3, and several Raspberry Pi Zeros and a Compute Module 3.\nAs the CEO and Founder of TeleCuris, LLC, a young startup, we have to maintain certain standards of our image.\nUnfortunately, Raspberry Pi 3 and the Compute Module 3 does not meet those standards and as such we are not able to use them for even a demo.. @richlander As I mentioned above it seems that Microsoft does not have an official arm64v8 .NET Core 2.1 runtime and that is tragic!\nThe community needs to push for that.\nI am currently working on mobilizing the community to ask for correcting this massive oversite.. @richlander I appreciate the help, Richard.\nI'll reach out to you to understand each other's needs better and help the community.. I updated my  IvanFarkas/dotnetcore-arm-swig GitHub repo with the help I received from @richlander and @Petermarcu at Microsoft.\nIt works great now using the new arm64 .NET Core 2.1 runtime.. ",
    "eriawan": "My bad, I think this is not a correct place for this issue. I'll recreate this on dotnet/standard.. I close this, because I have created the issue on dotnet/standard#497. @leecow \nThis guy trolls in the past (#1490 and #1500 ) and also almost everywhere (on other repos such as this GoogleTrends/data/issues/23). \nCould we close this issue and ban/block him?. ",
    "erralb": "Here you go :\n```\n$ dotnet --info\n.NET Command Line Tools (2.0.0)\nProduct Information:\n Version:            2.0.0\n Commit SHA-1 hash:  cdcd1928c9\nRuntime Environment:\n OS Name:     debian\n OS Version:\n OS Platform: Linux\n RID:         debian-x64\n Base Path:   /usr/share/dotnet/sdk/2.0.0/\nMicrosoft .NET Core Shared Framework Host\nVersion  : 2.0.0\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\n```\nThe strace also returns a segmentation fault :\n```\n$ strace -f -o logfile dotnet new console -o hwapp\nGetting ready...\n[1]    1297 segmentation fault  strace -f -o logfile dotnet new console -o hwapp\n```. Hi, any news on this ? Anything else I can do to help debug?. export DOTNET_CLI_TELEMETRY_OPTOUT=1\nremoved the segmentation fault for me. should I close the issue or you want it left open until a real fix has been issued?. @Petermarcu you're welcome!\n@omajid For info my version of libcurl is : libcurl 7.55.1\n. @steveharter /etc/apt/sources.list.d/dotnetdev.list file : \ndeb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-stretch-prod stretch main\n. @steveharter nope I haven't, don't know how actually.... @steveharter is that what you wanted ?\n```\n$ gdb --args dotnet new console\nGNU gdb (Debian 7.12-6) 7.12.0.20161007-git\nCopyright (C) 2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\nhttp://www.gnu.org/software/gdb/bugs/.\nFind the GDB manual and other documentation resources online at:\nhttp://www.gnu.org/software/gdb/documentation/.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from dotnet...(no debugging symbols found)...done.\n(gdb) run\nStarting program: /usr/bin/dotnet new console\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n[New Thread 0x7f0ea6576700 (LWP 11703)]\n[New Thread 0x7f0e9ffff700 (LWP 11704)]\n[New Thread 0x7f0ea5d75700 (LWP 11705)]\n[New Thread 0x7f0ea5574700 (LWP 11706)]\n[New Thread 0x7f0ea4d73700 (LWP 11707)]\n[New Thread 0x7f0e9f7fe700 (LWP 11708)]\n[New Thread 0x7f0e2e140700 (LWP 11709)]\n[Thread 0x7f0e2e140700 (LWP 11709) exited]\n[New Thread 0x7f0e2e140700 (LWP 11710)]\n[New Thread 0x7f0ea41b9700 (LWP 11711)]\n[New Thread 0x7f0e2d93f700 (LWP 11712)]\n[New Thread 0x7f0e2d13e700 (LWP 11713)]\n[New Thread 0x7f0ea4178700 (LWP 11714)]\n[New Thread 0x7f0e07ffd700 (LWP 11715)]\n[New Thread 0x7f0e077fc700 (LWP 11716)]\n[New Thread 0x7f0deed59700 (LWP 11717)]\n[New Thread 0x7f0dee558700 (LWP 11718)]\n[Thread 0x7f0dee558700 (LWP 11718) exited]\nThread 16 \"dotnet\" received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7f0deed59700 (LWP 11717)]\n0x00007f0e2c67dd6d in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0\n(gdb) backtrace\n0  0x00007f0e2c67dd6d in ?? ()\nfrom /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0\n1  0x00007f0e2c678c8b in X509_verify_cert ()\nfrom /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0\n2  0x00007f0e31168e06 in ?? ()\n3  0x00007f0deed57e50 in ?? ()\n4  0x6c00fa377b77ae7b in ?? ()\n5  0x0000000007bcbd60 in ?? ()\n6  0x00007f0ea83f5488 in ?? ()\nfrom /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.0/libcoreclr.so\n7  0x00007f0deed58688 in ?? ()\n8  0x00007f0e312a2580 in ?? ()\n9  0x00007f0e312a2580 in ?? ()\n10 0x00007f0deed57e50 in ?? ()\n11 0x00007f0e31168e06 in ?? ()\n12 0x00007f0deed57ee0 in ?? ()\n13 0x00007f0e312a2580 in ?? ()\n14 0x00007f0e083b6760 in ?? ()\n15 0x0000000000000001 in ?? ()\n16 0x00007f0e080de958 in ?? ()\n17 0x00007f0e08634f90 in ?? ()\n18 0x00007f0e08634f20 in ?? ()\n19 0x00007f0e083b6760 in ?? ()\n---Type  to continue, or q  to quit---\n20 0x00007f0de40ff270 in ?? ()\n21 0x00007f0deed57f50 in ?? ()\n22 0x00007f0e30f7ce57 in ?? ()\n23 0x00007f0deed57ef0 in ?? ()\n24 0x00007f0e08634f20 in ?? ()\n25 0x00007f0e080de958 in ?? ()\n26 0x0000000000000000 in ?? ()\n. @steveharter\n$ openssl version\nOpenSSL 1.1.0f  25 May 2017\n$ ls /usr/lib/x86_64-linux-gnu/libssl.so.*\n/usr/lib/x86_64-linux-gnu/libssl.so.1.0.0\n/usr/lib/x86_64-linux-gnu/libssl.so.1.0.2\n/usr/lib/x86_64-linux-gnu/libssl.so.1.1\n```. @steveharter removing ssl1.0.0 fixed it for me, thanks for the support!. ",
    "icedfish": "the same issue @Mac\nthe official guide says: \nbash\ndotnet new console -o hwapp\ncd hwapp\nI checked the dotnet help (dotnet core sdk 2.0)\n```\n~ dotnet help new\n.NET Initializer\nUsage: dotnet new [options]\nOptions:\n  -h|--help             Show help information\n  -l|--lang   Language of project [C#|F#]\n  -t|--type       Type of project\n\u279c  source mkdir dotnet\n```\nall the guide shuold be update to : \nbash\nmkdir -p hwapp\ncd hwapp\ndotnet new -t console. @omajid sorry , I checked my system, find that I used to install the old 1.0RC SDK before install the new 2.0 sdk.\nafter uninstall the old version by the cli script\nand reinstalled the sdk 2.0, It's ok now.\nBut it's really puzzle, the the 2.0 sdk not remove the old sdk automaticlly or even notify me the incompact...... ",
    "JoeKays": "I have multiple apps that depend on version 1.0.0 and others that depend on 1.0.2.\nWhat do I do?. ",
    "SurferJeffAtGoogle": "Here's the sdk info on the new machine after downloading and installing:\n```ps1\nPS C:\\Program Files\\dotnet\\sdk> ls\nDirectory: C:\\Program Files\\dotnet\\sdk\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----        9/19/2017   4:43 PM                1.0.1\nd-----        9/19/2017   4:51 PM                1.0.4\nPS C:\\Program Files\\dotnet\\sdk> dotnet --version\n1.0.4\nPS C:\\Program Files\\dotnet\\sdk> dotnet --info\n.NET Command Line Tools (1.0.4)\nProduct Information:\n Version:            1.0.4\n Commit SHA-1 hash:  af1e6684fd\nRuntime Environment:\n OS Name:     Windows\n OS Version:  6.1.7601\n OS Platform: Windows\n RID:         win7-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.4\nPS C:\\Program Files\\dotnet\\sdk>\n. Fortunately, sdk version 2.0.0 also works with my project, but I'm still confused about all these version numbers.. Got it.  I thought global.json served the purpose of selecting the target runtime, but in fact it's this line in the project file:xml\n   netcoreapp1.1\n ```. ",
    "xLabel": "@Petermarcu \nThank you for your reply .\n: )\nwhat does \"technical blocker\" mean ?  for example ?. ",
    "huting0211": "What's the difference between bug and technical blocker?. ",
    "netspark": "I am using microsoft/aspnetcore-build:1.0-2.0 image, it shows up dotnet sdk as 2.0.2, and it fails to restore private protected feed using username/clearpasswordtext keys inside nuget.config in solution dir. \nIs there any plan to fix this? . ",
    "brooksyott": "The issue appears to come up when I add newtonsoft 10.0.3. It isn't present if newtonsoft is not there.. Any idea what could be wrong?\nThis is very simple, so it must be something I'm doing wrong.\nA simple .netcoreapp HelloWorld that is fine until I add Newtonsoft.Json 10.0.3.. ",
    "laibulle": "I have the same issue \nUnhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Console, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\nwhen I run dotnet ef migrations add InitialCreate\nFor my part I am using OSX High Sierra and dot net core 2.0. ",
    "sbomer": "@mig42, thank you for the write-up and the detailed repro info. I haven't been able to reproduce this yet. Here are the sources I'm using: tts2.zip.\nRepro steps I'm trying:\n- dotnet publish -r <RID>\n- ./bin/Debug/netcoreapp2.0/<RID>/tts2\nCould you let me know whether you see the issue with these sources?. @Petermarcu @richlander, what's the process here? May I go ahead and merge this?. Perfect, thank you!. Yup!. @karelz yes, please move it to mono/linker. Thank you!. Thanks for the suggestion @beppe9000! It's definitely an alternative for folks who don't want to edit the NuGet.config. I'd prefer to keep recommending adding the source to NuGet.config for now, since passing it on the command line will cause future project restores to fail if the package is somehow removed from the cache (if I'm not mistaken). These instructions will need to be updated soon anyway as the linker experience is going to change a bit.\nFor static linking... maybe see if https://github.com/dotnet/corert meets your needs. You may also be interested in the design at https://github.com/dotnet/designs/pull/52 for single-file distribution (/cc @swaroop-sridhar).\n. Good idea. This would be the link.. ",
    "mig42": "Thank you for your quick answer @sbomer! I can't reproduce the issue with your attached sources \ud83d\ude15 There might be something else I'm doing in my project that causes the issue... Let me build a sample project to reproduce it (I can't share the whole project with you right now \ud83d\ude1e) and I'll attach it here!. ",
    "ASalihov": "Why 1.x releases after 2.0?? . ",
    "spidduz": "I added the following line into my csproj for the api:\n<PropertyGroup>\n   <PublishWithAspNetCoreTargetManifest>false</PublishWithAspNetCoreTargetManifest></PropertyGroup>\nnow using microsoft/dotnet:2.0.0-sdk and microsoft/dotnet:2.0.0-runtime all works!. ",
    "tanmaymandal": "I am getting same issue with configuration :(. ",
    "borisdj": "I wasn't sure where it belongs.\nThere no one replied so I thought it was wrong place, but guess it wasn't.\nI will move the question back there:\naspnet/home repository issues/2140. ",
    "maroallegro": "@Petermarcu I do not know if I understand correctly... \nMy question here is: Why in .Net Core when I will start for instance 3 apps (with Start mode) i cannot kill only one of them. Isn't it a bug ? For comparison, when exactly the same process will be made in .Net 4.6 everything works as expected (only one app is closing).\nSolution from stackoverflow is only workaround because changing mode of one app to \"start without debugging\" blocks debugging possibility of one app.. @gregg-miskelly Thanks for your help Greg !. @wfurt \n\nHow exactly do you execute this? \n\nOn linux\ndotnet <scriptName.dll>\n\nI don't see new window when executed from simple app running in xterm. \n\nAnd that is the problem :) Because that script opens new console window when runned on Windows System only.\n\nIf you still think it is bug\n\nI don't know, I just see the difference how program acts on Linux and Windows. I would like to open new window functionality on both systems. On linux I managed to open new console by running new instance of xterm but it seems as workaround for me if we have flag CreateNoWindow = false.\n@Petermarcu exactly as you said, \n\n@maroallegro is wanting to create a new window so setting it to false. And it works that way on Windows.\n\nbut on linux does not. \n. ",
    "philippgille": "\nTried to make new apps using commands, and the nuget package restore failed.\n\nWhich dotnet CLI commands have you tried?\nI'm running Windows 10 and have .NET Core SDK 2.0 installed and for me the following works fine (in PowerShell command line window):\n```powershell\n\ndotnet --version\n2.0.0\nmkdir hwapp; cd hwapp\n... snip\ndotnet new console\nThe template \"Console Application\" was created successfully.\n\nProcessing post-creation actions...\n... snip\n\ndotnet run\nHello World!\n``\nWhere thedotnet new consolealready contains adotnet restore` (since .NET Core 2.0).. The RID catalog contains:\nOS X RIDs\n\nosx-x64 (.NET Core 2.0 or later versions)\nosx.10.10-x64\nosx.10.11-x64\nosx.10.12-x64 (.NET Core 1.1 or later versions)\n\n\nIt doesn't say anywhere that from that list, OSX 10.12 is currently the only supported OSX version for .NET Core 2.0. In contrary, another paragraph in the RID catalog says that the new portable RIDs make it easier to support multiple target operating systems, so of course you think that all OSX versions in that list are supported.\nA link to dotnet/core/blob/master/release-notes/2.0/2.0-supported-os would be extremely helpful as well!. Thanks a lot!. ",
    "gkingston": "I'm having the same issue.  I can't build from command line or inside VS with just project defaults.  I've repaired both the 2.0.0 sdk and VS 2017 with no luck.  I am on latest 15.3.5 of VS 2017.  This is from just the hello world new console app(dotnet new console -o hwapp). \n\n. Says the Restore completed, then the dotnet run fails in the same way though\n\nI've also done a full uninstall of the sdk 2 and reinstall vs just a repair. Thanks, deleting the C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder (and deleting obj/bin folders of existing projects) fixed it for me.. ",
    "Darker": "Thank you, I misread OS version number, I thought it's 2008. Anyways, I've updated to Windows Server 2012 RC2 and I still can't get .NET Core to run. I asked a question on Superuser, since I'm not even sure it's problem with .NET.\nSpecifically these are errors I face:\n\napi-ms-win-crt-runtime-l1-1-0.dll is missing when running dotnet.exe\nError 0x80240017: Failed to execute MSU package when installing MSVC package. \n",
    "juniormayhe": "Well, I am having the same error message. \nMicrosoft .NET Core 2.0.5 Windows Server Hosting\n\"One or more issues caused the setup to fail. Please fix the issues and then retry setup. \n0x80070001 - Incorrect function.\nWindows Server 2007 SP2 32bit / Microsoft Windows [Version 6.0.6002]\n```\n[13B8:0CB4][2018-03-26T13:18:12]i001: Burn v3.10.4.4718, Windows v6.0 (Build 6002: Service Pack 2), path: C:\\Windows\\Temp{3268E9AF-D96A-4F56-9391-18F36A58DB2A}.cr\\DotNetCore.2.0.5-WindowsHosting.exe\n[13B8:0CB4][2018-03-26T13:18:12]i000: Initializing string variable 'BundleNameShort' to value 'Microsoft .NET Core 2.0.5'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Initializing string variable 'BundleNameSub' to value 'Windows Server Hosting'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Initializing numeric variable 'OPT_INSTALL_LTS_REDIST' to value '1'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Initializing numeric variable 'OPT_INSTALL_FTS_REDIST' to value '1'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Initializing numeric variable 'OPT_NO_X86' to value '0'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Initializing string variable 'InstallResetIISState' to value 'disable'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Initializing string variable 'InstallNoIISState' to value 'disable'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Initializing string variable 'ModifyResetIISState' to value 'disable'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Initializing string variable 'ModifyNoIISState' to value 'disable'\n[13B8:0CB4][2018-03-26T13:18:12]i009: Command Line: '-burn.clean.room=C:\\Users\\ADMINSERVICIOS\\Downloads\\DotNetCore.2.0.5-WindowsHosting.exe -burn.filehandle.attached=372 -burn.filehandle.self=380'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting string variable 'WixBundleOriginalSource' to value 'C:\\Users\\ADMINSERVICIOS\\Downloads\\DotNetCore.2.0.5-WindowsHosting.exe'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting string variable 'WixBundleOriginalSourceFolder' to value 'C:\\Users\\ADMINSERVICIOS\\Downloads\\'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting string variable 'WixBundleLog' to value 'C:\\Users\\ADMINS~2\\AppData\\Local\\Temp\\dd_DotNetCoreWinSvrHosting__20180326131812.log'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting string variable 'WixBundleName' to value 'Microsoft .NET Core 2.0.5 - Windows Server Hosting'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting string variable 'WixBundleManufacturer' to value 'Microsoft Corporation'\n[13B8:06C0][2018-03-26T13:18:12]i000: Setting numeric variable 'WixStdBALanguageId' to value 1033\n[13B8:06C0][2018-03-26T13:18:12]i000: Setting version variable 'WixBundleFileVersion' to value '2.0.40104.155'\n[13B8:0CB4][2018-03-26T13:18:12]i100: Detect begin, 6 packages\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting string variable 'IISCoreWebEngineInstalled_x86' to value '1'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'SOFTWARE\\Microsoft\\IISExpress'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'SOFTWARE\\Microsoft\\IISExpress'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting string variable 'IISW3SVCInstalled_x86' to value '1'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting string variable 'IISCoreWebEngineInstalled_x64' to value '1'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting string variable 'IISW3SVCInstalled_x64' to value '1'\n[13B8:0CB4][2018-03-26T13:18:12]i052: Condition 'NOT (((IISCoreWebEngineInstalled_x86=1) AND (IISW3SVCInstalled_x86=1)) OR ((IISCoreWebEngineInstalled_x64=1) AND (IISW3SVCInstalled_x64=1)))' evaluates to false.\n[13B8:0CB4][2018-03-26T13:18:12]i052: Condition '((IISCoreWebEngineInstalled_x86=1) AND (IISW3SVCInstalled_x86=1)) OR ((IISCoreWebEngineInstalled_x64=1) AND (IISW3SVCInstalled_x64=1))' evaluates to true.\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting string variable 'InstallResetIISState' to value '1'\n[13B8:0CB4][2018-03-26T13:18:12]i052: Condition 'NOT (((IISCoreWebEngineInstalled_x86=1) AND (IISW3SVCInstalled_x86=1)) OR ((IISCoreWebEngineInstalled_x64=1) AND (IISW3SVCInstalled_x64=1)))' evaluates to false.\n[13B8:0CB4][2018-03-26T13:18:12]i052: Condition '((IISCoreWebEngineInstalled_x86=1) AND (IISW3SVCInstalled_x86=1)) OR ((IISCoreWebEngineInstalled_x64=1) AND (IISW3SVCInstalled_x64=1))' evaluates to true.\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting string variable 'ModifyResetIISState' to value '1'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry value not found. Key = 'SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full', Value = 'Release'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015CommunityExists' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community\\1028'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015CommunityExists_1028' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community\\1029'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015CommunityExists_1029' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community\\1031'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015CommunityExists_1031' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community\\1036'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015CommunityExists_1036' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community\\1040'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015CommunityExists_1040' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community\\1041'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015CommunityExists_1041' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community\\1042'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015CommunityExists_1042' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community\\1045'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015CommunityExists_1045' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community\\1046'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015CommunityExists_1046' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community\\1049'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015CommunityExists_1049' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community\\1055'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015CommunityExists_1055' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community\\2052'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015CommunityExists_2052' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community\\3082'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015CommunityExists_3082' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\community'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\devenv'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015DevEnvExists' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\devenv\\1028'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015DevEnvExists_1028' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\devenv\\1029'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015DevEnvExists_1029' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\devenv\\1031'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015DevEnvExists_1031' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\devenv\\1036'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015DevEnvExists_1036' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\devenv\\1040'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015DevEnvExists_1040' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\devenv\\1041'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015DevEnvExists_1041' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\devenv\\1042'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015DevEnvExists_1042' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\devenv\\1045'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015DevEnvExists_1045' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\devenv\\1046'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015DevEnvExists_1046' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\devenv\\1049'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015DevEnvExists_1049' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\devenv\\1055'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015DevEnvExists_1055' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\devenv\\2052'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015DevEnvExists_2052' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\devenv\\3082'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015DevEnvExists_3082' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015EnterpriseExists' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise\\1028'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015EnterpriseExists_1028' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise\\1029'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015EnterpriseExists_1029' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise\\1031'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015EnterpriseExists_1031' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise\\1036'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015EnterpriseExists_1036' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise\\1040'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015EnterpriseExists_1040' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise\\1041'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015EnterpriseExists_1041' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise\\1042'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015EnterpriseExists_1042' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise\\1045'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015EnterpriseExists_1045' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise\\1046'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015EnterpriseExists_1046' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise\\1049'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015EnterpriseExists_1049' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise\\1055'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015EnterpriseExists_1055' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise\\2052'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015EnterpriseExists_2052' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise\\3082'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015EnterpriseExists_3082' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\enterprise'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015ProfessionalExists' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional\\1028'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015ProfessionalExists_1028' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional\\1029'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015ProfessionalExists_1029' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional\\1031'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015ProfessionalExists_1031' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional\\1036'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015ProfessionalExists_1036' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional\\1040'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015ProfessionalExists_1040' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional\\1041'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015ProfessionalExists_1041' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional\\1042'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015ProfessionalExists_1042' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional\\1045'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015ProfessionalExists_1045' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional\\1046'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015ProfessionalExists_1046' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional\\1049'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015ProfessionalExists_1049' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional\\1055'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015ProfessionalExists_1055' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional\\2052'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015ProfessionalExists_2052' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional\\3082'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015ProfessionalExists_3082' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vs\\Servicing\\14.0\\professional'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015WebExpressExists' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor\\1028'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015WebExpressExists_1028' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor\\1029'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015WebExpressExists_1029' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor\\1031'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015WebExpressExists_1031' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor\\1036'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015WebExpressExists_1036' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor\\1040'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015WebExpressExists_1040' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor\\1041'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015WebExpressExists_1041' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor\\1042'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015WebExpressExists_1042' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor\\1045'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015WebExpressExists_1045' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor\\1046'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015WebExpressExists_1046' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor\\1049'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015WebExpressExists_1049' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor\\1055'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015WebExpressExists_1055' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor\\2052'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015WebExpressExists_2052' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor\\3082'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'VS2015WebExpressExists_3082' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'Software\\Microsoft\\DevDiv\\vns\\Servicing\\14.0\\xcor'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'SOFTWARE\\Microsoft\\DevDiv\\Web Tools\\Servicing\\14.0\\VisualStudio14'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'WebToolsVSInstalled' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'SOFTWARE\\Microsoft\\DevDiv\\Web Tools\\Servicing\\14.0\\VWDExpress14'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'WebToolsVWDInstalled' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i000: Registry key not found. Key = 'SOFTWARE\\Microsoft\\DevDiv\\WebFrameworksTools\\Servicing\\5.0\\VisualStudio14'\n[13B8:0CB4][2018-03-26T13:18:12]i000: Setting numeric variable 'WSRVSExists' to value 0\n[13B8:0CB4][2018-03-26T13:18:12]i052: Condition 'DotNetRedistLtsProductVersion_x64 = v16.20.26021' evaluates to false.\n[13B8:0CB4][2018-03-26T13:18:12]i052: Condition 'DotNetRedistLtsProductVersion_x86 = v16.20.26021' evaluates to false.\n[13B8:0CB4][2018-03-26T13:18:12]i101: Detected package: AspNetCoreModule_x86, state: Absent, cached: None\n[13B8:0CB4][2018-03-26T13:18:12]i101: Detected package: AspNetCoreModule_x64, state: Absent, cached: None\n[13B8:0CB4][2018-03-26T13:18:12]i101: Detected package: DotNetRedistLts_x64, state: Absent, cached: None\n[13B8:0CB4][2018-03-26T13:18:12]i101: Detected package: DotNetRedistLts_x86, state: Absent, cached: None\n[13B8:0CB4][2018-03-26T13:18:12]i101: Detected package: AspNetCoreRuntimePackageStore_x86, state: Absent, cached: None\n[13B8:0CB4][2018-03-26T13:18:12]i101: Detected package: AspNetCoreRuntimePackageStore_x64, state: Absent, cached: None\n[13B8:0CB4][2018-03-26T13:18:12]i199: Detect complete, result: 0x0\n[13B8:06C0][2018-03-26T13:18:12]i000: Disable control InstallNoIIS\n[13B8:06C0][2018-03-26T13:18:14]i000: Setting numeric variable 'EulaAcceptCheckbox' to value 1\n[13B8:0CB4][2018-03-26T13:18:14]i200: Plan begin, 6 packages, action: Install\n[13B8:0CB4][2018-03-26T13:18:14]i052: Condition 'NOT VersionNT64 AND (VersionNT >= v6.1) AND (IISCoreWebEngineInstalled_x86=1) AND (IISW3SVCInstalled_x86=1)' evaluates to false.\n[13B8:0CB4][2018-03-26T13:18:14]i052: Condition 'VersionNT64 AND (VersionNT64 >= v6.1) AND (IISCoreWebEngineInstalled_x64=1) AND (IISW3SVCInstalled_x64=1)' evaluates to false.\n[13B8:0CB4][2018-03-26T13:18:14]i052: Condition 'VersionNT64' evaluates to false.\n[13B8:0CB4][2018-03-26T13:18:14]w321: Skipping dependency registration on package with no dependency providers: DotNetRedistLts_x64\n[13B8:0CB4][2018-03-26T13:18:14]i052: Condition 'NOT OPT_NO_X86' evaluates to true.\n[13B8:0CB4][2018-03-26T13:18:14]w321: Skipping dependency registration on package with no dependency providers: DotNetRedistLts_x86\n[13B8:0CB4][2018-03-26T13:18:14]i000: Setting string variable 'WixBundleLog_DotNetRedistLts_x86' to value 'C:\\Users\\ADMINS~2\\AppData\\Local\\Temp\\dd_DotNetCoreWinSvrHosting__20180326131812_000_DotNetRedistLts_x86.log'\n[13B8:0CB4][2018-03-26T13:18:14]i052: Condition 'NOT OPT_NO_X86' evaluates to true.\n[13B8:0CB4][2018-03-26T13:18:14]i000: Setting string variable 'WixBundleRollbackLog_AspNetCoreRuntimePackageStore_x86' to value 'C:\\Users\\ADMINS~2\\AppData\\Local\\Temp\\dd_DotNetCoreWinSvrHosting__20180326131812_001_AspNetCoreRuntimePackageStore_x86_rollback.log'\n[13B8:0CB4][2018-03-26T13:18:14]i000: Setting string variable 'WixBundleLog_AspNetCoreRuntimePackageStore_x86' to value 'C:\\Users\\ADMINS~2\\AppData\\Local\\Temp\\dd_DotNetCoreWinSvrHosting__20180326131812_001_AspNetCoreRuntimePackageStore_x86.log'\n[13B8:0CB4][2018-03-26T13:18:14]i052: Condition 'VersionNT64' evaluates to false.\n[13B8:0CB4][2018-03-26T13:18:14]i201: Planned package: AspNetCoreModule_x86, state: Absent, default requested: Absent, ba requested: Absent, execute: None, rollback: None, cache: No, uncache: No, dependency: None\n[13B8:0CB4][2018-03-26T13:18:14]i201: Planned package: AspNetCoreModule_x64, state: Absent, default requested: Absent, ba requested: Absent, execute: None, rollback: None, cache: No, uncache: No, dependency: None\n[13B8:0CB4][2018-03-26T13:18:14]i201: Planned package: DotNetRedistLts_x64, state: Absent, default requested: Absent, ba requested: Absent, execute: None, rollback: None, cache: No, uncache: No, dependency: None\n[13B8:0CB4][2018-03-26T13:18:14]i201: Planned package: DotNetRedistLts_x86, state: Absent, default requested: Present, ba requested: Present, execute: Install, rollback: None, cache: Yes, uncache: No, dependency: None\n[13B8:0CB4][2018-03-26T13:18:14]i201: Planned package: AspNetCoreRuntimePackageStore_x86, state: Absent, default requested: Present, ba requested: Present, execute: Install, rollback: Uninstall, cache: Yes, uncache: No, dependency: Register\n[13B8:0CB4][2018-03-26T13:18:14]i201: Planned package: AspNetCoreRuntimePackageStore_x64, state: Absent, default requested: Absent, ba requested: Absent, execute: None, rollback: None, cache: No, uncache: No, dependency: None\n[13B8:0CB4][2018-03-26T13:18:14]i299: Plan complete, result: 0x0\n[13B8:0CB4][2018-03-26T13:18:14]i300: Apply begin\n[13B8:0CB4][2018-03-26T13:18:14]i010: Launching elevated engine process.\n[13B8:0CB4][2018-03-26T13:18:14]i011: Launched elevated engine process.\n[13B8:0CB4][2018-03-26T13:18:15]i012: Connected to elevated engine.\n[0B78:0E80][2018-03-26T13:18:15]i358: Pausing automatic updates.\n[0B78:0E80][2018-03-26T13:18:15]w308: Automatic updates could not be paused due to error: 0x80240025. Continuing...\n[0B78:0E80][2018-03-26T13:18:15]i360: Creating a system restore point.\n[0B78:0E80][2018-03-26T13:18:15]i362: System restore disabled, system restore point not created.\n[0B78:0E80][2018-03-26T13:18:15]i370: Session begin, registration key: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall{f32a4623-b701-4982-87a1-508db47d1133}, options: 0x7, disable resume: No\n[0B78:0E80][2018-03-26T13:18:15]i000: Caching bundle from: 'C:\\Windows\\Temp{8BEAE9D8-4C43-4E45-9FDD-A68C3B198050}.be\\DotNetCore.2.0.5-WindowsHosting.exe' to: 'C:\\ProgramData\\Package Cache{f32a4623-b701-4982-87a1-508db47d1133}\\DotNetCore.2.0.5-WindowsHosting.exe'\n[0B78:0E80][2018-03-26T13:18:15]i320: Registering bundle dependency provider: D1295DF0-C148-43FA-8B85-125018B78FCE, version: 2.0.40104.155\n[0B78:0E80][2018-03-26T13:18:15]i371: Updating session, registration key: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall{f32a4623-b701-4982-87a1-508db47d1133}, resume: Active, restart initiated: No, disable resume: No\n[0B78:01C0][2018-03-26T13:18:15]i305: Verified acquired payload: DotNetRedistLts_x86 at path: C:\\ProgramData\\Package Cache.unverified\\DotNetRedistLts_x86, moving to: C:\\ProgramData\\Package Cache\\6F414750DA4ECC34AF3669768761A7F1626E89F7\\packages\\DotNetCore.2.0.5-Runtime-x86.exe.\n[0B78:0E80][2018-03-26T13:18:15]i301: Applying execute package: DotNetRedistLts_x86, action: Install, path: C:\\ProgramData\\Package Cache\\6F414750DA4ECC34AF3669768761A7F1626E89F7\\packages\\DotNetCore.2.0.5-Runtime-x86.exe, arguments: '\"C:\\ProgramData\\Package Cache\\6F414750DA4ECC34AF3669768761A7F1626E89F7\\packages\\DotNetCore.2.0.5-Runtime-x86.exe\" /quiet /norestart'\n[0B78:01C0][2018-03-26T13:18:15]i305: Verified acquired payload: AspNetCoreRuntimePackageStore_x86 at path: C:\\ProgramData\\Package Cache.unverified\\AspNetCoreRuntimePackageStore_x86, moving to: C:\\ProgramData\\Package Cache{1F901940-1EA7-3AA8-94BF-0D38AF484F3B}v2.0.12421.0\\AspNetCore.2.0.5.RuntimePackageStore_x86.msi.\n[0B78:0E80][2018-03-26T13:18:16]e000: Error 0x80070001: Process returned error: 0x1\n[0B78:0E80][2018-03-26T13:18:16]e000: Error 0x80070001: Failed to execute EXE package.\n[13B8:0CB4][2018-03-26T13:18:16]e000: Error 0x80070001: Failed to configure per-machine EXE package.\n[13B8:0CB4][2018-03-26T13:18:16]i319: Applied execute package: DotNetRedistLts_x86, result: 0x80070001, restart: None\n[13B8:0CB4][2018-03-26T13:18:16]e000: Error 0x80070001: Failed to execute EXE package.\n[0B78:0E80][2018-03-26T13:18:16]i351: Removing cached package: DotNetRedistLts_x86, from path: C:\\ProgramData\\Package Cache\\6F414750DA4ECC34AF3669768761A7F1626E89F7\\\n[0B78:0E80][2018-03-26T13:18:16]i372: Session end, registration key: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall{f32a4623-b701-4982-87a1-508db47d1133}, resume: ARP, restart: None, disable resume: No\n[0B78:0E80][2018-03-26T13:18:16]i371: Updating session, registration key: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall{f32a4623-b701-4982-87a1-508db47d1133}, resume: ARP, restart initiated: No, disable resume: No\n[13B8:0CB4][2018-03-26T13:18:16]i399: Apply complete, result: 0x80070001, restart: None, ba requested restart:  No\n```. > @juniormayhe aren't the blog posts sufficient? Or TechEmpower benchmark results? ... or blog post like this one: https://www.ageofascent.com/2019/02/04/asp-net-core-saturating-10gbe-at-7-million-requests-per-second/\n\nThe problem is that everyone uses different benchmarks, or cares about different things, so it is EXTREMELLY hard to provide anything super-useful.\ncc @adamsitnik @billwert @brianrob\n\nYes, I understand this might be hard. Every benchmark will care more or less about some aspects. I picked a sample of Steve Gordon to evaluate netcore performance on string manipulation and first runs on 3.0 were slower but after couple of executions it got similar to 2.2 and 2.1. Hope netcore 3.0 performance won't decrease!\nThanks for the heads up Karel. ",
    "Yura13": "I have the same issue on Windows Server 2008 SP2 32bit / Microsoft Windows [Version 6.0.6002]. ",
    "bhwithun": "This is the same as mentioned in Issue #1555.\nThe server OS must be 2008 R2 SP1+  (i.e. Release 2 - Service Pack 1)\nEven Yura13's attempt with 2008 SP2 (Release 1 - Service Pack 2) was not a good enough OS.. It appears that the server is not at a supported version.  It has to be 2008 R2 SP1+.  Vanilla 2008 is not good enough.. ",
    "john1726": "If I remove the System.Runtime package, then I have to remove these packages:\nSystem.Security.Cryptography.Algorithms\nSystem.Security.Cryptography.Encoding\nSystem.Security.Cryptography.Primitives\nSystem.Security.Cryptography.X509Certificates\nThen when I try to deploy using ClickOnce, I get this error:\nSystem.Deployment.Application.InvalidDeploymentException (HashValidation) - File, has a different computed hash than specified in manifest. - Source: System.Deployment - Stack trace: at System.Deployment.Application.ComponentVerifier.VerifyFileHash(String filePath, Hash hash). Here are the full details on the error I get when I try to remove the Cryptography and Runtime libraries:\n```\nPLATFORM VERSION INFO\n    Windows             : 10.0.15063.0 (Win32NT)\n    Common Language Runtime     : 4.0.30319.42000\n    System.Deployment.dll       : 4.7.2046.0 built by: NET47REL1\n    clr.dll             : 4.7.2110.0 built by: NET47REL1LAST\n    dfdll.dll           : 4.7.2046.0 built by: NET47REL1\n    dfshim.dll          : 10.0.15063.0 (WinBuild.160101.0800)\nSOURCES\n    Deployment url          : file:///C:/src/SAM/trunk/Publish/2.26.1.8694/SD2/Structures%20Inspection.application\n    Application url         : file:///C:/src/SAM/trunk/Publish/2.26.1.8694/SD2/Application%20Files/Structures%20Inspection_2_26_1_8694/Structures%20Inspection.exe.manifest\nIDENTITIES\n    Deployment Identity     : Structures Inspection.application, Version=2.26.1.8694, Culture=en-CA, PublicKeyToken=37e4c3401a2d9a51, processorArchitecture=amd64\n    Application Identity        : Structures Inspection.exe, Version=2.26.1.8694, Culture=en-CA, PublicKeyToken=37e4c3401a2d9a51, processorArchitecture=amd64, type=win32\nAPPLICATION SUMMARY\n    * Installable application.\nERROR SUMMARY\n    Below is a summary of the errors, details of these errors are listed later in the log.\n    * Activation of C:\\src\\SAM\\trunk\\Publish\\2.26.1.8694\\SD2\\Structures Inspection.application resulted in exception. Following failure messages were detected:\n        + File, ConnectionInfo.xml, has a different computed hash than specified in manifest.\nCOMPONENT STORE TRANSACTION FAILURE SUMMARY\n    No transaction error was detected.\nWARNINGS\n    There were no warnings during this operation.\nOPERATION PROGRESS STATUS\n    * [10/4/2017 5:17:29 PM] : Activation of C:\\src\\SAM\\trunk\\Publish\\2.26.1.8694\\SD2\\Structures Inspection.application has started.\n    * [10/4/2017 5:17:29 PM] : Processing of deployment manifest has successfully completed.\n    * [10/4/2017 5:17:29 PM] : Installation of the application has started.\n    * [10/4/2017 5:17:29 PM] : Processing of application manifest has successfully completed.\n    * [10/4/2017 5:17:32 PM] : Found compatible runtime version 4.0.30319.\n    * [10/4/2017 5:17:32 PM] : Request of trust and detection of platform is complete.\nERROR DETAILS\n    Following errors were detected during this operation.\n    * [10/4/2017 5:17:34 PM] System.Deployment.Application.InvalidDeploymentException (HashValidation)\n        - File, ConnectionInfo.xml, has a different computed hash than specified in manifest.\n        - Source: System.Deployment\n        - Stack trace:\n            at System.Deployment.Application.ComponentVerifier.VerifyFileHash(String filePath, Hash hash)\n            at System.Deployment.Application.ComponentVerifier.VerifyFileHash(String filePath, HashCollection hashCollection)\n            at System.Deployment.Application.ComponentVerifier.VerifyComponents()\n            at System.Deployment.Application.DownloadManager.DownloadDependencies(SubscriptionState subState, AssemblyManifest deployManifest, AssemblyManifest appManifest, Uri sourceUriBase, String targetDirectory, String group, IDownloadNotification notification, DownloadOptions options)\n            at System.Deployment.Application.ApplicationActivator.DownloadApplication(SubscriptionState subState, ActivationDescription actDesc, Int64 transactionId, TempDirectory& downloadTemp)\n            at System.Deployment.Application.ApplicationActivator.InstallApplication(SubscriptionState& subState, ActivationDescription actDesc)\n            at System.Deployment.Application.ApplicationActivator.PerformDeploymentActivation(Uri activationUri, Boolean isShortcut, String textualSubId, String deploymentProviderUrlFromExtension, BrowserSettings browserSettings, String& errorPageUrl, Uri& deploymentUri)\n            at System.Deployment.Application.ApplicationActivator.PerformDeploymentActivationWithRetry(Uri activationUri, Boolean isShortcut, String textualSubId, String deploymentProviderUrlFromExtension, BrowserSettings browserSettings, String& errorPageUrl)\n--- End of stack trace from previous location where exception was thrown ---\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n            at System.Deployment.Application.ApplicationActivator.PerformDeploymentActivationWithRetry(Uri activationUri, Boolean isShortcut, String textualSubId, String deploymentProviderUrlFromExtension, BrowserSettings browserSettings, String& errorPageUrl)\n            at System.Deployment.Application.ApplicationActivator.ActivateDeploymentWorker(Object state)\nCOMPONENT STORE TRANSACTION DETAILS\n    No transaction information is available.\n```\nI've found a potential solution here https://blogs.msdn.microsoft.com/gauravb/2008/10/06/clickonce-filename-has-a-different-computed-hash-than-specified-in-manifest/, but I work in a corporate environment and don't have permission to modify that file.. The application runs fine if I don't use ClickOnce, but that is not an acceptable solution, because the application needs to be distributed to hundreds of inspectors via ClickOnce.  I am not trying to downgrade anything.  Why does the app.config say version 4.1.1.0 for System.Runtime but package.config says version 4.3.0?  Should I manually modify app.config somehow?\nDo you have any other suggestions?  TIA.. Please note that I was able to get rid of this exception:\nUnable to initialize the application (Could not load file or assembly 'System.Runtime, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The System cannot find the file specified\nBy removing the following packages from all projects in the solution:\nSystem.Runtime\nSystem.Security.Cryptography.Algorithms\nSystem.Security.Cryptography.Encoding\nSystem.Security.Cryptography.Primitives\nSystem.Security.Cryptography.X509Certificates\nSo now it runs no problem in debug mode, including deploying using ClickOnce, but this is code I have inherited, so it is not clear to me, do I need to have the above libraries to allow for proper code signing for releasing to production?. OK, thank you!. ",
    "JedatKinports": "Thanks for the move.. ",
    "andremarcondesteixeira": "@Petermarcu yes, it gives me the 1.x version. Oh snap! It was some issue with the previous image I had. Removed the previous image and now it is working.\nAnyway, I still can't properly install dotnet 2 in my machine.. ",
    "bbski": "@gregg-miskelly This is awesome.  Let me play with SourceLink a bit and see what comes of it.  I'll update with my findings.  Much appreciated. . ",
    "gyeesoft": "using (var hashAlgorithm = new HMACSHA1(Encoding.GetBytes(key.ToCharArray())))\n . ",
    "deanilvincent": "What should I do now guys? Is there any option?. ",
    "dinjonya": "i tried delete global.json file. \nit's ok. who can tell me why?. i tried delete global.json file. \nit's ok. who can tell me why?. ",
    "FerHenrique": "Thanks for the update. . Hi all!\nClearing the cache worked for me. \nMy project.assets.json is attached. \nTks!\nproject.assets.json.txt\n. ",
    "luckyhappy": "@omajid ok,thanks. ",
    "johnnyasantoss": "Hey! I've had send a PR fixing this.\nI've referred it in this issue.. Ok! I made this PR minutes after the issue, but I guess that I did not mention it.\nHeheh. The issue from test labs is private and not accessible for everyone. Is that correct?. ",
    "mbrookson": "@livarcocc \nIs this a fairly recent requirement?\nAnd how exactly do I go about doing this? I'm new to setting up a Linux environment. Thanks!. So I ran echo $HOME and I do have a $HOME variable which is set to /home/myuser. I guess this is just the logged in user's home directory since if I log in as root the $HOME variable is set to /root\nIs this the variable you are referring to?. Do you do any extra configuration in the Main method on startup?\nMine looks like this\n```\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        BuildWebHost(args).Run();\n    }\npublic static IWebHost BuildWebHost(string[] args) =>\n    WebHost.CreateDefaultBuilder(args)\n        .UseStartup<Startup>()\n        .UseUrls(\"http://localhost:5001\")\n        .Build();\n\n}\n```\nI have seen an number of walkthroughs and cannot see how my setup is different as to why it's not working.\ne.g.\nhttps://www.hanselman.com/blog/PublishingAnASPNETCoreWebsiteToACheapLinuxVMHost.aspx\nhttp://coderscoffeehouse.com/tech/2016/08/19/real-world-aspnetcore-linux-example.html\nI've also tried NOT using supervisor but using a native Linux service and still couldn't get the application to start. At least supervisor gives better logging to try to help understand the problem though.\nDesperate to get this to work now. I tried setting HOME to /home/myuser manually in the supervisor config but still no luck.\nSo forgetting supervisor, I just disabled it and had another go with creating a 'native' service that can be started with systemctl\nThere is a Microsoft post about this here\nhttps://docs.microsoft.com/en-us/aspnet/core/publishing/apache-proxy\nUsing identical configuration to the post, my application is still not able to be started.\nWould like to add...\nI am building the application on macOS Sierra 10.12.6 with dotnet publish, then using ftp to transfer the contents of the /bin/Debug/netcoreapp2.0/publish to my Linux server. I don't think this is relevant though since the default build can run on any platform, and also like I mentioned before, if I manually run dotnet MyApplication.dll it works. If this is a case of env variables not being set, I am not sure as to why. Like I said initially, if I manually run dotnet MyApplication.dll it runs fine. It's only when using a service file or supervisor to run it that the error occurs. I even tried setting environment=ASPNETCORE_ENVIRONMENT=Production,HOME=/var/www in the supervisor configuration and still no luck. So the files are all on the same 'machine'.\nI am using Apache to run the website so the contents of my dotnet publish folder is in /var/www/myapplication.mydomain\nThe supervisor configuration is on the same machine in /etc/supervisor/conf.d/myapplication.mydomain.conf\nSupervisor also has stderr_logfile=/var/log/websites/myapplication.mydomain.err.log set which does write to the log file successfully so that path does work\nSince the paths I use are all relative to the machine root I would have thought this would work?. Good idea. Just tried that and ls /var/www/myapplication.mydomain does definitely list all the expected files including the MyApplication.dll that I'm trying to run.. You my friend are a genius! It works!\nThanks very much @livarcocc . ",
    "keithnicholson": "I'd rather not install the SDK to simply run a console app on a user's machine.  I say that because, calling my basic helloworld app on the Mac in question throws the error after stating:\ndotnet GoJerry.dll\n\nA fatal error was encountered. The library 'libhostpolicy.dylib' required to execute the application was not found in '/Users/gerald.hansen/Desktop/Release 1/netcoreapp2.0/'.\n\nI figured at least calling \"dotnet --version\" would at least validate that the Core runtime was working.  Was this a bad assumption?. @omajid -- thanks that validated part of the core deployment.\n@livarcocc  -- I did do the publish option.  But where I goofed was distributing what was in the release folders and not the publish folder that was also created.  Thanks for your help.. ",
    "vulcanlee": "@livarcocc \n\n\nYes, this only happed if I set the RuntimeIdentifiers and when I remove this property, VS will build successfully.\n\n\nI run msbuild.exe ConsoleApp3.csproj and it works fine.\n\n\n. @livarcocc \nI just install VS 2017 Preview and re-create a new project, then publish by RuntimeIdentifiers of win10-x64. This progress also is failed.\nBut the dialog of publish failed show a log file and I have put as following\n2017/10/21  10:41:39\nSystem.AggregateException: One or more errors occurred. ---> System.Exception: Publishing failed.\n   --- End of inner exception stack trace ---\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\n   at Microsoft.VisualStudio.ApplicationCapabilities.Publish.Model.DefaultPublishSteps.<>c__DisplayClass22_0.b__1()\n   at System.Threading.Tasks.Task`1.InnerInvoke()\n   at System.Threading.Tasks.Task.Execute()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.VisualStudio.ApplicationCapabilities.Publish.Model.DefaultPublishSteps.d__19.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.VisualStudio.ApplicationCapabilities.Publish.ViewModel.ProfileSelectorViewModel.d__102.MoveNext()\n---> (Inner Exception #0) System.Exception: Publishing failed.<---\n===================\n. @Petermarcu \nI have changed to win-x64\n```XML\n\n\nExe\nnetcoreapp2.0\nwin-x64\n\n\n```\nbut it also got following error log on my VS2017 15.5 preview.\n``\n2017/10/22 \u4e0b\u5348 08:02:19\nSystem.AggregateException: One or more errors occurred. ---> System.Exception: Publishing failed.\n   --- End of inner exception stack trace ---\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\n   at Microsoft.VisualStudio.ApplicationCapabilities.Publish.Model.DefaultPublishSteps.<>c__DisplayClass22_0.<IsBuildCompletedSuccessfully>b__1()\n   at System.Threading.Tasks.Task1.InnerInvoke()\n   at System.Threading.Tasks.Task.Execute()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.VisualStudio.ApplicationCapabilities.Publish.Model.DefaultPublishSteps.d__19.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.VisualStudio.ApplicationCapabilities.Publish.ViewModel.ProfileSelectorViewModel.d__102.MoveNext()\n---> (Inner Exception #0) System.Exception: Publishing failed.<---\n===================\n```. @Petermarcu \nYes, it work fine and all files for SCD have been generated.\n```\nC:\\Vulcan\\Gitbook\\Temp\\ConsoleApp1>dotnet publish -r win-x64\nConsoleApp1 -> C:\\Vulcan\\Gitbook\\Temp\\ConsoleApp1\\ConsoleApp1\\bin\\Debug\\netcoreapp2.0\\win-x64\\ConsoleApp1.dll\n  ConsoleApp1 -> C:\\Vulcan\\Gitbook\\Temp\\ConsoleApp1\\ConsoleApp1\\bin\\Debug\\netcoreapp2.0\\win-x64\\publish\\\nC:\\Vulcan\\Gitbook\\Temp\\ConsoleApp1>\n```. @vijayrkn \nI have changed RuntimeIdentifiers to RuntimeIdentifier in the csproj and can publish from VS successfully.\n```XML\n\n\nExe\nnetcoreapp2.0\nwin-x64\n\n\n```\nIf I use multiple RIDs, like this : win-x64;osx-x64;rhel-x64 in the csproj and republish any one of RIDs. The project of Visual Studio will become unavailable.\n```XML\n\n\nExe\nnetcoreapp2.0\nwin-x64;osx.10.11-x64;rhel-x64\n\n\n```\nBut in this web page Self-contained deployment without third-party dependencies, the <RuntimeIdentifiers> tag can use multiple RIDs.\nMy question is that how can I use multiple RIDs in the csproj and can publish from VS?\n\n. @vijayrkn\nWhen I set RuntimeIdentifiers in the csproj and specify multiple RIDs, and publish any RID (change from publish setting page) from Visual Studio will be failed.. @FelschR \nYou can use CLI to publish SCD . ",
    "doggy8088": "@Petermarcu Does VS2017 invoke dotnet.exe CLI internally?  . Still have the problem on build 15.5.5. @vijayrkn I recorded a full steps video for you.  It really doesn't work.\nHere is the full video demostrate the whole reproduce steps:\nhttps://youtu.be/QYQiHKh7m8w\nHere is the log:\n``\n2018/5/9 \u4e0a\u5348 03:07:09\nSystem.AggregateException: One or more errors occurred. ---> System.Exception: Publishing failed.\n   --- End of inner exception stack trace ---\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\n   at Microsoft.VisualStudio.ApplicationCapabilities.Publish.Model.DefaultPublishSteps.<>c__DisplayClass22_0.<IsBuildCompletedSuccessfully>b__1()\n   at System.Threading.Tasks.Task1.InnerInvoke()\n   at System.Threading.Tasks.Task.Execute()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.VisualStudio.ApplicationCapabilities.Publish.Model.DefaultPublishSteps.d__19.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.VisualStudio.ApplicationCapabilities.Publish.ViewModel.ProfileSelectorViewModel.d__116.MoveNext()\n---> (Inner Exception #0) System.Exception: Publishing failed.<---\n===================\n```. @vijayrkn I already shared.  Don't you see?. @vijayrkn here you are:\n1>------ Build started: Project: ConsoleApp1, Configuration: Release Any CPU ------\n1>You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452\n1>ConsoleApp1 -> G:\\Test\\ConsoleApp1\\ConsoleApp1\\bin\\Release\\netcoreapp2.0\\ConsoleApp1.dll\n2>------ Publish started: Project: ConsoleApp1, Configuration: Release Any CPU ------\n2>Restoring packages for G:\\Test\\ConsoleApp1\\ConsoleApp1\\ConsoleApp1.csproj...\n2>Generating MSBuild file G:\\Test\\ConsoleApp1\\ConsoleApp1\\obj\\ConsoleApp1.csproj.nuget.g.props.\n2>Generating MSBuild file G:\\Test\\ConsoleApp1\\ConsoleApp1\\obj\\ConsoleApp1.csproj.nuget.g.targets.\n2>Restore completed in 719.75 ms for G:\\Test\\ConsoleApp1\\ConsoleApp1\\ConsoleApp1.csproj.\n2>Assets file 'G:\\Test\\ConsoleApp1\\ConsoleApp1\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v2.0/win-x86'. Ensure that restore has run and that you have included 'netcoreapp2.0' in the TargetFrameworks for your project. You may also need to include 'win-x86' in your project's RuntimeIdentifiers.\n========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\n========== Publish: 0 succeeded, 1 failed, 0 skipped ==========\nI also tried to add a global.json file below:\n{\n  \"sdk\": {\n    \"version\": \"2.1.104\"\n  }\n}\nThe output log is:\n1>------ Build started: Project: ConsoleApp1, Configuration: Release Any CPU ------\n1>ConsoleApp1 -> G:\\Test\\ConsoleApp1\\ConsoleApp1\\bin\\Release\\netcoreapp2.0\\ConsoleApp1.dll\n2>------ Publish started: Project: ConsoleApp1, Configuration: Release Any CPU ------\n2>Restoring packages for G:\\Test\\ConsoleApp1\\ConsoleApp1\\ConsoleApp1.csproj...\n2>Restore completed in 173.82 ms for G:\\Test\\ConsoleApp1\\ConsoleApp1\\ConsoleApp1.csproj.\n2>Assets file 'G:\\Test\\ConsoleApp1\\ConsoleApp1\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v2.0/win-x86'. Ensure that restore has run and that you have included 'netcoreapp2.0' in the TargetFrameworks for your project. You may also need to include 'win-x86' in your project's RuntimeIdentifiers.\n========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\n========== Publish: 0 succeeded, 1 failed, 0 skipped ==========. ",
    "NPSF3000": "Just encountered this issue.. ",
    "BillHiebert": "@vijayrkn - can you respond?. ",
    "FelschR": "This issue is still present in the latest stable VS release.\nIs it being worked on?. ",
    "rliberoff": "It is 2018, we already had at least two update to version 15.5 and this error still happens!. ",
    "atodd-geoplan": "Assets file 'C:\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v2.0/win-x64'. ",
    "yangar": "Still have the problem on build 15.5.4. ",
    "vaklove": "Hi I am still facing same issue . I can not publish through visual studio . I have latest 15.5.6 VSC 2017. \nPlease look below attached screen shot.\n\n\n. ",
    "Retik": "@vijayrkn I just downloaded VS 15.6 Preview 5 to test this out and it does publish successfully. However, SCD file dependencies are not included in the publish directory. If I trun dotnet publish -c Release -r win10-x64 from the CLI, all files are published correctly. It's only when publish from VS that files are missing.. @vijayrkn Yes I have it in my csproj. It look like this.\nRuntimeIdentifiers>win10-x64;ubuntu-x64win10-x64ubuntu-x64</RuntimeIdentifier. @vijayrkn Figured out my issue was that I had similar publish directories in two different locations and I wasn't looking in the correct directory where VS was publishing. Everything is working now. Thanks for the help.\nIt appears that a directory with the same name gets created inside the netcoreapp2.0 directory that doesn't include all the publish collateral. This is why I was confused because the directory I wanted was bin/Release/ubuntu-x64 instead of bin/Release/netcoreapp2.0/ubuntu-x64.. ",
    "gitchomik": "I tested it on 15.6, and this has been fixed BUT partly.\nWhen you have projects X and Y (refers to X),\nand X, Y have both <RuntimeIdentifiers>win10-x64;debian.8-x64;</RuntimeIdentifiers>.\nThen when Publishing Y still does NOT work, and show error message.\n(It works when X doesn't have any <RuntimeIdentifiers>, but then X probablly wasn't published with valid RID)\nBTW: It also does NOT work, when publish ASP.NET Core. @vijayrkn  https://github.com/gitchomik/dotnet_core_issues_1039\n1. Run VS.NET 15.6.4 and load solution\n2. Select project \"ConsoleApp\" then click \"Publish\" from context menu, then \"FolderProfile\" and \"Publish\"\n3. VS.NET show error message https://imgur.com/a/I04VA\n4. Select project \"WebApplication1\" then click \"Publish\" from context menu, then \"FolderProfile\" and \"Publish\"\n5. VS.NET show error message https://imgur.com/a/rEhte\n. @vijayrkn So, did you check my project ? Can you confirm, that issue is really there ?\nMaybe this issue should reopened ? . @vijayrkn Sorry doesn't works for me. When all project has the same RuntimeIdentifier (not RuntimeIdentifierS) it works.\nBut, when I changed RuntimeIdentifierS into  <RuntimeIdentifiers>debian.8-x64</RuntimeIdentifiers> in both .csproj files (one RID in all projects), I still get the error.\nWhen dependent projects doesn't contains RuntimeIdentifiers at all, then publish works but dependent projects aren't RID specific.\nI don't understand how should I prepare .csproj to work with multiply RIDs (especially that it is work fine when using command \"dotnet publish\").\nI just want to prepare .csproj to work with multiply RIDs, and switch them when publishing. How can I managed it ?. @vijayrkn - Yes, it is true, dependent projects without RuntimeIdentifiers works fine (as I said before). \nBut, I thought that publishing using RID = debian.8-x64, also build and publish dependent projects using same RID = debian.8-x64.\nSo, isn't project system should looking for the dlls in the RID specific folder ?. vijayrkn: sorry, version 15.7 still doesn't work for me.. vijayrkn: VS.NET now doesn't support RIDs ? (why ? I don't get it)\nSo, when using \"dotnet\" command I still need RIDs in .csproj (and it works great) but using VS.NET I have to remove it from .csproj ? How can I publish for other RIDs for example \"ubuntu.16.10-x64\" (in VS.NET there are only few simple RIDs). ",
    "joepour": "Hey guys, seems the issue is still here. Currently having this error: \n\n.csproj\n<PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>netcoreapp2.0</TargetFramework>\n    <RuntimeIdentifiers>win-x64</RuntimeIdentifiers>\n</PropertyGroup>\nVS Version: \n\n. @vijayrkn Hey you're right - sorry about that. \nI did update, but the issue still seems to be there, ended up just using dotnet publish. Let me know if you want help reproing in 15.6. ",
    "afernandes": "Has anyone managed to solve it?. my project is based on the project \"SimplCommerce\"\nhttps://github.com/simplcommerce/SimplCommerce/blob/master/src/Modules/SimplCommerce.Module.Localization/SimplCommerce.Module.Localization.csproj\ntoday I did not have time, but tomorrow I put the project in github\nI'm using windows 7.\nI am compiling for win-x64.\nVisual studio 15.7.0\nerror:\n\"bin\\release\\netcoreapp2.0\\win-x64\\Semp.Module.Core.dll\" source file can not be found\ntomorrow I will do more tests and I will inform. \n\nOutput windows\n```\n1>------ Build started: Project: Semp.Infrastructure, Configuration: Release Any CPU ------\n1>You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452\n1>Semp.Infrastructure -> D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Semp.Infrastructure\\bin\\Release\\netcoreapp2.1\\Semp.Infrastructure.dll\n2>------ Build started: Project: Semp.Module.Core, Configuration: Release Any CPU ------\n2>Semp.Module.Core -> D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Modules\\Semp.Module.Core\\bin\\Release\\netcoreapp2.1\\Semp.Module.Core.dll\n3>------ Build started: Project: Semp.Module.Localization, Configuration: Release Any CPU ------\n4>------ Build started: Project: Semp.Module.Cms, Configuration: Release Any CPU ------\n4>You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452\n3>Semp.Module.Localization -> D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Modules\\Semp.Module.Localization\\bin\\Release\\netcoreapp2.1\\Semp.Module.Localization.dll\n4>Semp.Module.Cms -> D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Modules\\Semp.Module.Cms\\bin\\Release\\netcoreapp2.1\\Semp.Module.Cms.dll\n5>------ Build started: Project: Semp.WebHost, Configuration: Release Any CPU ------\n5>Semp.WebHost -> D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Semp.WebHost\\bin\\Release\\netcoreapp2.1\\Semp.WebHost.dll\n6>------ Publish started: Project: Semp.WebHost, Configuration: Release Any CPU ------\nConnecting to C:\\inetpub\\wwwroot\\semp...\nRestoring packages for D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Semp.Infrastructure\\Semp.Infrastructure.csproj...\nRestoring packages for D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Modules\\Semp.Module.Localization\\Semp.Module.Localization.csproj...\nRestoring packages for D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Modules\\Semp.Module.Cms\\Semp.Module.Cms.csproj...\nRestore completed in 73,97 ms for D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Semp.WebHost\\Semp.WebHost.csproj.\nRestoring packages for D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Modules\\Semp.Module.Core\\Semp.Module.Core.csproj...\nRestore completed in 65,37 ms for D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Semp.WebHost\\Semp.WebHost.csproj.\nRestore completed in 1,03 sec for D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Modules\\Semp.Module.Localization\\Semp.Module.Localization.csproj.\nRestore completed in 1,03 sec for D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Modules\\Semp.Module.Core\\Semp.Module.Core.csproj.\nRestore completed in 1,03 sec for D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Modules\\Semp.Module.Cms\\Semp.Module.Cms.csproj.\nRestore completed in 980,69 ms for D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Semp.Infrastructure\\Semp.Infrastructure.csproj.\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1701,1702,2008 /nostdlib+ /platform:x64 /errorreport:prompt /warn:4 /define:TRACE;RELEASE;NETCOREAPP;NETCOREAPP2_1 /errorendlocation /preferreduilang:en-US /reference:C:\\Users\\AndersonN.nuget\\packages\\autofac\\4.2.0\\lib\\netstandard1.1\\Autofac.dll /reference:C:\\Users\\AndersonN.nuget\\packages\\autofac.extensions.dependencyinjection\\4.2.2\\lib\\netstandard1.1\\Autofac.Extensions.DependencyInjection.dll /reference:C:\\Users\\AndersonN.nuget\\packages\\cloudscribe.pagination.models\\1.0.1\\lib\\netstandard1.6\\cloudscribe.Pagination.Models.dll /reference:C:\\Users\\AndersonN.nuget\\packages\\cloudscribe.web.pagination\\2.1.2\\lib\\netstandard2.0\\cloudscribe.Web.Pagination.dll /reference:C:\\Users\\AndersonN.nuget\\packages\\mediatr\\4.1.0\\lib\\netstandard2.0\\MediatR.dll /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.applicationinsights.dependencycollector\\2.4.1\\lib\\netstandard1.6\\Microsoft.AI.DependencyCollector.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.applicationinsights.aspnetcore\\2.1.1\\lib\\netstandard1.6\\Microsoft.ApplicationInsights.AspNetCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.applicationinsights\\2.4.0\\lib\\netstandard1.3\\Microsoft.ApplicationInsights.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.antiforgery\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Antiforgery.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.applicationinsights.hostingstartup\\2.0.3\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.ApplicationInsights.HostingStartup.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.abstractions\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.cookies\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Cookies.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.core\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.facebook\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Facebook.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.google\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Google.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.jwtbearer\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.JwtBearer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.microsoftaccount\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.MicrosoftAccount.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.oauth\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.OAuth.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.openidconnect\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.OpenIdConnect.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.twitter\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Twitter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization.policy\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.Policy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.azureappservices.hostingstartup\\2.0.3\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.AzureAppServices.HostingStartup.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.azureappservicesintegration\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.AzureAppServicesIntegration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cookiepolicy\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.CookiePolicy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cors\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cryptography.internal\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cryptography.Internal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cryptography.keyderivation\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cryptography.KeyDerivation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.abstractions\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.azurestorage\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.AzureStorage.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.extensions\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.abstractions\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Diagnostics.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Diagnostics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.entityframeworkcore\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.abstractions\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.server.abstractions\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.html.abstractions\\2.0.2\\lib\\netstandard2.0\\Microsoft.AspNetCore.Html.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.abstractions\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.extensions\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.features\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.httpoverrides\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.HttpOverrides.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.identity\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Identity.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.identity.entityframeworkcore\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Identity.EntityFrameworkCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.jsonpatch\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.JsonPatch.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.localization\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.localization.routing\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Localization.Routing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.middlewareanalysis\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.MiddlewareAnalysis.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.abstractions\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.apiexplorer\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ApiExplorer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.core\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.cors\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.dataannotations\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.formatters.json\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Formatters.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.formatters.xml\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Formatters.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.localization\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.extensions\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razorpages\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.RazorPages.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.taghelpers\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.TagHelpers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.viewfeatures\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ViewFeatures.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.nodeservices\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.NodeServices.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.owin\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Owin.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.language\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Language.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.runtime\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecaching.abstractions\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.ResponseCaching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecaching\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.ResponseCaching.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecompression\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.ResponseCompression.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.rewrite\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Rewrite.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing.abstractions\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.server.httpsys\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.HttpSys.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.server.iisintegration\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.IISIntegration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.server.kestrel.core\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.server.kestrel\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.server.kestrel.https\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Https.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.server.kestrel.transport.abstractions\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.server.kestrel.transport.libuv\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.session\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.Session.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.spaservices\\2.0.4\\lib\\netstandard2.0\\Microsoft.AspNetCore.SpaServices.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.staticfiles\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.StaticFiles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.websockets\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.WebSockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.webutilities\\2.0.3\\lib\\netstandard2.0\\Microsoft.AspNetCore.WebUtilities.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.azure.keyvault\\2.3.2\\lib\\netstandard1.4\\Microsoft.Azure.KeyVault.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.azure.keyvault.webkey\\2.0.7\\lib\\netstandard1.4\\Microsoft.Azure.KeyVault.WebKey.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.3.1\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.3.1\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.razor\\2.0.3\\lib\\netstandard2.0\\Microsoft.CodeAnalysis.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\Microsoft.CSharp.dll\" /reference:C:\\Users\\AndersonN.nuget\\packages\\microsoft.data.edm\\5.8.2\\lib\\netstandard1.1\\Microsoft.Data.Edm.dll /reference:C:\\Users\\AndersonN.nuget\\packages\\microsoft.data.odata\\5.8.2\\lib\\netstandard1.1\\Microsoft.Data.OData.dll /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.data.sqlite.core\\2.0.1\\lib\\netstandard2.0\\Microsoft.Data.Sqlite.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.dotnet.platformabstractions\\2.0.3\\lib\\netstandard1.3\\Microsoft.DotNet.PlatformAbstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.design\\2.0.3\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Design.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore\\2.0.3\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.inmemory\\2.0.3\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.InMemory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.relational\\2.0.3\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Relational.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlite.core\\2.0.3\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Sqlite.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlserver\\2.0.3\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.SqlServer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.abstractions\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.memory\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.redis\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Redis.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.sqlserver\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.SqlServer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.abstractions\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.azurekeyvault\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.AzureKeyVault.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.binder\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Binder.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.commandline\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.CommandLine.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.environmentvariables\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.EnvironmentVariables.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.fileextensions\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.FileExtensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.ini\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Ini.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.json\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.usersecrets\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.UserSecrets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.xml\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection.abstractions\\2.0.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection\\2.0.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencymodel\\2.0.3\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.diagnosticadapter\\2.0.1\\lib\\netcoreapp2.0\\Microsoft.Extensions.DiagnosticAdapter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.abstractions\\2.0.1\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.composite\\2.0.1\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Composite.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.embedded\\2.0.1\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Embedded.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.physical\\2.0.1\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Physical.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.filesystemglobbing\\2.0.1\\lib\\netstandard2.0\\Microsoft.Extensions.FileSystemGlobbing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.hosting.abstractions\\2.0.3\\lib\\netstandard2.0\\Microsoft.Extensions.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.identity.core\\2.0.3\\lib\\netstandard2.0\\Microsoft.Extensions.Identity.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.identity.stores\\2.0.3\\lib\\netstandard2.0\\Microsoft.Extensions.Identity.Stores.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization.abstractions\\2.0.3\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization\\2.0.3\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.abstractions\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.azureappservices\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.AzureAppServices.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.configuration\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.console\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Console.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.debug\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Debug.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.eventsource\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.EventSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.tracesource\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.TraceSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.objectpool\\2.0.0\\lib\\netstandard2.0\\Microsoft.Extensions.ObjectPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.options.configurationextensions\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Options.ConfigurationExtensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.options\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.Options.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.platformabstractions\\1.1.0\\lib\\netstandard1.3\\Microsoft.Extensions.PlatformAbstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.primitives\\2.0.0\\lib\\netstandard2.0\\Microsoft.Extensions.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.webencoders\\2.0.2\\lib\\netstandard2.0\\Microsoft.Extensions.WebEncoders.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.identitymodel.clients.activedirectory\\3.14.1\\lib\\netstandard1.3\\Microsoft.IdentityModel.Clients.ActiveDirectory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.identitymodel.clients.activedirectory\\3.14.1\\lib\\netstandard1.3\\Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.identitymodel.logging\\1.1.4\\lib\\netstandard1.4\\Microsoft.IdentityModel.Logging.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.identitymodel.protocols\\2.1.4\\lib\\netstandard1.4\\Microsoft.IdentityModel.Protocols.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.identitymodel.protocols.openidconnect\\2.1.4\\lib\\netstandard1.4\\Microsoft.IdentityModel.Protocols.OpenIdConnect.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.identitymodel.tokens\\5.1.4\\lib\\netstandard1.4\\Microsoft.IdentityModel.Tokens.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.net.http.headers\\2.0.3\\lib\\netstandard2.0\\Microsoft.Net.Http.Headers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.rest.clientruntime.azure\\3.3.7\\lib\\netstandard1.4\\Microsoft.Rest.ClientRuntime.Azure.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.rest.clientruntime\\2.3.8\\lib\\netstandard1.4\\Microsoft.Rest.ClientRuntime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\Microsoft.VisualBasic.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.visualstudio.web.browserlink\\2.0.3\\lib\\netstandard2.0\\Microsoft.VisualStudio.Web.BrowserLink.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\Microsoft.Win32.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.win32.registry\\4.4.0\\ref\\netstandard2.0\\Microsoft.Win32.Registry.dll\" /reference:C:\\Users\\AndersonN.nuget\\packages\\windowsazure.storage\\8.1.4\\lib\\netstandard1.3\\Microsoft.WindowsAzure.Storage.dll /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\mscorlib.dll\" /reference:C:\\Users\\AndersonN.nuget\\packages\\ncrontab\\3.3.0\\lib\\netstandard1.0\\NCrontab.dll /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\netstandard.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json.bson\\1.0.1\\lib\\netstandard1.3\\Newtonsoft.Json.Bson.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json\\10.0.1\\lib\\netstandard1.3\\Newtonsoft.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\remotion.linq\\2.1.1\\lib\\netstandard1.0\\Remotion.Linq.dll\" /reference:\"D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Semp.Infrastructure\\bin\\Release\\netcoreapp2.1\\Semp.Infrastructure.dll\" /reference:\"D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Modules\\Semp.Module.Cms\\bin\\Release\\netcoreapp2.1\\win-x64\\Semp.Module.Cms.dll\" /reference:\"D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Modules\\Semp.Module.Core\\bin\\Release\\netcoreapp2.1\\win-x64\\Semp.Module.Core.dll\" /reference:\"D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Modules\\Semp.Module.Localization\\bin\\Release\\netcoreapp2.1\\win-x64\\Semp.Module.Localization.dll\" /reference:C:\\Users\\AndersonN.nuget\\packages\\serilog\\2.6.0\\lib\\netstandard1.3\\Serilog.dll /reference:C:\\Users\\AndersonN.nuget\\packages\\serilog.extensions.logging\\2.0.2\\lib\\netstandard2.0\\Serilog.Extensions.Logging.dll /reference:C:\\Users\\AndersonN.nuget\\packages\\serilog.settings.configuration\\2.6.1\\lib\\netstandard1.6\\Serilog.Settings.Configuration.dll /reference:C:\\Users\\AndersonN.nuget\\packages\\serilog.sinks.file\\3.2.0\\lib\\netstandard1.3\\Serilog.Sinks.File.dll /reference:C:\\Users\\AndersonN.nuget\\packages\\serilog.sinks.rollingfile\\3.3.0\\lib\\netstandard1.3\\Serilog.Sinks.RollingFile.dll /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\sqlitepclraw.bundle_green\\1.1.7\\lib\\netcoreapp\\SQLitePCLRaw.batteries_green.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\sqlitepclraw.bundle_green\\1.1.7\\lib\\netcoreapp\\SQLitePCLRaw.batteries_v2.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\sqlitepclraw.core\\1.1.7\\lib\\netstandard1.1\\SQLitePCLRaw.core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\sqlitepclraw.provider.e_sqlite3.netstandard11\\1.1.7\\lib\\netstandard1.1\\SQLitePCLRaw.provider.e_sqlite3.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\stackexchange.redis.strongname\\1.2.4\\lib\\netstandard1.5\\StackExchange.Redis.StrongName.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.AppContext.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Buffers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Collections.Concurrent.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Collections.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Collections.Immutable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Collections.NonGeneric.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Collections.Specialized.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.ComponentModel.Annotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.ComponentModel.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.ComponentModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.ComponentModel.EventBasedAsync.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.ComponentModel.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.ComponentModel.TypeConverter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Console.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Data.Common.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Data.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.data.sqlclient\\4.4.3\\ref\\netstandard2.0\\System.Data.SqlClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Diagnostics.Contracts.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Diagnostics.Debug.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Diagnostics.DiagnosticSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Diagnostics.FileVersionInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Diagnostics.Process.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Diagnostics.StackTrace.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Diagnostics.TextWriterTraceListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Diagnostics.Tools.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Diagnostics.TraceSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Diagnostics.Tracing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Drawing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Drawing.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Dynamic.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Globalization.Calendars.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Globalization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Globalization.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.identitymodel.tokens.jwt\\5.1.4\\lib\\netstandard1.4\\System.IdentityModel.Tokens.Jwt.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.interactive.async\\3.1.1\\lib\\netstandard1.3\\System.Interactive.Async.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.IO.Compression.Brotli.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.IO.Compression.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.IO.Compression.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.IO.Compression.ZipFile.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.IO.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.IO.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.IO.FileSystem.DriveInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.IO.FileSystem.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.IO.FileSystem.Watcher.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.IO.IsolatedStorage.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.IO.MemoryMappedFiles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.IO.Pipes.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.IO.UnmanagedMemoryStream.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Linq.Expressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Linq.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Linq.Queryable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.HttpListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.Mail.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.NameResolution.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.NetworkInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.Ping.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.Requests.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.ServicePoint.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.Sockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.WebClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.WebHeaderCollection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.WebProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.WebSockets.Client.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Net.WebSockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Numerics.Vectors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.ObjectModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Reflection.DispatchProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Reflection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Reflection.Emit.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Reflection.Emit.ILGeneration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Reflection.Emit.Lightweight.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Reflection.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Reflection.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Reflection.TypeExtensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Resources.Reader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Resources.ResourceManager.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Resources.Writer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.4.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Runtime.CompilerServices.VisualC.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Runtime.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Runtime.Handles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.RuntimeInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.WindowsRuntime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Runtime.Loader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Runtime.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Runtime.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Formatters.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.4.0\\ref\\netstandard2.0\\System.Security.AccessControl.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Security.Claims.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Security.Cryptography.Algorithms.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Security.Cryptography.Csp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Security.Cryptography.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Security.Cryptography.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Security.Cryptography.X509Certificates.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.cryptography.xml\\4.4.2\\ref\\netstandard2.0\\System.Security.Cryptography.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Security.Principal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.principal.windows\\4.4.0\\ref\\netstandard2.0\\System.Security.Principal.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Security.SecureString.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.ServiceModel.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.ServiceProcess.dll\" /reference:C:\\Users\\AndersonN.nuget\\packages\\system.spatial\\5.8.2\\lib\\netstandard1.1\\System.Spatial.dll /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Text.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Text.Encoding.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.text.encodings.web\\4.4.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Text.RegularExpressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Threading.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Threading.Overlapped.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Threading.Tasks.Dataflow.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Threading.Tasks.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Threading.Tasks.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Threading.Tasks.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Threading.Thread.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Threading.ThreadPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Threading.Timer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Transactions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Transactions.Local.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.ValueTuple.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Web.HttpUtility.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Xml.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Xml.ReaderWriter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Xml.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Xml.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Xml.XmlDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Xml.XmlSerializer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Xml.XPath.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\System.Xml.XPath.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0-rc1\\ref\\netcoreapp2.1\\WindowsBase.dll\" /debug+ /debug:portable /filealign:512 /optimize+ /out:obj\\Release\\netcoreapp2.1\\win-x64\\Semp.WebHost.dll /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\Team Tools\\Static Analysis Tools\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:exe /warnaserror- /utf8output /deterministic+ /analyzer:C:\\Users\\AndersonN.nuget\\packages\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.Analyzers.dll /analyzer:C:\\Users\\AndersonN.nuget\\packages\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.CSharp.Analyzers.dll Extensions\\ApplicationBuilderExtensions.cs Extensions\\ServiceCollectionExtensions.cs MigrationSimplDbContextFactory.cs Migrations\\20180307191336_Initial.cs Migrations\\20180307191336_Initial.Designer.cs Migrations\\20180411113524_CMS.cs Migrations\\20180411113524_CMS.Designer.cs Migrations\\20180502184325_Page.cs Migrations\\20180502184325_Page.Designer.cs Migrations\\SimplDbContextModelSnapshot.cs Models\\ErrorViewModel.cs Program.cs Startup.cs \"C:\\Users\\AndersonN\\AppData\\Local\\Temp.NETCoreApp,Version=v2.1.AssemblyAttributes.cs\" obj\\Release\\netcoreapp2.1\\win-x64\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs obj\\Release\\netcoreapp2.1\\win-x64\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs obj\\Release\\netcoreapp2.1\\win-x64\\TemporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs obj\\Release\\netcoreapp2.1\\win-x64\\Semp.WebHost.AssemblyInfo.cs /warnaserror+:NU1605\nCSC(0,0): Error CS0006: Metadata file 'D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Modules\\Semp.Module.Cms\\bin\\Release\\netcoreapp2.1\\win-x64\\Semp.Module.Cms.dll' could not be found\nCSC(0,0): Error CS0006: Metadata file 'D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Modules\\Semp.Module.Core\\bin\\Release\\netcoreapp2.1\\win-x64\\Semp.Module.Core.dll' could not be found\nCSC(0,0): Error CS0006: Metadata file 'D:\\PROJETOS SEMP\\Projeto Piloto\\Semp\\Modules\\Semp.Module.Localization\\bin\\Release\\netcoreapp2.1\\win-x64\\Semp.Module.Localization.dll' could not be found\n6>Build failed. Check the Output window for more details.\n========== Build: 5 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\n========== Publish: 0 succeeded, 1 failed, 0 skipped ==========\n```\nlog (tmp)\n``\n09/05/2018 08:43:16\nSystem.AggregateException: One or more errors occurred. ---> System.Exception: Build failed. Check the Output window for more details.\n   --- End of inner exception stack trace ---\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\n   at Microsoft.VisualStudio.Web.Publish.PublishService.VsWebProjectPublish.<>c__DisplayClass41_0.<PublishAsync>b__2()\n   at System.Threading.Tasks.Task1.InnerInvoke()\n   at System.Threading.Tasks.Task.Execute()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.VisualStudio.ApplicationCapabilities.Publish.ViewModel.ProfileSelectorViewModel.d__116.MoveNext()\n---> (Inner Exception #0) System.Exception: Build failed. Check the Output window for more details.<---\n===================\n```\n\n\nI'm also sending the code to github. Project 1: WebHost.csproj\n```xml\n\n\nnetcoreapp2.1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nProject 2: Module.Core.csproj\n```xml\n\n\nnetcoreapp2.1\nfalse\nfalse\nLibrary\n\n\n\n\n\n\n\n\n\n\n\n```. Project on GitHub\nhttps://github.com/afernandes/Projeto-Piloto. I finally succeeded, but only with SelfContained marked as false and removing the RuntimeIdentifier tag.. however, marking the SelfContained as true I have to select the RuntimeIdentifier again to happen the same error.. ",
    "Oj18": "Code isn't working in markdown, I might be doing it incorrect though.. Code isn't working in markdown, I might be doing it incorrect though.. Oh, how do I upgrade to 2.0? It doesn't show up as an option.... Oh, how do I upgrade to 2.0? It doesn't show up as an option.... Updating Visual Studio, I'll try it. Thanks for your help.. Updating Visual Studio, I'll try it. Thanks for your help.. ",
    "elmagekmosaad": "sorry but i need help in telesharp can u help me?. sorry but i need help in telesharp can u help me?. ",
    "sherry-ummen": "Thanks @Petermarcu .\nI was particularly interested on the Native code\n1) How do you test the native code? What framework is being used?\n2) So then there must some some .Net framework code still shared with .Net core? Was it written in C++? Could you actually point me to an example .Net core code which is actually calling the Native old code?\nSorry I am just starting to learn about this whole new era of .Net and how it evolved. If you have pointers or articles to it. Then please post it here. Thanks once again.. Thank you very much. This was very helpful. I will close this issue now.. ",
    "OlivChu": "@richlander  Thanks!. ",
    "jakubaleksanderpolkowski": "I all ready run this as sudo, I even gave CAP_NET_RAW capability to this program. ",
    "James2397": "Here is a comparison by a tech blogger and it summarizes what we have been experiencing: http://theburningmonk.com/2017/06/aws-lambda-compare-coldstart-time-with-different-languages-memory-and-code-sizes/. The below blog article also shows how .Net Core serverless code is significantly slower than all other languages, and the main language it is most similar too - Java - is actually the quickest for cold starts: \nhttps://read.acloud.guru/comparing-aws-lambda-performance-when-using-node-js-java-c-or-python-281bef2c740f\nSummary: .Net Core was over 5 times slower than Java in those tests for cold start serverless invocation. \nHopefully, this can be looked at soon because it is bad for our customers if we use .Net Core and this happens regularly. Java being the fastest shows that it should be possible for a language like C# to achieve similar positive results.. A lot of customers are using .Net Core 1.0 (.Net Stardard 1.6) because that is what AWS supports for most features (like Lambda serverless) where cold-start time is critical. No serverless provider currently has support for .Net 2.0 yet. In Azure you can manually hack the configs to get .Net Core 2.0 working but I don't think it would be operating in an optimized way when it's not fully supported in the UI yet. Nobody can do the .Net 2.0 numbers yet because AWS and Azure does not fully support .Net Core 2.0 yet. What I do know from working on a few non-serverless .Net Core 2.0 projects recently though, is the startup time is better than .Net 1.0 but not significantly better - the cold start time is still an issue.. In regards to the size, in Node we can have some scripts that are a few KB to the do the same job in .Net is 10-20mb because of the tree of dependencies that are pulled in Microsoft .Net Core framework and externally. For example, we may only use 1 tiny enum from a dependency dll and it bings in the whole 5mb dll instead of only the code for the 1 enum that is < 1KB. Our function sizes in .Net Core are on average 100's of times the size of the equivalent in Node because of the 'publish' command bringing in whole dlls, and things we don't need or will ever use - and the code never references. Traditional systems where space was not a concern this is fine, however for serverless where cold-start is most important and every large chunk of unrequired code slows down the loading of the function, it would be good to get dll's cut-down and optimized to be smaller and faster, or removed all together if the code never uses classes/methods/properties from that dll (I am particularly talking about dependencies of dependencies). . @Petermarcu the article states a few sentences in \"we\u2019ll ignore the initial cold start time\u200a\u2014\u200aand focus only on the duration metric to compare runtime\".  There was no questions about the run-time performance of .Net, which we know is good - what was, was the lengthy cold-start duration that is affecting a lot of web platforms that want to scale up serverless fast. In serverless, sometimes you will get a request that takes 90ms, then another time because it is going through a cold start it takes multiples of that (plus the time the host times to start the new VM). The other blog posts I listed demonstrated the slower cold-start time of .net core.. @asabla you beat me to it ;). ",
    "kannank": "Is there any update in the issue. Has there been any noticeable improvements in 2.0. ",
    "dotnetchris": "FWIW AWS supports Core 2.0 now in lambdas, added support early 2018.. ",
    "jansabbe": "I ran the benchmarks from theburningmonk again using .net core 2.0 (and adding golang as well). See my results here: https://plot.ly/%7Ejansabbe/6/csharp-java-python-nodejs6-golang/ .Net core 2.0 is faster than java, but still way slower than nodejs/python or Go.\nInterestingly, filesize doesn't matter that much. The .net core 2.0 deployment package was around 200K, while the golang deployment package was close to 3MB. Go was still an order of a magnitude faster for simply responding \"hello\". Not sure if this is a .net issue, seems more like something is weird at AWS.. I ran the cold-start benchmark from theburningmonk again for 2.0 and 2.1. \n\nResults: https://plot.ly/~jansabbe/6/csharp20-csharp21-java-python-nodejs8-golang/#/\nCode: https://github.com/jansabbe/lambda-coldstart-comparison\n\nThere seems to be an improvement in the case of 512mb, but other than that 2.0 and 2.1 are pretty similar for cold starts. Both versions are faster than Java. Still a long road ahead to compete with NodeJS, Go or Python \ud83d\ude09 \nNo idea if it is possible to deploy crossgenned, ReadyToRun images to AWS. Might help for cold-starts.. ",
    "asabla": "Sadly @Petermarcu they're excluding cold startup time\n\nSimilar to the original performance tests, we\u2019ll ignore the initial cold start time\u200a\u2014\u200aand focus only on the duration metric to compare runtime performance between the different languages. \n",
    "neilgallagher": "Second that. Would love to see a comparison on startup times especially between 2.0 and 2.1. Also are there any articles on what the cold start improvements are in 2.1? Thanks. ",
    "sunandabalu": "@chcosta @Petermarcu . https://github.com/dotnet/core/pull/1069. Emptied out netci.groovy per https://github.com/dotnet/core/issues/1068. @mmitche @Petermarcu . The line below this calls out the documentation link. See below.. @chcosta  and I synced offline on this, the Name section will remain the same as the CLI Bootstrapping Tool is not getting deprecated just the underlying implementation is. . @Petermarcu has filed an issue to figure that out - https://github.com/dotnet/core/issues/1068 . I have a separate PR to empty out the netci.groovy - https://github.com/dotnet/core/pull/1069. ",
    "MagicJohnJang": "Duplicate to https://github.com/dotnet/core/pull/1058. ",
    "mstfcck": "As I see it in the API, can you check it again?\nhttps://docs.microsoft.com/en-us/dotnet/api/?term=TransactionScope&view=netcore-2.0. ",
    "Marksion08": "Final solution:\nGo to default user directory cd ~, and add below export PATH=\"$PATH:/usr/local/share/dotnet\" line to the end of ~/.zshrc file \ncd ~\nvim ~/.zshrc\nexport PATH=\"$PATH:/usr/local/share/dotnet\"  # Append this line to end.\nGood luck!\n. ",
    "Beckilicki": "Thank you for reply on such short notice, that fixed the issue.. ",
    "martincostello": "The download link for the 32-bit SDK binaries (https://download.microsoft.com/download/5/C/1/5C190037-632B-443D-842D-39085F02E1E8/dotnet-sdk-2.0.3-win-x86.zip) does not appear to work.\n\n. The same inconsistencies are in the older file format too:\n2.2.1:\nhttps://github.com/dotnet/core/blob/0a53ce5d8b0700dd8db0784c208bfb8db47a42d4/release-notes/releases.json#L353\nhttps://github.com/dotnet/core/blob/0a53ce5d8b0700dd8db0784c208bfb8db47a42d4/release-notes/releases.json#L366\n2.2.2:\nhttps://github.com/dotnet/core/blob/0a53ce5d8b0700dd8db0784c208bfb8db47a42d4/release-notes/releases.json#L29\nhttps://github.com/dotnet/core/blob/0a53ce5d8b0700dd8db0784c208bfb8db47a42d4/release-notes/releases.json#L42\n. Thanks @leecow - I don't have a strong opinion regarding the rid being empty, I was just looking at it to be reactive to the change if it wasn't a mistake.\nIf the original assumptions our automation solution made were correct and this was just an unfortunate mistake, then I guess I can just remove the changes I made to work around this earlier today.. ",
    "acjh": "Issue title and heading says September, but description and announcement says November.. No worries, but the heading still says September.. Duplicate of #1083. Duplicate of #1083. Duplicate of #1083. ",
    "DavBrennan": "Although dotnet-sdk-2.0.3 rpm is in the repository it does not appear to be set to upgrade previous installs. So yum update does not install the new version. I noted that dotnet-host 2.0.3 has been updated automatically. Is this correct? Can 2.0.3 sdk be installed without removing 2.0.0. Not really going to be a problem we package our apps as rpms so can require 2.0.3 to get it installed. I assume from the above that 2.0.0 can be removed without hurting 2.0.3. @leecow - you could create an empty parent rpm say dotnet-update that uses weak Recommends instead of Requires. That would pull new versions of the sdk but would also allow old versions to be removed. See https://fedoraproject.org/wiki/Packaging:WeakDependencies. ",
    "CRCinAU": "With the packaging for CentOS, did the location of the dotnet binary change between dotnet-host-2.0.0-1.x86_64 and dotnet-host-2.0.3-1.x86_64?\nI noticed that 'dotnet' is not in any of the default paths after the upgrade, but the binary is present as /usr/share/dotnet/dotnet\nThis broke every one of our apps that use 'dotnet' as included in the system path.\nI'm not sure where the spec files are for the creation of these packages, so I can't take a look at how it was done.... Hrrrm - in the .spec world, you'd do something like this:\n%preun\nif [ $1 = 0 ]; then\n   unlink /usr/bin/dotnet\nfi\nThis roughly translates to: If we're uninstalling (hence %preun), and we don't have any newer version installed, run the script.\nRunning a complete script file in what I assume is the %post or %preun sections of the RPM installation - I'm not sure there is an easy way to achieve the same - unless you can pass the same $1 to the script and evaluate it in said script.... Just wanted to poke this for comment... The more we deploy this, the more difficult it will be as time goes by to shift things to whatever method is chosen in the long run..... Plus, I've been packaging stuff targeting RHEL/CentOS environments for 10+ years - so happy to provide input - or even contribute - but that assumes knowing what the plan is :). ",
    "chenowen": "I got an asp.net application which is using 2.0.0, and im try to upgrade to 2.0.3. \nThe 2.0.3 SDK has intall, but i can't upgrade Microsoft.NetCore.App in Nuget. It says i need to upgrade my SDK, which i already did.\nWhat am i missing?. @Petermarcu I use vs 15.4 to create the project, but the project file missing one configuration <RuntimeFrameworkVersion/>. I have to open the project file and add it manually to fix the issue.. @Petermarcu Because of i want to upgrade to EF core 2.0.3. @Petermarcu That doesn't help. \n\n\nI have to add <RuntimeFrameworkVersion/> to upgrade to 2.0.3.\n. @Petermarcu The issue is VS think the project is using dotnet core version 2.0.0, so it can't upgrade the ef core to 2.0.3. As ef core 2.0.3 require dotnet core 2.0.3.\n. ",
    "Ming-Sizung": "@chenowen I am able to confirm (using the gist here) even the visual studio reports that the project is running against dotnet core version 2.0.0, the actual runtime is still going to be the latest version, aka 2.0.3.\n@Petermarcu I can see it is very confusing for developers who struggle to confirm if everything is up-to-date. Would love to see this display version get fixed.. @Petermarcu I understand it should be the real behavior. But if you go to \"Manage NuGet Packages\" for a project (targeting netcoreapp20), it will still report its running against Microsoft.NetCore.App version 2.0.0 instead of 2.0.3.. ",
    "EriGH": "Hello, after updating to DotNetCore.1.0.8_1.1.5-WindowsHosting.exe, installation removed the AspNetCoreModule from IIS modules on Windows 2012 R2 Server and I'm unable to run IIS hosted appliaction. Previous version is OK. Does anyone have the same problem? Thank you. ",
    "olakara": "I have created a PR for this #1089. ",
    "eaglexiang": "Thanks for reply, this is my environment:\nOS: ArchLinux\ndotnet: 2.0.2\nBTW, do you mean incremental build is only supported by msbuild but not dotnet? \nI tried dotnet run but still happened 'rebuild'.. Thanks for reply, this is my environment:\nOS: ArchLinux\ndotnet: 2.0.2\nBTW, do you mean incremental build is only supported by msbuild but not dotnet? \nI tried dotnet run but still happened 'rebuild'.. No output show that files're rebuilt. I judge it with the time dotnet run waste. In Visual Studio I can run bin output directly, so 2nd time is quickier than 1st. But time taken in first and second times are same with dotnet core on Linux.. Sorry I fixed my words.. @stephentoub yes I do have loop, sorry and I've fixed my code on 1F.. @richlander Thank you for reply! I'm still trying to recurrent and find true reason for that bug. Please close this issue for now. Thank you two very much!. @dasMulli Thank you! While I'm wondering if I should run TERM=xterm after launch a new console each time, or just enter it into auto-start files like .xinitrc?. ",
    "pavankoppineni": "@zhenlan , following is the code snippet we are using.\n// PUT: api/Default/5\n        [HttpPut(\"{id}\")]\n        public void Put(int id, [FromBody]string value)\n        {\n        }\nWhen I try to call Put action from UI, it is giving me following error.\nCould not load file or assembly 'System.ComponentModel.TypeConverter, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.\nFor our project, we are using Newtonsoft.Json 10.0.3. It internally uses System.ComponentModel.TypeConverter, Version=4.3.0.. @zhenlan, it is .netcore 1.1. \n. ",
    "pavangayakwad": "I extracted it to /opt/dotnet folder and created symbolic link in /usr/local/bin.\nWhen I run for dotnet --version, it is showing me the same error\n. ok, tried this as well. but no luck same error. \nMy project targets 2.0 and if I run it against download 2.1 run-time, ideally it should run without any problem. wouldn't it?. Ok, after following instructions from here https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md, I was able to run the app. \noh man! It took 2 days for me to figure out all these. anyway, wondering, why not include all these in the first place? . ",
    "kensel": "From your last line it appears that the systemd does work, as the exit status is 0 or Successful.\n\nsudo systemctl status websensor.service gives (code=exited, status=0/SUCCESS)\n\nIs your WebSensor.dll setup to start and then monitor the directory for files, or when it is run does it do a one time scan and then import the xml to your DB?\nIf it is the first, you will want to write a wrapper to run it every so often or monitor the directory for updates and run as needed.\nIf the second, Then there doesn't seem to be enough info to identify the cause.  Do you have anything in the application code that would trigger a successful exit?\nAs a novice programer and as a system admin, this is what I understand from what is provided.\nHope it helps, I'll watch for an update.\n. ",
    "marek287": "Program will check url http://ipadress/values.xml file after certain time:\nstatic void Main(string[] args)\n{\n    Timer sensorTimer = new Timer(2000); // 90000ms = 15 minutes\n    sensorTimer.Elapsed += SesorTimer_Ellapsed;\n    sensorTimer.Start();\n    Console.ReadLine();\n  }\nResult success I can check from database or write something to console.. Thank you @svick. I change my code not to use timer and service. I made schedule task to run this application after 15minutes with cron.\ncrontab -e\n*/15 * * * * /opt/dotnet/dotnet /var/aspnetcore/websensor/WebSensor.dll. ",
    "aswanevelder": "Apologies found it:\nsudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\nsudo apt-get update\nsudo apt-get install dotnet-sdk-2.0.2. Not sure why supervisor does not work anymore, but anyway, found this article from Microsoft to use systemd instead of supervisor and it worked first time. If you experience the same issue then view this article, super easy to implement.\nhttps://docs.microsoft.com/en-us/aspnet/core/publishing/linuxproduction?tabs=aspnetcore2x. ",
    "baronntambwe": "I am getting exactly the same issue while trying to build the docker image.. ",
    "17plus9": "Target must be set to netcoreapp instead of netcorestandard.. ",
    "sbsw": "I just found this thread via Google search.  I have VS 2017, version 15.7.3.  NuGet is version 4.6.0.  If I create a new ASP.Net Core app (either an API or a Web App), the template gives me Microsoft.AspNetCore.All v2.0.8.  In either project, on either of two computers (with identical VS versions), when I ask NuGet to upgrade Microsoft.AspNetCore.All to 2.1.0, it says:\n\nPackage restore failed. Rolling back package changes for 'MyProject'.\nPackage Microsoft.AspNetCore.All 2.1.0 is not compatible with netcoreapp2.0 (.NETCoreApp,Version=v2.0). Package Microsoft.AspNetCore.All 2.1.0 supports: netcoreapp2.1 (.NETCoreApp,Version=v2.1). Thank you so much for the quick reply!\n\nUh....  can you translate that to \"here's what you need to do to fix it\"?  The meta package is, presumably, the preferred way for customers like me to get all of the Asp.Net Core goodness.  I don't understand how \"you can't upgrade to the newer version\" can be intentional behavior.\nIs there a workaround that involves, for example, uninstalling the meta package and then installing a newer version of the meta package?\n. Aha!  Yes, I had installed the updated SDK, but it never occurred to me to try to create a fresh, new project from the templates.  That does, indeed, create a core 2.1 project.\nAnd, FYI, I had previously posted this same question as a reply to a different GitHub issue dealing with this same problem.  I got a reply saying that this would probably be fixed in the next VS release.\nLife is good.  Thank you!. ",
    "HNeukermans": "installing vs 15.7.5 fixed my problem. ",
    "Kcraghunathan": "upgrading to vs 15.7.5 fixed my problem as well. ",
    "AdamJachocki": "Hi, I have similar issue.\nVS version: 15.7.5\nNuGet version: 4.6.0\nAfter creating brand new .NetCore 2 API project, I cannot build it. The error is:\nNU1202  Package Newtonsoft.Json 10.0.1 is not compatible with netcoreapp2.0 (.NETCoreApp,Version=v2.0). Package Newtonsoft.Json 10.0.1 does not support any target frameworks.              \nI have tried restoring packages, even reinstalling Visual Studio, but did not get any results.\nThe biggest problem is that I got this error on my application. My app consists of several projects. One of them is .NetCore 2 Api. The other is Winforms client. Everything worked fine, but suddenly I wasn't able to connect with my client to WebApi (server was closing the connection). After a little digging, I found out that there is a problem with... Newtonsoft.Json 10.0.1.... on server side.\nSo now, nothing works. Even if I try to create brand new solution with just one default project. \nThis is very urgent, as I asm suppose to present my application to the client. And I can't.... For me the solution was to... reinstall system :-/. ",
    "onahirniak": "Hello everyone, have the similar issue with Package Polly 6.0.1 is not compatible with netcoreapp2.0 (.NETCoreApp,Version=v2.0). Package Polly 6.0.1 does not support any target frameworks.\nVS: 15.7.6\nNuGet: 4.6.0\ndotnet:\n.NET Core SDK (reflecting any global.json):\n Version:   2.1.302\n Commit:    9048955601\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.15063\n OS Platform: Windows\n RID:         win10-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.302\\\nHost (useful for support):\n  Version: 2.1.2\n  Commit:  811c3ce6c0\n.NET Core SDKs installed:\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\nTo install additional .NET Core runtimes or SDKs:\n  https://aka.ms/dotnet-download\n. ",
    "maddy027": "I am also getting the same error . Is this issue still open. Please help . Updating the VS to 15.7.6  solved the issue. ",
    "justinr636": "I've been having the same issue. My project used to build without any problems. I had unrelated issues and did a system restore which interfered with my VS installation. I re-installed Visual Studio and have been unable to build my project ever since.\nThis has been really frustrating. I've re-installed visual studio, .net core, and all .net related programs countless of times. Nothing seems to resolve the issue. \nError Message for essentially any package:  NU1202 - Package * .. is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package * .. does not support any target frameworks.\nVS Community 2017: 15.8.3\nNuGet: 4.6.0\ndotnet:\n.NET Core SDK: 2.1.401\nOS: Windows 10 Home\n. ",
    "Mikaka27": "Hi,\nI have the same problem as justinr646 above. It also started when I did a system restore.\nI did try to revert a system restore, but to no avail.\nWhen I open Visual Studio I see the problem that Microsoft.VisualStudio.ServiceModel did not load correctly.\nThis is the log from ActivityLog.xml:\n<entry>\n    <record>653</record>\n    <time>2018/09/16 19:15:31.186</time>\n    <type>Information</type>\n    <source>VisualStudio</source>\n    <description>Begin package load [Microsoft.VisualStudio.ServiceModel.VisualStudioPackage, Microsoft.VisualStudio.ServiceModel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]</description>\n    <guid>{2C0F61BF-3C36-468C-94B8-4021965749E7}</guid>\n  </entry>\n  <entry>\n    <record>654</record>\n    <time>2018/09/16 19:15:31.195</time>\n    <type>Error</type>\n    <source>VisualStudio</source>\n    <description>CreateInstance failed for package [Microsoft.VisualStudio.ServiceModel.VisualStudioPackage, Microsoft.VisualStudio.ServiceModel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]Source: &apos;mscorlib&apos; Description: Could not load file or assembly &apos;Microsoft.VisualStudio.ServiceModel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&apos; or one of its dependencies. The system cannot find the file specified.&#x000D;&#x000A;System.IO.FileNotFoundException: Could not load file or assembly &apos;Microsoft.VisualStudio.ServiceModel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&apos; or one of its dependencies. The system cannot find the file specified.&#x000D;&#x000A;File name: &apos;Microsoft.VisualStudio.ServiceModel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&apos;&#x000D;&#x000A;   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)&#x000D;&#x000A;   at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)&#x000D;&#x000A;   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)&#x000D;&#x000A;   at System.Activator.CreateInstance(String assemblyString, String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, Evidence securityInfo, StackCrawlMark&amp; stackMark)&#x000D;&#x000A;   at System.Activator.CreateInstance(String assemblyName, String typeName)&#x000D;&#x000A;   at System.AppDomain.CreateInstance(String assemblyName, String typeName)&#x000D;&#x000A;&#x000D;&#x000A;WRN: Assembly binding logging is turned OFF.&#x000D;&#x000A;To enable assembly bind failure logging, set the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog] (DWORD) to 1.&#x000D;&#x000A;Note: There is some performance penalty associated with assembly bind failure logging.&#x000D;&#x000A;To turn this feature off, remove the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog].&#x000D;&#x000A;</description>\n    <guid>{2C0F61BF-3C36-468C-94B8-4021965749E7}</guid>\n    <hr>80004005 - E_FAIL</hr>\n    <errorinfo></errorinfo>\n  </entry>\nAlso when I build the project I see this in output window:\nThe library 'hostpolicy.dll' required to execute the application was not found in <path>\nCould this have to do something with the package restore issue?. ",
    "wgutierrezr": "Still having this issue with ASP.Net Core 2.1.5 and NetStandard 2.0.\nError NU1201  Project EMS.Service is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project EMS.Service supports: netcoreapp2.1 (.NETCoreApp,Version=v2.1)   EMS.UIService   C:\\Projects\\EMS2\\EMS\\EMS.UIService\\EMS.UIService.csproj\nPlease someone can help in solving this issue?\nreference: https://github.com/ianbusko/reusable-components-library\nRegards\n. ",
    "jsantosh14": "Am using visual studio 2017 (v15.8.7) I download azure web job sdk(https://github.com/Azure/azure-webjobs-sdk) src code and tried to build I am getting this error \nSeverity    Code    Description Project File    Line    Suppression State\nError   NU1202  Package System.Text.Encoding 4.3.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package System.Text.Encoding 4.3.0 supports:\n  - portable-net45+win8+wp8+wpa81 (.NETPortable,Version=v0.0,Profile=Profile259)\n  - win8 (Windows,Version=v8.0)\n  - wp8 (WindowsPhone,Version=v8.0)\n  - wpa81 (WindowsPhoneApp,Version=v8.1)\n  - xamarinios10 (Xamarin.iOS,Version=v1.0)\n  - xamarinmac20 (Xamarin.Mac,Version=v2.0)\n  - xamarintvos10 (Xamarin.TVOS,Version=v1.0)\n  - xamarinwatchos10 (Xamarin.WatchOS,Version=v1.0) WebJobs.Logging.FunctionalTests E:\\azure-webjobs-sdk-dev\\test\\Microsoft.Azure.WebJobs.Logging.FunctionalTests\\WebJobs.Logging.FunctionalTests.csproj    1   \nHere are my installed dotnet core sdk details\n\n. @karelz I cloned the repo from GitHub and just built it. that's an official Azure SDK. I didn't add/modify anything. Please let me know if I should open a new issue.\n. ",
    "jlahteen": "Thanks for the answer. It's great that CodeDom is available for .NET Core since it enables dynamic code compilation for different scenarios.\nHowever, the current version of System.CodeDom throws PlatformNotSupported for every CompileAssembly* method of CSharpCodeGenerator since they all end up to the method FromFileBatch which throws that exception systematically. Just wondering whether this is still the current state of development or should it already work. Everything works well in my experiment project if I just change the target framework from netcoreapp2.0 to net462.. ",
    "dgamma3": "I'm getting the same issue as @jlahteen, how do we resolve it?. ",
    "fbarletta": "I don\u2019t\nIt\u2019s a very complex app and striping it down would be impossible at this\npoint.\nOn November 29, 2017 at 2:06 AM, Rich Lander notifications@github.com\nwrote:\nDo you have a minimal repro you can share?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/1119#issuecomment-347771820, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AEHAc0jGGZ6M5XXTyCLAG78ESwFove64ks5s7QJ3gaJpZM4QuKAn\n.\n. I will mention that it works perfectly on Windows 10. It's multiple apps we've created and we used to be able to run on dotnetcore 1.0 on osx 10.12 but we've since iterated the products and haven't used os x until now. It's a stopper for us so any help is appreciated.\nIs there no compatibilty with os High Sierra?. When I run the command dotnet publish -r osx.10.12-x64 it creates the\nfolder properly. Then, I enter the folder and dotnet run and I get an\nerror Couldn't find a project to run. etc\nOn Wed, Nov 29, 2017 at 12:45 PM, Peter Marcu notifications@github.com\nwrote:\n\nAre you able to dotnet publish -r osx.10.12-x64 and then run the\nresulting output in the publish folder?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/1119#issuecomment-347939508, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AEHAc8tB0e7Ag__q9WD4TPJARdo7AOWZks5s7ZhHgaJpZM4QuKAn\n.\n\n\n-- \nFrancis Barletta\nCEO\nUPTOP\nwww.liveuptop.com\n. run <appname> does not work. I'm using Terminal on OSX.\nYes, dotnet run is for dev and this is dev at the moment. When we push to production, we publish.\nThe problem is, we cannot get the dev environment to run on OSX.. I just ran some tests and found out that project creates\nprojectname.projectname\nI've read this is an issue on osx high sierra\nOn Wed, Nov 29, 2017 at 2:23 PM, Peter Marcu notifications@github.com\nwrote:\n\nNote that dotnet run is really just for development. We should figure out\nhow to make it work but once you have an app you want to run in production,\nyou should always publish it and not use dotnet run.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/1119#issuecomment-347967908, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AEHAcwlniHEdEfIXgqwGb0RlwgPleKThks5s7a9CgaJpZM4QuKAn\n.\n\n\n-- \nFrancis Barletta\nCEO\nUPTOP\nwww.liveuptop.com\n. ",
    "pinterl": "@Petermarcu @livarcocc @richlander \nWhen I internalize the dot net core package with \nchoco download dotnetcore-sdk --internalize\nI get the following list of NuGet packages in my working directory:\nchocolatey-core.extension.1.3.3.nupkg\nchocolatey-windowsupdate.extension.1.0.2.nupkg\ndotnetcore-sdk.2.0.3.nupkg\nKB2533623.1.0.2.nupkg\nKB2919355.1.0.20160915.nupkg\nKB2919442.1.0.20160915.nupkg\nKB2999226.1.0.20170509.nupkg\nKB3033929.1.0.3.nupkg\nKB3035131.1.0.1.nupkg\nvcredist140.14.11.25325.0.nupkg\nvcredist2015.14.0.24215.20170201.nupkg\nIs this list scripted in the dotnet core Chocolatey package, or it is based on the operating system I run the internalize command?. Thank you for following up. Yes, it is the correct package. It looks like I did not post the error at the correct forum. I have contacted the authors through Chocolatey.\n. ",
    "hallambaker": "One thing I would like is single file .exe files that run just like any other .exe on a particular platform. I don't mind having to cut a different .exe for each platform because the loader file formats are different. I would much prefer that over having to use dotnet foo.exe\nYes, I know that there are third party, unsupported tools. But none of those will cut .NET Core 2.0 executables right now. I am using iLmerge to produce single file .exes for Windows platform using .net framework.\nAnother is I would like to be able to distribute code in the platform specific distribution formats. That is a .dmg for OSX, a Debian package for Linux, an MSI for Windows. I have Wix in my tool chain to do that for Windows. It would be nice if I could cut the platform executables for OSX and Debian at the same time. \nWhat I like about .NET versus Java is that it allows me to build platform specific versions of my code with native look and feel. Java is really great if you are happy with everything looking like it was written with the MIT Athena widgets from the 1980s. Windows 7 when it came out was the prettiest OS ever. OSX only caught up after Jobs passed on and all the skendomorphic crud was eliminated. I want native look and feel, including the installation experience.\nI do have some tools of my own that might help here. I use domain specific languages a lot. If I can find one worked example of how to do a thing, I can generalize. The only tooling challenge that might be faced in generating Debian packages is having to use .tar format rather than .zip. But the tool almost certainly exists in the windows system somewhere. There is already something to build .apps but I didn't write down the reference.\n. Thank you for considering the proposal. How about if we could compromise with just enough of the runtime to pull the additional libraries from one location on the machine?\nHere is how I think it could work. Let us say that the user written parts of the program consists of program.dll and library.dll.\nprogram.exe = {bootstrap.dll + program.dll + library.dll}\nBootstrap.dll is a chunk of code that contains load on demand links for all the libraries referenced in program.dll and library.dll. It is also the code that is the entry point for the .exe.\nWhen invoked, the Bootstrap.dll code searches for dotnet.ext the same as if it had been typed on the command line. Then it uses the dlls in the same directory to resolve all references for linked libraries.\nThe combined effect is that we now have single file executables that will run on any platform without modification[*]. The only condition being that the executable for dotnet (or some new loader assistant) has to be in the search path or discoverable by some defined search scheme.\n[*] If the code requires platform specific code then it will be a different executable per platform of course. Cleaning up that issue can be left to a later point however.\n. ",
    "RUSshy": "+1 what i love about Apple is how easy it is to distribute programs, you only have to care about the .app and you ready to go, user don't have to figure out what .exe should they run in a folder with ton of different files. +1 what i love about Apple is how easy it is to distribute programs, you only have to care about the .app and you ready to go, user don't have to figure out what .exe should they run in a folder with ton of different files. ",
    "dorvan": "we have a portfolio of 10 and more application in .net running on Gentoo linux based production systems. We are interested in ebuild availability in official sources. At moment we use the ebuilds maintained by @mpkh  on offcial repo and overlay.. ",
    "jjindrich": "Yes, I will be happy to help you. What I found is that dotnet core is adding new repository which forces to use new OMI. \nProbably not working with OMI 1.4. which is required by dotnet core (https://www.microsoft.com/net/learn/get-started/linuxubuntu) - adding sourcelist repo with new OMI\nTested on clean server: when I install Ubuntu 16.04 and deploy OMS agent, is reporting all data correctly. When I deploy DotNet Core, is omi updated to 1.4.1 version and OMS agent is not working properly. Data are missing in OMS portal.. ",
    "EdiWang": "Seems VS2017 tooling is not support .NET Core 2.1.2 even in VS2017 15.5.1. I can't change target framework to .NET Core 2.1, it only have 1.0,1.1,2.0. If I modify the csproj file manually. VS won't compile the code:\nThe current .NET SDK does not support targeting .NET Core 2.1.  Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1\nI think the runtime is also 2.1.2, same as SDK version. Because running \"dotnet --version\" gives me 2.1.2 on a VS2017 15.5.1 installed machine.. @Petermarcu so \"dotnet --version\" returns 2.1.2 that is the SDK version not runtime version? . ",
    "KathleenDollard": "Help for dotnet is not that easy to find, but it is correct for\ndotnet --version\nHow/where else do you think it should be documented? Blog post?\nI don't know about runtime caps, but I do not think that will be available to help us on the 2.1 SDK not supporting 2.1 runtime.\n\nFrom: Peter Marcu notifications@github.com\nSent: Friday, December 8, 2017 8:19:22 AM\nTo: dotnet/core\nCc: Kathleen Dollard; Mention\nSubject: Re: [dotnet/core] How do we download SDK 2.1.2? (#1131)\nWhat does dotnet --info return? The reality is that there can be more than one runtime available for an SDK. I believe there is a dotnet --list-runtimes command that was added recently that will give you all available runtime versions. Also, because you have have many versions, dotnet really needs to see the application you intend to run in order to say which framework it will run on. It may have explicitly set a framework version for example.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fcore%2Fissues%2F1131%23issuecomment-350304338&data=04%7C01%7Ckathleen.dollard%40microsoft.com%7Cc2413c69ba0b415bb5b008d53e577249%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636483467653285382%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwifQ%3D%3D%7C-1&sdata=p32gtxVDhgGRZPrcDQJESS9Su09GnAGz7ImZg7dMNSA%3D&reserved=0, or mute the threadhttps://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAFktXsr4ILNqg0xwQSuTtgGlf3-Su7Utks5s-WGKgaJpZM4Q4jUV&data=04%7C01%7Ckathleen.dollard%40microsoft.com%7Cc2413c69ba0b415bb5b008d53e577249%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636483467653285382%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwifQ%3D%3D%7C-1&sdata=84nFZelG%2BbjOKmHgQ%2BbuKdJJAnL5xh5pQos%2Bujlkx1M%3D&reserved=0.\n. Sadly we have a couple of overlapping versioning issues and are working on an overall strategy. We're trying to get the right balance of meeting the expectations people have dependencies on (not breaking people) and reducing the confusion. We know we don't have it right. \n--version is a challenge. There might be multiple runtimes on the machine. If there is one number output - the SDK is what is running is accurate and there is one single number. But I'm aware that this is not what many people mean to be asking when they type --version\nI'm currently leaning to a complex result - the SDK version and the installed runtimes. I don't want to turn this into --info, but when a human types --version the CLI simply can't know what they want from the request. \nThis will break people, so it's a hard call. . Yes. I don't seem able to close this issue, but the link is https://github.com/dotnet/designs/pull/29. I apologize for our delay, some things here have even in transition. \nASP.NET Core WebApi applications are supported. There are some Entity Framework developer issues that are not yet resolved, but other things should work. Please report issues you encounter. \nHowever, vbhtml files are not supported in ASP.NET Core and that is not on the current roadmap. With the high level of interest in Angular, React, etc front ends and fairly low VB usage in Core and Razor scenarios, the is not a current priority. You can place views in a different (C#) projects. The current focus is on VB working in other scenarios. \nWe are working in a broader statement to put this decision in context, but that will take a bit of time and I don't want to delay answering your specific question. . Agreed.\n@Marcel-B if you blog your experience, helping people around pitfalls, let us know. . @wli3 @livarcocc . This is an error from the C# compiler. I believe it is expected behavior. \nDid you try this (no using)\nc#\n[Foo.Bar.BazAttribute]\npublic class MyClass. @loviji Do you need to specify the nuget.config? You are specifying the default, which you normally need to do when there is a nuget.config for your project that blocks the standard feed. If you can try this from a directory that does not contain a nuget.config, that may unblock you while we look at this. \n@wli3 Any ideas? Is there an issue with NuGet.config (the file looks fine, it matches a sample in https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior). @wli3 . ",
    "sinand99": ".NET core server bundle doesn't work with current sdk 2.1.2. Because bundle version is 2.0.3.\nWhen I deploy my web app to local IIS, it shows \"HTTP Error 502.5 - Process Failure\".\ndotnet --version returns 2.1.2 but runtime installed is 2.0.3\n\nHow can we fix this whole mess? Why doesnt microsoft use proper versioning?. ",
    "Aman3030": "This is not the right forum to report this issue hence closing this issue. ",
    "qmfrederik": "One of our partners wanted to run our .NET Core software on a Linux box with SELinux enabled.\nThe end customers are \"enterprisey\" - financial institutions, government, defense,... and SELinux seemed to be a pretty hard requirement in that space.\nThey had a couple of challenges running .NET Core apps with SELinux enabled but were able to resolve them (I don't remember the details, sorry). I do know that saying that \".NET Core code runs in a VM, just like Java\" apparently got them on the right track \ud83d\ude04 .\nWhat would be very welcome is to have a reference guide/documentation on how to configure SELinux for (ASP).NET Core - i.e. what exceptions/policies to enable,... .\nHappy to answer any further questions you may have, just ping me here.. ",
    "RajKorimilli": "Yes, Thanks for quick response. \nCan you please point me to any website or video where I can learn more details on .Net standard. I could not find one. . ",
    "hmuhdkamran": "If the issue is in service then it should be in developer mode also, but in developer mode the application runs smoothly, while after publishing the application produces service error.\nAfter production the service cant be called from any rest client, you can even check https://github.com/hmuhdkamran/Cms. ",
    "dexterhussain": "We as a team need real support here. I and @hmuhdkamran work as a team. We are totally stuck here. @Eilon @davidfowl  @muratg  @Petermarcu @richlander @AArnott . @richlander  192 ip is the ip of the machine on which it is running locally. ",
    "mattzink": "Seems like Core runtime 2.0.4 and SDK 2.1.3 we're also stealth released a few days ago without any release notes,. ",
    "Deren-Liao": "When I run dotnet test, dotnet build etc,  or even dotnet --version,\nI got an error as following. \nWhat's the possible fix?  (I need to keep the solution with version 2.0.0 )\n~/git/gax-dotnet# dotnet --version\nThe specified SDK version [2.0.0] from global.json [/root/git/gax-dotnet/global.json] not found; install specified SDK version\nDid you mean to run dotnet SDK commands? Please install dotnet SDK from: \n  http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\n. Hi people,   Please help on my issues.   Do you have the old dotnet core 2.0.0 sdk docker image that I can use?   Or do you have work around to this \"specified SDK version not found\" problem?. Yes, some projects stick to version 2.0.0. global.json  specifies 2.0.0.    If SDK 2.1.2 works, that's great.  Yes, only runtime, it's okay if sdk is 2.1.2.   But I got error while trying to run dotnet command.\n~/git/gax-dotnet# dotnet --version\nThe specified SDK version [2.0.0] from global.json [/root/git/gax-dotnet/global.json] not found; install specified SDK version\nDid you mean to run dotnet SDK commands? Please install dotnet SDK from:\nhttp://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\n. It's very inconvenient and sometimes not acceptable that you change the binaries of the image with same tag.   As a user/developer, if I want to use higher version, I'll choose tag :2.1.2-sdk.   But if it is  2.0-sdk, I would expect it stays same with the old bits. \nIn my case, I had to build an image by installing 2.0.0 sdk myself.  . ",
    "michaldudak": "@Petermarcu Are there any release notes for 2.1.2? There's nothing on https://github.com/dotnet/core/blob/master/release-notes/download-archive.md. Why did the minor version go up?. ",
    "tb-mtg": "Any idea?\nI would love to be able convert my projects from .NET Framework to .NET Standard/Core and also try the new Razor Pages Web Project using Visual Basic.  . Yes but what about .NET Core projects and the ability to use Razor Pages Web Projects using Visual Basic (.vbhtml).. I have found .NET Core projects that support custom ViewEngines  for .pug & .md file types but cannot make it work for .vbhtml files.\nIt would be great to make it happen using a .vbproj  with <Project Sdk=\"Microsoft.NET.Sdk.Web\">.. ",
    "simonmilne80": "Agree, any update on when this will be available would be great! I have lots of code i would like to update to work under .net core and dont want to re-write in c#. ",
    "yooakim": "@danmosemsft the reason is that later Ubuntu does not have CURL installed. So if we stick with CURL a note about installing CURL would be appropriate.. ",
    "Andrew-MSFT": "Looping in @caslan . ",
    "caslan": "@WardenGnaw, can you help investigate?. ",
    "WardenGnaw": "@SharafiAli I tried to reproduce this issue with a solution with two web apps and a dotnet console app. I can successfully start, run, and stop the debugging session. All of the dotnet and iisexpress processes are gone. \nDo you have a project that you can share that reproduces this issue?\n. ",
    "GeekyMonkey": "I'm having this problem with a dotnet core angular spa app from the template.  It happens about half the time. I have to kill the dotnet.exe process to get a compile.. Un-checking this fixed it for me\nTools - Options - Debugging - General - \"Enable JavaScript Debugging for ASP.NET (Chrome and IE)\". ",
    "ramvdixit": "Deleting all breakpoints and running in Debug mode fixed it. Unfortunately, nothing else did it for me. I had to again set the breakpoints that I wanted.. ",
    "jhudsoncedaron": "dotnet publish -r win7-x86 or dotnet publish -r win7-x64. ",
    "HppZ": "@lt72 I need your help, Thanks.. ",
    "Gfweis": "It is 2.0.  I can remove Microsoft.VisualStudio.Web.CodeGeneration.Design from the web project, but there are two NetStandard.library that also fail with  a system not found among a variety of other errors. \nEven if I start a brand new core web app project, I get lots of errors including...\nNU1202: Package Microsoft.VisualStudio.Web.CodeGeneration.Contracts 2.0.1 is not compatible with netcoreapp2.0 (.NETCoreApp,Version=v2.0). Package Microsoft.VisualStudio.Web.CodeGeneration.Contracts 2.0.1 does not support any target frameworks.\nNuGet package restore failed.\n. @prafullbhosale  ... I did try clearing the cache, didn't work. Did a lot of  Google searches with no good results. This was kind of my last resort. My other computer is on 2.1.2 and all works there. The only difference is that it was upgraded from 2.0. This machine didn't have 2.0 first, just what was installed  by VS 2017 and the actual Core downloads.  This is a slow day and I found a download of 2.0  so I may strip the machine again and before installing VS I will install Core 2.0 and then let the upgrades be done. A real pain, but maybe it will work.      . Finally had time to get back to the problem. I stripped the computer, reinstalled Windows and before anything else I installed .Net Core 2.0. After installing SQL and VS, all worked. If you ever have to redo you computer, you may want to install Core 2.0, before installing VS.. ",
    "yyjdelete": "This not happen with JetBrains Rider nor dnspy, maybe only an bug with VS's debugger.. Get an ERR_INVALID_RESPONSE when download DotNetCore.2.0.6-WindowsHosting.exe, it it already be removed?. I already see this on #961. ",
    "smarts": "the release notes for this update in this repository has an incorrect link to the corresponding core-setup release and this link from the release notes returns a 404. ",
    "tomgron": "I agree - please link changelog to release, would be easier to find.. ",
    "chernovol": "Got same issue, why you have closed this ticket?. Thanks, I've just moved to use IIS instead IISExpress, that helps too.. ",
    "markentingh": "I closed it because I thought perhaps it was my own fault since I inherited the startup class with another startup class. But after some experimentation, I realized the problem persisted. I have a few other projects that work just fine, uses similar code base, same .NET Core version. I thought the problem was my own, but now I am reopening this because I can\u2019t get request.path to populate in this one project no matter what I try.. Also, I\u2019ve come to realize that this issue persists on both dev machines, not just on the machine I transferred the project to.. I think I've narrowed down the issue at hand. All of my projects use Microsoft.AspNetCore NuGet packages for version 2.0.0, except for the project with this issue. That project uses NuGet packages 2.0.1. I can confirm that this issue only exists in Microsoft.AspNetCore NuGet packages version 2.0.1 because after installing & updating my project to version 2.0.0, everything works again, and Request.Path is populated again.. It worked for a few minutes after downgrading Microsoft.AspNetCore NuGet packages down from 2.0.1 to 2.0.0, and then it stopped working again. I haven't touched any code or closed the project, or done anything in any way to affect anything. I simply pressed play, stop, and play again, and it worked the first time, and now Request.Path is returning \"/\" instead of \"/dashboard\". Before it was working at all, though, Request.Path was returning an empty string, so now I'm getting even stranger behavior with Request.Path returning \"/\" and Request.PathBase returning \"/dashboard\".. Now I've narrowed it down even further. The first page request comes from dotnet.exe, then all other page requests are coming from a second instance of dotnet.exe. Very strange behavior!!!\nHere is a log of page requests coming from my Startup.cs app.Run function. I am unable to break on any break points after my first request because all code is executed on a second dotnet.exe.\nWebsilk> Hosting environment: Development\nWebsilk> Content root path: C:\\Projects\\Websilk\\Home\\App\nWebsilk> Now listening on: http://localhost:26577\nWebsilk> Application started. Press Ctrl+C to shut down.\nWebsilk> --------------------------------------------\nWebsilk> 10:12:42 GET /\nWebsilk> END GET / 446 ms page\nWebsilk> \nWebsilk> Hosting environment: Development\nWebsilk> Content root path: C:\\Projects\\Websilk\\Home\\App\nWebsilk> Now listening on: http://localhost:12425\nWebsilk> Application started. Press Ctrl+C to shut down.\nWebsilk> --------------------------------------------\nWebsilk> 10:12:51 GET /\nWebsilk> END GET / 14 ms page\nWebsilk> \nWebsilk> --------------------------------------------\nWebsilk> 10:13:42 GET /\nWebsilk> END GET / 15 ms page\nWebsilk> \nWebsilk> --------------------------------------------\nWebsilk> 10:14:01 GET /\nWebsilk> END GET / 9 ms page\nWebsilk> \nWebsilk> --------------------------------------------\nWebsilk> 10:14:02 GET /\nWebsilk> END GET / 12 ms page\nWebsilk> \nWebsilk> --------------------------------------------\nWebsilk> 10:14:24 GET /\nWebsilk> END GET / 9 ms page\nWebsilk>. I figured out a solution. I simply deleted the hidden folder .vs and everything went back to normal :). Step c. says to \"select the Server Hosting Installer link to download the .NET Core Windows Server Hosting bundle\" but the page it refers to (https://www.microsoft.com/net/download/Windows/run) has no \"bundle\" software, and I installed both .Net Core runtime and ASP.Net Core runtime, which didn't work. It only worked once I downloaded the installer DotNetCore.2.0.6-WindowsHosting.exe at the bottom of the page at https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.6-download.md. I would recommend rewriting the instructions on the page you refered me to at https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?tabs=aspnetcore2x#install-the-net-core-windows-server-hosting-bundle, since that was the very first page Google search refered me to when trying to install the .NET Core Module.\nThank you for such a quick response @blowdart. ",
    "Segment22": "Error still exists. Changing App URL in project properties corrupts .vs\\config\\applicationhost.config file. But I think it is VS2017 related bug, not .net core.\n<application path=\"/\" applicationPool=\"WebMonitoring AppPool\">\n          <virtualDirectory path=\"/\" physicalPath=\"C:\\Repository\\Monitoring\\Sources\\Application\\WebMonitoring\\WebMonitoring\" />\n          <virtualDirectory path=\"/api/Cfg\" physicalPath=\"C:\\Repository\\Monitoring\\Sources\\Application\\WebMonitoring\" />\n          <virtualDirectory path=\"/api\" physicalPath=\"C:\\Repository\\Monitoring\\Sources\\Application\" />\n</application>\n<application path=\"/api/Cfg/Register\" applicationPool=\"Register AppPool\">\n           <virtualDirectory path=\"/\" physicalPath=\"C:\\Repository\\Monitoring\\Sources\\Application\\WebMonitoring\\WebMonitoring\" />\n</application>. ",
    "Tankatronic": "Also seeing this issue even when running as a local site outside of visual studio. Path is null but PathBase is not. I did try to delete my .vs folder but that did not resolve it. I am using Microsoft.AspNetCore v 2.1.1. After further testing it appears that PathBase contains just the first part of the path after the host. Path contains any additional portion of the path after PathBase. For clarity, I've illustrated below;\nUrl: https://somesite.com/path1/path2/path3\nPathBase: /path1\nPath: /path2/path3\nThis is confusing - Path should include the entire path after the host.. ",
    "czioutas": "Issue found with my code.. ",
    "salmonz": "I have the same problem. Workaround is run dotnet restore in the console. . @steevcoco what was the permanent resolution? I don't think running dotnet restore int the console is acceptable. Preferred behaviour is when you create a new project in Visual Studio and build, all dependencies should resolve.. ",
    "steevcoco": "@salmonz sorry: I actually closed the issue because I have not seen the problem again ...\nMy ACTUAL solution did require deleting the NuGetFallbackFolder. You THEN can do dotnet restore on some solution to rebuild that folder: I had to delete the folder to get it in working order again.\nI closed the issue because it has just been sitting open ... Perhaps I should re-open it.. ",
    "brentmorrisa": "Dotnet publish is not getting my copy-local true files, either.. ",
    "nefcanto": "I also get this annoying error.\n\nCannot find compilation library location for package 'Holism.Framework'\n\nI'm trying to reuse my .cshtml files in other projects.\nI have a simple class library that includes some .cshtml files. I've added them as embedded resources according to this SO question.\nThen I've added an application part for that assembly to my MVC service configuration.\nI've also added that class library's output DLL file as a dll reference to the MVC project. Yet when I want to access that view, I get the aforementioned error.. @dsplaisted no I checked and I don't have that file on my machine. Though I have this file:\nC:\\Program Files\\dotnet\\sdk\\2.1.301\\Roslyn\\bincore\\runtimes\\win\\lib\\netstandard1.3\\System.Text.Encoding.CodePages.dll\nToday I'll uninstall/reinstall SDK to see what will happen. Thank you.. I uninstalled all runtimes and SDKs installed on my machine from previous versions and including the current version. And then reinstalled the SDK. Here is a screenshot of the SDK:\n\nBut the problem is that now I can't build my applications. It complains that:\n\nMSB4236   The SDK 'Microsoft.NET.Sdk.Web' specified could not be found.\nUnable to locate the .NET Core SDK. Check that it is installed and that the version specified in global.json (if any) matches the installed version.. Well I restarted my PC, and now project is built. But again back to the original problem, I see:\nCannot find compilation library location for package 'Microsoft.NETCore.App'. For those who encounter the same problem, I had to add this to my csproj to make things work. Sorry @dsplaisted I couldn't do what you asked for. So I had to search and I had to spend a huge amount of time, to make things work. I don't know even why it worked, but it worked.\n\n<PropertyGroup>\n    <RuntimeFrameworkVersion>2.1.1</RuntimeFrameworkVersion>\n  </PropertyGroup>. ",
    "rahul-raut": "I am also facing the same issue. . ",
    "Allann": "yep.  I didn't know this existed, it wasn't what \"Release Notes\" was linked to.. ",
    "RoyAtanu": "Moving this issue to dotnet/coreclr repository as the contributing.md file is part of this repo.\nPull Request created with Issue #15665 in dotnet/coreclr repo.. ",
    "aleha84": "I did not check these details. At some point, when I was looking for solutions, checked environment variable Path in User section, and not found there paths to dotnet, in the system variables they were present. Added them by hands. But it seems not helped at all. . Right now, when everithing works fine: where dotnet produces: C:\\Program Files\\dotnet\\dotnet.exe, it is 64 bit sdk. If no one can reproduce an example described by me, then this is exclusively my personal case, and I'll just know that after installation of \"hosting bundle\" I'll delete x86 runtime. yes, previously i installed 1.1.4 and 1.1.5 versions. But i removed them all.. As i described in step 1 to reproduce, I uninstalled all .Net Core components, such as SDK, Runtimes and hosting. . ",
    "gregorybleiker": "I certainly have enough free memory (16GB machine, 7GB free). btw. I should have said that I am running the code above in a dotnet core console app in the Main section... could there be some references missing?. OK, I found out what the problem was: I was using websocket.csproj as my project name. That must have led to a name clash with the \"other\" websocket.... ",
    "heronsilva": "@leecow I get the same warning as @liamdawson \nThe contents of my dotnetdev.repo file is:\n[packages-microsoft-com-prod]\nname=packages-microsoft-com-prod\nenabled=1\nautorefresh=0\nbaseurl=https://packages.microsoft.com/yumrepos/microsoft-rhel7.3-prod\ntype=rpm-md\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc. Yep, I installed the Microsoft repo key.\nAfter refreshing the repo info, I don't receive any warnings anymore. And updating to dotnet-sdk-2.1.4 worked well.. ",
    "liamdawson": "Mine is slightly different, but still much the same:\n[packages-microsoft-com-prod]\nname=packages-microsoft-com-prod \nbaseurl= https://packages.microsoft.com/yumrepos/microsoft-rhel7.3-prod\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc. I'm not using OpenSUSE any more, but one thing different from your setup is that I was using Tumbleweed.. ",
    "nulltoken": "\u26a0\ufe0f This may not be the best place to report this. I'd be happy to open a new issue in another repository would anyone point me in the right direction.\n\nIs there any timeline to see this update deployed on VSTS Hosted VS2017 agents?\nUpdating the global.json file with the new version leads to such errors in the build logs.\n```\n2018-01-11T15:46:38.5191512Z Building...\n2018-01-11T15:46:38.9108647Z ##[error]The specified SDK version [2.1.4] from global.json [D:\\a\\1\\s\\global.json] not found; install specified SDK version\nDid you mean to run dotnet SDK commands? Please install dotnet SDK from:\nhttp://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\n2018-01-11T15:46:38.9133781Z\n2018-01-11T15:46:40.8355697Z ##[error]An error occured...\n```\nTaking a look at the latest published content of the Hosted VS2017 agent software inventory, it looks like the latest deployed version of .NET Core is 2.0.3.. > I will also try to find the right person regarding the version in VSTS. @leecow in case he can help here.\n@Petermarcu @livarcocc Thanks!. ",
    "Chris197": "If I want to apply this new version to an existing installation using IIS on Windows Server, do I need to install the Windows Hosting Bundle or is that only required on first setup? Sorry if this has been asked before, I couldn't find the answer.. @joeloff , @livarcocc, Not using the machine for development, so I will install the hosting bundle to make sure all is up to date, thanks!. ",
    "TomCJones": "just tried to host a web app - it seems to always use port 5000 no matter what port I put in launchsettings.json. I tried to different solutions, one brand new.. sorry for the confusion, I didn't read the instructions carefully enough. They are kind of dense.. ",
    "bording": "I originally posted this in the SDK repo (https://github.com/dotnet/sdk/issues/1849), but it appears that there was a regression on some of the bundled templates in 2.14.\n2.1.3\n- microsoft.dotnet.common.itemtemplates.1.0.0-beta3-20171117-314.nupkg\n- microsoft.dotnet.test.projecttemplates.2.0.1.0.0-beta3-20171117-314.nupkg\n2.1.4\n- microsoft.dotnet.common.itemtemplates.1.0.0-beta3-20171110-312.nupkg\n- microsoft.dotnet.test.projecttemplates.2.0.1.0.0-beta3-20171110-312.nupkg\nWas this intentional? . I've just checked Ubuntu 18.04, 16.04, and Debian 9, and everything looks good for those.. ",
    "christiansk": "I installed the updates and can see version 2.0.5 in the command prompt using \"dotnet --version\", but VS2017 still shows the previous SDK version in my projects. I can see package Microsoft.NETCore.App 2.0.5 in NuGet but it won't let me update saying the version is \"blocked by project\". How can I upgrade my project in VS to develop against the latest version?. @Petermarcu You are correct, it says 2.1.4 - I confused the SDK/runtime versions in my previous comment. Sorry about that. Still, I have it installed and can't get VS to allow me to update the SDK dependency. Any clue as to what else could cause the Microsoft.NETCore.App package to be \"locked\" to 2.0.0?. Got it. Thanks!. ",
    "cgountanis": "So 2.1.4 was removed and replaced with 2.1.101?. It is not there, I don't need it just wondering why the version went down on the SDK and up on the runtime?\n\n. Dah, thank you. \ud83e\udd2f. I agree this is confusing. Is it safe to use the 2.1.102 version as I see nothing about it in release notes.. Might as well be safe and not use the 102 for now, waiting for the preview build to become final, anyway.\nOverall not worth the trouble.  ~ Thanks. Rule of thumb use global.json for SDK specification and never use/upgrade anything for at least two weeks. Unless it is a major security update, no reason to work the weekend fixing something that broke. The only reason I am here is a coworker upgraded before approval and forced my hand.. ",
    "zwszwszws": "I want my .net core version to be the latest version.\nAnd uninstall the old version... ",
    "huzaynbolt": "Proceed to move @petermarcu, I will join the thread there.. ",
    "AhmedMKamal": "@benaadams  i already did that its ended with that log\nlog.txt\n. Note that its .NET SDK 2.1.4 if the version is making difference. @benaadams \noh thats exactly what im asking for .\nwhy i cant install it ?. so i'll try to redownload the installer but just a small note \ni already downloaded the installer and the binary and both \nnot working bot i'll try and i'll try an old version to . in real i dont have 2.0.5 installed its make sense now \nso i'll download it and try again . i installed almost every version available on the internet and all leads me to the same point\ninstallation completed successfully but the hostfxr.dll file load fails .\nsome notes if it can help\n- the hostfxr.dll file is found but failed to load .\n- installing and uninstalling the .net core doesn't remove or exchange anything except \nthe sdk file C:\\Program Files\\dotnet\\ still without any change even after uninstallation.. ok finally i could solve this issue and saved my own day :)\nhere's the steps i made -\n1- i did system check on the C driver .\n2- uninstall the sdk and runtime .\n3- install new sdk and runtime.\nthere's a note here not all sdk version work with all runtime version \nthat was mentioned here\n4- install the KB2533623 update that's very important for windows 7 \nas mentioned here\n5- restart the machine and its working :)\n@benaadams thnx for help <3. Ok, it was about coping the ClientApp file please close this issue.. @DwiYI  @abdu292 check outputPath at angular.json and spa.Options.SourcePath at Startup class.\nExample:\n// angular.json\n...\n\"outputPath\": \"dist\"\n// Startup.cs\n...\nspa.Options.SourcePath = \"ClientApp\"\nmy problem was that when i run the build command the Angular app moved to ClientApp/dist/dist instead of ClientApp/dist. ",
    "chakrabar": "@livarcocc It worked! I built the project from cli and the project built fine without any errors!\ndotnet build MyProject.csproj --no-incremental -f netstandard2.0 -r win81-x64 -v m\n\nAnd strange enough, once it was built using cli, the resource appeared properly in VS as audio resource and it built in VS as well!! I could refer that resource in code like the other resources.\n\n. @Petermarcu is this being tracked anywhere?. ",
    "namax": "hi @leecow \nthank you for the reply. I would like to help you guys,  if you have any \"first time\" issues just let me know. . Sure. What exactly do I need to do? Just review the text and the commands for typos? \n. @leecow \nEg this link is not found  - \nSDK Binaries  for windows 32 bit\nhttps://download.microsoft.com/download/1/1/0/11046135-4207-40D3-A795-13ECEA741B32/dotnet-sdk-2.1.4-win-x86.zip\nI'm working right now with one .NET Core project, so if you also have any developer tasks, I would also appreciate it. . Than you @leecow  I will read the document, but how I  should to propose  that I would like to work on some issue? Or I can just write in the comments? So I don't find out in the end of fixing some issue that somebody fixed it earlier.  \nI found another one \nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.asc.gpg\nSeems this is incorrect -qO-\n. ",
    "PFAR": "Just to let you know, when using SMB shares the Synology exposes such folder names as something with an entirely different name (like \"FP8AMI~K\"), so this can only be tested properly on a Windows Server with Client for NFS. ",
    "mkArtakMSFT": "Thank you for contacting us. We are aware of the issue you're facing and are actively working to fix it. //cc @pranavkm. Hey @Petermarcu, this sounds like our issue. Could you please move it to aspnet/templating? Thanks!. ",
    "DevSidious": "I second that.. ",
    "sid504": "simple in real world dotnet core is used for cross platform deployment . ",
    "jaydeept": "aspnet/Home#2798. aspnet/Home#2798. ",
    "embryologist": "how did you configure your auth at startup? can you show you code. Does this help?\nhttps://stackoverflow.com/questions/36121999/how-to-restart-asp-net-core-app-programmatically. ",
    "mcurko": "There is no configuration whatsoever beyond what I described. Here I have an anonymous user accessing a protected content, and he should be denied by returning \"401 Unauthorized\". That was the case in .NET Core 1.1, everything worked fine.\nIn my application, where I discovered the problem, I use custom cookie middleware for authentication.\nIn Startup.cs:\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n{\n    ...\n    app.UseTeamAuthentication();\n    ...\n}\nand here is the middleware, where I assign ClaimsPrincipal to context.User, which is afterwards checked in [Authorize] filters (maybe my expressions are somewhat imprecise here, but I think the idea is clear):\n`public class TeamAuthentication\n{\n    private readonly RequestDelegate next;\n    private readonly ILogger logger;\npublic TeamAuthentication(RequestDelegate _next, ILogger<TeamAuthentication> _logger)\n{\n    next = _next;\n    logger = _logger;\n}\n\npublic async Task Invoke(HttpContext context, ApplicationDbContext db)\n{\n    if (TeamConfig.AuthDebug)\n    {\n        logger.LogDebug(\"Auth-Invoke: \" + context.Request.Path);\n    }\n\n    const string LoginPath = \"/Login\";\n    const string LoginPathTimeout = \"/Login?timeout\";\n    const string LogoutPath = \"/Logout\";\n\n    bool Login =\n        (context.Request.Path == LoginPath ||\n        context.Request.Path == LoginPathTimeout);\n    bool Logout = (context.Request.Path == LogoutPath);\n\n    string TokenContent = context.Request.Cookies[\"t\"];\n\n    bool DatabaseSelected = context.Items[\"ConnectionString\"] != null;\n    bool Authenticated = false;\n    bool SessionTimeout = false;\n\n    // check token\n    if (!Login && !Logout && DatabaseSelected && TokenContent != null)\n    {\n        try\n        {\n            var token = await Security.CheckToken(db, logger, TokenContent, context.Response);\n            if (token.Status == Models.TokenStatus.OK)\n            {\n                Authenticated = true;\n                context.Items[\"UserID\"] = token.UserID;\n                List<Claim> userClaims = new List<Claim>();\n\n                var person = await db.Person.AsNoTracking()\n                    .Where(x => x.UserID == token.UserID)\n                    .FirstOrDefaultAsync();\n\n                if (person != null)\n                {\n                    var emp = await db.Employee.AsNoTracking()\n                        .Where(x => x.PersonID == person.ID)\n                        .FirstOrDefaultAsync();\n                    if (emp != null)\n                    {\n                        context.Items[\"EmployeeID\"] = emp.ID;\n                    }\n                }\n\n                string UserName = \"\";\n                if (person != null && person.FullName != null)\n                {\n                    UserName = person.FullName;\n                }\n                else\n                {\n                    var user = await db.User.AsNoTracking()\n                        .Where(x => x.ID == token.UserID)\n                        .Select(x => new { x.Login }).FirstOrDefaultAsync();\n                    UserName = user.Login;\n                }\n                context.Items[\"UserName\"] = UserName;\n                userClaims.Add(new Claim(ClaimTypes.Name, UserName));\n\n                if ((token.Roles & (int)Security.TeamRoles.TeamAdmin) == (int)Security.TeamRoles.TeamAdmin)\n                {\n                    userClaims.Add(new Claim(ClaimTypes.Role, Security.TeamAdmin));\n                }\n\n                if ((token.Roles & (int)Security.TeamRoles.SuperAdmin) == (int)Security.TeamRoles.SuperAdmin)\n                {\n                    userClaims.Add(new Claim(ClaimTypes.Role, Security.TeamAdmin));\n                    userClaims.Add(new Claim(ClaimTypes.Role, Security.SuperAdmin));\n                }\n\n                ClaimsPrincipal principal = new ClaimsPrincipal(new ClaimsIdentity(userClaims, \"local\"));\n                context.User = principal;\n            }\n            else if (token.Status == Models.TokenStatus.Expired)\n            {\n                SessionTimeout = true;\n            }\n        }\n        catch (System.Exception ex)\n        {\n            logger.LogCritical(ex.Message);\n        }\n    }\n\n    if (Login || (Logout && DatabaseSelected) || Authenticated)\n    {\n        await next.Invoke(context);\n    }\n    else\n    {\n        if (Utility.IsAjaxRequest(context.Request))\n        {\n            if (TeamConfig.AuthDebug)\n            {\n                logger.LogDebug(\"Auth-Invoke => AJAX 401\");\n            }\n            context.Response.StatusCode = 401;\n            context.Response.Headers.Add(SessionTimeout ? \"X-Team-Timeout\" : \"X-Team-Login\", \"1\");\n        }\n        else\n        {\n            string RedirectPath = SessionTimeout ? LoginPathTimeout : LoginPath;\n            if (TeamConfig.AuthDebug)\n            {\n                logger.LogDebug(\"Auth-Invoke => \" + RedirectPath);\n            }\n            context.Response.Redirect(RedirectPath);\n        }\n    }\n}`\n\nI tried to find some help on the subject on stackechange but noone seems to have a clue on what's the problem.. ",
    "hoeflerm": "@cgenin7 did you achieve anything regarding this topic?\nRan into the same issue with dotnet core 2.0 and visual studio 2017, just like you.\nWould be very helpful :). Thank you for your answer, it solved the issue for the moment.\nI will try :+1: . ",
    "cgenin7": "Unfortunately no. I submitted the error to the Azure team and they asked for a memory dump. I will provide one if the problem reappears but it did not occur again yet.. You can try moving your app services to local cache, if nothing is stored locally with your application. They seem to have issues moving the app services around when this mode is not enabled: \n                https://docs.microsoft.com/en-us/azure/app-service/app-service-local-cache\n. There are still occasionnally problems when Azure is moving app services. We fixed this issue by having two occurrences of each app service.. ",
    "mahisanka": "@cgenin7 have you resolved this error ?. ",
    "rajurh": "@halter73 If you don't want me to encrypt the url what do you suggest I don't want the url to be tampered like for e.g. xyz.com?requestid=121. If its plain any one can change the id's in the browser.\nWhat is your thoughts on the above scenario if you think the above approach is not good?. Yes please goahead\nOn Sun, Mar 11, 2018 at 9:49 PM, Peter Marcu notifications@github.com\nwrote:\n\n@rajurh https://github.com/rajurh did you get everything you need from\nthe responses? Can we close this issue?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/1239#issuecomment-372127542, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AO1LQP4iFxKfUCP1KxDGZ08AWnJvIP04ks5tdU6ogaJpZM4RsN1R\n.\n. \n",
    "ayazaliuk101": "@Davidfowl yes. Also sent the details to MS  support with the source code and they can reproduce on their side as well. Need to run more logs for them to escalate to .net core team.. Apologies when you say locally i.e. on my local machine then no, but I can reproduce on a Azure web app.. ",
    "TrevorFradsham": "I had the same problem, so thanks @tharmachandran for the Json options statement. Fixed the problem for me. ",
    "NeilMcKechnie": "I also had the same problem and @tharmachandran 's fix worked for me too, thanks for chiming in @TrevorFradsham .. ",
    "kizora": "You can try to increase the size of request JSON.\nHave a look at link below\nhttps://www.talkingdotnet.com/how-to-increase-file-upload-size-asp-net-core/. ",
    "JontyMC": "I got this error too. Went back to Microsoft.NET.Sdk.Functions (1.0.6) fixed it. Still get the warning, but at least the code runs.. ",
    "teamboyd": "I have this same issue but no resolution.  Thanks Microsoft.. I have this same issue but no resolution.  Thanks Microsoft.. ",
    "OleksiiChuiko": "Want to note that the dotnet application is started as a service using systemctl.. When I attached with gdb I get the following dump:\n(gdb) c\nContinuing.\n[New Thread 0x7f9d04b1a700 (LWP 31807)]\n[New Thread 0x7f9d0c072700 (LWP 31808)]\n[Thread 0x7f9d0c072700 (LWP 31808) exited]\n[Thread 0x7f9d04b1a700 (LWP 31807) exited]\nProgram received signal SIGCONT, Continued.\n[Switching to Thread 0x7f9d10144700 (LWP 31720)]\n0x00007f9d11709a3d in poll () from /lib64/libc.so.6\n(gdb) bt\n0  0x00007f9d11709a3d in poll () from /lib64/libc.so.6\n1  0x00007f9d10e682f4 in CorUnix::CPalSynchronizationManager::ReadBytesFromProcessPipe(int, unsigned char*, int) ()\nfrom /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libcoreclr.so\n2  0x00007f9d10e678c4 in CorUnix::CPalSynchronizationManager::WorkerThread(void*) () from /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libcoreclr.so\n3  0x00007f9d10e70982 in CorUnix::CPalThread::ThreadEntry(void*) () from /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libcoreclr.so\n4  0x00007f9d12206e25 in start_thread () from /lib64/libpthread.so.0\n5  0x00007f9d1171434d in clone () from /lib64/libc.so.6\n(gdb) c\nContinuing.\nProgram received signal SIGTERM, Terminated.\n[Switching to Thread 0x7f9d12835740 (LWP 31719)]\n0x00007f9d1220a945 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0\n(gdb) bt\n0  0x00007f9d1220a945 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0\n1  0x00007f9d10e65c52 in CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int*) ()\nfrom /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libcoreclr.so\n2  0x00007f9d10e65894 in CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int*) ()\nfrom /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libcoreclr.so\n3  0x00007f9d10e6a6b1 in CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread, unsigned int, void const*, int, unsigned int, int) ()\nfrom /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libcoreclr.so\n4  0x00007f9d10abe8dc in Thread::DoAppropriateWaitWorker(int, void**, int, unsigned int, WaitMode) () from /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libcoreclr.so\n5  0x00007f9d10ab9560 in Thread::DoAppropriateWait(int, void*, int, unsigned int, WaitMode, PendingSync) ()\nfrom /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libcoreclr.so\n6  0x00007f9d10baaa6f in CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) () from /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libcoreclr.so\n7  0x00007f9d10ac0f4d in CLREventWaitWithTry(CLREventBase, unsigned int, int, unsigned int) () from /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libcoreclr.so\n8  0x00007f9d10ac1175 in ThreadStore::WaitForOtherThreads() () from /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libcoreclr.so\n9  0x00007f9d10c05113 in Assembly::ExecuteMainMethod(PtrArray**, int) () from /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libcoreclr.so\n10 0x00007f9d10a3653b in CorHost2::ExecuteAssembly(unsigned int, char16_t const, int, char16_t const, unsigned int) ()\nfrom /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libcoreclr.so\n11 0x00007f9d10a10e86 in coreclr_execute_assembly () from /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libcoreclr.so\n12 0x00007f9d1112f433 in coreclr::execute_assembly(void, unsigned int, int, char const, char const, unsigned int*) ()\nfrom /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libhostpolicy.so\n13 0x00007f9d111240d8 in run(arguments_t const&) () from /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libhostpolicy.so\n14 0x00007f9d11124772 in corehost_main () from /usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/libhostpolicy.so\n15 0x00007f9d113e48f4 in execute_app(std::string const&, corehost_init_t, int, char const*) () from /usr/share/dotnet/host/fxr/2.0.5/libhostfxr.so\n16 0x00007f9d113ee978 in fx_muxer_t::read_config_and_execute(std::string const&, std::string const&, std::unordered_map >, std::hash, std::equal_to, std::allocator > > > > const&, int, char const**, host_mode_t) () from /usr/share/dotnet/host/fxr/2.0.5/libhostfxr.so\n17 0x00007f9d113ed8f7 in fx_muxer_t::parse_args_and_execute(std::string const&, std::string const&, int, int, char const*, bool, host_mode_t, bool) ()\nfrom /usr/share/dotnet/host/fxr/2.0.5/libhostfxr.so\n18 0x00007f9d113eeffc in fx_muxer_t::execute(int, char const**) () from /usr/share/dotnet/host/fxr/2.0.5/libhostfxr.so\n19 0x00007f9d113e4975 in hostfxr_main () from /usr/share/dotnet/host/fxr/2.0.5/libhostfxr.so\n20 0x000000000040c42a in run(int, char const**) ()\n21 0x000000000040c597 in main ()\n(gdb)\n. Sorry, problem was with service settings - Type must be simple and no restart. ",
    "jaundice": "I had this too. The workaround from https://github.com/dotnet/sdk/issues/1539 worked for me.. ",
    "crozone": "Definitely noticed this. The CentOS package name is dotnet-host-2.0.5-1.x86_64 which corresponds to this build:\n```\nMicrosoft .NET Core Shared Framework Host\nVersion  : 2.0.5\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\n```\nFrom what I understand, different versions of dotnet can be installed simultaneously, and are automatically selected by the sdk and host when it is used to compile a project or run an executable.\n~~AFAIK patch versions only include non-breaking security and bug fixes, so it doesn't make sense to me why the actual package name includes the patch version, since it seems to imply that every patch version will get its own separate side-by-side package. This should be entirely unnecessary since patches are meant to be non-breaking anyway. It also makes updating to the latest patch version a manual process, and in turn makes it more difficult to deploying critical security updates.~~\nSeparate patch names make sense for development, when you want to build against a specific runtime version. Perhaps the solution to this is to instead host a metapackage for dotnet-host-2.0.x86_64 that follows the version number of the framework host, and references the latest specific package as a dependency.. ",
    "TerraVenil": "After migration to netstandard2.0 issue dissapeared.. ",
    "shpsyte": "any ?. Work for me !. Someone ?. [1]. \nI found the solution, first install using root. If you use Unbutun 18.04 you also need to add this script beforehand:\nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.asc.gpg\nsudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/\nwget -q https://packages.microsoft.com/config/ubuntu/18.04/prod.list\nsudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list\nadd-apt-repository universe\napt-get install apt-transport-https\napt-get update\napt-get install dotnet-sdk-2.1.202\nHere is the source:\nhttps://github.com/dotnet/core/blob/master/release-notes/download-archives/2.1.0-download.md#ubuntu-1804\n. ",
    "noelmcgrath": "the script is there, thats not the problem. Its the urls in the script that give back 404. Also was trying to run with -Version stable.\nChanged to run with no parameters just to check if that worked.\nIt tries to download Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.5/dotnet-sdk-1.1.5-win-x64.zip\nCurrent SDK is v2.1.4 I believe. ",
    "mikem8361": "This doc  can help setup .NET Core to generate core dumps (smaller \"minidumps\") on your Linux system. Or you can use the normal Linux mechanism to generate code dumps. For Windows, the windbg docs can help with generating a dump.\nSOS is the tool you can use to analyze the dumps  all of the supported platforms.  Here is some documentation on setup SOS with the various platform debuggers: windbg (Windows), lldb (Linux and OS X).. I would like to know the problems you are having with loading a core dump.  It works best if you load the core dump on the same machine it was generated so lldb can get the module symbols.  You need to pass the \"host\" program on the command, etc. . I need some more details on how lldb fails. Are not getting any modules in the \"target modules list\" command? If your \"host\" is the dotnet program, then you need the exact version that the core dump was generated.  The symbol downloader should download the proper version.\nWhat is your exact lldb command line/commands?. What does \"target modules list\" display? What is your the exact command you used to start lldb and all the commands to get the above point.  Need more info.  \nIt could also mean that the libmscordaccore.so doesn't match the libcoreclr.so in the dump. It may be easier to zip up core dump and all the other relevant binaries and send it to me. . You need to be supervisor to attach with lldb.  sudo -E lldb-3.9. I'm not sure what is going on.  I'll have to follow your repo steps which it may be a while before I can get to it.  This looks like a lldb setup/install/configuration problem more than a .NET Core or SOS problem, but I do want to document helpful with lldb itself.. It may be the microsoft/dotnet:2.1-sdk docker images you are starting with and then it something we (.NET Core) need to look at.\n. This issue looks like a dup of https://github.com/dotnet/diagnostics/issues/79 which I have added some comments. If these are the same issue, then this one should be closed.\nI haven't tried creating/using the docker image yet which I hope to do this week.\n. I have heard of various problems with lldb on arm. I recommend trying a later version of lldb. The same plugin should work.\n/cc: @sywhang, @hoyosjs . ",
    "fqybzhangji": "Did you find the relevant documentation?. I generated the \"core.xxx\" file in the container, but I don't know how to analyze it.. ",
    "AmeetShinde": "Thanks for confirming. Can you please comment on couple of items below \n1.   Are there any considerations for self contained application support on RHEL 6\n2.  .Net Core SDK availability for building solutions on RHEL6. Also couple of queries on this support\n1. Will the same binaries published for RHEL.6 work for CentOS.6 as well\n2. I am assuming the binaries published for rhel.6 would work for any rhel 6.x version, is this correct assumption.. can we have this issue assigned?. ",
    "echowings": "We install dotnet sdk 2.1.4 on RHEL 6.8, but libuv.so  can not load with asp dotnetcore, can you help us?. ",
    "usergiga": "If an instance of SQL Server is listening on any other port, than 1433. You have to specify a server-alias or change the standard port globally. \nYou can have SQL Server listening on multiple ports. . ",
    "mahesji": "@usergiga , Thank you for the reply.  I have the alias created and that doesn't seem to help. The connection works fine in Windows runtime.  Have this issue only in the Linux (Ubuntu) runtime.  . ",
    "imacks": "Did you write <Project SDK=\"...>? The problem is SDK target imports are after Base* Path, so it won't work. See my scaffold script for what I mean.. ",
    "rraallvv": "@imacks I tried removing the SDK attribute in the tag Project and importing the target manually after the PropertyGroup that specifies the custom paths. It din't work though, maybe because I'm in Visual Studio for Mac. What I eded up doing was adding the custom paths to the file Directory.Build.props for the .Net Standard Library project. Thanks.. ",
    "SamuelDebruyn": "Looks like I looked over the issue https://github.com/dotnet/corefx/issues/26203 so this one can be closed. ",
    "bachowny": "Thanks for that, that has fixed my problem. I don't understand how \"sorting\" has anything to do with the places where characters are in an array of characters (a string), but OK! :-). I have created the following minimal repro:\n```c#\n    using System;\n    using System.Runtime.InteropServices;\nclass Program\n{\n  static void Main(string[] args)\n  {\n    IntPtr lPtr = Marshal.AllocHGlobal(2);\n\n    Marshal.WriteByte(lPtr, 0, 0xD6);\n    Marshal.WriteByte(lPtr, 1, 0x00);\n\n    string lStr = Marshal.PtrToStringAnsi(lPtr);\n    Console.WriteLine(\"Native land said: '\" + lStr + \"'\");\n  }\n\n}\n```\nWindows says:\nNative land said: '\u00d6'\nLinux says:\nNative land said: ''\nIf we instead try to use PtrToStringUTF8 then we get slightly different results:\nWindows says:\nNative land said: '?'\nLinux says:\nNative land said: '\ufffd'. Thanks very much for the insight @tarekgh \nIs there a straightforward way to read out a null-terminated set of bytes using Marshal or would I have to do that by hand?\nI will definitely give it a try tomorrow (I'm just leaving now) and report back if I have a solution.. @karelz Probably, but I know this is actually an ANSI string coming from a C interface, so even if I end up truncating the string I'll only be mishandling things in the same way the 3rd party will mishandle it.. I've put together the following improved (unsafe, inefficient) program which does operate correctly on Linux but I have further questions about it...\n```c#\nusing System;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Runtime.InteropServices;\nnamespace ConsoleApp2\n{\n  class Program\n  {\n    public static Encoding mLatinEncoding;\nstatic void Main(string[] args)\n{\n  Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);\n  mLatinEncoding = Encoding.GetEncoding(1252);\n\n  IntPtr lPtr = Marshal.AllocHGlobal(2);\n\n  Marshal.WriteByte(lPtr, 0, 0xD6);\n  Marshal.WriteByte(lPtr, 1, 0x00);\n\n  string lStr = PointerToString(lPtr);\n  Console.WriteLine(\"Native land said: '\" + lStr + \"'\");\n  Console.ReadKey();\n}\n\npublic static string PointerToString(IntPtr aPointer)\n{\n  if (aPointer.Equals(IntPtr.Zero))\n  {\n    return \"\";\n  }\n  else\n  {\n    int lOffset = 0;\n    List<byte> lBytes = new List<byte>();\n\n    while (lOffset < 999)\n    {\n      byte lByte = Marshal.ReadByte(aPointer, lOffset);\n      if (lByte == 0) break;\n      lBytes.Add(lByte);\n      lOffset++;\n    }\n\n    return new string(mLatinEncoding.GetChars(lBytes.ToArray()));\n  }\n}\n\n}\n}\n``. @tarekgh So now the question I have is about thisCodePagesEncodingProvider`, for which I had to add a NuGet package and will have to work out how to make that work on the AWS instances we spin up to run these tests.\nMy question is simply is there another way to get this encoding? It seems that whatever is being used to parse the XML file that contains this string was already using the correct encoding. If I could just get a hold of that encoding I might not have to introduce this new package dependency.. @tarekgh OK so kind of answering my own question here but this works just as well:\n```c#\n    public static string PointerToString2(IntPtr aPointer)\n    {\n      if (aPointer.Equals(IntPtr.Zero))\n      {\n        return \"\";\n      }\n      else\n      {\n        int lOffset = 0;\n        List lChars = new List();\n    while (lOffset < 999)\n    {\n      byte lByte = Marshal.ReadByte(aPointer, lOffset);\n      if (lByte == 0) break;\n      lChars.Add((char) lByte);\n      lOffset++;\n    }\n\n    return new string(lChars.ToArray());\n  }\n}\n\n```\nSo now the question is, what is Marshal.PtrToStringAnsi doing to interfere with this seemingly straightforward operation? If I do\nc#\n      char lChar = '\u00d6';\n      Console.WriteLine((int) lChar);\nthen the output 214 is the same on both Windows and Linux. So it seems to me that PtrToStringAnsi is the thing that is getting this wrong.. Sorry for the constant barrage of comments on this issue but for posterity this is now solved for me, and here is the slightly improved code.\n```c#\n    private unsafe char mBuff = (char) Marshal.AllocHGlobal(999);\n    public unsafe string PointerToString(IntPtr aPointer)\n    {\n      if (aPointer.Equals(IntPtr.Zero))\n      {\n        return \"\";\n      }\n      else\n      {\n        int lOffset = 0;\n    while (lOffset < 999)\n    {\n      byte lByte = Marshal.ReadByte(aPointer, lOffset);\n      if (lByte == 0) break;\n      mBuff[lOffset] = (char) lByte;\n      lOffset++;\n    }\n\n    return new string(&mBuff[0], 0, lOffset);\n  }\n}\n\n```. @karelz I was waiting to see if someone knew why on Linux PtrToStringAnsi doesn't correctly handle ANSI characters even when the character code is identical on Linux and Windows.. @tarekgh recommended a different encoding that could be used in his workaround. My question was why the ANSI encoding is not correct on Linux and why simply marshalling the character values (which is what one would expect ANSI marshalling to do) gives a different answer to the built in function.\nBoth platforms agree on the character code for the character in question and it is the same value as found in any quick google for \"ANSI character codes\", so why the discrepancy?. @tarekgh OK thanks, I understand now why there's a discrepancy. I can only assume there's some reason why this must be done and why PtrToStringAnsi is not actually ANSI on Linux. We can now close this issue.. ",
    "scottmendel": "Apologies, I submitted this accidentally while trying to fill in the details. I will try and reopen with details. . I ran the following command: dotnet.exe store --skip-optimization -m \"C:\\Panorama\\hedzup\\mn\\bin\\InstallNetCore.manifest\" -o \"C:\\Program Files\\dotnet\\store\"\nI received the following error: C:\\Program Files\\dotnet\\sdk\\2.0.0\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ComposeStore.targets(351,5): warning MSB3026: Could not copy \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.antiforgery\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Antiforgery.dll\" to \"C:\\Program Files\\dotnet\\store\\x64\\netcoreapp2.0\\microsoft.aspnetcore.antiforgery\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Antiforgery.dll\". \nThe assembly in question was in fact \"in use\" but I expect this is a problem that needs to be addressed. The Microsoft.AspNetCore.Antiforgery dll in the NuGetFallBackFolder I suspect is \"Any CPU\", at least the \"Optional\" PE header marks it with magic 0x10B. The same assembly in the store has a optional header with magic 0x20B which makes it an x64 version of the same assembly. The version of the assembly is the same in both cases 2.0.0.17205, so I am wondering why the copy is even attempted. because this is the \"x64\" area of the store, replacing the \"x64 version of the assembly with the \"Any CPU\" version, this seems like it is undoing an optimization made previously.\nI am attempting to add something to the store, but not this assembly. Microsoft.AspNetCore.Antiforgery is a dependency of another assembly that is the main target of the store command which is Riverbed.AppInternals.DotNetCore.dll. But the store command will not complete. I do understand that stopping the dotnet applications using the antiforgery dll will work around the problem, but we have a requirement to do a \"hot\" install on a production server where it is not desirable to stop services that are running.\nIf I remove the --skip-optimazation flag, I run into the reverse scenario; assemblies can be \"in use\" trying to place optimized version of the assemblies into the store area. \nConceptually, I would like the store command to add only the dependencies that are missing, and not get hung up on things that already may be in the store and possibly in use. \nEnvironment Details:\n.NET Command Line Tools (2.1.2)\nProduct Information:\n Version:            2.1.2\n Commit SHA-1 hash:  5695315371\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.16299\n OS Platform: Windows\n RID:         win10-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.2\\\nMicrosoft .NET Core Shared Framework Host\n  Version  : 2.0.5\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\n. ",
    "BetsyOstrander": "I am getting this too.  No error until I added a .net standard lib for accessing Active Directory, which includes the Windows Compatibility pack.. ",
    "CarlosOnline": "+1 getting this to with .net core 2.0 referencing .net framework project.. Any status on a fix?. ",
    "strich": "In this particular instance the application is a sort of middleware that would be part of a larger application by the end user (A developer). They may or may not be using .NET at all. So it is pretty important that I don't force them to have to add entire framework installers to deploy alongside it just to support this middleware.\nThe linker looks promising and was something I had stumbled upon previously, but I suppose what I'm really looking for is the bundling feature. Without it I don't think this middleware app will survive without a lot of heat from the user.\nI daresay my application as middleware is not one of the most common usecases, but I do think it is important that bundling is made available soon as the ability to quickly write and deploy a single file solution is powerful.\n. ",
    "UltWolf": "Thx you for answer. Thx you for answer. ",
    "nothrow": "Thanks for the link, I missed this specific document. \n\nConsidering the number of APIs that .NET Framework 4.6.1 will not support is low and that these are all brand-new APIs with low adoption we believe this is a much better trade-off.\n\nThis is kind of unfortunate, since the brand new API is used by ASP.NET Core, so eventually anyone wanting to combine netstandard + full framework with web will probably hit the wall here.\nI had troubles with 4.5.1 version, so I ended up with shipping my own forked version of DependencyModel. \nJust a suggestion, there is bunch of #if DOTNETCORE s  in Microsoft.Extensions.DependencyModel. Wouldn't it make sense to have libraries with #ifs in runtime/, so the correct one will be resolved, based on framework at run-time, not at compile-time?\n. ",
    "murbanowicz": "@leecow  Any updated on that?. ",
    "sherlock1982": "Duplicate of https://github.com/dotnet/coreclr/issues/16052. ",
    "leedale1981": "Probably a stupid question but why does .NET Core 2.1.0-preview1 install SDK 2.1.300 but the previous version 2.0.5 installs a later version of the SDK 2.1.4?. ",
    "savornicesei": "Please, please, please, have an unstable and a stable repo for linux distribution.\nIt took me some time to get everything right on my openSUSE box and I don't want any updates to preview versions of .NET\nOther than that ... long live .NET on linux! :+1: \n . @leecow Perhaps open build system could ease the pain of linux multi-distro preview/stable releases. ",
    "tkggusraqk": "TransactionScope, is the problem fixed?. ",
    "EdLorenzQAT": "I tested TransactionScope on Linux using this preview and it takes a NPE which is the same result I was seeing from the previous version.\nHowever, under windows, initial testing looks good.. ",
    "jherby2k": "I'd like to try the new Span-ified functionality like Stream.Read(Span destination) in my library projects, but it looks like they will need to target .NET Standard 2.1. Is there even going to be a .net standard 2.1?? Any other way to obtain these APIs? I added System.Memory but it looks like this method is part of the SDK.. ImageSharp is the way to go. Its supposed to leave preview once netcore 2.1 is finished (package depends on System.Memory extensively which is still in preview). API is mostly stable at this point.. Sorry, IntPtr accomplishes something different from what i'm describing. This has nothing to do with word length. This is about what \"long\" means in compiled C code on different OSes:\nType | Windows 32-bit | Windows 64-bit | nix 32-bit | nix 64-bit\n--- | --- | --- | --- | ---\nIntPtr | 4 | 8 | 4 | 8\nC# int (Int32) | 4 | 4 | 4 | 4\nC# long (Int64) | 8 | 8 | 8 | 8\nC long (no C# equivalent)| 4 | 4 | 4 | 8\n. maybe \"c long\" is a better name for it than \"native long\".. Opened https://github.com/dotnet/corefx/issues/32603. Reopening in the correct place.. ",
    "BennyTordrupVisma": "LiuHai119, please stop spamming.. ",
    "simeyla": "Is there a target date for Preview 2?. ",
    "bobuva": "I've installed the preview and trying to make an SSL connection that requires Tls1.2 and ALPN. I know I'm using TLS1.2 because I specify it here:\nsslStream.AuthenticateAsClient(\n                    ProxyClient.TestUbuntuHost,\n                    null,\n                    System.Security.Authentication.SslProtocols.Tls12,\n                    false);\nbut how do I know whether it is using ALPN in the handshake?\nNote: I'm going to create a separate issue to get clarification on ALPN usage.. ",
    "buvinghausen": "Was excited to see .NET Core 2.1 Preview 2 drop on NuGet 16 hours ago.  Is there an ETA on when the runtime & SDK will make it to Docker Hub?. ",
    "JanKonopka": "That's what I meant by playing with CancellationToken. It works on Windows, but not on Linux.. ",
    "Liudfdj": "Please leave a comment on my site if you\u2019ve made a pie. only care. ",
    "AiOO": "I'm sorry. I don't understand what you said.. ",
    "seriouz": "Yeah you cannot use dotnet core for WinForms!\nYou have to use FullFramework.. ",
    "lindexi": "I start up my application that throw BadImageFormatException\nSystem.BadImageFormatException: \u672a\u80fd\u52a0\u8f7d\u6587\u4ef6\u6216\u7a0b\u5e8f\u96c6\u201cSystem.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\u201d\u6216\u5b83\u7684\u67d0\u4e00\u4e2a\u4f9d\u8d56\u9879\u3002\u8be5\u6a21\u5757\u5e94\u5305\u542b\u4e00\u4e2a\u7a0b\u5e8f\u96c6\u6e05\u5355\u3002\n\u6587\u4ef6\u540d:\u201cSystem.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\u201d. .NET Core runtime. ",
    "SirwanAfifi": "@wfurt I think .NET Core 1.x doesn't support macOS High Sierra Version 10.13.3, don't you think so? Because my project works on Windows . (+)\nPS: I also get the same error (dialog) when I do:  dotnet ef --startup-project ../MyProject.Web/ database update :\n[1]    2421 segmentation fault  dotnet ef --startup-project ../MyProject.Web/ database update\nUnable to retrieve project metadata. Ensure it's an MSBuild-based .NET Core project. If you're using custom BaseIntermediateOutputPath or MSBuildProjectExtensionsPath values, Use the --msbuildprojectextensionspath option.\nI am a bit confused with .NET Core versioning. I am not sure if this bug has been fixed or not. here's my current version of the SDK on macOS:\n```\n.NET Command Line Tools (1.0.4)\nProduct Information:\n Version:            1.0.4\n Commit SHA-1 hash:  af1e6684fd\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  10.13\n OS Platform: Darwin\n RID:         osx.10.11-x64\n Base Path:   /usr/local/share/dotnet/sdk/1.0.4\n```. @bartonjs I get the same error. \nI also uninstalled .NET Core versions on my computer by removing dotnet directory from /usr/local/share/dotnet. then I installed .NET SDK 1.0.4. I also downloaded 1.0.9 runtime then copied its content to/usr/local/share/dotnet\nDid I miss something?\nHere's also my csproject file:\n```\n\n\nnetcoreapp1.1\ntrue\nMyProject.Web\nExe\nMyProject.Web\nportable-net45+win8\n\n\n\n\n\n\n.....\n\n```. Thank you @bartonjs . ",
    "bwalkenhorst": "FWIW: I tried Solution 2: break dotnet-runtime-2.0.0-2.0.0-1.x86_64 by ignoring some of its dependencies\nI wasn't all that surprised, but it seems to have worked. MonoDevelop still isn't convinced .Net Core 2.0 is actually installed, but when I try to build and run a simple Hello-World project from the command line, it works. ",
    "laktak": "@Petermarcu the document does not mention it but the preview labels are gone? How are beta's versioned?\nWill dotnet --version give me both the SDK and Runtime version (or how do I find out the runtime version)?\nDo you know when will this be implemented?. ",
    "Kritner": "Ok, so not just me!\nI see that I do in fact have 2.1.4 in my sdks folder, but even at root, with no global.json config, dotnet --version shows 2.1.100.\nI unfortunately cannot confirm that it said 2.1.4 prior to the VS update.. ",
    "mattsonnhalter": "I am having this issue as well. I can confirm that right before the update of Visual Studio to 15.6.1 I was getting 2.1.4 from dotnet --version command as expected and now am getting version 2.1.100 as others have mentioned. I checked my version right before the install without making any other changes to my machine. . ",
    "AppBeat": "Interesting. According to this post: https://stackoverflow.com/questions/978061/http-get-with-request-body\nstandard does not explicitly forbid this. GET body should be ignored by server.. I didn't say that this should be removed from .NET Core :) Although this is not common (bad?) practice I think .NET Core version in this case is more correct than .NET Framework implementation.\nI will try to test this on new managed implementation of SocketsHttpHandler which will probably be prefered HttpHandler in future for more consistent behaviour across all different platforms.\nhttps://github.com/dotnet/corefx/tree/master/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler. I created new functional test for SocketsHttpHandler and it works as it should:\n```\n[Fact]\npublic async Task SendAsync_HttpGetWithPayload_Success()\n{\n    await LoopbackServer.CreateServerAsync(async (server, url) =>\n    {\n        string responseBody =\n            \"HTTP/1.1 200 OK\\r\\n\" +\n            $\"Date: {DateTimeOffset.UtcNow:R}\\r\\n\" +\n            \"Content-Length: 0\\r\\n\" +\n            \"Connection: close\\r\\n\" +\n            \"\\r\\n\";\n    using (HttpClient client = CreateHttpClient())\n    {\n        var request = new HttpRequestMessage\n        {\n            RequestUri = url,\n            Method = HttpMethod.Get,\n        };\n\n        request.Content = new StringContent(\"{}\", Encoding.UTF8, \"application/json\");\n        Task<HttpResponseMessage> getResponseTask = client.SendAsync(request);\n        await server.AcceptConnectionAsync(async connection =>\n        {\n            Task<List<string>> serverTask = connection.ReadRequestHeaderAndSendCustomResponseAsync(responseBody);\n            await TestHelper.WhenAllCompletedOrAnyFailed(getResponseTask, serverTask);\n        });\n\n        Assert.True(getResponseTask.IsCompletedSuccessfully);\n        var result = getResponseTask.Result;\n        Assert.True(result.IsSuccessStatusCode);\n    }\n});\n\n}\n```. ",
    "IanKemp": "@AppBeat The server is free to ignore or accept the body; that should not prevent the client from sending a request that the server may ignore. It is ultimately up to the client to determine whether the server accepts requests like this.\nA popular example of a product (server) that supports GET requests with bodies is Elasticsearch, specifically their REST query API. In particular, the section on that page \"A GET Request with a Body?\" explains their rationale (but note that they do also allow POST as a fallback option for clients that do not support this).. Why was Microsoft.AspNetCore.Mvc.Formatters.JsonInputFormatter moved/renamed to Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter.cs?\n. ",
    "XavierDa": "2.0.6 hosting packages seems to fail on my server. i got 0x80070001 incorrect function and in the logs i have : \n[13E8:1018][2018-03-14T11:45:27]e000: Error 0x80070001: Failed to extract all files from container, erf: 1:2:0\n[13E8:0DE0][2018-03-14T11:45:27]e000: Error 0x80070001: Failed to wait for operation complete.\n[13E8:0DE0][2018-03-14T11:45:27]e000: Error 0x80070001: Failed to open container.\n[13E8:0DE0][2018-03-14T11:45:27]e000: Error 0x80070001: Failed to open container: WixAttachedContainer.\n[13E8:0DE0][2018-03-14T11:45:27]e312: Failed to extract payloads from container: WixAttachedContainer to working path: C:\\Windows\\Temp{0C5BEBA4-A477-414E-9BD5-B7FEE1F2A19C}\\4813312A2F31CD01D00A0E9C533F14EA75763888, error: 0x80070001.\n[13E8:13A0][2018-03-14T11:45:27]e000: Error 0x80070001: Cache thread exited unexpectedly.\nSize seems awfully low (564kB) compared to 2.0.5 hosting (93157kB). ",
    "BarakatAli": "Same issue here. ",
    "glat": "DotNetCore.2.0.6-WindowsHosting.exe does not include the AspNetCore 2.0.6 RuntimePackageStore but the 2.0.5 ones. Install manually the 2.0.6 ones.\n@leecow Please check that file.. I've an issue about transformation of web.config.\nTrasformation of:\nprocessPath=\"bin\\IISSupport\\VSIISExeLauncher.exe\" arguments=\"-argFile IISExeLauncherArgs.txt\"\noccurs by adding a new row in another  zone. See attached files \nweb.config.before.txt\nweb.config.after.txt\nPrevious SDK (302) worked correctly. I just upgraded to VS 15.8.0\nKind regards\n. ",
    "fabiano": "@XavierDa Had the same problem https://github.com/dotnet/core-setup/issues/3830.\nDownloaded the file from my machine and was able to get the full file. Maybe some problem with the CDN.. @leecow I saw the message from @Eilon. I'll wait for the fix. Thanks.. Download and installed the latest version DotNetCore.2.0.6-1-WindowsHosting.exe without problems. Thank you all!. ",
    "DoCode": "@leecow What about the 2.1.0-preview1(2.1.300.8174) bits? Does this base also get an update?. ",
    "daniel-white": "I'm getting this when trying to build my docker manually. I'm guessing its all related:\nThe following packages have unmet dependencies:\ndotnet-hosting-2.0.6-rtm-10011 : Depends: aspnetcore-store-2.0.6-rtm-10011 but it is not installable\nE: Unable to correct problems, you have held broken packages.\nThe command '/bin/sh -c apt-get install -y dotnet-hosting-2.0' returned a non-zero code: 100\nI'll manually point my build at 2.0.5 until this is resolved.. @leecow it is still broken for me\ndotnet-hosting-2.0.6 : Depends: dotnet-runtime-2.0.6 but it is not going to be installed\nE: Unable to correct problems, you have held broken packages.. i can't easily access it from appveyor - could it be a cdn timing issue?. @leecow here's an update - i ran my base docker image (only added apt-transport-https  and curl + my .net additions manually - here's the full output:\n```\nroot@91911fb10341:/# echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-artful-prod artful main\" > /etc/apt/sources.list.d/dotnetdev.list\nroot@91911fb10341:/# curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   983  100   983    0     0    983      0  0:00:01 --:--:--  0:00:01  5816\nroot@91911fb10341:/# mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg\nroot@91911fb10341:/# apt-get update\nGet:1 https://packages.microsoft.com/repos/microsoft-ubuntu-artful-prod artful InRelease [2846 B]\nHit:2 http://archive.ubuntu.com/ubuntu artful InRelease\nGet:3 http://security.ubuntu.com/ubuntu artful-security InRelease [78.6 kB]\nGet:4 https://packages.microsoft.com/repos/microsoft-ubuntu-artful-prod artful/main amd64 Packages [14.1 kB]\nGet:5 http://archive.ubuntu.com/ubuntu artful-updates InRelease [81.7 kB]\nGet:6 http://archive.ubuntu.com/ubuntu artful-backports InRelease [72.2 kB]\nGet:7 http://security.ubuntu.com/ubuntu artful-security/universe Sources [17.3 kB]\nGet:8 http://security.ubuntu.com/ubuntu artful-security/universe amd64 Packages [72.3 kB]\nGet:9 http://archive.ubuntu.com/ubuntu artful-updates/universe Sources [38.1 kB]\nGet:10 http://archive.ubuntu.com/ubuntu artful-updates/universe amd64 Packages [132 kB]\nGet:11 http://security.ubuntu.com/ubuntu artful-security/main amd64 Packages [188 kB]\nGet:12 http://archive.ubuntu.com/ubuntu artful-updates/multiverse amd64 Packages [4384 B]\nGet:13 http://archive.ubuntu.com/ubuntu artful-updates/main amd64 Packages [306 kB]\nGet:14 http://security.ubuntu.com/ubuntu artful-security/multiverse amd64 Packages [1826 B]\nGet:15 http://archive.ubuntu.com/ubuntu artful-backports/universe amd64 Packages [4130 B]\nFetched 1014 kB in 1s (617 kB/s)\nReading package lists... Done\nroot@91911fb10341:/# apt search dotnet-runtime-2.0.6\nSorting... Done\nFull Text Search... Done\ndotnet-runtime-2.0.6/artful 2.0.6-1 amd64\n  Microsoft .NET Core Runtime - 2.0.6 Microsoft.NETCore.App 2.0.6\nroot@91911fb10341:/# apt-get install -y dotnet-hosting-2.0.6\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nSome packages could not be installed. This may mean that you have\nrequested an impossible situation or if you are using the unstable\ndistribution that some required packages have not yet been created\nor been moved out of Incoming.\nThe following information may help to resolve the situation:\nThe following packages have unmet dependencies:\n dotnet-hosting-2.0.6 : Depends: dotnet-runtime-2.0.6 but it is not going to be installed\nE: Unable to correct problems, you have held broken packages.\n```. More info:\n```\nroot@91911fb10341:/# apt-get -s -o Debug::pkgProblemResolver=yes install -y dotnet-hosting-2.0.6\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nStarting pkgProblemResolver with broken count: 1\nStarting 2 pkgProblemResolver with broken count: 1\nInvestigating (0) dotnet-hostfxr-2.0.6:amd64 < none -> 2.0.6-1 @un uN Ib >\nBroken dotnet-hostfxr-2.0.6:amd64 Depends on dotnet-host:amd64 < none | 2.1.0-preview2-26406-04-1 @un uH > (>= 2.0.6)\n  Considering dotnet-host:amd64 0 as a solution to dotnet-hostfxr-2.0.6:amd64 4\n  Holding Back dotnet-hostfxr-2.0.6:amd64 rather than change dotnet-host:amd64\nInvestigating (0) dotnet-runtime-2.0.6:amd64 < none -> 2.0.6-1 @un uN Ib >\nBroken dotnet-runtime-2.0.6:amd64 Depends on dotnet-hostfxr-2.0.6:amd64 < none | 2.0.6-1 @un uH >\n  Considering dotnet-hostfxr-2.0.6:amd64 4 as a solution to dotnet-runtime-2.0.6:amd64 3\n  Holding Back dotnet-runtime-2.0.6:amd64 rather than change dotnet-hostfxr-2.0.6:amd64\nInvestigating (1) dotnet-hosting-2.0.6:amd64 < none -> 2.0.6-1 @un puN Ib >\nBroken dotnet-hosting-2.0.6:amd64 Depends on dotnet-runtime-2.0.6:amd64 < none | 2.0.6-1 @un uH >\n  Considering dotnet-runtime-2.0.6:amd64 3 as a solution to dotnet-hosting-2.0.6:amd64 10001\n    Reinst Failed early because of dotnet-runtime-deps-2.1.0-preview2-26406-04:amd64\n    Reinst Failed because of dotnet-host:amd64\n    Reinst Failed because of dotnet-hostfxr-2.0.6:amd64\nDone\nSome packages could not be installed. This may mean that you have\nrequested an impossible situation or if you are using the unstable\ndistribution that some required packages have not yet been created\nor been moved out of Incoming.\nThe following information may help to resolve the situation:\nThe following packages have unmet dependencies:\n dotnet-hosting-2.0.6 : Depends: dotnet-runtime-2.0.6 but it is not going to be installed\nE: Unable to correct problems, you have held broken packages.\n```\n. Looks like something is trying to pull in the 2.1 preview!\nSame with hosting 2.0.5\nI'll reopen.. @leecow any insight to what @robert-ovens noted?. Thanks @leecow that worked for me. What's the ETA on the permanent fix?\n. sounds like an issue for the coreclr or rosyln teams.\n. ",
    "vandreytrindade": "Getting error of file not found when trying to download DotNetCore.2.0.6-WindowsHosting.exe. ",
    "preetikr": "Thanks, for your patience on this.  The issue with the DotNetCore 2.0.6 Hosting bundle is now resolved and you can download the updated file from here. Please note as part of the refresh we have changed the file name from DotNetCore.2.0.6-WindowsHosting.exe to DotNetCore.2.0.6-1-WindowsHosting.exe. . Updated. ",
    "IDisposable": "Added PR to correct internal link to fixes list in the release notes https://github.com/dotnet/core/pull/1353. s/brnches/branches. Insert old verbiage about servicing releases\n\nServicing branches are for new patch versions of .NET Core that have not yet been released and are not yet supported. These patch versions are for previously released major/minor versions. \n . Move this block under the ## Future Releases section and above the version table... i.e. move line 5 down to line 8 (and add a blank line). \n",
    "benbenwilde": "We had problems running with System.Data.SqlClient version 4.4.0, getting a FileLoadException.\nhttps://www.nuget.org/packages/System.Data.SqlClient\nUpgrading the package to 4.4.3 fixed it.\n. ",
    "cocowalla": "\nThis release includes security fixes. You can read about the updates in the .NET Core release notes.\n\nNo I can't - the release notes only go up to 2.0.5.\n. ",
    "ryios": "Thanks, exactly the information I was looking for, huge help.  The prototype implementation is pretty close to what I was envisioning, I'll use/tweak that for now until it eventually makes it's way to the framework.. ",
    "umarsolehri": "VsProjectFault_4bff3231-b012-4fc1-b936-76b13034f267.failure.txt\nVsProjectFault_8bf73e3f-2c04-4e53-bf70-6e7554b2bc83.failure.txt\nVsProjectFault_8e04af0c-8349-4ec2-b671-de05c02e6dd6.failure.txt\nVsProjectFault_28deb9fa-7b99-44eb-92e8-dc13222194ad.failure.txt\nVsProjectFault_80e7eb42-21c5-41e8-abb9-19a13ef89c38.failure.txt\nVsProjectFault_2779d11f-0df7-431c-8457-2375f9e39b02.failure.txt\nVsProjectFault_8724be7f-9f17-41f3-970c-9f606b0c3f83.failure.txt\nVsProjectFault_8957c0ad-5189-4f14-9a06-c29e472e95d1.failure.txt\nVsProjectFault_ab59b504-6c20-4636-ad79-608840c1c310.failure.txt\nVsProjectFault_afc05dff-5957-4aa6-89e0-5db14361fa56.failure.txt\nVsProjectFault_bf2bb93c-d970-4950-9a6e-4c9c42a2049b.failure.txt\n. ",
    "rhegner": "What is the current state of this? I can't access the dotnet-core-website repo.... ",
    "Zorzin": "I fixed it by removing \"C:\\Program Files\\dotnet\\sdk\\2.1.102\" folder and having only \"2.1.101\". Solution provided from StackOverflow. ",
    "akinix": "I have the same problem when vs2017  upadted  to 15.6.3 and .net core uptated to 2.1.102.\ncsproj:\n<TargetFrameworks>net461;netcoreapp2.0</TargetFrameworks>\nerror:\nC:\\Program Files\\dotnet\\sdk\\2.1.102\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets  167. @Zorzin \ndelete C:\\Program Files\\dotnet\\sdk\\2.1.102\nthis way was ok !now can compile successfully. thank you!. ",
    "katiawheeler": "I can confirm that deleting the 2.1.102 sdk fixes the issue. Thanks!. ",
    "nickkarpuk": "@cgountanis , I just had to uninstall this 2.1.102 version of the SDK because of the issue with deploying .NET Core 2.0 app. I found a similar problem on Stackoverflow: https://stackoverflow.com/questions/49397793/error-publishing-net-core-2-0-web-applicaiton-to-azure-app-service . And 2.1.101 seems to be working fine in this regard.. ",
    "arushe0805": "I just found this.\nThis was made on 3/21/2018:\nhttps://github.com/dotnet/core/blob/master/release-notes/download-archives/2.1.102-sdk-download.md\nStill no notes.. @leecow is there any notes for this sdk patch?. ",
    "bonsailimited": "@leecow Overall the 2.1.2 example should be sufficient - however; when these \"silent releases\" occur - it would be helpful to know which runtime they sit over. Having just come off the 2.0.5->2.0.6 push during the SDK 100/101 releases, with days going by with no word or indication from MS, it can be frustrating, to say the least, when servers and deployments are involved, even if only in dev environments.. ",
    "jamespettigrew": "In order to reduces variables, I've simplified the build to this script:\n```\n!/bin/bash\nif [ ! -d poky ]; then\ngit clone git://git.yoctoproject.org/poky.git -b rocko\nfi\ncd poky\nif [ ! -d meta-openembedded ]; then\ngit clone https://github.com/openembedded/meta-openembedded -b rocko\nfi\nif [ ! -d meta-sunxi ]; then\ngit clone https://github.com/linux-sunxi/meta-sunxi -b master\nfi\nif [ ! -d meta-mender ]; then\ngit clone git://github.com/mendersoftware/meta-mender -b rocko\nfi\nsource ./oe-init-build-env\nbitbake-layers add-layer ../meta-openembedded/meta-oe\nbitbake-layers add-layer ../meta-openembedded/meta-python\nbitbake-layers add-layer ../meta-openembedded/meta-networking\nbitbake-layers add-layer ../meta-sunxi\nbitbake-layers add-layer ../meta-mender/meta-mender-core\nbitbake-layers add-layer ../meta-dotnettest\ncat << EOF >> conf/local.conf\nMACHINE = \"nanopi-neo\"\nIMAGE_BOOT_FILES ?=\"boot.scr\"\nIMAGE_BOOTLOADER_FILE = \"u-boot-sunxi-with-spl.bin\" \nIMAGE_BOOTLOADER_BOOTSECTOR_OFFSET=\"16\"\nIMAGE_FSTYPES = \"ext4\"\nDISTRO_FEATURES_append = \" systemd\"\nVIRTUAL-RUNTIME_init_manager = \"systemd\"\nDISTRO_FEATURES_BACKFILL_CONSIDERED = \"sysvinit\"\nVIRTUAL-RUNTIME_initscripts = \"\"\nINHERIT += \"mender-full buildhistory\"\nMENDER_ARTIFACT_NAME = \"release-1\"\nBUILDHISTORY_COMMIT = \"1\"\nPACKAGECONFIG_pn-curl_append = \"zlib ipv6 ssl\"\nIMAGE_INSTALL_append = \" kernel-devicetree dotnetcore\" \nEOF\nbitbake core-image-minimal\n```\nThe 'meta-dotnettest' layer is just some unrelated u-boot and kernel patches along with the dotnetcore recipe which is as follows:\n```\nDESCRIPTION = \".NET Core 2.0.6\"\nHOMEPAGE = \"http://dot.net/\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM=\"file://LICENSE.txt;md5=42b611e7375c06a28601953626ab16cb\"\nSECTION = \"devel\"\nPV = \"2.0.6\"\nPR = \"r0\"\nRPROVIDES_${PN} = \"dotnetcore\"\nDEPENDS = \"zlib curl\"\nRDEPENDS_${PN} = \"libunwind icu curl libcurl openssl libgssapi-krb5 util-linux-libuuid lttng-ust\"\nFILESEXTRAPATHS_prepend := \"${THISDIR}/files:\"\nSRC_URI = \"file://dotnet-runtime-2.0.6-linux-arm.tar.gz\"\nS = \"${WORKDIR}/dotnet-runtime-2.0.6-linux-arm\"\nSilence some QA warnings\nINSANE_SKIP_${PN} += \"staticdev already-stripped ldflags\"\ndo_compile() {\n}\ndo_install() {\n    install -d ${D}/opt/dotnet\n    cp -R --no-dereference --preserve=mode,links -v ${WORKDIR}/dotnet-runtime-2.0.6-linux-arm/* ${D}/opt/dotnet/\n}\nFILES_${PN} = \"/opt/dotnet\"\nFILES_${PN}-dbg += \"/opt/dotnet/.debug\"\nPACKAGES = \"${PN}-dbg ${PN}\"\n. I suspected the 'CURL_OPENSSL_3' part of the error message may have been the culprit. With this in mind, I ran:\nobjdump -T libcurl.so.4\n...\n00021aa8 g    DF .text  00000044  Base        curl_mfprintf\n```\nNoticing all the references to 'Base', I then made a curl bbappend to set the '--enable-versioned-symbols' flag and after recompiling objdump was returning 'CURL_OPENSSL_4' in the symbols instead of 'Base'. Finally, I patched libcurl.vers.in in the curl source to change the version flavour and after recompiling the symbol versions read 'CURL_OPENSSL_3' and now the Yocto build completes successfully. I haven't yet tested it to be sure it won't blow up at runtime.\nThe question is why are the prebuilt binaries expecting 'CURL_OPENSSL_3'? Curl itself doesn't appear to have used this version for around a decade, and the corefx source code has comments referencing relatively recent versions of curl so I don't think there's a genuine incompatibility here. Is this a corefx build issue or is something just lost on me? Perhaps there's a Yocto setting that will avoid this problem altogether?. @jran-dasa \nI created the following patch for curl 7.54.1 and then modified the curl recipe so that the patch would be applied before curl gets compiled by Yocto. \n```\nFrom fd9e88d37ef3aa8c08c52a3bed8bd1ce9e0b6a43 Mon Sep 17 00:00:00 2001\nFrom: James james@innovum.com.au\nDate: Thu, 22 Mar 2018 14:20:29 +1100\nSubject: [PATCH 1/1] Modify symbol versions\nShould silence spurious libcurl dependency errors when packaging dotnetcore\nlib/libcurl.vers.in | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\ndiff --git a/lib/libcurl.vers.in b/lib/libcurl.vers.in\nindex ae978a4..bce5633 100644\n--- a/lib/libcurl.vers.in\n+++ b/lib/libcurl.vers.in\n@@ -6,7 +6,7 @@ HIDDEN\n     _save*;\n };\n-CURL_@CURL_LT_SHLIB_VERSIONED_FLAVOUR@4\n+CURL_@CURL_LT_SHLIB_VERSIONED_FLAVOUR@3\n {\n   global: curl_;\n   local: ;\n-- \n2.7.4\n```\nIf this doesn't make any sense or you need more help let me know!. Forgot about that part, sorry!\nGlad you got it working! . ",
    "jran-dasa": "@jamespettigrew it doesn't look like the Yocto notes ever got updated..\nCould you possibly provide the bbappend that solved this issue? I cannot get it to work.. @karelz Thank you for the information. Then it is even more strange that Yocto is throwing errors. I'm using a freshly downloaded 2.1.5. @jamespettigrew Thank you very much. \nI finally got it working.\nThe patch did not do it all on its own, but when I also added \nEXTRA_OECONF += \"--enable-versioned-symbols\"\ninto Curl bbappend, I could finally build the rootfs without errors.. ",
    "DiskJunky": "Hadn't seen that - I'll leave it with ye. Thanks again for all the info relating to that, it really helped us out!. ",
    "danstur": "This definitely seems to violate the specification: \n\nEvery output parameter of a method must be definitely assigned before the method returns.\n\n. ",
    "Pedestrian22": "Yes, I did. Thanks for your answer. I'm trying to solve the problem ASAP. That's my first program run on Ubuntu and I have some troubles, as you see. . ",
    "kevin-jing": "The issue is resolved when I uninstall VS 2017 and only leave VS 2017 Preview 2.. ",
    "juztin": "hmmm...\nWas steered in the wrong direction. The list of files to archive is pulled from a DB2 database, using IBM's IBM.Data.DB2.Core-lnx driver. The segfault happens ONLY when a new connection is created. In this case the connection is successful, and results are retrieved. Everything works if I hard-code the values from the DB, and simply don't open a DB connection.\nI'll go ahead and file this with IBM, I guess... ",
    "slawomirbrys": "PR #1394 . Conditions taken from other github issue when faced the problem with compiler, but just checked without them and works well. Will change to latest instead of 7.2.\nAnd yes, async was available since 7.1.. Will remove.. Done.. Done.\n. ",
    "Moke-RS": "I've tried to install following the instructions for Ubuntu 17.10 (the newest available at https://www.microsoft.com/net/learn/get-started/linux/) and at certain point it gives the following error:\nThe following packages have unmet dependencies:\ndotnet-runtime-2.0.6 : \nDepends: libcurl3 (>= 7.16.2) but it is not going to be installed\nDepends: libicu57 but it is not installable\nDepends: dotnet-hostfxr-2.0.6 but it is not going to be installed\n. I was just stating, not complaining. I have Ubuntu 18.04 on my machine and I'm willing to use dotnet on it but unfortunately it isn't compatible at the moment. . @svick I was able to install it following the link you gave. Thanks!. ",
    "Kirides": "Disclaimer: I'm not part of the development team, or associated with microsoft in any other way.\nlooking at the release schedule for Ubuntu 18.04 Bionic Beaver, it turns out the final freeze will be on April 19th\nRead the following sentence in a mild voice please :)\nI would recommend you to wait until that day, before complaining about stuff not working.. > For us, we had a service client that was using HttpClient internally. The class was getting instantiated for each incoming request by the DI container (resulting in a new HttpClient for each incoming request). We changed the way the client was registered such that it is only instantiated once for the entire application and the issue was resolved.\n@antoinne85 this is a common mistake, people do regarding HttpClient and one of the reasons why IHttpClientFactory was added in DotNet Core 2.1. (another being singleton HttpClients not respecting DNS changes by default)\nSee https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests\n\nThe original and well-known HttpClient class can be easily used, but in some cases, it isn't being properly used by many developers.\nAs a first issue, while this class is disposable, using it with the using statement is not the best choice because even when you dispose HttpClient object, the underlying socket is not immediately released and can cause a serious issue named \u2018sockets exhaustion\u2019. For more information about this issue, see You're using HttpClient wrong and it's destabilizing your software blog post.. \n",
    "QuAzI": "@Kirides Why you didn't suggest to wait second \"service pack\" before start to fix actual troubles with obsolete dependencies?\n18.04 will have only minor updates now.\nRight now dotnet and VSCode for him can't work and some people must use for new projects other solutions which have fewer dependencies problems and which works right now.. It is available and installable now. Thanks!\n```\nNO_PUBKEY EB3E94ADBE1229CF\nsudo apt-key adv --keyserver packages.microsoft.com --recv-keys EB3E94ADBE1229CF\nNO_PUBKEY B02C46DF417A0893\nsudo apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893\nsudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-bionic-prod bionic main\" > /etc/apt/sources.list.d/dotnetdev.list'\nsudo apt update\nsudo apt install dotnet-sdk-2.1\n```. ",
    "Voltir": "Also can't install on 18.04. ",
    "eman1986": "@QuAzI post was the ticket, they need to replace the instructions to that as that worked perfectly. ",
    "moajday": "Yesterday, I ran into exactly this same problem on Lubuntu 18.10. I'll use keys according to @QuAzI later today. Let's see how it goes.. ",
    "fatihkaratay": "The issue was not related to Dotnet Core. . The issue was not related to Dotnet Core. . ",
    "ekhtiari": "Thanks @Tratcher \nI used this code : \nvar myurl= new Uri(HttpContext.Request.GetDisplayUrl()).GetLeftPart(UriPartial.Authority);\n. ",
    "antonheryanto": "just install for fedora 27 but seem had problem with aspnetcore-runtime-2.1.0-preview2-final-2.1.0_preview2_final-1.x86_64 package where installation path suppose to be \nsh\n/usr/share/dotnet/shared/\nbut instead go to \nsh\n/opt/rh/rh-dotnet20/root/usr/lib64/dotnet/shared/\nmight be script errors\nsorry posting here, try find the correct repo . ",
    "TomGroeneboer": "We're seeing the same issue on a Debian Jessie Docker image. \nThis is the error message: \n```\nStep 3/3 : RUN apt-get install dotnet-sdk-2.1.104\n ---> Running in b72d81a20fb3\nReading package lists...\nBuilding dependency tree...\nReading state information...\nSome packages could not be installed. This may mean that you have\nrequested an impossible situation or if you are using the unstable\ndistribution that some required packages have not yet been created\nor been moved out of Incoming.\nThe following information may help to resolve the situation:\nThe following packages have unmet dependencies:\n dotnet-sdk-2.1.104 : Depends: dotnet-runtime-2.0.6 but it is not going to be installed\nE: Unable to correct problems, you have held broken packages.\nThe command '/bin/sh -c apt-get install dotnet-sdk-2.1.104' returned a non-zero code: 100\n```\nThis is our Dockerfile:\n```\nFROM debian:jessie\nRUN apt-get update && \\\n    apt-get install -y curl libunwind8 gettext apt-transport-https && \\\n    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg && \\\n    mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg && \\\n    sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/debian/8/prod jessie main\" > /etc/apt/sources.list.d/dotnetdev.list' && \\\n    apt-get update\nRUN apt-get install dotnet-sdk-2.1.104\n```. ",
    "whvod": "Hello, I get the same problem, will moving down to ubuntu 16 solve this?. ",
    "vincenzoml": "I have the same problem; eagerly awaiting.. ",
    "halomademeapc": "Unable to install here as well, 17.10. ",
    "dandago": "This needs reopening. Ubuntu 17.10.1, same issue.. ",
    "angshuman": "Same issue. Needs reopening. ",
    "Sphinxs": "The same here, I tried to install using aptitude and synaptic, but nothing ( Missing packages ) .... ",
    "mhsany": "Does anybody find a fix for this? I am having the same error with Ubuntu 17.10 and dotnet-runtime-2.0.7. ",
    "senwen": "Ditto for us on 16.04 . ",
    "chances": "I'm having a similar issue following the instructions to install the .NET Core SDK:\n```\n$ sudo apt-get install dotnet-sdk-2.1\nReading package lists... Done\nBuilding dependency tree     \nReading state information... Done\nNote, selecting 'dotnet-sdk-2.1.101' for regex 'dotnet-sdk-2.1'\nNote, selecting 'dotnet-sdk-2.1.105' for regex 'dotnet-sdk-2.1'\nSome packages could not be installed. This may mean that you have\nrequested an impossible situation or if you are using the unstable\ndistribution that some required packages have not yet been created\nor been moved out of Incoming.\nThe following information may help to resolve the situation:\nThe following packages have unmet dependencies:\n dotnet-sdk-2.1.101 : Depends: aspnetcore-store-2.0.6 but it is not going to be installed\nE: Unable to correct problems, you have held broken packages.\n```\n~~Please reopen this issue.~~\nEDIT: Following this guide blog post resolved my issue.. I'm having a similar issue following the instructions to install the .NET Core SDK:\n```\n$ sudo apt-get install dotnet-sdk-2.1\nReading package lists... Done\nBuilding dependency tree     \nReading state information... Done\nNote, selecting 'dotnet-sdk-2.1.101' for regex 'dotnet-sdk-2.1'\nNote, selecting 'dotnet-sdk-2.1.105' for regex 'dotnet-sdk-2.1'\nSome packages could not be installed. This may mean that you have\nrequested an impossible situation or if you are using the unstable\ndistribution that some required packages have not yet been created\nor been moved out of Incoming.\nThe following information may help to resolve the situation:\nThe following packages have unmet dependencies:\n dotnet-sdk-2.1.101 : Depends: aspnetcore-store-2.0.6 but it is not going to be installed\nE: Unable to correct problems, you have held broken packages.\n```\n~~Please reopen this issue.~~\nEDIT: Following this guide blog post resolved my issue.. ",
    "leroydev": "@qdesk You'll probably want to keep an eye on https://github.com/dotnet/coreclr/issues/969. ",
    "mcwienczek": "Thanks a lot for help guys. That's enough for me. I just wanted some confirmation that Microsoft is still all-in for .NET Core. ;) Have a nice weekend. ",
    "calvin-pietersen": "moved to https://github.com/dotnet/corefx/issues/29080. ",
    "robert-ovens": "I'm experiencing the same issue that @daniel-white has raised.\nKey issue here appears to be the dotnet-host package which has a dependency on dotnet-runtime-deps-2.1.0-preview2-26406-04. This issue applies to any dotnet-.2.0. package. As a result package manager install is not possible.\nThe dotnet-host package does not have a version unlike other dotnet packages. \nChecking out the package manifest, the version is named correctly, but the package name does not include the version. I suspect that in processes all the manifest items from 1.1.0.1 right up to 2.1.0-preview.. and dotnet-host is left with the most recent one. HTH\nPackage: dotnet-host\nPriority: standard\nSection: libs\nInstalled-Size: 155\nMaintainer: .NET Core Team <dotnetpackages@dotnetfoundation.org>\nArchitecture: amd64\nVersion: 2.1.0-preview2-26406-04-1\nDepends: dotnet-runtime-deps-2.1.0-preview2-26406-04 (>= 2.1.0-preview2-26406-04)\nConflicts: dotnet, dotnet-nightly\nFilename: pool/main/d/dotnet-host/dotnet-host-2.1.0-preview2-26406-04-x64.deb\nSize: 34548\nMD5sum: 13e3419a8297319637ad6d7e1c1e7450\nSHA1: ecab4532faa592993e83724d781d46d6dc50edb9\nSHA256: db812ea1321a385b2bfe5acaefdb48bc9f9ca37b48612178ea7c9db319ed601c\nSHA512: 7c0f4dcbc2124897c4ab1438ce90366f2fe54ddfdee2a5c85846c4d4f22d5d446cc2a7ea32989341a41e69d15cfb8e31a294e2008f8cf8c4c068199484f2c361\nDescription: Microsoft .NET Core Host - 2.1.0 Preview 2\n .NET Core is a development platform that you can use to build command-line applications, microservices and modern websites. It is open source, cross-platform and is supported by Microsoft. We hope you enjoy using it! If you do, please consider joining the active community of developers that are contributing to the project on GitHub (https://github.com/dotnet/core). We happily accept issues and PRs.\nHomepage: https://dot.net/core. ",
    "elementalpete": "I experienced the same issue after upgrading (path in warning message contains a double slash, actual path has only a single slash).  Downgrading to 2.0.1 solved the issue for now.. ",
    "asadsahi": "@leecow might need to update https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-2.1.300-preview2 page as well?. ",
    "sven5": "Why not simply add the data-val-number attribute in your View like this:\n```aspx\n\n. @karelz Thanks for replying. It's already resolved.. ",
    "thegodliek": "I'm currently doing that @sven5, but my question is why isn't that done automatically by the framework just like MVC5.. ",
    "thiagomajesk": "@omajid Thanks for the quick response... Still is not very clear to me how to locate this information.\nWhat I'm looking for specifically is:\n| .NET Core  | C# |\n|---|---|\n| .NET Core 2.1-preview2   | C# X.X  | \n| .NET Core 2.1-preview1 | C# X.X\n.NET Core 2.0 | C# X.X \nI have to say to the team that a thoroughly review of the documentation on this aspects would be very appreciated by the users. To me, since the .net core (standard) announcement, things are looking kinda messy (documentation wise).. ",
    "Mayocampo": "Hi @leecow , i have the same issue trying to install 2.1.105. Already executed sudo apt-get remove dotnet-host but error still there... What other steps can we follow to install core 2.0 ?\n(i\u00b4m doing this process in order to install JetBrains Rider)... By the way, i'm using Linux Mint Sylvia (so, i suppose that instructions for Ubuntu 17 works seamlessly). Followed instructions here\nhttps://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.7-download.md\nAnd still not working\n\n. Also tried to install only dotnet-runtime-2.0.7 and get this error\n```\nmay@maylinux ~ $ sudo apt-get install dotnet-runtime-2.0.7\nLeyendo lista de paquetes... Hecho\nCreando \u00e1rbol de dependencias     \nLeyendo la informaci\u00f3n de estado... Hecho\nNo se pudieron instalar algunos paquetes. Esto puede significar que\nusted pidi\u00f3 una situaci\u00f3n imposible o, si est\u00e1 usando la distribuci\u00f3n\ninestable, que algunos paquetes necesarios a\u00fan no se han creado o se\nhan sacado de \u00abIncoming\u00bb.\nLa siguiente informaci\u00f3n puede ayudar a resolver la situaci\u00f3n:\nLos siguientes paquetes tienen dependencias incumplidas:\n dotnet-runtime-2.0.7 : Depende: libgssapi-krb5-2 (>= 1.14+dfsg) pero 1.13.2+dfsg-5ubuntu2 va a ser instalado\n                        Depende: libicu57 pero no es instalable\n                        Depende: dotnet-hostfxr-2.0.7 pero no va a instalarse\nE: No se pudieron corregir los problemas, usted ha retenido paquetes rotos.\n```\nSo, in english it says that: \n2.0.7 depends on libgssapi-krb5-2 (>= 1.14+dfsg) but 1.13.2+dfsg-5ubuntu2 will be installed\n2.0.7 depends on libicu57 but it's not installable (?)\n2.07 depends on  dotnet-hostfxr-2.0.7 but it will be not installed...\nSo.... whats happening here?. ",
    "ericwj": "Multiple versions are affected.\nI can reach\nThanks for downloading .NET Core Hosting Bundle 2.0.7 (Installer for Windows)\nbut I get prompted what I want to do with a 1.2 kb .exe.txt file by Edge and the link on the page Try again yields 404.. ",
    "emes001": "In the release notes, there is a known issue listed for Windows Server Hosting bundle. Has the correct install file be updated on the downloads  page? If not, can the link on that page be removed until a new, correct binary is published?. ",
    "jcouv": "@jaredpar Did we sort out ownership for this moving forward?\nWhen it comes to 8.0, are we going to update this file in 8.0 beta timeframe, or wait until 8.0?. Thanks for the heads-up.\nIs csharp-language a well-known string? Should it be csharplang?\nShould we also record VB language version?\nI assume the .NET Core folks would be responsible for updating this when they pick up new versions of the compiler packages. Is that right?. Who owns updating this?. @jaredpar Did we resolve the question of ownership? Thanks. ",
    "lukos": "(Actually, I found a workaround by downloading 2.0.6 instead). ",
    "deerchao": "Never used the Async suffix in my code.. ",
    "MarcoTheFirst": "I totally agree. There are enough indications that a method is async:\n\nReturn type is Task / Task<>\nCode completion presents an awaitable hint \nthe IDE will warn you by underlining in green \nCompiler will present a warning when task is not awaited. \n\nUsing the Async suffix only makes sense if your API offers the same functionality in both flavors:\nGetObject()\nGetObjectAsync()\nFor any other use case, using the Async-suffix is as silly as adding a Lazy-suffix to any Lazy<> property:\npublic Lazy<Customer> CustomerLazy.\nIf you wouldn't do that, then don't use the Async suffix :-). ",
    "lukepuplett": "Thanks for your answer.\nFor accuracy, number one isn't quite right, the compiler works by looking for an awaitable type, which is any type that has TaskAwaiter GetAwaiter() on it.. ",
    "MarcinSzyszka": "Ok, my bad. I did not restart VS after installing tool which added new environement variable. Sorry about that. Everything works ok ;). ",
    "FlyingWraptor": "Moved to https://github.com/dotnet/corefx/issues/29414. ",
    "vdanilchenko-schneider": "Thanks for following up on this. We are still interested in NET CORE support for the ARM variant with 16 FPRs, so please keep us posted.. Not that I recall. We didn\u2019t get any follow-up from that initial exchange.. Yes, I did. I am attaching it here.. ",
    "RaidMax": "Turned out to be an issue with EntityFramework, so I'm closing this.. ",
    "evo01": "I did some more testing around this issue and the temporary work around seems to be to not use named arguments.  If you leave the named arguments off, and use the following property instead, you can custom attributes in a dynamic type.\n[Custom1(\"Howdy\", new []{ EnumTesting_BasicEnum_Int16 .One})] \npublic class ClassTesting_ClassWithBlankAttribute\n{\n}\nvar attributes = dynamicType.CustomAttributes.ToList(); // WORKS\nAssert.AreEqual(1, attributes.Count); // WORKS\nThis does not work:\n[Custom1(\"Howdy\", new []{ EnumTesting_BasicEnum_Int16 .One}, MyField1 = new[] { EnumTesting_BasicEnum_Int16.One }, MyField2 = typeof(Custom1Attribute), MyProperty1 =1)]\npublic class ClassTesting_ClassWithBlankAttribute\n{\n}\n. ",
    "Marcel-B": "The same problem with a helloworld application.\npi@DotNetPi : ~ $ cd linux-arm/\npi@DotNetPi: \\~/linux-arm $ ls\nHelloWorld            HelloWorld.pdb                     libhostfxr.so\nHelloWorld.deps.json  HelloWorld.runtimeconfig.dev.json  libhostpolicy.so\nHelloWorld.dll        HelloWorld.runtimeconfig.json      publish\npi@DotNetPi:\\~/linux-arm $ sudo chmod 755 HelloWorld\npi@DotNetPi:~/linux-arm $ ./HelloWorld\nError:\n  An assembly specified in the application dependencies manifest (HelloWorld.deps.json) was not found:\n    package: 'runtime.linux-arm.Microsoft.NETCore.App', version: '2.0.0'\n    path: 'runtimes/linux-arm/lib/netcoreapp2.0/Microsoft.CSharp.dll'. I created the project on my Mac (with VisualStudio Community, Consoleapplication .NET Core). Then I ran the command dotnet publish -r linux-arm -c Release. Then I copied the whole folder linux-arm, which is in the path HelloWorld/bin/Release/netcoreapp2.0/linux-arm, to the Raspberry. . Omg. Ok. It works. Tanks for your help!. ",
    "yb101": "@richlander \nThanks for the prompt response. As you advised, we will try out with .Net Core 2.0.7 or to build our own image with the distro which we have in the company. . Our company has one RHEL hardened base image. So based on it, we were able to include dotnet core runtime package and 2 dependent rpm pkgs, and build our own base image for dotnet core program.. ",
    "TrueCodePoet": "I have looked here: https://www.microsoft.com/net/download/dotnet-core/runtime-2.0.5\nas well as here: https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.0-download.md\nWhen I download and unzip the file and then run >sn -vf I get\n\"does not represent a strongly named assembly\"\n. So it looks like that the SN tool does not work correctly with these files..  Do you know of anything I can use for Power-shell for signing verification? with these cross gen signatures?. ",
    "GearsAD": "+1\nIn .Net core automatic vcap binding would be really neat. For cloudfoundry we wrote our own and it has led to a herd of issues.. At least for my comment, its more about discoverability. I have a todo to take a look at it, much appreciated for the reference.. ",
    "springusr": "Thank you Glenn and Petermarcu. Yes steeltoe is there but I was little concern about roadmap and support of that project as I was not seeing much activities in past. But now since you (MS) are advocating it I believe its safe to use that for production applications.\nIdea here was to bring awareness and I think we all agree that .net core need to bridge some gaps. Steeltoe is perfect framework to make .net core cloud native ready and for rapid app dev.. ",
    "JaneConan": "THX all! I also work it on Raspberry Pi3 with your help yet. I'll contact you by mail.Thanks very much.. Thx @kizambrano ! Unfortunately, the CPU of our ARM64 bit is not compatible with the 32 bit compatibility mode. Thank you for your guidance.. Thx @Petermarcu  You know, I just want to find the runtime on ARM64.So you mean that.Net Core 2.1 does not support compiling and publishing runtime for ARM64?And \"There is a community build available that works on native arm64.\"How can I find it?Thanks!. @Petermarcu Thx! So when I publish the web project for linux with arm64 cpu on VS, which command do I need to use? Just [dotnet publish] ?. Thank you so much! wonderful ,it works!. @kizambrano  I am just use core 2.1RC1 and Peter showed me the community runtime.It works.. Yep, our project\u2019s scenario is also about adding support for arm64, and many APIs have not been applied in depth.After all, you know. use Linux, many of the COM components on the Windows platform need to migrate and compatibility, these jobs are likely to meet the problem, and also many be needed to your advice.. Sorry, I'm in a bit of a hurry. This is the case, we publish the Web application to the Linux arm64, \nthe direct use of the dotnet instructions to run,\nWhen runing to insert data, console prompts \n[Netcore home directory is inaccessible: Insufficient permissions!]\nCould it be that the Wwwroot folder does not give permissions?\nData insertion is normal, everything is not affected.\nBut this anomaly, which makes us so hairy, does not appear in Windows ' running environment.. ",
    "kizambrano": "Correct me if I'm wrong Peter, but I read somewhere that in order to run ARM32 code on ARMv8, the bootloader had to be modified to place ARMv8 in 32-bit mode. This is not viable if you are looking for performance. I believe what everyone is looking for is native dotnet  ARM64 run-time.. Peter,\n  I'm a bit lost here. If  the SDK does not support ARM64, how will publishing to the  arm64 produce an image that will run on it. . Peter,\n  I obtained the  arm64 run-time and planned to use it on a \"hello world\" console app. On both WIN and LINUX I get a 32-bit ARM image so it's not working for me:\n$ file dotnetApp\ndotnetApp: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-armhf.so.3, for GNU/Linux 2.6.32, BuildID[sha1]=a6c5099ce72ebdd5bedefbffa8ed9a40992c425c, stripped\n. I downloaded the tarball from:\n     https://github.com/dotnet/core-setup/blob/master/README.md#daily-builds\nThis is the one I have:\n dotnet-runtime-latest-linux-arm64.tar.gz. No joy. Note I am trying to build an image on WIN to run on a LINUX/ARM64 target. I cannot create images on the target since there is no SDK. When I attempt to publish for the target I get the following:\nC:\\ProgramFiles\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0\\build\\netcoreapp2.0\\Microsoft.NETCore.App.targets(19,5): error : Project is targeting runtime 'linux-arm64' but did not resolve any runtime-specific packages for the 'Microsoft.NETCore.App' package.  This runtime may not be supported by .NET Core. [C:\\cygwin64\\home\\KZambrano\\dotnetApp\\dotnetApp.csproj]\nI cannot unpack the ARM run-time on WIN, so how exactly is this supposed to work? On the target I get this from the ARM64 run-time:\nubuntu:~$ dotnet --version\nDid you mean to run dotnet SDK commands? Please install dotnet SDK from:\n  http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\n. Thx Peter,\nFinally got back to this. After I cleaned up the environment and installed with the link above, it looks much better.\ndotnetHW: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, for GNU/Linux 3.7.0, BuildID[sha1]=da585226095f694514d18f27c30a75a39091aab0, stripped\nMuch Gras!!!. Ok,\n  The good news is that the dotnetApp attempted to run, the bad news is that there are library dependencies unfortunately. Can anyone suggest  a procedure for this? I am on LEDE 17.1 (glibc) and saw the following post, but it's gone stale:\n\n.NET Core runs on basically any glibc based distro. Assuming the version of OpenWRT/LEDE you are using is glibc based, you can try this:\nDownload the runtime tar.gz and extract it somewhere and put it on your path. https://www.microsoft.com/net/download/thank-you/dotnet-runtime-2.0.4-linux-x64-binaries\nI'm smelling a source cross-compile unless a runtime can take care of this.. Just  sharing this so I can help a brother out. The PUBLISH -r linux-arm64 didn't run on my distro. However installing dotnet-runtime-2.0.7-linux-x64.tar and using an unpublished app did, but not out-of-the-box.\nThe dotnetHW.runtimeconfig.json  had to be modified to get around some dependencies per GOOGLE as follows:\n\n{\n    \"runtimeOptions\": {\n        \"configProperties\": {\n            \"System.Globalization.Invariant\": true\n        }\n    }\n}\n\nSo there is joy, got a Hello World!!!. ",
    "VictorioBerra": "@uffebjorklund thank you for looking into this and replying. Yes that solution is something I would really like to avoid. I wonder if this is a bug that was introduced with the recent SDK/Runtime update?. Well I was able to create the bug using visual studio without ever touching\nthe .csproj files. I right click the references and added the assembly\nusing browse. so I think something is not working right.\nOn Sun, May 6, 2018, 3:13 PM Uffe Bj\u00f6rklund notifications@github.com\nwrote:\n\n@VictorioBerra https://github.com/VictorioBerra I am not sure how this\nis supposed to work, I have never used Ref with HinPath. Added a\nglobal.json to my sample repo and tested with the oldest sdk on my machine,\nsame issue. However, that was 2.1.4 (not to old).\nSaw some AspNet.Core config with that setup and I doubt that they load\nassemblies manually. Maybe I am missing something, or maybe it really is a\nbug.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/1501#issuecomment-386909789, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACzG620CeKXisfeqOPSzJ2Uh8DdEdfl3ks5tv1l8gaJpZM4T0Hb0\n.\n. \n",
    "joperezr": "I'm not able to reproduce this when the host is a different Unix OS (tried Mac OS, and Ubuntu) but I was able to repro when using Fedora 28 as the host as described in the issue. I'm taking an initial look now.. I know this is not ideal, but with the help of @wfurt  did verify that by disabling SELINUX on the host now the docker container works correclty. To do this, on the host machine you can change the /etc/selinux/config to contain the line like: SELINUX=disabled and then rebooting the machine. After doing that, and spinning up a new container, dotnet seems to work correctly.. One more targetted workaround (so you don't have to disable the whole SELinux) is to run these two commands on the host machine before launching the container:\nsh\nausearch -c 'dotnet' --raw | audit2allow -M my-dotnet\nsemodule -X 300 -i my-dotnet.pp. This is the dump we got from the process when the segmentation fault happens:\n```\nThread 8 \"dotnet\" received signal SIGSEGV, Segmentation fault.\n[Switching to LWP 148]\n0x00007ffff7d95d87 in free (p=) at src/malloc/malloc.c:515\n515    src/malloc/malloc.c: No such file or directory.\n(gdb) bt\n0  0x00007ffff7d95d87 in free (p=) at src/malloc/malloc.c:515\n1  0x00007ffff6d3fc36 in FreeSignalAlternateStack() ()\nfrom /usr/share/dotnet/shared/Microsoft.NETCore.App/2.1.0-rc1/libcoreclr.so\n2  0x00007ffff7dc484b in __pthread_tsd_run_dtors () at src/thread/pthread_key_create.c:48\n3  0x00007ffff7dc3e09 in __pthread_exit (result=) at src/thread/pthread_create.c:38\n4  0x00007ffff6d79d95 in ExitThread () from /usr/share/dotnet/shared/Microsoft.NETCore.App/2.1.0-rc1/libcoreclr.so\n5  0x00007ffff6d79d09 in CorUnix::CPalThread::ThreadEntry(void*) ()\nfrom /usr/share/dotnet/shared/Microsoft.NETCore.App/2.1.0-rc1/libcoreclr.so\n6  0x00007ffff7dc3ff8 in start (p=0x7ffff268bae0) at src/thread/pthread_create.c:150\n7  0x00007ffff7dc5f00 in __clone () at src/thread/x86_64/clone.s:21\nBacktrace stopped: frame did not save the PC\n``. >I have verified locally that this is indeed the case - theSystem.Net.Http.dllfrom the .NET Core installation is used. How does .NET Core decide to both download4.3.0` from nuget, but decide to use the version inbox in .NET Core?\nWhen you are building your project we have a confict resolution task that runs as part of the build, which will look at all of the assemblies that are referenced, and look for conflicts and pick the right winners of each conflict. When referencing the System.Net.Http NuGet package, the contents of it will conflict with the ones that we see inbox. There are several different things we take into consideration when getting the winner, but in this particular case, we just check the Assembly Version of the inbox assembly and the one from the NuGet package, and the inbox one was choosen because it has a higher assembly version.\nWhen doing a build of your project, you can use /flp:v=diag parameter in order to see the output of this conflict resolution task, which will include all the conflicts that were found, and it will show which assembly was picked for each conflict and it will also say why it was picked.. > At some point the SDK also trims away assemblies which are part of the 'shared framework'. Is this part of conflict resolution?\nYes, one of the things considered during a conflict is whether or not an assembly is part of the shared framework, and this will take into effect in case all the other higher priority comparisons between both assemblies were inconclusive (meaning they had the same Assembly Version for example)\n\nCould an assembly from a nuget package 'override' a shared framework assembly if it as a higher assembly version?\n\nI believe so, but I'm not 100% sure on this as I believe the SDK does have a hammer for a specific set of shared framework assemblies. Again, I'm not too sure about this one so it would be better to ask either @ericstj or @dsplaisted \n\nCan you give some more info on the version numbers used? System.Net.Http has a version number for the NuGet package. In that NuGet package there are a number of assemblies, which each have their own version number. And then there is for each version of .NET Core also an assembly version number. How do you pick these different version numbers so they work well together?\n\nVersioning is indeed a very complex subject. Usually the version on the NuGet package is tied to Product releases, and the Assembly version is more specific to each assembly depending on API breaking changes, new features, patches and bug fixes. Conflict resolution won't look into the NuGet package version, but the assembly version instead. The reason is that one single NuGet package can carry multiple versions of the same assembly (one per each framework the assembly cross-compiles for). For the specific question of how to pick which of these assemblies in the package applies best, this logic doesn't happen at conflict resolution, and instead it is selected by NuGet. Basically, when restoring a NuGet package for your project, NuGet calculates what is the compile and runtime asset that best applies to the framework and Runtime that you are targeting.\nAgain, verisoning is a very complex subject so it is really hard to explain it in a single paragraph, but I hope that at least the above help shed some light on the questions you have.. > Starting ssh automatically at boot time.\nNIT: Should that be instead:\n[start ssh automatically at boot time](https://raspberrypi.stackexchange.com/questions/1747/starting-ssh-automatically-at-boot-time).. ",
    "RoySalisbury": "Blog post mentions that ARM32 (Raspberry Pi) is a supported platform for both the SDK and Runtime. However, I can find no download links.\nI tried the Debian 9 install, but that is for AMD64 only.. Finally found it after making some assumptions based on file names and other download locations...\nhttps://download.microsoft.com/download/B/1/9/B19A2F87-F00F-420C-B4B9-A0BA4403F754/dotnet-sdk-2.1.300-rc1-008673-linux-arm.tar.gz\nWhy make it so hard to find this stuff?. Still having fun trying to find this one:\naspnetcore-runtime-2.1.0-rc1-final-linux-arm.tar.gz\nSince its not part of the SDK install I figure I need that installed separately.. The only thing the SDK installed (for ARM) was\n/opt/dotnet/shared/Microsoft.NETCore.App/2.1.0-rc1\nand \n/opt/dotnet/sdk/2.1.300-rc1-008673\nBut the hash listing here shows it exists as a separate file (my guess is it is not part of the SDK or runtime for ARM).\nhttps://dotnetcli.blob.core.windows.net/dotnet/checksums/2.1-RC1-Runtime-SHA.txt. ",
    "laultman": "Never used the global.json and the MS docs are still referencing 1.0 preview. What is the current reference for 2.1 SDK that should be in the global.json. Is it: 2.1.300-rc1-008673\nThere should be a list somewhere with all the numbers - suggestion.. @leecow Thanks, great. I had the correct version but had no way to know. On another though, VS 2017 15.7.1 Stills spits out this statement: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.\nI found a thread where they were talking about how to stop or hide these messages. I guess that has not been done. Thanks again for the info!. ",
    "bcuff": "thanks for the merge \ud83d\udc4d . ",
    "WangAngIOT": "@pjanotti @wfurt Thanks. \nOn the embedded Linux system, I did a simple test and ran the program successfully.\nI may need to transplant my program that is running on the .NET Compact Framework to make sure it works perfectly.. ",
    "jasonkenneth": "Thanks! I'm confused by the versioning scheme here. \nI just saw a link to a slightly newer release today: \nsudo apt-get install dotnet-sdk-2.1.300-rc1-008673\n(from https://www.hanselman.com/blog/AnnouncingNETCore21RC1GoLiveANDNETCore30Futures.aspx). ",
    "Cloudmersive": "Is this fixed yet???. Very frustrating. Why was this closed if it wasn't fixed?. ",
    "petrroll": "Still an issue.. ",
    "marcelo-maciel": "\nThis fixes it: #1889 (comment)\n\nI needed one more step as mentioned in this issue\nsudo add-apt-repository universe\nand then:\nsudo apt-get install dotnet-sdk-2.1. ",
    "nbgucer": "If the following methods does not help, you could try following the documentation for Ubuntu 18.04 down below:\nhttps://github.com/dotnet/core/blob/master/release-notes/download-archives/2.1.0-download.md#ubuntu-1804. ",
    "Alexmitter": "Had the same issue.\nRemoved 2.1 to update to 2.2. And the Repo was just gone. \nI had to do the manual steps from https://github.com/dotnet/core/issues/1889#issuecomment-417092809 and it fixed it. But this seems to be a general problem with the way MS adds the repo with that deb package since i have the exact same issue with the pwsh repo.. ",
    "houseofcat": "Try replacing the AspNetCore 1.0 packages with AspNetCore.All (v2.0.8),. It might be the configuration / startup change. Try this change (without package updates):\n\nThats kestrel running successfully running a brand new project utilizing everything NetCore 2.0 (so no old packages) but try with your setup.\nAddMvcCore() is a little different then just utilizing AddMvc()\n. ",
    "dloukola": "@thyams  I have a plan to try that. However, I have no current intention to migrate that project to core 2.0. Installing a SDK shouldn't break older projects. I'm not referencing and 2.1-rc1 nuget packages in that project. 2.1 preview 2 didn't have this issue.. I appreciate the thought of updating...but like I said previously, I think we need a workaround that will allow the 2.1 sdk installed without having to change apps that aren't using 2.1. \nI have tried adding global.json files all over the place to no avail.. ",
    "khancyai": "Hi,\nWe launched our mobile application at yesterday.\nAPI server memory usage increasing to 90 percent with 40 users. Even currently 10 ten users active memory usage increasing allways won't cut. \nI am monitoring the server and restarting while finding solution. But couldn't find any solution i try to many things without success any help i'll be appreciated. I am missing something i didn't sleep last two day.\nHardware: 4 GB Memory / 80 GB Disk / 2 CPU - CentOS 7.4 x64 \nSoftware: Developed with visual studio community for mac, c# dot net core 2.0.8 & mongo 3.6.2\nServer: Nginx (proxy server)\nDid i miss a configuration on nginx.conf can you please look it to nginx.conf at the bottom line of this page. API configuration in the location /app section.\nI thought the garbage collector doesn't working. I try to set enable ServerGarbageCollection with runtimeconfiguration.json GC.Server = true; didn't change any thing.\nI know from benchmark tests the kestrel web server can handle 1.2m request in a second. But it's not for me :(\nI try to disable ApplicationInsights data collector with TelemetryConfiguration.Active.DisableTelemetry = true; but again didn't change anything and memory usage increasing.\nI am using repository pattern and using default ioc container in startup.cs i am adding service class like services.AddSingleton(); \nThe api controller constructor crating instance for me like : \n[Authorize, Route(\"api/[controller]\")]\n public class MessageController : Controller {\n   readonly IMessageCollection _messageCollection;\n   readonly IConfiguration _config;\n   public MessageController(IMessageCollection messageCollection, IConfiguration config) {\n     _messageCollection = messageCollection;\n     _config = config;\n   }   \n  }\nMy mongo context like this is it wrong approache?:\n```\npublic class MongoContext {\n public IMongoDatabase _database = null;\n public MongoContext()\n {\n   if (_database == null)\n   {\n Console.WriteLine(\"database null connect mongo\");\n var client = new MongoClient($\"{protocol}://{username}:{password}@{host}:{port}?authSource=admin\");\n if (client != null)\n {\n   _database = client.GetDatabase(database);\n }\n\n else\n {\n   throw new Exception(\"Mongo client can not be null. Check your connection string.\");\n }\n\n}\n }\n public IMongoCollection Messages => _database.GetCollection(\"user\");\n}\npublic interface IMessageCollection {\n  Task GetByIdAsync(string id);\n  Task SaveAsync(Message entity);\n  Task DeleteAsync(string id);\n  Task> FindAllAsync(Expression> predicate);\n  Task FindAsync(Expression> predicate);\n  Task> PagingAsync(Expression> predicate, int offset, int limit);\n  Task CountAsync(Expression> predicate);\n}\npublic class MessageCollection : IMessageCollection {\n  readonly MongoContext _context = null;\n  public MessageCollection(){\n    _context = new MongoContext();\n  }\npublic virtual async Task GetByIdAsync(string id) {\n    return await _context.Messages.Find(x => x.Id.Equals(id)).FirstOrDefaultAsync();\n  }\n}\n```\ndotnet --info\nProduct Information:\n Version:            2.1.200\n Commit SHA-1 hash:  2edba8d7f1\nRuntime Environment:\n OS Name:     centos\n OS Version:  7\n OS Platform: Linux\n RID:         centos.7-x64\n Base Path:   /usr/share/dotnet/sdk/2.1.200/\nMicrosoft .NET Core Shared Framework Host\n  Version  : 2.0.7\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\nNginx.conf\n```\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\ninclude /usr/share/nginx/modules/*.conf;\nevents {\nworker_connections 1024;\n\n}\nhttp {\nlog_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n\n                  '$status $body_bytes_sent \"$http_referer\" '\n\n                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n\n\naccess_log  /var/log/nginx/access.log  main;\n\nsendfile            on;\n\ntcp_nopush          on;\n\ntcp_nodelay         on;\n\nkeepalive_timeout   65;\n\ntypes_hash_max_size 2048;\n\ninclude             /etc/nginx/mime.types;\n\ndefault_type        application/octet-stream;\n\nlimit_req_zone $binary_remote_addr zone=one:10m rate=5r/s;\n\nserver_tokens off;\n\nclient_body_timeout 10;\n\nclient_header_timeout 10;\n\nsend_timeout 10;\n\nproxy_buffer_size   128k;\n\nproxy_buffers   4 256k;\n\nproxy_busy_buffers_size   256k;\n\nlarge_client_header_buffers 4 16k;\n\n\n\n#include /etc/nginx/conf.d/*.conf;\n\n\n\nserver {\n\n  listen *:80;\n\n  server_name app.com;\n\n  add_header Strict-Transport-Security max-age=15768000;\n\n  return 301 https://$host$request_uri;\n\n}\n\n\n\nupstream io_nodes {\n\n  ip_hash;\n\n  server 127.0.0.1:10255;\n\n}\n\n\n\nserver {\n\n  listen *:488 ssl;\n\n  server_name www.app.com app.com;\n\n\n\n  ssl on;\n\n  ssl_certificate  /etc/ssl/app.com.bundle.crt;\n\n  ssl_certificate_key  /etc/ssl/app.com.key;\n\n\n\n  ssl_protocols TLSv1.1 TLSv1.2;\n\n  ssl_prefer_server_ciphers on;\n\n  ssl_ciphers \"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\";\n\n  ssl_ecdh_curve secp384r1;\n\n  ssl_session_cache shared:SSL:10m;\n\n  ssl_session_tickets off;\n\n  ssl_stapling on; #ensure your cert is capable\n\n  ssl_stapling_verify on; #ensure your cert is capable\n\n\n\n  add_header Strict-Transport-Security \"max-age=63072000; preload\";\n\n  add_header X-Frame-Options DENY;\n\n  add_header X-Content-Type-Options nosniff;\n\n  client_max_body_size 20M;\n\n\n\n  include /etc/nginx/default.d/*.conf;\n\n\n\n  error_page 404 /404.html;\n\n    location = /40x.html {\n\n  }\n\n\n\n  error_page 500 502 503 504 /50x.html;\n\n    location = /50x.html {\n\n  }\n\n\n\n  location / {\n\n    proxy_set_header Upgrade $http_upgrade;\n\n    proxy_set_header Connection \"upgrade\";\n\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n    proxy_set_header Host $host;\n\n    proxy_http_version 1.1;\n\n    proxy_pass http://io_nodes;\n\n  }\n\n\n\n}\n\n\nserver {\n\n  listen *:443    ssl;\n\n  server_name www.app.com app.com;\n\n\n\n  ssl on;\n\n  ssl_certificate  /etc/ssl/app.com.bundle.crt;\n\n  ssl_certificate_key  /etc/ssl/app.com.key;\n\n\n\n  ssl_protocols TLSv1.1 TLSv1.2;\n\n  ssl_prefer_server_ciphers on;\n\n  ssl_ciphers \"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\";\n\n  ssl_ecdh_curve secp384r1;\n\n  ssl_session_cache shared:SSL:10m;\n\n  ssl_session_tickets off;\n\n  ssl_stapling on; #ensure your cert is capable\n\n  ssl_stapling_verify on; #ensure your cert is capable\n\n\n\n  add_header Strict-Transport-Security \"max-age=63072000; preload\";\n\n  add_header X-Frame-Options DENY;\n\n  add_header X-Content-Type-Options nosniff;\n\n  client_max_body_size 20M;\n\n\n\n  include /etc/nginx/default.d/*.conf;\n\n\n\n  error_page 404 /404.html;\n\n    location = /40x.html {\n\n  }\n\n\n\n  error_page 500 502 503 504 /50x.html;\n\n    location = /50x.html {\n\n  }\n\n\n\n  location / {\n\n    proxy_pass http://localhost:5004;\n\n    proxy_redirect off;\n\n    proxy_set_header Host $host;\n\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n  }\n\n\n\n  location /app {\n\n    rewrite /app/(.*) /$1 break;\n\n    proxy_pass http://localhost:5000;\n\n    proxy_redirect off;\n\n    proxy_set_header Host $host;\n\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n  }\n\n\n\n\n\n}#server\n\n}#http\n```. ",
    "damageboy": "Well, its obviously in your Packages file, the thing is I'm seeing this while trying to create  local mirror of the dotnet repo for a local installation on a internet disconnect network.\nI do realize this is a somewhat less common scenario, but not entire uncommon, still..\nI'm assuming my mirroring tool doesn't like mistmatches like this because it cannot know during the mirroring process what I'll be interested in installing in the future, therefore it is crapping out entirely.... @leecow \nAs for where I'm seeing this...\nAgain, this is a bit of a non-standard situation.\nI'm seeing this while attempting to create a mirror of the repo... using an apt mirroring tool.\nThat is why even if there is NO dependency on addlogin through, for example, installing dotnet-sdk-2.1.300... The mirroring tool doesn't care or know about that. As far as a mirroring tool would be concerned it's all or nothing. And the moment it sees an hash mismatch on the Package release files, it's game over.\nAgain... Stressing that this is a less than standard situation, since what is failing is the apt repo MIRRORING rather than the installation.\nI've previously opened an issue about this before, during the RC1 phase...\nHere it is: https://github.com/dotnet/core/issues/1530\n. It's literally the filenames. If you take a look in the repo itself, some filenames have a distro component in them, some don't.\nIt is technicaly ok to have the same filename twice, served for different distros, as long as it is the same file content. . Hmm, I see, I guess this is a wider issue...\nMaybe as a rolling solution for this we could start with fixing up the bionic repo which is pretty much only dotnet at this moment:\nOn my local repo, I downloaded the microsoft file and renamed them like this (by adding an -1804 suffix):\naadlogin_1.0.004850001_amd64-1804.deb\naadlogin_1.0.004860002_amd64-1804.deb\naadlogin_1.0.004870001_amd64-1804.deb\naadlogin_1.0.004880001_amd64-1804.deb\naadlogin_1.0.005150001_amd64-1804.deb\naadlogin_1.0.005160001_amd64-1804.deb\naadlogin_1.0.005200001_amd64-1804.deb\naadlogin-selinux_1.0.004850001_amd64-1804.deb\naadlogin-selinux_1.0.004860002_amd64-1804.deb\naadlogin-selinux_1.0.004870001_amd64-1804.deb\naadlogin-selinux_1.0.004880001_amd64-1804.deb\naadlogin-selinux_1.0.005150001_amd64-1804.deb\naadlogin-selinux_1.0.005160001_amd64-1804.deb\naadlogin-selinux_1.0.005200001_amd64-1804.deb\naspnetcore-runtime-2.1.0-preview2-final-x64-1804.deb\naspnetcore-runtime-2.1.0-rc1-final-x64-1804.deb\naspnetcore-runtime-2.1.0-x64-1804.deb\naspnetcore-store-2.0.0-ubuntu.18.04-x64-1804.deb\naspnetcore-store-2.0.3-ubuntu.18.04-x64-1804.deb\naspnetcore-store-2.0.5-ubuntu.18.04-x64-1804.deb\naspnetcore-store-2.0.6-ubuntu.18.04-x64-1804.deb\naspnetcore-store-2.0.7-ubuntu.18.04-x64-1804.deb\naspnetcore-store-2.0.8-ubuntu.18.04-x64-1804.deb\ndotnet-host-2.0.7-ubuntu.18.04-x64-1804.deb\ndotnet-host-2.1.0-x64-1804.deb\ndotnet-hostfxr-2.0.7-ubuntu.18.04-x64-1804.deb\ndotnet-hostfxr-2.1.0-preview2-26406-04-x64-1804.deb\ndotnet-hostfxr-2.1.0-rc1-x64-1804.deb\ndotnet-hostfxr-2.1.0-x64-1804.deb\ndotnet-hosting-2.0.7-ubuntu.18.04-x64-1804.deb\ndotnet-hosting-2.0.8-ubuntu.18.04-x64-1804.deb\ndotnet-runtime-2.0.7-ubuntu.18.04-x64-1804.deb\ndotnet-runtime-2.1.0-preview2-26406-04-x64-1804.deb\ndotnet-runtime-2.1.0-rc1-x64-1804.deb\ndotnet-runtime-2.1.0-x64-1804.deb\ndotnet-runtime-deps-2.1.0-ubuntu.18.04-x64-1804.deb\ndotnet-sdk-2.1.105-ubuntu.18.04-x64-1804.deb\ndotnet-sdk-2.1.200-ubuntu.18.04-x64-1804.deb\ndotnet-sdk-2.1.201-ubuntu.18.04-x64-1804.deb\ndotnet-sdk-2.1.300-preview2-008533-x64-1804.deb\ndotnet-sdk-2.1.300-rc1-008673-x64-1804.deb\ndotnet-sdk-2.1.300-x64-1804.deb\npackages-microsoft-prod_1.0-ubuntu18.04.1_amd64-1804.deb\nThis was enough to untangle the situation as far as I was concerned...\n. ",
    "mbearup": "OK I see that some of our mirrors had a copy of aadlogin-selinux_1.0.004870001_amd64.deb whose checksum didn't match. This can happen in rare instances if an issue occurs synchronizing files from our central origin to mirrors. I've replaced the incorrect files in all mirrors and will run a check for any other mismatches. If you have more issues let us know.\n. Obviously the failures are unexpected, thanks for bringing them to our attention. For those experiencing failures, could you respond back with the following.\n1. OS (specifically if it is a derivative of Ubuntu, not stock Ubuntu).\n2. Output of dpkg -l | grep \"packages-microsoft-prod\"\n3. Output of dpkg -L packages-microsoft-prod\nThere is a preinst script which checks for existence of the files, and that could certainly hit an error causing the package install to fail. But the .list file itself is just a file in the package, there's no magic that it uses to install.. I'm unable to repro the issue in PopOS. The .list file installs successfully and the dotnet-sdk-2.2 package is discovered.\nbash\nmbearup@pop-os:~$ sudo dpkg -i packages-microsoft-prod.deb\nSelecting previously unselected package packages-microsoft-prod.\n(Reading database ... 199115 files and directories currently installed.)\nPreparing to unpack packages-microsoft-prod.deb ...\nUnpacking packages-microsoft-prod (1.0-ubuntu18.04.1) ...\nSetting up packages-microsoft-prod (1.0-ubuntu18.04.1) ...\nmbearup@pop-os:~$ dpkg -l | grep packages-microsoft\nii  packages-microsoft-prod                          1.0-ubuntu18.04.1 \nmbearup@pop-os:~$ dpkg -L packages-microsoft-prod\n/etc\n/etc/apt\n/etc/apt/sources.list.d\n/etc/apt/sources.list.d/microsoft-prod.list\n/etc/apt/trusted.gpg.d\n/etc/apt/trusted.gpg.d/microsoft-prod.gpg\n/usr\n/usr/share\n/usr/share/lintian\n/usr/share/lintian/overrides\n/usr/share/lintian/overrides/packages-microsoft-prod\n/usr/share/doc\n/usr/share/doc/packages-microsoft-prod\n/usr/share/doc/packages-microsoft-prod/changelog.Debian.gz\n/usr/share/doc/packages-microsoft-prod/copyright\nmbearup@pop-os:~$ ll /etc/apt/sources.list.d\ntotal 20\ndrwxr-xr-x 2 root root 4096 Dec 18 11:36 ./\ndrwxr-xr-x 6 root root 4096 Dec 18 11:27 ../\n-rw-r--r-- 1 root root   78 May  8  2018 microsoft-prod.list\n-rw-r--r-- 1 root root  126 Dec 17 11:18 system76-ubuntu-pop-bionic.list\n-rw-r--r-- 1 root root  126 Dec 17 11:18 system76-ubuntu-pop-bionic.list.save\nmbearup@pop-os:~$ sudo apt-get update -qq\nmbearup@pop-os:~$ sudo apt-get install dotnet-sdk-2.2\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following additional packages will be installed:\n  aspnetcore-runtime-2.2 dotnet-host dotnet-hostfxr-2.2 dotnet-runtime-2.2 dotnet-runtime-deps-2.2 liblttng-ust-ctl4 liblttng-ust0 liburcu6\nThe following NEW packages will be installed:\n  aspnetcore-runtime-2.2 dotnet-host dotnet-hostfxr-2.2 dotnet-runtime-2.2 dotnet-runtime-deps-2.2 dotnet-sdk-2.2 liblttng-ust-ctl4 liblttng-ust0 liburcu6\n0 upgraded, 9 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 133 MB of archives.\nAfter this operation, 387 MB of additional disk space will be used.\nDo you want to continue? [Y/n]. Same for Hyper-V Quick Create 18.04. The .list file gets created successfully and the dotnet-sdk-2.2 package is discovered. Your responses to the earlier question will be helpful in diagnosing this further.. This is truly confusing. I simply cannot repro what you're seeing....\n1. Out of curiosity, could you do a sha256sum of the deb package? I get 54fb378267b8492f697a4d4f4ce3b339da750da00173f154d95701d81399aa6c\n2. Try getting the relevant logs via $ grep \"packages-microsoft-prod\" /var/log/dpkg.log. The package status is ii which means it's installed successfully, but maybe there's something in the logs?\n3. The only other thing that comes to mind is that the .list and .gpg file are marked as conffiles which get special treatment from dpkg. But that should only come into play for upgrade scenarios. Even then, preinst removes old copies of the files (which I just confirmed), and if preinst was failing then the package would not have ii status. And none of that should impact fresh installs at all.. The SHA256sum matches mine, which is a good sign. \nhalf-installed and half-configured are regular steps for package installation. As long as they get to installed then it should be fine. Also surprised to see upgrade in your logs, but that would happen if you re-installed the package while it was already present.\n\nIs this a fresh install, or a reinstall/upgrade? I've observed that the prerm removes existing versions of the .list and .gpg file. The intent is to remove these files during package removal (since conffiles are only removed by purge). But if this is an upgrade/reinstall (package state at time of install is ii or rc), then the removal by prerm gets tracked by dpkg, and neither file will get recreated (because dpkg thinks you no longer want them there). This is part of dpkg's conffile logic. In this case the fix is for prerm's file removal only to occur during package removal, not during upgrades. This is the only scenario where I can repro what you're seeing, but it wasn't clear from the thread that anyone was re-installing/upgrading the package.\nTry sudo dpkg --purge packages-microsoft-prod && sudo dpkg -i packages-microsoft-prod.deb - this will clear out dpkg's state regarding the .list and .gpg file, which should allow them to get installed. I'm not aware of any dpkg options that would prevent conffiles from getting installed.\nIf purge does not help, try installing the package with gdebi, to determine if this is a bug with dpkg.\nsudo apt-get install gdebi && sudo gdebi --non-interactive packages-microsoft-prod.deb\nIf all else fails, here's a test package which installs both files as regular files (not conffiles). This violates Debian package standards but would at least help us understand the nature of the issue. The hashsum is 424d938cdd89fa23502ee28600f54e2236c1988c1dfde14030ce912bf3362293\nhttps://pkgmscom.blob.core.windows.net/public/packages-microsoft-prod_1.0-ubuntu18.04.2_amd64.deb \n\n. Sounds like the issues are due to the package upgrade logic I described earlier. A new client package has been published which corrects the prerm logic during upgrade, and recreates the file if it was deleted by prerm.. I've only been able to repro the issue during an upgrade scenario. So my best guess is this what users are encountering - when they go to upgrade dotnet they first re-add the repo package which had the undesired effect of removing the repo.\n- As Lee pointed out, sudo dpkg --purge packages-microsoft-prod && sudo dpkg -i packages-microsoft-prod.deb will ensure the package gets installed properly.\n- On January 2nd I published a new client package which resolves this issue on upgrade. If people still see an issue with this new package we can certainly dig deeper.. @sweetpants regarding the package version (18.04.2), it reflects the second release of the client package for 18.04/bionic. We do not release client packages specifically for  each 18.04.* release, though I understand how that would be confusing.\nAs @dagood indicated, answers to those 5 questions will help us determine the cause of your issue. I'm also curious what error you're getting. Unable to install the packages-microsoft-prod.deb package? Unable to find the dotnet package once this is installed?. I know that for the packages.microsoft.com repos the folders are structured so that you can programmatically determine the correct path. For instance the following works with Ubuntu, would need some refinement to work on more distros.\nbash\n$ distro=$(cat /etc/lsb-release  | grep \"DISTRIB_ID\" | cut -d '=' -f 2)\n$ version=$(cat /etc/lsb-release  | grep \"DISTRIB_RELEASE\" | cut -d '=' -f 2)\n$ wget https://packages.microsoft.com/config/${distro,,}/${version}/prod.list. @betocollin The link you posted earlier has the correct steps, and it sounds like it's now working for you, is that correct?\nThe only error I'm currently aware of is that the bootstrap installer (packages-microsoft-prod.deb) had a bug where upgrades/reinstalls would result in the .list file being removed. I suspect that, since the install directions say to install it, people were reinstalling it (even though they already had it) resulting in their experiencing this issue. Not to imply that this is their fault - the package should have \"just worked.\" There is no reason to upgrade the packages-microsoft-prod - it provides no value. \n- This is detectable by checking for the presence of the package with dpkg -l | grep packages-microsoft-prod, and checking for the presence of the file with ls /etc/apt/sources.list.d/microsoft-prod.list. If the package is present but the .list file is not, you have this issue.\n- This is fixable by purging the package (dpkg --purge packages-microsoft-prod) and reinstalling it.\n- It is also fixable by directly installing the .list file into /etc/apt/sources.list.d/\n- It is also fixable by installing the latest version of the client package, which fixes the bug.\nIf anyone experiences the above issue on a fresh install I would be interested to know more. I have made several attempts in various environments (VMWare, Hyper-V, Azure VM) and am unable to repro on a fresh install.\nIf anyone experiences a different error, then it probably belongs in a separate thread.\n. Thanks for clarifying, @betocollin. Will wait to see if anyone else is still having issues.. ",
    "natemcmaster": "@Meenakshise Can you share the .csproj file of the netcoreapp1.1 application that is failing? Also, if you can, please share your NuGet assets file, which is found in \"(project directory)/obj/project.assets.json\". It will help us diagnose exactly which dependencies your application is using.. @Meenakshise Can you share the .csproj file of the netcoreapp1.1 application that is failing? Also, if you can, please share your NuGet assets file, which is found in \"(project directory)/obj/project.assets.json\". It will help us diagnose exactly which dependencies your application is using.. Try removing these line from your csproj file:\ndiff\n-  <PackageReference Include=\"System.Core\" Version=\"4.0.0\">       \n-  </PackageReference>\nI think this is actually the source of the problem. You don't need this PackageReference in .NET Core projects.. Try removing these line from your csproj file:\ndiff\n-  <PackageReference Include=\"System.Core\" Version=\"4.0.0\">       \n-  </PackageReference>\nI think this is actually the source of the problem. You don't need this PackageReference in .NET Core projects.. How are you deploying? Is the System.Core.dll file still present in your app? You may need to clean first or delete all files in your deployment output.. How are you deploying? Is the System.Core.dll file still present in your app? You may need to clean first or delete all files in your deployment output.. Which version of the .NET Core CLI and/or Visual Studio are you using? You need at least the .NET Core CLI v2.1.300-rc1. cc @rynowak @pranavkm which version of VS has Roslyn 2.8.0?. Which version of the .NET Core CLI and/or Visual Studio are you using? You need at least the .NET Core CLI v2.1.300-rc1. cc @rynowak @pranavkm which version of VS has Roslyn 2.8.0?. I don't know how you're using VSTS, so it's hard to say. To debug this, run dotnet --info at the top of your build script to see which version is being used.. I was able to reproduce the error. It appears the Hosted VS2017 agent queue still has VS 15.6. You'll need VS 15.7 do get the analyzers for .NET Core 2.1 to work.\n```\n& \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe\" -version\n2.7.0.62715 (db02128e)\n& \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\msbuild.exe\" -version\n15.6.85.37198\n```\nTry adding this to your project to workaround it until VSTS updates their VS version.\nxml\n<PropertyGroup>\n  <WarningsNotAsErrors>CS8032;$(WarningsNotAsErrors)</WarningsNotAsErrors>\n</PropertyGroup>\nClosing for now in favor of https://github.com/Microsoft/vsts-image-generation/issues/133. Afterthought: as long as your .sln file only has .NET Core or .NET Standard projects in it, another way to workaround this is to change your VSTS task to invoke dotnet.exe build on your .sln file instead of using the \"Visual Studio Build\" task. . @joeloff anything stand out to you in this log?. @joeloff anything stand out to you in this log?. @zitjubiz can you share the contents of the other logs files produced during install?. @zitjubiz can you share the contents of the other logs files produced during install?. What did your project look like before you upgraded to 2.1? Can you share a minimal repro?\n. While it certainly applies to core-setup, I think this applies more broadly. If we do this, it applies to dotnet/cli and aspnet as well.. While it certainly applies to core-setup, I think this applies more broadly. If we do this, it applies to dotnet/cli and aspnet as well.. cc @joeloff . cc @joeloff . This is a known limitation for ASP.NET Core 2.0 and older. In ASP.NET Core 2.1, @javiercn wrote a new file provider which will better map embedded resources back to file names. Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider.\ncc @javiercn - do we have docs for how to enable this?. This is a known limitation for ASP.NET Core 2.0 and older. In ASP.NET Core 2.1, @javiercn wrote a new file provider which will better map embedded resources back to file names. Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider.\ncc @javiercn - do we have docs for how to enable this?. Ok, let's use https://github.com/aspnet/Docs/issues/6988 to get this feature document.. Ok, let's use https://github.com/aspnet/Docs/issues/6988 to get this feature document.. Yes, I don't think this is an actual issue for corefx. IIUC the problem @tukzer is asking about is how to map from embedded resource name back to the original file path that produced this resource. This is not possible using vanilla .NET runtime and SDK bits. You have to capture this mapping at compile time, which is what @javiercn implemented in the new ManifestEmbeddedFileProvider API.. Yes, I don't think this is an actual issue for corefx. IIUC the problem @tukzer is asking about is how to map from embedded resource name back to the original file path that produced this resource. This is not possible using vanilla .NET runtime and SDK bits. You have to capture this mapping at compile time, which is what @javiercn implemented in the new ManifestEmbeddedFileProvider API.. @sabiland can you produce more detailed logging? There isn't enough information here for us to identify the issue.\nYou can elevate the logging level to \"Debug\" by changing your appsettings.Production.json file.\njson\n{\n    \"Logging\": {\n        \"LogLevel\": { \"Default\": \"Debug\" } \n    }\n}\nYou will also need to configure IIS to put these logs somewhere writable. See https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/aspnet-core-module?view=aspnetcore-2.1#log-creation-and-redirection for how to capture more logs.. @sabiland can you produce more detailed logging? There isn't enough information here for us to identify the issue.\nYou can elevate the logging level to \"Debug\" by changing your appsettings.Production.json file.\njson\n{\n    \"Logging\": {\n        \"LogLevel\": { \"Default\": \"Debug\" } \n    }\n}\nYou will also need to configure IIS to put these logs somewhere writable. See https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/aspnet-core-module?view=aspnetcore-2.1#log-creation-and-redirection for how to capture more logs.. Glad you found a fix. . Glad you found a fix. . ASP.NET Core is not supported on linux-arm64 yet, only arm32. See https://github.com/aspnet/Universe/issues/1117.\nSide note: I don't think the 2.2 builds of the SDK have started consuming 2.2 runtime bits.. ASP.NET Core is not supported on linux-arm64 yet, only arm32. See https://github.com/aspnet/Universe/issues/1117.\nSide note: I don't think the 2.2 builds of the SDK have started consuming 2.2 runtime bits.. @XbbLeon see the download links here: https://www.microsoft.com/net/download/linux. @XbbLeon see the download links here: https://www.microsoft.com/net/download/linux. ASP.NET Core is not supported on linux-arm64 yet, only arm32. See aspnet/Universe#1117.\nI'm not sure why csc.dll fails on Linux ARM64. Someone from @dotnet/roslyn might know.. ASP.NET Core is not supported on linux-arm64 yet, only arm32. See aspnet/Universe#1117.\nI'm not sure why csc.dll fails on Linux ARM64. Someone from @dotnet/roslyn might know.. You can get daily builds here: https://github.com/dotnet/core/blob/master/daily-builds.md. Also, how do I go about getting this to say arm32, not arm64? https://www.microsoft.com/net/download/linux\n\ncref https://github.com/dotnet/core-setup/issues/3122#issuecomment-400957801\n. Ping @leecow . :bell:. @nzain it looks like the website refactoring still has an error in it. The \"arm64\" link on the downloads page is incorrectly labeled. The link it downloads is actually arm32. I'll send an email to our website team and hopefully they will fix it. In the meantime, this is the link you're looking for. It contains the 2.1.2 ASP.NET Core runtime nad .NET Core runtime for arm32.\n\nNote: in 2.1, ASP.NET is \"shared runtime\", not a runtime store anymore (subtle, but important distinction). So, you won't find links in 2.1 that are labeled \"package runtime store.\"\n. This happens because ASP.NET Core 2.0 apps do not run on .NET Core 2.1, and the 2.1.302 SDK only installs .NET Core 2.1 runtime. The 2.1.2 SDK installed .NET Core 2.0 runtime.\n@RenshuoZz you can find .NET Core 2.0 runtime installers here: https://www.microsoft.com/net/download/dotnet-core/2.0. > i try to uninstall runtime(x86) and it work and deployment success\nIt sounds like you have run into multiple problems. At this point, it's unclear to me which issue you are running into.\nAre you still getting An assembly specified in the application dependencies manifest (THTOC.Code.WebApi.deps.json) was not found with a project that targets ASP.NET Core 2.1?\nIf not, I would recommend we close this one and open a new issue with details about the issues you are having in regard to x86/x64 and dotnet commands which fail.. @vijayrkn PTAL. \nFor reference, the diff is:\n```diff\n--- web.config.before.txt   2018-08-17 13:41:29.000000000 -0700\n+++ web.config.after.txt    2018-08-17 13:41:29.000000000 -0700\n@@ -38,7 +38,9 @@\n     \n\n\n+        \n\n+      \n\n\n\n@@ -97,4 +99,5 @@\n       \n\n\n-\n\\ No newline at end of file\n+\n+ProjectGuid: 76566af5-8a6c-4750-be96-0969bc67b266\n\\ No newline at end of file\n```. @glat @vijayrkn please use https://github.com/aspnet/Home/issues/3437 to discuss further.. @leecow the links for download the runtime-only archives and installers should be part of the download page.\n\n@ststeiger \"ASP.NET Core Binaries\" is the link you want. This comes as .zip/.tar.gz archives instead of .deb/.msi. See https://www.microsoft.com/net/download/dotnet-core/2.2. This looks like https://github.com/dotnet/sdk/issues/2722 which the SDK team closed as 'wontfix'.. Here is the minimal change you need to make to fix this. cref https://github.com/aspnet/AspNetCore/issues/3612 and https://docs.microsoft.com/en-us/aspnet/core/migration/22-to-30\ndiff\n  <ItemGroup>\n-   <PackageReference Include=\"Microsoft.AspNetCore.App\" Version=\"3.0.0-preview-18579-0056\" />\n+   <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\n  </ItemGroup>\nThe preview 2 SDK should resolve this error automatically. https://github.com/dotnet/sdk/pull/2738\n. aspnetcore-runtime-2.1.0-linux-arm.tar.gz is a 32bit release. It's technically arm32v7. IIUC running arm32 from arm64 is optional in the Linux kernel, and in practice some arm64 processors do not support arm32.. oops, yes. \nsuggestion\n1. Remove version from AspNetCore.App `<PackageReference Include=\"Microsoft.AspNetCore.App\" />`. ",
    "Meenakshise": "@natemcmaster \nThanks for the reply. Please find the files attached which you were asking for.. \ncsproj.txt\nproject.assets.txt\n. @natemcmaster \nAlso I have attached the screen shot of SDK explorer of my current project with the Nugget explorer as well. Under nugget I see System.Core not loaded with an yellow color warning. And under SDK system.core is missing. But as part of the project.assets.json you will see System.Core is present as shown below. \n\"System.Core\": {\n            \"target\": \"Package\",\n            \"version\": \"[4.0.0, )\"\n          },\n\n\nI created a new sample console app dot net core project. There i could see System.Core loaded perfectly under SDK. But the new sample project (attached screen shot below ) is a netcoreapp2 project. \n\n. I directly removed it from the Nugget explorer. But still my deployment gives the same error.. \n@natemcmaster . csproj.txt\nAttached the latest csproj file \n@natemcmaster . I looked at the history of my csproj file it looks like the System.core was not there only. Not sure how it came when i was checking now. Probably if i tried installing something i am not sure. \nBut still the deployment fails with the same error. \nAttached the files that are generated in the deployment server. I don't see anything related to System.Core\nsrc.runtimeconfig.txt\nsrc.deps.txt\n. It is built and deployed by teamcity and octopus . If i add a nuget package it modifies which file how do i know my nuget package is committed?. Even if i try to add System.Core 4.0 also it is just showing 3.5 version. I thought of installing 3.5 but that too failed. Could you please help me..  I am unable to figure out the issue.. \n\n\n. I fixed the issue. I found in our project they are calling another project to feed the database that has reference to system. Core. Since that project dll was referenced in our nuspec file it created this issue. For I have commented out that code.\nBut how will we ensure to load all the dlls referenced by that project as well\n. ",
    "ajcvickers": "Yes, that's correct. Although I am surprised at the exception since I thought there was work to generate a specific error message here? /cc @bricelam. @leecow The sockets issue has nothing to do with the EF bugs.. @buehler What packages do you have installed?. Duplicate filed here: https://github.com/aspnet/EntityFramework6/issues/620. @karelz For future reference this is EF Core, but this issue is actually specifically about use of EF Core by ASP.NET Core Identity\n@dcpartners There is a guide to customizing the Identity model in the docs. I would suggest going through that documentation as a guide to how to do this. If that still doesn't work, then please file an issue on the Identity repo including a runnable project/solution or complete code listing that demonstrates the behavior you are seeing.. See https://github.com/aspnet/EntityFramework6/issues/271. Work has started, but it's unlikely anything will be ready to ship in the next preview.. @rp0m This looks like an Entity Framework issue. In the future, please file EF issue at https://github.com/aspnet/EntityFrameworkCore\nIn this case, the behavior is by-design. See https://github.com/aspnet/EntityFrameworkCore/issues/14279 for more details.. @rakesh-shrivastav Do you have a :cat:?. @GuitarLennon Can you please post a small, runnable project/solution or complete code listing that reproduces the behavior you are seeing so that we can fully investigate.. @leecow Two of these are commits from corefx--commits for EF issues are in the EF repo.\nThe commit for 11993 is: https://github.com/aspnet/EntityFrameworkCore/pull/12000/commits/a4a414432b20ae68ce53e4b981ecf9e718f98731\nThe commit for 11977 is: https://github.com/aspnet/EntityFrameworkCore/pull/12123/commits/9409a1f25b7603bb8dce747aff2a7df5744f5efe\n. @leecow Looks like the two EF issues I commented on have now been removed. If this is all the commits in 2.1.1, then these two issues should still be here; they just had the wrong commits associated before.. ",
    "TonyWoo": "@livarcocc please see below output of dotnet --info\n\ndotnet --info\n.NET Command Line Tools (1.1.5)\n\nProduct Information:\n Version:            1.1.5\n Commit SHA-1 hash:  2b517ddd29\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.16299\n OS Platform: Windows\n RID:         win10-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.1.5\nHost (useful for support):\n  Version: 2.1.0-rc1\n  Commit:  eb9bc92051\n.NET Core SDKs installed:\n  1.1.5 [C:\\Program Files\\dotnet\\sdk]\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\n  2.1.105 [C:\\Program Files\\dotnet\\sdk]\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 1.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 1.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\nTo install additional .NET Core runtimes or SDKs:\n  https://aka.ms/dotnet-download\n\nI set the sdk version to 1.1.5 in global.json\n{\n  \"sdk\": {\n    \"version\": \"1.1.5\"\n  }\n}\nIf I set it to 2.1.200, it will throw below error when run dotnet ef\nNuGet.Packaging.Core.PackagingException: Unable to find fallback package folder 'C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackagesFallback'.\n   at NuGet.Packaging.FallbackPackagePathResolver..ctor(String userPackageFolder, IEnumerable1 fallbackPackageFolders)\n   at Microsoft.DotNet.Cli.Utils.LockFileExtensions.GetPackageDirectory(LockFile lockFile, LockFileTargetLibrary library)\n   at Microsoft.DotNet.Cli.Utils.PackagedCommandSpecFactory.GetCommandFilePath(LockFile lockFile, LockFileTargetLibrary toolLibrary, LockFileItem runtimeAssembly)\n   at Microsoft.DotNet.Cli.Utils.PackagedCommandSpecFactory.CreateCommandSpecFromLibrary(LockFileTargetLibrary toolLibrary, String commandName, IEnumerable1 commandArguments, IEnumerable1 allowedExtensions, LockFile lockFile, CommandResolutionStrategy commandResolutionStrategy, String depsFilePath, String runtimeConfigPath)\n   at Microsoft.DotNet.Cli.Utils.ProjectToolsCommandResolver.ResolveCommandSpecFromToolLibrary(SingleProjectInfo toolLibraryRange, String commandName, IEnumerable1 args, IProject project)\n   at Microsoft.DotNet.Cli.Utils.ProjectToolsCommandResolver.ResolveCommandSpecFromAllToolLibraries(IEnumerable1 toolsLibraries, String commandName, IEnumerable1 args, IProject project)\n   at Microsoft.DotNet.Cli.Utils.ProjectToolsCommandResolver.ResolveFromProjectTools(CommandResolverArguments commandResolverArguments)\n   at Microsoft.DotNet.Cli.Utils.ProjectToolsCommandResolver.Resolve(CommandResolverArguments commandResolverArguments)\n   at Microsoft.DotNet.Cli.Utils.CompositeCommandResolver.Resolve(CommandResolverArguments commandResolverArguments)\n   at Microsoft.DotNet.Cli.Utils.CommandResolver.TryResolveCommandSpec(ICommandResolverPolicy commandResolverPolicy, String commandName, IEnumerable1 args, NuGetFramework framework, String configuration, String outputPath, String applicationName)\n   at Microsoft.DotNet.Cli.Utils.Command.Create(ICommandResolverPolicy commandResolverPolicy, String commandName, IEnumerable1 args, NuGetFramework framework, String configuration, String outputPath, String applicationName)\n   at Microsoft.DotNet.Cli.Utils.Command.Create(String commandName, IEnumerable`1 args, NuGetFramework framework, String configuration, String outputPath, String applicationName)\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\nPlease note I have below reference in my project file:\n  ```\n\n\n\n```\nThanks for everyone's help.. Hi @livarcocc , thanks for your help. I think I found the cause. \n1) Installed the .net core 2.1 rc, \n2) I tried to run the dotnet ef,  because I didn't place the global.json file in my project root folder, I think it tried to use the 2.1 to restore the project and then failed. but it generated some project.assets.json in the obj folder. \n3) I have to create the global.json and set it to 1.1.5\n4) Now when I run dotnet ef, it looks it cannot restore due to the previous project.assets.json is there. but it just show the error \"\"No executable found matching command \"dotnet-ef\"\nSince the global.json is there and have the SDK pinned to 1.1.5, to solve this issue, I just delete the whole obj folder and then I can run dotnet ef successfully.\nThanks all for the help.. @bricelam yes we're planning to upgrade it to .net core 2.1 rc:). ",
    "vellozzi": "The tag in the dotnet/cli repo helps.  But I'd still like to see a release in this repo.. Actually, did corefx even change?  shouldn't it just be left off the list for that release?. OK.  How come corefx and CLI are both listed in the releases page?\nIf corefx changed shouldn't it be tagged as v2.0.8?  If it didn't, why is it listed in the repos section of the release page?. This link was never fixed.. Here's an older issue for a broken link that was closed but never fixed: https://github.com/dotnet/core/issues/1556. The coreclr link for the 1.0.12 release is wrong.  It should be https://github.com/dotnet/coreclr/releases/tag/v1.0.14. It's derived from Red Hat.. Any update?\nI'm hoping to have this done by the end of the year.  Is that a realistic goal?. I found the RHEL build here: https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.14/1.0.14-download.md. ",
    "yashwanthreddyg": "got it. Closing the issue. Thanks for the clarification. . got it. Closing the issue. Thanks for the clarification. . ",
    "JaredShaver": "@shawnro @richlander Is managing .NET Core patches through WSUS/SCCM in the roadmap?  As an enterprise admin with responsibility for ~100,000+ PC/servers I don't want to have to reinvent the wheel.  We already have lots of infrastructure/knowledge/processes invested in WSUS/SCCM for patching and compliance monitoring.. ",
    "lmgagne": "We're evaluating the possibility to install .net core on all our servers in order to ease migration of apps to Azure. Seeing all the (manual) work required this component in the field is quite significant. Is there any update on this?. ",
    "andreabioli": "Thank you very much! I just saw it, indeed... even if it's still not officially released... :-). ",
    "sadjadbp": "+1 when building project via VSTS, local is fine.. Locally I'm fine, for the VSTS build should I mention here or need to check with VSTS folks?. ",
    "sandipbhavsar": "I am getting build error on local. ",
    "rjpackito": "I have the same problem as VS 15.7.1. I created a .NET Core 2.1 rc1 project. The same mistakes. What can be done?. Maybe I'm bad described the problem?. ",
    "andtii": "Trying to use blob for rc1 https://dotnetcli.blob.core.windows.net/dotnet/sdk/2.1.300-rc1-008673/ \nGot error > BlobNotFoundThe specified blob does not exist. Pretty big issue since all vsts builds fails @preetikr . @leecow so why is vsts failing?\n\n. Works for me now aswell! Thnx!. ",
    "da1rren": "@leecow I'm still getting an invalid response from them all.  This is breaking some of our VSTS builds.. @leecow Figured it out, I was using the wrong version number. \"2.1.300-rc1-008673\".  I've got it working fine with VSTS now.. ",
    "kwiknick": "It's been at least 6 months since I installed powershell, and with the new release of 18.04 I upgraded from 16.04.  I got back from //Build and wanted to play around with some of the newly announced products.  When I ran this from the link above is when I noticed the problem: sudo apt-get install dotnet-sdk-2.1.200\nIf I had to bet on it, I was using the instructions on the powershell github page.  The docs are really good.  The team has done a standup job on documentation, so there is no reason I wouldn't of used them.. ",
    "gfoidl": "Are you aware of Long-running SDK build servers?. ",
    "sfkshan": "@gfoidl I read about it. But the problem is in that extra threads stays until i forcibly terminates it. Also it consumes close to 100% CPU usage. Everytime I run the app and exit and do changes and then re run. This is almost reproducible most of the time in my machine. I uninstalled the dotnet core completely and install the latest version also. Still the same issue.. dotnet --info output\n```\nProduct Information:\n Version:            2.1.200\n Commit SHA-1 hash:  2edba8d7f1\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  10.13\n OS Platform: Darwin\n RID:         osx.10.13-x64\n Base Path:   /usr/local/share/dotnet/sdk/2.1.200/\nMicrosoft .NET Core Shared Framework Host\nVersion  : 2.0.7\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\n```\n@dasMulli  yeah i am running through vscode. I will execute in terminal and observe and will post the updates.\n. I verified as @dasMulli says this is happening only when I run dotnet core inside the vscode terminal.\nUPDATE\nI am seeing this problem even in regular terminal also.. ",
    "gilbertoalexsantos": "Happening with me as well.\nThe environment is the same as that of @JoiGud . ",
    "JoiGud": "Just ran dotnet restore.  Now when I do dotnet run I get the same high CPU load. But when I kill that process and do dotnet run again (without changing anything) it behaves normally, with low CPU load.. I have a colleague beside me, with almost and identical setup, same OS version, same SDK. He does not get these high CPU loads.\nWill report back if we find anything else \ud83d\ude04 . I usually end up having top -o cpu open in some terminal window and then killing off that one dotnet process that spikes with kill -9 proc_id (where proc_id stands for the process id of the dotnet process).. If I do ps aux | grep dotnet then the following is one of the dotnet processes that spikes the CPU:\n/usr/local/share/dotnet/dotnet /usr/local/share/dotnet/sdk/2.1.300/Roslyn/bincore/VBCSCompiler.dll -pipename:myusername.F.a8YGquYlqf7WJOhYvGN0wdSxo\nNot totally sure if that's what you're looking for @rainersigwald , hope this can help. Let me know if I can do anything else or provide any more info.. Sorry for not answering sooner, was on vacation. It seems that it's always the VBCSCompiler.dll that has the high CPU load. My username is 17 characters long. Interesting.. I tried @mikeharder 's workaround that he mentioned here (roslyn issue): https://github.com/dotnet/roslyn/issues/24137\nand it seems to solve the issue.. ",
    "parthsha": "I am experiencing the same issue on Mac OS X 10.13.4 but the strange thing is I don't have VS Code open nor am I trying to compile any code using terminal. Is anyone else experiencing something like this?\nEDIT:\nJust to add some more info. VSCode was previously running on my machine a few days ago and I don't recall restarting my machine recently, so I am wondering if the dotnet processes were from back then. I don't use this machine often but I have noticed the fans going off several times since last 2 days.. ",
    "skvsree": "Hi, this issue is observed in Jetbrains Rider as well, seems to have started after 2.1 upgrade.  Below is the dotnet --info.  This has made environment completely unusable.\n```\n.NET Core SDK (reflecting any global.json):\n Version:   2.1.300\n Commit:    adab45bf0c\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  10.12\n OS Platform: Darwin\n RID:         osx.10.12-x64\n Base Path:   /usr/local/share/dotnet/sdk/2.1.300/\nHost (useful for support):\n  Version: 2.1.0\n  Commit:  caa7b7e2ba\n.NET Core SDKs installed:\n  1.0.3 [/usr/local/share/dotnet/sdk]\n  1.0.4 [/usr/local/share/dotnet/sdk]\n  2.1.300-rc1-008673 [/usr/local/share/dotnet/sdk]\n  2.1.300 [/usr/local/share/dotnet/sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 1.0.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 1.0.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 1.1.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 1.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.0-rc1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\nTo install additional .NET Core runtimes or SDKs:\n  https://aka.ms/dotnet-download\n```. ",
    "ddrsql": "I also encountered the same problem.\nFour dotnet servers do the load, and the CPU usage is high at the same time.\nThen adjust the two services to do a regular restart dotnet, the other two services did not do a regular restart and other phenomena to reproduce.\n```\n.NET Command Line Tools (2.1.4)\nProduct Information:\n Version:            2.1.4\n Commit SHA-1 hash:  5e8add2190\nRuntime Environment:\n OS Name:     centos\n OS Version:  7\n OS Platform: Linux\n RID:         centos.7-x64\n Base Path:   /usr/share/dotnet/sdk/2.1.4/\nMicrosoft .NET Core Shared Framework Host\nVersion  : 2.0.5\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\n```\n\ntop -H -p 16144\n\npstack 23058    #normal\npstack 16114    #High cpu\nThe left side is a normal server, and the right side is a server with a high CPU usage.\n\nAnd I hope this could be a feature in SDK so we can use some built-in commands to do it, like 'dotnet dump', 'dotnet profile'. As I know there are some tools in java like jmap, jstack and they are very popular and useful.\n. ",
    "jordevorstenbosch": "I'm running into this issue as well, however I'd like to add that it happens when using the new command as well. Not just when using dotnet run. Process stays open after completing its task and remains at 100+% CPU Usage.\n```\ndotnet --info\n.NET Core SDK (reflecting any global.json):\n Version:   2.1.301\n Commit:    59524873d6\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  10.13\n OS Platform: Darwin\n RID:         osx.10.13-x64\n Base Path:   /usr/local/share/dotnet/sdk/2.1.301/\nHost (useful for support):\n  Version: 2.1.1\n  Commit:  6985b9f684\n.NET Core SDKs installed:\n  2.1.300 [/usr/local/share/dotnet/sdk]\n  2.1.301 [/usr/local/share/dotnet/sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\nTo install additional .NET Core runtimes or SDKs:\n  https://aka.ms/dotnet-download\n```\n@rainersigwald @leecow if I can provide any additional information let me know.\n. I'm running into this issue as well, however I'd like to add that it happens when using the new command as well. Not just when using dotnet run. Process stays open after completing its task and remains at 100+% CPU Usage.\n```\ndotnet --info\n.NET Core SDK (reflecting any global.json):\n Version:   2.1.301\n Commit:    59524873d6\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  10.13\n OS Platform: Darwin\n RID:         osx.10.13-x64\n Base Path:   /usr/local/share/dotnet/sdk/2.1.301/\nHost (useful for support):\n  Version: 2.1.1\n  Commit:  6985b9f684\n.NET Core SDKs installed:\n  2.1.300 [/usr/local/share/dotnet/sdk]\n  2.1.301 [/usr/local/share/dotnet/sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\nTo install additional .NET Core runtimes or SDKs:\n  https://aka.ms/dotnet-download\n```\n@rainersigwald @leecow if I can provide any additional information let me know.\n. @rainersigwald make that three\n/usr/local/share/dotnet/dotnet /usr/local/share/dotnet/sdk/2.1.301/Roslyn/bincore/VBCSCompiler.dll -pipename:<username>.7GIKntv7I38xTHU3BEqdv09i4\n@jaredpar could be my username is 17 characters long.\nJust made a user account with only 2 characters, the issue does not occur on that account.. @rainersigwald make that three\n/usr/local/share/dotnet/dotnet /usr/local/share/dotnet/sdk/2.1.301/Roslyn/bincore/VBCSCompiler.dll -pipename:<username>.7GIKntv7I38xTHU3BEqdv09i4\n@jaredpar could be my username is 17 characters long.\nJust made a user account with only 2 characters, the issue does not occur on that account.. Been using the solution @JoiGud talks about for a few days now, can confirm that it works for me as well.. Been using the solution @JoiGud talks about for a few days now, can confirm that it works for me as well.. ",
    "rainersigwald": "@JoiGud Yes, that's exactly the kind of thing I'm looking for.\nIf you're seeing this can you share all of ps aux | grep dotnet? There are a few different build server processes that could be going wrong, so we need to figure out which one(s) are misbehaving to figure out the root cause.\nEDIT: After getting some reports, no need to share this if the command consuming CPU is running VBCSCompiler.dll. Please do share if you see something else.. Ok, that looks like at least two instances where it's the Roslyn compiler server that seems to be doing surprising work when it should be idle. @jaredpar can you help route?. @AaronRobinsonMSFT is driving referencing-COM-from-Core. No full plan yet, but we're meeting today to talk about one.. From the logs, it looks like the failure isn't coming from the custom task but from your tool that's running inside it (that uses the MSBuild API to load a project).\n@Dresel Can you reproduce that failure in a smaller test case and file a bug at https://github.com/Microsoft/msbuild/issues/new, please? I think I'm beginning to understand the problem--I suspect a mismatch between the MSBuild assemblies you're loading and the MSBuild assemblies in the SDK. I suspect we'll want to move you over to MSBuildLocator's new support for .NET Core (https://github.com/Microsoft/MSBuildLocator/pull/51#issuecomment-463281861).. ",
    "delasteve": "@rainersigwald\nps aux | grep dotnet returns\nstephencavaliere 81958 109.0  3.9 25330192 656864   ??  R     1:50PM   3:26.21 /usr/local/share/dotnet/dotnet /usr/local/share/dotnet/sdk/2.1.300/Roslyn/bincore/VBCSCompiler.dll -pipename:stephencavaliere.F.a8YGquYlqf7WJOhYvGN0wdSxo\nOther info that may or may not be useful:\nbrew cask info dotnet-sdk\ndotnet-sdk: 2.1.300\nhttps://www.microsoft.com/net/core#macos\n/usr/local/Caskroom/dotnet-sdk/2.1.300 (165.6MB)\nFrom: https://github.com/Homebrew/homebrew-cask/blob/master/Casks/dotnet-sdk.rb\n==> Name\n.NET Core SDK\n==> Artifacts\ndotnet-sdk-2.1.300-osx-x64.pkg (Pkg)\ndotnet --info\n```\n.NET Core SDK (reflecting any global.json):\n Version:   2.1.300\n Commit:    adab45bf0c\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  10.13\n OS Platform: Darwin\n RID:         osx.10.13-x64\n Base Path:   /usr/local/share/dotnet/sdk/2.1.300/\nHost (useful for support):\n  Version: 2.1.0\n  Commit:  caa7b7e2ba\n.NET Core SDKs installed:\n  2.1.300 [/usr/local/share/dotnet/sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\nTo install additional .NET Core runtimes or SDKs:\n  https://aka.ms/dotnet-download\n```. @rainersigwald\nps aux | grep dotnet returns\nstephencavaliere 81958 109.0  3.9 25330192 656864   ??  R     1:50PM   3:26.21 /usr/local/share/dotnet/dotnet /usr/local/share/dotnet/sdk/2.1.300/Roslyn/bincore/VBCSCompiler.dll -pipename:stephencavaliere.F.a8YGquYlqf7WJOhYvGN0wdSxo\nOther info that may or may not be useful:\nbrew cask info dotnet-sdk\ndotnet-sdk: 2.1.300\nhttps://www.microsoft.com/net/core#macos\n/usr/local/Caskroom/dotnet-sdk/2.1.300 (165.6MB)\nFrom: https://github.com/Homebrew/homebrew-cask/blob/master/Casks/dotnet-sdk.rb\n==> Name\n.NET Core SDK\n==> Artifacts\ndotnet-sdk-2.1.300-osx-x64.pkg (Pkg)\ndotnet --info\n```\n.NET Core SDK (reflecting any global.json):\n Version:   2.1.300\n Commit:    adab45bf0c\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  10.13\n OS Platform: Darwin\n RID:         osx.10.13-x64\n Base Path:   /usr/local/share/dotnet/sdk/2.1.300/\nHost (useful for support):\n  Version: 2.1.0\n  Commit:  caa7b7e2ba\n.NET Core SDKs installed:\n  2.1.300 [/usr/local/share/dotnet/sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\nTo install additional .NET Core runtimes or SDKs:\n  https://aka.ms/dotnet-download\n```. ",
    "pix3lize": "@jaredpar I'm having a similar issue. I have long username 20characters with space in between probably something that can back up @jordevorstenbosch theory. Thanks \n. ",
    "qguv": "For those of you trying to trace through the trail of redirections for a fix, Roselyn contributor @agocke suggests:\n\nif you set the TMPDIR environment variable to /tmp, that will probably fix the problem and let you still use the compiler server.. \n",
    "sseyalioglu": "\nI tried @mikeharder 's workaround that he mentioned here (roslyn issue): dotnet/roslyn#24137\nand it seems to solve the issue.\n\nI tried both solutions and not working for me.\nI've done Env Variable and the plist but no luck. I've been using mac in the past 1 year after several years with Windows so I may be not quite good in setting this up although this is the first ever thing didn't work for me so far.. > I tried @mikeharder 's workaround that he mentioned here (roslyn issue): dotnet/roslyn#24137\n\nand it seems to solve the issue.\n\nI tried both solutions and not working for me.\nI've done Env Variable and the plist but no luck. I've been using mac in the past 1 year after several years with Windows so I may be not quite good in setting this up although this is the first ever thing didn't work for me so far.. ",
    "Dhaya06": "You should install Visual C++ Redistributable. Also try to install dot net sdk or asp core runtime \n[https://www.microsoft.com/en-us/download/details.aspx?id=48145]. ",
    "andrewbadera": "Sorry, realized I should have posted this in aspnet instead. Reposting there.. ",
    "bitcrazed": "Hey @BenHillis @terrajobst - any thoughts on what's causing these Illegal Instruction errors?. ",
    "benhillis": "I'm not sure, I know @Brian-Perkins has been looking at some arm64 issues recently.. ",
    "snickler": "One thing I didn't add - the --list-runtimes and --list-sdks switches are the only ones that don't return Illegal Instruction\nsnickler@WOATARGET:~/dotnet-2.1-rc1$ ./dotnet --list-sdks\n2.1.300-rc1-008673 [/home/snickler/dotnet-2.1-rc1/sdk]\nsnickler@WOATARGET:~/dotnet-2.1-rc1$ ./dotnet --list-runtimes\nMicrosoft.NETCore.App 2.1.0-rc1 [/home/snickler/dotnet-2.1-rc1/shared/Microsoft.NETCore.App]. @Brian-Perkins I updated the main post with the link to the Ubuntu 18.04 download that works for ARM64. \nAlso, it seems that the dotnet-sdk-latest-Linux-arm64.tar.gz from https://github.com/dotnet/cli/blob/master/README.md (which is currently 2.1.400-preview-008858 at the time of this post) also doesn't work properly. . This is great to hear. Thanks so much @bitcrazed @Brian-Perkins . I know what I'm trying out when I get home tonight. Thanks for digging into this. I'll let you know if I happen to run into anything.\nGet Outlook for Androidhttps://aka.ms/ghei36\n\nFrom: Brian-Perkins notifications@github.com\nSent: Thursday, June 14, 2018 5:23:33 PM\nTo: dotnet/core\nCc: Jeremy Sinclair; Author\nSubject: Re: [dotnet/core] Illegal Instruction when using dotnet commands on 2.1.300-rc1 SDK with Ubuntu 18.04 ARM64 on WSL (#1561)\nThis should be resolved in Insider Build 17692https://nam03.safelinks.protection.outlook.com/?url=https%3A%2F%2Fblogs.windows.com%2Fwindowsexperience%2F2018%2F06%2F14%2Fannouncing-windows-10-insider-preview-build-17692&data=02%7C01%7C%7C48399c27f6ae4bd1bce808d5d23d159d%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636646082146039126&sdata=lzXWkVlVK5erxwEJZJT3CaALgsNXmzjCuQKeYMVr7MA%3D&reserved=0 - WSL specific release notes herehttps://nam03.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMicrosoftDocs%2FWSL%2Freleases%2Ftag%2F17692&data=02%7C01%7C%7C48399c27f6ae4bd1bce808d5d23d159d%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636646082146039126&sdata=6ilnSbsM7WOoUrrsQn8d37OuAb1P7cfcAhGnzoeYymI%3D&reserved=0 if you are on the Insider track. There is no fix yet for the RS4 release -- I will update when that changes.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://nam03.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fcore%2Fissues%2F1561%23issuecomment-397442559&data=02%7C01%7C%7C48399c27f6ae4bd1bce808d5d23d159d%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636646082146039126&sdata=85osk8JCx%2FkieAwx%2FW7fH0smu%2BBIDVLvddddTYW21x8%3D&reserved=0, or mute the threadhttps://nam03.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAD1IpUxeNWTk_C2B6DdlyY4itwL4RBbsks5t8tRVgaJpZM4T-yJf&data=02%7C01%7C%7C48399c27f6ae4bd1bce808d5d23d159d%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636646082146039126&sdata=VOGOggi0mGlTpW3qC4WlMEjxJheP8bLCV4r0M%2BHcoec%3D&reserved=0.\n. I will mark this issue as fixed, but I'm opening another issue that I've discovered while trying to use it.. What exactly is the problem that you're having? Completely bashing the dotnet core team, failing to reference the issue, and providing what you've tried won't warrant a response... . ",
    "Brian-Perkins": "I attempted to install from the instructions linked in the OP and it doesn't appear ARM64 versions are present. If someone can provide a set of commands I can run from a clean Ubuntu 18 install in order to repro this, it would be very helpful.. We are working on a WSL fix for this. I will add another update when it makes it out in an Insiders Build.. This should be resolved in Insider Build 17692 - WSL specific release notes here if you are on the Insider track. There is no fix yet for the RS4 release -- I will update when that changes.. ",
    "Symbai": "Hi, thanks for the reply. I've deleted vs and obj folder and removed assembly bindings in app.config and the issue is gone. No idea why and sorry for the trouble.. I'm closing this as problem is being addressed in WPF repo https://github.com/dotnet/wpf/issues/117#. Is already reported in mono linker repo: https://github.com/mono/linker/issues/428. ",
    "amshekar": "refer the following git repo where we have one console app on dotnet core . From this we are making a call to vb.net classlibrary which has string functions. \nhttps://github.com/csreehari/FxReferenceConsoleAppCore.git. ",
    "bimonsubio1984": "You can use a custom made port of the library named Ported.VisualBasic:\nNo any warranties on code correctness after porting, just use on your own risk.\nImports Ported.VisualBasic\nStrings.Left(S), etc.\nMore details:\nhttps://github.com/dotnet/corefx/issues/31181#issuecomment-436422404\nYou can find a compiled assembly here:\nhttps://github.com/bimonsubio1984/CommonCore/releases/download/First/Ported.VisualBasic.dll\nOr build it from source by yourself.. ",
    "fatagun": "Yeah sure homey, I am sitting here just to bash your dotnet core team. I am just thanking yall for the great work.  . ",
    "prmces": "My Config: Visual Studio 2017 version 15.7.1\nSD 2.1 RC final: dotnet-sdk-2.1.300-rc1-008673-win-x64\nHow to reproduce. \n1) Create a new solution. Will create as version 2.0.0\n2) Run Install-Package Microsoft.NETCore.App -Version 2.0.6\n3) Try to build the application. After some research ,  I created a new file called global.json and put the sdk version inside and I could build .\n{\n  \"sdk\": {\n    \"version\": \"2.0.6\"\n  }\n}. ",
    "huanwu": "@Lxiamail That's also the place where we put sgen. Do you have any other suggestion?. The example I am giving here contains a console app and a library project. The library project contains all the custom data class I need.. Yeah, already include this link here.. Will update.. Both are required to make SGEN works.. Remove the space in  \"will be generated    in the output folder\". I will still use clitool this time.. The package still not release yet so the link doesn't exist now. Will add it later.. ok. OK. Will make it more clear. ok. ok. I feel it is more clear to add two packages in separate steps. But I will make them use the same technique.. ok. @dasMulli When I reached the guy who worked on global tools, I was told there are still some open issues not settled. So they suggest I might still use dotnetclittools. And also the global tool not bind with a csproj, which need some big changes from our tool. . ",
    "riezebosch": "Bizarre! When using [datetime]'05/08/18' instead of '05/08/18' -as [datetime] I get correct parsing in PowerShell \ud83d\ude15 . On the download page there isn't even a 2.0.8 release.. Really having a hard time to get the auto-update of chocolatey packages working. Each and every release of every version seems to have a different format.. @tristanbarcelon As far as I know the releases.json is deprecated and will be removed in the (near) future.. Got it. But what about the aspnetcore-runtime and windows-hosting?  Should it be 3.0.0-preview2? Because there are already multiple 3.0.0-preview releases that only differ in last part (which doesn't fit into semver).. But the {buildnumber} part is breaking semver and the *-preview part seems not unique.. My point is that translating the version from the releases.json into something that is unique and supported by chocolatey is or might be a problem. It seems to work now for creating packages but I'm not sure yet if it can be published in that format.\ndotnetcore-sdk.3.0.100-preview-010184.nupkg. Okay, it looks like it's possible: https://chocolatey.org/packages/dotnetcore-runtime.install/3.0.0-preview-27324-5 \ud83d\ude04 . ",
    "MicleBrick": "admin@ns532585:~$ sudo apt-get install dotnet-runtime-2.0.7        [sudo] password for admin:\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nSome packages could not be installed. This may mean that you have\nrequested an impossible situation or if you are using the unstable\ndistribution that some required packages have not yet been created\nor been moved out of Incoming.\nThe following information may help to resolve the situation:\nThe following packages have unmet dependencies:\n dotnet-runtime-2.0.7 : Depends: libicu55 but it is not installable                        Depends: dotnet-hostfxr-2.0.7 but it is not going to be installed\nE: Unable to correct problems, you have held broken packages.\nadmin@ns532585:~$ sudo apt-get install libicu55\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nPackage libicu55 is not available, but is referred to by another package.\nThis may mean that the package is missing, has been obsoleted, or\nis only available from another source\nE: Package 'libicu55' has no installation candidate. Actually i have Ubuntu 17.10 . Fixed with the following:\nwget http://security.ubuntu.com/ubuntu/pool/main/i/icu/libicu55_55.1-7ubuntu0.4_amd64.deb -P /tmp/\nsudo dpkg -i /tmp/libicu55_55.1-7ubuntu0.4_amd64.deb\n. maybe it should be updated to use libicu57 instead of libicu55\n. The Antlr3.Runtime seems to exist in the publish folder. If I try running it in the publish folder, I get this:\n---> NHibernate.HibernateException: Could not create the driver from NHibernate.Driver.SQLite20Driver, NHibernate, Version=5.1.0.0, Culture=neutral, PublicKeyToken=aa95f207798dfdb4. ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> NHibernate.HibernateException: The DbCommand and DbConnection implementation in the assembly System.Data.SQLite could not be found. Ensure that the assembly System.Data.SQLite is located in the application directory or in the Global Assembly Cache. If the assembly is in the GAC, use  element in the application configuration file to specify the full name of the assembly.\n   at NHibernate.Driver.ReflectionBasedDriver..ctor(String providerInvariantName, String driverAssemblyName, String connectionTypeName, String commandTypeName)\nBut it works on my local testing. After some fiddling I get this:\n ---> NHibernate.HibernateException: Exception has been thrown by the target of an invocation. ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.DllNotFoundException: Unable to load DLL 'SQLite.Interop.dll': The specified module or one of its dependencies could not be found.\nthe dll is in the same folder though...\n. I tried uploading SQLite.Interop.dll files to both x64, x86, publish/x64, and publish/x86. Sadly, none of them worked.. Had to change it from 2.0.0 to 2.0.1 to get it to compile, but after that it worked perfectly fine locally. Going to test it remotely... (Hard to test it remotely when it refuses to upload faster than 1 MB/s). @uffebjorklund That didn't work... what nuget package do you use for SQLite? Maybe whichever one you are using would work better. I have System.Data.SQLite.Core.. Oh, I'm stupid.... package references ARE nuget packets . To get it to use Microsoft.Data.SQLite instead of System.Data.SQLite I had to use this: https://github.com/milestonetg/nhibernate-sqlite. That worked! Thanks for your help.. Fixed by setting the \"WorkingDirectory\" properly . ",
    "furoraest": "in the past on .NET framework the SQLite.dll had to be on x86 or x64 subfolder, not sure if its the case anymore. I stuck with similar problem a while ago. Workable solution was not to touch anything from Bouncy libraries... or completely use Bouncy\nIn my case one part was on hardware (smart card) so i implemented everything in Bouncy.NET at the end.... ",
    "xyz-mtl": "Like this:\nIf you implement the following example, do you have the same issue?\n\nhttps://github.com/aspnet/Docs/issues/4432#issuecomment-332923557\n\nAdd the service: \nservices.AddSingleton<RazorTemplateEngine, **CustomTemplateEngine**>();\nHave the class:\n```\npublic class CustomTemplateEngine : MvcRazorTemplateEngine\n{\n    public CustomTemplateEngine(RazorEngine engine, RazorProject project) : base(engine, project)\n    {\n    }\npublic override RazorCSharpDocument GenerateCode(RazorCodeDocument codeDocument)\n{\n    var csharpDocument = base.GenerateCode(codeDocument);\n    var generatedCode = csharpDocument.GeneratedCode;\n\n    // Look at generatedCode\n\n    return csharpDocument;\n}\n\n}\n```. ",
    "eguzelkucuk": "We did it the same way, but it does not work in .net core 2.1. ",
    "panost": "It appears that is no longer used and yet is registered in AddRazorViewEngineServices as a singleton. I suggest you open an issue in https://github.com/aspnet/Razor/issues or \nhttps://github.com/aspnet/Mvc. ",
    "allistoncarlos": "I'm having the same problem, with one difference... I just created my app on macOS and it works fine with Docker. Then I cloned the code on a production server running Debian, docker-compose up and then this error occurs... Maybe there's a problem involving Linux's filesystem and Release mode?. ",
    "sguryev": "I had the same issue and had to update NODE and NPM and use standalone instead of bundled with VS2017.\nThis URL can help you with understanding the NPM and NODE kitchen for WIN https://github.com/npm/npm/wiki/Troubleshooting. ",
    "gruckion": "Yup download node and install it. Then go into Tools Options and then Exyernal Web. There you can add a reference to use node in c:\\program files\\node (assuming default install location). With this done RESTART VISUAL STUDIO. Then open the PM console (Type PM in search) and type node -v you want version 8 or so... ",
    "rajeshchauhan23102008": "@ajensenwaud :+1: \n\nI then read somewhere there is a potential issue with number of open filehandles on Linux. The following helped: \n$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p\n. \n",
    "WereDev": "I'm having this exact issue.  I'm not sure where this conversation got moved to though as I don't understand what \"aspnet/JavaScriptServices#1718\" is referencing.. nm...found it\nhttps://github.com/aspnet/AspNetCore/issues/5217. ",
    "MarcoRossignoli": "\nNames are definitely hard to get right...\nThis was true in 1.0 but is much less true now...\n\nI agree, it's really hard(perhaps impossible) predict the future.\n\nCore is the lightweight, cross platform stack...\n\nAs a developer when i explain \".Net core\" to other developers the first feature i focus on is \"cross platform\" and after all other great features(perf, deployment types and \"rapid dev/release\" in primis). I think that a name with \"cross\" inside would have been better, something like \".Net X\" to focus on xplat nature of product. . > New APIs will first become available in specific .NET platforms, such as .NET Core. If the .NET Standard review board believes the new APIs should be made available everywhere, they'll be added in a new .NET Standard version.\nFrom https://github.com/dotnet/standard/blob/master/docs/versions.md#versioning-rules\nMaybe @terrajobst could clarify.\n. If I'm not mistaken if you create an issue you can close it by yourself with \"Close issue\" button\n\n. i think it is better to move this issue to https://github.com/dotnet/corefx repo. i think is better move to https://github.com/dotnet/corefx repo Span lives there. Ok jitter repo is https://github.com/dotnet/coreclr. i think i better move this to https://github.com/dotnet/corefx where core TPL dataflow lives https://github.com/dotnet/corefx/tree/master/src/System.Threading.Tasks.Dataflow. /cc @benaadams @xoofx. i think is better move to corefx repo https://github.com/dotnet/corefx/issues \nwhere HttpClient lives https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/HttpClient.cs\n/cc @karelz. better move to https://github.com/dotnet/corefx\n/cc @JeremyKuhne, @pjanotti. I'm not sure but maybe is a doc issue...if you reference https://www.nuget.org/packages/System.ServiceModel.Primitives/ OperationContractAttribute is present on netcoreapp2.1 target framework.\nYou could move issue to https://github.com/dotnet/wcf/issues or https://github.com/dotnet/docs/issues\nAlso the guide refers to it https://docs.microsoft.com/en-us/dotnet/framework/wcf/designing-service-contracts\n/cc @StephenBonikowsky\n. Maybe better move issue to https://github.com/dotnet/corefx. Same issue. Confirm @krajek's trick.. https://github.com/Azure/app-service-announcements/issues/151 . @fdbva are you getting same issue?Can you share your detailed error log?. @fdbva I try to explain better, sorry for my poor english.\n\nI'll explain the scenario so it'll make more sense, maybe I understood something wrong. We wanted the Self-Contained option because we will give our deploy files to our client and we didn't want to have to ask them to install a new ASP.NET Core Hosting Bundle every time the version was upgraded, we wanted that independence from their IT team.\n\nAFIK you cannot run asp.net core inside IIS without \"ASP.NET Core Hosting Bundle\". This bundle allows asp.net core to run with/inside IIS, it implements so called handlers, IIS receive http request from network and \"forward\" these to asp.net engine (https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/aspnet-core-module?view=aspnetcore-2.2)\n```\nThe ASP.NET Core Module is a native IIS module that plugs into the IIS pipeline to either:\n\nHost an ASP.NET Core app inside of the IIS worker process (w3wp.exe), called the in-process hosting model.\nForward web requests to a backend ASP.NET Core app running the Kestrel server, called the out-of-process hosting model.\n``\n\"ASP.NET Core Module\" is inside \"ASP.NET Core Hosting Bundle\".\nUntil 2.1 version asp.net core uses reverse proxy with kestrel https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/?view=aspnetcore-2.2&tabs=windows#kestrel to communicate with IIS(second point of above statements)\nSince 2.2 version we have new type of \"hosting\" called In-Process(for performance reason), now our asp.net core app can run inside IIS \"standard hosting process\" calledw3wp.exe.aspNetCoreModuleV2is the new handler that allow In-Process hosting and it's installed with new \"ASP.NET Core Hosting Bundle\"(not rolled on all Azure sites, see announcement I linked above).\nAnd this is the asp.net core+IIS part.\nNowSelf-Containedis unrelated to asp.net core+iis but it's a way to build/deploy every .net app(console, winforms, wpf, asp). I mean it's a runtime features.Self-Containedallows to deploy .net app without install \"runtime\" machine wide(under classic program files folders), withSelf-Containedwe have all useful binaries in \"publish\" folder and we can run it https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd, basically you deploy \"your lib code+full runtime\".\nTo run asp.net coreSelf-Containedapp you need a newaspNetCoreModuleV2` at least for guide https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/aspnet-core-module?view=aspnetcore-2.2&WT.mc_id=-blog-scottha#configuration-with-webconfig.\n\n\nWe wanted the Self-Contained option because we will give our deploy files to our client and we didn't want to have to ask them to install a new ASP.NET Core Hosting Bundle every time the version was upgraded, we wanted that independence from their IT team.\n\nIn conclusion you depend on hosting bundle to run app inside IIS, Self-Contained is used for other purposes.\n\nBut it feels like a work around\n\nIt's not a bug workaround, the \"issue\" is that publish .net 2.2 asp.net core app generates web.config that uses new handler aspNetCoreModuleV2, but not all servers on Azure are up-to-date. So move to aspNetCoreModule until rolling is finished it's ok to me.\nExtra: https://blogs.msdn.microsoft.com/webdev/2018/12/04/asp-net-core-2-2-available-today/ check \"Availability in Azure App Service\"  paragraph Some regions may receive the updated runtime before the updated ASP.NET Core IIS Module (ANCM), which is required by default for projects targeting ASP.NET Core 2.2. It\u2019s also a requirement for the new in-process hosting feature.. > Self-Contained option would work on ASP.NET Core, but it's .NET Core\nYes, asp.net core is composed by some simple assemblies that run on .NET Core runtime. The same of ASP.NET MVC for .NET Desktop(i.e. classic 4.7.2). But web site needs a server and we've IIS that is \"decoupled\" from runtimes it hosts, so this \"bundle\" is the bridge between environments. Self-Contained works for asp.net core(it's .net core) but we need iis to expose our web site.. > And with the In process option, would that paired with Self-Contained void the necessity of the Hosting Bundle? Or at least in the future, would that be possible or make sense?\nNo Self-Contained is a runtime features not tied up with asp.net core hosting scenarios(at least today FWIK), I mean .Net runtime lives without asp.net core libs. Hosting Bundle is the piece of code that allow IIS to \"launch and run\" our asp.net core app. You could ask on asp.net channel on gitter aspnet/home for infos. \nInfo: https://docs.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-2.2?view=aspnetcore-2.2#iis-in-process-hosting In-process hosting provides performance and diagnostic gains when running with IIS.. Better move to https://github.com/aspnet/AspNetCore/issues. @mammadkoma you need to download and run script \"https://dot.net/v1/dotnet-install.ps1\" from https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script\n. @mammadkoma you need to download and run script \"https://dot.net/v1/dotnet-install.ps1\" from https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script\n. I use it in my builds(copied from .net core build repo)\n```\nfunction DownloadRuntime                                                                 \n{                                                                                        \n    set-strictmode -version 2.0                                                          \n    $ErrorActionPreference = \"Stop\"                                                      \n    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12        \n $toolsRoot = Join-Path $PSScriptRoot \"..\\.tools\"                                      \n Create-Directory $toolsRoot                                                           \n $scriptPath = Join-Path $toolsRoot \"dotnet-install.ps1\"                               \n Invoke-WebRequest \"https://dot.net/v1/dotnet-install.ps1\" -OutFile $scriptPath        \n & $toolsRoot\\dotnet-install.ps1 -InstallDir $toolsRoot\\dotnet -Version $dotnetsdk\n\n}                                                                                                                                                                                   \n```\n\nFor Set-ExecutionPolisy unrestricted command , need to open PowerShell as administrator.\n\nYes To change the execution policy for the default (LocalMachine) scope, start PowerShell with the \"Run as administrator\" option. It's a security setting.\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-6. I use it in my builds(copied from .net core build repo)\n```\nfunction DownloadRuntime                                                                 \n{                                                                                        \n    set-strictmode -version 2.0                                                          \n    $ErrorActionPreference = \"Stop\"                                                      \n    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12        \n $toolsRoot = Join-Path $PSScriptRoot \"..\\.tools\"                                      \n Create-Directory $toolsRoot                                                           \n $scriptPath = Join-Path $toolsRoot \"dotnet-install.ps1\"                               \n Invoke-WebRequest \"https://dot.net/v1/dotnet-install.ps1\" -OutFile $scriptPath        \n & $toolsRoot\\dotnet-install.ps1 -InstallDir $toolsRoot\\dotnet -Version $dotnetsdk\n\n}                                                                                                                                                                                   \n```\n\nFor Set-ExecutionPolisy unrestricted command , need to open PowerShell as administrator.\n\nYes To change the execution policy for the default (LocalMachine) scope, start PowerShell with the \"Run as administrator\" option. It's a security setting.\nhttps://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-6. > So I can not install dotnet core sdk without administrator access.\nI mean, not really, with powershell you need powershell run script rights as all other scripts, but if you want you can download .net zip and unzip in some folder as non admin with custom tools. This scripts are done in powershell, the issue you are hitting is a powershell setting. \nHere you can find links https://dotnet.microsoft.com/download/dotnet-core/2.2 for last zipped .net https://dotnet.microsoft.com/download/thank-you/dotnet-sdk-2.2.101-windows-x64-binaries (.NET Core Binaries). > So I can not install dotnet core sdk without administrator access.\nI mean, not really, with powershell you need powershell run script rights as all other scripts, but if you want you can download .net zip and unzip in some folder as non admin with custom tools. This scripts are done in powershell, the issue you are hitting is a powershell setting. \nHere you can find links https://dotnet.microsoft.com/download/dotnet-core/2.2 for last zipped .net https://dotnet.microsoft.com/download/thank-you/dotnet-sdk-2.2.101-windows-x64-binaries (.NET Core Binaries). It depends, if you don't have any .net core  version installed on machine you can simply point to dotnet cli driver and run your app:\nc:\\dotnet\\dotnet.exe yourapp.dll\nIf you've some .net core installed machine wide(c:\\Program files...) you need to tell to dotnet.exe driver to not use global version(dotnet.exe is in path environment variable and will be resolved from program files folder) but your new downloaded version(https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet?tabs=netcore21#environment-variables)\nc:\\>set DOTNET_MULTILEVEL_LOOKUP=0\nc:\\>dotnet\\dotnet.exe yourapp.dll. It depends, if you don't have any .net core  version installed on machine you can simply point to dotnet cli driver and run your app:\nc:\\dotnet\\dotnet.exe yourapp.dll\nIf you've some .net core installed machine wide(c:\\Program files...) you need to tell to dotnet.exe driver to not use global version(dotnet.exe is in path environment variable and will be resolved from program files folder) but your new downloaded version(https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet?tabs=netcore21#environment-variables)\nc:\\>set DOTNET_MULTILEVEL_LOOKUP=0\nc:\\>dotnet\\dotnet.exe yourapp.dll. I don't use VS Code, here some infos https://code.visualstudio.com/docs/other/dotnet. I don't use VS Code, here some infos https://code.visualstudio.com/docs/other/dotnet. In powershell .\\dotnet.exe --info\nOn double click it's correct...open and close windows, why would stay open?. In powershell .\\dotnet.exe --info\nOn double click it's correct...open and close windows, why would stay open?. I suggest to try with documentation sample https://dotnet.microsoft.com/learn to understand how .net core works, it's different from .net full framework if you come from there.. I suggest to try with documentation sample https://dotnet.microsoft.com/learn to understand how .net core works, it's different from .net full framework if you come from there.. You need use full path driver name(dotnet.exe) i.e.\nc:\\dotnet\\dotnet.exe\nc:\\mywebsite\n...\nc:\\mywebsite>c:\\dotnet\\dotnet.exe new mvc. You need use full path driver name(dotnet.exe) i.e.\nc:\\dotnet\\dotnet.exe\nc:\\mywebsite\n...\nc:\\mywebsite>c:\\dotnet\\dotnet.exe new mvc. glad to hear, happy conding!. glad to hear, happy conding!. Better to ask here https://github.com/Microsoft/vscode/issues. Better to ask here https://github.com/Microsoft/vscode/issues. @mammadkoma\u00a0actually c# vs code extension is provided by Omnisharp you could try to ask also here\u00a0https://github.com/OmniSharp/omnisharp-vscode/issues\n. @mammadkoma\u00a0actually c# vs code extension is provided by Omnisharp you could try to ask also here\u00a0https://github.com/OmniSharp/omnisharp-vscode/issues\n. IList is very old interface, you could write an extension method or propose new method on https://github.com/dotnet/corefx/issues following proposal guide https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md but I think that IList is implemented by a lot of class and could be a lot of work...maybe in future with default interface methods https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md. IList is very old interface, you could write an extension method or propose new method on https://github.com/dotnet/corefx/issues following proposal guide https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md but I think that IList is implemented by a lot of class and could be a lot of work...maybe in future with default interface methods https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md. ",
    "SjoerdWesterhof": "It could be that it is not .NET Core that is not properly named, but some other components that use the Core name.\nFor me choosing a .NET Core project template for a console app and then be able to target .NET desktop or something is just not intuitive any more. I guess it's the project file and build tooling that is Core about it, but the name is not giving intention.\nRunning ASP.NET of EF Core on .NET desktop has the same issue in my opinion. For me i guess it would have been clearer when certain application frameworks/tools that are developed on top of .NET with the intention in mind (in the initial phase at least) to run on both overlapping .NET desktop and .NET Core to have a name with which we could associate this behavior. \nUsing the name Core in application frameworks/tools that are not by definition running on .NET Core is creating unnecessary confusion in my honest opinion.. ",
    "sdb-dev": "Wrong project. ",
    "borgdylan": "This is for a console application. Also, the dll is referenced statically in the assembly metadata at compile time.. After some hacking around with runtime config files generated by the build process I managed ot get the code to run. Can this be included in the sdk. Like dlls in packages get added to runtime config, manually referenced dlls should also get added in there.. The repro is in an uncommited piece of code that will be committed soon. I am using the sdk bundled with the mono fork of msbuild. I am not sure if they are using old versions of the sdk or not. The version they are using seems to be 2.1.300-preview3-62804-06.. My issue seems to be a dupe of https://github.com/dotnet/sdk/issues/2162. I will chime in there to see what can be done.. ",
    "glenn-slayden": "Moved to https://github.com/dotnet/coreclr/issues/18150. ",
    "JesseObrien": "Looks like .NET Core 2.1 is broken on Arch Linux.\nI'm having the same issues as this person here: https://stackoverflow.com/questions/50689340/asp-net-core-2-1-on-arch-linux-does-not-run\nI'm trying to run this project (simple project to just play with signalr 2.1 and such).\nhttps://github.com/JesseObrien/signalr-jwt\nError:\nIt was not possible to find any compatible framework version\nThe specified framework 'Microsoft.AspNetCore.App', version '2.1.0' was not found.\n  - Check application dependencies and target a framework version installed at:\n      /opt/dotnet/\n  - Installing .NET Core prerequisites might help resolve this problem:\n      http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\n  - The .NET Core framework and SDK can be installed from:\n      https://aka.ms/dotnet-download\nSame package installed, same dotnet --info:\n```\nNET Core SDK (reflecting any global.json):\n Version:   2.1.300\n Commit:    adab45bf0c\nRuntime Environment:\n OS Name:     arch\n OS Version:\n OS Platform: Linux\n RID:         linux-x64\n Base Path:   /opt/dotnet/sdk/2.1.300/\nHost (useful for support):\n  Version: 2.1.0\n  Commit:  caa7b7e2ba\n.NET Core SDKs installed:\n  2.1.300 [/opt/dotnet/sdk]\n```. ",
    "stephenetyler": "I'm getting the same error downloading a previous release using\nsudo yum install dotnet-runtime-2.0.7\nCan someone fix this please?  and maybe a test should be written for this...\n. ",
    "gnjack": "@omajid Unfortunately no. These are also fresh docker containers.\nI believe anything with a dependency of dotnet-host >= 2.1.0 will actually match dotnet-host.x86_64 2.1.0_rc1-1 as version '2.1.0_rc1' is considered greater than '2.1.0' by yum.\n```\nbash-4.2# yum deplist dotnet-hostfxr-2.1\npackage: dotnet-hostfxr-2.1.x86_64 2.1.0-1\n  dependency: dotnet-host >= 2.1.0\n   provider: dotnet-host.x86_64 2.1.0_rc1-1\nbash-4.2# yum list available dotnet-host --showduplicates\nAvailable Packages\ndotnet-host.x86_64     2.0.0-1                       packages-microsoft-com-prod\ndotnet-host.x86_64     2.0.3-1                       packages-microsoft-com-prod\ndotnet-host.x86_64     2.0.4-1                       packages-microsoft-com-prod\ndotnet-host.x86_64     2.0.5-1                       packages-microsoft-com-prod\ndotnet-host.x86_64     2.0.6-1                       packages-microsoft-com-prod\ndotnet-host.x86_64     2.0.7-1                       packages-microsoft-com-prod\ndotnet-host.x86_64     2.1.0-1                       packages-microsoft-com-prod\ndotnet-host.x86_64     2.1.0_preview1_26216_03-1     packages-microsoft-com-prod\ndotnet-host.x86_64     2.1.0_preview2_26406_04-1     packages-microsoft-com-prod\ndotnet-host.x86_64     2.1.0_preview2_26411_07-1     packages-microsoft-com-prod\ndotnet-host.x86_64     2.1.0_rc1-1                   packages-microsoft-com-prod\n```\nYou can see the rc versions are still being advertised in the primary.xml metadata in https://packages.microsoft.com/rhel/7/prod/repodata/\n<package type=\"rpm\">\n  <name>dotnet-host</name>\n  <arch>x86_64</arch>\n  <version epoch=\"0\" ver=\"2.1.0_rc1\" rel=\"1\"/>\n  ...\n</package>\n<package type=\"rpm\">\n  <name>dotnet-host</name>\n  <arch>x86_64</arch>\n  <version epoch=\"0\" ver=\"2.1.0\" rel=\"1\"/>\n  ...\n</package>\nAnd the dotnet-host >= 2.1.0 requirement in dotnet-hostfxr-2.1\n<package type=\"rpm\">\n  <name>dotnet-hostfxr-2.1</name>\n  <arch>x86_64</arch>\n  <version epoch=\"0\" ver=\"2.1.0\" rel=\"1\"/>\n  ...\n    <rpm:requires>\n      <rpm:entry name=\"dotnet-host\" flags=\"GE\" epoch=\"0\" ver=\"2.1.0\"/>\n    </rpm:requires>\n  ...\n</package>\nOr at least I think that's the issue - I'm way out of my depth.... @leecow Odd, still not working here against centos:7.4.170 I'm afraid.\nHere's an example Dockerfile to reproduce, using the exact steps from Install .NET Core 2.1 Runtime (v2.1.0) on Linux CentOS / Oracle :\n```\nFROM centos\nRUN rpm -Uvh https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm\nRUN yum update -y\nRUN yum install -y aspnetcore-runtime-2.1\n```\n```\nStep 1/4 : FROM centos\n ---> 49f7960eb7e4\nStep 2/4 : RUN rpm -Uvh https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm\n ---> Running in 1103c559ea70\nwarning: /var/tmp/rpm-tmp.UcHmyo: Header V4 RSA/SHA256 Signature, key ID be1229cf: NOKEY\nRetrieving https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm\nPreparing...                          ########################################\nUpdating / installing...\npackages-microsoft-prod-1.0-1.el7     ########################################\nRemoving intermediate container 1103c559ea70\n ---> 428b15ece83f\nStep 3/4 : RUN yum update -y\n ---> Running in 0f6e32114412\nNo packages marked for update\nRemoving intermediate container 0f6e32114412\n ---> 120fb1a77049\nStep 4/4 : RUN yum install -y aspnetcore-runtime-2.1\n ---> Running in 2ff850d4c459\nResolving Dependencies\n--> Running transaction check\n---> Package aspnetcore-runtime-2.1.x86_64 0:2.1.0-1 will be installed\n--> Processing Dependency: dotnet-runtime-2.1 >= 2.1.0 for package: aspnetcore-runtime-2.1-2.1.0-1.x86_64\n--> Running transaction check\n---> Package dotnet-runtime-2.1.x86_64 0:2.1.0-1 will be installed\n--> Processing Dependency: dotnet-runtime-deps-2.1 >= 2.1.0 for package: dotnet-runtime-2.1-2.1.0-1.x86_64\n--> Processing Dependency: dotnet-hostfxr-2.1 >= 2.1.0 for package: dotnet-runtime-2.1-2.1.0-1.x86_64\n--> Running transaction check\n---> Package dotnet-hostfxr-2.1.x86_64 0:2.1.0-1 will be installed\n--> Processing Dependency: dotnet-host >= 2.1.0 for package: dotnet-hostfxr-2.1-2.1.0-1.x86_64\n---> Package dotnet-runtime-deps-2.1.x86_64 0:2.1.0-1 will be installed\n--> Processing Dependency: libicu for package: dotnet-runtime-deps-2.1-2.1.0-1.x86_64\n--> Running transaction check\n---> Package dotnet-host.x86_64 0:2.1.0_rc1-1 will be installed\n--> Processing Dependency: dotnet-runtime-deps-2.1.0-rc1 >= 2.1.0-rc1 for package: dotnet-host-2.1.0_rc1-1.x86_64\n---> Package libicu.x86_64 0:50.1.2-15.el7 will be installed\n--> Running transaction check\n---> Package dotnet-runtime-deps-2.1.0-rc1.x86_64 0:2.1.0_rc1-1 will be installed\n--> Finished Dependency Resolution\nDependencies Resolved\n================================================================================\n Package                 Arch   Version       Repository                   Size\n================================================================================\nInstalling:\n aspnetcore-runtime-2.1  x86_64 2.1.0-1       packages-microsoft-com-prod  29 M\nInstalling for dependencies:\n dotnet-host             x86_64 2.1.0_rc1-1   packages-microsoft-com-prod  43 k\n dotnet-hostfxr-2.1      x86_64 2.1.0-1       packages-microsoft-com-prod 195 k\n dotnet-runtime-2.1      x86_64 2.1.0-1       packages-microsoft-com-prod  27 M\n dotnet-runtime-deps-2.1 x86_64 2.1.0-1       packages-microsoft-com-prod 2.8 k\n dotnet-runtime-deps-2.1.0-rc1\n                         x86_64 2.1.0_rc1-1   packages-microsoft-com-prod 2.8 k\n libicu                  x86_64 50.1.2-15.el7 base                        6.9 M\nTransaction Summary\nInstall  1 Package (+6 Dependent packages)\nTotal download size: 63 M\nInstalled size: 166 M\nDownloading packages:\nhttps://packages.microsoft.com/rhel/7/prod/dotnet-host-2.1.0-rc1-x64.rpm: [Errno 14] HTTPS Error 404 - Not Found\nTrying other mirror.\nhttps://packages.microsoft.com/rhel/7/prod/dotnet-runtime-deps-2.1.0-rc1-rhel.7-x64.rpm: [Errno 14] HTTPS Error 404 - Not Found\nTrying other mirror.\nError downloading packages:\n  dotnet-host-2.1.0_rc1-1.x86_64: [Errno 256] No more mirrors to try.\n  dotnet-runtime-deps-2.1.0-rc1-2.1.0_rc1-1.x86_64: [Errno 256] No more mirrors to try.\n```. Thanks @leecow - all fixed here!. ",
    "VladislavAntonyuk": "Make sure you have installed the latest VS and try to reinstall .net core.\nRoolback your changes to .net core 2.0 and follow the instruction I have sent you. https://blogs.msdn.microsoft.com/webdev/2018/05/07/asp-net-core-2-1-0-rc1-now-available/. ",
    "mangod3": "Did you have NewRelic monitoring your .net app by any chance when you ran into the issue?. @Merurino Thanks for responding. After debugging the issue it looks like the 2.1 changes related to code versioning (https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/code-versioning-profiler-breaking-changes.md) are causing issues with profiling APIs. @noahfalk who should we follow up with to get this investigated, looks like the ILHeader is not getting initialized correctly after updating a method IL using SetILFunctionBody. Thanks for your response @noahfalk. Will package up a repro and send over email. . is it possible for you to capture a full native stack of the exception? That might help with identifying if you are hitting the same issue or something different. . ",
    "Merurino": "@mangod3 I was about to comment here. My issue seemed to be Newrelic. Was returning the IL issue. I was building it and running it on docker.\n. @mangod3 I was about to comment here. My issue seemed to be Newrelic. Was returning the IL issue. I was building it and running it on docker.\n. ",
    "joseclament": "I have a web job built on netcoreapp2.1 console application, targeting the win10-x64 and getting the  \"Unhandled Exception: System.BadImageFormatException: Could not load file or assembly exception\". \nI haven't had any issue with locally. Deployed using the visual studio directly to the app service. Any thoughts?. @noahfalk , I am using AppInsight to push the logs, other than no profiling or tooling.\nLet me know if I need to open a new issue.\n. @noahfalk  and @nil4 , I got the bottom of the problem. It took couple of days to get the bottom of the issue and made me bit nut. I was able to dig and find this link: https://tutel.me/c/programming/questions/42726350/how+to+change+azure+app+service+to+64bit\nYour core should be built on x86 version even if the deploying server(Azure) is based on 64 bit architecture. Because the 64 bit .NET core processes using the .NET core runtime (as opposed to the .NET Framework runtime) are not yet supported on Azure but is planned to be coming in the future. You can verify this by go to the kudu and type  dotnet --info. You can see something like this below:\n.NET Core SDK (reflecting any global.json):\n Version:   2.1.300\n Commit:    32f29b6eb9\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.14393\n OS Platform: Windows\n RID:         win10-x86\n _Base Path:   D:\\Program Files (x86)\\dotnet\\sdk\\2.1.300_ [You  can see only the x86 version here]\nHost (useful for support):\n  Version: 2.1.0\n  Commit:  caa7b7e2ba\n.NET Core SDKs installed:\n  1.1.8 [D:\\Program Files (x86)\\dotnet\\sdk]\n  2.1.101 [D:\\Program Files (x86)\\dotnet\\sdk]\n  2.1.300 [D:\\Program Files (x86)\\dotnet\\sdk]\nYou may be able to debug this locally \"Any CPU\" option as you might have x86 and x64 based libraries installed on your machine. I could not find any documentation on MSDN about this. I was assumed it would have been automatically support x64 version. Also make sure that the application setting is enabled for the \"32\" bit.\n. ",
    "jshunia": "@VladislavAntonyuk I will try upgrading to the latest version of VS 2017 and get back to you.\n@svick  Very interesting, thanks for the info!  That seems to line up with what I suspected.. ",
    "erwan-joly": "\ninteresting thing was that different struct had a different behavior before i got a breaking change too on this but really easy to fix just add a default value\n. ",
    "martinsuchan": "Same breaking change is happening in UWP apps after updating to Microsoft.NETCore.UniversalWindowsPlatform NuGet 6.2.0+ \n\n. It's a change of struct signature. Added private fields now prohibit usage of just Size size; for initialization.\nIt's discussed in more detail here: https://github.com/Microsoft/dotnet/issues/927. ",
    "adelton": "Possibly yes, but I'm not really familiar with everything that might need to be changed with the new release, or indeed, where to find those download URLs. I was only looking from the point of view of Fedora releases, EOL'ed and current.. ",
    "smudge202": "Yeh, fair enough. Given that not everything seems to be working for 2.1.0 yet (see #1627 for example) it might be jumping the gun to merge this in right now. \ud83d\ude1e . Ah, that'll explain it, thank you. Be good if releases.csv was updated accordingly?. ",
    "grapecitycarlzhang": "dotnet-sdk-2.1.300-win-x64.exe download at the morning do not works ,however download at the afternoon do works.\nwhat a interesting.\nthank you for answering. ",
    "MatthewLymer": "netstandard2.1 hasn't been standardized yet, and from what I know there's no complementary implementation to Span<T> on the .NET Framework, hence why you're forced to use netcoreapp2.1 if you want that new functionality.. ",
    "akunaatrium": "It is also missing for Ubuntu 16.04.. ",
    "SergeyChanaev": "@leecow can you also amend this on page for CentOS describes runtime download? Seems to be same issue there: dotnet-hosting instead of aspnetcore-runtime. ",
    "animeshb": "Thank you for pointing me toward new place for tracking releases. I think I could create a better script now.. ",
    "ltworf": "It depends on an old version of libssl that is not in debian buster and will not be part of the next stable release of debian.\nDon't ask me why\u2026. ",
    "shravan2x": "Is there any reason for this?\nIsn't --version a fairly generic command for linux executables?. I don't believe that will be helpful since the UnhandledExceptionTrapper is already registered. When called, it should log to a file, but it doesn't get called at all.. ",
    "daemnin": "Sorry for the late reply, the code where this issue happen can't be shared due to a privacy agreement with the company I work for. In my spare time I've been trying to reproduce this issue in a project that could be shared but no luck so far, the original project has many components and the error thrown by the azure portal's diagnostic tool doesn't help as much to identify the exact component that is causing this issue. I'll update the post once I get to reproduce the error.. ",
    "brianrob": "@doyouevensunbro, Visual Studio doesn't have any profiling tools that work with .NET Core on Linux.  At the current time, we recommend collecting performance data on Linux using perf.  Instructions are available at https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/linux-performance-tracing.md.\nWe're also working on exposing a .NET-centric profiler using functionality called EventPipe in CoreCLR.  There's not much documentation on the subject yet.. Yes, it is a manual process.  Are you looking for detailed tracing information, or are you looking for something more like performance monitoring?. This looks like something to be investigated.  I want to say that we did look into this, but I don't recall the results.  Let me poke around a bit and see what I can find out.. I was able to gather some information, but need to go through it and figure out what next steps look like.  Also need to triage this against other performance areas/goals.  It's good to see that there is interest here though, and that will help.\nLet's leave this issue open and use it to track further progress here.. To my knowledge, all of the NuGet packages that are produced by the CoreFx build are published to nuget.org when we release.  It doesn't look like any of the NuGet packages have been updated on nuget.org yet for any 2.2 preview releases.\n@vancem, does DiagnosticSource follow this plan, or is it published to nuget.org on-demand?. Yes, I'm doing a bit of profiling and will reply back with what I find.. I did a quick comparison between Windows and Linux and I found that Linux was much more CPU bound and progressed much slower.  I took a couple of 5 second traces to see what the differences were, and on Linux, the big difference is that there is pretty heavy contention on a spin lock in the allocator:\n\nThis contention doesn't show up at all on Windows.  It's also worth noting the total number of threads on each platform:\nLinux: 176\nWindows: 123\nThis could certainly have some impact - though I wouldn't have expected things to go from no contention to this much contention solely based on this.  The Parallel.ForEach which causes these threads to be injected is based on the files that were downloaded, so I think a good next step is for you to isolate this variable.  Specifically, what kind of difference do you see if you run this workload against the same set of static files on Linux and Windows?  Do you see an increase in the number of threads from Windows to Linux with the same static file set?  Essentially, make the app as deterministic as possible and then let's see how things behave.. ",
    "keith-miller": "@brianrob ok, thanks! Using perfcollect seems to be a very manual process. Looking forward to the changes coming in EventPipe. Having a way to poll (or push) this data would be great. \nThanks again. Looking for performance monitoring. We are using .Net Core as our dedicated game server, as it gives us the ability to share libraries with our Unity code base. My main use case would be monitoring performance during a load test while the dedicated server is under stress, and see where we can make improvements or where it falls over. \nHope that helps. And thanks again for .Net Core!. ",
    "AceHack": "Please forgive my ignorance, I was running into the docker inner/outer scope ARG/ENV issue, I've fixed my problem.  This works as expected.  Thanks.. ",
    "BenHayat": "Hi Peter;\nI see what you mean. So I should just install the 32 bit Linux and 32bit .net core runtime.\nThank you...\nDo you know if MSFT will be shipping the ARM64 version of .Net core anytime soon?. That's a good news. We're half way there. :-)\nI'm very excited about .Net core running on Raspberry Pi. \nThanks Peter!. ",
    "mareklinka": "I added the RazorCompile property on our shared project and now we can compile without issues. Thanks!\nJust out of curiosity, is this the expected behavior or will this change in a future version?. Fair enough. Thanks for the clarification, if we can think of something, we'll file it.. ",
    "Mattacks": "It can't be expected behaviour to upgrade from .Net Core 2 to 2.1 and get this compilation error!. ",
    "smokedog2": "\u547d\u540d\u7a7a\u95f4\u91cc\u9762\u5305\u542bConsole\uff0c\u4f60\u8fd9\u6837\u58f0\u660e\u5bf9\u4e8e\u7f16\u8bd1\u5668\u6765\u8bf4\uff0cConsole.WriteLine\u91cc\u9762\u7684Console\u662f\u4f60\u81ea\u5df1\u5b9a\u4e49\u7684\u3002. ",
    "mkc-xuliangjie": "\u61c2\u4e86\uff0c\u8fd9\u4e2a\u662f\u6211\u4e2a\u4eba\u77e5\u8bc6\u672a\u8fbe\u6807\u3002\u8c22\u8c22\u7b54\u7591\u3002. ",
    "tristan957": "Sorry if this is a duplicate. Thanks for the response. Let me know if I can provide you with any information. Interesting. Is there something special about Solus that I should bring up to my distro maintainers, or is this solely a .NET Core issue? Would I experience this issue on other distros?. No rush. If you need me to test things on my end, let me know. ",
    "JohanLarsson": "I'm getting this with the Win 10 distro.. ",
    "dmitriy-shleht": "Hi.\nI have the same problem on windows 7\nC:\\1\\ConsoleApp1\n\u03bb dotnet restore\n  \u0418\u0434\u0435\u0442 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u0434\u043b\u044f C:\\1\\ConsoleApp1\\ConsoleApp1\\ConsoleApp1.csproj...\n  \u0418\u0434\u0435\u0442 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u0434\u043b\u044f C:\\1\\ConsoleApp1\\UnitTestProject1\\UnitTestProject1.csproj...\n  \u041f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \"FindPackagesByIdAsync\" \u0434\u043b\u044f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \"https://api.nuget.org/v3-flatcontainer/system.xml.xpath.xmldocument/index.json\".\n  The SSL connection could not be established, see inner exception.\n    Authentication failed because the remote party has closed the transport stream.\n  \u041f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \"FindPackagesByIdAsync\" \u0434\u043b\u044f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \"https://api.nuget.org/v3-flatcontainer/system.xml.xpath.xmldocument/index.json\".\n  The SSL connection could not be established, see inner exception.\n    Authentication failed because the remote party has closed the transport stream.\nC:\\Program Files\\dotnet\\sdk\\2.2.101\\NuGet.targets(114,5): error : \u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \"System.Xml.XPath.XmlDocument\" \u0438\u0437 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \"https://api.nuget.org/v3-flatcontainer/system.xml.xpath.xmldocument/index.json\". [C:\\1\\ConsoleApp1\\ConsoleApp1.sln]\nC:\\Program Files\\dotnet\\sdk\\2.2.101\\NuGet.targets(114,5): error :   The SSL connection could not be established, see inner exception. [C:\\1\\ConsoleApp1\\ConsoleApp1.sln]\nC:\\Program Files\\dotnet\\sdk\\2.2.101\\NuGet.targets(114,5): error :   Authentication failed because the remote party has closed the transport stream. [C:\\1\\ConsoleApp1\\ConsoleApp1.sln]\n```\n\u03bb dotnet --info\n\u041f\u0430\u043a\u0435\u0442 SDK \u0434\u043b\u044f .NET Core (\u043e\u0442\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0439 \u043b\u044e\u0431\u043e\u0439 global.json):\n Version:   2.2.101\n Commit:    236713b0b7\n\u0421\u0440\u0435\u0434\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:\n OS Name:     Windows\n OS Version:  6.1.7601\n OS Platform: Windows\n RID:         win7-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\nHost (useful for support):\n  Version: 2.2.0\n  Commit:  1249f08fed\n.NET Core SDKs installed:\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\nTo install additional .NET Core runtimes or SDKs:\n  https://aka.ms/dotnet-download\n```\nDisable SocketsHttpHandler\n```\nC:\\1\\ConsoleApp1\n\u03bb SET DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0\nC:\\1\\ConsoleApp1\n\u03bb dotnet restore\n  \u0418\u0434\u0435\u0442 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u0434\u043b\u044f C:\\1\\ConsoleApp1\\ConsoleApp1\\ConsoleApp1.csproj...\n  \u0418\u0434\u0435\u0442 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u0434\u043b\u044f C:\\1\\ConsoleApp1\\UnitTestProject1\\UnitTestProject1.csproj...\n  \u041f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \"FindPackagesByIdAsync\" \u0434\u043b\u044f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \"https://api.nuget.org/v3-flatcontainer/mstest.testframework/index.json\".\n  An error occurred while sending the request.\n    Error 12030 calling WINHTTP_CALLBACK_STATUS_REQUEST_ERROR, '\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0431\u044b\u043b\u043e \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e'.\n  \u041f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \"FindPackagesByIdAsync\" \u0434\u043b\u044f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \"https://api.nuget.org/v3-flatcontainer/mstest.testadapter/index.json\".\n  An error occurred while sending the request.\n    Error 12030 calling WINHTTP_CALLBACK_STATUS_REQUEST_ERROR, '\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0431\u044b\u043b\u043e \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e'.\n  \u041f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \"FindPackagesByIdAsync\" \u0434\u043b\u044f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \"https://api.nuget.org/v3-flatcontainer/microsoft.testplatform.testhost/index.json\".\n  An error occurred while sending the request.\n    Error 12030 calling WINHTTP_CALLBACK_STATUS_REQUEST_ERROR, '\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0431\u044b\u043b\u043e \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e'.\n  \u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u0430\u043a\u0435\u0442 \"Dapper.1.50.5\" \u0438\u0437 \"https://api.nuget.org/v3-flatcontainer/dapper/1.50.5/dapper.1.50.5.nupkg\".\n  An error occurred while sending the request.\n    Error 12030 calling WINHTTP_CALLBACK_STATUS_REQUEST_ERROR, '\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0431\u044b\u043b\u043e \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e'.\n  \u041f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \"FindPackagesByIdAsync\" \u0434\u043b\u044f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \"https://api.nuget.org/v3-flatcontainer/microsoft.codecoverage/index.json\".\n  An error occurred while sending the request.\n    Error 12030 calling WINHTTP_CALLBACK_STATUS_REQUEST_ERROR, '\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0431\u044b\u043b\u043e \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e'.\n  \u041f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \"FindPackagesByIdAsync\" \u0434\u043b\u044f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \"https://api.nuget.org/v3-flatcontainer/mstest.testadapter/index.json\".\n  An error occurred while sending the request.\n    Error 12030 calling WINHTTP_CALLBACK_STATUS_REQUEST_ERROR, '\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0431\u044b\u043b\u043e \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e'.\n  \u041f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \"FindPackagesByIdAsync\" \u0434\u043b\u044f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \"https://api.nuget.org/v3-flatcontainer/microsoft.codecoverage/index.json\".\n  An error occurred while sending the request.\n    Error 12030 calling WINHTTP_CALLBACK_STATUS_REQUEST_ERROR, '\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0431\u044b\u043b\u043e \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e'.\n  \u041f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \"FindPackagesByIdAsync\" \u0434\u043b\u044f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \"https://api.nuget.org/v3-flatcontainer/mstest.testframework/index.json\".\n  An error occurred while sending the request.\n    Error 12030 calling WINHTTP_CALLBACK_STATUS_REQUEST_ERROR, '\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0431\u044b\u043b\u043e \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e'.\n  \u041f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \"FindPackagesByIdAsync\" \u0434\u043b\u044f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \"https://api.nuget.org/v3-flatcontainer/microsoft.testplatform.testhost/index.json\".\n  An error occurred while sending the request.\n    Error 12030 calling WINHTTP_CALLBACK_STATUS_REQUEST_ERROR, '\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0431\u044b\u043b\u043e \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e'.\n  \u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u0430\u043a\u0435\u0442 \"Dapper.1.50.5\" \u0438\u0437 \"https://api.nuget.org/v3-flatcontainer/dapper/1.50.5/dapper.1.50.5.nupkg\".\n  An error occurred while sending the request.\n    Error 12030 calling WINHTTP_CALLBACK_STATUS_REQUEST_ERROR, '\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0431\u044b\u043b\u043e \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e'.\nC:\\Program Files\\dotnet\\sdk\\2.2.101\\NuGet.targets(114,5): error : \u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u0430\u043a\u0435\u0442 \"Dapper.1.50.5\" \u0438\u0437 \"https://api.nuget.org/v3-flatcontainer/dapper/1.50.5/dapper.1.50.5.nupkg\". [C:\\1\\ConsoleApp1\\ConsoleApp1.sln]\nC:\\Program Files\\dotnet\\sdk\\2.2.101\\NuGet.targets(114,5): error : An error occurred while sending the request. [C:\\1\\ConsoleApp1\\ConsoleApp1.sln]\nC:\\Program Files\\dotnet\\sdk\\2.2.101\\NuGet.targets(114,5): error :   Error 12030 calling WINHTTP_CALLBACK_STATUS_REQUEST_ERROR, '\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0431\u044b\u043b\u043e \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e'. [C:\\1\\ConsoleApp1\\ConsoleApp1.sln]\nC:\\Program Files\\dotnet\\sdk\\2.2.101\\NuGet.targets(114,5): error : \u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \"Microsoft.CodeCoverage\" \u0438\u0437 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \"https://api.nuget.org/v3-flatcontainer/microsoft.codecoverage/index.json\". [C:\\1\\ConsoleApp1\\ConsoleApp1.sln]\nC:\\Program Files\\dotnet\\sdk\\2.2.101\\NuGet.targets(114,5): error :   An error occurred while sending the request. [C:\\1\\ConsoleApp1\\ConsoleApp1.sln]\nC:\\Program Files\\dotnet\\sdk\\2.2.101\\NuGet.targets(114,5): error :   Error 12030 calling WINHTTP_CALLBACK_STATUS_REQUEST_ERROR, '\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0431\u044b\u043b\u043e \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u0435\u0440\u0432\u0430\u043d\u043e'. [C:\\1\\ConsoleApp1\\ConsoleApp1.sln]\n```\n. Thank. The problem was in the internet provider. Began to use a proxy and everything is ok.\nIt is not clear why in the browser api.nuget.org worked, and through dotnet.exe there was an exception.. ",
    "bcisnero": "Probably a fast solution to this will be to add a note in the document explaining just what are the Azure limitations and the the workaround at this point because and this is going to change at some point in the future.. ",
    "mpiroc": "Here's a minimal repro. Build from Bash for Windows using dotnet build or dotnet build ./BuildRepro.sln.\nBuildRepro.zip\nBuildRepro.Project1 and BuildRepro.Project2 are .NET Standard Class Library projects that generate a NuGet package on build. Project2 depends on Project1.\nBuildRepro.Project1.UnitTests and BuildRepro.Project2.UnitTests are xunit (.NET Core Console Application) projects that reference Project1 and Project2 respectively.\n. Weird: I've suddenly stopped seeing this error, both in my original project and in the repro project that I attached. Not sure why. Closing, will re-open if I encounter this again.. ",
    "ColorTwist": "Thanks, downloading NET Core 2.1 SDK v2.1.300 helped after some struggle .\nI just hope i did the right thing using the new Core stuff.... ",
    "Sauedy": "Worked for me, thank you!. ",
    "mo-norant": "Worked for me Thanks. ",
    "AvogadroSG1": "Even though this is closed, for people in the future coming to see this.  If you're using MSBuild on TFS (in-house, not VSTS), make sure if you've updated your project to .NET Core 2.1 from Core X.X, you need to open your publish profiles and make sure they are saved with netcoreapp2.1 instead of your older version.\n. ",
    "Eonasdan": "@AvogadroSG1 suggestion also applies to web publish to Azure. ",
    "WriterOfCode": "When I build on my local computer I have no problem. However when I use the azure pipe line the following error occurs.\nPackage Microsoft.Extensions.Primitives 2.1.6 is not compatible with netcoreapp2.1 \nAny suggestions?. ",
    "edwardsky": "Yes. This bug regularly, but i don't know how get more details. VS 2017 debbuger cant see exceprion becose my corefx console app closed! I have error in application log event on Windows. And as you see this error with dotnet.exe and ntdll.dll. May be you can help me correct my c# code, and error will be fixed. https://yadi.sk/i/2F4cWhYk3XocBh \n1. My core app is WebServer on TcpListner \n2. I use SslStream with AuthAsServer option and OpenSSL test localhost cert from localhost CertAuth\n3. Some times I have Exceptions on SSL System.IO.IOException: Authentication failed because the remote party has closed the transport stream. and  Authentication failed because the remote party has closed the transport stream. Maybe this exceptions crash dotnet.exe. BUT on Ubuntu and MacOSX i dont have this Issues. \nI send you my code for testing on your email. In general, this mistake made me very sad. Since I did not have time to start writing my code, I already got a full stop of the code. Of course, you can make a script that will check whether dotnet mycode.dll has stopped and start the service again. This is very sad. The databases will not be closed as needed, and the reception from other clients will cease. I even thought about throwing C # and switching to C ++. This has been torturing me for 4 days already! . You need to use NTdll more gently, so as not to crash the main start of the program dotnet.ehe. As after such a serious flight I can generally rely on your coolest cross platform environment. If it can be put so quickly on the shoulder blades. Although I did not write anything loadable yet. @muratg No, i wrote it itself by using TcpListener class and SslStream on TcpClient  iin ThreadPool.QueueUserWorkItem. I cant share my code. Becouse it is not open source. But i can send  sources in your email. . @muratg Ok! I make new clean project may be this happens again, but not sure if it get an error again) . @muratg @karelz I again repeated the application's bug in the new project, check my project that there might crash the program. This repo https://github.com/edwardsky/dotnetntdllbug \nmy os is https://yadi.sk/i/ugKl7roj3XtNuJ . @karelz i dont use tool windbg and cant get stack trace( What i need to do step by step, or maybe some instruction for how i can record this information. @muratg I will be very happy if the desired pattern solves my problem. But why is it just closing? Why there is no exception that can be processed and continue working? Okay, I make an error, but how do I continue to catch my bugs?. Good-bye guys. I turn to C ++ development and this solution is no longer necessary to me! Very much disappointed in dotnet. I do not see any further development of myself as a developer in C #.. @karelz I know that I need more knowledge, although it stopped me and started programming in C ++. But now I know for sure that this is my new path. Thank you for your wish. I wish you and your product luck and prosperity. ",
    "alentor": "Please close the issue, as I have resolved it.\nAccording to bricelam's stackoverflow thread \n\n\"Startup.Configure() should only contain code to configure the request pipeline. Any app startup/initialization code should go in Program.Main().\"\n\nI have moved my dbContext initialization to Program.Main() and now it's working!. ",
    "javiercn": "@natemcmaster I'm not sure if this is covered as part of the razor in class libraries topic.. @scherenhaenden We are simply using the .NET certificate store APIs. It seems that the folder permissions are not being set correctly when the folder gets created. I'm not sure who creates the ~/.dotnet folder in the first place.\n@bartonjs how is this supposed to work?. @scherenhaenden Are you running the first run experience as root? That's the only way I can think of the folder being created with root permissions and not the current user. That said, changing the folder permissions should be enough to fix the issue. \nThe tool doesn't do anything special and only relies on the .NET APIs to setup the cert in the local store shim. The only thing I can think of is somehow detecting that its being run as root, issuing a warning and not doing anything in that case, but I don't know if this is even feasible cross-platform. @scherenhaenden If the folder is being created with root permissions even when you aren't running under root I'm not sure what's going on in that machine, it might be an issue on the machine configuration or a bug on .net core.\nI would try the following:\n Install the dotnet sdk on the clean box.\n Before running any dotnet command, check if the folder exists after installation and if it has the right permissions or root permissions.\n  * If the folder is present it most likely means that the first run experience ran:\n    * If the folder has the wrong permissions: It probably means that the first run experience ran under the wrong user. (This should not happen).\n  * If the folder doesn't exist, make sure you are not running under sudo and run a dotnet command, like dotnet new console. You should see the first run experience displayed on the terminal.\n    * If the folder has the wrong permissions: It probably means that there is a bug in .NET Core setting the permissions for the folder.\n. @muratg Yes. We fixed this to make it spec compliant a few days ago, but seems that clients don\u2019t support * very well. \n@pranavkm we should just reflect the request headers here when all are allowed.. @muratg I believe we already fixed this. ",
    "ds-ms": "\nAlso, there's a space in a couple of URLs which doesn't allow us to consume this value straight way i.e. leads to a 400 error. Could you do a sanity check on the values in this CSV? . Appreciate the fix, will raise it myself from next time :) \nAlso, what is the expected source of truth here? Do you want the customers to rely on Releases.JSON or Releases.CSV for figuring out the new versions? . ",
    "sabiland": "Ok I have found the issue - the problem was with my csproj settings-file.\nAfter I removed all Microsoft.* PackageReferences and added only this one:\n<PackageReference Include=\"Microsoft.AspNetCore.App\" />\nEverything started working as expected! :). ",
    "cculver": "Anyone know where I can find code that sets $(ProjectDir) or is that closed source? Might be worth trying to chase on my machine in case it's me.. I found another reference to this problem on SO. https://stackoverflow.com/questions/43656260/projectdir-prebuild-event-macro-incorrect/43656609\nThis contains a workaround (https://github.com/dotnet/project-system/issues/1569#issuecomment-289939906). Do you suggest I go this route for EF .NET Core-based projects until this is remedied?. I think I resolved the issue and it was machine-specific. There's no problem here. I will reopen if it reoccurs. Thanks for your time.. ",
    "pereiraarun": "The code works as posted in .Net Core 2.0. The code is used for https://netbox.readthedocs.io/en/latest/api/authentication/\n$ curl -H \"Authorization: Token d2f763479f703d80de0ec15254237bc651f9cdc0\" -H \"Accept: application/json; indent=4\" http://localhost/api/dcim/sites/\n{\n\"count\": 10,\n\"next\": null,\n\"previous\": null,\n\"results\": [...]\n}. ",
    "CrystalWindSnake": "@Petermarcu Thank you for follow up my question\u3002\nI tried the following operation today\u3002\n1\uff0cCreate a console program using commands\uff0cand it work on windows.\ndotnet new console\ndotnet run\n2,Copy the debug folder directly to the centos system\uff0cand cd to debug folder and run using commands\ndotnet xxx.dll\n3,The following error message appears\nUnhandled Exception: System.BadImageFormatException: Could not load file or assembly '/home/t1/wins/bin/Debug/wins.dll'. An attempt was made to load a program with an incorrect format.\nAccording to my understanding, he should be able to work\u3002\nI also tried building on centos\uff0cand copy to window to run,it will have the same problem.\nThis problem bothers me for two days, thank you for your reply\u3002\ndotnet --info\nwindows:\n\ncentos:\n\n. @Petermarcu So sad,it don't work.I have a question about the release and published.My program is just a very simple \u201cHello World\u201d Console,Why did it have to published?. @Petermarcu  I create a new project on windows use the 'dotnet new console' this time.and published use 'dotnet publish -r linux-x64 --self-contained=false'.and then i copy to the 'microsoft/dotnet' docker's image and 'dotnet xxx.dll' run it.but it still the same problem.is that my windows system problem?\n thank you and have a nice weekend. ",
    "iga1976": "Peter, let me know if i can collect some trace and some core dump files.\nAre the core dumps useful in this case? SLES 12 SP2 x86_64. tony@ubuntu1604:~/sandbox/app$ echo $Optimize\ntony@ubuntu1604:~/sandbox/app$ \n. Actually i have an OPTIMIZE env var.\ntony@ubuntu1604:~/sandbox/app$ echo $OPTIMIZE\n1\nIf i open a new terminal and make sure i dont have that OPTIMIZE the dotnet publish completes OK w/o error. Inside the diag build log it shows Optimize = true\nI have to mention that it works nice on Suse but not on Ubuntu.\nIt looks specific to dotnet core on Ubuntu 16.04 xenial.\n. I unset the OPTIMIZE .\nOPTIMIZE= dotnet publish ...\nthat way it calls dotnet w/o OPTIMIZE set at all. Other idea ?. ",
    "kmanev073": "Should I close the issue and post it there?. ",
    "PSUPing": "I looked through the build settings in VS and have a compile target of \"Executable\" and checked the \"Do not reference mscorlib.dll\". When doing dotnet publish in my Dockerfile i'm purposely avoiding the --self-contained flag. The app is an ASP.NET application (microservice). However, this error seemed to be with the dotnet CLR rather than something having to do with ASP.NET which is why I posted the issue in this project.\nFor fun, I just tried building and running as a self contained app. I changed from 2.1-runtime-alpine to 2.1-runtime-deps-alpine. I got the same error. . I didn't realize that about -r. I've tried a couple different variants now. \nUsing the following two publish commands: dotnet publish -c Release -r linux-x64 --self-contained=false -o out or dotnet publish -c Release -o out I get the following error when running dotnet app-name.dll: \nIt was not possible to find any compatible framework version\nThe specified framework 'Microsoft.AspNetCore.App', version '2.1.0' was not found.\n  - Check application dependencies and target a framework version installed at:\n      /usr/share/dotnet/\n  - Installing .NET Core prerequisites might help resolve this problem:\n      http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\n  - The .NET Core framework and SDK can be installed from:\n      https://aka.ms/dotnet-download\nI tried changing the publish command to dotnet publish -c Release -r linux-x64 -o out. I also changed the FROM line in my Dockerfile above to be FROM microsoft/dotnet:2.1-runtime-deps-alpine AS runtime. If I follow correctly, self-contained apps are meant for the deps image. I then ran ./app-name When I did that, I get same error as originally posted. \nI'm almost wondering if there's something with one of the libraries that I'm importing that's causing this to go haywire. I started this out a few weeks ago on the .NET Core 2.0 framework running on an Ubuntu image. That ran without any issue. I was trying to move it to 2.1 because there were official Alpine images now. Just trying to think of different things that may be causing issues. . Just hit me when I posted the last comment I need to use the aspnetcore image. Closing as this was not a real thing. Thanks for talking through though. Appreciate the help!. ",
    "nicojs": "Thanks @Petermarcu ! You're remark about linux-musl-x64 saved my skin! I kept getting this error: No such file or directory. As in:\n$ docker run -it --entrypoint /bin/bash alpinetest\nbash-4.4# ./AlpineTest\nbash: ./AlpineTest: No such file or directory\nFor anyone else facing this issue: build for linux-musl-x64 instead of linux-x64. @ChristopherLClark \nI think the linux-musl-x64 target is added since dotnet core 2.1. You might need to upgrade. Anyway, I'm not actively working on a dotnet core project right now, so cannot validate or test anything. Best of luck to you.. ",
    "sjbeskur": "So close I can almost taste it.... now I keep getting the following error:\nFailed to load `\ufffd\ufffd\u0210U, error: Error loading shared library ld-linux-x86-64.so.2: No such file or directory (needed by /src/libhostpolicy.so)\nAn error occurred while loading required library libhostpolicy.so from [/src/]. ",
    "ChristopherLClark": "@sjbeskur  apk add libc6-compat && apk add libunwind-dev. @nicojs  I'm getting \"error : Project is targeting runtime 'linux-musl-x64' but did not resolve any runtime-specific packages. This runtime may not be supported by the target framework.\"\nwhen I try to do that.. ",
    "atpyatt": "The solution here: https://github.com/aspnet/Home/issues/3132#issuecomment-388082725 fixed this problem for me.. ",
    "darkguy2008": "So what was the solution? I'm getting the same as well. ",
    "mickaelistria": "I get the same issue with dotnet core 2.1.300, extracted from the zip, on Fedora 28.\nThe issue manifests itself simply with a dotnet restore.\n$ dotnet restore\n  Restoring packages for /home/mistria/junit-workspace/csprojWithError_org.eclipse.acute.tests.TestLSPIntegration_1531236189153/ConsoleDotNet.csproj...\n/home/mistria/apps/dotnet-sdk-2.1.300-linux-x64/sdk/2.1.300/NuGet.targets(114,5): error : Unable to load the service index for source https://api.nuget.org/v3/index.json. [/home/mistria/junit-workspace/csprojWithError_org.eclipse.acute.tests.TestLSPIntegration_1531236189153/ConsoleDotNet.csproj]\n/home/mistria/apps/dotnet-sdk-2.1.300-linux-x64/sdk/2.1.300/NuGet.targets(114,5): error :   The SSL connection could not be established, see inner exception. [/home/mistria/junit-workspace/csprojWithError_org.eclipse.acute.tests.TestLSPIntegration_1531236189153/ConsoleDotNet.csproj]\n/home/mistria/apps/dotnet-sdk-2.1.300-linux-x64/sdk/2.1.300/NuGet.targets(114,5): error :   error:2006D002:BIO routines:BIO_new_file:system lib [/home/mistria/junit-workspace/csprojWithError_org.eclipse.acute.tests.TestLSPIntegration_1531236189153/ConsoleDotNet.csproj]\nIf I set DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=false, things work better\n$ DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=false dotnet restore\n  Restoring packages for /home/mistria/junit-workspace/csprojWithError_org.eclipse.acute.tests.TestLSPIntegration_1531236189153/ConsoleDotNet.csproj...\n  Installing Microsoft.NETCore.DotNetAppHost 2.0.0.\n  Installing Microsoft.NETCore.DotNetHostResolver 2.0.0.\n  Installing NETStandard.Library 2.0.0.\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.0.0.\n  Installing Microsoft.NETCore.App 2.0.0.\n  Generating MSBuild file /home/mistria/junit-workspace/csprojWithError_org.eclipse.acute.tests.TestLSPIntegration_1531236189153/obj/ConsoleDotNet.csproj.nuget.g.props.\n  Generating MSBuild file /home/mistria/junit-workspace/csprojWithError_org.eclipse.acute.tests.TestLSPIntegration_1531236189153/obj/ConsoleDotNet.csproj.nuget.g.targets.\n  Restore completed in 4.54 sec for /home/mistria/junit-workspace/csprojWithError_org.eclipse.acute.tests.TestLSPIntegration_1531236189153/ConsoleDotNet.csproj.. ",
    "ashemedai": "See also dotnet/core-setup#4245. See also dotnet/core-setup#4245. See also #1700 . See also #1700 . ",
    "bishal-pdMSFT": "Same error for https://dotnetcli.blob.core.windows.net/dotnet/Runtime/2.0.7/dotnet-runtime-2.0.7-win-x64.zip. @leecow I don't see the releases-v2.json file at the above link. Is v2 still happening?. @leecow this is breaking the Azure pipelines(formerly VSTS) task. What is the long term approach here as want to make sure that the task work well over the time?\nAre blob urls not longer going to be there? Will each location directly point to full dlc url? Are you going to change this behavior for older versions as well? There seems to be no set pattern.\n. Created a new issue #1977 as the current one is an \"announcement\".. @leecow if You can I can contribute a PR to add a new property for full urls.. ",
    "atotalnoob": "TL;DR I'm dumb. ",
    "paulbatum": "Nope its not me. The appropriate place for this question is https://github.com/Azure/azure-mobile-apps-net-server - I would move it there.. ",
    "gayan1991": "@paulbatum Have you moved this issue to Azure Mobile apps or should I create new issue over there?. ",
    "poteb": "Could this be the reason, that my ASP.NET Core 2.1 API crashes if I update Microsoft.AspNetCore.All from 2.1.0 to 2.1.1? It doesn't even give me an error, the application never starts up, the debugger just stops. There is nothing in the event log.. I can confirm, that my problem is solved after installing SDK 2.1.301.. Might be related to #1707 . ",
    "garethrampton": "@poteb Have you installed the 2.1.301 SDK/runtime?\nIt appears the 2.1.1 packages get released on nuget well in advance of the SDK/runtime required to actually use them becomes readily available!\n. ",
    "kieronlanning": "@DamianEdwards Is there a plan to release the SDK et al for 2.1.1 anytime soon?\nOr maybe pull the 2.1.1 package from NuGet until those bites are released?. I guess the issue is that projects, like libraries, don't reference that NuGet package. They'll reference the individual packages. And even if they did, because they don't havce the Microsoft.NET.Sdk.Web target, they'll still have the reference to a version number.\nThis is especially true of projects that have gone through an upgrade cycle of updating/ upgrading from .NET Core 1.x.\nThis obviously isn't a show-stopper, but I can imagine that lots of people have wasted a lot of time globally updating to these packages and then trying to figure out a series of strange build errors.. It looks like https://www.microsoft.com/net/download/ now has the latest bits available.. I guess that's for @paulallington as the issue owner...?\nFor me, the release has solved local build issues. Now it's down to build servers and App Services.. @leecow Using 2.2.104 SDK in Azure DevOps .NET Core Tool Installer fails because it's not in the releases.csv. \nWhen will that be added?. @leecow Interesting, when I set my project to 2.2.104, the .NET Core SDK Installer fails with:\nCannot read property 'trim' of undefined\nFull-log:\n2019-02-13T23:57:38.7785035Z Tool to install: .NET Core sdk version 2.2.104.\n2019-02-13T23:57:38.7836944Z [command]/home/b33rdy/ado-agent/_work/_tasks/DotNetCoreInstaller_b0ce7256-7898-45d3-9cb5-176b752bfea6/0.2.1/externals/get-os-distro.sh\n2019-02-13T23:57:38.8548504Z Primary:linux-x64\n2019-02-13T23:57:38.8549556Z Legacy:ubuntu.18.04\n2019-02-13T23:57:38.8550836Z Detected platform (Primary): linux-x64\n2019-02-13T23:57:38.8551637Z Detected platform (Legacy): ubuntu.18.04\n2019-02-13T23:57:38.8553300Z Checking if a cached copy exists for this version...\n2019-02-13T23:57:38.8566630Z The cache does not contain the requested version of .NET Core. Downloading and installing it now.\n2019-02-13T23:57:38.8567272Z Getting URL to download .NET Core sdk version: 2.2.104.\n2019-02-13T23:57:39.1111444Z ##[error]Cannot read property 'trim' of undefined\n\nI've tested it with 2.2.103, and it's A-OK.. @leecow Is there a way to track the coordination between the various places - Azure AppServices, Azure Blob Deployments, GitHub's releases.csv etc?\nA means to track it would also help in situations like this too. We would have checked a tracker, and just waited rather than commenting here...win/ win! \nWe've been waiting for 2.2.2 for several months as it solves a problem with the HttpContextAccessor, so keen to get in updated ASAP.\nUpdate: I've just tried it again, and it's still failing. I've never known them to take this long.... @leecow Looks like it's a problem with naming. It's referenced here: https://github.com/Microsoft/azure-pipelines-tasks/issues/9366. @leecow Amazing work, thanks! All our builds working a-ok now! Cheers!. ",
    "albertofustinoni": "Tested a bit more, it seems it works if I set the minimum required UWP SDK to 16299.\nUnfortunately as I'm targeting phones too I need to keep 15063 as the baseline.. @nattress This doesn\u2019t make sense to me: System.Memory is .net standard 1.1 (check Nugget) and UWP pre Fall Creators Update supports up to 1.4.\nHow can it not be compatible, especially when UWP debug builds work perfectly and other netstandard 1.4 assemblies I have that reference it work fine too?. @nattress Ok now that makes sense. Thank you for your explanation.\nIt\u2019s just very saddening to see Windows 10 mobile die like this.. ",
    "eopeter": "Is it possible you have two ShowAll input name in your form?. ",
    "WinthorpeCross": "No, there is just one ShowAll input name in the form..  I have since refactored the entire thing, but I have retrieved the original form markup:\n<form id=\"sort-filter-form\" class=\"form-horizontal\">\n    <div class=\"form-group\">\n        <div class=\"col-sm-4\">\n            <label class=\"control-label\">Select and view specific species...</label>\n            @Html.DropDownListFor(m => m.SelectedBirdId,\n                 new SelectList(Model.AllBirdsDropDownList, \"BirdId\", \"EnglishName\"),\n                       new\n                       {\n                           @class = \"form-control selectpicker showtick\",\n                           title = \"Choose a bird species...\",\n                           data_live_search = \"true\",\n                           data_show_subtext = \"true\",\n                           onchange = \"this.form.submit()\"\n                       })\n        </div>\n        <div class=\"col-sm-4\">\n            <label class=\"control-label\">...</label>\n            <input asp-for=\"ShowAll\" type=\"checkbox\" data-toggle=\"toggle\" onchange=\"this.form.submit()\" data-on=\"All birds\" data-off=\"Common birds\">\n        </div>\n        <div class=\"col-sm-4\">\n            <label class=\"control-label\">...</label>\n            <input asp-for=\"ShowInTable\" type=\"checkbox\" data-toggle=\"toggle\" onchange=\"this.form.submit()\" data-on=\"Table\" data-off=\"Thumbnails list\">\n        </div>\n    </div>\n</form>. ",
    "arokoyo": "I know one day I will write a matrix code. ",
    "SeanMartz": "I may be incorrect in the end date of the LTS release. I believe I saw 3 years in the microsoft docs, but I could be wrong.. Thanks @omajid!  This is the part that I was referencing:\n\n.NET Core 2.1 will be a long-term support release. We recommend that you make .NET Core 2.1 your new standard for .NET Core development.\n\nBut I do see that @richlander has commented that it is not officially announced yet! . ",
    "thohng": "Thank you @dasMulli !. ",
    "kaansengul": "I also encountered the same problem when I first migrated from 2.0 to 2.1.\nBe sure you checked the \"Publish > Settings > File Publish Options > Remove additional files at destination\" option (if you publishing manually). I think some files is breaking the whole application.\nNow same problem happens when I publish a single *.cshtml file even I've tried the csproj editions.. ",
    "vankampenp": "You do not need to change the publish options, just once removing all dll's, service references, and runtimes manually is enough. You can keep configuration files, wwwroot, etc. Then publish again. Apparently there is an old 2.0 dll which needs to be manually removed.. @chillfire that looks like a different type of issue.. ",
    "mjharper84": "I got this issue when publishing a single razor file (layout) I won't make that mistake again! Remove additional files at destination fixed it for me. ",
    "chillfire": "Hi, I am having the same issue.\ndotnet --info shows me:\n.NET Core SDKs installed: 2.1.4 to 2.1.500\n.NET Core runtimes installed: \n Microsoft.AspNetCore.All: 2.1.2 to 2.1.6\n Microsoft.AspNetCore.App 2.1.2 to 2.1.6\n Microsoft.NETCore.App 2.0.5 to 2.1.6\nIn csproj:\n<MvcRazorCompileOnPublish>true</MvcRazorCompileOnPublish>\n    <MvcRazorPrecompile >true</MvcRazorPrecompile>\n    <PreserveCompilationContext>true</PreserveCompilationContext>\n    <RuntimeFrameworkVersion>2.1.6</RuntimeFrameworkVersion>\nI can run the project perfectly from vstudio, however when I use dotnet publish (locally) and then run it from the \"publish\" folder I get:\nThe view 'Index' was not found. Searched locations: /Views/Home/Index.cshtml, /Views/Shared/Index.cshtml, /Pages/Shared/Index.cshtml\nThere is a xxxxx.PrecompiledViews.dll file in the publish folder and when I JustDecompile the views dll:\n\nAnd the main dll I see:\n\nSo as far as I can work out all of the files are embedded correctly and they work when running from IISExpress, jut not when run as a published app. I have published to azure and get the same error in the azure logging console so I have missed something somewhere along the way.\n. ",
    "Melfi11": "Yes that\u00b4s correct!\nDo you have a difference to my operating system settings? (Node.js or something else!?)\nThanks for information - I removed the version for package Microsoft.AspNetCore.All.. Thanks a lot @road42 - without the proxy settings I can run the application. But why it\u00b4s been crashing with active proxy? Targetting .NET Core 2.0 it works well!?. Unfortunately it was neccessary to use a upper case \"U\" at \"UseSocketsHttpHandler\". \nIt seems to work with following Main() and active proxy:\n```c#\npublic static void Main(string[] args) {\n    AppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false);\n    CreateWebHostBuilder(args).Build().Run();\n}\n. ",
    "road42": "@Melfi11 It seems, that the internal call to node is intercepted somehow.\nTry to disable your proxy if there is one.. I\u2018ve had a look on the source and the extension seems to use the default HttpClient without any new factory methods or something like that. . The \"u\" has to be uppercase\nAppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false);\nSee: source. ",
    "wdmeeste1": "Updating all the Microsoft.* nuget packages from 2.1.0 to 2.1.1 seems to fix the problem:\n<PackageReference Include=\"Microsoft.AspNetCore.App\" Version=\"2.1.1\" />\n<PackageReference Include=\"Microsoft.Extensions.Configuration.EnvironmentVariables\" Version=\"2.1.1\" />\n<PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.1.1\" />\n<PackageReference Include=\"Microsoft.Extensions.Configuration.CommandLine\" Version=\"2.1.1\" />\n<PackageReference Include=\"Microsoft.Extensions.Configuration.UserSecrets\" Version=\"2.1.1\" />\n<PackageReference Include=\"Microsoft.Extensions.Localization\" Version=\"2.1.1\" />\n<PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"2.1.1\" />\n<PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"2.1.1\" />\n<PackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"2.1.1\" />\n<PackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"2.1.1\" />\n<PackageReference Include=\"Microsoft.Extensions.Caching.Memory\" Version=\"2.1.1\" />\n<PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"2.1.1\" />\n<PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.1.1\">\n    <PrivateAssets>All</PrivateAssets>\n</PackageReference>\n. ",
    "kapouille": "Thank you, I can confirm, after some soak tests, that 2.1 solved all those insane issues.. ",
    "XbbLeon": "@natemcmaster Now,I can use  \"dotnet publish -r linux-arm64\" to publish a web api project(targetframework is netcoreapp2.1) on Windows and it can run on a fedora system which cpu is arm64,but I can't restore and build webapi project on the fedora os,so i want know do you have any plans for it ?\nAnd where can I find the \"dotnet-sdk-latest-linux-arm64.tar.gz\u201c again\uff1fThx! . @natemcmaster OK! I get \"dotnet-sdk-2.1.301-linux-arm64.tar.gz\" from the link you told me, and I can new a console project and restore successfully,but when I build it ,I get failure:\n/opt/sdk/2.1.301/Roslyn/Microsoft.CSharp.Core.targets(52,5): error MSB6006: \"csc.dll\" exited with code 139. [/root/lab/demo/demo.csproj]\nWhat can I do to resolve it?\nAnd why this sdk doesn't contain asp.net runtime?. OK.,get it ! Thank you.\nI want ro konw where can I download the latest daily-build sdk instead of the stable version .\nGood luck.. I get the sdk , thank you very much!\nThere is another question: As you speak ,  ASP.NET Core is not supported on linux-arm64 yet ,  but I can use \"dotnet publish -r linux-arm64\" to publish a web api project(targetframework is netcoreapp2.1) on Windows and it can run on a fedora system which cpu is arm64 , but I can't restore and build webapi project on the fedora os .\nso why it can run successfully?. ",
    "nzain": "The key problem is the missing download link for arm32 aspnet+dotnet runtime. In\nhttps://github.com/dotnet/core-setup/issues/3122#issuecomment-401087300\n@natemcmaster clarified that the 64bit download link is actually 32bit and I verified this on real arm32 hardware. It would be nice, if there is an official dotnet+aspnet arm32 download link, so we can integrate this link in our buildroot workflow.. @natemcmaster Sorry for asking stupid questions! The PR is merged and the website looks different now... nevertheless I can't find the download link for\n dotnet runtime\n arm32\n* including ASP.Net runtime store\nSide note: it seems the ASP.Net runtime is hidden even deeper now.\nhttps://www.microsoft.com/net/download/dotnet-core/2.1\n. ",
    "Jaryllan": "Moved to https://github.com/dotnet/corefx/issues/30752. ",
    "PavelMekhnin": "@Petermarcu I updated from 2.0.6 to 2.1.1 and it broked. I'm sure it's bacouse of update.\nhow I send request before and its worked:\n```c#\nvar ub = new UriBuilder(managementUri)\n                {\n                    UserName = rabbitMqConfig.User,\n                    Password = rabbitMqConfig.Password\n                };\n            var client = new RestClient(ub.Uri);\n            try\n            {\n                if (HasHaModeAllPolicy(queue, client, rabbitMqConfig)\n                    || TryCreatePolicy(queue, client, rabbitMqConfig))\n                {\n                    return true;\n                }\n            }\n\nand methodc#\nprivate bool TryCreatePolicy(string queue, RestClient client, RabbitMqConfig config)\n        {\n            var createQueuePolicyRequest = new RestRequest\n            {\n                RequestFormat = DataFormat.Json,\n                Resource = $\"api/policies/%2f/ha-{queue}\",\n                JsonSerializer = new RestSharpNewtonsoftSerializer(),\n            };\n        var policy = _rmqHaClusterPolicyFactory.CreatePolicy(queue);\n        createQueuePolicyRequest.AddBody(policy);\n\n        var response = client.Put(createQueuePolicyRequest);\n        return response.IsSuccessful;\n    }\n\nhow I fix after update: Added to **createQueuePolicyRequest** \n`Credentials = new NetworkCredential(config.User, config.Password)`. @davidsh Linux\n@karelz yes, before it  worked with just uriBuilder and cridensionals\n UriBuilder(managementUri)\n                {\n                    UserName = rabbitMqConfig.User,\n                    Password = rabbitMqConfig.Password\n                };\n```. ",
    "JunTaoLuo": "This issue was moved to aspnet/SetupSharedFramework#10. Moved the issue again to https://github.com/aspnet/Home/issues/3286 since it's easier to discuss this in a public repo.. Can you share your .csproj? I suspect you are referencing Microsoft.AspNetCore.All with a version of 2.0.*. This is the only way the runtime is looking for runtime assets in the runtime store as listed in the aspnetcore-store manifests. Since you have the 2.1 runtime installed, you should update your metapackage reference so that your app runs on the 2.1 runtime (by changing the existing reference to <PackageReference Include=\"Microsoft.AspNetCore.App\" /> or <PackageReference Include=\"Microsoft.AspNetCore.All\" /> depending on which metapackage suits your needs). I'm not sure how runtime bitness affected your deployment but it should match the machine architecture.. That's strange, you don't have any references to Microsoft.AspNetCore.All with a version of 2.0.*. As far as I can tell, this project should be able to publish and run correctly assuming you have the 2.1 runtime on the target machine. The host should not try to load anything from the runtime store. Are you still seeing the same An assembly specified in the application dependencies manifest (THTOC.Code.WebApi.deps.json) was not found: error during deployment?. I'm trying this on a local VM and hit a separate issue. @leecow can you also try 18.04.1? \nWhen I try to install dotnet-hosting-2.0.9 I get an error:\nThe following packages have unmet dependencies:\n dotnet-hosting-2.0.9 : Depends: dotnet-runtime-2.0.9 but it is not going to be installed\nE: Unable to correct problems, you have held broken packages.\nUsing aptitude, I was able to get a more useful message:\nThe following NEW packages will be installed:\n  aspnetcore-store-2.0.0{a} aspnetcore-store-2.0.3{a} aspnetcore-store-2.0.5{a} \n  aspnetcore-store-2.0.6{a} aspnetcore-store-2.0.7{a} aspnetcore-store-2.0.8{a} \n  aspnetcore-store-2.0.9{a} dotnet-host{a} dotnet-hostfxr-2.0.9{a} dotnet-hosting-2.0.9 \n  dotnet-runtime-2.0.9{a} libcurl3{ab} liblttng-ust-ctl4{a} liblttng-ust0{a} liburcu6{a} \n0 packages upgraded, 15 newly installed, 0 to remove and 63 not upgraded.\nNeed to get 57.8 MB of archives. After unpacking 194 MB will be used.\nThe following packages have unmet dependencies:\n libcurl3 : Conflicts: libcurl4 but 7.58.0-2ubuntu3.2 is installed\n libcurl4 : Conflicts: libcurl3 but 7.58.0-2ubuntu2 is to be installed\nLooks like this may be related to https://github.com/dotnet/core-setup/issues/3791. Looks like out 2.0.x packages depend on libcurl3 and Ubuntu 18.04 comes with libcurl4 instead. I assume 2.1.x and later packages won't run into this issue since there is no libcurl dependency.\nHowever, given that this is a 2.0.x package which are EOL in October, is this something that we want to fix?. Why are we copying over the build output? What we should be doing here is to do a portable publish (FDD) and copying the published output to the deployment machine.. Ah, I see. I was under the impression you'd want this to work in 2.2 as well and I was thinking along those lines.. ",
    "jingeno": "LTS period for .NET Core 2.1 has not begun yet.. ",
    "alchermd": "https://github.com/dotnet/sdk/issues/2251#issuecomment-389951448 found this workaround. . Apparently, there's some issue with my exact timezone Asia/Manila. I changed it to a nearby timezone Asia/Singapore and it fixed the issue.. ",
    "pigwing": "@jkotas i have the same problem and other problem in raspberry pi\nhttps://github.com/AirleaderChina/Airleader-Open/blob/master/errorPho1.png\nhttps://github.com/AirleaderChina/Airleader-Open/blob/master/errorPho.png\nin libcoreclr.so some times will let my cpu 100%, in CorUnix::PROCRemoveThread\nand check cat /proc/id/status threads count is 32. ",
    "ipavlu": "Thanks. ",
    "enricoreich": "Related to your first problem:\nA few days ago I had the same problem and that turned out to be a problem with SDK v2.1.300.\nInstalling SDK version 2.1.301 fixed it for me.. ",
    "zinov": "It worked for me. ",
    "granthoff1107": "To clarify.  I\u2019m going to start to shy away from depending on httpcontextaccessor.  In my other dependencies, and start abstracting the pieces that I need, \ne.g my DbContext in the future will only depend on a new dependency which contains my claims, and I\u2019ll pass the user based dependency into my backgroundtaskqueue.\nHowever, this is not a viable option at all times. In my case it can be done, but it would be nice if there was an easy built in way  to replace the HttpContextAccessor so it can pass in a moq HttpContext with user claims etc\n. @davidfowl, I\u2019m aware of that now and am changing my architecture.  But it would be nice if there was a built in way to mock the httpcontext, not everyone will be aware of this when designing their application, and it could cause a large rewrite for systems bigger than mine.\nMaybe we can also update the documentation to mention, to not be dependent on httpcontext. ",
    "macman11": "cti. ",
    "manuelcardoso": "Well\u2026 I heard that there is a (internal) real world web application who manages customer support flow and reports of a well-known swedish group.\nASP.NET Core WebApp with WebApi also on a Ubuntu OS. ",
    "shmellyorc": "I am running dotnet core standard 2.1 on a ubuntu 18.10 server using an async tcp game server. its not \"asp.net\" but it has been running for months with over 25-50 ppl daily. no issues yet.\nproof (no personal data and no secret stuff here but yeah): \n\n. ",
    "agr": "Seeing the same in my project with xUnit when specifying runtime when building. Repro:\n```\n\ndotnet --version\n2.1.301\n```\n\nmkdir 211_210\ncd 211_210\nmkdir mvc\ncd mvc\ndotnet new mvc\ncd ..\nmkdir test\ncd test\ndotnet new xunit\ndotnet add reference ../mvc/mvc.csproj\ndotnet build -r any\nProduces the following output:\n```\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\nCopyright (C) Microsoft Corporation. All rights reserved.\nRestoring packages for C:\\Users\\agr\\Source\\Repos\\211_210\\test\\test.csproj...\n  Restoring packages for C:\\Users\\agr\\Source\\Repos\\211_210\\mvc\\mvc.csproj...\n  Restore completed in 46.55 ms for C:\\Users\\agr\\Source\\Repos\\211_210\\test\\test.csproj.\nC:\\Users\\agr\\Source\\Repos\\211_210\\test\\test.csproj : error NU1605: Detected package downgrade: Microsoft.NETCore.App from 2.1.1 to 2.1.0. Reference the package directly from the project to select a different version.\nC:\\Users\\agr\\Source\\Repos\\211_210\\test\\test.csproj : error NU1605:  test -> mvc -> Microsoft.NETCore.App (>= 2.1.1)\nC:\\Users\\agr\\Source\\Repos\\211_210\\test\\test.csproj : error NU1605:  test -> Microsoft.NETCore.App (>= 2.1.0)\n  Restore failed in 294.47 ms for C:\\Users\\agr\\Source\\Repos\\211_210\\test\\test.csproj.\n  Restore completed in 629.54 ms for C:\\Users\\agr\\Source\\Repos\\211_210\\mvc\\mvc.csproj.\nBuild FAILED.\nC:\\Users\\agr\\Source\\Repos\\211_210\\test\\test.csproj : error NU1605: Detected package downgrade: Microsoft.NETCore.App from 2.1.1 to 2.1.0. Reference the package directly from the project to select a different version.\nC:\\Users\\agr\\Source\\Repos\\211_210\\test\\test.csproj : error NU1605:  test -> mvc -> Microsoft.NETCore.App (>= 2.1.1)\nC:\\Users\\agr\\Source\\Repos\\211_210\\test\\test.csproj : error NU1605:  test -> Microsoft.NETCore.App (>= 2.1.0)\n    0 Warning(s)\n    1 Error(s)\nTime Elapsed 00:00:01.03\n```\nJust dotnet build seems to work, but if any runtime is specified it fails. I tried any, win, win-x64, linux-x64. Same happens both in Linux and Windows. It worked (and still works) fine in 2.1.300.. ",
    "replaysMike": "I too am frustrated by this issue.. ",
    "haydenhancock": "I am also experiencing this issue in VSTS. This is preventing our builds from completing and as others have said, is very frustrating.. I am also experiencing this issue in VSTS. This is preventing our builds from completing and as others have said, is very frustrating.. @karelz I've tried all the suggested fixes and nothing worked for me. What's interesting is that my build pipeline (with no code changes or build pipeline changes) was working without issue yesterday.. @karelz I've tried all the suggested fixes and nothing worked for me. What's interesting is that my build pipeline (with no code changes or build pipeline changes) was working without issue yesterday.. ",
    "omersiar": "Sorry to bother. Silly me\n\nThe 2.0.8 release only updated the ASP.NET Core Runtime. .NET Core Runtime downloads are still versioned as 2.0.7.. \n",
    "kenleese": "https://github.com/dotnet/corefx/issues/11897. ",
    "devkws": "I see that this is a duplicate, closing. ",
    "Scandal-UK": "On CentOS running yum update fails with the following error.\nError: Package: dotnet-runtime-2.1-2.1.2-1.x86_64 (packages-microsoft-com-prod)\n           Requires: dotnet-runtime-deps-2.1 >= 2.1.2\n           Installed: dotnet-runtime-deps-2.1-2.1.1-1.x86_64 (@packages-microsoft-com-prod)\n               dotnet-runtime-deps-2.1 = 2.1.1-1\n           Available: dotnet-runtime-deps-2.1-2.1.0-1.x86_64 (packages-microsoft-com-prod)\n               dotnet-runtime-deps-2.1 = 2.1.0-1\n You could try using --skip-broken to work around the problem\n You could try running: rpm -Va --nofiles --nodigest. ",
    "dncAdmin": "vs2017  new project shows wrong version of .net core 2.1.2\nAfter installing .net core SDK 2.1.302 with Runtime 2.1.2 ,\nVisual Studio 2017 15.7.5 -> new project -> asp.net core project still shows the version of 2.1.1 and 2.1.0 in the Nuget and SDK dependence.\nit should be 2.1.2\n\nPC:\nWin10. ",
    "mrbigtities": "CentOS Linux release 7.5.1804 (Core)\nyum install dotnet-sdk-2.1\nError: Package: dotnet-runtime-2.1-2.1.2-1.x86_64 (packages-microsoft-com-prod)\n       Requires: dotnet-runtime-deps-2.1 >= 2.1.2\n       Available: dotnet-runtime-deps-2.1-2.1.0-1.x86_64 (packages-microsoft-com-prod)\n           dotnet-runtime-deps-2.1 = 2.1.0-1\n       Available: dotnet-runtime-deps-2.1-2.1.1-1.x86_64 (packages-microsoft-com-prod)\n           dotnet-runtime-deps-2.1 = 2.1.1-1\n\n. ",
    "beylkhanovdamir": "@leecow why VS v.15.7.5 does not comprise the .net core sdk 2.1.x already on board? I went to the ms website to download the latest .net core sdk and only then my problem was gone. ",
    "mvanbaak": "This issue has been resolved.. ",
    "nhuthan": "I tried today and everything installed successful on CentOS 7.4\nI run yum -y install deltarpm unzip zlib gettext libunwind libicu libcurl-devel openssl-devel libicu-devel before install dotnet sdk.\n. Here is dotnet info:\n```\n.NET Core SDK (reflecting any global.json):\n Version:   2.1.302\n Commit:    9048955601\nRuntime Environment:\n OS Name:     centos\n OS Version:  7\n OS Platform: Linux\n RID:         centos.7-x64\n Base Path:   /usr/share/dotnet/sdk/2.1.302/\nHost (useful for support):\n  Version: 2.1.2\n  Commit:  811c3ce6c0\n.NET Core SDKs installed:\n  2.1.302 [/usr/share/dotnet/sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.All 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\nTo install additional .NET Core runtimes or SDKs:\n  https://aka.ms/dotnet-download\n``\nI runyum install dotnet-sdk-2.1`. ",
    "seamusic": "[root@Lennon-CentOS ~]# yum install dotnet-sdk-2.1\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\nResolving Dependencies\n--> Running transaction check\n---> Package dotnet-sdk-2.1.x86_64 0:2.1.403-1 will be installed\n--> Processing Dependency: dotnet-runtime-2.1 >= 2.1.5 for package: dotnet-sdk-2.1-2.1.403-1.x86_64\n--> Processing Dependency: aspnetcore-runtime-2.1 >= 2.1.5 for package: dotnet-sdk-2.1-2.1.403-1.x86_64\n--> Running transaction check\n---> Package aspnetcore-runtime-2.1.x86_64 0:2.1.6-1 will be installed\n--> Processing Dependency: dotnet-runtime-2.1 >= 2.1.6 for package: aspnetcore-runtime-2.1-2.1.6-1.x86_64\n---> Package dotnet-runtime-2.1.x86_64 0:2.1.5-1 will be installed\n--> Processing Dependency: dotnet-hostfxr-2.1 >= 2.1.5 for package: dotnet-runtime-2.1-2.1.5-1.x86_64\n--> Processing Dependency: dotnet-runtime-deps-2.1 >= 2.1.5 for package: dotnet-runtime-2.1-2.1.5-1.x86_64\n--> Running transaction check\n---> Package aspnetcore-runtime-2.1.x86_64 0:2.1.6-1 will be installed\n--> Processing Dependency: dotnet-runtime-2.1 >= 2.1.6 for package: aspnetcore-runtime-2.1-2.1.6-1.x86_64\n---> Package dotnet-hostfxr-2.1.x86_64 0:2.1.5-1 will be installed\n--> Processing Dependency: dotnet-host >= 2.1.5 for package: dotnet-hostfxr-2.1-2.1.5-1.x86_64\n---> Package dotnet-runtime-deps-2.1.x86_64 0:2.1.5-1 will be installed\n--> Running transaction check\n---> Package aspnetcore-runtime-2.1.x86_64 0:2.1.6-1 will be installed\n--> Processing Dependency: dotnet-runtime-2.1 >= 2.1.6 for package: aspnetcore-runtime-2.1-2.1.6-1.x86_64\n---> Package dotnet-host.x86_64 0:2.1.6-1 will be installed\n--> Finished Dependency Resolution\nError: Package: aspnetcore-runtime-2.1-2.1.6-1.x86_64 (packages-microsoft-com-prod)\n           Requires: dotnet-runtime-2.1 >= 2.1.6\n           Available: dotnet-runtime-2.1-2.1.0-1.x86_64 (packages-microsoft-com-prod)\n               dotnet-runtime-2.1 = 2.1.0-1\n           Available: dotnet-runtime-2.1-2.1.1-1.x86_64 (packages-microsoft-com-prod)\n               dotnet-runtime-2.1 = 2.1.1-1\n           Available: dotnet-runtime-2.1-2.1.2-1.x86_64 (packages-microsoft-com-prod)\n               dotnet-runtime-2.1 = 2.1.2-1\n           Available: dotnet-runtime-2.1-2.1.3-1.x86_64 (packages-microsoft-com-prod)\n               dotnet-runtime-2.1 = 2.1.3-1\n           Available: dotnet-runtime-2.1-2.1.4-1.x86_64 (packages-microsoft-com-prod)\n               dotnet-runtime-2.1 = 2.1.4-1\n           Installing: dotnet-runtime-2.1-2.1.5-1.x86_64 (packages-microsoft-com-prod)\n               dotnet-runtime-2.1 = 2.1.5-1\n You could try using --skip-broken to work around the problem\n You could try running: rpm -Va --nofiles --nodigest\nI get the same error. why?. ",
    "mantzouranisc": "Following the instructions here:\nhttps://www.microsoft.com/net/download/linux-package-manager/centos/runtime-current\nI ran:\nsudo rpm -Uvh https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm\nAnd then:\nsudo yum install aspnetcore-runtime-2.1.x86_64\nI get:\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirror.wiuwiu.de\n * epel: mirror.wiuwiu.de\n * extras: mirror.ratiokontakt.de\n * updates: mirror.checkdomain.de\nResolving Dependencies\n--> Running transaction check\n---> Package aspnetcore-runtime-2.1.x86_64 0:2.1.6-1 will be installed\n--> Processing Dependency: dotnet-runtime-2.1 >= 2.1.6 for package: aspnetcore-runtime-2.1-2.1.6-1.x86_64\n--> Finished Dependency Resolution\nError: Package: aspnetcore-runtime-2.1-2.1.6-1.x86_64 (packages-microsoft-com-prod)\n           Requires: dotnet-runtime-2.1 >= 2.1.6\n           Available: dotnet-runtime-2.1-2.1.0-1.x86_64 (packages-microsoft-com-prod)\n               dotnet-runtime-2.1 = 2.1.0-1\n           Available: dotnet-runtime-2.1-2.1.1-1.x86_64 (packages-microsoft-com-prod)\n               dotnet-runtime-2.1 = 2.1.1-1\n           Available: dotnet-runtime-2.1-2.1.2-1.x86_64 (packages-microsoft-com-prod)\n               dotnet-runtime-2.1 = 2.1.2-1\n           Available: dotnet-runtime-2.1-2.1.3-1.x86_64 (packages-microsoft-com-prod)\n               dotnet-runtime-2.1 = 2.1.3-1\n           Available: dotnet-runtime-2.1-2.1.4-1.x86_64 (packages-microsoft-com-prod)\n               dotnet-runtime-2.1 = 2.1.4-1\n           Available: dotnet-runtime-2.1-2.1.5-1.x86_64 (packages-microsoft-com-prod)\n               dotnet-runtime-2.1 = 2.1.5-1\n You could try using --skip-broken to work around the problem\n You could try running: rpm -Va --nofiles --nodigest\n. ",
    "Bambofy": "Still getting this error on Centos 6.10 (Final)\n`[root@vps x]# sudo yum install dotnet-sdk-2.1\nLoaded plugins: fastestmirror\nSetting up Install Process\nLoading mirror speeds from cached hostfile\n * base: mirror.hosting90.cz\n * epel: mirror.imt-systems.com\n * extras: mirror.hosting90.cz\n * nux-dextop: mirror.li.nux.ro\n * remi-php70: mirror.23media.de\n * remi-php72: mirror.23media.de\n * remi-safe: mirror.23media.de\n * updates: mirror.hosting90.cz\nResolving Dependencies\n--> Running transaction check\n---> Package dotnet-sdk-2.1.x86_64 0:2.1.500-1 will be installed\n--> Processing Dependency: dotnet-runtime-2.1 >= 2.1.6 for package: dotnet-sdk-2                        .1-2.1.500-1.x86_64\n--> Processing Dependency: aspnetcore-runtime-2.1 >= 2.1.6 for package: dotnet-s                        dk-2.1-2.1.500-1.x86_64\n--> Running transaction check\n---> Package aspnetcore-runtime-2.1.x86_64 0:2.1.6-1 will be installed\n---> Package dotnet-runtime-2.1.x86_64 0:2.1.6-1 will be installed\n--> Processing Dependency: dotnet-runtime-deps-2.1 >= 2.1.6 for package: dotnet-                        runtime-2.1-2.1.6-1.x86_64\n--> Processing Dependency: dotnet-hostfxr-2.1 >= 2.1.6 for package: dotnet-runti                        me-2.1-2.1.6-1.x86_64\n--> Running transaction check\n---> Package dotnet-hostfxr-2.1.x86_64 0:2.1.6-1 will be installed\n--> Processing Dependency: dotnet-host >= 2.1.6 for package: dotnet-hostfxr-2.1-                        2.1.6-1.x86_64\n---> Package dotnet-runtime-deps-2.1.x86_64 0:2.1.6-1 will be installed\n--> Processing Dependency: openssl-libs for package: dotnet-runtime-deps-2.1-2.1                        .6-1.x86_64\n--> Running transaction check\n---> Package dotnet-host.x86_64 0:2.1.6-1 will be installed\n---> Package dotnet-runtime-deps-2.1.x86_64 0:2.1.6-1 will be installed\n--> Processing Dependency: openssl-libs for package: dotnet-runtime-deps-2.1-2.1                        .6-1.x86_64\n--> Finished Dependency Resolution\nError: Package: dotnet-runtime-deps-2.1-2.1.6-1.x86_64 (packages-microsoft-com-p                        rod)\n           Requires: openssl-libs\n You could try using --skip-broken to work around the problem\n You could try running: rpm -Va --nofiles --nodigest\n[root@vps x]#. ",
    "kdubau": "@leecow thanks for the information, I've opened a issues for the vsts-tasks team to track the upcoming change: https://github.com/Microsoft/vsts-tasks/issues/7754. ",
    "gitorrin": "Sorry, apparently I haven't added enough details. Thank you for reacting so fast. \n\nOpen Command Prompt\nrun dotnet new classlib\nEdit project file to have GeneratePackageOnBuild set to true & target net core 2.0\n\nProject file should look like this:\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>netcoreapp2.0</TargetFramework>\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\n  </PropertyGroup>\n</Project>\n\n(optional)\nAdd global.json to project folder with content \n{\n  \"sdk\": {\n    \"version\": \"2.1.300\"\n  }  \n}\nrun dotnet publish\n\nFails with error \n\nC:\\Program C:\\Program Files\\dotnet\\sdk\\2.1.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(168,5): error MSB3030: Could not copy the file \"obj\\Debug\\netstandard2.0\\test1.dll\" because it was not found. [C:\\Users\\\\Documents\\Visual Studio 2017\\Projects\\test1\\test1.csproj]\n\nPS: modifying the global.json file to \n{\n  \"sdk\": {\n    \"version\": \"2.1.101\"\n  }  \n}\nand running dotnet publish succeeds . Thanks for looking into this, @dasMulli.. ",
    "softlion": "Yes following the instructions leads to Net core 2.0 install only. 16.04. Thank you for your time. I see dotnet-sdk-2.1/xenial 2.1.302-1 amd64 in your listing. I'm asking my team expert.\n. ",
    "jjxtra": "Just throwing my hat in the ring for self-contained deployment. Not sure if this is an option for you, or if your application will get deployed and updated regularly, but it could work. Now if you have dozens or hundreds of .NET core applications on each server, then this will not be size friendly until the corert linker gets fully finished and working.. As far as I am aware it will use highest compatible version unless you\nspecify an explicit version in the csproj.\n-- Jeff\nOn Fri, Jul 13, 2018 at 8:08 AM Jcouls29 notifications@github.com wrote:\n\n@jjxtra https://github.com/jjxtra That's always an option. And I've\ntossed that around. Obviously, the size issue is concerning, but at least\nwe can patch things. We'd have to set up a better deployment story on our\nend but it is possible.\nMaybe I'm missing something about .NET Core. I know that 1.0, 1.1 are\ncompatible and 2.0+ is. But let's say you have 2.0.0 installed with an\napplication referencing it, if you install 2.0.1, will the application use\nit? Or does it stay with 2.0.0?\nAs a design decision, I thought this was the point, unlike the framework.\nIt may be a moot point if an application sits with a version regardless of\nwhat is installed .\nP.S. I am aware that certain version changes don't move (like 1.1 to\n2.0). Those have to be specifically set to use.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/1781#issuecomment-404844096, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABNoGNE-G3o2J_yRDCURo0eR4WyjcOJQks5uGKn1gaJpZM4VNUIk\n.\n. Visual Studio. Same published binary works fine on Ubuntu Server.\n\n. Yes. cat /etc/*-release:\n```\nNAME=\"Red Hat Enterprise Linux Server\"\nVERSION=\"7.5 (Maipo)\"\nID=\"rhel\"\nID_LIKE=\"fedora\"\nVARIANT=\"Server\"\nVARIANT_ID=\"server\"\nVERSION_ID=\"7.5\"\nPRETTY_NAME=\"Red Hat Enterprise Linux\"\nANSI_COLOR=\"0;31\"\nCPE_NAME=\"cpe:/o:redhat:enterprise_linux:7.5:GA:server\"\nHOME_URL=\"https://www.redhat.com/\"\nBUG_REPORT_URL=\"https://bugzilla.redhat.com/\"\nREDHAT_BUGZILLA_PRODUCT=\"Red Hat Enterprise Linux 7\"\nREDHAT_BUGZILLA_PRODUCT_VERSION=7.5\nREDHAT_SUPPORT_PRODUCT=\"Red Hat Enterprise Linux\"\nREDHAT_SUPPORT_PRODUCT_VERSION=\"7.5\"\nRed Hat Enterprise Linux Server release 7.5 (Maipo)\nRed Hat Enterprise Linux Server release 7.5 (Maipo)\n. I don't know if it makes a difference, but I am running in VirtualBox on a threadripper 1950x CPU. Perhaps it is new enough to not quite be supported?. It's also worth noting that I can run /opt/rh/rh-dotnet21/root/usr/bin/dotnet MyApp.dll and it works fine..chmod +x``` fixed it! That's awesome. Wish the error message was more clear, but that is not a dotnet issue. I am not an expert Linux user apparently either. Thanks so much for the suggestion.. ",
    "Jcouls29": "@jjxtra That's always an option. And I've tossed that around. Obviously, the size issue is concerning, but at least we can patch things. We'd have to set up a better deployment story on our end but it is possible. \nMaybe I'm missing something about .NET Core. I know that 1.0, 1.1 are compatible and 2.0+ is. But let's say you have 2.0.0 installed with an application referencing it, if you install 2.0.1, will the application use it? Or does it stay with 2.0.0?\nAs a design decision, I thought this was the point, unlike the framework. It may be a moot point if an application sits with a version regardless of what is installed .\nP.S. I am aware that certain version changes don't move (like 1.1 to 2.0). Those have to be specifically set to use.. @dleeapho I have personally thought about docker (and did some basic prototypes for some of our software), but that's a hard sell to a small enterprise IT group. Too much of a learning curve to do it any time soon. But I will start to introduce it to get feedback. Getting them to consider .NET Core from .NET Framework 4.5 has been a hard sell up to this point...\n@leecow This could work, at least from a monitoring standpoint. Will releases.json be consistently available with updates? (Meaning it doesn't move or change names over time?) If so, this might be the best option I have right now.\nThanks for the suggestions!. @leecow I have been trying to implement a custom solution to patch automatically for our IT group. However, I wanted to ask a simple question about the releases.json (actually releases-index.json). The url's presented in a number of these json files point to other files in the github repo. When these are downloaded, we will get the github html (which is expected). However, it means that using the json files in the raw is a bit difficult because they don't point to other raw resources.\nDo you have any suggestions to tackle this? I'm looking into how to do this through github now, but just wanted to know if this is the intended way these should be used.. @leecow Perfect. I'll use this location instead. I appreciate it.. ",
    "saurabhlogward": "@davidfowl\nSo if someone want to work with dotnet core with grpc framework, then they have to cook their own project structure(like the one in the link)? \nAny suggestions ? \nAny timelines for the points you mentioned about http2 support and grpc as a feature to be available for public use? . ",
    "veikkoeeva": "In case someone else ends up here, a relevant thread seem to be https://github.com/grpc/grpc/issues/15139 .. ",
    "SteveL-MSFT": "@danmosemsft thanks for following up on this, just tried a link and worked.  Thanks.. ",
    "VitaliiNikitchyn": "Thanks for your response, @Eilon\nOne more question:\nYou told that \"There is no direct T4 support in runtime in ASP.NET Core MVC\"\nIs there another way to include T4 in this kind of ptoject ?\nThe probleme is that I have a code generation module written in T4. The module was created as a part of .NET Framework MVC project. Now I would like to port my project from .NET Framework to .Net Core and I want to use my old T4 module in my ASP.NET Core MVC app. \n. ",
    "fontebasso": "Hello @JaneConan, the error you reported is too broad ...\nIt could tell you what part of your code this error happens in, say a little of the context of what you are doing. ",
    "DwiYI": "hi i get same problem, how to solve this issue ?\nare you copying ClientApp source file or  after build ?. i have solved the issue. I am using kestrel to serve content from asp .net core. \nmy issue is write wrong path (working directory) in kestrel service.\n[Service]\nWorkingDirectory=/var/www/helloapp\nExecStart=/usr/bin/dotnet /var/www/helloapp/helloapp.dll\n. @ColinM9991 \nmy index.html is inside dist folder. and make sure spa.Options.SourcePath = \"ClientApp\"\nthis is my folder structure (inside /var/www/helloapp)\n-ClientApp/dist/index.html\n-ClientApp/dist/main.js\n-wwwroot/favicon.ico\n-helloapp.dll\n-appsettings.json\n-etc. ",
    "abdu292": "@AhmedMKamal Hi, how did you solve this? I have the same issue after publishing the app on to the server.. Thanks a lot @AhmedMKamal  & @DwiYI . ",
    "ColinM9991": "@DwiYI\nI am also using systemd to host my ASP.NET Core + Angular app on Linux and have this issue.\nCan you please confirm whether your index.html lives in the specified working directory? I'm quite unsure as to what's causing this issue as everything is configured as it should and the application does work just fine in production, but my logs are riddled with this error.. @DwiYI\nThank you for confirming your structure.\nThe source path in the Startup.cs and angular.json files is correct for me, the application builds and runs successfully but my logs are plagued with this error regardless, I'm wondering if it's a Linux file path issue as I host on Ubuntu 18.04 with nginx as a reverse proxy as described here https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-2.2#configure-a-reverse-proxy-server. ",
    "HalidCisse": "Solved it by adding :\nnew WebHostBuilder()\n                .UseContentRoot(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)). ",
    "rquackenbush": "This appears to be related to: https://github.com/dotnet/coreclr/issues/18486\nAnd debugging is hampered by: https://github.com/dotnet/coreclr/issues/18889. How do I determine if https://github.com/dotnet/coreclr/pull/19606 is included in this preview?. ",
    "RenshuozZ": "@natemcmaster    i installed 2.1.302 sdk and installed 2.1 runtime it is conflict , and dotnet command can't run  , when i uninstall 2.1 runtime(x84) and retain 2.1 runtime(x64), it run normally. \n@JunTaoLuo \n. \n@JunTaoLuo   it not only delpoyment aslo error during build  when i install runtime 2.1.2 (i hava  installed sdk 2.1.302 ) , i try to uninstall runtime(x86) and  it work  and deployment success. my server  system is windows server 2008 (x86) @leecow \n. @rakeshsinghranchi  @leecow   thank you  for the answer  i will to reinstall my server  system  and close  the issue . ",
    "jfborie": "Thank you. ",
    "marek-safar": "Could you provide more information about what tests you are actually running and how did you compile them?. @mrward is there anything special in VS4M which could break this?. This does not look like an issue on our side. The user code test failed with a valid exception because it called System.Linq.Enumerable.ToList[TSource](IEnumerable1 source)withnull`.\nWhatever is at /Users/fskroes/dev/work/xamarin_ymonitor_shared/ymonitor.Tests/ViewModel/CubesViewModelTest.cs needs some adjustement. This is known reported issue which has been fixed in the upcoming version (https://github.com/xamarin/xamarin-android/issues/2466)\nFor workarounds with existing versions please check https://github.com/dotnet/reactive/issues/803. ",
    "fskroes": "Hi Marek-safar,\nI will provide you with some more information. I'm running test for Xamarin with ReactiveUI NUGet package. For example I have the following test. \n```c#\n[TestCase(null, null)]\n[TestCase(\"\", \"\")]\n[TestCase(\"testUser\", \"testPassword\")]\npublic void CanSignInAndAuthenticate(string username, string password)\n{\n     _viewModel.Username = username;\n     _viewModel.Password = password;\n var logger = new TestLogger();\n var result = new UserAuthenticationDto();\n\n _viewModel.SignInCommand.Execute().Subscribe(x => result = x);\n Assert.IsNotNull(result.AccessToken);\n\n}\n```\nMy ViewModel could look like this:\n```c#\npublic class SignInViewModelTest : ReactiveObject\n{\n    public ReactiveCommand SignInCommand { get; set; }\nprivate string _username;\npublic string Username\n{\n    get => _username;\n    set => this.RaiseAndSetIfChanged(ref _username, value);\n}\n\nprivate string _password;\npublic string Password\n{\n    get => _password;\n    set => this.RaiseAndSetIfChanged(ref _password, value);\n}\n\npublic SignInViewModelTest()\n{   \n    var canExecute = \n        this.WhenAnyValue(vm => vm.Username, x => !string.IsNullOrWhiteSpace(x)).DistinctUntilChanged()\n            .CombineLatest(\n                this.WhenAnyValue(x => x.Password, x => !string.IsNullOrWhiteSpace(x)).DistinctUntilChanged(),\n\n//                        this.WhenAnyValue(x => x.Password, x => x.Length > 0).DistinctUntilChanged(),\n                    (username, password) => !username && password)\n            .DistinctUntilChanged();\n    SignInCommand = ReactiveCommand.Create(() => executeSignIn(), canExecute);\n}\n\nprivate UserAuthenticationDto executeSignIn()\n{\n    AuthClient authClient = new AuthClient();\n    var result = authClient.AuthenticateUser(Username.Trim(), Password.Trim());\n    System.Diagnostics.Debug.WriteLine($\"RESULT : {result}\");\n\n    return result;\n}\n\n}\n```\nI'm running the test in Jetbrains Rider 2018.1.3 version.\nWhen running this test, I will be getting the error that is displayed above. \nEDIT: Additional info:\nThe crashes happens most of the time when I get the following error from my unit test. See the stacktrace below.\n```\nymonitor.Tests.CubeTest.DoesOnlyReceiveCubesWithACubeInIt(\"q\")\nUnable to read beyond the end of the stream. at System.IO.BinaryReader.ReadByte() at System.IO.BinaryReader.Read7BitEncodedInt() at System.IO.BinaryReader.ReadString() at Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.LengthPrefixCommunicationChannel.NotifyDataAvailable() at Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TcpClientExtensions.MessageLoopAsync(TcpClient client, ICommunicationChannel channel, Action`1 errorHandler, CancellationToken cancellationToken) Source: System.Private.CoreLib HResult: -2147024858\n--- EXCEPTION #1/1 [LoggerException]\nMessage = \u201c\n  Unable to read beyond the end of the stream.\n     at System.IO.BinaryReader.ReadByte()\n     at System.IO.BinaryReader.Read7BitEncodedInt()\n     at System.IO.BinaryReader.ReadString()\n     at Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.LengthPrefixCommunicationChannel.NotifyDataAvailable()\n     at Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TcpClientExtensions.MessageLoopAsync(TcpClient client, ICommunicationChannel channel, Action1 errorHandler, CancellationToken cancellationToken)\n  Source: System.Private.CoreLib\n  HResult: -2147024858\n\u201d\nExceptionPath = Root\nClassName = JetBrains.Util.LoggerException\nHResult = COR_E_APPLICATION=80131600\nStackTraceString = \u201c\n  at JetBrains.Util.ILoggerEx.LogMessage (JetBrains.Util.ILogger this, JetBrains.Util.LoggingLevel level, System.String message) [0x00000] in <1cb48dd9893945e5aab4022b05136455>:0 \n    at JetBrains.Util.ILoggerEx.Error (JetBrains.Util.ILogger this, System.String message) [0x00000] in <1cb48dd9893945e5aab4022b05136455>:0 \n    at JetBrains.ReSharper.UnitTestFramework.DotNetCore.DotNetVsTest.DotNetVsTestExecution.OnRunComplete (JetBrains.ReSharper.UnitTestFramework.DotNetCore.DotNetVsTest.v1.Payloads.ExecutionCompletePayload payload) [0x00000] in <e74a6bd247254eff986a8f7b2fccf41f>:0 \n    at Appccelerate.StateMachine.Machine.ActionHolders.ArgumentActionHolder1[T].Execute (System.Object argument) [0x00000] in <76851bbdf5364a5191cf8ebee46441e9>:0 \n    at Appccelerate.StateMachine.Machine.Transitions.Transition2[TState,TEvent].PerformActions (Appccelerate.StateMachine.Machine.ITransitionContext2[TState,TEvent] context) [0x00000] in <76851bbdf5364a5191cf8ebee46441e9>:0 \n    at Appccelerate.StateMachine.Machine.Transitions.Transition2[TState,TEvent].Fire (Appccelerate.StateMachine.Machine.IState2[TState,TEvent] source, Appccelerate.StateMachine.Machine.IState2[TState,TEvent] target, Appccelerate.StateMachine.Machine.ITransitionContext2[TState,TEvent] context) [0x00000] in <76851bbdf5364a5191cf8ebee46441e9>:0 \n    at Appccelerate.StateMachine.Machine.Transitions.Transition2[TState,TEvent].Fire (Appccelerate.StateMachine.Machine.IState2[TState,TEvent] source, Appccelerate.StateMachine.Machine.IState2[TState,TEvent] target, Appccelerate.StateMachine.Machine.ITransitionContext2[TState,TEvent] context) [0x00000] in <76851bbdf5364a5191cf8ebee46441e9>:0 \n    at Appccelerate.StateMachine.Machine.Transitions.Transition2[TState,TEvent].Fire (Appccelerate.StateMachine.Machine.IState2[TState,TEvent] source, Appccelerate.StateMachine.Machine.IState2[TState,TEvent] target, Appccelerate.StateMachine.Machine.ITransitionContext2[TState,TEvent] context) [0x00000] in <76851bbdf5364a5191cf8ebee46441e9>:0 \n    at Appccelerate.StateMachine.Machine.Transitions.Transition2[TState,TEvent].Fire (Appccelerate.StateMachine.Machine.ITransitionContext2[TState,TEvent] context) [0x00000] in <76851bbdf5364a5191cf8ebee46441e9>:0 \n    at Appccelerate.StateMachine.Machine.States.State2[TState,TEvent].Fire (Appccelerate.StateMachine.Machine.ITransitionContext2[TState,TEvent] context) [0x00000] in <76851bbdf5364a5191cf8ebee46441e9>:0 \n    at Appccelerate.StateMachine.Machine.StateMachine2[TState,TEvent].Fire (TEvent eventId, System.Object eventArgument) [0x00000] in <76851bbdf5364a5191cf8ebee46441e9>:0 \n    at Appccelerate.StateMachine.ActiveStateMachine2[TState,TEvent].ProcessEventQueue (System.Threading.CancellationToken cancellationToken) [0x00000] in <76851bbdf5364a5191cf8ebee46441e9>:0 \n    at Appccelerate.StateMachine.ActiveStateMachine`2[TState,TEvent].b__32_0 () [0x00000] in <76851bbdf5364a5191cf8ebee46441e9>:0 \n    at System.Threading.Tasks.Task.InnerInvoke () [0x00000] in <4343323a00204b0b9f5e7ca3dfd716be>:0 \n    at System.Threading.Tasks.Task.Execute () [0x00000] in <4343323a00204b0b9f5e7ca3dfd716be>:0 \n    at System.Threading.Tasks.Task.ExecutionContextCallback (System.Object obj) [0x00000] in <4343323a00204b0b9f5e7ca3dfd716be>:0 \n    at System.Threading.ExecutionContext.RunInternal (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) [0x00000] in <4343323a00204b0b9f5e7ca3dfd716be>:0 \n    at System.Threading.ExecutionContext.Run (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) [0x00000] in <4343323a00204b0b9f5e7ca3dfd716be>:0 \n    at System.Threading.Tasks.Task.ExecuteWithThreadLocal (System.Threading.Tasks.Task& currentTaskSlot) [0x00000] in <4343323a00204b0b9f5e7ca3dfd716be>:0 \n    at System.Threading.Tasks.Task.ExecuteEntry (System.Boolean bPreventDoubleExecution) [0x00000] in <4343323a00204b0b9f5e7ca3dfd716be>:0 \n    at System.Threading.Tasks.ThreadPoolTaskScheduler.LongRunningThreadWork (System.Object obj) [0x00000] in <4343323a00204b0b9f5e7ca3dfd716be>:0 \n    at System.Threading.ThreadHelper.ThreadStart_Context (System.Object state) [0x00000] in <4343323a00204b0b9f5e7ca3dfd716be>:0 \n    at System.Threading.ExecutionContext.RunInternal (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) [0x00000] in <4343323a00204b0b9f5e7ca3dfd716be>:0 \n    at System.Threading.ExecutionContext.Run (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) [0x00000] in <4343323a00204b0b9f5e7ca3dfd716be>:0 \n    at System.Threading.ExecutionContext.Run (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) [0x00000] in <4343323a00204b0b9f5e7ca3dfd716be>:0 \n    at System.Threading.ThreadHelper.ThreadStart (System.Object obj) [0x00000] in <4343323a00204b0b9f5e7ca3dfd716be>:0\n\u201d\nLast launch log file: /Users/fskroes/Library/Logs/Rider2018.1/UnitTestLogs/7096167c-b123-473c-a0a7-489e09ccd54f___2018-07-28-13-20-20-623.log\n```. @mrward Yes. The same will happen. With also the same output.\nI have pasted the track trace down here coming from the terminal.\n``\nStarting test execution, please wait...\nThe active test run was aborted. Reason: Unhandled Exception: ReactiveUI.UnhandledErrorException: An object implementing IHandleObservableErrors (often a ReactiveCommand or Observab\nleAsPropertyHelper) has errored, thereby breaking its observable pipeline. To prevent this, ensure the pipeline does not error, or Subscribe to the ThrownExceptions property of the\nobject in question to handle the erroneous case. ---> System.ArgumentNullException: Value cannot be null.\nParameter name: source\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable1 source)\n   at ymonitor.Tests.CubesViewModelTest.ExecuteRetrieveCubes(String searchQuery) in /Users/fskroes/dev/work/xamarin_ymonitor_shared/ymonitor.Tests/ViewModel/CubesViewModelTest.cs:li\nne 69\n   at ymonitor.Tests.CubesViewModelTest.<.ctor>b__16_3(String query) in /Users/fskroes/dev/work/xamarin_ymonitor_shared/ymonitor.Tests/ViewModel/CubesViewModelTest.cs:line 43\n   at ReactiveUI.ReactiveCommand.<>c__DisplayClass3_12.<Create>b__1(IObserver1 observer)\n   at System.Reactive.AnonymousObservable1.SubscribeCore(IObserver1 observer)\n   at System.Reactive.ObservableBase1.Subscribe(IObserver1 observer)\n   --- End of inner exception stack trace ---\n   at ReactiveUI.RxApp.<>c__DisplayClass0_0.<.cctor>b__2()\n   at System.Reactive.Concurrency.Scheduler.Invoke(IScheduler scheduler, Action action)\n   at System.Reactive.Concurrency.DefaultScheduler.<>c__DisplayClass5_0`1.b__0(Object _)\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\nTest Run Aborted.\n```. ",
    "gronlund013": "Actually posted this yesterday but my sample didnt use .net calls, now fixed sample and re-opened. ",
    "leandro-fernandez": "The weird part is that running dotnet publish without -r (i.e., to output a dll) doesn't cause any issues.\nHere's the Rubicon.ReverseProxy.Tests.Common.csproj.\n```xml\n\n\nSAK\nSAK\nSAK\nSAK\n\n\nnetcoreapp2.1\nwin10-x64\n\n\nfull\ntrue\n$(NoWarn);NU1605\n\n\n\n\n\n\n\n\n\n``. By the way, I added the$(NoWarn);NU1605as a workaround for this issue. If I remove if, I get the error messages. But it doesn't look like a good idea to simply suppress these errors.. I have. Doesn't make a difference with regards to theNU1605 : Detected package downgradeerror.\nI left it as2.0.2in the end because the latest version ofMicrosoft.AspNetCore.TestHostchanged its behavior somehow and it broke our tests.. I have. Doesn't make a difference with regards to theNU1605 : Detected package downgradeerror.\nI left it as2.0.2in the end because the latest version ofMicrosoft.AspNetCore.TestHost` changed its behavior somehow and it broke our tests.. ",
    "jkruer01": "I have the same issue.  Builds locally fine, but throws same error as above for my test project on the build server.. I have the same issue.  Builds locally fine, but throws same error as above for my test project on the build server.. Adding <OutputType>Exe</OutputType> worked for me.. Adding <OutputType>Exe</OutputType> worked for me.. ",
    "duncanawoods": "Adding just <OutputType>Exe</OutputType> got over the downgrade error but publish then failed on:\n\nNETSDK1061: The project was restored using Microsoft.NETCore.App version 2.1.2, but with current settings, version 2.1.0 would be used instead\n\nAdding <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch> fixes it fully.. ",
    "WhitWaldo": "My unit test project showed up as running 2.1.0 where all the other projects in my solution were running 2.1.2 and I got the same error.\nAdding <PropertyGroup><TargetLatestRuntimePatch>true</TargetLatestRuntimePatch></PropertyGroup> solved the issue for me as well.. ",
    "ramoneeza": "Change .csproj doesn't work.\nNuget problems are persistent with any .net core 2.1 project I start.\nWhen I use \"Nuget Console\" with \"Update-Package -reinstall\", then Project name is cleared and it displays \"'default' project not found\" error. :-(\nMy visual studio has several Nuget related errors and repair/reinstall doesn't fix anything.\n. ",
    "mateti": "I'm getting this error on 18.04.1:\nngadmin@pocvm4:/tmp$ sudo dpkg -i packages-microsoft-prod.deb\n[sudo] password for ngadmin:\n(Reading database ... 208777 files and directories currently installed.)\nPreparing to unpack packages-microsoft-prod.deb ...\nUnpacking packages-microsoft-prod (1.0-ubuntu18.04.1) over (1.0-ubuntu18.04.1) ...\nSetting up packages-microsoft-prod (1.0-ubuntu18.04.1) ...\nngadmin@pocvm4:/tmp$ sudo apt-get install apt-transport-https\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\napt-transport-https is already the newest version (1.6.3).\n0 upgraded, 0 newly installed, 0 to remove and 3 not upgraded.\nngadmin@pocvm4:/tmp$ sudo apt-get install apt-transport-https\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\napt-transport-https is already the newest version (1.6.3).\n0 upgraded, 0 newly installed, 0 to remove and 3 not upgraded.\nngadmin@pocvm4:/tmp$ sudo apt-get update\nHit:1 http://us.archive.ubuntu.com/ubuntu bionic InRelease\nHit:2 http://us.archive.ubuntu.com/ubuntu bionic-updates InRelease\nHit:3 http://us.archive.ubuntu.com/ubuntu bionic-backports InRelease\nHit:4 http://security.ubuntu.com/ubuntu bionic-security InRelease\nHit:5 http://ppa.launchpad.net/nginx/stable/ubuntu bionic InRelease\nReading package lists... Done\nngadmin@pocvm4:/tmp$ sudo apt-get update\nHit:1 http://us.archive.ubuntu.com/ubuntu bionic InRelease\nHit:2 http://us.archive.ubuntu.com/ubuntu bionic-updates InRelease\nHit:3 http://us.archive.ubuntu.com/ubuntu bionic-backports InRelease\nHit:4 http://ppa.launchpad.net/nginx/stable/ubuntu bionic InRelease\nHit:5 http://security.ubuntu.com/ubuntu bionic-security InRelease\nReading package lists... Done\nngadmin@pocvm4:/tmp$ sudo apt-get install aspnetcore-runtime-2.1\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nE: Unable to locate package aspnetcore-runtime-2.1\nE: Couldn't find any package by glob 'aspnetcore-runtime-2.1'\nE: Couldn't find any package by regex 'aspnetcore-runtime-2.1'. ",
    "JerryBian": "@leecow thanks for you reply, but it seems something is still wrong.\n```\njerry@ubuntu-server-0:~$ apt search dotnet | grep installed\nWARNING: apt does not have a stable CLI interface. Use with caution in scripts.\njerry@ubuntu-server-0:~$ cat /etc/apt/sources.list.d/microsoft-prod.list\ndeb [arch=amd64] https://packages.microsoft.com/ubuntu/18.04/prod bionic main\njerry@ubuntu-server-0:~$ sudo apt install dotnet-sdk-2.1\n[sudo] password for jerry:\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nSome packages could not be installed. This may mean that you have\nrequested an impossible situation or if you are using the unstable\ndistribution that some required packages have not yet been created\nor been moved out of Incoming.\nThe following information may help to resolve the situation:\nThe following packages have unmet dependencies:\n dotnet-sdk-2.1 : Depends: dotnet-runtime-2.1 (>= 2.1.2) but it is not going to be installed\n                  Depends: aspnetcore-runtime-2.1 (>= 2.1.2) but it is not going to be installed\nE: Unable to correct problems, you have held broken packages.\n```\nIt should not has any previous version installed, since I downloaded latest version of Ubuntu from their portal and then followed your tutorial installing dotnet SDK then, nothing else did.\nDo you need anything I check for you besides above?. @rakeshsinghranchi please see following:\n``` sh\njerry@ubuntu-server-0:~$ sudo apt install dotnet-runtime-deps-2.1\n[sudo] password for jerry:\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nSome packages could not be installed. This may mean that you have\nrequested an impossible situation or if you are using the unstable\ndistribution that some required packages have not yet been created\nor been moved out of Incoming.\nThe following information may help to resolve the situation:\nThe following packages have unmet dependencies:\n dotnet-runtime-deps-2.1 : Depends: liblttng-ust0 but it is not installable\nE: Unable to correct problems, you have held broken packages.\njerry@ubuntu-server-0:~$ sudo apt install dontnet-runtime-2.1\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nE: Unable to locate package dontnet-runtime-2.1\nE: Couldn't find any package by glob 'dontnet-runtime-2.1'\nE: Couldn't find any package by regex 'dontnet-runtime-2.1'\n. @leecowbash\njerry@ubuntu-server-0:~$ apt search liblttng-ust0\nSorting... Done\nFull Text Search... Done\n@rakeshsinghranchibash\njerry@ubuntu-server-0:~$ apt-cache policy dotnet-runtime-deps-2.1\ndotnet-runtime-deps-2.1:\n  Installed: (none)\n  Candidate: 2.1.2-1\n  Version table:\n     2.1.2-1 500\n        500 https://packages.microsoft.com/ubuntu/18.04/prod bionic/main amd64 Packages\n     2.1.1-1 500\n        500 https://packages.microsoft.com/ubuntu/18.04/prod bionic/main amd64 Packages\n     2.1.0-1 500\n        500 https://packages.microsoft.com/ubuntu/18.04/prod bionic/main amd64 Packages\njerry@ubuntu-server-0:~$ apt-cache policy dotnet-runtime-2.1\ndotnet-runtime-2.1:\n  Installed: (none)\n  Candidate: 2.1.2-1\n  Version table:\n     2.1.2-1 500\n        500 https://packages.microsoft.com/ubuntu/18.04/prod bionic/main amd64 Packages\n     2.1.1-1 500\n        500 https://packages.microsoft.com/ubuntu/18.04/prod bionic/main amd64 Packages\n     2.1.0-1 500\n        500 https://packages.microsoft.com/ubuntu/18.04/prod bionic/main amd64 Packages\n``\nP.S. my Ubuntu is server version, instead of desktop(GUI), though I couldn't see what's difference might be.. Thanks very much, after I enableduniverserepository everything is good.. @leecow Actually no, I just tried reinstall Ubuntu Server 18.04.1(_ubuntu-18.04.1-live-server-amd64 .iso from [portal](https://www.ubuntu.com/download/server)_) and I didn't find any step allow me to setup repository or something like that during the installation. After installed successfully, I checked that APT source list, anduniverse` is not there just like before.\n@joshfree Exactly, I executed that command before installing dotnet SDK. . ",
    "alokraj68": "Still having same issue.. ",
    "dbegg35": "I'm having the same issue when trying to update to the current version from dotnet 2.1.302 on Ubuntu 18.04.1.  I have \"universe\" repository added.  I tried installing dotnet-runtime-deps-2.1 with the following result: \n\nFrom what I can find, libicu55 has been removed from 18.04 and moved to libicu60. > \n\n@thedon-chris : we are discussing this in\ndotnet/core-setup#4724 (comment)\nI think you should follow this.\n\nThanks for the information in that thread, it helped to resolve my issue.  The issue appears to have happened when I upgrade from 16.04 to 18.04.  My dotnet core package version was still pointing at Xenial instead of Bionic.  I tried completely removing the dotnet core Xenial package and installing the Bionic version but it did not work. I ended up manually editing my /etc/apt/sources.list.d/msprod.list to point at bionic which resolved the issue.  . ",
    "armand1m": "I manually downloaded libicu60 from this url https://packages.ubuntu.com/bionic/amd64/libicu60/download\nInstalled it with dpkg -i libicu60_60etcetc.deb\nthen ran sudo apt install dotnet-sdk-2.1 and it worked.. ",
    "SYNTAXDZ": "\n@JerryBian , can you please try installing dotnet-runtime-deps-2.1 and dotnet-runtime-2.1 package separately and share the log here?\nthat worked for me, thanks\n. \n",
    "jerryno6": "thanbks @SYNTAXDZ , follow your suggestion, it said that \n\ndotnet-runtime-deps-2.1 : Depends: libicu55 but it is not installable\n\nafter that, I installed libicu55, \nsudo add-apt-repository \"deb http://security.ubuntu.com/ubuntu xenial-security main\"\nsudo apt-get update\nsudo apt-get install libicu55\nand then install net core \nsudo apt-get install dotnet-sdk-2.1\nNow, I had dotnet core running on Ubuntu Server 18.04.1. @thedon-chris : we are discussing this in \nhttps://github.com/dotnet/core-setup/issues/4724#issuecomment-437053420\nI think you should follow this.. ",
    "thedon-chris": "\nthanbks @SYNTAXDZ , follow your suggestion, it said that\n\ndotnet-runtime-deps-2.1 : Depends: libicu55 but it is not installable\n\nafter that, I installed libicu55,\nsudo add-apt-repository \"deb http://security.ubuntu.com/ubuntu xenial-security main\"\nsudo apt-get update\nsudo apt-get install libicu55\nand then install net core\nsudo apt-get install dotnet-sdk-2.1\nNow, I had dotnet core running on Ubuntu Server 18.04.1\n\nThis worked for me on Ubuntu Server 18.04.1!\nThanks!\n. ",
    "vbondarev": "Hello I had the same issue with dotnet-sdk-2.2.\nProblem:\nUnable to locate package aspnetcore-runtime-2.2\nCouldn't find any package by glob 'aspnetcore-runtime-2.2'\nCouldn't find any package by regex 'aspnetcore-runtime-2.2'\nSolution:\nSkip all instructions from https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current\n```\ncp /etc/apt/sources.list.d/microsoft-prod.list.save /etc/apt/sources.list.d/microsoft-prod.list\nsudo add-apt-repository universe\nsudo apt-get install apt-transport-https\nsudo apt-get update\nsudo apt-get install dotnet-sdk-2.2\n```\nThe command sudo dpkg -i packages-microsoft-prod.deb is renaming microsoft-prod.list to microsoft-prod.list.save. ",
    "jeffschwMSFT": "Thanks for following up @bergmeister we are in the middle of conducting customer calldowns to ensure we have all the right experiences prioritized.  If you are interested in sharing your thoughts you can take a look at our online survey and provide your contact info.\nhttps://blogs.msdn.microsoft.com/dotnet/2018/07/11/il-linker-help-us-build-the-best-experience/\ncc @sbomer . This will align with .NET Core 3.0 timeframe.. In .NET Core 3.0 we are planning on supporting consumption of native COM components on Windows.  There are tools that help generate .NET wrappers for COM ABI x-plat: swig, cppsharp, etc.. I am not aware of any explicit product decision around MFC usage.  @bitbonk can you share a sample of what you have been doing on .NET Framework WPF + MFC?  We can take a look.  If it is WIndows only and C++/CLI I would expect it would align with our C++/CLI work.. Our C++/CLI support is coming along.  We hope to have it in an upcoming preview.  There are a number of moving parts with the compilers/libraries shipping in an upcoming VS 2019 release and the runtime support coming in an upcoming .NET Core 3.0 Preview.  I do not have a firm date at this point, though all seems on track for a .NET Core 3.0 ship.. Adding @cmckinsey. .NET Core WinRT will be delivered via nuget packages.  The inbox/template experience is still being designed.\ncc @Pilchie @rido-min . > @jeffschwMSFT The delivery and the UX are logically separate, right?\nGenerally, but we are trying to move away from nuget restore as a means to deliver the default template experience.  So there is a connection.. The group expired and is being recreated.  Did you have a specific question that we may be able to help out with while it is being recreated?. The address is active again.  Sorry for the inconvience.. ",
    "omerlh": "I think the issue was missing WORKDIR /app directive, I added it and now it is working. So weird.... ",
    "Lxiamail": "Issue moved to dotnet/wcf #3078 via ZenHub\n. @freworr This issue seems similar as https://github.com/dotnet/wcf/issues/3272. Can you try putting AppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false); at the start. That way we can narrow down if this is a problem with the new SocketsHttpHandler implementation or if it's an issue somewhere in WCF.. add \"or later\". If we require WCF Core 2.1, the version should be \"4.5.0\". ",
    "scelariernautilus": "The NetSuite docs describe adding a web reference not a service reference. Both are available in .NET Framework. The former generates code from WSDL using wsdl.exe, the later uses svcutil.exe. It's looking like wsdl.exe probably does not generate .NET Core compatible code, which is why the web reference option is not available. HTH.. ",
    "peter-griffith": "@joshfree first link you provided ends with \n'Ok, I'm going to close this now as I think the question is answered. We will support this in .NET Core 2.1.'\nI don't see reference to adding support for .NET Core 2.0. Just to be clear. \nAre you saying that the other link that you provided is what would allow .NET core 2.0 to be used with RHEL6?. @joshfree first link you provided ends with \n'Ok, I'm going to close this now as I think the question is answered. We will support this in .NET Core 2.1.'\nI don't see reference to adding support for .NET Core 2.0. Just to be clear. \nAre you saying that the other link that you provided is what would allow .NET core 2.0 to be used with RHEL6?. ",
    "JRAlexander": "Will be updated today.. ",
    "oshmytov": "Consider the following advice, it helped me with my .NET Standard assembly being used in mixed .net and core environment: https://www.hanselman.com/blog/ReferencingNETStandardAssembliesFromBothNETCoreAndNETFramework.aspx. ",
    "vielmetti": "Thanks @Levi--G @leecow . I too would like to see arm64 support in Debian packaging for the runtime.. ",
    "gauravagarwal28": "This is my ~/.bashrc file:\n```\nnvidia@tegra-ubuntu:~$ cat ~/.bashrc\n~/.bashrc: executed by bash(1) for non-login shells.\nsee /usr/share/doc/bash/examples/startup-files (in the package bash-doc)\nfor examples\nIf not running interactively, don't do anything\ncase $- in\n    i) ;;\n      *) return;;\nesac\ndon't put duplicate lines or lines starting with space in the history.\nSee bash(1) for more options\nHISTCONTROL=ignoreboth\nappend to the history file, don't overwrite it\nshopt -s histappend\nfor setting history length see HISTSIZE and HISTFILESIZE in bash(1)\nHISTSIZE=1000\nHISTFILESIZE=2000\ncheck the window size after each command and, if necessary,\nupdate the values of LINES and COLUMNS.\nshopt -s checkwinsize\nIf set, the pattern \"**\" used in a pathname expansion context will\nmatch all files and zero or more directories and subdirectories.\nshopt -s globstar\nmake less more friendly for non-text input files, see lesspipe(1)\n[ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\"\nset variable identifying the chroot you work in (used in the prompt below)\nif [ -z \"${debian_chroot:-}\" ] && [ -r /etc/debian_chroot ]; then\n    debian_chroot=$(cat /etc/debian_chroot)\nfi\nset a fancy prompt (non-color, unless we know we \"want\" color)\ncase \"$TERM\" in\n    xterm-color|*-256color) color_prompt=yes;;\nesac\nuncomment for a colored prompt, if the terminal has the capability; turned\noff by default to not distract the user: the focus in a terminal window\nshould be on the output of commands, not on the prompt\nforce_color_prompt=yes\nif [ -n \"$force_color_prompt\" ]; then\n    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then\n    # We have color support; assume it's compliant with Ecma-48\n    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such\n    # a case would tend to support setf rather than setaf.)\n    color_prompt=yes\n    else\n    color_prompt=\n    fi\nfi\nif [ \"$color_prompt\" = yes ]; then\n    PS1='${debian_chroot:+($debian_chroot)}[\\033[01;32m]\\u@\\h[\\033[00m]:[\\033[01;34m]\\w[\\033[00m]\\$ '\nelse\n    PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ '\nfi\nunset color_prompt force_color_prompt\nIf this is an xterm set the title to user@host:dir\ncase \"$TERM\" in\nxterm|rxvt)\n    PS1=\"[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a]$PS1\"\n    ;;\n*)\n    ;;\nesac\nenable color support of ls and also add handy aliases\nif [ -x /usr/bin/dircolors ]; then\n    test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\"\n    alias ls='ls --color=auto'\n    #alias dir='dir --color=auto'\n    #alias vdir='vdir --color=auto'\nalias grep='grep --color=auto'\nalias fgrep='fgrep --color=auto'\nalias egrep='egrep --color=auto'\n\nfi\ncolored GCC warnings and errors\nexport GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'\nsome more ls aliases\nalias ll='ls -alF'\nalias la='ls -A'\nalias l='ls -CF'\nAdd an \"alert\" alias for long running commands.  Use like so:\nsleep 10; alert\nalias alert='notify-send --urgency=low -i \"$([ $? = 0 ] && echo terminal || echo error)\" \"$(history|tail -n1|sed -e '\\''s/^\\s[0-9]+\\s//;s/[;&|]\\s*alert$//'\\'')\"'\nAlias definitions.\nYou may want to put all your additions into a separate file like\n~/.bash_aliases, instead of adding them here directly.\nSee /usr/share/doc/bash-doc/examples in the bash-doc package.\nif [ -f ~/.bash_aliases ]; then\n    . ~/.bash_aliases\nfi\nenable programmable completion features (you don't need to enable\nthis, if it's already enabled in /etc/bash.bashrc and /etc/profile\nsources /etc/bash.bashrc).\nif ! shopt -oq posix; then\n  if [ -f /usr/share/bash-completion/bash_completion ]; then\n    . /usr/share/bash-completion/bash_completion\n  elif [ -f /etc/bash_completion ]; then\n    . /etc/bash_completion\n  fi\nfi\nexport PATH=/usr/local/cuda-9.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/usr/share/dotnet\nexport LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64:\nexport DOTNET_ROOT=$PATH:/usr/share/dotnet\nnvidia@tegra-ubuntu:~$ \n```. Yes, that worked. Thank you.. My output now.\n```\nnvidia@tegra-ubuntu:~$ dotnet --info\n.NET Core SDK (reflecting any global.json):\n Version:   2.1.302\n Commit:    9048955601\nRuntime Environment:\n OS Name:     ubuntu\n OS Version:  16.04\n OS Platform: Linux\n RID:         ubuntu.16.04-arm64\n Base Path:   /usr/share/dotnet/sdk/2.1.302/\nHost (useful for support):\n  Version: 2.1.2\n  Commit:  811c3ce6c0\n.NET Core SDKs installed:\n  2.1.302 [/usr/share/dotnet/sdk]\n.NET Core runtimes installed:\n  Microsoft.NETCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\nTo install additional .NET Core runtimes or SDKs:\n  https://aka.ms/dotnet-download\n```. ",
    "brentil": "I appreciate the feedback, it provides information I can use for documentation for these findings.  When doing scans for certain organizations there is no allowance to alter the scans to either tailor out certain findings or to change their severity.  A good example is the DoD which tracks .NET Core in their IAVMs so every one of these findings is a ream of documentation monthly to explain and work on mitigating.  They don't care that it might not be targeted for use but it exists on the system at all.  . ",
    "buehler": "@ajcvickers what do you mean by packages installed?\n. I've got dotnet sdk, and installed EFCore. \n<PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.1.1\" />\n    <PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql\" Version=\"2.1.1\" />. Of course:\ncsproj:\nxml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>netcoreapp2.1</TargetFramework>\n    <LangVersion>7.2</LangVersion>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.1.1\" />\n    <PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql\" Version=\"2.1.1\" />\n  </ItemGroup>\n</Project>\nbin/Debug/netcoreapp2.1/Time.Data.deps.json:\nbig bunch of json. Uhm.. @davidfowl I don't really have a runtimeconfig.json Where should that file be located at? (I'm on macos). @davidfowl Yes. This is a class library.\nThe structure is as follows:\n/\n| - BusinessLogicProject\n| - DataProject\n\\ - WebApp\nSo in the BusinessLogic I reference to the Data (both are class libraries).\nAnd entity framework is located in the dataproject. And in there, I'm trying to dotnet ef migrations list. . Mhmm I've heard of the Design package.\nBUT: when I add the GenerateRuntime thingy and the .csproj file looks like this:\nxml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>netcoreapp2.1</TargetFramework>\n    <LangVersion>7.2</LangVersion>\n    <GenerateRuntimeConfigurationFiles>True</GenerateRuntimeConfigurationFiles>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.1.1\" />\n    <PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql\" Version=\"2.1.1\" />\n  </ItemGroup>\n</Project>\nIt works. What exactly is the issue? (So I can understand the issue and understand the consequences). Oh :-) well that clarifies the issue. Thanks for the help!\nWould you suggest to add the design package or to add the line?. ",
    "jonechenug": "It seem is the https question. You may need set :\nrequest.AllowAutoRedirect = false;\nSuch like corefx#23422. ",
    "a641545621": "\nStill so. .net core 2.1     Request failed\n.net core 2.0     Request successfully. ",
    "aididhaiqal": "Basically our project use .net socket (async) and NetMQ as dealer socket. ",
    "RustyCZ": "I am not sure, it seems to be more like an issue with JIT compilation. That for cycle does not even execute, because that method is called with 0.. Closing, moved to https://github.com/dotnet/coreclr/issues/19454. ",
    "Dongata": "\u00bfany update?. I'll try to make one exaple for you on friday, if it's that ok with you c:. Sorry @Eilon, really i was really busy, i'll try to make an exaple this week. ",
    "mmijovilcevich": "I'm having the same issue. ",
    "morenoisidro": "same here.... ",
    "maghidini": "Same issue on my macOS High Sierra, huge blocker too\n. ",
    "LincolnYang1": "find some clue, \nin 2.0,  it use \"/bin/sh\" as shell, source: https://github.com/dotnet/corefx/blob/release/2.0.0/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs \n```\nprivate bool StartCore(ProcessStartInfo startInfo)\n        {\n            string filename;\n            string[] argv;\n        if (startInfo.UseShellExecute)\n        {\n            if (startInfo.RedirectStandardInput || startInfo.RedirectStandardOutput || startInfo.RedirectStandardError)\n            {\n                throw new InvalidOperationException(SR.CantRedirectStreams);\n            }\n\n            const string ShellPath = \"/bin/sh\";\n\n            filename = ShellPath;\n            argv = new string[3] { ShellPath, \"-c\", startInfo.FileName + \" \" + startInfo.Arguments};\n\n```\nbut in 2.1, it uses one of \"xdg-open\", \"gnome-open\", \"kfmclient\" to open file, this make \"UseShellExecute\" behave totally not same as 2.0\nsrc: https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Linux.cs\nprivate string GetPathToOpenFile()\n        {\n            string[] allowedProgramsToRun = { \"xdg-open\", \"gnome-open\", \"kfmclient\" };\n            foreach (var program in allowedProgramsToRun)\n            {\n                string pathToProgram = FindProgramInPath(program);\n                if (!string.IsNullOrEmpty(pathToProgram))\n                {\n                    return pathToProgram;\n                }\n            }\n            return null;\n        }. thanks for reply, \nsample code just to demo inconsistency of UseShellExecute between 2.0 and 2.1, the actual code is more complicate and need UseShellExecute 2.0 feature, \nafter migrate to 2.1 it suddenly doesn't work, since\"xdg-open\", \"gnome-open\", \"kfmclient\" are not  really shell, like /bin/sh and /bin/bash , does it make sense to obey its original definition? . ",
    "lonix1": "Where can we find notes for 2.1.401-1?. ",
    "vivmishra": "@livarcocc   @natemcmaster . @livarcocc   @natemcmaster . Closing in favor of #1938 . Closing in favor of #1938 . Thanks for reporting the issues: \n- ASP.NET Core release notes link is now working.\n- The checksums are available from https://www.microsoft.com/net/download/dotnet-core/2.2\n@tanaka-takayoshi, for 2.2 Previews feed-based package manager support is not available. You can use the tarballs for installing the product. \n@leecow . Thanks for reporting the issues: \n- ASP.NET Core release notes link is now working.\n- The checksums are available from https://www.microsoft.com/net/download/dotnet-core/2.2\n@tanaka-takayoshi, for 2.2 Previews feed-based package manager support is not available. You can use the tarballs for installing the product. \n@leecow . Thanks. The 2.2 README.md is fixed to point to the right location. . Thanks. The 2.2 README.md is fixed to point to the right location. . Thanks for reporting. . Thanks for reporting. . @rowanmiller . @rowanmiller . Pushed out the fix. . Pushed out the fix. . We are carrying these edits in the next update so we can probably skip this PR \n. We are carrying these edits in the next update so we can probably skip this PR \n. CC @muratg ; @Eilon for question from @AlexSapple . CC @muratg ; @Eilon for question from @AlexSapple . @KamranShahid : Sorry for the inconvenience, you can install .NET Core 2.2 using the installer package from the download page and use it with VS 2017. .NET Core 2.2 will show in the project options as a target when you install the 2.2 SDK.. @KamranShahid : Sorry for the inconvenience, you can install .NET Core 2.2 using the installer package from the download page and use it with VS 2017. .NET Core 2.2 will show in the project options as a target when you install the 2.2 SDK.. Cc @natemcmaster ; @shirhatti for 3.0 hosting bundle setup issue.. Cc @natemcmaster ; @shirhatti for 3.0 hosting bundle setup issue.. Fixed with #2168 . Fixed with #2168 . cc: @vatsan-madhavan ; @amit-kabra . cc: @vatsan-madhavan ; @amit-kabra . Fixed by #2135 . Fixed by #2135 . @Nothing-Works, thanks for pointing out the mistake -- rel note is updated. \n2.2.101 is not yet included in any released VS version. . @Nothing-Works, thanks for pointing out the mistake -- rel note is updated. \n2.2.101 is not yet included in any released VS version. . LGTM. LGTM. @leecow . @leecow . Fixed. Fixed. It is not clear why you are trying to delete this. . It is not clear why you are trying to delete this. . Capitalize \"add\".. We should additionally update the known issue MD file too. . Maybe add the hosting bundle link from here or point to Preview 2 download page? https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview2-download.md. ",
    "elmojo": "Also, when trying to add a Pre-build command line event, the event disappears after hitting the save button.. ",
    "shelgeram07": "Hi Mike, \nthanks for quick reply. I am getting below error\n\n. ",
    "artyomszasa": "Microsoft.NETCore.App 2.1.3 has been published on nuget.org .\nStill it is quite unpleasant that deb package has been released before nuget dependencies essential to use it.... ",
    "stephenpope": "I like the list of commits that you are putting out with the release notes now.\nIt would be extremely useful when you do a release if there was a list of the nuget packages that were updated / pushed to nuget for that release.\nI have to run new / modified packages by our legal dept so getting a list of what changes happen release to release is a little painful currenly :). Thanks Lee .. looking forward to it. \n. ",
    "StephenBonikowsky": "The real @stephenpope :). \"You can use the command. \"using the default template...\". \"tagets a netcoreapp\u2026\". \"Add a package reference to System...\". ",
    "vbenedichuk": "Guys, why .net core 2.1.2 for linux is not available anymore?. https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/runtime-2.1.2 - here\nIt installs 2.1.3. Thank you I'll try. \nWe have a bouncing issue which appears on 2.1.3 but not appears on 2.1.2. Looks like it's somehow related to concurrency or to something inside dbcontext.\nAs it bouncing it's really hard to trace it so we need to have 2.1.2 at least until we will catch and fix it.. I can't fill it yet. We facing it in 1 module. During the xunit test run, execution freezes at random point. On CI docker image it happens 4 of 5 times on my test docker it happens once in about 8 times. \nOn 2.1.2 all goes smoothly everywhere. We haven't got it on prod yet but I believe it's because we don't have intensive load there.\nI'll fill the bug it as soon as I'll find out how to reproduce it with 100% guarantee.. ",
    "Praveen-Rai": "@vivmishra Visual Studio keeps referring to Microsoft.AspNetCore.App v2.1.1. https://github.com/dotnet/core/issues/1895. @uffebjorklund Sorry i couldn't find global.json anywhere in my project. \n. I tried using RuntimeFrameworkVersion in the .csproj file. But it only updates Microsoft.NETCore.App to 2.1.3. Adding version tag to the package reference makes Nuget to download the package from the Nuget server.. ",
    "janstenberg": "I've just updated to Microsoft.AspNetCore.App 2.1.3 from 2.1.2 and my web app is not starting. Instead I get this error in Windows Event Viewer, (I've replaced personal details with ???):\n\nApplication 'MACHINE/WEBROOT/APPHOST/???.WEB' with physical root 'C:\\???\\src\\???.Web\\' failed to start process with commandline 'c:\\program files (x86)\\microsoft visual studio\\2017\\community\\common7\\ide\\extensions\\microsoft\\web tools\\projectsystem\\VSIISExeLauncher.exe -argFile \"C:\\Users\\???\\AppData\\Local\\Temp\\tmp6C.tmp\"', ErrorCode = '0x80004005 : 0.\n\nI've tested with Visual Studio Community 2017, both with 15.8.2 and the previous version, 15.7.<?> and getting the same error\nI've also tested with Jetbrains Rider and I get an error there as well.\nWith Rider in release mode and with \"dotnet run\" I get:\n\nThe specified framework 'Microsoft.AspNetCore.App', version '2.1.3' was not found.\n\nThanks,\nJan. ",
    "123Jun321": "Hi I just found the Microsoft.AspNetCore.All 2.1.0 can't run in the .net core 2.1.3,is it a bug? I tried Microsoft.AspNetCore.All 2.1.1 and 2.0.9 all will be work in the project but only 2.1.0 has this problem.\nthe erro information is followed:\nFileNotFoundException: Could not load file or assembly 'Microsoft.AspNetCore.Mvc.Core, Version=2.1.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The system cannot find the file specified.\nDotNetVersionTest.Startup.ConfigureServices(IServiceCollection services). ",
    "Amine-Smahi": "Thank you @leecow. ",
    "kphillisjr": "Just a quick update... I created a GIST ( see: https://gist.github.com/kphillisjr/a5d668d9e4591e1b1a8b95c57223cf55 ) that shows what some working with JScript.net scripts. Currently this gist contains the following code samples... \n- QuoteOfTheDay.js - This is a copy of the .NET Quote of the Day Example modified to work in JScript.net.\n- SampleForm.js - This is a modified example of the .NET windows form example modified to run on .NET with working event handlers.\n- QueryDotnet.js - This is the example code for finding .NET versions on Windows using Windows Registry Operations.\n- ThreadInfo.js\nTo compile the gists you haft to find the JScript.NET compiler ( jsc.exe ) which currently requires the .NET Framework. I have tested with the jsc.exe located in the following paths (Requires default .NET install parameters):\n* 32-bit Copies of Windows: (Default install path)\n\n%SystemRoot%\\Microsoft.NET\\Framework\\v4.0.30319\\jsc.exe\n* 64-bit Copies of Windows also have when using default install paths..\n %SystemRoot%\\Microsoft.NET\\Framework64\\v4.0.30319\\jsc.exe\n\n@leecow I would suggest also including @karelz in this issue since he suggested the creation of this issue in the first place.. ",
    "drewnoakes": "While looking at this it might also be good to include guidance on when maintainers will hide/delete comments. The ability to hide/minimise comments is a new GitHub feature, and can help push tangential discussion out of the main flow.\nhttps://help.github.com/articles/managing-disruptive-comments/. ",
    "akalcik": "Thx @leecow!  Pretty confusing. Here is no mention about not released yet. \nBut the error remains the same \nakalcik@WIN-928NLGZOIY:~$ sudo apt install dotnet-sdk-2.1\n[sudo] password for akalcik:\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nE: Unable to locate package dotnet-sdk-2.1\nE: Couldn't find any package by glob 'dotnet-sdk-2.1'\nE: Couldn't find any package by regex 'dotnet-sdk-2.1'\n. @leecow Nothing\nakalcik@WIN-928NLGZOIY:~$ apt search dotnet-sdk\nSorting... Done\nFull Text Search... Done. @wickedlizerd @omajid  Here the output. Should I say that this is installation of Ubuntu is from Microsoft Store and is running on Windows 10?\n```\nakalcik@WIN-928NLGZOIY:~$ sudo apt-key adv --keyserver packages.microsoft.com --recv-keys EB3E94ADBE1229CF\nExecuting: /tmp/apt-key-gpghome.yTfAapPM4U/gpg.1.sh --keyserver packages.microsoft.com --recv-keys EB3E94ADBE1229CF\ngpg: connecting dirmngr at '/tmp/apt-key-gpghome.yTfAapPM4U/S.dirmngr' failed: IPC connect call failed\ngpg: keyserver receive failed: No dirmngr\nakalcik@WIN-928NLGZOIY:~$ sudo apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893\nExecuting: /tmp/apt-key-gpghome.YcGXj1cAkO/gpg.1.sh --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893\ngpg: connecting dirmngr at '/tmp/apt-key-gpghome.YcGXj1cAkO/S.dirmngr' failed: IPC connect call failed\ngpg: keyserver receive failed: No dirmng\nakalcik@WIN-928NLGZOIY:~$ sudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-bionic-prod bionic main\" > /etc/apt/sources.list.d/dotnetdev.list'\nakalcik@WIN-928NLGZOIY:~$ cat /etc/apt/sources.list.d/dotnetdev.list\ndeb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-bionic-prod bionic main\nakalcik@WIN-928NLGZOIY:~$ sudo apt-get update\nHit:1 http://archive.ubuntu.com/ubuntu bionic InRelease\nGet:2 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]\nGet:3 http://security.ubuntu.com/ubuntu bionic-security InRelease [83.2 kB]\nGet:4 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]\nGet:5 https://packages.microsoft.com/repos/microsoft-ubuntu-bionic-prod bionic InRelease [2846 B]\nGet:6 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages [303 kB]\nGet:7 http://archive.ubuntu.com/ubuntu bionic-updates/main Translation-en [114 kB]\nGet:8 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 Packages [172 kB]\nGet:9 http://archive.ubuntu.com/ubuntu bionic-updates/universe Translation-en [79.8 kB]\nGet:10 http://security.ubuntu.com/ubuntu bionic-security/main amd64 Packages [158 kB]\nGet:11 http://security.ubuntu.com/ubuntu bionic-security/main Translation-en [60.5 kB]\nErr:5 https://packages.microsoft.com/repos/microsoft-ubuntu-bionic-prod bionic InRelease\n  The following signatures couldn't be verified because the public key is not available: NO_PUBKEY EB3E94ADBE1229CF\nReading package lists... Done\nW: GPG error: https://packages.microsoft.com/repos/microsoft-ubuntu-bionic-prod bionic InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY EB3E94ADBE1229CF\nE: The repository 'https://packages.microsoft.com/repos/microsoft-ubuntu-bionic-prod bionic InRelease' is not signed.\nN: Updating from such a repository can't be done securely, and is therefore disabled by default.\nN: See apt-secure(8) manpage for repository creation and user configuration details\nakalcik@WIN-928NLGZOIY:~$ sudo apt-get install dotnet-sdk-2.1.105\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nE: Unable to locate package dotnet-sdk-2.1.105\nE: Couldn't find any package by glob 'dotnet-sdk-2.1.105'\nE: Couldn't find any package by regex 'dotnet-sdk-2.1.105'\nakalcik@WIN-928NLGZOIY:~$ sudo apt-get install dotnet-sdk-2.1.300\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nE: Unable to locate package dotnet-sdk-2.1.300\nE: Couldn't find any package by glob 'dotnet-sdk-2.1.300'\nE: Couldn't find any package by regex 'dotnet-sdk-2.1.300'\nakalcik@WIN-928NLGZOIY:~$ sudo apt-get install dotnet-sdk-2.1.400\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nE: Unable to locate package dotnet-sdk-2.1.400\nE: Couldn't find any package by glob 'dotnet-sdk-2.1.400'\nE: Couldn't find any package by regex 'dotnet-sdk-2.1.400'\n```\n. @leecow Well, I installed the Ubuntu twice, and had all time the same problem. Any suggestion what I should do?. Well I tried now a lot of things I was able to install the latest SDK (2.1.401-1). That's the good message,. The bad message is that I don't know what the exactly the problem was. What I tried:\nRemoved /etc/resolv.conf and restarted the Ubuntu by killing LxssManager in Windows\nI've made this because there were some suggestion that the error below has something to do with nameserver\ngpg: connecting dirmngr at '/tmp/apt-key-gpghome.YcGXj1cAkO/S.dirmngr' failed: IPC connect call failed\ngpg: keyserver receive failed: No dirmng\nDisabled and enabled resolved service\nsudo systemctl disable systemd-resolved.service\nsudo systemctl enable systemd-resolved.service\nTried to install dirmngr and grg\nThere was suppose that dirmngr or grg aren't installed but they were.\nTried to install VS Code\n```\ncurl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg\nsudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg\nsudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\" > /etc/apt/sources.list.d/vscode.list'\nsudo apt-get install apt-transport-https\nsudo apt-get update\nsudo apt-get install code # or code-insiders\n```\nThis was only to get some editor to edit some config file when necessary*. But after this step I was able to install latest SDK.\n\nVS Code isn't running on Ubuntu WSL at this time :-(. \n",
    "wickedlizerd": "sh\nsudo apt-key adv --keyserver packages.microsoft.com --recv-keys EB3E94ADBE1229CF\nsudo apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893\nsudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-bionic-prod bionic main\" > /etc/apt/sources.list.d/dotnetdev.list\nsudo apt-get update\nsudo apt-get installdotnet-sdk-2.1.105\nWorked for me.\nNote: Freezing did occur for me on the first two commands. I could still install even after skipping them.. @omajid Fair enough. sudo apt-get install dotnet-sdk-2.1.300 worked for me too.. ",
    "hawk2411": "I had the same problem on a fresh installed Ubuntu 18.04 LTS. What helped was the entry: \n\nsudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-bionic-prod bionic main\" > /etc/apt/sources.list.d/dotnetdev.list'\n\nand after \nsudo apt-get update\nsudo apt-get install dotnet-sdk-2.1\nworks fine.\nPlease complete the documentation on the page:\nhttps://www.microsoft.com/net/download/linux-package-manager/ubuntu18-04/sdk-current\n. ",
    "bevo009": "\nI had the same problem on a fresh installed Ubuntu 18.04 LTS. What helped was the entry:\n\nsudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-bionic-prod bionic main\" > /etc/apt/sources.list.d/dotnetdev.list'\n\nand after\nsudo apt-get update\nsudo apt-get install dotnet-sdk-2.1\nworks fine.\nPlease complete the documentation on the page:\nhttps://www.microsoft.com/net/download/linux-package-manager/ubuntu18-04/sdk-current\n\nThank you! After trying everything else suggested on this page and elsewhere to install dotnet on a fresh Ubuntu install from the Windows store, your suggestion worked straight away. I don't know why it was so hard and convoluted, it should just work(!), but it is working now and I've stored your comments and shell output just in case I need to do this again another day.  Thanks legend... :)\n. ",
    "mysim1": "\nshell\nsudo apt-key adv --keyserver packages.microsoft.com --recv-keys EB3E94ADBE1229CF\nsudo apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893\nsudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-bionic-prod bionic main\" > /etc/apt/sources.list.d/dotnetdev.list\nsudo apt-get update\nsudo apt-get installdotnet-sdk-2.1.105\nWorked for me.\nNote: Freezing did occur for me on the first two commands. I could still install even after skipping them.\n\nThe above enabled me to successfully install .NET Core 2.1 run-time.\n. ",
    "ZackTech": "I gave IIS_IUSRS  Read/Write access to: 'C:\\WINDOWS\\system32\\config\\systemprofile' \nnow in the log file I get:\nWelcome to .NET Core!\nLearn more about .NET Core: https://aka.ms/dotnet-docs\nUse 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs\nTelemetry\nThe .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous and doesn't include command-line arguments. The data is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.\nRead more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry\nASP.NET Core\nSuccessfully installed the ASP.NET Core HTTPS Development Certificate.\nTo trust the certificate run 'dotnet dev-certs https --trust' (Windows and macOS only). For establishing trust on other platforms refer to the platform specific documentation.\nFor more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.\nNo executable found matching command \"dotnet-.\\Crm.WebApi.dll\"\nI have run the command  'dotnet dev-certs https --trust'  and the certificate is already installed.\nEverytime I try to get the Web Api to run I get No executable found matching command \"dotnet-.\\Crm.WebApi.dll\"\n. ",
    "noorrocks": "I have also faced this issue. This is irrespective of VS 2017.  I am not sure why NuGetFallbackFolder\\ folder has the older version. When you issue dotnet --info command, it displays the current version.\nI have also checked this after deleting the NuGetFallbackFolder. Once it's deleted, this is folder get again created at the time of dotnet new from somewhere (but don't know from where).. After wrestling with this problem for two days, finally, I have caught the issue.\nif you see the 'powershell output', my project directory is ' Directory: C:#NIN\\dotnetcore'\nSomehow, it doesn't like the '#' in a folder name. I created a new folder without '#' and it worked like a charm.\nI was also able to reproduce this problem on a different PC.\nPlease note that it only bothers the '#' if it's at the root folder name. Down the chain, it works OK.\nThis issue can be marked as a known issue, I think.\n. ",
    "MrAmos123": "https://github.com/dotnet/core/issues/1889#issuecomment-415950868\nResolved from this post above ^^^. ",
    "pimbrouwers": "Hi Ben!\nFeel like I'm talking with a living legend here!\nThanks for the feedback. The logging level appears to be the culprit. You mention faster forms of logging. I assume that this is anything that's doing it's io asynchronously?\nI implemented the logging level in the startup code (lazy):\nc#\npublic void ConfigureServices(IServiceCollection services)\n    {\n      services.AddLogging(\n        builder =>\n        {\n          builder.AddFilter(\"Microsoft\", LogLevel.Warning)\n                 .AddFilter(\"System\", LogLevel.Warning)\n                 .AddConsole();\n        });\n    }\nWhich is yielding me around 70k req/s, even on my ultra low-voltage machine:\n\n. As an interesting aside, tracking the memory consumption reveals that this hello world example consumed around 127mb of pageable memory at it's peak and opened 729 process handles. Whereas the analogous Go implementation used 16mb and opened 344 process handles. \nBefore any benchmarking occcurred, at idle, the netcoreapp2.1 was using 47mb of pageable memory and opened 393 process handles. Versus, 3mb and 71 handles for Go.\nI realize it's not an apples to apples comparison. But the results are fairly drastic. . Wild! That drops the values to:\n(Idle) 16mb / 390 handles\n(Mid-benchmark) 32mb / 1148 handles \nFor what it's worth, adding <ServerGarbageCollection>false</ServerGarbageCollection> also increase the http throughput.\nI assume the increased process handle coincides with the lack of Garbage collection?  What are the side effects of using that property? I find it so strange that disabling Server Garbage Collection which is supposed to facilitate high throughput and scalability, actually improves performance here.\nIn what types of production environments should one be setting it to false?. ",
    "muzzammilhussain": "Issue found and resolved.. ",
    "forestbat": "@benaadams Yes\uff0cthere is no game engine rely on .NET Core\uff08unity 3d still uses mono\uff09\u3002\nAnd in visual studio\uff0cwe still can only use .NET Core to generate console programs or class library instead of desktop programs\uff0cand I hope .NET Core replace Xamarin/Mono completely\u3002. @Petermarcu So how do you think Android and iOS\uff1fWill they use Mono and Xamarin for a long time in future\uff1fOr you will do something to change this\uff1f. @Petermarcu I just think .net core is better than mono\uff0cso I want to ask if MS want to unify the two platform\uff08to .net core\uff09to simplify work\u3002\nAnd in VS\uff0calthough most of disk space is wasted by Google's emulator and SDK\uff0cunify xamarin and .net core can also save plenty of disk space\u3002. ",
    "jkotalik": "IISIntegration will do.. The issue with ANCM has already been resolved. We had a customer email us asking why ANCM hasn't been released on App Service and pointed to this. Now that the issue is resolved and isn't tied to a .NET release, why not remove it?. Just change the AspNetCoreHostingModel setting back to InProcess. . The reason this announcement was made was because ANCM wasn't deployed to Azure App Services when 2.2 released. Now that ANCM has been deployed to App Service, customers need to retarget their application to host InProcess. \nANCM inside of the hosting bundle has been fine since the release of 2.2.0.. \"12.2.18346.1\". https://github.com/dotnet/core/pull/2403. ",
    "igoventura": "Visual Studio hot reload the project when you make an modification with the execution paused (with a breakpoint or pausing the execution itself) so you can make modifications, continue the execution and will not have to restart the execution from zero.. I've tried it once and only the .cs file could be put in another assembly/project but the cshtml file had to be in the Shared/Components/VIEWCOMPONENT/Default.cshtml. \nHere's my test: https://github.com/igoventura/NetCoreViewComponents-Test. ",
    "ibrahimdevs": "@igoventura  thanks for comment but do you know about this feature on Jetbrains Rider? \nI'm developing .net core on Mac OS.. ",
    "drauch": "Actually we are doing that. But not all our projects are SDK-based yet, so in a second step we restore using nuget.exe as well (again, for the whole solution). That's probably not a good idea. I'll try to rewrite it so that only the non-SDK-based projects get restored using nuget.exe\nThanks for the advice!. It's a little tricky actually, we have only a single classical project called \"SolutionPackages\" which is used to obtain tools and install them in the SolutionDir\\packages folder. This is not possible anymore with PackageReferences which are \"installed\" into the NuGet cache folder outside the solution dir.. R# inspectcode is an example which does not provide a dotnet tooling yet. Until all our referenced tools have migrated to the new pattern we're stuck (so I think). Thanks for offering your help though.. Hmm, I've got the problem pointed out at https://stackoverflow.com/questions/52909494/why-does-char-getunicodecategory-report-wrong-categories -> your Unicode version is stuck at 5.0, even for .NET Core. That's a pity. I can guess why you don't want to update the information for char.GetUnicodeCategory() (backward compatibility), but CharUnicodeInfo has been introduced to return the most up-to-date information, hasn't it?\n\nAre you planning to upgrade your version of Unicode?\nIs there a compatibility switch to obtain up-to-date information?\n\nAlso the https://docs.microsoft.com/en-us/dotnet/api/system.globalization.charunicodeinfo.getunicodecategory page should document the fact that you're using Unicode 5.0.. ",
    "astrophys": "So the instructions here are out of date?. ",
    "ackava": "Hi, I understand versioning but you must consider a production environment\nwhere I just updated all nuget packages and Core 2.2 packages went in\nproduction with no production ready hosting package.\nMy request is simple, till Core 2.2 hosting package is not production\nready, all nuget packages of 2.2 should be in preview and not in live.\nOn Tue, Sep 11, 2018 at 4:13 PM Lee Coward notifications@github.com wrote:\n\nThe latest Preview release is for .NET Core / ASP.NET Core 2.2 (preview 2\ncoming later this week). The September update for 2.1 was released this\nmorning. The SDK runs on a somewhat different versioning cadence which does\nconfuse matters a bit but you can easily tell what goes together on our\ndownload pages. Here's the 2.1 page as an example -\nhttps://www.microsoft.com/net/download/dotnet-core/2.1\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/1924#issuecomment-420409419, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AlnG2cQIrikD4Zo0DptAd4kzqQUc8dMdks5uaBl1gaJpZM4WeMrt\n.\n. \n",
    "pietrodicaprio": "Have you registered the key and the feed?\nTry to follow this procedure: https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-current. I think this could be a good start point: https://stackoverflow.com/questions/35700066/attach-database-programmatically \nThis gives you a lot of informations and code: http://justlikeamagic.com/2010/04/13/programmatically-enumerating-attaching-and-detaching-sql-server-databases/\nThis is another short example: https://stackoverflow.com/questions/4218960/how-to-restore-sql-server-database-through-c-sharp-code\nNone of these are made using Net Core but since we are talking about SQL queries, and not about C# functions, you have all the information and probably most of the code is copy and paste.. Hello @gregg-miskelly ,\nin my MANIFEST there is the same of your example:\n// --- The following custom attribute is added automatically, do not uncomment -------\n  //  .custom instance void [System.Runtime]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [System.Runtime]System.Diagnostics.DebuggableAttribute/DebuggingModes)\n  //           = {int32(263)}\nI'm also 100% sure about the debug dlls because my process flow is:\n- use clean solution\n- be sure to be in debug\n- compile solution\n- manually go to debug bin folder\n- copy and transfer the new compiled dlls\nDouble checked right now:\nit happens only with dll loaded using Reflection.\nFor a given var assembly = Assembly.LoadFrom(Directory.GetCurrentDirectory() + part);, depending on a previous check, i use services.AddMvc().AddApplicationPart(assembly); or services.AddMvc().AddApplicationPart(assembly).AddControllersAsServices();.\nIn both scenarios the issue is the same. As already said before i set the projects to include all the symbols into the dll because the debugger was not able to find the pdb(s).\nNow, while the debugger is connected, if i open the Debug -> Windows -> Modules the ' Symbol Status' is 'Symbols loaded' for all my dlls.. ",
    "moijafcor": "I've been trying to install on three Ubuntu 18.04 boxes with no success in two of them. There is some rare combination of dependencies that prevent it from installing because libcurl3 refuses to install with no good reason though:\nbash\n dotnet-runtime-2.0.9 : Depends: libcurl3 (>= 7.16.2) but it is not going to be installed. ",
    "Thraka": "@karelz @leecow I'm also running into this issue and trying to sort it out. It tells me it wants to remove libcurl4 if I try to install libcurl3. I'm trying to install the runtime though, not hosting.\nUbuntu 18.04.1 LTS Budgie. @karelz Yes sorry, this is core 2.1 I believe this is a libcurl4 vs 3 problem. I basically cannot install the .net core package via apt install as it fails with a package conflict. It won't tell me what package is conflicting. I'm not a linux guru so it's taken me some time to try and figure out what is going on.. @leecow I installed that, and it worked. But when I try to install the SDK, it still fails\n```bash\nandy@adegeolinux:~$ sudo apt install dotnet-sdk-2.1.202\nReading package lists... Done\nBuilding dependency tree     \nReading state information... Done\nSome packages could not be installed. This may mean that you have\nrequested an impossible situation or if you are using the unstable\ndistribution that some required packages have not yet been created\nor been moved out of Incoming.\nThe following information may help to randy@adegeolinux:~$ esolve the situation:\nThe following packages have unmet dependencies:\n dotnet-sdk-2.1.202 : Depends: dotnet-runtime-2.0.9 but it is not going to be installed\n```\nI listed the packages and it says it's installed:\nbash\nandy@adegeolinux:~$ sudo apt list dotnet-runtime*\nListing... Done\ndotnet-runtime-2.0.7/bionic 2.0.7-1 amd64\ndotnet-runtime-2.0.9/bionic 2.0.9-1 amd64\ndotnet-runtime-2.1/bionic 2.1.5-1 amd64\ndotnet-runtime-2.1.0-preview2-26406-04/bionic 2.1.0-preview2-26406-04-1 amd64\ndotnet-runtime-2.1.0-rc1/bionic 2.1.0-rc1-1 amd64\ndotnet-runtime-deps-2.1/bionic,now 2.1.5-1 amd64 [installed]. @karelz @leecow uhghhghghgahahrrrr Thanks... google search must have pulled me into the 2.0 install instructions page and because of the version of the sdk showing 2.1 on the page I just didn't notice the page title said 2.0 ... \nThis versioning is confusing \ud83d\ude04 . Looks good.. You have AARM32 here. Alpine should have ARM64 support listed. ",
    "toryb": "I have a similar problem, only it shows up when attempting to add an assembly and its dependencies to the Runtime Package Store. The dotnet store command creates the error, but the solution can be successfully built and deployed without error.\n\nerror NU1202: Package Microsoft.NETCore.App 2.0.0 is not compatible with netstandard2.0\n\nI have tried 2.1 & 2.2.\n\nerror NU1202: Package Microsoft.NETCore.App 2.1.0 is not compatible with netstandard2.0\nerror NU1202: Package Microsoft.NETCore.App 2.2.0 is not compatible with netstandard2.0\n. \n",
    "landerop": "I got this working after removing this package\ndnf remove compat-openssl\n. ",
    "SpaceShot": "Would this require an update to the lifecycle support document?   I didn't start a PR but have an update in my fork: https://github.com/SpaceShot/core/blob/patch-1/microsoft-support.md and I could open the PR.. Would this require an update to the lifecycle support document?   I didn't start a PR but have an update in my fork: https://github.com/SpaceShot/core/blob/patch-1/microsoft-support.md and I could open the PR.. ",
    "tomaszzmudzinski": "I installed this sdk on my Mac and my .net core projects stops to build. First I was getting \n\n/Users/tomaszzmudzinski/Documents/Projects/Spinner/Spinner/Spinner/Spinner.csproj: Error: NETSDK1061: The project was restored using Microsoft.AspNetCore.App version 2.1.4, but with current settings, version 2.1.1 would be used instead. To resolve this issue, make sure the same settings are used for restore and for subsequent operations such as build or publish. Typically this issue can occur if the RuntimeIdentifier property is set during build or publish but not during restore. For more information, see https://aka.ms/dotnet-runtime-patch-selection. (Spinner)\n\nI removed all .net core sdks from my laptop, and made clean install of newest .net sdk (.NET Core SDK 2.1.402). Now I am getting another error while trying to build project:\n\n/Users/tomaszzmudzinski/Documents/Projects/Spinner/Spinner/Spinner/Spinner.csproj: Error NU1605: Detected package downgrade: Microsoft.AspNetCore.App from 2.1.4 to 2.1.1. Reference the package directly from the project to select a different version. \n. @Petermarcu I had this .net core SDK installed:\n\n\n. ",
    "SabirHossain": "@igoventura there was no problem with the views the problem was in configuration in Startup.cs, See my answer on the post in StackOverflow. Thanks.. ",
    "wahmedswl": "Hi, link is broken for \n\nASP.NET Core release notes \n\nat https://github.com/dotnet/core/blob/master/release-notes/2.2/preview/2.2.0-preview2.md\nThanks. ",
    "Alexandre-Nourissier": "Great news ! \nMind that the release notes links are broken in this file :/release-notes/2.2/README.md@master. \nThe links are redirecting to ./preview/2.2-preview.md instead of ./preview/2.2.0-preview.md .\n. ",
    "steveoh": "What are the instructions for removing preview 1 and other sdk's/runtimes?\nDo you folks know how to get the preview in travis ci for ci testing?. @leecow sure! \n```shell\n.NET Core SDK (reflecting any global.json):\n Version:   2.2.100-preview2-009404\n Commit:    f4707d384d\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  10.13\n OS Platform: Darwin\n RID:         osx.10.13-x64\n Base Path:   /usr/local/share/dotnet/sdk/2.2.100-preview2-009404/\nHost (useful for support):\n  Version: 2.2.0-preview2-26905-02\n  Commit:  ad4d306fe0\n.NET Core SDKs installed:\n  2.1.4 [/usr/local/share/dotnet/sdk]\n  2.1.300 [/usr/local/share/dotnet/sdk]\n  2.1.301 [/usr/local/share/dotnet/sdk]\n  2.1.302 [/usr/local/share/dotnet/sdk]\n  2.1.401 [/usr/local/share/dotnet/sdk]\n  2.2.100-preview1-009349 [/usr/local/share/dotnet/sdk]\n  2.2.100-preview2-009404 [/usr/local/share/dotnet/sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.2.0-preview1-35029 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.2.0-preview2-35157 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.2.0-preview1-35029 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.2.0-preview2-35157 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 1.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.2.0-preview-26820-02 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.2.0-preview2-26905-02 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\nTo install additional .NET Core runtimes or SDKs:\n  https://aka.ms/dotnet-download\n```. Thanks @leecow. I was able to uninstall most things except the runtimes did not shrink as much as I was hoping...\nMicrosoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\nMicrosoft.AspNetCore.All 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\nMicrosoft.AspNetCore.All 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\nMicrosoft.AspNetCore.All 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\nMicrosoft.AspNetCore.All 2.2.0-preview1-35029 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\nMicrosoft.AspNetCore.All 2.2.0-preview2-35157 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\nMicrosoft.AspNetCore.App 2.2.0-preview2-35157 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\nMicrosoft.NETCore.App 2.2.0-preview2-26905-02 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\nShould there be instructions to delete the Microsoft.AspNetCore.All items?. ",
    "obayit": "Angular template is not working.\nAn exception is thrown:\nException has occurred: CLR/System.ArgumentNullException\nAn exception of type 'System.ArgumentNullException' occurred in System.Private.CoreLib.dll but was not handled in user code: 'Value cannot be null.'\n   at System.Threading.Monitor.ReliableEnter(Object obj, Boolean& lockTaken)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.UpdateCollection()\n   at Microsoft.Extensions.Primitives.ChangeToken.<>c__DisplayClass0_0.<OnChange>b__0(Object s)\n   at System.Threading.CancellationTokenSource.InternalRegister(Action`1 callback, Object stateForCallback, SynchronizationContext syncContext, ExecutionContext executionContext)\n   at System.Threading.CancellationToken.Register(Action`1 callback, Object state, Boolean useSyncContext, Boolean useExecutionContext)\n   at Microsoft.Extensions.Primitives.CompositeChangeToken.RegisterChangeCallback(Action`1 callback, Object state)\n   at Microsoft.Extensions.Primitives.ChangeToken.OnChange(Func`1 changeTokenProducer, Action changeTokenConsumer)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider..ctor(IEnumerable`1 actionDescriptorProviders, IEnumerable`1 actionDescriptorChangeProviders)\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitSingleton(SingletonCallSite singletonCallSite, ServiceProviderEngineScope scope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitSingleton(SingletonCallSite singletonCallSite, ServiceProviderEngineScope scope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable(IEnumerableCallSite enumerableCallSite, ServiceProviderEngineScope scope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine.<>c__DisplayClass1_0.<RealizeService>b__0(ServiceProviderEngineScope scope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType, ServiceProviderEngineScope serviceProviderEngineScope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType)\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\n   at Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(IApplicationBuilder app, Action`1 configureRoutes)\n   at Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(IApplicationBuilder app)\n   at tf2show.Startup.Configure(IApplicationBuilder app, IHostingEnvironment env) in /home/obi/src/dotnetcore/tf2show/Startup.cs:line 50\nReproduce Steps:\n\ncd [to an empty directory]\ndotnet new angular\ndotnet run\n\nPlatform:\nUbuntu 16.04. ",
    "BTXAndy": "We have the same issue. \nProject XXX.Web is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Project XXX.Web supports: netstandard2.0 (.NETStandard,Version=v2.0)\n\u2002\u2002\u2002\u2002One or more projects are incompatible with .NETCoreApp,Version=v2.1.\nThis builds fine locally but not on our build servers.. We have resolved it by reverting back to Framework version 4.7 on one of the other projects and stopped using Nuget.exe. Not sure this was related.. ",
    "tellarin": "Just as a note that may be useful to others... \nMaking sure nuget version is 4.3.0+ solved it for us.. Just as a note that may be useful to others... \nMaking sure nuget version is 4.3.0+ solved it for us.. ",
    "vitaaaly": "@bartonjs when I set this environment variables, my program is successful.\nThank you!. ",
    "jasonsultana": "This worked for me too, hosting under CentOS on Webfaction.. ",
    "codec-abc": "You may put the finger on it. The files I get back are different from the ones I send. Also it seems that \"something\" replaces the bytes 0x0D, 0x0A with 0x0A. So probably some line endings stuff in there. I will try to fix that and see what happens.. That was it. For some reason, the dlls were probably seens as text files and WinScp probably changed the lines endings. Erasing all the Transfer Preset and forcing Binary on the default one as show in the capture solved the problem. Thanks  for the help!\n\n. ",
    "ppumkin": "This also fixed an intermittent issue for me. \nNETCORE MVC 2.1 built to Linux backed Docker\nI have an implementation of Rendering Razor to HTML so I can send it off to another service. \nhttps://gist.github.com/ppumkin/9ca1ef2322f1390a6d5cda438e5e2319\nSometimes I got this error message.\n```\nAn unhandled exception occurred while processing the request.\nInvalidOperationException: Cannot find compilation library location for package 'Microsoft.NETCore.App'\nMicrosoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths(ICompilationAssemblyResolver resolver, List assemblies)\nInvalidOperationException: Cannot find compilation library location for package 'Microsoft.NETCore.App'\nMicrosoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths(ICompilationAssemblyResolver resolver, List assemblies)\nMicrosoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths()\nMicrosoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart+<>c.b__8_0(CompilationLibrary library)\nSystem.Linq.Enumerable+SelectManySingleSelectorIterator.MoveNext()\nMicrosoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider.PopulateFeature(IEnumerable parts, MetadataReferenceFeature feature)\nMicrosoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature(TFeature feature)\nMicrosoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.GetCompilationReferences()\nSystem.Threading.LazyInitializer.EnsureInitializedCore(ref T target, ref bool initialized, ref object syncLock, Func valueFactory)\nMicrosoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.get_CompilationReferences()\nMicrosoft.AspNetCore.Mvc.Razor.Internal.LazyMetadataReferenceFeature.get_References()\nMicrosoft.CodeAnalysis.Razor.CompilationTagHelperFeature.GetDescriptors()\nMicrosoft.AspNetCore.Razor.Language.DefaultRazorTagHelperBinderPhase.ExecuteCore(RazorCodeDocument codeDocument)\nMicrosoft.AspNetCore.Razor.Language.DefaultRazorEngine.Process(RazorCodeDocument document)\nMicrosoft.AspNetCore.Razor.Language.RazorProjectEngine.Process(RazorProjectItem projectItem)\nMicrosoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(string relativePath)\nMicrosoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.OnCacheMiss(string normalizedPath)\nMicrosoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorPageFactoryProvider.CreateFactory(string relativePath)\nMicrosoft.AspNetCore.Mvc.Razor.RazorViewEngine.CreateCacheResult(HashSet expirationTokens, string relativePath, bool isMainPage)\nMicrosoft.AspNetCore.Mvc.Razor.RazorViewEngine.OnCacheMiss(ViewLocationExpanderContext expanderContext, ViewLocationCacheKey cacheKey)\nMicrosoft.AspNetCore.Mvc.Razor.RazorViewEngine.LocatePageFromViewLocations(ActionContext actionContext, string pageName, bool isMainPage)\nMicrosoft.AspNetCore.Mvc.Razor.RazorViewEngine.FindView(ActionContext context, string viewName, bool isMainPage)\nKinder.Lei.Mvc.Documents.Engines.ViewRender.RenderAsync(string name, TModel model) in ViewRender.cs\n```\nBy adding what @muriloecfaria suggestee actually fixed the problem.\n<MvcRazorExcludeRefAssembliesFromPublish>false</MvcRazorExcludeRefAssembliesFromPublish>\n. ",
    "Venzz": "As i see, the output is the same is if it was done via Visual Studio 2017 menu. And it doesn't work or throws System.BadImageFormatException.. > Are you publishing for Linux? How are you copying the files over to Linux?\nYes, for Linux, for Raspbian GNU/Linux 9.1 (stretch) specifically, at lease the idea is to do that. I copy files using OneDrive + Browser, the whole \\netcoreapp2.0\\target\\ folder which in my case contains:\npublish\\Lib.dll (that is Nuget lib)\npublish\\Main.deps.json\npublish\\Main.dll (this is my \"executable\")\npublish\\Main.pdb\npublish\\Main.runtimeconfig.json\nMain.deps.json\nMain.dll\nMain.pdb\nMain.runtimeconfig.dev.json\nMain.runtimeconfig.json\nIs it a properly publushed app?\n\nAre you running using dotnet run?\nNo, i use dotnet Main.dll. Yes. On the contents of publish i receive System.BadImageFormatException which AFAIK means that there is an target platform mismatch.. Solved it.\nTo publish from Windows to Raspberry we need to use\ndotnet publish -r linux-arm --self-contained=false\nAs i understand it is not possible to do with Visual Studio.\n. \n",
    "ngoctubk": "@Eilon It's OK with standard status code when I'm using:\n- return NoContent();\n- return OK(object);\n- return CreatedAtAction(...)\n....\nI't only happen when I use StatusCode() with non-standard one.. Oh, I don't know that values less than 100 are invalid. Thank you!. ",
    "EngKhaled91": "windows 8.1 and version of SDK is 2.1 . I got the installer from this link:\nhttps://www.microsoft.com/net/download\non another VM or Machine it works \nbut I want to know about the reason for this error. ",
    "alsami": "Hi,\nthis should work just fine. I have create a small sample with a static file here.. Indeed, does not work, even with nested formdata. I updated the sample. It works fine with normal nested properties, not for nested files though.\nI suggest you to move that issue to the MVC Repository.. ",
    "ranouf": "Hi,\nThank for your help and to have taken the time to do a repository.\nIn your example, you test with a list of files. In my situation, I have a more complex object (maybe there is a difference?), a parent and a list of children which both can have a name and a list of files.\nI did a repository, so you will be able to test the problem:\nhttps://github.com/ranouf/TestMultipleUpload\nLet me know if you have questions :)\n. Thanks @alsami, I created a new issue on  MVC Repository. (https://github.com/aspnet/Mvc/issues/8527). An issue has been found:\nhttps://github.com/aspnet/Mvc/issues/8527#issuecomment-425978956. ",
    "tophed": "@benaadams thanks for the suggestion. Turning on tiered compilation didn't make a noticeable improvement for me, although I haven't been able to run extensive tests.\nI've also realized the issue is especially bad for me because I am using a VPC. I'm getting cold starts anywhere from 6-20 seconds when making multiple concurrent requests \ud83d\ude14.. @benaadams thanks for the suggestion. Turning on tiered compilation didn't make a noticeable improvement for me, although I haven't been able to run extensive tests.\nI've also realized the issue is especially bad for me because I am using a VPC. I'm getting cold starts anywhere from 6-20 seconds when making multiple concurrent requests \ud83d\ude14.. ",
    "mkleijn": "Hi, it seems the download urls in releases.json now uses absolute URL's instead of relative paths to the base url specified in blob-sdk \nThis breaks the .NET Core VSTS task from installing sdk 2.1.403 on my build agent\nIs this change intentional? In that case I probably should raise an issue in the VSTS Tasks GitHub instead. ",
    "luchenatwork": "Yes, same here.  It break my VSTS build.  An issue is submitted to VSTS task group.\nhttps://github.com/Microsoft/vsts-tasks/issues/8472\n. ",
    "asheeshv": "I'm currently on .Net Core 2.0, and trying to upgrade to v2.1. I'm following this https://docs.microsoft.com/en-us/aspnet/core/migration/20_21?view=aspnetcore-2.1. However, my .Net Core app uses the target framework as .Net4.7 using .Net core references to 2.0. With the 2.1.5 release, should I update these references to v2.1.5, or just update these to use 2.1. Would it be of any significant difference of going in with 2.1.0 over 2.1.5? Thanks!. ",
    "NetTecture": "Well, I can say that up to NOW I still get that same error. Which means my whole pipeline for the whole team is down, becaue MS can not agree to write tasks that do not blow on a simple single minor update. When can we expec this to be fixed?. ",
    "arthurrump": "\nHow does the new format account for SDK releases independent of runtime releases?\n\nIt looks like the runtime field can just be left out, for example 2.1.201 in the 2.0 channel only has an sdk field. Still weird that 2.1.400 is not in there...\nSome other weird things that I noticed:\n- In the releases.json for 1.1 the version of the SDK is sometimes (but not always) referred to with version-sdk instead of the version field that is used in all other files.\n- There are two releases without a release-version field, namely 2.1.0-preview2+sdk2.1.300-preview2 and 1.0.1+sdk1.0.0-preview2-003131. Is that on purpose? If so, why?\n- Release 1.1.6 is listed to be released on 2017-11-14, which is the same day as 1.1.5. According to the release notes it was released on 2018-01-09.\n. Also, shouldn't 2.2 be listed in the index as preview? And previews 1 and 2 are missing in the 2.2 releases.json.. Question: are the version-display fields supposed to strip off the junk after the second dash in preview versions? That seems to be how it works in the old releases.json, but the new one isn't consistent with that. The latest 2.2.0-preview3 release has for the runtime \"version-display\": \"2.2.0-preview3-27014-02\" in 2.2/releases.json, but in the old releases.json it has \"version-runtime-display\": \"2.2.0-preview3\". The latter looks more sensible to me.. I only modified the version-display in 2.2/releases.json for now, which makes it consistent with the old releases.json, which used version-*-display from version 2.1 onwards.\nI would be in favor of changing this for 2.0 too (both in the new and old releases.json), as it looks to be consistent with the messaging around those releases, both talking about just Preview 1 and Preview 2, but I'm not sure if it is something that should be changed.\nAs for 1.1 and 1.0, the releases that are listed for those channels only have previews for the SDK. For 1.1, that version number uses a different scheme than all others, so I don't think it makes sense to apply the \"rule\" there. For 1.0, applying the \"rule\" would result in four releases with the same SDK version number displayed, even though they are different builds, so I think those should be left alone too.. The download links should be good now. (At least if I didn't look over some again...). @leecow Please let me know if there are other issues blocking this\n. @leecow How is it looking?. While we're at it again, would it make sense to add the new latest-runtime and latest-sdk fields to releases-index.json too? That would allow you to find the latest runtime and sdk versions with just one round trip. (Edit: Opened a separate PR for it: #2176). Sorry, that was not what I intended to do ;). In all other new releases.json files the version-aspnetcoremodule field is specified as a list, and in some occasions multiple versions are indeed specified, e.g. for release 2.1.6.\nBut while looking this up I also noticed that in the old releases.json this is not the case, so it might just be a mistake.. I think this has been resolved, judging from f84493d626f21b42cebdaf3ea18e841f32ac550a. ",
    "matkoch": "Is there a single roundtrip way for getting the latest SDK version that I can pass to dotnet-install.sh/ps1 ? In our scenario, we are getting the version to be installed either from global.json or from the former release.json. But now it seems I would have to make an additional if-else branch (for calling either --version <global-json-version> or --channel LTS), or make two roundtrips.. @leecow ping ^^^^. ",
    "guntbert": "@karelz \n1. The -O- redirects the received content to stdout\n2. \n- $ wget -q https://packages.microsoft.com/config/ubunut/18.04/packages-microsoft-prod.deb (mind the typo ubunut) produces no output at all, thus giving the impresssion that all is well.\n- $ wget -nv https://packages.microsoft.com/config/ubunut/18.04/packages-microsoft-prod.deb produces\nhttps://packages.microsoft.com/config/ubunut/18.04/packages-microsoft-prod.deb:\n2018-10-09 12:35:24 ERROR 404: Not Found. and thus gives a clear indication of an error.. @karelz That would break the whole thing. What happens here is the following:\n\nwget ... -O- sends the content of the requested file to stdout so it can be processed further in the pipeline (This is the public key in an \"amored\" format, able to be sent through text-only protocols)\n| gpg --dearmor converts this key to the standard format needed on the system\n> microsoft.asc.gpg sends it to a file in the current directory\nthe next command moves this file into the directory of trusted gpg-keys\n\nIt is true that with -nv (or --no-verbose) on the \"happy path\" we get some unneeded clutter but that does not hurt the process. With -q there is no clutter but also no information when things go wrong.\nIf that clutter is too much we should leave the whole thing alone but removing -O- (or -O - which does the same) would break it.\n. Thank you - I was surprised how fast paced your review process is (given the size of the project) :+1: . Ouch, I was too enthusiastic and did not check every command :blush: . Thx for catching it. \nSeparating the switches (like you suggested) works now.. ",
    "casperOne": "@dasMulli That did it.  Thanks!\nI may create a pull request to place that note in the documentation.. ",
    "rynnova": "Just removed all SDK versions above 2.1.202 (the last 2.0 SDK listed) and runtimes above 2.0.9, downloaded and installed the .NET Core Runtime 2.0.9, and it made no difference and, weirdly enough, gives the same error about supporting netcoreapp2.1 only.\nThis points to a misconfiguration on my behalf, so what have I done incorrectly? Do I need to do something else other than marking the Target framework as .NET Standard 2.0 and checking Generate NuGet package on build in Visual Studio 2017? Also, how can it support netcoreapp2.1 when I don't even have that installed to package it that way?. Recreating the project structure using dotnet new sln, dotnet new classlib -f netstandard2.0 and the like allows building and consuming the intended netstandard2.0 assembly, so something in the way I used Visual Studio 2017 to set up .NET Standard 2.0 projects must have gone wrong.\nIf this helps isolate a bug in VS2017, cool.  Otherwise, I have a workaround, so let's close this.. ",
    "AaronRobinsonMSFT": "@jkotas The links you provided show code in the style of:\n\nType.GetType(\"System.Console, System.Console\", throwOnError: true);\n\nBut that is identical to what is in GetLicenseInteropHelperType() which is\n\nType t = Type.GetType(\"System.ComponentModel.LicenseManager, System\", throwOnError: true);\n\nSo I am unclear what the difference is here and how one is better than the other. I could also be missing the issue entirely.. > For the LicenseManager case, the equivalent of GetMethod is done in C++ VM code.\nI am trying to move that C++ code to C# for managed COM server activation. I am assuming that change with make things better?. I think at this point, we can close this issue.. ",
    "rmkerr": "The regression test added for this change has been consistently failing on the Windows.10.Amd64.Core leg in the daily CI runs. Here's the output from the latest failure.\nMessage :\nSystem.Runtime.InteropServices.COMException : Retrieving the COM class factory for component with CLSID {7AB36653-1796-484B-BDFA-E74F1DB7C1DC} failed due to the following error: 80040154 Class not registered (Exception from HRESULT: 0x80040154 (REGDB_E_CLASSNOTREG)).\nStack Trace :\nat System.ComponentModel.Tests.LicenseManagerInteropTests.CanCreateSpellChecker_Regression_core_1994() in E:\\A\\_work\\5\\s\\corefx\\src\\System.ComponentModel.TypeConverter\\tests\\LicenseManagerInteropTests.cs:line 30. Updated this in the latest commit.. ",
    "Lakritzator": "@diverdan92 This is the same issue I reported via email, somehow my google-fu didn't find it.. sorry.\nFYI: I am running with 3.0.100-alpha1-009670\nMy projects also uses MahApps, which has this dependency on ControlzEx.\nAs this issue has a lot of information, and a much better stacktrace, use this! (I'm already subscribed)\nJust in case it's still needed, my project (libraries for Greenshot) to reproduce the error is here (the link brings you to the feature/dotnetcore30 branch!): https://github.com/dapplo/Dapplo.CaliburnMicro/tree/feature/dotnetcore30 \nIt's not so restricted yet, as I first wanted to know if the issue was known before putting time in making a simplified version to reproduce the error.\nYou probably want to unload all projects with \u201cclickonce\u201d in the name\u2026\nThe startup project should be Application.Demo, you should be able to build and run it.\nThere is a trayicon, withs looks like a #, this has a configuration entry, selecting this causes the error.. @jkotas I mainly develop from within Visual Studio, never checked how got it runs on the commandline. I will see if I can build a clean fix without \"hardcoded\" paths, right away.\nI still advice to look at the ControlZEx example, as it's probably a much better example which doesn't do as much as I did. Like I said before, I use the ControlZEx NuGet Package and this code is most likely that what my Demo crashes.. @jkotas Actually, I think the problem you had is also due to the fact that you build Application.Demo directly. The application doesn't know about what projects it uses, there are no direct references in the code, so the other projects are not build. The demo needs to demonstrate loading addons at runtime to enhance the UI, this is why... \ud83d\ude04 \nI made some modifications (git pull), and together with the following steps (bold was modified) it should start:\ngit clone https://github.com/dapplo/Dapplo.CaliburnMicro/\ncd Dapplo.CaliburnMicro\\src\ngit checkout feature/dotnetcore30\ndotnet restore\nmsbuild /p:Configuration=Debug /p:Platform=\"Any CPU\"\ndotnet Application.Demo\\bin\\Debug\\netcoreapp3.0\\Application.Demo.dll\n(tested this). On a side-note:\n\nAs @jkotas has issues building ControlzEx, I also have quite a lot of issues with keeping cake builds stable. I found it a super idea, and it certainly has a lot of potential. I started reducing the functionality to only use it to do all the CI/CD stuff, so I generate documentation, coverage and upload the packages.\nI never started the project from the commandline, it actually seems to feel a lot snappier... might just be my imagination.. FYI:\nNow, if you got things working, you will notice that provoking the error is not really a nice experience from the commandline! The application goes berserk, and opens one window after the other.. this is actually some bad error handling, which tries to show a window -> error -> error handler -> show another window -> error etc... etc..\n. @ericstj Thanks for the feedback!\n\nYeah sorry for all the noise... The project is not specifically made to demonstrate the error, it's pretty much a demo of all the accumulated base library (it has a lot of dependencies) for the \"backbone\" of the next Greenshot.\nI didn't know it might have been in the ControlzEx library code, I only had a stacktrace of internal Microsoft code. This made it hard to reduce the code to the causing code, especially when I only have a time in my \"free\" evenings to work on this. I wish I would get paid for \"playing around\" with .NET Code & technologies like you guys \ud83d\ude01  (Daytime job I mainly work with Java)\nAnyway, it's now already past midnight for me, so time for bed... With a bit more time, I would probably be able to reduce it to a lot less! If you can't isolate it, I will give it a go tomorrow.. As promised, I created a more isolated repository.\nSee here: https://github.com/Lakritzator/RenderThreadFailure\nIt has the least noisy code I needed to reproduce the error, but it does just Mahapps.Metro to do so.\nThe issue seems to manifest when a MetroWindow has a GlowBrush, enabling a glow around the window, is shown.\nI'm not a MahApps expert, you probably need to look there for what is happening.. In the \"alternative\" branch of the same project I have used ControlzEx (an alpha) to create the same error by attaching a \"GlowWindowBehavior\".\nIt's actually just this:\nvar window = new Window();\n            var glowWindowBehavior = new GlowWindowBehavior\n            {\n                GlowBrush = Brushes.Green\n            };\n            glowWindowBehavior.Attach(window);\n            window.Show();\n. Today I will try to workaround the issue, didn't have time for that yet, so I can at least continue with my development for & evaluation of dotnet core 3.0. I still need to mix all my recent changes to the Greenshot repository, where I will add (and thus test) with some of the WinForms functionality.\nStill wanted to add a questions to this issue:\nIs there any information on what  wpfgfx_cor3 compared to wpfgfx_v0400 is, and how this is developed? For instance, will this always be developed side by side? How do I see when a new version is supplied, and what changes it has?\nAm I correct to assume that wpfgfx it's not open source? Are there any plans on making this more transparent?\n. @ericstj That is pretty much what I understood, was hoping for a bit more \ud83d\ude01 \nIs the Microsoft.DesktopUI.App open source? Probably not?I think it should be very clearly communicated if not, don't get me wrong: I don't have an issue with it but if dotnet core is open source and it uses closed source components, it might not be received very well if this is not explained.. @ericstj That is pretty much what I understood, was hoping for a bit more \ud83d\ude01 \nIs the Microsoft.DesktopUI.App open source? Probably not?I think it should be very clearly communicated if not, don't get me wrong: I don't have an issue with it but if dotnet core is open source and it uses closed source components, it might not be received very well if this is not explained.. @ericstj thanks for the link, I never thought about going back to that \"old\" blogpost, and read the comments.. @ericstj thanks for the link, I never thought about going back to that \"old\" blogpost, and read the comments.. @vatsan-madhavan I'm hesitant to ask, but what is the status on this? Is there anything ) can do, or some kind of workaround? It's no problem if you guys need more time, I am asking so I know where to put my priorities.\nFor the time being I disabled Mahapps Themes, those trigger the glowbehavior, but the UI is missing some stuff and I am not sure if this is due to the theming or a general UI problem.... @ericstj thanks for the update, not a big problem.\nBut it does give bring up the question on how we are supposed to know what changes are in what build?. I updated to 3.0.100-alpha1-009706 and the bug seems to be solved!!!!\nThe example project  doesn't crash, and my bigger project also works.\nFrom my point of view, where there is nothing more to do, you can close this issue.. No problem with the delay, and thanks for fixing it!. ",
    "diverdan92": "@Lakritzator - thanks for the additional details and extra repro project. \n@ericstj @jkotas - any ideas who may be a good person to take a look? . @Lakritzator - thanks for the additional details and extra repro project. \n@ericstj @jkotas - any ideas who may be a good person to take a look? . @ericstj - can you help triage?. @ericstj - can you help triage?. @rladuca - do you know if this fix has made it to the SDK installer? . @rladuca - do you know if this fix has made it to the SDK installer? . @Pilchie - can you take a look? . @Pilchie - can you take a look? . @jeffschwMSFT - do you know? . @jeffschwMSFT - do you know? . ",
    "vatsan-madhavan": "Thanks, taking a look... . I have a fix that I'm testing right now - should have something out within a day or two. . I have a fix that I'm testing right now - should have something out within a day or two. . @Lakritzator Hmm.. I had fixed this a few days ago, and had hoped that the change would have made it to the SDK by now. I'm enquiring.... This is related to https://github.com/dotnet/cli/issues/10106. We should consider updating the default logic in the SDK for VB.NET to incorporate Application.xaml as the default for Preview 2. \ncc @dotnet/wpf-developers . I like the idea of treating both App.xaml and Application.xaml as default candidates for ApplicationDefinition. . ",
    "richimori": "@BasPaap  Have you found any work around for this issue? . ",
    "BasPaap": "@richimori I haven't found a workaround, unfortunately. I reported the problem via the Visual Studio feedback tool where it has been Triaged, but no further updates. You can vote on it here if you like: https://developercommunity.visualstudio.com/content/problem/358905/filenotfoundexception-systemruntime-version4210-wh.html. @richimori I haven't found a workaround, unfortunately. I reported the problem via the Visual Studio feedback tool where it has been Triaged, but no further updates. You can vote on it here if you like: https://developercommunity.visualstudio.com/content/problem/358905/filenotfoundexception-systemruntime-version4210-wh.html. Why, exactly, does this work? From the redirect, it looks like it's telling the runtime to use System.Runtime 4.0.0.0 instead of 4.2.1.0, but why can it find 4.0.0.0 and not 4.2.1.0?. Why, exactly, does this work? From the redirect, it looks like it's telling the runtime to use System.Runtime 4.0.0.0 instead of 4.2.1.0, but why can it find 4.0.0.0 and not 4.2.1.0?. ",
    "keithbeller": "Having the same issue. \nUsing T4 Templates in a Netcore 2.1 Unit Tests project.  Getting the following error:\nSeverity    Code    Description Project File    Line    Suppression State\nError       Running transformation: System.IO.FileNotFoundException: Could not load file or assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\nFile name: 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\n   at Microsoft.VisualStudio.TextTemplating7287211A5B67A55BA89E7ADD09A1D5F1C756AB89B667A33B67732467A8A9894344C4A8EDFA37F134BFF90591C5A79A28A98334B7FAAD2E2CEC9F967513112B31.GeneratedTextTransformation.TransformText()\n   at Microsoft.VisualStudio.TextTemplating.TransformationRunner.PerformTransformation()\nWRN: Assembly binding logging is turned OFF.\nTo enable assembly bind failure logging, set the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog] (DWORD) to 1.\nNote: There is some performance penalty associated with assembly bind failure logging.\nTo turn this feature off, remove the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog]. PROJECT NAME    PATH TO FILE\\file.tt    1 \n. ",
    "FionaHolder": "Also having this issue. ",
    "lmcarreiro": "Maybe it's because we have a .net core assembly calling a .net framework assembly.\nThe assembly C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\TextTransform.exe are trying to load System.Runtime from my bin/Debug/netcoreapp2.2\n```\nRunning transformation: System.IO.FileNotFoundException: Could not load file or assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\nFile name: 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\n   at Microsoft.VisualStudio.TextTemplatingCCD6A65ACD0C020DB5143939AD89CCAF6364E601AB0B0BD88DA2E9E732B57C5A9C1CFFAEEF1F05268508D25BBB9C886F16C987B8FFEB9F3DFC1C5D402ED92597.GeneratedTextTransformation.TransformText()\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute1T0,TRet\n   at Microsoft.VisualStudio.TextTemplating.TransformationRunner.PerformTransformation()\n=== Pre-bind state information ===\nLOG: DisplayName = System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n (Fully-specified)\nLOG: Appbase = file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/\nLOG: Initial PrivatePath = NULL\nCalling assembly : MOPE.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null.\n===\nLOG: This bind starts in LoadFrom load context.\nWRN: Native image will not be probed in LoadFrom context. Native image will only be probed in default load context, like with Assembly.Load().\nLOG: Using application configuration file: C:\\Users\\u42m\\AppData\\Local\\Microsoft\\VisualStudio\\15.0_29f8d23a\\devenv.exe.config\nLOG: Using host configuration file: \nLOG: Using machine configuration file from C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\config\\machine.config.\nLOG: Post-policy reference: System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/System.Runtime/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PublicAssemblies/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PublicAssemblies/System.Runtime/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PrivateAssemblies/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PrivateAssemblies/System.Runtime/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Microsoft/TemplateProviders/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Microsoft/TemplateProviders/System.Runtime/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Microsoft/TestWindow/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Microsoft/TestWindow/System.Runtime/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Platform/Debugger/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Platform/Debugger/System.Runtime/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Platform/DiagnosticsHub/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Platform/DiagnosticsHub/System.Runtime/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PrivateAssemblies/DataCollectors/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PrivateAssemblies/DataCollectors/System.Runtime/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PrivateAssemblies/DataCollectors/x86/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PrivateAssemblies/DataCollectors/x86/System.Runtime/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/System.Runtime/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PublicAssemblies/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PublicAssemblies/System.Runtime/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PrivateAssemblies/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PrivateAssemblies/System.Runtime/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Microsoft/TemplateProviders/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Microsoft/TemplateProviders/System.Runtime/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Microsoft/TestWindow/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Microsoft/TestWindow/System.Runtime/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Platform/Debugger/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Platform/Debugger/System.Runtime/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Platform/DiagnosticsHub/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/CommonExtensions/Platform/DiagnosticsHub/System.Runtime/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PrivateAssemblies/DataCollectors/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PrivateAssemblies/DataCollectors/System.Runtime/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PrivateAssemblies/DataCollectors/x86/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/common7/ide/PrivateAssemblies/DataCollectors/x86/System.Runtime/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Users/u42m/oldD/p/MOPE/MOPE/MOPE.Core/bin/Debug/netcoreapp2.2/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Users/u42m/oldD/p/MOPE/MOPE/MOPE.Core/bin/Debug/netcoreapp2.2/System.Runtime/System.Runtime.DLL.\nLOG: Attempting download of new URL file:///C:/Users/u42m/oldD/p/MOPE/MOPE/MOPE.Core/bin/Debug/netcoreapp2.2/System.Runtime.EXE.\nLOG: Attempting download of new URL file:///C:/Users/u42m/oldD/p/MOPE/MOPE/MOPE.Core/bin/Debug/netcoreapp2.2/System.Runtime/System.Runtime.EXE.\n``. Maybe someassemblyRedirectinsideC:\\Users\\\\AppData\\Local\\Microsoft\\VisualStudio\\15.0_29f8d23a\\devenv.exe.config` could be a workaround, but I tried some things and can't get it working.. It works!!!\nJust put this bindingRedirect inside the C:\\Users\\<user>\\AppData\\Local\\Microsoft\\VisualStudio\\15.0_29f8d23a\\devenv.exe.config inside <configuration> -> <runtime> -> <assemblyBinding> where are all the others bindingRedirect's\n<dependentAssembly>\n  <assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\"/>\n  <bindingRedirect oldVersion=\"0.0.0.0-5.0.0.0\" newVersion=\"4.0.0.0\"/>\n</dependentAssembly>. ",
    "kamleshrao": "There is already this issue logged.  Did you check the solution of checking Port Usage (by some other application) and killing it? \nhttps://github.com/dotnet/core/issues/948 \nAre you on HTTPS on localhost? \n. ",
    "jenyckee": "Okay, but what is the solution?. @karelz Yes, when I \"Start Without Debugging\" the application even crashes. @reevelau This doesn't help for me. @karelz That's very unfortunate, what kind of information do you need in order to understand the root-cause?\n. ",
    "anhmiuhv": "This also happens to me. ",
    "reevelau": "I had the same issue on a dotnet generate web project recently. But I can fix the issue by editing Properties\\launchSettings.json to modify the applicationUrl in your app config.\nFrom this\n\"applicationUrl\": \"https://localhost:5001;http://localhost:5000\",\nto this\n\"applicationUrl\": \"http://localhost:5000\", \nI suspect it could be an issue of the dotnet boilerplate project \"ASP.NET Core Web API\".. I had the same issue on a dotnet generate web project recently. But I can fix the issue by editing Properties\\launchSettings.json to modify the applicationUrl in your app config.\nFrom this\n\"applicationUrl\": \"https://localhost:5001;http://localhost:5000\",\nto this\n\"applicationUrl\": \"http://localhost:5000\", \nI suspect it could be an issue of the dotnet boilerplate project \"ASP.NET Core Web API\".. ",
    "aliaksandr-valchuk": "In my case the reason was that I had a web site on IIS bound to use https://localhost:5001\nFunny enough \"netstat -o\" didn't show it . ",
    "NickCraver": "\nBefore you say something like\n\"But this would break existing code.\", thats the whole point of .NET Core that you can easilier break stuff as you could have with .NET Framework, since .NET Core can be deployed on app basis instead of machine basis and we as a developer have to make the decision if we want or don't want to upgrade, with those changes.\n\nWhile that was somewhat true in .NET Core v1, it\u2019s not in v2+. Compatibility was realized as very, very necessary and a major shift in course happened. For example, this type of change would mean netstandard libs no longer worked on .NET Core. That\u2019d be an unacceptable regression to everything so far.\nIn short: this isn\u2019t doable, it\u2019d break the world. Especially items so fundamental as .GetHashCode(). Every lib with any class that override it would break...it\u2019s just not worth it.. ",
    "lmolkova": "what is the release strategy for OOB packages such as System.Diagnostics.DiagnosticSource? When can we expect to have them on nuget.org?. ",
    "keithn": "the release notes seem poor, the entity framework one seems fine abd highlights the changes, but .net core and asp.net I can't work out what's changed easily. ",
    "peppy": "Agree that it is very hard to locate the changes in preview releases. At very least, links to commit logs (or closed PR/issue logs) for the range of included changes would be very helpful!. ",
    "ltouro": "@keithn @peppy maybe this helps: https://github.com/search?q=org%3Aaspnet+is%3Aissue+is%3Aclosed+milestone%3A2.2.0-preview3. all issues closed in the 2.2.0 Preview 3 milestone\nSaw here: https://github.com/aspnet/Announcements/issues/323. ",
    "tommcdon": "\nwhat is the release strategy for OOB packages such as System.Diagnostics.DiagnosticSource? When can we expect to have them on nuget.org?\n\nAdding @brianrob and @adamsitnik to comment on System.Diagnostics.DiagnosticSource. ",
    "memark": "I've run into an issue. Have the CORS values returned by preflight requests been changed?\ncurl 'https://server/api' -X OPTIONS -H 'Access-Control-Request-Headers: content-type' -H 'Access-Control-Request-Method: PUT' -H 'Origin: xxx'\n2.2 Preview 2 (as well as 2.1) gives\n\nAccess-Control-Allow-Headers: content-type\nAccess-Control-Allow-Methods: PUT\n\n2.2 Preview 3 gives\n\nAccess-Control-Allow-Headers: *\nAccess-Control-Allow-Methods: *\n\nAs I understand it, * is not yet very well supported, which explain why parts of our application is now broken.. @pranavkm We have seen the problem described above on\nMicrosoft Edge\nVersion 42.17134.1.0\nOS: Windows 10 Pro, version 1803, build 17134.345\nInternet Explorer 11\nVersion 11.345.17.134.0\nOS: Windows 10 Pro, version 1803, build 17134.345\nGoogle Chrome\nVersion 69.0.3497.100 (Official Build) (64-bit)\nOS: MacOS Mojave (10.14)\nSafari\nVersion 12.0 (14606.1.36.1.9)\nOS: MacOS Mojave (10.14)\nFirefox\nVersion 62.0.3 (64-bit)\nOS: MacOS Mojave (10.14). ",
    "foureighteen": "I ran into an issue caused by misconfiguration. According to this documentation https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie?tabs=aspnetcore2x&view=aspnetcore-2.2, Cookie.Expiration is obsolete. Yet I got no warnings or errors when I used Cookie.Expiration instead of ExpireTimeSpan in ASP.NET Core 2.2 Preview 3. . ",
    "ionepaul": "hi, i know that https://github.com/aspnet/KestrelHttpServer/issues/1144 issue regarding the kestrel server not allowing invalid characters in headers was fixed in .NET Core 2.2.0-preview2 and it was working fine, but it seems that in .NET Core 2.2.0-preview3 the invalid characters are not accepted anymore and kestrel throws 400 like before. \nDoes anyone encountered this issue or know anything about it? Do I need to adjust some options or anything ?\nThank you. . hi, i know that https://github.com/aspnet/KestrelHttpServer/issues/1144 issue regarding the kestrel server not allowing invalid characters in headers was fixed in .NET Core 2.2.0-preview2 and it was working fine, but it seems that in .NET Core 2.2.0-preview3 the invalid characters are not accepted anymore and kestrel throws 400 like before. \nDoes anyone encountered this issue or know anything about it? Do I need to adjust some options or anything ?\nThank you. . hi @Tratcher, just opened #4318 with all the details, it seems that is happening both for preview2 and preview3 only when running behind IIS.. hi @Tratcher, just opened #4318 with all the details, it seems that is happening both for preview2 and preview3 only when running behind IIS.. ",
    "adriaandavel": "Apologies for the omission, my VS version is 15.3.2. Is this a VS bug or a ASP.Net Core 2.2 project template issue?. ",
    "gstrit": "Sorry my mistake I found the issue. The service sent a stream as a response and I did not close it.. ",
    "rladuca": "@0xd4d There is a fix coming down the pipe for this soon.  We weren't getting the CompositeFont files included in the installer for the SDK.  \nFor now, you can copy the desktop versions from either:\n- \"%SYSTEMROOT%\\Microsoft.NET\\Framework\\v4.0.30319\\WPF\"\n- \"%SYSTEMROOT%\\Microsoft.NET\\Framework\\v4.0.30319\\WPF\\Fonts\" \nPut them into the folder that PresentationCore.dll is loading from.  The file contents themselves haven't changed so that will fix any crashes temporarily.. @diverdan92 I just checked the latest installer and this fix is available.. ",
    "ryalanms": "This has been fixed, and the change is in 10/27/18 and later builds.  Please verify and close when you get a chance.  Thanks. \nTested dotnet build and dotnet run on 3.0.100-alpha1-009708: \nxaml\n<ResourceDictionary xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n                    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n                    xmlns:system=\"clr-namespace:System;assembly=mscorlib\">\n    <system:String x:Key=\"StringResource\">Foo</system:String>\n</ResourceDictionary>\n```xaml\n\n<Window.Resources>\n    <ResourceDictionary>\n        <ResourceDictionary.MergedDictionaries>\n            <ResourceDictionary Source=\"MyResourceDictionary.xaml\"/>\n        </ResourceDictionary.MergedDictionaries>\n    </ResourceDictionary>\n</Window.Resources>\n\n<TextBlock Text=\"{StaticResource StringResource}\"/>\n\n\n```\n. ",
    "lokisisland": "Thank you for the debugging advice. I have narrowed the error I'm seeing down to a hardware fault; it is happening at random times throughout the life of the program. I have confirmed this by running MemTest which has shown many memory errors. \nThank you again!. ",
    "EduBic": "Hello karelz, I uploaded my test program here: https://github.com/EduBic/CoolProp-dotnet-core.\nHere my process to create the project:\nI cloned the CoolProp library and compiled with the following commands:\ngit clone --recursive https://github.com/CoolProp/CoolProp.git\ncd CoolProp\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release -DCOOLPROP_SHARED_LIBRARY=True -DCOOLPROP_RELEASE=True ..\nmake -j $(nproc)\nFrom the last commands, I got the 3 libCoolProp files that you can find inside the repository. The CoolProp.dll file instead is downloaded from https://sourceforge.net/projects/coolprop/files/CoolProp/6.1.0/Csharp/Windows_64bit\nI create the project with dotnet new console in the project folder and put there the libs files.\nIn Ubuntu 18\nThen from terminal:\ndotnet run -> get the Exception\nInstead with Mono:\nmcs Program.cs followed by mono Program.exe I got the correct output.\nIn Windows 10:\ndotnet run and I got the correct output.\n\nI tested all in 64 bit OS (Windows 10 and Ubuntu 18.04). Oh I see... The issue is that dotnet run command create an executable inside the build folder but inside that there's not the lib.so file.\n\nIn Mono the executable is created in the same folder of the project, hence the program finds the lib.so file.\nBut in Windows 10 how does dotnet build the program and automatically link the lib.dll?. Yes! If I change the path in [DllImport(\"path\")] to \"../../../libCoolProp.so\" the program executed with dotnet run works.\nThank you karelz.\nIn Windows the build process is the same, dotnet run create two folders bin and obj but the lib.dll file is not inside those directories.\nHow .NET core in Windows 10 automatically finds the path of CoolProp.dll remains unknown.. I don't know how to debug it using only the console.\nAfter the creation of a console project I run the following commands:\ndotnet publish\ndotnet run\nI noticed that in Visual Studio 2017 the program doesn't run, it crashes with DllNotFoundException. I have to set Copy to Output Directory to Copy Always for the CoolProp.dll file. In this case the file .dll is copied inside the bin/debug/netcoreapp2.1 directory and the program works.\nDoes vs2017 build using .NET core?. I tried with ProcessExplorer and the CoolProp.dll is correctly loaded from the project directory (CoolProp-dotnet-core).\n\n. Yes, if I run the command dotnet run --project .\\CoolProp-dotnet-core\\ from the parent directory I got the DllNotFoundException. \nSo in Windows 10 the dynamic linker search the lib also in the path where dotnet run is called, this is not done in Ubuntu 18.. ",
    "jobou363": "@karelz It would be great to have a message on the deploy. \nBut, rigth now there is no error when you deploy an 64 bits app on an 32 bits azure it works.\nThe error is when you access the page after the deploy that is an http error 503. This error is normal because you have a error server side. \nSo after, you have to go on azure side and active the log and look in all folder to find a log in the html log file.. ",
    "saurabhnachankar": "@karelz thanks! after cleaning the binaries it worked !. @karelz thanks! after cleaning the binaries it worked !. ",
    "vtortola": "I am root, is not that enough? \nSame outome:\n```\nsudo -E lldb-3.9 which dotnet\n(lldb) target create \"/usr/bin/dotnet\"\nCurrent executable set to '/usr/bin/dotnet' (x86_64).\n(lldb) process attach --pid 1\nerror: attach failed: unable to attach\n(lldb)\n```. Thanks for looking into this.\nIt is indeed strange. And the problem may boil down to the microsoft/dotnet image itself. For example, despite of all flags and capabilities indicated, still cannot do things like these:\n```\necho 0 | tee /proc/sys/kernel/yama/ptrace_scope\ntee: /proc/sys/kernel/yama/ptrace_scope: Read-only file system\n0\nsysctl -w kernel.yama.ptrace_scope=0\nsysctl: setting key \"kernel.yama.ptrace_scope\": Read-only file system\n```\nI am doing some investigation, although my knowledge as developer in Linux is pretty much none, but it does not seem to be easy to fix reading things like this : https://community.c9.io/t/cant-attach-gdb-to-process-ptrace-readonly/6343\nBeing unable of even doing a basic memory analysis on a production containerized dotnet core app is definitely a downer. Specially nowadays where there are lot of gen 2 collectable objects like RabbitMQ subscriptions, connected Websockets, etc... You are probably right and this may not be a .NET Core or SOS problem, although it has a potential impact in its perception as a production ready tool (at least for linux containers!). Let me know any findings or even if you definitely discard it as relevant issue in this repo, and I will continue my pilgrimage repo by repo \ud83e\udd20 \nCheers.. Hi there, any update on this? :) Thanks. ",
    "Kikimora": "I don't this this is a dup. Referenced issue solved by using createdump, but here I cannot attach to a running dotnet process.. ",
    "florianislitzer": "Using strace and running it as root I found the following error:\n[pid  3998] bind(254, {sa_family=AF_INET, sin_port=htons(33335), sin_addr=inet_addr(\"0.0.0.0\")}, 16) = -1 EADDRINUSE (Address already in use)\n[pid  3998] socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC, IPPROTO_UDP) = 257\n[pid  3998] sendmsg(257, {msg_name={sa_family=AF_INET, sin_port=htons(33334), sin_addr=inet_addr(\"127.255.255.255\")}, \n    msg_namelen=16, msg_iov=[{iov_base=\"SIXml\\r\\nTerminalReque\"..., iov_len=47}], msg_iovlen=1, msg_controllen=0, \n    msg_flags=MSG_WAITALL|MSG_BATCH|MSG_ZEROCOPY|MSG_CMSG_CLOEXEC|0x2600000}, 0) = -1 EACCES (Permission denied)\nAny hints on this?\n. The socket is generated by the library, which means that I cannot set SocketOptionName to Broadcast\nIs there a way to start the application with a flag which allows broadcasts?. @wfurt so there isnt any way without a library update?. ",
    "EdLichtman": "Hello,\nHere is the entire solution, having pulled it straight from a new project.\nThrowawaySol2.zip\n. Well this is odd I guess restarting my computer fixed this particular error. However I build this solution to try and get a dotnet core application running in a docker container on digital ocean and I'm still unable to resolve host from my other application. \nThe symptom is: I run the program and see this output: \ndocker ps --filter \"status=running\" --filter \"name=dockercompose4513464889098130869_raspberrypilabsolutions_\" --format {{.ID}} -n 1\n92b77e3e623d\ndocker exec -i 92b77e3e623d dotnet  --additionalProbingPath /root/.nuget/packages --additionalProbingPath /root/.nuget/fallbackpackages  bin/Debug/netcoreapp2.1/RaspberryPiLabSolutions.dll\nThe URL '' is not valid.\nrealpath(): Invalid argument\nrealpath(): Invalid argument\nrealpath(): Invalid argument\nrealpath(): Invalid argument\n: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[0]\n      User profile is available. Using '/root/.aspnet/DataProtection-Keys' as key repository; keys will not be encrypted at rest.\nHosting environment: Development\nContent root path: /app\nNow listening on: http://[::]:5123\nApplication started. Press Ctrl+C to shut down.\nHowever, when I try to visit http(s)://localhost:5123 the namespace never resolves and I see an empty screen. attached are the dockerfile, the program file and the docker compose files.\nDotNetHelp.zip\n. Thank you very much. Since it appeared to be a case of solving it by turning off and on again, I will close this issue.. ",
    "gokhanabatay": "\nPlease post the code demonstrating the problem you're hitting directly here (the ZIP file is corrupted).\nNote: AFAIK hash codes are randomized intentionally to NOT be stable across processes (to avoid security issues). If you need to persist hash codes, you need to create your own mechanism.\n\nSorry for the wrong file format, I edited the project file link at original message you can download it again.\nAlso @svick sample is the short(very good) story of what i really try.\n@karelz I have  this issue at same process, not across the process.. ",
    "fredericDelaporte": "@gokhanabatay has initially reported this on NHibernate side (nhibernate/nhibernate-core#1888, ongoing PR nhibernate/nhibernate-core#1891), since this issue affects NHibernate second level cache. (When the kind of classes shown in @svick cleaned-up code example are used with a cache provider using binary serialization on them.)\nThe trouble also occurs with dictionaries (Dictionary<TKey, TValue>), when using as TKey a class like the FilterKey of the above example.\nOn NHibernate side, we consider dodging the trouble by serializing the sets and dictionaries content as arrays, and use them instead of the sets and dictionaries for GetHashCode and Equals implementation, when the call to these methods occurs during deserialization.\n(Note that the trouble described here also applies to the .Net Framework. But we were not having it in NHibernate, because the hashcode was computed once then stored, included in the serialized data. But this older approach was already debatable due to hashcode stability being not guaranteed, and is not valid at all with .Net Core since hashcodes change across processes. So we are changing the logic for recomputing it, and then we get the issue described here.). ",
    "mjwills": "The issue might be that https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Globalization/CompareInfo.cs#L53 and https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/StringComparer.cs#L177 (purposely or otherwise) are out of sync?. ",
    "olmobrutall": "Sorry, moved to https://github.com/dotnet/corefx/issues/33123. ",
    "morganbr": ".NET Core 3.0 will support C++/CLI on Windows. I don't know much about MFC or how that interacts though.. ",
    "NN---": "@morganbr Is it official statement ?\nI didn't see any blogpost about this. ",
    "julre": "@karelz\nDoes that mean it will be possible to use .NET standard and .NET core assemblies from C++/CLI? It would bei awesome to use libraries like Microsoft.Extensions.Logging   in our C++/CLI code!. ",
    "ivaylo5ev": "@KathleenDollard -  yes, I tried using the fully-quallified name of the attribute type as well without success.\n@karelz - I receive the error when building from visual studio as well, which may be using the .NET framework compiler. I have a question -- if I invoke the msbuild.exe process (from VS developer tools console, will it use the framework compiler even when the target framework is set to netstandard2.0? If yes, I could certainly do so and report the results here.\nAlso, I have used some dummy code samples in my issue report not to reveal details for my acutal project. I could create a git repo with a few demo projects where we could experiment with the problem, as the problematic case is trivial enough.\n. Here it is. The solution contains 3 projects - the two libraries with overlapping naming, that targetting netsdandard2.0 and a console application targeting netcoreapp2.1. \n. @karelz , @nguerrera Thanks! I did not know how to do that aliasing with the new SDK. Could you also tell me whether I can alias package references (the MSBuild ones) in the same manner? In my real use case I am referencing the libraries as nuget packages.\nOn a separate note, I am using paket for managing my dependencies. It does seem to support library aliasing according to its documentation, but it does not have any effect on a dotnet sdk project. I am currently working on resolving that matter with the paket guys, but I believe it is useful to have a note on that here as well, since paket users might run into the same issue. . ",
    "Darrenwcox": "On the dot NET Framework but I would assume it would happen on the core as\nwell.\nOn Wed, Oct 31, 2018, 11:56 AM Karel Zikmund notifications@github.com\nwrote:\n\nDo you have troubles on .NET Framework or .NET Core? (did you try both?)\nDo you have same problems in other environments? (different printer,\ndifferent machine)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/2034#issuecomment-434739290, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AqjdfVtbA_eKKYPs8I8YAV_xo--9wfbLks5uqcgzgaJpZM4YD_hu\n.\n. And also I've tried it on Windows 7 and Windows 10 but I only have the one\nprinter that can do stapling. I assume this problem is happening other\npeople since other people have reported it on stack overflow.\n\nOn Wed, Oct 31, 2018, 12:59 PM Darren Cox darrencox7777@gmail.com wrote:\n\nOn the dot NET Framework but I would assume it would happen on the core as\nwell.\nOn Wed, Oct 31, 2018, 11:56 AM Karel Zikmund notifications@github.com\nwrote:\n\nDo you have troubles on .NET Framework or .NET Core? (did you try both?)\nDo you have same problems in other environments? (different printer,\ndifferent machine)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/2034#issuecomment-434739290, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AqjdfVtbA_eKKYPs8I8YAV_xo--9wfbLks5uqcgzgaJpZM4YD_hu\n.\n\n\n. \n",
    "TrieBr": "I have generated a new p8 file and attached the file in a .zip.\ntestkey.zip\nHere are the hex dumps of the 32 byte arrays X,Y,D.\nQ.X\n6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296\nQ.Y\n4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5\nD\n9F9BD156374FB78F3D69EFF10DEF8C296EC4F03EACA42F4257130D0CE9316FCD\nLet me know if there is anything else I can help with to help understand this issue\n. @furoraest Unfortunately I'm using other libraries that require native .NET key objects, and .NET does not support reading keys from PEM encoded files (as far as I know), which is why I needed BouncyCastle.\n@bartonjs \nThanks for the insight. I think you are spot on. Windows must be ignoring my (incorrect) coordinates I set on Q, if D is set. Unix implementations simply fail.\nFor anyone else that arrives here, I was able to solve this by generating the public key with BouncyCastle to compute Q manually and then pass Q coordinates to the .NET ECParameters:\n```\n // Compute Public Key (Q)\n                Org.BouncyCastle.Math.EC.ECPoint q = ecPrivateKeyParameters.Parameters.G.Multiply(ecPrivateKeyParameters.D).Normalize();\n           // Convert the BouncyCastle key to a Native Key.\n           var msEcp = new ECParameters();\n            msEcp.Curve = ECCurve.NamedCurves.nistP256;\n            msEcp.Q.X = q.AffineXCoord.GetEncoded();\n            msEcp.Q.Y = q.AffineYCoord.GetEncoded();\n            msEcp.D = d;\n            return ECDsa.Create(msEcp);\n\n```\nI would like to see the Windows/Unix implementations more consistent (eg have the Unix implementation generate Q automatically) but I can understand this is probably quite a small use case.\n. ",
    "mbuchok": "Yes, just like that concept ... but doesn't work in a Linux environment since it appears to relate strictly to IIS.\n... unless, however, maybe just running a command to stop the service would work just as well? Would 'systemctl stop myservice' have the same effect? Mind you, the app wouldn't serve an offline page - would be nice to serve a page to the user saying a site is down for maintenance or something.. ",
    "rgelb": "\nWhich version of .NET Core do you use? \n\nI believe it was some version of .NET Core 2.1.x.  I don't remember exactly the version that was installed during the build/publish cycle.  And I am not clear as to how to interrrogate this information from the binaries deployed on the raspberry pi.\n\nWhich Linux distro do you use? (Only certain distros are supported on arm)\n\nThe distro is Raspbian, which comes with the Raspberry.  The version is \"Raspbian GNU/Linux 8 (jessie)\".  Based on wiki page about Raspbian, it is based on Debian 8, which is on the supported list (from link you provided).  And...I've seen Hanselman install apps to it on his blog.  \n\nAre you able to collect crash dumps? (some Linux background will be needed for that)\n\nI do not have a linux background and it hasn't failed since that one time, but if you provide me instructions, I'll be happy to do that.  \n\ncc @wfurt @janvorli for additional guidance / pointers\n\n. > That one was fixed in 2.1.5: dotnet/coreclr#18486 (comment) ... @rgelb can you please try that version? (and check that you used earlier 2.1 version?) Thanks!\n@karelz I'll give it a shot and report if the problem recurs.\n. @karelz Yes, it's running on it now.  It hasn't failed so far.  I've compiled with 2.1.403 SDK and 2.1.5 runtime. I think it's safe to shut this issue down.. ",
    "mailfcly": "build with\nVisual Studio 2017 15.8.7\n.NET Core 2.1\nmy code:\nConsoleApp1.zip\n. ",
    "sdmaclea": "I opened dotnet/coreclr#20979 to address this inconvenience.\nI will post a work-around here then close this issue.. @mailfcly The current releases require adding a resolve handler.  As mentioned above.  This is sample code that worked for me based on @jeffschwMSFT's suggestion.\n```C#\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(AssemblyResolveEventHandler);\n        var assembly = Assembly.LoadFile(@\"C:\\Users\\stmaclea\\issues\\2041\\ConsoleApp1\\ConsoleApp1\\ClassLibrary2\\bin\\Debug\\netcoreapp2.1\\ClassLibrary2.dll\");\n        var a = assembly.GetManifestResourceNames();\n\n        foreach(var type in assembly.GetTypes())\n        {\n            if(type.FullName.Contains(\"ClassLibrary2.Class1\"))\n            {\n                var itemList = Activator.CreateInstance(type) as ClassLibrary1.IClass1;\n                itemList.OutputText();\n            }\n        }\n    }\n\n    static System.Reflection.Assembly AssemblyResolveEventHandler(object sender, ResolveEventArgs args)\n    {\n        if (args.Name == \"ClassLibrary2.resources, Version=1.0.0.0, Culture=en, PublicKeyToken=null\")\n        {\n            return Assembly.LoadFile(@\"C:\\Users\\stmaclea\\issues\\2041\\ConsoleApp1\\ConsoleApp1\\ClassLibrary2\\bin\\Debug\\netcoreapp2.1\\en\\ClassLibrary2.resources.dll\");\n        }\n\n        return null;\n    }\n}\n\n}\n```\nThis issue belongs in the coreclr repo.  Closing here as dotnet/coreclr#20979 is opened to address the long term fix.. ",
    "cesna": "@karelz thanks for your answer. Yes, I am using interop with unmanaged code lib, but I tested with same lib managed code version, and app still crashes. Another lib in my app, that possibly is using interop is Microsoft.Data.Sqlite, but probably this is not the cause, because it is called only a few times on app start and is not used in HTTP requests processing. There are several types of physical machines, but the older ones with less resources are more prone to crash (32gb ram, 92% used). Some cpu info: \n```\nIntel(R) Xeon(R) CPU E5645  @ 2.40GHz\nL1d cache:             32K\nL1i cache:             32K\nL2 cache:              256K\nL3 cache:              12288K\nNUMA node0 CPU(s):     1,3,5,7,9,11,13,15,17,19,21,23\nNUMA node1 CPU(s):     0,2,4,6,8,10,12,14,16,18,20,22\n```. @OliverDjur nope, but with core 2.2 version, crash count decreased significantly.. ",
    "OliverDjur": "Did you find a solution to this?. ",
    "sirblenheim": "What URL are you using for the proxy address? The error seems to indicate that you are trying to use a proxy over the HTTPs protocol. . ",
    "pmadusud": "\n      What URL are you using for the proxy address? The error seems to indicate that you are trying to use a proxy over the HTTPs protocol.\n\nThe URL provided for the proxy address is the proxy server address along with port. For example. :port. As you can see above, I am not trying to connect to proxy server over https portal.\n. >           What URL are you using for the proxy address? The error seems to indicate that you are trying to use a proxy over the HTTPs protocol.\nThe URL provided for the proxy address is the proxy server address along with port. For example. :port. As you can see above, I am not trying to connect to proxy server over https portal.\n. Karelz, as mentioned in my above comment, I am not using a https Proxy. The proxy address is just the server name & port. Using this proxy server, I am connecting to a https end point. Please let me know if I am missing something here. Also, let me know if you would need any more information.. Karelz, as mentioned in my above comment, I am not using a https Proxy. The proxy address is just the server name & port. Using this proxy server, I am connecting to a https end point. Please let me know if I am missing something here. Also, let me know if you would need any more information.. Responses to your questions below.\nDoes the same code work on the same machine from .NET Framework? - Yes with .NET Framework it works. In fact i don't need to use WebProxy itself as I can use the Defaultproxy in the app.config to ensure the application works with the local enterprise proxy.\nDoes it fail locally or only in the cloud as Azure function? This fails only locally because the issue is with the local enterprise proxy.\nWhich OS do you use? Did you check if it is specific failure to the OS? I use Windows 7 and I am not sure if this is a OS specific issue.\n\nI also checked the URI which i am sending to the WebProxy. \nIf the URI is provided like the below\nAddress = new Uri($\"servername:port\")\nthen i get the error \"Only the 'http' scheme is allowed for proxies\". \nIf the URI is provided like the below\nAddress = new Uri($\"http://servername/proxy.pac\")\nthen i get the error System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.\nAny pointers to resolve this will be great. . Responses to your questions below.\nDoes the same code work on the same machine from .NET Framework? - Yes with .NET Framework it works. In fact i don't need to use WebProxy itself as I can use the Defaultproxy in the app.config to ensure the application works with the local enterprise proxy.\nDoes it fail locally or only in the cloud as Azure function? This fails only locally because the issue is with the local enterprise proxy.\nWhich OS do you use? Did you check if it is specific failure to the OS? I use Windows 7 and I am not sure if this is a OS specific issue.\nI also checked the URI which i am sending to the WebProxy. \nIf the URI is provided like the below\nAddress = new Uri($\"servername:port\")\nthen i get the error \"Only the 'http' scheme is allowed for proxies\". \nIf the URI is provided like the below\nAddress = new Uri($\"http://servername/proxy.pac\")\nthen i get the error System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.\nAny pointers to resolve this will be great. . > > I also checked the URI which i am sending to the WebProxy.\n\n\nIf the URI is provided like the below\nAddress = new Uri($\"servername:port\")\nthen i get the error \"Only the 'http' scheme is allowed for proxies\".\n\nIt is invalid to specify a proxy using just the \"servername:port\" format. That is not a valid URI since it doesn't have a scheme. You must specify it as \"http://servername:port\"\n\nthen i get the error \"Only the 'http' scheme is allowed for proxies\".\n\nThe error that you're getting is an incorrect error message, unfortunately. That is probably a different bug of sorts.\nI would suggest that you retry this scenario using the latest .NET 2.1.6 release which contains all known fixes for proxies and enterprise authentication scenarios.\nhttps://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6-download.md\n\nBy changing the Uri as http://servername:port, i am able to get the proper response. Thanks for the tip. \nI would like to know if there is some way of having an equivalent of  in .NET Framework in .NET Core. This is to have a better solution to deal with Local Enterprise proxy which will not be a scenario when it is deployed in Azure Functions. Any inputs on this?. > > I also checked the URI which i am sending to the WebProxy.\n\n\nIf the URI is provided like the below\nAddress = new Uri($\"servername:port\")\nthen i get the error \"Only the 'http' scheme is allowed for proxies\".\n\nIt is invalid to specify a proxy using just the \"servername:port\" format. That is not a valid URI since it doesn't have a scheme. You must specify it as \"http://servername:port\"\n\nthen i get the error \"Only the 'http' scheme is allowed for proxies\".\n\nThe error that you're getting is an incorrect error message, unfortunately. That is probably a different bug of sorts.\nI would suggest that you retry this scenario using the latest .NET 2.1.6 release which contains all known fixes for proxies and enterprise authentication scenarios.\nhttps://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6-download.md\n\nBy changing the Uri as http://servername:port, i am able to get the proper response. Thanks for the tip. \nI would like to know if there is some way of having an equivalent of  in .NET Framework in .NET Core. This is to have a better solution to deal with Local Enterprise proxy which will not be a scenario when it is deployed in Azure Functions. Any inputs on this?. oops.. sorry...  setting in App.config which is available in ,NET Framework. Is there an equivalent of that in .NET Core. . oops.. sorry...  setting in App.config which is available in ,NET Framework. Is there an equivalent of that in .NET Core. . @davidsh thanks for this. I did try to use http.proxy setting in Visual Studio Code. However, .NET Core doesn't seem to use that setting. I guess that is the one which you referred in the above note about Windows .NET core doesn't support environment variable like http_proxy. Please correct me if I am wrong.. @davidsh thanks for this. I did try to use http.proxy setting in Visual Studio Code. However, .NET Core doesn't seem to use that setting. I guess that is the one which you referred in the above note about Windows .NET core doesn't support environment variable like http_proxy. Please correct me if I am wrong.. @davidsh thanks. However, it doesn't seem to use the standard IE setting. I get a 407 proxy authentication error. I am using the latest release of Visual Studio Code for development.. @davidsh thanks. However, it doesn't seem to use the standard IE setting. I get a 407 proxy authentication error. I am using the latest release of Visual Studio Code for development.. I have tried both the options below.\nOption 1\n```c#\nvar httpClientHandler = new HttpClientHandler()\n{\n                DefaultProxyCredentials = CredentialCache.DefaultNetworkCredentials\n};\nHttpClient client = new HttpClient(httpClientHandler);\n``            \n**Option 2**HttpClient client = new HttpClient();`\nBoth the options either returns the below error or in some cases 407 Proxy Authentication error.\nA connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond\nI am able to resolve the above error only by explicitly providing the proxy like the below. \n```c#\nvar proxy = new WebProxy()\n{\n                Address = new Uri($\"http://{servername}:{port}\"),\n                UseDefaultCredentials = false,\n                BypassProxyOnLocal = true,\n            Credentials = System.Net.CredentialCache.DefaultNetworkCredentials\n\n};\nvar httpClientHandler = new HttpClientHandler()\n{\n                Proxy = proxy,\n                DefaultProxyCredentials = CredentialCache.DefaultNetworkCredentials\n};\nHttpClient client = new HttpClient(httpClientHandler);\nAs mentioned, the standard IE setting for Proxy doesn't seem to be used and also the http.proxy user setting in Visual Studio Code.. I have tried both the options below.\n**Option 1**c#\nvar httpClientHandler = new HttpClientHandler()\n{\n                DefaultProxyCredentials = CredentialCache.DefaultNetworkCredentials\n};\nHttpClient client = new HttpClient(httpClientHandler);\n``            \n**Option 2**HttpClient client = new HttpClient();`\nBoth the options either returns the below error or in some cases 407 Proxy Authentication error.\nA connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond\nI am able to resolve the above error only by explicitly providing the proxy like the below. \n```c#\nvar proxy = new WebProxy()\n{\n                Address = new Uri($\"http://{servername}:{port}\"),\n                UseDefaultCredentials = false,\n                BypassProxyOnLocal = true,\n            Credentials = System.Net.CredentialCache.DefaultNetworkCredentials\n\n};\nvar httpClientHandler = new HttpClientHandler()\n{\n                Proxy = proxy,\n                DefaultProxyCredentials = CredentialCache.DefaultNetworkCredentials\n};\nHttpClient client = new HttpClient(httpClientHandler);\n```\nAs mentioned, the standard IE setting for Proxy doesn't seem to be used and also the http.proxy user setting in Visual Studio Code.. Responses for the questions...\nWhat version of Windows OS are you running? Please open up a CMD.EXE window and type \"ver\".\nMicrosoft Windows [Version 6.1.7601]\nWhat version of .NET Core are using? Type \"dotnet --info\" from a CMD.EXE window.\n.NET Core SDK (reflecting any global.json):\n Version:   2.1.403\n Commit:    04e15494b6\nRuntime Environment:\n OS Name:     Windows\n OS Version:  6.1.7601\n OS Platform: Windows\n RID:         win7-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\nHost (useful for support):\n  Version: 2.1.5\n  Commit:  290303f510\n.NET Core SDKs installed:\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\nPlease show a screenshot of your IE settings dialog for proxy settings.\n\n```\nWhat happens if you switch to the older HTTP stack implementation? Add the following line of code to your application:\nAppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false);\n```\nThere is no difference by adding the above line of code. I still get the same error.\n. Responses for the questions...\nWhat version of Windows OS are you running? Please open up a CMD.EXE window and type \"ver\".\nMicrosoft Windows [Version 6.1.7601]\nWhat version of .NET Core are using? Type \"dotnet --info\" from a CMD.EXE window.\n.NET Core SDK (reflecting any global.json):\n Version:   2.1.403\n Commit:    04e15494b6\nRuntime Environment:\n OS Name:     Windows\n OS Version:  6.1.7601\n OS Platform: Windows\n RID:         win7-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\nHost (useful for support):\n  Version: 2.1.5\n  Commit:  290303f510\n.NET Core SDKs installed:\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\nPlease show a screenshot of your IE settings dialog for proxy settings.\n\n```\nWhat happens if you switch to the older HTTP stack implementation? Add the following line of code to your application:\nAppContext.SetSwitch(\"System.Net.Http.UseSocketsHttpHandler\", false);\n```\nThere is no difference by adding the above line of code. I still get the same error.\n. > Thank you for the information.\n\nWhat happens if you change the IE settings so that instead of specifying \"Use automatic configuration script\", you instead type the name of the server and the port number into the \"Use a proxy server for your LAN\" section. Then uncheck the \"Use automatic configuration script\" and check the \"Use a proxy server for LAN\" checkbox.\nIn all cases, make sure you use the following pattern for setting up HttpClientHandler, HttpClient:\n```cs\nvar httpClientHandler = new HttpClientHandler()\n{\n    DefaultProxyCredentials = CredentialCache.DefaultNetworkCredentials\n};\nHttpClient client = new HttpClient(httpClientHandler);\n```\n\nI still get the same issue if I explicitly provide the proxy address in LAN Settings. Please note, I am not able to remove the configuration script setting as it is controlled by corporate admin. . > Thank you for the information.\n\nWhat happens if you change the IE settings so that instead of specifying \"Use automatic configuration script\", you instead type the name of the server and the port number into the \"Use a proxy server for your LAN\" section. Then uncheck the \"Use automatic configuration script\" and check the \"Use a proxy server for LAN\" checkbox.\nIn all cases, make sure you use the following pattern for setting up HttpClientHandler, HttpClient:\n```cs\nvar httpClientHandler = new HttpClientHandler()\n{\n    DefaultProxyCredentials = CredentialCache.DefaultNetworkCredentials\n};\nHttpClient client = new HttpClient(httpClientHandler);\n```\n\nI still get the same issue if I explicitly provide the proxy address in LAN Settings. Please note, I am not able to remove the configuration script setting as it is controlled by corporate admin. . @davidsh and @karelz, sorry I have been away and I have not yet managed to get any logs yet. Also, the current IT environment doesn't allow me to install software, I will check if I can provide Wireshark traces. However, if not, is there any other way we can resolve this?. @davidsh and @karelz, sorry I have been away and I have not yet managed to get any logs yet. Also, the current IT environment doesn't allow me to install software, I will check if I can provide Wireshark traces. However, if not, is there any other way we can resolve this?. ",
    "rido-min": "@John0King you can always use your custom entry point to start a WPF app:\n\nRemove the StartupUri from App.xaml\nAdd the next Program.cs file\n\ncs\n[STAThread]\nstatic void Main(string[] args)\n{\n    App a = new App();\n    a.StartupUri = new Uri(\"/MainWindow.xaml\", UriKind.Relative);\n    a.Run();\n}\n3. Change the project startup in your csproj\nxml\n <StartupObject>MyWpfApp.Program</StartupObject>`\nIs this a request to change the default template?\n. There are some caveats with Oren's proposal, since it requires the SDK to be installed and also will block retargeting experiences (that also connects the delivery with the UX).\nThis is why we are proposing NuGet packages that can be delivered independently from the SDK, and also allows to declare dependencies to System.Runtime assemblies.. ",
    "thomasclaudiushuber": "I just want to add here that you can control whether an entrypoint is generated or not with the App.xaml's Build Action. It's ApplicationDefinition by default, which will generate the Main-method. If you set it to Page, you won't get a Main method and you can implement your own file. \nAs linked above by @John0King: Discussion continued on https://github.com/dotnet/wpf/issues/192. ",
    "dannyjacosta": "@svick, Indeed it was something on my side. I get the expected error after rebooting my machine. I spent hours struggling with this issue and the one things that I had not done was rebooting. Thank you for your time.. This not an issue. It was something on my side.. ",
    "kjsingh": "dnc and anc? \ud83d\ude03 . ",
    "mattmon1": "Sorry, a correction... it typed that I ran apt.... which should read that I ran apk. Tried apk add liststdc++\nI can find the package with a search but Alpine shell returns 'unsatisfiable constraint' when I try to install the package\n\n. fwiw, here's a list of the installed packages. It's pretty much the Alpine Linux default set since the only 2 package install's i tried failed per my earlier comments.\n\n. and i mistyped - I did add the hvtools package\n. Mistyped \"the only 2 package install's i tried failed per my earlier comments.\" - i did install hvtools.\nRunning:\napk add liststdc++\napk add libgcc\nwithout version numbers worked. Now, when I run dotnet, i get the expected usage output.\n\nFor .NET Core 2.1.2 to work on Alpine Linux 3.8.1, these 2 packages are needed in addition to running tar on the runtime distributable.  Feeling a little rusty with my Linux commands at the moment... Thanks for you help in resolving this issue. \n. ",
    "tpardhu561": "@karelz Expression.dll is part of our app and will be generated during the build process.\nYes, all the prereqs were installed on Jenkins machine and I'm able to build other apps.\nI tried but unable to reproduce the issue. I see this issue only when built thru a pipeline in Jenkins but works fine with a freestyle job in Jenkins.\nAs per logs, I get an error message that the DLL was not found but in reality, I can see the DLL is present in requested path.\nI'm not a Dotnet developer but a DevOps Engineer trying to figure out the issue.. @karelz I'm trying to get app Developer to discuss.\nMeanwhile could you please provide the prereqs to be installed on Jenkins. I just want to verify that everything is taken care of.. We didn't knew what was the exact root cause but Rebuilding the project files and Solution file resolved our issue.\nThank you. ",
    "jarz": "I'm unable to restore an internal NuGet package from Azure DevOps Artifacts with SDK 2.1.500, but SDK 2.1.403 works. Should I create an issue here or in another repo?. dotnet restore works fine locally. \nConsidering the build works if I use 2.1.403 instead of 2.1.500, there must be a breaking change somewhere.... The exception is thrown inside EntityFrameworkCore code. \nAre you able to see where EF Core is throwing this in your application code? I'm thinking you're missing configuration in your OnModelCreating (or equivalent) method to denote the identity property/column for a class.. ",
    "megafinz": "Seems like after update to 2.1.6 our CI silently stopped running unit tests with the following message:\nSkipping running test for project <ProjectPathAndName>. To run tests with dotnet test add \"<IsTestProject>true<IsTestProject>\" property to project file.\nCI pulled the following docker image when tests stopped working (it was on November 13th):\nPulling docker image microsoft/dotnet:2.1-sdk ...\nUsing docker image sha256:732ac6c02e837b14d3ff36f5b2e3d732a7a52c029e489e1ba905996ddf05f358 for microsoft/dotnet:2.1-sdk ...\nPrevious image doesn't seem to have this behavior, tests worked fine:\nUsing docker image sha256:6baac5bd0ea2ec449a4643e27d701ce06f8d2b2bc2b150a425c59015e5204dc3 for microsoft/dotnet:2.1-sdk .... @karelz @dsplaisted I was trying to find a repro but had no luck. I believe new version of SDK ignores unit test project that have no IsTestProject property set to true. This property is set either explicitly in project file or by referencing Microsoft.NET.Test.Sdk package (which we do reference actually). I discovered that if this package is not present on disk when tests are run, then the aforementioned message appears and tests are skipped. So I believe our problem is caused by some issue with our CI, which was masked by previous SDK still running tests in projects that are not actually marked by IsTestProject.. ",
    "joeaudette": "fyi, broken link for release notes here: https://www.microsoft.com/net/download. ",
    "liuweizzuie": "I find the solution in StackOverflow.\nbecause I build a StreamContent, It can't work. then I build a StringContent, it works fine.\nthanks. . ",
    "vlapenkov": "It solved when i installed runtime and hosting bundle from https://www.microsoft.com/net/download/dotnet-core/2.1\nI hadn't runtime yet. It solved when i installed runtime and hosting bundle from https://www.microsoft.com/net/download/dotnet-core/2.1\nI hadn't runtime yet. ",
    "jemmfi": "I have the same problem. \"dotnet restore\" fails, if my .NET Core Tool Installers installs Core SDK 2.1.500 (this is in Azure DevOps / cloud).\nWhen I change the Code SDK version to  2.1.403, the same pipeline works with no other changes. This happens in two different build pipelines that I have tried. However, nuget.org -packages are restored normally.\nThe error with 2.1.500:\n2018-11-16T05:21:02.3133383Z        (Restore target) -> \n2018-11-16T05:21:02.3133631Z          C:\\hostedtoolcache\\windows\\dncs\\2.1.500\\x64\\sdk\\2.1.500\\NuGet.targets(114,5): error : Unable to load the service index for source **{private feed}**/nuget/v3/index.json. \n2018-11-16T05:21:02.3133798Z        C:\\hostedtoolcache\\windows\\dncs\\2.1.500\\x64\\sdk\\2.1.500\\NuGet.targets(114,5): error :   Response status code does not indicate success: 401 (Unauthorized).\nStack trace:\n2018-11-16T05:21:02.3017453Z          NuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source {private feed}/nuget/v3/index.json. ---> System.Net.Http.HttpRequestException: Response status code does not indicate success: 401 (Unauthorized).\n2018-11-16T05:21:02.3018087Z             at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()\n2018-11-16T05:21:02.3018510Z             at NuGet.Protocol.HttpSource.<>c__DisplayClass14_0`1.<<GetAsync>b__0>d.MoveNext()\n2018-11-16T05:21:02.3018970Z          --- End of stack trace from previous location where exception was thrown ---\n2018-11-16T05:21:02.3019302Z             at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token)\n2018-11-16T05:21:02.3019667Z             at NuGet.Protocol.HttpSource.GetAsync[T](HttpSourceCachedRequest request, Func`2 processAsync, ILogger log, CancellationToken token)\n2018-11-16T05:21:02.3020025Z             at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResourceV3(SourceRepository source, DateTime utcNow, ILogger log, CancellationToken token)\n2018-11-16T05:21:02.3020355Z             --- End of inner exception stack trace ---\n2018-11-16T05:21:02.3020683Z             at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResourceV3(SourceRepository source, DateTime utcNow, ILogger log, CancellationToken token)\n2018-11-16T05:21:02.3021031Z             at NuGet.Protocol.ServiceIndexResourceV3Provider.TryCreate(SourceRepository source, CancellationToken token)\n2018-11-16T05:21:02.3023988Z             at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T](CancellationToken token)\n2018-11-16T05:21:02.3024143Z             at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T]()\n2018-11-16T05:21:02.3024853Z             at NuGet.Protocol.HttpFileSystemBasedFindPackageByIdResourceProvider.TryCreate(SourceRepository sourceRepository, CancellationToken token)\n2018-11-16T05:21:02.3025091Z             at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T](CancellationToken token)\n2018-11-16T05:21:02.3025466Z             at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T]()\n2018-11-16T05:21:02.3025570Z             at NuGet.Commands.SourceRepositoryDependencyProvider.EnsureResource()\n2018-11-16T05:21:02.3025680Z             at NuGet.Commands.SourceRepositoryDependencyProvider.FindLibraryCoreAsync(LibraryRange libraryRange, NuGetFramework targetFramework, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\n2018-11-16T05:21:02.3025808Z             at NuGet.Commands.SourceRepositoryDependencyProvider.<>c__DisplayClass19_0.<<FindLibraryAsync>b__0>d.MoveNext()\n2018-11-16T05:21:02.3025915Z          --- End of stack trace from previous location where exception was thrown ---\n2018-11-16T05:21:02.3026047Z             at NuGet.Commands.SourceRepositoryDependencyProvider.FindLibraryAsync(LibraryRange libraryRange, NuGetFramework targetFramework, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\n2018-11-16T05:21:02.3026178Z             at NuGet.DependencyResolver.ResolverUtility.<>c__DisplayClass7_1.<<FindLibraryFromSourcesAsync>b__0>d.MoveNext()\n2018-11-16T05:21:02.3026271Z          --- End of stack trace from previous location where exception was thrown ---\n2018-11-16T05:21:02.3026380Z             at NuGet.DependencyResolver.ResolverUtility.FindLibraryFromSourcesAsync(LibraryRange libraryRange, IEnumerable`1 providers, Func`2 action)\n2018-11-16T05:21:02.3026499Z             at NuGet.DependencyResolver.ResolverUtility.FindLibraryByVersionAsync(LibraryRange libraryRange, NuGetFramework framework, IEnumerable`1 providers, SourceCacheContext cacheContext, ILogger logger, CancellationToken token)\n2018-11-16T05:21:02.3026733Z             at NuGet.DependencyResolver.ResolverUtility.FindLibraryMatchAsync(LibraryRange libraryRange, NuGetFramework framework, String runtimeIdentifier, GraphEdge`1 outerEdge, IEnumerable`1 remoteProviders, IEnumerable`1 localProviders, IEnumerable`1 projectProviders, IDictionary`2 lockFileLibraries, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\n2018-11-16T05:21:02.3026909Z             at NuGet.DependencyResolver.ResolverUtility.FindLibraryEntryAsync(LibraryRange libraryRange, NuGetFramework framework, String runtimeIdentifier, GraphEdge`1 outerEdge, RemoteWalkContext context, CancellationToken cancellationToken)\n2018-11-16T05:21:02.3027038Z             at NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge)\n2018-11-16T05:21:02.3027188Z             at NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge)\n2018-11-16T05:21:02.3027331Z             at NuGet.Commands.ProjectRestoreCommand.WalkDependenciesAsync(LibraryRange projectRange, NuGetFramework framework, String runtimeIdentifier, RuntimeGraph runtimeGraph, RemoteDependencyWalker walker, RemoteWalkContext context, CancellationToken token)\n2018-11-16T05:21:02.3027493Z             at NuGet.Commands.ProjectRestoreCommand.TryRestoreAsync(LibraryRange projectRange, IEnumerable`1 frameworkRuntimePairs, NuGetv3LocalRepository userPackageFolder, IReadOnlyList`1 fallbackPackageFolders, RemoteDependencyWalker remoteWalker, RemoteWalkContext context, Boolean forceRuntimeGraphCreation, CancellationToken token, TelemetryActivity telemetryActivity)\n2018-11-16T05:21:02.3027655Z             at NuGet.Commands.RestoreCommand.ExecuteRestoreAsync(NuGetv3LocalRepository userPackageFolder, IReadOnlyList`1 fallbackPackageFolders, RemoteWalkContext context, CancellationToken token, TelemetryActivity telemetryActivity)\n2018-11-16T05:21:02.3028163Z             at NuGet.Commands.RestoreCommand.ExecuteAsync(CancellationToken token)\n2018-11-16T05:21:02.3028348Z             at NuGet.Commands.RestoreRunner.ExecuteAsync(RestoreSummaryRequest summaryRequest, CancellationToken token)\n2018-11-16T05:21:02.3028465Z             at NuGet.Commands.RestoreRunner.ExecuteAndCommitAsync(RestoreSummaryRequest summaryRequest, CancellationToken token)\n2018-11-16T05:21:02.3028558Z             at NuGet.Commands.RestoreRunner.CompleteTaskAsync(List`1 restoreTasks)\n2018-11-16T05:21:02.3028671Z             at NuGet.Commands.RestoreRunner.RunAsync(IEnumerable`1 restoreRequests, RestoreArgs restoreContext, CancellationToken token)\n2018-11-16T05:21:02.3028781Z             at NuGet.Commands.RestoreRunner.RunAsync(RestoreArgs restoreContext, CancellationToken token)\n2018-11-16T05:21:02.3028882Z             at NuGet.Build.Tasks.RestoreTask.ExecuteAsync(ILogger log). ",
    "h0730303779": "\n@h0730303779 what is \"20W\" string? Can you please post full compilable repro?\nWhat does it mean it is unable to debug? (I don't understand the non-English text in your screenshot)\n\nsorry   .  200,000 string length. > Here's what I got:\n\n\n0 references 10 authors, o items change 10 exceptions static void Main(string [] args)e::strings \"organize\\: 7a579db2-f4e3-489c-aed9-d39cf? Console. WriteLine (s. Length); currently not The executable code of the target code type of the debugger that has no associated debuggers may include: conditional compilation, compiler optimization, or the current debugger code type does not support the target architecture of this line ConsoleAppl.Program.Main 0 references 10 authors, o items change 10 exceptions, static void Main(string [] args)\n\n\n\ntks  ,right, is it abnormal\n variable  's'  Arbitrary length string 200,000 plus\n. > @h0730303779 what is \"20W\" string? Can you please post full compilable repro?\n\nWhat does it mean it is unable to debug? (I don't understand the non-English text in your screenshot)\n\n\nsorry , My English is poor\n. > This is a known Roslyn bug: dotnet/roslyn#20118\n\nA workaround is to split the string into many smaller strings, eg.:\ncs\nstring s = \"abc.................\" +\n\"def..................\" +\n...etc...\n\"zzz.............\";\n\nthank you for your reply\nI will put it in the database in the production environment.\n. ",
    "serdam55": "Thanks all you guys for the answers. I saw your answer @omajid and I'll try to explain you what the application does:\nEssentially the app is a web crawler so it must run 24h on the server, initially the application worked in this way then I decided to create a menu which I can use for interactive with the app and this works as well.\nThe problem right now is that I need to run the crawler as a system service, so using the supervisor and I understood from you that's not possible.\nSo apparently right now I see only two choice:\n\nCheck if the input is redirected using this property and start directly the crawler method. If the input is redirected means that the application is running as system service. Not sure where I need place that property though.\nCreate something like a cronjob that start the console with dotnet AppRazen.dll command every time the system is not executing it.\n\nMaybe there are other ways to handle that. I added you a +1 on so.\nTell me what you think. Thanks.. @omajid \n\nPersonally, I would add a separate flag like --daemon or --non-interactive that gets passed by the .service file to make this explicit.\n\nThe flag passed can be read in the main method? I never used a similar thing, could you please show a little example, I'll be grateful.\n\nIs this command supposed to configure the crawler? Or just to start it if the crawler is not running?\n\nThe service that I have already have Restart=always, I just need to check if the crawler is running, this is the daemon configuration:\n```\n[Unit]\nDescription = Daemon description\n[Service]\nExecStart = /usr/bin/dotnet /home/root/Desktop/publish/AppRazen.dll\nWorkingDirectory= /home/root/Desktop/publish\nRestart = always\nRestartSec = 3\n[Install]\nWantedBy = multi-user.target\n```\nI can actually use the logic of the flags, but is possible display in the journalctl only the log of a specific instance? Let me explain better: when I run AppRazen.dll the software will start 10 different tasks, each of them generate a different log in the console. Basically when I execute journalctl -fu service-name I'll get the navigation menu with the ReadKey error, using your logic I could pass a flag (even if is possible) to journalctl -fu swp and display a single instance of the task? \nBecause I can access to the log of a specific instance through the navigation menu, if I cannot use it I should use the flag.\nShould I also manage the already running instance of the service though (?). I don't know, maybe a further explaination could help me to understand better.\nThanks in advance.. ",
    "tiayi": "Oh, that's helpful. Thank you.. ",
    "dcpartners": "@karelz Updated already. See original post.. ",
    "sergey-m-pega": "\nDoes it happen when you change:\n\nServer to .NET Framework\nClient to .NET Core\nUse HttpClient APIs instead (esp. on .NET Core)\n\n\nOur product's client is is locked in to .NET and server to .NET Core so I'm not sure chasing different test conditions is practical in this case. FTR, test case is already attached with this submission.. Our client used to use HttpClient but once problems cropped up we switched to \"older\" WebClient hoping it'd help. It didn't. Everything I tested points at .NET Core server being the issue but I've been wrong before.\nSorry but I don't have the bandwidth to iron out all test permutations you mentioned. That's why I put together an isolated test case, which demonstrates a specific problem, which other tests you suggested may not.\nI've got to ask, is this the right project to submit this issue?. Tried it with HttpClient last night with the same outcome. I built a test client similar to .NET 4.6.1 one included in the test submission, but one built as .NET Core console app instead, with the same logic using HttpClient. So just as I suspected everything points at the server side.. What's the next step? Thanks.. Understood. Thanks. It's a delicate balance between annoying someone and asking for help. :). Will try to collect a dump. Assuming it's the same issue, are there any workarounds exist for this issue in the mean time, short of disabling the response compression entirely? Thanks.. Is there post that describes on how to collect it so that it's in the format you expect it to be? Thanks.. If raising that limit is guaranteed to fix it then I'd go for it. The last thing we want is to run into occasional production lock ups, which I suspect is something that could still happen being dependent on server's load. So that leaves us with the same option we've already implemented - disabling response compression entirely. That's a far from ideal solution though.. We'll wait til 3.0 to revisit it then. Thanks for your help.. ",
    "gpomykala": "Hello, \nThanks for a quick reply. I appreciate that it's already fixed in netcore30. It seems like the only affected target is netcore2.1 - the same code was confirmed to work fine on .net up to 4.6.2, mono 4/5 an netcore2.0. \nCan it be fixed as part of netcore2.1 service release?\nCheers,\nGreg. @AndyAyersMS The impact is that the language fundamentals that are taken for granted suddenly return unexpected results. There are workarounds once the impacted user figures out what is happening, but it may go unnoticed in a so-so tested system (why would someone test the correctness of CLR?).\nMy app had been patched with a workaround therefore it is not a blocker for me anymore - if that was your question.\nBest regards,\nGreg. Thanks a lot. I appreciate that you took care of this bug.\nCheers,\nGreg\nczw., 29.11.2018, 20:59: Andy Ayers notifications@github.com napisa\u0142(a):\n\nFYI this bug should be fixed in the 2.1.8 / 2.2.1 servicing updates. Not\nsure when these will be out; it could be a month or two.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/2070#issuecomment-442972409, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AFf4ALmH1zOdOzPCl1qyi3mkoJv6mLuRks5u0DyYgaJpZM4YrAo6\n.\n. \n",
    "AndyAyersMS": "Seems like it could be ~~dotnet/coreclr#18238~~  dotnet/coreclr#18235.. I need to confirm this and look at what we did for a fix.\nThe bar for 2.1 is pretty high. So yes, it would be helpful to know more about the impact of this issue.. The actual issue was dotnet/coreclr#18235. \nI've verified that porting the fix for this (from dotnet/coreclr#18627) resolves this issue.. Also reported as dotnet/coreclr#20439.\n@gpomykala can you say more about the impact this bug has on your usage of Core 2.1?. @gpomykala thanks.. FYI this bug should be fixed in the 2.1.8 / 2.2.1 servicing updates. Not sure when these will be out; it could be a month or two.. ",
    "keeratsingh": "@wuxubiao By the initial looks of the issue it seems quite similar to an existing issue #29147.\nAs per the discussions it seems like SqlClient currently doesn't support running with the Globalization Invariant Mode. The workaround is to install the package icu-libs and set DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false\nIf the issue still exists could you kindly share the following:\n- Output of command dotnet --info.\n- Repro with the csproj file that is being used. (includes the SqlClient version)\n- Complete stack trace.\n. @wuxubiao By the initial looks of the issue it seems quite similar to an existing issue #29147.\nAs per the discussions it seems like SqlClient currently doesn't support running with the Globalization Invariant Mode. The workaround is to install the package icu-libs and set DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false\nIf the issue still exists could you kindly share the following:\n- Output of command dotnet --info.\n- Repro with the csproj file that is being used. (includes the SqlClient version)\n- Complete stack trace.\n. @karelz Should this issue be moved to https://github.com/dotnet/corefx and tracked there instead ?. @karelz Should this issue be moved to https://github.com/dotnet/corefx and tracked there instead ?. #29147 already exists in CoreFX, however before I move/mark issue(#2072) as duplicate, I need more information form the user. I will proceed accordingly once I have the required information.. #29147 already exists in CoreFX, however before I move/mark issue(#2072) as duplicate, I need more information form the user. I will proceed accordingly once I have the required information.. Duplicate of https://github.com/dotnet/corefx/issues/29147. Duplicate of https://github.com/dotnet/corefx/issues/29147. ",
    "wuxubiao": "\n@wuxubiao By the initial looks of the issue it seems quite similar to an existing issue #29147.\nAs per the discussions it seems like SqlClient currently doesn't support running with the Globalization Invariant Mode. The workaround is to install the package icu-libs and set DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false\nIf the issue still exists could you kindly share the following:\n\nOutput of command dotnet --info.\nRepro with the csproj file that is being used. (includes the SqlClient version)\nComplete stack trace.\n\n\ninstall icu,it work. ",
    "pgolebiowski": "Hey guys, do you have an idea for how to proceed? @karelz @nguerrera @dsplaisted . ",
    "PeterJD": "Initially removing all references  and clearing nuget, cache appear to work but once rebuild. All erorrs returned. Hi\u00a0Karel Zikmund\nNot able to reproduce on other PC, my thinking on this subject is more to do with references being corrupted in some way, may be nuget is failingto re-attach (restore) references correctly.\nJust Solved the issue\nWOW\u00a0what triggered that memory, Zip files will report path or file is to long; so not able to zip the file\nMoved solution to root directory C:\\\nOnly reported one error\nError Could not find a part of the path 'C:\\Users\\liudm.nuget\\packages\\microsoft.aspnetcore.dataprotection.abstractions\\2.0.3\\microsoft.aspnetcore.dataprotection.abstractions.2.0.3.nupkg'.any quick answer for the above error.\nHow can something so unrelated cause such a waste of time\nMy folder structure was not that long, but for VS or nuget were, well am AP and should remember little things can cause a lot of painThanks for your time\nKind regardsPeter\nPS only checked one solution.  Hi\nYes will do\u00a0all you need to do is create a number of sub-directories, place solution in last sub-directories.Increase sub-directories until references fail\nI will send my directory structure tomorrow\nC:\\sub-directories\\sub2\\sub3\\sub4\\sub5\\sub6\\sub7\\solution.sln\nPeter.  Look in the error messages I sent you the directory \u00a0are listed there. Hi\nYes will do\u00a0all you need to do is create a number of sub-directories, place solution in last sub-directories.Increase sub-directories until references fail\nI will send my directory structure tomorrow\nC:\\sub-directories\\sub2\\sub3\\sub4\\sub5\\sub6\\sub7\\solution.sln. Hi you should specify that there is such an issue \nTook me a very long time to figure this out\nSome project are big and this may cause a lot of issues\n\nOn 18 Dec 2018, at 23:35, Karel Zikmund notifications@github.com wrote:\nNo more action is needed, closing.\nIf there is specific information how we can improve our tooling to be more resilient for long paths, please let us know. Thanks!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "rambotech": "If an app is running when a NuGet package reference is changed, or even when the build process runs with a thread not closed from an execution of the app, the output from either can causes directories to be cascaded under the existing directories.  This may be from the VS code not honoring a file/folder lock by the OS.. ",
    "freworr": "Thank you for the reply. It looks promising after load testing. We will try it out for a day or two and see if the performance will improve. @Lxiamail We will let you know if the switch improved the performance. . ",
    "marquesoftware": "Did you notice any significant improvement when disabling SocketsHttpHandler? Because I did tests enabling and disabling and did not get better.\n. ",
    "Sathyaish": "It appears that the right project to post this issue to is the CLI team, so please ignore this. I am re-posting this in the Issues section of the CLI repo.. ",
    "justinushermawan": "If I don't reference that DLL, I'd get an error that ask me to reference it because System.Decimal could not be found. What should I do?. I simplified the case. I have 2 netcore projects, The first one is where Roslyn generates my Model class (contains 'string', 'int', and 'decimal' properties) into a DLL file by using FileStream approach (not MemoryStream). The metadatareference[] assemblies linked are:\n'System.Runtime\nSystem.Private.CoreLib\nand typeof(MyCurrentClass).Assembly.Location'\nIf I run this one, it works and produces the dll of MyCurrentClass completely. \nNow I try to reference my those DLLs (MyCurrentClass.dll and MyFirstProject.dll) into the second project, I use itemgroup reference in my .csproj file. And I try to create a simple instance of MyCurrentClass, but I got an error when I try to access the 'decimal' property of it, the other properties work fine, only the 'decimal' one.. But, it asks me to reference it by giving me an error if I don't reference it. I even add that reference because of the error.. I put the latter part because I need to inherit a class from MyProject.dll, how can I achieve that?. @karelz I've removed those implementation assemblies in my metadatareference, now I got the following errors on runtime:\nUnhandled Exception: System.Exception: CS8021: No value for RuntimeMetadataVersion found. No assembly containing System.Object was found nor was a value for RuntimeMetadataVersion specified through options.\nCS0246: The type or namespace name 'Record' could not be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.String' is not defined or imported\nCS0518: Predefined type 'System.Int64' is not defined or imported\nCS0518: Predefined type 'System.Void' is not defined or imported\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0518: Predefined type 'System.Int64' is not defined or imported\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0246: The type or namespace name 'Record' could not be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Int64' is not defined or imported\nCS0518: Predefined type 'System.String' is not defined or imported\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0246: The type or namespace name 'Record' could not be found (are you missing a using directive or an assembly reference?)\nCS0115: 'Employee.Write(string, long)': no suitable method found to override\nCS0115: 'Employee.Read(SortedList<long, Record>, out long, string)': no suitable method found to override\nCS0518: Predefined type 'System.String' is not defined or imported\nCS0518: Predefined type 'System.String' is not defined or imported\nCS0518: Predefined type 'System.Decimal' is not defined or imported\nCS0518: Predefined type 'System.Int32' is not defined or imported\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0246: The type or namespace name 'DateTime' could not be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0246: The type or namespace name 'BinaryWriter' could not be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0246: The type or namespace name 'BinaryWriter' could not be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0246: The type or namespace name 'FileStream' could not be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.String' is not defined or imported\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0518: Predefined type 'System.Int32' is not defined or imported\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0103: The name 'DateTime' does not exist in the current context\nCS0518: Predefined type 'System.String' is not defined or imported\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0103: The name 'FileMode' does not exist in the current context\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS1061: 'Employee' does not contain a definition for 'next' and no accessible extension method 'next' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0518: Predefined type 'System.Boolean' is not defined or imported\nCS0518: Predefined type 'System.Boolean' is not defined or imported\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS1061: 'Employee' does not contain a definition for 'id' and no accessible extension method 'id' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS1061: 'Employee' does not contain a definition for 'state' and no accessible extension method 'state' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS1061: 'Employee' does not contain a definition for 'timestamp' and no accessible extension method 'timestamp' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS1061: 'Employee' does not contain a definition for 'memento' and no accessible extension method 'memento' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0246: The type or namespace name 'BinaryReader' could not be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0246: The type or namespace name 'BinaryReader' could not be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0246: The type or namespace name 'FileStream' could not be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0103: The name 'FileMode' does not exist in the current context\nCS0518: Predefined type 'System.Int64' is not defined or imported\nCS0518: Predefined type 'System.Int32' is not defined or imported\nCS0518: Predefined type 'System.Boolean' is not defined or imported\nCS0518: Predefined type 'System.Boolean' is not defined or imported\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0103: The name 'Activator' does not exist in the current context\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0518: Predefined type 'System.Type' is not defined or imported\nCS0518: Predefined type 'System.Boolean' is not defined or imported\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS1061: 'Employee' does not contain a definition for 'next' and no accessible extension method 'next' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS1061: 'Employee' does not contain a definition for 'id' and no accessible extension method 'id' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS1061: 'Employee' does not contain a definition for 'state' and no accessible extension method 'state' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS1061: 'Employee' does not contain a definition for 'timestamp' and no accessible extension method 'timestamp' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS1061: 'Employee' does not contain a definition for 'memento' and no accessible extension method 'memento' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0246: The type or namespace name 'DateTime' could not be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS1061: 'Employee' does not contain a definition for 'memento' and no accessible extension method 'memento' accepting a first argument of type 'Employee' could be found (are you missing a using directive or an assembly reference?)\nCS0518: Predefined type 'System.Object' is not defined or imported\nCS0103: The name 'Memento' does not exist in the current context\nCS0518: Predefined type 'System.Boolean' is not defined or imported\nCS0518: Predefined type 'System.Boolean' is not defined or imported\nCS0518: Predefined type 'System.Object' is not defined or imported\nNote that the Record class is located in my parent project.\nHow to handle it?. Yes, I tried with 2 simple projects, the one that produced the DLL of simple class, and the second one that using the DLL, it still doesn't work.. Sure, https://github.com/justinushermawan/roslyn-test. What should I change it with? I tried netstandard.dll, still not working.. These one?\n\n. It works when I use:\nstring p = @\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\\";\nMetadataReference[] _ref = new MetadataReference[] {\n        MetadataReference.CreateFromFile(Path.Combine(p, \"netstandard.dll\")),\n        MetadataReference.CreateFromFile(Path.Combine(p, \"System.dll\")),\n        MetadataReference.CreateFromFile(Path.Combine(p, \"System.Runtime.dll\"))\n};\nIs it the right way?. @dasMulli Yeah, it works. Thank you.\nWould you please explain my code mistakes?. Does PreserveCompilationContext make my build time slower? And if I don't set it to true, can't DependencyContext work?. Oh I see. Thanks in advance for your help.. ",
    "codeex": "Thanks \uff01 @dasMulli . ",
    "GanesanRengasamy": "@rrelyea  Could you please suggest me to resolve this issue?\n. Hi @rrelyea \nWe are facing this issue in not only Xamarin NuGet packages. We are facing this issue all type of NuGet packages like this. So, why i am asking the query in Xamarin.\nCould you please confirm me is this behavior? Also confirm is there any way to resolve this except \"Add a direct reference to the project for the higher version of the package\"\nThanks,\nGanesan R.. ",
    "Redth": "https://github.com/xamarin/xamarin.forms would be a good place to post the issue, and hopefully provide a bit more info/context around the errors, but it sounds like you may need to add something like this to your project(s):\n<PackageReference Include=\"Xamarin.Forms\" Version=\"3.3.0.912540\" />. ",
    "virzak": "I got latest daily build but can't resolve System.Windows.Controls.Ribbon when using <TargetFrameworks>net40</TargetFrameworks>.\nWorks properly with <TargetFrameworks>net45</TargetFrameworks>. @ericstj is there a way to prevent ribbon it from loading?\nTrying to migrate a library to core which previously targeted 4.0\nhttps://github.com/ejensen/toggle-switch-control/blob/master/WPF/ToggleSwitch/ToggleSwitch.csproj#L13. ",
    "philtimmes": "LOL... Never heard of ReactOS, have you been living under a rock?. ",
    "elhoir": "\nWe do not intend to support every single OS distro in the world, just a list of few.\n\nNo need! Just keep supporting Windows XP / Windows 2003 versions ;) ReactOS team will do the rest.\n. ",
    "tristanbarcelon": "Hi @riezebosch, I did get some traction on this though at the expense of ignoring ones that cause issues. I'm also thinking that some of the values are incorrect. Try this cmdlet to see if it works out for you. Feel free to use it and provide comments.\nGet-AvailableDotnetCoreReleaseFile.txt\nWhen I specify ReleaseType of sdk, I obtain one incorrect recent result and highlighted it in bold.\nGet-AvailableDotnetCoreReleaseFile -ReleaseType sdk\nreleasedate     : 2018-12-11\nruntimeversion  : 2.1.502\nlatestrelease   : False\nsecurityrelease : False\nreleaseversion  : 2.1.502\nreleasenotes    : https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.502.md\nname            : dotnet-sdk-win-x64.exe\nurl             : https://download.visualstudio.microsoft.com/download/pr/70b3a142-06fa-4d86-b1cc-67a48c1eaacb/55e147bd47db930a642a8f8176949a76/dotnet-sdk-2.1.502-win-x64.exe\nhash            : 20E5D2E54CCAD8CE2C5EED0EFFCBA5D610C8BF1D15F8D2EE2E792547B35697EA408A415D2F580E0E2F693339E5E10F0A46B82B88171016378AFBBA4BF4A55227\nreleasetype     : sdk\nreleasedate     : 2018-11-13\nruntimeversion  : 2.1.6\nlatestrelease   : True\nsecurityrelease : False\nreleaseversion  : 2.1.500\nreleasenotes    : https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md\nname            : dotnet-sdk-win-x64.exe\nurl             : https://download.visualstudio.microsoft.com/download/pr/cd42f66a-2b6a-4a7a-9e69-0bb4eb5a83a1/0ce246546a0886349d9acf872f4e15a4/dotnet-sdk-2.1.500-win-x64.exe\nhash            : A6EB777DF0F8581872EF34D9363EA0148A95314546507B879B648CA8AA051791DA59377CA3F1786F18D2831823F2A2A9B6D275C96572F0917C88FBEB18272C32\nreleasetype     : sdk\nreleasedate     : 2018-10-02\nruntimeversion  : 2.1.5\nlatestrelease   : False\nsecurityrelease : False\nreleaseversion  : 2.1.403\nreleasenotes    : https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\nname            : dotnet-sdk-win-x64.exe\nurl             : https://download.visualstudio.microsoft.com/download/pr/45f93081-cdb4-41c1-8d8d-e6c3bbf2872b/62d6a598956fdfe585acb1f15268d930/dotnet-sdk-2.1.403-win-x64.exe\nhash            : 3630dc9c52ec6b08c0804da3fc9177d3d61f12f5629c65249f7bc75b34a24c4059812fc8e6cdef64dcc7c4030ad5952e998674ac1ef497f20e43b2ab4b53be90\nreleasetype     : sdk\n...\nreleasedate     : 2018-06-19\nruntimeversion  : 2.1.1\nlatestrelease   : False\nsecurityrelease : False\nreleaseversion  : 2.1.301\nreleasenotes    : https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.1.md\nname            : dotnet-sdk-win-x64.exe\nurl             : https://download.microsoft.com/download/D/0/4/D04C5489-278D-4C11-9BD3-6128472A7626/dotnet-sdk-2.1.301-win-x64.exe\nhash            : 894d620a9f700b2fe3f788f0ef12c26ac654f15b34d76bfde22570301054208aff4461567d3f18a7f76031132ea5f63b2ca9a42a122a3d246815aa4c4455cc96\nreleasetype     : sdk\nreleasedate     : 2018-10-09\nruntimeversion  : 1.1.10\nlatestrelease   : True\nsecurityrelease : True\nreleaseversion  : 1.1.11\nreleasenotes    : https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.10.md\nname            : dotnet-dev-win-x64.exe\nurl             : https://download.visualstudio.microsoft.com/download/pr/baf5a5a7-68d6-4cf1-afdf-47968b5f91e7/05e6dfe191607ef6135a34215464f600/dotnet-dev-win-x64.1.1.11.exe\nhash            : 6e15fa8c9d5b10cc3edb353c5e1ece01a29f7d00ff853cc12f84e33a776df8062c07febbd9659ca46c2adeb005036c231fd7a7592591b6e28c643bdc45084778\nreleasetype     : sdk\nreleasedate     : 2018-07-10\nruntimeversion  : 1.1.9\nlatestrelease   : False\nsecurityrelease : True\nreleaseversion  : 1.1.10\nreleasenotes    : https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.9.md\nname            : dotnet-dev-win-x64.exe\nurl             : https://download.microsoft.com/download/9/e/6/9e6e1700-f682-4e4c-9e02-583f102cb048/dotnet-dev-win-x64.1.1.10.exe\nhash            : d686d2514f45df597791d4fb60ccc272f5d42239e21803dbbf050891f79dbc7c0c8a72623606f312fd0aed0eef7ec5270c4adcfba105e3ec635d27729ff5c4af\nreleasetype     : sdk\nreleasedate     : 2018-04-17\nruntimeversion  : 1.1.8\nlatestrelease   : False\nsecurityrelease : False\nreleaseversion  : 1.1.9\nreleasenotes    : https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md\nname            : dotnet-dev-win-x64.exe\nurl             : https://download.microsoft.com/download/4/0/2/4022CFC7-5061-4762-B9BA-48B35632572D/dotnet-dev-win-x64.1.1.9.exe\nhash            : 08f7ffbf28d3a85b3e6e4983bef643a212161271c6ff3956fbdef932038ba240104db6c2deb8b662e5392f1e5b45db2aee2e7da20ee7d800f3b417aabb649d2a\nreleasetype     : sdk\n...\nreleasedate     : 2018-07-10\nruntimeversion  : 1.0.12\nlatestrelease   : False\nsecurityrelease : True\nreleaseversion  : 1.1.10\nreleasenotes    : https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.12.md\nname            : dotnet-dev-win-x64.exe\nurl             : https://download.microsoft.com/download/9/e/6/9e6e1700-f682-4e4c-9e02-583f102cb048/dotnet-dev-win-x64.1.1.10.exe\nhash            : d686d2514f45df597791d4fb60ccc272f5d42239e21803dbbf050891f79dbc7c0c8a72623606f312fd0aed0eef7ec5270c4adcfba105e3ec635d27729ff5c4af\nreleasetype     : sdk\nI've annotated the offending entry in 2.1 releases.json. Previously, this value always tracked the runtime version. For this particular entry, it tracks the SDK version.\n\n. Thanks @leecow @vivmishra for looking into this issue. I believe @riezebosch might also be helped by cleanup of releases.json. Would it help if you publish some kind of a schema or structure intent for release.json files so we can parse them successfully in the future? I don't mind having to change the script at all as long as there is some consistency/pattern/schema in the json file. \nThe existence of a release index for each major.minor release is great since Microsoft's support status coincides along those boundaries. Parsing 1.0's releases.json was error prone for me so I just avoided it in my provided script.\nI also think that a cleaned up releases.json might make it easier to add features to install-dotnet.ps1 script. I'd like to think of my script as a means to find/filter available dotnetcore assets to install and then display the associated release notes. Once a user selects a particular release asset to install, it would be great if dotnet-install.ps1 can be called upon to install it. Currently, dotnet-install.ps1 does not install the hosting bundle and we have a need for these during deployment.. @riezebosch are you referring to the version specific releases.json? I believe that is the v2 releases.json format they are moving to. They are indeed retiring v1 releases.json which contains all the releases. I distinctly recall install-dotnet.ps1 using it, but that too may change once they move over to v2. It was sheer luck that I decided to finally write my script after they've already published the v2 format. My initial attempts at parsing the v1 releases.json format produced quite a few errors so I abandoned that idea.. @leecow and @vivmishra  I also noticed the addition of runtimeidentifier rid field in the newer files entries. Will this be backfilled for prior releases? Is files.name intended to be a version-agnostic file name pattern? At least that's what I used it for at least when I wanted to search for an executable (exe) version of sdk or runtime or hosting package, as opposed to zip files used by dotnet-install.ps1. What is the difference between dotnet-sdk-win-gs-x64.exe and dotnet-sdk-win-x64.exe? They have the same hashes for the most part but a different download url. Is it done for tracking the referral links?\nIs the value for files.name consistently derived from package type ( runtime, sdk, aspnetcore-runtime, symbols) + rid + fileformat (exe, zip, tar.gz, etc)?. Could this 2.1.502 update of the SDK have introduced an inconsistent pattern with the 2.1 releases.json file? I posted the issue here. Having analyzed the releases.json files for prior releases, this 2.1.502 sdk entry would have previously ended up in the sdk field of the 2.1.6 release instead of having its own release entry. Can we get some clarification please? . @leecow I looked over the shape of 2.0's releases.json and it's missing latest-runtime and latest-sdk fields. Granted its maintenance status is EOL, would it hurt to show these two fields across all releases so we don't have to code for missing fields/exceptions when parsing the json file?\nThanks for providing the runtime-version field in sdk. That should help sort out the differing \"version\" fields. If I'm searching for hosting bundles, I typically find it by filtering any release that has the aspnetcore-runtime field and then iterating through the files. That currently only has version and version-display fields but no runtime-version, like the sdk. Can I safely assume that the aspnetcore-runtime version field will always be equal to the runtime version? Edit: I think this is not true especially for the combined hosting bundle for 1.1 and 1.0 runtimes.\nMy main motivation here in writing the script is to facilitate searches of available/applicable sdk, runtime, hosting bundle assets given a known version of a dotnetcore tfm (netcoreapp20, netcoreapp21, etc) and being able to show the channel's (1.0, 1.1, 2.0, 2.1, 2.2, 3.0, etc) maintenance status. We can typically scan through csproj and vbproj files looking for TargetFramework/TargetFrameworks tags to look for the highest compatible channel which will support all the apps and then finding the associated assets (sdk, runtime, hosting bundle) necessary to support these apps at runtime or development time.. Thanks @leecow for your consideration.. Awesome @leecow! This removes one of the hacks I have in replacing portions of the URL to the rawgithubcontent link to be able to pull the json back properly into a powershell object :) Edit: I switched to the new url and got rid of some of my conditional branches for handling 2.0 releases.json. So far so good. SDK 2.1.100 is missing just the runtime-version and I'm curious about release 2.0.3 being released twice: once on 2017-12-04 and another on 2017-11-14. The hosting bundle link appears to be the same for both. The data I'm able to pull down is a lot more accurate than before. One more thing.. are all these hash values all calculated using sha512 algorithm?. @leecow did something just change in https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json? The 'releases.json' property for each channel now points back to github instead of the azure blob. Edit: I've temporarily re-added the url substitution logic I had if releases.json contains github url instead of the azure blob.. Hi @vivmishra @leecow, did anything change in the dotnetcore release index yesterday or today? My script which was working just fine yesterday now gets an error when used today. After a little bit more debug, it appears that the channel-specific releases.json file is an invalid JSON file. Here's how 2.2 looks like.\n\n. Thank you @leecow . @rickrain I don't have linux myself, but could you try the instructions here? https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script. @rickrain Hmm.. my apologies. I could have sworn the link I sent you could be used to install the sdk, esp. when you omit the --runtime flag and specify --version of 2.2 or 2.2.101. ",
    "nightblade9": "@sbomer sorry for the delay. Is that better? I never noticed, but the line right above that mentions the same link that you posted, from which you can get the latest version. So, I added the latest version back in, with a hint (\"as of writing\") that might trigger future readers to look up the latest version.\nIs this sufficient, or would you like something else?. ",
    "ryancdotnet": "Thanks all! Moved to csharplang!\nhttps://github.com/dotnet/csharplang/issues/2037. ",
    "Robert-Laverick": "Tested against today's final release of .net core 2.2.0, confirmed still same behaviour.\nTo be specific the presented code crashes with an AccessViolationException if compiled without optimisations enabled.. ",
    "no1melman": "So the only thing left that is relevant here is the dlopen(liblibrdkafka, 1): image not found. I was using the kafka dotnet library, and it has to import the librdkafka dll using [DLLImport(DllName, CallingConvention.Cdecl)] however, due to some other issues it couldn't load the dll giving this error dlopen(liblibrdkafka, 1): image not found clearly that is incorrect liblibrdkafka it should just be librdkafka so I think there is a bug somewhere. The fact the dll wasn't loading is irrelevant now, I got that working. It is just interesting to see the error message somehow incorrectly displaying library name. ",
    "TheRealEdwardCullen": "Docker image uses file: \"https://dotnetcli.blob.core.windows.net/dotnet/Sdk/2.2.100/dotnet-sdk-2.2.100-win-x64.zip\" which is \"2.2.100-rtm-009602\"\nOfficial release is \"2.2.100-rtm-009607\".\nNormally, these files are synchronised, so I can get the hash from the release announcement.\nRaised with dotnet-docker as #855. #2105 . Not sure who's responsibility this is, but raised this: https://github.com/dotnet/dotnet-docker/issues/855. ",
    "AlexSapple": "Hi, after updating my Rest API project to .net core2.2, all the get requests failed with 415 status. After a long headache, it seems that anything that doesn't include a content type header fails - however, surely a GET in REST wouldn't ever include a content type (as there is no request body at all??). Is this behaviour expected? (something in WEBAPI changed?? or something to to with the work around HTTP2??) The identical calls worked without issue on 2.1.6. (This is over HTTP). \nthanks. . ",
    "KamranShahid": "For Visual studio 2017 .net core 2.2 option should come rather then a need of VS 2019. \nI have done easy migration of my .net core 2.0 till .net core 2.1.6 as i update my ide then the nuget packages (and project level if ever needed).\nNow though i wanted to use .net core 2.2 in my three applications (two console application which are also act as windows service on windows platform and one web api project ) but i can't. > @KamranShahid : Sorry for the inconvenience, you can install .NET Core 2.2 using the installer package from the download page and use it with VS 2017. .NET Core 2.2 will show in the project options as a target when you install the 2.2 SDK.\nMy point is Visual Studio 2017 should have option to update as when we have releases of 2.1.0 til 2.1.6 rather then doing separate sdk download\n@vivmishra which particular file i should dowonload, SDK or run time?\nI think SDK installer for windows 64 version. ",
    "rynowak": "@AlexSapple  - this is the explanation for what changed https://github.com/aspnet/AspNetCore/issues/4396. ",
    "fugaku": "I can no longer find HttpContentFormDataExtensions in System.Net.Http\nIs it moved somewhere?. ",
    "tomap": "Hi, we have a \"fairly\" vanilla ASP.NET Core app, in Docker Linux (microsoft/dotnet:2.2-aspnetcore-runtime) \nWhen we switched from 2.1 to 2.2, we saw a +40Mb increase (from 80Mb to 120Mb) \n(same scenario: load the docker, do the 2 same calls to \"health\" endpoints & swagger endpoints)\nWe suspect this has something to do with the Garbage collector.\nIn .Net Core 2.1, we had to add the following to constraint memory use:\n   <ServerGarbageCollection>false</ServerGarbageCollection>\nMaybe the behavior of this has change\nWould you have leads on where to look ? how to confirm the hunch :)\nThank you. ",
    "dcb99": "\nHi, after updating my Rest API project to .net core2.2, all the get requests failed with 415 status. After a long headache, it seems that anything that doesn't include a content type header fails - however, surely a GET in REST wouldn't ever include a content type (as there is no request body at all??). Is this behaviour expected? (something in WEBAPI changed?? or something to to with the work around HTTP2??) The identical calls worked without issue on 2.1.6. (This is over HTTP).\nthanks.\n\nI had a similar issue, and it was resolved after making sure the program key in launch.json configurations referenced netcoreapp2.2 and not netcoreapp2.1. ",
    "racheldelman": "Hi, I have an app deployed on Azure and after updating to version 2.2 it is no longer working. Any idea when Azure will support netcoreapp2.2 ?. @karelz my application works perfectly fine locally so I assume it is an azure specific issue. Thanks!. ",
    "DickBaker": "wrong URL at conclusion of SDK 2.2.101 install: https://aka.ms/20-p2-rel-notes (points to 2.0.0 release notes)\n. the instruction to use dotnet to show correct installation of SDK 2.2.101 doesn't work if you had previously installed the SxS preview of 3.0.x as that shows thru instead (presumably PATH trumpted)\n\n\n. @livarcocc thanks for stating that the 3.0.100-preview would be used if present (I didn't know that). However I now have these points\n1 how would I force using all 2.2.101 exclusively (ignoring the 3.0.100-preview) ?\n2 surely the purpose of SxS is to isolate different SDK releases. Your way cross-contaminates?\n3 your behaviour should be explicitly stated as warning/relnote instead of expected dotnet 2.2.101\nBTW although I raised the 2 feedbacks independently, they have been lumped together as single #2098 issue. Surprised as could lead to part(s) being ignored - imho best to separate for SRP.. @livarcocc update to BTW in my last posting ..\nI probably should have read&followed that welcome instruction to post to specific repos, i.e.\ndotnet/core-setup - for installer issues\nrather than this catch-all (#2098) issue\nplease move my postings to more focussed drops if appropriate [my bad]. ",
    "braidenstiller": "When will .Net Core 2.2 be added in the runtime stack for App Service's running Linux? It's currently not an option and since upgrading my project to 2.2, it won't deploy to Azure.\nI.e: https://imgur.com/a/S50TMBa. ",
    "JanVargovsky": "Isn't \"dotnet/winforms\" supposed to target to \"https://github.com/dotnet/winforms/issues\" instead of \"https://github.com/dotnet/core/issues\". Same for wpf?. ",
    "Rand-Random": "Release Notes?\nMaybe I am blind but I can't find release notes on the linked page.. @ghost1372 \nWrong. \nhttps://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-3-preview-1-and-open-sourcing-windows-desktop-frameworks/\n\n.NET Core 3 is a major update which adds support for building Windows desktop applications using Windows Presentation Foundation (WPF), Windows Forms, and Entity Framework 6 (EF6). ASP.NET Core 3 enables client-side development with Razor Components. EF Core 3 will have support for Azure Cosmos DB. It will also include support for C# 8 and .NET Standard 2.1 and much more!\n\n@jkdmyrs \nMaybe there is a confusion on your side.\n.NET Core 3.0 will not include EF 6.0.\nEF 6.0 will be compiled against .NET Core 3.0.\nSo you will have to wait till an EF 6.0 release which has changes done to run on .NET Core 3.0.\nYou should consider try to follow\nhttps://github.com/aspnet/EntityFramework6\nOr ask your question there.\nYou can also see the commits done there and latest as of writing here \"Remove of PowerTools\" is the latest done since the prior of 20th August.\nSo, no there is currently no EF 6.0 that runs on .NET Core 3.0 and it seems like there is still alot of work to be done.\nAll your found documentation is basically saying \"They want to do it.\" but it seems to me that nothing has been done for it till now.. ",
    "LindaLawton": "I just installed this last night and noticed a few minor issues.  \nWindows installer out of date\nThe installer needs an update.  All of the links are out of date.   \n\nVisual studio support\nVisual Studio also doesn't appear to see that i have .net core 3.0 installed, so i cant create projects that way.  I have tried creating several of the project types using CLI they wont load in Visual studio 2017 but will load in VS code.   \nAll of this is fine if its to early to expect Visual Studio support.  However you may want to add it to the documentation someplace. I only use Visual studio professional and assumed it would have worked out of the box.   I have not seen any information about Visual studio not yet being supported and that we should use VS Code.   This could of course simply be an over site on my part.\nUpdate: just found a note about WPF and Win forms projects in 2019 preview.\n\nYou  can also open, launch and debug WPF and Windows Forms projects in Visual Studio 2019 Preview \n\n. ",
    "agoni1212": "Fails to install DotNetCore 3.0 Windows Server Hosting with Error 0x80070570\nI download the installer on three computer separately , and all failed with the error 0x80070570\nOS: Windows Server 2012 R2 Datacenter\nWIndows server 2016 Datacenter\nWindows 10\nthe log as follows\n[0658:06FC][2018-12-06T17:09:39]i001: Burn v3.11.1.2318, Windows v10.0 (Build 14393: Service Pack 0), path: C:\\Windows\\Temp{CD2F4FDE-5F51-4C31-B31D-AB4F638DBE91}.cr\\dotnet-hosting-3.0.0-preview-18579-0056-win.exe\n[0658:06FC][2018-12-06T17:09:39]i000: Initializing string variable 'BundleNameShort' to value 'Microsoft .NET Core 3.0.0 Preview Build 18579-0056'\n[0658:06FC][2018-12-06T17:09:39]i000: Initializing string variable 'BundleNameSub' to value 'Windows Server Hosting'\n[0658:06FC][2018-12-06T17:09:39]i000: Initializing numeric variable 'OPT_NO_ANCM' to value '0'\n[0658:06FC][2018-12-06T17:09:39]i000: Initializing numeric variable 'OPT_NO_FTS' to value '0'\n[0658:06FC][2018-12-06T17:09:39]i000: Initializing numeric variable 'OPT_NO_LTS' to value '0'\n[0658:06FC][2018-12-06T17:09:39]i000: Initializing numeric variable 'OPT_NO_SHAREDFX' to value '0'\n[0658:06FC][2018-12-06T17:09:39]i000: Initializing numeric variable 'OPT_NO_RUNTIME' to value '0'\n[0658:06FC][2018-12-06T17:09:39]i000: Initializing numeric variable 'OPT_NO_X86' to value '0'\n[0658:06FC][2018-12-06T17:09:39]i000: Initializing string variable 'InstallResetIISState' to value 'disable'\n[0658:06FC][2018-12-06T17:09:39]i000: Initializing string variable 'InstallNoIISState' to value 'disable'\n[0658:06FC][2018-12-06T17:09:39]i000: Initializing string variable 'ModifyResetIISState' to value 'disable'\n[0658:06FC][2018-12-06T17:09:39]i000: Initializing string variable 'ModifyNoIISState' to value 'disable'\n[0658:06FC][2018-12-06T17:09:39]i009: Command Line: '-burn.clean.room=C:\\Users\\Administrator\\Downloads\\dotnet-hosting-3.0.0-preview-18579-0056-win.exe -burn.filehandle.attached=464 -burn.filehandle.self=468'\n[0658:06FC][2018-12-06T17:09:39]i000: Setting string variable 'WixBundleOriginalSource' to value 'C:\\Users\\Administrator\\Downloads\\dotnet-hosting-3.0.0-preview-18579-0056-win.exe'\n[0658:06FC][2018-12-06T17:09:39]i000: Setting string variable 'WixBundleOriginalSourceFolder' to value 'C:\\Users\\Administrator\\Downloads'\n[0658:06FC][2018-12-06T17:09:39]i000: Setting string variable 'WixBundleLog' to value 'C:\\Users\\ADMINI1\\AppData\\Local\\Temp\\dd_dd_DotNetCoreWinSvrHosting__20181206170939.log'\n[0658:06FC][2018-12-06T17:09:39]i000: Setting string variable 'WixBundleName' to value 'Microsoft .NET Core 3.0.0 Preview Build 18579-0056 - Windows Server Hosting'\n[0658:06FC][2018-12-06T17:09:39]i000: Setting string variable 'WixBundleManufacturer' to value 'Microsoft Corporation'\n[0658:1660][2018-12-06T17:09:40]i000: Setting numeric variable 'WixStdBALanguageId' to value 1033\n[0658:1660][2018-12-06T17:09:40]i000: Setting version variable 'WixBundleFileVersion' to value '3.0.0.0'\n[0658:06FC][2018-12-06T17:09:40]i100: Detect begin, 8 packages\n[0658:06FC][2018-12-06T17:09:40]i000: Setting string variable 'IISCoreWebEngineInstalled_x86' to value '1'\n[0658:06FC][2018-12-06T17:09:40]i000: Setting string variable 'IISW3SVCInstalled_x86' to value '1'\n[0658:06FC][2018-12-06T17:09:40]i000: Setting string variable 'IISCoreWebEngineInstalled_x64' to value '1'\n[0658:06FC][2018-12-06T17:09:40]i000: Setting string variable 'IISW3SVCInstalled_x64' to value '1'\n[0658:06FC][2018-12-06T17:09:40]i052: Condition 'NOT (((IISCoreWebEngineInstalled_x86=1) AND (IISW3SVCInstalled_x86=1)) OR ((IISCoreWebEngineInstalled_x64=1) AND (IISW3SVCInstalled_x64=1)))' evaluates to false.\n[0658:06FC][2018-12-06T17:09:40]i052: Condition '((IISCoreWebEngineInstalled_x86=1) AND (IISW3SVCInstalled_x86=1)) OR ((IISCoreWebEngineInstalled_x64=1) AND (IISW3SVCInstalled_x64=1))' evaluates to true.\n[0658:06FC][2018-12-06T17:09:40]i000: Setting string variable 'InstallResetIISState' to value '1'\n[0658:06FC][2018-12-06T17:09:40]i052: Condition 'NOT (((IISCoreWebEngineInstalled_x86=1) AND (IISW3SVCInstalled_x86=1)) OR ((IISCoreWebEngineInstalled_x64=1) AND (IISW3SVCInstalled_x64=1)))' evaluates to false.\n[0658:06FC][2018-12-06T17:09:40]i052: Condition '((IISCoreWebEngineInstalled_x86=1) AND (IISW3SVCInstalled_x86=1)) OR ((IISCoreWebEngineInstalled_x64=1) AND (IISW3SVCInstalled_x64=1))' evaluates to true.\n[0658:06FC][2018-12-06T17:09:40]i000: Setting string variable 'ModifyResetIISState' to value '1'\n[0658:06FC][2018-12-06T17:09:40]i052: Condition 'DotNetRedistLtsProductVersion_x64 = v24.0.27122' evaluates to false.\n[0658:06FC][2018-12-06T17:09:40]i052: Condition 'DotNetRedistLtsProductVersion_x86 = v24.0.27122' evaluates to false.\n[0658:06FC][2018-12-06T17:09:40]i101: Detected package: AspNetCoreModule_x86, state: Absent, cached: None\n[0658:06FC][2018-12-06T17:09:40]i101: Detected package: AspNetCoreModule_x64, state: Absent, cached: None\n[0658:06FC][2018-12-06T17:09:40]i101: Detected package: AspNetCoreModuleV2_x86, state: Absent, cached: None\n[0658:06FC][2018-12-06T17:09:40]i101: Detected package: AspNetCoreModuleV2_x64, state: Absent, cached: None\n[0658:06FC][2018-12-06T17:09:40]i101: Detected package: DotNetRedistLts_x64, state: Absent, cached: None\n[0658:06FC][2018-12-06T17:09:40]i101: Detected package: DotNetRedistLts_x86, state: Absent, cached: None\n[0658:06FC][2018-12-06T17:09:40]i101: Detected package: AspNetCoreSharedFramework_x86, state: Absent, cached: None\n[0658:06FC][2018-12-06T17:09:40]i101: Detected package: AspNetCoreSharedFramework_x64, state: Absent, cached: None\n[0658:06FC][2018-12-06T17:09:40]i199: Detect complete, result: 0x0\n[0658:1660][2018-12-06T17:09:40]i000: Disable control InstallNoIIS\n[0658:1660][2018-12-06T17:09:43]i000: Setting numeric variable 'EulaAcceptCheckbox' to value 1\n[0658:06FC][2018-12-06T17:09:43]i200: Plan begin, 8 packages, action: Install\n[0658:06FC][2018-12-06T17:09:43]i052: Condition 'NOT VersionNT64 AND (VersionNT >= v6.1) AND (IISCoreWebEngineInstalled_x86=1) AND (IISW3SVCInstalled_x86=1) AND (NOT OPT_NO_ANCM)' evaluates to false.\n[0658:06FC][2018-12-06T17:09:43]i052: Condition 'VersionNT64 AND (VersionNT64 >= v6.1) AND (IISCoreWebEngineInstalled_x64=1) AND (IISW3SVCInstalled_x64=1) AND (NOT OPT_NO_ANCM)' evaluates to true.\n[0658:06FC][2018-12-06T17:09:43]i000: Setting string variable 'WixBundleRollbackLog_AspNetCoreModule_x64' to value 'C:\\Users\\ADMINI1\\AppData\\Local\\Temp\\dd_dd_DotNetCoreWinSvrHosting__20181206170939_000_AspNetCoreModule_x64_rollback.log'\n[0658:06FC][2018-12-06T17:09:43]i000: Setting string variable 'WixBundleLog_AspNetCoreModule_x64' to value 'C:\\Users\\ADMINI1\\AppData\\Local\\Temp\\dd_dd_DotNetCoreWinSvrHosting__20181206170939_000_AspNetCoreModule_x64.log'\n[0658:06FC][2018-12-06T17:09:43]i052: Condition 'NOT VersionNT64 AND (VersionNT >= v6.1) AND (IISCoreWebEngineInstalled_x86=1) AND (IISW3SVCInstalled_x86=1) AND (NOT OPT_NO_ANCM)' evaluates to false.\n[0658:06FC][2018-12-06T17:09:43]i052: Condition 'VersionNT64 AND (VersionNT64 >= v6.1) AND (IISCoreWebEngineInstalled_x64=1) AND (IISW3SVCInstalled_x64=1) AND (NOT OPT_NO_ANCM)' evaluates to true.\n[0658:06FC][2018-12-06T17:09:43]i000: Setting string variable 'WixBundleRollbackLog_AspNetCoreModuleV2_x64' to value 'C:\\Users\\ADMINI1\\AppData\\Local\\Temp\\dd_dd_DotNetCoreWinSvrHosting__20181206170939_001_AspNetCoreModuleV2_x64_rollback.log'\n[0658:06FC][2018-12-06T17:09:43]i000: Setting string variable 'WixBundleLog_AspNetCoreModuleV2_x64' to value 'C:\\Users\\ADMINI1\\AppData\\Local\\Temp\\dd_dd_DotNetCoreWinSvrHosting__20181206170939_001_AspNetCoreModuleV2_x64.log'\n[0658:06FC][2018-12-06T17:09:43]i052: Condition 'VersionNT64 AND (NOT OPT_NO_RUNTIME)' evaluates to true.\n[0658:06FC][2018-12-06T17:09:43]w321: Skipping dependency registration on package with no dependency providers: DotNetRedistLts_x64\n[0658:06FC][2018-12-06T17:09:43]i000: Setting string variable 'WixBundleLog_DotNetRedistLts_x64' to value 'C:\\Users\\ADMINI1\\AppData\\Local\\Temp\\dd_dd_DotNetCoreWinSvrHosting__20181206170939_002_DotNetRedistLts_x64.log'\n[0658:06FC][2018-12-06T17:09:43]i052: Condition '(NOT OPT_NO_RUNTIME) AND (NOT OPT_NO_X86)' evaluates to true.\n[0658:06FC][2018-12-06T17:09:43]w321: Skipping dependency registration on package with no dependency providers: DotNetRedistLts_x86\n[0658:06FC][2018-12-06T17:09:43]i000: Setting string variable 'WixBundleLog_DotNetRedistLts_x86' to value 'C:\\Users\\ADMINI1\\AppData\\Local\\Temp\\dd_dd_DotNetCoreWinSvrHosting__20181206170939_003_DotNetRedistLts_x86.log'\n[0658:06FC][2018-12-06T17:09:43]i052: Condition '(NOT OPT_NO_SHAREDFX) AND (NOT OPT_NO_X86)' evaluates to true.\n[0658:06FC][2018-12-06T17:09:43]i000: Setting string variable 'WixBundleRollbackLog_AspNetCoreSharedFramework_x86' to value 'C:\\Users\\ADMINI1\\AppData\\Local\\Temp\\dd_dd_DotNetCoreWinSvrHosting__20181206170939_004_AspNetCoreSharedFramework_x86_rollback.log'\n[0658:06FC][2018-12-06T17:09:43]i000: Setting string variable 'WixBundleLog_AspNetCoreSharedFramework_x86' to value 'C:\\Users\\ADMINI1\\AppData\\Local\\Temp\\dd_dd_DotNetCoreWinSvrHosting__20181206170939_004_AspNetCoreSharedFramework_x86.log'\n[0658:06FC][2018-12-06T17:09:43]i052: Condition 'VersionNT64 AND (NOT OPT_NO_SHAREDFX)' evaluates to true.\n[0658:06FC][2018-12-06T17:09:43]i000: Setting string variable 'WixBundleRollbackLog_AspNetCoreSharedFramework_x64' to value 'C:\\Users\\ADMINI1\\AppData\\Local\\Temp\\dd_dd_DotNetCoreWinSvrHosting__20181206170939_005_AspNetCoreSharedFramework_x64_rollback.log'\n[0658:06FC][2018-12-06T17:09:43]i000: Setting string variable 'WixBundleLog_AspNetCoreSharedFramework_x64' to value 'C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\dd_dd_DotNetCoreWinSvrHosting__20181206170939_005_AspNetCoreSharedFramework_x64.log'\n[0658:06FC][2018-12-06T17:09:43]i201: Planned package: AspNetCoreModule_x86, state: Absent, default requested: Absent, ba requested: Absent, execute: None, rollback: None, cache: No, uncache: No, dependency: None\n[0658:06FC][2018-12-06T17:09:43]i201: Planned package: AspNetCoreModule_x64, state: Absent, default requested: Present, ba requested: Present, execute: Install, rollback: Uninstall, cache: Yes, uncache: No, dependency: Register\n[0658:06FC][2018-12-06T17:09:43]i201: Planned package: AspNetCoreModuleV2_x86, state: Absent, default requested: Absent, ba requested: Absent, execute: None, rollback: None, cache: No, uncache: No, dependency: None\n[0658:06FC][2018-12-06T17:09:43]i201: Planned package: AspNetCoreModuleV2_x64, state: Absent, default requested: Present, ba requested: Present, execute: Install, rollback: Uninstall, cache: Yes, uncache: No, dependency: Register\n[0658:06FC][2018-12-06T17:09:43]i201: Planned package: DotNetRedistLts_x64, state: Absent, default requested: Present, ba requested: Present, execute: Install, rollback: None, cache: Yes, uncache: No, dependency: None\n[0658:06FC][2018-12-06T17:09:43]i201: Planned package: DotNetRedistLts_x86, state: Absent, default requested: Present, ba requested: Present, execute: Install, rollback: None, cache: Yes, uncache: No, dependency: None\n[0658:06FC][2018-12-06T17:09:43]i201: Planned package: AspNetCoreSharedFramework_x86, state: Absent, default requested: Present, ba requested: Present, execute: Install, rollback: Uninstall, cache: Yes, uncache: No, dependency: Register\n[0658:06FC][2018-12-06T17:09:43]i201: Planned package: AspNetCoreSharedFramework_x64, state: Absent, default requested: Present, ba requested: Present, execute: Install, rollback: Uninstall, cache: Yes, uncache: No, dependency: Register\n[0658:06FC][2018-12-06T17:09:43]i299: Plan complete, result: 0x0\n[0658:06FC][2018-12-06T17:09:43]i300: Apply begin\n[0658:06FC][2018-12-06T17:09:43]i010: Launching elevated engine process.\n[0658:06FC][2018-12-06T17:09:43]i011: Launched elevated engine process.\n[0658:06FC][2018-12-06T17:09:43]i012: Connected to elevated engine.\n[06F8:038C][2018-12-06T17:09:43]i358: Pausing automatic updates.\n[06F8:038C][2018-12-06T17:09:43]i359: Paused automatic updates.\n[06F8:038C][2018-12-06T17:09:43]i360: Creating a system restore point.\n[06F8:038C][2018-12-06T17:09:43]i362: System restore disabled, system restore point not created.\n[06F8:038C][2018-12-06T17:09:43]i370: Session begin, registration key: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall{a9498090-aec0-45d8-89d0-9668728138f7}, options: 0x7, disable resume: No\n[06F8:038C][2018-12-06T17:09:43]i000: Caching bundle from: 'C:\\Windows\\Temp{E40B18BF-1D92-41FF-9628-362FDB9B476D}.be\\dotnet-hosting-3.0.0-preview-18579-0056-win.exe' to: 'C:\\ProgramData\\Package Cache{a9498090-aec0-45d8-89d0-9668728138f7}\\dotnet-hosting-3.0.0-preview-18579-0056-win.exe'\n[06F8:038C][2018-12-06T17:09:43]i320: Registering bundle dependency provider: 20833f64-4bdf-36e4-b243-6cdc63660307, version: 3.0.0.0\n[06F8:038C][2018-12-06T17:09:43]i371: Updating session, registration key: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall{a9498090-aec0-45d8-89d0-9668728138f7}, resume: Active, restart initiated: No, disable resume: No\n[0658:145C][2018-12-06T17:09:43]i336: Acquiring container: WixAttachedContainer, copy from: C:\\Users\\Administrator\\Downloads\\dotnet-hosting-3.0.0-preview-18579-0056-win.exe\n[0658:145C][2018-12-06T17:09:43]i000: Setting string variable 'WixBundleLastUsedSource' to value 'C:\\Users\\Administrator\\Downloads'\n[0658:05B8][2018-12-06T17:09:44]e000: Error 0x80070570: Failed to extract all files from container, erf: 1:4:0\n[0658:145C][2018-12-06T17:09:44]e000: Error 0x80070570: Failed to begin and wait for operation.\n[0658:145C][2018-12-06T17:09:44]e000: Error 0x80070570: Failed to extract payload: a6 from container: WixAttachedContainer\n[0658:145C][2018-12-06T17:09:44]e312: Failed to extract payloads from container: WixAttachedContainer to working path: C:\\Windows\\Temp{E40B18BF-1D92-41FF-9628-362FDB9B476D}\\26AA2EB4651182DA78BBA3097ADE3FC1A4DBE11C, error: 0x80070570.\n[0658:06FC][2018-12-06T17:09:44]e000: Error 0x80070570: Cache thread exited unexpectedly.\n[06F8:038C][2018-12-06T17:09:44]i372: Session end, registration key: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall{a9498090-aec0-45d8-89d0-9668728138f7}, resume: ARP, restart: None, disable resume: No\n[06F8:038C][2018-12-06T17:09:44]i371: Updating session, registration key: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall{a9498090-aec0-45d8-89d0-9668728138f7}, resume: ARP, restart initiated: No, disable resume: No\n[0658:06FC][2018-12-06T17:09:44]i399: Apply complete, result: 0x80070570, restart: None, ba requested restart: No. #4510\nalready fixed by the MS team\nthanks. https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview2.md\n.NET Core 3.0.0 Preview 2 - January 29, 2018 \n2018 ??  hey guys, i'm in 2019 ^_^\n. ",
    "arviedelgado": "@LindaLawton \n\nVisual studio support\nVisual Studio also doesn't appear to see that i have .net core 3.0 installed, so i cant create projects that way. I have tried creating several of the project types using CLI they wont load in Visual studio 2017 but will load in VS code.\nAll of this is fine if its to early to expect Visual Studio support. However you may want to add it to the documentation someplace. I only use Visual studio professional and assumed it would have worked out of the box. I have not seen any information about Visual studio not yet being supported and that we should use VS Code. This could of course simply be an over site on my part.\nUpdate: just found a note about WPF and Win forms projects in 2019 preview.\n\nYou  can also open, launch and debug WPF and Windows Forms projects in Visual Studio 2019 Preview\n\n\nFor Visual Studio 2017, you may have to enable Visual Studio to use \"preview\" versions of .NET Core.\nTools > Options... > Projects and Solutions > .NET Core > Tick \"Use previews of the .NET Core SDK\" > OK\nThis works with Visual Studio Community 2017 v15.9.3 to solve the \"Project file is incomplete. Expected imports are missing. \" popup when reloading  the project.\nOnce you loaded the project and the build failed with no errors, try deleting \"Properties\" under Solution Explorer.\n. ",
    "atljoseph": "BROKEN PIECE of **** Preview (on MAC).\nThe general public is not a testing guinea pig.\ninstall core3 preview1 on mac\nmkdir -p myNewProject\ncd myNewProject\ndotnet new globaljson (says 3.0.100-preview-009812)\ndotnet new webapi\ndotnet restore OR dotnet build OR dotnet run \n==> BROKEN\nAspNetCore not in the namespace Microsoft.\n==> Attempted to install Microsoft.AspNetCore.App (version 3.0)\nVersion 3.0 was not even listed as an option.\nWhy is this? Because someone didn't test?\nIs anyone else having problems?\nI cannot even create a new solution using vs for MAC (after an update today, with computer restart)\n==> Create button is unresponsive.\nMASSIVE FAIL IN MY OPINION.\nReminds me why I love Node so much.\nOthers feel the same way.... Last login: Sat Dec 15 14:04:07 on ttys000\n/Users/joseph\nEARTHING joseph @ ~ $ ls -la ~/Library/Logs/VisualStudio/7.0\ntotal 288\ndrwxr-xr-x  7 joseph  staff    224 Dec 15 13:42 .\ndrwxr-xr-x  3 joseph  staff     96 Dec 15 13:41 ..\n-rw-r--r--  1 joseph  staff   1299 Dec 15 13:41 AndroidTools.2018-12-15__13-41-55.log\n-rw-r-----  1 joseph  staff  77052 Dec 15 14:05 Ide.2018-12-15__13-41-55.log\nlrwxr-xr-x  1 joseph  staff     72 Dec 15 13:41 Ide.log -> /Users/joseph/Library/Logs/VisualStudio/7.0/Ide.2018-12-15__13-41-55.log\n-rw-r--r--  1 joseph  staff    327 Dec 15 13:42 Updater.log\n-rw-r--r--  1 joseph  staff     50 Dec 15 13:41 iOSDesigner.2018-12-15__13-41-55.log\nEARTHING joseph @ ~ $ vi ~/Library/Logs/VisualStudio/7.0/Ide.2018-12-15__13-41-55.log \nat MonoDevelop.Ide.Projects.GtkNewProjectDialogBackend.MoveToNextPage () [0x00092] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/GtkNewProjectDialogBackend.cs:583\n  at MonoDevelop.Ide.Projects.GtkNewProjectDialogBackend.NextButtonClicked (System.Object sender, System.EventArgs e) [0x0001d] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/GtkNewProjectDialogBackend.cs:83\n  at System.Runtime.CompilerServices.AsyncMethodBuilderCore+<>c.b__6_0 (System.Object state) [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-06/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1023\n  at MonoDevelop.Ide.DispatchService+GtkSynchronizationContext+TimeoutProxy.HandlerInternal (System.IntPtr data) [0x00014] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide/DispatchService.cs:77\nERROR [2018-12-15 14:05:08Z]: An unhandled exception has occurred. Terminating Visual Studio? False\nSystem.ApplicationException: No template found matching condition 'UseNetCore20=true'.\n  at MonoDevelop.Ide.Projects.NewProjectDialogController.GetTemplateForProcessing () [0x0001f] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/NewProjectController.cs:481\n  at MonoDevelop.Ide.Projects.NewProjectDialogController.CreateProject () [0x00099] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/NewProjectController.cs:752\n  at MonoDevelop.Ide.Projects.NewProjectDialogController.Create () [0x0006d] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/NewProjectController.cs:619\n  at MonoDevelop.Ide.Projects.GtkNewProjectDialogBackend.MoveToNextPage () [0x00092] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/GtkNewProjectDialogBackend.cs:583\n  at MonoDevelop.Ide.Projects.GtkNewProjectDialogBackend.NextButtonClicked (System.Object sender, System.EventArgs e) [0x0001d] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/GtkNewProjectDialogBackend.cs:83\n  at System.Runtime.CompilerServices.AsyncMethodBuilderCore+<>c.b__6_0 (System.Object state) [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-06/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1023\n  at MonoDevelop.Ide.DispatchService+GtkSynchronizationContext+TimeoutProxy.HandlerInternal (System.IntPtr data) [0x00014] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide/DispatchService.cs:77\nERROR [2018-12-15 14:05:08Z]: An unhandled exception has occurred. Terminating Visual Studio? False\nSystem.ApplicationException: No template found matching condition 'UseNetCore20=true'.\n  at MonoDevelop.Ide.Projects.NewProjectDialogController.GetTemplateForProcessing () [0x0001f] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/NewProjectController.cs:481\n  at MonoDevelop.Ide.Projects.NewProjectDialogController.CreateProject () [0x00099] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/NewProjectController.cs:752\n  at MonoDevelop.Ide.Projects.NewProjectDialogController.Create () [0x0006d] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/NewProjectController.cs:619\n  at MonoDevelop.Ide.Projects.GtkNewProjectDialogBackend.MoveToNextPage () [0x00092] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/GtkNewProjectDialogBackend.cs:583\n  at MonoDevelop.Ide.Projects.GtkNewProjectDialogBackend.NextButtonClicked (System.Object sender, System.EventArgs e) [0x0001d] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/GtkNewProjectDialogBackend.cs:83\n  at System.Runtime.CompilerServices.AsyncMethodBuilderCore+<>c.b__6_0 (System.Object state) [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-06/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1023\n  at MonoDevelop.Ide.DispatchService+GtkSynchronizationContext+TimeoutProxy.HandlerInternal (System.IntPtr data) [0x00014] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide/DispatchService.cs:77\nERROR [2018-12-15 14:05:08Z]: An unhandled exception has occurred. Terminating Visual Studio? False\nSystem.ApplicationException: No template found matching condition 'UseNetCore20=true'.\n  at MonoDevelop.Ide.Projects.NewProjectDialogController.GetTemplateForProcessing () [0x0001f] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/NewProjectController.cs:481\n  at MonoDevelop.Ide.Projects.NewProjectDialogController.CreateProject () [0x00099] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/NewProjectController.cs:752\n  at MonoDevelop.Ide.Projects.NewProjectDialogController.Create () [0x0006d] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/NewProjectController.cs:619\n  at MonoDevelop.Ide.Projects.GtkNewProjectDialogBackend.MoveToNextPage () [0x00092] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/GtkNewProjectDialogBackend.cs:583\n  at MonoDevelop.Ide.Projects.GtkNewProjectDialogBackend.NextButtonClicked (System.Object sender, System.EventArgs e) [0x0001d] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/GtkNewProjectDialogBackend.cs:83\n  at System.Runtime.CompilerServices.AsyncMethodBuilderCore+<>c.b__6_0 (System.Object state) [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-06/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1023\n  at MonoDevelop.Ide.DispatchService+GtkSynchronizationContext+TimeoutProxy.HandlerInternal (System.IntPtr data) [0x00014] in /Users/vsts/agent/2.142.1/work/1/s/monodevelop/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide/DispatchService.cs:77\n. I am being as polite as I can when I say your question about MonoDevelop is very much misplaced. If this machine has MonoDevelop on it, it is because Visual Studio for Mac uses MonoDevelop (I never installed it). \nhttps://adtmag.com/articles/2017/05/10/vs-for-mac.aspx. Yesterday, I downloaded the Core 3.0 preview 1 SDK onto a MAC, installed VS and SDK, then immediately ran dotnet new webapi. After that, opened the project in VS for MAC (again, it works great on Windows - It is just a piece of crap on a MAC - which is the usual state of Microsoft products for Mac). \nThe IDE complained that AspNetCore was not in the namespace Microsoft. Also, the csproj file did not carry a SINGLE package or framework reference. Manually added one for Microsoft.ASpNetCore.App. Fail (fail on restore due to \u2026 version mismatch in frameworks!) Could not even use VS 2019 for MAC to install the 3.0 package from Nuget. They only had < 3.0. That was even after running dotnet \u2014info to confirm the version of the sdk used, and dotnet new globaljson to force it to use the preview. \nAlso, dotnet restore/build/run produced errors when attempting to build the project - immediately after the dotnet cli created the project.\nVS for MAC says build 7.7.1 (build 15) - Yes, the error log mentioned MonoDevelop (I am not using MonoDevelop directly - I am using YOUR Microsoft product).\nTry it yourself. Get a Mac. Download the SDK. Run dotnet new webapi. You will see that it is broken. \nAbout the Create button being unresponsive. I later found that VS for MAC could create Core 2.X projects, but not 3.0. (This is the source of the errors in the VS error log.) What is the problem? The release said we could use VS 2019 Preview 1 with Core 3.0 Preview 1. Did you not test it before releasing? Can anyone out there get it to work? I do not see any evidence that they can yet. Please set me right on that if I am wrong.\nhttps://developercommunity.visualstudio.com/content/problem/400049/visual-studio-2019-preview-create-button-not-worki.html\n(this person told you about the issue immediately after Core3 Preview1 was released (the day after). Same situation ... 2 weeks later ... Are you ok with having a product in production for 2 weeks that doesn't work? I would not be ok with that.\nLiterally \u2026 dotnet new console works great, but for dotnet new webapi (a flagship use of your dotnet product), it produces a broken project. I can\u2019t even hack it into building because the nuget packages are all showing for < v3.0. Have someone test this. Don\u2019t release it to the public for them to test it. It is a preview. Not a test. Literally, I downloaded it, installed it, used it (exactly as the docs say to do), and it didn\u2019t work... \nAnd \u2026 GET BETTER DOCS. Sample projects are not complete. Documentation about features is not in-depth enough, and lacks simple, straight-forward examples, tutorials are not advanced enough, and the over-emphasize MVC structure over that of WebApi, causing too much complication when trying to learn something that should be more simple. This is where most Node projects shine a little brighter than AspNetCore. \nRegards,\nJoseph\n. If your repo doesn\u2019t provide a link to such code of conduct, then it is assumed that the code of conduct does not exist. People do not know what they don\u2019t know (or what you never told them in the first place). Again. DOCUMENTATION is crucial. Otherwise, it is futile to even go through with the act of building the product. You might think I am being mean or \"going off\", but that is just someone being Real with you! Adoption requires that the technology is actually adoptable by the people that might adopt it... By the way, the world really runs on Linux. Windows is the cherry on top. It is not the cake itself.. Thanks @richlander. It was not working correctly until all traces of previous dotnet SDK's were removed. . ",
    "ghost1372": "hi is there any news about wpf designer support?\nWill it be available before 2019?\nWhen will the next preview be released?\ntnx. @jkdmyrs  ef6 not support in net core 3 but they working on ef core that work on net core 3 and its awesome\nhttps://docs.microsoft.com/en-us/ef/core/\nhttps://github.com/aspnet/EntityFrameworkCore. @WalterEbbers  You can release your project by right click on solution and select publish, in this case There are 2 modes, first self-contained If you select it all the required requirements will be placed next to the executable file. second is Dependent Framework that To run, you need to install the pre-requisites on the system you want. But I think your intention is to put all the requirements in the executable file If I guess right, they're working on a feature for this If I'm not mistaken, its https://github.com/dotnet/corefx. ",
    "HaidarZ": "I'm having a project in progress , not yet released for production , is it somehow safe to go from netcore2.2 to netcore3.0.\nI'm seeking for the efcore3.0 fix for m2m relations.\nAdvise?\n. ",
    "jkdmyrs": "All the documentation I can find states .NET Core 3 will support EF6, but I do not see anything regarding EF6 in the release notes for Preview 1. Is EF6 support included in Preview 1? If not, when can we expect this?. @WalterEbbers self-contained deployments are already a thing in net core.\nhttps://docs.microsoft.com/en-us/dotnet/core/deploying/index\nIs this what you're looking for?. ",
    "joesun99": "Hi everyone\nI would like to ask how is net core 3 also supporting Windows Workflow Foundation?\nRegards. ",
    "WalterEbbers": "When .net Core 3.0 was announced it was said it would have the ability to embed the runtime into the application executable. Yet no info is available how this can be done. Has the feature not been released or will it only be available in the final build for .net core 3.0? \nAs a side question, does the embedding also work for asp.net .net core hosted applications or only wpf based desktop applications?. > @WalterEbbers self-contained deployments are already a thing in net core.\n\nhttps://docs.microsoft.com/en-us/dotnet/core/deploying/index\nIs this what you're looking for?\n\nNot exactly. When 3.0 was announced, the feature was announced as the dotnet runtime would be fully embeddable within the executable without having to install it. You could deliver your own current version within the application. \nFrom what i can see with self contained, this is not really the exact way. I hope someone from the project could answer the question :) \nThnx for the reply though @jkdmyrs !. > \n\n@WalterEbbers You can release your project by right click on solution and select publish, in this case There are 2 modes, first self-contained If you select it all the required requirements will be placed next to the executable file. second is Dependent Framework that To run, you need to install the pre-requisites on the system you want. But I think your intention is to put all the requirements in the executable file If I guess right, they're working on a feature for this If I'm not mistaken, its https://github.com/dotnet/corefx\n\nIf self-contained has all the runtime abilities whitout having to install the runtime than that would be cool. Although 'm still confused what they meant by embeddint the framework when they announced 3.0 last year. . @svick  Hmm okay, to bad they didn't let us know when the preview was released.\nThnx :). ",
    "jamiegs": "I've just migrated an ASP.NET from .NET 2.1 to 3.0 to test it out.. it doesn't appear that symbols are being created for the application any longer. Has there been any changes that would cause that?  The build is happening with in  amicrosoft/dotnet:3.0.100-preview-sdk-stretch container... ",
    "logwlogw": "For WebAPI, Example\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nnamespace MyApi.Api\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class CrachController : ControllerBase\n    {\n        private readonly IHttpClientFactory _httpClientFactory;\n    public CrachController(IHttpClientFactory httpClientFactory)\n    {\n        _httpClientFactory = httpClientFactory;\n    }\n\n    [HttpGet]\n    public async Task<ActionResult> Get()\n    {\n        var client = _httpClientFactory.CreateClient();\n\n        try\n        {\n            string result = await client.GetStringAsync(\"http://indianetzone.com\");\n            return Ok(result);\n        }\n        catch (Exception e)\n        {\n            return Ok(e.Message);\n        }\n\n\n    }\n\n}\n\n}\n. https://github.com/dotnet/corefx/issues/33857. ",
    "nguyenminh-phuc": "@richlander . ",
    "benzhi2011": "I forgot to mention that my Project is asp.net core 2.2 >.NET Framework \nI can reproduce this error by creating new project with version 2.2\nCreate a new controller and ContactController\nCreate UrlHelperExtensions class with method AbsoluteRouteUrl.\nThen use code \n    string serviceUrl = Url.AbsoluteRouteUrl(\"default\");\nin WhateverController class and break it to see the serviceUrl. ",
    "stefanov-stefan": "Yep I had, and i logged it as issue: https://github.com/dotnet/winforms/issues/210 \nThanks.. ",
    "Kajirinn": "I figured out that you have to install nuget yourself. After I installed nuget and attempted to download Discord.NET I got this error:\n```\nsudo nuget install Discord.NET\nAttempting to resolve dependency 'Discord.Net.Core (\u2265 1.0.2)'.\n'Discord.Net.Core' already has a dependency defined for 'NETStandard.Library'.\n```\nNo clue what's wrong... Right, so all I had to do was publish it; that indeed fixed it. Sorry for that; thanks for your time!. ",
    "GTANAdam": "Duplicate of https://github.com/mono/linker/issues/405#issue-384591824\nAdditionally, this affects linux and windows as well, as mentioned here: https://github.com/mono/linker/issues/405#issuecomment-449644906. ",
    "sidravi": "Sorry for the dup.\nAny update on when this will get resolved?\nAlso, are there any plan on releasing an official version of ILLink.Tasks nuget package? The current nuget package is a preview version only.. ",
    "akaylh": "I found it :https://stackoverflow.com/questions/49798923/total-hit-visitor-counter-in-asp-net-core-mvc-application, May solve my problem\u3002\nThanks @karelz . .NET Core SDK 2.2.200-preview-009648 Release Notes is 404.. ",
    "donma": "got the same problem  T.T.. ",
    "xoofx": "@richlander could you try mono on ARM64? This is where I'm seeing a significant difference. . On my Raspberry Pi, I'm getting the following for dotnet:\n```\nxoofx@ubuntu:~/work/HelloWorld/bin/Release/netcoreapp3.0$ time dotnet HelloWorld.dll\nHello World!\nreal    0m0.439s\nuser    0m0.395s\nsys     0m0.056s\nwhile with mono:\nxoofx@ubuntu:~/work/HelloWorld/bin/Release/netcoreapp3.0$ time mono HelloWorld.dll\nHello World!\nreal    0m0.264s\nuser    0m0.243s\nsys     0m0.022s\n```\nFor some reasons, it is less dramatic than my earlier test (maybe I screwed up by using dotnet run instead of calling directly the dotnet HelloWorld.dll), but nonetheless, dotnet is still almost 2 times slower than mono, while usually, it is running faster. Running the same program on ARM32 and you will get different results.. Just tested this on a new RockPro64 I received:\nWith latest dotnet:\n```\nxoofx@rockpro64:~/work/HelloWorld/bin/Release/netcoreapp3.0$ time dotnet HelloWorld.dll\nHello World!\nreal    0m0.284s\nuser    0m0.255s\nsys     0m0.039s\n```\nWith Mono:\n```\nxoofx@rockpro64:~/work/HelloWorld/bin/Release/netcoreapp3.0$ time mono HelloWorld.dll\nHello World!\nreal    0m0.101s\nuser    0m0.082s\nsys     0m0.018s\n```\nSo we can see that dotnet is 2/3 times slower than mono, so there is clearly an issue on arm64.. ",
    "shouhujishu": "root@aml:~# cd app\nroot@aml:~/app# dotnet run\nHello World!\nGet output after 7 seconds\nLinux version 4.18.7-aml-s9xxx (root@aml) (gcc version 6.3.0 20170516 (Debian 6.3.0-18+deb9u1)) #1 SMP PREEMPT Thu Jan 3 06:41:31 UTC 2019\nRAM:2GB\nROM\uff1aKLM8G1GEME\uff0c8GB eMMC\nCPU:Amlogic S905\uff0cARM Cortex-A53\n. ",
    "taori": "@dasMulli building from within VS 2019 preview \nnow i got it to execute but it won't start properly. Not sure why the error messages are gone now. Yesterday i cleaned, rebooted and they still would not go away...\nI got this when starting from VS:\nDas Programm \"[5096] Desktop.exe\" wurde mit Code -532462766 (0xe0434352) beendet.\nDas Programm \"[5096] Desktop.exe: Programmablaufverfolgung\" wurde mit Code 0 (0x0) beendet.\nBuilding with your command does work.\nExecuting it with dotnet run (since vs didn't launch properly) resulted in this:\n\n. Ok - i guess this explains why this is such an edgecase - i am referencing a .net40 class library which contains a xaml file. While i can obviously move that around, i guess that is still worth knowing, in case other ppl use user controls from an external project?. @karelz  Interesting. That error does not happen if i strip down a sample to the bare essentials. Program just starts fine in isolation without errors.. I have removed the Xaml file - This revealed the actual reason(one of them? still progressing) the application won't launch properly:\n\n. I made the following experience in the process of upgrading this old project:\n\n\nAt some point of the application there is a Process.Start(filepath) to a log file if all other logging attempts fail, which threw the following exception\nThe specified executable is not a valid application for this OS platform. ->    at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)\n   at System.Diagnostics.Process.Start()\n   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)\n   at System.Diagnostics.Process.Start(String fileName)\n\n\nThere was a reference to another project, which was set to application as well, which prevented the application from executing properly.\n\nRemoving that reference + saving the project did not suffice - i had to restart VS for the build system to fully forget about that reference.\n@dasMulli at this time it appears devconsole + msbuild -t:Rebuild was more useful in figuring out what's preventing builds than VS. At least i found out what's wrong there immediately.\nsome license validation crashed the application. If i recall correctly in debug mode that would usually prompt VS to highlight the error source at the call site, instead of terminating the process. (Not 100% sure about it in this case since years have passed since i had to setup the license for it)\nmissing type: Could not load type 'System.Data.OleDb.OleDbConnection' from assembly 'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. @karelz the original code was\nvar desCrypto = (DESCryptoServiceProvider)DES.Create()\nwhich after turning it into\nvar desCrypto = new DESCryptoServiceProvider()\nworked fine - i guess the API simply changed, so that isn't an issue anymore.. Oh well. After doing a little bit of research it looks like i won't be the only one who will be blocked by the OleDb dependency. I wish ppl stopped using excel + access instead of real databases. Thanks for the support though. Feel free to close this once you are done picking up the feedback i guess (if you're interested in it, that is. Just thought i'd try preview1 on this legacy application to finally move past net40 on that project). @karelz Could not load file or assembly 'System.Data.Odbc, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\n\nShould this be happening too? I get that Oledb won't work, but odbc should be working i think?\nAt least according to this and this. one <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects> later:\n'The invocation of the constructor on type 'Telerik.Windows.Controls.RadRibbonBackstage' that matches the specified binding constraints threw an exception.' Line number '19' and line position '18'. ->    at System.Windows.Markup.XamlReader.RewrapException(Exception e, IXamlLineInfo lineInfo, Uri baseUri)\n   at System.Windows.Markup.WpfXamlLoader.Load(XamlReader xamlReader, IXamlObjectWriterFactory writerFactory, Boolean skipJournaledProperties, Object rootObject, XamlObjectWriterSettings settings, Uri baseUri)\n   at System.Windows.Markup.WpfXamlLoader.LoadBaml(XamlReader xamlReader, Boolean skipJournaledProperties, Object rootObject, XamlAccessLevel accessLevel, Uri baseUri)\n   at System.Windows.Markup.XamlReader.LoadBaml(Stream stream, ParserContext parserContext, Object parent, Boolean closeStream). @karelz \nnow i'm getting this when attempting to execute dotnet run:\n\n. @karelz Sorry for the delay. I'm afraid i no longer have access to the source code in question to reproduce the issue.. ",
    "cocoke": "I'm facing the same problem \ud83d\ude1e . > I've followed the guide here: https://docs.microsoft.com/en-us/aspnet/core/migration/21-to-22 and have added <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel> but this doesn't solve the problem\n\nAs with @krajek, when I change AspNetCoreModuleV2 to AspNetCoreModule the app starts working again.\n\nThis is working, thanks a lot \ud83d\ude03 \n. ",
    "arnvanhoutte": "I had the same problem on our local server. We had to upgrade the ASP.NET Core hosting bundle to fix it: https://dotnet.microsoft.com/download/thank-you/dotnet-runtime-2.2.0-windows-hosting-bundle-installer. @AitroSoftware  Adding <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>  the Javascript SPA services. https://github.com/aspnet/JavaScriptServices/issues/1786. ",
    "fdbva": "I had the same problem even with the Self-Contained deploy option. Shouldn't this option not require something external?. > Thanks @MarcoRossignoli!\n\nClosing as I assume it answers all the questions. If not, please let me know what remains and I can reopen. Thanks!\n\nI think it doesn't answer this question:\n\nI had the same problem even with the Self-Contained deploy option. Shouldn't this option not require something external?\n\nChanging the AspNetCoreModuleV2 in web.config seems like an work around and not the root of the problem if I want to use the Self-Contained option. Does it have any unintended effect? Am I using an old version of AspNetCoreModule by doing that? \nThanks!. @karelz \nI don't know how to answer that. The question makes sense, but the whole issue from the beginning was ASP.NET Core, I think.\nI didn't check, but I think the Self-Contained option exists for .NET Core as well. I could deploy as Self-Contained in ASP.NET Core 2.1, but in 2.2 it doesn't work.\nWe had to decide to not use the Self-Contained because of our deadlines, so I probably won't create a new issue, but I think the root of the problem still exists.. I get the same error from the first post. Now we have the 2.2 Hosting Bundle installed and it'll be hard to recreate because we need the IT team to change things like that here.\n\nIIS Detailed Error - 500.21 - Internal Server Error  \nHTTP Error 500.21 - Internal Server Error\nHandler \"aspNetCore\" has a bad module \"AspNetCoreModuleV2\" in its module list\n\nThis solution by krajek worked:\n\nIf I manually change AspNetCoreModuleV2 to AspNetCoreModule in web.config it starts working again.\n\nBut it feels like a work around, I suppose that when it's fixed, I wouldn't need to do something like that. I could just deploy with the Self-Contained option without having the Hosting Bundle installed.\nI'll explain the scenario so it'll make more sense, maybe I understood something wrong. We wanted the Self-Contained option because we will give our deploy files to our client and we didn't want to have to ask them to install a new ASP.NET Core Hosting Bundle every time the version was upgraded, we wanted that independence from their IT team.\n. @MarcoRossignoli \nThanks for explaining, I think I understand now. I thought the Self-Contained option would work on ASP.NET Core, but it's .NET Core only if you don't want any external dependencies because IIS still need the Hosting Bundle installed.\nps.: my english is not very good either hehehe. And with the In process option, would that paired with Self-Contained void the necessity of the Hosting Bundle? Or at least in the future, would that be possible or make sense?\nps.: is it ok to discuss like this in an issue? And again, thanks for the explanations =D. ",
    "krajek": "I got the same error message when I upgraded my app from 2.1 to 2.2. The error happens only on AppService deployment, locally everything works fine. \nIf I manually change AspNetCoreModuleV2 to AspNetCoreModule in web.config it starts working again. . Extension worked for me to(x86 version). Thanks a lot, @MartinZikmund.\nVery unfortunate that the migration guide does not mention it (https://docs.microsoft.com/en-us/aspnet/core/migration/21-to-22?view=aspnetcore-2.2&tabs=visual-studio) :-(.\n. ",
    "AitroSoftware": "I have the same error. For me, this occurs for any ASP.NET Core app targeting 2.2 when publishing to azure. I have tried both upgrading an existing application and creating a new application targeting 2.2\nI've followed the guide here: https://docs.microsoft.com/en-us/aspnet/core/migration/21-to-22 and have added <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel> but this doesn't solve the problem\nAs with @krajek, when I change AspNetCoreModuleV2 to AspNetCoreModule the app starts working again.. @MartinZikmund \n\nAfter long digging, I fixed this by installing the .NET Core 2.2 Runtime extension on Azure (which supports the new AspNetCoreModuleV2) - go to your app service, select Extensions in the left pane and then find the .NET Core 2.2. Runtime in the list and install it.\n\nThis has worked for me. @MartinZikmund \nThanks\nI figured it had to be something to do with 2.2 not being available in certain regions, but I couldn't find the announcement anywhere\nCan confirm that adding the following two lines to the .csproj file has worked\n<AspNetCoreModuleName>AspNetCoreModule</AspNetCoreModuleName>\n<AspNetCoreHostingModel>OutOfProcess</AspNetCoreHostingModel>. ",
    "MartinZikmund": "After long digging, I fixed this by installing the .NET Core 2.2 Runtime extension on Azure (which supports the new AspNetCoreModuleV2) - go to your app service, select Extensions in the left pane and then find the .NET Core 2.2. Runtime in the list and install it. \nUpdate - no, didn't help again... Run for a while, but I guess that was cache. I think the problems have to do with what is mentioned in the ASP.NET Core 2.2 announcement post:\n\nThe .NET Core 2.2 SDK, runtime, and updated ASP.NET Core IIS Module are in the process of being deployed to Azure App Service regions around the world. We expect this to be completed before the end of December 2018.\nSome regions may receive the updated runtime before the updated ASP.NET Core IIS Module (ANCM), which is required by default for projects targeting ASP.NET Core 2.2. It\u2019s also a requirement for the new in-process hosting feature. If you receive startup errors after deploying to Azure App Service, try configuring your project to use the existing version of ANCM by setting the AspNetCoreModule property to the value \u201cAspNetCoreModule\u201d, e.g.:\n\n<PropertyGroup>\n    <TargetFramework>netcoreapp2.2</TargetFramework>\n    <AspNetCoreModuleName>AspNetCoreModule</AspNetCoreModuleName>\n    <AspNetCoreHostingModel>OutOfProcess</AspNetCoreHostingModel>\n</PropertyGroup>\n\nOnce the target region has been updated with the latest ANCM version, you can remove that property altogether and redeploy the application to have it switch to using the new ANCM.\n\nSo any erros will probably be connected with the fact that either the new module is not yet available in the region or the new runtime is not there yet.. ",
    "andreslon": "\nI got the same error message when I upgraded my app from 2.1 to 2.2. The error happens only on AppService deployment, locally everything works fine.\nIf I manually change AspNetCoreModuleV2 to AspNetCoreModule in web.config it starts working again.\n\nHow do you changed the web.config, if this does not exists in the net core project?. ",
    "viktors-telle": "@MartinZikmund \n\nAfter long digging, I fixed this by installing the .NET Core 2.2 Runtime extension on Azure (which supports the new AspNetCoreModuleV2) - go to your app service, select Extensions in the left pane and then find the .NET Core 2.2. Runtime in the list and install it.\n\n\nThanks! I have installed x64 extension and it helped. I have also added the following two lines to the .csproj file:\n<AspNetCoreModuleName>AspNetCoreModule</AspNetCoreModuleName>\n  <AspNetCoreHostingModel>OutOfProcess</AspNetCoreHostingModel>\n. ",
    "DrakeLambert": "\nExtension worked for me to(x86 version). Thanks a lot, @MartinZikmund.\nVery unfortunate that the migration guide does not mention it (https://docs.microsoft.com/en-us/aspnet/core/migration/21-to-22?view=aspnetcore-2.2&tabs=visual-studio) :-(.\n\nI had to do the same, use the x86 version. Now it's working. ",
    "kameleon71": "Ok, you're right. . ",
    "SkinnySackboy": "The thing is we did keep the old SDK that was previously working installed - the thing that caused our projects to start failing is the additional installation of the .NET Core 2.2 SDK. We didn't uninstall the previous SDKs.\nFor sure upgrading the projects fixes this problem as I tried it, but unfortunately I cannot force all other teams to upgrade simultaneously. Despite having both SDKs installed on our Team City agents, projects still targeting netcoreapp2.1 are failing with this error.. This is indeed happening with all our projects previously targeting netcoreapp2.1 and on each machine where we installed the 2.2 SDK. Tomorrow I will create a test project to reproduce the issue.\nOn the runtime side we have had zero issues installing things side-by-side, so this is only an issue at compile time outside of Visual Studio.. @karelz Today we did some more investigation and realised that this problem had absolutely nothing to do with the code itself. To verify this, we created a brand new solution in Visual Studio, containing a single project targeting netcoreapp2.1 with no code inside it, i.e. a single .sln file and a single .csproj file targeting netcoreapp2.1\nAfter multiple tests, we realised that it was succeeding/failing depending on which versions of the 2.1.x SDK was installed on a machine. Here's what we found. If you compile on a machine using the dotnet CLI with the following SDKs installed, it works:\n2.1.200 [C:\\Program Files\\dotnet\\sdk]\n2.1.302 [C:\\Program Files\\dotnet\\sdk]\nIf you now install the 2.2 SDK it fails with the error in the original post:\n2.1.200 [C:\\Program Files\\dotnet\\sdk]\n2.1.302 [C:\\Program Files\\dotnet\\sdk]\n2.2.100 [C:\\Program Files\\dotnet\\sdk]\nIf we now install the 2.1.500 SDK, magically it works again, with zero code changes:\n2.1.200 [C:\\Program Files\\dotnet\\sdk]\n2.1.302 [C:\\Program Files\\dotnet\\sdk]\n2.1.500 [C:\\Program Files\\dotnet\\sdk]\n2.2.100 [C:\\Program Files\\dotnet\\sdk]\nSo it looks to me (apologies if this is obvious or commonly known) as though there is some issue with some 2.1.x versions prior to 2.1.500, which only manifests itself once you install the 2.2.x SDK or above.. ",
    "Terricide": "Well I am using a port of MonoMac to the .net standard. \nhttps://www.youtube.com/watch?v=edgosMqgcBc\nI'm only using it for a few apis and it has been working well for what I've needed. It's been working well until mojave started locking things down.. https://www.nuget.org/packages/MonoMac.NetStandard. Yup here it is\nMinimalRepo.zip\n```c#\nusing System;\nusing System.Runtime.InteropServices;\nusing MonoMac.AppKit;\nusing MonoMac.Foundation;\nnamespace AddMeToAccessibility\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            NSApplication.Init();\n        Console.WriteLine(\"AXTrusedCheckOptionPrompt\");\n        var key = new NSObject[] { NSObject.FromObject(\"AXTrustedCheckOptionPrompt\") };\n        Console.WriteLine(\"CFBoolean\");\n        var obj = new NSObject[] { NSObject.FromObject(true) };\n\n        Console.WriteLine(\"FromObjectsAndKeys\");\n        var options = NSDictionary.FromObjectsAndKeys(obj, key);\n\n        Console.WriteLine(\"IsProcessTrustedWithOptions\");\n        Console.WriteLine(\"Istrusted:\" + IsProcessTrustedWithOptions(options));\n\n        Console.WriteLine(\"Hello World!\");\n    }\n\n    [DllImport(\"/System/Library/Frameworks/ApplicationServices.framework/ApplicationServices\")]\n    private extern static bool AXIsProcessTrusted();\n\n    [DllImport(\"/System/Library/Frameworks/ApplicationServices.framework/ApplicationServices\")]\n    private extern static bool AXIsProcessTrustedWithOptions(IntPtr options);\n    static bool IsProcessTrustedWithOptions(NSDictionary options)\n    {\n        if (options == null)\n        {\n            return AXIsProcessTrustedWithOptions(IntPtr.Zero);\n        }\n        using (NSDictionary d = options)\n        {\n            return AXIsProcessTrustedWithOptions(d.Handle);\n        }\n    }\n}\n\n}\n```. I still think there is an issue here. If you take MonoMac out of the picture and just run \n```c#\nstatic void Main(string[] args)\n        {\n            Console.WriteLine(\"IsProcessTrustedWithOptions\");\n            Console.WriteLine(\"IsTrusted:\" + IsProcessTrustedWithOptions());\n        }\n    [DllImport(\"/System/Library/Frameworks/ApplicationServices.framework/ApplicationServices\")]\n    private extern static bool AXIsProcessTrustedWithOptions(IntPtr options);\n    static bool IsProcessTrustedWithOptions()\n    {\n        return AXIsProcessTrustedWithOptions(IntPtr.Zero);\n    }\n\n```\nThis will tell you if your process is trusted for accessibility. Take the sample I sent before remove MonoMac and publish a self contained binary.\nThen open up the system preferences and manually add the binary to trusted accessibility programs when you run it the next time it will still show the application as untrusted.\n. I don't know I'm trying to reach out to apple as well. Programs like dropbox and teamviewer are using this mechanism on mojave to get the correct permissions. . But I logged a ticket last week with apple as well and haven't heard back from them.. I tried that and it didn't help. If I tell my mac to trust Terminal and run my sample app within the terminal then it works and comes back true. So I believe the pinvoke method is working correctly. I just need to figure out how to get the mac to trust my .net core binary regardless of how it is run.\nIt feels hacky but I'm going to try and write native binary executable, add it to accessibility and make it launch my .net core app because like I said earlier it seems to work if I add whatever is parent process.\n. I just tried the hack and it didn't work :( . I just tried the same sample just using swift and it has the same behavior. If I trust terminal it is okay but if I specify the binary it doesn't work. It is clearly not a .net core issue. . ",
    "jkoritzinsky": "@Terricide the library you're using is really unreliable. The Avalonia project (which I'm also a part of) previously used that for our macOS windowing subsystem. We realized that it was unreliable, crash prone, and didn't actually work half of the time. With Avalonia 0.7.0, we deprecated our usage (and stopped supporting) the MonoMac.NetStandard package and switched to using a native component along with a managed wrapper.\nIt's highly likely the issue is in the MonoMac.NetStandard package. I highly doubt that this is an issue with .NET Core itself.. @Terricide Try adding a [return: System.Runtime.InteropServices.MarshalAs(UnmanagedType.U1)] to your P/Invoke declaration. I think the native bool size for Objective-C and Swift is 1-byte, but we marshal Booleans to a 4-byte bool by default.. ",
    "Nothing-Works": "@vivmishra Hi I just updated to Visual Studio 2017 version 15.9.4 and I just got .NET Core SDK 2.1.502 no .NET Core SDK 2.2.101 is this the expected version?\nAccording to this Release Notes I should have .NET Core SDK 2.2.101 as well right?\nOr this is a Visual Studio issue?. @vivmishra Hi I just updated to Visual Studio 2017 version 15.9.4 and I just got .NET Core SDK 2.1.502 no .NET Core SDK 2.2.101 is this the expected version?\nAccording to this Release Notes I should have .NET Core SDK 2.2.101 as well right?\nOr this is a Visual Studio issue?. https://dotnet.microsoft.com/download/dotnet-core/2.2 this download page shows that the latest SDK is Included in Visual Studio 15.9. I just updated my VS, I only got 2.1.505 not 2.2.x. Is this my end problem?\n@vivmishra . https://dotnet.microsoft.com/download/dotnet-core/2.2 this download page shows that the latest SDK is Included in Visual Studio 15.9. I just updated my VS, I only got 2.1.505 not 2.2.x. Is this my end problem?\n@vivmishra . @leecow Ahhhh I see So I need to download the latest SDK separately, and then I can choose from VS when I File>new>new project ? is that right?. @leecow Ahhhh I see So I need to download the latest SDK separately, and then I can choose from VS when I File>new>new project ? is that right?. ",
    "mrsquish": "Here I was thinking this was just me!\nMind you, even after installing SDK 2.1.502 I can't seem to workout how to upgrade my projects to use this version.. ",
    "UweKeim": "Did IIS in-process hosting make it into 2.2 as stated here?. ",
    "CumpsD": "So, what exactly changed between 2.2.100 and 2.2.101? I dont see anything in https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.101-SDK/2.2.101.md. Thanks!. ",
    "kevindqc": "The changes are here: https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.101-SDK/2.2.101-commits.md. ",
    "TristanApc": "In 2.2.101 I'm receiving a System.ObjectDisposedException: 'The CancellationTokenSource has been disposed.' exception from System.Private.CoreLib, resulting in a hard crash. The issue is intermittent. Full exception detail below:\nSystem.ObjectDisposedException\n  HResult=0x80131622\n  Message=The CancellationTokenSource has been disposed.\n  Source=System.Private.CoreLib\n  StackTrace:\n   at System.Threading.CancellationTokenSource.ThrowObjectDisposedException()\n   at System.IO.FileStream.FileStreamCompletionSource.CompleteCallback(UInt64 packedResult)\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pOVERLAP). @sepehr1014 thanks! That definitively seems related since CoreLib directly throws the exception that I'm getting. The application is indeed ASP MVC using kestrel.. ",
    "sepehr1014": "@TristanApc @karelz It might be related to https://github.com/aspnet/AspNetCore/issues/4422 which should be fixed in the next minor release https://github.com/dotnet/coreclr/pull/21417. ",
    "johnkwaters": "Still no ANCM for Azure App Services?. Thanks @karelz - it is the new AspNetCoreModule. I had asked previously, and was also told to monitor for announcements,. but there have been none, and it was supposed to roll out in December. However I was told in another thread that it is out there now, and sure enough, it is - so maybe someone should announce it?. ",
    "xinschen": "@bartonjs  Already upgraded, but not resolved\n\n. ",
    "jfbueno": "Basically, you can't. \nAlthough .NET Core 3 supports WPF, WinForms and UWP XAML they're only for Windows. You can read about this topic in .NET Blog.\nI don't really know if there are any hacks that you can do to get WPF running on MacOS, but I suppose this is not the place to talk about it.\n. ",
    "William201807": "\nBasically, you can't.\nAlthough .NET Core 3 supports WPF, WinForms and UWP XAML they're only for Windows. You can read about this topic in .NET Blog.\nI don't really know if there are any hacks that you can do to get WPF running on MacOS, but I suppose this is not the place to talk about it.\n\nThanks for your prompt reply!\nI want to know that dotnet core is cross platform. WPF can already run on Windows, Now it is added to core3.0, Is it for cross platform in the future? Is it possible to run on macOS in the future?. ",
    "l0hn": "This can be reproduced using any WPF .net core project ,the simplest way is to:\n```\n\ndotnet new wpf\ndotnet publish -c release -r win-x64\n```\nThen attempt to run the published app on any version of windows lower than win10. (making sure vc140 is installed on the target machine or copy the vc140 redist dlls to the publish folder). \n",
    "vitek-karas": "This issue was moved to dotnet/cli#10474. So far I've tried this from the command line (dotnet run) and it basically works.\nOn a hello world type of app this works without any issues.\nOn your DiceTool I can't rename it to DiceTool since that it collides with the DiceTool project. But I can rename it to DiceToolU and it works.\nI'll try VS later on, but I would be surprised if it behaved differently.\nWhat version of VS are you using?\nCan you maybe push your \"broken\" state into a branch on your repro, so that I can try with exactly the bits you see it failing with?\nCan you please try a clean rebuild (in VS select Rebuild solution)?\nCan you please try from the command line - open command line, go to the DiceTool.UI and run dotnet run there.. Thanks a lot for the info.\nYou're seeing the same behavior as I did with the command line - so unfortunately it seems something in the build \"combines\" project and assembly names. That is definitely something we should look into as well.\nYou mention above that you can eventually build it (although with a two step build - which we also need to fix). Once it's built, can you run it, or do you get the same error as originally reported?. ",
    "rickrain": "@tristanbarcelon, those instructions are to install the .NET Core CLI tools.  This issue is with installing the SDK.. @tristanbarcelon and @leecow, I observed the exact same thing that @alexeyzimarev mentioned above.  Installing the packages-microsoft-prod.deb file as explained in the instructions did not result in /etc/apt/sources.list.d/microsoft-prod.list getting created.  \nHowever, after manually copying the file as @alexeyzimarev showed above, I'm able to get the SDK installed.\nMy Ubuntu image is the image from the Windows 10 (v1809) Hyper-V Quick Create image repository.. ",
    "schotime": "I'm seeing this issue too and @alexeyzimarev's suggestion doesn't work. Please find below\n\n@schotime , while problem related to packages-microsoft-prod.deb has been identified as per this issue. Can you please share below details to further diagnose the issue you are encountering ?\n\nList the feeds runtime package is configured.\n   apt-cache policy dotnet-sdk-2.2\nschotime@Linux18:~$ apt-cache policy dotnet-sdk-2.2\nN: Unable to locate package dotnet-sdk-2.2\nN: Couldn't find any package by glob 'dotnet-sdk-2.2'\nN: Couldn't find any package by regex 'dotnet-sdk-2.2'\n\napt-cache policy dotnet-runtime-2.2\nschotime@Linux18:~$ apt-cache policy dotnet-runtime-2.2\nN: Unable to locate package dotnet-runtime-2.2\nN: Couldn't find any package by glob 'dotnet-runtime-2.2'\nN: Couldn't find any package by regex 'dotnet-runtime-2.2'\n\nOS details\n   cat /etc/os-release\nschotime@Linux18:~$ cat /etc/os-release\nNAME=\"Ubuntu\"\nVERSION=\"18.04.1 LTS (Bionic Beaver)\"\nID=ubuntu\nID_LIKE=debian\nPRETTY_NAME=\"Ubuntu 18.04.1 LTS\"\nVERSION_ID=\"18.04\"\nHOME_URL=\"https://www.ubuntu.com/\"\nSUPPORT_URL=\"https://help.ubuntu.com/\"\nBUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\"\nPRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"\nVERSION_CODENAME=bionic\nUBUNTU_CODENAME=bionic\nList which system package is failing to install\n   sudo apt-get install dotnet-runtime-deps-2.2\nschotime@Linux18:~$ sudo apt-get install dotnet-runtime-deps-2.2\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nE: Unable to locate package dotnet-runtime-deps-2.2\nE: Couldn't find any package by glob 'dotnet-runtime-deps-2.2'\nE: Couldn't find any package by regex 'dotnet-runtime-deps-2.2'\nList which all libicu packages are available\n   apt-cache search libicu\nschotime@Linux18:~$ apt-cache search libicu\nicu-devtools - Development utilities for International Components for Unicode\nlibicu-dev - Development files for International Components for Unicode\nlibicu-le-hb-dev - ICU Layout Engine API on top of HarfBuzz shaping library (development)\nlibicu-le-hb0 - ICU Layout Engine API on top of HarfBuzz shaping library\nlibicu60 - International Components for Unicode\nlibiculx60 - International Components for Unicode\nlibicu4j-4.2-java - Library for Unicode support and internationalization\nlibicu4j-4.4-java - Library for Unicode support and internationalization\nlibicu4j-49-java - Library for Unicode support and internationalization\nlibicu4j-java - Library for Unicode support and internationalization\nlibicu4j-java-doc - Library for Unicode support and internationalization - Docs\n. @Ludogo 's comment worked by purging the packages. \n\n",
    "dasjestyr": "Same problems here. Using the Ubuntu 18.04.1 LTS that is available through Hyper-V quick create:\n```\n~$ apt-cache policy dotnet-sdk-2.2\nN: Unable to locate package dotnet-sdk-2.2\nN: Couldn't find any package by glob 'dotnet-sdk-2.2'\nN: Couldn't find any package by regex 'dotnet-sdk-2.2'\n~$ apt-cache policy dotnet-runtime-2.2\nN: Unable to locate package dotnet-runtime-2.2\nN: Couldn't find any package by glob 'dotnet-runtime-2.2'\nN: Couldn't find any package by regex 'dotnet-runtime-2.2'\n~$ sudo apt-get install dotnet-runtime-deps-2.2\nReading package lists... Done\nBuilding dependency tree     \nReading state information... Done\nE: Unable to locate package dotnet-runtime-deps-2.2\nE: Couldn't find any package by glob 'dotnet-runtime-deps-2.2'\nE: Couldn't find any package by regex 'dotnet-runtime-deps-2.2'\n~$ apt-cache search libicu\nicu-devtools - Development utilities for International Components for Unicode\nlibicu-dev - Development files for International Components for Unicode\nlibicu-le-hb-dev - ICU Layout Engine API on top of HarfBuzz shaping library (development)\nlibicu-le-hb0 - ICU Layout Engine API on top of HarfBuzz shaping library\nlibicu60 - International Components for Unicode\nlibiculx60 - International Components for Unicode\nlibicu4j-4.2-java - Library for Unicode support and internationalization\nlibicu4j-4.4-java - Library for Unicode support and internationalization\nlibicu4j-49-java - Library for Unicode support and internationalization\nlibicu4j-java - Library for Unicode support and internationalization\nlibicu4j-java-doc - Library for Unicode support and internationalization - Docs\n```\n$ dpkg -l | grep \"packages-microsoft-prod\"\nii  packages-microsoft-prod                    1.0-ubuntu18.04.1                   all          Apt configuration for packages.microsoft.com\n```\n$ dpkg -L packages-microsoft-prod\n/etc\n/etc/apt\n/etc/apt/sources.list.d\n/etc/apt/sources.list.d/microsoft-prod.list\n/etc/apt/trusted.gpg.d\n/etc/apt/trusted.gpg.d/microsoft-prod.gpg\n/usr\n/usr/share\n/usr/share/lintian\n/usr/share/lintian/overrides\n/usr/share/lintian/overrides/packages-microsoft-prod\n/usr/share/doc\n/usr/share/doc/packages-microsoft-prod\n/usr/share/doc/packages-microsoft-prod/changelog.Debian.gz\n/usr/share/doc/packages-microsoft-prod/copyright\n```. Here's what I got for the sha:\n$ sha256sum packages-microsoft-prod.deb \n54fb378267b8492f697a4d4f4ce3b339da750da00173f154d95701d81399aa6c  packages-microsoft-prod.deb\nHere is the last big block of logs in there. Not sure what \"half installed\" is all about:\n```\n2018-12-18 16:19:28 upgrade packages-microsoft-prod:all 1.0-ubuntu18.04.1 1.0-ubuntu18.04.1\n2018-12-18 16:19:28 status half-configured packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:19:28 status unpacked packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:19:28 status half-installed packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:19:28 status half-installed packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:19:28 status unpacked packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:19:28 status unpacked packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:19:28 configure packages-microsoft-prod:all 1.0-ubuntu18.04.1 1.0-ubuntu18.04.1\n2018-12-18 16:19:28 status unpacked packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:19:28 status unpacked packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:19:28 status unpacked packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:19:28 status half-configured packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:19:28 status installed packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:20:17 upgrade packages-microsoft-prod:all 1.0-ubuntu18.04.1 1.0-ubuntu18.04.1\n2018-12-18 16:20:17 status half-configured packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:20:17 status unpacked packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:20:17 status half-installed packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:20:17 status half-installed packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:20:17 status unpacked packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:20:17 status unpacked packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:20:17 configure packages-microsoft-prod:all 1.0-ubuntu18.04.1 1.0-ubuntu18.04.1\n2018-12-18 16:20:17 status unpacked packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:20:17 status unpacked packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:20:17 status unpacked packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:20:18 status half-configured packages-microsoft-prod:all 1.0-ubuntu18.04.1\n2018-12-18 16:20:18 status installed packages-microsoft-prod:all 1.0-ubuntu18.04.1\n```. @mbearup One of your steps worked but I'm not sure which. I forgot to update apt-get after each one so thought they were failing. Eventually, I remembered and the package installed correctly. ",
    "GodWarriorTigon": "Update your current OS with Softwar Updater.After update, sudo apt-get install dotnet-sdk-2.2 is OK.. ",
    "Ludogo": "\n2\\. `sudo dpkg --purge packages-microsoft-prod && sudo dpkg -i packages-microsoft-prod.deb`\n\n\nI had same problem when i wanted to update SDK. I have executed above instruction and then apt source list was successfully loaded when running sudo apt-get update. Then SDK  was reachable and SDK was update. thanks a lot ! . ",
    "novafluxx": "\n\nTry sudo dpkg --purge packages-microsoft-prod && sudo dpkg -i packages-microsoft-prod.deb - this will clear out dpkg's state regarding the .list and .gpg file, which should allow them to get installed. I'm not aware of any dpkg options that would prevent conffiles from getting installed.\n\n\nThis is what worked for me. Thank you, @mbearup . ",
    "githingeorge": "I had the same issue. Lost all hope, deleted /usr/share/dotnet and followed steps from\nhttps://dotnet.microsoft.com/download/thank-you/dotnet-sdk-2.2.101-linux-x64-binaries\nworked like a charm. ",
    "goobering": "I'm having what looks like this problem after resetting my WSL/Ubuntu install on Windows 10. \nAfter resetting Ubuntu using the Windows Settings panel, I followed the instructions at https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current, which produced the message: \n```\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nSome packages could not be installed. This may mean that you have\nrequested an impossible situation or if you are using the unstable\ndistribution that some required packages have not yet been created\nor been moved out of Incoming.\nThe following information may help to resolve the situation:\nThe following packages have unmet dependencies:\n dotnet-sdk-2.2 : Depends: aspnetcore-runtime-2.2 (>= 2.2.1) but it is not going to be installed\n                  Depends: dotnet-runtime-2.2 (>= 2.2.1) but it is not going to be installed\nE: Unable to correct problems, you have held broken packages.\n```\nI've run the 'fix' line: \nsudo dpkg --purge packages-microsoft-prod && sudo dpkg -i packages-microsoft-prod.deb\n... but no dice. I still get the same error message. . @JuliaLid That worked! Thanks so much. \nI had to reset my Ubuntu install again though - the instructions at https://www.ntweekly.com/2018/12/25/install-net-core-2-2-on-ubuntu-18-04-linux/ originally failed with the same error message I'd had previously. The only thing I'd run on that reset was the instructions provided earlier in this thread (https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current).\nTo reiterate:\nI ran a fresh reset of WSL/Ubuntu from the Settings panel.\nI ran the instructions here: https://www.ntweekly.com/2018/12/25/install-net-core-2-2-on-ubuntu-18-04-linux/\nEverything works as expected. \nIf I ran the instructions posted here: https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current after a fresh reset, nothing worked afterwards. . ",
    "Vannevelj": "I was facing a similar issue and it turned out to be something very local to my system. I'm running Linux in a VM and I found out that my host was running out of disk space halfway through the apt-get install dotnet-sdk-2.2 call. As a result the VM force freezed and I had to forcequit it. This released disk space and it seemed like all is fine before I then started the VM and tried again. Upon restarting and retrying the command I ended up with the same issue as everyone else is mentioning here.\nIt seems that the partial completion of the command leaves things in a funky state as I have reproduced this several times with new VMs. Only when I eventually realized the disk space issue and cleaned up some files I created a brand new VM and everything worked as intended.. ",
    "JuliaLid": "I was running into all kinds of installation issues on Ubuntu 18.04. Following the steps in this tutorial - https://www.ntweekly.com/2018/12/25/install-net-core-2-2-on-ubuntu-18-04-linux/  worked like a charm!. ",
    "sweetpants": "Still suffering from this issue. Tried every possible solution mentioned, still get the same error. I'm a noob on package managers, but the packages-microsoft-prod.deb packageversion is 1.0-ubuntu18.04.2. But 18.04.2 is due to come in feb 2019. sha256sum is: bf47049a5838ac6b7f79063b8908727f2ec2a83d95d3da23333bc3c006016583 as mentioned above. ",
    "betocollin": "@dagood , my OS is Ubuntu 16.04 x64 and I'll come back to you later in relation to 2, 3, 4 and 5 points as I don't have access now.. Hi @dagood , sorry for the delay in getting back to you.\n(For context to other people, read my short comment above - it's working for me).\nI'm pretty new to Linux so I hope I've got the commands right but my interpretation of some would be poor from an investigation perspective so I leave them in here in case it helps anyone.\nWhen running:\ndpkg -l | grep \"packages-microsoft-prod\"\nI get:\nii  packages-microsoft-prod     1.0-3    all       Apt configuration for packages.microsoft.com\nWhen running:\ndpkg -L packages-microsoft-prod\nI get:\n/.\n/etc\n/etc/apt\n/etc/apt/sources.list.d\n/etc/apt/sources.list.d/microsoft-prod.list\n/etc/apt/trusted.gpg.d\n/etc/apt/trusted.gpg.d/microsoft-prod.gpg\n/usr\n/usr/share\n/usr/share/doc\n/usr/share/doc/packages-microsoft-prod\n/usr/share/doc/packages-microsoft-prod/copyright\n/usr/share/doc/packages-microsoft-prod/changelog.Debian.gz\nWhen running:\nsha256sum \"./packages-microsoft-prod.deb\"\nI get:\n1e2a22f9636980a1bfe08a54fe9b08697b9cd72fc562dd6b29f48a612caee3b9  ./packages-microsoft-prod.deb\nWhen running:\ngrep \"packages-microsoft-prod\" /var/log/dpkg.log.1\nI get:\n2019-01-29 18:57:19 install packages-microsoft-prod:all <none> 1.0-3\n2019-01-29 18:57:19 status half-installed packages-microsoft-prod:all 1.0-3\n2019-01-29 18:57:19 status unpacked packages-microsoft-prod:all 1.0-3\n2019-01-29 18:57:19 status unpacked packages-microsoft-prod:all 1.0-3\n2019-01-29 18:57:19 configure packages-microsoft-prod:all 1.0-3 1.0-3\n2019-01-29 18:57:19 status unpacked packages-microsoft-prod:all 1.0-3\n2019-01-29 18:57:19 status half-configured packages-microsoft-prod:all 1.0-3\n2019-01-29 18:57:19 status installed packages-microsoft-prod:all 1.0-3\n2019-01-29 19:09:28 upgrade packages-microsoft-prod:all 1.0-3 1.0-3\n2019-01-29 19:09:28 status half-configured packages-microsoft-prod:all 1.0-3\n2019-01-29 19:09:28 status unpacked packages-microsoft-prod:all 1.0-3\n2019-01-29 19:09:28 status half-installed packages-microsoft-prod:all 1.0-3\n2019-01-29 19:09:28 status half-installed packages-microsoft-prod:all 1.0-3\n2019-01-29 19:09:28 status unpacked packages-microsoft-prod:all 1.0-3\n2019-01-29 19:09:28 status unpacked packages-microsoft-prod:all 1.0-3\n2019-01-29 19:09:28 configure packages-microsoft-prod:all 1.0-3 1.0-3\n2019-01-29 19:09:28 status unpacked packages-microsoft-prod:all 1.0-3\n2019-01-29 19:09:28 status half-configured packages-microsoft-prod:all 1.0-3\n2019-01-29 19:09:28 status installed packages-microsoft-prod:all 1.0-3. Hey @mbearup . Thanks a lot for this but it's been working fine for me since my first post above.\n@dagood had asked me to give him some info that could help investigate the issue so I just added it in here.. ",
    "pkese": "I had the same issue.\nIn the end it turned out that the machine I had been dealing with was ubuntu 16.04 rather than 18.04.\nI've changed /etc/apt/sources.list.d/microsoft-prod.list from\ndeb [arch=amd64] https://packages.microsoft.com/ubuntu/18.04/prod bionic main\nto\ndeb [arch=amd64] https://packages.microsoft.com/ubuntu/16.04/prod xenial main\nand then it worked.. ",
    "MattMcL4475": "Same issue on latest version of Linux Mint; this solved it: https://github.com/dotnet/core/issues/2149#issuecomment-447323609. ",
    "oleg-v": "\nI was running into all kinds of installation issues on Ubuntu 18.04. Following the steps in this tutorial - https://www.ntweekly.com/2018/12/25/install-net-core-2-2-on-ubuntu-18-04-linux/ worked like a charm!\n\nworked for me. ",
    "jake-brandt": "I ran into a very similar issue this evening - appeared to be this specific issue; but was ultimately my own mistake. I was updating a Dockerfile built with Ubuntu 18.04 and previously had the following (which worked):\napt-get -y install dotnet-sdk-2.2\nReplaced it with a larger, multiline list, which broke it:\napt-get -y install && \\\n    dotnet-sdk-2.2 \\\n    ...\nMuscle memory added those two ampersands when they should NOT have been there! So I can say that dotnet-sdk-2.2 does still install correctly on a fresh Ubuntu 18.04 image.. ",
    "huanlin": "@dagood , I've tried everything I found. For example:\nhttps://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current\nhttps://odan.github.io/2018/07/17/aspnet-core-2-ubuntu-setup.html\nStill, I ran into the same error message \"Unable to locate package\".\nNot sure if the following information helpful for investigation:\nOS:\nroot@9390f4d887a4:/# cat etc/*release                                                                                                                                                                                                \nDISTRIB_ID=Ubuntu                                                                                                                                                                                                                    \nDISTRIB_RELEASE=18.04                                                                                                                                                                                                                \nDISTRIB_CODENAME=bionic                                                                                                                                                                                                              \nDISTRIB_DESCRIPTION=\"Ubuntu 18.04.1 LTS\"                                                                                                                                                                                             \nNAME=\"Ubuntu\"                                                                                                                                                                                                                        \nVERSION=\"18.04.1 LTS (Bionic Beaver)\"                                                                                                                                                                                                \nID=ubuntu                                                                                                                                                                                                                            \nID_LIKE=debian                                                                                                                                                                                                                       \nPRETTY_NAME=\"Ubuntu 18.04.1 LTS\"                                                                                                                                                                                                     \nVERSION_ID=\"18.04\"                                                                                                                                                                                                                   \nHOME_URL=\"https://www.ubuntu.com/\"                                                                                                                                                                                                   \nSUPPORT_URL=\"https://help.ubuntu.com/\"                                                                                                                                                                                               \nBUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\"                                                                                                                                                                                  \nPRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"                                                                                                                                                  \nVERSION_CODENAME=bionic                                                                                                                                                                                                              \nUBUNTU_CODENAME=bionic \nOutput of dpkg -l | grep \"packages-microsoft-prod\" :\ndpkg -l | grep \"packages-microsoft-prod\"\nii  packages-microsoft-prod     1.0-ubuntu18.04.2                 all          Apt configuration for packages.microsoft.com\nOutput of dpkg -L packages-microsoft-prod :\ndpkg -L packages-microsoft-prod                                                                                                                                                                                 \n/etc                                                                                                                                                                                                                                 \n/etc/apt                                                                                                                                                                                                                             \n/etc/apt/sources.list.d                                                                                                                                                                                                              \n/etc/apt/sources.list.d/microsoft-prod.list                                                                                                                                                                                          \n/etc/apt/trusted.gpg.d                                                                                                                                                                                                               \n/etc/apt/trusted.gpg.d/microsoft-prod.gpg                                                                                                                                                                                            \n/usr                                                                                                                                                                                                                                 \n/usr/share                                                                                                                                                                                                                           \n/usr/share/doc                                                                                                                                                                                                                       \n/usr/share/doc/packages-microsoft-prod                                                                                                                                                                                               \n/usr/share/doc/packages-microsoft-prod/changelog.Debian.gz                                                                                                                                                                           \n/usr/share/doc/packages-microsoft-prod/copyright                                                                                                                                                                                     \n/usr/share/doc/packages-microsoft-prod/microsoft-prod.gpg                                                                                                                                                                            \n/usr/share/doc/packages-microsoft-prod/microsoft-prod.list                                                                                                                                                                           \n/usr/share/lintian                                                                                                                                                                                                                   \n/usr/share/lintian/overrides                                                                                                                                                                                                         \n/usr/share/lintian/overrides/packages-microsoft-prod\nInstalling .NET Core 3.0 preview version is quite easy though.. @dagood , I've tried everything I found. For example:\nhttps://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current\nhttps://odan.github.io/2018/07/17/aspnet-core-2-ubuntu-setup.html\nStill, I ran into the same error message \"Unable to locate package\".\nNot sure if the following information helpful for investigation:\nOS:\nroot@9390f4d887a4:/# cat etc/*release                                                                                                                                                                                                \nDISTRIB_ID=Ubuntu                                                                                                                                                                                                                    \nDISTRIB_RELEASE=18.04                                                                                                                                                                                                                \nDISTRIB_CODENAME=bionic                                                                                                                                                                                                              \nDISTRIB_DESCRIPTION=\"Ubuntu 18.04.1 LTS\"                                                                                                                                                                                             \nNAME=\"Ubuntu\"                                                                                                                                                                                                                        \nVERSION=\"18.04.1 LTS (Bionic Beaver)\"                                                                                                                                                                                                \nID=ubuntu                                                                                                                                                                                                                            \nID_LIKE=debian                                                                                                                                                                                                                       \nPRETTY_NAME=\"Ubuntu 18.04.1 LTS\"                                                                                                                                                                                                     \nVERSION_ID=\"18.04\"                                                                                                                                                                                                                   \nHOME_URL=\"https://www.ubuntu.com/\"                                                                                                                                                                                                   \nSUPPORT_URL=\"https://help.ubuntu.com/\"                                                                                                                                                                                               \nBUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\"                                                                                                                                                                                  \nPRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"                                                                                                                                                  \nVERSION_CODENAME=bionic                                                                                                                                                                                                              \nUBUNTU_CODENAME=bionic \nOutput of dpkg -l | grep \"packages-microsoft-prod\" :\ndpkg -l | grep \"packages-microsoft-prod\"\nii  packages-microsoft-prod     1.0-ubuntu18.04.2                 all          Apt configuration for packages.microsoft.com\nOutput of dpkg -L packages-microsoft-prod :\ndpkg -L packages-microsoft-prod                                                                                                                                                                                 \n/etc                                                                                                                                                                                                                                 \n/etc/apt                                                                                                                                                                                                                             \n/etc/apt/sources.list.d                                                                                                                                                                                                              \n/etc/apt/sources.list.d/microsoft-prod.list                                                                                                                                                                                          \n/etc/apt/trusted.gpg.d                                                                                                                                                                                                               \n/etc/apt/trusted.gpg.d/microsoft-prod.gpg                                                                                                                                                                                            \n/usr                                                                                                                                                                                                                                 \n/usr/share                                                                                                                                                                                                                           \n/usr/share/doc                                                                                                                                                                                                                       \n/usr/share/doc/packages-microsoft-prod                                                                                                                                                                                               \n/usr/share/doc/packages-microsoft-prod/changelog.Debian.gz                                                                                                                                                                           \n/usr/share/doc/packages-microsoft-prod/copyright                                                                                                                                                                                     \n/usr/share/doc/packages-microsoft-prod/microsoft-prod.gpg                                                                                                                                                                            \n/usr/share/doc/packages-microsoft-prod/microsoft-prod.list                                                                                                                                                                           \n/usr/share/lintian                                                                                                                                                                                                                   \n/usr/share/lintian/overrides                                                                                                                                                                                                         \n/usr/share/lintian/overrides/packages-microsoft-prod\nInstalling .NET Core 3.0 preview version is quite easy though.. > @huanlin please file a new issue with all info he asked for - see above. Thanks!\nGot it. However, I found installing ASP.NET Core 3 on my Ubuntu 18.04 is quite easy. So I decide to play with ASP.NET Core 3, rather than struggle with .NET Core 2.x.\nThanks. > @huanlin please file a new issue with all info he asked for - see above. Thanks!\nGot it. However, I found installing ASP.NET Core 3 on my Ubuntu 18.04 is quite easy. So I decide to play with ASP.NET Core 3, rather than struggle with .NET Core 2.x.\nThanks. @dagood , Thank you for your reply.\nMy bad. I don't even aware that I was using an ARM64 machine, which is a NAS device running docker container. \nAnd I don't know how you can tell it's ARM64 from my message (it's amazing).\nAnyway, according to your suggestion, I found something useful from this document: Installing .NET Core 3.0 on Linux ARM64.\nAlthough it's about .NET Core 3.0, it's still helpful and I eventually installed .NET Core SDK 2.2 (ARM64) on my Ubuntu with the following commands (no, it's not the end of the story):\napt-get wget\nwget -q https://download.visualstudio.microsoft.com/download/pr/2b201001-7074-476a-aa83-b5194c660a59/68233f3c3f16c97767a77216ec1f6e70/dotnet-sdk-2.2.104-linux-arm64.tar.gz\nmkdir -p /usr/share/dotnet\ntar -zxf dotnet-sdk-2.2.104-linux-arm64.tar.gz -C /usr/share/dotnet\nln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\nThen, I ran into more problems, and they are resolved by the following commands:\napt-get install libicu-dev\napt-get install libssl1.0.0\nFinally, I can use dotnet new console -o app to create a project, but then again, I see this error when I run my dotnet sample program,: \ncsc.dll code 139 error when building project on .NET Core 2.1.302 Ubuntu 16.04 ARM64\nAnd I see this message from the issue above: \"Agree -- given that ARM64 is not supported in 2.2, I think we should close this.\"\nSo I think it's time to give up. End of the story.\nThank you for your time!\n. @dagood , Thank you for your reply.\nMy bad. I don't even aware that I was using an ARM64 machine, which is a NAS device running docker container. \nAnd I don't know how you can tell it's ARM64 from my message (it's amazing).\nAnyway, according to your suggestion, I found something useful from this document: Installing .NET Core 3.0 on Linux ARM64.\nAlthough it's about .NET Core 3.0, it's still helpful and I eventually installed .NET Core SDK 2.2 (ARM64) on my Ubuntu with the following commands (no, it's not the end of the story):\napt-get wget\nwget -q https://download.visualstudio.microsoft.com/download/pr/2b201001-7074-476a-aa83-b5194c660a59/68233f3c3f16c97767a77216ec1f6e70/dotnet-sdk-2.2.104-linux-arm64.tar.gz\nmkdir -p /usr/share/dotnet\ntar -zxf dotnet-sdk-2.2.104-linux-arm64.tar.gz -C /usr/share/dotnet\nln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\nThen, I ran into more problems, and they are resolved by the following commands:\napt-get install libicu-dev\napt-get install libssl1.0.0\nFinally, I can use dotnet new console -o app to create a project, but then again, I see this error when I run my dotnet sample program,: \ncsc.dll code 139 error when building project on .NET Core 2.1.302 Ubuntu 16.04 ARM64\nAnd I see this message from the issue above: \"Agree -- given that ARM64 is not supported in 2.2, I think we should close this.\"\nSo I think it's time to give up. End of the story.\nThank you for your time!\n. > You can use .NET Core 3.0 previews to install ARM64, that should get you going.\nYes, true. I've already done that. I'd say it's quite easy and happy.\nThanks :)\n. > You can use .NET Core 3.0 previews to install ARM64, that should get you going.\nYes, true. I've already done that. I'd say it's quite easy and happy.\nThanks :)\n. ",
    "leo2d": "Thank you for the supporting.. ",
    "godrose": "I'm using OpenId.Connect in my app\nhttps://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/issues/210. ",
    "LokiMidgard": "I wasn't able to reproduce it in an small project.\nMy Visual Studio Version is 16.0.0 Preview 1.1\nThe broken branch is pushed.\nMaking a Clean and then Rebuild result in following error. (building a second time works)\n4>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(125,5): error MSB4018: Unerwarteter Fehler bei der GenerateDepsFile-Aufgabe.\n4>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(125,5): error MSB4018: System.ArgumentException: Ein Element mit dem gleichen Schl\u00fcssel wurde bereits hinzugef\u00fcgt.\n4>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(125,5): error MSB4018:    bei System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\n4>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(125,5): error MSB4018:    bei System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\n4>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(125,5): error MSB4018:    bei System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement](IEnumerable`1 source, Func`2 keySelector, Func`2 elementSelector, IEqualityComparer`1 comparer)\n4>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(125,5): error MSB4018:    bei Microsoft.Extensions.DependencyModel.DependencyContextWriter.WritePortableTarget(IReadOnlyList`1 runtimeLibraries, IReadOnlyList`1 compilationLibraries)\n4>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(125,5): error MSB4018:    bei Microsoft.Extensions.DependencyModel.DependencyContextWriter.WriteTargets(DependencyContext context)\n4>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(125,5): error MSB4018:    bei Microsoft.Extensions.DependencyModel.DependencyContextWriter.Write(DependencyContext context)\n4>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(125,5): error MSB4018:    bei Microsoft.Extensions.DependencyModel.DependencyContextWriter.Write(DependencyContext context, Stream stream)\n4>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(125,5): error MSB4018:    bei Microsoft.NET.Build.Tasks.GenerateDepsFile.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/GenerateDepsFile.cs:Zeile 166.\n4>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(125,5): error MSB4018:    bei Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:Zeile 35.\n4>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(125,5): error MSB4018:    bei Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\n4>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(125,5): error MSB4018:    bei Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\nRunning from command line I get \n```\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\NuGet.targets(114,5): error : Ambiguous project name 'DiceTool'. [C:\\Users\\patri\\source\\repos\\Dice-Tool\\src\\DiceTool.Ui\\DiceTool.Ui.csproj]\nThe build failed. Please fix the build errors and run again.\n```\nYou also said that the assembly name would collide. Maybe I'm misunderstanding something. But I think it shouldn't collide. Since the DiceTool Project has an assembly name Dice.Core and the DiceTool.Ui assembly name DiceTool. So as long the tool doesn't mix assembly name and project file name it shouldn't be ambiguous.. ",
    "Nanook": "hang.log\nHi,\n Thanks for the response. I've attached the log captured with\n~/Code/Test2/bin/Debug/netcoreapp3.0$ strace -o hang -f -s 200 -e trace=file ./Test2 Hello /media/nas2/output.x\nOutput\nHello to /media/nas2/output.x\nTook (ms): 30076.5998\n\nApp Code\n```\n            Console.WriteLine(args[0] + \" to \" + args[1]);\n            DateTime dt = DateTime.Now;\n            File.WriteAllText(args[1], args[0]);\n            Console.WriteLine(\"Took (ms): \" + (DateTime.Now - dt).TotalMilliseconds.ToString());\n```\nEdit: Attached activity when the perceived hang is occuring\nActivity.log\nRunning this in the console shows the output message line Hello to /media/nas2/output.x followed by 6 repeated messages then the result Took (ms): 30079.2715\nEdit2: \nAfter reading this: [https://github.com/dotnet/coreclr/issues/21027] it appears that the 6 messages may not be related to my issue.\nThanks\n. I thought the timezone might have been the issue as I had noticed Mono had output the U.S. date format when calling ToString(). I checked the Language settings and the dialog had no format examples (dates, currency etc) and the dropdown lists were empty. I added English and set them all to British English, but it appears to have made no difference. I'm going to test that dotnet core has picked them up now. In the meantime here's the log, it looks a lot more detailed.\nhang2.log\nEdit:\nThis looks like the issue: 30649 23:26:22.331559 <... flock resumed> ) = -1 ENOLCK (No locks available) <30.006443>\nThanks.  . x.x.x.x:/mnt/HD/HD_b2 on /media/nas2 type nfs (rw,relatime,vers=3,rsize=8192,wsize=8192,namlen=255,hard,nolock,proto=tcp,timeo=14,retrans=2,sec=sys,mountaddr=x.x.x.x,mountvers=3,mountport=60319,mountproto=udp,local_lock=all,addr=x.x.x.x)\nSetting nolock changes local_lock to all from none.\nEdit: nolock fixed it (I tested on the wrong drive if you read this message before I edited it).\nThanks guys.. I'd be interested in knowing what people's opinions are of this. I feel like nolocks is bad and that I should be using locks. It's not too much of an issue for me as I mainly only use the NAS from this one system (which will be managing locks from itself).\nIt appears older NAS drives (NFS3?) don't support flock and lockf is preferred. I have very little experience with this so I thought I'd ask. Is this a bug? All my other apps and services (Plex, NGINX etc) all currently work with NAS side locking.\n . ",
    "wadebruce": "The merge commit is in our codebase. I'm struggling to understand how a code change would only break when running on the Mac host.\nThere is no stack trace provided when it quits. It just says StackOverflowException and then the Apple error report window pops open.. One other thing we seemed to have learned - we have found that the code fails many layers deep in the dependency injection. We basically commented out all of the logic and we are able to reproduce the error just by calling the controller which then kicks off a series of injections.\nIs it possible that there is a circular dependency? Does anyone know what depth the circular dependency reporting goes to?\nIf it is a circular dependency, is it possible that running on the Mac host with larger amounts of resources available causes the framework to try and construct more at a given time? We're trying to identify why the docker container on the Mac host works fine.. OK - we did identify that it was a circular dependency deep in the graph. Maybe there is a bug in the .NET framework on Mac. I'll post a the Apple system report here for reference.\nI am concerned that it wasn't able to identify the circular dependency itself.\nProcess:               dotnet [9082]\nPath:                  /usr/local/share/dotnet/dotnet\nIdentifier:            dotnet\nVersion:               0\nCode Type:             X86-64 (Native)\nParent Process:        rider [3494]\nResponsible:           dotnet [9082]\nUser ID:               501\nDate/Time:             2018-12-20 12:55:51.619 -0600\nOS Version:            Mac OS X 10.14.2 (18C54)\nReport Version:        12\nAnonymous UUID:        7B556CE7-57D6-B38B-A325-63353FBD0AFF\nSleep/Wake UUID:       1F3FF267-4F22-4B08-BBE5-7CBB2842A428\nTime Awake Since Boot: 64000 seconds\nTime Since Wake:       5700 seconds\nSystem Integrity Protection: enabled\nCrashed Thread:        1\nException Type:        EXC_CRASH (SIGABRT)\nException Codes:       0x0000000000000000, 0x0000000000000000\nException Note:        EXC_CORPSE_NOTIFY\nApplication Specific Information:\nabort() called\nThread 0:: Dispatch queue: com.apple.main-thread\n0   libsystem_kernel.dylib          0x00007fff670847de __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff6713e593 _pthread_cond_wait + 724\n2   libcoreclr.dylib                0x00000001054f8e62 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int) + 338\n3   libcoreclr.dylib                0x00000001054f8a77 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int) + 375\n4   libcoreclr.dylib                0x00000001054fd3f3 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread, unsigned int, void const, int, unsigned int, int, int) + 1891\n5   libcoreclr.dylib                0x00000001054fd682 WaitForMultipleObjectsEx + 82\n6   libcoreclr.dylib                0x0000000105683bad Thread::DoAppropriateWaitWorker(int, void, int, unsigned int, WaitMode) + 1325\n7   libcoreclr.dylib                0x000000010567e6a0 Thread::DoAppropriateWait(int, void, int, unsigned int, WaitMode, PendingSync) + 48\n8   libcoreclr.dylib                0x00000001057a68b0 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync) + 64\n9   libcoreclr.dylib                0x0000000105684a20 Thread::Block(int, PendingSync) + 32\n10  libcoreclr.dylib                0x000000010567c3c5 SyncBlock::Wait(int, int) + 485\n11  libcoreclr.dylib                0x00000001058d7309 ObjectNative::WaitTimeout(bool, int, Object) + 201\n12  ???                             0x000000010c08d6e2 0 + 4496873186\n13  ???                             0x000000010c058bd9 0 + 4496657369\n14  ???                             0x000000010c058a69 0 + 4496657001\n15  ???                             0x000000010c0798a6 0 + 4496791718\n16  ???                             0x000000010c732974 0 + 4503841140\n17  ???                             0x000000010c571b41 0 + 4502002497\n18  libcoreclr.dylib                0x000000010585f5e7 CallDescrWorkerInternal + 124\n19  libcoreclr.dylib                0x00000001056c57b1 MethodDescCallSite::CallTargetWorker(unsigned long const, unsigned long, int) + 945\n20  libcoreclr.dylib                0x0000000105598356 RunMain(MethodDesc, short, int, PtrArray) + 694\n21  libcoreclr.dylib                0x00000001055986c2 Assembly::ExecuteMainMethod(PtrArray, int) + 402\n22  libcoreclr.dylib                0x00000001055d90f4 CorHost2::ExecuteAssembly(unsigned int, char16_t const, int, char16_t const*, unsigned int) + 436\n23  libcoreclr.dylib                0x000000010550a2f6 coreclr_execute_assembly + 230\n24  libhostpolicy.dylib             0x0000000105455388 0x1053cc000 + 562056\n25  libhostpolicy.dylib             0x000000010543e7df 0x1053cc000 + 468959\n26  libhostpolicy.dylib             0x0000000105445089 0x1053cc000 + 495753\n27  libhostfxr.dylib                0x00000001053678a3 0x1052dd000 + 567459\n28  libhostfxr.dylib                0x00000001053875ee 0x1052dd000 + 697838\n29  libhostfxr.dylib                0x000000010538a1c2 0x1052dd000 + 709058\n30  libhostfxr.dylib                0x0000000105388678 0x1052dd000 + 702072\n31  libhostfxr.dylib                0x0000000105368919 0x1052dd000 + 571673\n32  dotnet                          0x00000001052b1052 0x1052a4000 + 53330\n33  dotnet                          0x00000001052b1645 0x1052a4000 + 54853\n34  libdyld.dylib                   0x00007fff66f47ed9 start + 1\nThread 1 Crashed:\n0   libsystem_kernel.dylib          0x00007fff6708723e __pthread_kill + 10\n1   libsystem_pthread.dylib         0x00007fff6713dc1c pthread_kill + 285\n2   libsystem_c.dylib               0x00007fff66ff01c9 abort + 127\n3   libcoreclr.dylib                0x0000000105506103 SEHExceptionThread(void*) + 1683\n4   libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n5   libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n6   libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 2:\n0   libsystem_kernel.dylib          0x00007fff67087716 kevent + 10\n1   libcoreclr.dylib                0x00000001054fb3a0 CorUnix::CPalSynchronizationManager::ReadBytesFromProcessPipe(int, unsigned char, int) + 560\n2   libcoreclr.dylib                0x00000001054fa973 CorUnix::CPalSynchronizationManager::WorkerThread(void) + 131\n3   libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n4   libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n5   libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n6   libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 3:\n0   libsystem_kernel.dylib          0x00007fff67082152 __open + 10\n1   libcoreclr.dylib                0x000000010557667f TwoWayPipe::WaitForConnection() + 31\n2   libcoreclr.dylib                0x000000010556e09f DbgTransportSession::TransportWorker() + 159\n3   libcoreclr.dylib                0x000000010556c9f9 DbgTransportSession::TransportWorkerStatic(void) + 9\n4   libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void) + 328\n5   libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n6   libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n7   libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 4:\n0   libsystem_kernel.dylib          0x00007fff670847de __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff6713e593 _pthread_cond_wait + 724\n2   libcoreclr.dylib                0x00000001054f8e62 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int) + 338\n3   libcoreclr.dylib                0x00000001054f8a77 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int) + 375\n4   libcoreclr.dylib                0x00000001054fd3f3 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread, unsigned int, void const, int, unsigned int, int, int) + 1891\n5   libcoreclr.dylib                0x00000001054fd682 WaitForMultipleObjectsEx + 82\n6   libcoreclr.dylib                0x000000010556ae48 DebuggerRCThread::MainLoop() + 264\n7   libcoreclr.dylib                0x000000010556acdb DebuggerRCThread::ThreadProc() + 251\n8   libcoreclr.dylib                0x000000010556a9e4 DebuggerRCThread::ThreadProcStatic(void) + 132\n9   libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n10  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n11  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n12  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 5:\n0   libsystem_kernel.dylib          0x00007fff670847de __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff6713e593 _pthread_cond_wait + 724\n2   libcoreclr.dylib                0x00000001054f8e62 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int) + 338\n3   libcoreclr.dylib                0x00000001054f8a77 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int) + 375\n4   libcoreclr.dylib                0x00000001054fd3f3 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread, unsigned int, void const, int, unsigned int, int, int) + 1891\n5   libcoreclr.dylib                0x00000001054fd5bd WaitForSingleObjectEx + 77\n6   libcoreclr.dylib                0x00000001057a693e CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync) + 206\n7   libcoreclr.dylib                0x00000001057f29c3 SVR::gc_heap::gc_thread_function() + 163\n8   libcoreclr.dylib                0x00000001057f291f SVR::gc_heap::gc_thread_stub(void) + 79\n9   libcoreclr.dylib                0x00000001057132e8 (anonymous namespace)::CreateNonSuspendableThread(void ()(void), void, char const)::$_1::__invoke(void) + 168\n10  libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n11  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n12  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n13  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 6:\n0   libsystem_kernel.dylib          0x00007fff670847de __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff6713e593 _pthread_cond_wait + 724\n2   libcoreclr.dylib                0x00000001054f8e62 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int) + 338\n3   libcoreclr.dylib                0x00000001054f8a77 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int) + 375\n4   libcoreclr.dylib                0x00000001054fd3f3 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread, unsigned int, void const, int, unsigned int, int, int) + 1891\n5   libcoreclr.dylib                0x00000001054fd5bd WaitForSingleObjectEx + 77\n6   libcoreclr.dylib                0x00000001057a693e CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync) + 206\n7   libcoreclr.dylib                0x00000001057f29a1 SVR::gc_heap::gc_thread_function() + 129\n8   libcoreclr.dylib                0x00000001057f291f SVR::gc_heap::gc_thread_stub(void) + 79\n9   libcoreclr.dylib                0x00000001057132e8 (anonymous namespace)::CreateNonSuspendableThread(void ()(void), void, char const)::$_1::__invoke(void) + 168\n10  libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n11  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n12  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n13  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 7:\n0   libsystem_kernel.dylib          0x00007fff670847de __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff6713e593 _pthread_cond_wait + 724\n2   libcoreclr.dylib                0x00000001054f8e62 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int) + 338\n3   libcoreclr.dylib                0x00000001054f8a77 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int) + 375\n4   libcoreclr.dylib                0x00000001054fd3f3 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread, unsigned int, void const, int, unsigned int, int, int) + 1891\n5   libcoreclr.dylib                0x00000001054fd5bd WaitForSingleObjectEx + 77\n6   libcoreclr.dylib                0x00000001057a693e CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync) + 206\n7   libcoreclr.dylib                0x00000001057f29a1 SVR::gc_heap::gc_thread_function() + 129\n8   libcoreclr.dylib                0x00000001057f291f SVR::gc_heap::gc_thread_stub(void) + 79\n9   libcoreclr.dylib                0x00000001057132e8 (anonymous namespace)::CreateNonSuspendableThread(void ()(void), void, char const)::$_1::__invoke(void) + 168\n10  libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n11  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n12  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n13  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 8:\n0   libsystem_kernel.dylib          0x00007fff670847de __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff6713e593 _pthread_cond_wait + 724\n2   libcoreclr.dylib                0x00000001054f8e62 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int) + 338\n3   libcoreclr.dylib                0x00000001054f8a77 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int) + 375\n4   libcoreclr.dylib                0x00000001054fd3f3 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread, unsigned int, void const, int, unsigned int, int, int) + 1891\n5   libcoreclr.dylib                0x00000001054fd5bd WaitForSingleObjectEx + 77\n6   libcoreclr.dylib                0x00000001057a693e CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync) + 206\n7   libcoreclr.dylib                0x00000001057f29a1 SVR::gc_heap::gc_thread_function() + 129\n8   libcoreclr.dylib                0x00000001057f291f SVR::gc_heap::gc_thread_stub(void) + 79\n9   libcoreclr.dylib                0x00000001057132e8 (anonymous namespace)::CreateNonSuspendableThread(void ()(void), void, char const)::$_1::__invoke(void) + 168\n10  libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n11  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n12  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n13  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 9:\n0   libsystem_kernel.dylib          0x00007fff670847de __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff6713e593 _pthread_cond_wait + 724\n2   libcoreclr.dylib                0x00000001054f8e62 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int) + 338\n3   libcoreclr.dylib                0x00000001054f8a77 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int) + 375\n4   libcoreclr.dylib                0x00000001054fd3f3 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread, unsigned int, void const, int, unsigned int, int, int) + 1891\n5   libcoreclr.dylib                0x00000001054fd682 WaitForMultipleObjectsEx + 82\n6   libcoreclr.dylib                0x000000010570faae FinalizerThread::WaitForFinalizerEvent(CLREvent) + 158\n7   libcoreclr.dylib                0x000000010570fba3 FinalizerThread::FinalizerThreadWorker(void) + 115\n8   libcoreclr.dylib                0x0000000105689173 ManagedThreadBase_DispatchOuter(ManagedThreadCallState) + 419\n9   libcoreclr.dylib                0x0000000105689819 ManagedThreadBase::FinalizerBase(void ()(void)) + 73\n10  libcoreclr.dylib                0x000000010570febc FinalizerThread::FinalizerThreadStart(void) + 204\n11  libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void) + 328\n12  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n13  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n14  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 10:\n0   libsystem_kernel.dylib          0x00007fff6708117a mach_msg_trap + 10\n1   libsystem_kernel.dylib          0x00007fff670816d0 mach_msg + 60\n2   libclrjit.dylib                 0x0000000106cf5088 MachMessage::Receive(unsigned int) + 72\n3   libclrjit.dylib                 0x0000000106cf3fde SEHExceptionThread(void*) + 94\n4   libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n5   libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n6   libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 11:\n0   libsystem_kernel.dylib          0x00007fff670847de __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff6713e593 _pthread_cond_wait + 724\n2   libcoreclr.dylib                0x00000001054f8e25 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int) + 277\n3   libcoreclr.dylib                0x00000001054f8a77 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int) + 375\n4   libcoreclr.dylib                0x00000001054fda7d SleepEx + 141\n5   libcoreclr.dylib                0x00000001056abf66 ThreadpoolMgr::TimerThreadFire() + 150\n6   libcoreclr.dylib                0x00000001056abe35 ThreadpoolMgr::TimerThreadStart(void) + 181\n7   libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void) + 328\n8   libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n9   libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n10  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 12:\n0   libsystem_kernel.dylib          0x00007fff6708117a mach_msg_trap + 10\n1   libsystem_kernel.dylib          0x00007fff670816d0 mach_msg + 60\n2   com.apple.CoreFoundation        0x00007fff39d0b0c2 __CFRunLoopServiceMachPort + 337\n3   com.apple.CoreFoundation        0x00007fff39d0a611 __CFRunLoopRun + 1654\n4   com.apple.CoreFoundation        0x00007fff39d09d48 CFRunLoopRunSpecific + 463\n5   com.apple.CoreFoundation        0x00007fff39d09b54 CFRunLoopRun + 40\n6   ???                             0x000000010c582df3 0 + 4502072819\n7   ???                             0x000000010cc5c271 0 + 4509254257\n8   ???                             0x000000010cf55126 0 + 4512370982\n9   libcoreclr.dylib                0x000000010585f5e7 CallDescrWorkerInternal + 124\n10  libcoreclr.dylib                0x00000001056c57b1 MethodDescCallSite::CallTargetWorker(unsigned long const, unsigned long, int) + 945\n11  libcoreclr.dylib                0x00000001056d98df ThreadNative::KickOffThread_Worker(void) + 431\n12  libcoreclr.dylib                0x0000000105689173 ManagedThreadBase_DispatchOuter(ManagedThreadCallState) + 419\n13  libcoreclr.dylib                0x0000000105689783 ManagedThreadBase::KickOff(ADID, void ()(void), void) + 51\n14  libcoreclr.dylib                0x00000001056d9aff ThreadNative::KickOffThread(void) + 351\n15  libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n16  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n17  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n18  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 13:\n0   libsystem_pthread.dylib         0x00007fff6713a3f8 start_wqthread + 0\n1   ???                             0x0000000054485244 0 + 1414025796\nThread 14:\n0   libsystem_kernel.dylib          0x00007fff670847de __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff6713e593 _pthread_cond_wait + 724\n2   libcoreclr.dylib                0x00000001054f8e25 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int) + 277\n3   libcoreclr.dylib                0x00000001054f8a77 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int) + 375\n4   libcoreclr.dylib                0x00000001054fd3f3 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread, unsigned int, void const, int, unsigned int, int, int) + 1891\n5   libcoreclr.dylib                0x00000001054fd568 PAL_WaitForSingleObjectPrioritized + 72\n6   libcoreclr.dylib                0x00000001057a6d70 CLRLifoSemaphore::WaitForSignal(unsigned int) + 32\n7   libcoreclr.dylib                0x00000001057a6f0a CLRLifoSemaphore::Wait(unsigned int) + 122\n8   libcoreclr.dylib                0x00000001056a920b ThreadpoolMgr::WorkerThreadStart(void) + 1563\n9   libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n10  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n11  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n12  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 15:\n0   libsystem_kernel.dylib          0x00007fff67081282 swtch_pri + 10\n1   libsystem_pthread.dylib         0x00007fff6713debe sched_yield + 11\n2   libcoreclr.dylib                0x0000000105502d29 SwitchToThread + 9\n3   libcoreclr.dylib                0x00000001056de129 ThreadNative::YieldThread() + 57\n4   ???                             0x000000010c0dfa43 0 + 4497209923\n5   ???                             0x000000010c080251 0 + 4496818769\n6   ???                             0x000000010c07abdb 0 + 4496796635\n7   ???                             0x0000000112027ef8 0 + 4597120760\n8   ???                             0x00000001120278bd 0 + 4597119165\n9   ???                             0x000000010d6781ce 0 + 4519854542\n10  ???                             0x000000010d678246 0 + 4519854662\n11  ???                             0x000000010c057f3c 0 + 4496654140\n12  ???                             0x000000010bf93f6d 0 + 4495851373\n13  libcoreclr.dylib                0x000000010585f5e7 CallDescrWorkerInternal + 124\n14  libcoreclr.dylib                0x00000001056c57b1 MethodDescCallSite::CallTargetWorker(unsigned long const, unsigned long, int) + 945\n15  libcoreclr.dylib                0x00000001056d98df ThreadNative::KickOffThread_Worker(void) + 431\n16  libcoreclr.dylib                0x0000000105689173 ManagedThreadBase_DispatchOuter(ManagedThreadCallState) + 419\n17  libcoreclr.dylib                0x0000000105689783 ManagedThreadBase::KickOff(ADID, void ()(void), void) + 51\n18  libcoreclr.dylib                0x00000001056d9aff ThreadNative::KickOffThread(void) + 351\n19  libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n20  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n21  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n22  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 16:\n0   libsystem_kernel.dylib          0x00007fff67081282 swtch_pri + 10\n1   libsystem_pthread.dylib         0x00007fff6713debe sched_yield + 11\n2   libcoreclr.dylib                0x0000000105502d29 SwitchToThread + 9\n3   libcoreclr.dylib                0x00000001056de129 ThreadNative::YieldThread() + 57\n4   ???                             0x000000010c0dfa43 0 + 4497209923\n5   ???                             0x000000010c080251 0 + 4496818769\n6   ???                             0x000000010c07abdb 0 + 4496796635\n7   ???                             0x0000000112027ef8 0 + 4597120760\n8   ???                             0x00000001120278bd 0 + 4597119165\n9   ???                             0x000000010d6781ce 0 + 4519854542\n10  ???                             0x000000010d678246 0 + 4519854662\n11  ???                             0x000000010c057f3c 0 + 4496654140\n12  ???                             0x000000010bf93f6d 0 + 4495851373\n13  libcoreclr.dylib                0x000000010585f5e7 CallDescrWorkerInternal + 124\n14  libcoreclr.dylib                0x00000001056c57b1 MethodDescCallSite::CallTargetWorker(unsigned long const, unsigned long, int) + 945\n15  libcoreclr.dylib                0x00000001056d98df ThreadNative::KickOffThread_Worker(void) + 431\n16  libcoreclr.dylib                0x0000000105689173 ManagedThreadBase_DispatchOuter(ManagedThreadCallState) + 419\n17  libcoreclr.dylib                0x0000000105689783 ManagedThreadBase::KickOff(ADID, void ()(void), void) + 51\n18  libcoreclr.dylib                0x00000001056d9aff ThreadNative::KickOffThread(void) + 351\n19  libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n20  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n21  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n22  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 17:\n0   libsystem_kernel.dylib          0x00007fff670847de __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff6713e593 _pthread_cond_wait + 724\n2   libcoreclr.dylib                0x00000001054f8e25 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int) + 277\n3   libcoreclr.dylib                0x00000001054f8a77 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int) + 375\n4   libcoreclr.dylib                0x00000001054fda7d SleepEx + 141\n5   libcoreclr.dylib                0x0000000105718a5f __SwitchToThread(unsigned int, unsigned int) + 15\n6   libcoreclr.dylib                0x00000001056ab4dc ThreadpoolMgr::GateThreadStart(void) + 444\n7   libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void) + 328\n8   libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n9   libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n10  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 18:\n0   libsystem_kernel.dylib          0x00007fff6708117a mach_msg_trap + 10\n1   libsystem_kernel.dylib          0x00007fff670816d0 mach_msg + 60\n2   com.apple.CoreFoundation        0x00007fff39d0b0c2 __CFRunLoopServiceMachPort + 337\n3   com.apple.CoreFoundation        0x00007fff39d0a611 __CFRunLoopRun + 1654\n4   com.apple.CoreFoundation        0x00007fff39d09d48 CFRunLoopRunSpecific + 463\n5   com.apple.CoreFoundation        0x00007fff39d09b54 CFRunLoopRun + 40\n6   ???                             0x000000010c582df3 0 + 4502072819\n7   ???                             0x000000010cc5c271 0 + 4509254257\n8   ???                             0x000000010cf55126 0 + 4512370982\n9   libcoreclr.dylib                0x000000010585f5e7 CallDescrWorkerInternal + 124\n10  libcoreclr.dylib                0x00000001056c57b1 MethodDescCallSite::CallTargetWorker(unsigned long const, unsigned long, int) + 945\n11  libcoreclr.dylib                0x00000001056d98df ThreadNative::KickOffThread_Worker(void) + 431\n12  libcoreclr.dylib                0x0000000105689173 ManagedThreadBase_DispatchOuter(ManagedThreadCallState) + 419\n13  libcoreclr.dylib                0x0000000105689783 ManagedThreadBase::KickOff(ADID, void ()(void), void) + 51\n14  libcoreclr.dylib                0x00000001056d9aff ThreadNative::KickOffThread(void) + 351\n15  libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n16  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n17  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n18  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 19:\n0   libsystem_kernel.dylib          0x00007fff67087716 kevent + 10\n1   System.Native.dylib             0x00000001088a0e45 SystemNative_WaitForSocketEvents + 85\n2   ???                             0x00000001120a3ce8 0 + 4597628136\n3   ???                             0x0000000111d36a44 0 + 4594035268\n4   ???                             0x0000000111d36e69 0 + 4594036329\n5   libcoreclr.dylib                0x000000010585f5e7 CallDescrWorkerInternal + 124\n6   libcoreclr.dylib                0x00000001056c57b1 MethodDescCallSite::CallTargetWorker(unsigned long const, unsigned long, int) + 945\n7   libcoreclr.dylib                0x00000001056d98df ThreadNative::KickOffThread_Worker(void) + 431\n8   libcoreclr.dylib                0x0000000105689173 ManagedThreadBase_DispatchOuter(ManagedThreadCallState) + 419\n9   libcoreclr.dylib                0x0000000105689783 ManagedThreadBase::KickOff(ADID, void ()(void), void) + 51\n10  libcoreclr.dylib                0x00000001056d9aff ThreadNative::KickOffThread(void) + 351\n11  libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n12  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n13  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n14  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 20:\n0   libsystem_kernel.dylib          0x00007fff67082e5e read + 10\n1   System.Native.dylib             0x00000001088a279f SignalHandlerLoop + 79\n2   libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n3   libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n4   libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 21:\n0   libsystem_kernel.dylib          0x00007fff67087716 kevent + 10\n1   libuv.dylib                     0x000000010a5112c4 uv__io_poll + 1716\n2   libuv.dylib                     0x000000010a4f689f uv_run + 207\n3   ???                             0x00000001120c29fc 0 + 4597754364\n4   ???                             0x000000010caab1b8 0 + 4507480504\n5   ???                             0x000000010caa7bfd 0 + 4507466749\n6   ???                             0x000000010cf55126 0 + 4512370982\n7   libcoreclr.dylib                0x000000010585f5e7 CallDescrWorkerInternal + 124\n8   libcoreclr.dylib                0x00000001056c57b1 MethodDescCallSite::CallTargetWorker(unsigned long const, unsigned long, int) + 945\n9   libcoreclr.dylib                0x00000001056d98df ThreadNative::KickOffThread_Worker(void) + 431\n10  libcoreclr.dylib                0x0000000105689173 ManagedThreadBase_DispatchOuter(ManagedThreadCallState) + 419\n11  libcoreclr.dylib                0x0000000105689783 ManagedThreadBase::KickOff(ADID, void ()(void), void) + 51\n12  libcoreclr.dylib                0x00000001056d9aff ThreadNative::KickOffThread(void) + 351\n13  libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n14  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n15  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n16  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 22:\n0   libsystem_kernel.dylib          0x00007fff67087716 kevent + 10\n1   libuv.dylib                     0x000000010a5112c4 uv__io_poll + 1716\n2   libuv.dylib                     0x000000010a4f689f uv_run + 207\n3   ???                             0x00000001120c29fc 0 + 4597754364\n4   ???                             0x000000010caab1b8 0 + 4507480504\n5   ???                             0x000000010caa7bfd 0 + 4507466749\n6   ???                             0x000000010cf55126 0 + 4512370982\n7   libcoreclr.dylib                0x000000010585f5e7 CallDescrWorkerInternal + 124\n8   libcoreclr.dylib                0x00000001056c57b1 MethodDescCallSite::CallTargetWorker(unsigned long const, unsigned long, int) + 945\n9   libcoreclr.dylib                0x00000001056d98df ThreadNative::KickOffThread_Worker(void) + 431\n10  libcoreclr.dylib                0x0000000105689173 ManagedThreadBase_DispatchOuter(ManagedThreadCallState) + 419\n11  libcoreclr.dylib                0x0000000105689783 ManagedThreadBase::KickOff(ADID, void ()(void), void) + 51\n12  libcoreclr.dylib                0x00000001056d9aff ThreadNative::KickOffThread(void) + 351\n13  libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n14  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n15  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n16  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 23:\n0   libsystem_kernel.dylib          0x00007fff670847de __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff6713e593 _pthread_cond_wait + 724\n2   libcoreclr.dylib                0x00000001054f8e25 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int) + 277\n3   libcoreclr.dylib                0x00000001054f8a77 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int) + 375\n4   libcoreclr.dylib                0x00000001054fd3f3 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread, unsigned int, void const, int, unsigned int, int, int) + 1891\n5   libcoreclr.dylib                0x00000001054fd568 PAL_WaitForSingleObjectPrioritized + 72\n6   libcoreclr.dylib                0x00000001057a6d70 CLRLifoSemaphore::WaitForSignal(unsigned int) + 32\n7   libcoreclr.dylib                0x00000001057a7180 CLRLifoSemaphore::Wait(unsigned int, unsigned int, unsigned int) + 608\n8   libcoreclr.dylib                0x00000001056a8fae ThreadpoolMgr::WorkerThreadStart(void) + 958\n9   libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n10  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n11  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n12  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 24:\n0   libsystem_kernel.dylib          0x00007fff670847de __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff6713e593 _pthread_cond_wait + 724\n2   libcoreclr.dylib                0x00000001054f8e25 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int) + 277\n3   libcoreclr.dylib                0x00000001054f8a77 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int) + 375\n4   libcoreclr.dylib                0x00000001054fd3f3 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread, unsigned int, void const, int, unsigned int, int, int) + 1891\n5   libcoreclr.dylib                0x00000001054fd568 PAL_WaitForSingleObjectPrioritized + 72\n6   libcoreclr.dylib                0x00000001057a6d70 CLRLifoSemaphore::WaitForSignal(unsigned int) + 32\n7   libcoreclr.dylib                0x00000001057a6f0a CLRLifoSemaphore::Wait(unsigned int) + 122\n8   libcoreclr.dylib                0x00000001056a920b ThreadpoolMgr::WorkerThreadStart(void) + 1563\n9   libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n10  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n11  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n12  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 25:\n0   libsystem_kernel.dylib          0x00007fff670847de __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff6713e593 _pthread_cond_wait + 724\n2   libcoreclr.dylib                0x00000001054f8e25 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int) + 277\n3   libcoreclr.dylib                0x00000001054f8a77 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int) + 375\n4   libcoreclr.dylib                0x00000001054fd3f3 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread, unsigned int, void const, int, unsigned int, int, int) + 1891\n5   libcoreclr.dylib                0x00000001054fd568 PAL_WaitForSingleObjectPrioritized + 72\n6   libcoreclr.dylib                0x00000001057a6d70 CLRLifoSemaphore::WaitForSignal(unsigned int) + 32\n7   libcoreclr.dylib                0x00000001057a6f0a CLRLifoSemaphore::Wait(unsigned int) + 122\n8   libcoreclr.dylib                0x00000001056a920b ThreadpoolMgr::WorkerThreadStart(void) + 1563\n9   libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n10  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n11  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n12  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 26:\n0   ???                             0x00000001137d0093 0 + 4621926547\n1   ???                             0x00000001131dd450 0 + 4615689296\n2   ???                             0x000000010d914d26 0 + 4522593574\n3   ???                             0x000000010d914d61 0 + 4522593633\n4   ???                             0x000000010d8e0df5 0 + 4522380789\n5   ???                             0x000000011212f5c7 0 + 4598199751\n6   ???                             0x000000011212f3fb 0 + 4598199291\n7   ???                             0x000000011212f389 0 + 4598199177\n8   ???                             0x000000010d8f21de 0 + 4522451422\n9   ???                             0x000000011212f112 0 + 4598198546\n10  ???                             0x000000011212ef3b 0 + 4598198075\n11  ???                             0x000000011212eec9 0 + 4598197961\n12  ???                             0x000000010d8f1cce 0 + 4522450126\n13  ???                             0x000000011212d527 0 + 4598191399\n14  ???                             0x000000011212d35b 0 + 4598190939\n15  ???                             0x000000011212d2e9 0 + 4598190825\n16  ???                             0x000000011212c984 0 + 4598188420\n17  ???                             0x000000011212c76b 0 + 4598187883\n18  ???                             0x000000011212c6f9 0 + 4598187769\n19  ???                             0x000000010d911d6e 0 + 4522581358\n20  ???                             0x0000000112120f90 0 + 4598140816\n21  ???                             0x0000000112120b9b 0 + 4598139803\n22  ???                             0x0000000112120b2d 0 + 4598139693\n23  ???                             0x00000001120f94c5 0 + 4597978309\n24  ???                             0x0000000112952372 0 + 4606731122\n25  ???                             0x00000001120f848e 0 + 4597974158\n26  ???                             0x00000001120f82eb 0 + 4597973739\n27  ???                             0x00000001120f827d 0 + 4597973629\n28  ???                             0x00000001120f80e1 0 + 4597973217\n29  ???                             0x00000001120f7f5b 0 + 4597972827\n30  ???                             0x00000001120f7ee1 0 + 4597972705\n31  ???                             0x00000001120f7b01 0 + 4597971713\n32  ???                             0x00000001120f799b 0 + 4597971355\n33  ???                             0x00000001120f792d 0 + 4597971245\n34  ???                             0x00000001120f778d 0 + 4597970829\n35  ???                             0x00000001120f6f7b 0 + 4597968763\n36  ???                             0x00000001120f6f0d 0 + 4597968653\n37  ???                             0x00000001120efda5 0 + 4597939621\n38  ???                             0x00000001120ef56b 0 + 4597937515\n39  ???                             0x00000001120ef4fd 0 + 4597937405\n40  ???                             0x00000001120ef22b 0 + 4597936683\n41  ???                             0x00000001120eef1b 0 + 4597935899\n42  ???                             0x00000001120eeead 0 + 4597935789\n43  ???                             0x000000010c733cd5 0 + 4503846101\n44  ???                             0x000000010bf93f6d 0 + 4495851373\n45  ???                             0x00000001120eb1a0 0 + 4597920160\n46  ???                             0x000000010d47c0d5 0 + 4517773525\n47  ???                             0x000000010bf93f6d 0 + 4495851373\n48  ???                             0x000000010c0907c8 0 + 4496885704\n49  libcoreclr.dylib                0x000000010585f5e7 CallDescrWorkerInternal + 124\n50  libcoreclr.dylib                0x00000001056c57b1 MethodDescCallSite::CallTargetWorker(unsigned long const, unsigned long, int) + 945\n51  libcoreclr.dylib                0x00000001056e0415 QueueUserWorkItemManagedCallback(void) + 165\n52  libcoreclr.dylib                0x0000000105689173 ManagedThreadBase_DispatchOuter(ManagedThreadCallState) + 419\n53  libcoreclr.dylib                0x00000001056897c3 ManagedThreadBase::ThreadPool(ADID, void ()(void), void) + 51\n54  libcoreclr.dylib                0x000000010567dd90 ManagedPerAppDomainTPCount::DispatchWorkItem(bool, bool) + 272\n55  libcoreclr.dylib                0x00000001056a9105 ThreadpoolMgr::WorkerThreadStart(void) + 1301\n56  libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n57  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n58  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n59  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 27:\n0   libsystem_kernel.dylib          0x00007fff670847de __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff6713e593 _pthread_cond_wait + 724\n2   libcoreclr.dylib                0x00000001054f8e25 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int) + 277\n3   libcoreclr.dylib                0x00000001054f8a77 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int) + 375\n4   libcoreclr.dylib                0x00000001054fd3f3 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread, unsigned int, void const, int, unsigned int, int, int) + 1891\n5   libcoreclr.dylib                0x00000001054fd568 PAL_WaitForSingleObjectPrioritized + 72\n6   libcoreclr.dylib                0x00000001057a6d70 CLRLifoSemaphore::WaitForSignal(unsigned int) + 32\n7   libcoreclr.dylib                0x00000001057a7180 CLRLifoSemaphore::Wait(unsigned int, unsigned int, unsigned int) + 608\n8   libcoreclr.dylib                0x00000001056a8fae ThreadpoolMgr::WorkerThreadStart(void) + 958\n9   libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n10  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n11  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n12  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 28:\n0   libsystem_kernel.dylib          0x00007fff670847de __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff6713e593 _pthread_cond_wait + 724\n2   libcoreclr.dylib                0x00000001054f8e25 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData, unsigned int, CorUnix::ThreadWakeupReason, unsigned int) + 277\n3   libcoreclr.dylib                0x00000001054f8a77 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread, unsigned int, bool, bool, CorUnix::ThreadWakeupReason, unsigned int) + 375\n4   libcoreclr.dylib                0x00000001054fd3f3 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread, unsigned int, void const, int, unsigned int, int, int) + 1891\n5   libcoreclr.dylib                0x00000001054fd568 PAL_WaitForSingleObjectPrioritized + 72\n6   libcoreclr.dylib                0x00000001057a6e5d CLRLifoSemaphore::WaitForSignal(unsigned int) + 269\n7   libcoreclr.dylib                0x00000001057a7180 CLRLifoSemaphore::Wait(unsigned int, unsigned int, unsigned int) + 608\n8   libcoreclr.dylib                0x00000001056a8fae ThreadpoolMgr::WorkerThreadStart(void) + 958\n9   libcoreclr.dylib                0x00000001055034c8 CorUnix::CPalThread::ThreadEntry(void*) + 328\n10  libsystem_pthread.dylib         0x00007fff6713b305 _pthread_body + 126\n11  libsystem_pthread.dylib         0x00007fff6713e26f _pthread_start + 70\n12  libsystem_pthread.dylib         0x00007fff6713a415 thread_start + 13\nThread 1 crashed with X86 Thread State (64-bit):\n  rax: 0x0000000000000000  rbx: 0x00007000084f6000  rcx: 0x00007000084f4518  rdx: 0x0000000000000000\n  rdi: 0x0000000000000903  rsi: 0x0000000000000006  rbp: 0x00007000084f4550  rsp: 0x00007000084f4518\n   r8: 0x00007000084f5df8   r9: 0x0000000000000000  r10: 0x0000000000000000  r11: 0x0000000000000206\n  r12: 0x0000000000000903  r13: 0x00000000c0000005  r14: 0x0000000000000006  r15: 0x000000000000002d\n  rip: 0x00007fff6708723e  rfl: 0x0000000000000206  cr2: 0x00007000085fafc8\nLogical CPU:     0\nError Code:      0x02000005\nTrap Number:     133\nBinary Images:\n       0x1052a4000 -        0x1052c6ff7 +dotnet (0) <5567CA01-C9CD-3985-8833-B70721BFB7A4> /usr/local/share/dotnet/dotnet\n       0x1052dd000 -        0x1053c3fff +libhostfxr.dylib (0) <28570525-52B9-3A06-B4D4-BB21198F8440> /usr/local/share/dotnet/host/fxr/2.2.0/libhostfxr.dylib\n       0x1053cc000 -        0x1054b5fff +libhostpolicy.dylib (0)  /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.2.0/libhostpolicy.dylib\n       0x1054bf000 -        0x105a0ffff +libcoreclr.dylib (0)  /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.2.0/libcoreclr.dylib\n       0x106b2d000 -        0x106d3cff7 +libclrjit.dylib (0) <7410E4DB-593A-3E28-AF66-C719B2445E20> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.2.0/libclrjit.dylib\n       0x106de0000 -        0x106debfff +System.Globalization.Native.dylib (0)  /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.2.0/System.Globalization.Native.dylib\n       0x10889b000 -        0x1088a3fff +System.Native.dylib (0)  /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.2.0/System.Native.dylib\n       0x109464000 -        0x10946aff7 +System.Security.Cryptography.Native.Apple.dylib (0) <8354004D-260C-3913-A8EF-C37E6995C6C7> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.2.0/System.Security.Cryptography.Native.Apple.dylib\n       0x109907000 -        0x109985a67  dyld (640.2) <289AB27E-F09F-3384-A14A-100431139559> /usr/lib/dyld\n       0x10a4ef000 -        0x10a517ffb +libuv.dylib (0)  /usr/local/share/dotnet/store/x64/netcoreapp2.0/libuv/1.10.0/runtimes/osx/native/libuv.dylib\n    0x7fff35ffb000 -     0x7fff35ffbfff  com.apple.Accelerate (1.11 - Accelerate 1.11)  /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate\n    0x7fff36013000 -     0x7fff366b3fe3  com.apple.vImage (8.1 - ???)  /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage\n    0x7fff366b4000 -     0x7fff3692bfd7  libBLAS.dylib (1243.200.4) <0ADBEAE3-6636-33E5-AC9F-11C2249E19D3> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib\n    0x7fff3692c000 -     0x7fff3699efe7  libBNNS.dylib (38.200.5)  /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBNNS.dylib\n    0x7fff3699f000 -     0x7fff36d45fff  libLAPACK.dylib (1243.200.4) <45722A8A-5788-3C4C-ADD9-1812763FA635> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib\n    0x7fff36d46000 -     0x7fff36d5bffb  libLinearAlgebra.dylib (1243.200.4) <3923AB79-213E-32FD-AC87-8B1A1A832336> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLinearAlgebra.dylib\n    0x7fff36d5c000 -     0x7fff36d61ff3  libQuadrature.dylib (3.200.2) <4FBCAC0A-81A4-3C53-8458-27F3569C809D> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libQuadrature.dylib\n    0x7fff36d62000 -     0x7fff36ddfffb  libSparse.dylib (79.200.5) <2D650C50-E87E-3F24-9BFA-C8EB6DE1A6E9> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparse.dylib\n    0x7fff36de0000 -     0x7fff36df3ffb  libSparseBLAS.dylib (1243.200.4) <6F8C78BE-A0FD-3507-8A95-541AFC57F1EE> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparseBLAS.dylib\n    0x7fff36df4000 -     0x7fff36fd8ff3  libvDSP.dylib (671.220.1) <2F576522-08B1-3C65-8F00-3427E938ADDA> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib\n    0x7fff36fd9000 -     0x7fff3708eff3  libvMisc.dylib (671.220.1)  /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib\n    0x7fff3708f000 -     0x7fff3708ffff  com.apple.Accelerate.vecLib (3.11 - vecLib 3.11) <221E4FEF-0431-3316-8281-22B6F8315A09> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib\n    0x7fff380b3000 -     0x7fff380b3fff  com.apple.ApplicationServices (50.1 - 50.1) <50496459-FFDD-3A78-8D3D-A252BD9B9DA2> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices\n    0x7fff380b4000 -     0x7fff3811fff7  com.apple.ApplicationServices.ATS (377 - 453.11) <4080F8BE-F2A2-3707-8754-436FBDB1DAF1> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS\n    0x7fff381b8000 -     0x7fff382d7fff  libFontParser.dylib (228.6)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib\n    0x7fff382d8000 -     0x7fff38323fff  libFontRegistry.dylib (228.12) <1CC4D486-74F8-3459-BBA1-F68A36C5CAF8> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib\n    0x7fff3841f000 -     0x7fff38423ff3  com.apple.ColorSyncLegacy (4.13.0 - 1) <4B1238CC-9B77-3AA5-8329-EE3C736F07EA> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSyncLegacy.framework/Versions/A/ColorSyncLegacy\n    0x7fff384c0000 -     0x7fff38512ff3  com.apple.HIServices (1.22 - 627.14.2) <1F851BF9-AD29-3558-9EA5-AAD9BAAAC823> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices\n    0x7fff38513000 -     0x7fff38521ff3  com.apple.LangAnalysis (1.7.0 - 1.7.0) <5654723A-7B3B-391F-B9F7-0DE4D5940185> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis\n    0x7fff38522000 -     0x7fff3856efff  com.apple.print.framework.PrintCore (14.2 - 503.8)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore\n    0x7fff3856f000 -     0x7fff385aaff7  com.apple.QD (3.12 - 407.2)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD\n    0x7fff385ab000 -     0x7fff385b7ff7  com.apple.speech.synthesis.framework (8.1.0 - 8.1.0)  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis\n    0x7fff385b8000 -     0x7fff38855fff  com.apple.audio.toolbox.AudioToolbox (1.14 - 1.14) <5D484151-F269-3D98-B507-0544A6B950AC> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox\n    0x7fff38bbb000 -     0x7fff38f7cfff  com.apple.CFNetwork (976 - 976) <10F464AD-6687-3012-A2AA-0453629CA968> /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork\n    0x7fff394ba000 -     0x7fff39586fff  com.apple.ColorSync (4.13.0 - 3340) <2F45EB01-0C51-3D25-9836-18F99222E1C7> /System/Library/Frameworks/ColorSync.framework/Versions/A/ColorSync\n    0x7fff39721000 -     0x7fff397b1fff  com.apple.audio.CoreAudio (4.3.0 - 4.3.0) <1E7EF105-B843-370D-884E-0A43E1A5800B> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio\n    0x7fff39843000 -     0x7fff39be4fef  com.apple.CoreData (120 - 866.1) <18CD58FD-513E-385B-B43C-08EEB909709C> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData\n    0x7fff39be5000 -     0x7fff39cceff7  com.apple.CoreDisplay (101.3 - 106.2)  /System/Library/Frameworks/CoreDisplay.framework/Versions/A/CoreDisplay\n    0x7fff39ccf000 -     0x7fff3a11cff7  com.apple.CoreFoundation (6.9 - 1561)  /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\n    0x7fff3a11e000 -     0x7fff3a7abff7  com.apple.CoreGraphics (2.0 - 1249.2) <3AC6DEB1-245B-3E3A-B5CF-791A37237775> /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics\n    0x7fff3a7ad000 -     0x7fff3aad6fff  com.apple.CoreImage (14.2.0 - 720.0.130) <8C8BC619-7084-3F58-BBFC-4A97BD330787> /System/Library/Frameworks/CoreImage.framework/Versions/A/CoreImage\n    0x7fff3af8c000 -     0x7fff3af8cfff  com.apple.CoreServices (941 - 941) <950D3EAF-C98E-3BCB-8FD9-43EEA0E48988> /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices\n    0x7fff3af8d000 -     0x7fff3b00bffb  com.apple.AE (771 - 771) <4B009524-699E-3891-98DD-E3B6BB433C8F> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE\n    0x7fff3b00c000 -     0x7fff3b2e4ff7  com.apple.CoreServices.CarbonCore (1178.16 - 1178.16) <17FC2B9E-EB6C-3768-A2D0-6E086F2563D9> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore\n    0x7fff3b2e5000 -     0x7fff3b32fff7  com.apple.DictionaryServices (1.2 - 284.16.3) <1DAC9153-FB5A-3798-8797-CBFEFF227F71> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices\n    0x7fff3b330000 -     0x7fff3b338ffb  com.apple.CoreServices.FSEvents (1239.200.12 - 1239.200.12) <8E1507EA-F0A8-3845-B32D-4FBC1381E89C> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/FSEvents\n    0x7fff3b339000 -     0x7fff3b504fff  com.apple.LaunchServices (941 - 941) <98B7E20E-5D0A-3A71-A019-346A145A1A5E> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices\n    0x7fff3b505000 -     0x7fff3b5a7fff  com.apple.Metadata (10.7.0 - 1191.53)  /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata\n    0x7fff3b5a8000 -     0x7fff3b5f3ff7  com.apple.CoreServices.OSServices (941 - 941)  /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices\n    0x7fff3b5f4000 -     0x7fff3b662ff7  com.apple.SearchKit (1.4.0 - 1.4.0)  /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit\n    0x7fff3b663000 -     0x7fff3b687ffb  com.apple.coreservices.SharedFileList (71.27 - 71.27) <6389B59D-DDAC-3C97-A982-137B9B1FB734> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SharedFileList.framework/Versions/A/SharedFileList\n    0x7fff3b9cf000 -     0x7fff3bb34ffb  com.apple.CoreText (352.0 - 584.26) <5F61037C-825D-37A4-9091-0047413CC213> /System/Library/Frameworks/CoreText.framework/Versions/A/CoreText\n    0x7fff3bb35000 -     0x7fff3bb72fff  com.apple.CoreVideo (1.8 - 0.0) <34EC73F1-F0ED-32F5-B96E-7683B1F9A7A2> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo\n    0x7fff3be86000 -     0x7fff3be8bfff  com.apple.DiskArbitration (2.7 - 2.7) <97707A79-30E7-3D99-AA20-B992B0900BC4> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration\n    0x7fff3c054000 -     0x7fff3c422fff  com.apple.Foundation (6.9 - 1561) <27FD022F-F0E3-3053-BADA-DF9BF856CA85> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation\n    0x7fff3c493000 -     0x7fff3c4c3ff3  com.apple.GSS (4.0 - 2.0) <86D07291-5DFC-30C2-9A18-5FCEDB0BE621> /System/Library/Frameworks/GSS.framework/Versions/A/GSS\n    0x7fff3c749000 -     0x7fff3c7dbff7  com.apple.framework.IOKit (2.0.2 - 1483.230.1)  /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n    0x7fff3c7dd000 -     0x7fff3c7e7ff7  com.apple.IOSurface (255.1 - 255.1) <58826B1A-38E8-3C76-8FFC-76C9282DA893> /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface\n    0x7fff3c83e000 -     0x7fff3c9dcfff  com.apple.ImageIO.framework (3.3.0 - 1822.1) <908907D5-5C29-32F7-ACD9-C6A6D51C4D15> /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\n    0x7fff3c9dd000 -     0x7fff3c9e1ffb  libGIF.dylib (1822.1) <35E37B95-1962-3A25-9C9E-CADD161152B3> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib\n    0x7fff3c9e2000 -     0x7fff3cac7fe7  libJP2.dylib (1822.1)  /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib\n    0x7fff3cac8000 -     0x7fff3caedff7  libJPEG.dylib (1822.1)  /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib\n    0x7fff3cdc0000 -     0x7fff3cde6fe7  libPng.dylib (1822.1) <28FE6E2C-1A17-3A84-AAF3-76014DEADDD4> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib\n    0x7fff3cde7000 -     0x7fff3cde9ff7  libRadiance.dylib (1822.1) <687906E3-4EC2-3CE9-B7EA-34418239EE1B> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib\n    0x7fff3cdea000 -     0x7fff3ce38ffb  libTIFF.dylib (1822.1) <0A1C083B-CE2F-3A00-8E45-EB58DCA2FF34> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib\n    0x7fff3dee2000 -     0x7fff3defbfff  com.apple.Kerberos (3.0 - 1) <5D1B0593-3C0E-32D5-AAE5-ABC22A98B639> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos\n    0x7fff3e91d000 -     0x7fff3e9b0fff  com.apple.Metal (158.5 - 158.5) <219312CC-0DE5-3E8D-9F62-393D0C35B0FD> /System/Library/Frameworks/Metal.framework/Versions/A/Metal\n    0x7fff3e9cd000 -     0x7fff3e9edff7  com.apple.MetalPerformanceShaders.MPSCore (1.0 - 1) <18281B14-0C6A-38F8-AB80-2D4BB0743C88> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSCore.framework/Versions/A/MPSCore\n    0x7fff3e9ee000 -     0x7fff3ea6cff7  com.apple.MetalPerformanceShaders.MPSImage (1.0 - 1)  /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSImage.framework/Versions/A/MPSImage\n    0x7fff3ea6d000 -     0x7fff3ea95fff  com.apple.MetalPerformanceShaders.MPSMatrix (1.0 - 1) <116D6C1A-2FD7-3743-95A0-CDDA3D459529> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSMatrix.framework/Versions/A/MPSMatrix\n    0x7fff3ea96000 -     0x7fff3ebc8ff7  com.apple.MetalPerformanceShaders.MPSNeuralNetwork (1.0 - 1) <88E80BEE-3D2B-328B-80D4-F4717BDB2E9F> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSNeuralNetwork.framework/Versions/A/MPSNeuralNetwork\n    0x7fff3ebc9000 -     0x7fff3ebe4ff7  com.apple.MetalPerformanceShaders.MPSRayIntersector (1.0 - 1)  /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSRayIntersector.framework/Versions/A/MPSRayIntersector\n    0x7fff3ebe5000 -     0x7fff3ebe5ff7  com.apple.MetalPerformanceShaders.MetalPerformanceShaders (1.0 - 1) <1BBA8BC8-49C6-3C9B-B985-7CE4373E3553> /System/Library/Frameworks/MetalPerformanceShaders.framework/Versions/A/MetalPerformanceShaders\n    0x7fff3fde2000 -     0x7fff3fdeeffb  com.apple.NetFS (6.0 - 4.0) <918DF6CD-2DB0-36A8-B869-5EF637A06C0D> /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS\n    0x7fff428ae000 -     0x7fff42906fff  com.apple.opencl (2.15.1 - 2.15.1)  /System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL\n    0x7fff42907000 -     0x7fff42923ff7  com.apple.CFOpenDirectory (10.14 - 207.200.4) <2CB1F122-2FA0-347C-8454-9CE0FA150832> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory\n    0x7fff42924000 -     0x7fff42930ffb  com.apple.OpenDirectory (10.14 - 207.200.4)  /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory\n    0x7fff43293000 -     0x7fff43295fff  libCVMSPluginSupport.dylib (17.3.1) <4D6061EC-CFCD-3C0E-90E4-51644DC5F76A> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCVMSPluginSupport.dylib\n    0x7fff43296000 -     0x7fff4329bff3  libCoreFSCache.dylib (163.20) <566DB80E-F1D6-3AEC-AF06-08955507AFEE> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreFSCache.dylib\n    0x7fff4329c000 -     0x7fff432a0fff  libCoreVMClient.dylib (163.20)  /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib\n    0x7fff432a1000 -     0x7fff432a9ffb  libGFXShared.dylib (17.3.1) <902F535E-E411-3C3B-B980-0A7DB40EA5B7> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib\n    0x7fff432aa000 -     0x7fff432b5fff  libGL.dylib (17.3.1) <87F8CCDB-2D7D-3B01-AA6F-6C7A4B1CA11E> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib\n    0x7fff432b6000 -     0x7fff432f0fef  libGLImage.dylib (17.3.1)  /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib\n    0x7fff43464000 -     0x7fff434a1fff  libGLU.dylib (17.3.1)  /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib\n    0x7fff43e51000 -     0x7fff43e60ff3  com.apple.opengl (17.3.1 - 17.3.1) <78BDC7C4-87AD-33CA-BFAC-A9CC5F605B5D> /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL\n    0x7fff44cbc000 -     0x7fff44f15fff  com.apple.QuartzCore (1.11 - 695.4) <6692906D-9EF7-3EA0-96D3-3766567AE7F2> /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore\n    0x7fff45769000 -     0x7fff45a91fff  com.apple.security (7.0 - 58286.230.21) <5ADE179E-87D5-3B90-9172-D183D4665037> /System/Library/Frameworks/Security.framework/Versions/A/Security\n    0x7fff45a92000 -     0x7fff45b21fff  com.apple.securityfoundation (6.0 - 55185.200.14)  /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation\n    0x7fff45b53000 -     0x7fff45b57ff3  com.apple.xpc.ServiceManagement (1.0 - 1) <16FA4DAF-A0BE-34C0-B5F1-5C30BE3DCD2D> /System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement\n    0x7fff45f14000 -     0x7fff45f84ff3  com.apple.SystemConfiguration (1.17 - 1.17)  /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration\n    0x7fff491ef000 -     0x7fff49294ff7  com.apple.APFS (1.0 - 1) <5CA4B73F-3F5D-3289-9145-520FFDFD6813> /System/Library/PrivateFrameworks/APFS.framework/Versions/A/APFS\n    0x7fff49cde000 -     0x7fff49cdfff3  com.apple.AggregateDictionary (1.0 - 1)  /System/Library/PrivateFrameworks/AggregateDictionary.framework/Versions/A/AggregateDictionary\n    0x7fff4a5e4000 -     0x7fff4a5f3fcf  com.apple.AppleFSCompression (96.200.3 - 1.0) <78D538DD-1D24-34FC-AFB3-10411494870D> /System/Library/PrivateFrameworks/AppleFSCompression.framework/Versions/A/AppleFSCompression\n    0x7fff4a73d000 -     0x7fff4a786ff3  com.apple.AppleJPEG (1.0 - 1)  /System/Library/PrivateFrameworks/AppleJPEG.framework/Versions/A/AppleJPEG\n    0x7fff4a9d9000 -     0x7fff4aa01ff7  com.apple.applesauce (1.0 - ???) <58654BC0-9243-39D1-BC43-B7F2E37A3A44> /System/Library/PrivateFrameworks/AppleSauce.framework/Versions/A/AppleSauce\n    0x7fff4ab67000 -     0x7fff4ab7dffb  com.apple.AssertionServices (1.0 - 1) <3F767D20-FE14-35CF-A089-E0445375ECFB> /System/Library/PrivateFrameworks/AssertionServices.framework/Versions/A/AssertionServices\n    0x7fff4b32d000 -     0x7fff4b336ff3  com.apple.coreservices.BackgroundTaskManagement (1.0 - 57.1) <05CF66F0-9650-3F75-9857-F8D186043866> /System/Library/PrivateFrameworks/BackgroundTaskManagement.framework/Versions/A/BackgroundTaskManagement\n    0x7fff4b3da000 -     0x7fff4b44bffb  com.apple.BaseBoard (360.24 - 360.24) <04AF4372-C5D3-3F0A-A688-68D888D6D138> /System/Library/PrivateFrameworks/BaseBoard.framework/Versions/A/BaseBoard\n    0x7fff4cfff000 -     0x7fff4d008fff  com.apple.CommonAuth (4.0 - 2.0) <090893E5-BB65-39DA-A174-EAB2C7191EFE> /System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth\n    0x7fff4dd18000 -     0x7fff4dd2cfff  com.apple.CoreEmoji (1.0 - 69.19.8) <26BC0F82-08C1-3EBD-9299-D3CC5091C467> /System/Library/PrivateFrameworks/CoreEmoji.framework/Versions/A/CoreEmoji\n    0x7fff4e302000 -     0x7fff4e374ff7  com.apple.CoreNLP (1.0 - 130.15.22)  /System/Library/PrivateFrameworks/CoreNLP.framework/Versions/A/CoreNLP\n    0x7fff4f109000 -     0x7fff4f10dff7  com.apple.DSExternalDisplay (3.1 - 380) <76449D22-BA27-3FB1-AD25-A290936E6DEA> /System/Library/PrivateFrameworks/DSExternalDisplay.framework/Versions/A/DSExternalDisplay\n    0x7fff50432000 -     0x7fff5085afff  com.apple.vision.FaceCore (3.3.4 - 3.3.4) <41218EB7-19C9-3813-A793-B0623387CADF> /System/Library/PrivateFrameworks/FaceCore.framework/Versions/A/FaceCore\n    0x7fff55827000 -     0x7fff5582cff7  com.apple.GPUWrangler (3.28.4 - 3.28.4) <14D6FE7D-38D7-3F6C-9BCE-A228D6697A08> /System/Library/PrivateFrameworks/GPUWrangler.framework/Versions/A/GPUWrangler\n    0x7fff56696000 -     0x7fff566a5fff  com.apple.GraphVisualizer (1.0 - 5)  /System/Library/PrivateFrameworks/GraphVisualizer.framework/Versions/A/GraphVisualizer\n    0x7fff567f6000 -     0x7fff5686bfff  com.apple.Heimdal (4.0 - 2.0)  /System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal\n    0x7fff57c5b000 -     0x7fff57c62ffb  com.apple.IOAccelerator (404.2.2 - 404.2.2) <7421825E-13D4-3C74-932D-34E8A605C281> /System/Library/PrivateFrameworks/IOAccelerator.framework/Versions/A/IOAccelerator\n    0x7fff57c66000 -     0x7fff57c7ffff  com.apple.IOPresentment (1.0 - 42.6) <87D19032-52DB-34A5-A554-23B3464EFC82> /System/Library/PrivateFrameworks/IOPresentment.framework/Versions/A/IOPresentment\n    0x7fff58391000 -     0x7fff58488fff  com.apple.LanguageModeling (1.0 - 159.15.15) <34609F31-4DA1-3881-8947-85BEA7AFC938> /System/Library/PrivateFrameworks/LanguageModeling.framework/Versions/A/LanguageModeling\n    0x7fff58489000 -     0x7fff584caff7  com.apple.Lexicon-framework (1.0 - 33.15.10) <07E008F3-E823-333B-8B41-A46024AB0561> /System/Library/PrivateFrameworks/Lexicon.framework/Versions/A/Lexicon\n    0x7fff584d1000 -     0x7fff584d7ff7  com.apple.LinguisticData (1.0 - 238.23.4) <37948616-56E6-3758-BEFE-28586FF99E12> /System/Library/PrivateFrameworks/LinguisticData.framework/Versions/A/LinguisticData\n    0x7fff59234000 -     0x7fff5925cffb  com.apple.spotlight.metadata.utilities (1.0 - 1191.53) <09C6DCF6-F87D-3D03-8BD5-FD1DCF90949F> /System/Library/PrivateFrameworks/MetadataUtilities.framework/Versions/A/MetadataUtilities\n    0x7fff5925d000 -     0x7fff592effff  com.apple.gpusw.MetalTools (1.0 - 1)  /System/Library/PrivateFrameworks/MetalTools.framework/Versions/A/MetalTools\n    0x7fff59543000 -     0x7fff5956dff7  com.apple.MultitouchSupport.framework (2410.5 - 2410.5) <3A712911-F672-3BB3-B62B-A2A7BADF3578> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport\n    0x7fff597e0000 -     0x7fff597eafff  com.apple.NetAuth (6.2 - 6.2)  /System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth\n    0x7fff5a0b7000 -     0x7fff5a10dfff  com.apple.OTSVG (1.0 - ???)  /System/Library/PrivateFrameworks/OTSVG.framework/Versions/A/OTSVG\n    0x7fff5fdfb000 -     0x7fff600adff3  com.apple.SkyLight (1.600.0 - 337.5) <52BC8AB1-3518-3E4C-B1B1-0A8A8067574F> /System/Library/PrivateFrameworks/SkyLight.framework/Versions/A/SkyLight\n    0x7fff61c82000 -     0x7fff61c8fffb  com.apple.TCC (1.0 - 1) <81F88B91-49C1-36E7-8A39-C4BD654EE942> /System/Library/PrivateFrameworks/TCC.framework/Versions/A/TCC\n    0x7fff63c76000 -     0x7fff63c78ff3  com.apple.loginsupport (1.0 - 1) <67BC49D6-320F-33ED-912E-16E5A342F385> /System/Library/PrivateFrameworks/login.framework/Versions/A/Frameworks/loginsupport.framework/Versions/A/loginsupport\n    0x7fff63f33000 -     0x7fff63f6bfff  libCRFSuite.dylib (41.15.4) <92752A96-D1CF-3CA1-837A-1E075AE4C642> /usr/lib/libCRFSuite.dylib\n    0x7fff63f6e000 -     0x7fff63f79ff7  libChineseTokenizer.dylib (28.15.3) <55572692-4918-3C54-AD35-726E03EC47D5> /usr/lib/libChineseTokenizer.dylib\n    0x7fff6400a000 -     0x7fff6400bff7  libDiagnosticMessagesClient.dylib (107) <15210AC0-61F9-3F9D-A159-A009F62EB537> /usr/lib/libDiagnosticMessagesClient.dylib\n    0x7fff64042000 -     0x7fff64205ff7  libFosl_dynamic.dylib (18.3.2)  /usr/lib/libFosl_dynamic.dylib\n    0x7fff6425b000 -     0x7fff6427aff7  libMobileGestalt.dylib (645.220.9)  /usr/lib/libMobileGestalt.dylib\n    0x7fff6427b000 -     0x7fff6427bfff  libOpenScriptingUtil.dylib (179) <441A2E60-5D5C-3567-9B00-AA22E6EE5358> /usr/lib/libOpenScriptingUtil.dylib\n    0x7fff643bc000 -     0x7fff643bdffb  libSystem.B.dylib (1252.200.5) <25F4A1F5-6551-312F-B397-C8D45ACC530A> /usr/lib/libSystem.B.dylib\n    0x7fff64447000 -     0x7fff64448fff  libThaiTokenizer.dylib (2.15.1)  /usr/lib/libThaiTokenizer.dylib\n    0x7fff6445b000 -     0x7fff64471ffb  libapple_nghttp2.dylib (1.24.1) <71C126C5-D869-3E67-9778-058FA7F3CA74> /usr/lib/libapple_nghttp2.dylib\n    0x7fff64472000 -     0x7fff6449bffb  libarchive.2.dylib (54.200.3) <32B8634D-E465-3F6D-B254-A20D44504508> /usr/lib/libarchive.2.dylib\n    0x7fff6451f000 -     0x7fff6451fff3  libauto.dylib (187) <003DEF68-0C59-3AFB-A7B7-A1B5ED301AF2> /usr/lib/libauto.dylib\n    0x7fff645f6000 -     0x7fff64606ff3  libbsm.0.dylib (39.200.18) <58A9ACEC-BF46-3A4E-86F5-3DD9AD7095B4> /usr/lib/libbsm.0.dylib\n    0x7fff64607000 -     0x7fff64615fff  libbz2.1.0.dylib (38.200.3) <4DEC3797-087F-3C8D-815B-48E895813251> /usr/lib/libbz2.1.0.dylib\n    0x7fff64616000 -     0x7fff6466dff7  libc++.1.dylib (400.9.4)  /usr/lib/libc++.1.dylib\n    0x7fff6466e000 -     0x7fff64683fff  libc++abi.dylib (400.17) <446F4748-8A89-3D2E-AE1C-27EEBE93A8AB> /usr/lib/libc++abi.dylib\n    0x7fff64684000 -     0x7fff64684ff3  libcharset.1.dylib (51.200.6) <43F7E100-F5D1-36AB-A26E-CF94196A19C0> /usr/lib/libcharset.1.dylib\n    0x7fff64685000 -     0x7fff64695ffb  libcmph.dylib (6.15.1)  /usr/lib/libcmph.dylib\n    0x7fff64696000 -     0x7fff646aeffb  libcompression.dylib (52.200.13) <05A2A91B-D24D-39E8-A071-261CBC5BB158> /usr/lib/libcompression.dylib\n    0x7fff64959000 -     0x7fff6496ffff  libcoretls.dylib (155.220.1) <1229F9EA-C070-3D03-9DC6-F548C59F9FD5> /usr/lib/libcoretls.dylib\n    0x7fff64970000 -     0x7fff64971ff3  libcoretls_cfhelpers.dylib (155.220.1) <33661841-3C3B-3608-86AC-C88D1CD6FE98> /usr/lib/libcoretls_cfhelpers.dylib\n    0x7fff64fe8000 -     0x7fff6503fffb  libcups.2.dylib (462.10) <29B6D106-A5F2-321D-8916-90F595545D88> /usr/lib/libcups.2.dylib\n    0x7fff65177000 -     0x7fff65177fff  libenergytrace.dylib (17.200.1)  /usr/lib/libenergytrace.dylib\n    0x7fff651a9000 -     0x7fff651aeff7  libgermantok.dylib (17.15.2) <9381B152-5CFD-3D23-A5A7-4D64EE55B85E> /usr/lib/libgermantok.dylib\n    0x7fff651af000 -     0x7fff651b4ff7  libheimdal-asn1.dylib (520.220.2)  /usr/lib/libheimdal-asn1.dylib\n    0x7fff651e0000 -     0x7fff652d1ff7  libiconv.2.dylib (51.200.6) <9FB95807-7C62-32B7-A19F-946D7FB7CCA6> /usr/lib/libiconv.2.dylib\n    0x7fff652d2000 -     0x7fff65535ffb  libicucore.A.dylib (62109.0.1)  /usr/lib/libicucore.A.dylib\n    0x7fff65582000 -     0x7fff65583fff  liblangid.dylib (128.15.1) <663D0A24-7260-31D1-9BFE-74D67B6F72F6> /usr/lib/liblangid.dylib\n    0x7fff65584000 -     0x7fff6559cfff  liblzma.5.dylib (10.200.3) <9A52A949-0CB1-39B6-9244-D079FB609559> /usr/lib/liblzma.5.dylib\n    0x7fff655b4000 -     0x7fff65664fff  libmecab.1.0.0.dylib (779.24.1) <590BC39C-2A3E-368B-9499-C808B84C4955> /usr/lib/libmecab.1.0.0.dylib\n    0x7fff65665000 -     0x7fff658a2ff7  libmecabra.dylib (779.24.1) <22BFD5A8-EA42-3DC3-8910-F27DCFB1B631> /usr/lib/libmecabra.dylib\n    0x7fff65a7a000 -     0x7fff65dd2ffb  libnetwork.dylib (1229.230.4)  /usr/lib/libnetwork.dylib\n    0x7fff65e63000 -     0x7fff665e9fe7  libobjc.A.dylib (750.1) <804715F4-F52D-34D0-8FEC-A25DC08513C3> /usr/lib/libobjc.A.dylib\n    0x7fff665fc000 -     0x7fff66600ffb  libpam.2.dylib (22.200.1) <85253002-89F2-3872-9C8A-1801303A2EBB> /usr/lib/libpam.2.dylib\n    0x7fff66603000 -     0x7fff66639ff7  libpcap.A.dylib (79.200.4) <6D25197A-2F7C-3147-A45A-F6F13E55909F> /usr/lib/libpcap.A.dylib\n    0x7fff66753000 -     0x7fff6676bffb  libresolv.9.dylib (65.200.2)  /usr/lib/libresolv.9.dylib\n    0x7fff667bf000 -     0x7fff66996fe7  libsqlite3.dylib (274.20) <7B202039-5DDF-3140-808C-521E8F11394E> /usr/lib/libsqlite3.dylib\n    0x7fff66c23000 -     0x7fff66c26ffb  libutil.dylib (51.200.4) <10C5E165-0939-363A-9D13-7076F3B513EC> /usr/lib/libutil.dylib\n    0x7fff66c27000 -     0x7fff66c34fff  libxar.1.dylib (404) <16E875B3-CF89-3059-87BB-36D301B32E7B> /usr/lib/libxar.1.dylib\n    0x7fff66c39000 -     0x7fff66d1cfff  libxml2.2.dylib (32.8) <3E7875AC-3195-3800-AC48-8AA3B7BE51E4> /usr/lib/libxml2.2.dylib\n    0x7fff66d1d000 -     0x7fff66d45ff3  libxslt.1.dylib (16.1)  /usr/lib/libxslt.1.dylib\n    0x7fff66d46000 -     0x7fff66d58ffb  libz.1.dylib (70.200.4) <15F7B40A-424C-33BB-BF2C-7E8195128B78> /usr/lib/libz.1.dylib\n    0x7fff66dc9000 -     0x7fff66dcdff3  libcache.dylib (81) <704331AC-E43D-343A-8C24-39201142AF27> /usr/lib/system/libcache.dylib\n    0x7fff66dce000 -     0x7fff66dd8ff3  libcommonCrypto.dylib (60118.220.1) <9C865644-EE9A-3662-AB77-7C8A5E561784> /usr/lib/system/libcommonCrypto.dylib\n    0x7fff66dd9000 -     0x7fff66de0fff  libcompiler_rt.dylib (63.4) <817772E3-E836-3FFD-A39B-BDCD1C357221> /usr/lib/system/libcompiler_rt.dylib\n    0x7fff66de1000 -     0x7fff66deaff3  libcopyfile.dylib (146.200.3) <5C5C4F35-DAB7-3CF1-940F-F47192AB8289> /usr/lib/system/libcopyfile.dylib\n    0x7fff66deb000 -     0x7fff66e6ffdf  libcorecrypto.dylib (602.230.1)  /usr/lib/system/libcorecrypto.dylib\n    0x7fff66ef6000 -     0x7fff66f30ff7  libdispatch.dylib (1008.220.2) <2FDB1401-5119-3DF0-91F5-F4E105F00CD7> /usr/lib/system/libdispatch.dylib\n    0x7fff66f31000 -     0x7fff66f60ff3  libdyld.dylib (640.2) <376E3F3A-6942-3B0E-AD5E-4B97E8255CF5> /usr/lib/system/libdyld.dylib\n    0x7fff66f61000 -     0x7fff66f61ffb  libkeymgr.dylib (30)  /usr/lib/system/libkeymgr.dylib\n    0x7fff66f62000 -     0x7fff66f6eff7  libkxld.dylib (4903.231.4) <7275D7AD-54CE-30BF-9459-18EA77E28ACC> /usr/lib/system/libkxld.dylib\n    0x7fff66f6f000 -     0x7fff66f6fff7  liblaunch.dylib (1336.220.5) <8563299C-2493-3DBD-8E88-3FC673DB47DD> /usr/lib/system/liblaunch.dylib\n    0x7fff66f70000 -     0x7fff66f75fff  libmacho.dylib (921) <6ADB99F3-D142-3A0A-B3CE-031354766ACC> /usr/lib/system/libmacho.dylib\n    0x7fff66f76000 -     0x7fff66f78ffb  libquarantine.dylib (86.220.1) <58524FD7-63C5-38E0-9D90-845A79551C14> /usr/lib/system/libquarantine.dylib\n    0x7fff66f79000 -     0x7fff66f7aff3  libremovefile.dylib (45.200.2)  /usr/lib/system/libremovefile.dylib\n    0x7fff66f7b000 -     0x7fff66f92ff3  libsystem_asl.dylib (356.200.4) <33C62769-1242-3BC1-9459-13CBCDECC7FE> /usr/lib/system/libsystem_asl.dylib\n    0x7fff66f93000 -     0x7fff66f93fff  libsystem_blocks.dylib (73) <152EDADF-7D94-35F2-89B7-E66DCD945BBA> /usr/lib/system/libsystem_blocks.dylib\n    0x7fff66f94000 -     0x7fff6701cfff  libsystem_c.dylib (1272.200.26)  /usr/lib/system/libsystem_c.dylib\n    0x7fff6701d000 -     0x7fff67020ff7  libsystem_configuration.dylib (963.200.27) <94898525-ECC8-3CC9-B312-CBEAAC305E32> /usr/lib/system/libsystem_configuration.dylib\n    0x7fff67021000 -     0x7fff67024ff7  libsystem_coreservices.dylib (66) <10818C17-70E1-328E-A3E3-C3EB81AEC590> /usr/lib/system/libsystem_coreservices.dylib\n    0x7fff67025000 -     0x7fff6702bffb  libsystem_darwin.dylib (1272.200.26) <07468CF7-982F-37C4-83D0-D5E602A683AA> /usr/lib/system/libsystem_darwin.dylib\n    0x7fff6702c000 -     0x7fff67032ff7  libsystem_dnssd.dylib (878.230.2)  /usr/lib/system/libsystem_dnssd.dylib\n    0x7fff67033000 -     0x7fff6707fff3  libsystem_info.dylib (517.200.9) <54B65F21-2E93-3579-9B72-6637A03245D9> /usr/lib/system/libsystem_info.dylib\n    0x7fff67080000 -     0x7fff670a8ff7  libsystem_kernel.dylib (4903.231.4)  /usr/lib/system/libsystem_kernel.dylib\n    0x7fff670a9000 -     0x7fff670f4ff7  libsystem_m.dylib (3158.200.7)  /usr/lib/system/libsystem_m.dylib\n    0x7fff670f5000 -     0x7fff67119ff7  libsystem_malloc.dylib (166.220.1) <4777DC06-F9C6-356E-82AB-86A1C6D62F3A> /usr/lib/system/libsystem_malloc.dylib\n    0x7fff6711a000 -     0x7fff67125ff3  libsystem_networkextension.dylib (767.220.1) <74818C3D-9B68-3823-A737-6A4B782618F2> /usr/lib/system/libsystem_networkextension.dylib\n    0x7fff67126000 -     0x7fff6712dfff  libsystem_notify.dylib (172.200.21) <65B3061D-41D7-3485-B217-A861E05AD50B> /usr/lib/system/libsystem_notify.dylib\n    0x7fff6712e000 -     0x7fff67137fef  libsystem_platform.dylib (177.200.16) <83DED753-51EC-3B8C-A98D-883A5184086B> /usr/lib/system/libsystem_platform.dylib\n    0x7fff67138000 -     0x7fff67142fff  libsystem_pthread.dylib (330.230.1)  /usr/lib/system/libsystem_pthread.dylib\n    0x7fff67143000 -     0x7fff67146ff7  libsystem_sandbox.dylib (851.230.3) <4D0CB1CA-160C-3C29-BE5D-131D68D43B1B> /usr/lib/system/libsystem_sandbox.dylib\n    0x7fff67147000 -     0x7fff67149ff3  libsystem_secinit.dylib (30.220.1) <5964B6D2-19D4-3CF9-BDBC-4EB1D42348F1> /usr/lib/system/libsystem_secinit.dylib\n    0x7fff6714a000 -     0x7fff67151ff7  libsystem_symptoms.dylib (820.237.2) <487E1794-4C6E-3B1B-9C55-95B1A5FF9B90> /usr/lib/system/libsystem_symptoms.dylib\n    0x7fff67152000 -     0x7fff67167ff7  libsystem_trace.dylib (906.220.1) <4D4BA88A-FA32-379D-8860-33838723B35F> /usr/lib/system/libsystem_trace.dylib\n    0x7fff67169000 -     0x7fff6716effb  libunwind.dylib (35.4)  /usr/lib/system/libunwind.dylib\n    0x7fff6716f000 -     0x7fff6719ffff  libxpc.dylib (1336.220.5)  /usr/lib/system/libxpc.dylib\nExternal Modification Summary:\n  Calls made by other processes targeting this process:\n    task_for_pid: 0\n    thread_create: 0\n    thread_set_state: 0\n  Calls made by this process:\n    task_for_pid: 0\n    thread_create: 0\n    thread_set_state: 0\n  Calls made by all processes on this machine:\n    task_for_pid: 729505\n    thread_create: 0\n    thread_set_state: 0\nVM Region Summary:\nReadOnly portion of Libraries: Total=340.9M resident=0K(0%) swapped_out_or_unallocated=340.9M(100%)\nWritable regions: Total=203.1M written=0K(0%) resident=0K(0%) swapped_out=0K(0%) unallocated=203.1M(100%)\n                            VIRTUAL   REGION\n\nREGION TYPE                        SIZE    COUNT (non-coalesced) \n===========                     =======  ======= \nActivity Tracing                   256K        2 \nDispatch continuations            8192K        2 \nKernel Alloc Once                    8K        2 \nMALLOC                            52.5M       11 \nMALLOC guard page                   16K        5 \nSTACK GUARD                       56.1M       30 \nStack                             21.7M       30 \nVM_ALLOCATE                       19.0G      809 \nVM_ALLOCATE (reserved)              72K        4         reserved VM address space (unallocated)\n__DATA                            16.4M      196 \n__FONT_DATA                          4K        2 \n__LINKEDIT                       218.1M       12 \n__TEXT                           122.8M      199 \n__UNICODE                          564K        2 \nmapped file                      101.5M      614 \nshared memory                       48K        6 \n===========                     =======  ======= \nTOTAL                             19.6G     1910 \nTOTAL, minus reserved VM space    19.6G     1910 . That might be possible - I'm not sure if it's a width or depth issue with the DI graph. In theory, one could make an empty project where you just keep injecting endlessly with different classes and then create a circular dependency many layers down. That's probably not something I'll have time to do right now.. ",
    "dvdme": "I realized this is related to coreclr and not core directly.\nI reopen the issue here and I'm closing this one.. ",
    "haiduc32": "p.s. added here as seems like a .Net Core issue, rather than a Azure DevOps but I might be wrong.... p.s. added here as seems like a .Net Core issue, rather than a Azure DevOps but I might be wrong.... UPDATE: for the benefit of anyone having the same issues\nfound the problem, it was due to the NuGet restore task using the 4.3 version (because I cloned the build definition from another project, doh..). Updated to latest and it worked OK.. UPDATE: for the benefit of anyone having the same issues\nfound the problem, it was due to the NuGet restore task using the 4.3 version (because I cloned the build definition from another project, doh..). Updated to latest and it worked OK.. ",
    "venendroid": "Here is the bug which I found. The projects which I am building or publishing doesn't have any reference of stylecop. After digging more, I found out that one of the internal project has a nuget package reference which has a dependency of stylecop reference.\nTo fix this issue, I removed stylecop reference completely from the internal project and published a new nuget package. And now I referenced that new nuget package to my current projects and able to PUBLISH.  . ",
    "petttro": "@MarcoRossignoli thank you for quick response\nWill do!. Moved here: https://github.com/aspnet/AspNetCore/issues/6080\n. ",
    "mammadkoma": "Could you explain how?\nI opened powershell and wrote : PS C:\\Users\\sap-komaei.CII> ./dotnet-install.ps1 -Channel 2.0 -InstallDir C:\\cli\nBut give error :\n./dotnet-install.ps1 : The term './dotnet-install.ps1' is not recognized as the name of a cmdlet, function, script\nfile, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct\nand try again.\nAt line:1 char:1\n+ ./dotnet-install.ps1 -Channel 2.0 -InstallDir C:\\cli\n+ ~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : ObjectNotFound: (./dotnet-install.ps1:String) [], CommandNotFoundException\n    + FullyQualifiedErrorId : CommandNotFoundException. I downloaded script \"https://dot.net/v1/dotnet-install.ps1\"\nHow to run it?\nFor Set-ExecutionPolisy unrestricted command , need to open PowerShell as administrator.. So I can not install dotnet core sdk without administrator access.. I downloaded dotnet-sdk-2.2.101-win-x64.zip and extract it\nHow to use it and run dotnet?. I don't have any .net core version installed on machine. And I can not install anything.\nI just downloaded VS Code portable and dotnet-sdk-2.2.101-win-x64 Zip File.\nHow to create a MVC project by these?\ndotnet command is not recognized in powershell and vs code.. When I double clicked on dotnet.exe a command prompt open and close very fast.\nAnd dotnet.exe not execute by powershell.\n\ndotnet : The term 'dotnet' is not recognized as the name of a cmdlet, function, script file, or operable program.\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\nAt line:1 char:1\n+ dotnet\n+ ~~~~~~\n    + CategoryInfo          : ObjectNotFound: (dotnet:String) [], CommandNotFoundException\n    + FullyQualifiedErrorId : CommandNotFoundException. oooooh\n.\\dotnet.exe new mvc created a project.\nThank you\nBut this project is near dotnet.exe.\nHow to create project in a new folder and build and run in new folder?. Thank you\nNow VS Code portable terminal can run my project by PS C:\\MVC> c:\\dotnet\\dotnet.exe run command.. https://github.com/Microsoft/vscode/issues/65818. https://github.com/OmniSharp/omnisharp-vscode/issues/2772. oooooooooooooooooooooooo\nI deleted all files and folders in my user folder (C:\\Users\\mk\\.dotnet)\nThen run dotnet tool install --global dotnet-aspnet-codegenerator again.\nNow scaffolding worked for movie entity. . Yes. ",
    "olavt": "How can the article you quoted be relevant to running .NET Core 2.2 in a Docker container using the Microsoft provided base image? Shouldn't the Docker image run with all the dependencies included on the Docker host? As I understand the above article is relevant for installing directly on the OS.. I have been running .NET Core application in Docker images over the past 12 months without this kind of problems. Why should it surface out of the blue?. The image runs fine one another Raspberry PI 3 (using the OS image and components), so I suspect that something have went wrong with the platform the Docker image runs on. . ",
    "andrewwebber": "I have just experienced this issue when trying to run a self contained dotnet core application on CoreOS Container Linux, without a Docker container. \nE.g. \nbash\ndotnet publish -c Release -o out -r linux-x64\ntar -xcvzf out.gz ./out\nscp ...\nextract ...\nrun binary\nFor me this means that self contained publish output still has some dependencies which might need clarification.. My workaround was to edit the generated runtimeconfig.json after following this documentation\nhttps://github.com/dotnet/core/blob/master/Documentation/build-and-install-rhel6-prerequisites.md\njson\n{\n    \"runtimeOptions\": {\n        \"configProperties\": {\n            \"System.Globalization.Invariant\": true\n        },\n    }\n}. ",
    "denniske": "Same issue here. Deployed self contained application into google/cloud-sdk:slim.. This solved my problem. Instead of modifying the generated runtimeconfig.json, I created a runtimeconfig.template.json in the project folder which is used automatically by dotnet publish to generate the runtimeconfig.json:\n{\n    \"configProperties\": {\n        \"System.Globalization.Invariant\": true\n    }\n}\n. ",
    "robinwilson16": "After further research I have now found a way to fix this.\nNot sure if it is a bug or the functionality of Directory.GetCurrentDirectory() has changed but it seems the correct way to do this (which works in NET Core 2.2) is:\nFirst amend the top part of Startup.cs as follows to make the environment variables accessible:\npublic Startup(IHostingEnvironment env)\n{\n  _env = env;\n}\nprivate IHostingEnvironment _env;\nThen amend the code in the ConfigureServices section as follows:\n```\nvar webRoot = _env.WebRootPath;\nservices.AddSingleton(\n  new PhysicalFileProvider(\n    Path.Combine(webRoot, \"FOLDER\")));\n```\nAs this references wwwroot already I had to amend the path I was using (above).\nNow it works correctly and the same fix works on other projects.. Thanks for the response but I have already followed those instructions and it makes no difference whether I add those forwarding headers etc or not. The request always shows as not being https whether it is or isn't.\nIt must be something to do with Apache2 not passing on this information as the cert and everything are configured in Apache2 and not Net Core. Both run on localhost though. Maybe the connection is secure up to Apache2 and then insecure when proxied?\nI will log the issue on AspNetCore thanks.. ",
    "ghhv": "I can confirm I had the same issue after upgrading from 2.1 to 2.2. I think it's a bug. \nAnd I can confirm it's known about and some sort of fix coming here - https://github.com/aspnet/Docs/issues/9865\nAlthough this is from December 2018 and it's still a problem in Core 2.2.2.\nYour fix above works but provides a slightly different path (webroot) to the original code - seems the correct variable to the matching path is _env.ContentRootPath. ",
    "martore": "ConsoleApp.csproj\n```\n\n\nExe\nnetcoreapp3.0\n\n\n\n\n\n```\nProgram.cs\n```\nusing Microsoft.AspNetCore;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing System.IO;\nnamespace ConsoleApp\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateWebHostBuilder(args).Build().Run();\n        }\n    public static IWebHostBuilder CreateWebHostBuilder(string[] args)\n    {\n        var config = new ConfigurationBuilder()\n            .SetBasePath(Directory.GetCurrentDirectory())\n            .AddJsonFile(\"hostsettings.json\", optional: true)\n            .AddCommandLine(args)\n            .Build();\n\n        return WebHost.CreateDefaultBuilder(args)\n            .UseConfiguration(config)\n            .UseStartup<Startup>();\n    }\n}\n\n}\nStartup.cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nnamespace ConsoleApp\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n    public Startup(IConfiguration configuration)\n    {\n        Configuration = configuration;\n    }\n    public void ConfigureServices(IServiceCollection services)\n    {\n\n    }\n\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n    {\n\n    }\n}\n\n}\n```\nThese are installed on PC (beside .NET Core 2.2):\n- .NET Core 3.0.0 Preview Build 18579-0056 - Windows Server Hosting\n- ASP.NET Core 3.0.0 Preview Build 18579-0056 - Shared Framework\n- .NET Core SDK 3.0.100. Changes suggested in https://github.com/dotnet/core/issues/2194#issuecomment-452887723 resolved the issue. Thanks.. ",
    "k290": "I have the same issue. Based on the changes here: https://github.com/aspnet/Mvc/pull/8455/commits/00d6771f73394def3696e39d344a1de2212bc5d5\nIt seems like the FileVersionProvider was replaced with DefaultFileVersionProvider. The namespace is also different. Now in Microsoft.AspNetCore.Razor.Infrastructure. DefaultFileVersionProvider is internal so you can't use it directly. Seems to relate to the following issue. https://github.com/aspnet/Mvc/issues/6371\nI will update here if I figure out how to make use of it. . Figured it out. \nYou just need to Dependency inject  an IFileVersionProviderand it will work automagically. In my case, since I'm working in a static class and method (with a Razor page for context), I don't dependency inject but get it using GetRequiredService\nInstead of:\nc#\n        public static string AddFileVersionToPath(this IRazorPage page, string path)\n        {\n            var context = page.ViewContext.HttpContext;\n            IMemoryCache cache = context.RequestServices.GetRequiredService<IMemoryCache>();\n            var hostingEnvironment = context.RequestServices.GetRequiredService<IHostingEnvironment>();\n            var versionProvider = new FileVersionProvider(hostingEnvironment.WebRootFileProvider, cache, context.Request.Path);\n            return versionProvider.AddFileVersionToPath(path);\n        }\n    }\nIt is now:\nc#\npublic static string AddFileVersionToPath(this IRazorPage page, string path)\n        {\n            var context = page.ViewContext.HttpContext;\n            IFileVersionProvider fileVersionProvider = context.RequestServices.GetRequiredService<IFileVersionProvider>();\n            return fileVersionProvider.AddFileVersionToPath(context.Request.PathBase, path);\n        }\nAnd the IFileVersionProvider is in the following namespace\nusing Microsoft.AspNetCore.Mvc.ViewFeatures;\nAdditionally in Startup.cs I think you will need services.addMVC. ",
    "leitocardoso": "Great work. Thanks!!. @karelz thanks for your advice. I thought that my message was pretty self-explanatory and didn't require portions of code. Next time I'll do that.. ",
    "IvanJosipovic": "They're available here, https://hub.docker.com/r/microsoft/dotnet/tags. ",
    "DouglasDRF": "No. Clear deletes all whole list and RemoveAll removes all on a specific condition (empty strings, int values lower or greater, DateTime values lower or grater for exemple). ",
    "TobbeM": "We have the same problem. Tried to install on both Win Server 2012 R2 and Win Server 2016 with the same result.\n\n. ",
    "amansulaiman": "@karelz I resolved my issue by redownloading the exe file on a different network and a different Server. I observed my network breaks the downloaded file that's why I am getting the error.\n@TobbeM Please, can you check your downloaded file and try reinstalling?\n. ",
    "zsanhong": "I have the same problem. ",
    "Uchiha-Peng": "I encountered the same problem, but it was solved. Because your computer needs to connect to Microsoft to register a signature when installing the .NET Core environment, you must ensure that your computer is connected to the external network, otherwise this error will occur.. ",
    "bclothier": "No, and I don't think I can - from what I see, the .NET Core doesn't fully support COM interop - the above code is based on the framework 4.7. I may have posted this in wrong place. . Ok, is there a guide on how to get 3.0 loaded? I downloaded and installed but couldnt go higher than 2.1 Furthermore, it did not recognize the member GetTypeForItypeInfo  on the Marshal class.. I had another go at this - I seem to be able to install the 3.0 preview but I am unable to build a project for following reasons:\n1) With a .NET core app, we cannot have a COMReference entry.\n2) With a .NET core app, Marshal.GetTypeForITypeInfo is not defined.\nI tried to build using .NET 4.7 via dotnet build which still fails due to the COMReference entry. \nEDIT: It might be because the preview doesn't have the COMReference working for dotnet build. ref. Ok, I think I got it working with .NET 3.0 and it still fails:\n```\nC:...\\Test2\\bin\\Debug\\net47>dotnet build C:...\\Test2\\Test2.csproj\nMicrosoft (R) Build Engine version 16.0.225-preview+g5ebeba52a1 for .NET Core\nCopyright (C) Microsoft Corporation. All rights reserved.\nRestore completed in 18.37 ms for C:...\\Test2\\Test2.csproj.\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(142,5): message NETSDK1057: You are using a preview version of .NET C\nore. See: https://aka.ms/dotnet-core-preview [C:...\\Test2\\Test2.csproj]\n  Test2 -> C:...\\Test2\\bin\\Debug\\net47\\Test2.dll\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\nTime Elapsed 00:00:03.72\nC:...\\Test2\\bin\\Debug\\net47>\"C:...\\nunit3-console.exe\" \"C:...\\Test2\\bin\\Debug\\net47\\Test2.dll\"\nNUnit Console Runner 3.9.0\nCopyright (c) 2018 Charlie Poole, Rob Prouse\nRuntime Environment\n   OS Version: Microsoft Windows NT 6.1.7601 Service Pack 1\n  CLR Version: 4.0.30319.42000\nTest Files\n    C:...\\Test2\\bin\\Debug\\net47\\Test2.dll\nErrors, Failures and Warnings\n1) Failed : Test2.Class1.Demo\n  Expected: True\n  But was:  False\n   at Test2.Class1.Demo() in C:...\\Test2\\Class1.cs:line 66\nRun Settings\n    DisposeRunners: True\n    WorkDirectory: C:...\\Test2\\bin\\Debug\\net47\n    ImageRuntimeVersion: 4.0.30319\n    ImageTargetFrameworkName: .NETFramework,Version=v4.7\n    ImageRequiresX86: False\n    ImageRequiresDefaultAppDomainAssemblyResolver: False\n    NumberOfTestWorkers: 2\nTest Run Summary\n  Overall result: Failed\n  Test Count: 1, Passed: 0, Failed: 1, Warnings: 0, Inconclusive: 0, Skipped: 0\n    Failed Tests - Failures: 1, Errors: 0, Invalid: 0\n  Start time: 2019-01-08 03:24:07Z\n    End time: 2019-01-08 03:24:08Z\n    Duration: 1.401 seconds\nResults (nunit3) saved as TestResult.xml\n```\nThe line 66 is: Assert.IsTrue(type.IsEquivalentTo(imported));, the first assertion that should have passed but fails, as noted in my OP.\nI had to modify the file a bit to directly reference the generated interop DLL rather than using COMReference but that was sufficient to demonstrate that the type equivalence seems to not be working. \nJust for reference, this is what I used for the csproj. Note that the DLL had to be created via a different .NET framework project as it get generated into the project's obj/Debug. I then referenced it directly in the hintpath:\n```xml\n\n\nnet47\n\n\n\n\n\n\nC:...\\Interop.Scripting.dll\n\n\n\n```. ",
    "johnkors": "The links to the CVEs in the release notes of 2.2.1 are broken. Fix: https://github.com/dotnet/core/pull/2214. ",
    "Ryszka": "When can we expect 2.2.1 packages to be available on NuGet? I can see 2.1.x packages had been updated to 2.1.7, but newest 2.2.x packages are still at version 2.2.0. . @leecow I have checked again and they're in fact there. Must have been some caching issue or I just missed it before.. ",
    "jsoques": "I just installed dotnet-sdk-2.2.103-win-x64.exe. When I do a dotnet new mvc at the command line I get the error: C:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(137,5): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 2.2.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.\nWhen I do dotnet --version I get 2.2.103\nHere is a complete output:\n\nD:\\VSProjects\\DotNet2.2>dotnet new mvc\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\nProcessing post-creation actions...\nRunning 'dotnet restore' on D:\\VSProjects\\DotNet2.2\\DotNet2.2.csproj...\nC:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(137,5): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 2.2.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2. [D:\\VSProjects\\DotNet2.2\\DotNet2.2.csproj]\nRestore failed.\nPost action failed.\nDescription: Restore NuGet packages required by this project.\nManual instructions: Run 'dotnet restore'\n\nHelp would be appreciated, Thanks.\n. @muratg No global.json\n@livarcocc This is the output:\n\n.NET Core SDK (reflecting any global.json):\n Version:   2.2.103\n Commit:    8edbc2570a\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.17763\n OS Platform: Windows\n RID:         win10-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.103\\\nHost (useful for support):\n  Version: 2.2.1\n  Commit:  878dd11e62\n.NET Core SDKs installed:\n  1.0.1 [C:\\Program Files\\dotnet\\sdk]\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\n  1.1.4 [C:\\Program Files\\dotnet\\sdk]\n  1.1.5 [C:\\Program Files\\dotnet\\sdk]\n  1.1.7 [C:\\Program Files\\dotnet\\sdk]\n  1.1.8 [C:\\Program Files\\dotnet\\sdk]\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\nTo install additional .NET Core runtimes or SDKs:\n  https://aka.ms/dotnet-download\n. @livarcocc Ah, now that you've mentioned it, yes I have a MSBuildSDKsPath pointing to that version. I had created it because of an issue I had with VS Code/Omnisharp.\nI removed MSBuildSDKsPath and it works now! \n\nThanks,. ",
    "Leon99": "I wonder if https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2-known-issues.md#aspnet-core-module is fixed? Known Issues points to a non-existing file :(. @muratg I had a problem described on https://stackoverflow.com/questions/53811569/using-netcore-2-2-and-using-the-in-process-hosting-model last week, solved by switching to OutOfProcess.. I did deploy to Azure (App Service).. I can't reproduce it now, InProcess seems to work fine once I put it back and re-deployed. There was nothing fancy about it when I encountered the issue, just a standard Core 2.2 API one generated by the latest VS.. ",
    "arsenhovhannisyan": "\nHow often does it happen? Which OS versions?\nDoes it happen on more than 1 machine?\nAre you able to isolate a standalone minimal repro?\nCan you please post full callstack?\n\nOne per thousand request during high load.\nIt happens on all container's in high load . (I had enough memory and cpu) .\nservice is running on AKS (Azure Kubernetes Service) version 1.14.0 , Linux Ubuntu 16.04 . \nI post full exception .\n. @karelz Could you please clarify to isolate repro ?\n. I have same exception on AKS (ver. 1.11.4) , and container microsoft/dotnet:2.2-aspnetcore-runtime \n, Region West Europe .\n. ",
    "ugurcemozturk": "Super catch!\nI thought it was a built-in class and didn't verify. \nThanks. @karelz @svick . ",
    "IanYates83": "Thank you. That worked.. ",
    "ygoe": "@karelz Unfortunately the BUFR format is very complex and I cannot leave any part of it away or it will fail completely. The WMO has done a great job at finding complicated solutions back in the 80s. So I cannot make it any smaller than it is.. Is it now?\nbufr.zip\n. Wikipedia says, WMO is the World Meteorological Organization. It's their standard format for international data exchange I'm parsing here.\nLet's see when I find the time to track this down.. It's not there? Did you receive the code for the referenced issue? Not sure where it went. I'll have to recompile the archive, I don't have it here anymore.\nAnd I've only got a single Linux machine, so I won't be able to test it on more of them.. ",
    "hoyosjs": "@myrup I'm sorry you hit this problem while trying to diagnose problems with your app. My experience on raspbian + lldb is that lldb 3.9 itself is severely unstable. There were often cases where running the process itself with no plugin loaded and trying to get the help messages from lldb ended up on a SIGSEGV. The LLVM Status page reports Linux ARM to be untested. I don't have access to a Pi right now so I can't tell you how well it works now on other versions or if there are any workarounds to this.\nAs for issues regarding SOS, the best place to track this would be dotnet/diagnostics. For example, one where this had come up previously, although in dump debugging, is dotnet/diagnostics#38. We are currently evaluating possible alternatives for diagnostics in cases where our use of LLDB is not meeting our desired user experience.. @myrup Also, might not be everyone's cup of tea, but a scenario that I've tried on other platforms and really helped out was be using the remote debugger. Say using vscode, which I've previously used, or visual studio.\nI hope this unblocks your investigations for now and I'll close this issue for the time being. However, if you feel like there is still a gap and this doesn't quite work for your scenarios, feel free to open a bug on the diagnostics repo and we'll follow up.. ",
    "myrup": "@mikem8361 LLDB 3.9 seems to be the latest for jessie. \n@hoyosjs Thanks for elaborating. It would be really wonderful with debugging support straight on the ARM. Even more quick and useful would be a nu-get package that works across platforms to dump all thread stacktraces at any point (like Managed Stack Explorer provided for .Net framework clients on windows for us in the past). But for now I will look into remote debugging our clients across the internet using vscode since i'm on a mac (no visual studio for mac remote debugging as far as I can see).. ",
    "mclenney": "Closing as this is probably better suited for the ASP.NET Core git project.. ",
    "rp0m": "Ahh okay - will do next time! Was 50/50 on where to raise this one..\nJust to confirm - if this behaviour is by design, does that not go against the documentation? This seems like a bug to me. If such behaviour is not handled by EF - that's fine, but having a property that seemingly does nothing seems misleading.. ",
    "elangelo": "<PackageReference Include=\"Microsoft.Win32.Registry\" Version=\"4.4.0\" />\n     <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\n     <PackageReference Include=\"Polly-Signed\" Version=\"5.9.0\" />\n-    <PackageReference Include=\"System.Configuration.ConfigurationManager\" Version=\"4.4.1\" Condition=\"'$(TargetFramework)' == 'netstandard2.0'\" />\n-    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.3\" Condition=\"'$(TargetFramework)' == 'netstandard2.0'\" />\n-    <PackageReference Include=\"System.Security.Cryptography.Cng\" Version=\"4.5.0\" Condition=\"'$(TargetFramework)' == 'netstandard2.0'\" />\n     <PackageReference Include=\"WindowsAzure.Storage\" Version=\"8.6.0\" />\n   </ItemGroup>\n-  <ItemGroup>\n-    <Reference Condition=\"'$(TargetFramework)' == 'net472'\" Include=\"System.Configuration\" />\n-    <Reference Condition=\"'$(TargetFramework)' == 'net472'\" Include=\"System.Net.Http\" />\n+  <ItemGroup Condition=\"'$(TargetFramework)' == 'net472'\">\n+    <Reference Include=\"System.Configuration\" />\n+    <Reference Include=\"System.Net.Http\" />\n+  </ItemGroup>\n+  <ItemGroup Condition=\"'$(TargetFramework)' == 'netstandard2.0' Or '$(TargetFramework)' == 'netcoreapp2.1' \">\n+    <PackageReference Include=\"System.Configuration.ConfigurationManager\" Version=\"4.4.1\" />\n+    <PackageReference Include=\"System.Security.Cryptography.Cng\" Version=\"4.5.0\"/>\n+    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.3\" />\n   </ItemGroup>\nthis is the change that somehow fixes this. don't really make sense to me though. I have to reopen this issue again. Apparently this is still happening. Problem is I have no idea why the dotnet core runtime would try to find System.Security.Cryptography.AesCng in System.Core. That simply doesn't make sense to me.\nI've tried to create a demo application that shows the same behavior but i have not been successful.. While trying to reproduce the issue on a smaller code project i accidentally found what was wrong. Apparently our build process to build the nuget package of the internal library only withheld one .dll (net472) instead of 3 dll's (net472, netstandard20 and netcoreapp21) and somehow that net472 dll was distributed as the dll for the different frameworks. Obviously that could never work. \nJust to make it perfectly clear this is how the nupkg file actually looked like:\nAprimo.Configuration.nuspec  \n[Content_Types].xml\nlib:\n    net472:\n        Aprimo.Configuration.dll -- NET472 VERSION\n    netstandard2.0\n        Aprimo.Configuration.dll -- NET472 VERSION\n    netcoreapp2.1\n        Aprimo.Configuration.dll -- NET472 VERSION\npackage:\n    services:\n        metadata:\n            core-properties:\n                67c6f55284d64e37964de2dd4159fff0.psmdcp\n_rels:\nThe reason that only one of the dll's was kept was due to a bug in the signing script. \nSome random thoughts....\n1. it's weird that the build process of the dotnetcore app didn't stumble of this, or maybe even during the adding of the package to the project. The fact that it's a runtime exception still amazes me.\n2. a good tutorial on how to setup 'mixed' nuget packages (targeting multiple frameworks) might be nice. \n3. also weird that the creating of the nupkg file went fine with only a single assembly left...\nAnyway mystery fixed.. ",
    "algorythm": "Oh well sorry for that, that explains a lot. I also couldn't understand why such an error would even exist. Thanks.. ",
    "pdavis68": "Appears to have been a culture issue on the install. Sorry.. ",
    "synckarthik": "Hi Guys,\nI have attached the sample for HTML 5 uploader with xmlHttpRequest to send the form data. \nSteps to reproduce: \nRun the sample and select any file. Then click on uploadFile button,. Your file will be uploaded in to wwwroot folder now.\nUpload the same file again, you will receive the custom message which we sent from server end 'File Already Exists' in load event.\nBut message not received in dotnet core 2.1 project.\nBelow you can get 2.0 project.\nUploaderDotNetCore2Point0.zip\nBelow you can get 2.1 project.\nUploadDotnetcore2Point1.zip\nPlease check it.. Hi @karelz / @Eilon , Any ideas on this issue?. @Tratcher , Thank you for your detailed explanation. I will use custom header. . ",
    "Gopigovin": "Hi Guys, \nHttp response custom header not working properly asp.net core 2.2 web api response.  \nWe used the html upload box in our project. While upload fails, we will pass the custom message through httprequest to client side. Our server side section is in .net core project (2.1). So we have used the below code to send custom message\nResponse.Headers.Add(\"status\", \"File processed correctly\");\nIt working fine core 2.1. While using the above code in .net core 2.2 project, it does not works.\nHow to resolve this in our side? Please suggest your ideas.\nRegards,\nGopi G\n. ",
    "devlead": "Ok! Can confirm Azure Pipelines now work \ud83d\udc4d \nLooking at previous releases release notes seems to be missing too\n| date       | version-sdk             | version-runtime          | release-notes                                                                           | \n|--------------|---------------------------|----------------------------|-------------------------------------------------------------------------------------------| \n| 2019-01-16 | 2.2.103                 |                            |                                                                                           | \n| 2019-01-08 | 2.2.102                 | 2.2.1                    | https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md             | \n| 2019-01-08 | 2.1.503                 | 2.1.7                    | https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md             | \n| 2018-12-11 | 2.2.101                 | 2.2.0                    | https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.101-SDK/2.2.101.md     | \n| 2018-12-11 | 2.1.502                 | 2.1.6                    | https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.502-SDK/2.1.502.md     | \n| 2018-12-04 | 3.0.100-preview-009812  | 3.0.0-preview-27122-01   | https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview1.md  | \n| 2018-12-04 | 2.2.100                 | 2.2.0                    | https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.0/2.2.0.md             | \n| 2018-11-13 | 2.1.500                 | 2.1.6                    | https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md             | \n| 2018-10-17 | 2.2.100-preview3-009430 | 2.2.0-preview3-27014-02  | https://github.com/dotnet/core/blob/master/release-notes/2.2/preview/2.2.0-preview3.md  | \n| 2018-10-09 | 1.1.11                  | 1.0.13                   | https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.13.md                  | \n| 2018-10-09 | 1.1.11                  | 1.1.10                   | https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.10.md                  | \n| 2018-10-02 | 2.1.403                 | 2.1.5                    | https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md             | \n| 2018-09-12 | 2.2.100-preview2-009404 | 2.2.0-preview2-26905-02  | https://github.com/dotnet/core/blob/master/release-notes/2.2/preview/2.2.0-preview2.md  | \n| 2018-09-11 | 2.1.402                 | 2.1.4                    | https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md             | \n| 2018-08-22 | 2.2.100-preview1-009349 | 2.2.0-preview1-26820-02  | https://github.com/dotnet/core/blob/master/release-notes/2.2/preview/2.2.0-preview1.md  | \n| 2018-08-21 | 2.1.401                 | 2.1.3                    | https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md             | \n| 2018-08-14 | 2.1.400                 |                            | https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md | \n| 2018-07-10 | 2.1.302                 | 2.1.2                    | https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.2.md                   | \n| 2018-07-10 | 2.1.202                 | 2.0.9                    | https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.9.md                   | \n| 2018-07-10 | 1.1.10                  | 1.0.12                   | https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.12.md                  | \n| 2018-07-10 | 1.1.10                  | 1.1.9                    | https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.9.md                   | \n| 2018-06-19 | 2.1.301                 | 2.1.1                    | https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.1.md                   | \n| 2018-05-30 | 2.1.300                 | 2.1.0                    | https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.0.md                   | \n| 2018-05-21 | 2.1.201                 |                            | https://github.com/dotnet/core/blob/master/release-notes/2.0/2.1.201-sdk.md             | \n| 2018-05-08 | 2.1.200                 | 2.0.8                    | https://github.com/dotnet/core/blob/master/release-notes/2.0/2.1.200-sdk.md             | \n| 2018-05-07 | 2.1.300-rc1-008673      | 2.1.0-rc1                | https://github.com/dotnet/core/blob/master/release-notes/2.1/Preview/2.1.0-rc1.md       | \n| 2018-04-17 | 2.1.105                 | 2.0.7                    | https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md                   | \n| 2018-04-17 | 1.1.9                   | 1.0.11                   | https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md                  | \n| 2018-04-17 | 1.1.9                   | 1.1.8                    | https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md                   | \n. Also symbols missing\n| date       | version-sdk             | version-runtime          | sdk-symbols-symbols.zip                                                                                                                                       | aspnet-symbols.zip                                                                                                                                              | cli-symbols.zip                                                                                                                                     | coreclr-symbols.zip                                                                                                                                              | corefx-symbols.zip                                                                                                                                              | \n|--------------|---------------------------|----------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------| \n| 2019-01-16 | 2.2.103                 |                            |                                                                                                                                                                 |                                                                                                                                                                   |                                                                                                                                                       |                                                                                                                                                                    |                                                                                                                                                                   | \n| 2019-01-08 | 2.2.102                 | 2.2.1                    | https://download.visualstudio.microsoft.com/download/pr/fb7eaa7a-7bf9-481e-a30b-ce8d87d9710c/ceacf3a172301d0ad64f5f4199327379/sdk-symbols-2.2.1-symbols.zip   | https://download.visualstudio.microsoft.com/download/pr/5054e671-e4e5-485f-bb21-c21db96e4c32/5a3d985edb2aa4d636a70abf2f008f74/aspnet-2.2.1-symbols.zip          | https://download.visualstudio.microsoft.com/download/pr/c1345252-2b65-463c-a242-387584319029/bd273fbf195ef073d65f521b3c23bc5b/cli-2.2.1-symbols.zip | https://download.visualstudio.microsoft.com/download/pr/0a6b8b1b-99ea-47d3-b469-e20e7de24d2e/3414feb5b173ded0cbe20de2f3d1e61b/coreclr-2.2.1-symbols.zip          | https://download.visualstudio.microsoft.com/download/pr/45660124-8e10-4871-a2b4-003ae46b3928/c93c49381fabe993ee95666d842bb91f/corefx-2.2.1-symbols.zip          | \n| 2019-01-08 | 2.1.503                 | 2.1.7                    | https://download.visualstudio.microsoft.com/download/pr/3b209b8e-4f72-4546-bc8a-5f037fe9c9a6/1e0a12163015993db5fbc22b69303d8a/sdk-symbols-2.1.7-symbols.zip   | https://download.visualstudio.microsoft.com/download/pr/26f3234d-4e72-4cba-a27b-e615595c15dc/2e83ee0f9b7e7a62dc212ef766bc5013/aspnet-2.1.7-symbols.zip          | https://download.visualstudio.microsoft.com/download/pr/b076d7e5-00d4-40dd-843a-b2747aa08fd9/84a4d47dd0af397ec1c53efe5037cef8/cli-2.1.7-symbols.zip | https://download.visualstudio.microsoft.com/download/pr/ea9824bb-3641-457b-a9aa-2be66ac35de7/0c21dc003021c6e38cd74c41e7be1302/coreclr-2.1.7-symbols.zip          | https://download.visualstudio.microsoft.com/download/pr/6ea20771-8d4f-4569-9f91-a2d583391d64/58e1b0d948db6dc17179b57c385e18f0/corefx-2.1.7-symbols.zip          | \n| 2018-12-11 | 2.2.101                 | 2.2.0                    |                                                                                                                                                                 |                                                                                                                                                                   |                                                                                                                                                       |                                                                                                                                                                    |                                                                                                                                                                   | \n| 2018-12-11 | 2.1.502                 | 2.1.6                    | https://download.visualstudio.microsoft.com/download/pr/319e69e5-3a4a-47a9-a454-b4e17380e5da/6af8d9c315d8f24e95e6d4c9a28cfd3d/sdk-symbols-2.1.502-symbols.zip |                                                                                                                                                                   |                                                                                                                                                       |                                                                                                                                                                    |                                                                                                                                                                   | \n| 2018-12-04 | 3.0.100-preview-009812  | 3.0.0-preview-27122-01   |                                                                                                                                                                 | https://download.visualstudio.microsoft.com/download/pr/2c62ae5b-209b-4f0f-9822-512319981766/32c5139973341c4a83dac5edd417136f/aspnet-3.0.0-preview1-symbols.zip |                                                                                                                                                       | https://download.visualstudio.microsoft.com/download/pr/89603152-1024-4dcd-a05a-0bf29f59ffc4/8508e69a69cd026aa800f09d425f1981/coreclr-3.0.0-preview1-symbols.zip | https://download.visualstudio.microsoft.com/download/pr/eb8aff95-4641-46c0-a019-0747887b4d4d/6d90fb115413c773ab291984124f978b/corefx-3.0.0-preview1-symbols.zip | \n| 2018-12-04 | 2.2.100                 | 2.2.0                    | https://download.visualstudio.microsoft.com/download/pr/b14fc6a3-2fe4-4cb5-8083-d752ca106944/86f2e153b184b09ef90ac4499cec0ef6/sdk-symbols-2.2.0-symbols.zip   | https://download.visualstudio.microsoft.com/download/pr/e0c8c95e-4e4c-4cc3-9b5c-7c6740feba1f/3cae4aeb08ededcc4b6d0986eee3fb80/aspnet-2.2.0-symbols.zip          | https://download.visualstudio.microsoft.com/download/pr/546ad62a-4839-4170-9a59-86c569f18725/69bd4fe0372becfb354264f664b12d5b/cli-2.2.0-symbols.zip | https://download.visualstudio.microsoft.com/download/pr/a6a3fcc6-e72c-4d56-a002-c1ea2ebf491b/b00ec1d7aeee16b002579e7855d8574a/coreclr-2.2.0-symbols.zip          | https://download.visualstudio.microsoft.com/download/pr/6576cf85-ad10-49c7-ab3f-f26c2ba1e518/621fc14558560a3c585697ee5e77993a/corefx-2.2.0-symbols.zip          | \n| 2018-11-13 | 2.1.500                 | 2.1.6                    | https://download.visualstudio.microsoft.com/download/pr/b8907954-0bb6-484b-a1ee-1beba64843e0/490b81242561a2b9b3f14bb3be467611/sdk-symbols-2.1.6-symbols.zip   | https://download.visualstudio.microsoft.com/download/pr/d77ca6f6-fa77-4eb8-82f9-9e8be43e4acd/830ad12af9a632ff05a70e2530a3c564/aspnet-2.1.6-symbols.zip          | https://download.visualstudio.microsoft.com/download/pr/31972dfb-b0fd-4e01-9d2b-5008321dbf68/f198c9f2aa57f8c7e141d95a6c6b098d/cli-2.1.6-symbols.zip | https://download.visualstudio.microsoft.com/download/pr/459e604d-efc0-4e1a-838b-e311c890bdaa/bc02969da98047faf9b4d1dc1c70b349/coreclr-2.1.6-symbols.zip          | https://download.visualstudio.microsoft.com/download/pr/dc20e757-f7ca-4683-900b-3d0a94134c0d/1743c2e0e4952e9a5ddf2d1c8934af95/corefx-2.1.6-symbols.zip          | \n. ",
    "vjirovsky": "ok, could be this information into method public virtual string Format(bool multiLine) documentation?. @karelz PR created here https://github.com/dotnet/dotnet-api-docs/pull/1681\n. ",
    "GeertvanHorrik": "\n@GeertvanHorrik updates to what were promised where?\n\n@karelz the VS extension holding me back to start using VS 2019.\nBut again, why would support for VS 2017 (preview) be dropped, it's \"just\" an sdk?. Because I can't use VS 2019 at the moment since required extensions have not been made compatible yet. Why should that block me from using the .NET Core 3.0 SDK?. ",
    "gavinmckay": "@karelz do you need more information beyond what has been provided? The issue is currently marked as \"needs more info\".. ",
    "rakesh-shrivastav": "Never opened anything. Details are definitely mine. \ud83e\udd14\ud83d\ude02. @ajcvickers Yeah, Schrodinger's cat  . ",
    "SolidSoft-Lda": "Thanks.\nDone !. When one have several ASP.NET (.NET Framework) apps replicated and based on the same assemblies, each one consumes memory for load his assemblies, so there are repetition of this process.\n.NET Framework provides at least 2 options:\n1. Deploy this applications on the same application pool;\n2. Starting .NET 4.5, use the tool aspnet_intern to create a symbolic link and the framework will reuse the loaded assemblies from memory on the several similar applications.\nOn the other hand on .NET Core we don't have a similar approach.\nI couldn't find an option or tool to reuse the same loaded assemblies between different folders that are the same application assemblies (only with different configuration options and data bases but the same application).\nWithout reuse the memory, this all several applications will take several GB ram and impossible to use .NET Core on the server.. ",
    "danielpalme": "I have the same problem. ",
    "cleemullins": "@karelz, Our desktops all have 2.2.100 on them, not the .102 patch. Given that, yes, desktop builds work like a charm. \nThe repo on DevOps is 100%. . ",
    "DMEvans": "I had this same problem attempting to build a Roslyn analyzer solution which uses .NET Standard 1.3.  I was using the default NuGet version chosen by Azure DevOps, which was 4.1.0.  \nI added the \"NuGet Tool Installer\" task to the start of my build pipeline with and specified the version as \"4.x\" and ticked the box for \"Always download the latest matching version\".  My build is now working successfully.\n. ",
    "yuezengms": "I'll try upgrading. Thanks!. ",
    "yanrez": "@karelz do you plan to backport this fix to 2.2 ?. It is happening in some of the clusters. It doesn't seem to consistently repro, but some pods go into this state and stay in it until being terminated. I understand 3.0 is still few months away (I don't know actual timeline though), so my question about 2.2 was based on assumption that hotfix for 2.2 could come earlier than 3.0 release.\nWe will look into trying to upgrade and see if it solves the issue.. I will follow up offline, but in some of the regions we see it happening more often - taking down several pods in our k8s cluster per day. It's very annoying at the moment, causing us few dev-hours a day to act on it and mitigate. \nWe are also looking into automated mitigation using liveness probe wired into check if we start getting these exceptions and signalling k8s to kill the pod. Unfortunately, it's also non-trivial amount of dev work to build and deploy. Considering we can't exactly predict frequency of the issue, risk is that liveness pod might still impact our availability and cause us missing SLA.. We applied automated mitigation to count number of these exceptions and report negative signal to k8s liveness check. It helped us mitigate the impact. We didn't verify yet if latest builds of net core 3 would resolve the issue. ",
    "antoinne85": "Just chiming in to say that my business is also experiencing this issue:\nAKS (v1.9.6)\nRegion: Central US\nImage: microsoft/dotnet:2.2-aspnetcore-runtime. FWIW, we implemented the same liveness check but then subsequently manage to fix the issue altogether in our deployment.\nFor us, we had a service client that was using HttpClient internally. The class was getting instantiated for each incoming request by the DI container (resulting in a new HttpClient for each incoming request). We changed the way the client was registered such that it is only instantiated once for the entire application and the issue was resolved.. ",
    "blurhkh": "I experimenced  this problem since yesterday,everything using socket throw \"System.Net.Sockets.SocketException: Address already in use\". Like Mysql connection, redis, httpclient.. ",
    "EvilBeaver": "Same problem with NEST elasticsearch client on Linux under Core 2.2. Backporting fix to 2.2 would be nice. ",
    "ahsonkhan": "Please do a sanity check for your feature areas.\ncc @stephentoub, @tannergooding, @karelz, @safern, @maryamariyan, @bartonjs, @steveharter, @swaroop-sridhar . > including System namespaces only\nShould I include the Microsoft.* namespaces as well?. > are we going to do the same after preview 3 too?\nI see no reason why we can't or shouldn't, so yes.. I am not sure why this is showing up. These APIs are not exposed yet: https://github.com/dotnet/corefx/pull/34532\nLikely because it got checked into coreclr so S.P.Corelib got updated: https://github.com/dotnet/coreclr/pull/21945\nShould I exclude this from the diff?. You are correct. I was comparing the implementation assemblies not the ref assemblies.\nhttps://github.com/dotnet/corefx/blob/29e580bb69bbd0bc857e28bbc905ede6c8e41d3b/src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs#L308. Looks that way: https://github.com/dotnet/core/blob/master/release-notes/2.1/api-diff/2.0-vs-2.1_System.md\n. That's captured in this diff: https://github.com/dotnet/core/pull/2255. True, but that's how API reviewer shows the diff. I can either leave it as is to be consistent with previous diffs, manually change this one instance, or we update how API reviewer does diffing. Which option would you prefer?\ncc @terrajobst . Yep, will fix.. ",
    "drowhunter": "Just to be clear, in order to work around this issue, I had to go into the Request.Forms Items and select the first value from the RememberConsent Array.  And Grab the value for UserCode myself. \nSomething is not right with the PageModelBinder or something\n. ",
    "Ramon-Balaguer": "We have seen that CentOS is not on the compatibility list, yet RHEL is. I understand that CentOs 7 is also still supported?. @karelz  not here https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview2.md the 3.0 preview 2 I suppose that it inherits those of document 3.0. Thank you! @leecow . ",
    "andrew-boyarshin": "@karelz @leecow https://github.com/dotnet/core/blob/master/release-notes/3.0/README.md 2018 here too.. ",
    "syazdian": "How can I use it in Visual Studio 2017, not Visual Studio Code!?. ",
    "guardrex": "My issues are resolved now. VS4Mac is on hold for 8.0 Preview, and the SDK is installed and working normally.. ",
    "dskow": "Since it requires VS 2019 preview,  why isn't this in the visual studio Installer for VS2019 preview.  I'm using version 2.0.1184.128 of the visual studio installer.. ",
    "doomchild": "I'm confused as to where I should report this problem, as it seems to span a couple of different things.  I've been trying to play with some C# 8 features (in particular default methods on interfaces), but all of trying to build always results in the standard \"interface members cannot have a definition\" error.  I've already made a report at https://github.com/dotnet/core/issues/2330, but I've since discovered that C# 8.0 features also don't appear to work in VS Mac either (trying to use langversion 800 results in a CS1617 error when building).  Where should I report this?. That's really frustrating, because the blog posts have made it appear that all of the proposed C# 8.0 features are present to some degree in the previews.. ",
    "YadominJinta": "It uses proot , like chroot but doesn't need root access.\nAfter I run tsu and get the root access ,it runs successfully,but very slow.. By the way,will dotnet core 3 support termux?. Thank you very much . I hope one day I could run dotnet core on termux directly.. ",
    "siriak": "@OliverDjur , I had similar issue and found this thread as I was looking for solution. As it turned out, the problem was that in my application multiple threads used one hash algorithm simultaneously (I mean object of type https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.hashalgorithm?view=netframework-4.7.2). After I changed it to ThreadLocal (https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadlocal-1?view=netframework-4.7.2) the issue has gone. So to me it looks like this object contained some sort of state and it got corrupted because of simultaneous usage. Hope this helps.\nP.S. My issue only reproduced on linux and everything worked fine on Windows machines. ",
    "ZeroPKI": "Thank you for this information. I'll update with the test results, but this does put me in the right direction.  I'll close this ticket so to not affect any SLA you may have. Thanks for again for the (knowledge) that I'll be digging into.. ",
    "jjpepper": "\nHi @jjpepper , We don't have any subscription channels beyond what is already provided by Visual Studio. I'm surprised that Visual Studio is not prompting you for .NET Core updates as the functionality for included versions (eg VS2017 has 1.0, 1.1 and 2.1) is definitely there.\n\nAre you saying that visual studio is updating you for .NET Core updates?\n\nWe do have a metadata endpoint which many are starting to monitor for update notification. You can find this at https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json.\n\nThis helps a great deal.\n. ",
    "mkSanalogic": "Well, what unsupported operation did I conduct?\nAlso, what exactly do you want me to provide additional to what's already there?\nJust paste the function into any program of your own and run it, providing the path to a .net assembly.\nMight have to be a x64 assembly, I'm not 100% sure on that.\n. sigh\nFor your entertainment:\nI was using the latest 2.1 dotnet CORE version. \nTrying it on System assemblies yields the same result, it seems to be impossible to use this functionality (Assembly.Load from a byte[]) on ANY x64 dll in dotnet CORE.\nx32 dlls seem to work just fine, though (!)\nUpdating to dotnet CORE 2.2 changed the error message text, but it's still the same underlying error code (0x8007000B) and the root message also stays the same \"BadImageFormatException\"\nPasting the same code in a dotnet Framework console application utilizing the same code successfully loads any DLL, no matter whether it's x86 or x64. \nI also tried targeting x86 or x64 with both the dotnet CORE and the dotnet Framework applications, to no effect. Edit2: As noted earlier, it also worked fine in earlier versions of dotnet CORE.\nEdit: I also tried it on my colleagues machine to the same results.\nAny further questions?\n. I said so in my previous comment, I tried both variants.\ndotnet Framework loads x64 DLLs no matter whether you target x86 or x64.\ndotnet CORE will load x32 DLLs no matter what, x64 DLLs fail with this error in both scenarios.. ",
    "hnviradiya": "This is related to vue cli middleware. so closing.. ",
    "gittadesushil": "@vijayrkn ok can I tranform the xml with package reference then? Where can I write the logic to tranform the xml using xdt? considering that NuGet doesn't support the tranformation in package reference. I am using package reference.. ",
    "vinothkhanna": "@karelz My entire organization is facing this issue. All applications with .NET Core > 2.1 are not working. Am working with Microsoft team on this, though they are mostly Network team, just wanted to post the issue in .NET Core forum as well. If I use microsoft/aspnetcore image with 2.0 it works. Btw, to your question, all the repos are facing this issue.. ",
    "montella1507": "Seversal logs in Event viewer:\n```\nError Information\nAppInsightsEvent Name = vs/setup/inproductacquisition\n          Description = Unable to get Instance: SetupChannelPackagesCache.Refresh()\n     TelemetrySession = 'cff32e86-76c3-4f18-9302-99a5faa33e36' Started = False OptIn=True IsInitialized = False Cloned = False\n             UTC time = 2019-02-08T00:02:46\ncurrently running Stack\n Microsoft.VisualStudio.PlatformUI.SetupChannelPackagesCache.InternalRefresh()\n Microsoft.VisualStudio.PlatformUI.SetupChannelPackagesCache.ManifestRefresh()\n Microsoft.VisualStudio.PlatformUI.SetupCompositionService.RefreshManifest()\n Microsoft.VisualStudio.CommonIDE.OOBFeedManager.VsOOBFeedManager.d__11.MoveNext()\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)\n System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()\n System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task& currentTask)\n System.Threading.Tasks.Task.FinishContinuations()\n System.Threading.Tasks.Task.FinishStageThree()\n System.Threading.Tasks.Task1.TrySetResult(TResult result)\n System.Runtime.CompilerServices.AsyncTaskMethodBuilder1.SetResult(TResult result)\n Microsoft.VisualStudio.Shell.ServiceProvider.d__26.MoveNext()\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)\n System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()\n System.Threading.Tasks.AwaitTaskContinuation.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\n System.Threading.ThreadPoolWorkQueue.Dispatch()\n System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\nCallStack Hash:386837c9\n```\n```\nError Information\nAppInsightsEvent Name = vs/setup/inproductacquisition/manifestrefresh\n          Description = Unable to get Instance: RefreshManifest\n     TelemetrySession = 'cff32e86-76c3-4f18-9302-99a5faa33e36' Started = False OptIn=True IsInitialized = False Cloned = False\n             UTC time = 2019-02-08T00:02:44\ncurrently running Stack\n Microsoft.VisualStudio.PlatformUI.SetupCompositionService.RefreshManifest()\n Microsoft.VisualStudio.CommonIDE.OOBFeedManager.VsOOBFeedManager.d__11.MoveNext()\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)\n System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()\n System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task& currentTask)\n System.Threading.Tasks.Task.FinishContinuations()\n System.Threading.Tasks.Task.FinishStageThree()\n System.Threading.Tasks.Task1.TrySetResult(TResult result)\n System.Runtime.CompilerServices.AsyncTaskMethodBuilder1.SetResult(TResult result)\n Microsoft.VisualStudio.Shell.ServiceProvider.d__26.MoveNext()\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)\n System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()\n System.Threading.Tasks.AwaitTaskContinuation.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\n System.Threading.ThreadPoolWorkQueue.Dispatch()\n System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\nCallStack Hash:386837c9\n.\nError Information\nAppInsightsEvent Name = vs/setup/inproductacquisition\n          Description = Unable to get Instance: IsPackageInstalled\n     TelemetrySession = '187bea51-4be4-4c10-9860-5c31a85d61e0' Started = False OptIn=True IsInitialized = False Cloned = False\n             UTC time = 2019-02-08T01:25:20\ncurrently running Stack\n Microsoft.VisualStudio.PlatformUI.SetupCompositionService.IsPackageInstalled(String packageName)\n Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(Guid& guidService, Guid& riid, IntPtr& ppvObject)\n Microsoft.VisualStudio.Shell.ServiceProvider.QueryService(Guid guid, Type serviceType, Boolean setShellErrorInfo, Object& service)\n Microsoft.VisualStudio.Shell.ServiceProvider.GetService(Type serviceType, Boolean setShellErrorInfo)\n Microsoft.VisualStudio.Shell.ServiceProvider.GetService(Type serviceType)\n Microsoft.VisualStudio.Shell.VsServiceProviderWrapper.GetService(Type serviceType)\n Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl..ctor(AbstractProject project)\n Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject..ctor(VisualStudioProjectTracker projectTracker, Func2 reportExternalErrorCreatorOpt, String projectSystemName, String projectFilePath, IVsHierarchy hierarchy, String language, Guid projectGuid, IServiceProvider serviceProvider, VisualStudioWorkspaceImpl visualStudioWorkspaceOpt, HostDiagnosticUpdateSource hostDiagnosticUpdateSourceOpt, ICommandLineParserService commandLineParserServiceOpt)\n Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.CPS.CPSProject..ctor(VisualStudioProjectTracker projectTracker, Func2 reportExternalErrorCreatorOpt, String projectDisplayName, String projectFilePath, IVsHierarchy hierarchy, String language, Guid projectGuid, String binOutputPath, IServiceProvider serviceProvider, VisualStudioWorkspaceImpl visualStudioWorkspaceOpt, HostDiagnosticUpdateSource hostDiagnosticUpdateSourceOpt, ICommandLineParserService commandLineParserServiceOpt)\n Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.CPS.CPSProjectFactory.Microsoft.VisualStudio.LanguageServices.ProjectSystem.IWorkspaceProjectContextFactory.CreateProjectContext(String languageName, String projectDisplayName, String projectFilePath, Guid projectGuid, Object hierarchy, String binOutputPath)\n Microsoft.VisualStudio.ProjectSystem.VS.LanguageServices.UnconfiguredProjectContextProvider.d__22.MoveNext()\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)\n System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()\n System.Threading.Tasks.AwaitTaskContinuation.InvokeAction(Object state)\n System.Threading.Tasks.AwaitTaskContinuation.RunCallback(ContextCallback callback, Object state, Task& currentTask)\n System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.Run(Task task, Boolean canInlineContinuationTask)\n System.Threading.Tasks.Task.FinishContinuations()\n System.Threading.Tasks.Task.FinishStageThree()\n System.Threading.Tasks.Task1.TrySetResult(TResult result)\n System.Runtime.CompilerServices.AsyncTaskMethodBuilder1.SetResult(TResult result)\n Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageStringProperty.d__7.MoveNext()\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)\n System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()\n System.Threading.Tasks.AwaitTaskContinuation.InvokeAction(Object state)\n System.Threading.Tasks.AwaitTaskContinuation.RunCallback(ContextCallback callback, Object state, Task& currentTask)\n System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.Run(Task task, Boolean canInlineContinuationTask)\n System.Threading.Tasks.Task.FinishContinuations()\n System.Threading.Tasks.Task.FinishStageThree()\n System.Threading.Tasks.Task1.TrySetResult(TResult result)\n System.Runtime.CompilerServices.AsyncTaskMethodBuilder1.SetResult(TResult result)\n Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageStringProperty.d__6.MoveNext()\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)\n System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()\n System.Threading.Tasks.AwaitTaskContinuation.InvokeAction(Object state)\n System.Threading.Tasks.AwaitTaskContinuation.RunCallback(ContextCallback callback, Object state, Task& currentTask)\n System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.Run(Task task, Boolean canInlineContinuationTask)\n System.Threading.Tasks.Task.FinishContinuations()\n System.Threading.Tasks.Task.FinishStageThree()\n System.Threading.Tasks.Task1.TrySetResult(TResult result)\n System.Runtime.CompilerServices.AsyncTaskMethodBuilder1.SetResult(TResult result)\n Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageProperty.d__18.MoveNext()\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)\n System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()\n System.Threading.Tasks.AwaitTaskContinuation.InvokeAction(Object state)\n System.Threading.Tasks.AwaitTaskContinuation.RunCallback(ContextCallback callback, Object state, Task& currentTask)\n System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.Run(Task task, Boolean canInlineContinuationTask)\n System.Threading.Tasks.Task.FinishContinuations()\n System.Threading.Tasks.Task.FinishStageThree()\n System.Threading.Tasks.Task1.TrySetResult(TResult result)\n System.Runtime.CompilerServices.AsyncTaskMethodBuilder1.SetResult(TResult result)\n Microsoft.VisualStudio.ProjectSystem.Properties.InterceptedProjectProperties.d__2.MoveNext()\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)\n System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()\n System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.<>c.<.cctor>b__8_0(Object state)\n Microsoft.VisualStudio.Threading.JoinableTaskFactory.SingleExecuteProtector.TryExecute()\n Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\n Microsoft.VisualStudio.ProjectSystem.ProjectMultiThreadedService.ExecuteSynchronously(Func1 asyncAction)\n Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectTasksService.OnPrioritizedProjectLoadedInHost()\n Microsoft.VisualStudio.ProjectSystem.VS.VsSolutionEventListener.PrioritizedOnAfterOpenProject(IVsHierarchy pHierarchy, Int32 fAdded)\n Microsoft.VisualStudio.Shell.Interop.IVsSolution.OpenSolutionFile(UInt32 grfOpenOpts, String pszFilename)\n Microsoft.VisualStudio.PlatformUI.Packages.MRU.ExtensionMethods.TryOpenProject(IVsSolution solution, String projectPath, Guid projectGuid)\n Microsoft.VisualStudio.PlatformUI.CodeContainerAccessManager.<OpenLocalCodeContainerAsync>d__9.MoveNext()\n System.Runtime.CompilerServices.AsyncTaskMethodBuilder1.StartTStateMachine\n Microsoft.VisualStudio.PlatformUI.CodeContainerAccessManager.OpenLocalCodeContainerAsync(CodeContainer codeContainer)\n Microsoft.VisualStudio.PlatformUI.CodeContainerAccessManager.d__6.MoveNext()\n System.Runtime.CompilerServices.AsyncTaskMethodBuilder1.Start[TStateMachine](TStateMachine& stateMachine)\n Microsoft.VisualStudio.PlatformUI.CodeContainerAccessManager.OpenAsync(CodeContainer codeContainer)\n Microsoft.VisualStudio.PlatformUI.CodeContainerListViewModel.<>c__DisplayClass21_0.<<OnOpen>b__0>d.MoveNext()\n System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine)\n Microsoft.VisualStudio.PlatformUI.CodeContainerListViewModel.<>c__DisplayClass21_0.<OnOpen>b__0()\n Microsoft.VisualStudio.Threading.JoinableTaskFactory.ExecuteJob[T](Func1 asyncMethod, JoinableTask job)\n Microsoft.VisualStudio.Threading.JoinableTaskFactory.RunAsync(Func1 asyncMethod, Boolean synchronouslyBlocking, JoinableTaskCreationOptions creationOptions, Delegate entrypointOverride)\n Microsoft.VisualStudio.PlatformUI.CodeContainerListViewModel.OnOpen(CodeContainerViewModelBase codeContainerViewModel)\n Microsoft.VisualStudio.PlatformUI.CodeContainerViewModelBase.<>c__DisplayClass49_0.<.ctor>b__0(Object o)\n Microsoft.VisualStudio.PlatformUI.DelegateCommand.Execute(Object parameter)\n Microsoft.VisualStudio.PlatformUI.MRUItemsMenuCommand.<>c__DisplayClass14_0.<<OnInvokedDynamicItem>b__0>d.MoveNext()\n System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine)\n Microsoft.VisualStudio.PlatformUI.MRUItemsMenuCommand.<>c__DisplayClass14_0.<OnInvokedDynamicItem>b__0()\n Microsoft.VisualStudio.Threading.JoinableTaskFactory.ExecuteJob[T](Func1 asyncMethod, JoinableTask job)\n Microsoft.VisualStudio.Threading.JoinableTaskFactory.RunAsync(Func`1 asyncMethod, Boolean synchronouslyBlocking, JoinableTaskCreationOptions creationOptions, Delegate entrypointOverride)\n Microsoft.VisualStudio.PlatformUI.MRUItemsMenuCommand.OnInvokedDynamicItem(Object sender, EventArgs args)\n Microsoft.VisualStudio.Shell.OleMenuCommand.Invoke(Object inArg, IntPtr outArg, OLECMDEXECOPT options)\n Microsoft.VisualStudio.Shell.OleMenuCommandService.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(Guid& commandGroup, UInt32 nCmdId, UInt32 nCmdExcept, IntPtr pIn, IntPtr vOut)\n Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(Guid& guidGroup, UInt32 nCmdId, UInt32 nCmdExcept, IntPtr pIn, IntPtr vOut)\n Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource.Invoke(String verb, Object pvaIn, Object& pvaOut)\n Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Invoke(String verb, Object pvaIn, Object& pvaOut)\n Microsoft.VisualStudio.PlatformUI.VsCommand.Execute(Object parameter)\n MS.Internal.Commands.CommandHelpers.CriticalExecuteCommandSource(ICommandSource commandSource, Boolean userInitiated)\n System.Windows.Controls.MenuItem.InvokeClickAfterRender(Object arg)\n System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\n System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\n System.Windows.Threading.DispatcherOperation.InvokeImpl()\n System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)\n MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\n System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\n MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\n System.Windows.Threading.DispatcherOperation.Invoke()\n System.Windows.Threading.Dispatcher.ProcessQueue()\n System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\n MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\n MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\n System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\n System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\n System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\n MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\nCallStack Hash:386837c9\n```.  @leecow  Well i could not remove Visual Studio via \"Visual studio installer\" it gets bugged after days  (maybe i was just unlucky i got a moment when i get some beutifull windows update that conflicts my VS installations,..)  when i install Visual studio - it is funny, official Visual studio tools cannot detect an installation it installed itself several days ago. It show the location where it is installed actually .. with message \"not found\".\nSo i hads to use some king of \"clean remove\" utility to clean windows registers, paths and manually delete VS folders... then i could install VS Professional again and it \"solved\" the problem. ",
    "ondrejspilka": "If anyone is interested in the solution - cleanup the site from all .NET core 2.0.0 files, then publish.. ",
    "sansjunk": "LicenseCompiler is a .NET Framework tool. In order to provision a runtime license it loads and inspects the assembly being built. This is where the issue shows up.. ",
    "tjeason": "On Ubuntu 16.04, aspnetcore-runtime 2.1.8 is missing for the Debian apt package repository. \n```\nubuntu$: wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb\nubuntu$: sudo dpkg -i packages-microsoft-prod.deb\nubuntu$: sudo apt-get install apt-transport-https\nubuntu$: sudo apt-get update\nubuntu$: sudo apt-get install dotnet-sdk-2.1\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nSome packages could not be installed. This may mean that you have\nrequested an impossible situation or if you are using the unstable\ndistribution that some required packages have not yet been created\nor been moved out of Incoming.\nThe following information may help to resolve the situation:\nThe following packages have unmet dependencies:\n dotnet-sdk-2.1 : Depends: aspnetcore-runtime-2.1 (>= 2.1.8) but 2.1.7-1 is to be installed\nE: Unable to correct problems, you have held broken packages.\n```\nThis is failing for the 2.1.8 .Net Core Release. \n. On Ubuntu 16.04, aspnetcore-runtime 2.1.8 is missing for the Debian apt package repository. \n```\nubuntu$: wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb\nubuntu$: sudo dpkg -i packages-microsoft-prod.deb\nubuntu$: sudo apt-get install apt-transport-https\nubuntu$: sudo apt-get update\nubuntu$: sudo apt-get install dotnet-sdk-2.1\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nSome packages could not be installed. This may mean that you have\nrequested an impossible situation or if you are using the unstable\ndistribution that some required packages have not yet been created\nor been moved out of Incoming.\nThe following information may help to resolve the situation:\nThe following packages have unmet dependencies:\n dotnet-sdk-2.1 : Depends: aspnetcore-runtime-2.1 (>= 2.1.8) but 2.1.7-1 is to be installed\nE: Unable to correct problems, you have held broken packages.\n```\nThis is failing for the 2.1.8 .Net Core Release. \n. This missing aspnetcore-runtime for 2.1.8 release is resolved for Ubuntu 16.04. Mentioned in https://blogs.msdn.microsoft.com/dotnet/2019/02/12/net-core-february-2019/#comment-741405. This missing aspnetcore-runtime for 2.1.8 release is resolved for Ubuntu 16.04. Mentioned in https://blogs.msdn.microsoft.com/dotnet/2019/02/12/net-core-february-2019/#comment-741405. ",
    "PolitovArtyom": "Installing 2.1.8 hosting bundle or SDK breaks AspNetCore 2.1.7 apps\nApplication: dotnet.exe\nCoreCLR Version: 4.6.27317.3\nDescription: The process was terminated due to an unhandled exception.\nException Info: System.IO.FileLoadException: Could not load file or assembly 'Microsoft.AspNetCore, Version=2.1.7.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\n. ",
    "bschapendonk": "@leecow \nRegarding the fix for the Azure DevOps .NET Core Tool Installer, according to https://github.com/Microsoft/azure-pipelines-tasks/issues/9366#issuecomment-456711057 only the error message is improved. \nSo instead  of a Cannot read property 'trim' of undefined we now get a The specified version's download links are not correctly formed in the supported versions document.. ",
    "dougbu": "\nWhy was Microsoft.AspNetCore.Mvc.Formatters.JsonInputFormatter moved/renamed to Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter.cs?\n\n@IanKemp moving the Json.NET dependencies is an intentional breaking change in the 3.0 preview releases. This and related changes were announced in aspnet/Announcements#325.. @vivmishra should this new file be linked to from anything else?. @Tratcher @anurse @muratg any ideas?. @natemcmaster this was a typo in the list of workarounds I copied. Correct?. ",
    "BeigeBadger": "I am trying to use Azure DevOp's .NET Core SDK Installer step to install version 2.2.2 but I am running into an error with the download links/blobs not existing anymore.\nOutput:\n`\n[section]Starting: Use .NET Core sdk 2.2.2\n...\nTask         : .NET Core SDK Installer\nDescription  : Acquires a specific version of the .NET Core SDK from internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks.\nVersion      : 0.2.2\nAuthor       : Microsoft Corporation\nHelp         : More Information\n==============================================================================Tool to install: .NET Core sdk version 2.2.2.\n[command]C:\\windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoLogo -Sta -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -Command \"& 'd:\\a_tasks\\DotNetCoreInstaller_b0ce7256-7898-45d3-9cb5-176b752bfea6\\0.2.2\\externals\\get-os-platform.ps1'\"\nPrimary:win-x64\nDetected platform (Primary): win-x64\nChecking if a cached copy exists for this version...\nThe cache does not contain the requested version of .NET Core. Downloading and installing it now.\nGetting URL to download .NET Core sdk version: 2.2.2.\nCould not fetch download information for version 2.2.2. Please check if the version specified is correct. You can refer the link for supported versions => https://github.com/dotnet/core/blob/master/release-notes/releases.json. Falling back to creating convention based URL.\n[command]C:\\windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoLogo -Sta -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -Command \"& 'd:\\a_tasks\\DotNetCoreInstaller_b0ce7256-7898-45d3-9cb5-176b752bfea6\\0.2.2\\externals\\install-dotnet.ps1' -Version 2.2.2 -DryRun\"\ndotnet-install: Payload URLs:\ndotnet-install: Primary - https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.2/dotnet-sdk-2.2.2-win-x64.zip\ndotnet-install: Legacy - https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.2/dotnet-dev-win-x64.2.2.2.zip\ndotnet-install: Repeatable invocation: .\\install-dotnet.ps1 -Version 2.2.2 -Channel LTS -Architecture x64 -InstallDir \nDownloading: https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.2/dotnet-sdk-2.2.2-win-x64.zip\n[warning]Could not download installation package from this URL: https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.2/dotnet-sdk-2.2.2-win-x64.zip Error: {}\nDownloading: https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.2/dotnet-dev-win-x64.2.2.2.zip\n[warning]Could not download installation package from this URL: https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.2/dotnet-dev-win-x64.2.2.2.zip Error: {}\n[error]Failed to download package for installation\n[section]Finishing: Use .NET Core sdk 2.2.2`\nWhen I manually visit the links I get the following message: \n<Error>\n<Code>BlobNotFound</Code>\n<Message>\nThe specified blob does not exist. RequestId:d2d1a17e-801e-0114-115d-d42dfa000000 Time:2019-03-06T20:43:25.7517795Z\n</Message>\n</Error>\nChanging the version value to use the version-sdk value from this list (2.2.104 - which I'm not sure is what I want) will successfully download the SDK but then it wants to use NuGet version >= 4.7 during the NuGet restore step (instead of v 4.4.1 which I have specified). I see there is an option to always use the latest version of NuGet but I would like to avoid this due to potential random build failures it could introduce in the future when versions change. \nError message:\n##[error]The nuget command failed with exit code(1) and error(NU1102: Unable to find package NuGet.Frameworks with version (>= 4.7.0)  - Found 33 version(s) in NuGetOrg [ Nearest version: 4.7.0-preview1-4986 ]\nI would also rather not use a preview version of NuGet.\nEdit\nI have my build working with .NET Core SDK version 2.2.104 and NuGet 4.7.1 my question still remains as to why I cannot use 2.2.2 for the  .NET Core SDK version.\n. ",
    "KexyBiscuit": "Replaced by #2339.. Stalled... or not?. Because .NET Core 2.0 is out of support.. The command is dotnet new console -o myApp, there's a whitespace between new and console.. ",
    "idormenco": "Hi @karelz ,\nI created an repo and I was able to reproduce this using a plane console app \nhttps://github.com/idormenco/dotNetCoreSystem.Security.Authentication.AuthenticationException\nyou will need a pfx certificate that is not valid for specified WCF service.\nThaks,\nIon. ",
    "simonferquel": "That is actually really interesting. I will have a look at it.\nDoes Kestrel still run on .net Framework full btw? (Asking for docker desktop). I guess I should only focus on the client side then. I think option 2 is indeed the best option. I will open a PR doing that. Thanks!. Sure, I will do it (maintaining the code in my own fork while the design is discussed).. CoreFX issue opened here: https://github.com/dotnet/corefx/issues/35404. @davidfowl just played a bit with libuv transport. I managed to use the ListenSocketPath method to create a namedpipe, but any request fails with: \nfail: Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv[0]\n      Listener.OnConnection\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvException: Error -4049 ENOTSUP operation not supported on socket\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.LibuvFunctions.write2(UvRequest req, UvStreamHandle handle, uv_buf_t* bufs, Int32 nbufs, UvStreamHandle sendHandle, uv_write_cb cb)\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvWriteReq.WriteArraySegmentInternal(UvStreamHandle handle, ArraySegment`1 bufs, UvStreamHandle sendHandle, Action`4 callback, Object state)\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.ListenerPrimary.DispatchConnection(UvStreamHandle socket)\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Listener.OnConnection(UvStreamHandle listenSocket, Int32 status). I'll try to make a symetric issue/PR in SocketStream transport to fix that (and without having to rely on libuv). @davidfowl the extension model for kestrel allows to do this in a separate package. should it live within the main kestrel code base then?. ",
    "ahmedowsky": "Sure\n/etc/os-release output:\n\nNAME=\"CentOS Linux\"\nVERSION=\"7 (Core)\"\nID=\"centos\"\nID_LIKE=\"rhel fedora\"\nVERSION_ID=\"7\"\nPRETTY_NAME=\"CentOS Linux 7 (Core)\"\nANSI_COLOR=\"0;31\"\nCPE_NAME=\"cpe:/o:centos:centos:7\"\nHOME_URL=\"https://www.centos.org/\"\nBUG_REPORT_URL=\"https://bugs.centos.org/\"\nCENTOS_MANTISBT_PROJECT=\"CentOS-7\"\nCENTOS_MANTISBT_PROJECT_VERSION=\"7\"\nREDHAT_SUPPORT_PRODUCT=\"centos\"\nREDHAT_SUPPORT_PRODUCT_VERSION=\"7\"\n\ndotnet --info output (centos);\n\n.NET Command Line Tools (2.0.0)\nProduct Information:\n Version:            2.0.0\n Commit SHA-1 hash:  cdcd1928c9\nRuntime Environment:\n OS Name:     centos\n OS Version:  7\n OS Platform: Linux\n RID:         centos.7-x64\n Base Path:   /usr/share/dotnet/sdk/2.0.0/\nMicrosoft .NET Core Shared Framework Host\n  Version  : 2.0.0\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\n\ndotnet --info output (windows) | i was using that machine when i need the outputs because the other one i have (the one i am developing the app) caused me this dependency problem and at that moment i didn't have enough time to focus on that problem. This machine is the one i've updated the visual studio instance. Today i tried to install 2 different older versions of vs2017 on this one, both failed to reverse the situation.\n\n.NET Core SDK (reflecting any global.json):\n Version:   2.1.504\n Commit:    91e160c7f0\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.17134\n OS Platform: Windows\n RID:         win10-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.504\\\nHost (useful for support):\n  Version: 2.1.8\n  Commit:  209f8aa25c\n.NET Core SDKs installed:\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n\ndotnet --info output (the other windows i tried, development machine)\n\n.NET Core SDK (reflecting any global.json):\n Version:   2.2.104\n Commit:    73f036d4ac\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.17134\n OS Platform: Windows\n RID:         win10-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\nHost (useful for support):\n  Version: 2.2.2\n  Commit:  a4fd7b2c84\n.NET Core SDKs installed:\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\n.NET Core runtimes installed:\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n\nI won't be able to share much about spec file's content (possible sensitive information) but i am the one who created it. This spec file handles a few simple tasks such as; setting up some firewall rules, executing bash and/or sql scripts (versioning/altering/backups etc). Spec/Rpm version information is being read from dll (dll's version). By doing so i am not changing the spec file at all between versions/releases. There's some kind of an automation there.\nYes, i also have a console application (same scenario, same everything, handles complex bl's) but it's not causing the same problem.\nYes, I am building the .NET Core project on my Windows machine, and then copying the built project onto the CentOS machine and then wrapping it up in an RPM, yes, exactly.\nProject itself has a web api and a console app. They are both using some 3rd party dll's and handling some relatively complex tasks. They are both 2.0 apps. Web api is the one causing problems. The machines used in order to work on / develop those apps are all windows. The one i use to get the outputs is also a windows machine. I used that machine for more than 10 versions and god knows how many more releases without a problem.\nUnfortunately i won't be able to share files with you.\n--edit: correcting a misspelled word. Well i thought you might want to know about this\ndeplist command output has some interesting lines;\ndependency: /bin/bash\n   provider: bash.x86_64 4.2.46-31.el7\n  dependency: /bin/sh\n   provider: bash.x86_64 4.2.46-31.el7\n  dependency: libc.so.6\n   provider: glibc.i686 2.17-260.el7_6.3\n  dependency: libc.so.6()(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\n  dependency: libc.so.6(GLIBC_2.0)\n   provider: glibc.i686 2.17-260.el7_6.3\n  dependency: libc.so.6(GLIBC_2.1)\n   provider: glibc.i686 2.17-260.el7_6.3\n  dependency: libc.so.6(GLIBC_2.1.3)\n   provider: glibc.i686 2.17-260.el7_6.3\n  dependency: libc.so.6(GLIBC_2.14)(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\n  dependency: libc.so.6(GLIBC_2.17)(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\n  dependency: libc.so.6(GLIBC_2.2)\n   provider: glibc.i686 2.17-260.el7_6.3\n  dependency: libc.so.6(GLIBC_2.2.5)(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\n  dependency: libc.so.6(GLIBC_2.3)(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\n  dependency: libc.so.6(GLIBC_2.3.4)\n   provider: glibc.i686 2.17-260.el7_6.3\n  dependency: libc.so.6(GLIBC_2.3.4)(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\n  dependency: libc.so.6(GLIBC_2.4)\n   provider: glibc.i686 2.17-260.el7_6.3\n  dependency: libc.so.6(GLIBC_2.4)(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\n  dependency: libdl.so.2\n   provider: glibc.i686 2.17-260.el7_6.3\n  dependency: libdl.so.2()(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\ndependency: libdl.so.2(GLIBC_2.17)(64bit)\n   Unsatisfied dependency\ndependency: libdl.so.2(GLIBC_2.2.5)(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\ndependency: libdl.so.2(GLIBC_2.4)\n   Unsatisfied dependency\ndependency: libgcc_s.so.1\n   provider: libgcc.i686 4.8.5-36.el7\ndependency: libgcc_s.so.1(GCC_3.5)\n   Unsatisfied dependency\ndependency: libm.so.6\n   provider: glibc.i686 2.17-260.el7_6.3\n  dependency: libm.so.6()(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\n  dependency: libpthread.so.0\n   provider: glibc.i686 2.17-260.el7_6.3\n  dependency: libpthread.so.0()(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\ndependency: libpthread.so.0(GLIBC_2.17)(64bit)\n   Unsatisfied dependency\ndependency: libpthread.so.0(GLIBC_2.2.5)(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\n  dependency: libpthread.so.0(GLIBC_2.3.2)(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\n  dependency: libpthread.so.0(GLIBC_2.3.3)(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\n  dependency: libpthread.so.0(GLIBC_2.4)\n   provider: glibc.i686 2.17-260.el7_6.3\n  dependency: librt.so.1\n   provider: glibc.i686 2.17-260.el7_6.3\n  dependency: librt.so.1()(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\n  dependency: librt.so.1(GLIBC_2.2.5)(64bit)\n   provider: glibc.x86_64 2.17-260.el7_6.3\n  dependency: librt.so.1(GLIBC_2.4)\n   provider: glibc.i686 2.17-260.el7_6.3\n  dependency: ntp\n   provider: ntp.x86_64 4.2.6p5-28.el7.centos\n  dependency: rtld(GNU_HASH)\n   provider: glibc.x86_64 2.17-260.el7_6.3\n   provider: glibc.i686 2.17-260.el7_6.3\n. I got updates about this. Yesterday i created a new WebApi project (dotnet core 2.2) and the simplest spec file for it, built a rpm and tested that. Installation was successful, there were no such dependency problems. Then i noticed that project references were different between this test project & the one i faced dependency issues with.\nLong story short, i changed target framework & references of my project (by references i mean dotnet packages published by microsoft). After that, dependency problems were no more but; right after i thought i've fixed the issue, i updated all installed nuget packages and that made dependency problems come back again, with more problematic packages this time.\nAlso i had to add %define debug_package %{nil} line to my spec file after nuget updates.\nI have no idea what's happening.. @karelz i know you are not reading, but @omajid does (thankfully). i'll provide more info about this issue soon but i already lost some serious time while trying to fix the problem so i need to keep working on what i was doing before that issue, for now. But i still am interested about the reason of that problem.\nBy then, i would appreciate if you would stay away from the issues i've opened if you are not going to read them :) like #2332 \nThank you. @karelz sorry, no, i'm frustrated by the issue itself. You are right. Please accept my apologies.\nI understand you guys want some clear instructions to reproduce this issue but it might not be possible. Project is complex, spec file (rpm) is complex, +confidentiality.\n@omajid is waiting for more details from me but i don't have enough time right now. Problem is not resolved, not properly at least. I will work on his last request (as soon as possible).. @karelz i know you don't like reading, it's hard or whatever but, can you at least read the title?\nYour question is really so irrelevant, so absurd.\nDetails (including examples) are below the title.\nThose properties, are making, my rpm builds, to fail, if i use my keybord, to write, those version numbers.\nDoes it happen on more than 1 machine, yes\nDid i try latest VS build, yes\nDid i try older VS builds, yes\nChange? None. I'm sorry, i really am. I didn't mean to upset you. I was assuming that someone commenting under this issue would know about rpm builds.\nI can edit package inputs over VS no problem there. I can build the project, no problem there. Published dll's are also has the right version information on them. All cool on windows / VS part.\nHere's a step-by-step example\n\nopen a dotnet core console app / web api (doesn't matter)\nbuild it & publish it & copy them inside a centos7 machine\ncreate a spec file (this file is something like a rpm build instruction)\nmodify that spec file so it would be able to read rpm package's version information directly from the published dll (by doing so you won't have to edit spec file for every new version)\nbuild rpm package for that published output inside the centos7 machine\nbuild passes, rpm package is ready (all cool)\n\n\nBAD CASE\n\nopen project properties -> package\nchange \"assembly version\", \"assembly file version\" and \"package version\" as you wish, using numbers on your keyboard (lets say 1.1.1.1)\nbuild it & publish it & copy them inside a centos7 machine\nbuild rpm package for that published output inside the centos7 machine\nbuild fails (usually)\n\n\nGOOD CASE\n\nopen project properties -> package\nchange \"assembly version\", \"assembly file version\" and \"package version\" as you wish, by copy-paste-ing numbers from a google search result (lets say 1.1.1.1)\nbuild it & publish it & copy them inside a centos7 machine\nbuild rpm package for that published output inside the centos7 machine\nbuild always succeeds. > Why did you say \"usually\"? Is it intermittent? (as in repeating builds sometime fail) Or is it just random if the problem will be hit or not and once it is, then it is persistent?\n\nRandom, if it's a fail, it always fails, doesn't matter how many times i repeat rpm build process after that\n\nHow often does it happen?\n\nQuite often, i just prefer copy-paste-ing approach all the time\n\nIs the error the one from title? \"Unknown tag: x.x.x.x' (x are version numbers)\" ... so in this case it would be \"... 1.1.1.1\"?\n\nYes, rpm build error will be \"Unknown tag: 1.1.1.1\" in this case\n\nThis is overall very weird (and interesting ;))\n\nWatching your teammates faces right after explaining this situation is also funny\n\nIt sounds like VS in the \"bad case\" does not save some files\n\nI'm not sure about that. All i do is reading the dll's version information. And spec file actually can read that, even in the 'bad case'.\nOn Spec file i have those two lines below.\n%define assemblyFileVersion %(strings /bla/bla/app.dll | egrep '^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$')\nVersion:        %{assemblyFileVersion}\n. ",
    "mgolois": "@karelz, I'm going to try VS repair. \nYes it happens on one machine, the same project works well on other computer.\nI can run other .NET Framework projects with no problem, the issue is just with .net core and .net standard projects.\nI'll try VS repair later tonight after work and see.. @karelz - I tried VS repair that did not solve it. However, I realize that my .net core/.netstandard projects build fine in visual studio only if I run it as admin. This is happening only on my computer, not sure what's happening... anyway, I can run the projects now. ",
    "vsspt": "I'm sorry to insist, but we are being held by this issue, can anyone take a look?. Thank you very much, its working now.. ",
    "sebcam": "You have to install the nuget package Microsoft.AspNetCore.Mvc.NewtonsoftJson\nIn your startup.cs file, add the JsonFormatter like this :\nservices.AddMvc().AddNewtonsoftJson().SetCompatibilityVersion(CompatibilityVersion.Version_3_0);. ",
    "PWrGitHub194238": "I firmly believe the issue is that the default interface member feature is just not implemented yet (see GitHub note about this C#8.0 proposal).. ",
    "AlexAtNet": "According to the preview 1 release notes, default implementation of interface members should be implemented.. @jaredpar Thank you for clarification.. ",
    "beppe9000": "\nDoes the command above work?\n\nSo it seems... My problem is that I found no way to specify the latest version like this 0.1.*.\nC:\\Users\\Administrator\\Desktop\\nc\\zApp>dotnet add package ILLink.Tasks -s https://dotnet.myget.org/F/dotnet-core/api/v3/index.json -v 0.1.5-preview-1841731\n  Writing C:\\Users\\Administrator\\AppData\\Local\\Temp\\tmp236.tmp\ninfo : Aggiunta dell'oggetto PackageReference per il pacchetto 'ILLink.Tasks' nel progetto 'C:\\Users\\Administrator\\Desktop\\nc\\zApp\\zApp.csproj'.\nlog  : Ripristino dei pacchetti per C:\\Users\\Administrator\\Desktop\\nc\\zApp\\zApp.csproj in corso...\ninfo : Il pacchetto 'ILLink.Tasks' \u00e8 compatibile con tutti i framework specificati nel progetto 'C:\\Users\\Administrator\\Desktop\\nc\\zApp\\zApp.csproj'.\ninfo : L'oggetto PackageReference per il pacchetto 'ILLink.Tasks' versione '0.1.5-preview-1841731' \u00e8 stato aggiornato nel file 'C:\\Users\\Administrator\\Desktop\\nc\\zApp\\zApp.csproj'.\ninfo : Esecuzione del commit del ripristino...\nlog  : Generazione del file MSBuild \n...\nAlso, while we are at it... Is there a way to get a single statically linked executable file for linux with this, or some other way? It's a pain to distribute utilities with dozens of external files.\n. > Does the command above work?\nSo it seems... My problem is that I found no way to specify the latest version like this 0.1.*.\nC:\\Users\\Administrator\\Desktop\\nc\\zApp>dotnet add package ILLink.Tasks -s https://dotnet.myget.org/F/dotnet-core/api/v3/index.json -v 0.1.5-preview-1841731\n  Writing C:\\Users\\Administrator\\AppData\\Local\\Temp\\tmp236.tmp\ninfo : Aggiunta dell'oggetto PackageReference per il pacchetto 'ILLink.Tasks' nel progetto 'C:\\Users\\Administrator\\Desktop\\nc\\zApp\\zApp.csproj'.\nlog  : Ripristino dei pacchetti per C:\\Users\\Administrator\\Desktop\\nc\\zApp\\zApp.csproj in corso...\ninfo : Il pacchetto 'ILLink.Tasks' \u00e8 compatibile con tutti i framework specificati nel progetto 'C:\\Users\\Administrator\\Desktop\\nc\\zApp\\zApp.csproj'.\ninfo : L'oggetto PackageReference per il pacchetto 'ILLink.Tasks' versione '0.1.5-preview-1841731' \u00e8 stato aggiornato nel file 'C:\\Users\\Administrator\\Desktop\\nc\\zApp\\zApp.csproj'.\ninfo : Esecuzione del commit del ripristino...\nlog  : Generazione del file MSBuild \n...\nAlso, while we are at it... Is there a way to get a single statically linked executable file for linux with this, or some other way? It's a pain to distribute utilities with dozens of external files.\n. Yeah, it's just a way to quickly test examples\n\nFor static linking... maybe see if https://github.com/dotnet/corert meets your needs. You may also be interested in the design at dotnet/designs#52 for single-file distribution (/cc @swaroop-sridhar).\n\nThanks, they look promising. It's nice to see dotnet starting to follow the path of 2009-era RealBasic/Xojo. Yeah, it's just a way to quickly test examples\n\nFor static linking... maybe see if https://github.com/dotnet/corert meets your needs. You may also be interested in the design at dotnet/designs#52 for single-file distribution (/cc @swaroop-sridhar).\n\nThanks, they look promising. It's nice to see dotnet starting to follow the path of 2009-era RealBasic/Xojo. ",
    "RDunkley": "Looks like this is already logged in dotnet/corefx Issue #29014.. ",
    "kp2017": "You could try running the framework code locally and check for exceptions?. ",
    "NextTurn": "Thanks @KexyBiscuit. Target .NET Core 2.2 then.. How can BOM not be at the start?. It's nothing... I don't like BOMs because they are causing problems everywhere inadvertently. dotnet/docs#10963. It's a website itself instead of a redirect link.. They're default behaviors of CLI and VS.. And to be consistent with the full sample samples/dotnetsay/dotnetsay.csproj.\nThese samples shouldn't be inconsistent with each other.. Why did you care about where it was?. Don't you think my last modification is more descriptive?. ",
    "nicholashoule": "This issue appears to be resolved. . ",
    "CalvinFengDatacom": "Closed as it related to .Net Framework not .Net core. ",
    "tamasVajda": "For code axample see the following repository:\nhttps://github.com/tamasVajda/ClassLoadTest.git. ",
    "VipSaran": "Yes. Even though the installer was completely downloaded it could not reference some of required files. Hence I opened the issue as something that should be of interest.\nRe-download solved the problem.\nThanks.. ",
    "brunocapu": "Moved with new information to: https://github.com/dotnet/corefx/issues/35702. ",
    "cjvalenzuela": "I had that same issue: https://github.com/dotnet/core/issues/2381\nsudo apt-get update && sudo apt-get upgrade the re-run, that did the trick. From https://askubuntu.com/questions/1065231/dpkg-deb-error-archive-has-premature-member-control-tar-xz-before-contr/1065237#1065237. Thanks @omajid! Indeed, dpkg needed to be upgraded\nsudo apt-get update && sudo apt-get upgrade  did the trick.. ",
    "SuperTal3": "Possibly its the libicu57 package that won't install.  Thats what happens to me.  I have the same error on this thread.\n```\nPackage libicu57 is not available, but is referred to by another package.\nThis may mean that the package is missing, has been obsoleted, or\nis only available from another source\n``\n. You could try using snap to install the beta.. > @irreverencieux - could you runsudo apt-get install dotnet-runtime-deps-2.2`? This should tell us exactly which system dependency is unable to be installed.\nIt's libicu57 that won't install.. It still fails...  It shows this error now.\n`Some packages could not be installed. This may mean that you have\nrequested an impossible situation or if you are using the unstable\ndistribution that some required packages have not yet been created\nor been moved out of Incoming.\nThe following information may help to resolve the situation:\nThe following packages have unmet dependencies:\n dotnet-sdk-2.2 : Depends: aspnetcore-runtime-2.2 (>= 2.2.2) but it is not going to be installed\n                  Depends: dotnet-runtime-2.2 (>= 2.2.2) but it is not going to be installed\nE: Unable to correct problems, you have held broken packages.\n`. I've found the best way is to install via snap.  It doesn't throw errors and ends up working fine that way.\nExcept that it doesn't work with VSCode when I do that.. ",
    "epetutsc": "Duplicate of roslyn/#33748. ",
    "grenadin": "Maybe occur from \"https://localhost:5000\" that types in tutorial  try to change it to http://localhost:5000/ instead. Cut s from https:. ",
    "shamexln": "@glennc I tried it There is also error message as below\nC:\\Users\\tester\\myMicroservice>docker run hello-world\ndocker: error during connect: Post http://%2F%2F.%2Fpipe%2Fdocker_engine/v1.39/containers/create: open //./pipe/docker_engine: The system cannot find the file specified.\nIn the default daemon configuration on Windows, the docker client must be run elevated to connect. This error may also indicate that the docker daemon is not running.\nSee 'docker run --help'.. got with thanks.\n\u83b7\u53d6 Outlook for iOShttps://aka.ms/o0ukef\n\n\u53d1\u4ef6\u4eba: Glenn Condron notifications@github.com\n\u53d1\u9001\u65f6\u95f4: Thursday, March 7, 2019 1:52:44 AM\n\u6536\u4ef6\u4eba: dotnet/core\n\u6284\u9001: shamexln; Mention\n\u4e3b\u9898: Re: [dotnet/core] Problem encountered on https://dotnet.microsoft.com/learn/web/aspnet-microservice-tutorial/docker-image (#2375)\n@shamexlnhttps://github.com/shamexln Right, that means there is something wrong with the Docker for Windows installation on your machine, Docker itself is not working regardless of what you are trying to do. Which is a bit outside the scope of what we can help you with in the .NET repo. All I can suggest is the Docker troubleshooting guide (https://docs.docker.com/docker-for-windows/troubleshoot/), Stackoverflow, and other Docker specific help channels. Just removing all of Docker from your machine and starting again might help, making sure you have the latest of everything.\n\u2015\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/dotnet/core/issues/2375#issuecomment-470207811, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AeATSb7KNKUYYcQj9A0NkpCsSGtOKShGks5vUABsgaJpZM4beHcU.\n. ",
    "Kirbybu1": "\nChecking the updates now.. ",
    "xinyuefu": "the page hints:\nFileNotFoundException: Could not load file or assembly 'Leadtools.Kernel.Codecs.DLL' or one of its dependencies. The specified module could not be found.]\n. ",
    "Eyad-Mohammed-Osama": "@leecow Thanks for your reply\nI've downloaded the .NET SDK , decompressed the .tar.gz archive , exported dotnet executable into PATH , this seems to be working fine for me.\nNow all i have to do is to find a way to make the change on PATH variable permanent .. ",
    "Palpatineli": "I'm having the same issue. I think what tigersoldier was saying was that debian testing (not stretch) has libraries with versions too high for the installation. The solution, beside compiling the packages ourselves, is to see if the dependencies requirement could be relaxed to allow these new libs, or provide a .run file to install own dependencies.. ",
    "nkev": "On Core 3, I think the port is 5001, https://localhost:5001/. ",
    "AndyFVesper": "\nTry to disable Norton, firewalls and other things. It should work.\n\nDisconnected from outside world and disabled Norton, but it still fails the same way.. > On Core 3, I think the port is 5001, https://localhost:5001/\n\ndotnet --version\n3.0.100-preview3-010431\nI have been following the ASP.NET tutorial and haven't changed any code.. > I've seen this error manifest before when there's a conflicting port reservation via Http.Sys.\n@AndyFVesper Perhaps you have a conflicting IIS binding?\n\n@shirhatti How should I check for a conflict? Would http.sys be in its own process? I don't see any process with that name.. @halter73 \nNothing with \"5000\" or \"http.sys\" or \"kestrel\"\nURL Reservations:\nReserved URL            : http://*:5357/\n    User: BUILTIN\\Users\n        Listen: Yes\n        Delegate: No\n    User: NT AUTHORITY\\LOCAL SERVICE\n        Listen: Yes\n        Delegate: No\n        SDDL: D:(A;;GX;;;BU)(A;;GX;;;LS)\n\nReserved URL            : http://+:80/Temporary_Listen_Addresses/\n    User: \\Everyone\n        Listen: Yes\n        Delegate: No\n        SDDL: D:(A;;GX;;;WD)\n\nReserved URL            : https://*:5358/\n    User: BUILTIN\\Users\n        Listen: Yes\n        Delegate: No\n    User: NT AUTHORITY\\LOCAL SERVICE\n        Listen: Yes\n        Delegate: No\n        SDDL: D:(A;;GX;;;BU)(A;;GX;;;LS)\n\nReserved URL            : http://*:2869/\n    User: NT AUTHORITY\\LOCAL SERVICE\n        Listen: Yes\n        Delegate: No\n        SDDL: D:(A;;GX;;;LS)\n\nReserved URL            : http://+:10247/apps/\n    User: NT AUTHORITY\\Authenticated Users\n        Listen: Yes\n        Delegate: No\n        SDDL: D:(A;;GX;;;AU)\n\nReserved URL            : https://+:10245/WMPNSSv4/\n    User: NT SERVICE\\WMPNetworkSvc\n        Listen: Yes\n        Delegate: No\n        SDDL: D:(A;;GX;;;S-1-5-80-2375682873-768044350-3534595160-1005545032-2873800392)\n\nReserved URL            : http://+:10243/WMPNSSv4/\n    User: NT SERVICE\\WMPNetworkSvc\n        Listen: Yes\n        Delegate: No\n        SDDL: D:(A;;GX;;;S-1-5-80-2375682873-768044350-3534595160-1005545032-2873800392)\n\nReserved URL            : https://+:5986/wsman/\n    User: NT SERVICE\\WinRM\n        Listen: Yes\n        Delegate: No\n    User: NT SERVICE\\Wecsvc\n        Listen: Yes\n        Delegate: No\n        SDDL: D:(A;;GX;;;S-1-5-80-569256582-2953403351-2909559716-1301513147-412116970)(A;;GX;;;S-1-5-80-4059739203-877974739-1245631912-527174227-2996563517)\n\nReserved URL            : http://+:47001/wsman/\n    User: NT SERVICE\\WinRM\n        Listen: Yes\n        Delegate: No\n    User: NT SERVICE\\Wecsvc\n        Listen: Yes\n        Delegate: No\n        SDDL: D:(A;;GX;;;S-1-5-80-569256582-2953403351-2909559716-1301513147-412116970)(A;;GX;;;S-1-5-80-4059739203-877974739-1245631912-527174227-2996563517)\n\nReserved URL            : http://+:8732/Design_Time_Addresses/\n    User: NT AUTHORITY\\INTERACTIVE\n        Listen: Yes\n        Delegate: No\n        SDDL: D:(A;;GX;;;IU)\n\nReserved URL            : https://+:443/sra_{BA195980-CD49-458b-9E23-C84EE0ADCD75}/\n    User: NT SERVICE\\SstpSvc\n        Listen: Yes\n        Delegate: Yes\n    User: BUILTIN\\Administrators\n        Listen: No\n        Delegate: No\n    User: NT AUTHORITY\\SYSTEM\n        Listen: Yes\n        Delegate: Yes\n        SDDL: D:(A;;GA;;;S-1-5-80-3435701886-799518250-3791383489-3228296122-2938884314)(A;;GR;;;BA)(A;;GA;;;SY)\n\nReserved URL            : http://127.0.0.1:47873/help/\n    User: \\Everyone\n        Listen: Yes\n        Delegate: No\n        SDDL: D:(A;;GX;;;WD)\n\nReserved URL            : http://+:8733/Design_Time_Addresses/\n    User: NT AUTHORITY\\INTERACTIVE\n        Listen: Yes\n        Delegate: No\n        SDDL: D:(A;;GX;;;IU)\n\nReserved URL            : http://+:5985/wsman/\n    User: NT SERVICE\\WinRM\n        Listen: Yes\n        Delegate: No\n    User: NT SERVICE\\Wecsvc\n        Listen: Yes\n        Delegate: No\n        SDDL: D:(A;;GX;;;S-1-5-80-569256582-2953403351-2909559716-1301513147-412116970)(A;;GX;;;S-1-5-80-4059739203-877974739-1245631912-527174227-2996563517)\n\nReserved URL            : http://+:10246/MDEServer/\n    User: NT AUTHORITY\\Authenticated Users\n        Listen: Yes\n        Delegate: No\n        SDDL: D:(A;;GX;;;AU)\n\n. ",
    "Elrashid": "https://github.com/dotnet/core-setup/issues/4247\nsudo apt-get autoremove dotnet-host\nsudo rm -rf /usr/share/dotnet/\nwget http://mirrors.kernel.org/ubuntu/pool/main/i/icu/libicu60_60.2-6ubuntu1_amd64.deb\nsudo dpkg -i libicu60_60.2-6ubuntu1_amd64.deb\nsudo apt-get install dotnet-sdk-2.2. https://github.com/dotnet/core-setup/issues/4247\nsudo apt-get autoremove dotnet-host\nsudo rm -rf /usr/share/dotnet/\nwget http://mirrors.kernel.org/ubuntu/pool/main/i/icu/libicu60_60.2-6ubuntu1_amd64.deb\nsudo dpkg -i libicu60_60.2-6ubuntu1_amd64.deb\nsudo apt-get install dotnet-sdk-2.2. https://github.com/dotnet/core-setup/issues/4247\nsudo apt-get autoremove dotnet-host\nsudo rm -rf /usr/share/dotnet/\nwget http://mirrors.kernel.org/ubuntu/pool/main/i/icu/libicu60_60.2-6ubuntu1_amd64.deb\nsudo dpkg -i libicu60_60.2-6ubuntu1_amd64.deb\nsudo apt-get install dotnet-sdk-2.2. https://github.com/dotnet/core-setup/issues/4247\nsudo apt-get autoremove dotnet-host\nsudo rm -rf /usr/share/dotnet/\nwget http://mirrors.kernel.org/ubuntu/pool/main/i/icu/libicu60_60.2-6ubuntu1_amd64.deb\nsudo dpkg -i libicu60_60.2-6ubuntu1_amd64.deb\nsudo apt-get install dotnet-sdk-2.2. ",
    "dineshpandiyan": "Kindly help me on this pls.... ",
    "dreamerNcoder": "Perfect \ud83d\udc4d Can we update the same in documentation  it will help some facing this issue.\n. ",
    "PhantomXL": "Yes. I followed the instructions carefully.. Yes. I followed the instructions carefully.. I tried reinstalling numerous times before I sent my initial error report, although I haven't tried a VM or through another device. I will keep you posted, once I try those.\n\nFrom: Karel Zikmund notifications@github.com\nSent: Tuesday, March 19, 2019 3:36:09 AM\nTo: dotnet/core\nCc: PhantomX; Author\nSubject: Re: [dotnet/core] dotnet run error in powershell, after .NET SDK installation. (#2420)\nIt looks like something weird happened on your machine.\nCan you please try to reinstall .NET Core?\nOr try another machine or VM?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/dotnet/core/issues/2420#issuecomment-474163851, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ArTXAKp8A1fqxyXyS2E9jhDBTHemwjMNks5vYD8JgaJpZM4bnk65.\n. ",
    "ehhnwidex": "@leecow Yes i have only tested on a windows subsystem, but other console applications using System.IO.Path to handle directories, does not seem to have the same problem. ",
    "ctyar": "The SDK versions are also wrong.. ",
    "michael-x": "The announcement post still says \".NET Core 2.1.9 and .NET Core SDK 2.1.503\" where the SDK version should be \"2.1.505\".. @karelz the original announcement at https://github.com/dotnet/announcements/issues/103.. ",
    "femamipi": "I have reinstalled it through the link you shared. I still get the same comment \"command not found\" for ~$dotnet!. Yay \ud83d\ude00 It worked, thank you.\nOn Tue, Mar 12, 2019 at 6:23 PM 0xd4d notifications@github.com wrote:\n\nTry dotnet and not ~$dotnet\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dotnet/core/issues/2437#issuecomment-472218625, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AuP9Zo9-lBLC8MDbYXrJn7cfLg-8AvVwks5vWDblgaJpZM4br5Yu\n.\n-- \n--\u200b\nFereshteh Emami\nAssistant Professor of Analytical Chemistry\nDepartment of Chemistry & Physics\nSoutheastern Louisiana University 10878\n127W Pursley Hall\nHammond, LA 70402\nEmail: fereshteh.emami@selu.edu\nPhone: 985-549-2335\n. \n",
    "chaim1221": "It just so happens that I had commented out the line\napt-get install -yq aspnetcore-runtime-2.1 && \\\nto troubleshoot something, and my problem was due to not having the runtime installed at all.\nPEBKAC. ",
    "Dresel": "Yes I can do that, I'll keep you updated.. You were right, this has nothing todo with the custom MSBuild task.\nSee the minimal repro:\n\n~~dotnet info is called via ProcessStartInfo to get the MSBuild location~~\n~~MSBUILD_EXE_PATH is set to previous retrieved MSBuild location~~\nUsing MSBuildLocator to register MSBuild\nProjectCollection.LoadProject is called. Updating Microsoft.Build and Microsoft.Build.Utilities.Core to 16.0.452 from the https://dotnet.myget.org/F/msbuild/api/v3/index.json feed seems to solve this problem.\n\nThanks for your time and help.. ",
    "ryanbrandenburg": "No extra info here, so far as I know --no-https hasn't changed since March of last year. The info @leecow requested would be very helpful.. @smpeters let us know if that doesn't solve your issue, otherwise we'll close this out.. ",
    "smpeters": "```$ dotnet --info\n.NET Command Line Tools (2.1.4)\nProduct Information:\n Version:            2.1.4\n Commit SHA-1 hash:  5e8add2190\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  10.14\n OS Platform: Darwin\n RID:         osx.10.12-x64\n Base Path:   /usr/local/share/dotnet/sdk/2.1.4/\nMicrosoft .NET Core Shared Framework Host\nVersion  : 2.0.5\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54.\n$ dotnet new webapi -o myMicroservice --no-https\nUsage: new [options]\nOptions:\n  -h, --help          Displays help for this command.\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\n  -o, --output        Location to place the generated output.\n  -i, --install       Installs a source or a template pack.\n  -u, --uninstall     Uninstalls a source or a template pack.\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\n  --force             Forces content to be generated even if it would change existing files.\n  -lang, --language   Specifies the language of the template to create.\nInvalid input switch:\n  --no-https. Hmmm... it looks like it was installed with Visual Studio when I installed it in December 2018.  OK, well, I updated Visual Studio and that command works now.. ",
    "itonlytakeswon": "Apparently I missed this statement in the documentation:\n\nRoute templates applied to an action that begin with / or ~/ don't get combined with route templates applied to the controller. This example matches a set of URL paths similar to the default route.. \n",
    "khellang": "What do you mean by \"should be less boxing\"? All methods take generic parameters, which would avoid boxing. This would probably be better suited for https://github.com/dotnet/corefx?. > lots of casts to uint\nCasting to uint isn't boxing.\n\nthat are not usefull\n\nThey're not just useful, they're necessary. You don't want to be bit-shifting signed integers like that.. ",
    "PeterPann23": "lots of casts to uint that are not usefull. ",
    "sergiotapia": "On a simple dotnet new console -o MyApp, I can successfully:\ndotnet build # for all three major platforms, Mac, Windows and Linux\ndotnet run\nBut if I open the .csproj file in Visual Studio preview, I get build errors like OP.. Same. ",
    "ovicrisan": "Same thing here, but also for VS 2017 targeting ASP.NET Core 2.2, not only for 3.0 preview. My previous projects don't work anymore in VS after installing .NET Core 3.0 preview. Very annoying.. I wasn't explicit enough: beside VS 2019 not working after installing .NET Core 3.0 preview 3, also my previous (side-by-side) VS 2017 targeting .NET Core 2.2 doesn't work any more.\nBuilding and running it from CLI works fine, but not from VS. This is from VS 2017 w/ .NET Core 2.2 project:\n\n. ",
    "prathmesh9090": "So here i find a fix now went to this link\n    https://dotnet.microsoft.com/download/thank-you/dotnet-sdk-3.0.100-preview3-linux-x64-binaries\nand installed dotnet core 3.0\nafter that open a terminal in download folder and follow the commands\n    mkdir /usr/share/dotnet   (if available alredy then ignore)\n    sudo tar -zxf dotnet-sdk-3.0.100-preview3-010431-linux-x64.tar.gz -C /usr/share/dotnet\n    sudo ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\n    dotnet run\n    dotnet new console\n    dotnet run\nhope this save your time and save you from getting pissed off!\n. ",
    "Inathi-Gqola": "To addto what @leecow said above.  If you are using a version lower thab 2.1, you can use the template name 'webApp' with 'razor'. . ",
    "tkstanczak": "these may be related:\nhttps://github.com/dotnet/cli/issues/6516\nhttps://github.com/dotnet/cli/issues/7680. ",
    "JamesNK": "The logic Json.NET uses when converting an existing DateTime to local:\n```cs\n        private static DateTime SwitchToLocalTime(DateTime value)\n        {\n            switch (value.Kind)\n            {\n                case DateTimeKind.Unspecified:\n                    return new DateTime(value.Ticks, DateTimeKind.Local);\n            case DateTimeKind.Utc:\n                return value.ToLocalTime();\n\n            case DateTimeKind.Local:\n                return value;\n        }\n        return value;\n    }\n\n```\nJson.NET relys on the underlying .NET logic for timezones and local time.. ",
    "Sridhar-MS": "It should be rel/1.0.0-preview1 branch for CLI\n. ",
    "leemgs": "For CoreCLR:\n[Geunsik Lim(6) ] https://github.com/dotnet/corefx/commits/master?author=geunsik.lim@samsung.com\n. ",
    "mconnew": "When a running application creates an instance of XmlSerializer, it generates a temporary assembly containing the implementation of the serializer. This happens once for each type for which an XmlSerializer is needed. To improve performance, we can use Microsoft XmlSerializer Generator to pre-generate code for an XmlSerializer for each specified type in a project and compile it into an assembly. This assembly will then be used by the application when creating an XmlSerializer instead of generating a temporary one. . Here are the step by step instructions how to create a dotnet project and install the XmlSerializer Generator for that project.. ..that contains your custom data types. E.g. create.... step 1 (missing a space). following line:  (colon, not comma)\n. If you do this it will use xml coloring:\n```xml\n\\\n```\nHere's what it will look like (I've removed the escaping here so you see it in effect):\nxml\n<add key=\"dotnet-core\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />. It's only a small file, why make someone click a link which then won't be able to be copy and pasted because the file viewer on GitHub gives you messed up text when you copy it (line numbers plus lots of extra blank lines). It should be  small enough content that you can just paste it inline in the documentation.. ```xml. If everything succeeds, a file named \\\\<AssemblyName\\>.XmlSerializers.dll will be generated in the output folder. You will see warnings in the output window if the serializer fails to generate.\nOutput window seems a little odd as you are giving command line instructions. Maybe \"..you will see warnings in the build output if ...\". Btw, anything in a .md file enclosed in angle brackets (\\<>) will be treated as if it's html markup and disappear from the output if you don't escape the brackets with \\.. You can use the command....\nDrop the word \"may\" and switch to \"you have already installed.\". [XmlSerializerFormat] is code so should be placed in backticks. that targets netcoreapp.... Make sure your project targets netcoreapp 2.1. This is done using the following XML element in your .csproj project file. . Add a package reference to System.ServiceModel.Http.. You should know the filename of the csproj file based on the dotnet command ran earlier. ",
    "ianhays": "Have we thought about making this Fedora27 instead of Fedora26?. What about 1.0 which currently just has a package for OpenSuse 13.2? Do we want to ship a new package for 1.0 as well, or do we only care about updating the support map for 1.1?. ",
    "peterhuene": "This should now work in preview 2, so I think this section can be removed.. ",
    "VSadov": "Yes, it is a nonbreaking change if that is the only change.. Adding readonly modifier will force that all instance fields/autoproperties/events are readonly.\nIf you have to change any of that, be careful!. readonly struct S1    basically tells to the outer world \"hey, I do not have any mutable state\".\nIn a context of reference assemblies, - if a struct says it is readonly in a ref assembly, but an implementation adds a mutable instance field (even private one), it would be bad.. ",
    "jiria": "In addition, can we have a line for IoTCore as well?. "
}