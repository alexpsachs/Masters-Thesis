{
    "ai": "You ar fast :) Thanks\n. \u041d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u043d\u0435 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439 \u2014 \u043e\u043d \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u043b\u0441\u044f \u0441 \u0443\u0447\u0451\u0442\u043e\u043c, \u0447\u0442\u043e \u043a\u0442\u043e-\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0438 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\ncss\na {\n  color: white\n  background: black;\n  border: 1px solid black;\n  width: 10px\n}\njs\nrule.decls.forEach(function (decl) {\n  console.log(decl.prop);\n  decl.remove()\n})\n\u0432\u044b\u0432\u0435\u0434\u0435\u0442:\ncolor\nborder\n\u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0446\u0438\u043a\u043b\u0430 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0431\u0443\u0434\u0435\u0442 \u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f.\n. \u041d\u043e \u043c\u043e\u0436\u043d\u043e \u0438 \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0445\u043e\u0434\u0438\u0442\u044c \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443. css.rules \u0438 rule.decls \u2014 \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u044b.\n. \u0425\u043e\u0440\u043e\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431! \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0441\u044c \u0438\u043c \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0432\u0435\u0440\u0441\u0438\u044f\u0445.\n\u041d\u043e \u0432 \u043e\u0431\u0449\u0435\u043c Container.each \u2014 \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0430\u043b\u0438\u0430\u0441 \u043a forEach \u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\u043c\u0438.\n\u0410 \u0432\u043e\u0442 Container.eachDecl \u0438 Container.eachRule \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u0430\u043d\u0430\u043b\u043e\u0433 forEach \u2014 \u044d\u0442\u043e \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c.\n. Postprocessors work after Sass/LESS compilation, so PostCSS supports them :).\nCheck out how Autoprefixer works.\n. I will add more documentation, when code will be more stable (maybe after Autoprefixer 1.0 release).\n. Minifying CSS is actually one of possible PostCSS task :).\nNow you can create declaration without spaces after :, but syntax is too inconvenient:\n``` js\nvar Raw = require('postcss/lib/raw');\nvar Declaration = require('postcss/lib/declaration')\nvar d = new Declaration(prop: 'color', value: new Raw('black', 'black'));\nd.toString() // => \"color:black\"\n```\n. I will think about better API.\nBut I think, that by default output CSS should be readable :).\n. The best solution is to save readability for input CSS. So, when you add new rule/declaration to CSS, it should copy code style for exists code.\n``` coffee\nreadable.toString() #=> \"a { color: black }\"\nreadable.append( postcss.decl(prop: 'z-index', value: '1').toString() #=> \"a { color: black; z-index: 1 }\"\ncompress.toString() #=> \"a{color: black}\"\ncompress.append( postcss.decl(prop: 'z-index', value: '1').toString() #=> \"a{color:black;z-index: 1}\"\n```\nWhat task to you try to solve, when you find this issue?\n. OK, I will add declaration space detector :).\nBut maybe not in next 0.2 release (because I need release Autoprefixer 2.0 soon).\n. I start to realize this feature. Already works with \u201cbetween property and value\u201d and \u201cbetween selector and {\u201d 7015cdf594c08c4538a3bd062adc09fc7598de3d\nStill need support to \u201cbetween at-rule params and {\u201d, \u201cbefore selector\u201d, \u201cbefore at-rule\u201d, \u201cbefore }\u201d.\n. \u201cbetween at-rule, params and {\u201d was finished too 52cd66853f09012269b4d200fda959b206a7d475\n. Finish with spaces inside rules: a5ee840\n. Done. Check cool tests.\nPostCSS now try to understand your code style, when you insert new rules.\n. I try to make new version at next week. We now try to improve source map support at #13 and #25  :).\n. \u0421\u043f\u0430\u0441\u0438\u0431\u043e :)\n. Fixed 7a8c18124141b3e9f01b82a7c43b2ee5f7b79a90\n. Done 43f805d1255481231faa91e8c222a1355baa5dbd\n. PostCSS also should support several input map files.\n. Done db01429f0870926378eef7f52c20ea68bce257b4\n. @lydell thanks, it will be very helpful :).\n. Maybe we should commit to source-map? After few days I will start to fix this issue and I try to find how it will be difficult.\n. There is problem, that path.relative() only in Node.js :(.\nBut we can use some smart autodetect and didn\u2019t use this method in browsers.\n. You are cool guys :). Thanks, that is what I need.\nHopy, that mozilla team would like to add new dependencie :).\n. @lydell you are awesome :D thanks for good investigation.\n. @lydell you tell about take file from previus map (and of cource this idea is wrong, becuase it is option file), but why whe can\u2019t change file option in previus map?\nCan you please check my fix: a2e2652aa1197920814e837ab90c80180e741658\nIt is seems to simple to me, maybe there are some side effects?\n. /cc @nDmitry @fitzgen\n. @lydell second argument for applySourceMap don\u2019t solve all problems, because file and sources in generated map will not be relative from map file?\n. @lydell does I understand correct, that next problem is that we use apsolute path in map, but must use paths relative from map file?\nI try to fix it in MapGenerator hack.\n. @nDmitry don\u2019t be so cruel with CoffeeScript ;). There are a lot of execulent software on Ruby and Python with same code style :).\n@lydell I think to take now path hacks from grunt-autoprefixer and clean them when source-map will be fixed right. Users too wait for 1.1 release and now I prefer hotfix :).\n. @nDmitry @lydell I think I have done with relative paths :). Can you please check last 2 tests.\n. And Declaration#between should \" : \" with spaces arround.\n. Added to Rule: c3d7dd19a570b117ef4e1beb27bf1ad72e93c91f\n. Added to AtRule: 2b9c527038f0713db2212d884a362ae8d922be9a\nMaybe add some variable for spaces between at-rule\u2019s name and params?\n. Added to Declaration: b1a79c94533ed07480947ae38cdb81de32f2d8f4\n. I should also add spaces properties to Comment.\n. Added to Comment: 94bca7a36c642c1da1d32984302bb818bacf68bc\n. Done f4b04f7680604f73f959274f2015284f2306ad01\n. @kossnocorp yeap, tests for SyntaxError is fine. line and column arguments, instead of position is fine too.\n. @kossnocorp we already have before props in most of Nodes, that contain spaces before node. So name can be misunderstood. Method generateBefore() will be better.\nAnd I didn\u2019t use underscore in private function (like normalize) right now. Ruby doesn\u2019t had underscores and works fine :).\nDon\u2019t change logic with spcaes, because I plan to rewrite it to fix #6.\n. @kossnocorp maybe you know, how to profile node.js script in Chrome? Or same another profiler with same good UI?\nI need to speed up PostCSS before 0.3 release :).\n. @kossnocorp \u201cProfiler is not implemented yet\u201d :(.\nTo run benchmark: ./node_modules/.bin/cake bench.\nAlso there are integration tests: ./node_modules/.bin/cake integration. Sometimes Bootstrap answer with bad HTML, so run it again if you will had problems.\n. Done f1e1331f9b7d0cfd6861630493340a21f5d64bbe\n. Required by grunt-contrib-less: https://github.com/nDmitry/grunt-autoprefixer/issues/20\n. Done 4b69b3f224db8d64143b783833abdc83efbf348c\n. Property selector is phantom propety :D. It was generated by Object.defineProperty with custom getter and setter.\nI agree, that no selector in console inspect can confuse users, but I propose, that they reads the docs.\nMaybe we should improve the docs?\n. I will add section about migration from Rework later.\nPlease write about other problems and difficults in API.\n. I added Usage section with quick overview: https://github.com/ai/postcss#usage\n. I remove all this magic with getter/setter: 0e3c0d708856e95a45ed7d9c8fac6ab16a3836af\nRule now has normal selector property. But raw magic is still working:\n``` js\nvar root = postcss.parse(\"a/**/ b {}\");\nvar rule = root.first;\nrule.selector   //=> 'a b'\nrule.toString() //=> 'a/**/ b {}'\nrule.selector = 'b'\nrule.toString() //=> 'b {}'\n``\n. You should userule.selector`, which contain string \"div,\\nspan\".\nProperty _selector is only for PostCSS internal usage. You can read about it in Raw Properties section in README.md.\n. I think, that parse selector string to array is not necessary for most of cases.\nFor example, if your filter just change selector by regexp (like in IE\u2019s fixes ::before \u2192 :before), array will disturb. If you need array, just split string by yourself:\nselectors = rule.selector.split(/\\s*,\\s*/);\n. But I can create some syntax sugar to PostCSS by selectors getter/setter (split selector string  and cache array).\nWhat is your user case to using selector as array?\n. Done 0f621d09ba9370b5327ff0b30f98902e77c9ecae\nWill be released in 0.3.\n. Done 6d22257f5668a19719f5400056ae5dd2b19e5ec5\n. Done 4b69b3f224db8d64143b783833abdc83efbf348c\n. You already has lis module to parse this kind of strings:\njs\nlist.space(decl.value) //=> ['crimson', 'url(omgkittens.jpg)']\nBut I forget to write about it in README.md.\n. Shortcut expansion is a more complicated idea. Now, PostCSS doesn\u2019t know anything about CSS specs, it just parse syntax.\nUnderstanding of CSS sense is very difficult task and will not be implemanted in closer versions. But I wil hold this idea.\nBTW (it will help to create better API), what user case do you have to use this shorthand value expansion?\n. I think about this kind of API: css.compute(\"div.shy\") #=> { color: 'lavenderblush', background: 'linen' }.\nI like this idea, but I didn\u2019t give any promises about implementation ;).\n. Maybe there some library  for it. So we can use it and only add some nice syntax sugar to PostCSS :).\n. Issue in mozilla\u2019s source-map https://github.com/mozilla/source-map/issues/91\n. Done d035544753c4eee533b62bd488541e9a531b22f2\n. Thanks :)\n. Done a78e3c09b64fa4198ad236b2b47c9c3e9470af21\n. Oops :-). Thanks.\n. Hm. Never see URI encoding in data: inline, but it is possible by specs :). OK, I will add this support.\nBut what program generates inline map with URI encoding?\n. @nDmitry I hate LESS :)\n. Done d897279\nPlease check latest master, if everything was OK, I will release PostCSS 0.3.2 today.\n. Nice, 0.3.2 was relased.\n. Hm. PostCSS now save return result.map only for non-inline maps. But we can change API :).\nWhy you need inline map and map content to save it to separated file?\n. Current API is:\n1. You pass input CSS and user options and didn\u2019t think ever about maps.\n2. PostCSS autodetect previous map, check options.\n3. If PostCSS decide to write output map file, it will add .map property to result.\n``` js\nvar result = postcss(processor).process(css, opts);\nfs.writeFileSync('out.css', result.css);\nif ( result.map) {\n  fs.writeFileSync('out.css.map', result.map);\n}\n``\n. You can ask PostCSS to process map toresult.map` and inline it by yourself:\n``` css\nvar result = postcss(processor).process(css, map: true, inlineMap: false);\nvar output = result.css;\nvar base64 = new Buffer(result.map).toString('base64');\noutput += \"\\n/# sourceMappingURL= data:application/json;base64,\" + base64 + \" /\";\n``\n. You setmap: trueto generate maps andinlineMap: falseto generate in-file map, instead of inline. So your map files now is inresult.map`.\nI didn\u2019t understand what you really whant in this example.\nIf you want to remove /*# sourceMappingURL=to.css.map */, add mapAnnotation: false option.\nIf you want to inline map to CSS (but you willn\u2019t have result.map), set inlineMap: true.\n. You want just inline map. You need only inlineMap: true option without magic:\njs\nvar result = autoprefixer.process( file.outputFileText, { inlineMap: true });\n. Oh, I finally understand you :). You didn\u2019t like, what map will generated?\nOK, why you need sourcesContent?\n. But how browsers will use sourcesContent right know? They only show rule destenation according maps.\n. I think PostCSS should had mapSource option. And also detect source in prevous map. But I will add this feature maybe only after few week :(.\nIn your case right now I recommend to build map yourself. Next version will support sources content and you can clean your code.\n. @dbashford yeap, I understand that this mechanism is ugly, but on this week I willn\u2019t have a time :(. But we definitely will clean your hack in next release by mapSource option. Or maybe we should use sourceContent: true option?\n. Done f7e61a5d1f431dce97d89d2066895b774b0be2bc\nIt will be in 1.0 release in this or next week.\n. Option will be map: { sourcesContent: true }\n. @lydell spec contains sourcesContent\n. @lydell don\u2019t worry, everyone happy with Referer in HTTP :)\n. Seems like you use outdated PostCSS. PostCSS 0.3 may fix this issue.\nPlease update and if issue will be on latest version, be free to reopen issue.\n. _value is totally internal method ;). Use only .value, .selector and same public getters.\n. Docs about this magic properties: https://github.com/ai/postcss#raw-properties\n. If raw and trimmed values are same (like in color: black) _value will contain only one value.\nIf raw and trimmed values are different (like in border-width: 1px /**/ 1px, decl.value == '1px 1px', but decl._value.raw == '1px /**/ 1px') _value will contain has with two values.\n. Raw values is avaiable, it is just combined with trimmed :D.\nNow raw property is like a private method with bad API, but I can add some good API to get raw value. Why do you need raw value?\n. In PostCSS 0.3 I add Comment node specially for this case :).\nBut I plan to write postcss-control-comment library to works with this processing instructions in comments. Can you show me example of your processing instructions, because I think what API should postcss-control-comment supports.\n. Hm. I think about structure instruction like:\ncss\n/* autoprefixer: off */\na {\n  /* autoprefixer: on */\n}\n. What about this API:\njs\ndecl.raw('value')\n. Node can contain several raw values ;).\nYeap, before logic was changed. But it was very necessary changes to allow code style copy to new nodes and to support Comment nodes.\nIn this example every comment will be Comment node. But if comment is inside value or selector, it will be in raw.\n. What CSS do you process?\n. ``` js\n\npostcss.parse(css)\n{ type: 'root',\n  rules: \n   [ { type: 'comment',\n       parent: [Circular],\n       source: [Object],\n       before: '',\n       text: '****\\n  Sample Content\\n****',\n       left: '',\n       right: '' },\n     { type: 'comment',\n       parent: [Circular],\n       source: [Object],\n       before: '\\n\\n',\n       text: 'comment before first rule',\n       left: '',\n       right: '' },\n     { type: 'rule',\n       decls: [Object],\n       parent: [Circular],\n       source: [Object],\n       before: '\\n',\n       _selector: 'html',\n       between: ' ',\n       semicolon: true,\n       after: '\\n' } ],\n  after: '\\n' }\npostcss.parse(css).rules.length\n3\npostcss.parse(css).rules[0].type\n'comment'\n``\n. I open it as notice to addrawAPI.\n. Maybedecl.rawValue?\n. If we store comment inbefore, then ondecl.clone()` we copy this comment. In most of cases it will be unexpected behavior.\n\nIn PostCSS 0.3, when we add new decl or rule node without before, PostCSS will find first same type node and copy before and other code style props from it. If we store comemnt in before it will be copy to new node.\nIf we store comment in before it will be very difficult to find source map annotation comment or processing instructions comment, because before can contain several comments and we will need to parse it.\n. We will need rule.beforeComments, rule.afterComments, decl.beforeComments. Traveling code will be much diffiult.\nWhy you need comments in decl node? You can get previous comment very easy:\njs\nroot.eachDecl(function (decl, i) {\n  var prev = decl.parent.decls[i - 1];\n});\n. But comments can be before declarations, so we need decl.beforeComments and between last declatation and rules\u2019s } can be comments too, so we need rule.afterComments ;).\n. But what will be if rule will not have any declaration inside, only comments? ;)\n. What is difference between character indexes and source.start.column?\n. For what case do you need value start position. It will require a lot of calcutaion during parsing and if you didn\u2019t always need it, it will slow down pasring for all users.\n. PostCSS knows letter index. But for what case you need it? :)\n. Thanks. Great job with source-map pull request.\n. Everything is OK on my computer. You can test in Autoprefixer demo, which uses latest PostCSS.\n. Do you have some open source, where I can repeat this issue?\n. What is \ufffd symbol? :)\n. in first line of your code. Seems like you have some encoding problems. Maybe it is mark from UTF-16?\n. OK. I understand problem. I add this special symbols as spaces to parser.\n. BTW, why you use byte-order mark in UTF-8?\n. Done d904f51bd99a22822fd5e2dec374070ce11f46a6\nCan you test it before 0.3.4 release?\n. Release fix in 0.3.4.\n. Rule#selectors is some kind of hack. Try to work with Rule#selector.\n. Yeap, you are totally right. Can you send Pull Request to save your name in project history? :)\n. Thanks :)\n. OK, try to look today.\n. @puzrin @ixti if previous map was inlined to CSS, PostCSS will inline it too. As I remember LESS inline maps to CSS, so Autoprefixer and CSSWriting continue to do it.\nYou can disable this behavior by inlineMap: false option. But how you will serve map file if user will disable Autoprefixer and CSSWriting, so after LESS output CSS will have inline map? Maybe the best solution is to uncompress inline map from LESS output and add it to context.sourceMap?\n. You can use convert-source-map to extract inlined map from LESS and other compiling steps.\n. But I had some problem with your example (thanks for nice guide, how to reproduce inline map issue). When I run example server and look to http://localhost:3000/assets/app-82cdaec65e33ad53e16de9726d69c27f.css I didn\u2019t find any inlined source map.\nEverything was fine and maps works well in Chrome Dev Tools.\n. What issues with paths do you have?\n. What inlined info do you mean?\n. Yeap, you mean inline source map in source from previous step? I didn\u2019t know, who generates it. Autoprefixer doesn\u2019t change origin source, so I think that maybe it from LESS compilation step?\n. You did big work. Sprockets doesn\u2019t have source map support, but you have :).\n. Hm. There is very interesting question. How Chrome show this origin content? As I remember source map doesn\u2019t contain origin content, only lines comparation. We can add sourceContent option, but PostCSS doesn\u2019t add it now.\nMaybe problem is in how Chrome shows origin content. Does Firefox Dev Tools show same anootation at the end of file?\n. @ixti no problem, but I didn\u2019t understand how to fix this bug and what it is :).\n. @puzrin yeap, but Autoprefixer and CSSWrite should not generates sourceContent.\nI know only one place, maybe sourceContent is copy from previous step, when PostCSS apply previous map: https://github.com/ai/postcss/blob/master/lib/map-generator.coffee#L97\n. Hm. Does // is a valid comment in CSS?\nMaybe Chrome adds this postfix because of some internal rules?\n. I think that the main problem of source map, that nobody really understand it :D. There is no common usage examples. It was theoretical spec and now, when we relealize it we found some unexpected things :).\nFor example, when we add map support for PostCSS we find a lot of very strange cases with sources path: https://github.com/ai/postcss/issues/13 As result @lydell fix source-map. Also we find some issue on Windows.\nSo, maybe as first step, we try to implement basic source map features. This garbage comment doesn\u2019t affect on development process, so we can fix it on next release.\n. Hm. What parsing error this CSS generates?\nWhen I progem PostCSS I think to parse this kind of CSS extenstions.\n. Hm, I found problem.\nHow we can know, where is at-rule with props and where is at-rule with rules. So we need some kind of detector in parser.\n. Today I can suggest you quick hack. You need to override atruleType method in parser: https://github.com/ai/postcss/blob/master/lib/parse.coffee#L352\n. I will write this detector, but not in March :(.\n. Close, because will be better to allow mix decls and rules inside Container #75\n. Hm, bug. I will try to debug.\n. Hm. Strange. I try to parse this file and I get normal code:\ncoffee\ncoffee> postcss.parse(fs.readFileSync('test.css'))\n{ type: 'root',\n  rules: \n   [ { type: 'atrule',\n       parent: [Circular],\n       source: [Object],\n       before: '',\n       name: 'import',\n       _params: 'url(http://fonts.googleapis.com/css?family=Oswald)',\n       afterName: ' ',\n       between: '',\n       semicolon: true },\n     { type: 'rule',\n       decls: [Object],\n       parent: [Circular],\n       source: [Object],\n       before: '\\n\\n',\n       _selector: 'html, body',\n       between: ' ',\n       semicolon: true,\n       after: '\\n' } ],\n  after: '\\n' }\n. WHat version of PostCSS you use? :)\n. If you return false from each it will break iteration.\nI add note about it to README.md a0d18aea23c0d0f1f9bbbdcf3af1a59e144c072d\n. Hm, I think too. I use Mozilla\u2019s source-map so the best way is to fix applySourceMap there.\n. OK, I try look closer tomorrow (now I am at airport). Please remind me if I will forget.\n. Oops, I miss notice letter.\n. But I again have no time today (I am now in travel), try to look at current week.\nAm i right, that this issue is only about some unnecessary file in sources and issue is not critical?\n. Strange, source-map code looks like that it will not add source without mappings. Anyway, I think that if we had issue, it is in source-map :D\n. Hm. Maybe we should add Node.after = \"\" hack, that will find next node and insert spaces to its before?\n. coffee\nrules[1].before #=> \"\\n  \"\nrules[0].after = \"\\n\\n\"\nrules[1].before #=> \"\\n\\n\\n  \"\n. Node#after without hack will be very inconsistence. Now we has only one place to find spaces.\nWe can add optional after node, but I afraid that other processor developers (like minimizers) will  forget about this rare property.\n. Thanks for useful grunt task :).\n. I still think about API. after is reserved for Rule#after :(.\n. Maybe now you add some helper to your code? :)\n. What error throws PostCSS?\njs\ncss = postcss.parse('@custom-media --narrow-window (max-width: 30em);');\ncss.rules[0].name   //=> 'custom-media'\ncss.rules[0].params //=> '--narrow-window (max-width: 30em)'\n. Yeap, .params is a magic setter/getter :)\n. @necolas I write about parse() in docs, but only in special section. I add quick tour with main API: fbd3a2e3ed43d5084e8b720fbdc6cc763406f0e8\n. Hm. It is difficult question. If BOM is valid in JSON, you should create issue in JSON ;). If BOM is invaliad you should create issue in you prev map builder tool.\nHow you generates map with BOM?\n. @tysonmatanich why your map contains BOM? What tool you use before Autoprefixer, which add BOM to map?\n. Good time to buy Mac :D\n. @tysonmatanich without humor I recommend to create issue in Visual Studio Web Essentials. Of cource, we can fix it in PostCSS. But Web Essentials will still generate wrong maps and we will fix and fix all processors one by one.\nPostCSS fix will not fix the issue because other processors will fall too on this wrong map.\n. PostCSS parses @media(max-width:479px){.chat-input{display:none}} iwthout problem.\nCan you save minified CSS somewhere? I try to find problem place by bisect.\n. Yeap, I think about this too. I totally agree, that process() should be possible to receive PostCSS AST, instead of string.\nCan you send PR? I will not have time on this weekend and this task seems to be easy.\n. I add Root and Result support in process cba5d85491b27f6f290b09c8c78a94c4c0e8e8b2\n@iamvdo I can\u2019t reproduce removeSelf issue yet:\ncoffee\na = postcss (css) ->\n  css.eachRule (i) ->\n    i.parent.prepend(i.clone())\nb = postcss (css) ->\n  css.eachRule (i) ->\n    i.removeSelf() if i.selector == 'a'\nb.process(a.process('a {} b {}')).css #=> ' b {} b {}'\n. @iamvdo can you show me you code with concatination?\n. @iamvdo I release 0.3.5 with Result and Root in process arguments to easier debug removeSelf() issue.\n. Maybe past.parent is broken? Can you check if past.parent == css?\n. @iamvdo maybe there is some issue with queries[query]?\n. It maybe part of clone issue? How I can quickly reproduce this issue?\n. @iamvdo hm, you should clone nodes before insert in second place.\n. root.rules.concat(css.rules) will not update .parent property and can create some issues. Best way is:\njs\nroot.append( css.rules )\n. Yeap, I think about it too. You options changes is great and I agree with it. We can use it in 0.4 version and remove deprecated syntax in 0.5.\nAlso I think we should show deprecated warning on old options usage.\n. I think map.previous should be true by default. Because a lot of users don\u2019t understand source map, but they will be happy if magic will works.\nSo default value of map whould be { }. To generates map only if previous map was detected.\n. Is map.setSourceContents too long? Maybe map.sourceContent?\n. BTW, if we plan to change map API. Maybe we should add Result#mapObject? Sometimes we want to change genereated map, but it is not cool, that we need to parse string and recreate object.\n. BTW. I have also 2 features for 0.4 release:\n- better source map support if we have several input CSS;\n- set sourceContent in map\n. > Could you expand a bit on this? I don\u2019t really follow here ...\nNow Result object contains only stringified map in map property. It is difficult to change this generated map, because you need to parse JSON and next to create SourceMapGenerator instance. Maybe we should provide SourceMapGenerator of our map in Result?\n\nDo you mean that you have started working on them, or just plan them?\n\nOnly planed :).\n. About several inputs.\nIt is very important, because we need to support CSS concatination and some other magic stuff.\nRight now users can get several inputs:\n``` coffee\nroot1 = postcss.parse(css1, from: 'a.css')\nroot2 = postcss.parse(css2, from: 'b.css')\nroot1.rules = root1.rules.concat( root2.rules )\nresult = root1.toResult(to: 'app.css', map: true)\n```\nBut it will disable source map autodetection, becase there was only one from option in toResult call. We need to write origin file to each CSS nodes.\n. I agree, that we should return SourceMapGenerator in Result#map. Old API will still work, because fs.writeFile(result.map) will call toString() on result.map.\n. I started a multiinputs branch.\nOK, or you already start it?\n. Done. I finished maps support with multiple inputs and pushed new source map code to v1.0 branch.\nMaybe tomorrow I try to add object in Result#map and setSourceContent features.\n. @lydell don\u2019t worry, I finish your options project :)\n. @lydell why we need annotation: 'preserve'. Other options use preserve logic when you just miss value (like if you miss sourceContent PostCSS will look into previous maps).\n. > Deprecate trying to autodetect previous map by looking for options.from + '.map'.\nWhy you want this? For example, a some Grunt plugins generates maps file and PostCSS\u2019s Grunt plugin developer don\u2019t want to understand source maps and set correct options.\n. BTW, today I also finish sourceContent feature.\n. Hm. About autodetect maybe you are right. There is no tool, that miss annotation,\n. @lydell maybe we should generate sourcesContent by default?\n. I refactored current options: 3b7d731a8dbda8ef0444d8563ff106275e295634\nI will add new options on this week and we can close issue.\n. Autodetection without annotation comment in CSS was disabled 9a6c042b6131308b17e65f9028a196082af1fd84\n. I decide to not implement sourceRoot option right now. It require to change all relative paths in map generator and I didn\u2019t know user cases, which require special sourceRoot. Anyway we can add it later,\n. @lydell and SourceMapGenerator will convert all our relative paths to new root?\n. @lydell I already added annotation: 'another/path.map'\n. @lydell yeap, you right, I forget about MapGenerator#relative :(. I will fix it tomorrow.\n. @lydell I fix relative paths 245daa7ab0c8bb88d5456ef0320bba5735fee0c8\n. @lydell you as usual make great analyis :).\nYou are totally right about prev map docs. Fixed: 70b26d624389a8726fead318db135dc8a304818e\nNow we have same logic as you suggest:\n1. If user set map.annotation \u2192 path.dirname(map)\n2. If user set to \u2192 path.dirname(to)\n3. If user set no options (but we require from and to option in docs for source map) \u2192 \".\"\n. @lydell maybe I am wrong and you are speaking not about MapGenerator#relative? https://github.com/ai/postcss/blob/v1.0/lib/map-generator.coffee#L110\n. So problem is only we didn\u2019t use map.annotation in .applySourceMap? OK, can you make PR please, because this relative paths blow up my minds :). I think I can make mistakes :).\n. @lydell test/map.coffee has @dir directory for fixtures. It cleans after every test.\n. Just fs.writeFileSync()\n. But, maybe you didn\u2019t need to write anything. Just set map.prev.\n. @lydell better use fs.outputFileSync() from fs-extra.\nBut, you don\u2019t need to test map.prev finder. It already tested in test/previous-map.coffee. And sources path fixer depends only on map options, not on way, how you set prev map. So you can test sources fixes with map.prev.\n. OK, you are right. You can look at test/previous-map.coffee, how fixtures created there.\n. You can at right time :).\nPostCSS 0.3 can process multiple inputs, but can\u2019t works with they previous source maps.\nBut yesterday I finish most of 1.0 features and next 1.0 release supports previous source maps in multiple inputs:\n``` js\nvar file1 = postcss.parse(css1, { from: '1.css', map: { prev: map1 } });\nvar file2 = postcss.parse(css2, { from: '2.css', map: { prev: map2 } });\nfile1.append( file2 );\nvar result = file1.toResult({ to: 'app.css', map: true })\n```\nCheckout v1.0 branch of this repo.\n. I think to select some part A variant :). I add coffee-script dependencies and add index.js loader, but remove dependencies by cake build script :).\n. Adn when prepublish issue will be solved, we moves to prepublish.\n. Done 31ca61238b1989eddb069729fee0a819a92d7083\n. Also I add index.js to Autoprefixer v2.0 branch\n. Nice idea. But I think we can do getter. What if process(css, opts) will return some LazyResult. If you use css/map getter, it will stringify CSS. If you send it directly to other processor, it will not stringify.\n``` coffee\nfixed1 = processors.process(css1).root\nfixed2 = processors.process(css2).root\nfixed1.append(fixed2)\nfinish = fixed1.toResult()\n``\n. @dantman thanks for note. But I think IE9+ is fine. AnywayObject.definePropertyalready uses across all PostCSS ^_^.\n. Do you want to makeResultclass lazy? :) Or I can do it after few days.\n. No problem, I will add lzeResulttomorrow (anyway I have flight and airplane without WiFi is a best place to code :) ).\n. Done c0b8aa82fa89d4358090a6a92348fe45142dd79f\n. :D. Yeap, this is current logic. But why you write--width    :50px;`?\nMaybe:\ncss\n:root {\n    --width:          50px;\n    --the-long-width: 50px;\n}\n. But anyway I try to find some solution in Autoprefixer and PostCSS for this situation.\n. Fixed in Autoprefixer 6e1785655e08948cbd5febafeca2743683452982\n. It already change json.main https://github.com/ai/postcss/blob/master/gulpfile.js#L31\n. But something goes wrong, you right.\n. @thorn0 my fault :(. How I can fix it?\n. @iamvdo fixed 4e79b8ead475f222f6acd373afc56a62bd3e6476\n. @thorn0 correct? 289051d3a7bf5e6cd5d940a31f94d9bb2aa16d9e\n. Yeap, I found this issue in AutoprefixerRails. I think it is a Browserify issue, because it try to detect global object by:\njs\n}).call(this,_dereq_(\"+xKvab\"),typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\nI just replace to:\njs\n}).call(this,_dereq_(\"+xKvab\"),typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : {})\n. Maybe we should create issue in browserify repo? I create it today after 20 minutes.\n. @iamvdo I create issue: https://github.com/substack/node-browserify/issues/834\n. @iamvdo BTW, I plan to move to es6-transpiler. Most of work is finished. Maybe release PostCSS 2.1.0 on this week.\n. Second 2.1.0 feature will be: #59\n. Like error.highlighted property with broken line and ^ on next line?\n. Prev and next line?\n. @lydell I think it should be part of PostCSS, because good error formating is important for most of PostCSS users.\n. @lydell @jonathanong what do you think about this API:\njs\ntry {\n    postcss(string)\n} catch (err) {\n    console.error(err.messageWithCSS())\n}\n. @lydell because this module will be PostCSS specific. Easier way is a just add method to CssSyntaxError class.\n. Done dd5b227cda9f561d842f72f680905efd7c2b35f2\nI add CssSyntaxError#highlight() method, which returns broken example. It autodetect color support and use color if it is possible and user don\u2019t disable it in Node.\nAlso CssSyntaxError#toString() now returns this.message + \"\\n\" + this.highlight().\n. Will be released soon, in 2.1 version.\n. Yeap. I fix this issue, when I migrate from Traceur.\nIt was a ES6 migration issue, that wasn\u2019t found by tests :(.\n. Fix is pushed 1e2c522d6eb06959848283aec129a4d784dc734e\n. Traceur and CoffeeScript use same method.\nI agree, that it is not good to use hacks, but PostCSS use require.extensions only in master. If you install PostCSS via npm, it will not modify your require. \n. But thanks for note. I didn\u2019t know that this method was depricated.\n. You need to pass opts also to postcss.parse(css, opts). Because from is needed in parse (for example, to use it in syntax error messages.\njs\nresult = postcss.\n         parse(css, { from: 'style.css' }).\n         toResult({ to: 'style.min.css' });\n. How I cn fix documentation to clean this moment?\n. @7studio I fix docs 3f0b3103e06a5d38b524603b6742b5f1b787b09f. Thanks for notice.\n. Yeap, now PostCSS made few RegExp match on every node parsing to split spaces correctly. I think with tokenaize step before I can reduce RegExp and allow to autodetect at-rule content #41\n. PostCSS will not be faster that Rework, but tokenizer get some speed boost.\nCurrent:\nPostCSS:     775 ms\nCSSOM:       163 ms (4.8 times faster)\nRework:      314 ms (2.5 times faster)\nGonzales:    776 ms (1.0 times slower)\nGonzales PE: 761 ms (1.0 times faster)\nMy private tokenizer branch:\nPostCSS:     480 ms\nCSSOM:       224 ms (2.1 times faster)\nRework:      379 ms (1.3 times faster)\nGonzales:    735 ms (1.5 times slower)\nGonzales PE: 698 ms (1.5 times slower)\n. Good news, everyone!\n@Termina1 made really amazing work and speed up new tokenizer branch. PostCSS 3.0 will be fatser, that Rework.\nCurrent PostCSS 2.x:\nPostCSS:     426 ms\nCSSOM:       107 ms (4.0 times faster)\nRework:      194 ms (2.2 times faster)\nGonzales:    468 ms (1.1 times slower)\nGonzales PE: 470 ms (1.1 times slower)\nNew tokenizer branch with @Termina1 fixes:\nPostCSS:     139 ms\nCSSOM:       99 ms  (1.4 times faster)\nRework:      181 ms (1.3 times slower)\nGonzales:    416 ms (3.0 times slower)\nGonzales PE: 406 ms (2.9 times slower)\n. Unfortunately, es6-transpiler has side effects and as I found out it slow down some JS code (mostly CSSOM and Rework). Currect tokenizer branch uses 6to5 and has more honest benchmark:\nCSSOM:       27 ms  (2.3 times faster)\nPostCSS:     62 ms  \nRework:      63 ms  (1.0 times slower)\nGonzales PE: 163 ms (2.6 times slower)\nGonzales:    170 ms (2.7 times slower)\nStylecow:    219 ms (3.5 times slower)\nAlso I start to use Bootstrap CSS, because it has whitespaces and comments indead of GitHub CSS. And now benchmark contains Stylecow.\n. BTW, I suggested to @brainopia and @Termina1 2 boutles of Ruby porto award if they will increase PostCSS perfomance for 2 times (to 30-40 ms for parsing Bootstrap). Maybe somebody want to join this competition? ;)\n. I disable node.source generation if user doesn\u2019t want to add source maps and it increase perfomance up to 30%:\nCSSOM:       27 ms  (1.8 times faster)\nMensch:      47 ms  (1.1 times faster)\nPostCSS:     49 ms  \nRework:      64 ms  (1.3 times slower)\nGonzales PE: 171 ms (3.5 times slower)\nGonzales:    179 ms (3.6 times slower)\nStylecow:    206 ms (4.2 times slower)\n. You will not belive, but @brainopia won perfomance contest! The new tokenizer is incredibly fast!\nPostCSS 3 become the fastest CSS parser, written on JS! We are about 20 % faster, that even CSSOM and about 3 times faster, that Rework (don\u2019t forget, that we still parse and store whitespaces).\nPostCSS 3:   23 ms\nCSSOM:       28 ms  (1.2 times slower)\nMensch:      47 ms  (2.0 times slower)\nRework:      62 ms  (2.7 times slower)\nStylecow:    122 ms (5.3 times slower)\nPostCSS 2:   141 ms (6.1 times slower)\nGonzales PE: 162 ms (7.0 times slower)\nGonzales:    175 ms (7.5 times slower)\n. @kizu yeap, Gonzales parses more :).\n. PostCSS 3.0 with new parser was released today. Please, test :).\n. I add benchmark with preprocessors parsers: dce2f3e\nPostCSS is few times faster even that libsass:\nPostCSS:   19 ms\nlibsass:   106 ms  (5.5 times slower)\nLess:      150 ms  (7.7 times slower)\nStylus:    278 ms  (14.3 times slower)\nRuby Sass: 1078 ms (55.5 times slower)\n. @MoOx there is no cssnext features in Sass ;). Maybe when I add Sass style variables and @mixin we can compare with some logic inside.\n. @MoOx I agree, but cssnext vs Sass doesn\u2019t make sense too ;). Correct benchmark should use same features.\n. @MoOx hm. But maybe you are right. Even if test CSS will not contains cssnext features, cssnext AST lookups will make benchmark little better.\n. Yeap, I updated benchmark: 7b0e467\nPostCSS:   36 ms\nlibsass:   110 ms  (3.0 times slower)\nLess:      157 ms  (4.3 times slower)\nStylus:    286 ms  (7.9 times slower)\nRuby Sass: 1092 ms (30.1 times slower)\n. @MoOx maybe yu know some service, that can run benchmarks on every commit and output graph of perfomance?\n. and where we will store results and print graph?\n. @MoOx I want this graph for PostCSS developers to prevent perfomance regression :)\n. I want to move postcss to new org, but how we can do it best? Does GitHub create redirects for old users?\n. OK. I will move project tomorrow or after tomorrow (today I will annonce PostCSS 2.1 and Autoprefixer 2.2 releases).\n. BTW, @iAdramelk in middle of creating postcss-import plugin. Maybe we should also put it to org?\n. @MoOx Maybe we should move Autoprefixer to postcss repo too?\n. But what is a difference between small plugin and tool? What will be a goal for plugins in postcss org?\n. @MoOx OK. I think to move Autoprefixer to PostCSS org (but, of cource, it is not a rule of other tools):\n1. It will promote PostCSS.\n2. Autoprefixer is supported by same authores.\n3. Autoprefixer always use latest PostCSS like reference implementation.\n. autopreifxer will be too small, because all logic will be in postcss-autoprefixer.\n. But what be the point of postcss-autoprefixer?\n. You can use autoprefixer now:\njs\npostcss()\n  .use( autoprefixer(browsers).postcss )\n. Hm. You are right, I forget about binary. But maybe autoprefixer-cli will be better? A lot of non-PostCSS npm modules depends on autoprefixer, but didn\u2019t use binary.\n. Maybe for better compatibility we should use autoprefixer and autoprefixer-core (without binary)?\n. autoprefixer-core will be like current autoprefixer, but without binary and its dependencies.\nOr autoprefixer-core will be like postcss-autoprefixer, but also with process() method :).\n. I still didn\u2019t see any benefits of postcss-autoprefixer. autoprefixer-core will be enough.\n. OK, I will create autoprefixer-core after few weeks (when I finish my vacation with my brother): https://github.com/ai/autoprefixer/issues/294\n. I agree, that it is more logically to put standalone build in autoprefixer, but its isn\u2019t necessary in autoprefixer, but autoprefixer-rails must to have standalone build.\nSo, I can have two files in autoprefixer and autoprefixer-rails. But I didn\u2019t like to put build files in repository (it is easy to forget udpdate it on next commit).\n. Done. autoprefixer is in postcss org now.\n. Relly magic. Maybe it is a bug. I will investigate tomorrow.\n. Yeap, prepend() has different logic, because of same rare cases.\nBut I fix append() and now it detect rule splitter much better: 4bfe5c8\n. But in h1 { color: blue; }\" example PostCSS can\u2019t detect, do you want to have \\n separator or not.\nBut in h1 { color: blue; }\"\\n PostCSS will insert \\n between new lines.\n. In next PostCSS release:\n``` js\nvar a = postcss.parse('a {}\\n');\nvar b = postcss.parse('b {}\\n');\na.append(b);\na.toString(); //=> \"a {}\\nb {}\\n\"\n```\n. But:\n``` js\nvar a = postcss.parse('a {}');\nvar b = postcss.parse('b {}');\na.append(b);\na.toString(); //=> \"a {}b {}\"\n```\nBecause PostCSS can\u2019t understand, what output style (readable or compressed) you want.\n. You can test next PostCSS release by putting \"postcss\": \"ai/postcss\" in your package.json.\n. @MoOx @7studio yeap \"postcss\": \"postcss/postcss\" :D.\n. @7studio When you append some style, it will use new code styles from new parent. So, when you append b rules to a root, b\u2019s rules will change it code styles to a\u2019s style.\nSo, when you append b to newCSS, b\u2019s rules change spaces to newCSS. And newCSS have no spaces, so PostCSS think, that you need compressed output.\nYou can fix it by:\njs\nnewCSS.after = \"\\n\";\n. @MoOx I can change default code styles to have \\n between rules.\n. @MoOx I create #70 issue, but I plan to fix it on after 2.1.1 release.\n. Released in 2.1.1\n. If it is not end-user plugins, maybe we should move it under the \u201cBuild with PostCSS\u201d section?\n. Everythng else is fine, you can move them down in master :).\n. @MoOx yeap, I understand you. I made 2 sections inside \u201cBuild with PostCSS\u201d ff7d6c93de30f15bd2a02c93098644d945351ee3\n. Also we need more consistency to clean style data. Now clone() cleans before, but no other style properties.\n. Also @kizu ask that we need to fix spaces in seconds rule, when we remove first.\n. Done 0acf7dc\n. Also fix @kizu request 46ff003\njs\nvar css = parse('a{}\\nb{}\\n');\ncss.first.removeSelf();\ncss.toString().should.eql('b{}\\n');\n. Fix released today in PostCSS 3.0.\n. This file shortcuts will read/write file and set in and out options.\n. /cc @MoOx @jonathanong @lydell \n. @jonathanong I agree with you, but:\n1. Some tools doesn\u2019t need to write/read files. For example, binary.\n2. Some people send me a JS code with Autoprefixer and fs code: https://github.com/ai/autoprefixer/issues/291\n3. This methods will be very useful to debug :).\n. If we need file shorcuts mostly for testing, I think it should be synchronized. \n. OK, you are right :)\n. @bassjobsen you now can set source map object to map: { prev: mapObj }. Also there is map: { sourcesContent: false } to remove sourcesContent from PostCSS result map.\n. Yeap. Useful shortcut.\nI am now on vacation with my brother and didn\u2019t want to make big 2.2 release. Is it possible to wait few days?\n. @jonathanong should we use replace() or replaceWith()?\n@MoOx replacer() sounds like you should pass some \u201creplacer\u201d function as argument :).\n. @MoOx parent.normalize from parent.insertBefore already fix newStyle.before.\n. Done f52e764e8a06b86ad9a95c7ea87da3228488e18b\n. @MoOx @jonathanong maybe we can miss Can't parse CSS? But if some program use Autoprefixer, this intro will explain source of exception.\nBut we have CSS file name, which can hint, that exception is in CSS parsing.\n. @hail2u but most of PostCSS users are console tools: grunt, gulp, etc. So, maybe try \u2026 catch should be used in GUI tools (like Autoprefixer for Rails).\n. Also, Rework and CoffeeScript compiler use same error message format\n. Yeap, I think messages should be for human. But GNU style, as I think, allow you to click on path and text editor will open it.\n. Added CssSyntaxError#reason dfb6bede98e945eef383a370e0fb7115e2927ef9\n. @MoOx I think to replace <input> to <input CSS>. PostCSS can be used in some big tool (like in Autoprefixer Rails) and if backend developer will see issue, he must to understand. that it is CSS parsing issue.\n. @MoOx We will add this methods if it will necessary in 2 or more plugins :).\n. Done d92d0a3fe6674bdbe8f1be45d5db27f24fd9ec28\nSorry @hail2u, GNU format is less readable, but most of Twitter users will also agree with it.\n. Hm. Can we pass this as second argument here? https://github.com/postcss/postcss/blob/master/lib/postcss.js#L34\nOr we can extend API by some special object like:\njs\nuse(processor) {\n    if ( typeof(processor) == 'object' && typeof(processor.install) == 'function' ) {\n        processor.install(this);\n    } else {\n        this.processors.push(processor);\n    }\n    return this;\n}\n. There is a difference between Rework and PostCSS API. In PostCSS you create processor, which can be used wth severals CSS.\nAny other ideas, how we can pass this to add several processors?\n. BTW, maybe we should add processor.rework to processors if processor has this property. It will allow to:\njs\nvar processor = postcss().\n    .use( autoprefixer('ie 10', 'ff 5') )\n    .use( \u2026 )\n. @MoOx yeap, I agree that we need API to set list of processors.\nYour processor instanceof PostCSS suggestion is great. Do you want to make PR? Make it to tokenizer branch please, we will release it with 3.0 version.\n. Nested at-rules are supported (any at-rule or root can contains rules or at-rules). Problem is only with mix decls and at-rules.\n. BTW, if we add decls and rules, we can indent rules like in preproceesors:\nscss\na {\n  b {\n  }\n}\n. @MoOx nope, it will be like SCSS:\n1. CSS Nesting has ugly syntax ;).\n2. PostCSS will parse nestings blocks only because some of at-rule can contains rule and decls.\n. @MoOx I will add support then spec become more official. But I think (as for CSS variables) it should be in CSS processors, not in browsers.\n. @MoOx BTW, I working now at new CSS parser with tokenizer. It faster and very simplier to add new features ;). https://github.com/postcss/postcss/tree/tokenizer\nIt is done, I just need to fix all issues :).\n. Done bd05f24 Will be in 3.0 release in October.\n. Hm, interesting challenge :). I can suggest best API changes right now, but let\u2019s stay this issue and will think little bit later.\n. Maybe Node#source should be a optional array of [positionInSelector, source]\n. \u201cWan\u2019t fix\u201d right now (nobody ask since Aug), but I am is open for PR ^_^.\n. @w0rm Nice! BTW, we need from option to generate better syntax error messages.\n. @w0rm Yeap, it will be best solution (best option is no options :D )\n. @w0rm also you can send to param to root.toResult in gulp.dest? It will generate better source map in some rare cases.\n. @w0rm OK, no problem. When you finish plugin, please send PR to PostCSS REDAME.md with separated How To section with Gulp subsection.\n. OK, we finish plugin for gulp. What about Grunt? /cc @nDmitry \n. @MoOx  BTW, there is no decl.after :).\n. Here is explanation of Raw properties: https://github.com/postcss/postcss#raw-properties\n. There is no code bug here, only with docs :). PostCSS remembers origin \"red \" and clean \"red\" (from trimmed spaces and comments) value. If you didn\u2019t change value, PostCSS will use origin value (to have byte-to-byte equal output if you didn\u2019t change node).\nSo, you need just remove origin value to use only clean value:\njs\ndelete decl._value;\ndelete rule._selector;\ndelete atRule._params;\n. @MoOx BTW, rule.after is a spaces between last child and } (not after entire rule). I know, that is not so understandable, but I didn\u2019t find better name (also only few peoples use this properties) :).\n. Hm. Maybe we need some npm package, which will wrap PostCSS and have caching.\nIf we add cache into PostCSS core, we may lose too much memory.\n. @shawninder never see it (probably because PostCSS is anyway too fast and cache invalidation could be a big problem).\n. PostCSS now has vendor and list helpers. Maybe it is a good idea to move them to some official postcss-helper.\nBut now postcss-helper had too huge API about url :). Maybe it should call just postcss-url?\n. Autoprefixer caches values inside Node._autoprefixer\u2026 properties, but I think it is not a good way for API (node.js requires immutable). I think wrap is a good compromise:\nvar nodeUrls = require('postcss-helpers-url');\nvar urls = nodeUrls(decl);\n. Yeap, I think url parser will be in another package.\n. What exactly you do with this input example?\nProblem really exists, but I need see your code to understand what is kind of problem (you insert new rule with before or you build totally new rule without before).\n. Commit 4bfe5c8 fix another issue, but create this one.\nBTW, there is plan to refector rule before calculation #70. Now PostCSS doesn\u2019t use Node#style() to detect before for new rules. I have fix in git stash, but it has problem with before for first rule in Root. I thinking how to fix problem. But I plan fix at 2.3 release.\n. Done 0acf7dc\n. Fix released today in PostCSS 3.0.\n. Yeap, I agree.\n. I add it, when I totally wake up :)\n. Done 6c73021f4f5abc1cf60967c276727b739c0cd9e0\nI plan to release it in 2.2.1, because it is like fix for API :).\n. @MoOx everything is fine?\n. Yeap, I feel same. But I think it is very rare case, so you can normally works with decl._important.\n. Or, we can put in _important only spaces, because anyway it will ends with !important.\n. > No. CSS allows white spaces and comments between ! and important. decl._important should keep all of these for saving original CSS byte-to-byte.\nReally!? Parser didn\u2019t support it :D.\n. @hail2u can you show some link, that comments and spaces can be between ! and important?\n. @hail2u ohhh. Maybe we add this support in future version? ^_^ I think nobody use this feature.\n. Method clone() delete before and between, because insertBefore or other insert method will add new before and between.\nExample will show the idea:\n``` js\nvar compressed = postcss.parse('a{color:black}')\nvar normal = postcss.parse('a {\\n    background: white;\\n}');\nvar decl = compressed.first.first;\nnormal.first.append( decl.clone() );\n```\nOutput will be:\ncss\na {\n    background: white;\n    color: black;\n}\nBecause cloned rule will use new style from new normal CSS, instead of old compressed parent.\n. With between: undefined PostCSS will autodetect between from other declarations in CSS.\n. @iamvdo can you translate Pleeease issue from French :).\n. @iamvdo csswring just need to be ready, that between can be undefned (not only because .clone(), if user make Declaration node by hand it will be without before, between and other style properties).\n. Yeap, all style properties before, after, semicolon, between can be missed if user will create node by hand and will not set them.\nIf node has no before (all other style properties) strinigifier will try t find node with same type and take before from that other node. If there is no nodes (or all nodes has no before) stringifier will use default value (\"\u00a0\u00a0\u00a0\u00a0\" for before, \" \" for between).\n. Maybe I should documented this logic :). But I thinked, that nobody will use it :D.\n. Done a096266\n. Fixed: 862f9e47032f5a3d8c4f013328d466662fc498e9 and https://github.com/postcss/autoprefixer-core/commit/7687e3970c5fc906ab73ff22ae8c3214632d37ce\n. Released PostCSS 2.2.3 (I just open a GitHub before going to sleep after cool hangout :'( ).\n. Released Autoprefixer Core 3.0.1.\n. Yeap :(. Thanks for report, try to fix today.\n. Fixed 58925c2\n. Released in 2.2.4 version.\n. Yeap, it sounds very nice.\n. Close, because now PostCSS parses only important parts.\n. Thanks, I missed it.\n. Thanks, you done big work :)\n. Yeap, @nDmitry want to create it, but it is only plans right now.\n. @MoOx I can\u2019t find your issue in some CSS variable plugin when you ask about it. Can you post link?\n. Yeap, I agree, that css-whitespace can do more. But what we should do in Safe mode with this declarations? ;)\n. @necolas Safe mode will not split them, because it will try to find : in value, not \\n.\n. @necolas yeap. And it will use new tokenizer, so content: \"\\n one:two\" will not break it, because it will look for : token, not just symbol.\n. Hm. IE CSS had semicolon in value: filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n. Fixed (even with IE support) fded880\n. Fix released today in PostCSS 3.0.\n. Also maybe we need to move error print code to some separted module, because now parser and tokenizer use copy of this code.\n. Fixed e5222a8\n. @MoOx @iAdramelk @lydell what do you think about it?\nOf cource, on last stringify PostCSS will throw errors if CSS contains decls in root or rules inside rules.\n. @MoOx yeap, I know, that custom properties is more powerful. But in my cases I doesn\u2019t need this power, but current syntax is very ugly for me. So what problems you will have if we will have optional postcss-simple-vars?\nSafe mode is have no price if you will not enable it. So in default mode PostCSS will parse only valid CSS. But there is some cases, when non-strict parsing is useful. For example in live tools.\nI think we should give opportunites and then user will show, what they like more. Anyway this plugins will be totally optional.\nFor example, clear code is really important for Ruby developers (my company and my friends). So postcss-custom-props and ; is really painful for us. If we can get more clean instrument for them without any price, why we should not do this?\n. @MoOx agree, that \u201cSafe mode\u201d maybe is not good name :(.\nMaybe anyone can suggest better name? Extended CSS?\n. @iAdramelk I agree with you, that we should not change anything if user (or plugins) was not ask.\nBut there is only one exception: Safe Mode. If user enable it, he ask to fix CSS (for example, because it will corrupted by live input). PostCSS in default mode will throw syntax error on missed ;. It will add ; only in Safe Mode like it add } in Autoprefixer live tool.\n. @MoOx @iAdramelk I agree that preprocessor can do this task better. But with PostCSS I really need only 2 things from Sass:\n- No ;.\n- Nested rules.\nSo, I think that very small features to run Ruby Sass or to live with libsass bugs.\n. Hm, @iAdramelk mention inetersting idea. Should every PostCSS code works in browsers without transformation? For example, code for Autoprefixer will works in some future browsers. @import, RTLCSS, grunt-webpcss and data-separator also do not have special syntax.\nBut, what if I want to manually inline images (like I have few big images and should choose it manually). Should some future PostCSS plugin postcss-inline add own syntax:\ncss\na {\n    background: inline('logo.png');\n    width: image-width('logo.png');\n    height: image-height('logo.png');\n}\nOr it must to keep CSS syntax:\ncss\na {\n    background: url('logo.png') /* !inline */;\n    width: 100px;\n    height: 100px\n}\nIf it must keep pure CSS, how we can set image size?\n. @iAdramelk yeap, this is nice idea (to leave errors in CSS as user write it), but it was really more difficult. PostCSS AST can save info about all kind of errors, that Safe mode can parse. So now we can only fix or throw error :).\nBut I will remember you idea and maybe we will use it in next parser version.\n. @MoOx I really don\u2019t like indent base languages like css-whitespace. Sometimes we have too long selectors and I want to split them to several lines. So I prefer { and } brakets.\nI really don\u2019t know why browsers should support nested CSS ;). And with this ugly {{. After Chrome was disable CSS variables, maybe they decide to leave this feature to preprocessors?\nOK, I agree, that we extending CSS syntax is not a part of PostCSS. We need some special architecture like precss plugins, that you mention.\nWe have nested rules as part of parsings rules and decls inside at-rule. I didn\u2019t add some extra code to support them. And I think we should not add some extra linter tests (if PostCSS can parse it, we will use it).\n. @rvanes short answer: because PostCSS already can parse it because of another unrelevant cases.\nLong answer: you miss direction. I did not want to change PostCSS to parse Sass. No, here is reverse direction.\n1. To parse complicated at-rules, PostCSS can parse rules inside rules.\n2. We need to show syntax error messages on unclosed decl. According current Safe Mode paradigm we need to fix unclosed decls.\nSo wnyway because of unrelevant tasks PostCSS has parser, that parse something bigger, that CSS. And I ask, can we use this parser in some new ways? Or we should lock some ways because of some purity ideology?\n. @rvanes current PostCSS branch doesn\u2019t split rules to nested or not. It just parse rules and at-rules inside any rule container. If user write a { b { } }, PostCSS 3.0 will parse it and put b { } into a { \u2026 } childs. We can\u2019t move it to plugin, because it is a simplest way to parse CSS.\nOf course, PostCSS 3.0 will not expand nested rules. a { b { } } without modification will be stringified as a { b { } }. So I plan to create postcss-sass-nested to find rules in rules childs and expand them.\n. @necolas right now we have a lot of postprocessors with custom constructions. Like rework-clone, rework-count or rework-parent.\nA lot of awesome ideas will not be part of CSS because of perfomance issues (like CSS \u201cvariables\u201d in Chrome ;) ). So I think CSS processors must be more that polyfills.\n. @rvanes new parser already finished (BTW, now it faster that Rework =^_^=).\nBut I want to also add few features (they breaks low level API, so they should be in major release). I think PostCS 3.0 will be released at end of October (sorry, I have very busy October and will finish branch only after 22 of October).\n. I make simple example for nested syntax for PostCSS 3.0 https://github.com/postcss/postcss-nested\n. @MoOx we can use postcss-nesting for W3C spec :).\n. @MoOx also I didn\u2019t want to have sass in name, because it requires to support all and only Sass features.\n. @rvanes I add them later. Or you want to reopen this issue, until simple vars?\n. @MoOx you do not want simple vars or this name for nested? I didn\u2019t release postcss-nested yet, if you have some name ideas without sass, I can rename it.\n. postcss-sassy-nested contains Sass refernce too. postcss-old-nesting but there is no new nesting, becuase there is no official new draft, just a project of one man ;).\n. Sass-like variables was released: postcss-simple-vars.\n. Mixins plugin is ready too: https://github.com/postcss/postcss-mixins\n. OK, maybe we can use more understandable name instead of 14111793604571? Maybe <css input 1>,  <css input 2>, etc? Like in CSS syntax error message, when from option is missed.\n. You ask to take from option from prevMap.file? Because PostCSS add 14111793604571 because it doesn\u2019t know input CSS file name.\n. Yeap, there is two sources, because:\n1. PostCSS doesn\u2019t know input file name, because from option is missed. It generate new file name 14111797677941.\n2. Next PostCSS find prev source map from css-3.less.\n3. PostCSS apply prev map, but because current input name 14111797677941 doesn\u2019t equal to output name from prev map, maps will not megred and we see 2 sources.\nSo file names is very important to generates correct source map :).\n. Now PostCSS requires from and to options. But we can autodetect from option by prevMap.file.\n. I reopen it because I want to add from autodetect by source map\u2019s file.\n. Nope :). from will be taken from prevMap.file, to will be equal from.\n. PostCSS now has more readable file names, when it doesn\u2019t know name. <input css 1> instead of 136585050 d99a00347c90a09e9e87deef8403e42b2f665732\n. Fixed. PostCSS 3.0 branch now autodetect from from prevMap.file aaefa208d9edb479308a82b7fd94e5963966126d\n. Fix will be released in end of October.\n. opts.from from prevMap.file and opts.from ||= opts.to was released today in PostCSS 3.0.\n. Do not remove line, PostCSS doesn\u2019t autodetect from and to yet :).\nWhy you can\u2019t set from and to options manually? In 2.x version you must set from and to to generate correct source map.\n. @kizu I agree that we should autodetect files, but plugin authors should set manually. For example, user may disable source map. Or output file will not be equal to input. So the best way is to take this options from environment.\n. @lukeapage nope, I will do it :). You need to set from and to manually to work only with current PostCSS 2.x. Autodetect will be only in PostCSS 3.0 at the end of the October.\n. Done. PostCSS 3.0 branch now takes default to from from 42721d9221877050590eefa4f9f419203c2fa52b\n. Fix will be released in end of October.\n. Yeap. I try to fix it on this week.\n. Fixed in tokenizer branch: 2b98bcf\nWil be released in PostCSS 3.0.\n. Fix released today in PostCSS 3.0.\n. @MohammadYounes result.map willbe created by PostCSS only if need to create seperated map file. So, if PostCSS uses inline map, there will be no result.map only result.css. This was a PostCSS API since first releases (but maybe not well documented :) ).\n. This is bad:\njs\nrtlcss().process(result.css, {map:{prev:result.map.toJSON()})\nthis is good:\njs\nrtlcss().process(result)\nPostCSS accepts Result object and will autotically uses result.map if  it exists (or load inlined map  from result.css)\n. PostCSS 4.0 made inline: true be default, because inlined maps is more popular and easy to use. So on default options and CSS without previous source maps, PostCSS will use inlined map, instead of map in separated file.\nFirst way is bad because result.map may be undefined ;).\n. The best was is:\njs\npostcss([autoprefixer, rtlcss]).process(data, { map: true, from: 'sample.css', to: 'prefixes.css' });\nYou parse CSS twice. If you will use one process for 2 plugins it will be about 1.5 times faster.\n. Just put all PostCSS transformation closer to ech other:\n1. Sass\n2. Autoprefixer\n3. RTLCSS\n4. other PostCSS\n5. non-PostCSS transforms\n. But yes, result.map is optional.\n. Can you make small example to reproduce?\n. You need to call node.removeSelf().\n. If you ask how to create this kind of postprocessor:\n``` js\nvar postcss = require('postcss');\nvar blockCleaner = postcss(function (css) {\n    css.eachDecl(function (decl) {\n        // decl will iterate each property of your CSS\n        if ( decl.prop == 'float' && decl.value != 'none' ) {\n            // we found float\u2260none, lets find display: block in parent rule\n            decl.parent.each(function (neighbor) {\n                if ( neighbor.prop == 'display' && neighbor.value == 'block' ) {\n                    // when we found neighbor property with display: block, lets delete it\n                    neighbor.removeSelf();\n                }\n            });\n        }\n    });\n});\nvar fixedCSS = blockCleaner.process(css).css;\n``\n. @yisibl what we can do to make docs better? What was main docs problem now?\n. @yisibl yeapfloat.parent.each=decl.parent.each`\n. @yisibl to add declarations:\njs\nrule.append( postcss.decl({ prop: 'display', value: 'inline', before: '\\n  *' }) )\n. @yisibl I will think how to add some better How Tos to README.md\n. @yisibl I think we should start from README.md, but when we will have too many examples and topics, we should split them to articles and put to wiki. But mybe you are right and we should start from wiki :).\n. In October I will prepare to my course and develop PostCSS 3.0, so I will not have time to update docs (but it is really important). If you want to help, I can create wiki and make access for you.\n. @yisibl it is not good to place * inside prop. Because next processors will not able to understand that *zoom property is decl.prop == \"zoom\". For example, PostCSS\u2019s parser split * to before.\ndecl.before shows spaces before declarations. So we can clone before from decl and use it:\njs\n  css.eachDecl(function(decl, i) {\n    if (decl.prop === 'display' && decl.value === 'inline-block') {\n      var before = decl.before.\n      decl.parent.insertAfter(i, {\n        prop: 'zoom',\n        value: '1',\n        before: before + '*'\n      }).insertAfter(i, {\n        prop: 'display',\n        value: 'inline',\n        before: before + '*'\n      });\n    }\n  });\n. I do not like Emmet in text editor, because it helps only with writing, but not with reading and editing. Think about Autoprefixer: if you use it in Grunt, your CSS is clean from prefixes, you can easy read and edit CSS.\n. .insertAfter().insertAfter() is very nice :).\n. @yisibl finished features:\n- Smarter parser with separated tokenizer and lexer steps. As results parsing become about 2 times faster.\n- Allow to parse custom at-rules and at-rules with mix decls and rules inside.\n- Detect from options from previous source map.\nUnfinished:\n- Show syntax error messages with previous source map support.\n- Better autodetect before for manually inserted rule and at-rules.\n. @yisibl this is grammar not for Rework, but for Rework Mixins plugin.\nI agree, that PostCSS need some more extra shortcut API. Like:\njs\ncss.replaceProperty('display', function (node) {\n    if ( node.value == 'inline-block' ) {\n        \u2026\n    }\n});\n. What API we need also? replaceValue?\n. Let\u2019s collect better API ideas here: https://github.com/postcss/postcss/issues/123\n. Thanks :). But I will release it in PostCSS 3.0. OK?\n. @MohammadYounes Hm. OK, let\u2019s release hotfix now :).\n. Release in 2.2.5. @MohammadYounes do you have Twitter account?\n. @MohammadYounes I post annonce already with just your name :).\n. @MohammadYounes fixed :). This is why I am bad in hot fixes :).\n. Maybe you want to post this issue to Autoprefixer?\n. It is not looking like prefixes to be in Autoprefixer. It is just polyfill, please create separated postprocessor for this task ;).\n. @yisibl maybe postcss-calc\u2019s code can show you some ideas about math in CSS?\n. Done beaf6f0\n. Wait for synthetic test PR :) \n. Hm. Is it valid CSS? But anyway next PostCSS 3.0 will parse it because of more stable nature of tokenizer parser :).\n. Can you wait until end of October?\n. Nice, it will be fixed with 3.0 release.\n. I add test and fix tokenizer f20f3cf\n. Fix released today in PostCSS 3.0.\n. It is css-mqpacker issue, but I make next PostCSS 3.0 more bullet-proof 22536ee\n. Fix released today in PostCSS 3.0.\n. @yisibl just use some npm package to read image width and height :).\n. @yisibl preprocessors also can\u2019t read image width and height. They use Ruby or JS extensions (like in my rails-sass-images).\n. @yisibl you need some code like:\n``` js\nvar image = require('some-npm-image-reader');\nvar imager = postcss(function (css) {\n    css.eachDecl(function (decl) {\n        if ( decl.prop == 'background' || decl.prop == 'background-image' ) {\n            if ( decl.value.indexOf('image-set') != -1 ) {\n                  var path = extractPathFromValue(decl.value);\n                  var size = image.readFileSize(path);\n                  insertMediaQuery(css, path, size);\n            }\n        }\n    });\n});\n``\n. @yisibl BTW sublime-autoperfixer is _really_ bad chooise, because prefixes decrease readability. You should use Gulp or Grunt with Autoprefixer to keep your origin CSS sources clean from prefixes and add prefixes only on build step.\n. @lsycxyj usedecl.source.input.fileto get CSS file path. Then you can use it to convert relative path to absolute path.. Yeap, current docs mix method lists (like inContainers` section) with descriptions.\n. I try to prepare new docs (focused from AST, not from \u201cbook\u201d like topics) for PostCSS 3.0 release.\n. Does it good start? https://github.com/postcss/postcss/blob/master/API.md\n. API docs are finished https://github.com/postcss/postcss/blob/master/API.md\nI put them to file in repository because I love to develop code in airplanes and I think that it is good to have a API.md in plugin node_modules/postcss.\n/cc @MoOx @davidtheclark @lydell \n. @lydell it is only a half ow work. In this weekend I finish new README.md, because many potencial PostCSS use do not understand what it is :)\n. First version of new README.md is finished too. https://github.com/postcss/postcss/blob/master/README.md\n. Merged by hands in 52fdabfb7d4c923c4d96479f3580696c32c16531 and 0f7d1a45d312f4278a27ed8fc24d6614791ca63c\n. Hm. Maybe we can compare it with Autoprefixer? Do you know some LESS tool to add prefixes? I can extend Autoprefixer\u2019s benchmark.\n. But I think it is not important, because you can\u2019t do PostCSS\u2019s stuff in LESS. You can\u2019t do Autoprefixer or RTLCSS on LESS with some flexibility.\n. Hm. I found benchmark: http://www.solitr.com/blog/2014/01/css-preprocessor-benchmark/\nSo PostCSS is about 2 or 3 times faster, that LESS.\nThis benchmark contains Rework (ahd it is 2 times faster) and PostCSS 3.0 will be faster, that Rework.\n. But right now there is no mixins in PostCSS and variable syntax is too long.\nBut I have plans to create postcss-sass-vars and mixins plugin will be very easy. You can create and publish it.\n. OK :).\n. @yairEO yeap, yor are right. Gulp is plugin-based too. But it is a plugin-based task runner. Not a plugin based CSS tool. As result every CSS tool must parse CSS again. SO we have a 3 problems:\n1. It is slow, because parsing is a most difffucult part of CSS tool. Right now you parse CSS 3 times for each tool.\n2. It is unsafe. Good CSS parser is a complicated thing. It should parses legacy styles with syntax mistakes. It should parse some future standards. If we will have only one parser we will be able to test it better.\n3. It is very difficult to develop CSS tool because you need to create CSS parser.\nPostCSS solves this three problems. PostCSS is a one of the best CSS parsers. And ech plugin just process parsed once CSS nodes tree by chain.\nSo if you like Gulp rather that Makefile, youu know why PostCSS better than different tools:\n1. It is very fast.\n2. It has many awesome tools, because it is easy to create PostCSS plugin. If you already uses Autoprefixer, please check out cssnext. It is a \u201cBabel.js for CSS\u201d, it compile fuuture CSS4 to current CSS3. \n. It is very difficult to ompare Gulp and PostCSS. Because Gulp is a tool to run PostCSS. Have you look at gulp-postcss? It uuses ver close syntax as yo suggested:\njs\ngulp.task('css', function ( ) {\n    return gulp.src('./src/*.css')\n        .pipe(postcss([\n            autoprefixer({ browsers: ['last 1 version'] }),\n            mqpacker,\n            cssnano\n        ]))\n        .pipe(gulp.dest('./dest'));\n});\n. Autoprefixer has many users outside Gulp ecosystem ;). For example, how we can run Gulp plugins in webIDE like CodePen (it has Autoprefixer).\n. @tunnckoCore do you know many stream Gulp plugins? ;-) I think all CSS Gulp plugins work with a full file content, not with a stream. Because most of CSS tasks need to look around in other parts of CSS files.\nSo there is no difference between gulp-postcss with PostCSS plugins and Gulp plugins.\n. Yeap. You can also write it little bit shorter:\njs\nprocess (css, opts) {\n  return postcss(this.postcss).process(css, opts)\n}\n. /cc @MoOx @iAdramelk @lexich @demiazz\n. I think everyone agree, that we need to use Promises API for async.\nWhat we will do with async plugins in old sync process method? Use some syncronizer blocking code? Can anyone suggest good one?\n. processors.processAsync looks like too long for me. Maybe just processors.async?\n. Or process(css, { async: true })?\n. Yeap, option is only a idea. What method name your prefer?\n. Second question: what will be async API for plugins?\n1. Plugin as special object with function in async key: { async: function (css) { \u2026 } }\n2. Two arguments function (css, done) or Promises in return.\n. Third question: what we will do if async plugin will in in sync process call?\n1. Throw a error\n2. Use some hack to make code sync\n3. Deny sync API and return only Promise from process()\n. Maybe we didn\u2019t need new API?\n- If plugin function return Promise, it marks as async.\n- Now process() return lazy Result. It process CSS only on .css or .map call. We can add all Promise methods and return Promise if user call .then().\n``` js\n// Sync call\npostss(func).process(css).css\n// Async call\npostcss(func).process(css).then(function (result) {\n});\n```\n. I see only one problem:\nvar result = postcss(func).process(css);\nresulf instanceof Promise // => false\nBut we cal add some result.async property to return always real Promise. What do you think?\n. First step of async plugins support is ready: e1bffc1e978b62fdc242fbece0e96fb87624979c\n. Done 60c0f45db82a3c49252aec1740684e5bdfb6d9ce\n. In PostCSS 3.0 we can change default options, so we need to decide before 3.0.\n. @MoOx I am not a pro user of source maps too :). Let\u2019s wait for @lydell opinion, because I think it know maps much better that all of us :D.\n. OK, I will change defaults in 3.0 branch.\n. @lydell @MoOx maybe we also should inline maps by default. They are works better out of box.\n. Option sourcesContent is true by default in tokenizer branch 803b71f\n. Why Chrome will not be able to save? With inlined map and with sourcesContent map file still have origin path to Sass file.\n. @bdkjones nope, file path will be in map too.\nsourcesContent will just increase CSS file twice. There is no really gigantic perfomance problems (because we have same CSS nodes, so parsing time will increase only in 10-30 %).\n. @lydell what do you think about inline by default?\n. @lydell yeap, you arguments is right. But it is right only if we have enabled maps by default. In PostCSS users must enable maps by hands. So they will know, that maps will be generated.\nMy point is, that in most cases in development inline maps are better. In production users will just not to enable it.\nOr you afraid, that users will use same code in development and in production?\n. @lydell sourcesContent will not be added if:\n- there is map.sourcesContent = false option.\n- all previous source map have no sourcesContent.\n. map.inline now is true by default bc9771f\n. @lukeapage sorry for long delay. It was very big month :D.\nWhy do you set LESS-file to from? You need to set to from CSS file, that you parse by PostCSS.\n. I try to make better tests today :)\n. @lukeapage I add test like in your situation and everything is find in clean PostCSS: aa68089\n. @lukeapage also I find real source of your problem. Your map is very strange, you tell PostCSS, that you process sources/file.less to out.css, but you map is for out.css, not for sources/file.less. Option opts.from and prevMap.file should look to one file.\nYou should set from: 'out.css', to: 'out.css' to PostCSS, because it works after sources/file.less \u2192 out.css transformation.\n. I think to move after 0.3 release.\n. Chai looks fine in postcss-nested.\n. autoprefixer and postcss-loader was moved to Chai.js too as experiment. Everything is fine.\n. Done 6a523d0aff660a1103d44bf005ba62a9d1e1a191\n. Thanks. Good issue report :).\n. @josiahsavary I near in big 3.0 release. Can you wait few days? Release should be on next week.\n. If not, I can release it :)\n. Done https://github.com/postcss/postcss/releases/tag/2.2.6\nDo you have Twitter account?\n. I saw nice cloneBefore() and cloneAfter() in Stylecow.\n. Also i think we should have findProp\njs\ncss.findProp('content', function (decl) {\n    // here will be any content decl from CSS\n});\n. @rvanes it should be separated plugin, not in core ;). API should add some methods, that will be useful to many plugins. Not to one task ;).\n. Node#move(newParent)\n. @yisibl I plan include it to 3.1. Maybe at the end of December or in January.\n. I plan to release on Saturday or Sunday and make announce at Tuesday.\nYou can take PostCSS 3.0 master from GitHub by \"postcss\": \"postcss/postcss\" in your package.json. But, note that it will very slow because of on-the-fly ES6 compilation.\n. Shortcut properties Node#next and Node#prev.\n. @MoOx suggested node.throwError(message) to throw error in GNU format, CSS source preview and previous source map support (all that PostCSS already did with CssSyntaxError, just a syntax sugar).\n. Also node.replace(other).\n. node.clear() to remove all childs.\n. @MoOx  we need node.errorMessage(message) in additional to node.throwError(error), because some plugins (doiuse for example) print warnings, not errors.\n@anandthakker what do you think? PostCSS can take previous source map and show origin line and column. So I think I should provide some API to get this info.\n. @MoOx nice. But doiuse also has custom method to print warnings to some special place (log instead of terminal, for example). So anyway we need method to get error string.\n. @anandthakker maybe we should add node.error(message) method and use them to print warning:\njs\nvar error = badNode.error('box-sizing is not supported');\nconsole.log( error.toString() );\n@MoOx also maybe we didn\u2019t even need throwError method:\njs\nthrow node.error('wrong custom proerty declaration');\n. @anandthakker Error object is better because you able to get seperated line and column.\n. @anandthakker yeap Message object will be best semantic solution for your plugin. But let\u2019s make only node.error() in PostCSS 3.1 (code will be same, questionsis only about sematic) and if we will have 3-5 plugins with warnings logic, I will add Message to PostCSS 4.0 or later (anyway we need more user cases to understand what Message API we need).\n. @MoOx throw node.error(message) is OK?\n. findAtRules(name, callback)\n. @MoOx @anandthakker Node#error() was added to v4.0 branch: 788b226\n. Node#cloneBefore() and cloneAfter() is in v4.0 branch already 5ddcc7a\n. Node#prev() and next() is ready too.\n. Node#replaceWith() and Container#removeAll() are finished too.\n. Node#moveTo(), Node#moveBefore() and Node#moveAfter() is finished too.\nNow we need only methods to find nodes and change values.\n. Container#eachDecl() and eachAtRule() now accepts filter argument:\njs\ncss.eachDecl('background', function (decl) {\n    // only background declarations\n});\ncss.eachAtRule('media', function (atrule) {\n    // only @media at-rule\n});\n. OK. API extension is ready for 4.0\n. I would like to add this, but other users will hate, that I support non-CSS syntax :D. Let\u2019s wait reaction for missing ; in Safe Mode. If user will use this quick syntax maybe I add some preparse like css-whitespace\n. But anyway @MoOx hack is awesome :). But it will not works with space between // and prop or at-rule.\n. Merged to #140\n. I fixed code style, lintering and normal tokenizer tests.\nToday and tomorrow will: return tokenizer error handling and fix parser for new tokens format.\n. Error handling was fixed.\n. After parser fixes benchmark become to:\nPostCSS 3:   23 ms\nCSSOM:       28 ms  (1.2 times slower)\nMensch:      47 ms  (2.0 times slower)\nRework:      62 ms  (2.7 times slower)\nStylecow:    122 ms (5.3 times slower)\nPostCSS 2:   141 ms (6.1 times slower)\nGonzales PE: 162 ms (7.0 times slower)\nGonzales:    175 ms (7.5 times slower)\n. There is very interesting question about semver :D.\nI think, that when I deprecte property it become like removed. For example, I remove any tests of deprected properties. So PostCSS 3.0 is major relese because I already rename decls and rules to childs. Deprected hooks is just a hack for easy move to PostCSS.\n. Hm. You are right. In next major release I try to throw good readable errors, instead of warnings.\n. Yeap, error will shows stacktrace, so it will be better for this case.\nAwesome! ;) I plan to finish changelog post and ask Gulp and Grunt plugins to update PostCSS dependencies.\n. Ask csswring author to update API.\n. Thanks. I miss this examples :).\nBTW, I plan to rewrite PostCSS README.md and docs on next week.\n. Hm. Comment is just another node. You see insert node node right after display node and PostCSS did it.\nPossible solution will be:\njs\nif ( decl.prop == 'display' && prop.value == 'inline-block' ) {\n    var after = decl;\n    if ( parent.childs[i + i].type == 'comment' && parent.childs[i + i].before.indexOf('\\n') == -1 ) {\n        after = parent.childs[i + i];\n    }\n    parent.insertAfter(after, { prop: 'zoom*', value: 1 });\n    parent.insertAfter(after, { prop: '*display', value: 'inline' });\n}\n. Yeap, properties Node#next and Node#prev will be nice to have :).\n. Does I understand right, that you ask for Node#next? :)\n. Fixed examples (it is just a example, not real code).\nvar decl = parent.child[i];\nif ( decl.prop == 'display' && decl.value == 'inline-block' ) {\n    var after = decl;\n    if ( parent.childs[i + i].type == 'comment' && parent.childs[i + i].before.indexOf('\\n') == -1 ) {\n        after = parent.childs[i + i];\n    }\n    parent.insertAfter(after, { prop: 'zoom*', value: 1 });\n    parent.insertAfter(after, { prop: '*display', value: 'inline' });\n}\n. > Node#next no document it?\nWhat do you mean? :)\n. Yeap. To next 3.1 release\n. Fixed a89fc97\n. Fix released in PostCSS 3.0.2.\n. children has more chars :).\nAlso, I afraid to broke API again. But maybe if some users will support you, we can do it in next major release.\n. Nope, I forget about children :). childs is not a correct form in English? :)\n. Ouh. I am totally bad in linguistic stuff (because I just forgot about special form children).\nAnyway, I think fast API fix can brings more issues :).\nMy plan: we release 3.1 on next week with children. childs will be as alias and print warning. After a month we release 4.0 and remove childs. OK?\n. Maybe we can use some shorter properties instead of long children? Maybe list or nodes?\n. I plan to release 3.1 with alias at this weekend. OK?\n. Fixed in v3.1 branch bdf9a51623cdcb8d3b6a66e27f4ec040fd9e14a5\n. I am was too busy on Kiev conference, so 3.1 release is moving to this week :).\n. Moved to 4.0 branch. I plan to release 4.0 before New Year ^_^. I just need to write few methods from #123\n. Maybe we should have some slow tokenizer and when fast tokenizer can\u2019t parse CSS, we will change reparse it with slow one.\n//cc @brainopia \n. @borodean your example shows really big problem :( https://github.com/postcss/autoprefixer/issues/349\n. Half of work is finished (background: url(\"a().png\") is parsing without problems). Maybe tmorrrow wil lfinish issue.\n. Done bcc7543a7dc537128b4ead09a54605075ffcdbd3\nPostCSS now can parser all of this:\n``` css\na {\n    background: url(\"a).png\");\n    background: url(a;a);\n    background: \\;a;\n}\n:not([foo=\")\"]) { }\n:not(div/)/) { }\n:not(:nth-child(2n of [foo=\")\"])) { }\n[foo=\\\"] { }\n[foo={] { }\n[foo=(] { }\n[foo=yes\\:(it\\'s\\ work)] { }\n\\@noat { }\nh1\\{\n    color: \\;\n}\n```\nBut this commit have perfomance reduce. So I need few days more to optimize it. Will be happy if you will look for optimization too :).\nSorry for delay.\n. Released in 3.0.5.\n. Do you use latest PostCSS 3.0.2? This kind of errors was already fixed: https://github.com/postcss/postcss/issues/132\n. Fixed 71a1e3313fcce633210105923dc407fba778bfb2\n. Released in 3.0.6.\n. My plan for this issue (but I will need yur help)\n1. Test big files on PostCSS, to find that it is PostCSS issue.\n2. Test big files on tokenizer to find is it a tokenizer or parser issue.\nI think, maybe problem is with some interget variables. For example, on some extra big values they become to some BigNum representation? Or maybe problem is with too long token array in tokenizer?\nBut anyway we need to proof, that issue is in tokenizer or parser.\n. Thanks! I try to go deeper on next week :).\n. I have other report that he parse 700 KB files for a 3 minutes\n. @ericandrewlewis can I ask you to run some profiler? I now try to solve some parsing issues.\n. @ericandrewlewis I need some profiler info. What method in parser.js takes more time.\n. @ericandrewlewis wait for you confirm :)\n. @ankurp sorry, we take more time, because @brainopia found couple of mistery questions in node.js. We now think about split tokens to subarrays under 64K items. But we need more invastigations.\n. I have same issue (even with new faster parser) at 790000 selectors (about 26 MB) from 10 sec to 60 sec.\n. I release fixed parser tomorrow. We check, maybe now perfomance slow down will not be so dramatic.\n. If problem will stay we add your tokens separator hack from PR :).\n. Can anybody test for rules limit on 3.0.5?\n. @ericandrewlewis just update PostCSS to 3.0.5 and rerun test.\n. Awesome! I remove any this.tokens changes.\n. @ankurp can you confirm, that 3.0.5 has no problems.\n. Awesome.\n. Fixed 1ad89f0\n. Released in 3.0.4.\n. Main problem: all three parsers, that I mention in examples are very-very closer to CSS parser. We just need to fix few lines in tokenizer (1) or in parser (2 and 3). How we can reuse code in parsers?\n. Also right now we can use syntax like:\nvar ast = SafeParser.parser(css);\npostcss.process(ast);\nBut how we can use it in gulp-postcss, postcss-loader and grunt-postcss? Maybe we should add parser option only to this plugins?\n/cc @nDmitry @w0rm \n. @lydell yeap, @brainopia suggest some event based arichecture for parsers. Soe we can use common code base in normal, Safe, clean and SCSS parser.\n. Custom parser should also have custom stringifier. It will be cool to use PostCSS in tool like CSSComb to change sources file in project dir (not in build dir).\n. @onemanstartup you can do it right now with css-whitespace compiler (it compiles this syntax to CSS, CSS goes to PostCSS).\n. @onemanstartup I think about different syntax, because multiline selectors and values is important (for example, for multiple gradients). So we will have {, but not ; in my current idea.\n. @onemanstartup hm, nice. It allows \\n after ,?\n. @tunnckoCore custom parsers will be sooner in 4.2.\n. I think about this API:\njs\npostcss.process(scss, { parser: 'scss' }).css //=> CSS output\npostcss.process(scss, { syntax: 'scss' }).css //=> SCSS output for CSSComb for example\npostcss.process(css, { stringifier: 'scss' }).css //=> SCSS output from CSS\nSo we need to rename Result#css. Result#content?\n. Also:\njs\npostcss.process(scss, { parser: 'scss' }) // Will load require('postcss-scss-syntax').parse\npostcss.process(scss, { parser: require('custom-naming').parse })\nEvery syntax package must previde 2 methods:\n- parse(string, opts) \u2192 ast\n- stringify(ast) \u2192 string\n. Right now we have only hack without selector support\n. Work is almost finished in valac branch.\nReady:\n- All stringify code was moved from nodes classes to one Stringifier class.\n- Stringifier was refactored to be more extendable.\n- Options parser, stringifier and syntax was added to Processor#process.\nNeed to do:\n- Write a docs how to wrtie own syntax.\n. @bfred-it yeap, you will be able to use PostCSS tranformations on SCSS files (of course, PostCSS will not be able to compile SCSS to CSS, not be able to expand mixins, etc).\n. Oops, this bug is blocking 4.2 npm/npm#2063\npostcss depends on postcss-safe-parser to be able to emulate depreacted safe option. But postcss-safe-parser depends on postcss to extend default parser.\nSolutions:\n- Split postcss into postcss-ast, postcss-css, etc. I am not ready for this big refactoring with many places to make mistakes.\n- Release 4.2 as 5.0, so we can remove safe option. Anyway it is used by rare users. Of course, most of \u201ccurrent 5.0\u201d refactoring will be moved to 6.0.\nWhat do you think? Do we ready for major bump? Or maybe we have other solution?\n. @tunnckoCore I like a splitting too, but I am afraid that it will delay 5.0 for a month :(. Also we need more strange user cases (like using PostCSS in React Style) to split it in right way.\n. @lydell good note.\n. Oups, if next release will be 5..0, there will be 2 broken changes:\n1. safe options was removed.\n2. Node#before and other raw properties were moved to Node#raw.before.\nI can make a more clear errors to migrate plugins easily.\n@MoOx what do you think about major release?\n. @MoOx :'(\n. @MoOx BTW, I think cascade is a problem too. This is why I use only BEM or CSS Modules.\n. SCSS parser is ready: https://github.com/postcss/postcss-scss\nSafe parser was moved to separated project: https://github.com/postcss/postcss-safe-parser\nOnly syntax docs are left.\n. Syntax docs are finished https://github.com/postcss/postcss/blob/valac/docs/syntax.md\n. @varya right now I have no plans for Stylus, Less abd Sass support (just have no time). This is why I wrote a good docs about implementing syntax:\nhttps://github.com/postcss/postcss/blob/master/docs/syntax.md\n. Please write what you need from next Styles/Sass like syntax: #495\n. @jamiehutber you have issue, because you didn\u2019t change parser ;)\n. I close this issue, becuase there is no API ideas right now. Maybe later we will reopen it.\n. Yeap. How we can fix it?\n. @MoOx yeap https://github.com/postcss/postcss/blob/master/lib/css-syntax-error.js#L6\n. Hm. Maybe. Can you fix it in your local copy and check stacktrace?\n. Released in 3.0.5.\n. @MoOx CssSyntaxError is because of conversion that one-two.js will contain OneTwo class :).\n. I will accept it tomorrow (really tired when try to fix #134, but half of work is finished)\n. BTW. I think CssSyntaxError: <css input>:1:1: is bad understandable error text for users.\nMany PostCSS tools (like Autoprefixer CLI), just use e.toString() and fix commit will show some unecessary PostCSS inside stuff to user.\nThere is only standartization question for this prefix?\n. Second question. Maybe we should add fileName only in Firefox (for example, we can test (new super()).fileName to detect Firefox)?\n. Everything other looks good. You are awesome, that you find a hack to return stacktrace :).\n. BTW:\njs\nvar e = new Error('1')\ne.toString() #=> \"Error: 1\"\nThere is no stacktrace by default in toString(). I again afraid of showing too much inside stuff to syntax error.\nThere is two different types of errors:\n1. PostCSS internal error. If it comes, user can\u2019t fix it. He should report it to PostCSS team and we will fix issue. He need a full stacktrace and error name to post maximum info to issue page.\n2. CSS syntax error. User need to fix a CSS file. There is no need of tracktrace (only CSS file name). There is no need of error class name.\nSo I think that we should stringify syntax error in max userfriendly way, because it is not a JS errors like undefined is not a function. Syntax error output should be understandable for users, that doesn\u2019t know JS and JS error format. Syntax error output should be friendly even for non-programmers (like a lot of CSS coders).\nBut, of cource, we need CssSyntaxError#stack, just do not add it and error class name to toString().\n@MoOx what do you think about this two types of errors?\n. Sorry, I need one day more :(. Only finish escaped logic in new parser bcc7543a7dc537128b4ead09a54605075ffcdbd3\n. I take only stack and props: https://github.com/postcss/postcss/commit/3c2de003cfa916827712d2d11fded548e9601626\nAnd replace stack generation to Error.captureStackTrace https://github.com/postcss/postcss/commit/a89f67d262d950f9d9f6739040abf4f0988998b9\n. Maybe we really should change toString(), but let\u2019s make it in 3.1, because I didn\u2019t want to broke API in 3.0.5 ^_^.\n. You are totally welcome to fix this issue. I am always in gitter chat and will help you for any questions.\nI will no do it myself before 4.2 release, because I think (maybe I am wrong and will be happy if you fix me), that noone will see this issue, until it opens source map file. Chrome Dev Tools didn't show any issues.\nI understand that is incorrect output, but I think (really, correct me please if I am wrong), that better docs and async API is much more important tasks ;-).\nSo this task should be done by community's developer, who really think, that it is important. Like you ;-).\n. We test it with @brainopia and it will not fix issue :(. Can you show benchamark before abd after?\n. /cc @lydell \n. Of cource, it will broke API, so we add this changes in 4.0.\n. Error output is now like:\nCssSyntaxError: <css input>:1:1: Unclosed block\na{\n^\n    at Input.error (/home/ai/Dev/postcss/lib/input.js:54:21)\n    at Parser.endFile (/home/ai/Dev/postcss/lib/parser.js:323:30)\n    at Parser.loop (/home/ai/Dev/postcss/lib/parser.js:60:14)\n    at Function.module.exports [as parse] (/home/ai/Dev/postcss/lib/parse.js:9:12)\n    at repl:1:15\n    at REPLServer.self.eval (repl.js:110:21)\n    at repl.js:249:20\n    at REPLServer.self.eval (repl.js:122:7)\n    at Interface.<anonymous> (repl.js:239:12)\n    at Interface.emit (events.js:95:17)\n. Fixed by @Akurganow cd7f2749529fd04008b2f9f552c962021c69e3cf\n. Fixed bb24fa1\n. I think postcss- prefix should be desirable but not mandatory.\nBut we should have some common API in any plugin.\nMaybe if plugin can works only as PostCSS plugin (like postcss-nested) it should have prefix. If it can process CSS by itself (like Autoprefixer), it can have different name.\nAnyway we will have special list of plugins. So prefix will not be a one way to find plugins.\n. Autoprefixer API is:\njs\npostcss.use(autoprefixer) // default options\npostcss.use(autoprefixer({ browsers: [] }) // with options\nThis works because plugin can be a function or a object with postcss property with a function.\n. @MoOx \njs\npostcss().use( require('autoprefixer-core')() )\nThis empty () looks like weired for me. Why we can\u2019t use autoprefixer without params and autoprefixer( opts ) with a params?\n. I suggest same consistancy:\njs\npostcss()\n  .use(a)\n  .use(b)\n  .use(c)\n  .use(d)\n;)\n. Why\njs\npostcss()\n  .use(noOptions)\n  .use(whatever({a: b}))\n  .use(blablah({path: \"/...\"}))\n  .use(bestPlugin({option: \"ever\"}))\nis bad?\n. Don\u2019t forget that in most casses it will be like:\njs\npostcss()\n  .use( require('noOptions') )\n  .use( require('whatever')({a: b}) )\n  .use( require('blablah')({path: \"/...\"}) )\n  .use( require('best-plugin')({option: \"ever\"}) )\n. I agree that we need one API for all pluginis.\njs\nplugin = function (opts) {\n    return function (css) {\n        // magic\n    }\n}\nplugin.postcss = plugin();\nLooks like nice for me, because require('noOptions')() makes to many brackets.\n. I have a big plans aboout docs:\n- README.md will be only for end-users with PostCSS vs Sass features, Gulp/Grunt/webpack HowTos and plugins list.\n- API.md with classes, methods and properties.\n- Recommendations.md with check list for good plugin.\nFuture recommendations from my notes (unsorted yet):\n- Link to check list for good open source\n- Plugin name should be like postcss-NAME. Exclusion only for project, that can works without PostCSS like Autoprefixer or cssnext.\n- README must contains input and output examples.\n- Do not create Grunt only projects. Create common plugin and then Grunt integration.\n- To be fast use regexp oly after indexOf precheck.\n- Clone nodes from exists one. Do not create nodes by hand, because they will not have node.source and will not have source in source map.\n- Use node.error() to get node source position for warnings.\n- API that we discuss above.\nAlso there will be few recommendations for end-user PostCSS apps (like grunt-postcss or autoprefixer CLI):\n- Create map file if result.map exists.\n- Always set correct from and to option.\n- Hide stacktrace for PostCSS CssSyntaxError. \n@MoOx @yisibl @lydell what I should add else to plugin developer recommendation.\n. @davidtheclark I have next open source plan:\n1. Autoprefixer 5.1 release tomorrow.\n2. postcss-simple-var and postcss-mixins because I need some good example in README.md for Sass users (@MoOx I will mention W3C var in Modularity Feature section right after example)\n3. New PostCSS docs.\n. @MoOx yeap, I mean convert Sass users to PostCSS users :). But I think we should write PostCSS docs to convince Sass users to become ex-Sass users.\n. Runner Guidelines discussion #261\n. Plugin Guidelines discussion #319\n. Released in PostCSS 3.0.7.\n. eachRule and eachAtRule is a recursive iterators: https://github.com/postcss/postcss#iterators\nSo in your example eachRule find .a inside @media too.\nThis iterators is recursive because most user cases (prefixing, selectors polyfills) require recursive iteration.\nIf you want to work only with some node childs you should use each:\njs\ncss.each(function (node) {\n    if ( node.type == 'rule' ) {\n        // code\n    }\n});\n. Maybe we should rename them to ruleInside and atRuleInside, but I think recursive cases is much popular.\n@MoOx @lydell @andreypopp @hail2u @anandthakker what do you think?\n. @lydell yeap, you said my mind :)\n. Can you give me a example of this CSS.\nDoes this big CSS is really broken (there is no closing bracket)?\n. OK. If CSS really contain broken at-rule, so behaviour is correct.\n. BTW, PostCSS has Safe Mode to parse broken CSS.\n. @arjay23 can I ask you to open a new issue? . @kevinSuttle I am not really big fun of \u201cNPM as build tool\u201d, because it is possible on very small cases. There is no working npm build solution for big projects.\n. But maybe we can create postcss-cli package. What CLI API do you suggest?\npostcss-cli -p autoprefixer -p csswring in.css out.css\nBut how we can set options for plugins? For example browsers list for Autoprefixer?\n. @kevinSuttle so, why are you moving from Gulp? How you will build files throw several build tools (Sass, PostCSS, CSS compressor)?\n. @MoOx you are not droping build tool ;). You use Webpack, instead of Gulp. You just change task runner.\n. @MoOx but it is a asset build tool ;). Article mean, that we should replace build tool to npm.\n. @MoOx now you will fix/create WebPack plugins ;). For example sass-loader is very bad :(.\n. Maybe we can add some config like postcss.js to set plugins for postcss-cli?\n. @kevinSuttle many awesome plugins doesn't have CLI tool. Also use Autoprefixer as PostCSS plugin instead of CLI tool is much faster, because you will parse CSS once for many plugins.\n. @kevinSuttle so, if you want to process file throw chain of several tools you will save file of each step to filesystem like it Grunt does? It will be very slow.\n. @kevinShuttle does system chains works with multiple files? Like *.css?\n. Hmm, OK I will investigate more.\nSo what everyone think about config?\nAnd who want to create postcss-cli? Maintainer, who use it is better.\n. OK. Let\u2019s talk about API.\n- postcss-cli test.css will override test.css.\n- postcss-cli in.css -o out.css will read in.css and write to out.css.\n- postcss-cli in.css -o - will write to stdout.\n- cat test.css | postcss-cli will read from stdin and write to stdout.\nYou can use plugins with standard options by -p \"autoprefixer cssnext csswring\". Options we can write in postcss.js config and change config by -c postcss.production.js option.\n@MoOx @lydell @yisibl @kevinSuttle everything looks normal? I don\u2019t like -p \"plugin1 plugin2\" syntax. Maybe -p plugin1,plugin2 without space?\n. @MoOx we should use config file for plugin options. postcss.js\njs\nmodule.exports = [\n  require('autoprefixer-core')('> 2%'),\n  require('csswring')\n];\n. Browserify arguments is not a solution for us. Plugin could have more options, instead of simple ext. Also some plugins (for example, doiuse) has custom functions in options, so any JSON is not a solution too.\n. Yeap. We really need postcss-cli. I will write it after 4.0 release (it is today ^_^) and after new PostCSS docs.\n. Nope. My current plan is:\n1. Autoprefixer 5.1\n2. postcss-simple-vars\n3. postcss-mixins\n4. Rewrite docs\n5. Plugin guidelines and boilerplate.\n6. postcss-cli.\n7. Autoprefixer 5.2.\n8. PostCSS 5 (async, postcss.plugin(), custom parsers).\n9. Autoprefixer 6.\n. I think to remove autoprefixer CLI and use postcss-cli when it wwill be avaiable. Should we have some -b argument in postcss to set browsers for any plugins, that uses Browserslist?\n. Right now I think about this CLI API:\npostcss -c CONFIG -p PLUGIN1 -p PLUGIN2 in.css out.css\nIf user will miss out.css CLI will print result  to stdout. If user will not set any files, CLI will read stdin and print to stdout.\n. Should we use -p PLUING1 -p PLUGIN2 or -p PLUGIN1,PLUGIN2?\n. @hawkrives can you show some example of subarg syntax?\n. I think to make CLI simpler and allow to pass only one file. We has a * in terminal for multiple files (you can set dir as output file and PostCSS will use same file basename).\n. @hawkrives why we need special API to process many files? We can use bash templates:\npostcss ./src/*.css ./out/\n. @hawkrives hm, yes you are right. My mistake.\n. @pirxpilot nice. But JSON config is a bad idea, because many plugins has a function options.\n. I well make big list of issues if you decide to be CLI master after publish a npm module :-D.\n. I suggest to remove JSON config from API because many formats can confuse users.\n. @pirxpilot I created a issue in your repo. But most of them are not critical. They are just a TODO for future.\nImportant for me is only:\nhttps://github.com/code42day/postcss-cli/issues/4\nhttps://github.com/code42day/postcss-cli/issues/5\nhttps://github.com/code42day/postcss-cli/issues/2\nI added your CLI to PostCSS\u2019s README: 7a5187b\nThanks for nice work :).\n. @corysimmons I agree, that we should more think about user experience. I even think that current node.js culture ignores end-user experience and it is bad.\nBut here is few problems:\n- CLI is not a main case of PostCSS usage. Users should use more robust gulp or webpack.\n- It is really hard to think and maintain more components.\n. @corysimmons what do you think is a main problem of current postcss-cli? Maybe API?\nLet's rationalize problem and find better solution.\n. @stephenway I do not like current postcss-cli too. Maybe you can create a new better CLI tool. First in seperated test pproject like postcss-newcli. And if your CLI will be better, we can change official CLI to your.\nI think you should start to collect current CLI problem.\nOr maybe you can write this issue to origin CLI author and think together.\n. @pirxpilot thanks for work, man :)\n. @corysimmons done https://github.com/postcss/postcss-cli/issues/1\n. +1\n. @vanesyan but you mean filter in Container#eachDecl() from current v4.0 branch?\n. Done 8654048\n. Thanks. You too! :)\n. Yeap, it is because this CSS is totally illegal :)\n. Nope, because we need to parse content to find this section :).\nWhat task you want to serve. Maybe there is other solution.\n. You can add special format to CSS like: [[var]] and then replace [[]] to {{}} after PostCSS.\n. BTW, when PostCSS will have custom parsers #140 we can add special parser, which will be able to parse {{.\nBut I can\u2019t add {{ to common parser, because there is some CSS draft, wich uses {{ as part of new syntax. So we will have conflict.\n. Also we need extend plugin for ex-Sass users. I think about this API:\n``` css\n%placeholder { }\n.a { }\n.b {\n  extend: %placeholder, a;\n}\n```\n. Maybe somebody know some CSS 4 draft for this case?\n. Maybe we should use this notation for PostCSS plugins to split noraml CSS properties and mixins:\ncss\n.foo {\n    +triangle: top 10px red;\n}\n. Of course, I talk about option plugin :-). Not in core.\n7 \u044f\u043d\u0432. 2015 \u0433. 14:15 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \"Maxime Thirouin\" \nnotifications@github.com \u043d\u0430\u043f\u0438\u0441\u0430\u043b:\n\nThis should not be in core. Lot's of people using vanilla CSS don't need\nmixins anymore (bem ftw).\nBtw, you should probably more use CSS templating that trying to create a\nnew syntax like Sass or Less did...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/postcss/postcss/issues/162#issuecomment-69019867.\n. @morishitter for example CSS custom properties uses CSS, that current browsers can not interpret. I think we should not think only about standard CSS, because we must to find some new ideas.\n. @princed yeap, Sass migration is a main reason for this plugin for me.\n\n@MoOx @morishitter @yisibl but also there is a very common user case when we need mixins:\ncss\n.icon.is-twitter {\n  color: #0000aa;\n}\n.icon.is-twitter:hover {\n  color: #0000ff;\n}\n.icon.is-youtube {\n  color: #aa0000;\n}\n.icon.is-youtube {\n  color: #ff0000;\n}\n\u2026\nSometimes we have this long repeations with small changes. For example, different color for social networks or different color for graph column type. We should have some tool to clean this code.\nI think some custom application mixin for this cases is wrong way, because if we move network colors to this JS plugin, we hide style code from CSS file.\nBut maybe we can find some new better way to it? @each?\ncss\n@each (twitter #0000aaa) (youtube #aa0000) {\n    .icon.is-$1 {\n        color: $2;\n    }\n    .icon.is-$1 {\n        color: darken($2, 0.1);\n    }\n}\nThis is a just a idea (with $1 syntax we will not be able to put @each inside other @each)\n. @lydell the most funny thing is that in PostCSS 4.0 we can implement most of Sass features (only // comments requires Custom Parsers) :D.\nBut Turing machine implementing is really hard (also it is a good rule to store logic in JS and presentations in CSS).\n. @princed also I want to create shorter syntax for variables https://github.com/postcss/postcss/issues/95\n. @princed BTW, do you know, that nested rules are already supported? postcss-nested\n. @MoOx when PostCSS will be able to use Custom Parsers we can create special parser for with non-w3c draft ;)\n. @MoOx how you suggest to solve mu case with many icons with different colors for each networks?\n. @MoOx of course PostCSS core will be only parsers, not mixins :). I open issue in this repo only because plugin repo name is depend on mixin syntax we will choise.\nI agree that mixin solution maybee not the best one. But anyway we need some solution for repeating blocks. Maybe some very different that mixins. So let\u2019s collect ideas and unofficial specs :).\n. @kadmil @princed can you show some examples where you will need mixins. It will helps us to find best way.\n. @MoOx we supports 12 social networks and this template needs normal, hover and active states. What will be if designer ask to change b(+10%) to b(+15%)? This is a main DRY case in programming. \n. I see 3 cases for Sass mixins:\n1. Hide CSS hacks like clearfix. In PostCSS we should do it with JS plugins. maybe we need simple API like rework-mixin.\n2. Create a DSL for current design language like pressable or hover-color-transform. In PostCSS we should do this in app\u2019s custom JS plugins too.\n3. DRY in CSS like in that my icons example above. We can\u2019t move it to JS plugin because we will decrease readility.\n. @MoOx yeap, I wrote it. We should use JS plugins for 1 and 2 cases.\n. @MoOx what nesting you suggest? Can you show a some pseudocode example?\n. @davidtheclark this thread is only about mixin syntax :) philosophical comments re offtopic :D.\nWhat syntax you prefer? For what task you uses mixin right now?\n. @davidtheclark @benfrain don\u2019t worry, we definitely will have some tool like mixins to solve problems. Because I want to fight with Sass for its users :).\nBut we need to find best syntax :).\n. @davidtheclark I agree that you need to write JS mixin if you want flexibility. But we also has many simple cases wwhen you want to have mixin in CSS. Like my icon example above.\nmixin property looks great. There is only one problem, what if I want to put mixin, then some mu properties and then other mixin? 2 mixin properties looks like wierd, because in CSS properties replace prev property wiith same name. But I can\u2019t find a good example, when I will need mixin-prop-mixin.\n. Also I think maybe we need some postcss-hacks plugin to store all clearfix, triangle, sticky-footer?\ncss\na {\n    hack: clearfix\n}\n. @davidtheclark if you will use postcss-import before postcss-mixin, mixin plugin will know about all imported mixins.\n. @davidtheclark I mean to have some packs of standard hacks :). But it would be very semantic if e will have separated property for them.\n. OK. I think this syntax is nice:\n``` css\n@mixin clearfix {\n    &:after {\n        clear: both;\n    }\n}\n.icon {\n    mixin: clearfix()\n}\n```\nBut I have more difficult question. What about variables? ;)\nProblems:\n1. We now have var(name) from spec, but I want to have choice and want to make postcss-simple-vars with Sass syntax.\n2. Will be very good if we can use variables in selectors like in my icons example above. \n. If we will allow to use only 10 arguments, we can use $n arguments like:\n``` css\n@mixin icon {\n    .icon.is-$1 {\n        color: $2;\n        &:hover {\n            color: color($2 +l(10%));\n        }\n        &:active {\n            color: color($2 +l(10%));\n        }\n    }\n}\nmixin: icon(twitter #0000ff);\nmixin: icon(youtube #ff0000);\n```\n. @MoOx you can write own parser with @tabatkins nested (it is not even a draft of spec) when PostCSS will have custom parsers.\nRight now Sass nested is easier to implement (just remove states in parser). @tabatkins nested is harder to write and harder to parse without any benefits. So I don\u2019t see a any advantages (I understand that you think that is some kind of spec, but it is not).\n. @davidtheclark Really some of mixins could be written on root level. So I think @include name is better, that mixin: name.\n. Also there is a third question. We will have 2 plugins:\n- simple templates like @mixin and @include.\n- some shortcut to create JS plugins like rework-mixins.\nWhat names we should use for them? postcss-template and postcss-mixins? postcss-simple-mixins and postcss-js-mixins?\n. @davidtheclark I have no problem with postcss-clone. What API do you suggest? @clone [selector] with %placeholder supports?\nWe can\u2019t parse {{ var }} because of { :).\n. @davidtheclark I will start simple-var and mixins plugins after Autoprefixer 5.1.\n. @davidtheclark pleease send PR to PostCSS README.md with your plugins ;)\n. I think @include is a bad at-rule name, because in PostCSS it can create name conflict with other plugins (because many plugins may want use this keyword). I think it is better to have \u201cmixin\u201d word in every mixin plugin at-rule.\nSo latest API is:\n``` css\n@define-mixin icon $color {\n    .icon-$(color) {\n        color: $color\n    }\n}\n@mixin icon blue;\n@mixin icon red;\n``\n. First unreleased version: https://github.com/postcss/postcss-mixins\n. @davidtheclark do we really needpostcss-simple-mixinanymore? And also maybe we should renamepostcss-simple-extendto justpostcss-extend?\n.postcss-mixins0.1 was released.\n. Yeap, I thinkpostcss-extend` is a better name for your plugin. User will send a PR for any missed features.\nBut @morishitter already took postcss-extend plugin name for ACSS plugin :(.\n. @morishitter what are you thinking about plugin names? :)\n. @hail2u what API you suggest? Because right now gulp-postcss receives just a array of functions and have no idea about what AST version with plugins expect. Se bug here https://github.com/w0rm/gulp-postcss/issues/14\n. @hail2u right now gulp-postcss doesn\u2019t know plugin name. It receives only function. What new API you suggesting to gulp-postcss?\n. @hail2u I understand you, but what is a benefits to check a plugin version inside gulp-postcss instead of inside PostCSS itself?\nRight now we have gulp-postcss, grunt-postcss, postcss-loader and will have postcss-cli. Each of this tool will require some code. Then new developers will create some whatever-postcss and they will miss a plugin version check and we will have user reports on conflict between plugins.\nAlso your way requires to make a gulp-postcss API more compilcated. Right now we have a simple function. But you suggest to send a npm-package name to gulp-postcss, then we should some how send a options.\nWe can\u2019t do it, but I think I didn\u2019t understand your well, because I didn\u2019t see any advantages of your idea.\n. @hail2u I totally agree with you, that it  is a job for npm. But npm team was failed with peerDependencies and now they think, that frameworks should check plugin versions :(.\n. @hail2u Not all users will use whatever-postcss. Some users will have some special cases and they will use postcss directly\n. @MoOx postcss.plugin check will not block outdated plugins. It will only add explanation if plugin throw a error:\njs\nif ( semverCheck(plugin.apiVersion) ) {\n    plugin(css, this);\n} else {\n    try {\n        plugin(css, this);\n    } catch (e) {\n        throw new ApiConflictError(e);\n    }\n}\nI agree, that stable API is more important. But we will not have 100 % stable API. Anyway we will add new methods in future.\n. Also I think that postcss.plugin() wrap is a flexible solution for some future changes.\n. Processor#version is in v4.1 branch: cb7a1d61e076445d698f74d5b5c9997953ea6070\njs\nvar processor = postcss();\nprocessor.version //=> '4.1.0'\njs\npostcss().use(function (css, processor) {\n    processor.version //=> '4.1.0'\n});\n. Done 3d48436\nI added warning message if plugin throwed a error and had different PostCSS version.\n. Warning message will be:\n```\npostcss-size is based on PostCSS 2.1.5 but you use it with PostCSS 1.0.0. Maybe this is a source of error below.\nTypeError: undefined is not a function\n  at /home/ai/Dev/postcss-size/index.js:57:25\n``\n. @MoOx nope. Warning will be printed only if plugin throwed a error: https://github.com/postcss/postcss/commit/3d48436b003fc081bc9e0694d8add0db5d65834d#diff-f392ae0a6902c13d4338a1b8725443cdR40\n.majorPlugin != majorProcessor || minorPlugin < minorProcessor`\n. Problem is because Autoprefixer expects PostCSS 3.0 and CSSWring uses PostCSS 4.0.\nDowngrade gulp-postcss and csswring until Autoprefixer will be updated to new PostCSS.\nWe try to find some better solution here: https://github.com/w0rm/gulp-postcss/issues/14\n. Remove:\n1. When you clone() node, PostCSS will remove all style properties (after, before, between).\n2. When you move node to other CSS root (by moveTo()), it will also remove all style properties.\n3. When you move node to same CSS root, it will remove only before and after.\nSet new:\n1. When you insert node before some node, PostCSS will copy before from existed node to new one.\n2. When you try to stringify some node and it has no between, PostCSS willl try to find node with same type and copy between from this other node.\n3. When you try to stringify some node and it has no before or after, PostCSS will try to find what is indent that you use in your CSS by other nodes, which has before. Then PostCSS will calc current node depth and will calc before.\n4. If PostCSS can\u2019t find other nodes to copy before, etc it will use default style properties.\n. I think too that datauri is better.\nBut If somebody want to create this plugin, why not?\n. @jedmao @yisibl postcss-sprites :D\n. @jedmao yeap, inline images need more CPU to decode base64, but sprites need more memory, because browser uses RAM for all image even if only small part is showed. So it is RAM/CPU trade-off and there is no matter for perfomance.\n. Hm. I add extra check to fix this problem. https://github.com/postcss/postcss/commit/7e1b183d841a426dfa0260d7e8188539a6a126d3\nCan you test a master?\n. @MoOx very strange. Maybe you broke AST? Does all nodes has correct parent property? You mention that you avoid to use clone() or move().\n. Hm. But if you already clone ode or create new one, this method will not clone node again.\n. moveBefore and moveAfter do not clone nodes. It is better for your case.\n. Normalize uses clone, becuase I insert some node with other parent is like a mistake. May users make it, so I add a check.\nWhat is semantic sense to insert node into two parents?\n. Not every. You can call node.clone() or built node manually by insertBefore({ prop: 'color', value: 'black' }).\n. Hm. Yeap, I agree that we can merge moveBefore and insertBefore. User must clone node obviously. But it will not be soon, because many plugins doesn't even migrate to 4.0.\n. Lets plan it after docs and async plugins. Maybe we will need to broke API for PostCSS version verification.\n. I open a more clear issue to have cleaner TODO https://github.com/postcss/postcss/issues/187\n. Done 92d6fbc\n. Nope, what is a point of gray if we need always gray(255, a) or gray(0, a)? ;)\nDoes I understand correct, that w(), white(), b(), or black() can be only inside color( function? I can check where I found white() and black().\n. I can create plugin not in organization, because it is opinionable. But thanks for name conflict. I didn\u2019t know about black() and white() commands in color() function.\n. Hm, maybe #hexa is nice solution.\nBut it is difficult to write alpha in hex. I think @yisibl mentioned some spec or idea to combine hex color and decimal alpha like #000.5.\n. @yisibl can you remind me a syntax of your idea?\n. @MoOx we should use power of PostCSS modularity. I really  think that is very important to have different ideas. There is no development without real world competition.\nWe can creatte some theory, while developing a specs, but real world will be different. PostCSS gives us power to test some ideas before implement it in browsers.\nIf many people will prefer decimal alpha (designers really didn\u2019t know hex), we can show it to W3C and they will add some decimal syntax to specs. Because specs are for developers, not a developers for specs :).\n. @yisibl \u767e\u82b1\u9f50\u653e\uff0c\u767e\u5bb6\u4e89\u9e23 :-D\n. @avanes awesome!\n. Yeap. Also:\ncss\na {\n  size: 30px;\n}\n\u2193\ncss\na {\n  width: 30px;\n  height:30px;\n}\n. @airen? Why we need height check and * 2? If size has only one value, just add both properties.\n. I will made this plugin today :).\n. Done https://github.com/postcss/postcss-size\n. Sometimes you need to override value from other selector.\n. /cc @fgnass\n. Yeap, it is part of non-specs plugins :D.\nBut really, we can save 2 letters is most of properties.\n. What if we will have whitelist of properties?\n. Done https://github.com/antyakushev/postcss-default-unit\n. @MoOx I think it is very kindly to have a one enter point for newbies. But I agree that this task is low priority because we really has many good examples of plugins.\n. First version is finished https://github.com/postcss/postcss-plugin-boilerplate\nNote about ./start script. It ask author name, email, plugin name, etc and then fill all files ^_^.\nPlease send me PR for your favorite config files and tools :).\n. Maybe I shoould use Yeoman to fill files? But right now ./start is easy and simplier for developers.\n. You mean is will be better to run mocha and jshint as CLI tools?\n. Yeap, maybe. Can you create a issue in thet repo. I will move it to CLI tools later.\n. Awesome idea! Result#warnings is must have.\nBut what should be in result.css on errors? I think errors must stop compilation and any other task.\nOr what error handling process you suggest for PostCSS users like gulp-postcss?\n. What is different between \u201cunimportant error\u201d and \u201cwarning\u201d? :)\nAs I understand there are 2 semantics: we do not compile CSS and show error (for example, in browser) and we compile CSS and show warning somewhere in console.\n. But what behavior gulp-postcss or rails-postcss should do for unimportant error?\n. Hm. You suggest debug helper rather that console.log to have some debug: true option in PostCSS#process?\n. Nobody will see console.log and they will have a question, why PostCSS plugin doesn\u2019t work ;).\nWhat is a benefits of silent errors for unknown variables or mixins?\n. We ask gulp-postcss fail on result.error by default, but has special silent option to doo not fail (but I still doesn\u2019t know user cases for it).\n. I totally agree. Question is only about result.messages. Maybe we should add only result.warnings and raise error instead of result.errors?\nBut maybe I miss some important user case.\n. OK. I will add result.messages on next release.\n. @MoOx yeeap, I think about postcss.plugin(opts, fn) definition for PostCSS version check.\n. What is id key?\n. Maybe code? Because id cann be understand as unique message ID in messages.\n. Very interesting things is where we will store the messages. We can use Root, but some plugins may replace AST root (for example, when we will concat two files one root will be missed).\nMaybe we should add second argument to plugin functions? function (css, data) {}\nOr forbid to change root?\n. What do you think about this API:\njs\nnode.message(text, id);\nPlugin name we will take from postcss.plugin wrap.\n. Maybe we should rename mmethod to warning to prevent too big semantic meaning?\n. Maybe we should have some id option in CssSyntaxError?\n. What other types of severity we will use? \nYeap, direct API is nececessary. Your processor.message API is nice.\nAnd I am +1 for overwritable plugin name and flexible.\n. I think errors should be raised by throw. Can you provide some example of INFO messages from plugins?\n. What is difference between \u201crecoverable errors\u201d and warnings?\n. Maybe we can add low level message property.\nBut users will use Result#warning(text, data) to add message with type: warning and Result#warnings getter, that filter messages by type.\n. Why plugin that doesn't work just can't send a warning? Why we need special type?\n. I added Result#messages f892c6e9e8998c5631683b9e3ce45c4af0ab4daa\nI will close this issue, when add Warning class with only toString() method.\n. Warning class is finished 87f05c7\n. 1. PostCSS will return just a Warning object. Each PostCSS runner can show warnings in their way (or example, with or without source code). But I think, most runners will use Warning#toString().\n2. I prefer when linter throw a error. Maybe we should had a option: warning/throw a error?\n. We should parse arguments:\njs\ncss.replaceFunctions('func', function (from, to) {\n    from.value #=> 1\n    from.unit  #=> 'px'\n});\n. @borodean also suggested to parsse color values and showed his proof-of-concept: https://github.com/borodean/postcss-custom-functions\n. @borodean Sass can\u2019t parse it because it is a programming language and it must parse there arguments very carefully. We can just return string for plugin developer and it will be his or her problem to parse it. \n. Nice project from Rework community https://github.com/reworkcss/rework-plugin-function\n. @1j01 can you show a case, when a(b(a()) is needed?\nI am worry, that adding some special case only for functions is not a PostCSS way, when plugins just transforms AST and PostCSS core doesn\u2019t have privitives.\nBut practice is more important that theoretical purity. If there is some user case, we can think how to handle it.\n. @1j01 alpha and mix are good examples.\nBTW, functions are not a only example. There are same order problem with mixins and variables (putting postcss-simple-vars before postcss-mixins can broke mixins).\nMaaybe we should split this big question to 2 separated small questionis? Functions API for current plugins API. And some flow API or strategy for plugin conflicts?\n. @1j01 I created a seperated issue for loop/order problem #296\n. @borodean I think separated library is good place to test a API :D\n. @jedmao do you want to add them to this list? https://github.com/postcss/postcss/blob/master/docs/writing-a-plugin.md\n. Thanks, fixed.\n. /cc @MoOx @yisibl @morishitter @necolas @hail2u @iamvdo\n. @lydell yeap. How about this: function (css, processor) {\n. @MoOx I think I misunderstood you in #177. Can you write a code example of your suggestion, like I did abowe?\n. postcss.plugin will add wrap with PostCSS AST version check\n. @MoOx also, where we will get plugin name for result.messages?\n. Should we ask all plugins developers to have postcss-plugin in package.json keyworks?\n. @hail2u I agree :). Can we use spaces inside keywords? \"postcss plugin\"?\n. @hail2u thanks. Yes, let\u2019s postcssplugin if Gulp and Grunt uses this format.\nAlso thanks for link to Gulp plugin guidelines, it will useful when I will write PostCSS Guidelines.\n. OK, I added postcssplugin to boilerplate https://github.com/postcss/postcss-plugin-boilerplate/commit/8d31112e6addcaeb5733d9dd23fb1ee1ef174d2f\n. Done 7342320\n. Done 8fdc60a\n. type property uses atrule form. Also mixed case is difficult to enter.\n. @ben-eb @jonathantneal what are you think here? Right now we have some inconsistence and I think it will be good to clean it.\n. Ouh, OK, let\u2019s close it, I hate type === \"atRule\" :D.\n. @lydell nope :). I suggest change postcss.atRule to postcss.atrule :).\n. I think atRule is more hard to input. Also changing node.type behaviour is too hard. We can\u2019t print a warning for old API.\n. Problem is not in PostCSS code, but in plugins code.\n. I mean, that right now we have many code with node.type ===\"atrule\" in plugins. So this check already case sensitive.\n. PostCSS can parse *. Try PostCSS with only Autoprefixer in interactive demo.\nCan you post all of CSS? Because I think some plugin remove your code styles (maybe it is a postcss-mixin).\n. @MoOx clone and moveTo removes the code style. And * is just a code style in PostCSS.\nI can leave old before on cloning if it contains non-space symbols. It will break a indentation when we change depth in mixin, but it is a rare case.\n. @MoOx you can move nodes by your own functions. It is totally OK with PostCSS ideology. Methods a just a helpers.\nI think quick steps make situation only worse. Tell me, what is a problem with cleaning code style variables in postcss-import. Maybe we need to fix code style detector or other parts of PostCSS.\n. @MoOx you didn\u2019t speak about a bugs in that issue in postcss-import, only ask a question about behaviour.\nCurrent API try to hide difficults with code style process. For example, if you move node from root to at-rule, we need to increase indent. We can change API in 5.0, but what new API you suggest?\nWe can clean code style in insert methods and have a option to leave it without changes. But I didn\u2019t think that this method is simplier.\n. Merges into #199\n. @kapouer push() is for parser only. You can broke a AST if you will use push() in wrong way.\nWhat do you want to do? Maybe I can suggest you better way?\n. Right now postcss-simple-vars plugin required in. Maybe in future other plugins will required it too.\nI didn\u2019t think that plugin should depends on parser. They just work with AST.\nAnyway it is not so difficult to make it in standard parser. So  I didn\u2019t see disadvantages is standard parser with parse it. \n. Fixed by @mahtd in PostCSS 5.0.5\n. Done e6df98f\n. Done ac155ce. I think we should keep replaceWith to have API closer to jQuery.\n. Done by @ben-eb \n. @lydell nice.I forgot about DOM API as example.\nMaybe we should join  to only one node.remove() as in DOM API #191\n. @MoOx I think you a right, I can find any user case to have a insert method in parent container, not in child node.\n. @MoOx maybe we should rename before, after and between.\n1. Names are little bit confused.\n2. They are like a internal API. Most of plugin developer should not think about code style properties. So we should use short names for popular method (like before(node)) and long for unpopular (maybe codeStyle.before).\n. I decided to use DOM names. They are not verbs, but we can\u2019t use insertBefore since it is used for different purpose.. Done 1e232d1. Yeap, but we can immplemment only some part of spec, like we did in postcss-custom-properties.\n. So decl.remove() and rule.removeChild(decl)?\nI think 5.0 is a good time to deprecate rule.remove() to clean method for 6.0 refactoing.\n. node.parent.removeChild(index) is faster than node.remove() or node.parent.removeChild(node).\n. I am OK to split removeChild method, but removeChildByIndex is too long, looks like good old Java :D.\n. BTw, I think removeChildByIndex is low-level optimization. Most of developers can miss it.\n. Done by @ben-eb \n. @MoOx I totally agree, that we have to much major releases. I will try to avoid major releases after 5.0.\n@hail2u sorry, but I am not ready to 100% freeze API right now. Web developing is too fast :). Maybe after a year?\n. @MoOx I am agree about getter/setter method. DOM API is more relevant for us.\n. I will cose this issue, because anyway seems like a forget to updated it.\n. Hm. Good questions. Maybe we should allow to send only node, not a array. What is a user case to send a array?\n. @MoOx +1 about jQuery methods :).\nI added append(array) behaviour for CSS concat tools:\njs\nroot1.append(root2.nodes)\nBut it is a rare case, instead of\njs\nvar rule = atrule.append({ selector: 'a' });\nrule.append({ prop: 'color', value: 'black' });\nSo we can just remove array support from insert methods,\n. Done 1bb5388\n. @davidtheclark thank. It was awesome work.\nYes, you are right about 131 line. But it is not about return undefined but about no return statement at all. I fixed it.\n. @davidtheclark I really need your help for new README.md. I didn\u2019t happy about some constructions, but README.md is much difficult that API.md. And  it is much important for PostCSS future.\nhttps://github.com/postcss/postcss/blob/master/README.md\n. I can add a test, but i don\u2019t know how to write it :).\n. Fixed 1392efe\n. Released in 4.0.4.\n. Yeap, when you remove first child from Root https://github.com/postcss/postcss/blob/master/lib/root.js#L21\n. BTW, I answers faster in gitte\n. My idea of code style magic is that code style should be hidden for plugin developer. What you try to debug? Why you even think about before, because by PostCSS ideology you should not know about this property? :)\n. Hm. postcss-nested works without manipulations with before.\n. Maybe you have a idea right now, what code style API you want? What do you do with before right now?\n. Hm. You suggest to clone children array and they iterate it without worry about children changes.\nBut we willhave unexpected behaviour in this case too:\njs\nrule.each(function (decl) {\n    // Expecting only one iteration\n    rule.removeAll();\n});\nCan you show a example what a problem with each* you have right now?\n. For example, forEach behaviour is much closer to the current for*. I think that most native behaviour is like:\njs\nfor ( var current = parent.first; current; current = current.next() )\nCan you show me a example when you loose some iteration?\n. Hm. Special method for fill spaces is a nice idea.\n. Hm. But this properties contains not only whitespaces too :-). Maybe .symbols?\n. 1. To free before and after names for insert methods.\n2. Current names is little confused. Even whitespaces.before is much clear.\n. What do you think about raw name for code style data?\n- decl.raw.before\n- decl.raw.between (not only whitespaces here)\n- also we can put raw-values (before we was cleaned them from comments) node.raw.value\n. OK. I will add .raw in 4.2 with deprreacted messages in old getters/setters.\n. OK. I will add .raw in 4.2 with deprreacted messages in old getters/setters.\n. @ben-eb most of symbols already moved to before. If I miss someone, it is a bug, so we can release a fix in 4.1.14.\n. Code style properties was moved to Node#raw in 4.2 branch https://github.com/postcss/postcss/commit/54cb6f4415f8055dfff8975709cf408cfb46397b\nThere are a aliases for old properties with depreacted warnings.\n. @MoOx of course :-)\n. Refactoring finished and will be released in 6.0. Thanks, you did a really big and important work.\n1. I think title prefixes for direct links to methods is a nice idea. It is a bit noise, but when we make a PostCSS site, we will remove prefixes (but leave a unique links).\n2. What Markdown formats you suggest for method types?\n3. I made list examples more similar to real CSS examples.\n4. I make better examples for node.source.\n5. Code style properties is too difficult right now :(. Let\u2019s stay as we have in 4.0 and refector it in 5.0.\n6. 550-551 lines means that rule.nodes can contains Rule or AtRule chlidren. It is unexpected behaviour, because CSS syntax spec do not allow it in most of cases.\n. About fast option. Code wwillsay better, that my English:\nThis code is slow, because regexp is slow operation:\njs\ncss.eachDecl(function (decl) {\n    decl.value = decl.value.replace(/\\d+rem/, function { \u2026 });\n});\nWe can make it better with some pre-check. There is no reason to call slow regexp if value even don\u2019t contains a rem string:\njs\ncss.eachDecl(function (decl) {\n    if ( decl.value.indexOf('rem') != -1 ) {\n        decl.value = decl.value.replace(/\\d+rem/, function { \u2026 });\n    }\n});\nOption fast is this pre-check.\n. Yeap. This format is looks good. I will add it later.\n. I copy your Twitter question here to clean Twitter notifications and don\u2019t miss it:\n\u00abDo you know if it would be accurate to say PostCSS parses and transforms your CSS faster than any other CSS processor out there?\u00bb\n/cc @ai\n. @davidtheclark we can use npm downloads count as lower bound. But I think big companies names is enough and we can miss \u201cand many, many other organizations and individuals around the world\u201d.\n. @davidtheclark can we focused this phrase \u201cThe most popular PostCSS plugin, [Autoprefixer]\u201d on PostCSS, not Autoprefixer. Like \u201cPostCSS is used by\u2026\u201d.\n. @davidtheclark about 21-27 lines. First section is not for features. We have a special section for it above. It is very important to keep first section short.\n. 82-84 lines should be moved to section at line 103\n. I think we should not mention benefits from line 98, because users can ask: does plugins has a conflicts. And it will be very difficult question for us :).\n. @davidtheclark Can I ask you to use more simple English :). Many people with very low lingvistic skills will read it. For example, \u201ctailor\u201d and \u201charness\u201d words is difficult to understand.\n. Section \u201cHow PostCSS differs from Preprocessors\u201d should be not about benefits, but about core difference. After reading user should understand what is preprocessor and what is PostCSS.\n. > I recommend noting whenever a plugin implements syntax from a CSS spec, because I think that is a major selling point for PostCSS. I tried to do that, but I may have missed something.\nI mentioned before, that non-spec plugins is very important too, because we need to test some ideas in wild before try to create spec.\nBut I agree that it is a selling point. Let\u2019s add them as 4th feature to Features section. That we have a plugins, that not a hack, but implement a CSS specs. And it is a user choice, what type of plugins to use. But spec plugins is better beause \u2026 (you already explain it better that me in your awesome article).\n. Word \u201caccommodate\u201d is very difficult to non-native speaker too :).\n. > [postcss-assets] isolates stylesheets from environmental changes, gets image sizes and inlines files.\nDescription doesn\u2019t show how this isolation works. Maybe \u201cput width/height from image file\u201d is better?\n. css2modernizr read CSS, and return config. By this config you can made custom Modernizr build only with tests, that will be really used in your CSS.\npostcss-single-charset will add @charset on top of the file and remove any other @charset from file (for example, because you join multiple CSS files by postcss-import ot gulp-contcat). Safari has a problems if it find several @charset at-rules in CSS.\n. Hm. I didn\u2019t remember why I add text on 386 line :(. Feel free to remove it in your PR.\n. @davidtheclark good work, let\u2019s update PR and we are ready to announce that we have good docs now :).\n. @davidtheclark maybe you are right, that current example can scare some users and we should tell, that you can select any other plugins. Let\u2019s just make this explanation shorter.\n. @davidtheclark I think about alphabetizing plugins, but we have too many plugins right now and big list will scary users. So I order plugins by GitHub stars.\nBut maybe we can find different solution. Maybe we can add some subsections with plugin categories?\n. @davidtheclark I still try to find good source map article. Maybe we should stay description. Anyway it is simple and we have one place to explain everything? We can remove it, when we find good articles later.\n. @davidtheclark good question about loops in ACSS :). Yes, people may write a loops on PostCSS. But it will not be really Turing machine programming language, like Sass. Maybe somebody will write full programmming language support, but it is very difficult and it will not be spirit of PostCSS.\nMaybe we should think, what is PostCSS before rewrite this section. I think:\n\nPostCSS is when you write something like CSS and takes JS libraries, that transforms CSS nodes tree. In Sass you write CSS tamplates on Sass programming language and takes libraries on Sass (with some Ruby/C++/JS extennsions) which provide only mixins and functions, but can not change syntax.\n\nMaybe we should just write some short description like that above? Because it is very important to explain what is a difference (it is like a branding) and good explanations is very short explanations. I think that current explanations in master\u2019s README.md is too long.\n. Yeap, lets keep GitHub stars order and add categories on next week after we decide what categories we need #208\n. @MoOx I agree, but right now we should finish it quickly, so we can do it in one PR.\n. Ouh, hope I didn\u2019t broke anyway with this difficult rebase\n. Hm. Maybe current example shows only one side of PostCSS? We can add second example with only cssnext features. @MoOx @davidtheclark what do you think? Anyway many code examples is better, that more text :).\nOf course, we can just remove \u201cSass like\u201d example, but I think it is very important for ex-Sass users and two examples will shows the modularity power of PostCSS (we can even remove variables examples from Modulratiy section in Features) and will be good for both types of PostCSS users.\n. Nice. We can remove all cssnext plugins from \u201cSass like\u201d examples, to make it shorter.\n@MoOx can you write some small, but awesome example?\n. OK, I take some parts of it.\n. Done. I added 2 examples to README.\n@davidtheclark can I ask you to make shorter version of PostCSS description in 16\u201421 lines? I think we can remove 2\u20143 lines there.\n. I afraid that first section (about plugins) is longer, that we have now.\nBut the second section (about AST) is a much cleaner, that we have right now.\n. Thanks. I miss it.\n. Done. You can check it in v4.1 branch: https://github.com/postcss/postcss/blob/v4.1/API.md\n. Nice. Common part with links is very useful to maintain crosslinks.\n. Parser just not add semicolon property, when we don\u2019t need it. Reason is to make tests and inspect cleaner.\n. Oops, sorry, I forgot about toResult. Done 2f841fa\n. if ( foo ) and if ( typeof(foo) == 'undefined' ) is not the same. Remeber, that empty string \"\" == false in JS. Even 0 == false in JS.\nSo, this change broke the code.\n. @MoOx unfortunately, Tool/Plugin separation doesn't work right now. It based not on the plugin function, but on plugin branding.\nAlso, if user came to PostCSS docs it doesn't care for end-user API like autoprefixer.process. User comes to plugin section to select a plugins with nice functions.\n. Maybe we should add special CSS4 transpiliers section? And other special section for Autoprefixer, CSS Grace and postcss-epub (But I have no idea how to names it).\n. webp should be in Optimization section too.\n. For other cases I like @davidtheclark categories. @MoOx maybe you want to add some sections?\n. I think we should have flat structure here, because anyway nobody will see difference between h3 and h4 in README. So:\n- W3C Draft Transpilers (cssnext plugins)\n- Fallbacks (css grace, autoprefixer, epub)\n- Language extension (for non-transpilation stuff like mixins and extends)\n- Optimization (single-charset, data-packer, mqpacker, minifiers, import, bye-bye)\n- Shortcuts (easings, webp, size)\n- Other (rtlcss)\n- Analysis (read only)\n. I want to mark plugins by W3C draft by special category, because many people love them more :). In other case epub is like a Autoprefixer and cssnext and cssgrace is very different in my case. So \u201cW3C draft\u201d is mean that there is spec and plugin doesn\u2019t is realize this spec and have all benefits from spec-plugins. Maybe we can rename spec-plugins category?\nAlso right now \u201cTranspilers\u201d/\u201cFallback\u201d is too long. Some split will be useful. Maybe we can split it in other way?\n. Maybe \u201cW3C Spec Transpiliers\u201d?\n. \u201cW3C CSS 4+ transpilers\u201d is better.\nDo you remember, that cssnext intself is in other \u201cPlugin Packs\u201d section? \u201cW3C CSS 4+ transpilers\u201d will include only cssnext\u2019s subplugins.\n. Nice. I will make it today ot tomorrow.\n. @davidtheclark I think \u201cW3C CSS4+ Transpilers\u201d is enough right now :).\n. \u201cFuture CSS Transpilers\u201d?\n@iamvdo maybe yyou can suggest some better category name?\n. Done https://github.com/postcss/postcss#plugins\n. @MoOx you suggest to make a exclusion for postcss- plugins?\n. Does it fair? Or you suggest it to promoto good-named plugins?\n. @MoOx done\n. I moved it up (because plugins are ordered by GitHub stars), change name to same as in npm (to add it fast wiith package to your postcss.js) and make description more clear (all plugins make CSS more maintainable, description must show what your plugin really do). c1ee9a45de6d3169991c8bb4d930f5a9d6437807\n. @MoOx when we will add categories, we will order plugins there alphabetical\n. @geddski fixed \u201cworkflow\u201d\n. Thanks :). BTW, what is the csstyle syntax with PostCSS? Because I think what categry is more relevant for your plugin (see #208).\n. OK. I will add plugin to \u201cLanguage extension\u201d until we will have more CSS structure plugins.\n. Ouh, I commit many typography changes to master (sorry, it is my profession deformation after working in Wikipedia :) ).\n. I agree, that shorter main section is important.\nFirst line description is incredible important. We should describe there, why PostCSS is useful and what PostCSS key feature. So I think that we should mention \u201cJS plugins\u201d and key tasks right in the first paragraph.\n. Current structure is:\n1. Short description of all README.md.\n2. Is PostCSS is important, does big companies use it.\n3. \u201cYes, we a like preprocessors, but better\u201d, because it is main question.\n4. Short description how PostCSS works.\n5. Code example.\n6. Links.\nWe should not mix this section.\n. /cc @davidtheclark \n. I'm. I missed why mention of ecosystems is important?\n. Good point. But second sentence mentions existed plugins.\n. Yeap, we could mention it. But right now this 3 sentence firm is too long and too difficult. Main section is very important, we must fight to remove any word. I think we should have 2 sentence, just add a ecosystem weird to second sentence.\n. Awesome. Please send a PR.\n. @davidtheclark I make a commit already by your name\n. There is no new error reports and Travis CI doesn\u2019t throw any syntax errors. I think this issue goes from some environment issues.\n. Main problems of Sass was that you mix programming language and styles. It is like a PHP templates, when you mix HTML and PHP. We avoid this mix in PostCSS and this is a source of out benefits. So there will be no data structures in PostCSS or we will have all problems of Sass.\nI have some ideas about looping but I have no dicition about plugin API. So your user case will be ver important for me.\nFor what user cases you need looping?\n. @benfrain products JSON is a good example of PostCSS power. You should not keep this code in CSS. Just create custom PostCSS plugin, that will get products JSON and will add CSS for them.\nCode will be like this:\n``` js\nvar postcss = require('postcss');\nvar products = require('data/products.json');\nmodule.exports = function (css) {\n    for ( name in products ) {\n        var rule = postcss.rule({ selector: '.product.is-' + name });\n        rule.append({ prop: 'background', value: 'url(' + name + '.png)' });\n        css.append(rule);\n    }\n};\n```\n. Maybe postcss-mixins will be useful for you. It contains object API like:\njs\nmodule.exports = {\n    'product.is-one': {\n        background: 'url(one.png)'\n    }\n}\n. I think about something like\ncss\n@loop $i 1 12 {\n    &:nth-child($i) {\n        transition-delay: calc($i * 100ms)\n    }\n}\nto make animations like this. But it will not be like Sass loops, because it is only shortcut, not a real programm loop.\n. First issue:\njs\nvar dataloop = module.exports = function (css) {\nThere is no need to module.exports =, here. Because it makrs what file will return on require('file')\n. Eveything else looks fine. What is your real output right now?\n. I found a problem. \njs\nvar postcss = require('gulp-postcss');\nHere you put gulp-postcss into postcss variable, not a postcss library itself. So postcss.rule doesn\u2019t work.\n. Try to debug dataloop function inside.\njs\nvar dataloop = function(css) {\n    for ( var category in categories ) {\n        var borderTop = categories[category][0];\n        var borderBottom = categories[category][1];\n        var rule = corepostcss.rule({ selector: '.cat-' + category });\n        rule.append({ prop: 'border-top', value: '1px solid ' + borderTop });\n        console.log(rule);\n        css.append(rule);\n    }\n};\n. @MoOx nice idea! :) #223\n. What from and to options you set to PostCSS, when you process assets/dist/main.css?\n. Why you set from to /assets/sources/scss/main.scss? You run PostCSS after node-sass, so your input file is /assets/dist/main.css?\n. When you run node-sass you set /assets/sources/scss/main.scs to input and output /assets/dist/main.css. Sass generates source map fomr dist/main.css. So, when you run PostCSS with from: scss/main.scss, PostCSS can load previous source map generated for dist/main.css.\n. Done f047e43\n. @MoOx @lydell should we remove old object shorcut:\njs\nrule.append({ prop: 'color', value: 'black' });\nBecause string shorcut is better.\n. @davidtheclark this shorcut object can be used only to insert declarations, but we can create many node types.\n. @davidtheclark but we can use shortcut from postcss-mixins to create rules and at-rules:\njs\ncss.append({\n    '@media screen': {\n        'a': {\n            color: 'black'\n        }\n    }\n})\nBut does we need it with CSS string shortcut?\n@MoOx I think to remove object shorcut only for 5.0 release, so we a free to change API.\n. @MoOx Yeap, parsing is not a fast operation. Let\u2019s keep old object syntax.\n@davidtheclark unfortunately even postcss-nested object shortcut syntax is not good for use. I forgot that there is not way to create bodyless at-rule there.\n. @iamvdo PostCSS is a great tool to create linters :-).\n@MoOx should we mix code style linters (like indentation and new lines rules) with structure linters?\n. @davidtheclark @MoOx do we have this test in Stylelint?\n. @davidtheclark I moved issue to your repo: https://github.com/stylelint/stylelint/issues/302\nBTW, I wait for pR with stylelint link in PostCSS README :).\n. 4.1 release is very soon, maybe we can miss 4.0.6 release with this fix?\n. Released in 4.0.6.\n. Sorry, but API requires false. undefined means try to autodetect previous source map (you can see this by broken tests).\n. Yeap, try { } catch { } will be nice solution.\n. But how user will know about broken map?\n. We can print warning, but warning is easy to miss in current build tools with big output logs\n. I made a separated taks #229\n. Won\u2019t fix right now. If few sers will ask it too, I will ad it.\n. Nice!\nBut why you stub semver in tests?\n. But you can missunderstand semver API ;).\n. plugin.postcssVersion is not a range. It is a PostCSS version, which is used to build plugin.\n. I will fix it, no problem. I just waiting for npm install :).\n. Unfortunately, I revert commit. Because some of users uses PostCSS in client-side and extra library without any benefits is a bad solution.\n. Done fd85efb\n. @MoOx but should postcss-messages displays all messages? Because semantic value of \u201cmessages\u201d is too big, this array can contains any kind of messages. Like notices or debug messages.\n. But what must do other PostCSS runners like gulp-postcss this messages? Should it always print by console.warn?\n. Maybe we should use different arrays result#warnings, result#infos? Right now it is difficult to write docs for messages, because I can\u2019t explain in what exactly  cases you should use it. Also I can\u2019t explain for runner developers, what should they do with messages array because it can store anything. And we has a some problem with postcss-messages.\nSeparated arrays with clean semantic is better.\n. I agree too, that flexibility and custom types are important. But I think that we can solve flexibility by extra properties to Result.\nCustom types we should solve in different way. Maybe by custom Result properties if it will be very rare case. If we will have many plugins with some kind of communication between each other, we can add some separated Result#data property.\n. I want also create some Warning class to have toString() method with stringifing in good format plugin:file:line:column text like syntax error does right now.\n. Can you show some examples of custom types messages from linter?\n. Benefits is simple: if you find a message in warnings array,  you just a output it by console.warn. If you find message in messages array you didn't know what to do with it.\n. Right now I think about this solution:\n- Internal property messages.\n- Getter warnings, that will filter messages by type.\n- Result#warning(text, data)\nSo postcss-messages will shows messages only from warnings getter.\n. Message API was finished in v4.1 branch.\n. Done by @gazay https://github.com/postcss/postcss-messages\n. What from and to options you set in last broken example?\n. Again. You set wrong from and to. Stylus generates source map for main.css, not for main.styl.\n. Think like this. Stylus step:\n- from app/src/files/main.styl\n- to app/dist/main.css\nIf you will open Stylus source map, you will see main.css in file property. PostCSS\u2019s from option must be equal with previous source map file content.\n. if you read main.css and write main.css  back you shoult set from: app/dist/main.css and to: app/dist/main.css.\n. OK. With fixed options we can go deeper :). What is sources after Stylus and after PostCSS?\n. So, what is wrong?\n. In most cases it iw generates because previous map doesn\u2019t map all symbols of source. For example, Sass doesn\u2019t map } symbol. So most of output sources symbols is mapped to some origin source. But some rare symbols are mapped only by PostCSS.\nThis symbols doesn\u2019t display in DevTools and problem of previous mapping.\n. But if you want to know exactly for your case:\n1. Open source map vizualizer.\n2. Press \u201cCustom\u201d.\n3. Set all necessary files.\nAnd you will source all mappings of source map.\n. Feel free to ask them :)\n. Can you give me some small and simple a.css that reproduce this issue?\n. Link to source map visualization to reproduce error: to.css\n. Seems like PostCSS uses wrong column number in source map mappings.\n. Hm. I think, I fix this issue: 899c655\n. Test from @hail2u looks correct in source map visualization and in Chrome DevTools. I hope I didn\u2019t broke some other cases :D.\n. @hail2u I received a mail from GitHub. You updated you message? Did fix works for you right now?\n. First question: for what plugin cases we need selector parser.\n. @davidtheclark right now @ben-eb is working on new selector parser\n. @sokra cute. Maybe we need to add it to API.md.\n@ben-eb what is current status of PostCSS internal selector parser?\n. Yeap, @ben-eb finish a first preview of PostCSS parser. Please take a look, we need your feedback: https://github.com/postcss/postcss-selector-parser\nFirst versions will be as separated library to break a API. When we will finalize it, we will integrate it into PostCSS.\n. @sokra PostCSS selector parse will use a tokenize/parse steps, so it will be easy to change and faster. But right now it has some complicated places.\nHor did you solve a nested selectors like? :not(.a, :b, :c:hover)?\n. @doors lines of code don't show complexity and maintainability. Less code with more internal connections is more complicated, that more code, but with less connections. MVC pattern is a good example :-).\nAwesome, that you solve it. Maybe we should take that idea too. I hope our parser will not be like a GNU Hurd kernel with better architecture, but always in alpha :-D.\n. @MoOx yeap, you are right :).\n. Yeap, this slogans is nice. Maybe I should use them in talk on Frontend.fi.\n. @iamvdo thanks for slides.\n. @iamvdo hm, you suggest right ideas. But I think now we should wait for more understanding. We need to promote PostCSS widely and receive and feedback. I think we will get feedback very closer to your ideas, but real feedback is always is more import.\n. Fixed ac8c257\nWill be released in 4.1 on next week.\n. @w0rm do we really need it?\n. i think we can live without this feature. Anyway PR will be welcome.\n. Welcome for PR :D\n. @Saturate can you make a PR here?\n. @Saturate it is last version for 5.1 release :)\n. @tarikihm sourceRoot it is a thing only for source map. It is not relevant for looking paths from this issues.\n. @tarikihm open a new issue for it.\n. OK. I will close this issue again if nobody want to implement it.\n. What about error.input, because it was a input to PostCSS.\n. Also error.input is related with PostCSS\u2019 Input class for same thing.\n. Done c054295d04997080e6bda36d401fe0f682eda3fc\n. Renamed to showSourceCode 95cf9b6\n(anyway it is not a public API)\n. I have many changes in v4.1, so I accept PR later to fix merge. But it is nice, do not worry :).\n. Can you please:\n1. Change description to have one line n GitHub.\n2. Send PR to v4.1 branch.\n. BTW, cute plugin\n. Thanks for quick fix :)\n. PostCSS parses it, but not as Comment node.\n``` js\nvar root = postcss.parse('h1 { font-weight: / test comment / bold }');\nroot.nodes.length //=> 1\nroot.nodes[0].nodes.length //=> 1\nvar decl = root.nodes[0].nodes[0];\ndecl.value //=> 'bold'\ndecl.between //=> ': / test comment / '\n```\n. What task you try to solve? Maybe there is a better way.\n. @MoOx there is a big prooblem with csswring. It is solid and has no modules /cc @hail2u \nFor example, it is very slow. There is many way to optimize PostCSS plugins, but we need modular inifier to apply them.\n@ben-eb do you want to create modular minifier?\n. @ben-eb in your plugin yu shuld remember, that there is a many places with comments in PostCSS AST:\n- Comment node in nodes.\n- decl.between\n- decl._value.raw\n- rule.between\n- rule._selector.raw\n- atrule.afterName\n- atrule.between\n- atrule._params.raw\nThis is a only way too make AST simplier for common tasks. Moost plugin developers are happy when we hide comments froom they.\n. @ben-eb I sugget you to make a plan. You can create a main plugins package (like a postcss-min). Right now this small plugins (like postcss-zindex) confused users without context.\nMaybe you should have some prefix for plugins. Like postcss-min-.\n. Closed by @ben-eb \n. Yeap, only for CssSyntaxError.\nI think chalk is too big for us, so just support-color was enough.\n. There is a insteresting question for future PostCSS releases. I want to make some small subset of PostCSS to use in browser. For example for React Style lovers. For example, build without source-map support could be 2 times smaller.\nMaybe in PostCSS 5.0 we should split project to postcss-ast, postcss-core and postcss.\n. postcss-ast is needed for Custom Syntaxes.\n. But it is not a final plan, just a thoughts why we should start to think about PostCSS build size.\n. There are three problem in support-color:\n1. It uses process, which do not exists in browser.\n2. It runs test right on import.\n3. Arguments tests in unnecessary in this PostCSS case.\nSo I decide to copy tests right now 06feb5f\n@sindresorhus maybe you can suggest better way?\n. Hm. I forgot, that Browserify shims node's objects.\n. @sindresorhus moved to supports-color 31c6b2e\nMaybe we should add typeof process === 'undefined' check? PostCSS can be built not by Browserify or runned in non-node env.\n. @ben-eb nice idea. Karma?\n. @ben-eb PR? :)\n. Thanks :)\n. Will not work with :)\njs\na {\n  value: important\n}\nBut I am very happy, that somebody understand parser :).\n. Here is a tests for parser: https://github.com/postcss/postcss/blob/master/test/parse.js#L48\nTest compares AST from parsing test/cases/X.css with JSON from test/cases/X.json.\nI suggest you to add new case to important.css and then run gulp cases. This Gulp task will all JSON files by CSS AST (like take a snapshot from current parse output AST).\n. @ben-eb awesome! But could you also add test for prop: important?\n. Awesome. It will be OK if I will accept your PR after tuesday? I am very busy on workshop right now :'(\n. Could you please make plugin description shorter? In one line like any other plugin.\n. Nope, only shorter description\n. Could you send PR to v4.1 branch please?\n. Can yo please checkot fresh version of README.md from v4.1, reedit it again and send PR?\nI ask yo to send PR to different branch becase of merge conflicts, so I can\u2019t accept this PR with master branch commit.\n. Awesome. Sorry that I ask you to make 3 PR :).\n. @jeffjewiss this rules will be mondatory for broccoli-postcss too :). What do you think about them?\n. @pirxpilot you should check out API.md from v4.1 branch\n. @jeffjewiss 1.1 is mostly for postcss-cli :)\n. @jeffjewiss but I made 1.1 cleaner aec41e9\n. @iamvdo sorry, I forget about Brunch builder :). What do yo think about this rules?\n. @MohammadYounes yes, I will add Rules to boilerplate when everyone will agree with it.\n. @iamvdo what do yo mean about postcss.parse and postcss.process?\n. Thanks for feedback. Some small ideas I will remember for future.\nLet\u2019s wait for 4.1. I plan to release it on next week.\n. @geddski yes, because most of rules that was mentions in Guidelines are very important. For example, if runner will miss from option, it will generates broken source map.\nWith this guidelines PostCSS runners will work better and users will think about PostCSS as quality product.\nMaybe you disagree with some rule or think that some rule should not be mandatory in some case? We can change rules before 4.1 release.\n. Thanks for PR.\nNo problem, I fixed linter warnings b0cfc8f\n. @gedw99 it is not really PostCSS task. I think will bbe more flexible to split your task to 2 subtasks:\n1. processing CSS by PostCSS in .css files\n2. inline processed .css to .html by some tool from @ben-eb message above.\n. Thanks :)\n. @MoOx we must run async plugins in sync way, because they can have a conflict while editing CSS AST.\n. @w0rm custom Gulp processor was used here.\n. @lenarakhmadeev you forgot to return Promise. But seems like like there is other issue in PostCSS\n. Fixed 07b3914\n. What is your VK and Twitter page? I add them to plugin announce.\n. NP, I reverted it\n. Maybe it is a too complicated logic for small deprected message, which is used (as I understand) only in one plugin? :)\nI have no problems with warning per instance check, but I think it will be faster to fix plugin, rather that fix PostCSS.\n. I will add boolean flag next time :).\n. I put check to warn method 431bd99\n. Released in 4.1.1.\n. TOC is a hack, not a solution. One sentence has more power, that 3 sentenses. Also current text is difficult to understand for non-native users.\n. We can add TOC as fast fix. But problem will be still exist with TOC.\n@MoOx you are right, TOC is nice for API and other book-like big texts. But good promotion text should be short and works without TOC.\n. I added TOC. @MoOx thanks for nice TOC example :).\n. Yeap, I think we had a 2 steps here:\n1. Make current information shorter.\n2. Move some extra info to PostCSS site.\nBut I can start site development only in next month. After Autoprefixer 5.2 and Plugins Guidelines.\n. We with @ben-eb rewrote README.md and made it much shorter and cleaner.\n@davidtheclark sorry, we remove your well-written text. It is sacrifice on the altar of brevity for all of us :).\n. I think I fix it here 57a8d4fa771fbca9f4976f586b455545f87f21f4\n. Sorry, right now I am on jazz concert. I will look at your issue, when I will be at home.\n. I think I found problem. What postcss module version you use? You should use 4.0 or 4.1.\n. I send a PR to generator-gulp-webapp https://github.com/yeoman/generator-gulp-webapp/pull/298\n. PostCSS saves source whitespaces and by default doesn\u2019t change them:\njs\npostcss().process('a{color:black}') //=> 'a{color:black}'\npostcss().process('a { color: black; }') //=> 'a { color: black; }'\nIf you want to minify CSS, you should use some CSS minifier. For example, PostCSS based csswring by @hail2u.\n@ben-eb now developing a new modular CSS minifier, you can use some his minify CSS plugins to compress CSS better.\n. Oops\n. yeap, @antyakushev was first :)\n. Awesome!\nOnly note that I order plugin links by name length and respect the Holy 80 Columns Line :).\n. Because nodes doesn't now current Result instance.\n. We can add Node#setContext and set Result to node.context.result to use it in node.warn. But does it is a good way?\nEspecially in current love on pure function and FP.\nOr maybe we can use this API:\nnode.warn(result, 'text');\n@ben-eb @jonathantneal What guys do you think?\n. @ben-eb If result is option, so what node.warn will do without it?\n. But how we can set current result to every node in good way.\n. Yeap, plugin knows current result. But nodes do not know.\nWe can save result to every node, but what if plugin will create new node manually, it can loose result link from new node.\n. @MoOx if you use sync API, behaviour should be totally same. So we didn\u2019t broke API for major release.\n. Can you run tests on sync/async API to detect source of problem?\n. What changes in PostCSS broke a PostCSS API?\n. PostCSS 4.1 passes all PostCSS 4.0 tests. Maybe we broke something, but it is a bug, not a major API changes.\n. @lydell BTW I was a fan of underscore methods, but there are a lot of underscore haters :(.\nRight now Guidelines tell that only methods from API.md are public. But I am thinking about make privte methods more clear. We can add it to 5.0 if everyone agree.\n. @MoOx sorry, I am on conference right now and can\u2019t look in source of postcss-import problem. It was because of changes in some private API?\n. @MoOx can you explain what was broken with postcss-import and 4.1? I agree that it is a problem, but I didn\u2019t understand the source of problem, because I didn\u2019t change API.\n. Hm. Yeap. In 4.0 Result was lazy too (changed root will stringified only on calling .css), but plugins was executed immediately.\n. @corysimmons welcome aboard :).\nUsing decl.before is not a good idea. This property contains whitespaces before declaration. For example:\ncss\na {\n  *content: 'IE hack'\n}\njs\nvar decl = root.first.first;\ndecl.before //=> '\\n  *'\nIn PostCSS API you need to insert new Declaration nodes. For example, like this:\njs\ndecl.cloneBefore({ prop: 'float', value: 'left' });\ndecl.cloneBefore({ prop: 'margin-right', value: '20px' });\ndecl.cloneBefore({ prop: 'width', value: 'calc(100% - 20px)' });\ndecl.removeSelf();\nWe use cloneBefore, because it was copy decl.source and CSS with have correct source map.\n. BTW, you should look at postcss-flexgrid.\n. Brainstorm:\n1. Plugins pack, where order is fixed. Not fix a pack conflicts and loop problem.\n2. Plugins can be reordered by some metadata in plugin description. Like a blacklist. But it requires good feedback from users.\n3. Some event based API, so all plugins will works together. Most complicated and promising way. It fix loop problem and should be faster. But not all plugins can use it (some plugins like Autoprefixer requires look back).\n. @MoOx yeap, I think too that we should have old object AST API aat least for custom in-company plugins.\nAnd of course this features will be implemented only in 5.1+ versions. Maybe not in this year.\n. Stylecow has nice event-based API.\n. Maybe we should also have enter and exit events like in Babel 6.0 /via @ben-eb \n. I think we should have more people who familiar with PostCSS core internals. Also @marcustisater showed great example of \u201cproject technical committee\u201d on postcss.org project.\nSo, let\u2019s try same \u201ctechnical committee\u201d way in this feature. We need some leader, who want to coordinate the work. Who want to do it?\n@ben-eb had experience with event-based API in cssnano 4 development. @jonathantneal thought about some proof-of-concept implementation.\n. We are discussed with @ben-eb node changing API.\nFirst option:\njs\ncss.on('decl', function (decl) {\n    if ( decl.prop === 'bad' ) {\n        return false; // remove\n    }\n})\nSecond option:\njs\ncss.on('decl', function (decl) {\n    if ( decl.prop === 'bad' ) {\n        decl.remove();\n    }\n})\nWe should think about node changes API because we should recall all node\u2019s listeners on new appended nodes too.\n. Good comment from @thejameskyle about their experience in Babel is relevant for this issue too https://github.com/postcss/postcss/issues/754#issuecomment-192714884\n. @ben-eb do we have any benefits with object-style API (when you put events name as object keys), rather than listener API (when you can a .on() method)?\n. Wait a moment\u2026\n. Done e5898c5\n. Let\u2019s me update npm packages and I will be ready for release.\n. replaceValue is just a simple shortcut. If you need something more complicated, you should iterate by declaration manually. It will be very simple, just check replaceValue source.\nI can't add argument with node, because it is important to have same arguments, that in String#replace.\n. Do you use Promise?\n. Nope. Hm, I will look about error silenting on this week.\n. Something like this:\njs\ncss.eachRule(function (rule) {\n    if ( rule.selector.indexOf(':nth-child') ) {\n        rule.selector = convert(rule.selector);\n    }\n});\nCheck postcss-quantity-queries for examples.\n. I want to write some postcss-each with some iterator for simple task to write them inside CSS.\nI think about this API:\ncss\n@each $i 10 {\n    [data-heading=\"$(i)\"] {\n        width: calc(10% * $i);\n    }\n}\nBut right now you need to write cstom plugin, sorry. Maybe after Autoprefixer 5.2 I will finish postcss-each.\nOr maybe somebody want to create it? @yisibl @ben-eb @antyakushev\n. Full API from my draft:\n@each VAR [FROM] TO [by STEP] {\n}\n. I have too some cases, when custom plugin will be bad solution and loop inside CSS will be more readable.\n. @ben-eb yeap, maybe @for is better name.\n. @ben-eb JS in CSS? O_o Why we need it?\npostcss-for plugin will fix @benfrain needs.\n. @benfrain problem of Sass is not a special language. Main problem is that they put programming language into CSS.\nThis is why I think @parsejs is a bad idea. Styles mst be declarative.\nAnd it is a main difference between postcss-for and @each in Sass. Sass is a template language. @each is a iterator and it accepts Sass types, like Array.\npostcss-for is not a statement of programming language. It is not a Turing complete. It is just a short way to write many rules. But it doesn\u2019t allow you to write a program like Sass\u2019s @each does.\nSame with mixins. Sass\u2019s mixin is a programming language function. PostCSS\u2019s mixin is just a template.\nCurrent PostCSS idea is:\n- We have simple declarative task. Like :nth-child(1) { left: 10px; } :nth-child(2) { left: 20px; }. And we ses some simple templates (like postcss-mixins or postcss-for) to write them.\n- Other task is complicated and requires a code. Like read a JSON and create a nodes. We uses custom plugins for them.\nPutting JS inside a CSS is not a part of this PostCSS philosophy. Stylus should be declarative. Full Turing complete power must be in plugin, that transforms a CSS by pipe.\n. BTW. Why you ask for JS in CSS for this simple task like [data-heading=\"' + i + '\"]. Simple template based solution like postcss-for is totally enough and much more readable, that inline JS.\nI think inline JS is only a phantom pain of missed Sass, when we mixed programming language and styles :).\n. I reopen it for postcss-for\n. Done. @antyakushev made a postcss-for.\n. BTW, don\u2019t forget to add link href next time :)\n. Done ef7942aa33fc5f2999bcc802e2ae2eb9a3bb0155\n. You should ask Stylus team for support of non-standard at-rule.\n. Nice hack! :D\nPostCSS 4.2 will have custom parsers. It will be a better solution.\nI thinking that we should not include temporary hacks to Plugins list.\n. @moczolaszlo I will post about it in PostCSS twitter account\n. @moczolaszlo do yo have twitter account?\n. OK, I found a problem. Happy for me, but bad for you is that error is in Sass :D.\nWhen your SCSS contains non-ASCII symbol, Sass will add @charset \"UTF-8\"; at-rule to top of file (very right solution). But unfortunately @charset logic in Sass doesn\u2019t know anything about source map and doesn\u2019t update it. So we Sass will add @charset, it will generate broken source map.\nThis is Sass only (I removed PostCSS) mapping vizualization that shows my point.\n. I can help you when Sass issue report. Just create a issue and put link to Sass issue here. I will repeat all technical info there.\n. Nice idea. Also plugin can remove encoding at-rule with utf 8 if file doesn't contain non-ascii symbols.\n. Maybe we should extend postcss-single-charset\n/cc @hail2u\n. We still have no plugins for it? @ben-eb it will be very useful for cssnano?\n. I want to close unnecessary issues, maybe I can promote this issue. It seems like very easy for me.\n@hail2u should I ask developers to send PR to you or create separated plugin?\n. @ben-eb not bad idea :). Any suggestion? Maybe with votes?\n. @andyjansson missed @charset can affect on CSS, for example ::before content can be read wrong.\nBut unnecessary @charset is bad for cssnano. I really-really want to have the best CSS minifier in PostCSS :).\n. @andyjansson it is not question about PostCSS insternal JS. It is about browsers and output bundled CSS.\n. @andyjansson not a UNIX way :). Separated plugin is better.\n. @andyjansson So, why we should handle insert methods if we works in plugin?\n. @andyjansson How you think to normalize? When you will save CSS on disk, browser need some information to understand bytes encoding. Is it 1 char in UTF-8 or two in ASCII.\n. @andyjansson this plugin also should remove @charset if it is unnecessary\n. @andyjansson just put plugin right after all transformation. Why we need to hook insert methods?\n. @andyjansson this plugin is only about reducing file size, not about fixing encoding conficts (it is UTF-8 era :D ).\n. I think we can ship it in next 5.0.\n. Done f619212\n. @bjrmatos you can still use PostCSS, just load Promise polyfill manually. Right now all users get this big polyfill.\n. @bjrmatos thanks for notice, I will add docs later.\n. @bjrmatos done 7f3838d\n. I use fixed version only for devDependencies. I used fixed version as small ccopy of npm shrinkwrap or Gemfile.lock.\nWhat benefits we will take from flexble versions?\n. You suggest to replace ~ to ^ in dependencies? Yeap, we can do it.\n. Manual update is better for three reason:\n- I have 15 free minutes and fix some small issue. Then I push changes to GitHub and Travis CI load new version of some development library. It broke tests. But I have no time to fix them.\n- Some developers can report a issue because of old libraries in their node_modules.\n- Some libraries are using in benchmark, so regression will not be tested on Travis CI. We can add benchmark to Travis CI, of course. But it will dramatically slow down CI.\n. Hm. I found a problem with ^ in Autoprefixer. For example, Browserslist update from 0.2 to 0.3 brings new features. So Autoprefixer public API will be changed for this new features.\n. @MoOx but what if Browserslist will have 1.1 to 1.2 update in some feature and brings new features to Autoprefixer?\n. But any new feature in public API must be marked as minor update. Problem is some of npm packages are a part of Autoprefixer public API.\nWe can use ^ for libraries, that is not a part of public API. Like base64.\n. Done d97cbe5\n. Published in 4.1.7\n. Can you show me a time information from Gulp with and without source maps.\n. But anyway source map generation is complicated, so CSS processing with source maps uses more time by definition.\n. Can you show me full Gulp output, because it contains time for each task.\n. OK, I will create a internal benchmarks to find a source.\n. Because of source maps :D. Source map generation is a slow by nature. When we have several processing steps, we need to merge mapping from steps and it is complicated process.\n. Just move dependencies from benchmarkDependencies to devDependencies and run npm install.\nNext you can run benchmark by gulp bench.\n. I uses benchmarkDependencies because node-sass need too many time to compile. Most of Travis CI runs fails because of the node-sass. And many times node-sass was broken with some of io.js version. So it is very difficult to install all benchmark dependencies on every npm install.\n. We can put Benchmark Run Instructions in some place. Where we should puut them?\n. Nice suggestion. I am waiting for PR ^_^.\n. @ben-eb I didn\u2019t like this idea, because benchmark is like a tests for me. Should be with code. But if we will not have any other solution, we can think about it.\nBTW, I have a dream to make a CI for benchmarks for PostCSS and its plugins. To find perfomance regression.\n. @ben-eb yeap, it is a good reasons. Let me think.\n. @ben-eb I love more and more idea of separate repo for benchmark. But main reason of benchmark is PostCSS optmizations. So I need to works is PostCSS sources, compile ES6 and run benchmark. How we can do it with separate repo? GitHub link in bbenchmark\u2019s package.json is a bad idea, because I need some feedback before commit.\n. @xzyfer npm link is awesome, I missed it. OK, I will create a repo on this weekend.\n. Done https://github.com/postcss/benchmark\n. @MoOx 1, 2 and 3 is fixed, thanks.\nWe decided to use postcssplugin because Gulp has same naming.\n. @ben-eb postcss.plugin add a API and plugin name and PostCSS version. We can allow to add this nodes manually. But maybe we should fix postcss.plugin for you case.\nI think I fix that issue, that you mentioned. Can you check, have we a problem right now?\n. @tunnckoCore @MoOx yes, I think postcss-plugin is more readable. Here is old discussion about keyword: https://github.com/postcss/postcss/issues/181#issuecomment-74409398\nThe main reason is that it is a common way: gruntplugin also has no dash.\n@hail2u does dash has some problems in npm?\n. @tunnckoCore OK, I will change keyword.\nYou can find many issue reports in GitHub and Twitter when users forget to add brackets. What consistence API do you suggest?\n. @tunnckoCore if I will not promote brackets-less API more users will have this issue. It will promote PostCSS as tool that doesn't work.\nTheoretically ideas should be created to have practice result. There is no sense in consistency if it produces user problems.\n. We can throw a error if plugin returned a functions (if user forgot brackets). But here we will have conflict with other API best practices: \"good API should not let user to make a mistake\".\n. @ben-eb your example is not honest ;-). In real world users have a big list of plugins. So they will not save them to variables and will call require('plugin') right into a plugins array. And require('plugin')() doesn't look so nice add in your example ;-).\n. Also we need to change runner keyword to postcss-runner but we has only 4-5 runners, so it will be easy.\n. @ben-eb Gulp doesn't has big lists of plugins, because it has separated tasks.\n. @MoOx we have different tools in PostCSS ecosystem, so we need to specified what kind of tool it is. For example, postcss-load-plugins will also have a postcss keywords. Even a PostCSS has postcss keyword :). So we can\u2019t make a plugins list dynamically.\n@tunnckoCore @ben-eb I changed keyword to postcss-plugin and postcss-runner.\n@tunnckoCore I removed a API examples fro postcss.plugin() rule.\nf00c76a\n. So, we are close all current question or I forget someone?\nTomorrow and in Tuesday I will promote discussion in Twitter.\n. @pascalduez really code will be:\njs\npostcss([\n  require('processor1')({foo: 'bar'}),\n  require('processor2'),\n  require('processorThree')({opts: true}),\n  require('processorFour')({bar: 123}),\n  require('processor5'),\n])\n. @btholt what problem we possible may have from PostCSS in dependencies?\npostcss.plugin will also save a used PostCSS version. So if we break a API in 5.0, we will be able to find plugins for 4.x and give the some kind of proxy with downgraded API.\n. @btholt I love git tags too. Does we have any other guidelines, which asks to crate tags?\n. @MoOx why you didn't get the links when users can't understand why PostCSS plugins doesn't work, because they forgot brackets? ;-)\n. @MoOx yeap, ES6 imports are good point. Thanks for notice.\nI can agree to promote brackets version in docs, but we need to have bracket-less fallback.\nAlso postcss.plugin() is not just for bracket-less API. It also saves plugin\u2019s PostCSS version to warn users about versions conflict on plugin error. Also postcss.plugin() saves plugin name, so if some pluugins has conflict, they can warn users.\n. @btholt ClojureWerkz\u2019s recommendations already mentions tags, so we can miss it from our rules. Buut we can add a short sentense to ChangeLog rule (send me a PR).\n. @RnbWd yo can save .styles file directly in your plugin.\nOr you can use result.messages array. It is used for plugin communications.\n. @RnbWd if you have time to wait, there will be better way to do what you want.\nPostCSS 4.2 will have a Custom Syntax. For example, we can build a custom parser to read some syntax sugar like Stylus. Or to process SCSS.\nBut we will ba able to make a custom stringifier too (for example to move CSSComb on PostCSS). So you will create just a custom stringifier to create a JS object.\n. less-plugin-autoprefix just run a PostCSS with Autoprefixer after LESS.\n. In preprocessors you can create a mixins with a prefixes. You can\u2019t take a CSS syntax tree and try to find any box-sizing properties. Does I understand it right?\n. @matthew-dean I am more Sass user, so maybe I have a mistakes in Less API.\nCan you show me a docs, how I can read and change CSS AST by Less?\n. I found the addPostProcessor but this post-processor receives a CSS string. So it is still impossible to do Auutoprefixer. Because you can\u2019t make a such complicated thing on regexps. This is why PostCSS has a parser and CSS nodes object API to manipulate with CSS nodes tree.\nAnd this is why Less (as I saw by tests) is not even close to Rework/PostCSS postprocessing idea.\n. @seven-phases-max where I can read a docs about working with Less AST?\n. @seven-phases-max undocumented API is not \u201cwe has full postprocessing support\u201d ;).\nMaybe you can suggest better sentence to tell that idea ore correctly?\n. @matthew-dean I am not against text changes. You can saw it above. But I can still understand what Less plugin API gives. Where I can get full methods list. Maybe you have a tests, where I can read about this API? Does they update source maps? Does it has access to full AST?\n@ben-eb there is really not way to do Autoprefixer in Stylus and Sass. I migrated from Sass because there is really no way.\n. @seven-phases-max OK, I read all your examples. Does I understand right, that plugin can subscribe on parse a function or rule event (like in SAX parsers) and event listener can return new nodes to replace parsed?\nBut what if I need to look around the parsed node? For example:\ncss\na {\n    tab-size: 4px\n    -o-tab-size: 5px;\n}\nshould be compiled to:\ncss\na {\n    -moz-tab-size: 4px;\n         tab-size: 4px;\n    -o-tab-size: 5px\n}\nSo, when we get tab-size we need to look forward for vendor-spefic hacks.\nHow I can do it with this SAX-like parser? I think I miss it in examples.\n. @seven-phases-max So I can get all nodes by visitRuleList? And there is some node.source to set origin node?\n. What about this changes? https://github.com/postcss/postcss/commit/859b34f3a7282eecae5fbc408de920a0c1b84916\n. @seven-phases-max I mean how you will generate a source map. For example, you need to know, that -webkit-transition source if transition property.\n. @davidtheclark we already mention \u201ccssnext\u201d features in second section \u201cFuture CSS\u201d.\n. @davidtheclark there are limits technically :).\n. @davidtheclark I am open to change features structure. What do you suggest?\n. @davidtheclark what about:\n\nNew abilities: PostCSS plugins can read and change every part of CSS. It makes possible many new classes of tools. Autoprefixer or postcss-colorblind are a good examles.\n. @MoOx many plugins has limitation and we anyway mentions them in README.md.\n. @MadLittleMods can you change commit:\n- at-rules instead of @rules\n- links is sorted by plugin name length\n. @MoOx I am not happy with forks, but right now I saw no rules to dismiss it.\n. @ben-eb I afraid many packs author will forget to add this checks. It works for PostCSS core.\n. Yeap, but most of plugins have collisions, so whitelist of non-collision plugins is better, that blacklist.\n. @tunnckoCore what exactly API you are talking about?\n. @tunnckoCore code is a best way to describe architecture. Buzzwords can mess us if we didn\u2019t see real code.\n. I suuggested this API:\n\njs\nmodule.exports = function () {\n    return postcss([ plugin1, plugin2, stats ], { ignoreDouble: ['stats'] });\n};\n. Warning is not a solution, because I think main problems will be with doubles between two packs.\nLike postcss-calc in cssnext and cssnano. I want to create PostCSS Lang (\u201cSass\" plugins) and it will contains postcss-calc too :-).\n. Yeap, @MoOx Autoprefixer order example is good point. Let's think about @ben-eb API.\n. I think we can add some version control only on second iteration, only if we found real problem. \"Always latest\" is a good strategy, because PostCSS plugins is very small and have one feature. Outdated version promotion is bad.\n. I think the latest idea was to make it by hands. But I think it is not so easy.\n. @ben-eb \njs\npostcss.plugin('name', function () {\n    return function (css, result) {\n        result.processor // PostCSS instance\n    } \n});\n. Just add this plugin checker function as first plugin to your processor instance. You can modify result.processor.plugins\n. But maybe it is not the best way, but it works right now\n. What is interim module?\n. I think better to put this module into cssnano to do not create future ghost projects :).\nI can add a plugins pack API on next week if you suggested good one :).\n. Ouh. Let's think tomorrow :-).\n. @MoOx warning is a good when people pick other plugins by hand.\nBut what if user take a several plugins pack and Autoprefixer is in other pack?\nMaybe we should use:\n1. Each plugins pack will have a code to look into processor.plugins and disable so plugin.\n2. If it is a bad plugin pack with that code or user pick plugins by hand we will display warning.\n. Maybe we need some init callback in postcss.plugin() to work plugins list. I remember that @MoOx asked about it long time ago, put I think we didn\u2019t find a good API for it.\n. @tunnckoCore in your example you will parse CSS two times\n. If selector hasn\u2019t ,, we can use rule.between to select \", \" or \",\".\nIf selector has , we should use it, for example \",\\n\".\n. https://github.com/TrySound/css-list\n. @lydell yeap, right now we have time for this :D\n. What you think about fixing it ok merging with your awesome parser? :-)\n. BTW, can you make a PR with link to your parser in any related sections in API docs?\n. Done 8fdd17b\nIn 4.3 I think we can use @ben-eb smarter solution\n. I think we need special section Fun :-)\n. BTW. I think to remove plugins from packs from this list. It became too big and I think there is no sense to use cssnano/cssnext plugins one by one.\n. Or maybe move them to sublists in Packs section\n. My current plans to start building a PostCSS site after Autoprefixer 5.2 release.\n. Also we need a PostCSS playground with ability to use any set of plugins.\n. @whdigger what do you mean?\n. @simonsmith BTW, why you think that Gulp list is better, that current categorized list (in current size)?\n. @simonsmith search is very good for some case. But not for cases, when you didn't know what to search (it is a popular case in PostCSS, because it is a new tool class).\nI am thinking right now, how to join benefits of categorized list with autogenerated pages like Gulp plugin list.\nBTW, do you know, that you can send a anchor link to any section on GitHub's READMEs?\n. @simonsmith yeap, autolist is better. But right now I manually watch for new PostCSS plugins. I didn't add that plugin, because we already have pixrem. But seems like postcss-pxtorem now much powerful. Does it better that pixrem?\n. @simonsmith ouh, I misunderstood plugin task. What is a point to converting all sizes to rem?\n. Close for 391\n. Do not worry, I will make it for 4.2\n. Done by @ben-eb \n. Ouh. I didn\u2019t like a virtual properties by getter/setter, but I think we have no other solution.\nI will fix it after CSSConf.\n@evilebottnawi @MoOx can you help me, please? Can you invastigate the best way to define virtual property, that will looks like common JS property. For example, it should be disableable in console.log(decl).\n. @ben-eb we can, but value will not be displayed in console.log and many users don\u2019t read docs and will use some strange things like decl.raw._value.\n. They will use raw property and will get same type issue ;-).\nAny way, our API should be simple to developers. So it should be inspectable. I think defineProperty had options to make it inspectable.\n. Some extra property with long name is OK. Question is only to see node.value in inspect.\n. We need to override Node#inspect to show value getter instead of _value.\nIt could be useful in #296 too.. @soenkekluth of course, we always willhave cases with a different result. Specially, when we have big architecture difference.\nRight now we are sure, that PostCSS parse Bootstrap faster. And PostCSS has same perfomance in appling mixins, nested and variables by plugins, used in benchmark.\nBut your case is interesting. Let\u2019s try to find a difference between your case and benchmark:\n1. What plugins do you use? I think postcss-custom-properties should be slower, that postcss-simple-vars, because W3C spec is much more complicated.\n2. How you CSS generally looks like? In benchark we have a Bootstrap CSS and 100 mixins/vars/nested rules. Maybe you use bigger depth in nesting? Or maybe you have much more mixins?\nHow we can make benchmark more real?\n. @scottkellum 3. Do you use a source maps? What tool you use to tun PostCSS/libsass?\n. @scottkellum oops :-) sorry I mean a @soenkekluth in last message\n. @soenkekluth what do you used for prefixes in node-sass? Autoprefixer has many checks abd look backs, so it can be very slow.\n. @soenkekluth I think some plugin is a bottleneck here. Can you disable plugin by plugin (except postcss-import of course) to find the slowest one. I think Autoprefixer will be a slowest.\n.  @soenkekluth 60 ms is for nodesass+autoprefixer+lost?\n. @soenkekluth very interesting. So it is not problem of CSS parsing and problem is definitely in some plugin.\nCan you disable it one by one, please?\n. @MoOx can I ask you to look at postcss-import performance? I can help you only on next week?\n. @MoOx I made separated issue in postcss-import to send it for my friends who can helps https://github.com/postcss/postcss-import/issues/41\n. @bmds can you me your Grunt configs for both cases?\n. postcss-import was rewritten to use async API\n. @MoOx cssnext still not pass Plugin Guidelines?\n. a9b88a0\n. @MoOx :D\n. Awesome!\n. @simonsmith can you write a tweet about this plugin? I will retweet you in Sunday and write a second tweet on Tuesday.\n. Awesome. Did it pass a PostCSS Runner Guidelines (you can find it in docs directory)?\n. I checked it. Nope, it doesn\u2019t pass Guidelines. I will accept PR only when we will fix it. I wil create a issue.\n. https://github.com/theprotein/enb-postcss/issues/1\n. Great work. Merged.\n. Maybe manual Warning construction is a better way?\njs\nvar Warning = require('postcss/lib/warning');\nvar warn = new Warning('my own text');\nresult.messages.push(warn);\n. @davidtheclark I afraid right now that current API suggestions is too complicated to use and to describe in docs.\nMaybe the better solution is to store origin tokens from tokenizer step and then we will able to set token option. But what if some plugin changed value before our linter?\n. What about this API:\njs\nnode.error('Unknown variable $one', { word: '$one' })\n. @davidtheclark { word: ' ,' } will highlight only first word.\n. Yeap, anyway we need a index, even with word option, because word option will just create a index.\nBut index API seems very complicated for me. Specially, that we need to use decl.before to calculate this index. I think it will be difficiult for user and we need some better API, which is focused on user cases.\nBut I understand, that word option is not so flexible. Maybe:\njs\nnode.error('Msg', point: str => str.lastIndexOf('word') )\n. Or we can do this way:\nWe will have simple API for simple cases:\njs\nnode.error('Msg', { point: 'word' });\nAnd advanced API for complicated cases:\njs\nnode.error('Msg', { point: 123 });\n. Yeap, let\u2019s choose a name for option :). I afraid if index option, because in context of error/warning it is not so clear (we are in right context right now, because talking in this issue, but users will be in different context).\n. Yeap, position is nice.\n. @davidtheclark good note about position\n. Done e8df88b4bcece1a881f299db5b39fdbbe84a2c6d\nIn docs I promote only word option right now.\n@davidtheclark but Warning has not API to use word because toString() do not show code example. But result.warn('text' { node: node, word: ':' }) anyway will save word or index to warning instance. Do you need some sugar?\n. @davidtheclark \n1. yeap, positionInside() has this API\n2. nope, result.warn has not this API.\nProbem is that Warning do not print line and column. Maybe we should add them to valac. What do you think?\n. Maybe we should use shorter API by accepting word option directly in result.warn with string or index?\n. Right now any Warning options is saved into object, so you can use line and column in that way.\n. Yeap, but maybe e should move this logic to Warning in 4.2?\n. line an column props is better to have same API as CssSyntaxError.\n. Done 31f3e86\n. @admdh technically PostCSS is node.js project. So it is very easy to use it from JS code.\nBut I think you ask about some out-of-box solution for some exactly case? What is your user case?\nI think on-the-fly CSS processing in production is a very bad way. Gulp in deploy step is better solution for most cases.\n. There is no harp support right now out of box. But it is really very easy to add it.\nCaan you add a issue in harp repository? Post then link here and we will support you there.\n. @ben-eb fuck I miss your comment :(\n. I created issue there https://github.com/2createStudio/postcss-sprites/issues/2\n. @kristoferjoseph please ping me when you will fix a plugin guidelines. They are very important for PostCSS ecosystem.\n. Awesome :)\n. @e-karma is this issue is just a announce to joins us to that issue? Or you need something from PostCSS codebase?\n. OK, I will close this issue to make issue list clean.\nBTW, @MoOx maybe you will be interested to in that issue with Ember, because they think to build in cssnext.\n. @aaronbushnell do you use @import at-rule in your PostCSS file?\n. @MoOx ouh, I miss a link.\nVery strange case. In previous versions of PostCSS benchmark I test a Bootstrap with full cssnext and have even better results, that now.\n@aaronbushnell maybe you have different case because of different environment? Can you clone and run preprocessors benchmark? https://github.com/postcss/benchmark\n. @aaronbushnell I think you can just pass a empty array to gulp-postcss. @w0rm\n. @w0rm can you help us. Maybe we found a performance issue in gulp-postcss.\n. @ben-eb I thought that Stylus was too fast :-D.\n@aaronbushnell Can you post time with fixed Stylus task?\n. @w0rm it is my fail, there is not even a Gulp issue :)\n. Thanks for error. But could you open it in grunt-postcss. It is grunt relevant, but I have no experience in Grunt.\n. Please check PostCSS Plugins Guidelines. At least, you need a postcss-plugin keyword in package.json.\n. Ping me when you finish\n. What user cases we have for this place of config? :)\nBTW, packkage.json can\u2019t be used itself, because many PostCSS plugins accepts functions and other complicated types in options.\n. We moved PostCSS plugin to postcss/plugins.js and include them in gulp by postcss( require('./postcss/plugins') ).\n. @MoOx maybe we should ask postcss-cli author. Because PostCSS core has no API for this behaviour.\n. I can't see any benefits of this. Only disadvantaged:\n- extra code for FS, which will be unusable in web only solution\n- unexpected behaviors, when PostCSS works different in different current dir\n- impossibility to config any plugin\n. Interesting idea. I will accept it, when I will be at home.\nBTW, why not just using rem?\n. Maybe we should add __ to a property name?\n. @ben-eb current PostCSS public API is to parse any CSS and save errors inside. \u201cParse do not lint\u201d, because we have separated linter tools. There is parse can parse why nested rules.\n@geelen can you wait a few days while we will think about best API?\n. @karantin2020 Babel is only development dependency. When I compile PostCSS, there is no Babel and babel-runtime with Promise polyfill. So PostCSS build depends on es6-promise.\n. In 5.0, we will stop to support node.js 0.10 and remove es6-promise from dependencies.\n. @karantin2020 are you understand that PostCSS is used not only with webpack? ;) So babel-loader can not be a decision.\n. Awesome. I will add it soon.\n. @yisibl I will happy with this two plugins. They convert -webkit- gradient and flexbox to unprefixed versions.\n. @hallvors can you send a PR to Autoprefixer docs?\n. @hallvors you can, for example, add one more section to Autoprefixer FAQ\n. I agree. I think we should change all clone and before/after login in 5.0.\n. Yeap, I think to fix this issue in 6.0/7.0 with raw properties refactoring.\n. @ben-eb maybe we should release 6.0 in next week? Remove deprecated code and fix clone?\n. @bb010g ouh :D honestly, not in first half of 2017 \u2014 I am working on Logux.\nWhat problem do you have? Maybe I could help you.. Done b84cdb1. @luisrudge \nPlugin Boilerplate: https://github.com/postcss/postcss-plugin-boilerplate\nAPI: https://github.com/postcss/postcss/blob/master/docs/api.md\n. @luisrudge you need to create a plugin:\njs\nmodule.exports = postcss.plugin('postcss-flexbugs', function (opts) {\n    return function (css, result) {\n    };\n});\niterate through declarations:\njs\ncss.eachDecl(function (decl) {\n});\nMake some tests on every declaration. If we can\u2019t fix it, add a warning:\njs\nresult.warn(text, { node: decl });\nIf we can fix it, we should build other nodes by PostCSS API:\njs\nvar fix = postcss.decl({ prop: 'flex-basis', value: val, source: decl.source });\ndecl.parent.insertBefore(decl, fix);\ndecl.removeSelf();\n. @luisrudge are you in? I already scheduled a tweet on tomorrow to promote this issue :D.\n. @luisrudge also we have a 24 hours support in Gitter (thanks to @ben-eb) :D\nhttps://gitter.im/postcss/postcss\n. @luisrudge OK I will change a tweet text to promote it as future feature, so you will not have opportunity to loose it :D\n. I will fix order :). Thanks for plugin\n. Why you want to keep normalize.css?\n. Autoprefixer doesn\u2019t remove outdated prefix if there is no unprefixed version near by.\n. Adapters is not a plugin in PostCSS terms. It is a runner. So can you send me other PR with your awesome tool in Usage section? :)\n. Yep, very strange that Gitter native badge s not compatible with Travis CI.\n. I thought that we have this feature in cssnext. Do we?\n. OK, I will accept PR when I will be in hotel. I think we need to fix spellchecker dictionary to fix a Travis\n. Done https://github.com/jonathantneal/postcss-conic-gradient\n. Yeap, seems like good thing :)\n. I will check it in weekend and maybe take a benchmarks result (does browsers works with const in different way?).\n. Babel compiled const to var so we can\u2019t see changes right now :)\n. @ben-eb as I remember you can put them to CSS too :).\n. @ben-eb ouh, it was so excited time :D \n. Parameter is bad idea. We just need support utf-8. I will try to find source of error on this week.\n. Done dbafda0\n. Released in 4.1.13.\n. @sydneyitguy could you explain from beggining, what do you do, show stacktrace.\nThis codepage is from input source map or PostCSS generates it?\n. Yeap. Can you open a separated issue?\n. I mean that your error is not relevant to this issue. Same error message, but different source.\n. I can\u2019t accept it right now. Only as part of 5.0 API changes.\n. Or maybe as part of 4.2, because it will not broke a API.\n. Should we remove in 5.0 also arrays? append(array) to use only this method?\n. @lydell ES6 syntax is too new for us. I just know some stuff just today from @gaearon.\n@jonathantneal wait for PR updates with more ES6 :). Welcome aboard :).\n. @jonathantneal I am ready to merge it with 4.2 branch. Just wait for ES6 fixes :).\n. Merged\n. Nice idea, this plugin will be very useful.\n. Can you please order your plugin by ABC and link by length?\n. Oops. Can you make a commit to this PR with postcss-conditionals fix too?\n. Note that postcss- prefix. Correct form is:\npostcss-a\npostcss-z\na\nz\n. Close for 391\n. Also I want a good art work for site. Something like pixelart or/and watercolor. Funny but about black magic.\nCan you recommend a good artists to place a order?\n. This issue has many good ideas of Plugins section: 333\n. @omgovich GitHub issues is a better way to discuss. But we should promote creating plugins issues on website.\n. @simonsmith Getting Real is always good :)\n. Guys, who want to be a leader in this project? :)\n. Right now we have a few tasks, and I think they are more important.\nBut I can ask some people. Many developers want to help. We need only a leader :D.\n. I add a repo for @marcustisater https://github.com/postcss/postcss.com\n. I think we can close this issue.\n. I think there is no sense to remove Sass in your case. PostCSS do not need exclusive rights to yours style :-).\nJust add PostCSS right after Sass complication step.\n. Nope, this way couldn't be exists, because you lose all PostCSS benefits by making Sass compatibility.\n. Aweome work. We can merge it tto 4.2 branch.\nBut let\u2019s recheck our API again.\nHow did you see a this API user? How user will calculate indexRelativeToBefore?\n. This API seems too complicated and out of user cases for me.\nI afraid that we will over-engineering API if we will go in this direction.\n. Direction of setting index to got warning position.\n. Yeap, I am like idea of separated module too :).\n. OK, now we have a API. And anyway we need some internal API for this API like node.positionAt().\nLet me just return to my city to have a clear mind. Anyway we can\u2019t release this helper until 4.2 :).\n. No problem, I will add it after Custom Syntax finish.\nI want to avoid calculating before in index and try to find better option word to promote word based position, not complicated integer.\n. Merged to valac\n. @jonathantneal is postcss-short already a plugins pack?\n. @jonathantneal but why you do not use plugin for every property shortcut? Like cssnano or cssnext with modularity?\n. Oops :) Thanks for fix.\n. You need to fix it before I can accept this PR: https://github.com/whitneyit/postcss-strip/issues/2\n. You should ask in grunt-postcss repo. It is not PostCSS specific, as I understand.\n/cc @nDmitry \n. What is a difference with postcss-for and postcss-foreach?\n. Same as postcss-each.\n. @verybigman I think you should remove this repo, because postcss-each already do it.\n. postcss-each plugin CSS:\ncss\n@each $icon in foo, bar, baz {\n  .icon-$(icon) {\n    background: url('icons/$(icon).png');\n  }\n}\n. @verybigman you already fork postcss-each. Why? WHy not PR to postcss-each?\n. Yes, you should send PR to postcss-each and make a fork only if postcss-each forbid your PR.\n. Fixed f77611d\n. Released in 4.1.14\n. I very like postcss-w3c- prefix, it makes clear.\nI think -pseudo-class- makes namess too long.\n. @MoOx this point has sense if you think logically, but looks like very weird in practice.\n. @seaneking can you fix spellcheck issues (there is dictionary in .yaspellerrc) and fix description width to take only one line on GitHub?\n. Nice plugin. I also add link to it to postcss-mixins https://github.com/postcss/postcss-mixins/commit/54aed1530fb68b2c8680fe4a47f4542de9cb7523\n. Awesome plugin :). It has few relations with postcss-define-property, but I think they are completly for different cases.\n/cc @daleeidd\n. Just set SCSS format to highligh postcss-nested. Without postcss-nested CSS highlight just works.\n. We will talk with text editor authors when we have better understanding what PostCSS support we need from them.\n. Atom and Sublime already have good plugins. JetBrains still ignore (don't use IDE if you want to work with modern stuff).\n. Can you describe your user case for this library? Maybe we can find better API.\n. Why you need types here? postcss-mixins hase same semantic without types.\n. I think about API. Maybe we should start to parse values in PostCSS 4.3. For example:\njs\ndecl.valueContent //=> [{ type: 'length', value: '1px', unit: 'px', number: 1 }]\n. Yeap, I think about some on-demand parse here, because it can be very slow.\n. @davidtheclark yeap, I think to move this parser to core in 6.0. or 6.1.\n. I will accept it after lunch :)\n. What if somebody will add plugins before itself?\n(css, result) => {\n    result.processor.plugins = [newOne].concat(result.processor.plugins);\n}\nBecause we use just a array index in lazyResult.currentPlugin we wil have infinity loop.\nOr we should ignore it as rare case?\n. Released in 4.1.15.\n. Show please full error stacktrace to see the source of error\n. Ouh, today is not my day :(\n. @isairz what is a Module build failed: ReferenceError: log is not defined error? :-/ I can\u2019t find any log in input\n. @gpleiss sorry, I will use you as debug tool (I try to reproduce it on my projects with PostCSS, but they are fine).\nCan you debug into PostCSS\u2019s lazy-result.js. There are two places with throw 'Use process(css).then(cb) to work with async plugins', can you find what places is used? Maybe just by console.log in their if statement?\n. @gpleiss if it is if (isPromise(promise)) { can you show what is in promise and plugin above?\n. @isairz do you use postcss-loader also?\n. @isairz postcss-loader explain two errors :)\n. @gpleiss can you add\njs\nthrow new Error('debug')\non one line above\njs\nthrow 'Use process(css).then(cb) to work with async plugins';\nI think we have o stacktrace because I used string error.\n. @gpleiss awesome, we are close\n. @isairz can you update to 4.1.16 and post your error message here?\n. @gpleiss seems like your bug came from postcss-import update, not from PostCSS\nProblem is that gulp-cssnext doesn\u2019t use async API (as error says). I create a issue for your, you can write something there or just subscribe to it: https://github.com/cssnext/gulp-cssnext/issues/8\n/cc @MoOx \n. @isairz Very strange, why Use process(css).then(cb) to work with async plugins error still has no backtrace to find that async plugin.\nCan you disable postcss-loader?\nWhat css-loader config do you use?\n. @gpleiss we are all family with cssnext, cssnano, css modules, etc ^_^\n. @isairz I create this issue for you, please report config there: https://github.com/webpack/css-loader/issues/95\n. Awesome. I will promote this plugin in Friday.\n. Initializer is called without option only to fill init.postcss field. It will be used if user will use plugin without brackets:\njs\n.use( require('my-plugin') )\nWhat end-user problem you have with this logic?\n. We can add lazy load for bracketsless form in init.postcss by getter.\n. Done https://github.com/postcss/postcss/commit/f92780de76f0c0d098a7bb5ad4fa9afbb7cb168a\n. I can\u2019s still understand what is user case for this plugin? Does it CSS Modules specific?\n. Maybe you should put link to your module in CSS Modules docs? I afraid that most of users will be confused of you plugin because that do not understand any context of this plugin usage.\n. Awesome. I will merge it to 4.2 and will add some test.\nGood addition, @jonathantneal\n. Merged into valac branch.\n. Nope. You can write it. It is very easy.\n. Yeap. Please checkout \"Develop your own plugin\" section on PostCSS README. It contains very important Guidelines.\n. @TCotton I already made few issues\n. Nice plugin.\nBut can you remove Fix build commit? I fixed it in different way.\n. Good start, but this plugin duplicates other without any benefits or different API.\nI wait next plugin from you :-).\n. First solution: compile your CSS on npm release.\nSame case as with ES6 and Babel right now.\nProblem: some users want to keep origin source code in npm package.\n/cc @SavePointSam\n. @MoOx nice example. I am talking about Web Components like stuff with React + CSS inside. For example, yesterday I build awesome bankcard widget and want to share it with my company. But other teams use different PostCSS plugins.\n. CSS Modules looks like a best way to isolate widget. But what if other team will not use webpack. And of course, they didn\u2019t want to install some addition plugins to their builder.\n/cc @markdalgleish\n. @MoOx yeap, I agree that it is not easy. So this issue is more about long-term discussion.\nBut I think current CSS do not provide good way to share components:\n1. We need better isolation\n2. Sometimes we need some config.\n3. We need to use images from CSS, so other PostCSS plugins can be welcome in component CSS.\n. @MoOx maybe :). But not right now, because we need some out-of-box solution. Just a few lines of code to add some awesome widget from Internet.\n. @MoOx we could have missed many science and technically inventions if we said like this everytime ;). \nLet\u2019s plan in brainstorm. How we can solve it if we have no limitations.\n. @magsout nice start. So we can make a example how to configure package.json to compile src/ to dist/ on publish step.\nWhat about configuration? We cen ask users to install PostCSS to configure PostCSS\u2019s components in CSS. Somethink like:\ncss\n@use bootstrap;\n@config bootstrap { color: red }\nFirst line load PostCSS plugin inside a component by postcss-use and this plugin process second line.\n. @sevenupcan you can use webpack and style-loader to put CSS into JS file.\nBut yes, it will be better to have out-of-box solution.\n. About mixins:\nI afraid that many developers will ignore PostCSS nature and will just move their Sass mind model to PostCSS plugin. I saw few PostCSS plugins which unnecessary provide mixins for postcss-mixins, instead of use custom syntax, which will be much better in their task.\nOther problem with mixins, is that PostCSS plugin should be independent. But mixins will require to put postcss-mixins above itself. What if user do not want to use mixins? What if it put postcss-mixins above. It is a good place to have issues.\nAnd last but not least: PostCSS mixins are simple templates to reduce code dublication. They are not soem sort of \u201cfunctions\u201d like in Sass. Because in PostCSS philososhy we need to write code on JS, not in CSS. If developer will not change mind set and prodive old Sass way, it will put too complicated code into PostCSS mixin, it will reduce code maintable.\n. About postcss.plugin(): I think that we should keep Guidelines short as possible, to make it absolutly clear. But I am open for suggestions :).\n. About I/O examples: you are totally right. @ben-eb has same issue with Guidelines. Please send a PR with this fix.\n. Note that plugins had a abc order and links had a length order ;).\n. @ben-eb and order is wrong :). I wil fix it.\n. @MoOx I am OK with high specific tools for one purpose. Sometimes it is difficult to understand how to use postcss-url in this way. And anyway you will have a some unshared code in postcss-url callbacks.\n. @MoOx but postcss-url can\u2019t do postcss-assets-rebase behaviour without the line of code? I mean, that anyway user will be forced to write few lines for callback. And of course he/she want to share this code. This is why some specific solution is OK.\n. @MoOx hm, my mistake. So postcss-assets-rebase can be full reproduced by postcss-url just with configs?\n@cakeinpanic what do you think?\n. Yeap, I am thinking right not to remove this plugin.\n. Yeap, the problem with dublicate is not that it is equal, but in splitting forces. It is always better to put forces to one project, than support two.\nBut I am not against adding it to list.\n. postJS = Babel. It is not only es6\u2192es5 tool, you really can do many different things.\npostHTML is XSLT, but it is ugly :D.\n. @Guria awesome! i will promote it tomorrow by PostCSS twitter :D.\n. @justim Thanks. Cool PR id :).\n. @jedmao I am open for PR, but please make it for valac branch.\nSorry, I can\u2019t help you, because I can\u2019t make any investigation without Windows (I am Fedora user). I agree that it is important issue, but I need your help here. \n. It is a branch for 4.2 release. It is almost finish.\n. 4.2 release will have a President Valac code name.\n. Yeap, JSON\u2019s seems to be to hacky.\n. @jedmao but do not miss gulp cases task to update tests.\n. @jedmao Can you test valac branch on Windows? I think this fixes can help:\nhttps://github.com/postcss/postcss/commit/b3b49811703eea98b5a5caf8a5e374d6436578aa\nhttps://github.com/postcss/postcss/commit/626ae02abfc4c8125dab4f29e044fda2d5f29671\n. I tried to test it myself, but running node.js on Windows is so difficult :(. I still have Unexpected token case on mocha execution.\n. What is a befits of AppVeyor in comparasion with Travis CI?\n. Hm. It is interesting. But I will need your help.\n. @jedmao it is useful PR, but:\n1. I need some info to update them on API changed without you.\n2. You need to make PR for valac branch, because current master is old 4.1 release. valac is branch for 4.2 and it has API changes (also I plan to make some changes in this weekend).\n. Awesome plugin! Really amazing.\n. @andyjansson I asked what exactly highlight to you mean? Most of plugins provide just custom at-rule with one/two parameters.\n. @andyjansson can you show me example on screenshot?\n. Can you show me just a example of pllugin when non-SCSS highlight will be better.\n. Maybe we can highlight PostCSS\u2019 props and at-rules in different color to split standard and non-standard things?\n. On next week I will go to JetBrains office to talk about PostCSS support in WebStrorm.\nBut note, that it is a big slow company, so PostCSS support could be added only in next-next release (I as know next release is very soon and they can\u2019t add new features).\n. https://github.com/postcss/postcss#ide-integration\n. I am from Ruby world, when we belive, that developer should be free. Also I worked on Java and Ruby and I didn\u2019t belive, that typing is really useful and protect from something, that can\u2019t be find by tests.\n. But I have few objective reasons:\n- We use not ES6, but ES7. Also I prefer to stay on Babel compiler, because it fast development.\n- Can you show real example, how we can save developing time by TypeScript? How many tests can we miss. How we can clean our code?\n. Ouh, there is a most important reason, why we can use only standard JS. PostCSS should be open for every developer.\nPersonally, I prefered CoffeeScript, but moving to ES6 gives many new developers. So we can\u2019t move to TypeScript. Developers will afriad to contribute, even if you need 5 minutes to learn new syntax.\n. ES7 right now for class properties, but I have plans for some other sugar too :).\nDo I understand right, that in-editor documentation and type information can be prodived by .ts files (BTW, I think .ts files are cool, I still wait your PR for valac :) ).\nProblem with developers is not rational. They afraid just different file ext or non-JS contsructions in code.\n. @johnotander yeap, using Message API will gives your power of many already written reporters. For example, to display messages in browser.\n. Maybe it is not a good time, because you already finished, but I have different idea :D.\nMain problem is that your forget also to fix gulp cases task. It is very important to generate this tests automatically. When you change parser, you definatly didn\u2019t want to change every test :).\nSo my idea is to write some toJsonForTest(node) function, which will recursively change object to some state-less state. You can see at Node#toJSON as example.\nWith this function we can fix paths for Windows. And also generate JSON back to files from gulp task, when we will change something in tests.\nWhat do you think about it? (I afraid that I explain idea not in best way :) )\n. @jedmao hmmm, nice idea. But for we can store pre-tested data on Travis CI?\n. What do you mean?\n. @jedmao but how Travis CI will know that it is correct JSON? pretest will be runned on same code, that should be tested.\n. @jedmao cases is a \u201creference testing\u201d way. In some point we sure about parser and we make a reference copy of how it must work. Then we just test, that parser still reproduce same output as before.\n. Hm. Strange. Current tests use same way to gerenate object for JSON, convert it to JSON and compare.\nI will check code for some performance leaks tomorrow.\n. Because, I found shorter solution, I took same ideas from this commit on put it under your name to sae your for history: https://github.com/postcss/postcss/commit/b3b49811703eea98b5a5caf8a5e374d6436578aa\n. Ha. Really awesome plugin :D.\n. Very good that you post this plugin before Friday :).\n\u201cPostCSS solved vertical centering problem of CSS\u201d will be a awesome tweet tomorrow :D\n. I need extra info. PostCSS do not remove any comments by default (it is a goal of PostCSS, byte-to-byte equal output).\nThis is a logic for cleaning previous source map comment, if you ask to generate new source map: https://github.com/postcss/postcss/blob/master/lib/map-generator.js#L64\n. I signed up and added  project. But seems like AppVeyor takes only master, so we need wait for valac merge.\nThanks, you made big work for Windows. I wait .ts files to finish your Visual Studio integration project :).\n. @MoOx one person meetup is fine for marketing plan too :).\n. Hi, again. Birthday is on next Monday, September 7. So this Saturday/Sunday will be great time to make party photos.\nI will make special event in Saint Petersburg (ping to @brainopia @cakeinpanic), but it will be fine just photo of yourself with some selebration stuff. Just to show how big our community is. If your photo will contain some things from your country (city attraction, nation cliche), it will be better. \nAnyway, I think it is a great motive to break working routine :). Maybe if you live in same city with other contributor or plugin developer, it will be cool motive to meet each other in real world.\nHow is in? I need photos in Sunday to make a post.\n@MohammadYounes @yisibl @ben-eb @jonathantneal @MoOx @morishitter @davidtheclark @jedmao @hail2u @shinnn @borodean @iamvdo @andyjansson @corysimmons \n. BTW, I need a photo of selebration. To show common event.\n. @corysimmons awesome! What is a date of your talk? I will promote you by PostCSS twitter account.\n. @corysimmons :( please ping me, when date will be closer\n. Meetup in Russia, Saint Petersburg https://vk.com/postcss2y\n. So, I wait a photos tomorrow. Just a selfie how you spend a day. Maybe dinner with family. Or developing some code. If you company uses PostCSS, your office photo wil be awesome.\nAll that photos will be used in birthday post at Monday.\n. @yisibl awesome :)\n@morishitter also wait photos from Japan ^_^\n. Technically, today is OK, but mention that birthday is tomorrow.\n. @morishitter @yisibl @ben-eb @jonathantneal send your photos to andrey@sitnik.ru\n. Thanks everyone, who helped :).\nPost is ready https://medium.com/evil-martians/postcss-2nd-birthday-2c76c223c78f\n. First step 0945046f2b8022f63409ec056f7e237d38ecc59b\n. Fuck, all prepublish way is wrong. npm do not call prepublish for packages from GitHub. So there is not sense in this way (building build/ and maing cd build; npm publish ./ is easier).\nAlso I tried postinstall, but it do not work too, because npm by some very strange reason call postinstall before installing all dependencies.\nSo right now there is no way to compile ES6, when user got your packages from GitHub. Only index.js on-the-fly hook, like PostCSS was used.\n. For PostCSS it is more important, because sometimes we may try to unreleased API in plugins. Or maybe I was too happy in Ruby world and really mad, why npm team do not handle this case.\nAnyway index hook works fine (not ideal, but fine). I have babel-core in dependencies and call babel-core/register in index.js. build task fix package.json before release by cleaning dependencies and remove index.js.\nNot ideal solution, but it woks for most cases out-of-box.\n. So, guys, are you in? :)\n. @ben-eb valac branch already has warnings in before getters. But I want to use .before as insert method like DOM has (wwe will be able to add this methods in 5.1). Also if we left warnings, we will be forced to keep them until 6.0.\nBut I am open to dicussion.\n. OK, I will change ES6 hook on this week, so you will be able to make branch depends on PostCSS branch.\n. Also 5.0 will throw a clear error, when somebody will try to access to removed methods. I think it will help with migration.\n. @ben-eb yeap, it was my origin plan. But we can\u2019t ship Custom Parsers in 4.x releases. So extra release will take more time.\n. We can release a 5.0 with warnings and then 6.0 with insert before/after.\n. I also moved some \u201cold 5.0\u201d refactor tasks to \u201cnew 5.0\u201d release, but they should not affect anyone (this is a reson why I ant to remove some hidden or unpopular APIs):\n- Stop using fixed version of dependencies #312\n- Remove node.js 0.10 support and Promise polyfill #311\n- Remove return Root support from plugin #231\n- Remove Root#prevMap #194\n. Are everyoone OK with often major releases, but without many break changes? So 5.0 will contains warning for before, but 6.0 will be after few months.\n. Nice. @MoOx thanks for suggestion.\nSo without a break changes we can close this issue.\n. Closed by @maximkoretskiy https://github.com/maximkoretskiy/postcss-autoreset\n. @cbas do not worry for AppVeyor, it is for future 5.0 release :). Thanks for plugin.\n. Awesome project! I will tweet about it in Friday :-).\nPostCSS API returns not a CSS string, but a Result class. So you can just add custom properties to this object.\nOr some postcss-funcss plugin can accept callback, which will receive JS content.\nI think merge is good idea. PostCSS has one of the best CSS parser. So you will get performance improvement and stable parser, which was tested on big Autoprefixer auditory. In other hand PostCSS ecosystem will became closer to main PostCSS goal: stop current CSS stagnation and move CSS forward.\nHow FunCSS works inside? Let's think what I can add to PostCSS core for you. At least, you will need a function and selector parsers and event based API, we are thinking about them right now (sorry, I can't get your direct links to issue right now, because I am not in the city).\n. Note, that current PostCSS parse is a dumb parser. It parses declarations values and selectors only a strings. But you can use PostCSS selector parser to parse nodes, that you need (it could be faster rather then parse evverything).\nSo static type is not a problem for PostCSS, because PostCSS does not to try to understand meaning of CSS. You can check types in you next values parser.\n. Yeap, you will get source maps for free if you will transform CSS by PostCSS. Also you can write a code to generate sources map for JS.\nSo postcss-javascript-output looks good. We can add source map support there (I can help you there).\n. I created few issues, but what this line mean:\njs\nif ( result.map ) fs.writeFileSync('app.css.map', result.map);\n. @cie I rethought about API (sorry that I get this ideas only now):\n1. FunCSS can use just result.messages to and put there { type: 'js', content: [string], map: [SourceMapGenerator] }.\n2. It is not a problem to ask gulp-postcss, etc plugins to support JS messages from result.messages.\n3. Maybe we need different CSS-with-JS meta package, just to generates source map. It can use some API like this:\n``` js\nvar addJs = require('postcss-js');\nmodule.export = postcss.plugin('postcss-funcss', function () {\n    return function (css, result) {\n        addJs(result, jsLine1, node1);\n        addJs(result, jsLine2, node2);\n    }\n});\n```\nThis CSS-with-JS meta package will append strings to JsMessage.content and generates JsMessage.map.\nWhat do you think?\n. @MoOx of course, CSS with JS is not best thing for perfomance. But sometimes we have a tasks, that is not so critical for perfomance (for example, real calc() polyfill). Or sometimes we want to create proof-on-concept for some new CSS spec, that is impossible on pure CSS. So I think we havve user cases for it.\nWhy you think it is dirty?\n. @ben-eb @MoOx do you understand that FunCSS is a tool to add some JS expressions to CSS?\nFor example, we can add a component media queries to CSS like @media (max-this-block-width: 300px).\n. @ben-eb your example is wrong, FunCSS is about generates app.js based on some custom syntax construction inside a CSS file.\nFor example we have CSS:\ncss\n@media (max-this-block-width: 300px) {\n  .el { color: red }\n}\nAnd FunCSS can compiles it to something like:\ncss\n.el.uniq-class-274758 {\n  color: red\n}\njs\ndocument.resize(function () {\n    if ( el.innerWidth <= 300 ) {\n        el.classList.add('uniq-class-274758');\n    } else {\n        el.classList.remove('uniq-class-274758');\n    }\n})\n. @MoOx Inline Styles has many disadvantages:\n1. It works only with client rendering.\n2. It slow.\n3. JS object is a bad syntax for styles.\nI do not say, that FunCSS is a only was to make a bridge between JS and CSS. Of course, we have other solutions. For example, one of the goals for PostCSS 5.0 custom syntaxes is to work with JS objects of properties.\nBut we should experiment with different way to find a best one. Thinking that we have only one right way is religious way to stagnation.\n. @cie but maybe really making common PostCSS plugin from FunCSS is a overengineering right now.\nThe fastest way is just use PostCSS inside a FunCSS. Like:\n``` js\nvar postcss = require('postcss');\nvar root = postcss.parse(css);\n// Make FunCSS stuff with root\n``\n. @MoOx \n1. Yeap, element media query will not be work without JS, but component will be usable anyway, just not so fancy looking. Think about Wikipedia, they provide information, not a UI. They do not need client rendering.\n2. [Class vs. style benchmark](http://jsperf.com/class-vs-style): changing anode.style[prop]is a 84% slower rather than changingnode.className. [Adding a node with inline styles vs. with class](http://jsperf.com/react-css-vs-stylesheet): DOM manipulations with node with inline styles i 14% slower. Also do not forget about bad perfomance ofel.onMouseOverrather than.el:hover`.\n3. JS is more powerful, agree. But it is not more readable, many unnecessary symbols.\n. @MoOx \n1. And what is a point for Wikipedia to make compliated frontend with React prerender? React is not a universal solution for all websites. It is just a great tool for SPA, but we is not only SPA. SPA is great to create information, but most of users want to read information, not to create it.\n2. I was born in USSR and I know too much about \u201call this problem will be fixed in future, just belive in us\u201d ;). Rendering perfomance is a most important thing. Data calculation perfomance can be fixed by loader in UI. But slow FPS is a main problem.\nReact Style is solveing right problems. But it solves it in wrong way. We should keep looking better solution.\n. @cie I belive that we must try different ideas. React on first state was strange idea. Every idea need time to find, analyse and fix childhood diseases. So, let\u2019s experiment and try to find, what we will get :).\nSo, I agree with @ben-eb that we should not add result.js. At first state we can just replace parser inside FunCSS. It will get the first feedback for us.\n. Babel has 2 projects: babel and babel-core.\nWe can have same 2, but with different names: postcss-cli and postcss. I think main problem is slow development and ideas stagntation of PostCSS CLI. I am really disappointed: no promotion, no development, unfixed big features. @pirxpilot\n. Maybe we can do it as part of 6.0 splitting PostCSS to seperated project.\nBut, do CLI tool is popular? I think most of users use Gulp/Webpack plugins.\n. @davidtheclark but right now you can use postcss-cli for CLI.\n. @bdkjones you told, that you didn\u2019t like postcss-cli. Can you explain us why? Your feedback ill be very useful for new CLI.\n. @MoOx awesome. .postcssrc will be a CommonJS module like in webpack?\n. @MoOx also we need source map options\n. @bdkjones cssnext and cssnano have separated CLI. But I am too tired on two projects. So I try to move some task to community projects.\nOf course, I think that Grunt and Gulp users should be able use PostCSS without .postcssrc.\n. @bdkjones so, what do you need from PostCSS CLI to use it in CodeKit? As I remember some users ask about PostCSS support in CodeKit. Also I will not have time for Autoprefixer CLI.\n. @brianzelip what you do not like in current postcss-cli?\n. Yeap, configs are good part. Are you want to send them to postcss-cli?\n. But if we want to use same configs in gulp-postcss, we should add this code to some common library.\nBut I didn't really want to move fs code to postcss core. It will be good to keep it simple and small. Maybe we should add some addition library and force all runners to use it?\n. Sorry that I join this discussion so late and send so many raw thoughts :D.\nRight now I am thinking of promoting postcss-use as universal way to load PostCSS plugin. It works in web tools like CodePen or online examples. Maybe with postcss-use we do not need for special config, because postcss-use covers 80% of plugins and rest 20% requires function.\n. We are here discuss some addition common config across gulp, grunt, CLI? Or we discuss some standard API, that will be promoted from us as community?\nI am not against common config, but ask us not to copy solutions, but to create best solution.\nIt will be bad if we will have many APIs to set plugins list.\n. I think we should have only 2 API:\n1. Global with callback support.\n2. Local with postcss-use.\nWill .postcssrc covers first. Will it support function?\n. Second question: why we should put this code to core? This code will be unnecessary on client-side like CodePen or postcss-js (I am trying to make PostCSS 6 smaller and extra code is not good).\n. @MoOx nobody use it because nobody know about it except CodePen users. And we can put it to core.\n. The other problem of configs in core is implicit API. I create Processor but it can change plugin list. Maybe we should make it explicit:\njs\nlet processor = postcsss.auto();\nAlso this API keeps us from fixing config and JS plugins lists merge.\n. @MoOx what you mean about tool configuration?\n. We will have 4 ways to set plugins:\n1. Runner options\n2. package.json\n3. .postcssrc\n4. @use\nWhat relationship this ways will have?\n. @ben-eb looks what users day. Many teams have problems with PostCSS because of implicit API. Because they can't copy one file to other. Or can't understand CSS in different project because of different plugins list.\nAlso IDEs do not know what plugins will be executed,v so they don't what properties was added by PostCSS plugins.\n. In file @use fixes many problems.\n1. You see what magic happens here.\n2. You can copy your code and ask advice in Internet. And they will understand what happens in your code.\n3. You can copy files across projects.\n4. IDEs (and web IDE without FS) can understand your code too.\n. @ben-eb I never write that I am against global config. At least we need it to set parser, use whitelist, etc.\nI askfor making solid API, instead of adding features without thinking of they connection with others.\n. For example, what we will do, if user set plugins in runner option, but then we find a plugins in postcssrc.\n. Other conflict case: I run Autoprefixer tool on CSS files. But gulp-autoprefixer uses PostCSS inside. It finds postcssrc and add extra plugins to processor?\n. @MoOx we can't look postcssrc in postcss(), because every file can be in different dir.\n. @ben-eb you right, I am asking about thinking about this case. Provide (but addition API is bad, we should think harder) API before release new version.\n. @MoOx every file can be in different dir, we need to look for config in every process().\nOK, runner option plugin list is more important that in config.\nWhat about other options? Parser? Source map options?\n. Maybe also it is good time to add additional API by working with different parser based on file extension?\n. But we will load all configs recursively and merge them?\nLike one config in root, second in app/styles/legacy?\n. And runner options will have high priority in merge? \n. I think we can miss root option.\nOK, this logic seems good. Let's implement it.\n. @MoOx do you need any help?\n. @Ellinokon you can do it riight now, just take postcss-cli.\nHere we discuss onlly common config file.\n. @MoOx what sync possibilities you mean?\n. Async as I understand:\njs\npostcss(plugins).process(css, opts).then(callback).catch(errorCb)\n. @MoOx only for sync plugins. So many plugins will not be able to run in sync mode.\n. @michael-ciniawsky good docs. My notes:\n1. should give a way to do custom require() in postcss.js. For example require('./my-custom-plugin')\n2. this configs should works recursively like eslinrc\n. @watilde what do you think about this config? I think you have big experience in config with your great work in postcss-cli (sorry, I have no opportunity to say thank you for it)\n. @michael-ciniawsky have no idea where put require('./some/path') :)\n. Maybe\n\"custom\": {\n  __plugin: require('./path')\n}\n. @michael-ciniawsky yeap, looks nice too\n. @michael-ciniawsky maybe we should use cosmiconfig?\n. @michael-ciniawsky hm, with extend will be hard to set plugins in right place. Maybe we should support plugins: [ { name: {} } ] and plugins: {} both\n. I think too that we could move all options out of options key. I like short syntax \ud83d\ude0a\n. @watilde do you see easy way for your users migration? We could write some autofixer like AVA did in 0.14.\n. 1. Yeap\n2. Yeap\n@w0rm are you OK with this config?\n. @michael-ciniawsky other tricky question. If we have one config in project root and other in same directory with CSS files. Should we merge this two configs or use only closest?\nI think we should use only one, because it is hard to merge plugins arrays. What if user will want to disable some plugin in subdir?\n. @michael-ciniawsky sorry, but I agree too that we need to use shared library for config. It will be much better for ecosystem to have same config behavior with Stylelint.\nextend is like include?\n. Also I think object is OK, all important JS implementations save keys order. And object syntax will be shorted.\n. @michael-ciniawsky I mean, that we have few tools in PostCSS ecosystem with configs.\nIt will be very nice, if they configs work in same way.\nI don\u2019t like extra libraries too (left-pad is a good example), but I think there are two cases, when we should use library:\n1. For tricky things like parsers (PostCSS :) ).\n2. To have guarantee same behaviour (like browserslist)\nThis is why I think using a cosmiconfig is a good idea.\n. > If you mean in the way, that the config file (postcss.js / postcss.json) should be like e.g stylelint-config-standard and the pkg.json part can be left out completely, then why not pkg.jso === postcss.json when in root\n@michael-ciniawsky sorry, I completly miss this thing =^_^=\n. @michael-ciniawsky what is use cases for extend? (other thing looks nice, but maybe we should update proposal to be sure that we understand each other correctly)\n. I thought that styles/postcss.js will override package.json. Like ESLint and Stylelint do.\nI mean, if we have:\n|-admin\n|      |-logo\n|      |      |-package.js\n|      |      |-logo.css\n|      |\n|      |-index.css\n|      |-postcss.js\n|\n|-app.css\n|-package.json\napp.css will use package.json config, admin/index.css will use admin/postcss.js and admin/logo/logo.css will use admin/logo/package.js config.\nThis thing is very useful for current components trend, when every component could have own explicit plugins list.\nAnd we don\u2019t need special extend field, we will just take a closest config.\nAlso browserslist in Autoprefixer has same bahaviour. And as I told, this behaviour is similar to ESLint and Stylelint.\n@davidtheclark am I right, that cosmiconfig does it out of box?\n@michael-ciniawsky does this \u201cfind closest config\u201d strategy useful for your use cases too?\n. Maybe we should have extend in styles/postcss.js like:\n{\n  extend: '../,\n  plugins: {\n    plugin1: null\n  }\n}\nBut how we could merge plugins arrays between two configs (package.json and postcss.js)? What if user want to insert some plugin in the middle of package.json plugins list?\n. @michael-ciniawsky so it is like a placeholder to be filled in some other config? Nice idea! Really instersting way.\nBut I just remembered important thing. We want to make PostCSS order-free in next 6.0 release. So plugin order is not really important.\nWhat if we create a simple solution without extend right now, and then implement it in future version? We will have more feedback to do it correctly.\n\u201cMinimum value product\u201d and \u201cGetting Real\u201d ideas are important!\n. @michael-ciniawsky \n\nWell, then the placeholding part lived short and partied hard :D\n\nIf you really want a placeholder feature, let\u2019s change the API to more clear one.\npackage.json:\njs\n{\n  plugins: [\n    { placeholder: 'beginning' },\n    { autoprefixer: null },\n    { placeholder: 'afterPrefixes' }\n  ]\n}\ndir/postcss.js:\njs\n{\n  extend: '../',\n  placeholders: {\n    beginning: {\n      cssnext: null\n    },\n    afterPrefixes: {\n      cssnano: null\n    }\n  }\n}\nBut I am really think that we should not implement it right now. We should have simple solution first and extend it on real feedback.\nIf we will implement some feature, we need support it until major release. And people always hate broken API. So if we don\u2019t really need placeholders in future, we should not implement it, so users will not change API and our code will be clear.\n. @voischev does PostHTML has some standard config? Are you interesting of having same config principles with PostCSS? What you think about out latest idea and that placeholders?\n. @michael-ciniawsky ouh, postcss-use is for next iteration too. Let\u2019s make first config simple, just to solve current problem. Could you update purposal docs to see our final stage?\n. @michael-ciniawsky \n\nPlugin names are without the postcss- prefix.\n1. How did you understand that autoprefixer is just autoprefixer and not postcss-autoprefixer? ;) What about cssnext and postcss-cssnext which are exist together? ;)\nPlugin names containing an hyphen must use camelCase.\n1. I think it is too tricky. We have hyphens in dependencies. It easy to copy plugin name and paste to Google.\n2. Why you put plugins to the root of config? Where we will put options like syntax or map? What do you think about:\n\njs\n{\n  \"parser\": \"sugarss\",\n  \"plugins\": {\n    \"postcss-inline-svg\": null,\n    \"postcss-assets\": null,\n    \"postcss-cssnext\": null\n  }\n}\n. @michael-ciniawsky and why we need this logic with postcss- autprefixing?\n. @michael-ciniawsky let\u2019s me show 5 examples, why assets is worse, than postcss-assets:\n1. What if user have cssnext and postcss-cssnext is project (legacy code and new code)?\n2. assets could by in package.json too. Not as PostCSS plugin, but as some npm library. So that code will not save us from name conflicts.\n3. If I find some new plugin in config, I can\u2019t just copy name to Google. I need to use complicated algorithm with package.json dependencies to understand is is just assets or it will be postcss-assets. \n4. With assets we need more text in docs. New user will not understand how it works. It can\u2019t change/read config without reading a docs about config.\n5. This autoprefixing algorithm is too complicated. Simple things are always better than complicated.\nAnd for this 5 problems we have only 1 benefit \u2014 less symbols in config. I think it is not good deal 5 bad things vs. 1 good ;).\n. Let\u2019s keep full name, you can use some custom config preprocessor if you want to keep them short :)\n. Yeap, create a some playground tools first and them move implementation to core is awesome idea.\nSo we will get first feedback before we freeze API.\n. Common config was created and implemented in most of runners. Awesome! The best plugin of the week. Illustration is goood.\n. I think to move all API.md to some sort of JSDoc comments on this sunday.\nWhat format and tool is best? @ben-eb @MoOx @jedmao \n@marcustisater what requirements do you have for usging this API on postcss.org?\n. @jedmao when I will create a JSDocs in .es6, I can remove it from .ts files? Visual Studio will look into .es6 first?\n. @marcustisater when 5.1 will be released, link to docs/api.md will return 404 ;). We need to generate API page for postcss.org by JSDoc. Are we ready for it?\n. I decide to make 5.1 very small release so I can release it on next week.\nBut if postcss.org will not be ready, we can set a link to old commit on GitHub.\n. @marcustisater or we can generate API page without any special style as temporary solution\n. @jedmao I am finishing a JSDocs. Could TypeScript uses them instead of .ts files? Because I add types for most of methods and properties.\n. I moved all API docs to JSDoc. So, where we should put generated HTML while we creating special page in postcss.org?\n. postcss.github.io/postcss?\n. Or we could put static HTML to postcss.org?\n. @jedmao seems like we can remove .ts file https://github.com/Microsoft/TypeScript/wiki/JsDoc-support-in-JavaScript\n. @ben-eb we will definitely have postcss.org/api, but API page is not ready in postcss.org repo.\n. No rush, redirect is fine. We just need to fine best place for temporary JSDoc page\n. @jedmao no problem, I just need your advice what to do with .ts files after JSDoc. I just need to remove JSDoc from TS files?\n. @andyjansson yeap, theoretically JSDoc could replace TS files, but right now TS doesn't support all JSDoc features. For example, it doesn't support @typedef.\n. I created JSDoc only for generated API page (you can see it by calling gulp api). Sorry, I didn't test it with IDE abd need a help here.\nSo, could we remove JSDoc from TS files, because we have it in JS files.\n. @jedmao could you test it in WebStorm?\nAnyway we could keep TS in old way, not problem\n. @jedmao maybe we could create a separated repo with typings? It is very rare case. Also it will be better for you to maintain it directly, without PRs.\n. @jedmao yeap, I understand benefits of IntelliSense, but right now I think only 2-3 people uses Typescript. This is why maybe we should move type definition to addition package.\nHow complicated it would be for TS users? We can mention about type definition package in docs.\n. @jedmao you can always proof the idea by showing more TS users. I am always open for community reasons for TS files.\nBut if you 2-3 people uses TS, it will be better to install one npm package for them, rather than load 2x more files for other users.\n. @jedmao I think we can\u2019t remove TS files right now, because it will break API :). But I will remove it in 6.0 ;)\n. 1. Add spaces in { node: this }.\n2. Change all examples to node.warn in api.md to promote right way.\n. Maybe we should put result as first argument. It is more mondatory even than message. And it shows in some way, that warn modify result\n. @jedmao \njs\nfor ( let decl of rule.walkDecl(/^backgdound/) ) {\n}\n. Yeap, main benefits of using ES6 iterator is break and upper return.\nFor ES5 we can bring old API, I think.\nMain problem of this task implementation is that iterators requires a Symbol polyfill.\nCurrent browsers support (we can work if at least last version of each browser will support this ES6 feature): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\n. Any really unnecessary polyfill will be bad for client side usage of PostCSS (for example, for Inline Styles or tools like CodePen).\n. @Semigradsky what iterator you want? Can you show an example?. Custom iterators didn\u2019t become popular in ES6. I will look when finish current refactoring\n. @delka Hm. What is a reason to save old source map if you change CSS. Source map is very content based, if you change one line or letter in CSS, you can broke entire source map.\n. Source map is a big file with origin line, column \u2192 generated line, column mappings. So if you disable source map in PostCSS, Autoprefixer will add new lines and it will broke previous mappings. So there is no sense to keep old source map because it became outdated after any sources changes.\n. Hm, awesome idea.\nWe will not be able to add it on current 5.0. Only in next 6.0.\nBut I am definatly like this idea.\n. @ben-eb @jonathantneal @TrySound @andyjansson what do you think if we accept this changes to 5.0? @jedmao anyway make a PR and idea is great.\nWe have a time until Sunday features freeze.\n. @jedmao I think we should also fix build script. This files should be copy to npm build?\n. @jedmao build script already support d.ts.\n. Thanks for great work :)\n. Of course, I can accept this PR to some branch. But I afraid, that merge work will be difficult.\nLet's make PR later.\n. @lydell yeap, old methods should be depreacted, but not deleted.\nThis twwo commits is commits from other alreaddy accepted PRs.\n. @jedmao can you rebase this PR in name of perfect git history?\n. @jedmao why you left eachDecl, etc in d.ts? Maybe we should remove depreacted methods from descriptors?\n. Right now Autoprefixer do this job, but without range and important. Maybe we should thing how to extend it?\n. At least, there is a difference between standard ::placeholder and ::thumb and ::track.\n. Only ::placeholder since it become a standard: https://github.com/postcss/autoprefixer-core/blob/master/test/cases/placeholder.out.css\nWe can handle !impoortant as flexbox props in Autoprefixer.\nI think non-standard ::thumb and ::track can be in this plugin.\n. Select? Time and date inputs?\n. Cool plugin, BTW :)\n. I think plugin name is good even if it works only with ranges. At least, it is extendable :-D\n. First suggestion:\n``` scss\n// Comment\n@charset \"UTF-8\"\na {\n  color: black\n  background: white,\n              linear-gradient(black, white)\n}\n```\nPros:\n- Intuitive multi-line values\n- Do not use indents\nCons:\n- We still have :, { and }\n. Second suggestion:\n``` stylus\n// Comment\n@charset \"UTF-8\"\na\n  color black\n  background white, \\\n             linear-gradient(black, white)\n```\nPros:\n- No :, { and }\nCons:\n- \\ before \\n in multilines values.\n. @azat-io can you describe objective, why indent-based is hard to read? Because many Sass developers said, that CSS syntax is harder. So I think it is question of time.\n. The main problem with first syntax is that it has only one benefit, no ;. Compact comments and nesting are already possible with SCSS syntax for PostCSS.\n@azat-io what do you think?\n. @azat-io SCSS syntax for PostCSS already supports compact comments.\n. @1j01 we have a problem with some plugins with : in selector. Like https://github.com/jedmao/postcss-nested-props\n. @jedmao yeap, other solution, we can deny unbracket : in selector. But I think there is a few plugins with : in selectors anyway. \n. @urec \u0441\u0435\u0439\u0447\u0430\u0441 \u0435\u0441\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 : \u0432 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u0435. \u0414\u0430 \u0438 \u043e\u0442 : \u0442\u043e\u0436\u0435 \u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0431\u044b \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f\n. @gazay nested styles is important\n. @andrejsm nope, flexibility had really bad history in Stylus. It has very complicated parser with unexpected behaviour.\n@talgautb I am not against 2 parsers, but I will write only one ;). It is not only : or not-: question. If we remove : it will hcange many other aspects of syntax.\n. @gazay your Haskell suggestion is awesome. Main question, do it will be understanded by users without reading a docs?\n. @akella what about multiline values and multiline selectors?\n. @akella i mean very long values like gradients. It is better to write each gradient on new line to keep it clear.\n. My current plan:\n- Autoprefixer 6.0\n- PostCSS birthdays events\n- \u201cThe right way to use PostCSS\u201d keynotes\n- 10 days holidays\nSo I can return to this issue only after October 3.\n. Let\u2019s collect cases, that I want to support in this syntax:\nMultiline values:\nsass\n.button\n  background: linear-gradient(white, black),\n              linear-gradient(white, black)\nMultiline values on new string:\nsass\n.button\n  background:\n    linear-gradient(white, black),\n    linear-gradient(white, black)\nColon in selector:\nsass\n.text\n  font:\n    family: Arial\nMultiline selectors (with \\n in any place of selector, not only after ,):\nsass\n.one,\n.two,\n.three\n  color: black\nRight now I see this way to find selector or declaration (\u201chas :\u201d mean to have : outside brackets):\n1. If line has : inside and no indent increase on next lines, it is a declaration.\n2. If line has : inside and next line has indent increase, but no :, it is a declaration.\n3. If line has no : and no indent increase, it is part of selector.\n4. If next line has : and indent increase, so this line is selector.\nLimitations:\n1. No : in the middle of multiline selector (but anyway we have no this types of plugins).\n2. No : in the middle of multiline value (but I think it is illegal in CSS spec).\n3. No indent changes in multiline selectors.\n4. Multiline value must have indent increase.\nDo anyone has examples to broke this rules (I really need fresh mind look)?\n. But parser for this rules will be really complicated, because it should look ahead.\n. Other question: should we put 2 space indent as part of syntax?\nI really think to raise error on tab symbol in indent, because it is really dangerous to have tabs/spaces mix in indent-based syntaxes.\n. @j-walker23 hi, why you asking about Stylus? Here we discuss next syntax for PostCSS, not Stylus :).\n. @dustindowell22 do not worry, we are on : syntax\n. There will not be any progress until Riga WebConf, sorry :).\n. I found some problem. How we would be able to implement multiline at-rules? For example, long @media or @supports.\n. @dustindowell22 nice suggestion. But it will only simplest cases, but we will still have confused cases.\nI try to avoid Stylus catastrophe because of too many rule in parser.\nMaybe we just give up and use \\ before new lines in at-rule.\n. 2, 3 and 4 lines of your example looks like selectors. Don't forget that your rules should split divide at-rules and selector too.\n. But selectors can be multiline too ;-)\n. @ryanmclaughlin I am on it right now https://github.com/postcss/sugarss\n. @thisconnect yeap, postcss-less or postcss-sass are important. Do you want to create them?\nI specially write a docs about syntaxes to ask other developers to help me: https://github.com/postcss/postcss/blob/master/docs/syntax.md\nSugarSS will be a better replacment, rather than Sass syntax, because SugarSS will allow multiline selectors and properties without any strange symbols.\n. @dustindowell22 double indent can't be found without reading a docs. Also it will be hard to detect indent size of first indent will be double.\n. I am playing in Witcher 3. No opensource until good ending.\n. @DavidOliver Withcer 3 has more than 100 game play hours :D\n. BTW, I already started a repo and made some parts of logic: https://github.com/postcss/sugarss\nI think 25% is ready.\n. Also SugarSS will accept only two types of indent: 2 spaces and 4 spaces.\n. Mixing tabs and spaces for indent-based languages is very dangerous. This is why it is better to deny tabs abd solve problem at the beginning.\nFor example, YAML denies tabs too.\n. OK, I will try to add spaces-tabs mixing logic. But it is uch harder, than just add tab-check in tokenizer.\n. @jedmao I remove tab deny code https://github.com/postcss/sugarss/commit/489a87f046379ce2ae949522ba56f06ee8e92849\n. @lalomartins yeap it will support nesting\n. @danielbayley Yeap. I was thought about # comments too.\nBut having #\\s is too tricky. Most of languages with #-comments allow to miss a space between # and text. Look for example to bang comment #!/usr/bin/bash.\nThis is why I think having # comments will not be a good idea\n. @dustindowell22 nope, everything fine. Right now .sss to .css complication is finished. I need just .sss to .sss conversion (for tools like postcss-sorting).\n. @jenius You can try it from GitHub https://github.com/postcss/sugarss\nI think SugarSS will be finished on this or next week.\n. SugarSS code base was finished: https://github.com/postcss/sugarss\nI am writing a docs and converting tool right now.\n. @danielbayley you are fast :). Awesome work. I added it to SugarSS README.md and installed to local machine for test highlights :).\n. SugarSS 0.1 was released. Please try and post your feedbpack: https://github.com/postcss/sugarss\n. @aazcast wow! Could you send PR with your highlighter to SugarSS docs?. @simplesmiler yeap, can you send second PR\n. The better wway if to remove your fork an then fork project again\n. Do we need a 5.0.1 release?\n. No problem, I plan a silence day between release and promotion, specially for fixes like this.\nI just wait until tomorrow evening for other fixes.\n. I want a code coverage :)\n. By some strange reason, /* istanbul ignore next */ doesn\u2019t work, so I can\u2019t hide depreacted code.\n. I tried to add this comment att start of depreacted method, but coverage HTML shows red lines next anyway.\n. First long-term solution suggestion:\njs\nlet decl = css.create('atrule', { name: 'encoding' })\n. Second solution is to send postcss instance to plugin function. It is better, because some plugins uses postcss.parse.\nMaybe also we should move postcss.plugin to other project to avoid use old PostCSS API:\n`` js\nimport plugin frompostcss-plugin`;\nexport default plugin('my-plugin', (css, result, postcss) => {\n});\n``\n. @lydell @MoOx what do you think? You had a great ideas about API.\n. Dirty fix will be released in 5.0.1: https://github.com/postcss/postcss/commit/e7f2d0f955425fe4769adfae17309ca0768ca066\n. The only project with one repo is using master inpackage.json`, but it is not so important.\nSmall note: ouh, I am soo miss Bundler in node.js. GitHub master cases were so easy there. One repo with many projects is not a problem for it.\n. First tests show that we can reduce core for client-side from 30 KB to 10 KB.\n. @yoshuawuyts first version of PostCSS has simple function API too, but here is a reason why we use more complicted way. If you can fix them in different way, we can change API:\n1. PostCSS versions conflict, when you use pllugin for PostCSS 4.x with PostCSS 5.x core. We can use npm peerDependency, but in most cases major update is fine. So current way show warnings if conflicted plugin has error, but it still allow you to run old plugins.\n2. Automatically insert plugin name to warnings and errors.\n3. Allow to fix plugins possible conflicts. Because every plugin has plugin.postcssPlugin with name, other plugin can check result.processor.plugins and warn user on problems. Or cssnano plugin pack disable internal Autoprefixer if it see, that it is already used.\n. In 6.0 postcss-plugin will be very small, just one file for 10 lines of code. But it will also fix first problem and have old API.\n@yoshuawuyts Why you do not like this solution?\n. @jedmao awesome work. I will accept this PR on weekend (PostCSS 5.0 release took all my free time :( )\n. @jedmao OK, I will wait for that Windows fix from your discussion\n. Ping me when you will be ready\n. Broken tests do not fail CI :(\n. Also why you didn\u2019t use gulp-instanbul to be closer to current build system?\n. Looks here:\ninput[type=\"number\"]: -webkit-inner-spin-button\nThere is a space between : and -webkit-inner-spin-button. This is why PostCSS parse think that it is a property and can parse property name.\nCan you confirm error in input source or some middle tool?\n. Anyway I think it is a bug a we can parse it more correct, but it wwill not be high prority right now.\n. Nope, I added this example to postcss-loader tests and they passed. Maybe some other tool remove that space?\n. The default Autoprefixer behaviour is to remove outdated prefixes, so by API it must remove -moz-animation: loader.\nYou can disable this behaviour by set autoprefixer({ remove: false }) https://github.com/postcss/autoprefixer#outdated-prefixes\n. Oops, sorry, seems like I miss some example.\nCan you please post only broken examples? ^_^\n. It is really wierd O_o. I am too drunk to fix it today, sorry :(.\nI think issue is somewhere in 4.x AST fix https://github.com/postcss/postcss/blob/master/lib/container.es6#L305\n. Fixed 9fce511\n. Released in 5.0.2.\n. Wait for https://github.com/maximkoretskiy/postcss-all-unset/issues/1\n. Fixed d8ecd9ada4298cbdca350a941d3bf1a8fcd6eecc\n. I can\u2019t find a reason why this plugin can be useful for other developers.\n. @himynameisdave I am really curious, what is a point of using only rgb()? :) At least, it is more symbols. And less clear istead of HSL.\n. I have a better solution for you. PostCSS has plugin to add alpha for hex colors\nhttps://github.com/avanes/postcss-color-alpha\n. Technically, I merge it to other runners list ;-)\n. Example was too big for this case\n. Be careful with previous links indention ;)\n. important and old _important are different properties.\nFirst contains boolean value. Second contained exactly text from CSS.\nSo this commit do not fix it. I think you got warning just because if old plugins, which are still not use PostCSS 5.0.\nTests show, that this commit block any way to set boolean important to true.\n. Yeah, I change url() parsing. PostCSS 5.0 parses url() as separated token, not as common function (this is true by CSS spec).\nAnd this new parser has some optimization. It thinks that ( and quote will not be splited with space.\nI can add space support, but it will slowdown parser and make code much complicated.\nSo can you show me real world example?\n. @ben-eb @davidtheclark Are you know that by CSS spec any CSS symbol can be replaed by it code \\0013. So we can replace { by \\dddd and it still be valid.\nOf course, PostCSS doesn\u2019t parse it.\n. I try to find best way to make parser smarter, but I have good solution right now.\n. I think I found good way to handle it: 6567bfc\n. Released in 5.0.3.\n. Root, but not Root node. Change is that someNode.toString() will not contain someNode.raws.before.\n. @davidtheclark yeap, it is not good word there but I didn\u2019t find better\n. Fixed f8b6802\n. Released in 5.0.3.\n. Fixed 35045a9\n. Released in 5.0.3.\n. Hi. I think you asked not about PostCSS intself (because it is a core library and do not work with file). I asked question about grunt-postcss.\nSorry, I use only Gulp and webpack and can\u2019t help you. You should create issue in grunt-postcss project.\n. I need version of all PostCSS related packages. Especially gulp-postcss\n. BTW, cssnano is PostCSS plugin too, you can use it directly.\n. I see postcss-import is dependencies? Do you use it somewhere?\n. Also, can you make clean install. Remove node_modules and then run npm install again.\n. OK, I think, the problem is not from Autoprefixer, but from postcss-import. PostCSS 5.0 has compatibility hooks to work with 4.x plugins, but postcss-import do not use public API, so there is no way to fix it.\nCan you update postcss-import to latest version with PostCSS 5.0 support?\n. Why you think it is a bug?\nRoot node represents all CSS conten and start at 0, 0.\n. Fixed 2860300\n. Released in 5.0.4\n. Closed by @MohammadYounes #536\n. Released in 5.0.4\n. Hm. Does it fix a issue? What if Windows developer has \\n is his CSS?\n. I used this way: 3d0352a\n. Awesome, thanks :-D\n. Can you clean trailing spaces?\n. @jedmao yeap, issue in TypeScript repo will be good. Trailing spaces is mess.\nI 100% agree with auto-generation. But we can use 2 step auto-generation: TypeScript + cleaner. What do you think about it?\n. Use gulp plugins for it: https://www.npmjs.com/package/gulp-trimlines\n. Awesome, thanks :)\n. This problem happens because some of your plugins is based on PostCSS 4, but it is used in PostCSS 5.0. We have many hooks to support PostCSS 4.x plugins, but some plugins use undocumented API and we can\u2019t fix them.\nI think problem is in postcss-import in cssnext.\nPlease downgrade gulp-postcss to use PostCSS 4.x.\n. js\nlet newRule = postcss.rule({\n  selectors: [ ... ],\n  nodes: someRule.nodes,\n  source: someRule.source,\n  raws: { semicolon: true },\n});\n. It is same properties as mentioned in docs. You can see, that there is no Rule#semicolon, so you can\u2019t pass it to constructor. But there is Rule#raws objet with semicolon property, which you can pass.\n. Can you open PostCSS Node#befoe, set throw and get stacktrace?\n. What is here postcss-quantity-queries/dist/index.js:85:23?\n. Awesome. Can you also send PR to postcss-plugin-boilerplate?\n. @TrySound yeap, your method is better. Send PRs.\n. And to https://github.com/postcss/postcss-plugin-boilerplate please\n. Do you have a diffference between postcss-pseudo-elements-content?\n. Yeap, you can write PostCSS plugin and then connect it after Sass (as Autoprefixer).\n. Done by @jonathantneal https://github.com/jonathantneal/postcss-write-svg\n. Nice :)\n. Do you test it? ;)\n. Released in 5.0.5. Thanks :).\n. @mahtd what is your Twitter name?\n. Why ypu do not use postcss-url for it?\n@MoOx do I right, that postcss-url supports this feature?\n. Maybe it should be in Language extension?\n. Can you change a commit, because I am from phone and can't fix it.\n. Nope, category is correct :). I thought that it was Optimization :).\n. \u0423\u0440\u0430 :-D\n. Use AtRule#params.\nWarning tells about _params, not params. AtRule#raw.params store origin parameters with comments and spaces. In other hand, AtRule#params was trimmed and cleaned from comments.\n. @jedmao in @a foo /* bar */ {} comment is between params and {, so it is stored as raws.between :).\nTry @a foo /* comment */ bar {}\n. BTW, it is not really every day API. I think only strigifier and formatters developers should know about Node#raws.\n. All at-rules must have ; at the end.\n. @OEvgeny add issue in postcss-scss repo ;). It is not relevant with default parser.\n. It is not a issue, but current clone() behaviour. It removes code style from cloning node, because I thought that code style is part of root.\nWe will fix this behaviour in 6.0.\n. \u041f\u0438\u0448\u0438 \u0432 cssnano, \u044f\u0434\u0440\u043e PostCSS \u0442\u0443\u0442 \u043d\u0435 \u043f\u0440\u0438 \u0447\u0451\u043c.\n\u0422\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043a\u0430\u0436\u0438 \u0432\u0445\u043e\u0434\u043d\u044b\u0435/\u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 CSS \u0438 \u0443\u043a\u0430\u0436\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u043b\u0430\u0433\u0438\u043d\u044b.\n. plugin syntax is for option-less call. plugin(opts) for call with option.\nThe reason of this API because a lot of users forgot (). In Gulp if you forgot (), it will raise a error. But PostCSS hide this issue and \u201cplugin just not works\u201d.\n. @iamvdo we can\u2019t raise a error on missed (), because in PostCSS initializer and plugin are both functions. Un gulp initializer is a function, but plugin is a Transform instance.\nAnd docs do not help, you know it ;). Before PostCSS 4.1 I have a question every week \u201cPostCSS od not work, should I go to Sass?\u201d.\n. Do I fix a example? https://github.com/postcss/postcss/commit/dbdd456f27055b0dcd950b7e49058fce2f9d6b90\nWhere di you find plugin() ithout options?\n. @iamvdo everything is fine in this examples. Without options, you use bracket-less version.\n. Released in 5.0.6\n. @mahtd you are cool. Because most of developers afraid parser :D\n. Released in PostCSS 5.0.6.\n. /cc @TrySound \n. @ben-eb @morishitter I need betetr data to fix it. What is input CSS. What is expected and real AST.\n. I think it is a good vector. Right now PostCSS API can do by sending callback as plugin option:\njs\npostcss([\n  elementMq({ saveJs: js => fs.writeFileSync('from-css.js', js) })\n])\n. /cc @jedmao\n. Node.js 0.10 is not supported. Having this polyfill is bad for client side build.\n. Oops, sorry :-)\n. Using private _mapping is look like hack. We should fix it, but maybe we have better way?\n\\cc @fitzgen\n. @asan sorry for delay. I just return from my vacation.\nCan you add some test cases? I will try to find a better detection and if I will not have result in next day, I accept this check. So, anyway we will ave release after a day after you adding a test. Wit for tests :).\n. @asan thanks for tests. Sorry, I have few things on work, but in the end of the week I will make a release.\n. Released in 5.0.9\n. Looks good.\nBut maybe we need to put it on separated line.\n. Awesome pack. Do not forget to write a tweet about it.\n. Is it about doiuse?\n. js\npostcss(plugins).process(css).css\n. Processor#process returns LazyResult object with then method to async and css/map methods to sync access.\n. Yeap, send PR\n. You are right. Let\u2019s fix it in next major release.\n. Changes break old tests, so I will be able to do it only in 6.0 :(. We need to change between in rules and at-rules too. Too dangerous for my \u201csmall API changes\u201d. Could you create some helper to find comments in decl.between too?\nWhen we add value parser, we will clean raws from comments.. Yeap, on-demand value parser seems like good idea right now in terms of perfomance and API simplicity.\n. Very strange. Problem is that input css is undefined.\nAt least, we know that it is not PostCSS issue, but issue of environment.\n. @franckmaurin you should open issue in cssnext-loader, undefined comes from there.\nAlso you can try to replace cssnext-loader to postcss-loader with cssnext plugin. Anyway future cssnext version will remove own tools and will use common PostCSS tools.\n. @TrySound nope, he asked about exactly Stylus parser.\n. @XOP I have no plan to write a parser for Stylus. But I wrote a good docs about writing a syntax, you can find them in this repo (sorry I am in airport, can't give a direct link). Stylus mixins and other special things, you can parse as custom at-rule with some special name.\nBut note, that postcss-scss is not able to compile SCSS to CSS. It just parse SCSS to PostCSS AST, but didn't execute mixins, math and other. Main purpose of this parsers is to execute PostCSS plugins directly on preprocessor source. Like linting by Styling. So it doesn't really matter, what name you will use for custom at-rules.\n. @TrySound have no idea. @XOP do you want to make it?\n. @jmeas yeap, I agree that we need Stylus parser. But it is very complicated task. Maybe it will be better to take Stylus parser and then convert Stylus AST to PostCSS AST.\n@Panya @kizu is it possible?\n. @LestaD nope. Do you want to do it?. @LestaD \n\n\u0414\u043b\u044f Stylus \u043b\u0443\u0447\u0448\u0438\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0430\u0440\u0441\u0435\u0440. \u0417\u0430\u043d\u043e\u0432\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0442\u044c \u0435\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0438\u043d\u0433\u0430 \u043e\u0447\u0435\u043d\u044c \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b.\n\u0418\u0437\u0443\u0447\u0438 Stylus API, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c AST (\u043d\u0443 \u0447\u0442\u043e \u043f\u0430\u0440\u0441\u0435\u0440 \u043e\u0442\u043f\u0430\u0440\u0441\u0438\u043b). \u0415\u0441\u043b\u0438 \u043d\u0435\u0442, \u043f\u0438\u043d\u0430\u0439 \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u043c\u0435\u0439\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0439 \u043f\u043e\u0441\u043b\u0430\u0442\u044c PR \u0432 Stylus(\u0442\u0430\u043c \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u043e\u0447\u043d\u043e AST \u0435\u0441\u0442\u044c).\n\u041f\u043e\u043b\u0443\u0447\u0438\u0432 Stylus AST \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0439 \u0435\u0433\u043e \u0432 PostCSS AST. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u0430\u043a \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 postcss-sass.. You forget to add link to plugin. Also you should mention plugin name in commit.\n\nWait second one (but I am going to sleep, so maybe I will accept it tomorrow in the morning).\n. I looked into plugin too. Maybe crass is a good tool, but it is not good way to use it.\nStringifing and reparsing may cause unexpected behavior.\nIt is better just to run crass in old way after PostCSS.\n. @stephenway nice, plugin. I will use it in my next talk. I fix you missed link 34bc156\n. I add it manually, PR is broken somehow.\n. Module ./lib/source-map-generator is not in source-map but in PostCSS itself. So seems like you have broken require.\n. Awesome! I am OK with postcss-unmistakable, but shorter thing will be better. postcss-fixedcss?\n. Project was started https://github.com/jonathantneal/postcss-time-machine\n. It is issue of postcss-css-variables, it uses old API. So I close this issue. \n. @XOP can yoou make 1 commit (squash)? Just git reset HEAD^^^; git commit \u2026; git push origin master -f\n. @XOP do you need any help with squash?\n. PostCSS core contains only CSS parser (with nested rules). Less variables syntax is bad choice, because they had conflict with at-rules and as result you can't use CSS parsers to parse Less.\nSo it is not a PostCSS bug, because it is different syntax.\nBut there is way to solve it. PostCSS supports changeable custom parsers. For example, you can use PostCSS plugins for SCSS sources by postcss-scss.\nSo you can write custom Less parser, which will return PostCSS AST.\nHere is docs how to do it: https://github.com/postcss/postcss/blob/master/docs/syntax.md\nIf you are too brave to start this parser, we will support you with advices in PostCSS Gitter chat.\n. Can you fix commit?\nPlugins order is abc (but postcss- prefixes is on top).\nLinks order is by length.\n. Awesome :) thanks\n. @keithjgrant yeap, PostCSS throws. But maybe your gulp-postcss or some other tools in environment hide it.. Let's wait few weeks until npm@3 become more popular, because shrinkwrap is too big on npm@2.\n. Sorry, I forget about this issue :)\n. The hack looks like to hacky. You can miss PreviousMap#text, because you should create second class and override consumer() logic.\n. Yeap. Do you have any worries about it?\n. Just use same wild requirements as in PostCSS\n. Seems like this issue become outdated :)\n. Nope, it is new syntax for RGBalpha :).\n. Ouh, seems like you fork is broken. There are a lot of unnecessary commits there.\nCan I ask you to send second PR with one commit, please?\n. Awesome plugin, thanks :)\n. Same problem here. I wil add it manually. But next time you should remove your fork and fork postcss again.\n. Done 48be254\n. @Victorystick many node packages (like custom parsers) requires separated files of PostCSS like:\njs\nimport Comment from 'postcss/lib/comment';\nimport Parser  from 'postcss/lib/parser';\nAs I understand, we can\u2019t bundle all files to single file.\n. @ben-eb I really do not like ship big bundle in npm. Sometimes developer should go inside files in npm package.\n. @ben-eb yeap, it is a good point.\nBTW, Parser will not be part of postcss in 6.0. But I understand your point.\n. I add separated issue for it: https://github.com/postcss/postcss/issues/630\n. Can you please put a dot in the end? :)\n. Thanks :)\n. @markqin if you want to return some special data from you plugin (like for plugin communication) you should use result.messages.\njs\nresult.messages.push({\n  type: 'my-plugin#type',\n  a: 1,\n  b: 2\n});\n. @papandreou ping me when you fix linter warnings :). Thanks for fix, I miss this format changes.\n. Released in 5.0.12.\n. @papandreou do you have a Twitter account?\n. Seems like you have error during npm packages installation. And postcss package is missed.\n. Be sure you use gulp-postcss in postcss variable here. And if yes, please open a issue in gulp-postcss, because I am not familiar with it.\n. Sorry, right now I rewrite docs and this merge will make a conflict. I will accept it later, when I finish rewriting.\n. @lukelarsen ping me when you will finish tests.\n. @lukelarsen any updates?\n. Let\u2019s I clear this thing.\nEvery PostCSS plugin should be created by postcss.plugin(). This method is in postcss, so every plugin must have postcss in dependencies.\nThe reasons:\n1. Many major releases do not change plugin API. This is why default peerDependencies mechanism is not ideal for us. We use different: every plugin contains plugin.postcssVersion with its PostCSS version. If plugin throw a error and its version is different, we show a message, thet problem is in PostCSScore conflict. Also using plugin.postcssVersion we can even change AST API for older plugins.\n2. Also in real word plugins are quite more compilcated, than just a function. Plugin builder is useful thing.\n3. Many plugins anyway use postcss for AST transformations methods like postcss.rule().\nOf course, every reason can be solved in many different ways. But in general we found that this solution is better for PostCSS purpose.\nMaybe in PostCSS 6 we will have some tiny postcss-plugin creator. But only if PostCSS was popular in CSS-in-JS world.\n. BTW, do need definition for hacks. Because this question may bring a strong holy war to project in future. Maybe different name?\n. Just remove it from PostCSS plugins list.\nPostCSS do not have any plugins by default. You add any plugins that you want manually. So if you didn\u2019t want some plugin, just do not add it.\n. Awesom project! :D\nI will promote it in PostCSS twitter on this week\n. @himynameisdave postcss-alphabetize is not a good name, because there are many reasons why people afraid alphabetical sort. For example, the largest Russian team Yandex prefer CSSComb approach.\n. @seaneking you hide so awesome tool from us?! :D\nI just want to show classes info in AST tree, because it is not just AST.\n. Have no idea :-)\n. @himynameisdave I have a link to postcss.parts. I really think that we really should use npmsearch.com on postcss.parts, because  local database:\n1. Has no popularity.\n2. Miss plugins, because author can misss add plugin to it. Anyway using postcss-plugin keyword is a better solution.\n. before stores only common symbols, that are used for IE hack. < is not used as a hack, so I didn\u2019t copy it to before.\nhttps://github.com/postcss/postcss/blob/master/lib/parser.es6#L212-L215\n. I fix a docs 6c7e652\n. @hail2u BTW, please check your email Inbox. I need your post address to send you a New Year postcard and sticker :).\n. What is a reason for this plugin? WHy we can\u2019t write div:not(:first-child)?\n. Nope, I I think to that it is one-user plugin :). Maybe you even should not use, because it do not brings you any benefits, just confuse other developer.\nI try avoid dangerous plugins from this list ;).\n. No tests and sync is a big problems, I agree. /cc @Pavliko \n. @egoist sorry, I will compress Rollup link to one line (like Grunt or Brunch) because it is not so popular yet.\n. Send this PR to docs/plugins.md please\n. Sorry, it is not a bug, but API.\nYou need to care about this cases by hands. Just copy newNode.raws.before = oldNode.raws.before after the replacement.\nBTW, do not forget also to copy newNode.source = oldNode.source  to generate correct source maps.\n. Nice fix. But also we need to support word option too. I will make it tomorrow.\n. Yeap, nice idea. But we should do it by separated library to keep core small and focused.\n. Why this plugin can be useful for other developers? On first look it is just a custom in-app plugin.\n. So you should fix a docs to make it more clear ;)\n. Awesome. Second fix: can you put your plugin and its link in right order (abc order in plugins, with postcss- on top and size order in links)\n. Looks like totally similar.\n. @ronnyamarante very strange :-/\nCan remove your copy of postcss repo. Fork it again and send new PR.\nBTW, also could you fix a order of your plugin. Links are ordered by length.\n. Put css-loader before postcss-loader.\nAnyway it is a question for a chat, not a issue inside a PostCSS core.\n. Can you fix link order (it is by link length), please\n. Could you fix a sorting? Plugins are sorted by ABC (postcss- prefix is not counting) and links are sorted by length.\n. Maybe this desc will be more correct:\n\nadds -js- prefix \u2026\n. Yeap. Ping when you fix it.\n. Issues as TODO is OK. Anyway we have a lot of them :-).\n. @simeydotme plugins llist is alphabetical (with postcss- prefixes on top). Ping me when you fix it.\n\nNice plugin.\n. @archana-s links order is length. Can you fix it, please?\n. Done. Thanks :)\n. Thanks :)\n. You can remove previous border on button-border:\njs\ncss.walkDecls('button', decl => {\n    decl.replaceWith('cursor: pointer; display: inline-block; min-height: 1em; outline: none; border: none');\n});\ncss.walkDecls('button-border', decl => {\n    decl.prop = 'border';\n    let prev = decl;\n    while ( prev = prev.prev() ) {\n        if ( prev.type === 'decl' && prev.prop === 'border'  ) {\n            prev.remove();\n            break;\n        }\n    }\n});\n. BTW, adding a custom border property is not good API design. Because other developers may think that it is some W3C property.\nMixins from postcss-mixins are better for in-app comonents (you can make them very smart by JS mixins):\ncss\nbutton {\n    @mixin button {\n        border: 1px solid blue;\n    }\n}\nIf you try to make some controls library, custom at-rule will be better:\ncss\nbutton {\n    @super-library button {\n        border: 1px solid blue;\n    }\n}\n. @moshemo why you need to set up Babel and PostCSS? Because CSS is not JS, so it doesn\u2019t need a Babel.\n. PostCSS plugin files has JS extension, so you can use normal way to run it. For example, you can rename gulpfile.is to full-time.babel.js and all required files (including your PostCSS plugins) will be processed throw Babel.\n. @stephenway good question :). I think second one is easy. But let\u2019s geneator author will decide :).\n. @moshemo your syntax has few problems:\n1. @primary-color \u2014 other developers will not know the source of this variable. What plugin it configure?\n2. Same problem with button: property. If new developer will see this property in project, she/he will go to MDN and will not find button property in CSS spec. Or what you will do, if W3C will add button property in future?\nThis is why I create this issue. We need better syntax for components library.\nLook at suggested syntax:\n``` css\n@bootstrap-globals {\n    color: blue;\n}\n.my-project-button {\n    @bootstrap button {\n        color: red;\n    }\n}\n```\nEvery our at-rule has bootstrap prefix. So you will understand, that it is not a standard CSS, but it comes from something like postcss-bootstrap.\n. @moshemo in real big project with >5 developers, not everyone will read all docs. For example, you will add some component library and you will forget to tell to some new developer about it.\nOr you will find this CSS in some old legacy project.\nMake a mental experiment. Your friend ask you to help him with some old project. You open a package.json and see 40+ plugins. OK, you will close package.json,  because it is a mess. Then you will open some CSS and see grid: and triangle: properties. Where they came from? What proberty is came from PostCSS? What PostCSS plugin your should open to read a docs?\nIf you will see @bootstrap button, you will understand that it is non-standard property. So you need to look into PostCSS, Sass and other build magic. Then you understanda that you need to find \u201cbootstrap\u201d in package.json and read all docs rom found plugins.\n. @moshemo @button-color: red; at-rules in CSS had no :\n. But @framework semantic-ui looks nice\n. PR is welcome :)\n. js\ncss.walkRules(rule => {\n    if ( checkSelector(rule.selectors) ) {\n        let hover = postcss.rule({\n            source: rule.source,\n            selectors: rule.selectors.map(i => i + ':hover')\n        });\n        hover.apppend({ prop: 'hoverProp', value: 'hoverValue' });\n        let before = postcss.rule({\n            source: rule.source,\n            selectors: rule.selectors.map(i => i + ':before')\n        });\n        before.apppend({ prop: 'beforeProp', value: 'beforeValue' });\n        rule.parent.insertAfter(rule, hover);\n        rule.parent.insertAfter(rule, before);\n    }\n})\n. I am testing other way to work with Babel in SugarSS parser. Maybe I remove hook completly.\n. Done https://github.com/postcss/postcss/commit/193e5ae897abb8e7d0c19b5a5312e57d5cbf002e\n. Yeap, it is a wrong docs. A buffer should be here.\nDo you want to send PR?\n. https://github.com/ausi/cq-prolyfill\n. Good work. Thanks.\n. Thanks :) I will update all my repos \n. README contains instructions how to add Promise polyfill. Also you should update node.js. Latest version is even 5.5.\n. Here is origin issue of that commit https://github.com/postcss/postcss-js/issues/3\n. First, you can make this code faster:\njs\nresult = processor.process(\".fooga { color: red; *color: black; }\");\nroot.append(result.root);\nby replaceing process to parse:\njs\nroot2 = postcss.parse(\".fooga { color: red; *color: black; }\");\nroot.append(root2);\n. Yeap, unfortunately append and other insert methods clean \u201craw\u201d properties like indent or *.\nI know, it is a bug and we will fix it in 6.0. Sorry, it will break plugins API so we need time to wait.\n. Here is a temporary solution:\njs\nfor ( let i of root2.nodes ) {\n    i.parent = undefined;\n    root.append(i);\n}\nPostCSS will clone node only if it has different parent. So if we will remove parent, PostCSS will ignore cloning step. Raw properties are cleaned in clone().\nSorry for this mess, it is hard to make API without any mistake =^_^=.\n. Em, what about docs and type definitions? They are very useful for developers\n. Also I am big fan of airplane development (because you have Internet for procastinate). It is one of the main reasons for me for offline docs :D.\n. Nice, catch :)\n. O_o It is impossible :).\nCan you create some repo with very small example to reproduce.\n. @acterhd yes, you can.\nBut I need more info to answer on second question. There is a two use cases in browser usage.\n1. \u201cComplie CSS string to other string to make some tool like CodePen\u201d. Just take postcss npm package and back it to bundle by browserify or webpack. Then use JS API like it is a node.js app.\n2. \u201cUse PostCSS in dynamic CSS in my live component like CSS-in-JS\u201d. Take postcss-js.\n. @acterhd you can use any JS library inside your PostCSS plugin.\nBut what exactly do you want to do?\n. @acterhd regexp is not a best way to work with syntax. At least you can't write regexp for any brackets case \ud83d\ude09.\nYou should look to postcss-value-parser https://github.com/TrySound/postcss-value-parser\n. If you want to generate some dynamic CSS (like polyfill with some client side calculations) from static CSS, you should provide to user JS and some PostCSS plugin. Look to cq-prolifill\nhttps://github.com/ausi/cq-prolyfill\nBecause most of PostCSS users run PostCSS once on deploy.\n. @acterhd yes. Your plugin can accept a callback option and pass JS content to callback, so user can save it. Or just save this extra JS near origin CSS file.\nOr you can use one common static JS, but put some data to CSS and then extract it JS file like cq-prolyfill does.\n. @acterhd yeap, it contains big client side JS file and small PostCSS plugin to preprocess CSS files for that client side JS.\n. @acterhd yes, your plugin can write some file or pass it to user callback.\nYou can see API example in postcss-modules https://github.com/outpunk/postcss-modules\n. @acterhd I do not sure, that I understand you, but:\njs\nvar rule = declaration.parent;\nrule.selector;\nAlso this issue is about client side usage. You can ask this small questions in our Gitter support chat. You will get answer faster and it is a better way for questions (not a issues).\n. See postcss-plugin-boilerplate. It contains a test example on AVA (you should ask this question in gitter chat, not here).\n. In this example, a::before will be on separated line, so it will be independent from previous comments size, as I understand.\nCan you should some better example?\n. Hm. Why you use { node: root, index: 58 }, but do not { node: decl, index: 10 }?\n. These examples is better :D\n. @davidtheclark I have no idea for direction too :D.\nFirst dirty idea: add Node#raws.lengthDiff property.\nBut it is really dirty way. Maybe we should start from invastigation of source of issue.\n. @davidtheclark not every parser should have complementary stringifier. For example, postcss-safe-parser has no stringifier. In other hand midas has no parser.\n. Or we can use node.source.input.sourceContent :)\n. BTW, what is end-user case of this issue (It will be useful for thinking about new API).\n. I mean I need task example (abstract thinking is hard to me \ud83d\ude00)\n. Thanks. And what JS code you will use?\n. Yeap, let\u2019s close it :)\n. Sorry, guys, I am deep into Witcher and preparation for travel. I will look iin this issue only on next week.\nBut PR is always welcome.\n. Released in PostCSS 5.0.16.\n. Thanks for welll documented issue and PR. Sorry, I spend all my opens ource hours today and any tokenizer changes should be double checked (also they should be backported to postcss-safe-parser and postcss-scss).\nSo I will look in this issue in Thuesday/Friday. Feel free to ping me on next week if I will forget.\nI think this issue can wait, yeap?\n. I looked to PR. You are a hero, because you are not afraid tokenizer :D.\nMain problem, that \\n is illegal in CSS Syntax spec. Maybe we should throw error just about \\n in string https://www.w3.org/TR/css-syntax-3/#consume-a-string-token\n. I compare perfomance, with extra lines code doesn\u2019t slow down parser.\nI think we should parse multiline strings. It is same case as nested rules \u2014 PostCSS is not a linter (itself :) ). So it could parse more than standard CSS if it is not a problem. \n. Changes was backported to postcss-scss, postcss-safe-parser and sugarss with your name in commit author field.\n. Tomorrow I will look into SCSS comment issue and will release 5.0.16.\n. Can you show content of that 2 CSS files?\n. Yeap, it looks like @import \"vendor.css\" $blue: #888; at-rule. But we need to print better error message for this cases. Any ideas?\n/cc @TrySound \n. @ben-eb we have special coase for missed ; between declarations. Unfortunatly @import \"vendor.css\" $blue: #888; is a valid syntax \u2014 for example for mixins. So we need some check in postcss-import.\n. @timaschew post stacktrace again, you may miss some changes.\n. @timaschew what PostCSS version do you use?\nI check 5.0.15 and 5.0.14 build files and there is no any any.before or any['before'] in line 120.\nI think problem is in broken AST. I check current Stringifier#raw for any cases, when we ask any.before and any['before'] and it can be when Node#raws is undefined. But it could not be, because raws is created in constructor.\nSo I think there is two possible sources of issue: cssnext generates broken AST (postcss-import has tricky logic with raws.before) or you use old PostCSS (maybe < 5).\n. Problem is that you use cssnext. It based on old PostCSS.\nYou should use postcss-cssnext.\nAlso feel free to create issue in cssnext to clear in docs, that cssnext is deprecated.\n. Fixed https://github.com/postcss/postcss/commit/8ae0b7c59c2e2bc0c3cd9ee4b0e91f35c2453769\n. Could you show full stacktrace?\n. @nicolas-goudry could you create some small repo to reproduce error. I think it would be easy, but I can\u2019t reproduce it in my repo.\n. @nicolas-goudry fixed https://github.com/postcss/autoprefixer/commit/f69d28b97ba10a7e252533d0a023913deef99072\nPlease wait for Autoprefixer release. It could take 1 week (sorry, I am on vacation :-P)\n. @nicolas-goudry released in 6.3.7\n. Awesome plugins.\n. postcss-cssnext doesn\u2019t use Autoprefixer and cssnext is depreacted.\n. Nice work. But I think it is a wrong way to solve this real pproblem. The best solution do not need a docs.\nFor example, we need need more task focused plugin packs, rather than all-in-one (like rucksack). this is why postcss-cssnext now focused only on CSS4 features.\nOther solution, we should find same plugins with same settings and disable it.\nAlso one extra plugin is not a problem, because PostCSS is very-very fast.\n. I can retweet your tweet about it, but I afraid that link from PostCSS docs will increase a more bad plugin packs.\n. It can increase more bad packs by showing that it is OK to having same plugin in many different packs.\n. Hm, let\u2019s see people feedback. I will promote this link in Twitter and we will see people feedback.\nWhat do you think about it?\n. Awesome :)\n. @maximkoretskiy I use pretty same format https://github.com/postcss/postcss/blob/master/CHANGELOG.md\nWhat exactly do you want?\n. Unreleased is useful (but we didn\u2019t have unreleased changes right now).\nWhy release dates is important for you?\n. OK, I agree about date and SemVer mention. But I think title is bad for date. There are only few non-important cases for date, so we should not put it in most important section.\nPR is welcome.\n. @maximkoretskiy nope, I mean that I am OK with release date, but they should not be in title, because it is a minor information.\n. YYYY-MM-DD\n. @timaschew in one line minor data looks too small.\nI really think that this date is non-important. And if we can\u2019t put them nice, we should not put them to ChangeLog.\nThere is no case for dates. For some rare case, users can use git tags and GitHub Releases.\n. We already have a issue about Event based API  and functions API.\nI have plans to implement Event based API in 5.1 (sorry, I was burned off in PostCSS in prev. year and now playing in Witcher 3). And add functions to Event based API into next release (5.2 or 6.0).\n. Sorry, I am right now  the phone. But do you find this issues. Please subscribe for updates there.\n. Oops. result.file is right. Technically we have also result.source with origin source code of this file.\nDO you want to send PR with fix?\n. Link are ordered by length.\n. @jedmao why you need to add typing field to package.json dynamically? Maybe we should put it to packge.json file directly?\n. Do you need a release for this?\n. I will release version tomorrow\n. Maybe we should integrate postcss-use in next versions to core and implement default way to disable plugin or some option.\n. I will close for now.\n. BTW, we still need to have old API. So decl.value should be a string.\ndecl.valueTokens for tokens? Anyway most of plugins will use just event based API.\n. @thejameskyle the good part of CSS is that we can parse any unknown syntaxes as word token. So .foo-#{$bar} can be parsed just as classSelector. So, plugin can still use regexp based syntax :D.\n. @ben-eb any call of .value= setter will parse new value and update valueTokens.\n. @thejameskyle thanks for this big post. It is really useful\n. So we should implement #296 before this issue\n. Yeap, let's talk in PostCSS gitter after May 12 (sorry, conference).\nWhat do you think about this steps:\n1. Creating a separated library.\n2. Stabilize API\n3. Move API to PostCSS core.\nAlso, what will be the main difference with postcss-selector-parser?\n. @clentfort awesome! @ben-eb what do you think?\n. Yeap, this issue is in process inside \"common parse for Sasd, CSS and Less\" project. But it will not be solved soon.. @hokkaido not right now. My current plans:\n\nFinish Logux 0.2\n@lahmatiy will move tokenizer to separated project.\nWe will replace tokenizer to better from @lahmatiy.\nAfter testing we will replace parser to more csstree-ish and put values/selectors tokens to separated properties.\nThinking about better AST API (with events/visitor?).\n\nSo it is hard to make it faster. What is your current problem? Maybe I can suggest faster solution?. Close for https://github.com/postcss/postcss/issues/1145. Done f9a266d\n. @TrySound I tested both cases :).\n. Done 47d00dd (even without special option)\n. Also this commit is relative too fe51a0c\n. Having a special option is not a best way. Maybe we should change file paths logic on having https?:// in to?\n. @markfinger awesome. Could I ask you to join all commits to one? Just git reset HEAD^ all commits, make one commit and git push --force it again.\n. Yeap. Travis has weird issue. But it is not relevant for this PR.\nAwesome work. I am now in the middle of SugarSS development. Can I merge this PS after hew hours? Everything fine, I just want to focused on one task :).\n. @markfinger yeap, I will merge it after few hours and publish on npm in 5.0.20 (you are lucky to have cool version number for your fix :) ).\nI will write here when I make a release.\n. @markfinger hm, why we need sourcePath? Could we omit this option too?\n. If from is a file path, why we need to hack sourcePath?\n. Maybe we should add file:// support for from?\n. In this case we can add map.from option to override main from option. I think this option name is more clear, than sourcePath.\n. Also you need to add docs for this option too :).\n. Awesome! Sorry, I was burned off in SugarSS release. I will think about this PR tomorrow. Maybe we need a minor release (not patch) because we add new option.\nAre you OK with some delay for this issue?\n. 2 PRs looks like good idea, because 5.1 release could take some time.\n. Merged to 5.1 branch\n. Merged manually to 5.1 branch\n. > Should I add the same position in original?\nHm. Tricky question. Can you should browser output without a origin position?\n. Merged to 5.1 branch\n. Looks fine. @jedmao can you check this PR as TS master of this project? :)\n. Yeap. But JS is not a class language, it is prototype language. So public API is only err.name === 'CssSyntaxError'\n. @iamvdo problem was in Babel 6. It had some issues with class extending.\n. This task is duplicate for Event based API.\nI totally agree, that it is one of the biggest problem in PostCSS right now. But I asked for some technical committee leader as we did in postcss.org.\n. @lkraav https://github.com/postcss/postcss/issues/296\n. @MoOx yeap, I want to implement new also knowed as \u201cvisitors\u201d API and they we need to rewrite all plugins to it. it will dramatically fix many plugin order conflicts in PreCSS.\nDo you have any other ideas? What is a \u201cautoprefixer as the first plugin\u201d problem?\n. @MoOx as quick fix you can print a warning. Like have a blacklist of most popular plugins and warn users about having plugin before postcss-import.\n. @MoOx yeap, nobody read a docs :(. Sorry, I have no other ideas, only Event Based API.\n. Ask in gulp-postcss repo.\n. @ben-eb Awesome!\n. Yes, it is a limits of current API. We can think how to fix it in 6.0. But it will be possible only if plugin builder (function which accepts options) will be somewho different from plugin itself (maybe with new visitors API).\n. Hm. Our Or maybe we can fix it in 5.1. I think a have a idea how to avoid builder.postcss creating.\n. Done 18513f5\n. PostCSS is just a CSS parser :). There difference with standard CSS parse is that PostCSS parser ignore many issues.\n1. Property names can contain any symbols. For example, it can start from $.\n2. Parser do not check a context. So properties can be in the root. Or rules can be inside another rule.\nSo, main difference example will be:\n``` scss\n$one: 1;\na {\n  b {\n    $two: 2;\n    @any-name-that-we-want {\n      em { }\n    }\n  }\n}\n```\n. Here is a tests that we use in many PostCSS parsers: https://github.com/postcss/postcss-parser-tests/tree/master/cases\n. I totally agree, that two-factor authentication is very important.\nIf you will not enable it, we will remove you from organization :).\n. @gazay , @magsout , @morishitter , @TrySound , @yisibl I will remove your access if you will not enable Two-factor authentication on GitHub ;).\n. I move @morishitter @yisibl to outside collaborator role.\n. @morishitter no problem, I invited you back :)\n. Sorry, this change will broke API :(\n. Because right now first is a getter, not a method.\n. Sorry, Babel still have this issue. Somethings happens with prototype and class loose all its methods.\nMaybe you can find the source of issue. I am always open for PR to this issue.\n. @LPGhatguy sorry, I know that it is not fare to talk about issue without a link. But I am making a talk and deadline is just after few days.\nCan I ask you to investigate? :) Just open lib/css-syntax-error.es6 and put extends Error. Then execute gulp build and you will see broken AST (also broken tests).\n. I think you should create special gulp-stylelint :(.\nThe problem is that even Gulp and Webpack is designed to work with files separately :(.\n@w0rm\n. raws.after has different semantic. It contains spaces inside block. For example, for rule and at-rule it contains space between last child and }.\nThis is why in .foo {}\\n rule can\u2019t contains trailing \\n, because it doesn\u2019t have any fields to it.\n. Don\u2019\u2122 worry, we can always reopen issue :)\n. before is a spaces before node, not before opening {.\nWe know about problems with raws. But we can\u2019t change names or behavior, because it broke API.\nHere is description of every raw property: https://github.com/postcss/postcss/blob/master/docs/api.md#noderaws\nHere is a issue about refactoring raws in 6.0: https://github.com/postcss/postcss/issues/199\n. Why this plugin is important?\n. @GitScrum \u044f \u0438\u043c\u0435\u043b \u0432 \u0432\u0438\u0434\u0443, \u0437\u0430\u0447\u0435\u043c \u044d\u0442\u043e\u0442 \u043f\u043b\u0430\u0433\u0438\u043d \u043d\u0443\u0436\u0435\u043d \u0432\u043e\u043e\u0431\u0449\u0435\n. @GitScrum \u043a\u0430\u043a\u043e\u0433\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u0430? \u041e\u043f\u0438\u0448\u0438 \u0432 README \u0432 \u044e\u0437\u0435\u0440\u043a\u0435\u0439\u0441\u044b \u0438 \u0432 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\u041f\u043e\u043a\u0430 \u044d\u0442\u043e \u043f\u043e\u0445\u043e\u0436\u0435 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043f\u043b\u0430\u0433\u0438\u043d \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u043d\u0443\u0442\u0440\u0438 \u0444\u0438\u0440\u043c\u044b \u0434\u043b\u044f \u0440\u0435\u0434\u043a\u043e\u0433\u043e \u043a\u0435\u0439\u0441\u0430.\n. \u041d\u0435 \u043c\u043d\u0435 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0439, \u043e\u043f\u0438\u0448\u0438 \u044e\u0437\u0435\u0440\u043a\u0435\u0439\u0441 \u0432 README :)\n. Want is your user case for this feature?\n. Why you can do something like { map: { prev: func() } }?\n. Why you can't execute function on PostCSS#process call? Why you need to call it later inside PostCSS?\n. What plugin?\n. I merge it manually in 5.1 branch.\n. Sorry, it is not relevant to PostCSS. PostCSS has no this type of error.\nMaybe this answer is relevant: http://stackoverflow.com/questions/34133808/webpack-ots-parsing-error-loading-fonts\n. Ask postcss-import guys. postcss is just a core without any features. All features are in plugins. Plugin for @import is postcss-import.\nBe default postcss-import doesn\u2019t support ~ because postcss-import is polyfill for W3C spec and can\u2019t support any unofficial extensions. But they have resolve callback option, when you can add ~ support.\n. User can still set other type by node.value = 1. I will change check in 5.1 release.\n. Yeap, this PR is useful. I will accept it to 5.1 branch later (I have uncommit changes there right now).\n. I manually get this PR to zagan branch\n. It is good idea, but we already work on it for 6.0 release #296\n. Sorry, I don\u2018t a TypeScript user at all. Maybe @jedmao can help?\n. Seems like problem is fixed, is\u2019t it?\n. Nice plugin\n. @ismamz can you write a tweet about your plugin? I want to promote it with RT by PostCSS Twitter account.\n. Does current input/output example is correct in plugin\u2019s README? I miss how it works.\n. Honestly, it looks very weird. Do you use it in production with other developers?\n. I afraid that this plugin will promote PostCSS as a tool with weird unmaintable syntax \ud83d\ude14\nIf you don't know about this plugin before, you will not be able to understand syntax.\n. You could add plugin to postcss.parts. Plugins here is more like recommended plugins.\n. Cmon, you see that so many people complains about this problem. Especially in Russian Internet.\n. @delorge I think that.id` name is better, because this uniq ID could be used not only in caching. But I am open for use cases :).\n. @delorge no it is private in-plugin cache. For example, Autoprefixer has some caches and this caches should be used only inside Autoprefixer.\n. @delorge what tests you talk about?\nIf you talk about postcss-parser-tests, I regenerate JSONs on PostCSS AST update :)\n. Don\u2019t worry about them :D.\nYou can fix parser and stringify tests by adding id cleaning here https://github.com/postcss/postcss-parser-tests/blob/master/jsonify.js\n. If you have same code. Could you test it in benchmark. It is important to not have lower performance.\n. Yeap, time bases is better. But are you sure, that time is always unique?\n. Yeap, UUID is OK\n. @delorge did you update postcss-parser-tests version in package.json?\n. @delorge I found way how to increase parsing performance, just lazy id on demand:\n``` js\n    get id() {\n        if ( !this.idCache ) {\n            this.idCache = uuid.v1();\n        }\n        return this.idCache;\n    }\nset id(id) {\n    this.idCache = id;\n}\n\n```\n. But them I rewrite Autoprefixer for new cache and saw dramatic low performance:\nAutoprefixer:     51 ms\nAutoprefixer dev: 75 ms   (1.5 times slower)\nStylecow:         191 ms  (3.7 times slower)\nnib:              454 ms  (8.9 times slower)\nCompass:          2512 ms (49.2 times slower)\nThe idea was nice, but this trade off is bad. Let\u2019s wait Symbols support :(.\n. I will add extra commit to remove id, so your name will be in PostCSS history anyway. It was good experiment.\n. Sorry, source map doesn\u2019t support multiple origins\n. It will be fixed when we will tokenize values and selectors in 6.0.\n. @mischnic no news. We need very big refactoring which will bring only few features. This is why it is hard to find somebody to do this refactoring.. I added test case to postcss-parser-tests https://github.com/postcss/postcss-parser-tests/commit/80f84dcd696ef7666e159aca74902176f504a9e2\n. Released in 5.0.20\n. Done 215ed88\n. BTW, how did you get this wrong utf8 encoding name? Who generate your input source map?\n. Released in 5.0.21\n. @josephfusco so 5.0.21 will fix compatibility with gulp-sourcemaps 2.0.0-alpha? Awesome :)\n. This syntax is invalid CSS. Why you need this syntax and only any other symbol before test?\n. If you want to keep this syntax, you can just fork current parser and fix it for toot case (you can see a example in postcss-safe-parser).\n. You can use RegExp \u2014 root.walkAtRules(/media/i, () => { })\nMaybe it is a issue in API design, but we can solve it only in major release.\n. O_o Hm, very strange. We have tests with differences parsers and they should fail if we have this mistake.\nTry to set syntax: postcss. I will look at it after tomorrow.\n. Yeap, name definitely not clear. What do you think of it?\n. :+1: I like it\n. Send new PR when you finish it\n. engine is better :)\n. IE 9 support is not so popular, sorry\n. We have a long fallback plugins list in special file https://github.com/postcss/postcss/blob/master/docs/plugins.md#fallbacks\nREADME.md now containing highlighted plugins\n. Yeap\n. Plugins is sorted by name (but postcss- name prefixes is on first)\n. I will look into it after few days. Anyway we will release it only in 5.1 release :).\n. @BarryThePenguin I will accept this PR when I finish a migration to JSDoc. Just question of time.\nSorry. I hope type definitiala is not so critical. \n. Hi. I am ready to merge it :). But could I ask you to rebase commit?\n. Seems like we will move TS files to separated package in 6.0, so we don\u2019t need test here.\n. 1. Use better commit message\n2. Keep origin plugins order\n3. Move URL to end of section as in other links.\n. Sorry, this list is community selected plugins :). You can add your plugin to docs/plugins.md and postcss-plugins.\n. I will release it in 5.1, so it could take few week, sorry.\nI need to convert all docs to JSDocs.\nIs it OK?\n. I agree that we need common config. So we will have autoload for JSON configs abd require for JS.\n. Do you want to organize all discussion for this task, find best API and implement it? I will help and guide you.\n. Oops \ud83d\ude0a \"and require() in JS config\"\n. I totally agree, that we need common config in core.\nWe also started same issue, but nobody finished it yet. So half of work already done. I will send a link tomorrow (already in bed, sorry).\n. Nope, event based API is not relevant. Here is the old discuss: https://github.com/postcss/postcss/issues/477\nRead it and tell what do you think about it?\n. Config could be placed in:\n- postcss subsection in package.json\n- postcss.json\n- postcss.js\nAlso it is a good question how to name standalone configs: postcss.json or .postcss.json or postcssrc.json.\nI think we should not name it .postcss.json, because this config affects on real build, so it should not be hidden (rather than .travis.yml or .eslintrc).\n. @michael-ciniawsky looks nice, but I think we should miss config. key and use postcss key on the root.\nAlso, maybe we should move our discuss to https://github.com/postcss/postcss/issues/477?\n. @michael-ciniawsky current test are already written in ava.\npostcss(plugins) is in lib/postcss.es6, process() is in lib/processor.es6\n. Preset idea is great. But it could be step 1.\n. Everything looks awesome. Should we include it to PostCSS 5.1 or wait 5.2 after a month?\nMaybe it is a good idea to implement it in postcss-gulp, postcss-loader and postcss-cli and after some time in PostCSS.\n. @michael-ciniawsky yeap, it is addition feature anyway.\nSo, I think next step after finishing this libraries is to creating issue in gulp, CLI and webpack plugins to implement they.\nSorry, but I will be able to fix loader only from July 8 until 14 (I will start traveling to Baikanur tomorrow).\nAlso, @MoOx is final config looks fine to you? You have some experience in it.\n. @RyanZim we need to add this libraries to gulp-postcss, postcss-loader and postcss-cli. If everything will be OK, we could more it to core. Who want to do it?\n. @michael-ciniawsky why do we need env? runners could do something like:\njs\npostcssrc({ from: opts.from }).then(({plugins, options}) => {\n  postcss(plugins).process('css', { ..opts, ...options }).then((result) => console.log(result.css))\n})\nBut we need to set from to postcssrc to get right path for config finding.\n. > Whats your opinion about exposing the possibility assigning plugins to reorder them if necessary?\nWhat is exposing? :) Could you show some examples? :D\n. Ouh, very complicated user case :D. I think we could not focused on it and promote it.\n. I am on this issue. Seems like problem is in merging Sass source map and Autoprefixer source map.\nAnyway I am still investigating\n. Hm. Here is result:\n1. Autoprefixer\u2019s origin source map\n2. Sass source map\n3. Result after merge\n. Main problem is that source map merging code is not in PostCSS. I just uses mozilla source map tool. So I really have no idea why it doesn\u2018t merge this maps.\nI will create a issue there and provide all technical info that I have. But it is all that I can do on current step.\n. I created issue in source-map https://github.com/mozilla/source-map/issues/242\nI hope they will fix it soon.\nIf you want quick fix and your project is small you could move to PostCSS-only solution \u2014 it will not have any of this problem. One AST is always better than two ;).\n. Use correct order ;). ABC with postcss- prefix in the front.\n. Also what is a difference with https://github.com/admdh/postcss-increase-text-sizes ?\n. I posted it in PostCSS Twitter account and even in VK public ;)\n. @admdh you should add your tools to plugin list\n. I tested this example with AST Explorer and everything seems like fine \u2014 /*<![CDATA[*/ was parsed as comment and rule selector is body,\\n #backgroundTable.\nhttp://astexplorer.net/#/np0DfVT78g/119\nI think you have problem in some tool before or after PostCSS.\n. I will close this issue for now. But feel free to reopen it if you will get better test with pure PostCSS environment.\n. Hm, safe-parser is very close to the normal one. It is very unlikely to have this issue in safe parser.\nIf you will not find issues in other part of your environment, please, create some small repo to repeat a issue.\nSafe Parser is part of ecosystem and if we have a problem there, we should fix it. But I really think that you should start from tools before PostCSS, comment parsing is very easy to have a issues (maybe all developers say it :D).\n. Be careful \u2014 always use origin sorting :). Here is ABC sorting, but postcss- prefixed plugins is in the top (good naming promotion)\n. Also you forget to add URL for your link (they are ordered by length)\n. I will close this PR, anyway it will be better to send other one\n. @lutien yeap, if you want, you can fix other sorting issues there\n. Also send your plugin to postcss-plugins\n. 1. I released postcss-parser-test, please add it.\n2. Don\u2019t broke indentation ;).\n. I will look on next week. Anyway we need to finish JSDoc.\n. Nope, root *.md is most important\n. You miss one line \ud83d\ude09\n. There is syntax error there\n. Thanks \ud83d\ude0a\n. Nope, we should continue discuss this issue in postcss-loader ;). No connections to main PostCSS repo ;).\n. Also https://github.com/postcss/postcss-loader/issues/76#issuecomment-228002465\n. If you want to process CSS in string in browser, just use browserify or webpack to pack npm modules of postcss and PostCSS plugins to bundle.\nPostCSS don\u2019t need node.js API to process CSS string (it loads fs module, but webpack/browserify have a nice hack for it).\n. But you need to make bundle by your own. There are 2 reasons:\n1. npm community should really think about npm packages sizes. Having a pack in npm package will increase package size to 3-4 times.\n2. Anyway you need bundles not only for PostCSS core itself, but also for plugins. So anyway you will use browserify/webpack to packe PostCSS core with PostCSS plugins.\n. Could you fix plugin order and you miss a link\n. Thanks for new plugin :).\nI think this plugin is more for https://github.com/himynameisdave/postcss-plugins#submitting-a-new-plugin\nAnyway that list is more popular and it is easy to add plugin there.\n. Thanks. Yeap, this is JSDoc problem, I don't know how to fix it. We will fix it in custom API page\n. I will close it because it is postcss.org issue\n. Plugins is ordered by name (but postcss- prefix is on top to promote good naming).\n. Awesome! Thanks for fixing other plugins\n. Thanks :)\n. Oops, I missed this PR by some reason :(\n. Don\u2019t forget to send PR to https://github.com/himynameisdave/postcss-plugins#submitting-a-new-plugin\n. I also added your plugin to main highlighted list 6d6f33a\n. Thanks for work. What is difference from other rem plugins?\n. Yeap, good work, but I try to keep list clean from plugins without difference \n. postcss- prefix is recommended prefix for all PostCSS plugins and tools. But there is no any other special naming for tools.\n. Tool is a library that you use to work with PostCSS AST. Or, in other words, tools is a library that you use in PostCSS plugin.\n. PostCSS cleans values from comments by design. You can get origin value in node.raws.\nMaybe it is not best way and we should change it in 6.0.\n. @ogonkov what support do you mean?. @ogonkov can you show example?. What is user API for you component library right now? It is React components? How user load CSS right now? He must import some libraries CSS file or you pack CSS into JS by style-loader?\n. Second question. Main question about theming \u2014 could user (developer who use your component library) change any libraries CSS or he/she could change only some pre-defined config parameters?\n. @alansouzati honestly, it will be better to use CSS-in-JS for you. I suggest JSS or CSJS. With CSJS you could even use PostCSS plugins (like Stylelint and Autoprefixer) by babel-plugin-csjs-postcss.\nWith CSS-in-JS you will be able to pass config to React components props:\njs\n<Button color=\"red\">\n. I agree that having SourceMapGenerator instance will be useful.\nBut there are 2 main problem:\n1. How gulp-postcss and other libraries will know that it must save .map file separately (on missing option PostCSS look into input CSS, so it is tricky logic).\n2. This change broke API, because result.map is used as key to save map file to file:\njs\nif ( result.map ) {\n  fs.writeFileSync(result.opts.to + '.map', result.map.toString());\n}\n. @TimothyGu we can add other field to Result. Or you could create a helper getMap(result). What is exactly your use case?\n. Maybe you should just add helper function map(result). Anyway 5.2 will not be released soon on this week.\n. But I will add some extra method to next minor/major release.\n. I will release it tomorrow\n. You miss a link\n. @alexandr-solovyov c\u2019om, look into other plugins \u2014 copy their style.\nPut URL to this end (they are sorted by link length). Plugin sorted by abc (but postcss- prefixed plugin is on the top).\n. @davidtheclark some users use gulp-postcss or postcss-loader to run Stylus and they have same issue.\n. Done a9f41e7\n@davidtheclark @jeddy3 is it OK? Especially my English in error message :D.\n. Release in 5.1.2\n. Please, open issue in postcss-cli\nhttps://github.com/postcss/postcss-cli\n. Why you put URL right after plugin name, if all other plugins have URL separated? ;)\n. Also you broke 80 columns limit and forget to place a dot to the end 2a73f7d\nBe careful, always copy project style, when you contribute.\n. Sorry, I will have free time for debug only in Friday.\n. Will you have time to debug? Just put console.log inside postcss-import and compare logic in 5.1 and 5.0.21.\n. @akella by some reason postcss-partials-import 2.0 imports only files started with _ https://github.com/jonathantneal/postcss-partial-import/blob/master/lib/getPath.js#L12\n. webpack is a tool to pack all your ode into a bundles (including CSS).\nPostCSS is a framework to create CSS tools.\nwebpack uses PostCSS inside (in css-loader) to work with CSS.\nSo webpack is a pack of transforms tools (including PostCSS) to make JS/CSS/images bundles.\nBut webpack contains only few CSS tools. Of course, you need more tools. You need Autoprefixer and here you will use PostCSS (by postcss-loader). You need to inline SVG with colors (and you will use PostCSS). You need to lint your CSS (and you will use Stylelint based on PostCSS). You may need some CSS4 polyfills (and again you will use cssnext from PostCSS).\nSo if you want to do something with CSS, you takes PostCSS and on top of this framework you create a better tool. This is why webpack uses PostCSS too to work with CSS.\n. Not sure, that I answer to all your questions :). Feel free to sub other questions.\n. autoprefixer-loader uses PostCSS inside too ;).\nStylus didn\u2019t use PostCSS. But you can use PostCSS based SugarSS and PreCSS and you will get faster build.\nWebpack build-in CSS minifier is PostCSS based too (cssnano).\n. When you need to do something with CSS, you need to:\n1. Parse CSS string into AST objects.\n2. Do something with this AST objects by API.\n3. Generate new CSS string for change AST.\n4. Generate source maps.\nSo, if you write some CSS tool, you need do have some parser to do 1, 3 and 4 steps. PostCSS is one of the best parser. Of course, webpack didn\u2019t have anything to parse CSS.\nSo you need PostCSS to write this webpack loaders.\n. So, anyway with style!css!css-min!autoprefixer!stylys you use PostCSS in many steps. But this PostCSS is hidden inside (in autoprefixer-loader and css-loader).\nSecond question: why you should use postcss-loader and not some loader wraps for PostCSS plugins (like autoprefixer-loader is just a wrap on top of PostCSS and PostCSS\u2019s Autoprefixer):\nRight now you re-parse source on every step:\n1. Stylus parse .styl file from string to AST, than change AST and then convert AST back to string.\n2. css-loader again parse CSS from Stylus output CSS string (by PostCSS), convert it and generate new string.\n3. css-min parse CSS by own privtae CSS parser, remove spaces and generate new CSS string.\n4. autoprefixer-loader again use PostCSS to parse CSS to AST.\nParsing is the longest step in processors. So most time of build you spend in unnecessary parsing.\nIf you will use postcss-loader with sugarss, precss and autoprefixer plugin, you will parse input source only once. PostCSS can share AST objects between all plugins. So your built perfomance will be increased in 2-5 times.\n. Sure, PostCSS is low-level tool to work with CSS. This is why webpack use PostCSS inside.\n. =^_^=\nYes, PostCSS could have own chain of plugins. But it is better than loaders chain in webpack. Loaders with with string input. So they need to parse file again and again.\nIn PostCSS chain all plugins will work with already parsed CSS, so it will be much faster.\n. Yeap, they didn\u2019t do it (technically they can, but non of your loaders do it).\n. Sure, PostCSS is technically very close to other CSS parsers. Main difference is not so big:\n1. PostCSS is very fast. The faster from parsers, which save spaces.\n2. PostCSS save all symbols (including spaces and comments) to AST. So PosTCSS can be used in linting tools like Stylint.\n3. PostCSS generates source map.\n4. AST API is very rich in PostCSS, there are many methods to work with nodes (like HTML DOM API).\n5. Also PostCSS has many custom parsers, which generate same AST API. So you could use PostCSS plugins to work with SCSS, Less or SugarSS source\n. Sure. PostCSS is not a preprocessor/postprocessor but a tool to write them.\n. Sure. I think I should post this talk to Twitter, you asked good questions.\n. @uMaxmaxmaximus \u0437\u0430\u0442\u043e \u0436\u0438\u0442\u0435\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0440\u0430\u043d \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \ud83d\ude0a. \u0416\u0430\u043b\u043a\u043e, \u0447\u0442\u043e \u042d\u0441\u043f\u0435\u0440\u0430\u043d\u0442\u043e \u043d\u0435 \u043f\u043e\u0448\u0451\u043b.\n. Sorry, we should highlight only one plugin.\nAnd I am not happy that we have three different solutions for it (stylefmt, postcss-sorting and your plugin). Why you can\u2019t unite with @hudochenkov and Stylelint authors?\n. Is the performance is only difference between your plugins right now?\n. It is hard question, it is like two your child come to you and ask \u201cwho you love more\u201d :D.\nAnyway, I think, right now, that we should promote postcss-sorting. My reasons:\n1. It has better name according PostCSS Plugins Guidelines.\n2. I think that this type of plugins should sort at-rules. Users need a solutions, not a one-type-of-node-tools. Many users use Sass. Some uses PreCSS. All of them need to sort rules and at-rules. Also our main competitor here, CSSComb, sort mixins as well.\nThis is why I think, that we need to select postcss-sorting. And we can\u2019t select both, because it is highlighted list (we still have full plugins list in docs/plugins.md).\n. Maybe you should add your link to postcss-sorting README.md? Like:\n\nThis plugin sorts at-rules, rules and other node types. If you want sort only declarations, you could do it faster, by [css-declaration-sorter]\n. @hudochenkov I like the idea of integration with Stylelint in this way!\n. Yeap, it is issue of JSDoc, they can't hide abstract class from menu, but still generate file for it. We waiting for API page in postcss.org\n. \u0410 \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u0442, \u0435\u0441\u043b\u0438 \u043f\u043e\u0441\u0440\u0435\u0434\u0438\u043d\u0435 \u043b\u043e\u0430\u0434\u0435\u0440 \u0438\u0437\u043c\u0435\u043d\u0438\u0442 \u043a\u043e\u0434, \u043d\u043e \u043d\u0435 \u043e\u0431\u043d\u043e\u0432\u0438\u0442 AST?\n. \u0414\u0430, \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0432\u0435\u0431\u043f\u0430\u043a\u0430. \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0439 issue.\n. \u0414\u0430, \u043d\u043e \u043e\u0431\u0441\u0443\u0434\u0438 \u0441 \u0440\u0435\u0431\u044f\u0442\u0430\u043c\u0438 \u0438\u0437 \u0432\u0435\u0431\u043f\u0430\u043a\u0430 ;). \u0422\u0430\u043c \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u0445\u0438\u0442\u0440\u043e\u0441\u0442\u0435\u0439 \u0432\u043d\u0443\u0442\u0440\u0438 \u2014 \u043c\u043e\u0436\u0435\u0442 \u044d\u0442\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441 \u043a\u0435\u0448\u0430\u043c\u0438.\n. \u042f \u0441\u0435\u0439\u0447\u0430\u0441 \u0431\u0440\u0430\u0442\u0443 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e \u0420\u043e\u0441\u0441\u0438\u044e \u2014 \u043d\u0435 \u0441\u043c\u043e\u0433\u0443 :(.\n\n\u041d\u043e \u0442\u044b \u043d\u0430\u0447\u043d\u0438, \u0442\u0430\u043c \u043d\u0435\u0439\u0442\u0438\u0432\u043e\u0432 \u043c\u0430\u043b\u043e. \u041f\u0440\u043e\u0441\u0442\u043e \u0447\u0430\u0449\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c.\n. We already have safe parser. I will pick your code manually.\n. I moved all commits to vapula branch.\n. https://github.com/postcss/postcss/commit/30e055b3cb0cfbc909a68445d134b71ab9a983c3\nhttps://github.com/postcss/postcss/commit/7f9754a4fefbef41fdc2bca5d717a66b2db99b71\n. Could you show full code example and console.log output?\n. What selectorID do you expect?\nIn this CSS\n``` css\nurl {\ncontent: \"https://color.adobe.com/create/color-wheel/?copy=true&base=2&rule=Triad&selected=0&name=Copy%20of%20Taupe&mode=rgb&rgbvalues=0.5117647171020507,0.4559572206288501,0.359224226741925,0.5918253479903853,0.843137264251709,0.6988034991830846,0.8117647171020508,0.7529411911964586,0.6509804129600525,0.5373702727493649,0.42941746491123256,0.6117647171020508,0.4599704491887691,0.3848124625970275,0.5117647171020507&swatchOrder=0,1,2,3,4\";\n}\n```\nRule has selector #url for me :)\n. @alexlibby you don\u2019t need this code var root = postcss.parse(css);, css is already instance of Root!\n. Try to replace:\njs\nexport default postcss.plugin('postcss-color-cc', (options = {}) => {\n    // Work with options here\n    return css => {\ninto\njs\nexport default postcss.plugin('postcss-color-cc', (options = {}) => {\n    // Work with options here\n    return root => {\n. Sorry, this question is for webpack ;).\nI think webpack is too complicated and it is good example of problems from complicated API ;)\n. I use Gulp and have no good experience with webpack\n. Please fix order. Plugins are ordered by name (but postcss- prefixed plugins on top). URLs are ordered by length.\n. result.opts\n. Hm, strange. The only way to set parser is options.\n. What do you mean?\n. What do you use to run PostCSS? gulp-postcss/postcss-cli/postcss-loader?\n. @GarthDB how you use PostCSS JS API?\n. Idea of global standard for AST-tools is nice, but Unified\u2019s AST basis is not the best. @ben-eb told that in event based API we need something more Babel-like. Idea of separated node and position is nice.\nBut I love the idea of some global API standard across Babel, PostCSS and other tools. Maybe we could discuss this standard?\n. @wooorm hi, awesome projects!\n1. What is Unified without Unist?\n2. I one hand I love pain JS objects. In other hand DOM-like API is very good for new developers. For example, Stylelint rules show be written by developer with any qualification. What you thoughts about it?\n3. What do you think about Babel visitor API? It is good to combine all plugins to work in one loop instead of looping separated in every plugin.\n. @wooorm I like the idea about engines. Where I can read about them and about your plugin API?\nWhat do you think about parent node in AST?\nOther question, how to make a validations? For example, to prevent user from setting integer to string value?\n. The origin processor issue was resolved\n. PostCSS parser doesn't validate content, only syntax.\nnot() content is not a syntax.\nThere is a Stylelint to validate content.\n. The best way to work with it is to add new rule to Stylelint to validate not(). You can use postcss-selector-parser to parse selector content.\n. We use this spec in PostCSS parser: https://www.w3.org/TR/css-syntax-3/\nIt is content free spec, it describe only, that functions could be in selectors, but doesn\u2019t describe what pseudo exactly could be in pseudo.\nPostCSS is content-free parser, because it could be used in polyfills or prolyffils. What if not() pseudo will be changed in future spec?\nThis is why PostCSS parser doesn\u2019t fall on unknown property, or unknown function in value or unknown at-rule.\nSo there is a two way of checking CSS:\n1. Tokenize CSS string\n2. Create a AST by tokens\n3. Check AST content\nOf course :not() arguments could not be checked in step 1 and step 2. By PostCSS philosophy, core parser do only step 1 and step 2.\nThere is a Stylelint for step 3.\n. Why you don\u2019t want to add this check to Stylelint?\n. Plugins is sorted by name (with postcss- on top). Links are sorted by length.\n. Thanks :)\n. I will try to look at it on this weekend. Feel free to ping me on next Friday again if I will forget.\n. Fixed dacd392\n. Sorry, it will be released only in 5.2, because it introduces new token.\nYou can use postcss-safe-parser until release.\n. I try to release it on this weekend, but maybe it could take a week.\n. Released in 5.2.\n. Awesome :)\n. 1. Oops, second symbol must be back tick too. Fixed 652883d. Thanks for notice.\n2. Back tick string could not work in Console, because it is ES6 feature https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\n. Thanks :)\n. Deployed to http://api.postcss.org/\n. It could be a string or array of strings\n. @pascalduez you didn\u2019t pushed it :( Send other PR\n. Could you create some test project?\n. Sorry, I will take a look on it only in the end of January. Feel free to look into PostCSS code if you need fix faster.. Yeap. Issue is unrelated to PostCSS. Source maps looks good.. Thanks!\n. Could you add code examples?\n. What is css in your example above? ;) Please show me in what cases PostCSS ignore blank lines ;)\n. I you sure? Here is my test:\n``` js\nlet postcss = require('./');\nlet css = '.test {\\n' +\n'  color: black;\\n' +\n'\\n' +\n'  &:hover {\\n' +\n'    margin-top: calc(10px + 20px);\\n' +\n'  }\\n' +\n'}\\n';\nconsole.log(postcss.parse(css).toString())\n```\nAnd result is correct:\n``` css\n.test {\n  color: black;\n&:hover {\n    margin-top: calc(10px + 20px);\n  }\n}\n```\nDo you know, that when you clone some node, PostCSS will remove all whitespace symbols? Maybe this is why blank line is missed.\n. I think this raws clone behavior was a mistake, but we need a major version to fix it :)\nPlease subscribe to this issue: https://github.com/postcss/postcss/issues/364\n. Could you make other PR with fixed order? Plugins are ordered by name (by postcss- prefix is on the top), links are ordered by length.\n. This docs/ could be using during offline development. But thanks for look-out :).\n. Fix looks good \ud83d\udc4d.\n2 times boost? Awesome!\nI will try this PR few hours after (need to go to shop right now).\n. Released in 5.2.1\n. Good idea. We already have idea, how to fix it https://github.com/postcss/postcss/issues/296\nClosed. as duplicate, not as wontfix ;)\n. @borodean resolving core looks very promising!\n@TrySound @jantimon @swernerx what do you think of creating something like postcss-resolve-path and use it in all your plugins?\n. I thought about same logic, not same config :D \nUser could put paths to variable and use this variable for both plugins\n. No any result :(. I will close this issue, because seems like having open issue here doesn\u2019t help. If somebody really need this core library, feel free to create it.. Could you show your webpack config?\nWhat was change before slowing down?\n. 40 seconds is a production or development build?\nPostCSS parsing is very fast. We need to find, what PostCSS plugin exactly slow down process.\n. When build process become slower? After what change?\n. Could you add postcss-devtools to PostCSS loader to check how many time PostCSS plugins works?\nhttps://github.com/postcss/postcss-devtools\n. Awesome! You was really fast.\nSure we could left crazy things. It is not so important feature to be 100% accurate.\nI will accept and release tomorrow (sorry, in the train right now).\n. Released in 5.2.4.\n. postcss-cssnext already does some polyfills for CSS. But it has no maintainer right now. Do you want to be new maintainer for cssnext?\n. @MoOx are you looking for new postcss-cssnext contributor? We have one here :).\n. @MoOx I think we need to do features revision (like custom media was removed from spec) and add stage option to mark sure level of every feature. What do you think about it?\n. @MoOx so, what is @artemgurzhii next move? Create a issue in postcss-cssnext repo with stage for every plugin? What he could read to do it better?\n. Specify path regexp in test key and use \"plugins pack\" (check postcss-loader for API)'in this loader.\nAlso it is wrong repo to report questions about postcss-loader \ud83d\ude09\n. If you ask about PostCSS and Sprockets \u2014 there is no easy way, because your need to use npm.\nTechnically, you could install PostCSS plugins via npm and then use it in Sprockets.\nBut, nobody develop out-of-box solution. Reason is very simple \u2014 Sprockets is dead. There is no ration reasons to use Sprockets, instead of Gulp or Webpack (I was a big fan of Sprockets and I know what I am talking about). All modern techniques are only for node.js frontend build tools.\nSo you have 2 options:\n1. Develop some solution for Sprockets. But only few teams will use it.\n2. Or spent this time by moving to webpack ;).\n. Could you please show real stacktrace with input CSS example?\n\u201cSomething was wrong\u201d and then I fixed it somehow is not a good issue report ;).\n. You give me a SCSS source, not CSS :).\nYou use postcss-scss to lint SCSS sources with Stylelint?\n. @maliyshock \u0442\u0430\u043a \u0437\u0430\u0447\u0435\u043c \u0442\u044b \u043c\u043d\u0435 \u0434\u0430\u043b SCSS? ;)\n\u0415\u0441\u043b\u0438 \u0445\u043e\u0447\u0435\u0448\u044c \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443 \u2014 \u043e\u0442\u043a\u0440\u043e\u0439 \u043d\u043e\u0432\u044b\u0439 issue, \u0441 \u0432\u0445\u043e\u0434\u043d\u044b\u043c CSS \u0438 stacktrace \u043e\u0448\u0438\u0431\u043a\u0438.\n. \u041d\u0430 \u0431\u0443\u0434\u0443\u0449\u0435\u0435 \u2014 \u043d\u0435 \u043f\u043e\u0441\u0442\u0438 stacktrace \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u043e\u043c. \u0421\u043a\u043e\u043f\u0438\u0440\u0443\u0439 \u043f\u0440\u043e\u0441\u0442\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0442\u0440\u0438 \u0442\u0438\u043b\u044c\u0434\u044b \u0441\u0432\u0435\u0440\u0445\u0443  \u0441\u043d\u0438\u0437\u0443 (\u044d\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u0431\u043b\u043e\u043a \u043a\u043e\u0434\u0430 \u0432 \u041c\u0430\u0440\u043a\u0434\u0430\u0443\u043d\u0435).\n. \u0422\u0430\u043a \u0436\u0435 \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u043e\u0439 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430, \u043f\u043e\u043a\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c\u0441\u044f. \u0427\u0442\u043e\u0431\u044b \u0441\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u043c\u0435\u0439\u043d\u0442\u0435\u043d\u0435\u0440\u0430.\n. \u041f\u0440\u043e\u0433\u043d\u0430\u043b \u0442\u0432\u043e\u0439 CSS \u0447\u0435\u0440\u0435\u0437 PostCSS \u2014 \u043e\u043d \u0435\u0433\u043e \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043b.\n\u0412\u0438\u0434\u0438\u043c\u043e \u0443 \u0442\u0435\u0431\u044f \u043a\u0430\u043a\u0430\u044f-\u0442\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0441 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u043e\u043c. \u0412\u0438\u0434\u0438\u043c\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0444\u0430\u0439\u043b \u043e\u0431\u0440\u0435\u0437\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u0440\u0435\u0434\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f. \u0412 \u0438\u0442\u043e\u0433\u0435 \u0432 PostCSS \u0443\u0436\u0435 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u0431\u0438\u0442\u044b\u0439 \u0444\u0430\u0439\u043b.\n\u0422\u0435\u043e\u0440\u0438\u044f \u0441 \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0430\u0439\u043f\u0430\u043c\u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442 \u0438 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0440\u0430\u0437\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u2014 \u0432\u0438\u0434\u0438\u043c\u043e \u043e\u0431\u0440\u0435\u0437\u0430\u0435\u0442 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0432 \u0440\u0430\u0437\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435.\n. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043c\u043e\u0436\u0435\u0448\u044c \u043e\u0442\u043a\u0440\u044b\u0442\u044c node_modules/postcss/lib/parse.js \u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c console.log(css) \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse \u2014 \u0442\u0430\u043c \u043d\u0430\u0432\u0435\u0440\u043d\u044f\u043a\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u0440\u0435\u0437\u0430\u043d\u043d\u044b\u0439 CSS.\n. \u041c\u043e\u0436\u0435\u0442. \u0418\u043b\u0438 \u0447\u0435\u0433\u043e-\u0442\u043e \u0435\u0449\u0451.\n. @simonsmith unfortunately right now we have a few big problems in postcss-import:\n1. It doesn\u2019t support .sss or .scss imports out-of-box by design.\n2. It doesn\u2019t support globbing out-of-box by design.\n3. Current postcss-import v8 branch has too many issues and @MoOx just want to return to v7 and start again.\n4. postcss-import has no development. This issue is critical for postcss-loader 1.0: https://github.com/postcss/postcss-import/issues/233\nBut agree, we should fix a postcss-smart-import docs.\n. @simonsmith let\u2019s ask @swernerx\n. Yeap postcss-smart-import looks like \u201cjust postcss-import in development. So maybe we should just rename it to postcss-import?\n. @MoOx you are looking for new maintainer, isn't you? In this case you should increase developer enthusiasm by giving more responsibilities. Unfortunately, non-strict instructions (what PR, for example) kills enthusiasm. For my experience, this it could be a main reason why you still didn't find a new maintainer.\nIn my experience there is two steps to transform a regular user into a open source maintainer:\n1. Strict steps instructions (for instance, add this feature to this function in this file, add test, and a PR).\n2. Responsibilities.\nSo my current plan is:\n1. Pick a smart-import features that should be backported to postcss-import.\n2. Pick a partial-import features \n3. Add @swernerx (and @jonathantneal) as maintainers.\n4. Finish import crisis.\nGuys, what do you think?\n. @swernerx I like waht you did in postcss-smart-import, but I am not big fan of integrating plugins into each other ;).\nI see this problems:\n1. Users want the different syntax for different cases (like inline() from postcss-assest and url() from postcss-url).\n2. postcss-url is used in many hacks, where you didn\u2019t want to have @import support. For instance, if user just want to set cache-buster to links.\n3. There is also SVG, where you need more smart solution like postcss-inline-svg.\n4. Users like the modularity idea.\nBut I agree that many users need all this plugins, and they want a zero-config, out-of-box solution.\nWhat do you think about this steps:\n1. Unify assets plugins config. We already have a issue about it: https://github.com/postcss/postcss/issues/895\n2. Create a very small preset (because all assets plugins will use one parameters).\n. @MoOx we found a good maintainer for postcss-import are you ready to take this heavy work from you?\nbecause I think we should work at postcss-import next major.\n. @jonathantneal I totally agree, that modularity is awesome for internal architecture.\nBut my experience in PostCSS maintaining showed to me, that modularity is not so good in end-user UX.\nRight now main complain about PostCSS is that users ned a hours to configure a simple build process. Imagine how that are disappointed, when they need to search, select and fix compatibility problems between plugins of PostCSS plugins \ud83d\ude09.\nThis is why in my opinion, we should focused to give solutions, not features and plugins. Most popular features should be work out of box, without configuration.\nThis is the reason, why I so disappointed about current postcss-import state.\nYou need to 5 lines config for simple features like importing SugarSS files and add dependency to webpack.\n. @RyanZim do postcss-smart-import has this \"v8\" issues?\n. @MoOx let's just change a postcss-import maintainer without PRs. I think postcss-smart-import author showed, that he is aa good maintainer.\n. @swernerx what ssh you think about that issue? Should we downgrade plugin or it could be fixed in current architecture?\n. @MoOx if you really want core module idea we could rename postcss-import to postcss-import-core and use postcss-import for full-features version.\nCurrent problems with postcss-import + postcss-easy-import:\n1. Users see postcss-import plugin, take it and didn\u2019t find a features. You must to be deeply into PostCSS community to find postcss-easy-import. See downloads stats. So, shorter and clear name is really important.\n2. You still need to configure postcss-easy-import. It couldn\u2019t just load SugarSS out of box. Even for globbing you need to read docs and find right option.\n. @MoOx I understand that you like W3C compatibility idea.\nBut right now postcss-import doesn\u2019t have a maintainer. There is very important dependency message issue and you didn\u2019t even ask for PR.\nSo, from my point of view, any maintainer (but I think @swernerx is good) is better, that no maintainer at all. Especially for so critical plugin like postcss-import.\nCould you collect what philosophy is important in postcss-import. We could discuss it together and you could free this plugin for promise not to break this philosophy.\n. I am OK with @RyanZim too :). @RyanZim do you want to be a postcss-import maintainer?\n. @RyanZim could you send PR with dependency message too? https://github.com/postcss/postcss-import/issues/233\n@MoOx so, let\u2019s change a maintainer and start picking a features?\n. I think problem is that not all symbols has mappings in Less source map (for example, whitespaces). So when PostCSS create mappings for all symbols, some of them connect with Less\u2019s mapping, but some have no connections.\nHonestly, I don\u2019t know best solution right here. And do we really need to spend time to fix it? ;)\nIf you really want to fix it, you can use source-map-visualization to see differences between PostCSS and Less mappings. If this mappings was really strange feel free to open new issue or send a PR.\n. @erquhart I think you should not always be sure in sources. What if some other tool will miss mapping for some a{}? In this case PostCSS anyway will use .css file mapping.\nSometimes PostCSS plugins developers write bad code and miss Node#input. In this case PostCSS set <no source> source (it helps to find this mistakes).\nSo you should write:\njs\nif (fs.exists(source)) {\n  doMagic(source)\n}\n. Of course, if you have time for investigation I will accept PR.\nAs I told you should start from source-map-visualization to see differences between PostCSS and Less mappings. Maybe you will find, that Less miss mappings for some symbols or whitespaces. Or maybe it could be a small PostCSS mistake.\n. @erquhart it is good that you try to provide a better UI for users :).\nOK, show me a that strange mappings (you can see it by source-map-visualization). Then I will tell you how we can fix it.\n. Strange. I didn\u2019t see a .css mapping there O_o. Maybe we don\u2019t clean sources?\nCould you show result.map._mappings? (set map: { inline: false } to get result.map)\n. @erquhart sure, just show me a ._mappings inside this result.map.\n. I need a PostCSS map mappings. Not a PostCSS map JSON, but result.map._mappings.\nresult is that thing from postcss(plugins).process(css) //=> result (when you use low-level JS API). _mappings is a private method from sourceMap.SourceMapGenerator, which show decrypted mapping.\n(Or just create a simple test project, I could look at it on next weekend.)\n. Sure, seems like we have a PostCSS issue here. sources are not cleaned.\n. I need to go to bed right now. Could you create a small test project?\n. I checked PostCSS sources. Main problem, PostCSS doesn\u2019t generate sources. SO there is no way to fix it without dangerous hack.\nTry to open issue in source-map: https://github.com/mozilla/source-map\nBy some reason they didn\u2019t clean sources.. @airdrummingfool because PostCSS doesn\u2019t update Sass source map. PostCSS only generates new source map.\nsource-map combines two source maps.. Please fix plugins order (by ABC, postcss- prefix on top)\n. @teaualune thanks to you too for committing to PostCSS. Cute avatar :)\n. Just use webpack/browserify to build a PostCSS and plugins into a single file.\nIs it OK for your case?\n. I added a Browser section to docs b302129\n. If your application is built webpack/browserify you could use PostCSS inside app\u2019s webpack :D.\nMaybe I didn\u2019t write it clear. Do you want to send a PR for this section?\n. Most of non-fs-related plugins are working (of course, postcss-assets or postcss-import could not work, because of lack of FS)\n. @alexisvincent what is \u201cconvo\u201d?\n. @alexisvincent I make a typo and then edit message.\n. Why do you need it absolute? What is your use case?\n. If it is very specific, maybe you can just write relative-to-absolute tool? And just call it on source maps after PostCSS? \ud83d\ude0a\nI think it could keep PostCSS API clean, but still since your problem.\nAlso this till will be useful for many other processors with source map (like Babel or Sass).\n. Hm. OK. I will think about it.\nBut I am not planning minor release on this week \ud83d\ude1e. So release week not be soon.\n. sourceRoot is much interesting! We have more use cases for it.\n. So, does sourceRoot fixes all problems? I think it is better API. Do you want to make PR?\n. You need add to docs use cases.\nHow users will use this output JSON?\nInput/output examples should always be useful and oriented to clients.\n. Input/output example is part of Plugin Guidelines. Repo with big JSON is not clear output example ;). Users should see a benefits.\n. Ping me, when you will fix it.\n. Why users should care about JSON? :)\nif your plugin is plugin for StyleStats, show a stylestats output in output example ;).\nAlso input example should be a CSS. So user will undestand the stats.\n. Please, also add a StyleStats output. Users don't know why they need a JSON. Show final use case.\n. I think you should display stylestats console output.\n. Yeap\n. Very weird. I will try to look in this weekend. Feel free to ping me in Monday if I will forget.\n. Will it work if you will set to: 'src/test.css'? Will it work if you set absolute path to from and to?\n. I found problem. It was because of wrong content of opts.map.from. It should be relative from to (in this case it should be test.css).\nI fixed docs: https://github.com/postcss/postcss/commit/30ac96f1a93484a591ba94a98e6a8aba519b3d37\nopts.map.from is low-level option for rare edge cases. You should not use it.. Main problem that in this case PostCSS could not detect does user want to write semicolon.\ncss\na {\n    @extend .something;\n    @mixin hiya {\n        display: none;\n    }\n}\nYou could detect by some logic in your plugin and then force all raws.semicolon to same value if last child is Rule.\nProblem that semicolon logic was created for standard CSS. I am open for any parse changes, but I need some strict rules.. Fix was merged. Released in 5.2.6. You forget links :). CSS syntax verification was never part of PostCSS goals. We should add rule for Stylelint.\nExtra checking will slow down tokenizer and will reduce consistence (\u201cPostCSS parse CSS as-is\u201d).. Check source maps after each steps by source-map-visualization.\nIf you find problem in PostCSS, please create separated issue with input CSS, input map, output CSS and map.. Thanks for investigation. Yeap, a selector mapping is broken.\nRight now I am preparing for conference and will be free after Dec 11. Could it wait until this date? Maybe I will have time on next week.. Sorry, I am in other project. Because we had no other reports and problem is not critical this issue is low priority right now.\nDo you want to try to fix it by your own? I will help you.. Be prepare that this issue will not be fixed for few months:\n\nI am preparing for React London with talk about Logux.\nResult is not critical.\nIt doesn\u2019t happen on pure PostCSS stack \ud83d\ude1b. I am always open for PR ;). I mean do all CSS work inside PostCSS: linting, preprocessing, prefixes, postprocessing. Yeap this issue happen when you have previous source map. Of course, it is a error and I will fix it. PostCSS should update others source map.. @subicura I will look into it again after React London (March 28). I tried few changes but had no success.\n\nPostCSS source maps are good. Sass source maps are good. Problem comes from mozilla\u2019s source-map, when it try to merge source maps.\nSince Sass compatibility is not goal for PostCSS, I will close this issue (anyway I don\u2019t know solution right now).\nPossible solutions:\n\nShort-term: use postcss-based preprocessors like PreCSS or cssnext. In this case you will get 100% compatibility with other postcss-based tools like Autoprefixer or Stylelint.\nLong-term: when we move selector and value parser inside core, we will split CSS into smaller chunks. Source maps may be fixed by it. https://github.com/postcss/postcss/issues/754. What is a problem with this mapping? PostCSS generates less nodes, so result mapping is smaller. This question is for grunt-postcss. PostCSS should keep only current file :D.. @VitaliyR how big files (in MB) did you parse?. @VitaliyR could you try to call tokenize() on them to detect is it a tokenizer issue, or a parser. @hzlmn now is working on taking csstree tokenizer to PostCSS, it will improve tokenizer memory usage https://github.com/postcss/postcss/issues/939. @VitaliyR does this 43 MB is in one file? Or you have many small files? Do you concat them?\n\ndo you use webpack or gulp?\nDo you have such so big CSS because of inline images/font or it is a lot of rules?. @VitaliyR could you try to disable source map support (maybe memory problems came from source-map library?) Just disable maps in Sass and set map: false in PostCSS.\nWhat size of the biggest CSS file?. @VitaliyR could you please create a issue in source-map with full stacktrace and your project description. Also maybe you should give them one file with source map to investigation.\nIf problem came from this library they will know more how to fix it.. > a lot of problems in a current version of postcss\nWhy you so aggressive with me? :cry: \n\nParsing them takes a lot of time, more than half of total build time\n\nDo you know any other good source map library? Or maybe we could speed-up current one?\n\nFor instance, with sourcemaps this project builds for 2m 47s (where 1m 44s postcss), and without them - 1m 55s(where 52s postcss)\n\nDid you try to optimize source map usage? For example, did you use sourceContent? It always biggest part of source map. If you need it, you can add it on last step of CSS pipeline.\nDid you already create a issue about memory problems on source-map? It is very important to report issue to library authors (but try to not use Russian aggressive speaking style :wink:).. Seems like it is Grunt/source-map issue. I will close this issue.. @VitaliyR OK, let\u2019s wait for source-map authors help. I just use their API and don\u2019t know internal structure to help in this case.. I changed signature to:\njs\nplugin.process(cssString, processOptions, pluginOptions);\nBecause now all plugins need options, but from and to should be set for most of cases.. Done bde85b8. Now we has plugins list in docs/plugins.md. Could you make other PR and add your awesome plugin there?\nBTW, do you have any link about postcss-bidirectional and Firefox? I want to promote it in twitter :). What is use case for it?. @GitScrum and why you need to create a plugin, which could be used in PostCSS and PostHTML?. Why not:\njs\npostLoadPlugins(\u2026).css.process(\u2026)?\n.css method could call postcss() inside.. If .css will return a Processor you could write even:\npostcss([\n  extraPlugin,\n  postLoadPlugins(\u2026).css\n]). > There is no need to determine process if I know him. The main point of the plugin - run in unknown environment.\nWhat does it mean \u201cunknown environment\u201d?\n\ncould you elaborate ?\n\nUser may want to load some plugins from post-load-plugins, but other set manually.. > was meant to be unknown plug-in which process it will be ie plugin doesn't know about entourage but can define it\nSorry, I didn\u2019t got it. Could you show some examples?. He know nothing according current API? Why we can\u2019t change from:\njs\npostcss(postLoadPlugins(\u2026))\nto:\njs\npostcss(postLoadPlugins(\u2026).css). Why we can\u2019t change to postcss(postLoadPlugins(\u2026).postcss)?. I think user will just copy some example from post-load-plugins docs.\nIf post-load-plugins really become popular we could add special support for it.. Is it correct CSS? I thought that ; could not be in rules context. Main problem that current parser was not designed for this spec :D.\nWe could add raws.ownSemicolon to the Rule.. It could be do in minor, because I'll paying this was not part of public API. But we could make it major to clean deprecated API \ud83d\ude09. Hm. In the middle of January?. @wincinderith I plan to deal with it on next week. Done a1cf3e7\nI added rule.raws.ownSemicolon with \";\" or \"[any spaces];\" content.\nThere is only one problem with current implementation. If we will have comments between } and ;, parser will not consider, that semicolon is part of rule.\nBut this limit is very rare and I will fix it if @apply because a really standard.. Released in 5.2.8.. Docs about from and to options: http://api.postcss.org/global.html#processOptions\nThis options is a filename of origin file (for instance, app.css) and output file after PostCSS (for instance, app.min.css). You need to specify this file names to generate correct source map.. You need a process(\u2026).then() because some plugins could be async.. You have a fs.writeFileSync('app.css', result.css) inside process(\u2026).then(), because only in then() callback you will get processed CSS after PostCSS transformations. I made JS API example in docs more clear: 2820c76\nThanks for your questions. @Diokuz I thought about file system shortcut. But it is unnecessary in most of cases:\n\ngulp-postcss gets file content via Gulp API.\npostcss-loader gets file content via webpack API.\nPostCSS CLI use better reading mechanism to read multiple files faster.\nPostCSS for client JS has even no access to fs.\n\nIn result there is no good reason to some postcss().readAndWrite() shortcut. Anyway most of PostCSS runners will get file content by other way.. @RyanZim I uses fs to show:\n\nthat you need to write .map only if it is present in result.map.\nwhat is from and to options.. @Diokuz and what is a reason for this .process({ from: 'src/app.css', to: 'app.css' }) shortcut? It will increase code size and decrease maintainability without any benefits for any popular runner.. @Diokuz options.from and options.to are used only for source maps. Source map should contains a paths. PostCSS doesn\u2019t load file from a.css, it takes CSS content from css.\n\nWe could add .process({ from: 'src/app.css', to: 'app.css' }), but nobody will use it. Every PostCSS runner (gulp-postcss, postcss-loader, postcss-cli, postcss-js) uses different methods to read/write files.. Thanks :). node.js 5 is not supported anymore https://github.com/nodejs/LTS\nIt even doesn\u2019t have a security updates. This is why you should update it.\nThis reason happens because of caniuse-db issue with node.js 5, but nobody will fix it, because node.js 5 should not be used in any production https://github.com/Fyrd/caniuse/issues/2981. There is no real reason for it. Personally, I really like this idea, especially after csstree show it\u2019s great parser with nextToken idea (with many other great ideas).\nDo you want to update current parser and tokenizer? Or you could take csstree parser and try to connect it to PostCSS\u2019 parser.. @hzlmn I think you could start from backporting csstree tokenizer. If it possible, it will give a tokens streaming in the fastest way. If it is not possible we could try to add this feature to current tokenizer.\n@lahmatiy do you think it is possible to backport csstree tokenizer to PostCSS?. Awesome! \ud83d\ude0d\ud83c\udf85 Feel free to ask any help.. Could you show some structure example?\nBut I think separating set and parser is a good thing.. @tunnckoCore you could write much better tokenizer for JSON only format :).. I use this option in Safe Parser.. Done in orias branch. Oops. @DUBANGARCIA could you send second PR with URL for a link?. @DUBANGARCIA OK, I fixed it 92266a8. Sorry, it is not relevant to PostCSS. You have some problems with npm at all.. @zhangping2014 sorry, I don\u2019t know :( I am not good in npm.. I thought you will take csstree package, but you want to rewrite it from scratch?\nI think it will be better to have one tokenizer for both project. Is it possible?. OK, let\u2019s start from backporting until we will have some feedback from @lahmatiy . @hzlmn sure, let\u2019s update current tokenizer.\n@lahmatiy I think tokenizer unification will be great for both project. You will get much more users. PostCSS will get faster parser (but right now main performance problem is multiple AST walks). Tell me if you need help with API, I will try to use Cult of Martians to bring developers.. Could you show full error stacktrace to see error source?. Try this one http://stackoverflow.com/questions/31410712/see-full-stack-trace-on-gulp-exception\nOur other ideas from gulp full stacktrace Google results.. Please open a issue in MQ plugin repository.. I like to move type definitions, but I think it will be better for major release.. Can we have @types/postcss6.0, @types/postcss6.1?. How DefinitelyTyped authors suggest to solve this problem?. OK, let\u2019s keep them inside if we have no good solution right now.\nBTW, one file difintion is very good change :).. @jedmao Hi, could you update TypeScript definitions in orias brach?. No, API was changes in few places.\nBut of course we could update TS after. @jedmao but in result DefinitelyTyped doesn\u2019t support PostCSS case? We can\u2019t remove TS from npm?. Thanks. Released in 5.2.9.. I will release it in few days. Is it OK?. 1. You can write any plugin with any logic. Just use PostCSS API in custom plugin.\n2. Some url() magic could be done more easy by url option in postcss-url plugin.. Hi. Your investigation was great. Do you want to send PR?. I will go to trip this Friday. Please, ping again in Saturday. I will look.. @hzlmn you put CSS file content to backticks string (</code>), but forget about`.\n`\\'` //=> \"'\"\nSo if you move CSS file content to string, you need to replace \\ to \\\\.. Even if this PR is not finished, it is really amazing than you did so much work.\nI don\u2019t expect any PR in parsers \u2014 most of developers afraid even change a single line in parser/tokenizer. And then you make so big changes in such small time :D.. Seems like tests passed. Is it finished? We could release it in 6.0.. Don\u2019t forget to run postcss-benchmark. It could compare local postcss if they are both in same parent dir and you compile PostCSS by gulp build.\nDev/\n  postcss/\n    build/\n    \u2026\n  postcss-benchmark/. @hzlmn yeap. @hzlmn looks like bug. @hzlmn if you will fix it, it will be awesome :D. We will have a major release for it anyway.. @hzlmn same benchmark is good too. We use less memory without a reduce of CPU speed. So it is a great step anyway.. But any improving is good idea :).\nBe ready that we need few weeks to release 6.0. I need to change few other things if we are going to major release.\nOr we should release it as minor? @ben-eb . I am waiting for you to merge it. And then I will need few weeks to fix raws issue. Do you want to add something more to this PR?. Nope, sorry. But you can run AVA by CLI without Gulp. For example, you can use my n alias \nhttps://github.com/ai/environment/blob/master/zshrc#L52. We plan to start 6.0 branch tomorrow. Do you have anything to add?. I merged it to 6.0 branch manually. If you want to tune it more, please send other PR to orias branch.. Seems like you didn\u2019t use stream tokenizer in this PR? \njs\nlet tokens = tokenizer(new Input(css), { ignoreErrors: true }).tokenize();\nThis could be a reason for same benchmark results.. I finished your work: 1427538\nNot it is totally streamed and have same performance.. We need one extra PR from @jedmao. A bug. But are you sure about // is really in strong and is not you decide tool way to show /. Could you check rule.selector.length?. Yeap, everything correct. For example try .class\"@test\" { } it will be presented as \".class\\\"@test\\\"\" (note about \\\" instead of \").\nIn JS \\ in string have a special meaning. For example \\n is not a \\ and n, but it is new line. So a\\n string could not be presented as \"a\\n\", because it mean that you have new line after a.\nThis is why \\ is escaped in JS. If you have a\\n it will be presented as a\\\\n, this \\\\ mean that it is just \\ (escaped \\).. Try to use https://github.com/postcss/postcss-js\nMaybe you need to convert c styles from parse5 to object.. Could you show example of parse5 output styles string?. String display:flex;color:red; should be parsed without problems. What problems did you have?. We are ready for release?. Released in 5.2.11.. For example, Gulp behaviour:\n\nTake all input files.\nFind longest common path (src/ in this example)\nWork with files based on this root (test1/1.pcss in this example). @michael-ciniawsky PreCSS has too non-standard syntax, so .pcss is good choice in this way. Without it IDE will not be able to highlight all that custom syntax.. @michael-ciniawsky maybe we should auto-rename .pcss to .css as part of PostCSS convention?. Oops, issue is in wrong place. It should be openned in postcss/postcss-cli. Should we recreate it?. Released in 5.2.12. What this issue is about?. Great idea. Is it OK to release it in 6.0 branch, because of breaking changes. I agree that it looks safe.But for my opinion it is \u201cchanging of public API\u201d :). Anyway I plan this major release on next month. Is it OK or it is time sensitive?. It is always better to make major release, even if update will not hurt anyone, that make patch release and broke some environments :D. I have so many bad feedback on unexpected compatibility problems on minor/patch releases :(.\n\nSo I agree that most of users will not saw API changes, but because API changes theoretically exists, it will be better to make it as major just to be sure.. (For me every patch release is good thing, because often patch releases increase download counter :D). I merged it to 6.0 branch manually. Should be fixed in 6.0 with raws system refactoring.. But honestly right indent is not goal for PostCSS. Most of CSS tools just broke your indent ;).. Feel free to send PR. Sure. It is issue. I will fix it in next few weeks. Feel free to ping me on Sunday.. Done https://github.com/postcss/postcss/commit/cb45067009fb8e7ecc1c64372a4100cf61192ef0\nBut I need to move this test to postcss-parser-tests.. I moved test to postcss-parser-tests https://github.com/postcss/postcss-parser-tests/commit/bdeac1138ec1600a71fb0781287e795d6c33b857 , but I will release it tomorrow. Too tired today.. Seems like i forgot about it :). But I spend all PostCSS time for this week. Could we fix #598 on next week? Just remind me in Friday.. Released in 5.2.13. Are you asking about Autoprefixer? Next time create issue here: https://github.com/postcss/autoprefixer. If you need to support iPhone 6, you need to create \"browserslist\": \"defaults, iOS 6\" (not sure about right version, check it) in package.json, so Autoprefixer will add prefixes for that Safari.\nDefault browsers supported by Autoprefixer could be checked here: http://browserl.ist/. @oleersoy I need input, output and expected output.. Sorry, I am front long flight and will slow internet. Could you help me and show input, output and expected output in this test?. PostCSS right now do not guarantee that output format will be equal to input. It could loose some things. We are planing to fix it in 6.0.\nIs it critical for you? If it is critical, you can add custom plugin to restore your code style.. Why? It duplicate #364. This problem is much more complicated that just stripped semicolon.. LoaderOptionsPlugin is a hack for old loader compatibly. postcss-loader has a native support without a hacks. Check loader docs.\nBut I agree that we need to update docs to webpack 2. Will you fix your PR?. @hidace any updates?. As I know webpack compile PostCSS without problem. What this changes do? Reduce bundle file size?. Ouh, sure, I will release it in next few days (sorry for delay, I am in the middle of travel).. Released in 5.2.14. Sorry for delay.. Thanks. I will release it on next week. Is it OK? It is not critical, right?. @jedmao do you approve it?. Released in 5.2.15.. Hi. I need full stacktrace and full error description.. This problem is with extract-text-plugin, not PostCSS core.\nMaybe @michael-ciniawsky know a solution?\nBut anyway you should write to webpack team.. Thanks, I missed it. It is plugin issue. Plugin in postcss-cssnext that insert url() (Autoprefixer doesn\u2019t do it, because it doesn\u2019t do polyfills) has a issue. You should report about it to plugin author.. Is is a valid CSS? top: seems like a property, but without value and ;. @evilebottnawi let\u2019s keep it open, I will think what we should do in this case.\nBut PostCSS public API never contains checking CSS for errors :D. So it will be in low propriety. OK?. @evilebottnawi it will work only for Stylelint :D this.source.input.css will not show AST changes.\nAlso even in Stylelint this.source.input.css could not be equal to toString(), because some PostCSS plugin before Stylelint, could change AST.. Only toString(). But it doesn't have any guarantees on broken syntax.. OK, so the only solution here is to throw CssSyntaxError from parser. Note sure, can you check both parsers?. Hm. I really afraid to throw error in this case. Because some plugins uses : in selector. We need to check it manually in Stylelint :(.. What is different with postcss-image-set?. Wow, great!. raws: { before: \"\\n\" }. Hi. All current editor plugins are community made. So there is no sense ti ask in core module ;).\nAsk in VS Code community. Or you can try to create own plugin. In Atom they take SCSS plugin and improve it for PostCSS.. @shirleyMHao Hi. Sure. We don\u2019t have How To article right now. Just make a npm package like this:\njs\nmodule.exports = function (options) {\n  return new postcss([\n    plugin1(options.a),\n    plugin2(options.b)\n  ])\n}. Hi. Thanks for this books list.\nDoes this books are only about PostCSS? Or PostCSS just mentioned there?. @packtpartner if I will add all CSS related books to this README.md it will be hard to read and maintain it ;).\nBut I like about separated \u201cBooks\u201d section. You can send separated PR with only PostCSS-related books (I think it is only \u201cMastering PostCSS for Web Design\u201d).. @packtpartner not in this repo. It is a PostCSS repo, not CSS books ;).. 1. Open issue in Browserslist repo.\n2. Start that new issue from webpack config.. Too many details (bundled vs. extract) for common PostCSS docs. This details should be only in postcss-loader. Absolutely! :). You still have two configs :D. I agree that it is important information. But this docs just overview.\nWe can add docs to postcss-loader and set link from section. In this docs we could keep only one basics config example.. @michael-ciniawsky is it good?. I answered there already \ud83d\ude0a. Or you have additional question? Ask it in that issue. What plugins do you use?\nYou have same problem even without any plugins?. No problem \ud83d\ude0a. CI fails on unknown mediaqueries word ;). @martinkr you can fix it by push commit to your branch.. @martinkr still falling. You need to fix: Extracts \u2192 extracts, mediaqueries \u2192 media queries.. We need better description. Right now it tells about features for developers. But we need to describe a benefits for users. Why they should take care about \u201cautosizes and more\u201d?. Why users even need some size? ;) What use cases?. 1. Fix plugins order.\n2. Alter \u2192 alters. It is just a verb after your plugin name.\n3.  css \u2192 CSS. It is abbr.. I am not sure, that it is the best link, but why not. You got a nice PR number! =^_^=. Thanks! Thank you too for your help :).. Done by @AleshaOleg \nhttps://github.com/AleshaOleg/postcss-sass. Done 4adaf97\nBut fix will be released only in next 6.0.. @equinusocio give me more information. Stacktrace, input CSS. Can you check PostCSS version in /Users/equinusocio/.vscode/extensions/shinnn.stylelint-0.24.0/node_modules/postcss?. Thanks for new plugin \ud83d\udc4d. I do not see any issue. @eriklharper right now fix output as in Jest expected output and wait for PostCSS 6.0 where we fixed Node#raws API.. Should we move it to function on the top of file to make method cleaner?. Can you show current diff vs. new diff?. You missed built-in diff in Jest. Jest shows it after expected and received. It shows changes pretty well.\nI moved to Jest especially because of awesome diffs.\n. Thanks. Great plugin :+1: . Sorry, I had no experience in Coveralls. But maybe in out gitter chat somebody could help: https://gitter.im/postcss/postcss. It is the worse time to send so big PR \ud83d\ude05 Current development branch is orias and we plan to release it in next few days.. Also, note that PostCSS should works in IE 11. @gkal19 I move few changes of your PR in orias branch, so you will be in history :)\nhttps://github.com/postcss/postcss/commit/29a51b9c82bdf11f226e0d4196d18865d4bd10de\nAlso if you live in Rio, I could bring you Russian candy when I will be in Brazil this summer.. Good practice for big refactoring PR \u2014 before PR create small issue with your plan for maintainer approve.\nBut you are very productive, nice that you clean so many files :).. Sure. I suggest to focus on most popular contribution types, to be the most useful (and don't copy Contribution doc from other project).\nWhat contribution types is the most popular here? You can see PR.. Sure. I think it will be good to start from analysis, rather than copy standard contribution docs.\nHow can new contributors help?\nWhat is the most popular PR?\nWhat could be a main problems with them?. @abhigyank sure. You are on it.. @hzlmn no progress. If you want your should start from discussing structure.. https://github.com/postcss/postcss/blob/master/CONTRIBUTING.md. Seems like @apply syntax will be deprecated. So it will not be necessary in the future ;).\nRight now you can use stylefmt or perfectionist to clean up your code style.. If we add special logic to PostCSS core for ownSemicolon \u2192 parent.semicolon, it will make core more complex. It will be OK, if feature will be popular. But because --name {}; syntax is not part of spec right now, doing it will be bad for future.\nIn you want to take care about it, just add logic to your plugin. It will be just few lines of code:\njs\nif ( deletedRule === deletedRule.parent.last && deletedRule.raws.ownSemicolon ) {\n  deletedRule.parent.raws.semicolon = true\n}\ndeletedRule.remove(). It is a regular advice for any project.\nFor example, the most popular PR is new plugins to docs/plugins.md. This doc doesn\u2019t cover it.\nI suggest you to write the most popular cases first and only then start to make docs.. It is CSS parser. Most of developers never will change parser or AST ;).\nFor all this years I had only few PR for source map, parser or AST. So we should not focused on regular PR as in other projects.. Also we should cover \u201cwhere can I help\u201d topic. If user what to contribute to PostCSS, but don\u2019t know how it can be useful.. @jedmao what do you think?. README.md contains only the most popular and important plugins. Could you its changes from PR?. Thanks for report. I think you have some conflict between different tools.\nYou need to show your build tool config and error stacktrace.. Can you run PostCSS just in console? You have big build system. Try to find smallest command. There you will be able to get stacktrace.\nFor example, try to start from \nxargs -n2 postcss -u autoprefixer --autoprefixer.browsers \" last 2 version\" -u css-mqpacker -o\nRun it on files manually.. Without a stacktrace I can't help you.. You have very complex build system. Try to make it easier and get debug information.. @h0tc0d3 what Node.js version, BTW? < 4?. We still support Node.js 4.\n@portstrom strange that our tests didn\u2019t fall in Node.js 4. Do you have any ideas?. We support only latest 4.x version \ud83d\ude04. I added old new Buffer(str) support together with Buffer.from. So I think now we support both. https://github.com/postcss/postcss/commit/88673ab56a19c426773d68467033d9b2802bfb54. @portstrom oops :(. Can you explain how it broke? It seems normal for me.. Totally agree. But this issue is dublicate for  https://github.com/postcss/postcss/issues/1013. Contributing is a development docs too. Also we need same analysis for both tasks.\nWe don't need just internal description. First we need to understand what is main PR, what is main questions.. Yeap, it is not cool. Maybe it is some side effect of Root#normalize hack?\nI will look into in when I return from Cuba.\nRight now you can do:\njs\nroot.nodes = ast.nodes.map(i => i.clone({ parent: root })). Done 5744739. Released in 6.0.2. That code in parser is only for declaration.\nAre you sure, that it is PostCSS, because you show this problem on CSS Modules example, where CSS Modules can do some magic with classnames.\nCan you try to check AST by postcss.parse(css)?. @Diokuz you ask about declaration property _x: black; it about class name ._x { }. Because in first comment you show class example, but in AST show example work property.. I will close it because it is not related to PostCSS.\nPostCSS keeps _ in class. PostCSS removes leading _ from declaration properties, because it is illegal symbol there.. @Diokuz of course, CSS Modules uses PostCSS to parse CSS, so PostCSS by default support it. . Nope. Normal behavior is to drop _ only in property names. If you have different wrong behavior with selectors, show it with PostCSS API example (you shown selector problem only with CSS Modules, with PostCSS you shown properties behavior which is correct).. Still relevant. and fix will be easy :). We need good error messages. Not passed [function] instead of [object], but Seems like you use parser as a syntax. Replace syntax option to parser.\nI think just extra if check will be better for DX. We don\u2019t need universal solution here.. Close it, because it is webpack config question, not PostCSS issue. /cc @jedmao\n(But I will have flight to Cuba today, I will not have internet there, so we will fix it only after 2 weeks). I think it was fixed. You should ask source-map library authors. I uses their library and don't parse source maps.\nI can't hide error in this case, because source map corruption could generate unexpected behavior (and nobody read warnings). I definitely think that it will be much better to fix source map parser or Less generator (honesty, I think source map is broken), rather than hide this error.. Hi. Yeap, I tried to avoid loop requires too, but failed in it :(.\nSo I am open for suggestions :).. But new Rule() is a still valid API. And we can\u2019t ask users to pass some extra argument.\nBut what do you think about this hack:\n\nContainer will accept extra option with parse function. In this case it will use this link.\nIf user call new Container without this extra option, Container will use require().\n\nOr Rollup anyway will raise a error, when it finds require in source?. It is not so easy to fix this code with factory, since we need not only parse, but also Container child classes \ud83d\ude15.\nI know that other users sent PR to PostCSS for Rollup \nsupport. Maybe problem is not so big, and we get error only when somebody use that code with require? Can you check?. @Jinjiang what you mean for \u201cstandalone\u201d version? Prepack PostCSS into the single file by webpack?. @Jinjiang I afraid that it will increase npm package size and will be used very very rare.\nCan you use webpack to make that file in your system and then require this file by Rollup?. > Btw the standalone package also could be published as an independent npm package to avoid increasing the size of the main package. And if there is an official one, maybe it will be widely used as an online repl, or in some code snippets/playground like codepen/jsfiddle/jsbin I guess. wink\nHm, it sounds good. If somebody will provide good scripts for it, I can release it.. Check that you pass any from option to PostCSS in your tests.. Can you show your tests?. Add this code (replace similar code in the to of test file).\npostcss([ plugin(opts) ]).process(input, { from: \"test/path\" }). We want this too and will add it to some future version.. UnhandledPromiseRejectionWarning just hide other real issue. Change:\njs\nprocess(file, options).then(result => {\n  \u2026\n})\nto:\njs\nprocess(file, options).then(result => {\n  \u2026\n}).catch(err => {\n  throw err;\n}). Jest and AVA allows to not declare catch(), but you must to return Promise from test. Check PostCSS plugin boilerplate: https://github.com/postcss/postcss-plugin-boilerplate/blob/master/index.test.js. Yeap, ask postcss-cli.. What is use case for it?. 2-3 use cases not good deal for increasing node_modules size for 5M users ;).\nCustom typed definitions is better here.. Add ignoring node_modules to your ESLint run. In this case I recommend to go to ESLint chat channel and ask there.\nIt is first report about ESLint config problems, so I think you have some problem in ESLint config as result ignores didn't used.\nI am not so good in ESLint to help with this.\nIf somebody will report about this issue too, I could reconsider that it is PostCSS config problem.. devDependencies are not installed from dependencies. Interesting case.\nCan you write simple PR to tokenizer?. I added test to common parsers tests: https://github.com/postcss/postcss-parser-tests/commit/116e88e12a766993354c66af0aeb8bc8bac4ce8c. Wow! You were fast for such complicated task.\nI will accept and release it tomorrow.. Fixed 771724c. Released in 6.0.4. Yeap, it is bug. Do you want to try fix it?. Technically, at-rule must have ;. Last code example is invalid.. Ideal solution: yeap, it should be the last non-space token. Great. I will release it in next hours.. Released in 6.0.6. Thank! Great work.. prettier is not flexible for our code style. But I am OK of improving our ESLint config.. Anyway it is not a big deal. I can fix code style in small PR.. Right now there is no API for multiple input/output.\nI thought to add it but didn\u2019t found the good solution.\nBut you can do it manually:\n```js\nconst full = postcss.parse(css, { from })\nconst fullProcessed = postcss(prePlugins).process(full).root\nconst root1 = postcss.root()\nconst root2 = postcss.root()\nfullProcessed.each(node => {\n  if (check(node)) {\n    root1.append(node)\n  } else {\n    root2.append(node)\n  }\n})\nconst css1 = postcss(postPlugins).process(root1).css\nconst css2 = postcss(postPlugins).process(root2).css\n``. Sorry, you need to open issue inpostcss-merge-idents`,seems like we have a issue there.\nI like to help, but I don\u2019t know this project. It will be faster to just open issue there.. I created parser looking in this spec :). Its railway diagrams help a lot.\n\nPostCSS can parse every valid document. I didn\u2019t know anything from this spec, that we can\u2019t parse. We even added escape tokens support (but nobody uses it) and has special logic for url() token (this token is not regular function token).\nBut also PostCSS could parse something more than just valid CSS. PostCSS is not a linter. If it could parse something non-standard \u2014 it will do it. For example, PostCSS will parse nested rules and unknown at-rules. I think this behavior is better because we don\u2019t need new parser release for every CSS spec changes (like Sass needed a special release to not fall on Grid properties).\nUnfortunately, there are no tests for this spec. I tried to pass it but didn\u2019t test everything. But every PostCSS commit is tested with real CSS from Twitter, Bootstrap, etc to be sure, that we can parse every new property.\nPostCSS is used in Autoprefixer and webpack, so at least we can\u2019t be sure, that it parse most of CSS in the world as expected.. @hzlmn postcss/postcss is a decouple parser in separate package ;)\n\npostcss/postcss = parser, AST API (you need it in parser) and stringifier (it is very small and related to parser anyway).. @domenic the only differences (as I understand it)\n\nPostCSS understand nested rules. You can add an extra check and throw an error if you don\u2019t want to support them.\nPostCSS parse unknown at-rules and do not ignore it (like by spec at-rule could contain any content, not rules and decls). But it is only theoretically differences. There is no CSS specs or future draft with a non-standard content of at-rules.. Seems like here is the explaination https://github.com/postcss/postcss/issues/1019#issuecomment-315973016\n\nBut I still don't know, why Buffer.from(str, 'base64') doesn\u2019t work on Node.js 4.2.2 :(.. @michael-ciniawsky can we check it by?\njs\nif ( Buffer.from && Buffer.from !== Uint8Array.from ) {\n  return Buffer.from(str, 'base64')\n} else {\n  return new Buffer(str)\n}. @michael-ciniawsky Buffer.from && !(Buffer instanceof Uint8Array)?\n@ipelekhan can you check what Buffer instanceof Uint8Array will return on your old Node.js?. @ipelekhan can you also check Buffer.from !== Uint8Array.from?. Fixed https://github.com/postcss/postcss/commit/dfbe7c8231b6736018caddaa897b51759b0eb6a3. Released in 6.0.8.\n@ipelekhan can you check it?. Hi. Please open issue in postcss-cli. This repo is for core module, which only works with CSS and don't read files.\nI am happy to help you, but postcss-cli is separated project with own team.. It is the bug, the order should be the same.\nCould you show CSS, JS code to parse and walk and the result.\nThe problem is that we test that parsed is byte-to-byte equal to output. And there are no and problems with this test. So I think that maybe you have some plugin, which changes order before parsing and your code.\nBut maybe it is some rare edge-case bug. So give me code examples :).. According to rules selector AST was changed by some plugin. Seems like it was cssnext.. Yeap, let\u2019s improve it. You want just add Unknown error?. Maybe Unknown error from PostCSS plugin?. @igoradamenko OK, send PR. Thanks. Released in 6.0.9.. Thanks for report. I will try to look in next days.. Can\u2019t reproduce. How do you check it? Maybe you have other tools in build process?. Many npm dependencies right now is written on ES6. Uglify still doesn't support ES6 (IE 11 as well). My recommendation is to compile node_modules content by Babel.\nAlso maybe we should add config for webpack in PostCSS's package.json to ignore chalk.. I will think about disabling chalk for webpack only in September after my talk in Beijing.. I removed chalk by browser key in package.json and PostCSS build was reduced 30% https://github.com/postcss/postcss/commit/150edaa42f6d7ede73d8c72be9909f0a0f87a70f\nWill be released in next version on this weekend. @eric-burel solved and released. \nWhat PostCSS version do you use? How you tested that chalk is included in the client-side bundle? (maybe chalk was included by some other dependency?). Can you add error stacktrace?. @wenliangdai can you translate also\ntitle=\"Philosopher\u2019s stone, logo of PostCSS\"\nWhat is your Twitter account?. Also Sass not SASS. @wenliangdai can you translate \u201cCHinese translation\u201d to Chinese?. Thanks for the notice. Is it not critical? I can fix it on next week.. Done e53f7e0. Yeap, it is unexpected behavior.\nQuick fix: you can use rule.raws.selector.value to get selector before comment stripping.. Did had time :(.\n@hzlmn it will be awesome if you will send PR.. Good question :-/.\nIn the current API we don\u2019t have nodes in Rule#selector. So maybe the best option here will be not trim comment without space at least from one side.. Released in 6.0.17. Did you tried to downgrade PostCSS to 5.x? You can check it by npm ls.\nSeems like problem is that PreCSS was not updated to 6.0 API.. @zengjinchaodean did you try npm ls? Did you find PostCSS 5 in npm ls?. @zengjinchaodean show me your error and npm ls output. > Below gulp-postcss, there is the 5.2.17 version of postcss\nThis is source of problem. gulp-postcss uses PostCSS 5. Update gulp-postcss. Sure, it is bug. I will try to fix it on this weekend.. Sorry, still did not find a time. At least you have the dirty fix.\nBut I will fix it :).. Fixed ceaf548. Released in 6.0.12.. /cc @jedmao . @khlevnov you should write import postcss from 'postcss' without {. Are you sure that it is not npm error? Does same import work in node?. @jedmao do you approve?\n(I don't know TypeScript and @jedmao is our TS expert \ud83d\ude05). > Note: this change looks big because it changes the indent level, but if you turn off\nDidn't know it. Awesome!\nCan we revert indent changes in this PR? Or previous indent was wrong?. I will try to backport it and release tomorrow. 5.2.18 was released with fix backport (I didn\u2019t find good way to make 5.2.18 in Git, so I just make release without Git commit and Git tag). 6.0.13 was released too. Sorry for delay :) It is my first backport release :D. Yeap, CSS Custom Properties will the perfect solution here.\nAlso, you can write PostCSS plugin, which will replace #D46A6A \u2192 #4f628e (but it is not so explicit and maintainable).. @manulitopetito you need to run PostCSS manually (not a big deal, just simple Node.js script). Here is API: JS API.\nJust run postcss().process() for each theme and save result to files.. Thanks. Especially for fixing Chinese version too.. Yeap. It is so by design.\nSame as in Babel.. You can try to use different import. So PostCSS will see file after concat . No. I mean do not use postcss-import. Use some non-PostCSS tool for import files.. Nope. Google webpack import css. Sorry I am not at laptop right now.. In case you have question about using PostCSS \u2014 here you need to write about our Gitter channel at first point. And docs only at second (since they didn\u2019t cover all cases). Adding your plugin to the list \u2014 PostCSS README plugin list should not be changed. This list contains our favorite plugins. New plugins must be sent to docs/plugins.md.\nIn this section we must tell users:\n\nPlugin must pass PostCSS plugins guidelines.\nPR must contains link to plugin.\nPlugin order in alphabetical (but postcss- prefixed plugins goes first).\nAfter adding plugin you need to run npm test. If spellchecker will fail on some new word, add it to .yaspellerrc dictionary.. TypeScript declaration file improvements:\n\n\nBe sure that your changes wont break anything as well as match TypeScript styling rules defined in typings file.\n\nHow user can check it?. Good list of check (except checking the syntax highlighting \ud83d\ude04). We could add it to TS section.. The structure looks good. Have no extra ideas right now.. Looks really great\n\nAsk for help in Gitter\n\nAdd a link here, not in the answer\n\nNote! PR should not change plugins defined in README it contains only favorite plugins and moderated by PostCSS author.\n\nMaybe we should just use italic without Note! prefix.\n\nCarefully check current list of plugins\n\n\u201cKeep plugins order\u201d\n\nCreate a pull request with descriptive naming\n\nI am OKwith any PR name. But I will be more happy if developers will post a link to plugin to the PR comment.. Awesome! I will apply it tomorrow.. @Semigradsky cssnano use Autoprefixer inside (to cut unnecessary prefixes from your dependencies).\n@geryit as I know cssnano only remove prefixes (use Autoprefixer with add: false).\nSorry, I have no idea. Since it is environment question and this question is not related to PostCSS core, I will close the issue.\nTry Stack Overflow.. Honestly, it is not easy.\nThe best way to do it \u2014 write a custom parser. We have a docs in docs/syntax.md and you can check postcss-scss for examples. But it will require a week.\nThere is a hack, to write custom preprocessor before PostCSS which will replace {{ to some safe symbols. And then custom parser will find this special symbols and read them as {{.\nWe have a Gitter channel (check it in README, I am too drunk and on bicycle to give direct link). We can help you with implementing both ways.. I tried to fix this bug but didn\u2019t find a way (and since it is not PostCSS issue, but 2 tools compatibility issue I decide that bug is not really critical). If oy know how to fix it, please send PR.. Hi. Sorry, I don't use postcss-cli. Try to open issue on their repo.. Any performance optimizations (including memory usage) must be started from benchmark.\nSo we need the exactly CSS file to reproduce error.\nThen we need to run it by PostCSS alone and by PostCSS+uncss to understand the source of problem.\nOf course, any full AST tool had a memory limits. But 7 MB of CSS should be processed in my opinion.\n/cc @RyanZim. Thanks. Looks very useful.\nNow step 2: run it by PostCSS and by PostCSS+uncss.. And we have \"out of memory\" problems in both cases, yeap?. So, seems like memory problems are only in uncss \ud83d\ude0e. I am not so good in memory debugging to really help uncss. But can remind common recommendation \u2014 disable feature by feature and check does it involve in the problem.\nOn your place I started from any parts, where you create cache/etc for CSS.. Yeap. Use postcss-load-config https://github.com/michael-ciniawsky/postcss-load-config. Thanks. I will release it tomorrow.. Released in 6.0.14. Can you show output CSS?  You can find it in build directory or in browser DevTools.. postcss-reference is a solution for you.\n```css\n@reference {\n  @import \"ui-components/src/common-styles/font.pcss\";\n}\n:global {\n  & .form-group {\n    & label {\n      @references .font-medium;\n    }\n  }\n}\n```. Do you put postcss-import before postcss-reference? If it is so, ask postcss-reference author.. It is an interesting idea. But we have 4 problems:\n\nWe need to copy error class.\nMaybe instead of changing message, we should change .stack. Because we are not sure how the error will be caught. Maybe there is some error.message === someText above.\nWe need an option to disable it.\nWe can enable it by default only in a major release.\n\nIf you are ready to pass this way, I will help you on the way :).. @nikhilgaba It is an interesting idea. But we have 5 problems:\n\nWe need to copy error class.\nMaybe instead of changing message, we should change .stack. Because we are not sure how the error will be caught. Maybe there is some error.message === someText above.\nWe need an option to disable it.\nWe can enable it by default only in a major release.\nError must be captured not only in walk, but also in postcss.plugin and in Promise if plugin return it to postcss.plugin.\n\nIf you are ready to pass this way, I will help you on the way :).. How I see a process of adding it to PostCSS:\n\nWe change a way to add this data to error (class coping, replacing stack, adding extra properties to error object)\nWe add this magic to postcss.plugin.\nWe add an option and disable it by default.\nWe release it in 6.1. It will be switched off by default.\nWe will ask postcss-loader, gulp-postcss and postcss-cli to turn the option on in their next major release.\nIn 7.0 we will switch it on by default.. > 5. Error must be captured not only in walk, but also in postcss.plugin and in Promise if plugin return it to postcss.plugin.\n\nForget it. I was wrong in this request (there is no way to detect source node or of walk).. I suggest:\njs\n} catch (exception) {\n  if (result.opts.errorSource) {\n    exception.postcssNode = child\n    exception.stack = \"\u2026\"\n  }\n  throw exception\n}. @nikhilgaba what do you think about my plan?. Don't worry, I will use power of our Cult of Martians to improve your PR.. I merged and fixed it manually https://github.com/postcss/postcss/commit/b2530e0f7a106a23eb17168093509ec65f94bb53. Released in 7.0. Honestly, it is not the best way since more JS will be parsed. Also client-side bundle will be bigger since tree-shaking doesn't work so effective as separated files. Separated files is simplier and more performance way.\nBut it is not a big problem, so we can do it in next minor release. It could take a week or a month (holidays).. Good plan. Will it continue work with postcss = require (\"postcss\"). Note that we already have add-module-exports Babel plugin.\nKeeping require API is critical since users will kill me if I will break API often than once PR year.. Yeap, I have plans to split postcss to postcss-ast, postcss-parser and postcss (parser + source map generator).. To get AST after plugins:\njs\nconst before = postcss.parse(css, opts)\nbefore //=> AST before plugins (after styles have been parsed)\npostcss(plugins).process(before, opts).then(result => {\n  result.root //=> AST after plugins (after plugins have transformed all nodes and before nodes have been stringified)\n  result.css //=> CSS string after plugins\n}). Yeap. We thought to have lazy stringifing, but it is very fast operation. You should not take care about it.\nAnyway, if you don't need string, you can always make transformation by your own:\n``js\nconst ast = postcss.parse(case, opts)\nplugin1(plugin1opts)(ast)\nplugin2(plugin2opts)(ast)\nast //=> result. You need to use low level JS API to work with multiple files. Seeparsedocs on http://api.postcss.org. Oh, this changes could be done only in the major update. Maybe we should use some option intoString()?. There are many ways to solvepostcss-cssnext` issue :). Changing EOL will break tests in many projects :(.. > testfiles automatically get the system file endings\nI think they just don\u2019t test is on Windows. It is better to fix testfiles.\nBut I like you fix. I will keep it until 7.0 release (I can\u2019t release too many major updates in the year).. > So should I keep this open for the future\nYeap :) It is a good idea for 7.0.. Sorry, I decided to use only \\n on every platform because of:\n\nDifferent new lines will make tests much more complex (some most of plugins compare output string).\nEven Microsoft Notepad now supports UNIX new lines.\n\nI can change my mind if you will show some good practical reasons.\nAnd I send you a hug. I know how it is sad when somebody reject your PR. Your code is great and idea is interesting.. Ha :). Pining old version is the too lazy way :).\nI convinced Jest team to add unofficial Node.js 4 support and send PR to fix Node.js problems.\nJest removed Node.js 4 support just because of JSDom. But we don\u2019t use JSDom, so it is not a problem for us. Yarn package.engine check I already disabled by YARN_IGNORE_ENGINES.\nPostCSS will drop Node.js 4 support only when 4.x will end its LTS time (August 2018). Node.js Foundation promised to the community that Node.js 4 will be supported for all this period.. @simonsmith yeap. I will release PostCSS 7 without Node.js 4 in this month.. The problem is postcss-loader. So if you want to split the file, you already need some special case.\nThe best way is to use low level JS API to it.. Hi. Run npm ls to see all dependencies. In this list you will find what PostCSS plugin use old API. i think it should be cssnano. You should open or +1 issue in cssnano repo.. @ZeeCoder can you show exactly code input?. @ZeeCoder // is not a comment in CSS language. CSS allows only /**/ comments ;).\nUse postcss-scss if you want to use // comments.\nMaybe we should use better error for this cases, but I am not sure.. @mhkeller sure. Can you send a PR, so I will save your name in the project history?\n\nand I don't quite get the meaning of second part where it says do not find\n\nopts.from is using in Browserslist. Browserslist takes CSS file path and start up-directory search for .browserslistrc config. If opts.from is undefined, Browserslist will not be started and config will not be applied.. Fixed 43da29a. Released in 6.0.16. :local is related to CSS Modules (you enabled it is css-loader). I don't use CSS Modules and can't help you more here.. Show your webpack config.. Sorry, I didn't hear about any uncss for React \ud83d\ude14.\nMy suggestion is to split CSS into small components as you split React components. Next put CSS and React code of each component in same dir. So when you will delete React code, you will delete CSS code as well.. @amerllica BTW, maybe you want to write this tool? You could start with a very easy tool which will just collect all static className=\"X\" from all *.jsx files in some directory.\nYou know, very popular tools were started from fixing own problems :).. Not all tests was passed. @hzlmn same as before :not(div). Otherwise, this PR will break API.. Let's keep comments only inside identificator (letters and digits). Not between difficult like different tokens.. Released in 6.0.17. Current behavior was specially asked from other users \ud83d\ude05.\nSorry, there is no best way to do it. Both way have some problem for some users.\nIs it possible to make RTLCSS a little smarter and cover both control comment positions (inside and outside of the node)?. Why? You can check is declaration is the last one and is it have semicolon.\nSorry, changing it in the core will break public API. But I will have the same check in the core. It doesn't matter, will we put it to core or to RTLCSS (if I understand it correctly).. You should all postcss-cli authors (sorry, that look has different maintainers, I can make delicious for them).\nI think it is good idea. Our tools should be easy to use. Also making contacting in PostCSS is good for new source map (you can copy my thoughts to issue) . Released in 6.0.18. Thanks:). Should I wait for other PR before release?. I will release it tomorrow evening if you didn\u2019t find anything new.\nGet well =^_^=. Released in 6.0.19. Released in 6.0.19. Hi. Thanks for the idea. Honestly, we had that idea a years before. Maybe you want to implement it? The only thing I recommend to replace .yaml to .json.. We can write first implantation, get feedback, rewrite it, try to implement in popular plugins, rewrite again after second feedback, ask IDE/text-editor plugin developers, rewrite again, add as standard to PostCSS, write specs for other plugins. What do you think?. sass \u2014 Sass,\nMap Function \u2014 map function. Since source-map uses async API we can't update it without major release (with a lot of changes).\nOr maybe I understood something wrong?. I tried to add it in 7.0, but found few big problems.\n\nThe minor problem is that new WASM source-map uses async API. It is not a problem in stringifier. But we need source map reading in Node#error. Moving this method to async will break too many plugins.\nThe main problem is that WASM is supported (if I understand it correctly) only from Node.js 8. We need to support Node.js 6 until April 2019.\nsource map is not the main performance problem in most PostCSS use cases.\n\nIn result of this reasons, I decide to wait for a little until source-map update (it is painful for me too, I really like to use the latest software \ud83d\ude2d). We will wait until:\n Sync API will be added https://github.com/mozilla/source-map/issues/331\n Node 6 support will be added or Node 6 LTS will be ended.. @oleersoy yeap. Good idea. Do you want to send PR?. I think again and decided that have 2 lines comment in this simple example is too big. Maybe we should change file names to avoid this error?. Or to write to app.out.css instead of dest/app.css. Sorry. This note will make the simple example much more complicated :(.\nMaybe we can change file names to avoid error at all?. @chenwenxian sure, we need a small fix here: https://github.com/postcss/postcss/blob/master/lib/lazy-result.es6#L26\nDo you want to send PR to save your name in project history? :). Done 1a3467b. Released in 6.0.20.. Sorry, I already fix it in amy branch. Good question :+1: \nNo. PostCSS is not for postprocessing. PostCSS is like postmodern. Next level of CSS ;).\nRight now PostCSS can run as linter (Stylelint), change sources on sources (like postcss-sorting), preprocess (like PreCSS), polyfill (like poostcss-preset-env or cssnext) and anything else ;).. It accepts CSS as a string because pure JS doesn\u2019t have file system APIs and we want to run PostCSS in any JS runtime, not only Node.js :).\nSo we decided that we have PostCSS core and environment tools like gulp-postcss or postcss-cli. And environment tools will read files in the best way in this environment.. Please send PR to save your name in the postcss/postcss project. Sorry, the current auto-spacing algorithm is too tricky. I afraid to change it. I will fix an issue in one place and add in few others :D.\nMy policy right now: \u201cauto-spacing algorithm works as-is\u201d. If you want smarter\u2014set raws property manually. Or even use any beautifuler after :D.\nIs this issue is critical for your case?. OK, I will close the issue until somebody will bring me a good algorithm for dealing with spaces which will cover all cases :).\nBut thanks for the report.. @AngeIII Yeap. Should we open a issue in postcss-functions?. @AngeIII what I can do in postcss core to fix postcss-functions? Maybe we should fix postcss-functions?. Could you open a issue in https://github.com/andyjansson/postcss-functions\nI have not access to that repo to fix error.. You need to add more examples to syntaxes README. How postcss-styled works? What input it expected? How to configure webpack to use it?. Wow, postcss-styled can be used to automatically sort properties or use in stylelint --fix. Hi. Thanks for PR.\nBut I have a question. Why we need to use npm ci if we already use yarn?. Yarn is a alternative for npm. So we don't call npm at all. We use only yarn.\nI really recommend to look to yarn as well. It is faster than npm, API is better and team work better.. So you know about the Yarn \ud83d\ude0a\nWhat is the point to installing npm in this case? Also what is a point in installing grunt-cli? PostCSS uses Gulp.. Here are JS API options to control source maps: https://github.com/postcss/postcss/blob/master/docs/source-maps.md\nIf you need so disable source map at all set map: false. If you want to generate source map, but disable sourceMappingURL set map: { annotation: false }.\n--no-map is PostCSS CLI API. Maybe you can define JS API options in postcssrc.js, which will be read by PostCSS CLI.. In PostCSS 8 ;).\nPostCSS 7 will be a quick release without Node.js 4.\nThe only thing blocking us from PostCSS 7 is cssnano 4 release by @evilebottnawi. Technically we don\u2019t need a major release for it. We can release it in 7.1.\nI suggest starting with selectors. And add values parser only in 7.2.. How you can help:\n\nI need a list of AST nodes for selectors.\nI need a token list to parse those AST nodes.\nI need ideas of AST API to change these nodes. You had a great experience with plugins. What API will be compact and easy?. @chriseppstein thanks, This is very useful feedback.\n\n\nSometimes comments are their own node, sometimes comments are part of raws, etc.\n\nLet\u2019s make the rule for new selector/value API. Comments must be a separated node.\nBut whitespaces we must put inside nodes to be compatible with other PostCSS API.\n\nNodes didn't maintain internal consistency across mutation\n\nCan you show an example?\n\nThere's a lossy parse that trims whitespace but preserves comments but it can only be done at parse time\nthere's no sourcemap support to speak of.\n\nYeap, new parser will continue PostCSS best practices. Keep all bytes of origin input. Support source map.. > PostCSS also [does not follow this rule][declaration_comment_ast].\nYeap. It is impossible if you don\u2019t have value and selectors parser. But now we will have them ;)\n\nI think the proper solution is to store whitespace and comments as nodes and provide convenient setters/getters to manipulate them.\n\nCould you write some pseudo-code to show what API your are thinking of?\n\nThe browser will happily treat all three of these as valid declarations of the background-color. But the postcss API user will see three distinct properties.\n\nWe can fix it in the tokenizer in a patch release. Please open an issue with some details how it should be parsed by the spec. I will found a person who will fix the tokenizer.. I think we should focus API on how people will use it.\nThis is why I am not sure that putting whitespace as a tokens is a great idea. User can put a whitespace in any place of CSS. As result PostCSS plugins will need more checks.\nBut maybe I am wrong and we can provide some syntax sugar on top of it.\nHow do you imagine if using this AST?. Are you sure, that all cases could be solved by walkers? \ud83d\ude0f\nFor instance, in Autoprefixer I need to find function and replace it (yeap, it is easy for walker). But for replace function I need to change its arguments. . finally \ud83d\ude05\nSure, please send PR to amy branch.. Congrats =^_^=. Sure. Do you want to send PR?. Done 6601a3e. Do they use postcss-scss parser? Since // is not part of CSS syntax, we keep parsing // there.\nThe AST Explorer doesn't support postcss-scss (your link contains different csstree parser).. 1. You don\u2019t need to wrap postcss().process into Promise since process() return a Promise. Just do return postcss().process(\u2026)\n2. You must to set from and to. Where did you read originCSS? Just put the path to originCSS file to to and from.\n3. You must pass uncss and cssnano as plugins. When you call PostCSS with zero plugins postcss([]) it doesn\u2019t do anything. Do postcss([cssnano, uncss.postcssPlugin]).process(). As result, the final code:\n```js\nconst postcss = require('postcss');\nconst safe = require('postcss-safe-parser');\nconst uncss = require('uncss');\nconst cssnano = require('cssnano');\nconst generateMinifiedCSS = function(html, originCSS) {\n    const nanoOpts = {};   \n    return postcss([uncss.postcssPlugin, cssnano(nanoOpts)])\n        .process(originCSS, { parser: safe, from: 'path/to/file.css', to: 'path/to/file.css', map: false })\n};\n``. Hm. If you don't need source map and you use safe parser (so there will be no way messages) you can missfromandto`.. Will this website useful for you?\nhttp://api.postcss.org. Way message = error message. If you have a idea how to improve docs, feel free to send pull request.\nIt is always better to wire docs by person, who try to learn a tool. Since you see what is problem parts. Maintainers are always bad in writing docs done they know anything.. Wow!!! Even object-notation is supported.\nYou need to write about it to styled-component community.. Thanks. Thanks for pull request. Sorry, I can't accept it, because current policy is to keep text editor files in core.excludesFile of your global git config.. You forgot about test \ud83d\ude0f. I think I cover then and catch \ud83d\ude05. Great. But this test doesn't test that callback was really executed \ud83d\ude0f.\nAlso you must return a Promise from any tests with late execution (any test with Promises).\nCheck other tests for examples. Or google jest test promise.. Your have a problems on Travis CI. Promise#finally is just a syntax sugar. Just user old methods for it.. Released in 7.0. Thanks. js\npostcss.plugin('name', () => {\n  return (root, result) => {\n    result.opts //=> options\n  }\n}). Good idea. Let\u2019s add it as the 3rd paragraph before links block. Do you want to send a PR?. Spelling check failed. I will fix it tomorrow (also make phrase more easy for non-native speakers).. @wenliangdai can you translate this new section to Chinese docs as well:\n\nPostCSS takes a CSS file and provides an API to analyze and modify its rules (by transforming them into an Abstract Syntax Tree). This API can then be used by plugins to do a lot of useful things, e.g. to find errors or automatic insert vendor prefixes.. @kschiffer oops. Fixed.. Should we use Chinese Wikipedia article for Abstract Syntax Tree? Also, maybe there is a translation for Abstract Syntax Tree.. Thanks for quick update :+1: . It is just an npm issue with the cache.\n\nIt happens sometimes with any npm package. PostCSS is just very popular package this is why you can see postcss in this type of error more often.\nSorry, I have no idea how to fix this issue with npm. You may have an error in cache, mirror or some other infrastructure around npm.. Never worked with NexusIQ before.\nCan you tell me more about it and why it could quarantine PostCSS version?\nMaybe you can ask their support?. @bschatz12 ping. Have no idea. 6.0.23 was very small release with docs and regexp fixes. https://github.com/postcss/postcss/commit/5f7c79d48a70f6cae16a1a4c727e61648f8a9916\nNothing was changed in npm infrastructure. This is why I think it is a Nexus proxy error.. Sorry, I never use Nexus proxy and have no idea how to works.\nIf you will some changes, feel free to open an issue.. Hi. Thanks for a really great issue. You fill everything.\nMy answer will be not so great. The problem is because webpack team for some strange reason uses very old PostCSS in mini-css-extract-plugin.\nCan you create an issue there and mention me?. > Thank you for your responce. It's very strange that webpack recognize PostCSS package like 5.2.18 version, when I had PostCSS 6.0.23 installed locally and global.\nIn npm you can easily use different versions of library in different parts. The benfits and the problem of CommonJS ;)\n\nAlso I want to say that I have two similar apps that uses one global webpack config above. The first is compile normally, but the second gives me the such error above. Maybe the problem is somewhere deeper...\n\nYeap, the problem is not because of PostCSS 5 vs 6 (since API is compatible). You have a different reason for the error. Unfortunately, the error message doesn\u2019t show us anything to help you with it (maybe it is just syntax error).\n\nSadly that we have no way to solve this problem now, just only to downgrade the webpack (\n\nDo not downgrade webpack ;) You will not solve the origin problem.\nTry to remove parts of input CSS to find what CSS cause the problem.. PostCSS 6 and 5 use the same API. This message I think it's not related with your error (PostCSS adds warning to any error from plugin based on different major version). > Why don't we make a special object\nWhat do you mean? Can you show some code?\n\ngetTokenNameByCode\n\nIf we will convert code to string, we will reduce performance again :) Just change parse and use token[0] === tokenCodes.colon. This wrapper class could affect on performance ;). You can try to make this thing in your branch, find the best way to increase performance and then remove Token back :+1: \nOr you suggested to always use Token?. @lily-moon Wow, it was really fast \ud83d\udc4d great work\nIt is very strange, that after these changes performance was even reduced. I thought that at least it will be in the same level. Can I ask you to run Node.js profiler?. @lily-moon I found potential leak of performance:\ncurrentToken.set([tokenCodes.SPACE, pos, next])\nWhen you use currentToken.set you pass an array here. So you create an array every time when you want to fill a currentToken. As result we have many objects again and GC will be executed.\nCan you try to replace currentToken.set([]) to direct access without creating array currentToken[0] = value?. function fillToken (...args) {\nWill create a array again (to put it in args). @lily-moon cool, waiting for results =^_^=. Hm. Is it tokenizer benchmark? What about gulp parsers results?. Sad. OK, the last idea for optimization:\n\nLet\u2019s remove clearToken\nLet\u2019s write directly to currentToken instead of calling some function (function call is not cheap). I think we can remove currentToken.fill(0) completely. OK, thanks for trying the idea. It is OK to have no success in optimization task since it is always making 10 attempts with only 1 success. You do a great work very quickly.\n\nI will keep this PR open for a day, maybe somebody will suggest an additional idea to improve the result.. Done https://cultofmartians.com/tasks/postcss-tokenizer.html. @AaronJan awesome, thanks. Can you add your plugin to docs/plugins.md instead of README.md?\nIn README.md we highlight the most popular plugins, which can be useful for at least 80% of users.. Nope, I already fix README.md. Right now:\n\nWe try to run any plugin\nIf plugin throwed a error, we check plugin PostCSS version. If it was different version, we print a warning before the error.\n\nSo we already check it. Maybe you want to make this UI better?. Yeap, I understand that in your case this check will be useful. But it will be terrible in other cases:\n\nMost of PostCSS major releases didn't break a compatibility. Like PostCSS 7 will just remove Node.js 4 support.\nBlocking plugins with different PostCSS version will make PostCSS major release a terrible experience. For few first month most of plugins will not support it and you will not be able to update anything.\n\nMaybe you have a idea of solution for all cases?. For the whole history of PostCSS, it is the first time when plugin started to work different instead of t he throwing a error.\nI will think about warning for any old plugins if we will have this case again.. There is a similar idea, but with new API. https://github.com/postcss/postcss/issues/296\nKeeping old API is interesting idea. Just note, that calling plugin on fake Root is not 100% safe since plugins may have side effects.\nSecond problem, that some plugin may add declarations or rules. And other plugins may miss them in this event based API.\nThis is why we thought about Proxy and nodes to track changes and walk listeners again.\nSo I am closing this issue, since it is unsafe.\nMaybe you want to send PR for that origin idea with new API?. Hi. Can you show input and expected output? Sorry, I am not sure what exactly tool want to make.. Thanks. Good work \ud83d\udc4d. Oops. Do you want to send PR?\nUse Node#cleanRaws. Changing return is breaking change and I just released 7.0 a few hours ago. Let\u2019s keep the old return.. Also, you need to add new words to the dictionary in yaspeller section of package.json. Great \ud83d\udc4d Thanks. I will release it a few days later.. Released in 7.0.1. There is also another option to replace postcss().process(css).root to more correct postcss.parse(css) in your tests ;).\nCan you check the tests, maybe it is only a few places (which are reused in 15 707 places).\nIf you call it many times, you can write a small regexp to replace it in all tests.\n(But I know your pain, I fix many places in PostCSS tests too to hide this warning, I just think that it is a good reason to make tests code more correct.). Sure. Will wait for your review. Maybe warning check is wrong.. Can you just fix getPostcssResult()? If it calls postcss() only there it will solve the problem everywhere else.. Do you need just Result or LazyResult specific? PostCSS plugins receive Result.. Not sure, that creating a LazyResult is the best way here, but here another way:\n```js\nconst LazyResult = require('postcss/lib/lazy-result')\nconst processor = postcss()\nconst result = new LazyResult(processor, 'a{}', { from })\n``. There both way are hacky \ud83d\ude23.LazyResultwas created to very different purpose.. Just replacepostcss.parse` to other syntax parse function.\njs\nscss.parse(css, opts). Released in 7.0.2. Hi. It is not possible, since most of plugins are controlled by different people.. The same. They are not official. They just made by people who speak often together.. It already should be there. This short list is highlighted plugins that we recommend.  Because we recommend PreCSS which include postcss-mixins. It will be breaking change. But I am OK, if you will find a way without breaking changes.. Hi. What is a error, can you tell me more (I didn't find property or method with this name).. Link doesn't show it. Maybe you forgot to save?. Found it. Hm, it is a private API. It could be changed in any patch release. \nShow me your use cases, maybe we will move it to public API.. Yeap, since await is not a API to get error. The best way here is catch or try-catch. > What do you think about extending from Error in CssSyntaxError?\nReally good idea. Send PR.. Do you have ideas why?. I have no idea too \ud83d\ude23. @Pomax we removed IE support from very rare case running PostCSS in the browser.\nMost of the users don\u2019t do it (PostCSS compile CSS during deploy in Node.js).\nYou need to run PostCSS in browser only for rare cases. For example, online tools like CodePen (but even CodePen run PostCSS on the servers by AJAX) or Autoprefixer online. These online tools are used only by web developers and it is extremely unlikely that they will use IE.\nEven in this case, if some online tool has an IE user, they can use Babel to compile node_modules/postcss. Of course, not every developer can do it. But it is unlikely case of rare case. So even if it happens, tool\u2019s authors will be advanced developers.. If you know the popular case of running PostCSS in the browser with many IE users, feel free to open the issue again. @Pomax Yeap \ud83d\ude23 maybe you can send PR to fix ChangeLog text. I am not native speaker, it is hard to me.. Thanks. Thanks. Thanks. Thanks. It is not a good of PostCSS to compile (and load imports) of SCSS.\nSeems like you have a error from SCSS compiler.. I closed issue since I didn't saw any relationship with PostCSS. It is a error from SCSS about SCSS imports.. Hi. Do you have postcss.config.js in your project? If not, create it according postcss-load-config docs.. All modern browsers don\u2019t need a prefix for Flexbox https://caniuse.com/#feat=flexbox. You can add this old Android browser to your .browserslistrc config according https://github.com/browserslist/browserslist. Released in 7.0.3. Thanks. I will look it in next 15 minutes. Can your give me some CSS to reproduce error?. @janczer I will fix this issue, but can you review rest of your PR for similar issues. It is OK to make issues (I made many mistakes too), but we must to learn from them.. @AviVahl @janczer fixed 20f80a8. It could be released faster, but I was drunk after the party :D. Let's just remove it from the list. I removed it 6416bd7. Can you show decl.raws content, decl.value, and decl.prop?. Seems like the string contains broken symbols. I retype it again and it\u2019s work.  Maybe it is not a colon symbol.\n(Sorry, that I missed the origin comment, maybe I lost it in my Inbox). There is some problem after { with whitespaces. I am closing it since input CSS string is broken and it is very rare case to have special case in parser for it. You deleted documentation, which we put to npm package for a purpose (to be able to develop PostCSS plugins without Internet).. I prefer .npmignore in all my projects. If I will have files in one of the projects, but still have .npmignore in other projects it will just increase mistakes. Especially, when files/npmignore has a difference \u2014 npm package size will be the same.\nThis is why I close PR. It will make maintenance harder without getting any practical result.. Oops, gulpfile.js is wrong.\nDid you check the actual npm package? All other files should be not in npm package.\nI release npm package from build/ and have special scripts to cut unnecessary files. I even cut unnecessary section in package.json.. I removed gulpfile.js from npm package 893b4d0. @pgilad nope, PostCSS release process is very different from other npm packages.\nsh\nnpx gulp build\ncd ./build/\nnpm publish\nThis is why I files gulp build script to avoid gulpfile.js being copied to build/.. Released in 7.0.5.. I do not like Prettier. Tools help people. So we should think about \u201cdo people need a tool\u201d instead of using trends.\nIf somebody who writes PostCSS code a lot will need a Prettier, I will be open for adding it. Right now only I am writing a code. And it is not a problem for me to make code style decisions.. Also note that you change code style. Having space between function name and () in definitions is very useful (easy to find function definition, because it is different from function calls) and it is part of Standard code style (if I will change it, I will have different code style in my different projects).. It is very good, that you want to contribute to PostCSS. But changing build tools is not the best part ;).\nI have many open source project, so I familiar with trendy best practices. So if I do not use some, it is because of purpose.\nIf you want to contribute you can:\n\nSuggest some non-trendy tools like Size Limit.\nCareful replace Gulp. But you need to move all complex logic and checks and be sure about performance.\nImprove test coverage.. > wonder how it would be for new comers\n\nCode style is not a problem for most of contributors and me. Unfortunately, most of them even do not install npm dependencies, so they even will not run Prettier \ud83d\ude05. Wrong issue. Create it in https://github.com/postcss/postcss-cli. Sorry, I missed PR. Change logic to not call PostCSS for non-production cases.\nThis warning is really helpful for you. 90% of Autoprefixer runtime is compiling CSS by PostCSS. By passing empty plugins you anyway spend this 90% in PostCSS. So your optimization just didn't work. Now PostCSS warms you about it.. Do we need to keep BOM in Root#toString? Or you are OK with cutting it?\nWhat is a reason why you taking care of BOM? (to find the best option). OK. Seems good. I am right now on vacation. Will try to accept it during a few weeks.. Released in 7.0.6. Use any library to parse selectors. Like https://github.com/postcss/postcss-selector-parser\nCore\u2019s Rule#selectors is very simple tool.. This is a core library. It doesn\u2019t load postcss.config.js.\nI think you should check this project and open issue there https://github.com/michael-ciniawsky/postcss-load-config. > Why does it not simply default to an empty config instead of throwing and requiring me to shim it?\nIt is a big philosophical question of IT. If we will hide error and load empty config a lot of users will send us question \u201cwhy PostCSS ignore my config\u201d. I think that sometimes it is easier to tell about the error explicitly.\nBut, I am not the creator of config loader. Maybe he had different thoughts.. TLTR: use comments /*%%styled-jsx-placeholder-0%%*/ instead of non-standard CSS syntax.\nFull version:\nSo, do you want some custom extensions for CS syntax to keep placeholders during PostCSS transformation?\nGood idea. Unfortunately, it is not really good for the parser maintainability to keep non-standard language extensions. It will require tests and work from us and these extensions could make PostCSS parser indomitable with browser\u2019s standard CSS parsers in some edge cases. This is why I can\u2019t add %%something%% support to PostCSS core parser.\nBut, don\u2019t worry. We are here to care about our users and of course, we will provide you ways to solve your problem. I see two ways to keep placeholder:\n\nYou can write custom PostCSS parser to parse %%something%%. Here is a doc about writing custom parsers. To be honest, I do not think this is the best way since it will require a lot of work to write it and keep updated. Also, DX for styled-jsx users could not be the best.\nMaybe you should use some standard CSS syntax for placeholders? For instance, you can use comments /*%%styled-jsx-placeholder-0%%*/. It will require less work. It will allow you to use any CSS tools (not just PostCSS based).. > I was under the impression that PostCSS cleans values from comments by design. and that was why these comments were getting stripped, but it looks like you're saying there is way to prevent comment stripping?\n\nPostCSS strip comments only inside selectors .one /* comment */ .two { } or inside declaration values color: /* comment */ black.\nIn .rule { /*%%styled-jsx-placeholder-0%%*/ } comment will will be kept (not stripped).. Sure. It is already released https://github.com/postcss/postcss-cli. Try to remove blocks of CSS to find the source.\nMaybe the right is above.. I am cllosing issue since there was no answer. 1. What is use case for it?\n2. We need to have tests for every changes.\n3. SHould we tread Custom Peroperties as a variables. They are not variables like Sass.. > yes they are not exactly the same but i don't see possible problems with it.\nFor instance, Custom Properties should not be compiled to values anymore (like we do with postcss-simple-vars).. Feel free to send PR (cross-tool source map support is not number 1 priority for me right now, but I will be happy to answer a questions about PR and will merge and release it ASAP). @rob-bar what is a use case for updating CSS but do not touch source map?. > if you just for example: change some values of properties...\nI think it is better to update source map in this case. It is very fast.. Thanks :+1: . Yeap, Node#source is optional. source.input is mondatory.\nSend PR.. @jedmao do you approve it? (Sorry, I lost in previous conversation, in Russia we are still having holidays). > This change can break type-checking in existing code, if that code did not specify the plugin property when pushing messages.\nPublic API is to always have message.plugin. Type checking error is a problem of evil plugin developers. :imp: . > Are we willing to convert PostCSS into a TypeScript project yet?\nNope \ud83d\ude04 I found that pure JS projects is easier to maintain. I will be glad to remove Babel if I will have time.. Can you show the code of your plugin?. Oh, it is too big. Let\u2019s move to questions.\nSo, you have a plugin, which adds other plugins depends on CSS content. In this case, you will call postcss([ initialPlugin ]) and should not have empty plugins warning. But I think I missed something.. > So, when this plugin is first, there will be no plugins before it in the array, and that means when I process imported files, this warning will be emitted.\nCan you show the code of this?. What about:\njs\nif (plugins.length > 0) {\n  return postcss(plugins).process(css).root\n} else {\n  return postcss.parse(css)\n}\nOf course, you will need to change algorithm a little.. Use parser() or syntax.parse(). map is accepted only to stringify, you can miss it on this step.. Yeap.\nSorry, I understand that it a little less beautiful. But this warning was added against popular issue. Unfortunately, at least right now I think it is the best compromise.. @aoberoi tell me when you will finish fixes. I will release them.. @aoberoi released in 7.0.8. Empty CSS string is legal input.\nAlso, this PR brake other tests too.. Good idea. Hi. Thanks for the good report.\nUnfortunately, I will be able to fix it only next week (sorry, other open source projects is in the line). If you want you can try to send PR to fix it quicker:\n\nHere is a code which inserts mappings for the end of the rules https://github.com/postcss/postcss/blob/master/lib/map-generator.es6#L230-L247\nIf Rule#source.end is wrong, here is a code which calculates a position https://github.com/postcss/postcss/blob/master/lib/parser.es6#L321\nFeel free to ask any question, I will try to answer ASAP\n\nP. S. I started to use Parcel recently and was extremely satisfied with its DX. Thanks for your work in that projects.. Wow, it was fast. Released in 7.0.10.. Send another PR, I will release 7.0.11.\nYeap, semicolon can be missed.. Released in 7.0.11. Throwing CssSyntaxError will be the best behavior on this invalid CSS input?. Done b6bcd8c . Released in 7.0.12. PostCSS will work with binary output as well. So there is no reason to change it in this example.\nEven all non-latin Unicode symbols will be kept without this encoding option.\nI think done should be clear and we can keep it without encoding details.. Just set map.annotation option in process() to any path that you want.\nTo have this logic built-in in postcss-loader, please create issue there, since I am not a maintainer of it for a while.. It could be a webpack issue. But I am closing it here because the core does have feature to fix it in webpack.. Fixed 9c59b02. Released in 7.0.13. I am not sure that it is valid CSS. > Let us know if it is, and we'll update the test in this rule too.\nI think it should be syntax error on this input.\nSo let's update the test.\nSorry for broking tests. At least, I think everyone agree that invalid syntax is not a public API \ud83d\ude05.\nThis syntax error was added by real user because if really unpredictable behavior in his case.. Hi. You plugin is awesome, but this list is only for popular or non-standard plugins.\nBut there is a another list for all plugins. Add it to docs/plugins.md in another PR.. You do not need rule.walkDecls inside root.walkRules. Just call root.walkDecls.. > Currently I seem to be in a situation where step 2 begins hunting over files before step 1 has finished\nThese callbacks are NOT async. So second will be executed only after the first one.\nI am not sure about the issue. Let\u2019s first clean code by my previous recommendation.. To do want you want just run PostCSS after concatenating all CSS files into the single file.\n. Yeap, postcss-loader are calling before concatenating. And webpack doesn't have simple way to call PostCSS after concatenating. Only working custom webpack plugin.. Awesome. Can can you:\n\nPut the plugin in alphabet order,\nAdd URL for Markdown link?\n\nJust push another commit to the branch. I think it is not a good idea to use the same tokenizer for CSS and LESS. For SCSS I just copied default tokenizer and change lines with comments about these \u201cpatches\u201d https://github.com/postcss/postcss-scss/blob/master/lib/scss-tokenize.es6#L145-L154\nI agree that DRY is a great rule. But in my practice, I found that sometimes it is better to avoid rule if it doesn\u2019t fit exactly this case. I afraid that this universal LESS-CSS tokenizer will be hard to maintain.. > Given the situation that postcss-less does use the postcss tokenizer would you be open to a PR to expose the position of the tokenizer in the input?\nCan you show diff (or open a PR)? I am not sure about the best solution, but I need some code example to understand what exactly do you want.. OK. Let's add it to PostCSS.. Released in 7.0.14. Released in 7.0.14. @mattlyons0 what is your Twitter name? I will mention you in release tweet.. PostCSS doesn\u2019t support Stylus. If you want compact syntax use SugarSS (but you need to write colon).. \u041d\u0435\u0442, \u0442\u0430\u043a\u043e\u0439 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043d\u0435\u0442 (\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0440\u0430\u0432\u043d\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430).\n\u0415\u0441\u043b\u0438 \u0445\u043e\u0447\u0435\u0448\u044c, \u043c\u043e\u0436\u0435\u0448\u044c \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0441\u0432\u043e\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 \u0438 \u0444\u043e\u0440\u043a\u043d\u0443\u0442\u044c SugarSS.. > \u044d\u0442\u043e \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043d\u0430 js\n\u041d\u0430 JS \u043f\u0440\u043e\u0449\u0435 \u0432\u0441\u0435\u0433\u043e. PostCSS doesn\u2019t insert it. I think (because of the property name) it was created by Sass.. Yeap. postcss-scss contains Sass compiler inside.. Sorry. README.md is only for my selection of the most popular plugins.\nAll plugins are listed in docs/plugins.md. You can send PR there.. Great. Can you format units as a code to fix warning from spelling check?. Sorry, one more thing (I am out of laptop and can't fix by my own).\nGenerares > generates (start from small letter). And can you also fix the plugin above with the same mistake.. Yeap. it is a problem. But there is no solution right now, because:\n\nWe need to track PostCSS version, which was used in plugin.\nPlugin need to require PostCSS. And we can\u2019t fix it by peerDependencies, because most of users use postcss-loader and do not need to require postcss.\n\nThis is why, I suggest you to use yarn --flat\nSorry, I will close this issue, because there is no solution right now. I will reopen it when somebody will suggest me a good solution to care about all edge cases.\nDon\u2019t worry. I am share your concern about node_modules size. In the past we with @ben-eb compressed caniuse-db (about 72 MB) to caniuse-lite (around 7 MB) to reduce your node_modules. Unfortunatelly, noone tweet about it and mentioned. This is why I do not want to spend my forces in this area, no success in promotion (but I will help if somebody else will find solution).. Hi. Show you PostCSS plugin list (you may find it in your Gulpfile or in postcss.config.js) and input CSS.. Can you upload your project somewhere, so I will be able to look at the code?. I fixed postcss-nested, not it prints much better error on syntax errors like this.\n\nUpdate postcss-nested in your package.json: \"postcss-nested\": \"^4.1.2\".\nInstall the update by npm install command.\nRun your Gulp again. PostCSS will print better error (you have missed ;)\n\nThanks for the report. It helped make our DX really better.. Hi. Ask the question in postcss-loader repository.\nSorry, I do not work on this loader anymore and as result can fix its code.. Hi. PostCSS doesn't have excludeAssets. Are you asking about some PostCSS plugin?. @holidaypenguin sure. Do you want to send PR?. @holidaypenguin yeap! Press the Edit button for this file on GitHub and send a pull request. Let's save your name in the project history.. You need also remove postcss-bem link from links list. @line, @column and @file used in error message.\nBut sometimes it can be very useful, to catch parse error and build your own error message. So I keep position and file of error.\n@source is also needed to be use in some catch statement. When you have syntax error, it is very useful to print origin CSS files, which generetae this issue.\n. So, this props can be used in some end-user code, that will works with syntax errors.\n. I already remove it in next commit :).\n. I removed defaultStyle from docs. Anyway it is too complicated and plugin developers should not use it.\n. Fixed 514a3f3\n. cover generates coverage report, check-coverage raise a error is it is less, than previous\n. @iamstarkov autocomments looks not so good. Broken CI on low coverage is better :).\n. @jedmao @iamstarkov I think extra tool is not cool without a strong reason. What will be a problem on Windows without npm-run-all?\n. Why not node_modules/.bin/mocha?\n. How error.line could be outside 0..lines.length?\n. Could you, please? :) Because I afraid that code was too complicated. We will add it back on first report :).\nAlso thanks for fixes, they are really useful!\n. We still need easy advice how to check it. It should be good to describe what do we mean for CSS syntax. Not exactly props or at-rules. But the syntax how CSS  is written. This is why you can add custom props and at-rules and PostCSS will parse it. Because it doesn\u2019t care about CSS content.. To complex sentences without any useful ideas for developers. It accepts CSS string and return list of tokens is simpler with the same idea.. A good place to show some examples.. Maybe it is a good place to tell about PostCSS performance. That tokenizer is 95 % of parsing time. This is why PostCSS tokenizer is so dirty. It is written as black box only for good performance.. Here we can mention that we use nextToken method to reduce memory usage. We don\u2019t need to put all tokens to memory.. Maybe it was good to mention about tokenizer/parser separation idea here. Like:\n\nThere are two ways to write parser. Write a single file with string \u2192 AST transformation (we can mention Rework as example) or split it to 2 steps (string \u2192 tokens \u2192 AST). The second way is better, because string \u2192 tokens step takes more time. But tokens \u2192 AST step is more complex. With this separation we could write very fast tokenizer (but maybe not so readable) and easy-to-read (but slow) parser. So splitting in two steps improve perfomance and code readability.. This is breaking changes. We need to avoid it.. It will be better to have separated files for this helps. \u0414\u0430\u0432\u0430\u0439 \u0432\u044b\u043d\u0435\u0441\u0451\u043c \u0435\u0451 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e.\n\n\u041c\u0435\u0442\u043e\u0434\u044b \u043f\u043b\u043e\u0445\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432 JS (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043b\u043e\u0445\u043e \u0441\u0436\u0438\u043c\u0430\u044e\u0442\u0441\u044f):\n```\nfunction resetNodeWalk (node) {\n    if (node.root().isVisitorMode === false) {\n      return\n    }\nnode[isClean] = false\n\nif (node[isComplete]) {\n  node[isComplete] = false\n\n  if (node.parent) {\n    resetNodeWalk(node.parent)\n  }\n}\n\n}\n}\n```. ",
    "alexeyraspopov": "\u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u044f \u043d\u0435 \u043d\u0430\u0448\u0435\u043b \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0435 \u043f\u043e\u043b\u044f rules \u0438 decls. \u041f\u043e \u0441\u0443\u0442\u0438 \u044d\u0442\u043e \u0442\u043e, \u0447\u0442\u043e \u044f \u0438 \u0438\u0441\u043a\u0430\u043b.\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 decls, \u0435\u0441\u043b\u0438 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u043c\u0435\u0442\u043e\u0434\u043e\u043c forEach \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c:\njavascript\nObject.keys(rule.decls).forEach(function(key){\n  console.log(key);\n  delete rule.decls[key];\n});\n. ",
    "yairEO": "I've been using Autoprefixer and other gulp modules for CSS modifying already, and I hardly see a reason to use postCSS unless it would replace my dependency on SCSS preprocessor completely. why on earth would I need to use postCSS already after my SCSS has been compiled? \nAnyway, @zakdances asked if it will even do what the SASS or LESS does and compile these files. you told him the current state of things, but he asked about future plans, not current.\n. Can someone explain me one thing? Nowhere I understood the most important information, an that is if postcss can replace SASS or LESS and just compile the code as-is. I thought postcss is to replace those buy giving backward-compatibility support so current code won't need to be re-written (among it's other benefits) \n. @MoOx - what?? but we already have that.  using gulp or grunt modules to modify your CSS, things like Autoprefixed and clean-css and combine-media-queries (and countless more). Everyone already use them in build systems. Why then do I need postCSS? I could just use any module I wish and plug it into my gulp pipeline to modify the CSS. \n. I wasn't aware autoprefixer has any relation to postCSS... and I've been using Autoprefixer for as long as it was out. Anyway, currently I see no reason to use postCSS with my current setup. maybe in the future when plugin-base will have better options to chose from. current gulp plugins and setup can work just the same.\n. well I guess most developers just download and use a CSS parser they found online, rather than  spend the (huge) amount of time developing their own (which is absurd). I agree that it is much wiser to parse it once and then run any transformations. It might be fast but slowness  is not something I \"feel\" right now with a quite big CSS file (400kb non-minified).\ngulp is a very good system and I think everyone should use it, and it would make more sense to me if there was a gulp module for only parsing CSS and all gulp modules would use it's output, something like this:\ngulp.task('scss', function(){\n    gulp.src('*.scss')\n        .pipe(cssGlobbing({ extensions:'.scss' }))\n        .pipe(sass({ errLogToConsole: true })) \n        .pipe(cssParser()) // this is a one-time parser and everything now works with that data\n            .pipe(cmq()) // combine media queries \n            .pipe(autoprefixer())\n            .pipe(...) // whatever css transformation \n        .pipe(cssParser(output:'css')) // signal the parser to output pure CSS string and not parsed one\n        .pipe(gulp.dest('../assets/css')) // write it to disk\n});\npostCSS chose to be independent, decoupled from everything else, and in that \"black box\" you can choose to run transformations. That can be a good approach, but for me weird, because gulp is amazing and already became a standard, so the above approach seems quite logical \n. The way I see it, postcss is like an encapsulated GULP system, but only for CSS-related things.\nstill I see no justification for sandboxing everything under the postCSS eco-system. you loose the power everything GULP worked hard to achieve and all the plugins it proves which I might want to use in the middle of some CSS transformation. it should have a been a standalone parser for GULP IMHO.\n. yeah I am aware, it's an NPM module after all, and in GULP, it would mean a port like gulp-autoprifixer or anything else gulp-ported. Just a bit limiting from development point of view that all CSS transformations are un-accessible to other gulp modules to works as a \"middle-man\" manipulations.\n. ",
    "tunnckoCore": "Im not familiar with sass and less so much, but I think you can completely replace them in 90% of the cases - postcss have tons of plugins. \nIt would be interesting to see Bootstrap ported as postcss, as mdo announced in twitter. And if this became true.. it would be the proof that you can completely remove sass/less from the workflow and that would be the end for them, imo.\n. It is fun how people (the community) invent them, invent these totally new syntaxes, invent compilers/parsers for these harder (than css) syntaxes; before invent this so easy parsing just ol' css.\n. lol, so awful discussion.. :D \n@yairEO I think it was just enough to say \"we need streaming parser\" which, yea, would be great - parse to AST or some api, and then we can transform it with streams (not only gulp plugins). But yea, I can agree, postcss is encapsulated and this is logical, there's was no other way to be.\nI only want to mention that I hate and love gulp, and this prefixing simple streams with \"gulp-\" - god damn, it is just stream nothing more, there's no need to be prefixed with gulp keyword.\n. > there is no difference between gulp-postcss with PostCSS plugins and Gulp plugins.\ni didn't say that there have diffs in this workflow.\n. I think the first thing to that way would be to externalize the parser. And definitely should be for v5 milestone.\n. > So we need to rename Result#css. Result#content?\nyep and yep. maybe #contents is better, following the node-task/spec which is gulp/vinyl/record and etc.\n. @ai split core out and then release as 5.0, it's time.\nIm sure devs would love the idea to have separate postcss-parser, postcss-compilier and etc.\n. @ben-eb I cant got for what is the whole issue, really.. lol\n. works as of v4.1.8\n``` js\nvar postcss = require('postcss');\nvar cssnano = require('cssnano');\nvar input = 'div {\\n  font-weight: 900;;;;\\n  color: red;;}';\nvar res1 = cssnano(input);\nvar res2 = postcss().use(cssnano()).process(input).css;\nvar res3 = postcss([cssnano()]).process(input).css;\nconsole.log(res1);\n//=> div{font-weight:900;color:red}\nconsole.log(res2);\n//=> div{font-weight:900;color:red}\nconsole.log(res3);\n//=> div{font-weight:900;color:red}\n``\n. :+1: but change title part tonode.js v0.10 support, not justnode.js support`.\n. You just follow https://github.com/jonathanong/ferver its pretty simple - \"versioning for those of us who only care about breaking changes\"\n| Number | semver | ferver |\n| --- | --- | --- |\n| Major | Breaking changes | Major breaking changes |\n| Minor | New features | Minor breaking changes |\n| Patch | Non-breaking bug fixes | Non-breaking changes |\ni'm trying to follow it whenever possible.\n. > why not \"postcss-plugin\" ?\n:+1: \n\nbecause Gulp has same naming.\n\nand why we should follow gulp?!\n. > does dash has some problems in npm?\nwhat problems? nope, try https://www.npmjs.com/browse/keyword/gulp-plugin\nAs of the plugin guidelines lgtm except grammar errors and\npostcss([ plugin ])       // Bracket-less call\npostcss([ plugin(opst) ]) // Brackets call to set options\nVery bad practice. We need CONSISTENCY, dont support it in official guidelines.\n. there's no such thing like \"too many brackets\" as you mention somewhere.\n. > OK, I will change keyword.\nfirst check your ecosystem and then decide\n. > What consistence API do you suggest?\nim no saying to drop it from the api, just dont show/support it in official guidelines and the community won't do it in future and in one point in future we will be able to deprecate it.\n. it seems\nhttps://www.npmjs.com/browse/keyword/postcssplugin\nhttps://www.npmjs.com/browse/keyword/postcss-plugin\nboth aren't used in many many plugins\n. > I use postcss-plugins as keyword because a lot of plugins were already under that namespace.\nyea, but not good thing. actually finally the package is plugin, so postcss-plugin seems better, no matter it is complex of plugins. users use single package that you create, no every postcss plugin that you use in your package through your package.\n\nTheoretically ideas should be created to have practice result. There is no sense in consistency if it produces user problems.\n\ni'll repeat again. im not suggesting to break the API, throw errors and etc, only not promoting in official guideline, then there won't have problems and more issues in the issue tracker.\n\ndoesn't look so nice\n\nnice.. inconsistency also is not nice as @ben-eb mentioned somewhere\n``` js\nvar postcss = require('postcss');\npostcss([\n  processor1({foo: 'bar'}),\n  processor2,\n  processorThree({opts: true}),\n  processorFour({bar: 123}),\n  processor5,\n])\n```\n. > users use single package that you create, no every postcss plugin that you use in your package through your package.\ndamn, that sucks, lol\nI mean, users of cssnano use it as is, packaged. they not use postcss-minify-selectors through cssnano like\njs\nvar cssnano = require('cssnano');\ncssnano.minifySelectors()\nalso two keywords would be confusing. actually npm search would find your if it have postcss-plugins keyword, imho.\n. > also two keywords would be confusing. actually npm search would find your if it have postcss-plugins keyword, imho.\nhmm, nope, not true\n. :+1: :100: \n. @RnbWd not good idea to slice first character if it is dot or hash, lol. It wont be so easy as you expect, believe me. Dont forget that js have overriding.\nBut yea, this discussion isnt for here.\n. > I think that responsibility should lie with the plugin developer though, and not the user. \n:+1: \n:-1: for the proposed\n. what API? im not talking about any API.\njust do nothing in these cases. it's not postcss problem, it is purpose of rational developer mind and architecture.\n. >  keep things simple\n:+1: \n\nDon't do magic stuff that remove silently\n\n:+1: exactly\n. @ben-eb looks better, but plugin developers also should care about versions. \nSo there have a lot diffs if cssnano use one version of some plugin, and cssnext use other. For that Im against that at all, because the versions. U cant just set simple check like processor.has(name) and expect that would be enough.\n. very cool! :+1: before few weeks search for something like that :)\n. omg.. why you would need to use it as postcss plugin, when you can just in 99% of the time\njs\nvar result = postcss().process(input).css\ncssstats(result)\nlol!\n. and correct me if im wrong, but cssstats also use postcss, which is kind-a-weird.\n. and the plugin also would parse twice. https://github.com/cssstats/css-statistics/blob/master/index.js#L16\n. in plugin approach\n``` js\nvar postcss = require('postcss');\nvar cssstats = require('postcss-cssstats');\nvar cssnext = require('cssnext');\nvar cssnano = require('cssnano');\nvar output = postcss([cssnext(), cssnano(), cssstats(function(stats) {\n    console.log(stats)\n  })])\n  .process(css);\n```\n1. postcss would parse the css and pass it to the given plugins\n2. secondly, css plugin will get that css and parse it again\nits awful idea to have plugin, at all.\n. @whdigger erm? again? Maybe you mean online converting postcss to css?\n. Try https://github.com/verbose/verb/tree/dev (a.k.a. 0.9.0, it is upcoming in a few days and it is awesome) or directly use assemble for the website - they are proved.\nAnd yes, use JSDoc comments, not other shits. :)\n. I also starting to think that unified would be the best way to go for these 4 projects - @postjson, @poscss, @posthtml and @reshape. Another one can be @postcore when finish it (it's 90% ready and it's working).\n. Externalizing tokenizer to separate package is even better thing. :D Such tokenizers works well for JSON parsing too. :)\nJust seen csstree and will look its codebase.. ",
    "robwierzbowski": "After looking closer at the containers file I have most of what I need :+1:. Another example or pointers to the main API methods wouldn't hurt though :smile:.\n. Thanks Andre! Even though autoprefixer takes care of it, showing a prefixing mixin would be very helpful.\n. ",
    "kizu": "\ndefault output CSS should be readable\n\nI'd argue on this: as this is a post-processor, the initial code should be readable, while the result could be not. And if you'd like to have a readable output, you could just run it through a specialized beautifier :)\n. My task is: I want to use autoprefixer, CSSO and pixrem (which uses postcss), CSSO removes the fallbacks that pixrem adds, so I need to call pixrem after CSSO. Thus, all fallbacks added by pixrem have extra spaces that could be minified.\n. Ok, np :)\n. When 0.3 would be released?\n. That's some really awesome news!\n. Awesome! :ship: \nAlthough, I guess PostCSS is still partial parser (got this definition from the Stoyan's talk here), as it won't parse all the stuff (all the simpleselectors, contents of :not, attr selectors, values like gradients, transforms etc, etc.), while parsers like Gonzales are trying to parse just everything.\nBut whatever. Impressive work is going on there!\n. \\o/\n. +1 here, I'm going to use PostCSS for handling some custom at-rules, and those ideally could contain both decls and at-rules.\n. +1 here.\n\nWhy you can\u2019t set from and to options manually\n\nWhy should you set them if you already have that info from the sourcemap that is already there?\n. ",
    "lydell": "I ran into the same issue when I developed my fork of Autoprefixer with source maps support. Here is how I solved the problem and the relevant test. If any of that helps ;) (I must admit that is not the most well-written code I've produced -.-)\nI wonder if the source-map module could be smarter about this by default, though ...\n. I think it has to do with that the .applySourcemap() method form the source-map module only works correctly if items of the sources array of source maps are exactly equal: If the in-sourcemap has sources: [\"folder/foo.css\"] and the out-sourcemap has sources: [\"foo.css\"] the applySourcemap() method does not understand that it's actually the same foo.css. So I used a lot of path.relative() and such to normalize the sources arrays first. Hopefully the source-map could do this, that would be the best for everyone of course.\n. Perhaps the second argument of .applySourcemap() should be used?\n. I tried changing the .applySourceMap() line to map.applySourceMap(prev, opts.from) and that partially solved the problem.\n```\n$ cat b.css.map \n{\"version\":3,\"file\":\"b.css\",\"sources\":[\"a.sass\"],\"names\":[],\"mappings\":\"...\"}\n$ cat out/b.css.map \n{\"version\":3,\"file\":\"out/b.css\",\"sources\":[\"a.sass\"],\"names\":[],\"mappings\":\"...\"}\n```\nAs you can see, the source is now changed to \"a.sass\", but the path to \"a.sass\" should be relative to the source map (as @nDmitry\u2019s expected output shows).\nThis is how I understand the problem:\n1. Autoprefixer takes a source file as input. In this case, \"in/a.css\".\n2. Autoprefixer puts the source file in the sources array of the source map it creates: \"sources\": [\"in/a.css\"].\n3. Autoprefixer finds that \"in/a.css\" has a source map. It is a generated file, and therefore we don\u2019t want to map to it, but to it\u2019s source.\n4. Autoprefixer applies the source map for \"in/a.css\" (\"in/a.css.map\"), by using the .applySourcemap() method. That method works like this: \"Hey, source map [the source map generated by Autoprefixer]. You contain a source that itself has a source map. For that source, map to the locations of that source map instead!\". So the .applySourcemap() methods needs two things: The name of the source that itself has a source map (the second parameter), and the source map for that source (the first parameter). However, the method allows the second parameter to be omitted.\n   - If the second parameter is omitted, the method tries to guess which source the source map to be applied belongs to, by looking at the file property. In my opinion, that\u2019s not a good guess. The file property is optional, so it may be missing. Moreover, the spec just says that it is \"a name of the generated code that this source map is associated with.\" It doesn\u2019t say that it is the file name, or, more importantly, a path to the file. And as far as I know, browsers ignore this property.\n Still, the `file` property is used in this case. \"in/a.css.map\" contains `\"file\": \"a.css\"`. So the method looks in Autoprefixer\u2019s source map\u2019s `sources` property for a file called \"a.css\". However, it only contains \"in/a.css\", so it cannot find anything. So, mission complete. There\u2019s nothing for the method to do.\n\n\nIf the second parameter is not omitted, that parameter tells the method which source file the source map to be applied belongs to. If we send in \"in/a.css\" (opts.from) it works better. Now the method looks in Autoprefixer\u2019s source map\u2019s sources property for a file called \"in/a.css\". This time it find such a source. It rewrites the mappings for that source, and then replace \"in/a.css\" with \"a.sass\". However, it should have rewritten the path to \"a.sass\" to be relative to Autoprefixer\u2019s source map, but unfortunately it didn\u2019t. So I think this is a bug in the source-map module. When I think about it, it is not so strange. The .applySourcemap() hasn\u2019t got all the information it needs. It also needs a path to the source map to be applied, relative to the master source map. In our case, it needs the path to \"in/a.css.map\" relative to Autoprefixer\u2019s source map. In the first case: \"in/a.css.map\". In the second case: \"../in/a.css.map\".\n\nSo, here is what I think needs to be done:\n1. Postcss should provide the second parameter to the .applySourcemap() method (as I tested).\n2. The .applySourcemap() method should take a third parameter (as I described above). Moreover, I think that it should deprecate the use of just one or two parameters. Three should always be provided.\n3. Postcss should provide the third parameter to the .applySourcemap() method.\n/cc @fitzgen\n. Here is the test for .applySourceMap(). It does not cover sub-directories and the usage of the second parameter. That should be looked into as well.\n. That looks exactly like @map.applySourceMap(prev, @opts.from) to me. I'll look more at it asap hopefully tomorrow.\n. As far as I understand, your fix and using the second argument are equivalent. They both partially solve the problem: The .applySourceMap() method then correctly understand which source the source map to apply. belongs to. But it cannot know how to rewrite any sources from the source map to be applied relative to the new source map, so their paths will be wrong. (I could be wrong, though, because I couldn't test it when I wrote this).\nLast Friday I started working on improving the .applySourceMap() method. However, I hadn't time to finish it and send a pull request. Hopefully I can do that tomorrow.\n. Source maps are free to use both absolute and relative paths. If they are relative, they should be relative to the source map itself. That's the problem. When we apply the previous map, the sources paths of that map will be put in our new map. But they will still be relative to the previous map. That's a bug in the .applySourceMap() method. Which I'm working on. No hack should be needed.\n. Sounds sensible :+1: \n. Looks good!\nGood idea to hack fix this for the time being. I did get time to work on my patch yesterday, but I ran into several unexpected problems.\n. https://github.com/mozilla/source-map/pull/93\n. Wouldn\u2019t it be better if the option was called sourceContents, since that\u2019s the name of the property of source maps?\n. Sorry, you\u2019re right.\n. Thanks for pointing that out to me! Seems like I\u2019ve been doing it wrong all the time in source-map-resolve. How embarrassing.\n. Related: #76.\n. > Plus, how to run tests?\nRun npm install once. Then it\u2019s simply npm test.\n. > Also I think we should show deprecated warning on old options usage.\nDefinitely.\n\nI think map.previous should be true by default. Because a lot of users don\u2019t understand source map, but they will be happy if magic will works.\n\nThe \u201cmagic\u201d should be on by default, yes. The question was whether it is ever useful to be able to turn it off.\n\nSo default value of map whould be { }. To generates map only if previous map was detected.\n\nThat\u2019s what I meant :)\n\nIs map.setSourceContents too long? Maybe map.sourceContent?\n\nAgreed.\n\nBTW, if we plan to change map API. Maybe we should add Result#mapObject? Sometimes we want to change genereated map, but it is not cool, that we need to parse string and recreate object.\n\nCould you expand a bit on this? I don\u2019t really follow here ...\n\nBTW. I have also 2 features for 0.4 release:\n\nDo you mean that you have started working on them, or just plan them?\n\nbetter source map support if we have several input CSS;\n\nI didn\u2019t know you could have several CSS inputs! Please tell me more about this. We need to consider it for the API changes.\nHow can you have several CSS inputs? Are they concatenated into one AST, and that AST is passed to the processing functions?\n\nset sourceContent in map\n\nThat would be the options.map.sourceContents = true setting.\n. > Now Result object contains only stringified map in map property. It is difficult to change this generated map, because you need to parse JSON and next to create SourceMapGenerator instance. Maybe we should provide SourceMapGenerator of our map in Result?\nProviding a SourceMapGenerator would be useful:\n- You can avoid the mozilla.SourceMapGenerator.fromSourceMap(new mozilla.SourceMapConsumer(result.map)) dance.\n- You can do result.map.toJSON() and result.map.toSting() to get an object or string representation.\nI\u2019m not sure how wise it is to expose another tool\u2019s API, though.\nIf we don\u2019t provide it, I\u2019d vote for returning the map as an object, not as a string.\n\nBut it will disable source map autodetection, becase there was only one from option in toResult call. We need to write origin file to each CSS nodes.\n\nCorrect. I need to think about this.\n. Sorry, I\u2019ve got side-tracked by lots of other projects, and I haven\u2019t had any time to look at this :(\n. > @lydell why we need annotation: 'preserve'. Other options use preserve logic when you just miss value (like if you miss sourceContent PostCSS will look into previous maps).\nI guess we don\u2019t need 'preserve', then. Your idea is better.\n. > > Deprecate trying to autodetect previous map by looking for options.from + '.map'.\n\nWhy you want this? For example, a some Grunt plugins generates maps file and PostCSS\u2019s Grunt plugin developer don\u2019t want to understand source maps and set correct options.\n\nI thought that it wasn\u2019t used in reality, because all tools I\u2019ve seen put a sourceMappingURL comment in the output. And I also thought about that CoffeeScript names the source maps like this: foo.coffee \u2192 foo.js + foo.map. But if you know of tools that justify the feature, then keep it :)\n. Yeah, if there is no use case I see no point in adding it. Just for the record, it wouldn\u2019t be difficult to implement at all: Just do new SourceMapGenerator({sourceRoot: options.map.sourceRoot}) and then the source map module will take care of everything.\n. Don\u2019t you want to support writing the source map to a different location than the same directory as the output CSS?\n. > @lydell and SourceMapGenerator will convert all our relative paths to new root?\nActually, I\u2019m not so sure anymore \u2026 let\u2019s just leave it :)\n\n@lydell I already added annotation: 'another/path.map'\n\nAha, I missed that. But it seems like that is unfinished? Shouldn\u2019t the intended map path be used in MapGenerator::relative for example? Are there no tests for this feature?\n. What is the purpose of being able to pass the previous source map using options.map.prev?\nI\u2019d say it is to be able to do something like this:\ncoffee\nfile = \"./source/style.ext\"\n{css, map} = preprocessor.compile(fs.readFileSync(file), source: file)\nresult = postcss(foo).process(css, from: file, map: {prev: map})\nIn other words, to be able to pass an in-memory map\u2014a map that has never been written to disk.\nI do not think the purpose of the options.map.prev option is to pass a map that has been written to disk. postcss finds such source maps automatically.\nWhy is this important?\n- An example in the readme uses map:  { prev: fs.readFileSync('from.sass.css.map') }, which I think it shouldn\u2019t. It should be something more like my example.\n- The same example in the readme can make new users think that they have to pass the previous map like this, when they actually just could let postcss do it for them automatically.\n- Since options.map.prev is supposed to be an \u201cin-memory\u201d map, we can assume that all relative source paths in that map are relative to the current working directory. This is not the case when a map is read from a file: Then all relative source paths are relative to the map itself. There is (currently) no way of passing the path that relative sources are relative to. I suggested it in my initial comment of this issue, but I think that we shouldn\u2019t do that since it complicates the options for no gain \u2014 provided that the options.map.prev is supposed to be used and not used as I described. Is it?\n- If your previous is written to a file, then you should let postcss take care of it automatically for you. Then the path that relative sources are relative to can be preserved. However, it currently isn\u2019t (see below).\nPreviousMap::loadMap should set @sourcesRelativeTo:\n- If prev \u2192 \".\"\n- If @inline \u2192 path.dirname(@file)\n- If @annotation \u2192 path.dirname(map)\nThen in MapGenerator::applyPrevMaps the third parameter of .applySourceMap should be @relative(file.sourcesRelativeTo).\nI wanted to make a PR, but three things stopped me:\n- I wanted to make sure that I understand the options.map.prev option correctly, and that you agree.\n- I\u2019m unsure on where/how to write tests for it.\n- Time.\nSo why did I write all of this?\nWell, that\u2019s because postcss\u2019 previous source map support is incomplete in one place related to automatically finding the previous source map written to disk. I tried to fix it myself, but got stuck, because:\n- The fix requires that my assumptions above are correct.\n- I wasn\u2019t sure on how to write the tests.\n. > Now we have same logic as you suggest:\nBut I can\u2019t find the code \u2026?\n. Consider the following case:\n- source/\n  - source.css\n  - source.sass\n  - maps/\n    - source.css.map\n- build/\n  - build.css\n  - build.css.map\nsource.css.map contains \"sources\": [\"../source.sass\"].\nsource.css contains /*# sourceMappingURL=maps/source.css.map */.\nWe run this:\ncoffee\nfile = \"source/source.css\"\nresult = postcss(foo).process(fs.readFileSync(file).toString(), from: file, to: \"build/build.css\", map: true)\nmap = result.map.toJSON()\nmap (build.css.map) should then contain: \"sources\": [\"../source/source.sass\"], but it actually contains \"sources\": [\"../source.sass\"], because we didn\u2019t tell .applySourceMap that source.css.map isn\u2019t in the same directory as source.css. That\u2019s why I suggested the @sourcesRelativeTo approach above.\n. The problem is the tests. Should the tests for this go into test/map.coffee? How do I build that directory structure? I see that you\u2019re using fs-extra and stuff \u2026\n. How do I create files and directories into it?\n. And fs.mkdirSync()?\nThe whole point here is to not use map.prev! We\u2019re testing the automatic previous source map finder.\n. The point is that, yes, you already test map.prev finder in test/previous-map.coffee and applying previous maps in test/map.coffee\u2014but you never test the combination of those two, which is what this bug is about.\n. #55\n. Couldn't this be usable as a separate module?\njs\ntry {\n  whatever(code)\n} catch (error) {\n  console.error(error.message + \"\\n\\n\" + markError(code, error.line, error.column))\n}\n. Then why not do both? Postcss could use the separate module as a dependency.\n. In my opinion, a compiler should only take a string and the source path as input and return a string and a sourcemap. Nothing more. It should not deal with the file system, previous source maps and source map options. I've made an abstraction called FileWithSourceMap, still unpublished though, to help with those three things that a compiler shouldn't do. Example:\n``` js\nfunction compile(file) {\n  var result = compiler(file.code, {source: file.source})\n  file.apply(result.code, result.map)\n}\nvar file = FileWithSourceMap.readSync(\"input.css\") // reads from file system, including previous map if any\ncompile(file)\nfile.writeSync(\"output.css\") // writes the compiled file to the file system. the map is written to \"output.css.map\" by default (this and other things can be customized). all previous maps are taken care of, and the paths in the written source map are correct.\n```\nI don't like that a CSS lib does things that are not specific to a CSS compiler (could be used by a JS compiler or whatever, too). But these are just my opinions :)\n. No, it'll be much easier to just parse the selector of a rule into an array of selector nodes.\n. Sounds really cool!\n. I\u2019d say don\u2019t lock it. Let people exploit safe mode and rules inside rules to do crazy/cool stuff if they like.\n. Nice! Could use a bit of polish here and there, but I think there will be PRs for that. Great work! :)\n. brunch has successfully used sourcesContent by default for a long time. If you want the source maps to \u201cjust work\u201d it is a really good choice, since it matters less that all paths are correct. Moreover, the user does not have to think about distributing the sources. So I think it is a good idea.\n. > Additionally, if you're working with really big projects and frameworks (like Zurb Foundation), including sourcesContent will make the map file GIGANTIC. Eventually, this negatively impacts performance of the web inspector and slows down compiling times.\nHow can sourcesContent slow down the web inspector? Moreover, even if sourcesContent isn\u2019t used, the exact same amount of data still has to be fetched. What do you mean by \u201cslows down compiling times\u201d? Would it make PostCSS slower?\n\n@lydell what do you think about inline by default?\n\nActually, I don\u2019t like inlining maps at all.\n- Some people only use source maps for development. IMO, you should also use it in production, in order to be a good web citizen. Then inlined maps won\u2019t cut it, since it means more to download even for people who won\u2019t look at the sources.\n- Inlined maps are harder to test. In order to compare actual and expected code output, you first have to remove the inlined map. Then, to compare the actual and expected map/mapping, you have to cut out the map, decode it and then finally compare. I\u2019m afraid that inlining by default can result in more crappy tests like rework\u2019s.\n- Even if you decide not to make your source maps public, it is still useful to have a source map file on your disk. If you stumble upon an error in the production site you can still use the source map file with a command line tool to translate it.\nA downside of not inlining is of course that the user has to understand that he has to make the source map file available to the browser.\n\nAlso, a little question. Does sourcesContent by default apply even if there was a previous source map, or only if it wasn\u2019t?\n. @lukeapage In your example you pass map.prev.prev but you mean just map.prev, don't you? Perhaps that's the issue?\n. You've go to be kidding me, did you choose \"childs\" over \"children\" just because it is two characters shorter?\n. Yes, \"childs\" doesn't exist in English. I'd change it to \"children\" as soon as possible, so that as few postcss dependents as possible start using \"childs\". We should keep \"childs\" as a deprecated alias, since (as you mentioned) there's no need to break the API for such a super minor issue as this :)\n. Good plan. IMO there\u2019s no need for a shorter name.\n. What if you could pass in a function to run in the default: branch of the tokenizer switch, and somehow pass in additional rules in Parser.prototype.nextToken()?\n. (Just a little note about css-whitespace: it does not support source maps).\n. I'd vote for code.\n. @pkyeck There\u2019s also https://github.com/lydell/strip-css-singleline-comments.\n. Let\u2019s not forget to learn from history. There used to be css-parse and css-stringify used by rework, but those were merged into css because it was too difficult to maintain otherwise. Just sayin\u2019.\n. As far as I recall, the ECMAScript\u2019s Error does not modify this. Therefore it is somewhat tricky to subclass it.\n. Renaming them that way might be clearer, but if so, not much. Since the documentation is nice and clear I don\u2019t think it\u2019s worth breaking the API in this case. And if you think that those methods are very popularly used it would be a PITA for lots of people to update their code for not much of a benefit.\n. CLIs are awesome. Until somebody asks about Windows support.\n. +1 for following browserify\u2019s lead.\n+1 for removing autoprefixer CLI and replace it with postcss-cli.\nautoprefixer CLI can work with many files at once; should postcss-cli too?\n. Those two sentences contradict each other. I vote for the latter ;)\n. I\u2019m not opposed to this kind of plugins\u2014I think they\u2019re cool :)\u2014but why re-create Sass features instead of just using (a subset of) Sass itself? (Just curious.)\n. I think a really simple \"extends\" plugin that can only extend Sass-style placeholder selectors would be cool (no complicated extend arbitrary selectors rules).\n. > But really, we can save 2 letters is most of properties.\nSounds completely useless to me.\n. This discussion made remember reworkcss/css-value. Dunno if it is relevant.\n. It might be confusing to have two different postcss variables around.\n. Wasn't the conclusion to change node.type from 'atrule' to 'atRule', or am I confused?\n. I know that was the original idea of this issue, but wasn't the conclusion here in the end that we should change node.type from 'atrule' to 'atRule'?\n. Does that really belong to the core parser? Isn\u2019t this a custom parser thing?\n. Alright. The only concern I had was \u201cIf we start here, where do we stop? When is syntax parsing requests from plugins too much?\u201d. But whatever. :)\n. +1 for .before just like DOM spec.\n. @ben-eb Just curious, is remove(node) also inspired of the DOM method, or is that something you've come up with? Also, what is the benefit of running parent.remove(node) over simply node.remove()?\n. But even then you need a reference to node so you could just as well have called node.remove()?\n. Ah, I had no idea you could remove nodes by index.\nWhat about having node.remove() (never takes any arguments) for removing by node reference, and parent.removeChildByIndex(index) for fast removals when you've got the index available?\n. It might be a good idea to look at recent DOM specs, jQuery and other AST libs to see what people commonly do with trees and nodes and to look for good/familiar method names.\n. Nice job! :+1: \n. I agree that \u201cfuture\u201d is better than \u201cCSS4\u201d. Much more \u2026 future-proof :)\n. Great!\n. Related: #84.\n. Pinging @iamvdo about postcss-brunch.\n. What abouing make require('wrap') return an array and use the ES6 spread operator: postcss([require('autoprefixer'), ...require('wrap')])?\n. I think @ai has been pretty clear that only documented stuff is part of the public API, right? And semver only applies to the public API.\nWhat could be improved is perhaps to always start everything non-public with an underscore, so people don't use non-public stuff \"by mistake\" thinking it is part of the public API.\n. @MoOx sorry, I misunderstood you before.\n. Nice work!\n. And if that's too verbose for you, there's of course nothing that stops you from writing it in, say, CoffeeScript :)\n. I felt like learning a bit about streams and buffers today, so I played with making a streaming program that strips singleline comments from CSS. I thought you might be interested :) strip-css-singleline-comments\n. Oh, so you've changed your mind since #37? I'd suggest to fix this by doing https://github.com/postcss/postcss/issues/76#issuecomment-52617716.\n. Hmm \u2026 is node.error('Unknown variable $one', { word: '$one' }) really better than node.error('Unknown variable $one', str => str.indexOf('$one') }), which also allows node.error('Unknown variable $one', str => str.lastIndexOf('$one') }) and node.error('Unknown variable $one', str => str.search(/\\$one\\b/) })?\n. @ai +1. (I'd call it index, though, since that feels more JavaScripty to me.) Plugins should keep track of the current index when parsing strings in postcss AST node properties, and just pass that along when reporting errors. Nice and simple. (And some plugins could benefit from that shortcut.) If this is done, it should probably be added to the plugin guidelines.\n. If you feel that point is more clear then go ahead. I don't have any strong opinions on it.\n. Shameless plug: There's also https://github.com/lydell/strip-css-singleline-comments.\n. I shouldn\u2019t review code when I\u2019m too tired \u2026 that\u2019s not the way I intended to sound! :/\n. Hmm, perhaps people who care very much about only using future-proof spec-compliant CSS also are the ones who actually read docs, and investigate plugins before using them?\nOne alternative is also to use a keyword in package.json.\n. @ai I used to develop for Node.js on Windows (but thankfully I don't anymore). As far as I remember, all you need to install is git, which includes \u201dgit bash\u201d which gives you a nice unix shell and a bunch of unix tools, as well as one of the official Node.js binaries to get Node.js (and of course a sane text editor and web browser helps too). I almost never had problems running Node.js this way (unless a project uses make\u2014then you're basically screwed).\n. +1 For adding in 5.0.0\u2014but only if the old names remain as aliases until 6.0.0 and print deprecation warnings.\n. Hmm, this PR seems to include two seemingly unrelated commits ...\n. As far as I remember, github (and git) only shows the commits that differ between the two branches. So if those other PRs already were accepted the two commits shouldn\u2019t appear here, which indicates that something\u2019s funky \u2026\n. Is there some other code coverage tool that does measure condition coverage?\n. Not having thought it through that much yet, but I think I like your last idea.\n. @MoOx Good idea about keeping it all in the same repo. That should not introduce the problems rework had.\n. I think the download count for rebeccapurple plugin is high because it is a dependency of cssnext, not because a lot of people nees it to transpile that color.\n. @ai That is not true. You can not replace replace any symbol with an escape and still have an equivalent style sheet. Try to replace the opening { of a block with an escape\u2014the block rule will no longer work (that can also mean that no browser follows the spec either, but I\u2019m certain that\u2019s not the case). That\u2019s the point of escapes: escaping the regular meaning of a character. This allows you to use for example { as part of a class name (which is terribly useless, but valid).\nCheck out these railroad diagrams from the spec if you don\u2019t believe me. Also see this handy CSS escaping tool.\nIn the end, though, I\u2019ve never used an escape in CSS (other than in strings, such as a::after{content:'\\A';white-space:pre;} to render a newline after some element), and I\u2019ve never seen anyone else doing it either, so I agree that it doesn\u2019t matter much practically. But the error message @davidtheclark got is not very good.\n. Can't an instanceof check be used, just like a few lines above?\n. I amended the last commit to also highlight the second url(). Here's the latest output:\n\n. It is not critical at all :) I have never seen anyone actually write !IMPORTANT in uppercase, and in the case of Prettier the !IMPORTANT is still printed so the user\u2019s CSS isn\u2019t broken.. If this really is the fix a comment explaining it should be added, so that nobody on a cleaning spree changes it back in the future. Also, is it possible to add a test?\n. Is the processor instanceof PostCSS check really needed at all now?\n. That link is odd. Should be ./lib/node.js#L4-16 I think.\n. These lines do not end with periods like all other plugin descriptions do.\n. It is no longer clear that the config files should be written in JS. It sounds more as if the runners should be.\n. I think it was better without the colon here. Now it looks like it is going to be demonstrated why the sync API is discouraged.\n. The dots should be on the other side. This is JavaScript, not CoffeeScript.\n. Why not use ...children? Performance?\n. Same thing here. Why not super.append(...children)?\n. A for-in to loop over an array-like object? Really?\n. to work with? :)\n. /^(?:https?|file):\\/\\//.test(file)\n. The most important point in my above comment:\nBe sure to use ^ to only match at the beginning.\n. Ideally never. But if we ever introduce a bug in the tokenizer or parser, or \u2013 more likely \u2013 if somebody else\u2019s custom parser does, it is possible. Take this line from tokenize.es6 as an example:\njs\nthrow input.error('Unclosed ' + what, line, pos - offset);\nIt can be very easy to mess up the line count or accidentally write pos + offset or something.\nSo this is all about robustness, so that the error reporting system doesn\u2019t hide the real error :) But I can remove this commit if you want :)\n. Done :)\n. ",
    "nDmitry": "@ai what about browserify shim?\n. \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0441 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435\u043c mappings \u0432 grunt-autoprefixer \u043e\u0431\u043e\u0448\u0435\u043b \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u043e\u043c \u0432 \u043f\u0430\u043f\u043a\u0443 from, \u0447\u0442\u043e\u0431\u044b input (from) \u043f\u0443\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u043b \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0438\u043c\u0435\u043d\u0438 \u0444\u0430\u0439\u043b\u0430 \u2014 https://github.com/nDmitry/grunt-autoprefixer/blob/master/tasks/autoprefixer.js#L66:L69\n\u041a\u043e\u0440\u043e\u0447\u0435, \u0432 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0435 \u043d\u0430 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e: autoprefixer -m in/a.css -o out/b.css \u044f \u0441\u0434\u0435\u043b\u0430\u043b \u044d\u0442\u043e: cd in && autoprefixer -m a.css -o ../out/b.css.\n\u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 mappings \u043f\u0440\u0438 \u0438\u043c\u0435\u044e\u0449\u0435\u0439\u0441\u044f \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u043a\u0430\u0440\u0442\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e, \u0445\u043e\u0442\u044f \u0432 file \u0438 sources \u0442\u043e\u0433\u0434\u0430 \u043f\u0443\u0442\u0438 \u0432\u0441\u0451 \u0440\u0430\u0432\u043d\u043e \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0445 \u0442\u043e\u0436\u0435 \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e: https://github.com/nDmitry/grunt-autoprefixer/blob/master/tasks/autoprefixer.js#L47:L55\n. @ai just do what I did in grunt-autoprefixer or wait for the applySourceMap() fix.\n1. AFAIK, file property should be a name of a generated file, not a path. Check this out. Mozilla's lib doesn't work either without the property or if it's incorrect, so we should provide it if there isn't one in an input map. I use my function ensureFile() twice\u2014on an input map to ensure that the property exists and it is correct, and once more when I get an output map (because source-map puts there a path).\n2. As lydell said, sources is a mess. I just take paths from an input map and make them relative to the output dir.\nAlso I don't want to look at all that CoffeeScript (sorry, it makes me sick =)), but make sure that your tests actually test mappings.\n. So we have a map:\n/*# sourceMappingURL=data:application/json,%7B%22version%22%3A3%2C%22file%22%3A%22test.css%22%2C%22sources%22%3A%5B%22test.less%22%5D%2C%22names%22%3A%5B%5D%2C%22mappings%22%3A%22AAAA%3BEACI%2CWAAA%22%7D */\nTo decode this we can use decodeURIComponent():\njs\ndecodeURIComponent('%7B%22version%22%[...]');\n// -> \"{\"version\":3,\"file\":\"test.css\",\"sources\":[\"test.less\"],\"names\":[],\"mappings\":\"AAAA;EACI,WAAA\"}\"\n. @ai LESS http://lesscss.org\n. @ai ok, it works.\n. ",
    "fitzgen": "Assuming that there's tests, docs, and nice code, I'll accept a PR that adds the extra parameter to applySourceMap :)\n. ",
    "kossnocorp": "@ai and overall, do you agree with my changes?\n. @ai regexp is slower (~10%) :-(. I forgot about performance, my bad.\n. @ai what do you think about private functions with underscore in the start of function name?\n``` diff\ndiff --git a/lib/root.coffee b/lib/root.coffee\nindex 4cdfbe5..4ec9b1d 100644\n--- a/lib/root.coffee\n+++ b/lib/root.coffee\n@@ -10,8 +10,7 @@ class Root extends Container.WithRules\n   # Fix spaces on insert before first rule\n   normalize: (child, sample, type) ->\n     child = super\n-    if type == 'prepend'\n-      sample.before = if @rules.length > 1 then @rules[1].before else @after\n+    sample.before = @_before() if type == 'prepend'\n     child\n# Stringify styles\n@@ -19,4 +18,7 @@ class Root extends Container.WithRules\n     @stringifyContent(builder)\n     builder(@after) if @after\n\n_before: ->\nif @rules.length > 1 then @rules[1].before else @after\n+\n module.exports = Root\n```\n. @ai yeah here is: https://github.com/node-inspector/node-inspector. It would be great to have benchmark builtin with specs.\n. @ai I have couple of questions here:\nWhat is reason to keep all these data as properties (I mean @source, @file and so on); I see what they not used anywhere.\nWhy we need a @source argument?\n. \n",
    "necolas": "Yeah, better docs would be great. Especially for people looking to build plugins on top of the API. Compared to getting started with Rework, it's not been as easy and the data structure isn't as nice to work with.\n. The main things that tripped me up were the plugin examples and the similarities (but slight differences) to Rework.\nFor example, to use Rework plugins you do:\nrework(css).use(plugin);\nrework(css).use(plugin).toString();\nBut for PostCSS you do:\npostcss().use(plugin).process(css);\npostcss().use(plugin).process(css).css;\nIt took me a while to realise that; my tiny brain eventually pieced it together from various examples in the docs.\nWhat could have helped are focused API docs (in addition to the overview you provide in the README). I helped do something similar for Twitter's Flight framework: https://github.com/flightjs/flight/blob/master/doc/README.md. If you're interested, hopefully I can make time to help you with the docs.\n. Yes, the data structure should provide a standardized way to access all the individual selectors in a rule. Sometimes you need to know whether a selector is part of a rule (like in rework-vars, which I stopped porting to PostCSS when I hit this issue, because I think it should be fixed here). Working with selectors in Rework is easy; it's always a selectors array. In PostCSS, there's the phantom rule.selector and you have to extract the selectors by hand every time. Perhaps consider just presenting a single selectors property.\n. That was quick! Thanks! :)\n. Oh there's parse() now? Yeah that seems to work\u2026your API docs could do with some love.\nStill strange to me that console.log of css includes _params but it's accessed by .params. Had the same unexpected result with _selectors in the past.\n. how would 'safe mode' work if you have values split over multiple lines? like a multi-shadow box-shadow?\n. i see, so it will search for : and then start a new decl from the word preceeding it?\n. sounds good. thanks for the info.\n. Does it make sense for this library to bake-in arbitrary parsing logic of nested rules, that isn't valid in CSS and never will be?\n. :+1: thanks\n. nodes sounds good.\n. Please could we get this alias in ASAP?\n. of course, thanks :)\n. ",
    "dvdln": "To aid adding or combining properties.\nIf I want to build a plugin that automatically adds a gradient background then I would want to first see if the target rule already has a background property and add a layer in front of the existing background value. This means looking for existing background image values either on a background-image decl or as part of a background decl.\nIf I want to build a plugin that automatically combines longhand properties (font-* or margin-*) into shorthand properties (font or margin), then it would be handy to have the preexisting shorthand properties already expanded. It's not uncommon to see margin: 10px followed by margin-bottom: 0 (which could be combined to margin: 10px 10px 0).\nIf I were adding this to PostCSS, then I would probably build a generic CSS longhand/shorthand parser as an external library (if it doesn't already exist\u2014haven't checked!).\n. Yes, that makes sense to add a compute method as opposed to applying the inherited properties directly to the data. Since A) changing any property would require everything to be recomputed and B) a method would allow you to specify a media constraint: css.compute(\"div.shy\", \"screen, (min-width: 320px)\")\n...or css.compute({ selector: \"div.shy\", min-width: \"320px\" }) <- I would prefer :)\n. ",
    "dbashford": "Thanks for getting back to me!\nWhat I want is to only ever have 1 file.  For asset pipelining it makes things a bit easier to manage.  Sort of the same reason you inline the map.  You could write 3 files, inlining the map cuts it down to 2, inlining the source too is a big win!\nThat last thing might be what I need to do.\nBecause PostCSS is building the inline portion itself, I would either need to depend on PostCSS to inline the source too, or I would need to pretend like I don't want inline CSS and then inline it myself.  Maybe I'll just do that.\nI'll give it a shot.  I'll close this for now and let you know how it goes.\nThanks!\n. Let me know what I might be screwing up?\nInput\n```\n:fullscreen a {\n    transition: transform 1s\n}\nbody {\n  padding:100px;\n}\n```\nCode\n```\nvar opts = {\n    map: true,\n    inlineMap: false\n};\nvar result = autoprefixer.process( file.outputFileText, opts );\n```\nOutput\n```\n:-moz-full-screen a {\n    transition: transform 1s\n}\n:fullscreen a {\n    transition: transform 1s\n}\nbody {\n  padding:100px;\n}\n/# sourceMappingURL=to.css.map /\n```\nIs there anything specific I need to do to get it to not tack on that source map line at the bottom?  Obviously I can remove the last line if that's the route I need to go.\n. What I want is this\n```\n:-moz-full-screen a {\n    transition: transform 1s\n}\n:fullscreen a {\n    transition: transform 1s\n}\nbody {\n  padding:100px;\n}\n/# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2RiYXNoZm9yZC9taW1vc2FwbGF5L2Zvby9wdWJsaWMvc3R5bGVzaGVldHMvZm9vLmNzcyIsInNvdXJjZXMiOlsiL1VzZXJzL2RiYXNoZm9yZC9taW1vc2FwbGF5L2Zvby9hc3NldHMvc3R5bGVzaGVldHMvZm9vLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLHlCQUF3QjtFQUMzQjs7QUFGRDtJQUNJLHlCQUF3QjtFQUMzQjs7QUFFRDtFQUNFLGVBQWM7RUFDZiIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyI6ZnVsbHNjcmVlbiBhIHtcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMXNcbn1cblxuYm9keSB7XG4gIHBhZGRpbmc6MTAwcHg7XG59Il19 /\n```\nThat has both the map and the source inlined together.  I didn't know how to remove the mapAnnotation.  I hadn't noticed that in the docs, but I see it now.  I'll give that a shot.\n. But that doesn't include the source it seems? It just inlines the map?\n. Maybe it'll help if I decode the base64 and format the JSON\n```\n{\n   \"version\":3,\n   \"file\":\"/Users/dbashford/mimosaplay/foo/public/stylesheets/foo.css\",\n   \"sources\":[\n      \"/Users/dbashford/mimosaplay/foo/assets/stylesheets/foo.css\"\n   ],\n   \"names\":[\n],\n   \"mappings\":\"AAAA;IACI,yBAAwB;EAC3B;;AAFD;IACI,yBAAwB;EAC3B;;AAED;EACE,eAAc;EACf\",\n   \"sourceRoot\":\"\",\n   \"sourcesContent\":[\n      \":fullscreen a {\\n    transition: transform 1s\\n}\\n\\nbody {\\n  padding:100px;\\n}\"\n   ]\n}\n```\nNotice sourcesContent? \n. Like I said above, 1 file is easier than 2.  For the same reason you inline the map, so you don't have to write the .map file, I don't want to have to write the .src file.  Ideally I just want one file that has it all.  Less file IO the better, mostly just because its easier to manage.\nThat make sense?\nYou have provided the ability to get what I need, I just have to build it myself.  This works:\n``` javascript\nvar opts = {\n  map: true,\n  inlineMap: false,\n  mapAnnotation: false\n};\nvar result = autoprefixer.process( text, opts );\nvar sourceMap = JSON.parse( result.map );\nsourceMap.sourceRoot = \"\";\nsourceMap.sources[0] = inputFileName;\nsourceMap.sourcesContent = [text];\nsourceMap.file = outputFileName;\nvar base64SourceMap = new Buffer( JSON.stringify( sourceMap ) ).toString( \"base64\" );\nvar datauri = \"data:application/json;base64,\" + base64SourceMap;\noutputFileText = result.css + \"\\n/# sourceMappingURL=\" + datauri + \" /\\n\";\n```\n. Sounds great!\nChrome supports this out of the box.  Firefox just added CSS source maps and I don't believe it supports inline source.\nI handled this with CoffeeScript maps by allowing devs to toggle a flag for whether they want everything broken out into separate files or if they want it all inlined with it defaulting to inline.  I wasn't planning on doing this for the autoprefixer stuff unless someone asks for it.\nThe advantage to separate source files is it'll let you edit the source in the browser.  Being able to edit the source in the browser is nice, but if you have live reload its practically the same thing.  Just as instant as editing in the browser to be honest.\nAppreciate all your help!\n. Definitely no hurry on this.  Like I said, the mechanism to do it is there, just a little extra work.  8 lines of code isn't going to kill me. =)\n. I think sourceContent is a little better than mapSource.  It matches the inline property name.  Anyone (like me) who needs to use it will understand what that flag does right away without reading the docs. =)\n. ",
    "MohammadYounes": "Thanks for the quick response, Yes I'm using PostCSS 0.2.0 \nWhere did decl._value.raw go? The change log  says nothing about it being removed ?  what is the alterantive ?\n. For post processing, I think raw value should be always available, even if it's equal to the trimmed value.\nI'll stick to 0.2 for the time being ;)\nThanks.\n. I use comments to provide processing instructions, most of them placed after the decl. value\n. I'm using something like replace, append, prepend, for example:\nCSS\n.example{\n   content: '\\f0da'/*replace:'\\f0d9'*/;\n}\n. Why not keep it exposed as a property\nJAVASCRIPT\ndecl.raw\nI updated to 0.3 and changed  the code to perform a check  on decl._value.raw != null, but I noticed rule.before does not return the same value as in 0.2 ! \nin your example:\nCSS\n/* autoprefixer: off */\na {\n  /* autoprefixer: on */\n}\nWhat will get the value /* autoprefixer: off */ ?\n. Hmm, there is no comment property:\nJAVASCRIPT\n{ type: 'rule',\n  decls:\n   [ { type: 'decl',\n       parent: [Circular],\n       source: [Object],\n       before: '\\r\\n  ',\n       prop: 'margin',\n       between: ':',\n       _value: '10px' } ],\n  parent:\n   { type: 'root',\n     rules:\n      [ [Object],\n        [Object],\n        [Object],\n        [Circular],\n        [Object],\n        [Object],\n        [Object],\n        [Object] ],\n     after: '\\r\\n',\n     lastEach: 1,\n     indexes: { '1': 3 } },\n  source: { start: { line: 16, column: 1 }, end: { line: 18, column: 1 } },\n  before: '\\r\\n',\n  _selector: 'html',\n  between: '',\n  semicolon: true,\n  after: '\\r\\n'\n }\n. Try this:\n``` CSS\n/****\n  Sample Content\n****/\n/comment before first rule/\nhtml {\n  margin:10px;\n}\n``\n. Aha, its separated! it was available at the rule levelrule.before, now itsrule.parent.rules[idx-1]. Oh sorry about that ...decl.rawValue` seems great :+1: \nIn my opinion, a comment is not a rule. and I liked it better when comments were handled by before, between and after properties.\n. How about moving the comments nodes inside the rule rule.comments, and provide a flag for clone clone(bool:include comments) ?\n. I already figured that out, it just makes more sense to have comments as properties of rules, not rules of type comment! \nAlso you don't need all of that, each rule will contain the list of comments preceding it. and the root contains the list of comments after the last rule.\n. For declarations use before and after\nCSS\n.sample{\n/*before*/\nmarging: /*raw*/ 10px /*value*/;\n/*after*/\n}\nJAVASCRIPT\nbefore == \"/*before*/\\n\"\nJAVASCRIPT\nafter == \"/*after*/\\n\"\nJAVASCRIPT\nrawValue ==  \" /*raw*/ 10px /*value*/\"\n. Empty declaration :smile: \n. Or may be provide rule.rawValue too, let me know your decision, so I plan my upgrade accordingly ... either way its a pretty awesome framework :+1:\n. Try it with a UTF-8 encoded file.\n. Or try this on Autoprefixer demo:\nCSS\n\ufffd/*Sample*/\n@media print{\n  .example{\n    display:none;\n  }\n}\n. That's the Unicode Character 'REPLACEMENT CHARACTER' (U+FFFD), just to simulate UTF-8 Byte order mark.\n. You can find the answer here.\n\nMicrosoft compilers[9] and interpreters, and many pieces of software on Microsoft Windows such as Notepad will not correctly read UTF-8 text unless it has only ASCII characters or it starts with the BOM, and will add a BOM to the start when saving text as UTF-8. Google Docs will add a BOM when a Microsoft Word document is downloaded as a plain text file.\n\nSimply ignore the first character if its one of the BOM characters 0xEF:\u00ef,0xBB:\u00bb,0xBF:\u00bf, I made a test on a UTF-8 encoded file and node gave the following for the same input file:\njavascript\n(input[0] == \"\u00ef\") // true\n(input[0] == \"\u00bb\") // true\n(input[0] == \"\u00bf\") // true\n. Confirmed! No parser error.\nThanks.\n. //cc @am11\n. @ai  \nThis issue seems to be back as of autoprefixer 4.\n@am11 \nThis might be whats causing the error described here https://github.com/madskristensen/WebEssentials2013/issues/1726 \nAlso as of postcss 3 : \n\nmap.inline and map.sourcesContent properties are now enabled by default, since it is now the most popular way to use maps.\n\nThus, the map property is not returned unless the map option contains inline:false.\nThese are breaking changes that might be causing serious issues in webessentials, since it does not reference a specific version and uses latest packages with each published release.\n. Earlier version of postcss would return result.map without setting inline to false:\nvar result = autoprefixer.process(cssContent, { map: { prev: mapContent } });\n//result.css\n//result.map\nThis is not the case anymore! The issue is with old code using the new postcss :)\nWhy is the first one bad ?\n. Also in webessentials the source map is passed between different compilers/processors, not just postcss based plugins!\n. > First way is bad because result.map may be undefined ;).\nThat's a different issue :)\n. So from now on, this is the way to do it ?  (If I don't want to process result) \njavascript\nvar result = autoprefixer().process(data, {map:true, inline:false, from: 'sample.css', to: 'prefixed.css'});      \nrtlcss().process(result.css, {map:{prev:result.map.toJSON()}, from: 'prefixed.css', to: 'prefixed.rtl.css'});\n. True if I'm only using postcss plugins, unfortunately this is not the case with webessentials. Nevertheless I think the exposed map property should not be the internal map object.\n. It's not that simple! The transformations are user selectable and each one exists in its own wrapper. @am11 I believe they should use specific versions in order to ensure  the wrappers compatibility.\n. Download this sample, and run node postcss.js\nAdding .trim() here fixes it. But i'm not sure if this how you want to do it!\nAnother thing, I think you need to update this to return file.replace(/\\\\/g, '/'); (global replacement). as nested paths are produced as \"../..\\\\..\\\\..\\\\sample.less\"\n. @am11 I'm talking about mixing both / &\\ in the path! not escaping :)\n. When is it expected ? Since VS web essentials saves all files in UTF-8, making this a common case (in which autoprefixer and rtlcss will fail).\n\ncc @am11\n. Sounds great.. Thank you :+1:\n. @ai yes, why!\n. That's ok, thanks.\n. @ai in release notes you wrote DOM instead of BOM :)\n. Correct me if I'm wrong! \n\nBy running postCSS, you mean autoprefixer? If yes, then according to this line you are passing params.targetFileName as both input and output (which I suspect is equal to Site.css)\n. Yes, postcss sets source using a relative path.\nWhy do you need it to be absolute? \n. On the contrary! It should appear in the sources, because \"Site.css\" is also an input file!\n\nin autoprefixer case you are updating the same file (input path = output path)\n. Not sure I follow! \"Site.css\" is an input file in autoprefixer case, SASS shouldn't account for it in the sources and neither should LESS.\n. I can't see how this is a bug in postcss!\n. Looks Great :+1: \n\n~~For 2.1 I would recommend separation between postcss and the plugin options.~~\n~~~~\n~~processor(pluginOptions).process(css, postcssOptions);~~\n~~~~\n~~Also a unified name for the exposed  processing method~~\n~~~~\n~~processor.postcss(css)~~\n~~~~\nScratch that, I thought this was a guideline for the plugin to work seamlessly with the runner. \n@ai May be add this note to postcss-plugin-boilerplate!\n. Much better :+1: \n. Thanks @ai. Awesome! Thanks for the link :+1: \n. Awesome! What about #598 ?\n. Sure, I hope I don't forget ;)\nThanks!. @ai  in case the comment was placed after !important it will produce:\njs\n{ raws:\n  { \n     before: '\\n',\n     between: ': ',\n     important: '!important/*comment*/'\n  }\n}\nhttps://runkit.com/5834c46bd8fb6400141ac375/58c84fe87474fc0014f16da2\n. This is the main difference between control and value directives.\n\nControl directives are placed between declarations or statements (rules and at-rules). \nValue directives are placed any where inside the declaration value.\n\nI don\u2019t think there will be an easy way to work around this in rtlcss \ud83d\ude22. On second thought, it's also impossible for you to know whether the comment is part of the declaration or not! \nIn rtlcss - placing the Value Directive anywhere inside the declaration value gives the same result. So, having the comment before the value provides the perfect fix.\nThanks @ai . Not so perfect fix \ud83d\ude22 \nComments placed first goes into between rather than value.raw #598 - Which I hoped it would be fixed by postcss as the change is dangerous for rtlcss public API too. . ",
    "callumlocke": "OK don't worry about value position, I can calculate that if it's not a common one.\nWhen I say character indexes, I mean the index relative to the beginning of the CSS, not just the index on the current line. It's not a problem for me to work it out (by adding up all the preceding line lengths), but I thought if PostCSS already knows this index anyway, then maybe it could expose it in the parsed objects? Don't worry if not, I don't want to slow down PostCSS.\n. My particular use case is a bit obscure and hard to explain. Don't worry, I will close this as I have solved the problem anyway by adding up all the line lengths to get the character index.\n. ",
    "cvrebert": "@ai Shouldn't that fact be documented then?\n. Thank you!\n. ",
    "gamtiq": "Ready: #39\n. ",
    "puzrin": "Here is the link to @ixti commit with comment https://github.com/nodeca/mincer/commit/2e5e272d3d919905bee1aebafd0f9bd355f44bc3#commitcomment-5689494\n. LESS were not supported yet. I've just commited preliminary version https://github.com/nodeca/mincer/commit/0851320cfbf887a25443bbc284e2ca4117739a0e\nStill has some issues with paths.\n. Lets split issues, now about postcss. Checkout the latest commits.\n1. Disable autoprefixer & csswring. Then run demo and open map file for CSS - it's content not yet full, but existing sources are ok.\n2. enable autoprefixer, reload page & open map file again. Now source has inlined directive, that should not be there. inlineMap: false does not help.\n. Note, that autoprefixer & csswring generates correct CSS, without inlined sourcemaps. But they add inlined info to sourcemap itself, in property sourceContent\n. Current state https://github.com/nodeca/mincer/issues/116 (see pending section)\nIt almost works.\n. I mean inlined sourcemaps. On chrome network tab, open map file, when autoprefixer on (and csswring off), and y will see, that elements from sourcesContent have: //# sourceMappingURL=data:application/json;base64..... at last line.\nIt's a garbage, that should not be there.\n. LESS output is ok, i've dumped it. Then probably problem is here https://github.com/nodeca/mincer/blob/feature/source-maps/lib/mincer/assets/bundled.js#L69-L76 . Hope @ixti can fix it when he has time.\nSorry for buzz.\n. Sourcemap allow to store original content. in sourcesContent property. You can see this in mincer demo. It works with Chrome. And it's the only way to guaranty sources access for complex cases.\n. @ai i think, we should fix bug in bundled assets generation first, without autoprefixer & csswring. It's somewhere in this section https://github.com/nodeca/mincer/blob/feature/source-maps/lib/mincer/assets/bundled.js#L54-L82\n1. inlined info not cutted from stored sources, when input file has sourcemap\n2. only first source from input map is passed to output.\nThat's reproduced on demo - only mixin.less shown for bootstrap.\n. I've updated sourcemap support in mincer, and almost sure that concatenation of bundled assets is ok.\nStill have problem with with postcss output:\n1. when option to not set, it forces file name to to.css. I have to cut it manually.\n2. when option to not set, it breaks from name ingenerated map - adds ../../../\n3. sourceContent property in sourcemap not set at all.\nThat cause different artefacts with paths & content in chrome\nHow to reproduce:\n1. Fetch feature/sourcemap branch from mincer\n2. Edit ./examples/enviroment.js - disable/enable csswring/autoprefixer\n3. Edit csswring/autoprefixer files to enable logs - compare results febore & after.\nCould you take a look? That's the last things to fix before release. With disabled csswring/autoprefixer everything works fine.\n. After rewrite to relative paths, sourcemaps are ok.\n. I'm not familiar with details about applySourceMap. Used SourceNode interface, and less use it too. Could you forward this issue to mozilla tracker, if needed?\n. ping :)\n. Exactly. And not critical. Just irritating :)\n. ",
    "ixti": "@ai with all respect my friend, but it's an issue within postcss.\nIt happens when there are no previous sourceMaps available. So the data passed to autoprefixer will look like:\n``` css\n/\n *= require bootstrap/less/bootstrap\n /\nbody {\n  background: url('/assets/stripes-ed8a78b58becc100658bd769420214c4.png');\n  transition: transform 1s;\n}\nh1 {\n  color: #a00;\n  cursor: pointer;\n}\n```\nAnd we call something like this:\njavascript\n  result = ap.process(\"...the string from above...\", {\n    mapAnnotation:  false,\n    map:            true,\n    from:           \"/assets/stylesheets/app.css.ejs\",\n    to:             \"/assets/stylesheets/app.css.ejs\"\n  });\nwhere this.data is a string shown above.\n. I'm very sorry (to admit ;D), but it's not postcss bug indeed.\n. @ai the problem is (now i simple don't know where it comes from) but that sources are getting source map injected in o_O (i believe it happens in other processor of mincer though):\n\n. @ai Honestly I tend to think it's a chrome's magic as well, but can't tell with 100% confidence if it is or not :D\n. ",
    "iAdramelk": "All are types of: throw new SyntexError(message, this.source, position, this.opts.from);\n@footnote generates -> Error: Can't parse CSS: Unexpected { in decls at line 8:16.\n@page clean_page with content - > Error: Can't parse CSS: Unexpected { in decls at line 53:15\n@page:right/@page:first/@page:left with content -> Error: Can't parse CSS: Unclosed block at line 27:1\n. Thanks. Don't really need it right now (I moved this piece of code to separate file, and now concating it after autoprefixer), but when I need parse and change it, I will try to do it this way.\n. Also collection eachUrl() can be really usefull sometimes, but I'm not sure there and how to implement it.\n. Well it is also a way to do it. Or postcss-helpers-url. The question is how much and that helpers we will need in future, but it is hard to plan for that now.\nP. S. Is there a way to extend PostCSS AST and it's methods from plugins? Maybe it is better to do it this way? (For example by adding field urls to declaration nodes that have them) Or there is to much possible ways to broke it?\n. Well, it's a possible way to do it.\n@MoOx what do you think about it? How to better approach this so it will be good for plugins like postcss-import to?\n. I think we have a number of separate issues here, that we now discuss together. It's better to separate them. This issues are:\n1. Do we need helper to parse strings with url() rule, similar to list helper. (It takes string and returns array of urls)?\n2. Do this helper have to do anything except returning array of rules?\n3. Do we need to have a separate plugin for url() manipulation and if we need it, what it have to do?\n4. Do we need to use this plugin in postcss-import or it is better to just hardcode it inside?\nThis ticket is mostly about the first issue: System helper that parses string with one or multiple urls and returns simple array of them. Without other magic for modifications and replacements that I have in my lib.\nSecond issue is mostly about my helper plugin. It's probably offtopic here, but in short my thoughts is following:\n1. I think now that using USIjs in it was probably overkill and not necessary for most plugins and plugins that need it can install it buy themselves.\n2. Method for replacing url content is a little more tricky \u2013 you can't just replace it with string.replace(), you need to match existing quotation marks and escape url content accordingly. It's probably useful to be able to do safe replace. So maybe, if helper is an external lib, it can have this method as in my case.\nThird issue. I think that you are probably right and it can be external plugin that works on source property. But list of the things that you want to do in is, from that I see didn't cover a lot of use cases. Maybe it's better to create separate issue somthere for discussing it? I don't want to write it here, it will be to long.\nForth issue. postcss-import probably don't need full library for URI replacement because it's just reads import values and modifies relative assets path. But helper from first issue can be useful for that.\n. Some thoughts:\nI think that ideally PostCSS must not change css file content between parsing and stringifying. If there is no ; before parsing, then stringifier must not add them, at least in default mode. But it must not fall with errors either, it must stringify it to the exact form it was before parsing. This way it will be maximally predictable for user. \nFor example:\nbody {\n    color: red;\n    background: blue\n    color: green;\n}\nUser make mistake here. Because of this mistake only first rule will work. But if we automatically add ; here, then result showing in browser will be different than user expects and this is not a good thing.\nSame thing with nested selectors and variables in the root: If user didn't explicitly remove them, then we have to leave them in place then we stringify it. Yes, it will not work in browser if we leave them, but user will understand what is going on and why.\nSo basically I think:\n1. PostCSS must not change CSS in any way by itself.\n2. Because of p.1, auto adding ; is bad idea. Probably better do it as plugin.\n3. If parser can parse nested rules and variables in root, it need to be able to stringify it back.\n4. With this changes we don't need flag for safe mode, we can leave only one mode.\n5. This syntax will allow not only plugins from the first post, but a lot of other different interesting things. \nIf this things are in place, then I didn't see problems with postcss-nested and postcss-simple-vars. But I'm not  sure that I will use them myself:\nThey are pretty much repeated that preprocessor already can do, but with a set of limitations. Plus we will have all of the standard preprocessors problems as well (can't just include css to site without transofmation for example). I think postprocessors are more suited for modifying and enhancing existing css, then as replacement for preprocessors.\nBut even after saying this I think that if we taught parser to work with css that have non-standard additions there will be plenty interesting way to use it, created by users, so it is a good thing to do.\n. Yes. But I think that by default PostCSS must leave mistake on the same place it was before parsing. :) If it was in original file it need to be leaved here, not throwed as error.\nI have good example, but from uri parser, not from css parser. There is a more or less standard way to include fonts for different browsers:\nsrc: url('myfont-webfont.eot?#iefix') format('embedded-opentype'), \n    url('myfont-webfont.woff') format('woff'), \n     url('myfont-webfont.ttf')  format('truetype'),\n     url('myfont-webfont.svg#svgFontName') format('svg');\nWe are interested in the myfont-webfont.eot?#iefix part. If we parse this uri with URIjs lib and then stringify it back it will convert to myfont-webfont.eot#iefixz because from uri standard posint of view#?` part didn't have meaning, but it was necessary for a hack to work.\nSo because library is fixing our errors we can't use it for updating paths for fonts in css. I think that there is also possible situations then we need to leave css errors in code as is. \nNow it is impossible \u2013 either parser will throw error or it will fix it. And this is not always a good thing.\n. +1 for separate method + promises.\n. ",
    "tanraya": "I'm using PostCSS 0.3.4. Seems it's not a bug. Here's full code:\n``` coffee\n!/usr/bin/env coffee\npostcss = require('postcss')\nprocessor = postcss (css) =>\n  css.each (node, i) =>\n    console.log(node)\nif node.type is 'atrule'\n  return false # It's here\nelse\n  # ...\n\ncss = \"\"\"\n@import url(http://fonts.googleapis.com/css?family=Oswald);\nhtml, body {\n  padding: 0;\n  margin: 0;\n}\n\"\"\"\nprocessor.process(css)\n```\nWhen I log node to console I got following output:\n{ type: 'atrule',\n  parent: \n   { type: 'root',\n     rules: [ [Circular], [Object] ],\n     after: '',\n     lastEach: 1,\n     indexes: { '1': 0 } },\n  source: { start: { line: 1, column: 1 }, end: { line: 1, column: 59 } },\n  before: '',\n  name: 'import',\n  _params: 'url(http://fonts.googleapis.com/css?family=Oswald)',\n  afterName: ' ',\n  between: '',\n  semicolon: true }\nThat's because in the code above I return false for atrule node type. Didn't found any docs on this topic.\n. ",
    "princed": "And how my code could be replaced then?\n. Looks very hack-ish =) And what is the problem with comment.after?\n. Ok, got it. Could you implement this hack?\nBTW, it's for my new minifying grunt task, which uses CSSWring.\n. +1 for SCSS-compatible mixin-plugin. \nThis would definitely make easier switch for SCSS users.\n. @lydell Mixins and nested rules are only things we're using from SCSS, so it looks very tempting to replace big thing (written in Ruby or C/C++) with couple of postcss plugins (which we're using as well for autoprefixer and csswring).\n. Can't wait for it :)\n. @ai To replace existing scss mixin, i.e. with partials with 0 to 3 params to insert.\nLike:\nscss\n@mixin btn-box-shadow($opacity) {\n  box-shadow: inset 0 1px rgba(255, 255, 255, .4), inset 0 0 0 1px rgba(255, 255, 255, $opacity);\n}\n. ",
    "SLaks": "It would be better to explicitly check for & remove a BOM, and continue to fail on other invalid JSON.\nhttps://www.npmjs.org/package/strip-bom\n. No.\nBOMs are an artifact of the UTF8 encoding.\nThey should appear in files that contain UTF8 bytes, but should be removed when decoding those bytes to a string.\nhttps://github.com/joyent/node/issues/1918\n. None of that is true; under ordinary circumstances, BOMs never appear in strings.\nThe BOM is added when writing the strong back to bytes (on disk, when we save the modified JSON to a file)\n. ",
    "tysonmatanich": "I am using Autoprefixer which reads the source map in from a file that can begin with BOM.\n. Sass via Visual Studio Web Essentials. Might be a Windows thing.\n. @SLaks  do you know if it's Web Essentials or node-sass is adding the BOM?\n. Thanks, I will give it a try.\n. ",
    "am11": "@tysonmatanich, regardless of what node-sass does to map file, its definitely WebEssentials issue. WE does post-processing (especially to fix this libsass issue: https://github.com/hcatlin/libsass/issues/242) and write it back to map file.\nI think this is the issue with Sytem.Web.Helpers.Json, which need to be reported at ASP codeplex repo.\nI have recently replaced all the occurrences of Sytem.Web.Helpers.Json with JSON.NET. You can try pulling the changes and do the same in your code. Hopefully that fixes the issue. Otherwise, we would need to do something like this to avoid the BOM (which I highly doubt would be required after the JSON.NET change).\n. None of it? Well this is a WE's issue! ;)\n@tysonmatanich, just ignore the rest of my previous comment. This issue is fixed by https://github.com/am11/WebEssentials2013/commit/3a86bb7bee4b5ec3e580c8cf1db7b9dd71f0ae1b via https://github.com/madskristensen/WebEssentials2013/pull/1096. No more BOM..\n. :+1: \n. FWIW, ..\\/..\\/..\\/..\\/sample.less (escaping / with \\) in JSON is also valid. libsass produces such JSON and it's in accord with JSON lang spec (looks weird though). You can test with:\njavascript\nJSON.parse('{\"foo\":\"..\\/..\\/..\\/sample.less\"}')\n. I was just saying if that interests the dev to escape forward slash like that on replacing the backward slashes. :)\n. Thank you guys !\n. params.targetFileName is the absolute path to .css file.\nYes autoprefixer and rtlcss both are presenting this issue, if there is absolute paths in sources array of existing map file.\nSame code is outputting correct result with sass (and older version of less), because they are producing relative paths in sources array.\n. This is an edge case, which can be fixed by postcss. \nIn the above situation, \"Site.css\" is an output file. \"Site.css\" should not appear in sources array of less' source-map, in which case source[] will always contain <something>.less (be it relative or absolute).\nIt seems like a bug in parser, where it confuses the output file with input (source) file.\n. > \"Site.css\" is also an input file!\nThen the issue is in SASS compilation case, because it doesn't account for site.css? And also, the old less compilation was incorrect?\nAs you said, we are overwriting the same file, so it should not map to the non-existing content.\n. That is not what I meant. I totally understand the working of each part here. \nMy point is; Autoprefixer never added <output>.css in sources array before, with older less version (or current node-sass version). This is happening because the new less API is putting absolute paths in source-map, instead of the relative paths.\n. ",
    "iamvdo": "I tried to modify line 18 from postcss.coffee like this:\ncoffeescript\nparsed = if css instanceof Root then css else postcss.parse(css, opts)\nAnd it seems to work. But, for some reason, the removeSelf() function no longer works (for example in css-mqpacker) and I have to use the remove() one.\nI have no idea what the problem is... and maybe there are more problems.\nPlus, how to run tests?\n. Thanks for the release.\nAfter tests, it doesn't seem that this is a removeSelf() issue. Or not directly. \nIn this processor from css-mqpacker for example:\n``` javascript\nvar _process = function (css) {\n  var queries = {};\ncss.each(function (rule, i) {\n    if (rule.type !== 'atrule' || rule.name !== 'media') {\n      return true;\n    }\nvar query = rule._params;\nvar past = queries[query];\n\nif (typeof past === 'object') {\n  rule.first.before = past.parent.after + rule.first.before;\n  past.rules.reverse();\n  past.each(function (r) {\n    rule.prepend(r);\n  });\n  past.removeSelf();\n}\n\nqueries[query] = rule;\n\n});\nreturn css;\n};\n```\nIt seems that removeSelf() does its job (when I debug it from node.coffee), but the returned css here still contains the removed element. \nIf I replace past.removeSelf() with css.remove(past), it works well.\nI can't understand the problem. I'll continue to investigate. But maybe, you have an idea?\n. You're right. When passing css as String, past.parent == css but when passing as AST, past.parent != css.\nSo I suppose this a css-mqpacker issue?\n. Dunno. The only difference I found between past.parent and css is that past.parent doesn't contain lastEach and indexes properties when CSS is from AST. But I don't know what it means?\nMaybe @hail2u will have an idea?\n. I found another issue that may be the cause. What is the difference between:\njavascript\nvar root = postcss.root();\nvar css = postcss.parse(string);\nroot.rules = root.rules.concat(css.rules);\nAnd\njavascript\nvar root = postcss.root();\nvar css = postcss.parse(string);\ncss.each(function(rule) {\n    root.append(rule);\n});\nWith the first example, it doesn't work but with the second one, it works almost as expected (except that past.parent.after is undefined in mqpacker processor).\nI have the impression that the 2 objects are identical in console...\n. OK, my problem seems revolved. \nThe problem was with the creation of a new Root. If I simply add new rules, it works but fails with css-mqpacker. I had to start with the first parsed file AST, and then add new rules...\nThe problem was with after that isn't present in a new Root AST I think. Really strange conclusion... ;)\n. @ai Maybe you'll have an idea https://github.com/hail2u/node-css-mqpacker/pull/11#issuecomment-47100985\nI still don't know if this is a PostCSS issue or if I'm doing something wrong...\n. Yes absolutely this (edge) case ;)\n. Fixed in browserify 5.0.3\n. Firefox has a slightly better error: \"ReferenceError: assignment to undeclared variable root\". \nSo is there a reason why it's root = this and not var root = this ?\nPlus, the problem appears only in browser, not programmatically, so it feels more weird to me.\n. OK, it works now. Options global have to be set on browserify.transform to process all files.\n. The bug is only reproductible with AtRule now, and it seems that there is a problem with Container#append.\nIf AtRule#before = '\\n', then css.append(atRule), and  AtRule#before  = ''\nWhen I go deeper, it seems that Container#normalize return good value for before ('\\n') but in Container#append the value is '', while no other action is done. o_O!\n. Ok, but if I use insertBefore, between property isn't added.\njavascript\ncss.eachDecl(function (decl) {\n    console.log('---1---', decl.between);\n    var d = decl.clone();\n    console.log('---2---', d.between);\n    decl.parent.insertBefore(decl, d);\n    console.log('---3---', decl.parent.first.between);\n  });\nGives:\nlog\n---1--- ''\n---2--- undefined\n---3--- undefined\n. I don't understand what this means, and how to fix that in csswring :/\nI opened a bug too: hail2u/node-csswring#27 maybe?\n. But this could happen in other modules too...\n. @ai +1 for documenting this! And issue in french doesn't bring cleaner explanations than what I've wrote ;)\n. Why you can't make it work with pixrem ? It works well in Pleeease.\nConsistency between modules is very hard. For example, autoprefixer have to be renamed postcss-autoprefixer ? And what about exposed method, attributes ? Do they have to be consistent too ? process() or postcss() or anything else ?\nI encountered same problems when I first create postcss-brunch because I needed consistency between modules. I made PRs to some modules, but it's sometimes a huge work.\n. Oh boy, I didn't notice that you just require(pixrem) (without .postcss)\nMaybe, PostCSS README have to explain how to (better) write modules ? A styleguide ?\n. @MoOx : \nOK great.\nIt's true for old plugins, but, don't assume just because some plugins exist is a good reason for people to do the same. I personally wrote modules and never heard about the normalize thing. It could a great addition imho. \n. Not so simple. The \"spec\" says that transformations are independent and this is not the case now with transform.\nWait & see ;)\nhttp://lists.w3.org/Archives/Public/www-style/2014Jul/0315.html\n. You should really stop using CSS4. There is no such thing as CSS4.\nhttp://www.xanthir.com/b4Ko0\nThere's just many modules, each at a different level. Level 4 for stuff that already exists in level 3, Level 1 or 2 instead. For example, CSS Custom Properties is in Level 1.\nIn addition, many of these plugins does not work as the spec defines them. It is just inspired by W3C draft, not real implementation.\n. Sounds better for me. \nI never liked the word transpiler, but don't ask me why ;)\n. I don't process assets/dist/main.css, only assets/sources/scss/main.scss. node-sass compiles and writes sourcemaps in CSS as string, then gives it to PostCSS who creates output file. So:\n- from is /assets/sources/scss/main.scss\n- to is /assets/dist/main.css\n. No. I don't create files between node-sass and postcss.\nI process assets/sources/scss/main.scss using node-sass. This return CSS as string and I process it using postcss.parse(string_css_from_sass, opts).\nIn opts, from is assets/sources/scss/main.scss. I also tried to set from to assets/dist/main.css, but don't work either.\nPostCSS seems to remove all sources files from generated sourcemaps, as there is only one from file. In fact, there are multiple from files. Is it possible ?\n. Plus, I don't have the same result if sourcemaps are embedded or used in prev.\n. It's close to a css linter that warns you in case of errors, warnings, etc. Write something like http://csslint.net/ was one of the idea I've had when first discovering postcss. ;)\n. It's more a code style linter, doesn't it ?\n. First case:\n- from is app/src/files/main.styl\n- to is app/dist/css/main.css\nSecond case:\n- from is app/src/files/main.styl\n- to is app/dist/main.css\nSo, basically, where the files are.\n. I set from option as you say. \nBut, in order to make it work, I also need to switch to from app/dist/main.css to main.css, or not use it. In both cases, PostCSS adds main.css as a new source. Is it intended ?\n. This creates the same output.\n. After Stylus:\n[ '../src/files/import.styl',\n  '../src/modules/module.styl',\n  '../src/files/main.styl' ]\nAfter PostCSS:\n[ '../src/files/import.styl',\n  'main.css',\n  '../src/modules/module.styl',\n  '../src/files/main.styl' ]\n. I'm just asking about the main.css entry ? I don't even know if it's intended or not ?\n. OK, I better understand now. Thanks for help. :+1: \n(maybe I will have more questions later ;) )\n. Maybe we need to add more examples to better understand in which cases PostCSS is better than Sass+Mixins library ?\nThis is what I tried when I gave a conference on CSS postprocessors last year. You can see it in english here, but be careful, code indentation is broken by Google translate. (see in french here: http://slides.iamvdo.me/blend14/)\n. The main purpose here is \"how to convert people from preprocessors to PostCSS\", and I think that the actual README is a bit off track. I'll try to explain my point of view.\nI've never used preprocessors. I've never felt the need of such features when writing CSS, mainly because I work on small projects. We know that best parts are variables, nesting and certainly loop and tests (note that we don't need a preprocessor to do that). The main problem with preprocessors is not preprocessors themself but mixins libraries like Compass or Bourbon. So much more people still use preprocessors only to get prefixes :/\nOn the other part, I've always though that postprocess is a good thing. In 2010, I wrote prefixmycss.com that adds CSS prefixes automatically. OK, it seems rather old now, but at this time, it was the first tool doing that.\nWhen I first discovered Autoprefixer, I was like: \"OK, now we can deal with prefixes in the best possible manner\". So I deeped dive into PostCSS (it was in version 0.3) and tried to apply exact same principles as for prefixes. And that's the best part of PostCSS: no need for dependencies and write only CSS!\nThe actual README is a bit too high level imo. Examples are only based on cssnext, and can discourage people from switching from preprocessors. cssnext is a really great tool, but don't face us, it's basically a preprocessor based on future CSS syntax. As an example, people don't want to use variables the hard way, like:\ncss\n:root{\n    --color: red;\n}\n.e {\n    color: var(--color);\n}\nwhen they can use (in Sass for example):\ncss\n$color: red;\n.e {\n    color: $color;\n}\nThe argument saying that it's future-proof  is irrelevant because CSS Custom Properties are not variables, so in the future we won't use CSS variables like we do it for now. The argument about speed is great, but not good enough, who cares about 50ms ?\nPeople are not idiots, they won't switch their tools for an identical one that doesn't simplify much their workflow. That's why we can't compare PostCSS and \npreprocessors. Someone who really need advanced preprocessors features will still use preprocessors.\nThe better choice to me is to help people understand how they could benefit from integrating postprocessors in their workflow, not want them to use something completely new. The README should mention more simple use-case (how to switch from mixins libraries for example).\nPersonally, I will continue to use only PostCSS, but I understand the reason why others want to use a preprocessor. I created Pleeease in this way: simplify the connection between pre- and postprocessors. I know this is not your point of view and that's the main reason you remove Pleeease from plugins list, but you really should think about that.\n. > What do you consider to be the benefits of PostCSS that should be emphasized?\nFor now, simplicity. You don't need to learn something new to use PostCSS, you don't have to use cutting-edge feature, it works out of the box, right on your CSS. Autoprefixer is not emphasised enough imo (an example with flexbox?). For people using preprocessors, they have to see how PostCSS will simplify their code, something from:\ncss\n.e {\n    @include rem(font-size, 2rem);\n}\nwith a mixin, to:\ncss\n.e {\n    font-size: 2rem;\n}\nwith no mixin. And it works even in edge cases like .e { border: solid 2rem #000 } where mixins fail.\nThen, told that PostCSS is much more than that. It can provides fallbacks, extend language, improve a11y and you can even create your own processor (based on future CSS syntax if you want). The plugins list is really helpful and well classified though.\n\nWe just have processors.\n\nAbsolutely. Pre or post, we just process our CSS. :)\n. Great rules.\nI'm not actively maintaining postcss-brunch, and it's a bit of obsolete right now. It was my first \"test\" before creating pleeease. If you want to update, I can add contributors.\nBTW, when developing pleeease's \"runner\", like pleeease-cli or gulp-pleeease, I needed to separate postcss.parse and postcss.process methods. Maybe you can also document this ?\n. Well, as I remember, for example:\n- to get full and correct sourcemaps support (from preprocess step)\n- to get data from multiple files (custom properties defined in one file and use in another)\nI first parse files individually with postcss.parse(file, sourcemaps), and then process concat AST at the end.\n. @simonsmith https://github.com/robwierzbowski/node-pixrem/issues/31\n. It won't surprised you but for me this is non sense. \nI understand your point though but hey, it's just another level:\n- me: I'm not fan of future syntax based modules\n- you: you want future syntax based modules but with maximum respect to the spec\n- others: they could want future syntax based modules but with their own addition or need, whatever the spec says\nAs it's impossible to fully implement a CSS spec with PostCSS modules, I don't see a reason to change names.\nMaybe clearly note that these specific modules are trying to respect the spec is enough? Mention that these modules are kind of \"certified\" by PostCSS, not by W3C?\n. @ben-eb Not really.\n@ai \n\nplugin syntax is for option-less call. plugin(opts) for call with option.\n\nSo why calling plugin() is different from plugin? It still seems odd to me. If Gulp raises an error, it's a Gulp problem, not PostCSS one. The PostCSS API for end-user should be simple. If I don't want to have options, I should be able to call without parenthesis. \nPlus, examples in docs never use parenthesis while in README there are parenthesis and this is confusing.\n. @ai Anyway, so examples in docs are still confusing to me.\n. In fact, it's the opposite, I find plugin without parenthesis. O_o This is why I'm confused because you say that parenthesis are mandatory.\nhttps://github.com/postcss/postcss/blob/master/docs/api.md#postcssplugins\nhttps://github.com/postcss/postcss/blob/master/docs/api.md#processor-class\n. > Without options, you use bracket-less version.\nOK, so it's my first question: why is there a difference between plugin and plugin(). I'm not talking about plugin(opts).\n. OK, but it used to work, so I don't get why it's no longer the case. No matter.\n. ",
    "dantman": "Yay one npm i and now require('postcss') works, thanks.\n. That idea is nice and I did think of it, but wouldn't that break autoprefixer's standalone version that runs in the browser?\n. I do this stuff later on on the day after work, so I'll see if I have time then.\n. Everything goes through the map generator. I could change Result to accept that \nMaybe I should just let you do this. Changing Result to lazy load is a complex mess. toResult depends heavily on the map generator. And thanks to inline maps it doesn't even know if Result should or shouldn't have a 'map' property (and I think consistent 'map' in result is supported) until the map has been generated.\n. ",
    "thorn0": "gulp.task('build', ['clean', 'build:lib', 'build:docs', 'build:index']);\nThis line means that these 4 tasks ('clean', 'build:lib', 'build:docs', 'build:index') start running in parallel.\n. You should specify clean as a dependency for all the tasks that should be run only after clean is completed:\ngulp.task('build:lib', ['clean'], function () {\netc.\nUPD: seems like it doesn't matter for sync tasks like clean, so never mind unless you're going to make clean async.\n. Yes, but see my UPD above.\n. ",
    "jonathanong": "i don't know what that means. i was thinking of a utility like:\njs\ntry {\n  postcss(string)\n} catch (err) {\n  console.error(postcss.formatError(err))\n}\nand it'll print something like:\n```\nCan't parse CSS: Missing property value at line 3:1\n:root {\n  --\n  ^\n}\n```\n. yep. need some context\n. Yup. As long as I can use it!\n. should be fine.\nwould be even better to do add COLORS!!! console.error(err.messageWithCSSAndColors())!\n. i think anything postcss related belongs in the org :) it's nice to see everything in one place and know it's \"official\"\n. it would be nice to refactor autoprefixer into a postcss-autoprefixer plugin with postcss.use(autoprefixer()) then let autoprefixer be a standalone version (with postcss, etc. included). doing .use(autoprefixer().postcss) is weird to me. \n. you can also put the standalone in ai/autoprefixer. i think the standalone being in autoprefixer-rails is a little weird. haha\n. It's up to you but it sounds like feature creep to me. Most people won't be using postcss directly, and higher level libraries like autoprefixer would probably need to do this themselves anyways\n. it's up to you :) it's only a few lines of code anyways. but i don't think it's necessary\n. no rush man!\n. ",
    "7studio": "In fact, it is this sentence which put me in on wrong way:\n\nTo generate new source map with default options just set map: true option in processor.process(css, opts) or root.toResult(opts).\n\nI have no advice to give you but it could be useful to note this use case near this one:\n``` js\nvar result = processor.process(css, {\n    from: 'main.css',\n    to:   'main.out.css'\n    map:  true,\n});\nresult.map //=> '{\"version\":3,\"file\":\"main.out.css\",\"sources\":[\"main.css\"],\"names\":[],\"mappings\":\"AAAA,KAAI\"}'\nfs.writeFileSync('main.out.css.map', result.map);\n```\nThank you for your understanding, your answer and your awesome job :-)\n. Hi Andrey,\nSorry but I am not sure to understand correctly your answer :/ Do you answer me if I expect to:\n``` js\nvar fileA = postcss.parse(\"h1 { color: blue; }\");\nvar fileB = postcss.parse(\"body { background-color: green; }\");\nfileA.append(fileB);\nvar result = fileA.toResult();\nresult.css //=> 'h1 { color: blue; } \\n body { background-color: green; }'\n```\nIf it is, IMHO not, it shouldn't append a \\n separator because in this case the fileA.after is empty.\nIn fact, the functions append() and prepend() should take account of the property after of the given rule in any case (e.g.: file with or without \\n at the end). \nToday, I tried a different way to concat files and I found the same result than at the start without \\n:\na.css:\n``` css\nh1 { color: blue; }\n```\nb.css:\n``` css\nbody { background-color: green; }\nh2 { color: red; }\n```\n``` js\nvar newCSS = postcss.root();\nvar cssA = fs.readFileSync(\"a.css\", \"utf-8\");\nvar cssB = fs.readFileSync(\"b.css\", \"utf-8\");\nvar fileA = postcss.parse(cssA);\nvar fileB = postcss.parse(cssB);\nnewCSS.append(fileA)\nnewCSS.append(fileB);\nvar result = newCSS.toResult();\nfs.writeFileSync('append.out.css', result.css);\n```\nappend.out.css:\ncss\nh1 { color: blue; }body { background_color: green; }h2 { color: red; }\nIn this specific case, it is really annoying because at the start I have \\n in the second source and I loose them in the result.\nSorry to disturb you with this issue.\nIf you want I can create a repo with my test cases to be clearer.\nThank you for your understanding and your answer.\n. Before writing my previous comment, I had taken time to update my package (to use the next release) and to redo all my tests.\nI understood well the behavior that you have  implemented.\nBut:\n``` js\nvar newCSS = postcss.root();\nvar a = postcss.parse('a {}\\n');\nvar b = postcss.parse('b {}\\n');\nnewCSS.append(a);\nnewCSS.append(b);\nnewCSS.toString(); //=> \"a {}b {}\"\n```\nAm I wrong if I expect that the output of the function .toString() is \"a {}\\nb {}\\n\"?\n. One more time, thank you Andrey. I understand a little better the operating of the project thanks to your answers :-) \nFinally, there is no bugs for me in the process.\nI will test your fix this evening.\n. Maybe we can take example on the function replaceChild of Javascript to implement it: https://developer.mozilla.org/en-US/docs/Web/API/Node.replaceChild\nBut it is not difficult to do something like that (where newRule can be an array or a Root node):\njs\nrule.parent.insertBefore(rule, newRule);\nrule.removeSelf();\n. ",
    "MoOx": "Awesome news !\nGreat work :)\n. :+1: :+1: :+1: \n. This is so fucking cool. Thank you guys !!\n. This kind of bench should be done with some plugins added. For example you should consider use cssnext to compare sass & friends ;)\n. I mean that making bench with a parser (postss) & parser + features (sass, less etc) doesn't really make sense. cssnext that use postcss add some features like vars, math, custom media etc. so it's a bit more logic to compare old preproc to cssnext, more that comparing them to postcss only.\n. Even if cssnext doesn't have mixins/if/loops,  you have similar features like vars, math, color manipulations. It's better than nothing ^^\n. This kind of bench are just sort of \"just to let you know\" :D\n. You should add the output to a file like BENCHMARKS.md or something like that & update it on each release to make this even more cool :)\n. we can probably update your task to save the output + run the task on the prepublish npm script ?\n. I think the evolution is not the most interesting thing.\nThe current state on a release is the interesting thing.\nThe result (output) should be easily retrieved from a child process.\n. Oh yeah. But that would be another problem. Can be drawn from collecting git history values on the versionned bench output ?\n. Yes it should now !\n. If it don't (but I'm pretty sure it does), you can recreate a repo with the same name under your profile then offer a README with a manual redirection :)\n. Awesome !\nFor my concern, I'll try to handle all the plugins I created under the org asap, based on rework-* tests :)\n. sure. done. It would be nice if he reuse the test I've done here https://github.com/reworkcss/rework-import :)\n. As you wish. But I'm not sure it's the goal of the postcss org.\nI think you can keep it for you.\nIn the same spirit, I'll create a myth like processor, based on postcss & I've not planned to put it under postcss org: https://github.com/putaindecode/cssnext\n. @ai usage will be really different. Plugins can be used with postcss api, tools can hide this api & might not be used as a plugin.\nAs a end-user, for a project I can choose to use postcss + plugins directly to have a custom css processor. You might not be able to do that with tools.\nThat's why I want to separate plugins in the README :)\nAnd like @jonathanong, \"official\" things are a good things and give credits to the repo.\n. As you wish :)\n. +1 for this :)\n. That's not an issue to me. Checkout plugins like postcss-calc or rework-color-function.\nIt's even better. :)\n. Same goal as postcss-*\nDirect use for custom css processing.\nFor example my next project will just use chained postcss plugins. That will be great to be able to just get the minimal dependency (no cli stuff for example).\n. I know I can do that. But when I get autoprefixer dep, I also get some dependencies or some code that are probably not needed for my usage.\nThat being said. You can still offer autoprefixer().postcss since you will use postcss-autoprefixer as a dep.\n. Also smaller modules encourage better code decoupling, easier tests & more.\n. I think if nobody ask you that before, it's probably because most of people don't look deps & don't care.\nBut some people like me & jonathan care about that (just a bit)\nAlso, like myth, it's nice to have binary in autoprefixer so npm i -g autoprefixer directly give the bin available.\nBut offering a smaller module that just give what is necessary for people that already have other dep loaded seems a good thing.\nShould not be a big deal.\n. autoprefixer-core will be the postcss plugin ? If so, you can just extract the postcss plugin from autoprefixer & call it postcss-autoprefixer, then use it in autoprefixer.\n. so you can do this dep tree\n|-- autoprefixer\n|------ autoprefixer-core\n|---------- // ...\n|---------- postcss\n|---------- postcss-autoprefixer\nOr\n|-- autoprefixer-cli //\n|------ autoprefixer (v3, since api change (no more cli))\n|---------- // ...\n|---------- postcss\n|---------- postcss-autoprefixer\n\nFor my concern, I will just go (for now) extracting postcss plugin as postcss-autoprefixer, then keep autoprefixer with bin (that not the huge part).\n|-- autoprefixer\n|------ // ...\n|------ postcss\n|------ postcss-autoprefixer\n. Will autoprefixer-core have postcss as dep ? if so the postcss plugin can be extracted :) So, when I use postcss directly I can get the minimal postcss-autoprefixer dep.\nBut do as you want, it's not a big deal for me. I'm thorough :D\n. Nice. Enjoy your vacations then ;)\n. @ai You mean \"postcss\": \"postcss/postcss\" ? :)\n. Seems a bug to me. If a have a trailing \\n it should at least keep it between both a & b.\n. Cool, thanks !\nI'm not likely to need that soon but it seems more logical to keep \"\\n\".\n. Not sure what you want at the end. You want the \"Postcss Plugins\" section below \"Build with PostCSS\" ? Or just plugins in this section ?\nIt can be used by users \"by hand\" if they want to use postcss directly (like lot of people does with rework).\nThat's why I add a \"postcss plugins\" section.\nI would go for 2 differents sections since stuff like grunt-pix2rem or pleeease are really different than simple plugins.\n. -1 too for this method. It's not the job of postcss.\n. even better can be rule.replacer(newRule(s)) (accept one or more rules) :)\n. lol sorry. replaceR was just a typo.\nHere is how I'm handling complete replace for now:\njs\n// newStyles are some fresh parsed styles in this example, but can be just a rule\n// so that part should be adapted\nnewStyles.rules[0].before = oldRule.before\noldRule.parent.insertBefore(oldRule, newStyles)\noldRule.removeSelf()\nSource: postcss-import v1\n. Didn't know about that :/ Thanks.\n. +1 for a normalized style\nI am using it in postcss plugins & will update those which are not using this normalized style.\n. I'm using something like that for now\njs\n/**\n * return GNU style error\n *\n * @param {String} message\n * @param {Object} source\n */\nfunction error(message, source) {\n  return (source ? (source.file ? source.file : \"<input>\") + \":\" + (source.start ? source.start.line + \":\" + source.start.column : \"\") : \"\") + \" \" + message\n}\n. Good point. but <input css> reminds me an html element.\nWhat about <css input> ?\n. Here is a more readable version\n``` js\n/\n * return GNU style message\n \n * @param {String} message\n * @param {Object} source\n /\nfunction gnuMessage(message, source) {\n  var prefix = \"\"\n  if (source) {\n    prefix = (source.file ? source.file : \"\")\n    prefix += \":\"\n    prefix += (source.start ? source.start.line + \":\" + source.start.column : \"\")\n  }\nreturn prefix + message\n}\n```\nDo you think we can add a method on rules & declarations to throw an error from them ?\nIs it a good idea ?\nMaybe it's not.\n. The problem with the line you mention, is that the loop on plugins is already in progress, so not sure how modifying plugins list will behave...\n2nd solution seems a bit weird too.\n. > There is a difference between Rework and PostCSS API. In PostCSS you create processor, which can be used wth severals CSS.\nIndeed, but I don't understand how this is stopping sur from doing a similar thing.\nI would be glad if cssnext can be used as a postcss plugin... That would be very handy for a lot of people (they will just have to add some missing features like fallback for old ie, this kind of stuff) \nWhat about adding in use an eventual loop like this (pseudo code)\nuse(processor) {\n    if ( processor instanceof PostCSS) {\n        this.processors = this.processors.concat(processor.processors)\n    } else {\n        this.processors.push(processor);\n    }\n    return this;\n}\n. I'll try to do that.\n. Also @media can be nested http://www.w3.org/TR/css3-conditional/#processing\ncss\n@media print {\n  /* hide navigation controls when printing */\n  #navigation { display: none }\n  @media (max-width: 12cm) {\n    /* keep notes in flow when printing to narrow pages */\n    .note { float: none }\n  }\n}\n. Oh ok. Good to know :)\n. Can be nice to get this as well http://tabatkins.github.io/specs/css-nesting/\n. @ai this css nesting draft will probably be a official spec some day :p\n. Ok. I was trying things :/\n. Thanks good to know !\n@hail2u you should use that in csswring :)\n. I don't think a feature like this should be in postcss. Maybe just a eachUrl. But I think an plugin seems more appropriate.\nAbout all the things you talk about @iAdramelk (rewrites, including assets as data-uris, including @import at-rules, updating urls to urls of auto-generated sprites, css concatenation, etc.) but I think you are trying to do too many things in one place.\nI see one plugin: postcss-url (I'll make it soon)\nIt will do\n- rebase - this is the only important feature - can be handled by native path.resolve using from/to postcss options\n- inline assets\nat-rules have nothing to do with that. And should not (I get your point but since postcss use from/to, this is enough for us to use that after all imports, since there is always a source property if from is given (and rebase make sense only if from is given).\npostcss-import  update from for parsing.\nSo after postcss-import, all rules have correct .source.file value. So a simple path.resolve will be needed. No need for a ton of helpers.\nAll other features that need to read path should just need node native \"path\" module since postcss-url will have already fixed urls.\nWhen this plugin (postcss-url) will be made (I repeat but I think it should need any dependencies except native path) I'll possibly use it in postcss-import. I really want to keep things simple.\n. to be short: I don't think we need anything in postcss core.\noff topic but fyi: tomorrow I'll make postcss-url plugin to fix url according to source.\nYou will see that it will be a really short plugin that won't need anything specific. (I'll use this to handle multiple url() in one rule, like I made for calc() (and calc() is clearly more complicated to handle but don't have lots of code)\n. Nice. I've a new plugin waiting for that change :)\n. looks good !\n. :+1: \n. its an issue in postcss-custom-properties.\nBut -1 for this. you should take a look to something like css-whitespace for this.\n. \"safe mode\" looks like a mode that doesn't allow any kind of fancy stuff, so it should do nothing.\nIt's the job of a linter tool.\n. ; are required in scss, which is different from old sass syntax (indented syntax).\nI think postcss should parse only valid css & should not add things like this in the parser.\nFor old sass like syntax, css-whitespace does the job correctly and can be used with postcss-import.\nIf custom prop syntax is like it is, its because some people have thinks about it for hours.\nCustom prop are way more powerful than simple vars.\nPostcss-custom-properties with full custom prop support (v1.0) is coming soon (hopefully this week) & you will see its completely different than \"stupid\" vars.\nSo -1 for this 2 things :/=\n. \"safe mode\" is not clear to me & remind me windows mode that run without any plugin or similar. This name seems even more \"strict\", not allowing any non valid things.\nShould be more a \"cool mode\", \"non strict\", \"sassy mode\", \"unsafe mode\" or \"loosy mode\"\n. IMO: \n- you should handle ; with a tool like css-whitespace\n- nested rules 1) are evil & dangerous, 2) have a wip draft, so if we want to make something we should make it like that not a la sass, or futur implementation of this one might be a pain since we will need to handle 2 kind of nesting. \nMy opinion: you should just use libsass for that, it's pretty fast (compiled C).\npostcss (like his name said) should handle normal css, not \"fancy extended\" css.\n. Maybe you can add a \"precss\" option to add more parsing plugins ?\n. @ai I understand you don't like whip draft of css nesting, but if this land as a official draft, we will need to implement it.\nMaking languages additions can be very difficult, especially when you need to consider the fact that you can add breaking changes for old parsers (old browsers like IE 8- for e.g.).\nIf I understand correctly, you can already do a postcss plugin for nesting without modifying the core ? Nice, but you should call it postcss-sass-nesting (to keep postcss-nesting for futur official syntax).\nFor your vars, same idea, you should use a postcss-sass-vars to make it clear for everyone (according to the scope of the plugin & the title of this thread ^^).\nEventually you can make a change so postcss plugin can also accept an object (instead of just a function) so you can pass a parser function in addition to the classic function to edit the css (e.g.: parser + modifier properties).\nprecss name was an idea, but a bad one I think, totally unclear. Solution above seems a better idea to me.\n. Plugin name is a bit weird :)\nShould be more something like postcss-sass-nesting or something ?\n. Please no \ud83d\udc4e=\n. - keep postcss-nesting :+1: \n- postcss-nested should be something like postcss-sassy-nesting or postcss-old-nesting  (nested seems like a mistake to me, but maybe I'm wrong).\n- :-1:  for adding support for sassy or lessy stuff. Doesn't belong here, even in whatever mode. But do whatever you or the community want, until it's not affecting quality, speed or codebase to badly ^^\n. Seriously doc in README is clear enough to avoid adding example ready for copy pasting...\n. You are trying to make you own preprocessor with new values: you are creating a new language. Good luck with that :)\nJust use regex, it's not complicated: /[\\.0-9]([%a-z]+)/g.\n. postcss-calc just works according to spec to reduce local computation (eventually with var() transformed before too).\n. It's totally not the role of postcss.\npostcss is a parser that offer an api to easily read & manipulate the stylesheet content.\nIt's not his job to read filesystem.\nYou need to write your own plugin for that it's should be that hard. Take a look to postcss-import & postcss-url that are playing with filesystem and/or filename.\n. This project is called POSTcss, not precss ;)\n. postcss is not a replacement for Sass nor Less. It's an alternative way to enhance your stylesheets written in plain CSS (\"syntaxically\" speaking). It provides a parser and an api to add your own custom behaviors. You might want to use some plugins or directly tools like cssnext build on top of it.\n. autoprefixer is a tool build on top of postcss. clean-css & combine-media-queries use differents css parser.\nBy using postcss and compatibles plugins, you can speed up your build time by avoiding multiples parsing step by each tool. PostCSS parse very nicely all the CSS syntax (and more) and is really fast.\nMost tools based on postcss can be used as a plugin directly (so for example you can use autoprefixer as a postcss plugin with some others like cssnano to minify).\n. gulp and grunt doesn't modify your CSS, they are just piping tools for your. You can do with the same with good old unix pipe (it's a metaphor but half true ^^).\n. +1\nThat being said, the old behavior should be kept.\n. +1 for this as default.\nFor me sourcemaps dont make sense without it (at least for inline).\nBut i'm not a pro & rarely use sourcemap.\n. That's exactly what I've done for cssnext: sourcemaps: true enable inline + sourcesContent (so \"it works\").\n. Nice ! I'll add that to cssnext :)\nPlease move it here !\n. boom, done !\n. Please adjust the PR after the move ^^\n. Btw, I'll adjust the deprecated module. Thanks !\n. @ai what about node.throwError(message) & node.logWarning(message) (or node.printWarn(message)? This seems more explicit about the purpose of the function.\n. lgtm :)\n. You should already do that with some limitations\nhttp://www.xanthir.com/b4U10\n. I understand that part, but you should use error instead of warning. So much people won't read warning :(\nBut I get your point ^^\n. Btw we don't know where the warning come from. A gnu style message with source will be great. Hard to find which plugins is causing the issue :)\nBtw2, I'm upgrading all postcss plugins I've done so far ;)\n. Good to know. Thanks !\n. nodes lgtm\nchildren is fine too\n. Result#output ?\ncontents looks fine too.\n. major is always safer than minor :)\nSide note: FYI, I will probably work with (inline) styles with JS in the near future so I won't be as active as before in postcss ecosystem.\n. I think CSS is definitly not the future. The first letter is clearly one big problem.\n. I am writing React based UI for 2 years now and I don't see how I can go back to anything else. CSS bring some issues like vjeux exposed. So I will work on a new project to bring in JS some convenient way to write some styles.\nThat's said, I still have some Wordpress to handle, so, no cssnext is not in danger yet (+ reminder: it's open source and based on small modules, so nobody should worry about cssnext future).\n. Not sure why it's missing. Does CssSyntaxError extends Error ?\n. Should the constructor execute the super constructor too ?\n. Will take a look tomorrow or the day after.\n. I've tried using super() and this doesn't do anything :/\nAlso try another syntax I saw but no success neither https://github.com/6to5/6to5/issues/226\n. Here is some additional thoughts\n- Should CssSyntaxError be CSSSyntaxError (even if it's a bit weird, looks better to me)?\n- It seems Firefox is using some \"not yet standardised\" properties name like lineNumber, columnNumber & fileName, we should check what others browsers are using (node use v8 so same as Chrome)\n. I agree that all postcss plugins should be postcss-. I'm so sad to see too many plugins that don't follow this \"classic\" rule. Even all jquery plugins are jquery. or jquery-* :(\nstuff like pixrem or some other have the plugin under require(*).postcss, but recently I think we added the ability to postcss to autodetect this. postcss can even now consume another postcss instance (so tools like cssnext can be used as plugins too) .\nWe should:\n- list all plugins that are not working easily with postcss\n- make pr if easily doable or contact owner to discuss about a possible change to make this better.\n. (For you information, cssnext is \"just\" a collection of plugins. Not even 100 lines. And as I said, you can use it directly with gulp-postcss.)\nAnyway we should behave like I explained in my previous comment to make the ecosystem better.\n. This behavior has been normalized https://github.com/postcss/postcss/blob/dd2755318a33a82422187a35855e3415e4dd5991/lib/postcss.js#L57\nI think now there is enough plugins under the postcss org so people can take examples of that.\nFrom what I see, only \"old\" plugins (understand here: before lots of postcss-*) should require some updates.\n. @timkelty you have opened 2 issues for this, I think it's enough :)\nNo need to ask this everywhere. I have take 1 hour yesterday to find the problem, still not able to find why.\n. To me, a plugin should be a function.\nI understand that some plugins do not need options, but we never know... All plugins are subject to end up accepting parameters (eg: postcss-calc...)\nRework ecosystem had the exact same issue.\nOne cool thing is that postcss can accept another postcss instance (cool to use for example cssnext as a plugin).\nOther cases looks like bad design to me.\nSo imo, I think we should only encourage function or postcss instance.\n. Consistancy for new players\njs\npostcss()\n  .use(a)\n  .use(b())\n  .use(c.postcss)\n  .use(d.processor)\n  //... This is kind of boring isn't it ?\n. js\npostcss()\n  .use(a())\n  .use(b())\n  .use(c())\n  .use(d())\n  // this looks nice :)\n. How do you provide options here ?\nWith that way to do, you can easily do:\npostcss()\n  .use(noOptions())\n  .use(whatever({a: b}))\n  .use(blablah({path: \"/...\"}))\n  .use(bestPlugin({option: \"ever\"}))\n. Exactly. This is bad because you will never know if a plugin is a function or not.\nYou fixed this by adding code in the use() method. I think we should provide guidelines & not allow people to do \"bad\" stuff.\nRework, for example, didn't allow that. We (as authors) end up by make plugins ecosystem consistant.\nBy providing \"one unique way\" to consume a plugin, you make postcss usage easier for everyone (I think so).\n. References: https://github.com/postcss/postcss-calc/blob/master/CHANGELOG.md#200---2014-08-06\n. lgtm for a fresh start :)\nI just miss the point of appealing Sass users. Who cares what are they doing ? We should better write blog post how to stop using Sass these days :)\n. Error message provided seems logical to me.\n. It will be hard since postcss itself is just a parser (+ api). Seems useless without plugins (so new stuff to pass). That will make CLI usage very weird & verbose.\nFor my concern I'm using simple node script via npm scripts when my needs are just a bit too complicated. Maybe you should do the same.\n. I'm dropping gulp too. Example here https://github.com/MoOx/frontend-hot-starterkit\n. webpack is not a task runner, it mainly replace browserify.\n. Indeed. But gulp is \"just\" a task runner (that can be used to handle your own build tool).\n. I'm tired of having to fix/create gulp plugins ^^\n. I only use cssnext-loader & I won't have to do PR (I own it lol). But you are right. That being said, I try to have minimal dependency on each tool whenever I can.\n. No cli tool should override a file without a specific option so postcss-cli test.css should just output to stdout\nHow do you want to handle plugin options?\nWhat about -p plugin1={json:option} -p plugin2 (I already saw a bunch of cli tool allowing a same option flag multiple times).\n. .postcssrc :D\nAnyway I think I won't use a cli tool for postcss since I already got cssnext api & cli that suit my needs :p\n. Stuff like pleeease or cssnext are opinionated postcss instances with plugins already registered. Not what people want in this thread.\n. require(configFile) offer natively js & json support ;)\n. +1\n. This should not be in core. Lot's of people using vanilla CSS don't need mixins anymore (bem ftw).\nBtw, you should probably more use CSS templating that trying to create a new syntax like Sass or Less did...\n. @ai your example with @each should be done with a simple templating system.\nPostCSS should stick to a \"valid\" css syntax (eg: do not get specific code in it's core for something like @include).\nIf postcss can parse that\n``` css\n@mixin stuff (/.../) { / this line should be ok? /\n  /.../\n}\nselector {\n  +stuff: a b c; / sass like @include /\n}\n```\nit should be enough for you to continue outside postcss core :)\nFor nesting, postcss will eventually need to parse w3c draft about that http://tabatkins.github.io/specs/css-nesting/\n. We should totally not encourage this kind of usage of postcss.\nSass has for now 2 implementations, with one is pretty fast. We should not encourage new postcss users to do sass like stuff. It's just a matter of habits.\nSwitching to postcss to do write Sass code again looks really stupid to me.\nChaining sass with postcss is not a big deal for performance (if you use libsass).\nBy writing modular components, I surprised myself to never need any mixin (and I write quite a lot of CSS).\nAnd if I need to generate some code, I'll use some simple templating depending on the programming language I can use on my backend/dev env.\nWhat most users need is a good & coherent methodology, not just mixins & placeholder.\nThis should totally not encouraged.\nThat being said, if postcss do not add non CSS stuff in it's core, I don't care what community does with it ^^.\nI think we should just teach people how to write modular code instead of giving them tools to write messy stuff.\n. Seriously, using a each loop for 4/6/8/10 colors looks like overkill to me.\n``` css\n.icon.is-twitter {color: #0000aa}\n.icon.is-twitter:hover {color: #0000ff}\n.icon.is-youtube {color: #aa0000}\n.icon.is-youtube:hover {color: #ff0000}\n```\nThis code is simple, easy enough to work on. Noob can interact. It's native. No need for anything else to understand/debug.\nNote: I don't hesitate to write single line block when I get only one property involved\nFor placeholder/extend, I just use class=\"\".\nCSS is not a programming language. It's a language used to describe. Reading it should be easy.\n. Here is another maybe more maintainable snippet that is easy to read.\n``` css\n:root {\n  --color-twitter:  #0000aa\n  --color-youtube:  #aa0000\n}\n.icon.is-twitter {color: var(--color-twitter)}\n.icon.is-twitter:hover {color: color(var(--color-twitter) b(+10%))}\n.icon.is-youtube {color: var(--color-youtube)}\n.icon.is-youtube:hover {color: color(var(--color-youtube) b(+10%))}\n```\nBut I prefer simplicity of the code without var.\nAnd now that inline svg can be used, we might integrate color in them directly :p\n. Oups.\n. case 1 don't need a mixin syntax. postcss plugins can do that already (clearfix example). \n. for case 3, nesting will probably be enough most of the time :p\n. When custom props will work everywhere (or if you write a client side polyfill, not a \"simple\" transformation), you will be able to write this\n``` css\n.is-twitter {--color: blue}\n.is-youtube {--color: red}\n.is-twitter,\n.is-youtube {\n  color: var(--color);\n  {\n    &:hover {color: color(var(--color) b(+10%))}\n    &:active {color: color(var(--color) w(+10%))}\n  }\n}\n```\nBut for now I prefer to stick with a few repetitive lines, it's never a big deal to edit in vim (even for 10*3 lines) ;)\n. Note: We should not care about \"win\" over developers. We should not add things \"just\" to appeal.\nWhen I develop something I care about myself first. That's how to make good project.\nBtw \"find valuable in real experience\" is just a matter of habits :p\nBut I get your point. Anyway it will be done outside postcss core since postcss will support custom parsers from what @ai said. So not sure this should be discussed here anymore :)\n. What about this\n``` css\n@mixin name(arg: default, arg2: default2) { / or -mixin-name() directly/\n  thing: -mixin-var(arg)\n  stuff: one two, -mixin-var(arg2);\n  { / tabatkins nesting proposal, this will be fun to implement :/ /\n    & {\n       /... /\n    }\n}\n.usage {\n  -mixin-name: arg1, arg2;\n  -mixin-name: auto; / no arg /\n}\n```\nAbout parsing order and stuff, you will need to do 2 pass like for custom props: 1 to read all mixins, one to execute all mixin replacement (to follow the CSS spirit: we can override stuff due to the cascade).\nNote about the -mixin-* (mixin usage) & -mixin-var: there will never be at the same place (one as prop name, the other as value) so it should not be a big deal to handle that.\nThis might look verbose, but at least it can be clear :)\n. I don't think we should use anything related to css spec if it's not to make a transpiler (like we are doing for some modules)\n. mixin & extend/placeholder are different things.\nWe should wait a little before doing anything, it's not even an unofficial css draft.\n@ai if you go with the last syntax you offer, I will just ask for one think: handle nesting with current draft specs, instead of the simple nesting. Everything will win something in this case :)\nYou will need to be careful with your simple vars plugin to not handle the $var in the mixin (since it's need to be done during mixin processing)\n. This seems like a dangerous game.\nIf I write a plugin simple that use one method. Let's say this method work with 1.x and with all new version and even the latest not released yet (it's possible, if you rely on a \"stable\" method).\nNow we have another one that will stop working with the upcoming release.\nPlugins will never contains enough informations if they work or not with the latest release.\nYou can say it works between X and Y, but you can't know when this will stop working, because you never know in advance what will be broken.\nI think instead of wasting energy and time on this issue, we should really focus on offering a stable API.\n. We are going to see this message all the times, cause plugins will not always have the exact same version number. No ?\n. Ok I see you tested the major version number only. Nice.\n. I not sure why you are recreating lot of sass stuff with postcss. It's a weird approch.\nEven if postcss can parse not really valid CSS, it should not be used for that (IMO).\nImporting non css resource is invalid.\nCSS Sprites are hack that looks outdated (to me) + hard to maintain (especially with hdpi & non hdpi screens).\ndatauri seems a easier approach (and some plugin are already doing that).\n. Ouch. Mhtml don't work on IE6 ? :/\n. Getting the same issue with 4.0.2\n/.../import/node_modules/tape/index.js:75\n        throw err\n              ^\nTypeError: Cannot read property 'parent' of undefined\n    at /.../import/node_modules/postcss/lib/node.js:361:31\n    at /.../import/node_modules/postcss/lib/container.js:155:24\n    at Root.each (/.../import/node_modules/postcss/lib/container.js:128:20)\n    at Root.eachInside (/.../import/node_modules/postcss/lib/container.js:154:21)\n    at AtRule.style (/.../import/node_modules/postcss/lib/node.js:359:16)\n    at AtRule.style (/.../import/node_modules/postcss/lib/node.js:439:31)\n    at AtRule.stringifyBlock (/.../import/node_modules/postcss/lib/container.js:65:27)\n    at AtRule.stringify (/.../import/node_modules/postcss/lib/at-rule.js:73:16)\n    at Root.stringifyContent (/.../import/node_modules/postcss/lib/container.js:53:25)\n    at Root.stringify (/.../import/node_modules/postcss/lib/root.js:109:14)\n``\n. Well nevermind, it seems my node_modules/postcss was weird.\nClosing for now.\n. I get your point, but according to what postcss does during the cloning process (cleaning all whitespace stuff), I am avoiding using cloning for postcss-import, to keep code as close the the original one.\nSo without considering the real need here, the issue is simple enough in our brain to fix it the right way: insert should 1) remove from current parent 2) insert as in the requested place.\nCurrent behavior is more a copy (that affect some properties) than an simple insert.\n. Nope. move use insert, insert uses normalize, normalize uses clone.\n. Insert should detach from current parent + insert, and it should be able to do so, since every node as a parent property. Right? \n. Obviously, an item with no parent will not need to be detached.\n. yep.\nWe can provide insertBefore & create copyBefore that does what insert does right now.\n. It seems it's also affecting \\n between rules & ; when there is one node.\nIt's annoying when you do some test for plugins :(\n. You can also use\n- postcss-color-function: color(#000 a(50%))\n- postcss-hex-alpha: #0008 or #fff8, black or white with alpha to 50%. Less chars.\nBtw: http://ianstormtaylor.com/design-tip-never-use-black/ and I think the same applies to white (not recommanded to use #fff). That said, alpha should affect that.\n. Any link to the spec ?\n. I don't think they will will make a spec with mixed base 16 and base 10 number. This is so confusing.\n. ...\nWe should totally not encourage  non standard stuff for designers. They already have difficulties by working in modern complex web apps & workflows.\n. \ud83d\ude31\n. I think there is enough plugin that might be used as a boilerplate.\nYou can check postcss-import for example that even have appveyor integration.\n. gulp is already too big for such a simpler process, don't use a tank please :D\n. I see this as a non breaking enhancement to postcss. So css should still be what it can be. A partial output is better than no output at all.\n- Unrecoverable error (from parsing or plugin) are very likely to throw exception. This kind of errors are not going to use errors/warnings stack.\n- A plugin can notify an error to say \"I won't do my job\" or something like \"You used an non recommanded syntax\". This can be considered as a recoverable error.\n- A plugin can notify a warning just to say \"You can do better than that\" or \"Hey this is deprecated, please upgrade your code asap\".\nUsing the errors and warnings stack should not break the process. We can see that as just a way to notify some messages with a given severity.\nWe can even create just a \"stack\" of message, and we can allow people to just provide a severity flag (PostCSS.ERROR, PostCSS.WARN, PostCSS.LOG).\nA stack can be an array like this\n``` js\n[{\n    filename: \"/whatever.css\"\n    line: 1,\n    column: 23,\n    source: [Object] // related source if message send from a node\n    severity: 0, // PostCSS.LOG,\n    origin: \"plugin-name\",\n    id: \"sort of uniq & short id\",\n    message: \"This is a message dude!\"\n},\n{ /.../ } //...\n]\nPlugins like postcss-loader or gulp-postcss might be able to do what they want with that. We can imagine a option (callback) to postcss that would handle the stack when process is done, that would allow tools to show/save or do whatever they whan with those messages. By default we can provide a simple GNU like output\n```\n/filename:1:23: plugin-name ERROR: This is a message dude (\"uniqid\")\n```\nOther tools like a linter or wrapper might easily be able to provide enhanced output, including source of the error.\n```\n. - unrecoverable error: BOOM YOU BREAK EVERYTHING, css is not going to be ok (this is not part of the stack & should be an exception thrown)\n- unimportant error: plugin won't do his job correctly, but other plugins can continue, css can be incomplete but valid\n- warning: plugin is not happy and tells you (eg: depreciation notice, linter, etc)\nBut I understand that might me confusing. That's why I mention a simple message stack with severity in each message. We can also imagine a simple log helper (to debug?)\n. By default, maybe we should not do anything & let tool handle the result.messages array themselve.\nCli tool might want to do simple console.log, other tool will do what they want to suit their workflow (gulp: console.log, rails: no idea lol).\n. What I want to offer here is a new feature that don't have any equivalent.\nFor now, we don't have anything and some plugin are already doing console.log that nobody see.\nIt's especially boring in a webpack workflow for example (because webpack dev server output a lot of thing, and \"simple\" console.log are mixed in a huge output - that said, it offers a nice way to emit messages that will be outputed at the end of build so user can see them).\nI think it's a must have to provide a way so plugins can communicate with users in a normalized way. Using a simple result.messages array seems better than nothing.\nWith this new API, cli & wrapper might want to do whatever they want with the messages array (cli: console.log in an appropriate moment, wrapper: use corresponding api to show the messages)\n. It's up to the plugin to decide if they want to throw or just notify. Plugins can already throw exceptions.\nI think we should focus on a way to provide a mecanism so plugins can communicate with users.\nWe should not care plugin will use error, warnings, simple logs... We should just provide a generic way to returns message with a given type (severity can be PostCSSMessage.ERROR, PostCSSMessage.WARN, PostCSSMessage.LOG or other I don't see yet).\nThat's why I think result.messages seems more relevant than results.warnings or .errors.\n. I can do something to help.\nWe need to decide how we can register messages.\nI think we should offer a way to \n- register a message not related to a node (directly from postcss instance, so maybe we should provide to plugin a 2nd parameter after the root node)\n- register a message directly from a node via a simple node.message() (and do not change node.error() that throw)\nWe should also think about the message object. I check eslint and came with that\njs\n{\n    filename: \"/whatever.css\"\n    line: 1,\n    column: 23,\n    source: [Object] // related source if message send from a node\n    severity: 0, // PostCSS.LOG,\n    origin: \"plugin-name\",\n    id: \"sort of uniq & short id\",\n    message: \"This is a message dude!\"\n}\nWhat do you think about that?\nMaybe plugins should be able to define the origin slug only once in the definition of the plugin ?\nSomething like plugin.name ?\nThe id should be a uniq key (in the scope of the plugin, so for postcss a id is \"plugin origin+id\").\n. A simple key to define a message. Message can be updated but the key might helps tools to adjust behavior according to those key (eg: ignore some messages).\n. yep :)\n. We should provide postcss instance as a second parameter to the plugin functions. That will be flexible enough to avoid changing plugin function signature later.\n. Like I said many times, I think it's not just about warning. You should be able to define different type of severity.\nWe should also offer an API on processor instance directly so different plugins might specify a same origin (eg: stylelint will use many plugins but origin will be the same). Also we should be able to add data with the message.\nSo here are some idea that I would love to see\n``` js\nvar severity = require(\"postcss/messages/severity\")\nprocessor.message(\"text message\", {origin: \"stylelint\", severity: severity.INFO, source: node.source, customData: \"...\", })\n// and with one arg only\nprocessor.message({origin: \"stylelint\",  message: \"text message\", customData: \"...\", severity: severity.WARNING})\nprocessor.message(\"text message\"}) // severity: severity.INFO by default\n// at node level\nnode.message(...) // same thing without the need for node and/or source\n```\nI think the origin from the plugin name is a good idea but it should be overwritable.\nAlso, I think we should support custom data, that will make things flexible. id will not make sense for common usage and might be considered as a custom data.\nA message should have at least: text + origin. Other thing should be optional (source, severity, related node...)\nWhy do you think about that ?\n. INFO, WARNING, ERROR are enough for a start. People will still be able to provide custom severity value.\nWe can use something like keymirror for those types.\n. There is 2 kind of errors:\n- unrecoverable errors (mostly parsing error)\n- recoverable errors (a plugin doesn't work, but other can continue the routine since it doesn't break the entire process)\n. A plugin that doesn't work vs. a plugin that warn you for a deprecation notice for example.\n. You should take a look to eslint.\nA linter should not use an exit code nor throw an error. It should return an object with meta data that can be used by runners (cli, grunt/gulp/... plugins, webpack loaders etc) depending on what the user want.\n. I'm using this in some plugin https://github.com/MoOx/reduce-function-call but it's probably not enough :)\n. @ai +1 for this simple change already mentioned in #177\n. This seems enough.\njs\nmodule.exports = function (opts) {\n    // opts are options for plugin\n    return function (css, postcss) {\n        // css => ast\n        // postcss => instance with other plugins\n    }\n})\nJust add postcss as a second argument. No need to changes things again. I don't see any benefit on a register method.\n. The message format might expect an origin key.\nMultiples plugins can hace hte same origin (ex: a linter that use a plugin for each rule should have message from the same origin).\n. What the point of this ?\n. @kud is using cssnext\nBut...\n\nNot sure what is the fuck here :)\n. > clone and moveTo removes the code style\nThis is responsible for a lot of trouble recently with postcss-import :(\nMaybe I should just stop using postcss api in postcss-import in favor of raw manipulation...\nWhy don't you just create a copy() method with an optional argument to remove code style ?\nIt's not a clone if you copy + alter something.\n. > Tell me, what is a problem with cleaning code style variables in postcss-import\nThis bug\n+\nThe difficulties I encounter when upgrading to postcss 4 https://github.com/postcss/postcss-import/issues/16#issuecomment-71166687\nIf that just \"helpers\", make them simple & stupid. clone should clone, not clone + modify. This is more like a opinionated copy.\n. @kud fyi, postcss-import 5.0.2 ship a workaround to avoid this bug.\nPlease uninstall cssnext, reinstall and confirm me it's ok :)\n. I don't like a .before() since you already have a .before property.\nWe should stick with verbose and clear method names. Is one inserted before two or the opposite ?\nNo fucking idea :/\ntwo.insertBefore(one)\nThis make more sense to me but I'm not a pro to design api.\n. Wait for a draft.\n. @iamvdo From the mailing list\n\nThe properties are implemented as if they were turned into their\nequivalent transform functions, then prepended to the 'transform'\nproperty in TRS order (with the origins applied as pre/post translates\naround each one).  Thus, the 'perspective' property affects these\nproperties, and the 'transform' property itself simply applies after\nthese properties.\n\nHow are the examples in postcss-transform-shortcut differents in their behaviors?\nIt seems current specs are pretty empty about that.\n. Hum...\n\n\nThese three transforms have the unique property that, when applied\n  in the proper order, they look \"independent\".  That is, a translate\n  always moves the element left/right and top/down the specified amount,\n  rather than moving them along some rotated axis or by some multiplier\n  of the distance you specified.  A scale always scales the element\n  along its width/height, rather than doing less predictable squishing\n  along some rotated axis.  Other transform functions, like skew(), do\n  not have this property, and so are not being proposed as properties.\n. parent.removeChild(node) or detachChild(), and node.remove() or node.detach().\nMaybe detach is more clear cause node is not deleted in memory.\n. totally agree\n. Clean & stabilize please. So I do not have to update plugins all the times :)\n. jQuery is on of the worst API I know. Please don't mimic it. Having getter and setter in one method is just horrible and dangerous.\n. What if you append more than one node (I think we can, right)?\nThis will make the return of the function not really predictable.\nOr it should always return a node list ? Or append should only accept one node ? (or we should get appendNode and appendNodes method ?\n. Don't know, just askin question. append is just not verbose enough for me. Not clear enough.\nI don't like jQuery like API that allows ton of different behavior from a single method :/\n. If .append() only accept a node, so forget what I said on this thread :)\n. Why not. And with es6 arrow func, will be short to replace appended array :)\n. I understand you might want to do that, but with an argument or something... I just loose some hours of debug to find this.\n\n\nI am really sad to see that postcss api is doing too much magic things by default. Manipulating an AST is supposed to be low level api, not magic crazy stuff that can affect an entire ast.\n. Too much magic \ud83d\udca5\n. I do need to handle that since I am doing postcss-import. And if I don't use .before, I get non logic results.\nmove*, removeSelf, insertBefore all make unexpected results... (And this bug #184).\nSo I stopping using the api and go low level by manipulating array items. And it makes me sad. But right now, no other choice to avoid some weird behaviors.\n. I am a a plugin developer, and I need to control output, so before after and shit :)\n. I am replacing a @import by the content of the file. It simple, in theory.\nSo I have to concat the 2 before property to respect whitespace and new lines:\na.css\ncss\na{}\nb.css\n``` css\nb{}\n```\n``` css\n@import \"a.css\";\n@import \"b.css\";\n```\nshould give\n``` css\na{}\nb{}\n```\nAlso some are replaced (local import), some are moved to the top, and when I move a node, I detach it and reattach into the new location. Using removeSelf() affect before of the next sibling and that's totally unexpected.\nI can't use move, insert or any method supposed to be an helper because they end up by cloning stuff, and so loosing original code style, and even hacks #184 (so weird to consider that as code style, it's just not...). So I must play with array and manually update before prop.\n. Btw, it's also very hard to use manipulate array with each* methods because they execute callback while they are looping. So it's hard to play with mutable everywhere.\nI think instead, you should collect * type (atrule, decl etc) in a new array, then loop on this one instead. \nSo you don't have to maintain some indexes and original ast can be modified without breaking the current loop. Codebase will be reduced with this approch.\nSo hard for me to make a simple postcss-import codebase with current api behavior, and without it's not fun at all either cause I really can't use any of the api or I start to get \"unsynced\" behaviors :(\n. Who is doing that ?\nAnyway if I start a loop, I don't want it to be dynamic. I start a loop on a given state, not on a dynamic state that can affect my loop itself.\nRight now, using simply eachAtRule and detaching some node, change the loop itself and I loose some iteration on some \"non iterated on\" items.\nSo I end up with this to avoid unexpected dynamic side effects\n``` js\n  var imports = []\n  styles.eachAtRule(\"import\", function checkAtRule(atRule) {imports.push(atRule)})\n// here i know \"imports\" will not change\n  imports.forEach(function(atRule) {\n    // ...\n  })\n```\n. Check this commit https://github.com/postcss/postcss-import/commit/e985ca694a51ce88747b4e724de3bdcbc495c857\nThen here, https://github.com/postcss/postcss-import/blob/master/index.js#L81-L82 just use a simple loop instead of 2. Then check what append when you run test (you will understand pretty easily).\n. It not just code style. You should call that .whitespace.* or something. Or leave it as is cause it can contain hack like * or _ am i right ?\n. Also you should offer the ability to normalize but not by default. If someone want to do a 'normalize' he can do root.normalize() right ?\n. I mean that calling that codeStyle sound not a good idea at all. New lines and indentation are not just \"style\". In a way, it can be an important part of a node, depending on user pref and plugins objectives.\n. Why do you want to move this ? What the purpose of this change ?\n. > Raw seems fine to me.\n+1\n. Are the warnings going to be printed just once this time ? :)\n. We should be clear about the fact that no postcss plugin produce polyfills\nIt's a pre processing step (if you consider \"processing\" the moment where the browser interpret the CSS).\nI used \"transform\" & \"transpile\" words to avoid \"pre-processing\" since people usually think about Sass & friends.\nBut we are just doing the same thing with a parser limited to CSS syntax.\n. I've a bunch of modifications to offer too that I would submit when this PR gets merged.\n. Maybe instead of making huge PR, we should try to work on severals small PR, don't you think ?\n. Can you be happy with what I already put in the cssnext playground ? http://cssnext.github.io/cssnext-playground/\n. Transformation & transpilation are the same things http://en.wikipedia.org/wiki/Source-to-source_compiler\nYou should use have instead a plugins and a tools sections under transformation.\ncssnext & autoprefixer are tools for end user, ready to use, simple api.\nplugins on the other side, need a more (relative) complicated usage.\n. - Transformation (read + write)\n  - Fallbacks (cssnext, autoprefixer, and plugins for not implemented w3c  transformations...)\n  - Language extension (for non-transpilation stuff like mixins and extends)\n  - Optimization (single-charset, data-packer, mqpacker, minifiers, import, bye-bye)\n  - Shortcuts (easings, webp, size)\n  - Special cases (dumb name -- rtlcss, epub)\n- Analysis (read only)\n. Using the words \"w3c draft\" is kind of outdated already. For example Firefox already have custom properties... cssnext is like Autoprefixer for some css features and use (like Autoprefixer) a browsers option to enable/disable features if no need to transpile).\nIn a way, It's all about fallbacks. I just see cssnext has an autoprefixer on steroid :)\n. Autoprefixer and cssnext have the exact same goal, so they should belong in the same category, even if cssnext include Autoprefixer :)\nWhat about \"W3C CSS 4+ transpilers\"\n. lgtm\n. I think we should KISS for now.\n. I know there is not css 4. I just found that's an easy way to communicate the idea of \"future proof CSS based on new specs\" in 4 letters.\nAnyway, \"Future CSS syntax\" lgtm.\n. Lgtm: looks good to me :)\n. maybe postcss-* plugins should be on top of the other, the current state look weird (even if i understand it strictly alpha sorted)\n. exception, yes. Place before postcss-* plugin (to encourage postcss-* usage) and then the others. \n. We should encourage postcss-* prefix. By placing postcss-* first, we encourage postcss-* usage & people are most likely to create plugins prefixed too.\nIt's weird to read non prefixed, then prefixed, then non prefixed again. But maybe it's just me :)\n. Looks better :D\n. Why do you order plugins by stars ? You are going to maintain this list every week ?\n. What about\n\noffers you some accessibles APIs to play with it using plugins ?\n. The current README do not even mention an \"ecosystem\" in the first lines, cause that's the important part. Most users will just consume plugins.\n. Because new users you want to get are not likely to start using postcss with only custom plugins. Most of them are going to use the ecosystem (already existing plugins).\n. for the glob thing, an issue is already open https://github.com/postcss/postcss-import/issues/8\n. If you got a simple loop, you can still create vanilla css & ask postcss to parse it. Code would be more readable imo.\n. Something like this\n\njs\n  var catss = []\n  Object.keys(categories.colorList).forEach(function(c) {\n    catss.push(\".cat-\" + c + \"{border-top:1px solid \" + categories.colorListc][0] + \";border-bottom: 1px solid \" + categories.colorList[c][1] + \";}\")\n  })\n  css.append(postcss.parse(catss.join(\"\\n\")))\nI've to admit es5 is still shitty with string, but with es6 the code above can be cleaner:\njs\n  var colors = categories.colorList\n  css.append(postcss.parse(Object.keys(colors).map((c) => `\n  .cat-${c} {\n    border-top: 1px solid ${colors[c][0]};\n    border-bottom: 1px solid ${colors[c][1]};\n  }`).join(\"\\n\")))\n. Btw, maybe .append() already accept plain string, so you can do css.append(\"some{css:yeah}\"). \nI can't find anything in the API doc about that. So if not, that would be nice allow that. Don't you think @ai ?\n. We already discuss about that somewhere.\nIt's not better since stuff like custom props are level 1.\nWe should found another formula to express this idea\nHere is some ideas\n- \"Future-proof CSS\"\n- \"tomorrow CSS syntax\"\n- \"new CSS syntax\"\n. No need to remove that method imo. Faster and people might already use it.\n. I know you can deliver this and remove current api in a major release. Supporting a string is nice but since there is a parsing step, it seems legit to keep the object in order to avoid this step when its possible. Strings are convenient but its not the best & faster interface. Supporting both seems not a big deal.\nAnd this can avoid all plugins dev to change their code like right now...\n. +1\n. We can put it there https://stylelint.github.io/\n. I don't want X tools in my workflow, so yes, I will definitely integrate style & structure rules in stylelint (note: by default the linter will do nothing, you will need to enable the rules you want).\n. Yeah that's a pretty good idea. We might even add that into the core, as a debug option or something. Sound really good and easy to do after #177 !\nEnd users love this kind of things :)\n. We can offert a option which accept string | array of strings | bool to let the user choose which message he want to see. He could use message type to filter ?\n. > Separated arrays with clean semantic is better.\n- This will not allow custom types\n- This is not flexible\n. How is it difficult to explain you offer a message registry ?\nUser and developers should not use messages array directly, only via API.\n. We can totally get a simple messages array that is an array of class that extends Message class (like class WarningMessage extends Message). They get the same interface/api & everybody is happy.\nIt's easy to filter by instanceOf.\nBy having a single registry, we wont have to handle new/custom types differently if we offer a standard output in the console and/or in the css directly.\nEx: a linter might create some custom types & would be able to output all messages at the same time. If user add custom rules to the linter with custom types, nobody will have to edit anything to handle this new result#data.\nI don't see any benefit if we create multiple result#* array.\n. How is this a benefit ?\nYou can just output with console.warn if messages[*].type == \"warn\" (or PostCSS.messages.WARN or whatever we choose from the other issue to define the message API).\nI don't have any example because I wait to see if postcss will offer a serious api or not before thinking how to create a linter on top of postcss.\nHaving to deal with several arrays instead of an array that contains items that have different types (or severity flag) will be a blocker for me.\nAlso: lot's of tools that are/will use postcss won't just use console.* method directly. Gulp have is own utils for logging, webpack need to pass messages as callback (emitError/emitWarnings...). We need to offer a registry to store messages, users will have to deal with it. Offering a option like the topic of this issue (messages directly with the body:before hack) seems a good idea, but some other (eg: wepack users) will just want an emit() call.\nWe should offer a flexible & scalable solution. Not just an array that is throw via console.warn().\n. I think it's \"has been* finished\" in this case ;)\n. Cool. Can't wait to use this new API :)\n. postcss itself is \"just\" api + parser (engine)\ncssnext is babel equivalent https://twitter.com/AntJanus/status/571181130814242816\n. You cannot compare postcss to gulp. Lot of tools have their own ecosystem.\nPostcss (like rework) is just an engine that allow modular custom preprocessor (=> it's a big thing)\n. Found one short sentence to explain what is postcss & what is solve, and you should be good.\nExample: \"Make your own CSS pre-processor in a flash\" or \"Build your modular & fast preprocessor in a minute\"\n. Even before PostCSS era, lots of people were using BEM to avoid classic preproc and their mixins. I think there is already lots of resources about that.\n. I think minifier like csswring handle that already https://github.com/hail2u/node-csswring#removeallcomments\n. (it's a postcss plugin)\n. Good idea for a modular minifier.\nMaybe spltting csswring is a good idea ?\nWe should ask @hail2u \nIf you do many plugins, please use something more clear like postcss-minify-* ;)\n. just to let you know https://github.com/cssnext/cssnext/issues/81 ;)\n. Are you looking for this https://github.com/postcss/postcss-import ?\n. Do you want async to be sync ?!\n. Do you know that postcss-url already provide this feature ?\n. That's not the first time I saw a depreciation notice a hundreds of time. This already happened in the past.\nYou can just add a boolean flag to know if a notice has already been outputed or not. Like 2 lines of code\nInstead of \nif (condition) {\n  console.log(\"Depreciation notice!\")\n}\nyou can do \n```\nvar noticeHasBeenOutputed = false\nif (condition && !noticeHasBeenOutputed) {\n  console.log(\"Depreciation notice!\")\n  noticeHasBeenOutputed = true\n}\n```\nNot a big deal imo. And that would prevent me from opening an issue (keep in mind that most people will just don't say anything but won't be happy too)\n. Btw, if I update that right now, people will all need to update postcss. So I need to do a major release for my plugin in order to respect semver.\n. You can release that as a patch so people won't have to udpate everything asap.\n. Even better. Thanks.\n. Nice module !\nI would call this module postcss-reduce-color to be clear about what it does :)\n. Or add a TOC like I did for cssnext ;)\nLot's of things in the README are cool. Especially when you are offline with just your node_modules/* :D\n. TOC are not a hack. If get TOC in every book that exist. When you have a lot of content, TOC are just an easy starting point to quickly search for information.\nI understand the fact that you can reduce the text, but do not compare shorter text to the purpose of a TOC :)\n. cssnext can already be consumed as a postcss plugin.\n. This release was indeed containing a breaking change: https://github.com/postcss/postcss-import/commit/9fefc4fe92eea46287d7d9d2837353a046313089\nEven if minor (undocumented) breaking changes, it's still a breaking change.\nPlease next time, in doubt, use a major bump.\n. If you don't call a property to generate lazyresult, you don't have the previous behavior: this looks like a breaking change to me :p\n. Checkout my commit guys https://github.com/postcss/postcss-import/commit/9fefc4fe92eea46287d7d9d2837353a046313089\nI didn't use anything private. I were just using .process() without calling a property on the result, so no lazyresult were generated (so it seems nothing was actually happening - all the fixed tests were not ending before my fix with update to 4.1).\nIn a way, looks like a minor breaking change to me. That said I agree it's an edge case because nobody (except maybe for test) should use .process() without actually using the result (sync or async).\n. My problem is fixed, but I was not sure when I opened the issue.\n. Reminder: I. didn't. use. any. private. things.\n. Before 4.1 that the snippet below were logging an exception\njs\ntry {\n  require(\"postcss\")()\n    .use(function(css) {\n        throw new Error(\"Oups\") \n    })\n    .process(\"a{}\")\n    // throw exception \"oups\" without the need of generating a lazyresult by calling .css or similar\n}\ncatch(e) {\n  console.log(\"Hey ho\", e)\n}\nWith 4.1 we need to generate the lazyresult (by calling .css for example) in order to get the exception throw. I conclude that in a way you have changed how things works under the hood that change the user interface in a way you didn't expected.\n. Note that I just update cssnext to 4.1 and get one test broken when I pass empty string https://github.com/cssnext/cssnext/blob/12ae1f320fd23f8590d880cad7f18d1bde889146/test/api.js#L19.\nI got undefined returned when calling .process(\"\").css :/\n. Well wait a minute, maybe I said some shit :D\n. My suggestion https://github.com/cssrecipes/grid\n:)\n. Just don't do some over engineering for lazy people that do not think just a minute or read some documentation.\nOne example of people that doesn't think more than 20 seconds: https://github.com/necolas/postcss-bem-linter/issues/37\n. Who decide when the css is valid or not ? :)\n. If anyone try to fix pseudo element after some minifications, he is weird.\nSomething like minifications will always be at the end, we do not need over engineering for that.\n\ndevelopers could unshift their selector modules to the top\n\nMaybe not at the top top of the top since stuff like import or some plugin that might generate selectors must be before. That would introduce very complicated shit to handle. Something that, as a plugin developer, I don't want to handle at all.\nThe user need to thinks a minute. Reminder: user is a developer.\n. Did anyone check how Babel handle plugin order? If not you should.\n. babel 6.0 will have nothing in it's core. With that in mind, think about that solution again.\n. Not really. You can specify some order using the group metadata. Example: https://github.com/babel/babel/blob/1ea835f42fae16369d741ab76c622f0d9fa3/packages/babel-plugin-undefined-to-void/src/index.js#L4\n. That's a pretty nice project you did. I should integrate it to replace the cssnext compress option.\n. I will switch the plugin I use for v2 https://github.com/cssnext/cssnext/issues/94\n. Get patchs ?\nAnd for dependencies, you don't use caret range, which is the recommanded method by npm (works great with semver).\n. Yep + for dev deps too.\nBtw, instead of having to update all dev deps at the same time by hand, with potential bugs from everywhere (at the same time), you might just want to use ^ too in order to discover potential bugs (due to some module not respecting semver) from time to time.\n. Nope. ^0.2 will not install 0.3 since 0.x are considered by semver as totally unstable API (that's why I try to never publish 0.x btw ^^)\nSee doc for caret range https://docs.npmjs.com/misc/semver#caret-ranges-1-2-3-0-2-5-0-0-4\n. ferver is a sweet idea but as said in the readme, you should not use it https://github.com/jonathanong/ferver/issues/5\n. That's the idea ! Non breaking added features are automatically downloaded :)\nHow cool is that ?\nThat's the power of semver !\nBreaking change : major bump (need update by hand)\nminor non breaking change (new feature): minor bump (^caret can handle it)\npatch: you already know :)\n. It looks good @ai, good job !\nSome comments:\n\nIf you wrote a polyfill for\n\nWe only wrote transpiler, using the term \"polyfill\" is wrong imo.\n\nFor example don\u2019t use fs.writeFile instead of fs.writeFileSync:\n\nI guess you want to say the opposite: \"For example, use fs.writeFile instead of fs.writeFileSync)\"\n\nMaintain a changelog\n\nWe should totally mention semver !\n\n4.4. postcssplugin keyword in package.json \n\nwhy not \"postcss-plugin\" ?\n. what about just \"postcss\" as a keyword ?!\n. The problem about the plugin usage confusion isn't new.\nNote that es6 will change the game since import must be at the top of the file.\nThat's why I asked for every plugin to use function so we use brace all the time.\nThere is plenty of example of this kind of issue since rework exist.\n...This old thread https://github.com/postcss/postcss/issues/149#issuecomment-71493152\nStill relevant.\nAll gulp plugin use braces, am I right ?\n. Reminders\n- https://github.com/ianstormtaylor/rework-color-function/issues/6\n- https://twitter.com/jongleberry/status/496552790416576513\n- https://github.com/postcss/postcss-color-function/issues/6\n  ...\n. I am interested in that too since for cssnext since there is a unofficial draft for that http://tabatkins.github.io/specs/css-extend-rule/ (related: https://github.com/cssnext/cssnext/issues/100)\n@morishitter I think you should not unpublish, but just make a major bump. That's enough. Unpublishing is bad and I am not even sure you can do that on npm now (version number that were used are still locked).\n. Maybe @tabatkins now since he is the author of this @extend draft :)\n. I am against this merged in postcss readme (for now): the README of this module mention mutliple times that it can do thing it cannot. It doesn't warn at all about dangerous things it create.\nI already found some issues and I am going to take the time to open issues on this repo when I get time.\nAlso, the safe feature this plugin try to support will be integrated in postcss-custom-properties and will properly warn users when they are at the limit of the specs by using postcss messages api.\nPS: it also use horribly slow regex https://github.com/MadLittleMods/postcss-css-variables/blob/master/index.js#L26 and postcss community try to avoid that at all cost.\nPS2: It also violate the MIT license (that should mention Nicolas Gallagher, TJ Holowaychuk and myself for fixtures)\n. I just take more than an hour to take a deeper look and open some issues.\nhttps://github.com/MadLittleMods/postcss-css-variables/issues\n@MadLittleMods What you are trying to promote for potentials users looks totally wrong/buggy :/\nFor license I don't care for real, but maybe @necolas & @tj don't (see https://github.com/postcss/postcss-custom-media/issues/3 ). It's the deal when you resuse someone work. Maybe you completely rewrite the code, but you completely keep all the ideas, even undocumented options. So it's just no fair for all people that have worked on this. \nRelated: http://stackoverflow.com/questions/26033524/licensing-under-mit-a-library-ive-rewritten-and-renamed-thats-already-under\n@ai limitation and bugs are totally not clear in the README, that's my point. @MadLittleMods write in the README things that are unsupported or completely buggy. See opened issues.\nAdding this in the \"Future CSS Syntax\" section seems wrong to me according to the bugs that will be generated by this module, over and over (only a client-side polyfill might handle custom props/vars with cascade correctly).\n. If you want to do something, please keep things simple, just put a warning and allow some plugins to tell postcss that they can be run multiples times. Don't do magic stuff that remove silently a plugin from the chain.\nYour example with autoprefixer and cssnext is bad because autoprefixer must be called after. So we should totally warn and not just remove the 2nd call silently.\n. I think it's really important to warn users. Automation is a important thing: user don't want to think (we all know that because we don't want to, and this will prevent some later support).\nSo we should maybe add some metadata to postcss.plugin() for plugin developers (they know better than anyone if a plugin must called before or after ?\npostcss.plugin(\"postcss-whatever\", function() {}, {runOnce: true})\nThis way when registering the same plugin twice, we can (in postcss core) detect that a plugin has been added more than once & add a warning.\nor the opposite postcss.plugin(\"postcss-whatever\", function() {}, {canRunMoreThanOnce: true}) because most plugin don't need to be used more than once (this will be a breaking change, so major postcss bump, but no need to edit ALL existing plugins - and I think only less than 10 make sense to be used more than once, so it looks like a good solution for me)\nOr maybe we \"just\" should provide an easy way so plugin dev can do the warning themselves:\n``` js\nfunction warn(plugin, result) {\n    if (result.process.plugins.indexOf(plugin) !== 0)) {\n        result.warn(\"postcss-import must be added before another plugin\")\n    }\n    if (result.process.plugins.indexOf(plugin) !== result.process.plugins.lastIndexOf(plugin))) {\n        result.warn(\"postcss-import should not be registered more than once\")\n    }\n}\npostcss.plugin(\"postcss-import\", function(options) {\n  const plugin = function(styles, result) {\n    warn(plugin, result)\n// ...\n\n}\n  return plugin\n})\n```\nHum I think in my last examples we can already be done without any change right ? (but that will require an update for ALL plugins)\n. You will get a warning that autoprefixer is used twice right ? So people will think like\n\nwait wat ? I just added cssnext, not autoprefixer... [going to think more than 2 secondes...] Ohhh MAYBE CSSNEXT IS USING AUTOPREFXIER ?!\n\nI placed on purpose autoprefixer before anything else here http://cssnext.io/features/\n. For you use case, you should disable it by hand (since you can do that, according to the fact that result provide the processor (and so plugins list) ?)\nI plan to add a warning into cssnext to warn user when they did not add cssnext in from of anything else (since it embed postcss-import that really need to be done before other stuff). This kind of plugin will be done \"by hand\".\nMaybe the warning can be \n\nYou (or a plugin pack) have added 'postcss-X'  more than once, and it's not necessary: you should consider review your plugins list\n. Without an init function, that's clear that we cannot implement what you talk in your previous comment.\n. a PostCSS what ?\nwebsite ? lang ? :)\n. postcss is able to consume module that have a .postcss property which is the case for this module. So it should works.\nProbably an issue from ember-cli-postcss.\n. Might make sense, especially for tools like cssnext or cssnano for standalone usage.\n. This should be easy to do right ? @ben-eb can you push it from cssnano in the core ?\n. I mean add this https://github.com/ben-eb/cssnano/blob/master/index.js#L69-L79 to all plugin registered with postcss.plugin()\n. I am very curious about that. It's clearly true that we can't really make fair comparison.\nEager to see some real benchs with comparable codebase.\n. Wow. Why the hell are you using cssnext (+why at the end) ?\ncssnext already do import and a lot of other stuffs.\n. Just to get an idea, how many file are you importing ? Cause postcss-import use fs.readFileSync, so it might be the source of the issue.\n. @ai No I can't write now, same for me I am super busy. But I am pretty sure the main problem is probably the sync read.\n@ben-eb Not sure how it's possible but maybe we can refactor it to make it using async reading.\n. Is it possible for libsass to do some async reading ?\n. Anyway, making postcss-import a real async plugin seems crazy because it might breaks lot of current process. But internal process might be done using async reading, that can be a start.\n. That's can be an enhancement. For now there is totally no cache for postcss-import. Might be worth adding that.\n. Notes:\n- async api is not enabled by default (for now), you have an option to enable async usage\n- fs read is not async yet (see https://github.com/postcss/postcss-import/issues/41)\n. I dunno.\n. Why just not the exact position ? \n. I have the feeling indeed that this must be built-in.\n. Users are developers. Index is very common (and clear), point... I have never seen this except for drawing stuff... position can be a solution.\n. I don't think so, but someone made a connext plugin for cssnext, might be a place too look https://github.com/cssnext/cssnext-connect\n. it's probably more a cssnext issue. Can you just disable it and see what are the results ?\nAlso if you have some time, can you take a look here an try to disable some features of cssnext ? http://cssnext.io/usage/#features\n. He does not according to the file he provided.\n. @aaronbushnell just pass an empty function instead. Should works, right @ai ?\n\nThere is any opened issue on cssnext https://github.com/cssnext/cssnext/issues/112 but I don't have time for this right now. I should take some soon.\n. Haha good catch @ben-eb !\n. So around 200ms for cssnext vs 1s for Stylus. Wow :)\n. I guess lot's of people doesn't use options for plugins. All cssnext users that I know are not using a single option. So you should probably support that, not a big deal to implement.\n. Since all package.json are already read and cached (eg for main property) i think tere is no extra fs access.\nAnyway i guess postcss runners may handle that themselves.\nImplementing a such feature as a lib might be a good idea to make this integration easy for all runners.\n. Also http://www.xanthir.com/b4U10\n. +1\nI am already doing shit for postcss-import.\n. This is not valid CSS.\nYou can do that in cssnext by using color(#fff a(.2)) (via postcss-color-function)\n. Looks great !\n+1 for this PR in the next minor release\n. That might helps you http://babeljs.io/docs/learn-es2015/\n. To follow babel move, I am ready to \"offer\" the work I did on cssnext website so it become the postcss website. cssnext should be a \"simple\" preset, and would not require a website.\nI will probably deprecate all cssnext-* plugins (grunt/gulp/etc) and same for the website, when postcss will have one in order to provide a good experience for cssnext user.\nIf you are interest to get cssnext website to start with something, please let me know.\n. Don't know what you plan to use for the engine, but I would be really happy to offer some support for my new engine Statinamic (react based static website generator, that also provide client side optimised navigation).\n. I think you should close this one in favor of #402\n. > @MoOx ask W3C first? You\u2019re using their name, as if they\u2019d approved the modules. \u201cPostcss-respectingStandards-*\u201d ? ;)\nSource: @remitbri https://twitter.com/remitbri/status/616939304825298944\n@tabatkins any thoughts on this ?\n. @ai The question is: is it ok to use postcss-w3c-*. Is this naming approved by the w3c ? :) (I guess that postcss-respectingStandards-* is a joke)\n. Like every \"approved\" thing, I guess we will need a \"postcss w3c\" police :) (hello gulp)\nAnd we could ask for people to submit they postcss plugin as \"w3c\" one (in the doc) so we can approve them, and then, move them into the org so they don't end up \"unmaintained\".\n. > I'm not fan of future syntax based modules\nOk then, it's not your problem :)\n\nyou want future syntax based modules but with maximum respect to the spec\n\nI write future-proof code, based on specs. It's up to me to choose my level of stability. And this helps to play with the new specifications.\n\nthey could want future syntax based modules but with their own addition or need, whatever the spec says\n\nI see two things here, the first one leads to this topic (future-proof code), the other thing is another topic (language extension) which have nothing to do in this thread. That's the beauty of postcss for some people, but it's not my cup of tea (it's a nice way to try things tho as I think some plugins might inspired w3c for new specs) ;)\n\nAs it's impossible to fully implement a CSS spec with PostCSS modules\n\nI don't agree. Modifying a color for example, is doable. \"custom props\" module is for now the only exception from what I know.\n\nMention that these modules are kind of \"certified\" by PostCSS, not by W3C?\n\nMost people don't even read docs. That's why I bring this discussion on the table. I would like people to have a quick way to distinguish future-proof, well maintained plugin (that respect the specification) and I think something in the name would really help. If you have some other ideas, please share :)\n. I agree that those spec compliant plugins must be in a place where more than one people might be able to maintain them. This looks like a requirement. That's why I propose:\n- plugins should need to be approved by the community\n- renamed with a potential prefix if we found it's accurate (postcss-w3c ? anyone have a better idea?)\n- moved to the postcss org.\nWe might create a specific team in postcss org in order to allow a group of people to interact with all this list of plugins.\n(@daleeidd It's not a good idea since custom props can be \"polyfilled\" without a client side script. Anyway, this won't be possible to give you this name since I will need to deprecate the package on npm so people see they need to use the renamed plugin instead.)\n. It seems it's not a good idea. I will make a PR to remove postcss-css-variables from \"future syntax\" section.\n. What do you mean ? What is broken ?\nIt depends on the editor you use and the grammar definition. For example using Atom, I don't have any major issue for highlighting.\n. Yeah it's a better idea to push example to grammar plugin to fix some use case. But well they will support only \"valid css syntax\" probably so...\n. The problem is the boundaries between what is css and what is not. postcss-nested syntax is not valid css... I have to admit it's \"a bit complicated\" to handle here (postcss org) should better push some issues to relevant place with some code snippet they should accept as css.\n. Most editor use a grammar definition, so you might want to make your own. Example https://github.com/atom/language-css/blob/master/grammars/css.cson\n. I guess it's my bad guys. I should not have updated postcss-import this way as a minor change. It seems it's all my fault. Meanwhile you should be able to:\n- uninstall postcss-import or the pack that use it (eg: cssnext or gulp-cssnext)\n- npm i -S postcss-import@6.0.0  (or -D)\n- reinstall your runner, the fixed (6.0.0) version or postcss-import should be used\n. FYI, I unpublished 6.1.0 in order to prevent this issue for too many people. I will release this async version of postcss-import as 7.0.0\n. I found a way to revert this, published as 6.1.1.\n. Nice !\n. Are you talking about some CSS only \"components\" like cssrecipes? https://github.com/cssrecipes\n. The problem is that for now, CSS is static. So compiling some CSS to npm provide a very limited usage.\nFor my css recipes, it's mentionned in the doc that it use future proof CSS. So I publish code that might works with myth, cssnext, suit-preprocessor...\nIt's even hard for react or others \"components\" to share js/html/css yet because some people (eg for React) use css modules, some other use inlines styles and some others use simple \"usable\" style (webpack feature).\nSo I don't really see how PostCSS can help or provide a solution about that. It's a global issue really not easy to solve yet. If all components were using standardised stuff (like w3c specs), but like you said, it depends on the plugins you are using...\n. webpack is the solution man :)\n. This is not likely to happen...\n. I have to admit that hexa(#hex, alpha) make also more sense to me.\nBut anyway, we are all going to end up using color() function ;) https://github.com/postcss/postcss-color-function\n. Also, it's seems to be a duplicate. postcss-url already does that (and many more).\n. postcss-url is a complete solution to handle assets. It can inline and fallback to rebase + copy for example.\n. No need for a callback. Where did you see that? Callback is just another way to handle custom adjustment. https://github.com/postcss/postcss-url#usage\n. Fact: I only use url: rebase method (for imports), since my assets are handled by webpack.\nThat said, this plugin is bundled in cssnext, so I think some others people can be interested by this feature. Did you check this PR? https://github.com/postcss/postcss-url/pull/38\nI think it's better to have one plugin to handle the same kind of stuff (in this case, rebase+copy), but if you plugin handle different uses cases (from what I see, not really), I don't have any problem with 2 plugins.\nI just think one is better to handle similar things.\n. For JavaScript, you have Babel http://babeljs.io/\n. Maybe it's time to add Appveyor here ? http://www.appveyor.com/\nI am using it for cssnext https://github.com/cssnext/cssnext/blob/master/appveyor.yml\n. appveyor can build PRs\n. I am in the country land, so not the better place for a small meetup :)\n. Like everybody, I use a prepublish hook that compile src to dist folder. package.json have the main section set to dist/index.js. That's all.\n. Don't forget this one https://github.com/cssnext/cssnext/blob/9aad8a94eaef5c73f3e925cc63ede6945403a520/package.json#L28 ;)\n. You should not try to handle install using github. Not all people are doing that.\nInstead you should cover 99% of usage (from npm release) and provide this instruction for rare people that want to use a branch http://cssnext.io/setup/#install-from-git\n. More major versions with less changes seems a good idea. \n. Lgtm\n. You are really doing weird stuff guys. Maybe you should consider instead making styles from JS.\nWhat you are doing seems really dirty...\n. Using a string? seriously?\nThe module that want to be a PoC should provide a JS polyfill directly. postcss runner should not handle js, this is just crazy to think it's a good idea.\n. You should more think about serious issue like #434 or #477 instead of discussing this crazy approch.\nOr find a way to make a bridge for PostCSS > inline styles, it's clearly a better approach and will provide a real (and smart) way to add polyfill directly into a JS env.\nPostCSS should work on a method to transform AST as JS object that can be easily consumed as inline styles. This way we work on client side the right way, just in JS, not with a sort of combo that would involve css + parser + runtime transformations (js) + injection of modifications into dom.\nElement queries are very easily doable from JS directly, without an overkill combo like I just listed.\n. Here you could do the exact same thing with inline styles. Just sayin'\n. But without a weird combo.\n. 1. Your code above will obviously not work without JS.\n2. No inlines styles are not slow. Where did you see that? Any bench? Would like think Facebook will use inline styles if they were slow?\n3. JS object are much powerful because you can use pretty much whatever you want (real JS variables, any library for color manipulation etc. And you can help yourself with some kind of abstraction https://github.com/bloodyowl/stile.\nInline styles are the complete opposite of a religious way.\nMost people are sayin \"you are crazy with your inline styles, please die\", like in the old times:\n- \"hey, the earth is not flat you know\"\n- \"this guy is crazy, we should burn him now\"\nAnyway, do whatever you want, I hope you will learn from your mistakes ;)\n. To be clear: inline styles can be done from the server side.\nThis perfs will obviously be improved when more and more people will work with inline styles ;)\nAlso, when you use universal JS (isomorphic), it's not a problem so the client can catch up when sync the UI.\n. Sidenote: I will need to think a bit more about what cssnext can become (a preset, but like I said, not easy to handle...) or if I should just deprecate it with a ready to use .postcssrc as a replacement :)\n. 2 packages on npm. Babel have all source code in one repo https://github.com/babel/babel/tree/master/packages (babel-cli is babel on npm and babel is babel-core on npm).\nAnd most people just npm install babel. That's an important point to think about. CLI by default.\nI was talking about something bigger than just a cli anyway.\nYou cannot blame postcss-cli creator. He is not responsible of anything except what he created that probably works for him the way it is. Here I am talking (and asking) about handling things in a better way, in order to provide a better and more complete UX.\n. Nobody thing these 2 things should be in core (cli + config file)?\n. FYI, it's almost done (as a separate module). I will push a PR soon to include the module + the module for .postcssrc\njs\n  config: [\n    \"-c, --config <file>\",\n    \"use the config file\",\n  ],\n  verbose: [\n    \"-V, --verbose\",\n    \"verbose output (only when --out-file or --out-dir are used)\",\n  ],\n  watcher: [\n    \"-w, --watch\",\n    \"watch the input files for changes\",\n  ],\n  outFile: [\n    \"-o, --out-file [out]\",\n    \"Compile all input files into a single file\",\n  ],\n  outDir: [\n    \"-d, --out-dir [out]\",\n    \"Compile an input directory of modules into an output directory\",\n  ],\nThere will be also -v/--version and -h/--help and it will support stdin/stdout so people can use unix pipe :)\n. .postcssrc will use this rc-loader https://github.com/MoOx/rc-loader that support YAML/JSON/Common JS.\nYeah we might also add support for some postcss related option like sourcemap. But not directly in the module I am writing ;)\n. @bdkjones the idea here is just to ADD (not replace) another way to use postcss (mainly the cli).\nAll serious tools have their own cli (eg: babel have one) and this help to tests and/or publish things.\n(Btw, more and more people are ditching task runners to use simpler workflow using npm scripts only.)\nSo having an official cli is a must have for me.\n.postcssrc will be another way to configure your postcss workflow. This means that if you switch from grunt to gulp, you won't have to update your task, just relpace the simple wrapper, without the need to adjust your configuration. Same thing here, all serious tools provide a way to configure using a file (babel does, eslint does, so many example out there). Obviously you will be able to NOT use this and configure like you currently does, using the JS api directly.\nSo here there is not breaking changes, just sugar.\n. Probably at the end of August or in the beginning of September. Should be a minor change (feature added, not a breaking change), so minor release should works.\n. Yeah, there is an opened issue for that https://github.com/MoOx/rc-loader/issues/1\n. @ai I plan to start working on a pr to integrate .postcssrc/package.json section in order to provide a nice and easy migration for cssnext to full postcss workflow, is this still welcome? Could be released as a minor release.\n. Nobody use postcss-use (you can see download on npm) and postcss-use still require some javascript config. Configuration on a project via javascript is used by everyone, lot's of people share variables with css and javascript using config etc. I think we should integrate this in the core like all serious tools does (babel, eslint etc, they all try to load config from fs).\n. I can't provide a good developer experience migration if I don't have this kind of easy config. I need to deprecate cssnext, and in order to provide a nice transition, I think a solution in core is required. Maybe we should think to handle the issue like babel does by having a monorepo with a single version to provide multiple package: postcss (core + config loader + cli), postcss-core etc... https://github.com/babel/babel/tree/master/packages (in this page, you will see babel-cli which is babel on npm and babel which is babel-core on npm).\n. We must provide a serious solution for people in order to easily share config. gulp/grunt files are not a serious solution, and not easy to share accorss runners...\n. I think we should does what is working for everyone: a file or section in package.json loaded during new Postcss(). All runners can benefit from this. It's how eslint does for example and it's great for editor plugins for example.\nWe can make the config file to support commonjs like webpack, sure.\npostcss-use is just a hack and still require some javascript configuration... The proof is that nobody use it. Nobody want to configure a tool via css syntax.\n. I think allowing a tool configuration in postcss core is a really bad idea, bad design imo.\nFor the second question, that's why I think we should do like do like babel a monorepo to host (and simplify postcss ( config load + cli) and postcss-core (light) packages. Maybe we can also host postcss-parser etc which postcss core depends on.\n. It's not implicit since you need to write your (tool) configuration (postcss plugin list/options etc).\n. The idea is simple: you remove your current plugin list declaration from you runner config (eg: remove of gulpfile) to move it to a dedicated file or section in you package.json. We can support dynamic loading via string.\nOrder of loading:\nnew Postcss() will look for .postcssrc (or package.json sectoin) and will (auto)load the config, then runner config, then @use. In this order\nBabel(-core) have more that 1.5 millons download, so we can consider it's a good tool which offer a nice (solid) \"api\"  (loading config from a file is a common practise). Babel have the exact same issue to resolve: take js, plugins list, transform js.\n. We can consider loading config only before process(), if postcss have no plugin defined. Problem solved.\n. My solution (load config only if \"plugins\" list is empty) at the start of the  process() solves the conflict problem. It will only be a breaking change for people that don't use plugins, and I guess nobody process css with postcss without any plugins :)\n. Here is a simple way to handle things:\nAll process() opts will be supported. We need to add one option \"plugins\" in the process() options in order to provide this kind of config:\npackage.json\njs\n{\n  \"postcss\": {\n    \"parser\": \"postcss-scss\",\n    \"stringifier\": \"whatever\",\n    \"from\": \"input.css\",\n    \"to\": \"app.css\",\n    \"map\": { inline: false },\n    \"plugins\": {\n      \"postcss-import\": {\n          \"root\": \"src/css\"\n      },\n      \"postcss-cssnext\": {\n        \"browsers\": \"last 2 versions\",\n        \"features\": {\n          \"customProperties\": {\n            \"variables\": {\n              \"default-font\": \"Helvetica, Arial\"\n            }\n          },\n          \"customMedia\": {\n            \"extensions\": {\n              \"small\": \"min-width: 30rem\",\n              \"large\": \"min-width: 60rem\"\n            }\n          }\n        }\n     }\n  }\n}\n. I am not sure some people are mixing file extensions (multiple css preprocessors) in one project. In this case we are in an edge case, so people will go for classic config in runners (eg: two gulp-postcss tasks with differents configs).\n. Here is how babel (and others) handle things: \nhttps://github.com/babel/babel/blob/b5bd7b1c92e148c2161f05841601f97eb774270d/packages/babel/src/transformation/file/options/option-manager.js#L121-L131\nread from source dirname then all parents folder for .postcssrc, then package.json section. When all are loader, we merge in the opposite order (to get a logical config: the closer the config is from your current file, the more important is the config). rc. See \"standards\" doc https://github.com/dominictarr/rc#standards\n\nAll configuration sources that were found will be flattened into one object, so that sources earlier in this list override later ones.\n\nWe can provide a way like other does to stop reading in parent dir: support a \"root\" option in the config to say \"it's the last config you should load, stop right now\" :)\nWe can also add a postcssrc option in process() to disable all the configuration being loaded from fs (like babel does https://github.com/babel/babel/blob/b5bd7b1c92e148c2161f05841601f97eb774270d/packages/babel/src/transformation/file/options/option-manager.js#L181)\n. Cool, I will work on it asap if you are ok.\n. To be honest, I didn't start anything :/\n. Sounds like a plan. If nobody wants to handle that before me, I will probably try to work on it soon. I need to go forward with cssnext current state.\n. I think I will start on that using cosmiconfig. @ai do you think that the way cosmiconfig load the cli (async, by returning a promise) can be an issue with current sync possibilities?\n. postcss still have a sync api right?\n. You can still do postcss(plugins).process(css, opts).css ?\n. So the way cosmiconfig send back the config might be an issue...\n. It can be a problem to have a promise when you are in an synchronous code flow. Me think.\nI will see :)\n. It\u2019s a good idea to split packages on npm, but you should keep all the code base in the same repo, in order to make maintenance more easy. Rework split in the past and it was a pain to update all packages\u2026\nBabel is also having multiple packages, but all code in in one repo.\n. I think postcss-url is doing too much things https://github.com/postcss/postcss-url/issues/43#issuecomment-133676539\n. If a \"display: inline-block\" added/removed change the behavior, it's likely to be a plugin issue, not a cssnext-loader issue.\n. This should work (with postcss-cssnext)\njs\n  postcss: function() {\n    return [\n      postcssCssnext({\n        features: {\n          customProperties: {\n            variables: {/*...*/}\n          }\n        }\n      })\n    ]\n  }\n. Now it seems it's an issue related to cssnano or a submodule poke @ben-eb \n. You mean that you want all existing plugin to be updated before doing anything?\nYou are not likely to ship this changes in a near future, and most plugins will not be updated right after it, so maybe we should do something now until the entire ecosystem has been updated?\n. Current problem example:\nplugin list: autoprefixer, postcss-import\nautoprefixer is executed before other transformation (so inlined import), so inlined import rules won't be prefixed.\nThis is a really common mistake.\n. A note is wrote in bold in the very first start of the README. But nobody read that. Well I will try to add a warning (not using the postcss api since most people don't have the correct reporter)... But that's kind of gross... Same thing for all plugin packs etc.\n. Thanks but no. This is not a fix, this is a workaround... :p\n. This is a private plugin.\n. maintainer != contributor ;)\nAnyway, contributors are always welcome ! \n. custom media hasn't been removed from spec. It has been delayed. But yeah things like a stage option could be nice. This should be discussed on cssnext repo :)\n. There is already an issue about that. Best thing to be involved in cssnext is start to contribute to existing issues https://github.com/MoOx/postcss-cssnext/issues\n. smart-import is a fork (unforked). This person should have asked or make PR to postcss-import imo.\nAgain, you talk like if there is a community, but there is mostly \"just users\" as this issue prove it https://github.com/postcss/postcss-import/issues/210 (still no response, or maybe more \"no actions\"...)\n. or just make a PR to postcss-import. Looks more legit.\n. > you are looking for new maintainer, isn't you? In this case you should increase developer enthusiasm by giving more responsibilities. Unfortunately, non-strict instructions (what PR, for example) kills enthusiasm. For my experience, this it could be a main reason why you still didn't find a new maintainer.\nI am not looking for anything, the community does. I stopped actively maintaining it because I don't actively use it. For the same reason I am not spending time on \"looking for\" people to take the lead.\nFYI, as a \"user\", when I see a project is not actively developed, I start to answer to issues, make some PRs to get trust of owner/maintainers (even if not active), then I ask for right to collab/publish. That's own open source work right? I should not have to cry for help or tell people what to do.\nI am more a \"if you want to help, all contributions are welcome\". Then people start to help by themselves and ask for instructions. This scenario is currently happening with the project I am actively developing (Phenomic) and we are now 6 maintainers (and I never asked some help me, people wanted to, asked how to help on specific issues directly...)\nSo you current plan is nice, you can add however you want to postcss-import since you have the correct right for it. If someone need some npm rights, just poke me with your npm username.\nHere are some instructions tho https://github.com/postcss/postcss-import/issues/210#issuecomment-255721659\n. PR are always welcome. A good PR will be enough so I can give all required rights to the right people :)\n. @ai the idea is not be be a good maintainer or not. The idea is to care about the module and the goal of the module. postcss-\"smart\"-import is just postcss-import with less and others features that should definitely not be in a module that inline @import. So you should better fix postcss-import issues first, then provide (like you said) a good UX with high level package that rely on postcss-import, like @TrySound tried to do with postcss-easy-import.\n@swernerx said itself:\n\nThen I removed all the media query handling for imports. PostCSS Import claims it follows the CSS spec here. I don't care about that.\n. Maybe you should just wait for a response from @swernerx before assigning him... He said he is not interested in the core idea of postcss-import (which mostly stick to following the css specs) and he has larger goals (but without following the entire specs, since he removed support for mq...). @swernerx correct me if I am wrong :)\nBut right now postcss-import doesn\u2019t have a maintainer. There is very important dependency message issue and you didn\u2019t even ask for PR.\n\nIf this was really important, everybody were adding stupid \"+1\" in the issue, so it's probably not that important haha (just kidding).\nI am still taking time to handle the mess of the repo, trying to help you, right here, right now. Because I am concerned about users even if I don't push any update to the actual package.\nI totally understand your concern about simplicity etc. I just don't want people to write code that won't work in browser natively, but maybe I should stop bothering you with this.\n@RyanZim seems to be the correct person to give full power because it's the only person that tried to investigate on the past few months.\nIf you really want the npm name, just ask for this explicitly, but I would prefer to give rights to a person actually working to make things better, even if he is adding non standard things, instead of not asking for help or not opening discussions, because that's how open source works (right?)\n. He already have all the rights and started to check and respond to issues.\n. haha I was sure someone will ask for that :)\nNot required, but it probably helps to understand the code.\n. :(\n. I think this 2 thinks should have 2 paragraphs.\n. But maybe a really short version is a good idea.\n. Maybe because @jonathantneal is not aware of this es feature (babel use used and add support for es spread operator)\n. ",
    "yisibl": ":100: \n. float.parent.each It should be decl.parent.each ?\nI think it is an example of too little. For example, how to increase the number of declarations?\ninput:\ncss\n.foo {\n  display: inline-block;\n}\noutput\ncss\n.foo {\n  display: inline-block;\n  *display: inline;\n  *zoom: 1;\n}\n. Have you intend to write a separate wiki inside it?\n. What do you think how kind emmet independent scalable way?http://docs.emmet.io/customization/snippets/\nFor example:\njson\n\"snippets\": {\n  \"dib\": \"display: inline-block;\\n *display: inline; *zoom: 1;\"\n}\n. If there wiki that is really good, I want to write a CSS compression stuff, but do not know where to start, only to take a look at csswring.\n. I am now writing this:\njs\n  css.eachDecl(function(decl, i) {\n    if (decl.prop === 'display' && decl.value === 'inline-block') {\n      decl.parent.insertAfter(i, {\n        prop: '*zoom',\n        value: '1'\n      }).insertAfter(i, {\n        prop: '*display',\n        value: 'inline'\n      });\n    }\n  });\n. Indeed, when read with much prefix is not conducive to writing source code. I just think emmet's expansion mode very convenient, do not know if you can learn about?\n. In other words, I write no problem with .insertAfter().insertAfter() right?\n. @ai Please tell us about 3.0 new features!\n. Great, the first increase in a document like this it!\nhttps://github.com/reworkcss/css#ast\n. Sorry if the source file already exists in this, how to judge better?\ncss\n.foo {\n  display: inline-block;\n  *display: inline;\n  *zoom: 1;\n}\nThe grammar of reworkcssseems easier.\njs\n  if ('inline-block' == type) {\n    return {\n      'display': 'inline-block',\n      'zoom': '1',\n      '*display': 'inline'\n    }\n  }\nhttps://github.com/reworkcss/rework-mixins/blob/master/lib/display.js\n. Yeah, you can consider increasing the replaceProperty,  replaceValue and JQuery in replaceWith , replaceAll.\nI'm such a novice might need a more simple declaration or operating block. -_-|||\n. @MoOx \n. @MoOx Thank you very much, it seems that the only use of regular.\n. Help me to see there is no problem?\n``` js\n  // position: center mixin\n  css.eachRule(function(rule, i) {\n    var has1 = rule.some(function(i) {\n      return i.prop == 'width';\n    });\n    var has2 = rule.some(function(i) {\n      return i.prop == 'height';\n    });\n    var has3 = rule.some(function(i) {\n      return i.prop == 'position' && i.value == 'center';\n    });\n    if (has1 && has2 && has3) {\n      var widthValue, heightValue;\n      var reVALUE = /([.0-9]+)(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|dpi|dpcm|dppx|fr)/i;\n  rule.eachDecl(function(decl, i) {\n    if (decl.prop == 'width') {\n      matchWidth = decl.value.match(reVALUE);\n      widthValue = (-Number(matchWidth[1]) / 2) + matchWidth[2];\n    }\n\n    if (decl.prop == 'height') {\n      matchHeight = decl.value.match(reVALUE);\n      heightValue = (-Number(matchHeight[1]) / 2) + matchHeight[2];\n    }\n\n    if (decl.prop == 'position')\n      decl.value = 'absolute';\n  });\n\n  rule.append({\n    prop: 'margin-left',\n    value: widthValue\n  }).append({\n    prop: 'margin-top',\n    value: heightValue\n  }).append({\n    prop: 'top',\n    value: '50%'\n  }).append({\n    prop: 'left',\n    value: '50%'\n  });\n\n}\n\n});\n```\n. Well, it seems that this is not easy to achieve a mixin.\n. Emmet for sublime-text plugin can be achieved, so I do not know sublime-autoperfixer plugin can do this function.http://docs.emmet.io/actions/update-image-size/\n. Well, but if autoperfix not come out image-set () can only rely on editors to do the plugin.\nThank you so much program, I was doing a little tool based PostCSS, there will be some mixin and filter processing.\n. \n. +10086 :+1: \n. findProp +1\nWhat time to release?\n. Ok.\nWhat time to release 3.0?\nVery much in need of a new document!\n. In fact, I think if insertAfter = comment.after would be more convenient.How do you see?\n.clone () problem if you do not omit the semicolon is no problem.\n. Error:\nReferenceError: prop is not defined\n. Is there not about Node#next  in your document?\n. So, do you consider adding these two API( Node#next and Node#prev)?\n. Hurry to fix this problem, omitting the last a semicolon caused too much trouble, this should be handed over to the clean CSS to do.\n. Great! NB!\n. Inline comment +1\n. +1\nBut I don't know what time the need to use CLI?\n. +1\n. clearfix: 1 ?\nAbout placeholder\ninput:\n``` css\n@placeholder foo { \n  color: red;\n}\nbar {\nwidth: 10em;\n}\n.baz {\n  margin: 20px;\n  extend: foo,  selector(#bar);\n}\n```\noutput:\n``` css\nbar,\n.baz {\n  width: 10em;\n}\n.baz {\n  margin: 20px;\n  color: red;\n  width: 10em;\n}\n```\nAnd more: https://gist.github.com/yisibl/7bc319a39c85d32b7486\nhttp://dev.w3.org/csswg/css-extensions/\ncc @tabatkins @hax\n. DRY-ing Out Your Sass Mixins\n. +, _ is IE  hack.\n. Sass Mixins to Kickstart Your Project\n. Prefix has brought us a lot of trouble.\nI think if you must add a namespace to distinguish, can consider this way:\n``` css\n@custom-property clear {\n  value: fix;\n}\n@custom-property triangle {\n  value: [top | right | bottom | left]  ;\n}\n```\nhttp://dev.w3.org/csswg/css-extensions/?c=M%3BO%3DD#custom-property\n. http://www.slideshare.net/stubbornella/css-wish-list\nhttp://tabatkins.github.io/specs/css-extend-rule/ (@tabatkins )\n. In China also needs to be compatible with IE6.\n. Sometimes, we will also use iconfont.\n. @ai :+1: \n. @ai  Yes, I will develop this plugin.\ncorlor: #000 .5 to rgba(0, 0, 0, .5)\n. There is no spec, but we can send E-mail to www-style\n. Never mind, not all plugins demand is to think logically. Designers need to write.\n. Sorry, my English is bad, @ai has already said my idea.\nSpecification can not be divorced from reality.\n. In fact, we will copy the colors in the Photoshop, and then paste it into the CSS file. #rgb .alpha can facilitate the rapid adjustment.\n. @ai :heart: Too great!\n\nA hundred flowers bloom and a hundred schools.\n. Like this?\n\ninput:\ncss\n.foo {\n  size: 30px 90px;\n}\noutput:\ncss\n.foo {\n  width: 30px;\n  height: 90px;\n}\n. If there are auto values:\ncss\n.foo {\n  size: 30px auto;\n}\nWe can consider not output width or height.\ncss\n.foo {\n  width: 30px;\n}\n. @ai  Yeap, this is a painful problem. \n. I think this plugin has little significance, and also easy to cause confusion, destroyed the original semantic.\n. I like the 2 space indentation, you don't hit me.\nWe can add\n- readme.md boilerplate\n- test\n- .editorconfig https://github.com/postcss/postcss-custom-selectors/blob/master/.editorconfig\n- .travis.yml\n- Others\n. Great! \n. I don't like nested format.\n``` css\nmain {\ncolor: #fff;\n  background-color: #000; }\n```\n. @ai What do you think?\nI think this plugin should be officially completed.\n. Great! :ghost: \n. >  Other additions, like having a clearfix hidden in a CSS property, blend a little too well with the surrounding real CSS to be spotted by people who might not be so familiar with your way of creating CSS. It might be outright considered \u2026 harmful (it isn't, wink wink).\nhttps://medium.com/@ddprrt/postcss-misconceptions-faf5dc5038df\n. Playground +1\n. You can add the w3c prefix, but I don't like to long plugin names.I think all plugin names should be as short as possible.\n. Sublime Text: https://packagecontrol.io/packages/Syntax%20Highlighting%20for%20PostCSS\nAtom: https://atom.io/packages/language-postcss\n\n. So cool, Happy birthday :ghost: !\n. @ai I'm going to collect some photos of Chinese users.\n. Good idea!\n. In CSS Houdini we can do this:\njs\nregisterLayout('masonry', class {\n    static get inputProperties() {\n        return ['width', 'height']\n    }\n    static get childrenInputProperties() {\n        return ['x', 'y', 'position']\n    }\n    layout(children, constraintSpace, styleMap, breakToken) {\n        // Layout logic goes here.\n    }\n}\ncss\nbody {\n  display: layout('masonry');\n}\nhttps://www.smashingmagazine.com/author/philipwalton/\n. Chrome 53:\n\n\n\n. ",
    "magsout": "Very good job\n. > isn't it paradoxal when the first feature of post-css is to parse CSS?\n\ninventing a kind-of new language doesn't look good to me.\n\nTotally agree with @bloodyowl \n. IMHO atRule is perfect => camelCase..\n. > Also we should require in each plugin documentation:\nlink to spec\nlimitation if any\nlevel of stability (see cssnext/cssnext#100)\n:+1: \n\nI think new postcss-w3c- plugin will need to be approved by the community to be\nin the appropriate section in postcss readme/website.\n\n:+1: \nRename the plugins or not, no matter, the two ideas above are crucial to avoid lying that actually do the plugins\n. > CSS Modules looks like a best way to isolate widget. But what if other team will not use webpack. And of course, they didn\u2019t want to install some addition plugins to their builder.\nWhy didn't provide a dist version of code ? with css recipes we provide original source, but with one npm command, users that doesn't use cssnext in their workflow can launch : npm build and they can @import  css file without cssnext or anything else.\n. > Nobody thing these 2 things should be in core (cli + config file)?\n:+1: \nit's a very good idea.\n. :+1: \n. ",
    "andreypopp": ":rocket: :rocket: :rocket: \n. Oh, did I miss something?\n. I see: postcss safe parser.\nWell at least you can use highlighter :)\n. Ok, just a reminder that safe tokeniser isn't finished in this commit (some off-by-one errors with error reporting code).\n. ",
    "lionelB": "you guys rocks ! congrats @brainopia \n. ",
    "bassjobsen": "What about accepting a source map object as input?\nI also think it will be useful to have an option to switch between sourcesContent and reference the content.\n. @ai thanks for your quick response. I have seen that now.\n. ",
    "hail2u": "I think GNU style is for CLI programs, not for parser/library. This should be normalized to GNU style in autoprefixer CLI programs (with try...catch), not in PostCSS core.\nBut including filename is nice.\n. I didn't know that Rework's parser package returns GNU style message.\nI thought every parser package should throw Error with simple message and detailed properties like Esprima or current PostCSS. This message is for human, not for programs. So I think GNU style message does not fit in this case.\n. I didn't think about an interaction of error messages. It seems nice.\n. No problem.\n. I didn't know that. It seems PostCSS v2.x.x bug. Should stringifyRaw() return raw.value instead of raw.raw?\n. Thanks for your explanation. I'll implement that.\n. > it is very rare case\nAgreed.\n\nOr, we can put in _important only spaces, because anyway it will ends with !important.\n\nNo. CSS allows white spaces and comments between ! and important. decl._important should keep all of these for saving original CSS byte-to-byte.\n. In Grammer of CSS 2.1 says:\n\"!\"({w}|{comment})*{I}{M}{P}{O}{R}{T}{A}{N}{T}  {return IMPORTANT_SYM;}\n{w} means ([ \\t\\r\\n\\f]+)? and {comment} means any CSS comment.\nHowever, CSS Syntax Module 3 drops comments.\n. The decision is yours!\n. Is this same in comment.before, rule.semicolon and others that not mentioned in Comment Node, AtRule Node, Rule Node, and Declaration Node?\n. Understand. I check existence before modifying these properties.\n. Thanks! Works fine.\n. \ud83d\udc4d\n. CSS 2.1 spec says:\n```\nimport\n  : IMPORT_SYM S\n    [STRING|URI] S media_list? ';' S*\n@{I}{M}{P}{O}{R}{T} {return IMPORT_SYM;}\n```\nS* means 0 or more white spaces. And all current browsers can recognize this type of code.\n\nCan you wait until end of October?\n\nThis is a very minor bug, and workaround is already proposed. So, I can wait.\n. +1 to @lydell\n. I don't think checking version in PostCSS plugins/tools is good idea.\nPlugins/Tools have already clarified what version of PostCSS required to run via package.json dependencies. So, tools like gulp-postcss should look dependencies field when requiring PostCSS plugins/tools. This must be their job, not PostCSS.\n. Tools can retrieve package.json of installed package easily. Looking dependencies.postcss seems enough for me.\n``` javascript\nvar csswring = require('csswring');\nvar postcss = require('postcss');\nvar semver = require('semver');\nvar verPostcss = require('postcss/package.json').version;\nvar pkgCsswring = require('csswring/package.json');\nif (!semver.satisfies(verPostcss, pkgCsswring.dependencies.postcss)) {\n  // Show warnings and abort!\n}\n// Process if satisfy\n``\n. I can understand what you say, but providing version checking API ispeerDependencies` that was failed on npm. This API will fail on PostCSS too. I don't think you (or we) can provide a better solution for this type of problem.\nAlso I think gulp-postcss can get a list of installed PostCSS plugins/tools from project package.json using findup package. So, gulp-postcss can know PostCSS plugins/tools names that may require later.\n. Yes, my idea does not have any advantage for checking version. Forget about it for a moment.\nIf I'm not wrong, implementing this type of version checking API into PostCSS core looks like implementing a dependency management option to require() of Node.js. I think this should be implemented on tools (like npm) side not on core side.\nThat's the main reason why I can't agree.\n. Hmm... In PostCSS universe, I think \u201cthe host\u201d in isaacs comment is whatever-postcss thingy, not PostCSS framework itself.\nIf someone wants to call PostCSS plugins without a whatever-postcss thingy, (s)he can resolve dependencies via npm. In this situation, verifying version in PostCSS means nothing and wastes its time.\nIf someone wants to call PostCSS plugins with a whatever-postcss thingy, (s)he expects whatever-postcss resolves dependencies for him/her because (s)he doesn't install PostCSS directly. In this situation, verifying version in PostCSS will help whatever-postcss thingy very much, but this mismatches what users expect. That is why issues registers to gulp-postcss and autoprefixer-core project, not to PostCSS project, I think.\nAlso if PostCSS provides a public API for verifying version, it will require an extra code to whatever-postcss thingy or PostCSS plugins and this extra code will cause a code portability problem because it is tied to PostCSS interface. It's not bad, but not good also.\nThis is about an API design philosophy. Sorry for not-well-organized comment!\n. Thanks! I'll try to let PostCSS sets new white spaces.\n. - seems extraneous to me.\n. @ai Spaces can be used on keywords, but postcssplugin (like gulpplugin or gruntplugin) looks good to me.\n. If you rename postcss.atRule to postcss.atrule, you should rename eachAtRule container method to eachAtrule also.\n. Before renaming API, you should categorize which API is stable and which is not, I think (and want).\n. a.css:\n``` css\n@import 'b.css';\n.a {\n  color: red;\n}\n```\nb.css:\ncss\n.b {\n  color: blue;\n}\ntest.html:\nhtml\n<link href=\"to.css\" rel=\"stylesheet\">\n<div class=\"a\">a</div>\n<div class=\"b\">b</div>\nInspecting with Chrome 40:\n\n.a wrongly linked to b.css:2.\n\nSorry, this issue appears not only when resetting rule.semicolon and rule.after but also rule.before and rule.between. I fixed test code above. However, there are other conditions for reproducing this issue.\n. With v4.1 branch (899c655), the problem seems to be fixed! Thanks!\n\n. I think converting CSS file into UTF-8 with iconv-lite etc. is a better solution. Detecting charset and adding correct @charset directive is not hard, but CSS files may have different non-ASCII charset and this could be a problem on concatenating.\n. postcss-plugin keyword also looks good.\n. Thanks for documentation fix.\nYes, I found this documentation bug when supporting these hacks for IE7. In my test, :, (, and ) are also included in raws.before. There is some inconsistency when parsing these erroneous properties.\n. ",
    "w0rm": "Hi! I'm willing to work on gulp-postcss. I have some experience creating gulp-svgstore plugin. \nA simple api like this should be enough for my use case:\n```\nvar postcss = require('gulp-postcss')\nvar gulp = require('gulp')\nvar autoprefixer = require('autoprefixer')\nvar mqpacker = require('mqpacker')\ngulp.task('css', function () {\n  var processors = [\n    autoprefixer('last 1 version').postcss\n  , mqpakcer.processor\n  ]\n  return gulp.src('src/style.css')\n    .pipe(postcss(processors))\n    .pipe(dest('dest'))\n})\n```\nI have omitted opts because gulp plugin doesn't need from and to options, source maps have to support gulp-sourcemaps. But if we need some extra options later, then we may add them in the second argument i.e. postcss(processors, opts).\n. @ai from may be obtained from the incoming stream and passed to postcss behind the scenes. There is no need to specify it twice in gulp.src and postcss opts.\n. @ai unfortunately gulp.dest receives a stream of already processed files and simply saves them in the target directory. I think the best option is to inline source maps and then extract them with another gulp plugin.\nUPD: I have checked gulp-sourcemaps, it keeps source maps separately from file contents. This seems like a standard way for gulp plugins to work with sourcemaps, so I think this should be integrated in gulp-postcss.\n. @ai already done gulp-postcss, I'll try to run it over a large codebase tomorrow to ensure everything works seamlessly and then send PR.\n. @ai I will implement this feature into gulp-postcss as soon as someone really needs this and opens corresponding issue.\n. I fake semver results because I'm not testing semver in this test.\n. I assume plugin.postcssVersion to be a valid semver range, e.g. >=2.5.0.\n. I didn't change version examples in tests, but now I think I had to. Here are some examples of  semver.satisfies:\nsemver.satisfies('2.5.0', '2.5.1') === false\nsemver.satisfies('2.5.1', '2.5.0') === false\nsemver.satisfies('2.5.5', '^2.5.0') === true\nsemver.satisfies('2.5.5', '>=2.5.0') === true\nsemver.satisfies('2.5.5', '2.5.*') === true\n. Oh, then I didn't get this right. I thought each plugin would have to provide version range of postcss that it depends on.\nSorry, please roll back my change.\n. Yeah, I agree to this! Plus I didn't understand the right behavior, but now I got it. \n. @ai this is not really critical, I don't mind keeping it as it is now.\n.  I'm happy to follow these rules in gulp-postcss, ping me once it's finalized!\n. gulp-postcss doesn't support async plugins\n. @ai, oh, I see! Anyway, I have created a ticket for this\n. I think we should allow passing an object processor in the processors array.\nI had to switch gulp-postcss back to using postcss().use because of this issue with cssnext.\n. @ai sorry for not catching up, I'm on vacation until 9th of June\n. @TrySound sass() is a transform stream, so it should extend EventEmitter\n. ",
    "shawninder": "@ai Does such a wrapper currently exist somewhere?\n@jonathanong Did you find a way to do this?\n. ",
    "dannyfritz": "@kizu This is referred to as Lazy Loading and can vastly help in situations where it is likely the full tree isn't needed.\n. ",
    "bloodyowl": "isn't it paradoxal when the first feature of post-css is to parse CSS? \ninventing a kind-of new language doesn't look good to me. \n. ",
    "ghost": "@ai why isn't it better to create plugin that doesn't depend on postcss, just like css-whitespace, but without whitespace? As I know stylus work by the same way nested-parser -> css-parser -> css-stringify -> output\n. @ai No, I didn't say that you want to implement Sass like parser. Yeah, it'll be cool if you can implement nested rules. I offer to make this by plugin (like in Stylus) cause MoOx doesn't want to go by the way you want)\n. @ai When are you planing to introduce this feature to postcss? As I understand it's just improve of currently mechanism.\n. @ai grace with this improvement. :smiley:\nThx for fast answer. Waiting for postcss 3.\n. @ai but what about variables?\n. I want to set one of them for default preprocessor in my program and performance is very important for me.)\n. Yeah, I'm talking about postcss-sass-nested and postcss-sass-vars. I don't need mixins. And as I said later I would be waiting till version 3.0)\n. Thx!\n. +1 for processAsync()\n. @ai yeap, thanks\n. @ai sorry my fault)\n. While this is being looked at, should an extensions array option be added as well? See: https://github.com/postcss/postcss-import/pull/52 and https://github.com/outpunk/postcss-modules/issues/13\nHaven't looked in depth at the proposed solutions yet, but perhaps a simple and elegant solution would be to handle file resolving in PostCSS rather than passing down additional parameters to the plugins, so perhaps PostCSS could pass down a resolving function in the API's opts object? that function would return an absolute file path or an error if the file was not found.\n. Got it, sorry I skimmed through a bit too quickly, still, is there a way to avoid having to pass file resolving options to each plugin? Would it make sense that it gets handled/supervised by PostCSS?\n. Ok thats exactly what I needed to know @davidtheclark . will look for a Java or nodejs package that does the inlining.\n. In theory it should works faster, than with let keyword, because VM knows that the const variable will not change and size of it never change too. I think so)\n. Any updates about  highlighting?earlier was ideas about .pss file extention. Any updates about that? \n. I vote for @akella approach \n. Can I use Verbal Expressions library with postCSS? \n. I want declare new color functions.\nI look to conic gradient library, very hard regex :)\n. I have some custom-images.\nhttps://github.com/acterhd/css-canvas-emulator\nBut... I want use HCG colors in real time.\nhttps://github.com/acterhd/hcg-color\nAlso I want make workaround of some CSS properties with JavaScript. So, I\nhave question: can postcss generate JS, and even give some API for JS\nalgorithms?\nBUT! Real example: CSS attr. I know that can be workarounded by variables. I know in theory. \n. I know CSS3 attr, and CSS3 custom properties. I know that this feature (attr) can be acheive by CSS variables I.e. semi-static. But need append JS observer to every new elements. \nNeed to think... \nAlso, need some AI for make unique ID's per every property, and make own observers. \n. I'm sorry, cq-polyfill used parts of postcss? \n. I think I know... \nIn theory need two files: variable-function map (JSON) and valid stylesheet (CSS). And map elements with these variables. But can I generate JSON with postcss? \nI about CSS attr() function. \n. How to get selector of declaration? \nI not found declaration and rule link. \n. I have problems. How to test and debug local plugin? \n. ",
    "lukeapage": "no, thats not really the problem. Why is it there at all? if you provide the previous sourcemap then the input to autoprefixer is not required to be in the sourcemap.\nWhen the browser looks at the sourcemap, it sees the user created file and the css output. If a previous sourcemap is given to autoprefixer then the css input to autoprefixer is generated and not useful to the browser..\n. FYI I came across the two issues because I am creating a plugin for less.js v2 that uses autoprefixer. We will be recommending that people use this :)\n. No, I don't care at all about the name, thats not the problem. Let me post the whole sourcemap here to explain it better.\n. This is output from autoprefixer\n``` xml\n{\"version\":3,\n\"sources\":[\"css-3.less\",\"14111797677941\"],\n\"names\":[],\n\"mappings\":\"AAAA;EACE,oDAAA;ECCD;ADID;EACE,uBAAA;EACA,+CAAA;ECFD;ADID;EAEE,mCAAA;UAAA,2BAAA;ECFD;ADID;EACE,mBAAA;ECFD;ADID;EACE,cAAA;ECFD;ADKD;EACE,cAAA;ECHD;ADMD;EACE,cAAA;ECJD;ADOD;EACE,cAAA;ECLD;ADQD;EACE,cAAA;ECND;ADSD;;;EAGE,cAAA;ECPD;ADUD;EACE,cAAA;ECRD;ADWD;EACE,cAAA;ECTD;ADYD;EACE,cAAA;ECVD;ADaD;EACE,cAAA;ECXD;ADcD;EACE,kDAAA;ECZD;ADeD;EACE;IAAK,aAAA;ICZJ;EDaD;IAAO,aAAA;ICVN;EDWD;IAAO,aAAA;ICRN;EACF;ADUD;EACE;IACE,iBAAA;ICRD;EDUD;;IACE,iBAAA;ICPD;EDSD;;IACE,iBAAA;ICND;EACF;ADHD;EACE;IACE,iBAAA;ICRD;EDUD;;IACE,iBAAA;ICPD;EDSD;;IACE,iBAAA;ICND;EACF;ADSD;EACE,mBAAA;EACA,eAAA;EACA,iBAAA;EACA,iBAAA;EACA,qBAAA;EACA,mBAAA;ECPD;ADUD;;EAEE;IACE,+BAAA;IACA,oCAAA;ICRD;EACF;ADWD;EACE;IACE,YAAA;ICTD;EACF;ADYD;EACE,iBAAA;ECVD;ADYD,4CAAA;AAEA;EAAS,aAAA;ECVR;ADWD;EAAQ,eAAA;ECRP;ADSD;EAAM,YAAA;ECNL;ADOD;EAAO,cAAA;ECJN;ADKD;EAAK,cAAA;ECFJ;ADGD;EACE,8BAAA;ECDD;ADGD;EACE;IACE,gBAAA;ICDD;EACF;ADGD;EACE,gBAAA;ECDD;ADAD;EACE,gBAAA;ECDD;ADAD;EACE,gBAAA;ECDD;ADAD;EACE,gBAAA;ECDD;ADGD;;EAEE,eAAA;ECDD;ADID;;;;EAIE,kBAAA;ECFD;ADKD;EACE,wDAAA;ECHD\",\n\"file\":\"to.css\",\n\"sourcesContent\":[\n\".comma-delimited {\\n  text-shadow: -1px -1px 1px red, 6px 5px 5px yellow;\\n//  -moz-box-shadow: 0pt 0pt 2px rgba(255, 255, 255, 0.4) inset,\\n//    0pt 4px 6px rgba(255, 255, 255, 0.4) inset;\\n//  -webkit-transform: rotate(-0.0000000001deg);\\n}\\n@font-face {\\n  font-family: Headline;\\n  unicode-range: U+??????, U+0???, U+0-7F, U+A5;\\n}\\n.other {\\n  -moz-transform: translate(0, 11em) rotate(-90deg);\\n  transform: rotateX(45deg);\\n}\\n.item[data-cra_zy-attr1b-ut3=bold] {\\n  font-weight: bold;\\n}\\np:not([class=\\\"lead\\\"]) {\\n  color: black;\\n}\\n\\ninput[type=\\\"text\\\"].class#id[attr=32]:not(1) {\\n  color: white;\\n}\\n\\ndiv#id.class[a=1][b=2].class:not(1) {\\n  color: white;\\n}\\n\\nul.comma > li:not(:only-child)::after {\\n  color: white;\\n}\\n\\nol.comma > li:nth-last-child(2)::after {\\n  color: white;\\n}\\n\\nli:nth-child(4n+1),\\nli:nth-child(-5n),\\nli:nth-child(-n+2) {\\n  color: white;\\n}\\n\\na[href^=\\\"http://\\\"] {\\n  color: black;\\n}\\n\\na[href$=\\\"http://\\\"] {\\n  color: black;\\n}\\n\\nform[data-disabled] {\\n  color: black;\\n}\\n\\np::before {\\n  color: black;\\n}\\n\\n#issue322 {\\n  -webkit-animation: anim2 7s infinite ease-in-out;\\n}\\n\\n@-webkit-keyframes frames {\\n  0% { border: 1px }\\n  5.5% { border: 2px }\\n  100% { border: 3px }\\n}\\n\\n@keyframes fontbulger1 {\\n  to {\\n    font-size: 15px;\\n  }\\n  from,to {\\n    font-size: 12px;\\n  }\\n  0%,100% {\\n    font-size: 12px;\\n  }\\n}\\n\\n.units {\\n  font: 1.2rem/2rem;\\n  font: 8vw/9vw;\\n  font: 10vh/12vh;\\n  font: 12vm/15vm;\\n  font: 12vmin/15vmin;\\n  font: 1.2ch/1.5ch;\\n}\\n\\n@supports ( box-shadow: 2px 2px 2px black ) or\\n          ( -moz-box-shadow: 2px 2px 2px black ) {\\n  .outline {\\n    box-shadow: 2px 2px 2px black;\\n    -moz-box-shadow: 2px 2px 2px black;\\n  }\\n}\\n\\n@-x-document url-prefix(\\\"\\\"github.com\\\"\\\") {\\n  h1 {\\n    color: red;\\n  }\\n}\\n\\n@viewport {\\n  font-size: 10px;\\n}\\n@namespace foo url(http://www.example.com);\\n\\nfoo|h1 { color: blue; }\\nfoo| { color: yellow; }\\n|h1 { color: red; }\\n|h1 { color: green; }\\nh1 { color: green; }\\n.upper-test {\\n  UpperCaseProperties: allowed;\\n}\\n@host {\\n  div {\\n    display: block;\\n  }\\n}\\n::distributed(input::placeholder) {\\n  color: #b3b3b3;\\n}\\n.shadow ^ .dom,\\nbody ^^ .shadow {\\n  display: done;\\n}\\n\\n:host(.sel .a),\\n:host-context(.sel .b),\\n.sel /deep/ .b,\\n::content .sel {\\n  type: shadow-dom;\\n}\\n\\n#issue2066 {\\n  background: url('/images/icon-team.svg') 0 0 / contain;\\n}\\n\\n\"\n,\n\".comma-delimited {\\n  text-shadow: -1px -1px 1px red, 6px 5px 5px yellow;\\n}\\n@font-face {\\n  font-family: Headline;\\n  unicode-range: U+??????, U+0???, U+0-7F, U+A5;\\n}\\n.other {\\n  -moz-transform: translate(0, 11em) rotate(-90deg);\\n  transform: rotateX(45deg);\\n}\\n.item[data-cra_zy-attr1b-ut3=bold] {\\n  font-weight: bold;\\n}\\np:not([class=\\\"lead\\\"]) {\\n  color: black;\\n}\\ninput[type=\\\"text\\\"].class#id[attr=32]:not(1) {\\n  color: white;\\n}\\ndiv#id.class[a=1][b=2].class:not(1) {\\n  color: white;\\n}\\nul.comma > li:not(:only-child)::after {\\n  color: white;\\n}\\nol.comma > li:nth-last-child(2)::after {\\n  color: white;\\n}\\nli:nth-child(4n+1),\\nli:nth-child(-5n),\\nli:nth-child(-n+2) {\\n  color: white;\\n}\\na[href^=\\\"http://\\\"] {\\n  color: black;\\n}\\na[href$=\\\"http://\\\"] {\\n  color: black;\\n}\\nform[data-disabled] {\\n  color: black;\\n}\\np::before {\\n  color: black;\\n}\\n#issue322 {\\n  -webkit-animation: anim2 7s infinite ease-in-out;\\n}\\n@-webkit-keyframes frames {\\n  0% {\\n    border: 1px;\\n  }\\n  5.5% {\\n    border: 2px;\\n  }\\n  100% {\\n    border: 3px;\\n  }\\n}\\n@keyframes fontbulger1 {\\n  to {\\n    font-size: 15px;\\n  }\\n  from,\\n  to {\\n    font-size: 12px;\\n  }\\n  0%,\\n  100% {\\n    font-size: 12px;\\n  }\\n}\\n.units {\\n  font: 1.2rem/2rem;\\n  font: 8vw/9vw;\\n  font: 10vh/12vh;\\n  font: 12vm/15vm;\\n  font: 12vmin/15vmin;\\n  font: 1.2ch/1.5ch;\\n}\\n@supports ( box-shadow: 2px 2px 2px black ) or\\n          ( -moz-box-shadow: 2px 2px 2px black ) {\\n  .outline {\\n    box-shadow: 2px 2px 2px black;\\n    -moz-box-shadow: 2px 2px 2px black;\\n  }\\n}\\n@-x-document url-prefix(\\\"\\\"github.com\\\"\\\") {\\n  h1 {\\n    color: red;\\n  }\\n}\\n@viewport {\\n  font-size: 10px;\\n}\\n@namespace foo url(http://www.example.com);\\nfoo|h1 {\\n  color: blue;\\n}\\nfoo| {\\n  color: yellow;\\n}\\n|h1 {\\n  color: red;\\n}\\n|h1 {\\n  color: green;\\n}\\nh1 {\\n  color: green;\\n}\\n.upper-test {\\n  UpperCaseProperties: allowed;\\n}\\n@host {\\n  div {\\n    display: block;\\n  }\\n}\\n::distributed(input::placeholder) {\\n  color: #b3b3b3;\\n}\\n.shadow ^ .dom,\\nbody ^^ .shadow {\\n  display: done;\\n}\\n:host(.sel .a),\\n:host-context(.sel .b),\\n.sel /deep/ .b,\\n::content .sel {\\n  type: shadow-dom;\\n}\\n#issue2066 {\\n  background: url('/images/icon-team.svg') 0 0 / contain;\\n}\\n/# sourceMappingURL=stest1.css.map /\"]}\n```\nNote: there are 2 sources and 2 files included.\nHowever, the map is only from the less file to the css file - autoprefixer is including the input to autoprefixer in the sourcemap even though it is not required by the browser\n. e.g. my expected output is this (which works fine)\n{\"version\":3,\n\"sources\":[\"css-3.less\"],\n\"names\":[],\"mappings\":\"AAAA;EACE,oDAAA;ECCD;ADID;EACE,uBAAA;EACA,+CAAA;ECFD;ADID;EAEE,mCAAA;UAAA,2BAAA;ECFD;ADID;EACE,mBAAA;ECFD;ADID;EACE,cAAA;ECFD;ADKD;EACE,cAAA;ECHD;ADMD;EACE,cAAA;ECJD;ADOD;EACE,cAAA;ECLD;ADQD;EACE,cAAA;ECND;ADSD;;;EAGE,cAAA;ECPD;ADUD;EACE,cAAA;ECRD;ADWD;EACE,cAAA;ECTD;ADYD;EACE,cAAA;ECVD;ADaD;EACE,cAAA;ECXD;ADcD;EACE,kDAAA;ECZD;ADeD;EACE;IAAK,aAAA;ICZJ;EDaD;IAAO,aAAA;ICVN;EDWD;IAAO,aAAA;ICRN;EACF;ADUD;EACE;IACE,iBAAA;ICRD;EDUD;;IACE,iBAAA;ICPD;EDSD;;IACE,iBAAA;ICND;EACF;ADHD;EACE;IACE,iBAAA;ICRD;EDUD;;IACE,iBAAA;ICPD;EDSD;;IACE,iBAAA;ICND;EACF;ADSD;EACE,mBAAA;EACA,eAAA;EACA,iBAAA;EACA,iBAAA;EACA,qBAAA;EACA,mBAAA;ECPD;ADUD;;EAEE;IACE,+BAAA;IACA,oCAAA;ICRD;EACF;ADWD;EACE;IACE,YAAA;ICTD;EACF;ADYD;EACE,iBAAA;ECVD;ADYD,4CAAA;AAEA;EAAS,aAAA;ECVR;ADWD;EAAQ,eAAA;ECRP;ADSD;EAAM,YAAA;ECNL;ADOD;EAAO,cAAA;ECJN;ADKD;EAAK,cAAA;ECFJ;ADGD;EACE,8BAAA;ECDD;ADGD;EACE;IACE,gBAAA;ICDD;EACF;ADGD;EACE,gBAAA;ECDD;ADAD;EACE,gBAAA;ECDD;ADAD;EACE,gBAAA;ECDD;ADAD;EACE,gBAAA;ECDD;ADGD;;EAEE,eAAA;ECDD;ADID;;;;EAIE,kBAAA;ECFD;ADKD;EACE,wDAAA;ECHD\",\n\"file\":\"to.css\",\n\"sourcesContent\":[\n\".comma-delimited {\\n  text-shadow: -1px -1px 1px red, 6px 5px 5px yellow;\\n//  -moz-box-shadow: 0pt 0pt 2px rgba(255, 255, 255, 0.4) inset,\\n//    0pt 4px 6px rgba(255, 255, 255, 0.4) inset;\\n//  -webkit-transform: rotate(-0.0000000001deg);\\n}\\n@font-face {\\n  font-family: Headline;\\n  unicode-range: U+??????, U+0???, U+0-7F, U+A5;\\n}\\n.other {\\n  -moz-transform: translate(0, 11em) rotate(-90deg);\\n  transform: rotateX(45deg);\\n}\\n.item[data-cra_zy-attr1b-ut3=bold] {\\n  font-weight: bold;\\n}\\np:not([class*=\\\"lead\\\"]) {\\n  color: black;\\n}\\n\\ninput[type=\\\"text\\\"].class#id[attr=32]:not(1) {\\n  color: white;\\n}\\n\\ndiv#id.class[a=1][b=2].class:not(1) {\\n  color: white;\\n}\\n\\nul.comma > li:not(:only-child)::after {\\n  color: white;\\n}\\n\\nol.comma > li:nth-last-child(2)::after {\\n  color: white;\\n}\\n\\nli:nth-child(4n+1),\\nli:nth-child(-5n),\\nli:nth-child(-n+2) {\\n  color: white;\\n}\\n\\na[href^=\\\"http://\\\"] {\\n  color: black;\\n}\\n\\na[href$=\\\"http://\\\"] {\\n  color: black;\\n}\\n\\nform[data-disabled] {\\n  color: black;\\n}\\n\\np::before {\\n  color: black;\\n}\\n\\n#issue322 {\\n  -webkit-animation: anim2 7s infinite ease-in-out;\\n}\\n\\n@-webkit-keyframes frames {\\n  0% { border: 1px }\\n  5.5% { border: 2px }\\n  100% { border: 3px }\\n}\\n\\n@keyframes fontbulger1 {\\n  to {\\n    font-size: 15px;\\n  }\\n  from,to {\\n    font-size: 12px;\\n  }\\n  0%,100% {\\n    font-size: 12px;\\n  }\\n}\\n\\n.units {\\n  font: 1.2rem/2rem;\\n  font: 8vw/9vw;\\n  font: 10vh/12vh;\\n  font: 12vm/15vm;\\n  font: 12vmin/15vmin;\\n  font: 1.2ch/1.5ch;\\n}\\n\\n@supports ( box-shadow: 2px 2px 2px black ) or\\n          ( -moz-box-shadow: 2px 2px 2px black ) {\\n  .outline {\\n    box-shadow: 2px 2px 2px black;\\n    -moz-box-shadow: 2px 2px 2px black;\\n  }\\n}\\n\\n@-x-document url-prefix(\\\"\\\"github.com\\\"\\\") {\\n  h1 {\\n    color: red;\\n  }\\n}\\n\\n@viewport {\\n  font-size: 10px;\\n}\\n@namespace foo url(http://www.example.com);\\n\\nfoo|h1 { color: blue; }\\nfoo|* { color: yellow; }\\n|h1 { color: red; }\\n*|h1 { color: green; }\\nh1 { color: green; }\\n.upper-test {\\n  UpperCaseProperties: allowed;\\n}\\n@host {\\n  div {\\n    display: block;\\n  }\\n}\\n::distributed(input::placeholder) {\\n  color: #b3b3b3;\\n}\\n.shadow ^ .dom,\\nbody ^^ .shadow {\\n  display: done;\\n}\\n\\n:host(.sel .a),\\n:host-context(.sel .b),\\n.sel /deep/ .b,\\n::content .sel {\\n  type: shadow-dom;\\n}\\n\\n#issue2066 {\\n  background: url('/images/icon-team.svg') 0 0 / contain;\\n}\\n\\n\"]\n}\nand the problem is it more than doubles the size of the sourcemap\n. I see, you are right. If I set the from to be css-3.less (even though its a css file) then it works and the file isn't included.\nThanks for your help.\n. okay, thanks. I guess though that to would be autodetected from the sourcemaps file and from would need to be autodetected from.. I guess the first file in the sources list?\n. Okay and it won't insert a source file.. at the moment the only way to stop\nit inserting a file is to make from equal the first one in sources. I tried\nsetting from = to = prevmap.file but it didn't fix the problem.\n. In case you are interested that's so I can remove this line\nhttps://github.com/less/less-plugin-autoprefix/blob/master/lib/autoprefix-processor.js#L16\nagain - super minor.\n. > Why you can\u2019t set from and to options manually?\nWe can and we will do. As I said, this is a super minor request and I'm happy to close if you don't want to do it.\n. If I set from to be file.less then I get sources: [\"source/file.less\", \"file.less\"]\n. See the linked issue.. if from is not set to the same as is in the sourcemap, you include an unecessary intermediate file.. I was just doing what you suggested.\n. @lydell thanks, I think that is a error in my example, not the cause of the problem\n. I can try putting the from back to \"virtual.less\" and then raise #96 again, if you think that the from: should be set to something other than the from in the previous sourcemap.. but it's strange that it currently works fine apart from this example where there is a directory in from argument.\n. Hi,\nYour test doesnt set a previous sourcemap so it is a different scenario\nright? I will try changing from to be the same as to which equals the\noutput css name and will raise another issue if the duplication reported in\n96 returns.\n. ",
    "nicyxiao": "Hello,AI,I am also a novice and I suggest post css could be used like Jquery whose method may be packaged into various purposes. For example, $ (\"div\"). css (\"top\", \"20px\");. This code can add CSSattribute and the corresponding value of the element ,and can also be reset cssproperty values, and also can use $ (\"div \") .css (\" top \") to obtain the value of top properties\n. ",
    "kyriosli": "```\n// position: center mixin\ncss.eachRule(function (rule, i) {\n    var rules = {};\n    rule.each(function (decl) {\n        rules[decl.prop ] = decl;\n    });\nif (rules.position && rules.position.value === 'center'\n    && rules.width && rules.height\n    && !rules['margin-left'] && !rules['margin-top'] && !rules.margin) {\n    rules.position.value = 'absolute';\n    var reVALUE = /([\\.\\d]+)(.*)/i,\n        mWidth = reVALUE.exec(rules.width.value),\n        mHeight = reVALUE.exec(rules.height.value);\n    rule.append({\n        prop: 'margin-left',\n        value: -mWidth[1] / 2 + mWidth[2]\n    }).append({\n        prop: 'margin-top',\n        value: -mHeight[1] / 2 + mHeight[2]\n    }).append({\n        prop: 'top',\n        value: '50%'\n    }).append({\n        prop: 'left',\n        value: '50%'\n    })\n}\n\n});\n```\n. ",
    "lsycxyj": "@ai The problem is how I can make a function of \"extractPathFromValue\" when I use many relative references.. ",
    "AoDev": "This is the link to the module: https://github.com/AoDev/css-byebye\n. ",
    "lexich": "Any async api is good. Promises API is good solution.\n. ",
    "sindresorhus": "Should be a separate method, not an option. Options shouldn't fundamentally change how a method works.\n. processAsync()\n. You've mentioned some things you think are problems, but you don't say why. So why?\n1. Doesn't matter. Browserify will shim it.\n2. I don't see why that matters. ?\n3. Why?\n. I've added browser support to supports-color. It will now check for the process global in case it's used without browserify. If browserify is used, it will exclude all the code and just return false. https://github.com/chalk/supports-color/commit/983dd4eb0bca835fe53cb0f25c0cf14957191128\n. :+1: \n. ",
    "Termina1": "I have fully working example implementation here https://github.com/Termina1/postcss/tree/feature/async\n. Yet, babel plugins order is unpredictable (example).\nIt has good optimisations trying to merge visitors, but I personally don't think it is the best approach as a base case, because every time you have 2 plugins that want to modify same AST parts, the order of them is hidden inside AST and plugins code itself.\nIn my opinion, the order of plugins should be obvious for a user and the most obvious thing is the order of plugins in the config array. Most of the time, you don't want speed as PostCSS is fast enough, but when you do, may be we could have some layer on top of postcss, which would implement the babel-like plugin syntax and navigation for cases, when we want to minimise the amount of tree walks?\nAs I understood, @thejameskyle suggested this approach in hist first comment?\n. @thejameskyle I have a good example: babel-plugin-transform-flow-strip-types, which strips flow types and runs almost always before any other plugin, essentially making any other plugin that want to use flow types useless. It's hard to find out, hard to debug and super unobvious due to the babel plugin running strategy. The only solution as far as I know is option passPerPreset.\nThe problem is not that plugins are fragile, the problem is that transformations in some cases remove some information (whether implicitly removing it or making it harder to obtain), and you will never know in general case if there is some plugin that wants that information, but is set to be evaluated later that your destructive plugin.\n. @thejameskyle the AST itself is an information that is being partially lost during transformations\n. ",
    "lyzadanger": "+1 for ability to return promise; it would get me (easily) out of a bunch of otherwise (ick) sync file IO in my little plugin.\n. ",
    "bdkjones": "No. This is not a good idea. With this enabled, if the user tinkers with the Sass in Chrome's web inspector (to, say, try different colors, etc), Chrome is not able to save the changes to the original Sass file.\nInlining source map origin files would be a TERRIBLE default option.\n. You can provide file paths in addition to the sourcesContent data, but you don't have to. The posts above made it sound like you plan to use just sourcesContent to avoid the hard work of calculating correct, relative paths to the source files. In that case, Chrome won't save changes.\nAdditionally, if you're working with really big projects and frameworks (like Zurb Foundation), including sourcesContent will make the map file GIGANTIC. Eventually, this negatively impacts performance of the web inspector and slows down compiling times.\nIn the end, I don't care if you guys make it a default as long as I can turn it off. Enabling it is not a good default. \n. The real trouble is that this is a solution in search of a problem. You're adding a needless layer of abstraction on top of various tools like Autoprefixer. \nFolks already have places that they configure their projects. For my users, that in's an app. For people on Grunt or Gulp, that's in their gruntfile. No one wants another hidden configuration file named .postcssrc. People want to integrate the configuration of things like Autoprefixer into their existing configurations. \nIt seems like you guys are trying to create your own competitor to the Grunt/Gulp environment, which is a really bad idea because (a) the existing systems are really good and (b) that's a bunch of duplicated effort that could be spent on better things.\nNow, I understand that the idea behind this thing is that all the smaller \"PostCSS\" stuff could use this single CLI wrapper. And that's fine. But the major tools like Autoprefixer should be usable with or without this CLI wrapper. \n. ",
    "shinnn": "I'm glad to hear you say that.\nCould you send me the invitation to postcss organization?\n. Sure ;)\n. Updated.\n. > keep plugins on one line\n+1\n. I'm really opposed to overwrite white() and black(). These function names are already reserved. \nhttp://dev.w3.org/csswg/css-color/#hsl-hwb-adjusters\n\nw(), white(), b(), or black()\n\nDoesn't postcss-color-gray meet your requirements?\n. IMO it confuses the users though we can check the positions of white() and black()...\nBut if you think it's worth creating the plugin, go ahead.\n. Great work, @ai.\n. shinnn.stylelint is not gulp-postcss.\n. vscode-stylelint is just a wrapper for stylelint, which still uses PostCSS 5.x. Wait for https://github.com/stylelint/stylelint/pull/2561 being merged.\n. ",
    "jozanza": "@ai No problem! Happy to help. Would you mind bumping the npm package version or doing a npm publish with this update? I would like to run an npm update to get this fix into my project.\n. @ai I need a 2.x.x version number (because gulp-please 1.0.4 uses pleeease ^1.1.1 which uses postcss ^2.0.0). Please release it now if you can. I'm also looking forward to 3.0 :+1: \n. @ai awesome thanks! My Twitter is @jozanza\n. ",
    "anandthakker": "@ai @MoOx Sweet.  Yes, throwError certainly makes sense to me in general (although I think it should take an Error object for more flexibility).\nAs for the message logging, I'm not sure.  I haven't yet looked into getting the previous source map, but I sort of think that if the API for getting the source/original file/line/column is nice and straightforward, we probably don't even need the .printWarning() method... people who want to use console.log will use it anyway.\nOn a different note, though, I could see an argument for providing a standard, supported way to attach arbitrary payloads (which could include messages, of course) to nodes, so that \"downstream\" plugins could use them... \n. @ai Maybe node.message(...) instead?  Or are you saying that error() would return an actual Error object?\n. @ai Makes sense, although I suppose there might be some value in offering a generic Message object (which could also have line/column info).  Maybe that's not widely useful enough to be worth it though.\n. ditto\n. I'm with @lydell.  The each* functions are convenient catchall iterators, so I think it makes sense to keep them as simple as possible, and my intuitive impression would be that eachRule would include rules nested within at-rules.   My guess is that if someone wants to differentiate between global rules and those within at-rules, they're going to need to customize their recursion anyway.\n. ",
    "allanhortle": "I'm getting this issue through grunt-postcss mixed with csswring.\n. ",
    "borodean": "Strings with parenthesis inside functions started to fail as well:\ncss\nbody {\n  background: url('foo (bar).jpg');\n}\n. Redifinition of native functions (calc, element, expression, url) could lead to problems because of special parsing rules defined in CSS. Sass deprecated this feature since 3.4.10\n. @ai the funny thing is that my proof of concept includes everything except for parsing colors.\n. Argument parser \u0441ould also be reused to parse property values. It would become simplier to implement custom properties like size: 10px 20px, position: absolute, 10px 20px auto auto.\n. Also, custom functions could be made to be used outside property values.\nTo resolve path as in postcss-assets:\ncss\n@import resolve('normalize.css');\nIn Sass I had function to escape CSS identifiers in selectors to easily write funky classnames:\nscss\na:hover,\na.#{ escape(':hover') } { // would become a.\\3A hover {\n  color: red;\n}\nTo be used later to automate testing of hover styles:\nhtml\n<a class=\":hover\">I look like hovered!</a>\n. Functions should be able to be async, like those accessing the filesystem.\n. @ai for instance, there could be custom functions nested inside default ones:\ncss\nwidth: calc(sqrt(2px) + 10%);\nAnd some other plugin could still postprocess calc() functions somehow.\n. @ai when do you expect this to be implemented? Because I'm thinking about extracting my function mapper from postcss-assets to a separate plugin.\n. @ai some brilliant discussion out there, I should have searched for it better. However, I don't really see how that topic covers my second point, the one about shared core for a few different plugins.\n. @ai I guess that the main complexity there would be the issue of sharing configs. How one can tell, say, postcss-assets and svg-load to use the same array of the load path upon path resolution?\n. ",
    "lahmatiy": "It's all about greedy strategy for ( and ignore [ & ] pair as special context.\n. Hi, all!\nYep, csstree doesn't expose tokenizer since I thought it's an internal part and doesn't need to others. But recently I realized that it can be useful for other projects and tasks. So I'm going to expose tokenizer. But I'm not sure it's to be a separate package right now because of additional complexity for current state of csstree. Although it's possible in future.\nYou're free to backport tokenizer if you want. I can't deny you to do this. But you should take into account that you'll need tests and related things too. Also I'm not sure your changes are good for performance and you'll need tune performance by yourself. If you're happy with it - no problems ;)\nI believe csstree's tokenizer is not perfect yet and will be improved in future. So maybe using it will be better choice.\nIn any case, it is worth taking a decision after you try to integrate tokenizer as is it now. If everything is ok, you'll back to make a decision dependency vs backport. Otherwise the only choice will be to backport tokenizer with the necessary modifications.. @hzlmn csstree v1.0.0-alpha10 is out and it exposes tokenizer now (as Scanner class).\ncsstree in alpha stage since AST format is not stable yet. But it doesn't affect tokenizer in any way. I don't think its API will change much. So you can start to experiment with it. Feedback is welcome.\nAs I mention above, I don't like to extract tokenizer to package right now. But it's ready for it. If you success with your experiments and you decide to use it in PostCSS, it will be the reason to make a separate package.\n@ai Thank you for your participation. Tokenizer API is stable enough and nothing prevents to try to use it. I need a feedback first. Thank you one more time.. As you wish ;)\nI don't think it could break anything.\nMay be need more testing with bundlers other than Browserify.. Don't worry, no rush at all.\nJust interesting a little bit why do you think it changes the public API? But it's not so important, so you shouldn't answer ;). ",
    "ericandrewlewis": "The example is actually 9540 rulesets. I had about the same number of rulesets in a project I'm working on, but can't publish the real-world example as it's from a proprietary project, so boiled down the minimum to trigger the issue (at least in my environment) in a more generic example.\n. I was able to produce the issue with PostCSS at 11000 selectors in a node one-off.\n. Here's a test script for benchmarking the tokenizer and the parser separately.\nResults:\nTokenizer: < 1 seconds\nParser: ~74 seconds\nMaybe during this effort we can add benchmark tests to the separate modules in the repo?\n. @ai Sure - let me know how I can help.\n. Ah, I see. I'm unfamiliar with profiling in Node, but I'll try to later today.\n. > @ericandrewlewis can you try this patch in your project and confirm that it fixes the issue.\nThis got us marginal improvements - went from 72sec to 66sec.\n. Here's the CSS file I've been running it against. Running node v0.10.26.\n. @ankurp what changes should i make to parser.js to test?\n. Yup, PostCSS 3.0.5 does the trick. it looks like a linear speed increase with filesize now, which is great.\nMy original file takes 0.5 seconds now. :smile: \n. ",
    "ankurp": "This is the profiling log. Slowness is in the word function\n``` log\nStatistical profiling result from v8.log, (36221 ticks, 13 unaccounted, 0 excluded).\nticks  total  nonlib   name\n     13    0.0%\nticks  total  nonlib   name\n  33607   92.8%    0.0%  /usr/local/bin/node\n   2420    6.7%    0.0%  /usr/lib/system/libsystem_platform.dylib\n     10    0.0%    0.0%  /usr/lib/system/libsystem_kernel.dylib\n      4    0.0%    0.0%  /usr/lib/system/libsystem_malloc.dylib\n      3    0.0%    0.0%  /usr/lib/system/libsystem_pthread.dylib\n      1    0.0%    0.0%  /usr/lib/system/libsystem_c.dylib\nticks  total  nonlib   name\n     28    0.1%   15.9%  LazyCompile: _classProps.word.value ~/postcss/build/lib/parser.js:88\n     11    0.0%    6.3%  LazyCompile: _classProps.loop.value ~/postcss/build/lib/parser.js:36\n     10    0.0%    5.7%  LazyCompile: _classProps.end.value ~/postcss/build/lib/parser.js:281\n      9    0.0%    5.1%  Builtin: A builtin from the snapshot\n      8    0.0%    4.5%  LazyCompile: _classProps.init.value ~/postcss/build/lib/parser.js:369\n      7    0.0%    4.0%  LazyCompile: _classProps.push.value ~/postcss/build/lib/container.js:94\n      7    0.0%    4.0%  LazyCompile: _classProps.decl.value ~/postcss/build/lib/parser.js:158\n      6    0.0%    3.4%  LazyCompile: join native array.js:410\n      5    0.0%    2.8%  Stub: KeyedLoadElementStub\n      5    0.0%    2.8%  Stub: CEntryStub\n      5    0.0%    2.8%  LazyCompile: ~_classProps.loop.value ~/postcss/build/lib/parser.js:36\n      5    0.0%    2.8%  LazyCompile: module.exports ~/postcss/build/lib/tokenize.js:5\n      5    0.0%    2.8%  LazyCompile: Declaration ~/postcss/build/lib/declaration.js:24\n      5    0.0%    2.8%  Builtin: A builtin from the snapshot {2}\n      4    0.0%    2.3%  Stub: CompareICStub\n      3    0.0%    1.7%  Stub: CompareStub_EQ_STRICT\n      3    0.0%    1.7%  LazyCompile: _classProps.raw.value ~/postcss/build/lib/parser.js:387\n      3    0.0%    1.7%  LazyCompile: Rule ~/postcss/build/lib/rule.js:25\n      2    0.0%    1.1%  Stub: StringAddStub\n      2    0.0%    1.1%  Stub: RecordWriteStub {1}\n      2    0.0%    1.1%  Stub: FastNewContextStub\n      2    0.0%    1.1%  Stub: FastCloneShallowArrayStub\n      2    0.0%    1.1%  LazyCompile: ~_classProps.word.value ~/postcss/build/lib/parser.js:88\n      2    0.0%    1.1%  LazyCompile: ~ ~/postcss/build/lib/parser.js:389\n      2    0.0%    1.1%  LazyCompile: Node ~/postcss/build/lib/node.js:34\n      2    0.0%    1.1%  LazyCompile: slice native string.js:510\n      2    0.0%    1.1%  LazyCompile: _classProps.map.value ~/postcss/build/lib/parser.js:443\n      2    0.0%    1.1%  Builtin: A builtin from the snapshot {1}\n      1    0.0%    0.6%  Stub: SubStringStub\n      1    0.0%    0.6%  Stub: RegExpExecStub\n      1    0.0%    0.6%  Stub: RecordWriteStub {4}\n      1    0.0%    0.6%  Stub: RecordWriteStub {3}\n      1    0.0%    0.6%  Stub: RecordWriteStub {2}\n      1    0.0%    0.6%  Stub: RecordWriteStub\n      1    0.0%    0.6%  Stub: FastNewClosureStub\n      1    0.0%    0.6%  Stub: FastCloneShallowObjectStub\n      1    0.0%    0.6%  Stub: CallFunctionStub_Args2\n      1    0.0%    0.6%  Stub: CallConstructStub\n      1    0.0%    0.6%  RegExp: ^(\\/?|)([\\s\\S]?)((?:\\.{1\\,2}|[^\\/]+?|)(\\.[^.\\/]|))(?:[\\/])$\n      1    0.0%    0.6%  RegExp: [ \\n\\t\\r\\(\\{\\}:;@!'\"]|\\/(?=\\)\n      1    0.0%    0.6%  LazyCompile: ~_classProps.spacesFromStart.value ~/postcss/build/lib/parser.js:421\n      1    0.0%    0.6%  LazyCompile: ~_classProps.decl.value ~/postcss/build/lib/parser.js:158\n      1    0.0%    0.6%  LazyCompile: ~_classProps.atrule.value ~/postcss/build/lib/parser.js:222\n      1    0.0%    0.6%  LazyCompile: ~DefineObjectProperty native v8natives.js:695\n      1    0.0%    0.6%  LazyCompile: fs.readFileSync fs.js:276\n      1    0.0%    0.6%  LazyCompile: ToString native runtime.js:550\n      1    0.0%    0.6%  LazyCompile: _classProps.styleMap.value ~/postcss/build/lib/container.js:33\n      1    0.0%    0.6%  LazyCompile: _classProps.stringifyBlock.value ~/postcss/build/lib/container.js:71\n      1    0.0%    0.6%  LazyCompile: _classProps.stringify.value ~/postcss/build/lib/declaration.js:46\n      1    0.0%    0.6%  LazyCompile: _classProps.nextToken.value ~/postcss/build/lib/parser.js:46\n      1    0.0%    0.6%  LazyCompile: _classProps.each.value ~/postcss/build/lib/container.js:118\n      1    0.0%    0.6%  LazyCompile: *Container ~/postcss/build/lib/container.js:24\n      1    0.0%    0.6%  KeyedStoreIC: A keyed store IC from the snapshot\n      1    0.0%    0.6%  CallMegamorphic: args_count: 2\nticks  total  nonlib   name\nticks  total  nonlib   name\n     40    0.1%\nNote: percentage shows a share of a particular caller in the total\n  amount of its parent calls.\n  Callers occupying less than 2.0% are not shown.\nticks parent  name\n  33607   92.8%  /usr/local/bin/node\n  14093   41.9%    LazyCompile: _classProps.word.value ~/postcss/build/lib/parser.js:88\n  10634   75.5%      LazyCompile: _classProps.loop.value ~/postcss/build/lib/parser.js:36\n  10634  100.0%        LazyCompile: ~module.exports ~/postcss/build/lib/parse.js:6\n  10634  100.0%          LazyCompile: ~_classProps.process.value ~/postcss/build/lib/postcss.js:54\n  10634  100.0%            Function: ~ ~/postcss/perftest.js:1\n   3459   24.5%      LazyCompile: _classProps.nextToken.value ~/postcss/build/lib/parser.js:46\n   3459  100.0%        LazyCompile: ~_classProps.loop.value ~/postcss/build/lib/parser.js:36\n   3459  100.0%          LazyCompile: ~module.exports ~/postcss/build/lib/parse.js:6\n   3459  100.0%            LazyCompile: ~_classProps.process.value ~/postcss/build/lib/postcss.js:54\n  10459   31.1%    LazyCompile: _classProps.loop.value ~/postcss/build/lib/parser.js:36\n  10459  100.0%      LazyCompile: ~module.exports ~/postcss/build/lib/parse.js:6\n  10459  100.0%        LazyCompile: ~_classProps.process.value ~/postcss/build/lib/postcss.js:54\n  10459  100.0%          Function: ~ ~/postcss/perftest.js:1\n  10459  100.0%            LazyCompile: ~Module._compile module.js:374\n   6209   18.5%    LazyCompile: ~_classProps.loop.value ~/postcss/build/lib/parser.js:36\n   6208  100.0%      LazyCompile: ~module.exports ~/postcss/build/lib/parse.js:6\n   6208  100.0%        LazyCompile: ~_classProps.process.value ~/postcss/build/lib/postcss.js:54\n   6208  100.0%          Function: ~ ~/postcss/perftest.js:1\n   6208  100.0%            LazyCompile: ~Module._compile module.js:374\n   2688    8.0%    LazyCompile: ~_classProps.word.value ~/postcss/build/lib/parser.js:88\n   2545   94.7%      LazyCompile: *_classProps.nextToken.value ~/postcss/build/lib/parser.js:46\n   2545  100.0%        LazyCompile: ~_classProps.loop.value ~/postcss/build/lib/parser.js:36\n   2545  100.0%          LazyCompile: ~module.exports ~/postcss/build/lib/parse.js:6\n   2545  100.0%            LazyCompile: ~_classProps.process.value ~/postcss/build/lib/postcss.js:54\n    143    5.3%      LazyCompile: ~_classProps.nextToken.value ~/postcss/build/lib/parser.js:46\n    143  100.0%        LazyCompile: ~_classProps.loop.value ~/postcss/build/lib/parser.js:36\n    143  100.0%          LazyCompile: ~module.exports ~/postcss/build/lib/parse.js:6\n    143  100.0%            LazyCompile: ~_classProps.process.value ~/postcss/build/lib/postcss.js:54\n2420    6.7%  /usr/lib/system/libsystem_platform.dylib\n   1019   42.1%    LazyCompile: _classProps.word.value ~/postcss/build/lib/parser.js:88\n    778   76.3%      LazyCompile: _classProps.loop.value ~/postcss/build/lib/parser.js:36\n    778  100.0%        LazyCompile: ~module.exports ~/postcss/build/lib/parse.js:6\n    778  100.0%          LazyCompile: ~_classProps.process.value ~/postcss/build/lib/postcss.js:54\n    778  100.0%            Function: ~ ~/postcss/perftest.js:1\n    241   23.7%      LazyCompile: _classProps.nextToken.value ~/postcss/build/lib/parser.js:46\n    241  100.0%        LazyCompile: ~_classProps.loop.value ~/postcss/build/lib/parser.js:36\n    241  100.0%          LazyCompile: ~module.exports ~/postcss/build/lib/parse.js:6\n    241  100.0%            LazyCompile: ~_classProps.process.value ~/postcss/build/lib/postcss.js:54\n    759   31.4%    LazyCompile: _classProps.loop.value ~/postcss/build/lib/parser.js:36\n    759  100.0%      LazyCompile: ~module.exports ~/postcss/build/lib/parse.js:6\n    759  100.0%        LazyCompile: ~_classProps.process.value ~/postcss/build/lib/postcss.js:54\n    759  100.0%          Function: ~ ~/postcss/perftest.js:1\n    759  100.0%            LazyCompile: ~Module._compile module.js:374\n    426   17.6%    LazyCompile: ~_classProps.loop.value ~/postcss/build/lib/parser.js:36\n    426  100.0%      LazyCompile: ~module.exports ~/postcss/build/lib/parse.js:6\n    426  100.0%        LazyCompile: ~_classProps.process.value ~/postcss/build/lib/postcss.js:54\n    426  100.0%          Function: ~ ~/postcss/perftest.js:1\n    426  100.0%            LazyCompile: ~Module._compile module.js:374\n    213    8.8%    LazyCompile: ~_classProps.word.value ~/postcss/build/lib/parser.js:88\n    197   92.5%      LazyCompile: *_classProps.nextToken.value ~/postcss/build/lib/parser.js:46\n    197  100.0%        LazyCompile: ~_classProps.loop.value ~/postcss/build/lib/parser.js:36\n    197  100.0%          LazyCompile: ~module.exports ~/postcss/build/lib/parse.js:6\n    197  100.0%            LazyCompile: ~_classProps.process.value ~/postcss/build/lib/postcss.js:54\n     16    7.5%      LazyCompile: ~_classProps.nextToken.value ~/postcss/build/lib/parser.js:46\n     16  100.0%        LazyCompile: ~_classProps.loop.value ~/postcss/build/lib/parser.js:36\n     16  100.0%          LazyCompile: ~module.exports ~/postcss/build/lib/parse.js:6\n     16  100.0%            LazyCompile: ~_classProps.process.value ~/postcss/build/lib/postcss.js:54\n```\n. @ericandrewlewis can you try this patch in your project and confirm that it fixes the issue. If it does lets merge this and create 3.0.5. Thanks\n. @ericandrewlewis yes trying on this example was fast https://gist.github.com/ericandrewlewis/ebcc3ba3fe53dfbac747 from a minute to a second using nodejs v0.10.31\nAre you trying against that or another CSS? And what is the version of your nodejs?\n. I have another machine and in that v0.10.29 and did not notice any huge improvements either. Seems like there are other places for improvements. One thing I noticed though is that this happens after a certain size. I suspect array is converting to a slower dictionary style array.\n. Thanks\n. This is what I ran and it printed the time it took to run postcss.process https://gist.github.com/ankurp/de3a2521a33d3eb2a061\nbash\n~/P/postcss:master> node perfTest.js \npostcss parse spliting arrays: 140ms\npostcss parse without spliting arrays: 57753ms\n. @ericandrewlewis You need to make that variable MAX_TOKEN_ARRAY_SIZE global by removing the var from it in my patch of the parser.js. Also I changed [] into Array() in tokeninze.js which also gave a speed boost when pushing tokens to the array.\n. I will check. Thanks \n. 3.0.5 works for me. \n. @ai I have another good fix based on your suggesting of splitting into seperate arrays of max 64K. Updating PR soon.\n. Yes will add comment but few more changes need to be made as this did not improve speed for different types of CSS\n. ",
    "onemanstartup": "sass\n.AppMenubar\n  box-shadow 0px 2px 4px 0px rgba(0,0,0,0.07)\n  a\n    color #838383\n    border-bottom 4px solid transparent\n    &.active, &:hover\n      border-bottom 4px solid #D8D8D8\nWill it be possible? I want to be able parse this :)\n. @ai stylus support multiline selectors\nsass\nh1, \nh2\n  color #23303C\nSo css-whitespace doesn't support this? Then I'm sticking with stylus for now :) \nsass\n   background-image: radial-gradient(closest-corner at 40% 70%,#FFFFFF 0%, rgb(171,171,171),50%,transparent),\n                     radial-gradient(closest-corner circle at 80% 20%, #FFFFFF 0%, rgb(171,171,171),20%,transparent),\nWhy do you need {}? multiline have commas as delimeters\n. @ai eh, do you mean \\n\\n? or as I show \nh1,\nh2\nIt supports\n```\n.public_fixedDataTableRow_main\n,\n.public_fixedDataTableCell_wrap1\n.public_fixedDataTableRow_main2\n  overflow auto\n```\n.public_fixedDataTableRow_main\n.public_fixedDataTableCell_wrap1\n.public_fixedDataTableRow_main2\n  overflow auto\n```\n.public_fixedDataTableRow_main\n,.public_fixedDataTableCell_wrap1\n,.public_fixedDataTableRow_main2\n  overflow auto\n```\nIt's all becomes\n.public_fixedDataTableRow_main,\n.public_fixedDataTableCell_wrap1,\n.public_fixedDataTableRow_main2 {\n  overflow: auto;\n}\nYou can try here http://learnboost.github.io/stylus/try.html\n. I say haskell approach is the best, but with so many requests for :, it is ok to consider semicolons as optional. I think it won't add too much complexity for parser.\n. ",
    "corysimmons": "Please God kill the curly braces. :|\nOr offer options for people to customize their syntax. <- good idea if it's possible\n. I think this should be reopened and PostCSS should have an official CLI...\n- Branding\n- Shouldn't have to install 2 tools (you don't gem install sass; gem install sass-cli)\n- Easy-to-use community agreed upon API\n- Community more likely to contribute than on some random project\n- Much easier for a newb to get involved in, and explore the ecosystem of, PostCSS if they're able to immediately start using a CLI and some cool plugin they heard about\nIt's extremely important PostCSS get an official CLI.\nIt's the difference between installation/usage being:\n- npm i postcss-cli\n- postcss -p cssnano -w src/css/**/*.css -o dist/css\nAnd installation/usage being:\n- npm i postcss\n- postcss -p cssnano -w src/css/**/*.css -o dist/css\n- Oh wait that didn't work... Guess I'll have to read up on this.\n- Wtf is this? Where's the CLI?\n- Ah okay here it is\n- npm i postcss-cli\n- postcss -p cssnano -w src/css/**/*.css -o dist/css\n- Ugh! Why doesn't this work?! Why couldn't they just do it like Sass or Stylus or anything else? Why isn't there an official CLI? Fine whatever I'll read through all the docs on this thing.\n- postcss -u cssnano -d dist/css -w src/**/*.css\n- throw new TypeError('Non-string provided as watch path: ' + paths);\n- Argh!\n- etc.\nThe point being, this should be a familiar/easy-to-use thing.\nI think someone else in this thread mentioned it, but npm scripts as build tool is becoming increasingly popular for good reason. They're insanely easy to setup and run in a plethora of ways...\nAnyway, just thought I'd whine and cry because PostCSS not having a CLI is a travesty.\nI honestly think if you moved away from the whole esoteric marketing scheme of \"It does :sparkles: FuTuRe SyNtAx :sparkles: and Autoprefixer :100: was built in it!!!1\" and made it insanely easy for newbs to use it'd do wonders for PostCSS' adoption.\n\nThat said, if it's a matter of work, I'd be happy to take this on. Give me a definitive syntax and some coding standards you'd like it to adhere to and I can get started on it whenever. :+1: \n. @pirxpilot Thanks for your work on it and thanks for migrating it over to postcss org. :+1: :100:\nEveryone else, a separate install is fine. npm i postcss-cli; postcss -w ... still looks good.\n@ai Please open issues at new repo so we can migrate this conversation over there and decide on an official syntax for it.\n. I don't want to use the @mixin syntax as I want the grid to be pretty seamless.\n. This is great. Thanks guys!\n. hehe, sorry I totally forgot. So busy trying to launch this thing. XD\n. I won't be able to properly celebrate but I'll be presenting PostCSS at Sass Summit this year. =)\n. Nov. 18th. There doesn't seem to be a site for Sass Summit 2015 yet.\n. We're bringing CLI into postcss org and discussing API at https://github.com/postcss/postcss-cli/issues/1\n. Definitely keep the :\n. Do people really use multiline stuff that often? I've never needed to break a CSS rule down into multiple lines...\nAlso @ai could you post a small checklist or something with possible syntax issues that we'd need to solve before this can be implemented? Dying for some sugar. :^)\n. rofl, :+1: :100: \n. I hate tabs, but my company uses them. They're pretty much everywhere. Is there some technical limitation or is this just a \"screw tabs\" kinda thing?\n. PostCSS users aren't idiots. We figured out the whole tab/space thing a long time ago. Just let a few people make mistakes that they'll quickly figure out, and let everyone else pick their preferred syntax.\nBasically what @jedmao said. Deny mixed indentation.\n. @ai So happy to hear you're working on this. :^) :+1: :100: \nCan't wait for the day I can drop preprocessors all together.\n. :tada: \n. Why not just combine Stylus and PostCSS?\nRun over Stylus first, then run over it's output with PostCSS.\n. What kind of stuff could PostCSS introduce that https://www.npmjs.com/package/stylint would cry about?\nI mean, even with Lost introducing new properties and such it still just throws a warning instead of an error:\n``` stylus\n@lost gutter 60px\n.foo\n  lost-column: 1/3\n```\n```\n ~/foo > stylint -w style.styl                                                                                                                                                  Sat Jan 23 20:43:56 2016\nWatching:  style.styl  for changes.\nWarning: property is not valid\nFile: style.styl\nLine: 1: @lost gutter 60px\nWarning: property is not valid\nFile: style.styl\nLine: 4: lost-column: 1/3\nStylint: 0 Errors.\nStylint: 2 Warnings.\n``\n. Why would they care if it's expected behavior? Seems like stylint is being overzealous and maybe there needs to be a config setting for ignoringproperty is not valid(or whatever other warning is being thrown). Same with other linters.\n. I guess I don't understand why someone would want to run PostCSS on uncompiled CSS, then run it on Stylus? Stylus compiles down to vanilla CSS (//comments turn into/ /` comments). PostCSS works on vanilla CSS.\nI'm sure you guys know what you're talking about. I'm just curious what exactly messes up other than Stylint throwing warnings about invalid properties.\n. Poor Stylus...\n. tbh, I've never been sure how to describe it in a vague enough way to cover all its use-cases that won't take a paragraph.\n\"Returns any size you could ever need in any situation\" ?. Why do users need precise \"sizes\" in design-oriented CSS?\nGrid widths. Positioning elements precisely.. ",
    "ben-eb": ":+1: for contents.\n. I don't use the safe option at all so I would be happy with removing it and releasing a major version.\n. Separate CLI is a good thing, especially for those who use tools like gulp etc.\nhttps://github.com/svg/svgo/issues/436\n. We already have three modules for @import, let's not do the same with postcss-cli.\n. :+1: to @davidtheclark's suggestion.\n. You could always do a case-insensitive check on node.type. That would be a good compromise.\n. If the check is case-insensitive, it means that plugin authors don't need to do anything to update and those who want to use atRule can do so.\nedit: Ah ok I see the problem (checking against the type of the node). Nevermind.\n. +1 for node.remove() :+1:\n. @ai I thought we were talking about removing removeSelf. So a remove() with no params is removing that node, but a remove(node) removes the child node passed as the parameter.\n. I should clarify; that remove(node) is really parent.remove(node), i.e. the existing API. It's still worth using that method if you are iterating rules instead of decls for example.\n. Yeah, you're right. In this case why would we need rule.removeChild(decl)?\n. 1. Not a fan of calling this codeStyle. Perhaps we need clearer definitions on what ends up in these properties - you can't just change decl.before to decl.spaces.before because it might contain special characters.\n2. Would really appreciate an interim solution to clone. I think the current behaviour is unintuitive; you don't expect a clone of h1{color:blue} to be h1 { color: blue }. I propose clone({}, true) as an interim API, although I don't much like it I prefer it to clone({}, {keepCodeStyle: true}). I need this to be able to compared a CSS transformation's length to a clone's length and I cannot do so if String(node) is not exactly the same for both nodes.\n. It also can contain asterisks, underscores etc, to accommodate for old IE hacks. Raw seems fine to me.\n. @ai We should also look at moving other values from prop into before. For instance, ! ends up in prop (like !color: red).\n. @ai My plugin, https://github.com/ben-eb/postcss-minify-selectors would benefit from a built in selector parser. :+1:\n. @ai\nSelector string:\nh1, h2, [href*=test i], a:after\nWill produce this AST:\njs\n{ type: 'root',\n  selectors:\n   [ { type: 'selectors',\n       rules:\n        [ { type: 'tag',\n            rules: [],\n            spaces: { before: '', after: '' },\n            value: 'h1',\n            combinator: '',\n            parent: [Circular] } ],\n       spaces: { before: '', after: '' },\n       parent: [Circular] },\n     { type: 'selectors',\n       rules:\n        [ { type: 'tag',\n            rules: [],\n            spaces: { before: '', after: '' },\n            value: 'h2',\n            combinator: '',\n            parent: [Circular] } ],\n       spaces: { before: ' ', after: '' },\n       parent: [Circular] },\n     { type: 'selectors',\n       rules:\n        [ { type: 'attribute',\n            rules: [],\n            spaces: { before: '', after: '' },\n            value: 'test',\n            combinator: '',\n            insensitive: true,\n            attribute: 'href',\n            operator: '*=',\n            raw: { insensitive: ' i' },\n            parent: [Circular] } ],\n       spaces: { before: ' ', after: '' },\n       parent: [Circular] },\n     { type: 'selectors',\n       rules:\n        [ { type: 'tag',\n            rules: [],\n            spaces: { before: '', after: '' },\n            value: 'a',\n            combinator: '',\n            parent: [Circular] },\n          { type: 'pseudo',\n            rules: [],\n            spaces: { before: '', after: '' },\n            value: ':after',\n            combinator: '',\n            parameters:\n             { type: 'parentheses',\n               selectors: [],\n               spaces: { before: '', after: '' } },\n            parent: [Circular] } ],\n       spaces: { before: ' ', after: '' },\n       parent: [Circular] } ],\n  spaces: { before: '', after: '' } }\nhttps://github.com/postcss/postcss-selector-parser\n. What about changing this to before? As in, an error that occurred before PostCSS?\n. I like input. :smile:\n. Awesome, thanks! :smiley:\n. No problem :smiley: \n. I'd like to write another module for handling comments in a CSS file; it should be responsible for removing or keeping comments conditionally. For example, it could remove all comments, but keep ones marked as important (/*! license */, etc), or source maps (/*# */). I'm not sure if there are many people who like to define comments this way, however.\n. @ai I'm working on one, yes. For me separation of concerns is very important.\n. @ai Thanks. I'll ping you when its ready to release.\n. @ai This is for CssSyntaxError, right? What do you think of bundling chalk to clean this up a bit?\n. @ai It might be good to do some automated browser testing of PostCSS to find out these problems and work around them if necessary. :smile:\n. @ai I was thinking tape with run-browser. That way you can write a test in node, browserify it dynamically and test it headlessly. I have such a test setup for another module:\nhttps://github.com/ben-eb/widow/blob/master/test.browser.js\nhttps://github.com/ben-eb/widow/blob/master/package.json#L29-L31\n. @sindresorhus Awesome. :+1:\n. Ah, good catch; what do you think of a hasToken method to ensure that the declaration had both ! and important?\nAlso, if you could help me understand how to unit test it I could cover these cases. :smiley:\n. @ai I've added test cases for this. Any other changes I should make? :smile:\n. Done. :+1:\n. Of course! Will just squash the history down. :smile:\n. I don't see why this couldn't use PostCSS to parse the CSS. If you have a look at https://www.npmjs.com/package/juice they are using a CSS parser; but of course we know that PostCSS's parser is the fastest available. @gedw99 I would have a look at juice and https://www.npmjs.com/package/inline-css - of course there's no real need to reinvent the wheel. :smile:\n. @MoOx I thought about perhaps changing the name of it, however for plugins like this that are essentially wrapping a module I think it's clearer to use the parent module name. :smiley:\n. It might be nice to extract some of the sections into separate files; for example, you could have other files to list recipes for working with PostCSS, another for plugins, etc. As we develop more plugins, we should explore the possibility of a plugin registry, such as http://gulpjs.com/plugins/\n. @MoOx Thanks, I've had a dig around in the source code and it looks like I might just be able to chain use calls:\njs\npostcss().use(plugin1).use(plugin2)\n:+1:\n. Please advise on how I accommodate these changes. I need to be able to keep my original API https://github.com/ben-eb/cssnano#scripting as well as this postcss([ require('cssnano') ]) sugar syntax, which I cannot get to work. I don't want to already release a breaking API change to support this.\n. Agreed, PostCSS itself should not be responsible for this.\n. Would it be possible to autofill that result parameter? So an API like this:\njs\nnode.warn('text', result);\nWhere result is optional?\n. PostCSS can infer the result object as the 'current' result.\n. The result is passed in the second parameter of the plugin. So we must know the current result, right?\n. I just thought that it might be nice to have a single parameter with an inferred result. I know that plugins can return a new result instance but in the majority of cases the result will be the same as what was passed in.\nBut it's not a big deal if this isn't possible with new nodes.\n. Fixed in https://github.com/postcss/postcss/commit/0b2d1fbf6b5fb090a98c843ddf14fbea0fc2d1bc.\n. @ai I don't have a problem with prefixing private properties with an underscore, it is consistent with other JS modules.\n. Good points, thanks. Will update. :+1:\n. I think finding a way for plugins to hook into certain events will be beneficial; for a lot of my modules, they do a lot of the same types of ground work to manipulate values. For example, with a rule like this:\ncss\nh1 {\n    margin: 10px 20px 10px 20px;\n}\nThe plugin does not know beforehand if any of the values can be transformed through it, so it has to map each value through list.space, and for some properties, list.comma, then apply the transformation. So my plugins postcss-colormin and postcss-convert-values both have to apply this same logic to split up the value and transform it.\nI believe that we can achieve a speed up if there was some way to hook this. :smile:\nHowever I would still like to be able to specify plugin order. So we need to be careful of not giving the developers enough hooks to register their modules into.\n. Exactly, @1j01. :smiley:\n. I'm not sure on exactly which hooks we should implement just yet, but I really like the idea of having a streaming transform to handle this, ala browserify.\n- https://github.com/substack/node-browserify#bpipeline\n- https://github.com/substack/labeled-stream-splicer\nOf course, doing it this way may end up changing a lot of PostCSS's internals and API, so I would be cautious to recommend this as I know that PostCSS developers are already looking for API stabilisation. But, let me illustrate with a potential rewrite of https://github.com/ben-eb/postcss-discard-comments:\njs\npipeline.get('comments').push(through.obj(function (node, enc, next) {\n    if (!remover.canRemove(node)) {\n        this.push(node);\n    }\n    next();\n}));\nAs you can see, this is not using any APIs such as node#remove - it is just not including the comment in the stream. That way, other plugins will not see that comment node at all, and because the pipeline is an array of streaming transforms, you could insert other plugins before or after it with unshift, push or splice.\n. @MoOx Indeed, but having a labelled pipeline would solve this problem of people using a linter before some non-standard syntax is compiled. The bem-linter plugin could hook into a validate label, which should be run after all values have been transformed.\n. By default, PostCSS should not be responsible itself for validating CSS. But, plugins can decide whether CSS is valid or not, and some kind of label/hook could be provided for this use case.\n. Well in such a system that I described, the user is not responsible for deciding the order of the plugins, that is delegated to the plugin developer. So for example postcss-pseudoelements and postcss-minify-selectors both have responsibility for modifying selectors, but the minify module should come last, to ensure the selectors are compressed properly.\nTherefore in this system I could push the minify selectors module to the bottom of the stack, and other developers could unshift their selector modules to the top. That way when a user wants to use the plugins they don't have to care about order, it is just abstracted away.\nOf course, currently yes you can specify the order and transforms will be applied like that. It makes sense as that's how things like gulp work. I'm just presenting an alternative way to construct this pipeline of transforms. :smile:\n. Yeah, I'm not even sure if this is the right way to go, it's just how browserify handle it. I think if I am to push this idea any further then I would have to do some kind of proof of concept, to see if it is worth developing. Would like to hear any alternative suggestions, of course.\n. I think a visitors API like Babel is nicer for parser work than an event based API.\njs\nexport default {\n    decl: {\n        enter: node => {\n            if (node.prop === 'bad') {\n                node.remove();\n            }\n        }\n    }\n}\n. @corysimmons One tip I can give you is to not rely on a large library like jQuery for writing a PostCSS module. Please feel free to browse any of my modules and check out their dependencies, if you have any questions, please ask them in the chat.\nhttps://gitter.im/postcss/postcss\n. @MoOx Thanks! :smiley:\n. If you just want to write JS functions, you might just like to write a PostCSS processor instead, because it gives you more flexibility. This function will output the expected behaviour at the bottom of the CSS file which is ran through PostCSS:\n``` js\nvar postcss = require('postcss');\nvar dataHeading = postcss.plugin('data-heading', function () {\n    return function (css) {\n        for (var i = 1; i < 9; i++) {\n            var rule = postcss.rule({selector: '[data-heading=\"' + i + '\"]'});\n            rule.append(postcss.decl({prop: 'width', value: (i * 10) + '%'}));\n            css.append(rule);\n        }\n    };\n});\n```\n. @benfrain I'm not sure that writing JS in CSS files is going to be beneficial, in comments less so. It would be akin to writing Ruby code in Sass comments, for all of those times where you need some custom functionality.\n@ai I'm not sure I like the each identifier for this; this should be reserved for iterating over a collection of items, such as [1, 2, 3].forEach. It seems like this should be done with for instead. Here is the relevant documentation for it in Sass: http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_10\n. Well, if this were to happen, all JS logic would have to be written inside comments, so that PostCSS didn't try to parse it as CSS. At a very basic level:\n``` css\n/\n(function () {\n    for (var i = 0; i < 9; i++) {\n        return '[data-heading=\"' + i + '\"] { width: ' + i + '0%; }';\n    }\n})();\n/\nh1 { color: blue }\n```\nSuch a parser would have to inspect comments for this syntax, eval the result and then replace the comment altogether with the result of the function call. But what about syntax errors? Code highlighting? Having comments inside the function? Having comments outside the function? If this were to happen you would probably expect something like this to work:\n``` css\n/*\n  Generate headings\n\n(function () {\n    for (var i = 0; i < 9; i++) {\n        return '[data-heading=\"' + i + '\"] { width: ' + i + '0%; }';\n    }\n})();\n*/\nh1 { color: blue }\n```\nThen, how do you distinguish from what is part of the comment and what is part of the function call? How do you handle this case?\n``` css\n/\nfunction test () {\n    console.log('.test {}');\n}\n/\nh1 { color: blue }\n/ test(); /\n```\nThis function does not inject anything into the CSS, nor does it call the console log. It just outputs:\n``` css\nh1 { color: blue }\n/ test(); /\n```\nUnless you are to keep some kind of state for all comments, to track function identifiers registered somewhere. It all gets too complicated very quickly.\nI think you are better to keep your concerns separate; write mixins in JS syntax, and then include them in your PostCSS runner. :smile: \n. @ai I was trying to illustrate why you wouldn't need it. It's definitely not something that I would want to support. :smiley:\n. This is not valid CSS, it's a custom rule which you designed to work with PostCSS.\nUsing an options object instead would mitigate this issue by declaring variables outside your CSS file.\n. @ai Yes, that should definitely be part of this module's responsibility. :+1:\n. No rush.\n. Perhaps we should find some alternative forum to discuss plugin ideas?\n. @ai We could just make a new repo exclusively for this. I don't know of anything better at the moment.\n. :+1: \n. :+1:\n. What I've been doing in cssnano is to update the current release notes whenever a child module adds functionality. So if cssnano is at 1.4.3 and I add some update to one of its children which improves compression, in that module it will be marked as a feature or bug fix accordingly, and then as cssnano would get that functionality 'for free' with semver, there's no need to push a new minor/patch version.\nSo I am pro-semver in this regard, it is a lot less manual than locking dependency versions and allows you to get on with more important things. :smile:\n. In my case, postcss-discard-duplicates does not diff selectors because it is not its responsibility. The module should not know about selectors because it might get it wrong if the logic is not complex enough, so it has to assume that the selectors are normalised beforehand. You may use postcss-minify-selectors for this purpose. And in any case, discard-duplicates is best when it operates on a global context.\n. I'm not sure I follow. My module is designed to operate on a global context. Other authors may choose to limit their module's scope, for example postcss-mixins only operates in @mixin and @define-mixin at rules: https://github.com/postcss/postcss-mixins/blob/master/index.js#L109-L117\n. @olegstepura Does https://github.com/postcss/postcss-plugin-context solve your issue?\n. What about a separate repository for this?\n. @ai I think a performance benchmark for PostCSS inside PostCSS is fine and should be part of test suites. But, comparing against other processors should be a separate module. This means that you can lock CI down to node 0.12 if you are having issues with iojs builds, and this doesn't affect the main PostCSS module. :smile:\n. I think we need to make https://github.com/postcss/postcss/blob/master/docs/guidelines/plugin.md#14-create-plugin-by-postcssplugin optional for plugin packs such as cssnano, until there is some built in way in PostCSS to create a wrapper module. Such as when fixing https://github.com/postcss/postcss/issues/280\nThe rest of the guidelines look good to me.\n. Agreed with @tunnckoCore - I am only doing this in my README because it is sort of an expected behaviour for PostCSS processors to support method invocation without parentheses. I would much prefer to write a README like so:\n``` js\nvar processor = require('postcss-processor');\nvar postcss = require('postcss');\nconsole.log(postcss([ processor() ]).process('h1{color:red}').css);\n```\nAlso - I use postcss-plugins as keyword because a lot of plugins were already under that namespace.\n. @ai I am only thinking in terms of consistency with other JS projects, for example a gulp plugin that would use this syntax: https://github.com/ben-eb/gulp-uncss\n. @ai Also, we should encourage users to use something like https://github.com/TrySound/postcss-load-plugins - where plugins can be lazily loaded, rather than all required in a huge block at the top of the file.\n. ^ :100:\n. @btholt @ai We could recommend plugin developers to use the npm version command to automatically tag their releases. I run this on every publish to npm:\nnpm version X.X.X && git push --follow-tags && npm publish\n. > All gulp plugin use braces, am I right ?\nI've written and contributed to a lot of gulp plugins. They always use parentheses.\n. It is impossible to do inside Less itself, which means that the statement is not misleading. Such a transformation requires you as a developer to parse the CSS from the Less output, modify it and then stringify it again, using some outside means. PostCSS already provides you with a CSS AST which you can modify using plugins.\n. @seven-phases-max You are talking about an undocumented, internal API. If Less is not intended to be used this way, then my statement still stands.\n. I think you have a fair point, which is that it is unfair to say that you absolutely cannot do this with another tool. I think the original intent behind this type of wording was to say that PostCSS makes such transformations easily, because its architecture is very much built on this idea of transforming an AST in memory, and is not built in a way that a 'classic' preprocessor is. For example, mixins, variables and the like are not baked into PostCSS, although there are plugins to do so.\nI think this sentence has touched a nerve, which was not its original goal. Personally I would be happy to update the language so that it is less arrogant. What do you think, @ai?\n. Other than the comments, :+1:\n. Thanks for your contribution. :smile:\n. :+1:\n. Would it be possible for a plugin pack to get a list of plugins that have \"already run\" and include them based on that data? For example, if someone wants to use cssnext and cssnano together, then they both contain postcss-calc. But in cssnano's case, it does not need to run postcss-calc again because cssnext already performed that conversion.\nI think the plugin author should be responsible for deciding if a bundled plugin should be run or not. Like you say, there are going to be cases where a user wants to run a plugin twice for good reason. We shouldn't prevent that from happening.\n. I think that responsibility should lie with the plugin developer though, and not the user. Because the developer should be familiar with how a PostCSS plugin chain works, and what potential plugin collisions exist. Like double autoprefixer inclusion, for instance.\n. I agree with @MoOx, we shouldn't silently remove plugins from the chain. But I would like to suggest this API for this feature:\njs\nmodule.exports = postcss.plugin('postcss-lang', function (opts, processor) {\n    if (!processor.has('postcss-calc')) {\n        processor.use(require('postcss-calc')({}));\n    }\n    return processor;\n});\nThis way the plugin pack developer has full access to the postcss processor instance and can detect existing plugins in the chain.\n. Testing a processor based on its version number could be brittle. Let us think about user agent strings and how verbose they have gotten over time. I would not like to start basing checks on specific versions of processors should we end up in this kind of mess where the version ranges become meaningless. PostCSS plugins should be small and have one responsibility. If there are some differing versions of a processor, the newer version should enable that plugin to perform its responsibility better.\nWrapper plugins, on the other hand, should only encapsulate functionality that is already in the ecosystem. I know that cssnano still bundles functionality, but it is my responsibility to extract that out once I have enough free time (not long left for deadlines, now). I think it should be the developer's responsibility to ensure they are using the current versions of their dependencies, not PostCSS's responsibility to let them guard against certain versions. In any case, the default behaviour for a PostCSS pipeline should be to include all plugins. This functionality we are talking about here is for those developers who know that they can potentially speed up their wrapper plugin by disabling 'already run' processors.\n. Looking at including this for cssnano 2.0. Any updates?\n. Yeah, I would have liked to do this by hand too, but I have no access to the current PostCSS instance. The API I proposed would allow for some really intuitive cross-module behaviour, and reduce duplication when people want to use cssnano in combination with some other modules. https://github.com/cssnext/cssnext/issues/156\n. @ai I return a PostCSS instance from cssnano: https://github.com/ben-eb/cssnano/blob/2.0/index.js#L35-L63 - are you suggesting to return a 'no-op' function that modifies result.processor?\n. @ai Perhaps I should make an interim module until we get full support within PostCSS?\n. Interim means a temporary period/arrangement. So I can make some module that provides an API for us to use temporarily, until such time as we add the feature to PostCSS.\n. The only issue I have right now is that people can't consume cssnano like this: postcss([ nano ]), because it returns a processor and not a function; so either we should deprecate the invocation-less style of initializing a plugin or provide some means to allow a processor using this API.\n. Indeed, it actually doesn't matter that I am using the plugin API, because cssnano is not registered as a plugin in result.processor.plugins.\n. @MoOx It doesn't help if people are using cssnext incorrectly;\njs\npostcss([ autoprefixer(), cssnext() ]);\nPostCSS will warn that cssnext is using autoprefixer? When in fact it is the first declaration that is unnecessary.\n. I am also concerned because I plan to include Autoprefixer in a removal only mode; if people already have it set up in its default mode then I would like to just silently disable it. It doesn't make sense in this use case to warn a user that it is being loaded twice, because its usage would be for different purposes. Similarly I suggested that we have overlapping functionality between cssnext/cssnano that can be silently disabled. How do we handle that use case?\n. OK. I'll include this hacky way for now.\n. For what it's worth, I tried the hacky way of silently disabling plugins. It causes more problems than it solves; for now I feel that this is a documentation problem and not something we should aim to solve in code.\nhttps://github.com/ben-eb/cssnano/issues/90#issuecomment-191994202\nNow, we also have https://github.com/postcss/postcss-devtools to show a user exactly what plugins are being used by their build, and their execution time. So a user experiencing problems with duplicate plugins could load that plugin and see that indeed, Autoprefixer (or another plugin) was being loaded more than once.\nIt is for these reasons that I think our efforts are better spent elsewhere, so I am closing this issue.\n. https://github.com/postcss/postcss-selector-parser supports 1:1 parse/stringify of selectors. Related: https://github.com/postcss/postcss/issues/235\n. Yeah, no problem. Let's get people using the parser and trying out its features before we merge it into PostCSS. I think 6.0 might be a nice release for it, as there are already enough features we have to refactor in 5.0. :smile:\nI also have to finish its documentation too.\n. Thanks for your contribution :smile:\n. @ai :+1:\n. @MoOx :grinning:\n. > But not for cases, when you didn't know what to search (it is a popular case in PostCSS, because it is a new tool class)\nThat's why I think having input and output examples should be done on the website, as well as recipes for more complex usage. :smile:\n. Sure. :+1:\n. @MoOx What do you mean?\n. What about handling async processors?\n. Agreed. Would save plugin developers from having to coerce it themselves (such as here https://github.com/ben-eb/postcss-minify-font-weight/blob/master/index.js#L5-L9)\n. @ai Can we not do something like this:\n``` js\nexport default class Declaration extends Node {\n    // ...\n    set value (value) {\n        this.raw._value = value;\n    }\nget value () {\n    return String(this.raw._value);\n}\n\n}\n```\n. Does it matter if they set that indirectly? As long as the AST returns a string type?\n. Ah, the joys of no private properties in JS. :smile:\n. @btholt Any updates? :smile:\n. @iamstarkov An early version is here: https://github.com/btholt/postcss-flex\nPerhaps we should move discussion to that repo instead.\n. @btholt No worries. Thanks for the update! :smile:\n. It might be worth making postcss-import an async plugin. :smile:\n. :+1: \n. :+1:\n. Can you make sure it passes the plugin guidelines? I checked the source code and you are not passing these:\n- https://github.com/postcss/postcss/blob/master/docs/guidelines/plugin.md#14-create-plugin-by-postcssplugin\n- https://github.com/postcss/postcss/blob/master/docs/guidelines/plugin.md#21-plugin-must-be-tested\n- https://github.com/postcss/postcss/blob/master/docs/guidelines/plugin.md#42-put-input-and-output-examples\n- https://github.com/postcss/postcss/blob/master/docs/guidelines/plugin.md#44-postcss-plugin-keyword-in-packagejson\n. Too quick for me. :smile:\n. Can you ensure that the modules are passing the plugin guidelines?\n- postcss-plugin keyword, not postcssplugin.\n- Provide an input and output example on your README.\n. @kristoferjoseph Great, thanks! :+1:\n. Looks good to me. Thanks for your contribution. :smile:\n. Those two tasks are not equivalent. If you don't return your stream then gulp cannot calculate the time the task took.\n. No problem. I almost feel like a broken record the amount of times I've written that. :smile:\n. I am not really a fan of this proposed change, because it is not a part of the CSS grammar. Typically such leading characters are used by some browser developers as property hacks.\nCustom parsers will be arriving in 4.2 however to support this use case.\nWhat do you think, @ai?\n. I don't think I ever liked the API moving non-space characters out of the property key and into before. So I'd be happier if the full property name included hacks and all non whitespace tokens. But this should be looked at in v5 as it is a breaking change.\n. Single line comments are not valid CSS. PostCSS will be able to parse them once custom parsers land in 4.2. https://github.com/postcss/postcss/issues/140\nI plan to add this to postcss-discard-comments when this is released.\n. This is somewhat related: https://github.com/ben-eb/cssnano/pull/42\nI would rather not have to write code that tidies up after other plugins. https://github.com/ben-eb/cssnano/blob/issue-26/lib/styleCache.js\n. I'm going to try a different tack here, as I still don't like the duplication of this utility across the modules that I use it in. Can we add a new method, cloneExact which performs this behaviour, and deprecate it once we fix the actual clone method? This way I can rely on PostCSS again to clone nodes without having to write my own clone utility.\nI can send a patch for this if you think it's a good idea.\n. What a great idea. :+1:\n. Thanks. :+1: \n. :+1:\nCan you move the position so that it maintains alphabetical order please, and squash your history down?\n. You have two typos in there; rbga and shorthad.\n. @MadLittleMods Perhaps I'm missing something, but in that documentation expressions don't seem to be applied outside of the context of JavaScript/HTML. e.g:\nhtml\n<DIV ID=\"oDiv\"\n  STYLE=\"background-color: #CFCFCF; position: absolute; \n         left:expression(document.body.clientWidth/2-oDiv.offsetWidth/2);\n         top:expression(document.body.clientHeight/2-oDiv.offsetHeight/2)\">\nExample DIV\n</DIV>\nSo I am not sure if it is relevant in this context, but then again I've never had to use it.\n. @ai Yep, you are right. This thread has a nice insight into its usage: http://stackoverflow.com/questions/6191679/css-expressions\n. Done. Please move any discussion to https://github.com/ben-eb/stylehacks :smile:\n. :+1: \n. Awesome plugin, thanks. :+1: \n. Looks good. Can you please maintain the alphabetical order of that section and then squash your commits down? If you are unfamiliar: http://blog.steveklabnik.com/posts/2012-11-08-how-to-squash-commits-in-a-github-pull-request\n. Did you mean to close? :smile: \n. Thanks! :+1:\n. See also: http://sass-lang.com/documentation/file.SASS_REFERENCE.html#output_style\n. I've got a bit of time to do this now. @yisibl, @ai - any objections? :smile:\n. Done! https://github.com/ben-eb/perfectionist\n. Re-ordering looks good to me. Thanks :+1:\n. I think this use case is a little too specific to be included directly; but you can take what you have here and make it a separate module, as it doesn't really depend on anything that doesn't exist already on the Node class.\n. Awesome, thanks! :grinning: \n. I am in favour of all of the above. We should definitely make stability level mandatory for future CSS syntax, and I would even go as far to make that a PostCSS plugin rule.\n. I don't think this is a good pattern to endorse. If it is, then other popular CSS files should be wrapped too; but why stop there? Why not postcss-animate-foundation-normalize which bundles three libs together? IMO it bloats the ecosystem unnecessarily and isn't any better/simpler for our users.\npostcss-import already solves this use case. Our users can pick the CSS frameworks that they would like to load, which will of course differ from project to project.\n. Thanks for your understanding. I'll go ahead and close.\n. This has come up in the Gitter chat before. @jonathantneal started work on something similar.\nI agree that this would be beneficial. One of the things I want to work on is normalizing border values; these are all equivalent:\ncss\nh1 {\n  border: 1px solid red;\n  border: 1px red solid;\n  border: solid red 1px;\n  border: solid 1px red;\n  border: red 1px solid;\n  border: red solid 1px;\n}\nKnowing which values are units, which are colours & which are keywords would be really great for this use case and others.\n. I think we should ignore it for now. This functionality is more for supporting CodePen's use case; postcss-use only appends plugins to the current list. However if there is some valid use case that were to prepend plugins like you describe we can look at it then.\nUnless there is some simple fix?\n. You should move that logic in the function that processes the CSS, like so:\nhttps://github.com/postcss/postcss-use/blob/master/index.js#L11-L15\n. You need to write some tests for this new functionality.\n. There's no link to the plugin?\n. :+1: \n. @ai I've been running appveyor and travis for cssnano, it's pretty good so far. :+1:\n. @johnotander Nice plugin. You could consider using the messages API and https://github.com/postcss/postcss-reporter for your logging, so that it is consistent with other plugins that lint CSS.\n. Ping me if you're in the UK and want to meet up for drinks.\n. It might be an idea to release a patch containing the old properties as aliases to the new ones (maybe just as setters/getters that warn when they are used), so that authors will be aware of this upcoming change.\n(does depend on your timeline for 5.0 release of course)\n. @ai If we add deprecation warnings to the 4.x codebase then we can change the 5.x codebase to use the new insert methods. The point is more that people will be aware of the code change because it will be warning them when it is used (and providing them with an upgrade path).\n. :+1: \n. postcss-* plugins first please. :smile:\n. Fixed up. https://github.com/postcss/postcss/commit/02dc4509875130d31ea12b098eefa00ba9c46b36\n. I agree with @MoOx. You are putting some JS object on the result class to output a JS file? And then the JS file has to be quote-delimited? What's wrong with browserify? Or webpack?\nIMO this encourages some horrible anti-patterns, and I don't see what relevance it has to PostCSS as it doesn't manipulate the existing AST.\n. Indeed, you can achieve this functionality without even loading PostCSS:\njs\nvar result = \"console.log('hello world');\";\nrequire('fs').writeFileSync('app.js', result);\n. I'm not sure that I follow your example. We can do that without attaching a JS property to PostCSS in the first place.\n. I don't think that PostCSS is a bad fit for this project, in fact you should use it inside FunCSS to parse the CSS and generate JS from that. I just disagree with the methodology used to try and couple the two together, because there are better ways to do that, for example browserify/webpack middleware. Having a plugin based architecture in FunCSS seems like the best architectural decision.\nBut I think it's a cool project, and I've definitely wanted something like functional CSS for a while, so good luck with it. :+1:\n. Looks good to me, I don't really have anything to add to this.\n. Configs could support functions if they were JS based. Like:\njs\nmodule.exports = {\n  'postcss-apply-function': function () {}\n};\nOr JSON based without functions.\n. I agree with @MoOx about postcss-use. It was created for a very specific purpose; personally I would not want to configure PostCSS plugins in my CSS files. It goes against what I think PostCSS' aim is, to remove logic from CSS and put it in JS instead.\n. @ai But rather than copying a block of @use lines to all projects and all CSS files within those projects, why not a global config file?\nEven local files with .postcssrc.\n. @ai We could provide an API to disable config lookup for plugins like autoprefixer/cssnano etc.\n. @ai How about on postcss.org/api?\n. Sure. :+1:\n. :+1:\n. Thanks. :+1: \n. Merged in https://github.com/postcss/postcss/commit/8a8ae23dc84d78ec5ef2e76c98058523eef4d227. Thanks. :+1:\n. css\ninput[type=\"number\"]: -webkit-inner-spin-button {}\nWill crash cssnano, so looks like it was not introduced in 5.x.\n. I am in favour of merging this request, with the condition that it passes the plugin guidelines. Currently there are no tests written; PostCSS plugins must be tested.\nLike you say it promotes consistency. I don't see why it shouldn't make the list.\n. Thanks. :+1: \n. > My own take would to be to make sure that PostCSS can handle any valid CSS syntax.\n:+1:\n. Thanks. :+1:\n. Duplicate of https://github.com/postcss/postcss/issues/415.\n. @joshdrink 3.0 is blocked by autoprefixer update, sorry.\n. Thanks. :+1:\nhttps://github.com/postcss/postcss/commit/312e0fb160b397e749337a5353435f56873f85ef\n. @jedmao The raws property was renamed from raw before 5.0 was released, so the deprecation warning has probably not been updated. :smile:\n. Does this issue help? :smile:\nhttps://github.com/postcss/postcss/issues/415\n. You're missing a link to the plugin. Can you fix up and squash the commits please?\n. Test case? :smile: \n. Thanks. :smile: :+1: \n. Bug is that postcss favours the raw decl.raws.value.raw over decl.value. So a modified decl.value is not used, instead I have to do:\njs\nif (rule.raws.value) {\n  rule.raws.value.raw = rule.value;\n}\n. You're right, it's out of scope. However, you can write a module that does what you're looking for in terms of JS output, and then using PostCSS to iterate a stylesheet in order to find the rules that should be transformed by polyfill.\nYou might like to team up with @cie as he was also looking into polyfilling. :smile:\nFurther reading: https://github.com/postcss/postcss/issues/476\n. @ai It's a node engine restriction. We're not polyfilling anything. :smile: \n. @leftstick Thanks! :+1: \n. This is resolved in 5.0.8. I missed a step when publishing the last version, sorry for the inconvenience.\n. https://github.com/postcss/postcss/commit/8116c1f3c843ae4ecc639e77d575fb2d031ffacf\n. Couple of fixes first, please:\n- postcss-plugin in package.json https://github.com/postcss/postcss/blob/master/docs/guidelines/plugin.md#44-include-postcss-plugin-keyword-in-packagejson\n- You have duplicate author and license keys in package.json, which is correct?\n. Cool, thanks. :+1: \n. https://github.com/postcss/postcss/commit/77d80ef830f5e822e8fdc1aaed0a98f51ffb8cc5\nThanks. :+1: \n. @ai It's about seeing which Sass features are being used in the SCSS source code. For example you could be using @for or @each and it would lint those.\n. https://github.com/TrySound/postcss-value-parser :smile:\n. @MoOx Seems rule.nodes got mangled. I'll have a fix out soon. :smile:\n. Should be fixed by postcss-merge-rules@2.0.1, but I don't have the time to reproduce a test case locally. @franckmaurin Can you please verify?\n. Cool, thanks! :+1: \n. I am also :-1: on this.\n. :+1: \n. Single line comments are not valid CSS, which is why they are unrecognised by the default parser. If you want to process them, load https://github.com/postcss/postcss-scss.\nhttps://github.com/nDmitry/grunt-postcss#optionssyntax-optionsparser-optionsstringifier\n. :-1:\nhttps://github.com/postcss/postcss/issues/312\n. @ai @dehuszar It helps if you push a PR to a separate branch, rather than master, then your PR won't contain unrelated commits.\n. @ai Perhaps we can revisit this for PostCSS 6?\n. OK. But you know, import { Parser } from 'postcss'; is a much more elegant solution than using string paths.\n. You can either upgrade from node 0.10 or polyfill the Promise API before you run PostCSS.\nMore information here: https://github.com/postcss/postcss/issues/311\n. That's fine, you can load the polyfill before you call gulp-autoprefixer. From the usage section:\n\nIf you want to run PostCSS on node.js 0.10, add Promise polyfill:\njs\nrequire('es6-promise').polyfill();\nvar postcss = require('postcss');\n\nhttps://github.com/postcss/postcss#usage\n. What do you mean by custom values?\n. Nice plugin, thanks! Can you write some tests for plugin guidelines compatibility, please?\nhttps://github.com/postcss/postcss/blob/master/docs/guidelines/plugin.md#21-plugin-must-be-tested\n. Feel free to re-use my tests; simple input/output testing.\nhttps://github.com/ben-eb/postcss-minify-font-weight/blob/master/test.js\n. @lukelarsen Any updates? Would you like me to send you a pull request for tests?\n. Done. https://github.com/lukelarsen/postcss-hidden/pull/5\n. We changed the readme since this was submitted so I made a fresh pull request.\nhttps://github.com/postcss/postcss/pull/704\n. Yeah, this seems like a much better solution than using mixins. :+1:\n. :+1: \n. :+1: \n. @ai Actually, all these work in IE7 or less:\ncss\n.selector { !property: value; }\n.selector { $property: value; }\n.selector { &property: value; }\n.selector { *property: value; }\n.selector { )property: value; }\n.selector { =property: value; }\n.selector { %property: value; }\n.selector { +property: value; }\n.selector { @property: value; }\n.selector { ,property: value; }\n.selector { .property: value; }\n.selector { /property: value; }\n.selector { `property: value; }\n.selector { ]property: value; }\n.selector { #property: value; }\n.selector { ~property: value; }\n.selector { ?property: value; }\n.selector { :property: value; }\n.selector { |property: value; }\nvia http://browserhacks.com/\n. :+1: \n. Thanks! :+1: \n. Thanks for your contribution. :+1:\nhttps://github.com/postcss/postcss/commit/294c793f72ada0daf8ca56dc4c4c0c3048d8a5f7\n. You might want to fix this line: https://github.com/komlev/postcss-current-selector/blob/master/index.js#L2\n. Thanks. :+1: \n. You can install from github to work around this:\njson\n\"ava\": \"sindresorhus/ava#945dbea40a6a500a24d54ebcc7e10dcd75647fc7\"\n(closing as not an issue with PostCSS :wink:)\n. Thanks, Peter. :+1:\n. Thanks! :+1: \n. Thanks. :+1:\n. We do this because otherwise you need to configure a JSON loader for webpack. :smile: \nhttps://github.com/postcss/postcss/commit/eb3f7dcdbcd4afdbee1c95af9310234837ff3ce2\n. I read docs offline. It's much easier than opening a browser, searching for the repository, and using the web UI to find the relevant file. I can do it all from node_modules using Atom.\n. Good to remember this link, too. http://isup.me/julian.io :smile: \n. You've missed a semicolon on your @import rule, which is invalid.\n. I thought we had a throw especially for a missed semicolon? Or does it not work for atrules because there are two syntaxes? @foo bar; & @foo bar {}\n. For what it's worth, postcss-merge-rules hasn't been updated since last December. Would appreciate some test case that can reproduce the problem so that we can ensure that it doesn't happen again.\n. @jwdotjs You're welcome. :smiley:\n. I agree with @ai, it's redundant. Especially when you can generate this list from the tags;\ngit for-each-ref --sort=taggerdate --format '%(refname) %(taggerdate)' refs/tags\noutputs:\nrefs/tags/0.1 Mon Nov 4 22:08:13 2013 +0200\nrefs/tags/0.2 Wed Dec 18 00:46:13 2013 +0100\nrefs/tags/0.3 Thu Feb 13 23:28:30 2014 +0400\nrefs/tags/0.3.1 Tue Feb 18 16:24:30 2014 +0400\nrefs/tags/0.3.2 Wed Feb 19 15:04:20 2014 +0400\nrefs/tags/0.3.3 Sun Mar 2 13:14:22 2014 +0400\nrefs/tags/0.3.4 Tue Mar 4 00:23:16 2014 +0400\nrefs/tags/0.3.5 Fri May 30 13:56:04 2014 +0800\nrefs/tags/1.0.0 Mon Jun 23 13:53:29 2014 +0900\nrefs/tags/2.0.0 Wed Jul 23 10:51:06 2014 +0400\nrefs/tags/2.1.0 Sun Jul 27 13:14:26 2014 +0400\nrefs/tags/2.1.1 Thu Aug 7 01:49:54 2014 +0400\nrefs/tags/2.1.2 Fri Aug 8 23:34:28 2014 +0400\nrefs/tags/2.2.0 Sun Aug 17 18:51:22 2014 +0400\nrefs/tags/2.2.1 Fri Aug 22 16:29:19 2014 +0400\nrefs/tags/2.2.2 Wed Aug 27 19:24:20 2014 +0400\nrefs/tags/2.2.3 Thu Aug 28 03:15:52 2014 +0400\nrefs/tags/2.2.4 Mon Sep 1 21:53:18 2014 +0400\nrefs/tags/2.2.5 Thu Sep 25 00:53:15 2014 +0400\nrefs/tags/2.2.6 Fri Oct 31 23:53:25 2014 +0300\nrefs/tags/3.0.0 Wed Nov 12 01:12:36 2014 +0300\nrefs/tags/3.0.1 Thu Nov 13 21:38:13 2014 +0300\nrefs/tags/3.0.2 Fri Nov 14 16:58:17 2014 +0300\nrefs/tags/3.0.3 Fri Nov 21 15:53:20 2014 +0300\nrefs/tags/3.0.4 Sat Nov 22 11:26:48 2014 +0300\nrefs/tags/3.0.5 Thu Nov 27 23:36:49 2014 +0300\nrefs/tags/3.0.6 Sun Dec 7 23:03:38 2014 +0200\nrefs/tags/3.0.7 Tue Dec 9 12:14:31 2014 +0300\nrefs/tags/4.0.0 Tue Dec 30 13:37:49 2014 +0100\nrefs/tags/4.0.1 Sun Jan 11 19:43:17 2015 +0100\nrefs/tags/4.0.2 Sat Jan 24 20:13:55 2015 +0300\nrefs/tags/4.0.3 Wed Jan 28 15:40:35 2015 +0300\nrefs/tags/4.0.4 Sat Feb 14 13:43:45 2015 +0300\nrefs/tags/4.0.5 Mon Feb 23 16:28:59 2015 +0300\nrefs/tags/4.0.6 Tue Feb 24 15:42:00 2015 +0300\nrefs/tags/4.1.0 Wed Apr 1 18:31:53 2015 +0300\nrefs/tags/4.1.1 Thu Apr 2 10:15:11 2015 +0300\nrefs/tags/4.1.2 Thu Apr 2 13:56:01 2015 +0300\nrefs/tags/4.1.3 Sun Apr 5 21:53:10 2015 +0300\nrefs/tags/4.1.4 Mon Apr 6 02:51:18 2015 +0300\nrefs/tags/4.1.5 Tue Apr 14 00:45:36 2015 +0300\nrefs/tags/4.1.6 Sun Apr 26 20:45:04 2015 +0300\nrefs/tags/4.1.7 Wed Apr 29 01:34:54 2015 +0300\nrefs/tags/4.1.8 Fri May 1 03:16:18 2015 +0300\nrefs/tags/4.1.9 Tue May 5 13:31:41 2015 +0300\nrefs/tags/4.1.10 Mon May 11 20:58:51 2015 +0300\nrefs/tags/4.1.11 Sat May 16 20:13:19 2015 +0300\nrefs/tags/4.1.12 Sun Jun 21 22:01:12 2015 -0400\nrefs/tags/4.1.13 Tue Jun 23 18:55:51 2015 -0400\nrefs/tags/4.1.14 Sat Jul 4 13:57:46 2015 +0300\nrefs/tags/4.1.15 Tue Jul 7 18:23:48 2015 +0300\nrefs/tags/4.1.16 Tue Jul 7 21:53:37 2015 +0300\nrefs/tags/5.0.0 Wed Aug 19 21:56:36 2015 +0300\nrefs/tags/5.0.1 Thu Aug 20 23:55:24 2015 +0300\nrefs/tags/5.0.2 Sat Aug 22 17:11:07 2015 +0300\nrefs/tags/5.0.3 Sat Aug 29 01:00:52 2015 +0300\nrefs/tags/5.0.4 Tue Sep 1 21:21:26 2015 +0300\nrefs/tags/5.0.5 Sat Sep 12 13:30:58 2015 +0300\nrefs/tags/5.0.6 Mon Sep 21 19:38:07 2015 +0300\nrefs/tags/5.0.7 Fri Sep 25 11:33:25 2015 +0100\nrefs/tags/5.0.9 Thu Oct 8 19:30:12 2015 +0100\nrefs/tags/5.0.10 Thu Oct 15 00:36:36 2015 +0100\nrefs/tags/5.0.11 Sat Nov 7 16:56:13 2015 +0300\nrefs/tags/5.0.12 Fri Nov 13 17:20:51 2015 +0200\nrefs/tags/5.0.13 Wed Dec 16 16:54:11 2015 +0300\nrefs/tags/5.0.14 Sun Jan 3 22:41:42 2016 +0100\nrefs/tags/5.0.15 Thu Feb 11 17:15:42 2016 +0300\n. It might be nice to use https://github.com/wooorm/vfile for this. \ud83d\ude04 \n. Thanks! :+1:\nhttps://github.com/postcss/postcss/commit/7d4ebfa122b9250d36226d314d2b6655ec9c8487\n. @ai Keep PostCSS core minimal; I don't want or need @use functionality for cssnano or other modules. Unless, we are to extract current core functionality into some other module that solely provides the parser/stringifier/source maps support (and nothing else) as it stands today.\n@TrySound Yep, no problem.\n. @davidtheclark Yeah, this language confused me at first too, which is why I am not sure about how we should begin to represent complex expressions in a simple way. So my understanding of an expression is that it encompasses anything from a simple value, to a list of values, or object dot syntax. So for example in babylon (Babel's parser), this is a MemberExpression;\njs\n'@'.charCodeAt(0);\nNow, we may not use the exact same terminology for CSS grammar, but we need to think about appropriate structures for values. All of these types should be represented;\ncss\nborder: 1px solid red; /* space separated list of values */\nfont-family: Helvetica, Arial, sans-serif; /* comma separated list of values */\nbackground-image: url(unicorn.jpg); /* function */\nbackground: red url(unicorn.jpg) repeat-y; /* space separated list of values with a function */\ncontent: 'foobar'; /* string literals */\nArguably each of these values would be expressions if we were using JS terminology. But if we are not to use expression, then what do we use? value? But each of the members inside the expression are values. So this can be confusing if we don't get it right, any suggestions are welcome. :smiley:\n. I wasn't aware that this document existed; of course, we should aim to use words derived from the specification whenever possible. :+1:\n. @thejameskyle I'm not sure that I follow on the custom syntax thing; it is true that PostCSS plugins do define their own syntax sometimes, but I think that it is done within the limits of the CSS grammar as it is today. In cases where it isn't, for example single line comments, we have custom parsers that provide extensions to the default parser to support these use cases. Perhaps you could follow up with an example that illustrates your problem? :smile:\nSimilarly, https://github.com/postcss/postcss-selector-parser does parse selectors but makes no assumptions about for example pseudo selectors that it doesn't understand; e.g. you can easily define some made up function and it will still be parsed correctly:\n``` css\na:unicorn(stoic) {\n}\n```\nIs parsed the same as:\n``` css\nspan:not(.stoic) {\n}\n```\n. OK sure; but right now, PostCSS doesn't support that kind of expression. It would require a custom parser to do this. :smile:\n. > BTW, we still need to have old API. So decl.value should be a string.\nWhy? What if some plugin authors choose to update decl.value and others choose to update decl.valueTokens? How does PostCSS manage that plugin conflict? It's important to realise, in @davidtheclark's words;\n\nSo many plugins either do or absolutely should use those parsers.\n\nI can't see how keeping this API around provides any benefit over more appropriate node parsing. It should be either/or, not both.\n. @thejameskyle @ai Agreed, looks like we have a lot to learn.\n. I think we must parse each and every node. Currently we don't do this, which is what I find to be brittle and means that plugins must be run in an exact order; this is not a good developer experience.\n. > I don't follow why you think parsing nodes (and by this I mean parsing a rule's selector value into an AST, for instance) is a necessity.\nIt's a necessity because in order to facilitate two ways of writing plugins (querying a node's value tree or querying a node's stringified value), PostCSS needs to maintain a string representation of a node's value (for instance) as well as a node tree. So that whichever one is set will update the other, in order to satisfy a plugin's expectations. That seems really inefficient to me as PostCSS will have to do this for every plugin.\nThe rest of your post I believe is how Babel works; calling a Path method such as replaceWith will cause a requeue of affected nodes so that plugins have multiple chances of running in order to properly satisfy function resolution.\nI'm not sure about errors. Perhaps they should be handled after exiting the Root node?\n. > And the previous proposed solution to that doesn't satisfy that need?\nWell.. it does and doesn't. For argument's sake, let's have 20 plugins in the same PostCSS instance that use var ast = postcss.selector.parse(rule.selector);. Now, we have a bottleneck because 20 plugins need to parse those selectors and then stringify them. This is what we currently are doing (via postcss-selector-parser), which is inefficient because you have 20 parsing steps and 20 stringifying steps for the same selector. Whereas, if we parse all of these we will get a slowdown on initial parse, but it will be made up with a richer AST. More to the point though, we have a unified API which is much more preferable in my eyes than 3 different ones (postcss, postcss-selector-parser, postcss-value-parser).\nSo for example with a unified API we can iterate through all comment nodes whether they are in selectors or values, and then remove them:\njs\n{\n  comment: {\n    enter: path => path.remove()\n  }\n}\nThis is much harder to do at the moment because a developer has to negotiate three different parsers.\n. Do we want to go down this road with PostCSS? We could make PostCSS only parse 'legal' grammars, but that is slower than \"loosely\" parsing as we are doing right now. If anyone wanted some custom syntax it would be harder to implement than it is currently.\nFor my use case I don't care about the semantics of tokens inside pseudo-selectors, which is why it works like it does. I don't think it can be that big of a deal given that it's been an open issue since last July. I guess tagging things 'help wanted' doesn't seem to make much of difference.\n. Your original code is missing a few parentheses.\n``` js\nvar gulp = require('gulp'),\n    sass = require('gulp-sass'),\n    postcss = require('gulp-postcss'),\n    autoprefixer = require('autoprefixer');\ngulp.task('css', function () {\n    return gulp.src('sass/style.scss')\n        .pipe(sass()).on('error', sass.logError)\n        .pipe(postcss([\n            autoprefixer({browsers: ['last 2 versions']})\n        ]))\n        .pipe(gulp.dest(''));\n});\n```\nHave a look into http://eslint.org/ so that you can catch these mistakes more easily. :smile:\n. UnCSS uses PostCSS now.\nhttps://github.com/giakki/uncss/blob/master/package.json#L44\n. Duplicate of https://github.com/postcss/postcss/issues/339.\n. Duplicate of https://github.com/postcss/postcss/issues/364.\n. This method signature is lacking the css input, it should be:\njs\nplugin.process(cssString, pluginOptions, processOptions);. Yeah, it's correct, there's a nice blog post on CSS mixins here https://blog.hospodarets.com/css_apply_rule. \ud83d\ude04 \ne.g.\n```css\n:root {\n  --zero-size: {\n    width: 0;\n    height: 0;\n  };\n--triangle-to-bottom-size: 50px;\n  --triangle-to-bottom-color: #007bff;\n--triangle-to-bottom: {\n    @apply --zero-size;\n    border-style: solid;\n    border-width: var(--triangle-to-bottom-size) var(--triangle-to-bottom-size) 0 var(--triangle-to-bottom-size);\n    border-color: var(--triangle-to-bottom-color) transparent transparent transparent;\n  };\n}\n.triangle-to-bottom {\n  @apply --triangle-to-bottom;\n}\n```. Changing the parser behaviour could be problematic. \ud83d\ude15 \nDo we want to wait for a major version?. OK, fair enough. \ud83d\udc4d . Do you have a date for when you'd like to release a new major?. Alright, that seems OK. Going to have to start this monorepo transition! \ud83d\ude00. I like showing the simplest example based on the lowest common denominator (the console, available both in browser and node). This is most amenable to \"copy, paste & run\".\nhttps://runkit.com/npm/cssnano. This is missing a link to the plugin. \ud83d\ude04 . If it's backwards compatible with the 5.0 tokenizer then we can do a minor if you like. But I think it's better to be safe and release it as a major, it protects our users from potential unforeseen breaking changes.. Care to elaborate? \ud83d\ude04 . Probably related: https://github.com/postcss/postcss/issues/364. Array.prototype.includes isn't supported until Node 6, not the best idea to get rid of indexOf just yet. \ud83d\ude04 . I thought we were still supporting Node 4 until it goes out of LTS? That's April 2018. \ud83d\ude04\nI can't remember what I wrote in Gitter but I don't think I advised that we drop Node 4 support. If anything, it would have been 0.12 that I was recommending to drop seeing as it is end of lifed.\nhttps://github.com/nodejs/LTS. These might be good to look into:\n\nhttps://github.com/facebook/jest/tree/master/packages/jest-validate\nhttps://github.com/epoberezkin/ajv. to use ?\n. Can you fix the your in this sentence to you please?\n. > Asynchronous plugins\n. Rather than \"the next\" can we put \"other\" here?\n. Good catch, fixed in https://github.com/postcss/postcss/commit/fbb8a913bfd0b5529e15768715cbdb42beca133e.\n. This test doesn't do anything, because in the final stringify step, PostCSS will convert everything to a string. You need to check that each decl in the rule has a value of String type.\n. I don't understand why we need to print a warning here.\n. \n",
    "pkyeck": "so, single line comments are possible right now? or with the upcoming 5.0 release?\n. ",
    "bfred-it": "Does this mean one will be able to run PostCSS on SCSS files?\nCurrently I run PostCSS after Sass but that limits its functionality considerably when Sass encounters syntax it doesn't understand. With this I can run PostCSS before Sass?\n. ",
    "iamstarkov": "@MoOx is cssnext in danger? =)\n. @btholt good news =)\n@simonsmith No, I mean to add table-smth as fallback to flex-smth for IE9\n. yep, you are right fallback styles should be separated in some way\n. IE is primarily for example, and because I know for sure that flexbox can be imitated in it\n. can you try to turn it into something useful? as @simonsmith mentioned you can rely on .no-flexbox class instead of @support\n. :sparkles: it will be awesome! :sparkles:\n. any news here?\n. Is it already plugin out there?\n. \u263a\ufe0f glad to hear\n. it\u2019s not that critical issue for postcss-development and improvement but it will be negative buzz around postcss about broken syntax highlighting. So we should develop it with highlighting in mind\n. guys, you are too fast. 4 comments and two closed issues in only 5 minutes =)\n. im not 100% sure how highlighting is working in editor, so I wiil ask prob stupid question. Is there any way to say to editor which grammar is valid and which is not? for example postcss-nested will say nested selectors are valid, postcss-simple-vars will say that $smth is also valid and so on\n. its great, sorry for bothering then\n. awesome\n. this list is alphabetically sorted, I think\n. good question\n. please use npm-run-all for better developer experience on windows, take a look at this postpublish script example\n. what is a different between cover and check-coverage\n. if postcss will use coveralls service then it will be for free for all pull-requests\n\n. you dont need to define path to binary in the node_modules, npm are doing it for you\n\"cover\":          \"isparta cover _mocha -i lib/*.es6\",\n. > but && doesn't work on the native command prompt. I think that's what he's talking about.\nexactly\n. > Actually, I do, because I tried your syntax first, but it doesn't work on Windows.\n\nThis is because _mocha points to node_modules/.bin/_mocha.cmd, which doesn't work in this case.\n\n=(( didnt know about this\n. ",
    "davidtheclark": "@MoOx: Too bad. I'm yet to be convinced by the style-in-JS advocates, mainly because on my current big project CSS works great, and trying to do the same things in JS would be a big headache, lots of added complexity. We will see! Curious to hear about it.\n. I have a question about plugin practices: \nSome plugins are themselves functions that receive CSS as an argument, and can therefore be used like this:\njs\npostcss().use(plugin)\nWhile other plugins return the functions that receive CSS as an argument, and therefore must be called to function, like this:\njs\npostcss().use(plugin())\nSo consumers have to know which way each plugin works.\nThe latest PostCSS documentation here https://github.com/postcss/postcss#processor seems to suggest that the first way is the way to go --- but doesn't have an example of the best way to pass options objects. I'm assuming that people went the second route because it is useful for passing options objects.\n@ai What is the way that you think plugin authors should do this? \n(This came up when I was working on my own plugins and also here: https://github.com/necolas/postcss-bem-linter/pull/8)\n. I like your solution @ai, because it's flexible: either way, the plugin works. I wonder if the docs here https://github.com/postcss/postcss#processor could be clarified to explain the situation, maybe provide this example?\n. I am confused by this thread. Is a mixin plugin going to happen and this is to determine what syntax to use? That's the conversation I'd like to contribute to.\nI agree with @MoOx that using a standardized syntax is always preferable (because it's interoperable and future-proof) if there is one; but I disagree that PostCSS needs to limit itself to CSS standards. Is additional flexibility (e.g. for at-rules declaring or including mixins) a significant issue? (i.e. Are non-standard at-rules a big leap?) I'm not clear on @ai's stance on that.\nAnd as @ai pointed out: if PostCSS wants to win over developers who have become accustomed to the powers of Sass and Less, that's not going to happen by dismissing features that people do find valuable in real experience. For every person that thinks \"programming\" features of Sass/Less spoil CSS and hurt maintainability, there's another with just as much experience who believes the opposite, that those features improve CSS and help maintainability. It's silly to even debate whether there are \"actually\" any \"legitimate\" use-cases for mixins, considering how many people use and love mixins in Sass and Less.\n. Also: some of the comments above (and elsewhere) suggest just using both --- (maybe a subset of) Sass for Sass-y stuff, PostCSS for legit CSS. That's generally fine, sure; but here are two reasons I'd prefer to replace Sass:\n- You can only manually enforce restrictions on Sass features. Whereas with PostCSS you can pick and choose the features you want enabled --- actually limit possibilities. Much better, especially if you're concerned about too much \"programming\" in stylesheets.\n- I want to simplify my stack. Eliminating Ruby would be nice. Then I could use Libsass (though I'd hope that PostCSS plugins would be more stable and clearly documented), or I could stick with pure JS and use Less; but especially in an enterprise stack the fewer dependencies the better.\nStill, maybe I'll end up using Less for mixins and PostCSS for future-friendly CSS, if that's what it comes down to.\n. Just to clarify points that may have been already clear to others... I see a few different tradeoffs, in the definition and the invocation.\nDefinition\nWhere to define the rule-to-be-mixed-in? Inside stylesheets or outside stylesheets, in JS? Seems to me that a significant advantage of keeping the definitions in JS is that all the programming you might want to do to make that mixin flexible (which may include conditionals, loops, calculations, etc.) would be more than possible in JS. But as long as the mixins are simple and don't need logic (which most probably are), a stylesheet definition should also work fine. I guess it would be nice if the plugin supported both?\nI would be happy to use JS for mixins -- maybe it's a function that accepts the mixin's arguments and returns an object corresponding to property declarations? I'd hope that's not too much barrier for entry for people who hopefully at least use jQuery :)\nOne problem I can think of with definitions in stylesheets: If I defined a mixin in one file and used it in another, would the parser know how to handle this as long as a I concatenate the files in the right order, or use https://github.com/postcss/postcss-import?\nA problem I can think of with definitions in JS: What about custom properties that are defined in the CSS --- would you have access to those?\nSyntax for stylesheet definition ... Here are some ideas:\n- New mixin at-rule, just like Sass\n- New selector before mixin name, like Sass % placeholders\nEither one seems to close enough to to real CSS syntax.\nInvocation\nTwo possibilities I like:\n- New include at-rule, just like Sass\n- A mixin property, whose value(s) would be the mixin functions, e.g.\ncss\n.foo {\n  mixin: triangle(right);\n}\n.bar {\n  mixin: clearfix();\n}\n.baz {\n  mixin: triangle(up), whizbang(true);\n}\nI don't really like the precedent in the clearfix example mentioned above (clear: fix) because I think that obfuscates what's going on. It's too implicit. A new dev looking at the code would be justified in thinking that fix is a legitimate value for clear, and would have no reason to know (unless told) that that particular declaration is actually adding several declarations to the compiled CSS. I prefer the explicitness of a mixin property.\nUsing a mixin property means you don't have to bring at-rules inside blocks, which I don't think happens in standard CSS (is that right?). And function syntax is just like standard css functions.\nThose are my ideas right now. What do you think?\n. I'm not sure if \"hacks\" need to be distinguished from non-hack \"mixins\"; and I imagine there will be a lot of confusing gray areas if you really try to enforce a distinction. If you and others like the \"hack\" distinction, maybe that could be provided as an alternative identifier for the \"mixin\" property?\nInteresting thought on repeating the mixin property. Repeating properties would normally result in overwriting, so you're right that it wouldn't make sense to see two mixin declarations within a rule set. While I also can't think of specific examples where this would be necessary, I wouldn't want to presume that I know all possible cases and therefore this shouldn't be allowed for ...\nWe could go with an in-block at-rule, like Sass. But if this is really an edge case it would be a shame to choose syntax just for rare (or maybe outright unnecessary) situation.\nReally, maybe it's never necessary?\n. I see ... makes sense to me. :)\n. Maybe we can logically prove that you would never need two mixin properties ...\nAFAIK The only reason to care about the place you declare the mixin is if you plan to override some value that the mixin sets. So the only reason you would want mixin to come after another is if you want the second mixin to override a value that the first one sets. Ok, weird as that sounds you could theoretically handle that by placing it later in the list of mixin: values (e.g. mixin: first(), second-overriding-first();). Following that, the only reason you want want mixin1 followed by arbitrary properties followed by mixin2 is if you want to set arbitrary properties overriding mixin1 and then override those with mixin2 ---- but that's absurd. So maybe there really is no reason to worry about that. What do you think?\nI thought of another possibility, too. @ai suggest above a + prefix to non-standard properties, and @yisibl pointed that + is used for IE hacks. So what about hijacking the option built in for vendor prefixes and using - or _, which are \"guaranteed never to be used in a property or keyword by any current or future level of CSS\"? (http://www.w3.org/TR/CSS2/syndata.html#vendor-keywords) (You could even put a prefix of your choosing on the front.) That could either work with a mixin property or each mixin you define could its own custom property, e.g.\ncss\n_triangle: 10px 20px red;\n-triangle: 10px 20px red;\n-post-triangle: 10px 20px red;\n(This would also solve the potential problem of not being able to duplicate mixin properties --- just put each mixin wherever you want it.)\nThen what would happen if there were no arguments for the mixin --- just no value?\ncss\n.foo {\n  _clearfix;\n  background: pink;\n  color: orange;\n}\nor use auto, e.g. _clearfix: auto; ??\n. @MoOx --- nice --- and you hit on the key point that if the mixin declaration is in the stylesheet its arguments must have their own syntax, too.\n@yisibl I wonder what you mean by \"prefix has brought us lots of trouble\"? A - or _ prefix is guaranteed in the spec not to clash with anything in the language; and vendor prefixes work for you, right? I guess I don't understand what kind of trouble a - or _ prefix could bring. Also, interesting suggestion with the Extension syntax.\n. Using $ for @mixin arguments makes sense to me, @ai --- distinguishing them from the standard var() syntax. I'm indifferent between that and the -mixin-var suggestion @MoOx had above. One is familiar to Sass users; the other looks more like real CSS.\nIt strikes me as pretty weird, though, to put a mixin: declaration outside of a rule set, as in the example. I wonder if in that situation another at-rule would fit in better?\ncss\n@include icon(twitter #0000ff);\n(... only using the word \"include\" because that's familiar from Sass ...)\nAlso, if so much of this is meant to match the power of Sass, it's worth arguing that giving up named parameters is a significant loss of power compared to Sass mixins. The simple $n is nice as shorthand; but it would also be nice to specify names sometimes?\n. Some questions:\n- Maybe a silly suggestion -- but what about a third plugin that is just for cloning (no arguments, e.g. clearfix or accessible hiding)? Seems like it could be significantly simpler than the others. Maybe postcss-macro or postcss-clone?\n- Would the JS mixins be @included, same way as the stylesheet-defined @mixin mixins?\npostcss-js-mixins is certainly clear. I'd be in favor of using postcss-mixins for stylesheet-defined mixins and postcss-js-mixins for JS defined ones.\nI was thinking that  postcss-template is too broad, because that might suggest more logic than is there (conditionals, loops, etc.) --- but then I thought about mustache, logic-less templates ----- which is, by the way, another well-known syntax we could consider for mixin variables: {{ something }} (wouldn't clash with sass simple vars @ai has planned).\n. Sure, that API seems straightforward enough.\n. Eh, I'm backing out of the clone idea. It would just be duplicated work I think. Unless others disagree.\n@ai If I can do anything to help out with the mixin plugin, let me know.\n. I started a simple mixin plugin, for the most rudimentary use-case, here: https://github.com/davidtheclark/postcss-simple-mixin\nI would really appreciate any input any of you have. (And much thanks to @MoOx for the useful patterns established in your plugins.)\nI was also thinking of making a simple extend plugin, with all the same limitations as the mixin plugin, but instead of copying declarations from a definition into a rule set it would copy selectors from a rule set back to a placeholder (like Sass extending placeholders, basically, and only that).\n. @lydell I'll work on that next, probably this weekend.\n@ai Very nice. And just wanted to let you know that working with PostCSS is awesome (this was my first effort using the API). Writing that plugin was very straightforward, because PostCSS does all the leg-work and provides a very clear API. I really liked it.\n. @lydell I published that simple-extend plugin: https://github.com/davidtheclark/postcss-simple-extend\n. @ai Yep, that's exactly why I decided to name my at-rules @simple-mixin-define, @simple-mixin-include, etc., for postcss-simple-mixin and -extend. Also why I decided not to use placeholders in simple-extend ---- to ensure no conflicts.\n. I will have more time to look at postcss-mixin in a little bit, and probably it would be fine to just say simple-mixin is incorporated by it and therefore deprecated. Just want to look into it a bit more first.\nAs for postcss-extend --- that would be neat, except that it currently is \"simple\" in that it does not extend real selectors, just @simple-extend-define abstractions (like % placeholder only). If someone wanted to extend real selectors also, we might have a similar situation as with mixins: the \"simple\" functionality is just a subset in a plugin that can also do other things.\n. @ai I added a deprecation notice to postcss-simple-mixin.\nDo you want to make postcss-simple-extend become postcss-extend? There is some justification for just having the placeholder-extension \"simple\" functionality instead of allowing people to extend arbitrary selectors: its the extension of arbitrary selectors that causes confusion about the output code and maintenance concerns (the reason some people say never use Sass extends). Or do you think that for postcss-extend you want to enable whatever Sass enables? Either way, we could use the existing code in simple-extend as the starting point. What do you think?\n. Yeah ... so I suppose unless he wants to change his name (maybe to something more ACSS-targeted), maybe simple-extend is the best way? Or we could go with the terminology used here and elsewhere: \"silent classes\". It could be postcss-silent-class. I don't know, just brainstorming --- I think \"silent class\" is kind of neat and descriptive, but not nearly as well known.\n. @ai and @MoOx: Did you have some specific model in mind for how something like a linter, whose whole purpose is to show errors, would use warnings? I'm thinking about postcss-bem-linter, specifically, and have at least these two questions:\n1. I can see that the warning can contain information that I could use to create a fancy message with line:column location, message, maybe even source. Will this kind of message tailoring (concatenating several properties of the warning) be done in different ways by each individual plugin or is there some standard way to do it?\n2. I'd want the process to end with an exit status code of 2, I think --- but how is that supposed to work with runners? I could make the plugin provide its own status code, in case it were run alone; but then would runners respond correctly? Or do I need to have two modes to run in, one which just prints warnings and then continues with a 0 and one that exits with a 2 (for CI)?\n(Ultimately I know these same questions will come up for other linters, including any written for stylelint as that gets started.)\n. Ok, I get that. Unfortunately at this point it seems like adding another step in the chain (a tool that understands the metadata and responds accordingly) is an annoyance for a small independent focused linter like postcss-bem-linter. Maybe I should make the plugin itself work that way (outputting metadata) but then include a little CLI that interprets the metadata, prints things, throws errors, etc., enabling the plugin to be used on its own.\n. I do make the node.type === 'atRule' typo frequently. But I do not think that mixed case is difficult to enter, or that that should be important. Instead, I think a function named eachAtrule would be too strange \u2014 looks like a mistake. So if you want to make it all consistent (which I'm in favor of) my vote would be for camelCasing the type atrule instead of lowercasing atRule.\n. I wonder if you might want to add to the API parsing of simple selectors (extracting them from the selectors)? I did this to make list-selectors and I know it would also be useful for linters, and maybe other plugins. Just an idea.\n. Cool. I'll do the same for the rest sometime this weekend, probably.\n. Ok. I will help after i finish the API docs.\n. How about \"punctuation\"? That's what its contents always are, right? --- spaces, newlines, commas, colons?\n. Thanks @ai. I understand fast now and will incorporate that and your other comments into the next round of edits.\nFor documenting method parameters ---\nFor writing out the function, I like adding brackets around optional parameters. This is an established pattern used in large popular projects like Express and Gulp and lodash.\nAs for documenting the parameter types: I think it would add a lot of lines but would be as clear as possible if we documented each parameter and return value as in the lodash docs. We could use the patterns popularized by JSDoc & Closure Compilaer for types. Markdown format could be that we put at the end of each method section something like this:\n**Arguments**\n- `thing` {String|RegExp} - description\n- `thing2` {Function} - description\n**Returns** {String} - description\n. Ok. I will put what I can in there for the section towards the end when I edit them this morning.\n. @jeddy3 Thanks!\n@MoOx I definitely agree with staying away from \"polyfill\" and using \"transpile\" instead. I'll integrate that vocabulary.\n@ai I will work on addressing all of your feedback and see if the next version fits what you want.\n. Re this comment: https://github.com/postcss/postcss/pull/201#issuecomment-74423253\nI agree that the first section should be very short. The reason I lengthened that paragraph is because I thought that the long example needed more context or else it could be misleading to people skimming. Maybe the example should be moved to a different section so that the first section is even shorter? I just think that if you include an example like that right there are at the top, without more explanation about picking-and-choosing your plugins, people might look at the example and quickly assume \"If I use PostCSS then I would use syntax like this.\" You know what I mean? \n. @ai does this comment https://github.com/postcss/postcss/pull/201#issuecomment-74423430 refer to the paragraph about PostCSS plugins supporting different syntaxes, or the one about plugins progressing at different rates?\n. What do you think about alphabetizing the plugin list? It's kind of a long list to be in a random order.\n. @ai What do you think about the source map tutorial at the beginning of the Source Maps section? I was wondering if it might be removed in favor of a link to a longer authoritative article somewhere.\n. @ai I am trying to rework the PostCSS vs. Preprocessors section so that is not about the benefits of PostCSS but just about the functional differences. (Moving benefits to Features.) But I am having some trouble understanding your points #1 and #2 enough to write them out.\n\nWith preprocessors you write your CSS on special programming language. It is like a PHP, but you mix control statement with styles. As result your styles is slow, because programming language is too compilcated. With PostCSS you write styles on normal CSS, just with custom at-rules and functions.\n\nIsn't this statement dependent on what plugin authors decide to do? For example, the ACSS plugins have custom comments \u2014 and am I right that somebody could write PostCSS plugins that allow\nconditionals and loop and other control statements within your stylesheets?\n\nPreprocessors tools (like Compass) is written mainly in same preprocessors language. As result this tools is very limited. The libraries adds only a custom functions, variables or mixins. There is no way to add new syntax for CSS 4 polyfills. In PostCSS all magic is written on JS and uses big universe of npm packages. So you have better and smarter tools.\n\nI thought that one of the reasons people liked Compass was because they could write Compass plugins that take full advantage of Ruby -- they didn't have to be restricted to Sass's language. (Am I wrong about that?) But I do get how other popular tools like Bourbon, Susy, and LessHat are just collections of functions, variables, and mixins. Should we maybe not mention Compass here?\n. Categories certainly would help with the plugin list, if we can come up with an adequate taxonomy. I didn't know about the Github star ordering :) I will just leave the order as is for now but open a ticket to discuss categorization.\n. @ai I like the idea of adding at least one more example.\n. Over at #212 I had this going:\n```\nPostCSS powers a growing ecosystem of modular JS plugins that you can use to enhance your\nCSS workflow. These plugins can add vendor prefixes, transpile CSS4+ syntax, support variables\nand mixins, inline images, and more.\nPostCSS itself parses CSS into an AST (tree of nodes) and offers a simple API for\nreading and transforming that AST.\n```\nWhat do you think about integrating that text?\n. Way to go @ai. I will try to do some proofreading within the next couple of days.\n. I forgot to bring up two points that I was thinking about:\n- There is no section for root.toResult(). Could you add one?\n- I was wondering why the semicolon properties on atrule and rule return true/undefined instead of true/false. Would you mind explaining the intention?\n. Here are some categories I can imagine using. I'm just throwing out anything I can think of --- just to get the ball rolling --- and I'm not listing all the plugins as examples, just enough to get the idea across:\n- Transformation (all the plugins that take transform input css)\n  - Transpilation (all the cssnext stuff, autoprefixer -- most)\n  - Language extension (for non-transpilation stuff like mixins and extends)\n  - Optimization (single-charset, data-packer, mqpacker, minifiers, import, bye-bye)\n  - Shortcuts (easings, webp, size)\n  - Special cases (dumb name -- rtlcss, epub)\n- Analysis (linters, list-selectors, css3modernizr --- not many, so no further subcategories needed yet)\nWhat do you think? Other ideas?\n. If a transpiler \"takes the source code of a programming language as its input and outputs the source code into another programming language\", isn't that a subset of \"transformation\", since you could \"transform\" syntax within a single language? Well, it's a pedantic distinction, and maybe there is some better word or phrase for what I meant by \"transpilation\". Or we could just not have the \"transformation\" super-category.\nI agree that the plugin/tool distinction doesn't quite work, especially when things that can be used as standalone \"tools\", like cssnext, Autoprefixer, and list-selectors, might also be usable as \"plugins\" in the same way as other non-standalone \"plugins\".\n. I think the W3C CSS4+ Transpilers section will be very long, yes, but that is because those plugins all do the same essential function --- it makes sense to have them in one category together. If we really wanted to split that out, though, maybe they could be split according to which W3C spec they relate to, e.g. Custom Properties, Media Queries, Colors, Extensions?\n. Sounds good to me.\n\nOn Feb 16, 2015, at 6:44 AM, Andrey Sitnik notifications@github.com wrote:\n@davidtheclark https://github.com/davidtheclark I think \u201cW3C CSS4+ Transpilers\u201d is enough right now :).\n\u2014\nReply to this email directly or view it on GitHub https://github.com/postcss/postcss/issues/208#issuecomment-74509831.\n. @MoOx when you say \"igtm\" do you mean \"It's greek to me.\" (i.e. I don't understand it, it's nonsensical) or \"It's GOOD to me.\"? I'm not familiar with the abbreviation :)\n. Duplicate of #208\n. I wonder also, given the talk about adding at least one more example, if the current example should be cut from the top and moved to an Examples section along with at least on more. That would help make the top short.\n. I think I agree with @MoOx that the ecosystem of plugins really is probably the most important part for almost all visitors, so it might be a good idea to mention it first (maybe use the sentences above? \"PostCSS powers a growing ecosystem of modular JS plugins that you can use to enhance your CSS workflow. These plugins can add vendor prefixes, transpile CSS4+ syntax, support variables and mixins, inline images, and more.\" --- since I also think it helps to mention that it's \"growing\" and to use the \"enhance your CSS workflow\" phrase to make sure that we're not limiting plugins to transformations.) \n. How about replacing first paragraph with:\nPostCSS is a tool for transforming CSS with JS plugins. The growing ecosystem of PostCSS plugins can add vendor prefixes, support variables and mixins, transpile CSS4 syntax, inline images, and more.\n\n(only addition is \"The growing ecosystem of PostCSS\")\nDo you both think that might work?\n. Following up on this --- Is it yet possible to pass an object, e.g.\njs\n{\n  color: 'black',\n  background: 'pink',\n  padding: '4em',\n  'border-radius': '100%'\n}\nLooks like maybe not, but I wanted to check if you were interested before opening an issue. (Maybe it would require a new method so these declarations don't get confused with options?)\n. I also think that if people were to compose CSS in JS, they would be much better off creating objects than concatenating strings that included punctuation, you know?\n. @ai Unless I'm misunderstanding, with the new message system in place (https://github.com/postcss/postcss/issues/177) linters like this one \u2014 whether for \"code style\" or \"structure\" \u2014 would be best divided out into distinct plugins; so I don't quite understand the question about \"mixing\" them. Or are you asking whether the pack of plugins that will be stylelint, specifically, should include both \"code style\" and \"structure\" linters? (If that's the question, I'm definitely in favor of it containing both types of plugins.)\n. Not yet. Good idea.\n. I like the idea, too --- often the easiest way to hit somebody over the head with an error message in an auto-refresh workflow.\n. I think it will be useful for any analytics plugins. list-selectors uses it (to extract simple selectors). postcss-bem-linter and other linters could use it (to check if selectors are acceptable). \nGlad you opened this: I was just checking the repo to open the exact same issue :) \n. I have only been able to find this existing library: https://github.com/mdevils/node-css-selector-parser Maybe others know of more?\n. @ai Have you thought further about this?\nAnd @TrySound have you been happy with node-css-selector-parser? I noticed that you have filed a couple of issues that have not gotten responses ...\nI was thinking about this in the context of selector rules for stylelint (https://github.com/stylelint/stylelint/issues/1). These rules will definitely require some degree of selector parsing; and of course it would better to do this in a way that is shared among PostCSS authors.\n. @ben-eb If you'd like any help just point me at the repo :)\n. I do agree with @MoOx that \"postcss is just api\" --- but I think that people reading about PostCSS ought to (and already do) think of it as a tool powering an ecosystem of plugins, and that ecosystem is the hot new thing. The term \"PostCSS\" is going to be used ambiguously to refer to either the engine itself or the ecosystem, and that's just inevitable because that's how people use them words :)\nI don't think that most people are going to build their own prepreprocessor with PostCSS: they are going to use existing plugins. If you market PostCSS primarily as a way to \"build your own plugins\" that will intimidate people, and you will not get very many converts from Sass. Of course it's important that you can build your own plugins with PostCSS, but I think the existing plugin ecosystem also ought to be part of an effective slogan.\nI think a comparison with Gulp would be appropriate, even though the two engines do very different things. People also use \"Gulp\" to refer to both the engine and the ecosystem. Both ecosystems are filled with plugins that are designed to \"do one thing and do it well\".\nI might be able to offer more ideas later; have to get back to work now :)\n. Interesting comment, @iamvdo . I'm wondering: What do you consider to be the benefits of PostCSS that should be emphasized? That wasn't clear to me from your comment.\nAnd a side note, just something that comment got me thinking about again: I'm pretty sure that given the range of PostCSS plugins available already (and the infinitely more possible), the \"preprocessor\"/\"postprocessor\" distinction is kind of meaningless. We just have processors.\n. Sounds to me @gedw99 like you're looking for a way to process HTML (converting its <link>s to inline <style>s) \u2014 so I think that's outside of the scope of PostCSS. PostCSS would be used to process the CSS before some HTML-processing tool inlines it.\n. I think you might have to pick more specifically what you want the readme to communicate. Right now there is a lot of promotional content. If you decide you want to, say, leave that to articles & blog posts and take it out of the README, that would cut down substantially on length. Similarly, as @ben-eb said, if you decide that the README doesn't have to list the plugins, but a separate page could do that, you'd cut it down further.\nIn its current form, I don't think it's inefficient: it's just communicating a whole lot of information. So, yeah, you might just want to pick which information to put elsewhere.\n. Ha :) So it goes.\n. Ah. I was wondering how those links were ordered.\n. I could try handling this one within the next few days.\n\nOn Aug 3, 2015, at 5:28 PM, Andrey Sitnik notifications@github.com wrote:\n@ben-eb not bad idea :). Any suggestion? Maybe with votes?\n\u2014\nReply to this email directly or view it on GitHub.\n. Looks great to me.\n. I wonder if the real problem here -- the sticking point for the Less fans -- lies in the words \"more powerful.\" Those words imply that Sass/Less and PostCSS are trying to do the same thing but PostCSS is doing it better. That kind of argument is bound to become a mess.\n\nInstead, maybe the sentences at issue could be rephrased so they are emphasizing how PostCSS is uniquely open-ended because it is an engine for plugins rather than a superset langauge. (Sure, Less may be working on an interface for open-ended plugins, but its core feature is undoubtedly its language, right? Besides, this sentence does not have to be about competitive comparison: it can promote PostCSS without diminishing Less, right?)\nFor example, maybe something like this could replace the \"New abilities\" point?\n\nUnlimited possibilities: PostCSS can power an unlimited variety of plugins. They can extend the CSS language (as Sass and Less do), transform cutting-edge CSS into browser-friendly syntax (e.g. Autoprefixer), lint and analyze stylesheets, and more.\n. I know, and I might organize it differently myself or the suggestion I have could be rephrased; but my main point is making this focus on \"Unlimited possibilities\" instead of \"more powerful\".\n. Maybe that's for another discussion :) My attempt to contribute here was just to suggest a way to avoid a pissing match. Any bad-mouthing I've seen about PostCSS so far seems to have been provoked by these kinds of competitive statements, which diminish other tools and make those tools' authors and users defensive and annoyed. Maybe you and @matthew-dean et al. can indeed work out a clear, acceptable statement about the differing \"powers\" of Less and PostCSS that pleases everybody; but I'd be surprised. I wonder if the more efficient tactic, which might appeal to more Readme readers and better clarify what PostCSS is about, would be to emphasize that PostCSS enables unlimited possibilities.\n\nTo finish the thought, though: Personally, I might use the unlimited possibilities point (maybe note cssnext within it), remove the \"Future CSS\" point (which is just one of the unlimited possibilities), and if you want a third point add something about how the modularity of plugins means they are easy to create and contribute to (they don't live in a large and intimidating repository like the Less/Sass languages). But we've probably gone over this in the past and you have a different vision, which is fine :) I just thought I'd throw in my two-cents.\n. That sounds better to me --- the key being \"It makes possible many new classes of tools.\" It isn't competitive, either, so I'd think it would please other participants in this discussion?\n. Given the caveats about Sass @extend and media queries, I don't quite understand what's supposed to happen in Example 3 from that spec draft, with the @media query. Should .serious-error have color: red; width: 100%; or only width: 100%? Anybody know?\n. Thanks @tabatkins. That info paired with the details of Sass's @extend means I don't have the motivation myself to write this full-extend plugin and wade into all the complexities. simple-extend is all my team and I will use for now. Maybe somebody more attached to Sass's @extend will take it on.\n. I think it would also be useful to expose an API function like node.lineOf(index) that would return the line number of that index in the node.  Plugins might want to use these accurate line numbers for purposes other than errors/warnings.\n. Yeah, we could certainly create our own warnings. But I thought other plugins using warnings might want the same precision (I know that any linter could use it, e.g. postcss-bem-linter).\n. I don't know much at all about how the tokenizer could be used, so if you think that's a better way I defer to you :)\n. I don't understand ... could you explain more?\nWould node.error() be more appropriate than node.warn() for some reason?\nAre you suggesting that we specify the word within the original CSS string? That would indeed be nice, but what if we have\ncss\nbackground: one, two , three , four, five;\nAnd we want to make two complaints, about the spaces before the second and third commas -- how would passing { word: ' ,' } distinguish?\n. If you think that would be generic and useful enough to be in postcss core, seems fine to me. But I think based on that discussion in #393 I'll be focusing on an external module provoding positionAt(index) to meet the stylelint needs.\n. I've thought about this more, and @lydell and @MoOx's comments have helped prod me ... and now I'm thinking that I rolled over too easily on this one. I think postcss should have built-in functionality for getting exact positions; and it may be that the only way to do that is to use an index --- since \"word\" is insufficient unless the value is unique, and \"word\" would probably run into problems with comments and strings, etc.\nMany plugins, not just stylelint, would benefit from having accurate positions in their warnings. A variables plugin, for example, might want to say \"Variable X has not been declared\" for margin: 0px 10px var(--X) 3px. Right now, unless I'm mistaken, the line/column reference on that warning (based on the node) would refer to m in margin, not the --X that is the problem. This disconnection would be more prominent if the value had multiple lines, in which case both line and column would be inaccurate.\nIn fact, I'm thinking that postcss-reporter should not in fact print [line]:[column] [message], as it currently does, because that format suggests that the line and column number refer precisely to whatever the message is complaining about --- while with the current warning API that's not the case. Unless we add positionAt(index) or something similar, postcss-reporter should probably instead just primarily report the message and secondarily note the line/column of the node the warning is attached to. I was thinking that reporter could look for a position property on the Warning by convention and print that --- but why not build that convention into postcss?\n. Also, I've got to +1 @lydell's note, that \"word\" does not really give us anything we can't easily get with indexOf(), unless there's something more sophisticated behind it.\n. I think it's clear enough to explain this by saying that position is an index relative to node.toString().\nI also find it a little confusing to have to include decl.before in the index calculation. Bu the reason that I felt I had to do that is because there isn't currently an easy way to get the node as a string without its before. Right? Or am I overlooking something? With a {\\n  color: pink;\\n} would there be some way to get the full declaration as a string without before (i.e. color:pink; instead of \\n  color:pink;)?\n. position is good but kind of conflicts with a function named positionAt(), since in the case of positionAt() \"position\" refers to a line/column pair, while in this case position would refer to an index. That's kind of confusing in my mind. I think one of them should have a different name so the word \"position\" can be used consistently throughout the API.\n. It's worth noting that throughout the current API documentation \"position\" refers specifically to line/column pairs.\n. Sounds good. At some point soonish I'll try to get stylelint using this feature and see how it goes. Thanks!\n. Am I understanding right that nodes will have a positionInside() function that will return an object with line and column number for the index passed?\nSo if in stylelint we want to add properties to the warning that designate line and column, we'd do something like:\njs\nvar positionOfProblem = someDecl.positionInside(indexOfProblem);\nresult.warn('blah blah blah', { \n  node: someDecl,\n  line: positionOfProblem.line,\n  column: positionOfProblem.column\n});\nIs that right?\n. For some reason I thought I could add arbitrary properties to the warning, like I could for a regular message --- I didn't think warn would understand those, just that it would carry them through to the reporter. I must have been confused.\nI do think it would be great it warnings could accept line and column properties. I was thinking that postcss-reporter could look and say \"If there are line and/or column, properties, print those; otherwise, if there's a node property, print that node's start position; otherwise, print no position.\" What do you think of that?\n. Sure, so user doesn\u2019t have to do the positionAt() stuff herself. Sounds good.\nWhat do you think of having index be an alias in this case, or an undocumented possibility? I only ask because I feel weird passing a number as word :) But if you think that sticking with word only is better, whether because of better API for more PostCSS users or because of better internal code, I defer to you.\n\nOn Jul 31, 2015, at 7:25 PM, Andrey Sitnik notifications@github.com wrote:\nMaybe we should use shorter API by accepting word option directly in result.warn with string or index?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/postcss/postcss/issues/348#issuecomment-126851574.\n. Also: if we pass word or index to result.warn -- what is exposed for the reporter to know position? It would have to be a new property, because currently it gets line/column from the node.\n. Cool. So for postcss-reporter, maybe we'd have this method for choosing line/column numbers to print:\n- If message has line and/or column properties, print those.\n- If message has node and word properties, use positionInside() to get a line/column for word and print that.\n- If message has node property but no word, print the node's starting line/column.\n- Otherwise, print no position.\n\nSeem right?\n. Sounds smart to me. So Warning would expose line and column properties that are determined based on those steps?\n. Or a position object that has line and column properties, maybe.\n. Such a plugin could probably work hand-in-hand with https://github.com/stylelint/stylelint, so that it automatically adjusts CSS to fix those linting errors that could be automatically fixed.\n. I was thinking the user could get the indexRelativeToBefore by find the index of whatever character within node.toString(). So if node.toString() looked like this (for a rule): \\n  a {\\n color: pink;\\n}. And the user wanted the position of the opening brace, they'd have to get the index of that opening brace. \nIn this case it's easy (node.toString().indexOf('{')), but it could be trickier -- e.g. in stylelint we might wan to complain about the third comma in the selector list, so a simple indexOf() won't work. In stylelint we're using a search utility that will most of the time give us the index we need: https://github.com/stylelint/stylelint/blob/master/src/utils/styleSearch.js. It cycles through the string checking for matches and calling a callback for every match, ignoring CSS strings and comments.\n. Ultimately, I'd also want node.warn to use this via new option: I'd like to be able to pass in a node and an index to make the position more accurate. \n. Which direction? \nI wasn't suggesting integrating that styleSearch utility into postcss, if that's what you were thinking. I was just pointing out how I was getting the index. User could get the index that they care about whatever way the user sees fit.\n. Hm ... Well I guess I could just make a separate module that does this. Open to suggestions about a simpler way to get accurate positions, I just can't think of anything right now.\n. How about postcss-positionat? Or want to leave this out of postcss/ and I'll just make it a davidtheclark/ module?\n. Following the discussion in https://github.com/postcss/postcss/issues/348, I could modify this PR so that node.warn() accepts two new options: word and index. User can pass one or the other to make the warning's position more accurate. Both will internally use node.positionAt(). But where would I attach the accurate position -- somewhere that postcss-reporter, for example, could always look (cf. https://github.com/postcss/postcss-reporter/issues/3)?\n. https://github.com/TrySound/postcss-value-parser and https://github.com/postcss/postcss-selector-parser exist for this. I've read through the discussions a little (also in #235 and #178) but am unclear on the eventual goal: @ai are you thinking of incorporating value and selector parsers directly into the PostCSS API, or to point at these external libraries?\n. Thanks for responses. I'll do some quick edits before I go to work today.\n. stylelint uses .before.\n. \"In\" as in, am I ok with releasing a new version when 5.0 comes out? Yep, sure. If that before change is the only big concern, it should not take me very long at all to make the change.\n. Sure.\nOn Mon, Aug 3, 2015 at 3:06 PM, Andrey Sitnik notifications@github.com\nwrote:\n\nAre everyoone OK with often major releases, but without many break\nchanges? So 5.0 will contains warning for before, but 6.0 will be after\nfew months.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/postcss/postcss/issues/467#issuecomment-127418530.\n. I always like it when tools have their own CLI. I can create projects with browserify, karma, tape, eslint, etc., without having to create a gulpfile. gulp-postcss has been great; but very often I've found that the intermediary of a gulp/whatever plugin adds bugs and annoyances. It all depends on the project, but I like being able to use both approaches.\n. That's true. I'm fine either way, just throwing in my 2 cents \u2014 that I like the common practice of the canonical installation of a tool including the CLI, which I thought is what @MoOx is suggesting.\n\nAlso, I think that if there's any discrepancy between what you, @ai, want the CLI to be and what it actually is, then that would be good reason to take it into the core project and make sure that it always represents the best capabilities of PostCSS. I'm accustomed to the CLI and the JS API being the canonical interfaces for tools, the reliable ways to use them without any chance of middleman bugs; whereas gulp/grunt/etc. plugins may be more or less reliable, depending on the maintainers.\nAll that said, I understand the desire to keep things separate and have other maintainers, etc., so I'd repeat that I'd be pleased either way. :)\n. I'm hoping that https://github.com/davidtheclark/cosmiconfig/ can address the configuration-loading questions (e.g. can we have JSON? YAML? CommonJS? package.json property? etc.) If you think for some reason it wouldn't work for postcss CLI configuration, please let me know and we can talk about improving cosmiconfig.\n. @MoOx I do not understand the issue. Why would cosmiconfig being async cause a problem? \n. Don't plugins need to be an array because order matters? \u201cPlugin order is determined by declaration in plugins section.\u201d \u2014 but in JS property order on simple objects is not guaranteed.\n\ni have that under consideraion already, but never used it before, when i make the PR i try to provide loader-cosmic.es6 && loader.es6 see wants perfs better / is less bloated\n\nIf you run across ways to improve cosmiconfig, please share them!\n. Traditionally objects are unordered (http://stackoverflow.com/questions/5525795/does-javascript-guarantee-object-property-order) but maybe that changed in ES215 (http://www.2ality.com/2015/10/property-traversal-order-es6.html). It does feel weird to me to expect the order of properties to matter instead of using an array ... but maybe that's the new way of things :)\n. I'm unclear on where you two have settled \u2014 extends, cascading configs, or both? (By \"cascading configs\" I mean that first/second/config.json automatically extends & overrides first/config.json, which extends & overrides ./config.json.)\nBut I can clarify that neither of those is currently supported by cosmiconfig out-of-the-box. I wrote the pieces of cosmiconfig that I knew stylelint needed and I knew other projects could use out of the box. So cosmiconfig now just finds and parses configs of various formats in standard places. (You can specify where the search should start from (cwd option), so you could do a separate search for each directory containing CSS files, if you wanted to.)\nI have not yet had input from people doing other projects who want additional features in cosmiconfig, so the extra features that stylelint needed I built into stylelint. \nFor stylelint we decided that we would rather have extends than cascading configs. You can do the same thing with extends that cascading configs allow, but extends are also more flexible and powerful \u2014 so why not just stick with extends? Here is the code that implements extends in stylelint: https://github.com/stylelint/stylelint/blob/master/src/buildConfig.js#L137. If you are interested, we could try to figure out a way to genericize that and bring it into cosmiconfig so postcss can use it.\n. I don't know the current status of ES6 support in JSDoc, but last I checked it was a problem.\nThere is a project that is trying to remedy some of the flaws of JSDoc (the tool, not the syntax), which you might look into: https://github.com/documentationjs/documentation\n. Hm, ok. The real world example is just if people want to write their functions with spaces inside parentheses and with quotes for url(), right?\ncss\nbackground-image: url( 'somepic.png' );\nLooks to me like the spec definitely does allow for whitespace within the parens: url\\({w}{string}{w}\\).\nMy own opinion would be to make sure that PostCSS can handle any valid CSS syntax. However, if you think this is rare enough that PostCSS is not even going to support it, I'll just have to change stylelint a little so that stylelint doesn't support it either.\n. @ai Didn't know \u2014 and certainly trust that you've thought about this stuff more than I have :)\n. Ok, thanks for clarification. I guess I don't understand why the word \"root\" is there in the changelog entry?\n. I thought it would be line 1, column 1?\n. The use-case is to attach warnings to root and still use index, word, etc., to get accurate positions. If you have a way to do that, that's really all I need.\n. (Sorry, didn't mean to close.)\n. Thanks!\n. @corysimmons The problem is that no postcss plugins can run on the code if PostCSS can't understand it. Without a stylus parser, certain aspects of stylus syntax will cause PostCSS to throw syntax errors; then the plugin won't work. \nWith SCSS this kept happening as people tried to use // comments: that's not valid CSS, so it broke the parsing step and therefore the plugins couldn't work.\nPeople can of course already use stylus and PostCSS together, as you say, by running stylus first. But if people want to run PostCSS plugins on uncompiled stylus files, then the PostCSS parser needs to not break in those files \u2014 which means we need a stylus parser.\n. I made one of these in SCSS a little while ago: http://davidtheclark.github.io/scut/ Some of those are just shortcuts, but a bunch would qualify as hacks like this.\n. Hacks in there:\n- HiDPI breakpoint\n- hide visually\n- image replacement\n- triangle\n- center absolutely\n- center block\n- center transform\n- clearfix\n- ratio-box\n- sticky-footer, fixed height\n- sticky-footer, fluid height\n- vertical center, inline-block method\n- vertical center, table display method\n- vertical center, transform method\n- hanging indent\n- indented paragraphs\n- truncate\n. I didn't build any. But feel free to checkout the PostCSS plugin list and possibly build your own.\n. I saw something that does this recently: https://sneakertack.github.io/postcss-playground/\n. Are you thinking that this cloning behavior would resemble a mixin (duplicate the declarations)? If so, how should it handle media queries, or when the cloned selector is part of a chain (e.g. in your example there's a .btn-default .btn-inside {...} rule)?\n. I offered some feedback in https://github.com/postcss/postcss/pull/733\n. In fact this example does illustrate the problem. But I'll try to explain better. \nMaybe the main thing to point out is that I'm attaching the warning to the root node, not to the rule. So the root node does contain the comments.\n// 1\\n// 2\\n// 3\\n// 4\\n// 5\\n// 6\\na::before { content: ''; }\nThe index of the opening quotation (in the value of content) in this source code is 58. So when I report a warning with { node: root, index: 58 }, I should get a position of { line: 7, column: 22 }. However, what I end up with is { line: 7, column: 10 } \u2014 a difference of 12 columns. That number 12 corresponds exactly to the number of comments: for every comment (6 total), 2 columns are added to the original source, for the */ that is added to close the real CSS comments. When positionBy() calculates the position, it does so in relation to the modified string, with these extra */ columns; and to that string, index 58 refers to the space between before and {, not the opening quote \u2014 so the warning position ends up inaccurate.\nDoes that better explain?\n. Well, I have some reasons in this particular case --- but that shouldn't matter for this issue, right? \nTheoretically the same problem is going to arise anywhere // comments are used: even if the node is more focused, the index will have problems. \nLike if I try to report the position of 10px in this declaration:\nscss\n.foo {\n  padding:\n    8px\n    12px\n    // 10px corresponds to something else somewhere\n    10px;\n}\nOr if I try to report the position of the div selector in this rule:\n``` scss\n.foo,\n// All divs in #bar need the styling\nbar div {\ncolor: pink;\n}\n```\n. :+1: \n. @ai: I could try to help fix this one but I'm really not sure how you'd like it done. If you give me any direction as to what you would like done, I can try to write some code.\n. Maybe I'm misunderstanding something about the goal of custom parsers/stringifiers. The postcss-scss Readme states:\n\nNote that you don't need a special stringifier to handle the output; the default one will automatically convert single line comments into block comments.\n\nThat seems weird to me, because it's like PostCSS is doing a little bit of compilation there automatically \u2014\u00a0not just parsing. Doesn't every parser need to have a complementary stringifier, capable of converting the parsed AST back to its original code? In the case of SCSS it would be capable of stringifying inline comments differently? Otherwise wouldn't node.toString() be unreliable, because other unique constructs might throw it off just like //-comments do?\nI was also wondering: If node.toString() is supposed to return a real CSS string based on the AST, could a method like node.toRawString() return the original source code no matter what? Parsers that enable non-CSS stuff like //-comments would have to add another bit of information to nodes: the complete raw source string for the node.\nI don't know if I'm way off-base, just thought I'd throw out my thoughts \u2014 does any of the above make sense? \n. How about this idea? \"If node.toString() is supposed to return a real CSS string based on the AST, could a method like node.toRawString() return the original source code no matter what?\"\n. Yeah, that makes sense to me, too.\nIf we did that, am I right in thinking that would need involve changes to the tokenizer and parser?\n. End-user just wants to see accurate line/column positions of some report. \nMaybe it's stylelint tell you about a linting error. Or maybe it's a CSS syntax error that PostCSS itself tells you about.\n. How about the examples above? https://github.com/postcss/postcss/issues/725#issuecomment-181900397\n. I think something like this should show the issue, right?\ncss\n.foo {\n  padding:\n    8px\n    12px\n    // 10px corresponds to something else somewhere\n    10px;\n}\njs\nrule.eachDecl(decl => {\n  const violationIndex = decl.toString().indexOf('10px');\n  if (violationIndex === -1) return\n  result.warn('Do not use 10px values', { node: decl, index: violationIndex })\n})\n. Hmmm ... or maybe it only causes the problem if you use decl.source.input.css. Because wouldn't decl.toString() balance it out?\nObviously I'm not experimenting actively just throwing out ideas. I can look into it later but probably not today.\n. The actual code this came up for is here: https://github.com/stylelint/stylelint/blob/master/src/rules/string-quotes/index.js. The styleSearch() util in there just moves through the whole string looking for what it's told to look for. The report() function pretty directly interfaces with result.warn().\n. @ai: I dug a little bit more and found this: The problem is arising for me when I get an index based on node.source.input.css (which I guess is undocumented anyway?). But I actually do not have the problem if I get an index based on node.toString(). So as long as I stick with node.toString(), I shouldn't have the problem.\nDo you want to close this issue, then?\n. @ai: Whenever you're able! Thanks for your hard work.\n. Ah, you're right. For some reason I thought it was allowed but just didn't show up when rendered. But the spec is clear: \"Newline: This is a parse error.\"\nWell, I think I agree with you then that throwing a syntax error is the way to go.\n. Eh, ok. Either way is good by me!\n. Great. Thanks, @ai.\n. This raises an idea for a good stylelint rule: string-no-newline\n. Will do.\n. I think that integrating selector and value parsers into Core would make a very positive difference. So many plugins either do or absolutely should use those parsers. Those that should but don't probably would use the parsers, and therefore improve their plugins, if they were integrated into Core. (Maybe they don't know the parsers exist, or maybe they don't know to trust the parsers, I don't know.)\nIn the tree I think we should make sure to use CSS verbiage instead of JS or more programming-language-y verbiage. Words that people will find when looking at MDN, the spec, and articles about CSS. For example, Expression I think is too technical. Could that not be Function? Just kind of a principle to keep in mind.\n. At https://www.w3.org/TR/css3-values/, https://drafts.csswg.org/css-syntax-3/#component-value, and https://developer.mozilla.org/en-US/docs/Web/CSS/Value_definition_syntax I see regular use of \"component value\". Might we use Component or ComponentValue instead of Expression?\nI'm not suggesting that we're going to find a super transparent word to regular CSS users, or that the term Expression is not clear enough when explained; just that I'd hope we could use words that are derived from the CSS spec rather than other languages.\n. Sounds like a good idea to me!\nIn stylelint we started automatically setting the syntax based on extension, because of all the people who were forgetting. But we already have the syntax installed. Postcss itself can just point you to the syntax you may need.\n\nOn Jul 30, 2016, at 7:13 AM, Andrey Sitnik notifications@github.com wrote:\nMany users forget to change parser and complain about parse error.\nMaybe we should add mention postcss-scss or postcss-less if we see that opts.from has .scss or .less extension.\n@davidtheclark @jeddy3 it will be useful for you?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \ud83d\udc4d \n. Sounds like the idea is to describe, as briefly as possible, two different things: PostCSS core (parser/api) and PostCSS plugin ecosystem. How about this (trying to be as concise as I can be)?\nPostCSS parses CSS into a JavaScript AST (tree of nodes) and offers a simple API for reading and transforming that AST. PostCSS powers a growing ecosystem of modular plugins that you can use to enhance your CSS workflow. These plugins can add vendor prefixes, transpile CSS4+ syntax, support variables and mixins, inline images, and more. \n. I'm not that we need to make this section longer. This new text elaborates on the \"modular\" feature ... maybe instead we should just link to the Feature section?\nPostCSS can do the same work as preprocessors like Sass, Less, and Stylus. But PostCSS is modular, 4-40x faster, and much more powerful. Learn more about the advantageous Features of PostCSS below.\n. Sure. Maybe we should put the plugin stuff first because most readers are probably interested in that?\n\n```\nPostCSS powers a growing ecosystem of modular JS plugins that you can use to enhance your\nCSS workflow. These plugins can add vendor prefixes, transpile CSS4+ syntax, support variables\nand mixins, inline images, and more.\nPostCSS itself parses CSS into an AST (tree of nodes) and offers a simple API for\nreading and transforming that AST. \n```\n. ",
    "safareli": "@MoOx  recently i was watching React: CSS in JS  and then came to this document about solving Facebook's CSS complexity problems with CSS Bliss so definitely check it if you haven't done already\n. ",
    "varya": "Oh, sooo nice to see it finished. Any plans of havign parsers for SASS, LESS, SCSS? And, if they appear, with they be in separate repositories?\n. ",
    "andyjansson": "@varya SCSS parser already exists: https://github.com/postcss/postcss-scss \n. > CSS files may have different non-ASCII charset and this could be a problem on concatenating.\nIs this really a problem, though? I mean, the CSS is converted to an AST before being merged together. Care to weigh in on this @ai @MoOx ?\n. @ai Perhaps we could have PostCSS identify the charset of the CSS? So, for instance, if we try to add nodes from a ISO-8859-1 document to a UTF-8 document, those nodes would be converted to UTF-8 prior to insertion.\n. @ai I know. What I am proposing is having postcss detect the encoding and expose that via the AST. Since we have methods such as moveTo, moveBefore, moveAfter to migrate nodes, we could check the encoding of those nodes and compare it to the destination node prior to moving on with the migration. Having that information would also enable the proposed plugin in this issue to insert @charset by simply checking the encoding property of the Root node. \n. @ai What do you mean \"not a UNIX way\"? I'm not proposing adding automatic @charset insertion to PostCSS. That should of course be handled by a plugin. \n. I'm saying it should normalize the encoding of node data, not insert a @charset. \n. @ai You can check the file header to get a good idea of the encoding. However, if there's a @charset in the document you could override it. \n. @ai Yes, but we're discussing two different things here. At one hand we have the PostCSS API and at the other we have the plugin. The PostCSS API, which I am discussing, could facilitate the plugin. \n. @ai because if you have two files which different encoding and merge those together, half of the resulting file will have the wrong encoding. Also, I'm not talking about hooking into insert methods, but extending their functionality to handle encoding. \n. @ai I'm just saying it's a related concern and also that my proposed solution could be used to facilitate the plugin by providing it with the information of what encoding is used. That's all.\n. Thanks :)\n. Alright, it's been taken care of. \n. @ai I thought I just did :) \n. Thanks @ai \n. Ideally, we'd want to highlight any custom syntax that's introduced by the plugins. I believe the only viable option is to have these plugins include their own grammar files in their npm packages.\n. There is no \"exactly\". I'm not talking about syntax highlighting for just a few specific things, but generic syntax highlighting for any and all plugins, present and future, which introduce custom syntax. I don't think that the scss syntax highlighter is an adequate solution since PostCSS is modular and there's no guarantee that the plugins that the user has loaded will be compatible with that syntax highlighter. You can look to the language extensions for examples on custom syntax, but keep in mind that even if they happen to work for you with your current highlighter, future plugins might not and that's why we need grammar files. \n. There's an issue for WebStorm support currently assigned to @zolotov: https://youtrack.jetbrains.com/issue/WEB-16601 \nI think we should bring them into the discussion. \n. > So, where we should put generated HTML while we creating special page in postcss.org?\n\npostcss.github.io/postcss?\nOr we could put static HTML to postcss.org?\n\nCan't we make a subdomain e.g. api.postcss.org and link it to Github Pages? Or am I misunderstanding the question?\n. > The definition files also provide types and interfaces, some of which are inferred by the types declared within functions. I didn't look at your JsDocs yet, but I'm pretty sure that even if you were extremely thorough with return types and such, JsDocs by themselves would still fall short of the completeness of the complex type information that TypeScript provides, specifically with interfaces. \n@jedmao What do you feel is missing from JSDoc? \nTypes can be represented using @param {type} for parameters and @type {type} for properties and variables. \nPostCSS doesn't really have interfaces, but rather base types (e.g. Node). The inheritance is expressed using @augments/@extends. Nevertheless, interfaces can be represented by using @interface and creating a stub. Classes that implement said interface then uses @implements. \n. @ai I quickly glanced over the JSDocs you've added. From what I saw things are looking good. \n. > I just thought of one example; though, I bet there are more. What about generic types? See this line, which allows a plugin like postcss-triangle to provide an interface/template of plugin options via generic types. \nAt this point we aren't talking about generating documentation for postcss anymore. That's only interesting when it comes to auto-completion and compile-time safety (which has its merits too, but it's kinda off-topic). (side-note: clojure compiler has generic types via @template). \nAnyway, let's back up for a moment though. Looking at the postcss repo, it looks like the typescript files aren't even being used and the es6 files are the actual sources. Why are these even there if they're not being used as the source? \n. Oh I see, it holds no actual code. It's just a scaffold. Fair enough. \nIf that directory were to be absent, would it read from the JS sources instead?\n\nSee this line, which allows a plugin like postcss-triangle to provide an interface/template of plugin options via generic types. \n\nCouldn't this be accomplished by specifying @type {type} on module.exports?\nIf yes, then other editors could use that information as well, not just TypeScript-enabled ones, plus we wouldn't need to keep duplicate records of the documentation.\n. @ai works fine in WebStorm. This is with the t.ds directory deleted. \n\n. @jedmao What kind of code coverage is it? \n. So no condition coverage?\n. https://en.wikipedia.org/wiki/Code_coverage#Basic_coverage_criteria\n. +1\n. :+1: \n. I just wanted to interject with my opinion. As I see it, this type of API could be optional and invoked on-demand, saving us the need to alter the structure of the AST from how it is today. \nI imagine something akin to the following:\njs\n...\nvar selectorAST = postcss.selector.parse(rule.selector);\n// do something with selectorAST\nrule.selector = postcss.selector.stringify(selectorAST)\n...\nThis would address @thejameskyle's concern about custom syntax, as well as save us the need to parse each and every node in the tree.\n. I don't follow why you think parsing nodes (and by this I mean parsing a rule's selector value into an AST, for instance) is a necessity. I agree that the plugin order thing makes for a poor developer experience, but, as I see it, that issue is not rooted in the lack of an AST for node values, but rather that certain transformations need to have taken place before the plugin can successfully execute in accordance to what the user would expect. This is a big drawback in postcss' design. What's more, some issues can't be remedied by simply changing plugin order, such as when plugins depend on each-other's state. \nHowever, both these issues would be addressed by executing the nodes one-by-one against the visitors, then re-executing a node against the visitors once it's been changed. Let me demonstrate using a couple of examples: \nExample 1\ncss\n   someprop: foo(bar(baz()));\nAssume that foo() and baz() are defined by postcss-functions and bar() is defined by some other plugin. Currently this can't be successfully resolved because of a circular transformation dependency. Now, if we have visitors which are then re-applied whenever the node changes, this could be resolved. \nSo..\nWhen the stylesheet is first processed, the visitors would run against the node. \npostcss-functions would process baz() but abstain from processing anything else because bar() is unrecognised. The other visitor would then execute and resolve bar(). This is normally when execution would stop and postcss would return the AST back to the user. Now, since the visitors have modified the node, we can imagine it being marked \"dirty\" and the visitors are executed once more. This time it looks something like this: \ncss\n   someprop: foo(quux);\nSince quux is a concrete value, postcss-functions can now resolve foo(). The other visitor will then be invoked but since bar() cannot be found, it will abstain from doing anything. \nExample 2\nAssuming postcss-simple-vars and postcss-conditionals, you cannot redefine a variable inside a condition because the whole AST is processed once by the first plugin, then once by the second plugin. \ncss\n   // define $a and $b\n   ...\n   @if $b == 0 {\n       $b: 1;\n   }\n   result: calc($a / $b);\n   ...\nIn the above example it would always redefine $b to 1 due to plugin order (proof). Switching the plugins around would cause an error currently because postcss-conditionals does not recognise $b as a valid value, but nevermind about that for now. \nNow, if we had visitors, postcss would walk through the node tree one node at a time and run it through the visitors. First postcss-simple-vars would define $a and $b and postcss-conditionals would abstain from doing anything because it hasn't seen an @if yet. Eventually we would come across the @if and postcss-simple-vars would replace $b with its corresponding value. Then postcss-conditionals would execute and evaluate the expression causing it to either remove the branch completely, or replace it with its contents. Let's assume that the expression is truthy and the @if is indeed replaced by its contents. Postcss would then move on to the next node and pass $b: 1; to the visitors causing the $b variable to be redefined. Once postcss reaches the result: calc($a / $b); declaration it would be resolved correctly. \nAssuming the opposite plugin order, I imagine postcss-conditionals not to throw a syntax error upon seeing $b and instead ignore the @if altogether. Since postcss-simple-vars would then replace $b with its corresponding value, the node would be marked dirty and the visitors would be invoked all over again, making the whole thing work as expected.  \nPS. I don't think your AST-for-node-values idea would work with postcss-conditionals, which is why making it optional, still allowing for this kind of syntax, would be a good idea.\nPPS. Since the above example wouldn't error due to the assumption that the @if would eventually take a recognisable form, we would need to discuss when we actually can give off errors. I would imagine the errors needing to be bound to the node, cleared for as long as the node is marked dirty, and only being emitted upon exit..?\n\nSorry for the wall of text.\n. > It's a necessity because in order to facilitate two ways of writing plugins (querying a node's value tree or querying a node's stringified value)\nAnd the previous proposed solution to that doesn't satisfy that need?\njs\nvar ast = postcss.selector.parse(rule.selector);\n. @thejameskyle what you just described sounds exactly what I've been talking about...? \n\nHere you run into the problem of not knowing the difference between the inability to resolve a value because its invalid or because it needs to run something else\n\nI addressed this concern at the bottom of my post\n\nHere we parse the entire AST and do a depth-first traversal, resolving dependencies upwards.\n\nYes, I understand that, but this also means that we cannot use custom syntax. In case of, say, postcss-functions, it does resolve depth first. \n\nand on a syntax error postcss would be running forever.\n\nWhen I said syntax error earlier, I didn't mean a CSS syntax error. I was referring to a syntax error pertaining to the custom syntax of the if statement. \n\nWhat you suggest simply wouldn't work.\n\nI've laid out my reasoning and for the examples I've presented, it does work. Care to provide an example where it wouldn't? \nI'm not trying to be dismissive of what you're saying, it's just that there seem to be some information missing here. \n. > Now, we have a bottleneck because 20 plugins need to parse those selectors and then stringify them.\nYep, I totally get that. \nI'm totally for an AST provided that it doesn't hamper the ability to write values which doesn't follow conventional CSS value syntax (such as the aforementioned postcss-conditionals plugin). I do not see that it would be possible if the AST is the mandatory form of mutation. \nIf however there are two properties, one for string manipulation and the other for AST manipulation, one compiling its value to the other, I could see it working. It would however necitate that the AST property can be null (since you can write values which cannot be parsed).\n. Weird. I have it locally. Somehow it dropped when I committed the change :\\ \n. np!\n. Declaration {\n  raws: { before: '', between: ' a: ' },\n  type: 'decl',\n  prop: '\ufffc',\n  value: '\\'b\\'' }. I retyped the colon, and the issue persists. a: still ends up in raws.between. I maintain that this is still an issue. \nDeclaration {\n  raws: { before: '', between: ' a: ' }, <-------------\n  type: 'decl',\n  parent:\n   Rule {\n     raws: { before: '', between: ' ', semicolon: true, after: '' },\n     type: 'rule',\n     nodes: [ [Circular] ],\n     parent:\n      Root {\n        raws: [Object],\n        type: 'root',\n        nodes: [Array],\n        source: [Object],\n        lastEach: 1,\n        indexes: {} },\n     source: { start: [Object], input: [Input], end: [Object] },\n     selector: '.c',\n     lastEach: 1,\n     indexes: {} },\n  source:\n   { start: { line: 1, column: 5 },\n     input:\n      Input {\n        css: '.c {\ufffc a: \\'b\\';}',\n        file: 'C:\\\\Users\\\\Andy\\\\Desktop\\\\test\\\\src\\\\app.css' },\n     end: { line: 1, column: 13 } },\n  prop: '\ufffc',\n  value: '\\'b\\'' }\nHexdump:\n2E 63 20 7B EF BF BC 20 61 3A 20 27 62 27 3B 7D. ",
    "hutber": "Did this ever get released? Because I still can't use comments\nERROR in ./~/css-loader?modules=true&importLoaders=1&localIdentName=%5Bpath%5D%5Bname%5D-%5Blocal%5D!./~/postcss-loader!./src/client/scss/main.css\nC:\\var\\www\\webpack-express-boilerplate\\src\\client\\scss\\main.css:1:1: Unknown word\n// Immutable items\n^`````\n. Dam you're good on the whole reply thing \ud83c\udf34 \nNice one, I should have read the docs for postcss-scss properly :)\n. ",
    "telegraphinho": "Why isn't it going to be fixed? People are complaining about it all over the place, including gulp autoprefixer repo. There is currently no way to overcome it, other than to remove name of css file manually(or using gulp.replace) from the .map file, which isn't very nice. Clearly it isn't the intended behaviour...\n. I rechecked now and you are right! My bad, sorry.\nI checked chrome dev-tools earlier today and the link in styles tab had lead to style.css file which didn't exist. I guess it was a one-time glitch, as i now it always leads to existing .sass file as it should.\n. ",
    "pascalduez": "\nstuff like pixrem or some other have the plugin under require(*).postcss\n\nI think I've tried several different requirements at that time, but no way. I should give it another try with the most recent versions.\nSystems like cssnext or pleeease looks gorgeous, but I would prefer to limit the number of layers needed in such a workflow. In the above example I like to be able to consume directly the plugins. Well with the help of the gulp-postcss adapter of course...\n. >  Not even 100 lines \nAbsolutely no criticism regarding those projects, as I said they looks really great and address a specific and growing need. It's more the whole plugs deps that make me a bit picky, if I only need a couple of them like in the first example. But anyway.\n\nOh boy, I didn't notice that you just require(pixrem) (without .postcss)\n\nI tried that (among many other things), no work. I guess it's something to do with gulp-postcss maybe.\n. > ``` js\n\npostcss()\n  .use(a())\n  .use(b())\n  .use(c())\n  .use(d())\n  // this looks nice :)\n```\n\nSeems a good obvious way, and has the advantage to be similar to Streams pipelines.\n. A  bit late to the party but looks good to me! Thanks @ai for starting those guidelines.\nHappy to see a consensus on the postcss-plugin keyword, I will update my packages.\nAgree that this kind of syntax causes confusion:\njs\npostcss([\n  processor1({foo: 'bar'}),\n  processor2,\n  processorThree({opts: true}),\n  processorFour({bar: 123}),\n  processor5,\n])\nBut well...\n. > really code will be:\n\njs\npostcss([\n  require('processor1')({foo: 'bar'}),\n  require('processor2'),\n  require('processorThree')({opts: true}),\n  require('processorFour')({bar: 123}),\n  require('processor5'),\n])\n\nThat's the way I use plugins. \nBut there's still room for confusion about the parentheses. Although with recent versions of PostCSS the issues reported in #149 are gone.\n. Woops, sorry :blush: \n. Hey @ai, thanks for the quick reply.\nThis fix the \"semicolon\" warning but not the \"before\" one, which is coming from the nodes appending: nodes: someRule.nodes.\n. Nevermind, that's my code setting it... Sorry for the confusion @ai. \nI need a break I guess ;)\n. I was working on such a plugin, but had to pause it while waiting for async plugins PostCSS support, now I should really revive it!\nhttps://github.com/pascalduez/postcss-svg\nI have a local branch on svg's manipulation. (for instance changing colors)\nIt started as a port of https://github.com/pascalduez/SassySVG basically.\n. @ai I updated my branch with {string|string[]} for the type. (not showing in the diff cause closed?) \nAlso the key sate for ops.prop whereas it's ops.props.\n. Hey,\nI know the @apply proposal is not in good shape, and will most likely not see the light.\nI'm just trying to update postcss-apply to PostCSS 6.\nI think it would be fair for all the plugin current users to give them enough time to update/migrate their codebase, while still being able to benefits from latest PostCSS.\nThere's obviously an issue here, which might be worst looking at anyway, don't you think?\n. @ai, all right thanks, will do that in the plugin.. ",
    "timkelty": "So, for the record - does cssnext not currently work as a PostCSS plugin, via Grunt or Gulp?\nI've been trying to get this working here:\nhttps://github.com/cssnext/cssnext/issues/50\n. Sorry, just wasn't sure if the problem was with Grunt or PostCSS.\nThanks for investigating.\n. +1 for either making @travco's fork postcss-extend or something else canonical.\nSeems to me as close as we can get to the spec with a preprocessor.\n. ",
    "kapouer": "Right now if i receive postcss().use(plugin).use(plugin2) i cannot call .parse on it - it's not nice when you want to configure on one side, and compress multiple files in another place.\n. Just for other people stung by that star hack problem: i had to replace .append() to .push() call, as a workaround.\n. I'm parsing several files, concatenating them (append to root) and applying various stuff to them, see https://github.com/kapouer/raja-minify/blob/master/index.js#L133\n. ",
    "deepwell": "Here's a sample. The source is a bit longer (more valid css selectors at the top) but this focus on the problem @media statements. After this it's then repeated 250 times (all in separate style tags). That's right, no closing bracket.\n.footerContainer .mcnTextContent,.footerContainer .mcnTextContent p{color:#606060; font-family:Helvetica; font-size:11px; line-height:125%; text-align:left}\n.footerContainer .mcnTextContent a{color:#606060; font-weight:normal; text-decoration:underline}\n@media only screen and (max-width:480px){body,table,td,p,a,li,blockquote{-webkit-text-size-adjust:none !important}\n@media only screen and (max-width:480px){body{width:100% !important; min-width:100% !important}\n@media only screen and (max-width:480px){td[id=bodyCell]{padding:10px !important}         \n@media only screen and (max-width:480px){table[class=mcnTextContentContainer]{width:100% !important}\n@media only screen and (max-width:480px){table[class=mcnBoxedTextContentContainer]{width:100% !important}\n@media only screen and (max-width:480px){table[class=mcpreview-image-uploader]{width:100% !important; display:none !important}\n@media only screen and (max-width:480px){img[class=mcnImage]{width:100% !important}       \n@media only screen and (max-width:480px){table[class=mcnImageGroupContentContainer]{width:100% !important}\n@media only screen and (max-width:480px){td[class=mcnImageGroupContent]{padding:9px !important}\n@media only screen and (max-width:480px){td[class=mcnImageGroupBlockInner]{padding-bottom:0 !important; padding-top:0 !important}\n@media only screen and (max-width:480px){tbody[class=mcnImageGroupBlockOuter]{padding-bottom:9px !important; padding-top:9px !important}\n@media only screen and (max-width:480px){table[class=mcnCaptionTopContent],table[class=mcnCaptionBottomContent]{width:100% !important}\n@media only screen and (max-width:480px){table[class=mcnCaptionLeftTextContentContainer],table[class=mcnCaptionRightTextContentContainer],table[class=mcnCaptionLeftImageContentContainer],table[class=mcnCaptionRightImageContentContainer],table[class=mcnImageCardLeftTextContentContainer],table[class=mcnImageCardRightTextContentContainer]{width:100% !important}\n@media only screen and (max-width:480px){td[class=mcnImageCardLeftImageContent],td[class=mcnImageCardRightImageContent]{padding-right:18px !important; padding-left:18px !important; padding-bottom:0 !important}\n@media only screen and (max-width:480px){td[class=mcnImageCardBottomImageContent]{padding-bottom:9px !important}\n@media only screen and (max-width:480px){td[class=mcnImageCardTopImageContent]{padding-top:18px !important}\n@media only screen and (max-width:480px){table[class=mcnCaptionLeftContentOuter] td[class=mcnTextContent],table[class=mcnCaptionRightContentOuter] td[class=mcnTextContent]{padding-top:9px !important}                                                                \n@media only screen and (max-width:480px){td[class=mcnCaptionBlockInner] table[class=mcnCaptionTopContent]:last-child td[class=mcnTextContent]{padding-top:18px !important}\n@media only screen and (max-width:480px){td[class=mcnBoxedTextContentColumn]{padding-left:18px !important; padding-right:18px !important}\n@media only screen and (max-width:480px){td[class=mcnTextContent]{padding-right:18px !important; padding-left:18px !important}\n@media only screen and (max-width:480px){table[id=templateContainer],table[id=templatePreheader],table[id=templateHeader],table[id=templateBody],table[id=templateFooter]{max-width:600px !important; width:100% !important}                                           \n@media only screen and (max-width:480px){h1{font-size:24px !important; line-height:125% !important}\n@media only screen and (max-width:480px){h2{font-size:20px !important; line-height:125% !important}\n@media only screen and (max-width:480px){h3{font-size:18px !important; line-height:125% !important}\n@media only screen and (max-width:480px){h4{font-size:16px !important; line-height:125% !important}\n@media only screen and (max-width:480px){table[class=mcnBoxedTextContentContainer] td[class=mcnTextContent],td[class=mcnBoxedTextContentContainer] td[class=mcnTextContent] p{font-size:18px !important; line-height:125% !important}\n@media only screen and (max-width:480px){table[id=templatePreheader]{display:block !important}\n@media only screen and (max-width:480px){td[class=preheaderContainer] td[class=mcnTextContent],td[class=preheaderContainer] td[class=mcnTextContent] p{font-size:14px !important; line-height:115% !important}\n@media only screen and (max-width:480px){td[class=headerContainer] td[class=mcnTextContent],td[class=headerContainer] td[class=mcnTextContent] p{font-size:18px !important; line-height:125% !important}\n@media only screen and (max-width:480px){td[class=bodyContainer] td[class=mcnTextContent],td[class=bodyContainer] td[class=mcnTextContent] p{font-size:18px !important; line-height:125% !important}\n@media only screen and (max-width:480px){td[class=footerContainer] td[class=mcnTextContent],td[class=footerContainer] td[class=mcnTextContent] p{font-size:14px !important; line-height:115% !important}\n@media only screen and (max-width:480px){td[class=footerContainer] a[class=utilityLink]{display:block !important}\n. Safe Mode looks really useful for my use case. Thanks.\n. ",
    "arjay23": "input[type=\"number\" i]:disabled, input[type=\"search\" i]:disabled, input[type=\"tel\" i]:disabled, input[type=\"text\" i]:disabled, input[type=\"time\" i]:disabled, input[type=\"url\" i]:disabled, input[type=\"week\" i]:disabled {\n. ",
    "kevinSuttle": "Great questions. I'm not sure. I'm just now moving off of gulp. Perhaps @keithamus would have some insight. \n. @ai The thinking is to remove another abstraction, and learn the CLI API of the tool you want to use. \n. Forgive my ignorance, but is there something special about the way that the PostCSS and its plugins are designed that would prevent users from just calling the native tool they'd want to use (autoprefixer, cssmin etc)? http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/#runningmultipletasks\n. Slow? http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/#streamingtomultipletasks\n. Same thinking applies here: http://blog.overzealous.com/post/74121048393/why-you-shouldnt-create-a-gulp-plugin-or-how-to\n. Yes, just read the article. :) http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/#usingmultiplefiles\n. \nhttps://github.com/Semantic-Org/Semantic-UI/issues/1385#issuecomment-66509356\n. \n. Any progress on this? Would love to start using it straight up. \n. Poor attitudes in responses could be another reason why there is \"no community\" or no one willing to contribute...\n. ",
    "VinSpee": "I came here for this reason also. I'd love to see a cli.\n. personally I'm not opposed to a .postccsrc\n. ",
    "keithamus": "Also have a look at Browserify - which has a command line API and managed to deal with plugins and options: https://github.com/substack/browserify-handbook#configuring-transforms. \nAlso, Browserify conveniently lets you configure (some) plugins/options via package.json (https://github.com/substack/browserify-handbook#packagejson). This may be preferred over adding yet another file into the projects root. (or you could go down the JShint route and allow both package.json OR .rc file\n. ",
    "TrySound": "postcss is API\nFor CLI you can use wrapper under this API like Pleeease\nIt has .pleeeaserc for configuration and execution with two commands: compile and watch (chokidar is awesome)\nDo not reinvent the wheel ;)\n. @corysimmons Please see https://github.com/sindresorhus/ama/issues/17#issuecomment-117860283 why we opposed to it.\n. @stephenway You can always write issues or send prs. There is a product. To make it good for user we need to know what user want.\n. Happy New Year!\n. For functions reduce-function-call\nOr low level balanced-match\n. @borodean here I map functions with balanced-match and css-list\n@ai I can extend css-list for mapping functions.\n. Fast and simple: postcss-value-parser\n. I use it for layout modification with custom tagNames => .classNames, for adding class prefixes.\n. I use such API in my project\n``` js\nfunction Parser(selector) {};\nParser.prototype.build = function () {};\nParser.prototype.eachRule =  function (cb) {};\n// Callback could return selector that will be added to selector chain\n```\nFull code here\n. @davidtheclark my wrapper above use it\n. @davidtheclark I made own wrapper on this. And it was helpful. I didn't notice big problems, caz I used it small time.\n. @evilebottnawi Doesn't need at all. Where did you find that?\n. @evilebottnawi Using with postcss-import\n. @evilebottnawi postcss-import do not need this option. It handle only from postcss option.\n. @evilebottnawi postcss-copy is not postcss-import.\n. @evilebottnawi I see, but your mention to postcss-import doesn't make sense.\n. That's what I wanted to see.:)\n. I response for postcss-import and was confused with your mention. I don't have ideas.\n. Done https://github.com/TrySound/postcss-normalize-charset\n. @cvializ Well done!\n. @ben-eb Return a promise?\n. @comerc You don't need beast plugin. Use composition of plugins.. Deprecation is ok. For 6.0 need a time to rewrite all plugins :))\n. @jedmao As said @ai this feature will be realized in 6.0. It's too early for PR.\n. https://github.com/gulpjs/gulp/pull/1242/files\n. @ai after-c, before-c, here just after and before\n. @GitScrum \u041e\u0431\u043d\u043e\u0432\u0438 postcss. cssnano3 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 postcss5\n. @GitScrum \u0412\u043c\u0435\u0441\u0442\u043e cssnext \u043c\u043e\u0436\u043d\u043e postcss-cssnext \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c.\n. @ben-eb It's another pr))\n. @j6lim It's postcss-svgo issue. Place it here\n. @morishitter decl.raw.value exists only if value ends with spaces (if there isn't importnant) or contains comments.\n. @ai Everything is okay. Just my fix was unexpected, but it works.\n. @sotayamashita Is this what you want?\nhttps://github.com/postcss/postcss/tree/master/d.ts\n. Duplicated https://github.com/postcss/postcss/issues/391\n. @leftstick Does it still let to install module on older node?\n. @bighuggies With falsy options postcss-convert-values will do the same and also will trim leading zero.\n. @franckmaurin Show code of your loader\n. I mean webpack config\n. @XOP https://github.com/postcss/postcss/issues/495\n. @ai Does somebody want make it?\n. @corysimmons Linting for example.\n. @corysimmons Do you think somebody want to get warnings?\n. @LestaD https://github.com/postcss/postcss/issues/602#issuecomment-149518623\nI don't think somebody want to spend a time for unsupported project. . @ayhankuru It's not plugin. It's wrapper of module with own parser. Won't be accepted.\n. @stephenway You forgot to add link\n. @sebakerckhof \njs\n{\n  map: {\n    inline: false,\n    prev:  merged_css.map\n  }\n}\n. @oleersoy Which versions of modules do you use?\n. /cc @MadLittleMods\n. @ai Something familiar)))\n. @XOP Why you added link twice?\n. @XOP And now squash please\n. Partially it can be done with https://github.com/jonathantneal/postcss-unrgba\n. @callmez What do you mean to fix ?\n. @callmez It's not hack problem. You just added wrong path which can't be resolved.\n. @shellscape Need less parser for such things\n. @shellscape https://github.com/postcss/postcss-scss . Alternative for less doesn't exist, but you can change this :)\n. :-1: Just complicating\n. @papandreou Fix tests\n. @glebmachine Imports don't have practicle use case in production, caz slow. Better use postcss-import. For caching images there are a few plugins already. So, duplicating isn't good.\n. @roydukkey Try to run from cmd, not from visual studio.\n. @OEvgeny Just look at existing plugins. Plugins are defined with postcss.plugin function. So, postcss should be in regular deps to have ability to use this function. Also peerDependencies are deprecated for a long time. So, never use it. \n. @OEvgeny That's the same mistake. Better check plugins which in postcss org.\n. @OEvgeny The rule: everything u require in module code (not test and build code) you should place in regular dependencies\n. @OEvgeny You still can install postcss as dep, but not use it. I did such thing before move to npm3\nhttps://github.com/TrySound/case/blob/master/package.json\n. @ai They are not hacks, they are features :)\n. @ai @sneakertack :)\n. @HoBi Your code extends String prototype. Extending global objects is very very bad practice. And your problem is there I think.\nTry to use postcss-value-parser to remove difficult regexp\n. @HoBi It's not massive at all. I made it as small as it possible. Also regexps are less efficient. value-parser let you just compare strings and reassign value\n. @HoBi btw, regexp is much more massive parser :)\n. @HoBi And it's not a plugin, it's a parser.\n. @egoist You shouldn't use sync postcss api. It's only for debug. You should use promises which could be returned in transform method.\n. @egoist postcss own return promise. You don't need to wrap it in new one.\n. @egoist Can you show some real world usage example?\n. Seems like duplicating css-property-sorter. Also it does not follow guidelines. Plugin should use async methods where it's possible.\n. @hudochenkov U can see in css-property-sorter. Are you sure that rules sorting not breaks rendered styles?\n. @ai Maybe just pass this as an options?\n. Done!\n. @glebmachine Seems like an idea for some external module, but not part of postcss. Why not just use custom cache? You can define it in postcss.plugin function scope and it will be saved in all launches.\n. @ronnyamarante Any difference from this?\nhttps://github.com/thompsongl/postcss-class-prefix\n. @archana-s Where is link?\n. See examples in projects written on es2015.\n@moshemo https://github.com/ben-eb/postcss-colormin/blob/master/package.json#L10-L13\n. @moshemo First of all read api documentation. If you had some problems with understanding you can ask in our gitter channel. But you should ask more specific questions. Also read plugins code.\n. @Siilwyn That's why readme.md can't be ignored in npm.\n. @Siilwyn readme is docs. postcss has more docs than only readme. So you should include it.\n. We too don't like typescript too, but it is.\n. @dan-gamble  Where is link?\n. @snide Everything works fine. Check it again please.\n. Hm... we have better error message for this. Need to try without loader.\n. @timaschew Can you make two runs with disabled cssnext and with disabled precss?\n. @timaschew It was interpreted as media query, because after url can be optional media query :)\n. @timaschew cssnext do not have require at-rule. Seems like you have sass loader.\n. @timaschew Oh, you have precss. It uses postcss-partial-import.\n. @mattludwigs Show your config. This is the problem of plugins not postcss itself.\n. @mattludwigs Do you have stack trace?\n. @mattludwigs Share please minimal css code where you reproduce it.\n. @mattludwigs I know how to fix but need to add test for this case.\n. @mattludwigs css which reproduce this error.\n. @mattludwigs It's cssnano issue I think (node_modules/postcss-merge-rules/dist/lib/clone.js).\n. Try to pass mergeRules: false option.\n. @mattludwigs Never used webpack. Maybe css-loader?-merge-rules\nhttps://github.com/webpack/css-loader#minification\n. @mattludwigs  There was 3.5.1 release just now. Try to reinstall.\n. @mattludwigs Can you give us all css from your build? We can try to find the problem.\n. @mattludwigs @jwdotjs Should be fixed in https://github.com/ben-eb/postcss-merge-rules/commit/b2c5eec39d7df83bb3c2213a8f35ce88b3d017a8\n. @thejameskyle https://github.com/TrySound/postcss-value-parser parses all functions in value at once.\n. @jedmao Is there a way to make it a bit more compact?\n. Definitions.\n. @jakob101 Please squash and rename commit like Add the postcss-inline-rtl plugin.\n. @nezed Can't postcss-use do what you need?\n. Or you want something like\ncss\n@use autoprefixer;\n@ignore stylelint;\n. Btw normalize.css has font-family: monospace, monospace which shoudn't be affected with minify-font-values. In this case it should be customised via options.\n/cc @ben-eb \nWe need to integrate the same feature in cssnano4.\n. I'm for plugins too.\nI think we should introduce internal API for plugins filtering which can be used out of the box in options or via postcss-use or similar plugins,\n. @ai source exists if object. Not exists if string.\n. Should I add the same position in original?\n. /cc @jedmao\n. @resting on is stream method, not sass.\njs\n.pipe(sass()).on('error', sass.logError)\n. /cc @ben-eb \n. @MoOx Wil this help?\njs\n({ something } = {}) => {}\n. @MoOx But it still should be if you want to use destructuring in arguments to error correctly if even object is not passed.\n. Done.\n. Yes, you can.\nhttps://github.com/andyjansson/postcss-functions\nhttps://github.com/cuth/postcss-pxtorem\n. @evilebottnawi For details info you can use https://github.com/TrySound/postcss-value-parser\n. @dan-gamble Seems like duplication of https://github.com/jonathantneal/postcss-font-weights\n. Parser shouldn't evaluate anything. It just generates AST. So the name is not correct.\n. @matthew-dean postcss-less is only parser. So it ideologically couldn't be named like this. It's something like converter, I think. Or adapter. Evaluator?:)\n. @michael-ciniawsky Done. But publish next major version please.\n. Node0.12 until the end of supported days.\n. It's when somebody still supports 0.10 and ask you to support.\n. Config can be different for different cases. Save to variable if you want to reuse it.\n. @ai css-modules plugins first converts all to icss which is looks like this\ncss\n.localClass {}\nturns into\ncss\n:export {\n  localClass: 'globalClass--hash'\n}\nAnd then loader extracts all info from this.. We can concat prefixes on extracting only in one place. Nothing wrong with it.. @Diokuz I do ICSS utilities which will be used in all loaders and behave in the same way.\nhttps://github.com/css-modules/icss-utils\nSo this will be fixed.. I mean css-loader, css-modules-parser, core loader. @dschinkel Please move this issue to cli project\nhttps://github.com/postcss/postcss-cli. @iddan In the beginning it was for performance reasons. Now we have a problem like custom syntax. If we will parse all stuff then we won't be able to introduce a lot of syntax sugar which is made postcss so popular and useful.. It's different parser architecture which can break all existing stuff.. Well, the discussion is here FYI.\nhttps://github.com/postcss/postcss/issues/754. @michaelalhilly I guess it's related to postcss-cli project. @bradennapier Wrong repo. Post this issue in postcss-cli repo please . @hzlmn I'm not sure such fragmenting will be useful for community. PostCSS is not so big. It's just parser, traverser (+tree utils) and stringifier.. and here\n. ",
    "hawkrives": "I vote for the separate arg style. \nThat also leaves future flexibility for things like subarg syntax \u2013 see, for example, how you pass options to Browserify transforms. \n. browserify -t [ babelify --experimental ] -e input.js > output.js\nWhere Browserify gets all the arguments outside of the square brackets, and passes the ones inside to the invoked command.\u00a0\nSo the arguments are parsed into something like:\n- Browserify\n  \u00a0 \u00a0- -e input.js\n  \u00a0 \u00a0- -t\u00a0\n  \u00a0 \u00a0 \u00a0 - babelify\n  \u00a0 \u00a0 \u00a0 \u00a0 \u00a0- --experimental\nI think substack's pulled the subarg parsing into its own package. (https://github.com/substack/subarg)\n. really, github? I'll edit that as soon as I'm back at a computer. \n. An example for PostCSS would probably look something like postcss -p [ autoprefixer -b \"browsers\" ] input.css > output.css\nNote that if you don't want to pass any args to the plugin, you dont need the brackets: postcss -p autoprefixer input.css > output.css\n. I've got a proposal:\npostcss [-p plugin] [some input files] [-o output-file] [--out-dir dir]\n- Any number of plugins, each with its own -p .\n- Any number of input files\n  - If you give one input file, and no output, it'll write to stdout\n  - If you give -o with one input file, it writes to that file\n  - If you give multiple inputs, and no --out-dir, it'll overwrite the input files\n  - If you give --out-dir with multiple input files, it'll write the corresponding files to the specified directory\nI took --out-dir from Babel's cli. \n. @ai Because bash expands wildcards before invoking the executable. \nLet's say we have a.css, b.css, and c.css under src. If you run postcss src/*css output/, then the arguments that will be passed to the postcss cli will be src/a.css src/b.css src/c.css outout. (I'm ignoring the arguments for executable name.)\nRight? Or am I misunderstanding something?\n. ",
    "pirxpilot": "I published postcss-cli module - I need it since we are using Make to build everything.\nI think the API is quite close to what's been discussed here. But it does not do stdout/stdin and multiple files. I am sure that can be easily added if people want it.\nYou are welcome to comment, contribute, clone into postcss org or ignore ;-) \n. You're right. I am using yargs so .json comes for free - but if someone needs .js we can easily add it.\n. TL;DR postcss-cli is in postcss org now, needs a maintainer\nI wrote postcss-cli to be able to use postcss and autoprefixer with Make. I never intended for it to become an official (whatever official means) CLI runner for postcss. I went in some trouble to add features to yargs to make handling config files easier. And I took quite a few patches that added features that - strictly speaking - were only needed if you want to use CLI tool independently from Make (globs, stdin/stdout, Windows compatibility, multiple files, watch functionality etc.)\nI always thought that if someone wanted to take the module in another direction they can fork it and work on it. It never happened. I recently realized that as long as postcss-cli lives in a different organization there might be a reluctance to do that.\nSo this is what I am going to do:\n\u2022 I am forking code42day/postcss-cli into postcss organization.\n\u2022 I am going to update all references to postcss-cli to point to postcss/postcss-cli (if you find any I missed - go for it)\n\u2022 I am making @aj an owner of the npm module - he'll probably decide to pass the ownership to someone who will maintain it in the long term \nI won't be maintaining postcss/postcss-cli any more. Since I still need a tool  like that, I will be maintaining postcss-cli-simple that would have a minimum set of features needed to use postcss with make.\nThank you @aj for postcss. And thanks to @FND @schoenwaldnils\n@rnons @mkurz @vtrrsl @sciyoshi @drusellers @asimpson who contributed patches to postcss-cli - maybe one of you can take over postcss-cli maintenance.\n. Seems OK. Two things:\n- As far as I can tell async API is not documented in API.md - we can't tell people use async API and use only documented API and then not document async API\n- Lose the whole scary mandatory thing. It's not needed, and it's not enforceable. You can't stop people from writing stuff even if you don't agree with it (and it's a good thing); Instead, let's say something like:\nin order for you runner to be listed in official postcss Readme it has to follow these guidelines\n. ",
    "niksy": "What @MoOx said, maybe follow the path browserify-shim uses for custom config: https://github.com/thlorenz/browserify-shim#c-config-inside-configshimjs-without-aliases, e.g. load some config by default (postcssConfig.js) but leave users with option to override via CLI? This way, other plugins like grunt-postcss can use this config for their processors property.\n. ",
    "stephenway": "@ai Let me share my very first experience when my team and I decided to make the switch. We are a clojure/cljs shop which relies on https://clojars.org/ https://www.jfrog.com/artifactory/ and makefile. We did not want to add node to the mix in our apps, so I was tasked with using the unofficial postcss cli in a makefile.\nAs I began to use the cli, I was finding myself running into a variety of errors that didn't seem to line up with how the gulp/webpack versions tend to work. After about a week or two I was forced to switch to gulp in a separate project.\nI believe that the cli needs some work, and should be brought into the postcss org. Being a 3rd party was apart of the barrier to entry as well. I don't think the issue is if it comes with the main postcss project, it just needs some improvement.\n. Agreed. I'll work with the maintainer to make it better. I thought providing some perspective would help everyone understand the confusion. For the record, I'm in support of it being separate.\n. I can help with design and or frontend work if needed? @ai love your idea of the theme of the artwork.\n. Hah, I think we fixed at the same time. Thanks guys.\n. Curious, would you be able to use these components like mixins by specifying arguments?\n``` css\n.button-with-args {\n  @bootstrap button primary;\n}\n/ or /\n.button-no-args {\n  @bootstrap button-primary;\n}\n```\n. @ai Thanks for the response. I'm in the middle of writing a large set of components using mixins, and if this is flexible I might consider adopting this code pattern.\n. You can use it on codepen.io if you go into CSS settings. It's not native to the browser, and I doubt it will be.\nA lesser functional option would be if you edited your postcss in the sources panel then compiled using terminal or devtools terminal. That experience isn't as good as a modern editor though.\n. ",
    "bhavinkamani": "Oh..  Is there a way to bypass parsing for certain section of css using annotations (like /* autoprefixer: off /*)?\n. I need this for using data-binding css values with variables in polymerjs. Alternative is to bind them manually using javascript which become little ugly. It a front-end templating syntax for data-binding. For example - http://jsbin.com/pelon/1/edit?html,output\n. Hmmm.. Thats a great short term workaround and long term solution. I look forward to the custom parser option. In the mean time your suggested workaround will hold good. Thanks a ton. \n. ",
    "hax": "@yisibl I don't find the syntax for placeholder in css extension draft, but your example seems ok. But mixin is too powerful and complex, up to now I have no idea how it can be introduce to css extension spec... Though there is custom at-rule in the draft means anything is possible :)\n. ",
    "morishitter": "I agree if implemented as a plugin, be not in core. But, is this postprocessor? I think, the input of postprocessor is just CSS code browsers can interpret.\n. CSS custom properties plugin, postcss-custom-properties is polyfil of CSS4. \n\nwe should not think only about standard CSS, because we must to find some new ideas.\n\nI think so too :) But, this is out of scope of PostCSS.\n. Certainly, mixin and nested rules that Sass has are very useful, because we can write code more shortly. I'm not opposed to these plugins.\nPostCSS was able to build not only postprocessors but also preprocessors (meta language), hehe :D\n. @davidtheclark \nHi, I'm the author of AtCSS and I made postcss-extend. postcss-extend is annotations based @extend plugin for AtCSS.\nIf you will make postcss-full-extend, It's good for me to hand over the name :) I will rename ex, postcss-annotation-extend and unpublish postcss-extend.\n. @travco Cool! If you want to publish it as postcss-extend, I will rename my package to the other name.\n. @travco I unpublished postcss-extend and renamed to postcss-annotation-extend.  Feel free to publish your package named as postcss-extend:)\n. Cool! I will selebrate it from Japan :D \n. @ai Today, I took a photo when I was drinking with my friends. When should I tweet to celebrate? An hour later, Monday is comming in Japan.\n. I have the same bug in CSSfmt. https://travis-ci.org/morishitter/cssfmt/jobs/81744843\nI found, some decls have decl.raw.value but some decls don't have it.\n{ before: '\\n  ',\n  between: ': ',\n  value: { value: '12px', raw: '12px      ' } }\n{ before: '\\n  ', between: ': ' }\n{ before: '\\n  ',\n  between: ': ',\n  value: { value: 'red', raw: 'red     ' } }\n{ before: '\\n  ', between: ': ' }\n{ before: '\\n    ', between: ': ' }\n{ before: '\\n    ',\n  between: ': ',\n  value: { value: 'red', raw: 'red     ' } }\n{ before: '\\n    ', between: ': ' }\n{ before: '\\n      ',\n  between: ': ',\n  value: { value: 'red', raw: 'red     ' } }\n. @TrySound Thanks. Now, I could fix it :) https://github.com/morishitter/cssfmt/commit/be7c516af006910c5821c11dcb713328a4fca170\n. @ai I'm so sorry to be late. I just enabled two-factor authentication.\n. @ai Thanks :)\n. ",
    "kadmil": "Personally, I like \"good old\" sass-less mixin syntax. Looking on Stylus option and wonder, how much time will be lost in debug mode with \"mixin-as-class-selector\" thing.\n. I've tried some classless css stuff; without use of classes, only knowing what markup will be, it was quite convenient to have mixins for \"padding: 10px; border: solid 1px red;\" things. Or flexbox\n@mixin flexbox-container {\n    display: flex;\n    flex-wrap: wrap;\n}\n. I'm just regular not-so-fond-of-css guy, so maybe it's just lack of education, like @MoOx assumed. BTW, if there's a way to modularize css without classes (there could be so many of them, of my!) and mixins, point me to it, please.\n. @MoOx yep, this case seems solvable with variables. But what about my flexbox example? To be more specific, there was some custom flexbox-connected stuff in couple of elements besides mixin properties. Mixin looked quite handy.\n. @MoOx one more thing, I can't really see any readability issues with mixins besides good naming, which is a more general problem.\n. ",
    "benfrain": "Great thread. It seems the debate is primarily a philosophical one. @MoOx is arguing purist values (should only future proof specced CSS) while others see the benefit in the utility of tools that LESS/Sass/Stylus have brought to style sheet authors.\nI think it would be a mistake to be too prescriptive. I mentioned to @MoOx this: https://github.com/cssnext/cssnext/issues/60 which he dismissed as unlikely and something that could be easily solved with some other templating solution, yet this was not a fabricated scenario, it was an actual problem, as a style sheet author (yes, over 100 variants on a site that has millions of daily users) that Sass could solve and PostCSS/cssnext could not.\nThe ability to plugin extras (e.g. requiring 'post-css-data-structures') if the user required it seems like the best of all worlds. Using PostCSS raw gives you @MoOx pure form, @davidtheclark can keep his build clear of things he doesn't want and any user like myself, that would embrace extra tools such as these could do so.\n. @ai in fairness looping it is not an everyday occurence. However, when needed it has been most welcome: As an example, I was given over 150 product categories (as a JSON file), each with its own background-color, border-top color and border-bottom color. I needed to create a class for each with the relevant values. That was easy to solve with Sass and I have concern about how I would solve the same problem if I migrated to postCSS (I documented that one fully here: http://benfrain.com/using-lists-with-maps-in-sass-3-3/).\nThat is not something I would want to do by hand! \nOne thought off the top of my head would be some 'parse-as-js' delimiter so that a block of JS could be written inside delimited characters in the CSS and this would be parsed as JS and written back into the processed CSS at that point (obviously I have no idea how to implement that but it would provide a lot of author freedom ;)) If the delimited section was itself within CSS comments it would retain the integrity of the file remaining parseable CSS.\n. @ai - yep that example is very useful and would certainly solve the problem for me. :+1: \nI don't actually need to at this point but I am curious, would there be a way of defining which point in the CSS those rules would be appended?\n. OK, here is what I have now but same problem (no extra rules appended and no error message). As I'm trying to set this up inside Gulp I'm not sure if I am confusing matters (I have both gulp-postcss and postcss under different vars which I'm sure isn't the right way to do this:\n``` js\nvar postcss = require('gulp-postcss');\nvar simplevars = require('postcss-simple-vars');\nvar autoprefixer = require('autoprefixer-core');\nvar mqpacker = require('css-mqpacker');\nvar csswring = require('csswring');\nvar nestedcss = require('postcss-nested');\nvar corepostcss = require('postcss');\nvar categories = require('./data/cat-colors.js');\nvar dataloop = function(css) {\n    for ( var category in categories ) {\n        var borderTop = categories[category][0];\n        var borderBottom = categories[category][1];\n        var rule = corepostcss.rule({ selector: '.cat-' + category });\n        rule.append({ prop: 'border-top', value: '1px solid ' + borderTop });\n        css.append(rule);\n    }\n};\ngulp.task('css', function () {\n    var processors = [\n        autoprefixer({browsers: ['last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4']}),\n        simplevars,\n        nestedcss,\n        dataloop\n    ];\n    return gulp.src('./preCSS/*.css')\n        .pipe(postcss(processors))\n        // .pipe(postcss(processors).on('error', gutil.log))\n        .pipe(gulp.dest('./dest'));\n});\n```\nAppreciate any further pointers :)\n. Just for anyone hitting this at a later date, it was (as suspected) a basic beginner JS issue. Here was the working loop:\njs\nvar dataloop = function(css) {\n    for ( var category in categories.colorList ) {\n        var colorSet = categories.colorList[category];\n        var borderTop = colorSet[0];\n        var borderBottom = colorSet[1];\n        var rule = corepostcss.rule({ selector: '.cat-' + category });\n        rule.append({ prop: 'border-top', value: '1px solid ' + borderTop});\n        rule.append({ prop: 'border-bottom', value: '1px solid ' + borderBottom + \";\"});\n        css.append(rule);\n    }\n};\nI also switched to a JSON file too. That ended up looking like this:\njson\n{\n    \"colorList\": {\n        \"c1\"  : [\"#000000\", \"#000011\"],\n        \"c2\"  : [\"#000011\", \"#000022\"],\n        \"c3\"  : [\"#000022\", \"#000033\"],\n        \"c4\"  : [\"#000033\", \"#000044\"],\n        \"c7\"  : [\"#000044\", \"#000055\"],\n        \"c8\"  : [\"#000055\", \"#000066\"],\n        \"c9\"  : [\"#000066\", \"#000077\"],\n        \"c10\" : [\"#000077\", \"#000088\"]\n    }\n}\n. @MoOx - could you expand on that a little? Apologies for all the beginner questions; I'm still getting to grips with the possibilities postCSS offers!\n. That sort of thing would be ideal. Although I'm a little torn. Let me explain.\nPart of the attraction of PostCSS for me was the ability to try and use JS syntax/approaches when tackling 'logic' problems in authoring CSS. That way I get better at writing JS, which I can use in both PostCSS and actual JS.\nThis 'nicer' syntax you suggest is an abstraction that is close to Sass. So then I'm thinking, if all these plugins end up looking and acting just like Sass, I may as well just use Sass.\nI realise this may seem a bit odd but I wonder if there is scope for a plugin that just parses blocks of JS inside the CSS as JS and exports it out as a string in that position in the processed CSS?\nI don't know, maybe it is just me!\n. @ben-eb that syntax is fine, and is exactly the kind of thing I'd like to use. :) \nHowever, I'd just like the ability to stick that in the CSS file itself so that it gets picked up and parsed. That way, I can keep the pieces of logic inside the partial file it is relevant to (I tend to shard each visual component e.g. _table-of-contents.css). That way, when I remove that partial I can also remove loops and the like that are only relevant to that component.\nSo I guess it's some plugin that can identity something in a comment, pick up the enclosed JS and parse it.\nI don't know, does that sound like madness? \n. Boiling it down I suppose I want to write CSS in my style sheets when being declarative and JS when logic is required. \nI don't want a new pseudo syntax that is neither one nor the other (as is the case with Sass logic already - that knowledge/syntax can't be transported and used elsewhere). \nIn a system based in JS it just seems odd to not be able to write JS. But I am naive and don't necessarily appreciate the difficulties in planting JS inside CSS. \n\nOn 18 Apr 2015, at 10:49, Andrey Sitnik notifications@github.com wrote:\nI have too some cases, when custom plugin will be bad solution and loop inside CSS will be more readable.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes, using comments \u2014 I now agree: the syntax highlighting issue alone (with comments) is enough to make me think it's a bad idea at this point.\n\nHowever, perhaps the parser need not choke on at-rules? Could something like @parsejs {} get through the parser and get eval'd back in place?\nIt just occurred to me that generating any kind of string via programmatic means can be handled by Javascript.  Apparently JS is quite popular ;) If PostCSS ends up having its own (non portable) abstractions for for loops, mixins and the like, it'll be problems that have already been solved that same way with Sass (and LESS and Stylus etc) and they will have all the same kinds of restrictions so authors may as well just use one of those languages instead. \nHowever, something that enabled full on JS logic (when and if needed) within style sheets just seems infinitely more useful to front-end developers. \n?\n\nOn 18 Apr 2015, at 11:51, Ben Briggs notifications@github.com wrote:\n@ai I was trying to illustrate why you wouldn't need it. It's definitely not something that I would want to support. \n\u2014\nReply to this email directly or view it on GitHub.\n. @ai you're probably right ;)\n. \n",
    "jedmao": "@MoOx and @ai here are some valid reasons NOT to use data URIs. See http://www.mobify.com/blog/css-sprites-vs-data-uris-which-is-faster-on-mobile/\n. I also made some CSS value parsers that are completely decoupled from PostCSS:\n- parse-css-font\n- parse-css-dimension\n- parse-css-sides\nCombined with postcss-resolve-prop, you can achieve some tight syntax, like postcss-font-helpers and postcss-margin-helpers.\n. Sure! I'm in flight right now, but when I get back home I'll do it when I have a moment.\n. :+1: for the more verbose method names like insertBefore. I think all method names should be verbs. before, after and between all go against this convention. Prefixing them all with insert adds clarity.\n. Have you considered dumping these issues into milestones for major and minor release versions for tracking? Personally, I like how it's done in the Microsoft TypeScript Milestones.\n. @ai the fix build commit has been removed. All checks pass!\n. I should note that if a path.resolve(source.input.file) were run on these file paths then it would pass just fine. Unfortunately, I can't do that in a JSON file.\n. And for the record, my GitHub folder is on my z: drive. That's why you see the z: paths in there.\n. That sounds like a great idea!\n. I'll try to help here. BTW \u2013 what is the purpose of the valac branch?\n. I think I'll have to convert these JSON files into JavaScript files to path.resolve each path for this to work on Windows. Is this acceptable for you?\n. @ai the valac branch works great on Windows! I even ran gulp cases first and there were no changes, so that's good. Everything is fast too. There was an unrelated error, however, with spell check:\n```\n[ERR] Z:\\Documents\\GitHub\\postcss\\docs\\syntax.md 725 ms\n\nTypos: 1\n1. TODO (count: 10, suggest: TO-DO)\n\n```\nI agree with https://github.com/postcss/postcss/issues/445#issuecomment-126993181, but I just install GitHub for Windows, which comes with a portable version of msysgit. I then set my PATH environment variable to include AppData\\Local\\GitHub\\PortableGit_xxxxxxx\\bin, which gives me a bunch of Unix commands, even in the Windows Command Prompt. I rarely use the Windows Command Prompt, however, because I set my default shell in GitHub for Windows as Git Bash:\n\nHave you given any thought to AppVeyor yet?\n. It runs the tests on Windows vs. Travis-CI, which is Unix-based.\n. I'm suggesting you use both.\n. That explains the valac branch. Thanks!\n. My arguments were less about ease of development for this project specifically and more about ease of development for the plugin developer, providing them with in-editor documentation and type information. Plugin developers could still freely write in ES5, Babel or TypeScript. Nothing changes there. Also, as I said before, the Babel loader would still be used for postcss, just as it is now.\nBTW, when I converted all PostCSS library code (on master) into TypeScript I didn't come across any ES7-exclusive features. What are the ES7 features you are using?\nLasty, the argument that people would be afraid to contribute to this project, it's a valid concern; however, type information is opt-in. They don't have to use types if they don't want, but they can still be inferred automatically by the compiler in some cases (e.g., returning a specific type).\nHow is TypeScript not open for every developer?\n. TypeScript has class properties. I'm not sure what other sugar you're looking for, but TypeScript is definitely actively engaged in aligning with ES6/7 features. Some of them are already implemented and others are on the roadmap, but there is no ES7 compile target yet.\nYes. You understand correctly. In-editor documentation is provided only if you type the jsdoc-style comments above each public member. As for type information, some of it can be inferred, but others need to be explicitly stated. This is extremely useful when declaring an interface for an options hash so the developer doesn't have to wonder which keys and value types they can provide. You literally never have to lookup documentation online if you use an editor that supports TypeScript. I can link to some examples when I'm not typing on my phone later.\nI agree that some developer concerns are not rational or they fear the unknown, but a language such as TypeScript, being a superset of JavaScript, is much less Earth-shattering than CoffeeScript, which completely deviates from JavaScript syntax.\nAnyway, I understand if this never happens. I'd like to know when development calms down before re-writing TS definitions for the valac branch. I'm just worried that those definitions might more easily become out of sync with the actual code if it's not properly maintained. This, of course, wouldn't be an issue if the source code itself we're TyppeScript.\n. I see what you mean. I think I can do that.\n. @ai now I understand what gulp cases is doing, but I have to think that maybe these test cases shouldn't be pushed to the repo. Instead, it can be a pre-test script that generates them, which would pass on any OS w/o modification to the gulp cases task. What do you think?\n. We're about to find out (build pending).\n. @ai see the latest commit. Travis is passing. I just deleted all the JSON files and added a pretest script in package.json. Works like a charm!\n. Also works on Windows, but you should do what @MoOx suggested and setup AppVeyor for the Windows build.\n. I guess I don't understand when you would build the gulp cases then. Sorry. Not sure what to do here, because I'm not sure why the cases were designed this way.\n. ok got it.\n. @ai your strategy is working, but it's super slow! See?\n\n. I got it to go much faster by including a <case>.windows.json file for each case.\n. I'm looking for a better solution though.\n. There is another option. We could use path.posix for all path operations to keep things Unix-like. Is that a horrible idea?\n. Not just vertical, but horizontal as well. They can both be a bit tricky.\n. Thanks @MoOx! You're referring to these lines, for reference.\n. If the comments are preserved in transpilation from ES6 to ES5, does it matter what ES6 support it has? Currently, only the ES5 JavaScript is published with the npm package.\n. @ai I already implemented all the API docs as JSDoc comments in my typescript branch. See node.ts as an example. All it requires is a simple tsc command to build .es6 files from the TypeScript source and all the documentation is there.\nThat said, I've only used Visual Studio and Visual Studio Code to generate JSDocs, but I wouldn't be surprised if there was something better out there. Still, it's nice how you can just type /*** to start the JSDoc comment and start typing away. Every subsequent ENTER key press keeps you in a comment block. Not sure if other tools have more support than that, but I imagine they would.\n. @ai I created a jsdoc branch. See the comparison here: https://github.com/postcss/postcss/compare/master...jedmao:jsdoc\n. @ai, I should mention that the branch is just the transpiled result of my typescript branch source code.\n. Once we have the JSDoc comments, we can generate documentation pages with YUIDoc or something similar.\n. @ai, the JsDoc support in TypeScript is only one piece of the pie. The definition files also provide types and interfaces, some of which are inferred by the types declared within functions. I didn't look at your JsDocs yet, but I'm pretty sure that even if you were extremely thorough with return types and such, JsDocs by themselves would still fall short of the completeness of the complex type information that TypeScript provides, specifically with interfaces. Let me take a closer look and provide an example to illustrate my point, if you're interested, but this is perhaps why some people don't use TypeScript, because they truly don't understand the power it provides with IntelliSense, which is much more than documentation hints.\n. It might be that simple, yes, but I need some time to investigate.\n. @ai you really have been very thorough with your JSDocs. Very impressed!\n@andyjansson, you asked what was missing. I just thought of one example; though, I bet there are more. What about generic types? See this line, which allows a plugin like postcss-triangle to provide an interface/template of plugin options via generic types. \n. @andyjansson the TypeScript definition files are only for people who are writing a PostCSS plugin in TypeScript. In this case, the files are being used, as you can see here. This makes it so a TS user can do:\nts\nimport postcss from 'postcss';\nAnd if their editor supports TypeScript, it will read the files in the d.ts folder for more information.\n. @andyjansson, yes. I just finished reading JsDoc support in JavaScript and it does look like they do support generic types with the following syntax:\n``` js\n/*\n * @template T\n * @param {T} p1 - A generic parameter that flows through to the return type\n * @return {T}\n /\nfunction fn4(p1){}\n/* @type {function(string, boolean): number} /\nvar fn5;\n```\nStill investigating a bit on the existing JsDocs that @ai has written. I already made a comment about one of perhaps many inconsistent return types, so it looks like there might be yet more work to do on the JsDocs.\n. You won't get any complaints from me as long as I can do this...\n\nThat's the TypeScript definitions in action. As for the JsDocs in this repo, I can't even get them to work in vscode yet, so I'm not sure what I'm doing wrong there.\n. For those interested in trying it out, I put up a repo postcss-foo to see some in-editor vscode action. Still can't get the JsDocs to work though, and yes, I copied the js files from latest master, complete with JsDocs.\n. @ai, I'm guessing you've tested the JsDocs in some editors already? Which ones did you try so far?\n. I can't confirm that yet, @ai, because I can't get the JsDocs to work in-editor yet. For me, it could be a vscode issue, but I haven't verified that yet. Also, there are still some gaps between what my TS definitions provide vs. your JsDocs (example above with generic types). Lastly, I'm thinking there are a bunch more union types that are being returned that you haven't called out, so I wanted to look at that too, but I can't necessarily commit to investing time in that at this moment either.\nCan someone \u2013 anyone \u2013 get these JsDocs to work in vscode? Or, at the very least, any other IDE that supports JsDoc? Can we start from there before gutting out the TS definitions?\n. @ai, it might be easier to identify more issues w/ the JsDoc if you compare your JsDoc w/ the corresponding TS definition file. As those files were generated, that means they passed through the TS compiler successfully, resolving any multiple return type issues and such.\nOf course, you can always move forward and iterate w/ patch versions, but I think it would be unwise to ditch the TS files until we know the JsDocs are working properly in-editor.\n. Mmm, not really in the mood to install WebStorm. Let's just move forward w/ the JSDocs and keep the old TS files in there for now. How's that?\n. @ai there are already huge repos like DefinitelyTyped that provide definition files. That is one solution; however, the glory of having the files installed w/ npm install postcss is that you don't need to \"hunt the typings down\". They already come included, and because the typings key is provided in the package.json file, editors that support TS know exactly where to find them.\nIt seems to me that the golden path way to provide TS definitions is to reference them in your package.json file and include them in the npm install. That said, I know I can emit the definition files w/o comments, which, if I did, it would probably track down the documentation from the JSDocs. If only I could get the JSDocs to work in the first place under vscode. I'll submit an issue. Please, give me a bit more time to figure this out.\n. I see now. @andyjansson's screenshot above is a relative module import, which is definitely working for me; however, that completely bypasses the package.json file's typings field. It appears that, at least, vscode does not yet support IntelliSense for node module imports. It's in their backlog though.\nThis means that even the JSDoc support won't work in vscode on a module import. The only way to get IntelliSense (for now) is via the typings field in the package.json file, which points to the TS definitions. If it's removed from this repo, then people will have to go hunting for them. Clearly, I wouldn't be happy about this, as all my plugins are written in TypeScript, but I guess I'm just one person!\n. I still don't agree w/ moving the definitions, but if you're set on the idea, there's nothing I can do about it. I don't think it requires any documentation, as TS users know where to look for definitions.\n. I will never win that argument.\n. TypeScript 2.0 is almost out and it looks like they will be improving declaration file acquisition.\n\nPublishing declaration files with your packages would be the preferred course of action. for packages that do not include their declaration files, @types, would be the correct place for them.\n@mhegazy, https://github.com/Microsoft/TypeScript/issues/9184#issuecomment-226299103\n\nIn other words, if you don't bundle the declaration files w/ the PostCSS package any more (the golden path), you should at least be able to install them via:\nnpm install --save @types/postcss\nI would imagine we'll hear some big news about TS 2.0 this week or next.\n. How are you thinking ES6 will do it differently?\n. Ahh, well that would be similar to Python's walk. You could even use destructuring to get the index in there:\njs\nfor ( let [decl, index] of rule.walkDecls(/^background/) ) {\n    // do stuff...\n}\nI suppose ES5 plugin developers would write it thus:\njs\nrule.walkDecls(/^background/).forEach(function(decl) {\n    // do stuff...\n});\nUnless they wanted to break, in which case it would be something like:\njs\nfor ( var i = 0, decls = rule.walkDecls(/^background/); i < decls.length; i++ ) {\n    var decl = decls[i];\n    break;\n}\n. es6-symbol looks hugely popular.\n. Sounds great to me!\n. @lydell the PR does preserve the old names and print deprecation warnings, so we're OK there.\n. For anyone interested, the definition files were generated from converted TypeScript code on my valac-typescript branch. Tests were also converted into TypeScript and they all succeeded.\n. Not sure where GitHub got confused, but a simple rebase got rid of those two commits. I've never seen that happen before.\nAnyway, all is well now.\n. eachDecl and such exists in the Container class because the d.ts files are generated files and that's coming from the methods that print the deprecation warnings.\nThat said, they do not exist in the Container interface, which is why plugin developers will never see it in their editors with Intellisense. Only the interfaces are exposed to plugin developers. They only have access to public API members this way and will stay out of your kitchen so to speak.\n. For the record, postcss-nested-props is aligned with Sass syntax and I would be happy to update it to whatever new requirements we define.\n. I use multi-line all the time. It makes the diffs less confusing.\n. I'm inclined to agree with @1j01. All about tabs here.\n. \n. I like the Python approach where all indentation is supported, but MIXED indentation is denied.\n. Too many people are not aware of what \"mixing\" tabs and spaces actually means. It's perfectly OK to have leading tabs, followed by spaces. What you want to flag is two scenarios:\n1. Leading spaces, followed by tabs.\n2. Leading tabs, followed by spaces, followed by more tabs.\nWhat you do NOT want to flag are the following scenarios:\n1. Leading tabs (indentation), followed by spaces (alignment).\n2. Anything that happens after indentation (you shouldn't be concerned about it).\n. @1j01 to be clear, there's nothing wrong with spaces followed by tabs unless they are then followed by more tabs.\n. @1j01 spaces followed by tabs are considered alignment is my point, which some people do (not me), but some do.\n. Thank you @ai!\n. That sounds right to me, unfortunately.\n. isparta uses Istanbul.\n. I'm unclear what you're talking about.\n. Istanbul says:\n\nAll-javascript instrumentation library that tracks statement, branch, and function coverage and reverse-engineers line coverage with 100% fidelity.\n\nI guess that means no condition coverage, but it's sure better than no coverage at all and I'm unaware of any tool that measures condition coverage for JavaScript; though, i haven't really looked into it.\nWhat I do know is that Istanbul is very well-known/used and widely supported, so it's bound to implement well into this code base as it has for me on many other projects.\n. I've used /* istanbul ignore next */ myself, many times. What is the example that's not working? Maybe you need 2 of them?\n. Hmm. Yeah, it's not working. Maybe it's configuration related? Because I've definitely had it work for other projects.\n. Also, if you want to see where the coverage is lacking, run npm run cover and then open coverage/lcov-report/index.html to see what's not covered.\n. @ai there's nothing to fix on Windows. It works fine.\n. The Travis and AppVeyor checks below also verify there's nothing wrong on Windows :)\n. I didn't use gulp-istanbul because I couldn't figure out how to get it working with isparta and there was no gulp-isparta. Looks like you figured it out though. Nice work!\n. There's no space in the input though. And normalize.css passes the W3C CSS Validation Service, so I looked into the postcss.parse() method and it has no issues:\n``` js\n\npostcss.parse('input[type=\"number\"]::-webkit-inner-spin-button,\\ninput[type=\"n\number\"]::-webkit-outer-spin-button {\\n  height:auto;\\n}\\n')\n{ raws: { semicolon: false, after: '\\n' },\n  type: 'root',\n  nodes:\n   [ { raws: [Object],\n       type: 'rule',\n       nodes: [Object],\n       parent: [Circular],\n       source: [Object],\n       selector: 'input[type=\"number\"]::-webkit-inner-spin-button,\\ninput[type=\"\nnumber\"]::-webkit-outer-spin-button' } ],\n  source:\n   { input:\n      { css: 'input[type=\"number\"]::-webkit-inner-spin-button,\\ninput[type=\"numb\ner\"]::-webkit-outer-spin-button {\\n  height:auto;\\n}\\n',\n        id: '' } } }\n```\n\nIs it possible the postcss-loader is to blame?\n. It must be style-loader or css-loader then, because I used the example straight from the readme:\nloader: \"style-loader!css-loader!postcss-loader\"\nI'll look into it, but it looks like it's not a postcss issue. Thanks!\n. @ai you deleted this section right after merging it in https://github.com/postcss/postcss/commit/b4b5d420d615ba51911563b2f8d6031a65b800a0?\n. @ai these are generated files and I was hoping to keep them 100% generated by the TypeScript compiler; thus, easier to maintain. Otherwise, I have to go into each file an trim trailing whitespaces every single time I generate the files.\nI can open up an issue on the TypeScript repo to request trailing of whitespace on compilation, but I doubt they will prioritize such a request.\nAlso, I have a feeling I'll be the one most commonly keeping these files in sync w/ the PostCSS API, so I'd really like to know the value of removing trailing whitespace in this case. These are not your typical source files.\n. Is there an npm package you would use for this? I can't seem to find one, surprisingly.\n. Done in https://github.com/jedmao/postcss/commit/d0879bfdb5adfd4f64227da3656b88e0058e857b\n. And here's the TypeScript issue: https://github.com/Microsoft/TypeScript/issues/4629\n. @ai are you sure AtRule#raw has anything at all? Here's what I'm seeing:\n```\n\npostcss.parse('@a foo / bar / {}').first.raw\n[Function: raw]\n```\n\nIf, however, I use raws (plural), I get this:\n```\n\npostcss.parse('@a foo / bar / {}').first.raws\n{ before: '', between: ' / bar / ', afterName: ' ', after: '' }\n``\n. That's what needs to be fixed then.\n. Oops! I was referencing an old commit! My bad.\n. @sotayamashita I have a [TypeScript branch](https://github.com/jedmao/postcss/tree/typescript) of PostCSS, which is a port of PostCSS into TypeScript. What I do is read the PostCSS commit history, synchronize those changes with my TypeScript branch and do agulp buildto generate the definition files after I ensure tests are passing. It's kind of a lot of work, but I can sleep soundly, knowing that the definitions were generated from test-passing code; thus, they must be correct.\n. @sotayamashita I'm just curious, what do you plan on doing other than what's already been done?\n. @TrySound make what more compact?\n. @ai yes this will need a release. And yes, we can put it in thepackage.json` file directly. I'll submit a PR for that.\n. This might be OK for a short-term fix, but there are actually hundreds of implicit anys in the typescript branch that need to be declared. I'll need some time to do this for the long-term fix.\n. @kourge, do you know how to solve this? I've seen similar issues, but I'm not sure what the correct solution is.\n. @kourge thanks for the in-depth explanation. I'm playing in the TypeScript Playground to see the generated output in both cases and this is what I'm getting:\n\ninput\nts\nfunction postcss() {}\nexport = postcss;\noutput\njs\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    function postcss() { }\n    return postcss;\n});\ninput\nts\nfunction postcss() {}\nexport default postcss;\noutput\njs\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    function postcss() { }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = postcss;\n});\nLet me play around with this and see if I can fix my typescript branch to follow suit.\n. @kourge, the TS compiler doesn't like it, because my compile target is ES2015.\n\nFeel free to submit a PR to my typescript branch that fixes the issue there; however, I haven't been using Node module resolution in my projects and so I haven't run into this issue (e.g., postcss-center).\n. An ES5 target requires a lot of code modification as it stands now, unfortunately.\n. Yeah, Man. Take your time. No rush here.\n. I can at least get a head start by publishing on DefinitelyTyped. My only concern is that the type definitions won't be in sync w/ the version of PostCSS that you install. Are you not concerned about that?. Yeah, but there has to be a separate definition file and test for each version created, which is a bit messy.\n\nIn case there are multiple versions supported, the latest one will be without a version number in the file name. Older versions will be in the form of library-1.2.0.d.ts where the postfix should resemble a valid semantic version number (semver).\n\nSee http://definitelytyped.org/guides/contributing.html. Microsoft and DefinitelyTyped are working quite close together these days. This comes straight from the TypeScript Publishing doc:\n\nThere are two main ways you can publish your declaration files to npm:\n 1. bundling with your npm package, or\n 1. publishing to the @types organization on npm.\nIf you control the npm package you are publishing declarations for, then the first approach is favored. That way, your declarations and JavaScript always travel together.\n\nWe can't publish a version directly to @types/postcss, because those are reserved and published directly by Microsoft automatically from DefinitelyTyped using the types-publisher-tool. This is a relatively new feature, BTW.\n\nTo get your declarations published as an @types package, please submit a pull request to https://github.com/DefinitelyTyped/DefinitelyTyped.\n\nConclusion\nWhat we are doing right now is the golden path, because I can just updated the definition file to be in sync w/ the latest version of PostCSS and the next time you publish a specific version, those types are linked to that version.\nI know you want to get rid of the definitions in this project, but I've already gotten rid of most of them except for the one postcss.d.ts file. I hope you'll agree that this is the best solution, moving forward, to keep what we have right now. If not, we can talk about next steps.. Excellent! For tracking purposes, I want everyone reading this thread to know that my jedmao/typescript branch is still how I'm generating postcss.d.ts. There is a bit of manual work required after building the project, unfortunately, but it's necessary right now.. @ai, unfortunately, there's a lot of love required before I can get postcss to compile w/ the newest version of TypeScript and, frankly, I don't have the time right now.. Also, I have to read all the commits that have happened to get the definitions up-to-date. It's really a ton of work.. As is the case with DefinitelyTyped, people tend to update them when they need them. This is the price we pay for not switching this project to TypeScript, because we'll always be playing catch up, but if someone finds something missing in the TS definitions they will probably just submit a PR here.. There are no postcss types on DefinitelyTyped; therefore, no @types/postcss package on npm, \"because\" the postcss package supplies them out-of-the-box; thus, there is no need. This is the golden path so I'm pretty happy about it.\nWhat I'm saying is that if someone noticed something missing from postcss#postcss.d.ts, all they would need to do is submit a PR to this repo to update them. Problem solved.. Totally fine, thanks!. Thanks @longlho. I realize that's what's breaking it. It's just unclear how to fix it from a compiler options standpoint.. @longlho what version of TS are you using?. @michaelkuroda what version of TS are you using and are you also using Babel?. Yes. I tested this out with my postcss-nested-props plugin to make sure it works and it does. The reason I \"thought\" this commit worked before is because I wasn't getting in-editor errors, but I needed to run the tests to see that it would fail. Definitely got it right this time.. Excellent changes. Thanks @kimamula!. @r3nya it works for me. See https://github.com/jedmao/postcss-center/blob/9ea9f28f571f7a26a04bbece4c7220b46643039c/src/plugin.ts#L1. \ud83d\udc4d thanks @chriseppstein!. You're right that a callback function shouldn't have optional args, as they are all passed regardless. You just opt into the ones you want by only asking for n number of args.\nAs for void | Function | any. Yeah, that's really just the same as any, but I wrote the union to be more explicit. If you look at the postcss.plugin docs, you'll see two examples of return types: void | Promise<void>, but technically there's no reason you couldn't return other things too. Probably should have written this as void | Promise<void> without the any in the first place so people don't get the wrong idea. If they return anything else it's not like we're going to do anything with that information. And now here we are, wondering if anyone's relying on that return type for some reason? So it does have the potential to break some plugins if we remove any from that union, in that they won't compile w/o changing the return type to suit.\nIn conclusion, yes, we can make the result non-optional and void | Promise<void> | any for explicitness and backwards compatibility.. Is there some reason to return a string or a number of which I'm unaware? I think that's the point, that it's explicitly telling you that you can just write a function that doesn't return anything or you can return a promise that resolves with no value. Anything else is not how it was designed and I think the types should call out how it's designed and intended to be used.\nI get you're point about \"I'm going to throw it away\" but Promise<any> doesn't actually tell you anything about throwing it away. You might wonder if PostCSS does something with the resolved or returned value, which is misleading. As such, I think Promise<void> is more clear, because we're really not expecting a value and, as you said, we're not using one if you provide it.. Recursion is a great example of the need for a more loose type.. @aoberoi I don't know how passionate you are about TypeScript, but you might be interested in https://github.com/jedmao/postcss/tree/typescript. It's an old branch that's now pretty far behind current PostCSS master, but I had the entire PostCSS library converted over into TS, including tests. That's where the original d.ts file was generated from. It'd be super awesome of someone were to update it to work with the latest version of TS.. I'd have to find the thread, but as I recall, @ai was under the impression that the community would be hesitant to work with TypeScript (back then). Today, he might have a different opinion, as TypeScript has been making huge strides. @ai, what do you think? Are we willing to convert PostCSS into a TypeScript project yet? I agree that it's a \ud83d\udc31 and \ud83d\udc2d game with these definitions not being in sync w/ the implementations. Converting the project into TypeScript would solve a lot of problems there.\nThat said, the reason I converted it in the first place was to generate pure and accurate type defs, knowing that they actually compile and everything. I was hoping the whole thing would go upstream, but that never happened so the branch has fallen behind.\n@aoberoi yes the hardest effort is done. Getting it to compile with latest TS version is the next step. After that it's just getting feature parity with the latest version of PostCSS. I don't imagine there are many new features though. Also, might be some TSDoc work to get up to speed with documentation efforts.. @aoberoi you might like this idea too.. 1. Yes, this would kind of solve the whack-a-mole situation we're in.\n1. From what I understand, you would run tsc --noEmit on the js code to see if it passes the TS compiler.\n1. I don't know if you can generate the .d.ts file from it, but I don't think you need to either, because it would just get the types directly from the JS source.\n1. I'm not sure how less expressive the types are in JSDoc comments. Are you 100% sure they don't accept generics? Because I love generics! I understand the need for a compromise though.\n1. I'm also wondering if we might want to add // @ts-check at the top of each file for additional type safety checks or if that's even needed.\n1. Moving the .d.ts file to DefinitelyTyped might confuse some peeps though. Having two options is always confusing and I'm not even sure which one would override the other or if it would do some kind of declaration merging? Never done this before.. This issue, should it be implemented, would also allow us to use tsickle to further optimize the bundle size.\nAs a side note, here is the history of PostCSS with respect to compilation steps.\nHistory of PostCSS\n\nSep 7, 2013 - Initial commit in CoffeeScript.\nJuly 23, 2014 - Converted into ES5 via Traceur.\nJuly 27, 2014 - via es6-transpiler.\nNovember 12, 2014 - via 6to5 (now Babel).\nAugust 19, 2015 - Babel.\nJanuary 17, 2019 (today) - Still using Babel.\n\nCredit goes to @DrewML for pretty much everything above.. Yep!\n. Done.\n. Actually, I do, because I tried your syntax first, but it doesn't work on Windows.\n. @ai will have to setup coveralls. Is npm-run-all really necessary just for this one command?\n. It's not a problem on Windows if you're using Bash, like I do, but && doesn't work on the native command prompt. I think that's what he's taking about.\n. This is because _mocha points to node_modules/.bin/_mocha.cmd, which doesn't work in this case.\n. If that's a problem I can introduce npm-run-all. I thought he was more concerned about the sequential task part.\n. @ai node_modules/.bin/mocha and node_modules/.bin/_mocha both don't work either. Only what I've specified works >_<\n. Unfortunately, it looks like npm-run-all is consuming CLI colors. Looking for a fix or alternatives.\n. BTW \u2013 looks like && is working fine in the Windows Command Prompt. I just did dir && dir /w and it works great. See http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/ntcmds_shelloverview.mspx?mfr=true\n. I should add that this npm test works flawlessly as well.\n. ",
    "avanes": "Hello from brainwashing ;)\nhttps://github.com/avanes/postcss-color-alpha\n. @avanes on Twitter.\n. ",
    "airen": "if the element does not have the height.\na {\n   width: 30px;\n}\nWhether can be like this\uff1a\na {\n  size: 30px * 2;\n}\n\u2193\na {\n   width: 30px;\n   height: 30px;\n}\n. ",
    "1j01": "It must be able to handle cases like a(b(a()), i.e nested functions, computed inside-to-out.\nIdeally, this should work between different plugins.\nIn order to do that, what needs to be done?\nI guess plugins need to be able to declare their functions, and then all the functions need to be resolved in one step.\nWhere would this step be?\nYou'd want it to come near the end, if not as the very last step.\nWe don't want every single plugins that use functions to have to tell you to make sure you don't forget include the built in function resolver, so it should default to coming in at the end.\nIf you need it to come before some step (Is this an actual use case? \nProbably), how would you specify it? I'm thinking you could include rework.evaluateFunctions as a step.\nMaybe having a built in step that has a default position is a little weird, and plugins would still want to mention that you can specify the time that functions are evaluated. Instead, you could create a different system, maybe where plugins depend on the function plugin, and use its non-plugin-API, and then the function plugin would be able to detect if it hasn't been included and throw a warning/error.\nI don't know. But :+1: at any rate. Food for thought.\n(Can it just come in at the end? That would make things simpler.)\n. @1j01 Yeah, I don't like the idea of adding special cases either.\nI'm sure though that we don't want confusing limitations to the implementation.\nFor instance, if I tried to use an alpha() plugin with a mix() plugin like alpha(mix(#fff, #f0f, 0.2), 0.8), it would work if the alpha plugin applied after the mix plugin, but not before. If it was before, you might be left with alpha(the result of mix), or the alpha() function might be called with mix(#fff, #f0f, 0.2) as an argument, and it wouldn't make any sense (to the user).\nFunctions shouldn't apply based on some order you specify outside of your code, they should apply based on the order they are in your code.\nSo I don't know exactly how this should be facilitated, but I hope it can be.\n. @MoOx \"remove\" doesn't strongly imply it's deleted in memory either, so it's fine.\n. So function plugins could call the value hook on the parameters of function calls it finds, which would apply all the plugins that manipulate values, and the function plugin gets the result with nested function calls evaluated to send to whatever function. Assuming recursion is handled gracefully, that could work!\n. Sounds great to me! :+1: \nSo. Plugins register hooks, and users will still need to be able to order them correctly, so hooks are applied in the order from the plugins list.\nWhat hooks will there be, and what will the API look like?\n. > solve this problem of people using a linter before some non-standard syntax is compiled\n@ben-eb Why would you/could you not just put it at the end where it should go?\n. @ai The API seems to be done in terms of \"tasks\" with \"filters\", not exactly \"events\", although I see how it does handle this sort of problem. It could definitely use some API sugar.\nAnd its approach to plugins is horrible, bundling a bunch of modules into core. Anyways.\nI've done a bit of a proof of concept here, also not exactly using \"events\" but rather \"hooks\"; and really it should be tied to the PostCSS instance, and the function implementation should handle recursion like rework-plugin-function does etc. but it works more or less (for my weird use case).\n. @rtsao Maybe \"horrible\" was a strong word. I find it inferior... and yucky.\n. @rtsao Just the fact that it includes plugins bundled into core as dependencies. Not commenting on the API with regard to requiring/using plugins. Also, PostCSS let's you do .use(require('plugin')) too, so it's not really about that.\n. @oscarotero Okay, so there is a core without these dependencies, but that's not the recommended usage. You're recommended to use the stylecow CLI or Grunt/Gulp plugins, which bless a certain set of plugins. It creates a barrier to ecosystem development. That said, Stylecow like it says on the website has a \"main purpose\", so it's understandable why it would have built in plugins.\n. > By default, plugins are run before the internal ones. You can alternatively specify the position via a colon after the plugin name. ie:\n\njs\nrequire(\"babel\").transform(\"code\", {\n  plugins: [\"foo-bar:after\", \"bar-foo:before\"]\n});\n\n@MoOx It seems awkward. It's much better with PostCSS because there's nothing that's core, so you'd just do e.g. [\"foo-bar\", \"postcss-babel\", \"bar-foo\"] and wouldn't be able to say \"after\" before \"before\" like in the example.\n. @MoOx Okay, so basically it'll be like PostCSS then where there can be bundles but otherwise everything is explicitly ordered.\n. Along with my use case of transforming gtk css into browser css, it also ~~makes~~ would make porting rework-plugin-references impossible (not that I legitimately care, just throwing it out there)\n. Wow, that was fast. :smile: \n. Okay, but errors are silently ignored? What's up with that?\n. No. Am I supposed to?\n. ``` coffee\npostcss = require \"postcss\"\nmodule.exports = postcss.plugin \"testing123\", ->\n    (css, processor)->\n        throw new Error \"The world is ending\"\n```\nOkay, cool.\n. Oh wait, sorry, I am using promises. I just never have before. Nevermind... :flushed:\n. ``` sass\n@charset \"UTF-8\"\n// Braces are for noobs\np\n  // Colons make a lot of sense\n  color: #555\n  font-family:\n    \"Helvetica\" // Newlines imply commas\n    sans-serif // within indented lists\n// Newlines in selectors imply commas as well\n.good button\n.okay button\n  background: greenish bluey black // TODO: write PostCSS plugin\nh1, h2, h3, h4, h5, h6\n  commas-are: \"always allowed\", \"of course\"\n```\n. @ai Wouldn't that then be parsed as a value? Might need to be changed in the normal parser, to treat what are now selectors with trailing colons as properties. (You don't really want selectors ending in colons, you just want it to parse as something plugins can use.)\n. @kezzbracey With my syntax flavor this would be able to be written as\nsass\n.element\n    background-color: is_light(\n        $background_main\n        color( $background_main shade(3%) )\n        color( $background_main tint(3%) )\n    )\n(The rules for comma insertion could be to insert a comma at each newline in a value preceded by non-whitespace, but not preceded by /[+\\-*/^\\\\(\\[{]\\s*/ and not followed by /\\s*[+\\-*/^\\\\)}\\]]/)\n. So, options...\n- Backslashes before newlines\n- Require some sort of brackets around the at rule's afterName (e.g. @media (screen and...))\n- Require curly brackets around the body if there is one, like in plain CSS\nBut noone's gonna want to have to do any of those, and decent error handling could be difficult, so...\n- Empty rules are not allowed\n`` sass\n@single-keyframe\n  cool-keyframe // this is part of the at rule'safterName`\n  iframe // this is a rule because it's followed by indented declarations*\n    background: black // this is a declaration\n  color: red // this is a declaration\n// *or any indented lines as long as they aren't part of a parentheical,\n// such as may be used with media queries\n```\nThe parser rules might get complicated, but I think it's worth a go. We just need lots of tests, right?\n``` sass\n// this:\n@settings (\n  extras: on\n)\n// would be equivalent to\n@settings (extras: on)\n// while this:\n@settings\n  extras: on\n// would be equivalent to\n@settings { extras: on; }\n```\nI may be oversimplifying things.\n. @ai I thought I was forgetting something! Yeah, that can be completely ambiguous.\n. @ai That's ridiculous and tendentious. We should support any indentation, just not mixed.\n. @ai \"Mixing tabs and spaces for indent-based languages is very dangerous. This is why it is better to deny spaces and solve problem at the beginning.\"\nBroken logic.\n. e.g. Strict indentation checking that @jedmao wouldn't like:\ncoffee\nused_tabs = false\nused_spaces = false\nfor line, lineno in code.replace(/\\r/g, \"\").split(\"\\n\")\n  for char, colno in line\n    if char is \"\\t\"\n      used_tabs = true\n      if used_spaces\n        throw new Error \"Mixed indentation, unexpected tab on line #{lineno + 1}, column #{colno + 1}\"\n    else if char is \" \"\n      used_spaces = true\n      if used_tabs\n        throw new Error \"Mixed indentation, unexpected space on line #{lineno + 1}, column #{colno + 1}\"\n    else\n      break\nCoffeeScript handles it nicely.\n. Minimally strict checking that only looks for ambiguities:\ncoffee\nprevious_indentation = \"\"\nfor line, lineno in code.replace(/\\r/g, \"\").split(\"\\n\")\n  indentation = line.match(/^\\s*/)[0]\n  for previous_indentation_char, colno in previous_indentation when indentation[colno]\n    if indentation[colno] isnt previous_indentation_char\n      char_name = switch indentation[colno]\n        when \"\\t\" then \"tab\"\n        when \" \" then \"space\"\n        else JSON.stringify(indentation[colno])\n      # throw new Error \"Mixed indentation, unexpected #{char_name} on line #{lineno + 1}, column #{colno + 1}\"\n      throw new Error \"Mixed indentation between lines #{lineno} and #{lineno + 1} on column #{colno + 1}\"\n  previous_indentation = indentation\nCould add a check for spaces followed by tabs:\ncoffee\n  if indentation.match /\\ \\t/\n    throw new Error \"Mixed indentation on line #{lineno + 1}\"\n. @jedmao I suppose so. Not inherently, anyway.\n. Having the postcss instance available to the plugin could also be useful for things in the future like maybe postcsss.func()\n. ",
    "kud": "Thank you very much, I will try. ;)\n. Postprocessor means it's done by the client like handlebars not compiled.\n. ",
    "jonathantneal": "replaceWith is also the name of the DOM4 method.\n. We have a draft: http://drafts.csswg.org/css-transforms-2/\nTherefore: https://github.com/jonathantneal/postcss-transform-shortcut\n. I would use remove and mirror the DOM API, as you have nearly everywhere else.\n. @lydell, thank you for showing me all of these wonderful ES6 goodies. If you cannot yet tell, I have spent a long time in ES5.\nIf you have time, hop in the postcss gitter room. We can work together to improve this pull for 4.2.\n. @marcustisater, count me available for any frontend work; HTML, schema, complicated vanilla JS, CSS. Feel free to use me as needed. I\u2019m happy to help.\n. No, postcss-short focuses on shorthand properties only now. A plugin pack is not necessary.\nIf someone wishes to add the :enter pseudo-class or to extend font-weights, then those plugins should be added separately. Plus, users might prefer to add :focus selectors to every :hover instead. Therefore, a plugin pack would not be thematically relevant.\n. I\u2019m okay changing pseudo-class for selector, but it does not solve the problem of properly tagging plugins that respect a real-life web standard, whether it be w3c or whatwg or whoever (should forking between those bodies ever happen again).\nAlso, naming conventions will not help us when a developer falls off the face of the earth; when they cease to update their plugin with the spec, or with API or boilerplate changes, or when they fail to pull in fixes because their job or life situation no longer permits the time.\nPerhaps the only way to whitelist plugins is to curate them yourselves. Perhaps whitelisted plugins should be forked in a whitelist group. Then, whitelisted plugin lists may be generated automatically from that whitelist group.\n. I am technically a four person meetup, counting my wife and kids. :)\n. I\u2019m in.\n. I\u2019m free today, so I\u2019ll see about it. postcss-unmistakable?\n. @thejameskyle\u2019s suggestion seems like the only way to go forward for things like precss, too. Count me as a yes to this.\n. That was really great. I love how @thejameskyle describes the problem so clearly, and then reassures us that it was solved years ago. Whew. Except now we gotta learn stuff. :)\n. @roose, thanks for sharing an isolated example of your issue. I was able to replicate this in Firefox. Very curious.\nI narrowed it down to the precss plugin you are using. When I swap that out for postcss-import, the source maps are correct in Firefox. I even confirmed this by spotting a difference in the mappings field of the sourcemap file. Good news; your issue is unrelated to PostCSS, itself.\n@bcole808, if you are able to produce a similar example, I will gladly look into it. Are you using any PostCSS plugins besides autoprefixer and cssnano?. Active development comes in waves for all projects, as each one gains new maintainers or adds new features.\n1. I\u2019m fine to map and merge features into a new postcss-import update, credit all authors, and work together moving forward.\n2. With the breadth of plugins now available, it\u2019s worth discussing the formation of a committee that white-lists plugins (perhaps we could even get a shield).\n. It looks like the existing postcss-import has a very strong, lite core. My recommendation would be to turn every feature (even some currently in the core) into an external feature that can hook itself into that core. Sorry if I\u2019m getting off topic.\n. @OliverJAsh, I want to add that I\u2019m truly sorry that you had to lose so many hours looking into this issue, and I appreciate you taking the time to write up these issues.\nWhile it\u2019s easy for me to excuse the issue you reported, and which was reported by others by responding with \u201cYour plugin was over a year out of date. Bye!\u201d, I don\u2019t think that\u2019s entirely fair of me, because neither my README.md or any other text document in the library\u2019s repository defined my level of support.\nThis is something I want to improve in all of the open source projects I maintain. If you would be honest, did you check the project\u2019s documentation before filing an issue? It\u2019s okay to say I didn\u2019t, because I\u2019m only interested in helping protect future users from losing similar time. I want my libraries to be trusted as being very high quality.\nRelated: https://twitter.com/jon_neal/status/1013767405183684609. I\u2019m so excited for this. Question: In this PR, observers will default to node enter, but I have thought Babel observers default to exit. I think we should be consistent. Would someone verify this?. Consider my feedback resolved. This is going to have such an amazing impact on performance, @BondarenkoAlex.. ",
    "faergeek": "Would be cool to have an option for default styles overriding and may be even possibility to enforce it.\nI think it shouldn't be too hard, but then PostCSS alone could be used as a beautifier.\nIf it doesn't break PostCSS' philosophy, of course.\n. ",
    "jeddy3": "@davidtheclark This is really well written. I don't normally gush, but this is fantastic! :)\n\nPostCSS allows plugin authors to create whatever features they can imagine, while empowering PostCSS users to add only those features that they want to their workflow.\n\nI especially like how you've chosen this as the first advantage. If the goal of rewriting the readme is to grow the user base (as @ai said), then emphasising that postcss has the flexibility to cater to a user's existing workflow, whether it's based on sass/less/stylus, rework/myth or a bit of both, is key.\nI just read your article about it too, where you articulate the benefits of \"selectively including plugins for features that fit needs\" so well.\n\nI recommend noting whenever a plugin implements syntax from a CSS spec, because I think that is a major selling point for PostCSS. I tried to do that, but I may have missed something.\n\nAgreed. Personally, this is what attracted me to PostCSS, but on a larger scale:\n- It is popping up on the likes of alistapart, which has a huge reach.\n- The interest in myth (3500 stars).\n- The trend towards simplifying CSS, which, I think, can be seen within the recent workflow articles that you listed here.\nOne very minor thing, the cssnext documentation stresses that it transpiles, rather than polyfills, CSS4+ to CSS3. Is it worth using that same terminology in the readme? If only because it might allow postcss to piggy-back on some of the 6to5/babel JavaScript transpiling momentum.\n. > decl.valueContent //=> [{ type: 'length', value: '1px', unit: 'px', number: 1 }]\nI think quite a few of the remaining stylelint rules -- such as property-unit-whitelist -- would greatly benefit from the inclusion of this API in PostCSS 4.3.\n. Doesn't precss need to come before postcss-cssnext in the pipeline? Otherwise won't postcss-cssnext trip up on the $var syntax?\n. > Sounds like a good idea to me!\nAgreed.\nMentioning postcss-scss, postcss-less or sugarss when the extension is scss, less or sss would be helpful for anyone still using stylelint as a PostCSS plugin. As @davidtheclark said, stylelint automatically sets the extensions for anyone using the stylelint via the CLI or Node API, which also covering anyone using stylelint task runner plugins like gulp-stylelint and grunt-stylelint.\n. LGTM\n. @ai FYI, the stylelint-declaration-block-order plugin is discussed in https://github.com/stylelint/stylelint/issues/1500.\n. > it works for the most part too,\nYou might be thinking of next construct comments.\nIncidentally, if you want to disallow this quirky feature of the CSS language, you can do so with the no-invalid-double-slash-comment stylelint rule.. > Wonder if there's a postcss plugin to allow for such comments.\nAs @ai said, you'll need to use a non-standard syntax parser (like postcss-scss) if you want to use a construct that isn't part of the CSS language.. > The trick about it is that I don't have both postcss and postcss-nested packages in my package.json file declared explicitely.\n\npostcss-nested is a dependency of precss (the PostCSS plugin pack you're using)\npostcss is is a dependency of postcss-loader (the Webpack loader you're using)\n\nThat's where postcss-nested and postcss come from.\n\nYou're depending on an old version, 1.4.0, of precss. Update to the latest version, 3.1.2, of precss and the warning should go away.. > Unfortunately, tests for no-invalid-double-slash-comments rule are still broken:\nI think that might be on us. I've created a PR, https://github.com/stylelint/stylelint/pull/3892, which updates the tests (and examples) to use \"invalid comments\" without a space after the slashes. This appears to be what the original article is using. The tests for the rule now pass.\nHowever, we have one other failing test in value-list-comma-space-after for the following CSS:\ncss\na { pr, op: 0, 0; }\nPostCSS now throws Unknown word (CssSyntaxError) for this, when previously it didn't.\nI've not seen something like a { pr, op: 0, 0; } in the wild and so throwing a syntax error might be the correct behaviour. @ai Let us know if it is, and we'll update the test in this rule too.. > Sorry for broking tests\nNo worries! \n\nSo let's update the test.\n\nI've updated the value-list-comma-space-after test and the CI is now green in the PR.\n@ai Thanks, as always, for your quick responses :)\n. ",
    "geddski": "@ai looks good to me. Typo in \"woorkflow\" though. \n. Thanks @ai. Killer project btw, keep up the great work. \n. I'll update the site to show it, but for now you can see it in the tests: https://github.com/geddski/csstyle/blob/master/spec/postcss/fixtures/option.pcss \n. Does it really need to be mandatory? \n. ",
    "albertorestifo": "Forgot to mention system informations:\nNode 0.12, OSX 10.10.2\nWith Node 0.10 it was working fine\n. ",
    "scottkellum": "Future CSS is one I have seen around.\n. @ai unsure if I was intended to be tagged here but no I don\u2019t use source maps and our compilation for our project that uses these tools is using node-sass and PostCSS/autoprefixer.\nAs for my 2\u00a2, I don\u2019t see PostCSS and Sass as competitors. Both are really good at different things and both can be used in the same project to get different types of tasks done more efficiently. I realize this view isn\u2019t shared by all but the Sass vs PostCSS debate is not one that I\u2019m interested in as I find value in both.\n. ",
    "mturnwall": "I'm having the same issue. I have a single scss file that imports other scss files. The sourcemap from node-sass properly lists all the scss files in the sources array of the sourcemap. Once the css is run through Postcss the sources array now only points to the single scss file that imports everything.\nThis is my main scss file.\n```scss\n@import 'easing';\n@import '../../node_modules/susy/sass/susy',\n        '../../node_modules/css-wipe/index'; // css reset\n@import 'config';\n@import 'typography',\n        'buttons',\n        'forms';\n@import 'global';\n```\nHere are my scripts for node-sass and postcss\n``javascript\nfunction compileSass() {\n    return sass.renderSync({\n        file:./src/sass/${sassFilename}.scss,\n        outFile:${cssDir}/master.css`,\n        outputStyle: 'expanded',\n        sourceMap: true,\n    });\n}\nfunction processCss(css) {\n    const processor = postcss([autoprefixer]);\n    processor.process(css.css, {\n            from: ./src/sass/${sassFilename}.scss,\n            to: ${cssDir}/master.css,\n            map: {\n                inline: false,\n            },\n        })\n// mode code here to write files to disk\n```\nHere is what Postcss outputs for the sourcemap\njson\n{\"version\":3,\"sources\":[\"../../src/sass/master.scss\"]...\nHow do I get Postcss to still reference all the correct scss files that are imported by the main scss file?. I think I found a solution using the prev key. When I first used prev I would get an error telling me that that it was an unsupported format.\njavascript\n    processor.process(css.css, {\n            from: `./src/sass/${sassFilename}.scss`,\n            to: `${cssDir}/master.css`,\n            map: {\n                prev: css.map,\n                inline: false,\n            },\n        })\ncss.map is a properly formatted sourcemap from node-sass. The Postcss documentation says that prev accepts an object.\nIf I convert the map to a string then prev works just fine.\njavascript\n    processor.process(css.css, {\n            from: `./src/sass/${sassFilename}.scss`,\n            to: `${cssDir}/master.css`,\n            map: {\n                prev: css.map.toString(),\n                inline: false,\n            },\n        }). ",
    "zertosh": "cc: @ai \n. I'm ok with 4.0.4 right now, so I can wait a bit... though this might break for others since babel has binary deps\n. thanks!\n. ",
    "mAiNiNfEcTiOn": "Ok then :) Then you should consider that, if a previous sourcemap is corrupted and you try to JSON.parse it and it fails, you should assume it is not available and not use it. Throwing an error saying \"Unexpected token /\" is not the solution, IMHO.\nThanks for the time wasted. Keep up the good work.\n. Well, point taken... But then, you should be more explicit in what the problem is. I had to dig in autoprefixer's code to understand it was a sourcemap problem and still, I didn't know where he was getting it from.\nSo ideally an error like \"Your sourcemap appears to be broken. Check it at \" is more useful\n. ",
    "devinus": "This would be hugely beneficial for me as well.\n. ",
    "sokra": "I've written a module for selector parsing: https://github.com/css-modules/css-selector-tokenizer\n. > @sokra PostCSS selector parse will use a tokenize/parse steps, so it will be easy to change and faster. But right now it has some complicated places.\nMy parser only has 200 lines :smile: (300 if you count all dependencies too)\nSo it propably easy to change...\n\nHor did you solve a nested selectors like? :not(.a, :b, :c:hover)?\n\nSee README for an example: https://github.com/css-modules/css-selector-tokenizer#css-modules-css-selector-tokenizer\njs\n       { type: \"nested-pseudo-class\", name: \"not\", nodes: [\n          {\n            type: \"selector\",\n            nodes: [\n              { type: \"pseudo-class\", name: \"visited\" }\n            ]\n          }\n        ] }\nInternally it holds a stack. So you could nest :not inside :not: i. e. a:has(div:not(.active), h2), \n. ",
    "evilebottnawi": "@ai We need this feature.\nI write plugin for rebase url on sourcemap sources. i get error\nbash\nError in plugin 'css-rebase-urls'\nMessage:\n    \"themes/insteria/font-awesome/less/path.less\" is not in the SourceMap.\nReal path \"src/themes/insteria/font-awesome/less/path.less\"\nI use code\nconsole.log(decl.source.input.origin(\n    decl.source.start.line,\n    decl.source.start.column\n));\nBefore less compile and concat css. Some files in less format, some in css format.\nBase directory sources and build are difference.\n. in fast way i use this code\njavascript\ndecl.source.input.map.consumer().sourceRoot = '/my/path/to/source';\n// Some logics...\ndecl.source.input.map.consumer().sourceRoot = null;\nbut it is bad code :(. Maybe someone you know can help\n. @ai need feature, because using gulp-postcss with options to, need for postcss-import, break sourcemaps :( I will try to  investigate the issue, but do not know postcss code as need to resolve this problem.\n. @TrySound find what? Problem? (https://github.com/postcss/gulp-postcss/issues/64)\n. @TrySound sorry, postcss-import need this options for resolve path to assets (local, node_modules), source and destination directory may be different and resolve not working without to options. Example i have fonts in src/theme/app/css/app.css and using font awesome from local /src/theme/font-awesome/..., but my dist directory public/assets/app/css.\nhttps://github.com/postcss/gulp-postcss/issues/64#issuecomment-165990365\n. @TrySound https://github.com/geut/postcss-copy/blob/master/src/index.js#L292 get options from to\n. @TrySound i know, about this issue https://github.com/postcss/gulp-postcss/issues/64#issuecomment-165990365, if i set option to, my sourcemap wrong, if i not set option to, postcss-copy and postcss-url not resolve right my path to files (fonts, images).\n. @TrySound I made a mistake and then correct it, be sure to focus on this rather than on solving the problem?\n. @TrySound maybe help or just offtop?\n. @ai bump\n. @ai thanks for answer!\n. @ai not valid css and scss, maybe related to postcss-scss, should throw CssSyntaxError?. @ai how about change this.toString() to this.source.input.css, i think it is normal solution without breaking changed. @ai I'm at a loss :smile: what kind of solution can help us? :smile: . @ai we can't use toString() in our rules, because we reported on incorrect index :sob: . @ai it is related to postcss-scss or postcss?. @ai late, i am very tired today :sleeping: . @ai thanks for answer!. Also a { color: red; };; after stringify lose semicolon a { color: red; }; (seems it is related to Rule). ",
    "difosfor": "Hmm ran into this with our build tool (https://github.com/exmg/nbob) as well. Patching it for now like the gulp-postcss plugin does (as mentioned above), but would enjoy an option for this as well.\n. ",
    "Saturate": "To fix https://github.com/sindresorhus/gulp-autoprefixer/issues/55 we need this.\nI did a pull-request (https://github.com/sindresorhus/gulp-autoprefixer/pull/61) but as seen in the comments from the owner, it should be fixed here, as other plugin authors will benefit as well, from this change.\n. @ai I'll have a look at it later.\n. ",
    "aleclarson": "Here's a workaround:\n```js\nconst res = await postcss().process(code, opts);\nres.map._sourceRoot = '/path/to/root';\nassert(res.map.toJSON().sourceRoot == res.map._sourceRoot);\n```\nThe sourceRoot option seems like it should exist for the sake of completeness.. ",
    "kevinoid": "Thanks for the quick review and merge!\n. ",
    "sventschui": "Done\n. @ai Any other requirements to be able to merge this PR?\n. ",
    "simonsmith": "Hmm, I think I could have edited the PR. But will open a new one\n. No problem :)\n. I didn't know you could, no. It allows you to alter the original url and return a modified version?\n. Ah I see, you can pass it a function as well?\nIn that case maybe this PR should be reverted..?\n. Thanks, apologies\n. :+1:  Nice job\n. You could certainly start with something like the gulpjs list, would be better than the current README setup.\n\nAlso we need a PostCSS playground with ability to use any set of plugins.\n\n+1\n. @ai Mainly for the ability to filter but also being able to send someone to a proper plugins page, rather than hunting around in a large README.\n. @ai Yep, linking to headers is handy. Perhaps we could encourage a keyword in the package.json (shortcuts, optimisation etc)? Tricky to get consistent though.\nOne benefit of searching via npm is finding plugins that were not submitted to the list. As an example I found this plugin that wasn't in the list, but was very useful to me.\nAlso I'm sure a proper site will help cement PostCSS as a viable option to many existing pre-processor users. \n. I think pixrem is subtly different in that it converts rem to px but pixtorem converts px to rem which is useful.\nTo be honest it could be one plugin, perhaps I will suggest it on the pixrem repo.\n. Thinking in pixels is easier, but using rems is nice for relative sizing. As mentioned in this comment.\nLooks like it won't happen according to that thread, so I'll stick with the other plugin. I don't want to take this off topic any further heh :)\n. Looks good :+1: \n. Do you mean prefixed with something like .no-flexbox from Modernizr?\n. @iamstarkov Wouldn't you have the issue of modern browsers applying the flex declarations and the fallbacks? If you were to use this Flexbox like component as an example, there are things like width, min-width that you might only want to apply to the IE stuff\n. Yeah, that's why I figured the Modernizr route. Not sure how else you'd do it reliably as a lot more browsers than just IE fail to support Flexbox\n. Is there always a consistent set of rules to use for Flexbox fallback? I feel like in  most scenarios you might need to tweak the fallback declarations based on your particular situation. Makes having a plugin like this tricky, as it will rely on outputting the same rules each time.\n. Looking for examples of this I've found - http://codepen.io/kevinsmets/pen/AmDzh\nIs this the kind of thing you're hoping to recreate?\nWould be happy to help if needed\n. Cool, will do it now\n. Could it be an idea to split the production of the site into stages? For example, get a version of the site designed that contained a homepage with an overview, some documentation and perhaps a list of plugins? \nThen iterate on that to add the more advanced features in the first post here. I think if it the site tries to be too awesome from the first launch it may make the task seem too vast.\n. Put my name down for now, I can probably help depending on the tasks :)\n. > because it has active development and has a lot of features.\nIs it identical to postcss-import? The README is almost the same\nI opened this issue on smart-import as I'm unsure of its purpose. It's great that's actively maintained but if it inherits all the bugs in postcss-import then we've doubled the problem. Hopefully it can be clarified.\nThe most direct route is to try and attack some of the postcss-import bugs. Whilst we could revert it to 7.x it would lose some of the features that were added. It perhaps just needs refactoring, although it's not a simple task.\nMight just need someone to start understanding the codebase. I might clone it later and start looking.\n. @ai Does smart-import address any of those issues?\n. There is a PostCSS community and we're here to try and sort out a plan for postcss-import. This thread right now is an action.\n. Great work @RyanZim \n. Looks like Node 4 is due to end its LTS at the end of this month - https://github.com/nodejs/Release. ",
    "jeffjewiss": "@ai thanks for including me in this, it was a nice surprise to see you noticed I published the module.\nI think the runner guidelines are a great start and I'm happy to follow them. I'm a little unclear on how 1.1 would work. I think this may be because I'm still familiarizing myself with postcss, but I'm not sure how that would work in the context of a Broccoli plugin.\n. @ai thanks for clarifying and sorry for the extra messages. :)\n. I think a warning makes sense because in the case of a plugin vs plugin pack you can't be confident which version of the plugin should take priority (the user's styles versus the pack's dependencies).\n. ",
    "philip-peterson": "My apologies for the failing Travis CI build... I cannot seem to reproduce the lint failure on my machine for some reason (gulp, gulp test, and gulp lint all succeed locally). Any suggestions for how to troubleshoot that issue would be much appreciated. \nNevertheless, it appears to be a purely cosmetic error (single quotes preferred over double quotes). Once I have it figured out I'll submit another patch to fix the quotes.\n. No problem!\n. ",
    "lenarakhmadeev": "``` js\ngulp.task('async', function () {\n    var processerer = function (message, timeout) {\n        return function (css) {\n            new Promise(function (resolve) {\n                setTimeout(function () {\n                    console.log(message);\n                    resolve(css);\n                }, timeout);\n            });\n        }\n    };\nvar processors = [\n    processerer('1m', 4000),\n    processerer('2m', 2000),\n    processerer('3m', 3000)\n];\n\nreturn gulp.src('demo/demo.css')\n    .pipe( postcssAsync(processors) );\n\n});\n```\nmbp-lenar:postcss-image-mockup lenar$ gulp async\n[12:40:31] Using gulpfile ~/dev/postcss-image-mockup/gulpfile.js\n[12:40:31] Starting 'async'...\n[12:40:31] Finished 'async' after 20 ms\n2m\n3m\n1m\n. ",
    "gazay": "I'm +1 for TOC, as it will helps users to get to Usage section more quickly\n. Closer to Sass syntax \u2013 is for the win as I think. The second variant is cleaner. Also \\ is really necessary? Because we can match all related to property by first property indentation as in Haskell:\n``` Sass\n.square\n  background: white,\n              linear-gradient(white, black)\n// And in this case maybe we can omit brackets in arguments too\n// It allows us to write clean code with 80 column rule =)\n.square\n  background: white,\n              linear-gradient to bottom right,\n                              white,\n                              black\n``\n. I understand about multiline selectors, but if here will be no nested styles, there is no problem, right? All selectors strat only from first column\n. But they aren't finish with:`?\nI mean that there not so many selectors with : possible in standard as I found and other matches for something:property we can treat as properties\n. @ai in Haskell it solved by good, very clear explained compilation time error messages\n. ",
    "itmustbe": "I hope it's not something really obvious I'm doing wrong!  Because PostCSS feels so new there isn't as much help to be found on the web generally for specific errors, and in tutorials I've read through, it just works, just like some of the modules in your \"Sass example\" do for me, but not others.\nI have a blog where I help people with a similar skill set to mine learn sweet new command line things with which they'd otherwise be uncomfortable.  I think folks who use Sass as a gem are finding it so slow these days, and then Node Sass is faster, but it doesn't always get the CSS right on build.  PostCSS feels super-fast, plus the modularity is so sweet (picking just what one needs for a given project!)\n. You're right!  I just realized... and there I thought everything was up-to-date too, but the latest Yeoman generator-gulp-webapp is using postcss 3.0 (I should have checked that in my package.json file, I really am sorry to have troubled you with this!!)\n. Just in case anyone else finds this issue thread helpful, I found that updating to autoprefixer-core 5.x.x and gulp-postcss 5.x.x solved the few remaining issues (errors to do with mismatched dependencies).\n. ",
    "hashanp": "Thank you.\n. ",
    "silvenon": "I was wondering what the hell happened, but then saw that someone already PR'd it just before I did :smiley: \n. ",
    "codemakerlive": "I haven't looked much at PostCSS internals, so perhaps you do this already... but how about a plugin-category-based pipeline internally handled within PostCSS, with plugin developer's ensuring they register a plugin against a category. PostCSS internally ensures that certain categories run at a specific stage of PostCSS's pipeline?\nE.g. What babel does with it's transformers: https://github.com/babel/babel/blob/master/packages/babel/src/transformation/transformers/index.js\nGranted babel will change in v6.0 to have plugin usage externalised and manually specified, but the system still provides some structure to ensure plugins execute at the correct point in time - e.g. Minification/Optimisation plug-ins (\"optimisers\") run last (or nearly last, perhaps plugins that post evaluate but perform no transforms (\"post_evaluators\") run last).\n. @MoOx Do you have any anticipation as to when your rc-loader (+ ,postcssrc) and CLI will be in PostCSS? Very much looking forward to official inclusion of these kinds of interfaces.\n. Thanks, I was just about to edit my above to add...\nI'm curious if/how you forsee the CLI differing from https://github.com/code42day/postcss-cli\n. ",
    "rtsao": "@1j01 It seems to me there's no reason those bundled plugins couldn't be taken out of the core; I'm not sure I'd go as far to say Stylecow's approach to plugins is \"horrible\" on that basis.\n. @1j01 Are you referring to the task/filter system itself or something else?\nI'm genuinely interested in hearing more about what specifically you think is inferior as from my naive perspective they seem fairly comparable.\nPlugin Comparison\nPostCSS: postcss-css-variables\nStylecow: stylecow-plugin-variables\nPlugin Usage Comparison\nPostCSS:\njs\nvar postcss = require('postcss');\npostcss([ require('plugin1')(), require('plugin2')() ])\n    .process(css, { from: 'src/app.css', to: 'app.css' })\n    .then(function (result) {\n        fs.writeFileSync('app.css', result.css);\n        if ( result.map ) fs.writeFileSync('app.css.map', result.map);\n    });\nStylecow:\njs\nvar stylecow = require('stylecow');\nstylecow\n    .use(require('plugin1'))\n    .use(require('plugin2'));\nvar css = stylecow.parseFile('src/app.css');\nfs.writeFileSync('app.css', stylecow.run(css).toString());\n. A use case would be if you have a module that contains a base set of classes, which many components would compose. Then you could use a shorthand for composing classes from this module.\nThe plugin is currently designed to work with the CSS Modules composes syntax, which is implemented by (among other implementations) https://github.com/webpack/css-loader.\n. ",
    "oscarotero": "Hi, I just want to clarify that stylecow plugins are not bundled into core. The stylecow-core is an independent package. The stylecow repository only join the core and the plugins with some development tools (watcher, browser live reload, etc). This is just a way to execute stylecow with no complications. But you can use directly the stylecow-core package with no plugins.\n. ",
    "marcustisater": "Thank you Andrey, that's the beauty of Open Source and the PostCSS community. \nIt's going to take up a lot of time, planning and effort to organize an committee for such a big project but maybe it's worth the time to do that. I definitely think someone who has been involved a long time with PostCSS should take on the leader role (maybe the founder himself? :wink:) \nI would be happy to help with any documentation or co-help with coordinated work if needed.\n. Sounds awesome, I would love to help out with this project.\n. I think you should @ai :) \n. Yeah that would be great, maybe we can have a initial meeting over at gitter next year. I guess not much wont be happening now during christmas holidays...\n. I talked to @ai and I can sign up as a \"leader/project manager\" for this starting after new years. I completely agree with @simonsmith of starting small but then yet again would love to know how many would be offering some time into this so we can get down to planning, maybe we can offer the full package right away for a first release. \nWho is interested of putting some time into this and be willing to help out? There are already some great ideas and hungry developers in this community so a startup meeting or overview planing would be best to start things of.  \nLet me or @ai know by e-mail or right here in this issue if we still have you're attention! :smiley: \nThanks and happy holidays! :snowman: \n. I would love to talk more about that @MoOx  - We need a lead developer too... :wink: \n. Awesome, we need all the help that we can get. I am here to start things of the more people who wants to take responsibility, the better. \n. I'm not very familiar with JSDocs but I don't think that shouldn't be any problems, however we would need markdown files.\n@ai - I was just about to open an issue about syncing documentation(.md files) between postcss and postcss.org. \n. How far are you from the release of 5.1? We haven't started the development for basic pages yet so if the time runs short maybe we can forward from postcss.org with a link to somewhere?\n. Yeah, I was thinking about that as well. The most important thing is that it's accessible for users so a \"temporary\" page for postcss.org is the best choice here. I will open issue.\n. Just a quick wrap up from our discussion at postcss.org to make sure everyone is on the same page. \nOur website runs on a markdown engine which means that we would need to get a generated markdown file from you guys to render it on our page. Is that possible to do? \nI also have another question; how are we going to \"sync\" changes for this page to postcss.org in best way possible? Everything gets generated here through some CLI tool, right? \n. Yup, that's my fault. I'm working on it. We can do a redirect meanwhile?\n. > Can't we make a subdomain e.g. api.postcss.org and link it to Github Pages? Or am I misunderstanding the question?\nYes, we can make that happen. Good point.\n. I'm moving this discussion over to our new suggestion box. \nHere is the issue\n. Closing this issue.\n@morishitter @yisibl still missing two-auth.\n. Good catch, thanks for PR.\n. ",
    "jamiebuilds": "Moving from the existing api to this events api to a visitor api is non-linear, I think you could introduce a visitor-based api on top of what exists today without diving too deep on parsing a more detailed AST.\nI would recommend against doing this as it's just api thrashing if you plan on moving to a visitor api later\n. Visitors is a well defined pattern that you can reuse easily. Creating multiple visitors and performing traversals in not uncommon. For an example see this bit about handling state in Babel.\nAlso, visitors are much easier to optimize as they are a static thing. Babel has an optimization where it takes the primary visitors from every single plugin and merges them into a single visitor that only needs to traverse the tree once.\n. >  I personally don't think it is the best approach as a base case, because every time you have 2 plugins that want to modify same AST parts, the order of them is hidden inside AST and plugins code itself.\nIf a plugin is so sensitive that it breaks when the AST gets modified between visitors calls, it's almost always (99.9999% of the time) because the transformation has been written poorly. It's likely holding onto state or making assumptions about the AST.\nThis approach has actually forced plugin authors to write better quality transformations.\n. If you want that data it should be added to the AST as metadata at the start, not left in as AST nodes. The problem _is_ that the plugins are more fragile than they should be.\nBabel hasn't spent a lot of time working to make the flow experience awesome so things like that are left out.\n. Not if you store it properly\n. :ok_hand: \n. It's cool I found it\n. I just want to note that going down this path will also limit the flexibility people will have in custom syntax (which seems to be very common in PostCSS plugin). For example, if you parse selectors, then invalid character sequences will cause parse errors that don't exist today. It is possible to write parser plugins but that's much harder to support than code transforms.\nYou can see the specification for the Babel AST here. Obviously this does not map to CSS, but you might draw some inspiration from it, in particular the expression and literal types/sub-types. If you want to read some discussions about AST design, you can read through the ESTree Issues.\n\nAnother thing you might want to consider with this change is switching to a more formal visitor pattern. For example, this is what Babel's visitors look like:\njs\npath.traverse({\n  Identifier(path) {\n    // ...\n  }\n});\nThis pattern can be better optimized (for example Babel merges all the top level plugin visitors into one giant visitor so it only has to traverse the tree once), and in my experience leads to cleaner and less stateful transforms. A good example of this is the transforms I wrote for both Babel and JSCodeShift to transform pure react component classes into functions: Babel, JSCodeShift. These do almost the same exact thing and it was easy to add more functionality to the Babel transform.\n\nLet me know if there's anything I can do to help this along.\n. >  Perhaps you could follow up with an example that illustrates your problem?\nSay someone wanted to do interpolation of a variable into a selector:\ncss\n.foo-#{$bar} { ... }\nIf you are parsing through the selector I imagine you will have all sorts of conflicts here.\n. The difficulty that you're going to have here is that a lot of these transforms are actually interpreting the code\nfoo(bar(baz($value)))\nResolving this requires plugins handing off responsibility and not running in any particular sequence. For example, if you have a plugin that resolves foo, it needs to wait for the bar plugin to resolve first, which needs to baz plugin to resolve, which needs the $variable plugin to resolve. These can happen in any order.\nNow, a couple things need to happen to ensure that we don't have a ridiculous number of tree traversals or easy to break plugins:\nVisitors that can be run on any part of the tree at any time\nIf I'm plugin foo and I can't resolve foo, we need to be able to run the rest of the plugins on that section of the AST somehow so that they can resolve it.\nVisitors need to be able to visit nodes on \"exit\"\nHow does foo know it can't resolve what is inside of it? For example, if foo() accepts arbitrary text, how does it know that $value needs to be resolved as a variable by another plugin? (i.e. foo($value) => $value-fooified)\nInstead, foo should run on \"exit\" (to understand what I mean by on exit read this). This way we know that the entire AST inside of foo(...) has been resolved.\nWhen nodes change, they should trigger re-traversal\nImagine two plugins, one that resolves a subtract() function to a css calc() function, and one that resolves the calc() function to a normal value (i.e. subtract(2, 1) => calc(2 - 1) and calc(2 - 1) => 1).\nWhen the subtract plugin runs, it replaces a node in the AST with new AST. We need to know to run the rest of the plugins on this AST. We need to trigger a re-traversal starting at calc()\nBecause of this, there needs to be an API around manipulating nodes instead of mutating them directly\nIf people are setting node.value directly, how does that trigger a re-traversal? You could use getters/setters or observe the tree directly, but for large ASTs that would be extremely inefficient and you lose the ability to do other types of operations like replacing one node with many and inserting a node before/after another.\nWhat Babel does is wrap all nodes with node \"paths\" (please read this). When I call path.replaceWith([node]), I'm marking a given path as \"changed\" and telling the compiler to re-traverse everything inside it.\n\nSorry for the wall of dense text. The good news is that compilers are a solved problem in computer science (people have been doing pretty much the exact same thing for almost 20 years), the bad news is that there's a ton of stuff you need to know (I have three books on compilers each around 1000 pages long).\n\nTL;DR: Parsing a more detailed AST is only half of the story, in order to resolve the original problem of function resolution (along with tons of other problems) the transformation API needs to change dramatically in order to solve the problem in a more maintainable way.\n. @andyjansson I think you aren't understanding the problem completely.\nSay we have this selector:\njs\nfn1(fn2(fn1(foo))) { ... }\nThen I have plugins for fn1 and fn2\nSolution 1: Run in order\nIf we ran fn1 and then fn2, we would run into the issue of fn1() trying to resolve \"fn2(fn1(foo))\" which it obviously cant because it does not and should not have any knowledge of fn2().\nSolution 2: Repeatedly try to resolve\nHere we keep running fn1 and fn2 until the selector has been completely resolved. fn1 and fn2 would need to know both how to resolve it and if they can actually resolve it. If they can't they would have to tell postcss to run everything else and come back later. Here you run into the problem of not knowing the difference between the inability to resolve a value because its invalid or because it needs to run something else, and on a syntax error postcss would be running forever.\nSolution 3: Have a tree structure that can be folded\nHere we parse the entire AST and do a depth-first traversal, resolving dependencies upwards. This solves the issue of ordering and the issue of plugins trying to figure out if they can't resolve a value because of a syntax error or because of another plugin that needs to run.\n\nSolution 3 is also the fastest and easiest to reason about solution, which is why it is used in every modern compiler. What you suggest simply wouldn't work.\n. If this is all about being able to parse custom syntax there are ways of making that happen without abandoning a detailed AST. CSS is a pretty straightforward syntax to parse, and there are well documented ways of extending parsers to understand more syntax.\nBut as I believe @ai mentioned before, most of the custom syntax people want doesn't conflict with the syntax that would be parsed by PostCSS.\n. ",
    "moczolaszlo": "Ok, not problem.\nI just made it, because it's very useful for me NOW. :D\n. Thank you! ;)\n. @ai No, I don't.\n. https://github.com/moczolaszlo/postcss-inline-comment\n. ",
    "kukac7": ":+1: \n. ",
    "MethodGrab": "Thanks for taking a look at this. After looking though the libsass issues it seems they are already aware of the problem with @charset \"UTF-8\" & sourcemaps (https://github.com/sass/libsass/issues/879)!\n. This has been fixed in gulp-sass@2.0.0 (libsass@3.2.0).\n. ",
    "bjrmatos": "don't you think is too early to drop support for node.js v0.10? we had v0.10 for a long time.. i have a bunch of apps done in v0.10 and still want to use next versions of PostCSS. :disappointed: \n. oh, sorry.. read that title scared me a little :smiley: load the polyfill manually will be documented?\n. thnks :clap: \n. ",
    "olegstepura": "@ben-eb isn't rule.selectors from  https://github.com/postcss/postcss/blob/master/API.md#rule-node what is needed?\n. I don't think adding custom syntax is a good idea. Nested css rules already create logical scope. My initial idea was to reuse this scope.\n. ",
    "noahgrant": "well, the time for the task without is ~1s, with is ~ 2.8s.  Yes source map generation is complicated, but even with source maps (and no autoprefixer), my sass compilation is 1s.  The thing is, since it only takes 1s, we rebuild all our sass on every .scss file save.  so we run the task quite often.  That's why there's a big difference between 1 and 3s.\nIt's interesting because if I remove the sourcemaps, as I said, and just use sass + autoprefixer, the build time is 1s.  And if I remove the autoprefixer, and use sass + sourcemaps, the build time is 1s. But all three together is consistently 2.8s.\n. i'm only running this task, so it doesn't show any more useful output.\nie it says:\n$ gulp sass\n$ [21:41:54] Using gulpfile ~/path/to/gulpfile.js\n$ [21:41:54] Starting 'sass'...\n$ [21:41:55] Finished 'sass' after 922ms\nand for the case with all three:\n$ gulp sass\n$ [21:43:47] Using gulpfile ~/path/to/gulpfile.js\n$ [21:43:47] Starting 'sass'...\n$ [21:43:50] Finished 'sass' after 2.84 s\n. Thank you!!\n. did you figure out the reason for its slowness?\n. ",
    "xzyfer": "The easiest thing would be have an npm script \nnpm run benchmark\nthat could the the initialisation, and run the benchmark.\n. I'm still trying to get it all running :)\nIf I'm reading the code correctly the benchmark is also implicitly bias to node libraries. I think we can improve this as well. I'll PR some stuff when I get it all working.\n. @ai you could make the benchmark repo an npm dev dependency\n\"devDependencies\": {\n    \"postcss-benchmark\":\"postcss/postcss-benchmark\"\n  }\nThis syntax pulls the latest master from git at npm install time. This also means you can iterate quickly in dev by using npm link.\n. I separate repos is definitely the way to go. It would be great to be able to open issues and PRs specifically against the benchmarks with increasing the postcss S:N\n. ",
    "btholt": "This all looks good to me. I'll have to make some changes but that's not a bad thing.\nMy only suggestion to put somewhere for people to tag their npm versions on GitHub so users can easily go back and find the code for the version they're looking for (something else I'll need to do. :smile:)\n. Also, the way of declaring plugins using postcss.plugin( \u2026 ) has the adverse side-effect of making my project depend on PostCSS itself while previously it was only a dev dependency for testing. Shouldn't be a big deal but worth mentioning.\n. Seems like a fun idea. I can give it a shot.\n. I have a bastardized version more or less working. I'll push it up in a bit (even if the code is a mess.) It uses the @supports(display:flex) tag to apply flex to new browsers and everything else will use table. The gap here is that IE10 and IE11 can support flex but don't support @supports.\nAnyway, it's been a fun experiment. It could actually turn out into something useful.\n. An interesting idea. At that point you do inherently tie the plugin to Modernizr (or something equivalent) but I imagine that's not too bad as most people use Modernizr or could at least at that portion. Anyway, give me a little bit and I'll push up my messy version.\n. Up here: btholt/postcss-flex.\nIt sorta works. It needs to be more cautious not to fuck up other people's code and the code needs to be reworked to not be dumb. I'm working on that. :smile: \n. There is a subset of flexbox you can reliably recreate using tables. My plan is to nail that subset with the plugin and then allow for further customizations for other scenarios using something like custom at rules or comments.\n. Just got back from JSConf China and catching up on work at which point I'll catch up on OS work. :)\nSorry to be dragging my feet.\n. Awesome. This is more or less the approach I've been taking. There are still some cases you can't cover with this approach but I still think it's the best one I've found.\nI'll probably be back at it next week. This week I've got worky type things and I'm at OSCON next week.\n. Sorry, heads down on some Netflix stuff. No idea when I'll surface again to work on it again.\n. ",
    "RnbWd": "I'm writing a plugin - postcss-component  - unpublished, unconventional. The goal is transforming css components into javascript objects, and I'm trying to figure out the best way to export the js object. At the moment (for testing purposes) I'm adding it to result as an additional method result.styles - but that breaks API guidelines.. I assume. Just wondering. \nEventually I'll map it onto React components and generate js files - this is the first building block of that process.\n. Okay, I added the style in result.messages - but trying to simplify css to js conversion in postcss-js-styles - added method result.toJS(). Nothing is published yet still experimenting with the concept.\n. @ai I'll wait before publishing anything, custom syntax sounds interesting.\n@tunnckoCore I'm well aware of the limitations and I'm not trying to discuss issues with that library here. I'm trying to discuss the semantics of exporting non-css output in a way that'll play nicely with other plugins and follows the guidelines. \n. ",
    "matthew-dean": "Well, with Less plugins, I think you can manipulate the AST however you please, including searching for properties and performing actions based on those conditions, but I could be wrong. PostCSS looks like a more straightforward approach (and no doubt it's currently faster), but since Less 2.0, you can add pre-process and post-process plugins, and the post-process can be before or after the CSS is generated, if I recall correctly.\nSo, in Less, plugins allow you to manipulate the tree after it has been parsed and before the CSS has been generated, or further alter the CSS before it is output.\n. > So it is still impossible to do Autoprefixer. \no_O .... It's not impossible, it will just parse twice.\nWhat if we worked out a format for a CSS AST, similar to how Mozilla did with the SpiderMonkey AST for JavaScript?\n. C'mon guys. The point is that saying \"Autoprefixer would be impossible with preprocessors\" is a completely false statement. It's fair to say it's difficult or undocumented with certain preprocessors, but there's no \"intention\" that people do not. Your claim is that there is an inherent design difference that makes this achievable and unachievable by everyone else, when, in fact, both Less and PostCSS parse a \"pseudo-CSS\" language, and transform that to a browser-consumable CSS document. Both allow plugins to manipulate the language input, and transform the result.\nIt's possible PostCSS has a better architectural approach, and I think it's fair that the plugin process is better documented, since plugins only recently arrived in Less 2.0 and are, as of now, largely undocumented. PostCSS has a lot of pluses, so I don't understand the desire to lie about what's technically possible. Why not just say, \"We believe we have a better pre-processor architecture\" instead of making claims that other preprocessors can't do things that they clearly can?\nI think Less.js can learn from (and often does) the way other libraries find solutions to the same problems, just like there are likely several advantages that Less might have over other preprocessors, but Less doesn't have any documentation that says that those advantages are completely unachievable by others, as such statements would tread into a territory of arrogant grandstanding. The nature of open source is that we all find better solutions together, faster, and that we do so by forming supportive networks. But it's up to individuals in those communities to make that possible. Each project sometimes has it's own maturing process, so best of luck.\n. Well, to me as an outsider, my perception is that PostCSS's unique value proposition is its modularity and well-documented API. So, for a developer tailoring a preprocessor environment for their particular needs, they can structure a \"stack\" of PostCSS plugins that meet their needs (much like gulp streams, that have standardized input / output), or extend tools if they need to.\nThe appeal of PostCSS is obvious. It's not that it does something no pre-processor has ever done or supported (or can do), but the key advantage is that its designed to be inherently modular and customizable, and as a result, has built up a significant library of PostCSS modules.\nLess has a different unique value proposition, but that would be my take.\n. @paulirish Will you be publishing how Less can be integrated into devtools editing?\n. @paulirish You mean like: https://getcrunch.co/, the best Less & Sass editor/compiler app of all time in the history of human civilization?  ... I might be biased. \ud83d\udc40 \n. Until this is fixed, is there a short-term workaround? Is there an explicit \"default\" setting?\n. @ai In my case, I have two tests that return a Promise, and then am using a Promise.all for both tests (using the async processing method of PostCSS, despite my example). Therefore, the second test may start before the first one completes.\nJust speaking hypothetically, if the PostCSS processor instance sets anything globally as far as parser (not local to the processor instance), then it would be possible for my test to fail but yours to succeed, if your tests are synchronous.\nThe only other thing I can think of is a test runner that starts a new JS thread for each test (like a command-line test runner?). That would also hide the issue I think.\n. Or I could have made a mistake. It's possible something else is going on here.\n. I did, in fact, make the mistake. [sad trombone] Sorry, closing.\n. Well, it's a custom parser. The fact that it evaluates what you are parsing in order to create usable nodes is a necessity of using Less correctly. Technically, it would have been just called \"postcss-less\" but someone registered that name on NPM before I did. If you have a better suggestion, let me know.\n. postcss-less-engine?\n. Okay, I'll update the repo.\n. Before I finalize it, just want to run by two more possible names: postcss-less-compiler / postcss-less-render.\nEither of those better than postcss-less-engine in your opinion?\n. Ah, I see, so it returns both the stringified and the AST form? Interesting, I wouldn't have expected that. Seems like unnecessary work if you're not going to use the string. But thanks!. ",
    "seven-phases-max": "@ben-eb\n\nIt is impossible to do inside Less itself,\n\nBefore making such statements I'd suggest you to learn Less sources. You can write a plugin to manipulate every single bit of the parsed CSS AST and manipulate it at every possible CSS entity resolution level (starting from single properties and its values and ending with the final CSS output string (that string is what the addPostProcessor thing mentioned by @ai is for.. it's just a hook to chain an external processor)).\nSo not commenting anything else of this issue, I'm just remarking Ben's totally wrong declaration (for examples on manipulating the Less AST items see https://github.com/less/less.js/issues/2371 etc.)\n. @ai There's no. Simply because Less was made and developed primarily as a language not as a CSS processing core.\n. @ben-eb  Now you just sound ridiculous (\"it's impossible because I say so\" pffff...).\n. - For plugin authors\n- minimal AST visitor plugin in tests\n- compiler's own AST visitor modules using the same API (it's not really \"internal\" or \"external\")\n- real plugin using the same API: less-plugin-inline-urls\n. @ai A plugin can subscribe to any tree node not just a rule... Hence you can just take all the rules in a ruleset (just by defining visitRuleset listener) and perform any transformation on those (e.g. add/remove/replace/merge/reorder/etc.). Technically every tree entity has its corresponding visit function.\n. @ai  \n\nAnd there is some  node.source  to set origin node?\n\nSorry, I'm sure I understand what would origin node mean there. By defining visitRuleset you'll get all rulesets of the tree (so you are on your own to decide which of those to modify). Though this is also set by the plugin itself (root there is the complete tree node, so technically you can run another visit handler for any subtree/node when/if necessary). There're no specific limitations or requirements or conventions, everything is just plain JS objects and arrays. All modifiable (provided that you won't break anything further in the chain).\n. @ai Ah, I see. Yes, nodes have their source file/line fields (when applicable) so you just copy those to derived nodes.\n. ",
    "tabatkins": "@extend, as defined in the draft, cannot be emulated by a preprocessor. It's impossible, due to the way specificity works.  @extend, as Sass does it, is slightly different - specificity is different, and it has to use a number of heuristics to limit the combinations it actually generates to those most likely to be useful.\n@davidtheclark As long as the @media query matches, any .serious-error elements act like they have .error; that implies that they get both the width and the color properties.  If the '@mediaquery doesn't match, then.serious-errorelements don't act like.error`, so they get neither.\n. > The question is: is it ok to use postcss-w3c-*. Is this naming approved by the w3c ? :)\nYou don't have to care about permission, feel free to use it if you want.\n. ",
    "travco": "Although originally just a fork intended to extend (terrible puns) existing functionality with  @davidtheclark 's postcss-simple-extend, my repo: \nhttps://github.com/travco/postcss-extend \nhas ballooned to roughly simulate the cssnext spec. Although it's not really a replacement for SASS's @extend, I don't think it can really be called \"simple-extend\" anymore. So I'm tempted to take up @morishitter 's offer.\nThe repo is currently in a 'all intended features' state: stable, with tests, and (passable) documentation. \n. That would be awesome @morishitter, I appreciate the willingness.\n. @MoOx we should be able to call this issue resolved, it has been up on NPM thanks to @morishitter. \nI don't know if/where you want this listed under in the postcss README. Technically it's both a future syntax (should be as close to spec as possible) and a language extension. \nI'm more than happy to make a pull request making edits to the README if that's easier on your end.\n. @ai this can be closed thanks for PR #454 \nThanks again :smiley: \n. ",
    "frontdevde": "@ben-eb good shout, amended it\n. ",
    "MadLittleMods": "Dangerous\nI may be missing something but I am not sure of the danger that you mentioned in regards to how this plugin transforms CSS. Hopefully the issues MoOx plans to open, will shed some more light on this.\nThere is currently a ~~bug open~~ (now closed) which I will be fixing promptly.\nSlow regex\nThe regex is long to properly split out any CSS selector into its descendant pieces. As mentioned in the comments of that piece of regex. This almost works /\\b\\s(?![><+~][\\s]+?)/ but the word boundary \\b doesn't work with attribute selectors.\nI could instead use a separate/proper CSS parsing engine library to split it into pieces and although I haven't explored this area, I am not sure on the performance benefits. This definitely an area to look into the future.\nJust as a ballpark-type figure with nothing to compare to. Here is a jsPerf with only one test case and I am getting ~35-40k ops/second in Chrome. Firefox does about ~20k ops/second. I could also be doing something terribly wrong in this test case jsPerf with caching, engine optimizing the calculation out, etc: http://jsperf.com/css-selector-split-at-descendant-combinator\nLicense:\nAs mentioned in the readme:\n\nI do use some of the same/similar unit tests because that just makes sense to get proper code coverage.\n\nMoOx and I talked about this on gitter and the I got the impression that MoOx wasn't really worried about it. I have no issue adding some form of attribution to the license but what do you suggest to cover the similar fixtures?\n. @ai Updated commit:\n- Changed wording: @rules to at-rules\n- Moved link in accordance to plugin name length\n. :+1: \nMode for complete removal but also mode for just logging/messaging which can help with manual intervention and linters as you mentioned.\nAlso remove properties that have IE CSS expressions/Dynamic properties: color: expression(/*...*/);\n. @ai Here is a list of artists I gathered so far.\n. If anyone is in Minnesota, Twin Cities area, I am willing to meetup :grinning:\n. @ben-eb Thanks for spotting those :grinning:\nFixed!\n. Hey @oleersoy, thank you for the report :grinning:\nI have released a fix for this in v0.5.1 and added a test to make sure we don't regress.\n. ",
    "johno": "@tunnckoCore postcss-cssstats is currently only a 0.0.1 because cssstats is being reworked to either take a CSS string or a PostCSS AST. So, once that functionality is added (in the next day or so), it will only parse the CSS once when an AST is passed.\nThus, it will serve appropriately as a plugin, providing a stats object in each build where you can console.log any output you'd like. Ideally this will be used to warn on overly specific selectors, and print number of IDs, classes, universal selectors, etc.\n. Thanks for the info! I will be sure to take this approach with the next upcoming version.\n. ",
    "dp-lewis": "I think a fun section is a good idea, I can think of a lot of things that would fit under that category :)\n. ",
    "whdigger": "Great idea =) and in the futures to do something like automatic travis ;)\n. @ai something like this\nThe user downloads the src PostCss syntax and the output gets :sparkles: css \n. ",
    "ismay": "Ah ok, my mistake. Can see it here as well: https://github.com/postcss/postcss/blob/master/docs/api.md#processoruseplugin . Ok, so then it should be fixed in ember-cli-postcss (or broccoli-postcss). I'll see what I can do there. Thanks!\n. ",
    "gucong3000": "fixed\nhttps://github.com/postcss/postcss/pull/784\n. ``` CSS\nqunit-fixture {\nposition: absolute;\ntop: -10000px;\nleft: -10000px;\nwidth: 1000px;\nheight: 1000px;\n\n}\n```\nJS\nfunction cssPipe(stream) {\n    var processors = [\n        require(\"stylelint\")(stylelintConfig),\n        require(\"cssnext\"),\n        require(\"autoprefixer\")({\n            browsers: [\"last 3 version\", \"ie > 8\", \"Android >= 3\", \"Safari >= 5.1\", \"iOS >= 5\"]\n        }),\n    ];\n    stream = stream.pipe(require(\"gulp-postcss\")(processors));\n    return stream;\n}\nTypeError: value.indexOf is not a function\n    at OldValue.check (E:\\work\\CommonJS\\node_modules\\autoprefixer\\lib\\old-value.js:17:17)\n    at E:\\work\\CommonJS\\node_modules\\autoprefixer\\lib\\processor.js:198:25\n    at E:\\work\\CommonJS\\node_modules\\postcss\\lib\\container.js:94:28\n    at E:\\work\\CommonJS\\node_modules\\postcss\\lib\\container.js:81:26\n    at Rule.each (E:\\work\\CommonJS\\node_modules\\postcss\\lib\\container.js:68:22)\n    at Rule.walk (E:\\work\\CommonJS\\node_modules\\postcss\\lib\\container.js:80:21)\n    at E:\\work\\CommonJS\\node_modules\\postcss\\lib\\container.js:83:32\n    at Root.each (E:\\work\\CommonJS\\node_modules\\postcss\\lib\\container.js:68:22)\n    at Root.walk (E:\\work\\CommonJS\\node_modules\\postcss\\lib\\container.js:80:21)\n    at Root.walkDecls (E:\\work\\CommonJS\\node_modules\\postcss\\lib\\container.js:92:25)\n. There are two plugins throw exceptions, such as cssnext, cssgrace, and maybe more.\nMy changes can fix this problem.\n. 3Q, complete.\n. I \u2018d like to see a software output same result on any platform. > Windows changes the line endings\nWindows will not do any thing with your line endings, Maybe your git did it.\ntry this:\nbash\ngit config --global core.autocrlf input\nI use Windows too.. Maybe we should keep EOL as file is. Just like IDEs and editors.. @ai \nThanks for your suggestion, the document has been modified\n. > You need to write about it to styled-component community.\nhttps://github.com/styled-components/styled-components/issues/1763.  I'm not sure we need a warning. \n. @ben-ed  I modified the code as your wish. \n. ",
    "ramsaylanier": "Also ie10 supports flexbox but flex items with margins kinda break\nsooooooo.....\n\ud83d\ude15\nOn May 25, 2015 4:55 PM, \"Brian Holt\" notifications@github.com wrote:\n\nUp here: btholt/postcss-flex https://github.com/btholt/postcss-flex.\nIt sorta works. It needs to be more cautious not to fuck up other people's\ncode and the code needs to be reworked to not be dumb. I'm working on that. [image:\n:smile:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/postcss/postcss/issues/340#issuecomment-105313365.\n. \n",
    "robabby": "We were just discussing this kind of feature at my office the other day, as we are starting to prototype in Flexbox, but would love to have a graceful degradation to Tables for IE9 and 10.  Some kind of flexbox transpiler that would hook into the .no-flexbox modernizr class would be awesome.\n. ",
    "bkinsey808": "Anybody try this one? https://github.com/7rulnik/postcss-flexibility\n. ",
    "iObject": "@bkinsey808 I've tried it, does terrible things in IE10 by using javascript to manipulate your elements. And not in a good way.\n. ",
    "soenkekluth": "using node v0.12.2 btw\n. thanks for the fast reply!\nour setup is based completely on node either way. we use gulp and node-sass (gulp-sass)\nthe same codebase using mixins and @includes takes about 60ms to render with node-sass. postcss takes about 115ms.\nwe use sourcemaps but of course tried without. does not change a bit.\nour goal is to replace scss completely with postcss. thats why we use a bunch of plugins:\n(can not show you the whole code right now. but we will)\n```\ngulp.task('css', function() {\n  return gulp.src(css.src)\n    .pipe(postcss([\n      cssImport(),\n      cssComments(),\n      cssMixins,\n      cssExtend,\n      cssNested,\n      cssSimpleVars,\n      cssCond,\n      cssFor,\n      cssVars,\n      cssNext,\n      lost(),\n      autoprefixer({\n        browsers: browsers,\n        cascade: false\n      })\n    ]))\n    .on('error', handleErrors)\n    .pipe(gulp.dest(css.dest));\n});\n```\n. with same codebase i mean the same code refactored for both cases of course\n. @ai well in fact we use postcss for autoprefixer in our sass version too!\ni removed sourcemaps in both examples\n```\ngulp.task('sass', function() {\n    return gulp.src(config.src)\n        .pipe(sass(config.settings))\n        .pipe(postcss([\n            lost(),\n            autoprefixer({\n                browsers: browsers,\n                cascade: false\n            })\n        ]))\n        .on('error', handleErrors)\n        .pipe(gulp.dest(config.dest));\n});\n```\n. @ai nope look my last comment. 60ms there\n. yes. macbook pro i7\n. its a base setup! \n. and defenitly the same code optimized for postcss with that config above in 115ms\n. @ai yes i will. maybe takes some minutes to fix errors then. will get back to you! thanks!\n. @ai  we are down to 80ms commenting almost everything out.\nlost did not do anything (base setup is not using it)\nautoprefixer took about 10-15ms\ncssVars took about 5-6ms\nthe only ones left are :\npostcss-import\npostcss-mixins\npostcss-simple-vars\none of these should be the main factor..\ngulp.task('css', function() {\n  return gulp.src(css.src)\n    .pipe(postcss([\n      cssImport(),\n      // cssComments(),\n      cssMixins,\n      // cssExtend,\n      // cssNested,\n      cssSimpleVars,\n      // cssCond,\n      // cssFor,\n      // cssVars,\n      // cssNext,\n      // lost(),\n      // autoprefixer({\n      //   browsers: browsers,\n      //   cascade: false\n      // })\n    ]))\n    .on('error', handleErrors)\n    .pipe(gulp.dest(css.dest));\n});\n. @ai in the base setup 10 files only. will be hundrets when we finish ;)\n. @MoOx  don't know exactly but they cache the files and merge only the changed parts I guess. \n. ",
    "bmds": "I'm experiencing a massive slowdown for the postCss version of autoprefixer vs the grunt-autoprefixer version.\nLibsass runs over the files in ~650ms followed by grunt-autoprefixer at ~270ms.\nIf i swap grunt-autoprefixer out to postCss it runs in ~11s.\nTaking all processors out of the config results in ~1s run time so there is obviously something wrong.\n. ",
    "awinogradov": "Ok, find it:)\n. Ok, wait theprotein/enb-postcss#1. I work on it\n. All done! https://github.com/theprotein/enb-postcss/commit/6b79de948a9749e8c6a5e22a80902f9319e163e0\n. postcss-foreach get val and iterator into the loop\n. Give me example, please\n\u0412\u0442, 30 \u0438\u044e\u043d\u044f 2015 \u0433. \u0432 21:51, Andrey Sitnik notifications@github.com:\n\n@verybigman https://github.com/verybigman I think you should remove\nthis repo, because postcss-each https://github.com/outpunk/postcss-each\nalready do it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/postcss/postcss/pull/400#issuecomment-117300104.\n. @ai where in your example index of loop? I fork because create another iterator. for, each, foreach. This is problem? I can create pr to the postcss-each. You really think is right?\n. Ok, no problem!\n. Wait https://github.com/outpunk/postcss-each/pull/3\n. \n",
    "iamfrntdv": "i'm building a node.js and browser sync server, so both node.js server and browser sync can run at the same time on different ports. currently I'm using harp and sass and wanted to give a try for postcss.\n. Thank you!\nhttps://github.com/sintaxi/harp/issues/451\n. This issue is blocking usage of stylelint and postcss-browser-reporter. There are some important stylelint rules for our team \"block-closing-brace-newline-after\": \"always\", \"block-closing-brace-newline-before\": \"always\". If i add stylelint after import (gulp) it will trough an error, if it will before it won't lint all css files as there is escape pattern for some files which are imported into main files. Meanwhile workaround is separate gulp task which lints all css files but postcss-browser-reporter can't be intagrated in proper way. . [THE LOOK] Maybe it would be good idea to introduce PostCSS like something more luxury, more ambitious? Something that make trends and not follows them. For example just look at bootstrap and foundation websites i think they look like 90th now. PostCSS website definitely shouldn't be like that. i think PostCSS website can, or even should be more conceptual.\n[THE FEATURES] i think the most important feature of the website should be well organised documentation, easy to use, easy to find. Maybe search page like gulpjs.com has (as it was mentioned before). I think it would be good if there were rules which plugins will be recommended first (for example those which have good documentation) and which last (with bad documentation). maybe plugins statistics. \n. [LANDING PAGE] prelude. best PostCSS features. landing page should be attractive so it could make developers switch to PostCSS or at list make them think about it.\n. @ai pull request on it's way!\n. i'm sorry for delay!\n. @talgautb what exactly doesn't work?\n. ",
    "kristoferjoseph": "@ai & @ben-eb \nI made the updates you suggested. Let me know if there is anything else needed. Thank you.\nInput output examples added:\nhttps://github.com/kristoferjoseph/postcss-color-scale\nhttps://github.com/kristoferjoseph/postcss-modular-scale\nKeyword updated in package.json:\nhttps://github.com/kristoferjoseph/postcss-color-scale/blob/master/package.json#L8\nhttps://github.com/kristoferjoseph/postcss-modular-scale/blob/master/package.json#L8\n. ",
    "e-karma": "@ben-eb suggested I post this here as he said some have applied similar solutions and it might be simple.  Nothing needed from PostCSS codebase that i'm aware of\n. ",
    "aaronbushnell": "@MoOx I tried to disable cssnext but I get an error that postcss cannot run without an option being in the array. Is there a way to bypass that?\n@ai I tried the Benchmark test and here are the results I got from that. Excuse how long it is; wanted to be thorough. This appears to reflect how much faster PostCSS is. Not sure why my setup would be different, though :confused: \n```\n[10:37:51] Running suite Bootstrap [/Users/aaronbushnell/Desktop/benchmark/preprocessors.js]...\n[10:37:59]    libsass x 3.63 ops/sec \u00b17.18% (13 runs sampled)\n[10:38:05]    Rework x 9.90 ops/sec \u00b14.34% (29 runs sampled)\n[10:38:11]    PostCSS x 13.89 ops/sec \u00b18.75% (43 runs sampled)\n[10:38:21]    Stylecow x 2.41 ops/sec \u00b122.35% (12 runs sampled)\n[10:38:29]    Stylus x 5.32 ops/sec \u00b134.82% (20 runs sampled)\n[10:38:36]    Less x 5.99 ops/sec \u00b111.35% (21 runs sampled)\n[10:38:49]    Ruby Sass x 0.65 ops/sec \u00b136.04% (8 runs sampled)\n[10:38:49] Fastest test is PostCSS at 1.40x faster than Rework\nPostCSS:   72 ms\nRework:    101 ms  (1.4 times slower)\nLess:      167 ms  (2.3 times slower)\nStylus:    188 ms  (2.6 times slower)\nlibsass:   276 ms  (3.8 times slower)\nStylecow:  415 ms  (5.8 times slower)\nRuby Sass: 1543 ms (21.4 times slower)\n[10:38:49] Finished 'preprocessors' after 59 s\n[10:38:49] Starting 'bootstrap'...\n[10:38:49] Finished 'bootstrap' after 217 \u03bcs\n[10:38:49] Starting 'parsers'...\n[10:38:49] Running suite Bootstrap [/Users/aaronbushnell/Desktop/benchmark/parsers.js]...\n[10:38:55]    Rework x 13.62 ops/sec \u00b16.06% (38 runs sampled)\n[10:39:01]    PostCSS x 22.82 ops/sec \u00b13.89% (59 runs sampled)\n[10:39:07]    CSSOM x 20.85 ops/sec \u00b13.58% (39 runs sampled)\n[10:39:12]    Mensch x 17.82 ops/sec \u00b16.05% (35 runs sampled)\n[10:39:19]    Gonzales x 6.26 ops/sec \u00b111.02% (20 runs sampled)\n[10:39:35]    Gonzales PE x 0.90 ops/sec \u00b13.90% (7 runs sampled)\n[10:39:41]    Stylecow x 7.96 ops/sec \u00b18.35% (25 runs sampled)\n[10:39:41] Fastest test is PostCSS at 1.09x faster than CSSOM\nPostCSS:     44 ms\nCSSOM:       48 ms   (1.1 times slower)\nMensch:      56 ms   (1.3 times slower)\nRework:      73 ms   (1.7 times slower)\nStylecow:    126 ms  (2.9 times slower)\nGonzales:    160 ms  (3.6 times slower)\nGonzales PE: 1108 ms (25.3 times slower)\n[10:39:41] Finished 'parsers' after 52 s\n[10:39:41] Starting 'bootstrap'...\n[10:39:41] Finished 'bootstrap' after 437 \u03bcs\n[10:39:41] Starting 'prefixers'...\n[10:39:42] Running suite Bootstrap [/Users/aaronbushnell/Desktop/benchmark/prefixers.js]...\n[10:39:48]    Autoprefixer x 15.24 ops/sec \u00b113.44% (53 runs sampled)\n[10:39:56]    Stylecow x 3.44 ops/sec \u00b18.02% (13 runs sampled)\n[10:40:09]    nib x 1.35 ops/sec \u00b147.63% (9 runs sampled)\n[10:40:28]    Compass x 0.32 ops/sec \u00b111.36% (6 runs sampled)\n[10:40:28] Fastest test is Autoprefixer at 4.4x faster than Stylecow\nAutoprefixer: 66 ms\nStylecow:     291 ms  (4.4 times slower)\nnib:          741 ms  (11.3 times slower)\nCompass:      3139 ms (47.8 times slower)\n[10:40:28] Finished 'prefixers' after 47 s\n[10:40:28] Finished 'default' after 2.65 min\n``\n. Ah, I see. I passed an empty array and that helped quite a bit. However, it's still seems far behind the benchmark test. I'm getting 130-145ms now. \n. Ha! There it is.Finished 'stylus' after 1.17 s`. \nThanks for your help, guys.\n. ",
    "duivvv": "User cases? a cleaner gulp file I guess.\nBut I do understand your point about the functions and complicated types \n. thanks for considering this, like your work on PostCSS\n. Isn't this something that PostCSS should implement? postcss-cli isn't used in gulp-postcss for example. \nOr am I missing something?\n. ok fair enough.\n. ",
    "markgoodyear": "Awesome. I guess it's a more simplified version of Compass's rhythm() function. I use my own custom function to do it in Sass (without Compass), but having a custom unit is much more CSS like. Easier to write too!\nAs for rem output, I figured when paired with postcss-pxtorem, it wasn't necessary to have a conversion, however open to ideas :).\n. ",
    "geelen": "@ai no worries! I realised this might be a contentious fix, and for now we can simply use a different prefix (i__ instead of __), but it was the first time I'd seen a declaration property change when parsed, so I wanted to get in there and see if I could fix it.\n. ",
    "karantin2020": "babel-loader for webpack is not a decision? Everyone who uses webpack and babel uses babel-loader I think\n\u042f \u043f\u043e\u043d\u0438\u043c\u0430\u044e, \u0447\u0442\u043e \u044d\u0442\u043e \u043d\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 (\u0435\u0441\u043b\u0438 \u0432\u043e\u043e\u0431\u0449\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430) \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u044f\u043c\u043e \u0441\u0435\u0439\u0447\u0430\u0441. \u0412\u0435\u0441\u044c \u0432\u043e\u043f\u0440\u043e\u0441 \u0432 \u043e\u0434\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u0434\u0430 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\n. Yes, sorry. That is my mistake :)\n. ",
    "mummybot": "Another shameless plug, but this one works for inline comments of any permutation:\nhttps://github.com/mummybot/postcss-strip-inline-comments\n. ",
    "comerc": "@ben-eb \n\nI plan to add this to postcss-discard-comments when this is released.\n\nFrom now I use postcss-discard-comments + postcss-inline-comment, but I want to use only one best plugin. :). ",
    "bb010g": "Is there any sort of ETA for 6.0? (I'm guessing it's not next week anymore.). @ai It's a blocker for postcss/postcss-import#206. Not the end of the world, but it would be nice to see it fixed at some point.. ",
    "luisrudge": "That would be awesome! :)\n. ahahah @ai. I'll join gitter and try to tackle this one :)\n. Started here: https://github.com/luisrudge/postcss-flexbugs-fixes\n. ",
    "dmitrykiselyov": ":+1: \n. ",
    "seaneking": "didn\u2019t get there in time haha, thanks for fixing the order for me ;-)\n. done ;-)\n. yep not aiming to be to-spec css, just a shortcut for those already using rgba(). But just saw https://github.com/avanes/postcss-color-alpha which is similar, just a different syntax. Up to you whether you want to include this variation in the readme or not, as it is quite similar (I personally prefer adding to the existing rgba() format, rather than adding a new decl/value) \n. derp, sorry I'll fix it.\n. erroring on rgba (suggests rgb), so I guess the spellchecker would need to be updated.\n. Sure thing no worries, I know personally I think of normalizing as almost akin to autoprefixing (ie: fixing browser inconsistencies vs using some particular framework). But totally appreciate the issue of feature-creep.\n. Thanks! ;-)\n. Oh really? I had no idea autoprefixer handled this, since there's no non-prefixed standard (that I know of) for the various psuedo-selectors. Is the syntax the same for autoprefixer? \nAnd re: the !importants and such, not sure if that would fit in autoprefixer's purview, since they're not technically part of prefixing, just fixing cross-browser quirks.\n. Alrighty let me just strip out ::placeholder then.\n. okay that's done, should I change the name of the plugin as well? Seems a bit ambiguous now, if it just handles range inputs. Unless you know of any other inputs with non-standard pseudo selectors this could polyfill?\n. Alright, I'll add support for date/datetime. AFAIK  has no non-standard pseudo elements, but I'll look into it.\n. Ha thanks. After a bit of digging it seems the only thing accessible on datetime is the text input field itself (as opposed to the actual datepicker), and that's only on webkit. So it seems a bit pointless to add that to the plugin. Might have to just stay a range input polyfill for now :-/\n. Yep agreed. I'll keep on the lookout for more to add ;-)\n. ",
    "fab1an": "Because it seems to use vendor-prefixes to fix issues in certain browsers only.\n. ",
    "Panya": "Source of the error at https://github.com/postcss/postcss/blob/master/lib/previous-map.js#L38 (these checks just don't allow the charset).\n. :+1: \n. ",
    "sydneyitguy": "I get an error with \"Error: Unsupported source map encoding charset=utf8;base64\"\nNOTE that utf8 instead of utf-8\nChanged\nlet utf64 = 'data:application/json;charset=utf-8;base64,';\nline to \nlet utf64 = 'data:application/json;charset=utf8;base64,';\ntemporarily fixed the issue. Do you think this is a common case?\n. @ai I guess it's basically the same error with this thread except the charset name is little bit different \nevents.js:154\n      throw er; // Unhandled 'error' event\n      ^\nError: Unsupported source map encoding charset=utf8;base64\n  at PreviousMap.decodeInline ([...]/node_modules/postcss/lib/previous-map.js:71:19)\n  at PreviousMap.loadMap ([...]/node_modules/postcss/lib/previous-map.js:91:25)\n  at new PreviousMap ([...]/node_modules/postcss/lib/previous-map.js:33:25)\n  at new Input ([...]/node_modules/postcss/lib/input.js:39:19)\n  at parse ([...]/node_modules/postcss/lib/parse.js:22:17)\n  at new LazyResult ([...]/node_modules/postcss/lib/lazy-result.js:61:24)\n  at Processor.process ([...]/node_modules/postcss/lib/processor.js:34:16)\n  at DestroyableTransform._transform ([...]/node_modules/gulp-autoprefixer/index.js:20:31)\n  at DestroyableTransform.Transform._read ([...]/node_modules/through2/node_modules/readable-stream/lib/_stream_transform.js:159:10)\npackages:\n\"devDependencies\": {\n    \"del\": \"^2.2.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-autoprefixer\": \"^3.1.0\",\n    \"gulp-changed\": \"^1.3.0\",\n    \"gulp-coffee\": \"^2.3.2\",\n    \"gulp-coffeelint\": \"^0.6.0\",\n    \"gulp-concat\": \"^2.6.0\",\n    \"gulp-imagemin\": \"^2.4.0\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-sass\": \"^2.3.1\",\n    \"gulp-sourcemaps\": \"^2.0.0-alpha\",\n    \"gulp-uglify\": \"^1.5.3\"\n  },\n. @ai Ok just created https://github.com/postcss/postcss/issues/799\n. ",
    "longdog": "the devil's work :smiling_imp: \n. ",
    "WolfgangKluge": "At the moment it's more a container for ideas than a project, but I just started such a project some days ago ;)\nThe main idea is to allow to format a given piece of css-code and the plugin reads out all the needed information...\n. Oops. Didn't recognized the order. Sorry.\n. postcss-bem\npostcss-each\npostcss-for\npostcss-conditionals\n. There are some more links in wrong order. I will change it tomorrow.\n. ",
    "omgovich": "How about a section where some people will say ideas of plugins?\n. ",
    "himynameisdave": "Not sure if this is at all helpful but here's an exportable, ever updating list of plugins:\npostcss-plugins\n. I would be down to help as well, and it seems like other developers are able to help in the same small capacity that I am (ie: doing some minor HTML/CSS/JS work). \nIt would be cool if (once this project gets off the ground) you guys listed concise, singular modules/components that needed to be built as issues in the postcss.com repo. That way whoever is available can pick them up and build them out, independent of how the rest of the application is being built.\n. \nThat's cool man, you don't have to add it to the official list if you don't want. Regardless I'm going to be maintaining it. You never know what developers will need though, like I never would have thought the rebeccapurple plugin would ever get > 10k downloads in a month but here we are.\n. @lydell right forgot cssnext and how cool it is! :)\n. @ai first off I just wanna say you are right, and usually developers will prefer to use hex or something else anyway. Not to mention you're saving bytes by not using rgb.\nThe only reason me (and my team) use rgb values is for consistency between alpha and non-alpha colors. Basically we don't want a codebase that, for example, jumps between #fff and rgba( 255, 255, 255, 0.5 ) - we'd rather just have rgb(a) colors. \nI built postcss-rgb-plz to specifically address this despite the fact that there are probably only a very small number of devs out there that will use it. I am aware of this, so as I stated above it's fine if this one doesn't make the list. I will still happily maintain it :)\n. @ai thanks but no thanks - we're writing/repairing super old legacy CSS in a lot of our work, none of which uses 8-digit hex colors. I could be wrong, but it doesn't look like that one converts basic 3/6 digit hexes to rgb, which is what mine does.\n. @ben-eb yes working on some tests right now. Thanks for understanding what I was trying to get across.\n. @maximkoretskiy great idea for a plugin :) :+1:\n. @notacouch Cool plugin :) It's been added to my ongoing \"officially unofficial\" post-plugins list/module as of today.\n. :+1: \n. lol @ \"many moons ago\" :moon: \n. Already added to postcss-plugins list :smile: \n. Yeah and postcss-convert-values is already widely used/downloaded, so this plugin seems kinda redundant. Nice work though!\n. Safe to add to the postcss-plugins list?\nAlso PS: One of my plugins does the exact opposite of this lol :smile: \n. Added to postcss-plugins over here: https://github.com/himynameisdave/postcss-plugins/commit/812c39b658edc36eb474b7d094356c4b670225be\n. Totally nullifies this plugin I was working on: postcss-alphabetize :anguished: \n. @Siilwyn not at all, yours is a better solution & I plan on learning from it :smile: \n. @ai yeah cool, it's not published to NPM so that namespace is still available. I was making it for myself basically because we have a certain CSS formatting guide that we follow where I work. Yes, we are aware that the order of declarations matters and that there are times when you don't want to declare things alphabetically. Anyways I don't need to build mine anymore because @Siilwyn's sorter plugin will do perfect and so I am going to delete my alphabetize plugin. :+1: \n. @ai in the first blurb under \"plugins\" it reads...\n\nHere is out favorites\n\n...when I believe it should say here is _our _favorites.\n. @ai also, no link to postcss-plugins in the readme eh? Thats cool I'm just curious what the plan is to show all the plugins. Are you going to make use of that plugin list to generate this file that does not yet exist?\n. 'aight whatever's clever man. I'm still going to be maintaining postcss-plugins though :smile: let me know if I can be of any help!\n. ** typo\n. ",
    "hudochenkov": "@marcustisater I can help with HTML/CSS and not complicated JS (SPA, React, etc. i can't do). Also I'm not a designer and can't bring design from my head.\n. What is the point to have this plugin while plugin with the same functionality already exist and have better (in my opinion) syntax: rgba(#bada55, .8)? https://github.com/seaneking/postcss-hexrgba Maybe your plugin handle color transformation better or something else do better. So it would be good for PostCSS ecosystem to merge together this two plugins.\n. I've made syntax highlighting for Sublime Text. It's based on SCSS syntax highlighting, but using standard comments /* */. It's probably not cover 100% of PostCSS-plugins syntax, but for most users, I think, it will work pretty well. Also it's good starting point to make better syntax highlighting, than nothing :)\n. @azat-io This is great! :) By the way, you build this from scratch (all this regexes) or use other syntax as base?\n. I've use a lot of div:not(:first-child) and div:not(:last-child) after this advice recently. These selectors looks a little messy. So I propose :not-first-child and :not-last-child shortcuts as better looking selectors and with improved readability.\n. Frankly I don't know if someone else will need these plugin. I was just thinking that every PostCSS plugin should be listed in that list.\n. No problem. Thank you for constantly keeping PostCSS ecosystem and community on the right path :)\nP. S. It was my first plugin and npm package ever, so it was a great experience for future development :)\n. @TrySound it's absolutely not duplicating. css-property-sorter sort only properties. My plugin sort also at-rules, nested rules, variables; can group nodes. Also not breaks nesting (css-property-sorter does). css-property-sorter sorts only properties (plugin name and readme very clear about this) in not nested rules, my plugin sort all rule's content in nested (or not) rules.\nAbout async I agree. I don't know how to replace sync with async yet.\n. @TrySound as I tested on complex stylesheets it's not break styles. Style rendering done by PostCSS itself. Obviously edge cases may exists, no one can write software without bugs :)\n. > I have no idea why @hudochenkov didn't join forces as css-declaration-sorter was already there.\n@Siilwyn, I almost finished my plugin, when your plugin was released. I've checked your plugin, but it only can sorting properties in non-nested rules. My plugin is an improved version of CSSComb's functionality. That is why I released my plugin anyway.\nRight now I'm working on stylelint plugin, which will use postcss-sorting for checking the order of rules content. And afterward, I will integrate postcss-sorting in stylefmt, which is reformatting style sheets based on stylelint config. So postcss-sorting won't be just a plugin, it will be an engine for features in high-level tools.\nWe can join forces and make postcss-sorting faster if you like. Maybe you have suggestions?\nP. S. BTW, I run my plugin a lot in an editor. And even on large stylesheets, it works pretty fast, almost instant. It's not numbers; it's user perception.\n. I've just set node.raws.semicolon = true. I think it's pretty safe for postcss-sorting case.\nThank you.. I just checked, and it's not tests only :(\nI run stylelint CLI (unreleased master branch) over my project and I get many warnings as a user.\nWe'll probably revert update to PostCSS 7 until we figure out how we can avoid these warnings :(. I dig a little bit. And the first thing I found is getPostcssResult() which is used all the time (each stylelint run). Basically it's postcss().process() without any plugins. Every rule and many internal things rely on result from it. We can't replace it with postcss.parse, because it returns very different thing.\nIf I understand correctly the only way to get rid of this warning without changing PostCSS is to rewrite half of stylelint, which is crazy :). I'm afraid not, because we need LazyResult, every rule, and plugin expects it. Is there another way to get LazyResult but postcss().process()?. I guess it's LazyResult, because when I replaced postcss().process() with postcss.parse().toResult() 301 test out of 13652 broke. And we still had 153 warnings from tests for our small functions.\nI didn't notice any pattern in fails, except many Unknown word (CssSyntaxError) when we expected reported violation from stylelint rule.. Thank you! Now tests all green, and we need only change tests, which use PostCSS directly.\nIs this solution a \u201cright\u201d way? Feels like creating LazyResult manually is a hack, and postcss().process() is more correct.. While I was working on stylelint tests I found a limitation of .parse. Looks like it's impossible to use non-default syntax. \nThe following code:\njs\npostcss()\n    .process(css, { syntax: scss, from: undefined })\n    .then(result => {\n      return result.root.walkDecls(cb);\n    });\nDoesn't apply custom syntax, when converted to:\njs\npostcss.parse(css, { syntax: scss}).walkDecls(cb);. Thank you for your help and time!. Amazing! Thank you for a quick fix! It fixed most of the problems.\nUnfortunately, tests for no-invalid-double-slash-comments rule are still broken:\ncss\na { // color: pink; }. It's not a valid CSS, but browser won't fail on parsing CSS with such comments. So people, who get used to such comments in other syntaxes produce invalid code, which stylelint trying to avoid.\nhttps://stackoverflow.com/questions/12298890/is-it-bad-practice-to-comment-out-single-lines-of-css-with/20192639#20192639\nhttps://www.xanthir.com/b4U10. Maybe it's ok... The goal of that rule is to help a user to have no invalid code. With the latest change to PostCSS, the goal is still achieved. A user will be warned about invalid code. Warning message would be not user-friendly, though.\n\nUnknown word (CssSyntaxError)\n\nInstead of:\n\nUnexpected double-slash CSS comment (no-invalid-double-slash-comments). Thank you, @ai! It's always a pleasure to collaborate with you! :). \n",
    "mxstbr": "I've commented in postcss/postcss.com, but I'll do it here as well:\nAvailable for all frontend work. (Including the wizard, which I imagine similar in functionality to babels wizard)\nI made postcss.parts and can easily transfer that over to the website.\nWouldn't mind taking responsibility either @marcustisater, I've been meaning to contribute to PostCSS in a more meaningful way for quite some time! \n. ",
    "mariopeixoto": "Well, that's my fault for not being clear about my problem. \nToday I'm using a sass preprocessor, even though I'm using webpack, and I really wanted to take advantage of the style-loader in order to include css files on demand, but the sass-loader is a pain.\nAnyway, I've just found this awesome plugin called postcss-lost and I think I'll get rid of susy, compass and sass-loader altogether.\nBut I'm still curious. Is there a way to reuse popular sass frameworks like susy and bootstrap without having to preprocess them?\nThanks anyway.\n. ",
    "whitneyit": "Changes have been made in the new repo https://github.com/whitneyit/postcss-strip-units\n. Awesome! Thanks for all the great feedback :smile: \n. ",
    "loominade": "sorry\n. ",
    "Xaviju": "@MoOx \nShould the w3c approve all the names that contain 'w3c'? All the plugins in the world? \nIt is not enough to make clear that this is just a plugin respecting w3c standards? \nHow to avoid that a plugin uses that naming if they don't respect the standards or becomes unmaintained?\n. ",
    "daleeidd": "If they are renamed, I wouldn't mind claiming postcss-custom-properties if possible\n. Thanks. I have added a related section to the bottom of mine which includes postcss-mixins.\n. For the plugin I wrote: postcss-define-property\nWith type information, it could allow the definition of custom property shorthands similar to native ones by adding type information to the signature.\n``` css\n/ Input /\nborder: $width $radius $style $color {\n  border: $width $style $color;\n  border-radius: $radius;\n}\nborder: $width $radius {\n  border-width: $width;\n  border-radius: $radius;\n}\nborder: $width $color {\n  border-width: $width;\n  border-color: $color;\n}\n.something {\n  border: 25px 10px;\n}\n.nothing {\n  border: 25px blue;\n}\n```\n``` css\n/ Output /\n.something {\n  border-width: 25px;\n  border-radius: 10px;\n}\n.nothing {\n  border-width: 25px;\n  border-color: blue;\n}\n```\nIf the syntax looks bad, it is because I just made it up on the spot (WIP). Without some way to parse the types for values, those signatures wouldn't be possible.\nAs an option, I could find or write an external library for which PostCSS can depend on.\n. @ai Would those values be lazy-loaded? If it is used on-demand like the List module, then there would be no cost incurred for plugins that do not partake.\n. ",
    "hgl": "I'm not sure what's the real benefit of putting w3c in plugin names. Normal users that want to write future-proof code should simply use cssnext.\nIf you really want to inform users if a plugin is spec compliant or not, I think it's best to create a list at postcss/w3c, the website, etc, listing the postcss plugins that have been verified to be spec compliant. You can not prevent postcss-css-variables from being renamed to postcss-w3c-css-variables if they feel like it.\n. ",
    "wprater": "@yisibl nice start.  would be great if it used the css3 package, as it's got a great set of completions.\n. ",
    "renestalder": "Latest Jetbrain Editors have support for variables at least, as Visual Studio Code too. I understand why, for example, custom-media queries aren't supported yet: Because they are not fixed in the specification. (as you know lately it was decided that custom-media queries aren't in the Selector Level 4 Spec, postponed to next draft).\n. ",
    "isairz": "css-loader in webpack occurs same error\n```\n    ERROR in ./~/css-loader!./~/cssnext-loader!./assets/stylesheets/index.css\n    Use process(css).then(cb) to work with async plugins\nERROR in ./~/css-loader!./~/cssnext-loader!./assets/stylesheets/index.css\nModule build failed: ReferenceError: log is not defined\n    at new Input (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/node_modules/postcss/lib/input.js:29:5)\n    at Object.parse [as default] (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/node_modules/postcss/lib/parse.js:17:17)\n    at new LazyResult (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:54:42)\n    at Processor.process (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/node_modules/postcss/lib/processor.js:30:16)\n    at processCss (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/lib/processCss.js:168:24)\n    at Object.module.exports (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/lib/loader.js:21:15)\n\n```\n. @ai Sorry 'log' is my mistake\n```\n    ERROR in ./~/css-loader!./~/cssnext-loader!./assets/stylesheets/index.css\n    Use process(css).then(cb) to work with async plugins\nERROR in ./~/css-loader!./~/cssnext-loader!./assets/stylesheets/index.css\nModule build failed: TypeError: Cannot read property 'toString' of undefined\n    at new Input (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/node_modules/postcss/lib/input.js:10:23)\n    at Object.parse [as default] (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/node_modules/postcss/lib/parse.js:5:17)\n    at new LazyResult (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:28:24)\n    at Processor.process (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/node_modules/postcss/lib/processor.js:14:16)\n    at processCss (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/lib/processCss.js:168:24)\n    at Object.module.exports (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/lib/loader.js:21:15)\n\n```\n. @ai \ntest: /\\.css$/, loader: ExtractTextPlugin.extract('style-loader', 'css-loader!cssnext-loader') }\nI have not used postcss-loader but there are no errors at previous version. \n. @ai It occurs same error at 4.1.16.\nI checked the version at ./node_modules/css-loader/node_modules/postcss/package.json\n```\nERROR in ./~/css-loader!./~/cssnext-loader!./assets/stylesheets/index.css\nUse process(css).then(cb) to work with async plugins\nERROR in ./~/css-loader!./~/cssnext-loader!./assets/stylesheets/index.css\nModule build failed: TypeError: Cannot read property 'toString' of undefined\n    at new Input (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/node_modules/postcss/lib/input.js:29:23)\n    at Object.parse [as default] (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/node_modules/postcss/lib/parse.js:17:17)\n    at new LazyResult (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:54:42)\n    at Processor.process (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/node_modules/postcss/lib/processor.js:30:16)\n    at processCss (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/lib/processCss.js:168:24)\n    at Object.module.exports (/Users/isair/go/src/github.com/isairz/brave/yomiko/node_modules/css-loader/lib/loader.js:21:15)\n @ ./assets/stylesheets/index.css 4:14-124 13:2-17:4 14:20-130\n```\n. @ai thanks.\n. ",
    "gpleiss": "The error doesn't seem to have a stack trace. (Or maybe I'm just javascripting wrong, I don't know :grin:)\nIn this catch statement:\njs\n      catch(err) {\n        console.error('Error:', err);\n        console.error('Stack:', err.stack);\n      }\nWe see:\nError: Use process(css).then(cb) to work with async plugins\nStack: undefined\n. It's in if (isPromise(promise)).\n``` js\nPromise: {}\nPlugin: function (styles, result) {\n    const opts = assign({}, options || {})\n    // auto add from option if possible\n    if (\n      !opts.from &&\n      styles &&\n      styles.nodes &&\n      styles.nodes[0] &&\n      styles.nodes[0].source &&\n      styles.nodes[0].source.input &&\n      styles.nodes[0].source.input.file\n    ) {\n      opts.from = styles.nodes[0].source.input.file\n    }\n// if from available, prepend from directory in the path array\naddInputToPath(opts)\n\n// if we got nothing for the path, just use cwd\nif (opts.path.length === 0) {\n  opts.path.push(process.cwd())\n}\n\nvar importedFiles = {}\nif (opts.from) {\n  importedFiles[opts.from] = {\n    \"\": true,\n  }\n}\nvar ignoredAtRules = []\n\nvar hashFiles = {}\n\nreturn parseStyles(\n  result,\n  styles,\n  opts,\n  importedFiles,\n  ignoredAtRules,\n  null,\n  hashFiles,\n  createProcessor(result, options.plugins)\n).then(function() {\n  addIgnoredAtRulesOnTop(styles, ignoredAtRules)\n\n  if (typeof opts.onImport === \"function\") {\n    opts.onImport(Object.keys(importedFiles))\n  }\n})\n\n}\n```\n. @ai\nError: debug\n    at LazyResult.sync (/Users/pivotal/workspace/pivotal-ui/node_modules/gulp-cssnext/node_modules/cssnext/node_modules/postcss/lib/lazy-result.js:185:23)\n    at LazyResult.stringify (/Users/pivotal/workspace/pivotal-ui/node_modules/gulp-cssnext/node_modules/cssnext/node_modules/postcss/lib/lazy-result.js:215:14)\n    at LazyResult.get (/Users/pivotal/workspace/pivotal-ui/node_modules/gulp-cssnext/node_modules/cssnext/node_modules/postcss/lib/lazy-result.js:237:25)\n    at cssnext (/Users/pivotal/workspace/pivotal-ui/node_modules/gulp-cssnext/node_modules/cssnext/dist/index.js:150:20)\n    at DestroyableTransform._transform (/Users/pivotal/workspace/pivotal-ui/node_modules/gulp-cssnext/index.js:26:23)\n    at DestroyableTransform.Transform._read (/Users/pivotal/workspace/pivotal-ui/node_modules/through2/node_modules/readable-stream/lib/_stream_transform.js:184:10)\n    at DestroyableTransform.Transform._write (/Users/pivotal/workspace/pivotal-ui/node_modules/through2/node_modules/readable-stream/lib/_stream_transform.js:172:12)\n    at doWrite (/Users/pivotal/workspace/pivotal-ui/node_modules/through2/node_modules/readable-stream/lib/_stream_writable.js:237:10)\n    at writeOrBuffer (/Users/pivotal/workspace/pivotal-ui/node_modules/through2/node_modules/readable-stream/lib/_stream_writable.js:227:5)\n    at DestroyableTransform.Writable.write (/Users/pivotal/workspace/pivotal-ui/node_modules/through2/node_modules/readable-stream/lib/_stream_writable.js:194:11)\n    at Stream.ondata (stream.js:51:26)\n    at Stream.emit (events.js:107:17)\n    at queueData (/Users/pivotal/workspace/pivotal-ui/node_modules/gulp-sass/node_modules/map-stream/index.js:43:21)\n    at next (/Users/pivotal/workspace/pivotal-ui/node_modules/gulp-sass/node_modules/map-stream/index.js:71:7)\n    at /Users/pivotal/workspace/pivotal-ui/node_modules/gulp-sass/node_modules/map-stream/index.js:85:7\n    at handleOutput (/Users/pivotal/workspace/pivotal-ui/node_modules/gulp-sass/index.js:103:3)\n    at opts.success (/Users/pivotal/workspace/pivotal-ui/node_modules/gulp-sass/index.js:63:7)\n    at options.success (/Users/pivotal/workspace/pivotal-ui/node_modules/node-sass/lib/index.js:163:7)\n. @ai bummer that it's an issue with gulp-cssnext, but thanks so much for all your help! :smiley: \n. ",
    "gpoitch": "Hit this today too. Here's the stack trace with 4.1.16\nUse process(css).then(cb) to work with async plugins\nError: Use process(css).then(cb) to work with async plugins\n    at LazyResult.sync (/Users/garth/dev/web/bustle/node_modules/ember-cli-cssnext/node_modules/broccoli-cssnext-single/node_modules/cssnext/node_modules/postcss/lib/lazy-result.js:185:23)\n    at LazyResult.stringify (/Users/garth/dev/web/bustle/node_modules/ember-cli-cssnext/node_modules/broccoli-cssnext-single/node_modules/cssnext/node_modules/postcss/lib/lazy-result.js:214:14)\n    at LazyResult.get (/Users/garth/dev/web/bustle/node_modules/ember-cli-cssnext/node_modules/broccoli-cssnext-single/node_modules/cssnext/node_modules/postcss/lib/lazy-result.js:241:25)\n    at CssnextCompiler.updateCache (/Users/garth/dev/web/bustle/node_modules/ember-cli-cssnext/node_modules/broccoli-cssnext-single/index.js:49:13)\n    at /Users/garth/dev/web/bustle/node_modules/ember-cli-cssnext/node_modules/broccoli-cssnext-single/node_modules/broccoli-caching-writer/index.js:96:34\n    at lib$rsvp$$internal$$tryCatch (/Users/garth/dev/web/bustle/node_modules/ember-cli-cssnext/node_modules/broccoli-cssnext-single/node_modules/rsvp/dist/rsvp.js:489:16)\n    at lib$rsvp$$internal$$invokeCallback (/Users/garth/dev/web/bustle/node_modules/ember-cli-cssnext/node_modules/broccoli-cssnext-single/node_modules/rsvp/dist/rsvp.js:501:17)\n    at lib$rsvp$$internal$$publish (/Users/garth/dev/web/bustle/node_modules/ember-cli-cssnext/node_modules/broccoli-cssnext-single/node_modules/rsvp/dist/rsvp.js:472:11)\n    at lib$rsvp$asap$$flush (/Users/garth/dev/web/bustle/node_modules/ember-cli-cssnext/node_modules/broccoli-cssnext-single/node_modules/rsvp/dist/rsvp.js:1290:9)\n    at process._tickCallback (node.js:355:11)\n. ",
    "TCotton": "As an NPM module? Sounds like a nice little project to get my teeth into. Thanks for responding so quickly\n. So I have wrote one! https://github.com/TCotton/postcss-animations You are right, it was quite easy. Do you have any time to review the code Andrey?\n. ",
    "f": "You're right! I will push another one! Thanks! :)\n. ",
    "pleunv": "Webpack might be a solution but I don't think you should force specific buildtools upon your userbase. \nI personally like browserify's transform field approach, which lets you specify a list of transforms in package.json that need to be performed on your code whenever you do a require() or import of that particular module. That way each module exposes everything the host project needs to know in order to correctly compile it.\nIn browserify it looks like this: \njson\n{\n  \"name\": \"mypkg\",\n  \"version\": \"1.2.3\",\n  \"browserify\": {\n    \"transform\": [ \"brfs\", \"babelify\" ]\n  }\n}\nI dont have any hands-on experience with PostCSS (yet, currently looking at options to replace Sass and PostCSS looks very promising - assuming it can tackle all issues we currently experience with Sass :) but in this case it could contain a list of plugins that need to be loaded whenever (a css file from) this module is imported, e.g.:\njson\n{\n  \"name\": \"mypkg\",\n  \"version\": \"1.2.3\",\n  \"postcss\": {\n    \"main\": \"src/styles/main.pcss\",\n    \"plugins\": [ \"mixins\", \"nested\", \"simple-vars\" ]\n  }\n}\nThis approach would be useful for use-cases where src files get exported for further modification/theming/recompilation in host projects, which I think happens pretty frequently.\nI guess this is partly what postcss-import does, however this moves the plugin configuration to the module (where I think it belongs), instead of having to configure them all inside of the host project, which requires knowledge of each and every module you want to import.\n. ",
    "awenate": "I've been trying to use PostCSS with web components and it's not easy. The main issue I've run into is that web components use one file to store css, html and js. The only viable way I can think of is to use a build tool to convert all your css, html and js into one file. It's not pretty or easy to work with, but only solution I can think of. Would love to see example where someone has set this up. At the moment I've only got it to work with sass.\n. ",
    "nicksheffield": "Yeah the syntax difference is why I thought mine was worthwhile. I think it makes more sense to leave the native rgba() the way it is, and to have a separate syntax for mixing hex and opacity.\n. Ah I hadn't seen this, and yeah it does what my plugin does and far more\n. ",
    "cakeinpanic": "@moOx I've tried yo use postcss-url for our project, and also have done PR.\nAt that moment the only solution to rebase assets correctly was using callback. Its size was about 90% of postcss-url's size. I thought your copy method worked correctly for some cases(but not for mine), so I decided to write my own plugin for my purposes.\nAs I can see, copy method was refactored, maybe it works properly now, but i've already developed my own at that point.\nBy now, there are two options different from postcss-url: for assetsPath relative to .css and for assets renaming. And postcss-assets-rebase allows to and from options to be equal\n. @MoOx if you want, we can try to merge our plugins, no problem. \n. I've checked your test repo, thank you, @tinchoz49 \nOk, so by now there are some differences between our plugins. \nIn postcss-assets-rebase\n- duplicated assets renaming\n- assets folder structure saving. in postcss-url asset is copied with its folder structure. so if it has ten folders from .css, all ten folders would be created\n- works ok when from === to (honestly, for our project it's the most common case)\nIn postcss-url\n- hash\n- base64 \n- custom transform function\n- basePath\nFor now I can say that our plugin fits better for postprocessing files generated by stylus(or LESS, or another preprocessor)\n@ai what do you think, is it still count as duplicate?\n. sunday evening is ok\n. ",
    "tinchoz49": "hi @cakeinpanic as you said I did a rewrite of the copy method, here you can see the repo where i'm testing it: https://github.com/tinchoz49/test-postcss-copy\n. Hi people, I'm the author of postcss-copy. I think we can avoid the plugin duplication (postcss-copy-assets is quite similar) working together. \nI took some feedback from some postcss-url issues like the async one and custom hash function. The plugin works with the async API, has support for customizable hash function, templates for setting up relative paths e.g., assets/[path]/[name].[ext] or maybe   [path]/[name].[ext] or  [path]/[hash].[ext], etc and is well tested.\nSo there is some work on it and like I said before maybe we can unify efforts. \n. ",
    "Guria": "https://github.com/posthtml/posthtml from the protein team\n. @TrySound You're wrong. peerDependencies wasn't deprecated:\nhttps://docs.npmjs.com/files/package.json#peerdependencies\nhttps://github.com/npm/npm/issues/6565#issuecomment-74971689\n. ",
    "7ammer": "This is awesome news! :D\n. ",
    "joshdrink": "@ai Not sure if this is relevant to the conversation, but the biggest issue I've run into with syntax highlighting is cmd+/ for commenting out code. Both Sublime and Atom handle the comment styles (// vs /* */) based on the syntax highlighting. Does anyone have a useful fix for this?\n. @azat-io You sir, are a gem. This is very much appreciated!\n. @ai \n\n. @ai That I knew, but they haven't updated to 3.0 yet and therefore its not compatible with PostCSS 5.0 :(\n. @ai it's the includes variable in the gulpfile.js\n. @ai I tried the clean install, same error. I'll try updating postcss-import explicitly.\n. @ai Perfect! Everything is working. Thanks man, I appreciate the hasty help!\n. @ben-eb No worries, using it outside PostCSS for now is perfectly fine with me until the update comes out! :)\n. ",
    "ilyashubin": "Syntax highlighter for PostCSS would be cool. I think basically custom at-rules + cusom properties as native + nesting.\n. ",
    "azat-io": "Syntax highlighting for Atom: https://github.com/azat-io/atom-language-postcss\n. The first suggestion is better. The second suggestion is not supported in any text editor and looks difficult for reading CSS code.\n. @ai Hmm.. Don't know. Maybe it's just my habit. But in my personal opinion the first suggestion looks better for my code understanding. The second benefit of the first suggestion is compact comments. :smiley: \n. Best suggestion @talgautb \n. What about SugarSS extension?\n. @ai Lol :smile: \n. \u0421\u0443\u043f\u0435\u0440. )\n. @GitScrum \u041a\u0430\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f nano \u0438 postcss? \u0411\u044b\u043b\u0430 \u0442\u0430\u043a\u0430\u044f \u0436\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430.\n. @GitScrum \u0423 \u043c\u0435\u043d\u044f \u0432\u043e\u0442 \u0442\u0430\u043a \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442:\n\"cssnext\": \"^1.8.4\",\n\"gulp-postcss\": \"^6.0.0\",\n\"postcss\": \"^5.0.5\"\n\u0412\u043e\u043f\u0440\u043e\u0441 \u0431\u044b\u043b \u0442\u0443\u0442.\n. ",
    "johnie": " \nThanks! :facepunch: \n. ",
    "benjaminfunk": "problem is in another module\n. ",
    "maximkoretskiy": "=)\n. Done https://github.com/maximkoretskiy/postcss-all-unset\n.  thank you, I just closed plugin request\n. - release dates\n- unreleased secteon\n- document title (optionaly)\n- article about semver (optionaly)\n. Changelog is a project history. And it`s not too hard to write it now.\nFor example, dates can be useful when You detect some problems related with dependency version change and You can't remember the date when version changed.\n. @ai  Do You wanted to say \"I agree about ~~date~~title and SemVer mention\"?\nAnd I missed your idea about the most important section.\nUsualy it looks this way\n5.0.15 - 2016.02.11\n\nFix Node#clone() on null value somewhere in node.\n\n5.0.14 - 2016.02.05\n\nAllow to use PostCSS in webpack bundle without JSON loader.\n\n5.0.13  - 2016.02.01\n\nFix index and word options in Warning#toString (by Bogdan Chadkin).\nFix input source content loading in errors.\nFix map options on using LazyResult as input CSS.\n100% test coverage.\nUse Babel 6.\n. @ai what formatting do you prefer for dates?\n\n@timaschew It is not a part of git project. We can't search in 'releases'. \nYou can read arguments to use this changelog format here http://keepachangelog.com/ru/\n. It is format. I asked You about formatting.\nExample:\n5.0.15\n2016-02-11\n- Fix Node#clone() on null value somewhere in node.\n. Ok\n. ",
    "sebdeckers": "Hmm ... Why is AppVeyor failing from a small README change? /cc @ai Do you have any idea?\n. ",
    "cie": "I haven't updated the Readme for a long time, but I could even do the first release now. If you want to look into the code, you should look at the devel branch.\nVery briefly, FunCSS works like this:\n- Take source code, parse with CSS parser, make AST\n- Interpret AST to create a semantical representation. This includes:\n  - inserting CSS declarations into tables.\n  - parsing and interpreting function definitions\n  - type-inferring property values and turning them into a data flow graph, while substituting custom functions with their definitions\n- Optimize \n- Convert the semantical representation to an abstract tree of JavaScript code. Property value dataflow graphs are converted to JavaScript code fragments that return CSS code.\n- Optimize\n- Serialize to JS code.\n- Beautify\n- Run browserify to include runtime libs and dependencies\nSo all the output of FunCSS is only JavaScript code that runs on the client and injects CSS code into the site.\nCurrently FunCSS doesn't have source maps, so that's also something that I could make good use of from PostCSS.\nAn important difference that I see is that FunCSS is a statically typed language, with its pros and cons. To work properly, it must know the type of every expression to work properly, and also the allowed values of every usable CSS property. As a consequence, however, it will not compile counter-increment: rebeccapurple to an rgb representation (which cssnext does), because it knows that counter-increment is of type <ident>, not <color>.\nFunCSS treats function definitions as type extensions. E.g. a function definition with the signature myfunction(x:number):color is interpreted as an extension of the <color> type with new possible values, myfunction(...) where ... is a number. So just as scale(0.5) is a possible value of <transform>, myfunction(0.5) will be a possible value of <color>. But myfunction(0.5) will be replaced with its function body,  while scale(0.5) will be left as it is.\n. So yes, I also thought about dropping my own parser, and implementing FunCSS as a PostCSS plugin pack. Thanks for your help in advance, and yes, let's think about how this could be made and what changes are required in the core.\nA major question to decide: How JavaScript output should be organized?\n1. PostCSS core should handle JavaScript output?\n2. FunCSS should have a custom way to handle JavaScript output?\n3. We should create a standard postcss-javascript-output plugin that handles JavaScript output, and FunCSS should depend on this.\nFor first sight, I prefer 3.\n. Now I updated the Readme and merged it to master.\n. Cool! Thanks!\n. I've made an initial version of postcss-javascript-output. Can you have a look at it? It resulted really complicated. (Just kidding:)\n. I suppose we will need to somehow add support for other environments too (Gulp, CLI, Grunt etc)\n. :) Thanks guys for this fervent discussion :) And thanks @ai for eagerly defending my project\nLet me also give my points:\n- React's in-JS styles is a beautiful solution, it solves many problems from the how-to-combine-CSS-and-JS-data topic.  However, React is for software engineers. I want a solution for designers who know CSS and does not know JavaScript.\n- JavaScript is a powerful language. Some say it's a bit ugly, but it can do anything. CSS is a beautiful language, with few power. But it has some powerful features that are not found in JavaScript: selectors, percentage values, physical dimensions, cascading rules, automatic updates when the DOM changes, automatically handled transitions. I would like to (ab)use these.\n- CSS with its new features (variables, new media queries, custom media queries, custom selectors...) is a beautiful language with somewhat more power. And cssnext brings this to present CSS! Cool! I want these too.\n- However, I also want custom selectors that are defined as a JS expression (e.g. to polyfill :out-of-range), custom functions defined in JavaScript (e.g. to polyfill attr()), custom units defined in JS (vmax), custom media queries in JS, etc, custom easings in JS, etc. So this is FunCSS.\n- But I don't only want to use this technology to polyfill CSS features, but to actually program in CSS. The goal of FunCSS want to program interactive animations in a nice declarative style, with much less code than the same with JS. I don't really care visitors with disabled JS.\n- I would like FunCSS to be part of the PostCSS ecosystem somehow. One option is that FunCSS is a plugin that PostCSS users can use. The other option, which @ai just mentioned, is that FunCSS uses PostCSS as a tool  -- and provide a means for the users to add other PostCSS plugins. I don't think I want FunCSS to be one language, like Less/Sass/SCSS/Stylus are, instead, to be configurable to the user's need, like PostCSS plugin packs are. And I would like the API to be similar to PostCSS. Maybe...\nfuncss([ cssnext() ]).process(css, ...).then(function(result) {\n      fs.writeFileSync('app.css', result.css);\n      fs.writeFileSync('app.js', result.js);\n  });\nBut then JS output will be proprietary of FunCSS, and no other PostCSS plugins will be able to use it. Then the vmin, in-range and attr polyfills will either have their own mechanism for JS output, which is not good, or they will be funcss plugins, which is good. The other option is what we have talked about, to have a postCSS way of outputting JS, and then these polyfills need not depend on FunCSS.\n. @MoOx as I'm thinking about this, I start to get your point that this is dirty. Indeed, this approach (creating a plugin for js output) can encourage simple but bad solutions. Generating \"good\" JavaScript code (interoperable, unintrusive, reactive to changes in the DOM, optimized, well minifiable, dependencies handled) requires a lot of logic (and magic). Much of this kind of logic is and will be implemented in FunCSS, and maybe we should not provide an easy way to avoid it.\nSo @ai  maybe I would vote for FunCSS to be the recommended tool when a postcss plugin wants to output JS, at least for now. If later it proves to be useful, you can migrate a part of the JS output handling logic to PostCSS, and make it official. But now I couldn't really tell what would be a good subset of FunCSS that might be useful for others too. Certainly not concatenating fragments together :) about which Maxime is rightly concerned.\n. ok, thx :)\n. :) Thanks!\n. ",
    "brianzelip": "+1 to a postcss cli. A workflow based primarily around package.json is lean and desirable.\nps - I'm just a user. Thanks very much for all of the work you devs do on Postcss and cssnext.\n. @ai didn't know there was one, thanks. Now I'm wondering about codemakerlive's question above asking what difference is being offered here.\nI use cssnext quite a bit via npm scripts config, and know of other projects that do. I landed here following a recent tweet from MoOx, and began reading about the possible end of life for cssnext. This is why I gave a +1 to MoOx's thinking.\n. ",
    "cesarandreu": "Sorta related: would it be feasible to allow configuring postcss through a package.json field, instead of having to add a .postcssrc file? Both babel and standard let me do this, and lots of other projects allow it as well. I don't want my project root to continue growing, especially when it's a configuration file that I'll probably setup once and and probably never touch again.\n. ",
    "ellinokon": "+1 to making this happen.\nI personally don't want to use Grunt/Gulp for smaller projects where I am only concerned with using Postcss, and maybe some engine for HTML templates. \nActually: I even let bigger projects live using only npm run some-task, because most modules got awesome CLI-tools already. No need to wrap them in just-another-task-runner.\n. @ai Thanks! Didn't know about that tool, and must have skipped over it when reading through this issue.\n. ",
    "michael-ciniawsky": "@ai First draft online, when you find the time please take a look into it.\n- PostCSS Autoload Proposal\nImplementation gets constantly updated but i need to test it first ;). \nMaybe until tomorrow the first prototype is working.\n. > 1.should give a way to do custom require() in postcss.js. For example require('./my-custom-plugin')\n@ ai Please give a short example\nUpdate: \nPostCSS Autoload Proposal\n- loader.es6 first draft\n. js\n{\n  options: {}\n  plugins: {}\n  extend: {\n    plugin: <keyword> // like 'default' with that loads the plugin with no options/default options\n  }\n}\nThe require() generally happens in loader.es6 \nOr is there a nessecary to require them in the js, then maybe ?\njs\n{\n  options: {}\n  plugins: {}\n  extend: [require('extend'), require('extend2')] // concatenated later with the scaffolded plugins array\n}\n. Extend JSON\njson\n{\n  \"options\": {},\n  \"plugins\": {},\n  \"extend\": {\n     \"plugin\": \"default\"\n  }\n}\nExtend JS\njs\n{\n  options: {}\n  plugins: {}\n  extend: [require('extend'), require('extend2')]\nExtend orde/position in plugins array?\njs\n=> this.plugins = [import(), /*1*/ ...extend , plugin2(), ..., /*2*/ ...extend, minifiers()]\n\nmaybe we should use cosmiconfig?\n\n\ud83d\udc4d  i have that under consideraion already, but never used it before, when i make the PR i try to provide loader-cosmic.es6 && loader.es6 see wants perfs better / is less bloated\n. js\n  // Filter by type \nplugins: [\n  { plugin1: {} },  // Type =>  [Object] \n  require('plugin')(), // Type => [Function],\n  { plugin3: {} }  \n]\n?\nusage of an array as postcss.plugins value in general is a nice idea imho\n. > I think too that we could move all options out of options key. I like short syntax \ud83d\ude0a\njs\npostcss : {\n  // no options \n  plugins: {}\n}\n?, then better\njs\npostcss: { /* plugins  */ }\n// or array if requires included \npostcss: [ /* plugins */ ]\n. package.json is the default and separate config when passed to postcss takes higher order (specifity) (reason is it is closer to  the files), all options in the separate config override the defaults in pkg.postcss o scaffolding \nExample\nStructure\ntxt\n|---styles\n|     |---home\n|     |     |---imports\n|     |     |---index.css\n|     |     |---postcss.json\n|     |---blog\n|           |---imports\n|           |---index.css\n|           |---postcss.js\n|---package.json\npackage.json\njson\n\"postcss\": {\n  \"import\": {},\n  \"bem\": {}\n}\nstyles/home/postcss.json\njson\n{\n   \"import\": {\"path\": \"./styles/home/imports\", \"encoding\": \"utf8\"},\n   \"bem\": {\"style\": \"suit\"}\n}\njs\npostcss('./styles/home/postcss.json').process... \nthis.plugins = [import{path: \"./styles/home/imports\", \"encoding\": \"utf8\" }, bem({style: 'suit'})]\nstyles/blog/postcss.js\njs\n module.exports = [\n  { import: {path: \"./styles/blog/imports\", encoding: \"utf8\"}},\n  { bem : { style: \"bem\" }},\n  require('postcss-nested')()\n]\njs\npostcss('./styles/blog/postcss.json').process... \nthis.plugins = [import{ path: \"./styles/blog/imports\", encoding: \"utf8\" }, bem({style: 'bem'}, nested()]\nCLI\n// Default\nbash\n$postcss -i index.css -o ouput.css\n// Home\n``` bash\ncwd() => ./styles/home\n$ postcss --config postcss.json -i index.css -o output.css\n```\n// Blog\n``` bash\ncwd() => ./styles/blog\n$ postcss --config postcss.js -i index.css -o output.css\n```\nThe example config is not well defined, its more then if you have additional needs you can declare that in a separate config (like different import paths, an additional plugin), pkg.json should be the basis in every project e.g the bem style is a sure candidate for pkg.json\nEnhancement for CLI Subsections (like yeoman-subgenerators)\n// Default\n``` bash\ncwd() => ./\n$postcss -i index.css -o ouput.css\n```\n// Home\n``` bash\ncwd() => ./\n$ postcss styles:home -i index.css -o output.css # looks for config in styles/home\n```\n// Blog\n``` bash\ncwd() => ./\n$ postcss styles:blog -i index.css -o output.css # looks for config in styles/blog\n```\nGulpJS\n``` js\n// Default \ngulp.task('css', () => {\n gulp.src(src)\n  .pipe(postcss())\n  .pipe(dest)\n})\n// Home \ngulp.task('css:home', () => {\n gulp.src(src/home)\n  .pipe(postcss('./styles/home/postcss.json'))\n  .pipe(dest/home)\n})\n// Blog\ngulp.task('css:blog', () => {\n gulp.src(src/blog)\n  .pipe(postcss('./styles/blog/postcss.js'))\n  .pipe(dest/blog)\n})\n```\n. > Don't plugins need to be an array because order matters? \u201cPlugin order is determined by declaration in plugins section.\u201d \u2014 but in JS property order on simple objects is not guaranteed.\n@davidtheclark \njs\nconst obj = {\n  plugin1: '1',\n  plugin2: '2',\n  plugin3: '3'\n}\nconsole.log(Object.keys(obj)) => ['plugin1', 'plugin2', 'plugin3']\nFrom MDN:\nObject.keys() returns an array whose elements are strings corresponding to the enumerable properties found directly upon object. The ordering of the properties is the same as that given by looping over the properties of the object manually.\n\ni have that under consideraion already, but never used it before, when i make the PR i try to provide loader-cosmic.es6 && loader.es6 see wants perfs better / is less bloated\n\nThere's absolutly nothing wrong with cosmiconfig, don't get me wrong, i'm just avoid getting started by requiring x modules from the start, if it's not to complex :)\n@ai \nExample Config\njs\nconst postcss = {\n  plugin1: null // = require('plugin')() // no options just require\n  plugin2:  {options: options}\n  extend:  './styles/postcss.json/'  // when postcss.json is passed to postcss('./styles/..'), \n  plugin3:  {options: options},     // then additional plugins in config will start at this position\n  extend:  './styles/home/postcss.json/' // styles/home config will take place here when given as arg\n}\n? \n. > sorry, but I agree too that we need to use shared library for config. It will be much better for ecosystem to have same config behavior with Stylelint.\n? :)\n\nAlso I think object is OK, all important JS implementations save keys order. And object syntax will be shorted.\n\nBoth is possible, but the Array is used when you set your plugins manually in the file and pass the array e.g\n``` js\n// Manual\nconst postcss = require('postcss')\nconst plugin = require('plugin')\nconst plugin = require('plugin')\npostcss([plugin(), plugin()])....\n// Auto\nconst postcss = require('postcss')\nconst plugins = require('./postcss.js') // with array \npostcss(plugins).... // Error \n```\nThe Array must then be additionaly checked for validity (all elements a funtions, needs scaffolding etc.), should be avoided imho. For Backwards compability ensurance and its a possible 'Source of errors' for all configs as they are today, because changes to the current plugin loading behaviour would be nessecary.\nExtend uses the pkg.config overrides options (merge) when nessecary, but if in the config someone sets an additional plugin, which is not in the pkg then the position of that plugin would be at the point where the extend key is. The value checks it's the right config.\n. > sorry, but I agree too that we need to use shared library for config. It will be much better for ecosystem to have same config behavior with Stylelint.\n? :)\nIf you mean in the way, that the config file (postcss.js / postcss.json) should be like e.g stylelint-config-standard and the pkg.json part can be left out completely, then why not pkg.jso === postcss.json when in root\njs\n// no args => lookup pkg.postcss (if !pkg.postcss) => postcss.js config in root ? load : throw(err) \npostcss()....\n. @michael-ciniawsky sorry, I completly miss this thing =^_^=\nI write a manifest for all configuration options with examples in the proposal :) \nkk i understand, yes if you 'freeze' how the design should look like for this point, then cosmiconfig is used ;). The naming convention will be derived from cosmiconfig then e.g postcss.js => postcss.config.js etc. \nDo you agree how the plugin section looks like at the moment ? \njs\n{\n  plugin1:  null,\n  plugin2:  {/* options */}, \n  'extend/use':  'path/to/configForExtension'  // e.g ./styles/home\n}\n. > other thing looks nice, but maybe we should update proposal to be sure that we understand each other correctly\nyeap doing it right now :) \ntxt\n|\u2013styles\n|      |\u2013index.css\n|      |\u2013index-custom.css\n|      |\u2013postcss.js\n|\n|\u2013package.json\npkg.json\njson\n\"postcss\": {\n  \"plugin1\": \"...\",\n  \"extend\": \"./styles/\",\n  \"plugin2\": \"...\"\n/styles/postcss.js\njs\nmodule.exports = {\n custom1:  \u2018...\u2018\n}\nbash\n$ postcss -d styles -i index.css -o dest.css # => [plugin1(), plugin2()]\nbash\n$ postcss -dc styles -i index-custom.css -o dest-custom.css # => [plugin1(), custom1(), plugin2()]\nWe could leave that, i thought there is a necessity for local extension option\nWhere index-custom.css needs a different/ additional setup. Configs in subdirs can be used for that propose, one could named that local instead of extend \n. its about shortening the custom configs, they override everything in pkg.json (the default config or root config) when specified otherwise just use whats set there, we could made an option like root: null or default: null to ignore all defaults if unnecessary\n. both :) the extend in root config given the path of the local config is the index placeholder (entry point), from where the plugins from local config(s) (one extend per config) will be push in. \n. in local configs the extend option can take to values extend:  path/of/config  # root by default and extend: false # use just this config\n. > But I just remembered important thing. We want to make PostCSS order-free in next 6.0 release. So plugin order is not really important.\nI didn't know about that, awesome that eases things alot. \ud83d\udc4d \nWell, then the placeholding part lived short and partied hard :D\nAre there some resources / discussions how this works, it's off topic but maybe of use for PostHTML (by the way there should by more 'getting together' anyways imho) :)\n. +1 for making this working the rigth way from the start no need to rush. \n. > I'm unclear on where you two have settled\n@davidtheclark You're not alone i think we currently settled nowhere :) discussion is open improve until all concerns are rendered silent and best solution is found.\n\nI have not yet had input from people doing other projects who want additional features in cosmiconfig, so the extra features that stylelint needed I built into stylelint. \n\nI think same should be done by PostCSS, it's a specific issue. But not my piece of the pie :)\n\nHere is the code that implements extends in stylelint: https://github.com/stylelint/stylelint/blob/master/src/buildConfig.js#L137.\n\n\ud83d\udc4d \n. > @voischev does PostHTML has some standard config? Are you interesting of having same config principles with PostCSS? What you think about out latest idea and that placeholders?\nNope :( sadly, it's currently rejected, to keep the core simple #141. But maybe could be reconsidered @voischev :D? \n\nBut I am really think that we should not implement it right now. We should have simple solution first and extend it on real feedback.\n\n:+1 Load various common configs from root to start with, extending or cascading is a progressive enhancement.\njs\nmodule.exports = {\n  extend: true/false // true extend root config on given position, false just use this config ignore root\n  plugins: {}\n}\n@use plugin for plugins local to just one file would also be an option, maybe simpler, and in root you set the options for that \n``` css\n@use plugin // @extend plugin // @local plugin\n.css {}\n```\ncommon config*\njs\nmodule.exports = {\n  plugin1: null,\n  use: { plugin: {options} }, // use when @use plugin in file found\n  plugin2: null\n}\njs\n                                       // main chain\npostcss().process..... => [plugin1(), use(),      plugin2()]   => result.css\n                                        |              |\n                            //use chain |              |\n                            postcss([ use1() ]). process...\nLike spawning child_processes, x in y subdir declared postcss.config.js files will be avoided => one place where all config takes place\n. yeap :) its was just an attempt for @-rule-syntax extends as second option to additional postcss.config.js files. But let's focus on the common config first, before i scratch your nerves to dust completely :+1 \ud83d\udc6f \n. update Autoload Plugins Proposal\n. As i understand autoprefixer is based on postcss and can be used standalone or as 'plugin' in your plugin chain? Depends on how you like to use it, if in config no plugins.key (eg. plugins.autoprefixer, plugins.cssnext) is set nothing will be loaded. You can use unprefixed names which will be reprefixed when inclusion in deps will be checked or you leave them prefixed from the start.\n``` js\n// Config\n// {\n//    import: {path: './css/, endcoding: 'utf8'},\n//    bem: {style: 'bem'},\n//    cssnano: null\n// }\n//\n// deps = pkg.dependencies\n// devDeps = pkg.devDependencies\n//.. somewhere in load.es6\nfunction prefix (plugin) {\n   return postcss-${plugin}\n}\nlet plugins = []\nObject.keys(plugins).forEach((key) => {\n    // Filter for prefixed plugins (e.g postcss-bem, postcss-cssnext) in pkg.deps/devDeps\n    if (deps[prefix(key)] || devDeps[prefix(key)]) {\n      plugins.push(new Plugin(prefix(key), options[key])) \n  // =>  [ \n          require('postcss-import')({path: './css/', encoding: 'utf8'}), \n          require('postcss-bem')({style: 'bem'})\n         ]\n}\n\n// Filter for unprefixed plugins (e.g autoprefixer, cssnext cssnano) in pkg.deps/devDeps\nif (deps[key] || devDeps[key]) {\n  plugins.push(new Plugin(key, options[key]))\n\n  // =>  [ \n          require('postcss-import')({path: './css/', encoding: 'utf8'}), \n          require('postcss-bem')({style: 'bem'}), \n          require('cssnano')() \n         ]\n}\n\n})\n  return plugins\n``\n. to write keys likebem: nullinstead of\"postcss-bem\": nullin your config. In the deps the name is\"postcss-bem\": x.y.zjustbem` would not be found in the deps on checking.\njs\n// keys coming from config => ['import', 'bem']\n// prefix for deps check\nfunction prefix (key) {\n   return `postcss-${key}`\n  // => ['postcss-import', 'postcss-bem']\n}\nIf the plugins.key is prefixed 'postcss-bem': null the match would be found during the unprefix check.\nbut writing 'postcss-xxx' : null everytime is redundant chore work => automate that away :)\njs\n{\n  \"parser\": \"sugarss\",\n  \"plugins\": {\n    \"inline-svg\": null,\n    \"assets\": null,\n    \"cssnext\": null    // would match either/both cssnext or/and postcss-cssnext \n                       // when both are used with different options, for whatever reason ,  \n                       // then just set 2 different keys\n                       // => 'postcss-next': options,\n                       //    'cssnext':  options\n  }\n}\n\n\nWhy you put plugins to the root of config? Where we will put options like syntax or map? What do you think about:\n\n\njs\n{\n  \"parser\": \"sugarss\",\n  \"plugins\": {\n    \"postcss-inline-svg\": null,\n    \"postcss-assets\": null,\n    \"postcss-cssnext\": null\n  }\n}\n? :D i thought the options should not be in the config, could be there of course, i removed that from a previous version of the propsal\n. > 1. What if user have cssnext and postcss-cssnext is project (legacy code and new code)?\nBoth would work, depends on how it's listed in the config and installed as dependency\n\n2 assets could by in package.json too. Not as PostCSS plugin, but as some npm library. So that code will not save us from name conflicts.\n\nWhen prefixed check matches => don't check unprefixed. \nBut...you're right, i'm 'afraid' that's the show stopper :)\n\n\nIf I find some new plugin in config, I can\u2019t just copy name to Google. I need to use complicated algorithm with package.json dependencies to understand is is just assets or it will be postcss-assets. \nWith assets we need more text in docs. New user will not understand how it works. It can\u2019t change/read config without reading a docs about config.\n\n\nMaybe, for the future => no google searching necessary at all \ud83d\udc4d :) but thats a different topic\nbash\n$ postcss  --help | --usage  # lists PostCSS README from npm, or something like that\nbash\n$ postcss plugin --help | --usage  # lists Plugin README from npm, or something like that\n\n\nThis autoprefixing algorithm is too complicated. Simple things are always better than complicated.\n\n\ni will by no means insist on this, we can leave it. It's not that killer feature anyway.\n. yeap, can i assume we settle on this now for the moment, \nCosmiconfig Config Names\n-package.json\n-postcssrc.json \n-postcss.config.js\nConfig Style\njs\n{\n  parser: 'whatever'\n  map: 'however'\n  plugins: {\n    'postcss-plugin': null\n    'postcss-plugin2': {/* options */}\n    'cssnext': {}\n}\n? :) i will develop it here here and here as plugins first, when working see if,how,when to implement in postcss . \ud83d\udc4d?\n. yeap exactly :). lf not directly into postcss core for the moment the repos will transfered to the org when ready and you or someone from postcss can publish them to npm.\nresult should look like this:\n``` js\nimport postcss from 'postcss'\nimport plugins from 'postcss-load-plugins'\nimport options from 'postcss-load-options'\n// maybe import { plugins, options } from 'postcss-load-config' but let's discuss that later :)\npostcss(plugins()).process(css, options())...\n```\nkk i'm back here when i actually can show something.\nThank you for your the time and patience sketching this out \ud83d\udc4d\n. postcss-load-plugins Plugins only\npostcss-load-options Options only\nAvailable on npm for testing:\npostcss-load-config Plugins && Options\nCurrently all alpha,  e.g the return of a promise is subject to change in my opinion.\n``` js\nconst postcss = require('postcss')\nconst postcssrc = require('postcss-load-config')\npostcssrc().then(( { plugins, options } ) => {\n  postcss(plugins)\n   .process(css, options)\n   .then((result) => console.log(result.css))\n})\n```\n. @ai abd require JS === no js files as conf? :)\n. Sure i just wanted to ask first if there are general concerns of yours about considering this as core functionality(e.g should not be in core). I played around with postcss-load-plugins, but is unfinished at the moment, but before pollishing that module i could also work directly on it and send PR, updating while there is discussion about it. Would it be ok to first draft something out and implement and then present/ (start discussion about) it to the community for giving feedback?\n. >  \"and require() in JS config\"\nCan you give a short example? :)\n. I read partials of that issue but there was somehting with an event API mentioned and to be honest i don't know how something like that could be working :). I look that one up to get an insight.\n. :+1 ok looked over it, the idea and my attempts of implementation are similiar, i currently draft out a proposal which will give an in-depth overview all possibilities for the moment and upload it, then start implementing while discussion gets on track. i call out again later today, when published.\n. Ahh:) ok i made a note about this, but was not sure to go this far, nevertheless it makes sense to make the naming clear.\nWhen you have time please take a look at this section of the proposal, maybe thats to much:\nnpm config\n``` bash\n$ npm config | -c \nUsage:\nnpm config set  \nnpm config get []\nnpm config delete \nnpm config list\nnpm config edit\nnpm set  \nnpm get []\n```\nbash\n$ npm config set app:postcss:[options|plugins]:key value\nExample\nbash\n$ npm config set app:postcss:options:parser postcss-less\n``` bash\n$ npm config list \n; userconfig /Users/User/.npmrc\napp:postcss:options:parser = \"postcss-less\"\n```\njson\n\"scripts\": {\n \"build:css\": \"postcss-cli $npm_package_config_postcss\"\n}\nbash\nnpm run build:css  #use postcss-less as parser\nDefaults\njson\n\"name\": \"app\"\n\"config\": {\n  \"postcss\": {\n    \"options\": {\n      \"parser\": \"postcss-scss\",\n      \"stringifier\": \"whatever\",\n      \"from\": \"input.css\",\n      \"to\": \"out.css\",\n      \"map\": { \"inline\": false },\n    },\n    \"plugins\": {\n      \"plugin1\": {},\n      \"plugin2\": {},\n      \"pluginHyphened3\": {}\n    }\n  }\n}\nAt the moment it's about the location in pkg.json, that's the second option maybe usful for cli and middlewares when task based overriding would be beneficial. Maybe better to leave that out...\n. yes we better leave that it's confusing and not that useful...:) kk i finish the proposal and then head over to #477 contents will be:\n- Setup (pkg.json, postcss.js | postcss.json)\n- Implementation Draft 1\n- Usage \n. i have 2 questions:\n- Where are the args  getting pass to ....process(arg) in postcss?  lib/postcss.es6 ? lib/process.es6? :)\n  Related to pkg.postcss.options (parser, from, to, map)\n- The location of tests related to plugins (postcss) and options (process)\n  && and if it's ok to write mine with ava?\n. @ai, @texastoland hi, sry for the delay, problems of my ISP, connection was down until now...\nIf you want to help me out , please check out these repos:\nCosmiconfig\nUsed for loading the various possible config styles\nPostCSS Load Config\nThe Code for each loading propose is splitted in the following submodules\n- PostCSS Load Options\n- PostCSS Load Plugins \n  @TrySound can you please free the name 'postcss-load-plugins' for that module on npm,\n  it's seems there is no corresponding module to it anymore? \n- PostCSS Load Presets\njs\nconst config = Object.entries(require(configPath))\n  .filter(([key, options]) => options !== false)\n  .map(([key, options]) => [require(\"postcss-\" + kebabCase(key)), options])\n  .map(([plugin, options]) => options === true ? plugin : plugin(options))\nYour lib code goes in the direction, i'm currently playing around with 'presets', you bundle your plugins in a defined way, where each plugin has its own plugin.namespace e.g 'postcss-bem' => 'bem' inspired/derived by how PreCSS does it behind the scenes.\n``` js\nconst plugins = [\n {\n   plugin: require('postcss-plugin1'),\n   namespace: 'plugin1', (can be anything, -postcss-prefix recommended)\n   defaults: {}\n },\n {\n   plugin: require('postcss-plugin2'),\n   namespace: 'plugin2',\n   defaults: {}\n },\n {\n   plugin: require('postcss-plugin3-hyphened'),\n   namespace: 'plugin3Hyphened', (if hyphened name, kebabed recommended)\n   defaults: {}\n },\n  ....,\n  ....,\n]\nexport default plugins\n```\n``` js\nimport plugins from './plugins'\nexport default function (options) {\n  options = options || {}\nlet preset = []\nplugins.forEach((plugin) => {\n    let namespaceOptions = plugin.namespace in options\n    ? options[plugin.namespace]\n    : options\nlet pluginOptions = {}\n\nObject.keys(plugin.defaults).forEach((key) => {\n  pluginOptions[key] = plugin.defaults[key]\n})\n\nObject.keys(namespaceOptions).forEach((key) => {\n  pluginOptions[key] = namespaceOptions[key]\n})\n\nif (namespaceOptions && pluginOptions !== 'disable') {\n  preset.push(plugin.plugin(pluginOptions))\n}\n\n})\nreturn preset\n}\n```\n-Example Preset\nAt the moment i forked a few postcss tools, primary to test the config implementation and general issues with it. If you have some spare time please feel free to help out there as well, i will update the forks with my local changes until tomorrow. There is nothing going on there at the moment, because of time leaks.\nCLI\nGulp\n``` js\nimport { task, src, dest } from 'gulp'\nimport postcss from 'gulp-postcss'\nconst plugins = []\nconst options = {}\ntask('css', () => {\n   src('src/styles/*.css')\n      .pipe(postcss(plugins, options))\n      .pipe(dest('dest/styles/')\n})\n```\n``` js\nimport { task, src, dest } from 'gulp'\nimport postcss from 'gulp-postcss'\ntask('css', () => {\n   src('src/styles/*.css')\n      .pipe(postcss()) // no args => autoload config\n      .pipe(dest('dest/styles/')\n})\n```\nWebpack\njs\nmodule: {\n  loaders: [\n    { \n         test: /^.css$/,\n         loader: style!css!postcss\n    }\n  ]\n},\npostcss: () => {}\njs\nmodule: {\n  loaders: [\n    { \n         test: /^.css$/,\n         loader: style!css!postcss\n         // If needed, useful \u00af\\_(\u30c4)_/\u00af ? \n         // loader: style!css!postcss?config='path/to/alternative/postcss.config.js'\n         // loader: style!css!postcss?options={}\n         // loader: style!css!postcss?plugins={}\n         // loader: style!css!postcss?presets={}\n    }\n  ]\n},\n. you mean make config work and the PR's to the tools and 'introduce' presets after that?\n. yep agreed, that's up to your assessment, what would be the better transition path, if postcss directly handles the config the implementation must be done only once and all tools need slight changes and tests or nothing changed at best. I take care of loader, gulp, cli (but discussion over there is needed i think, bc there is a solution for loading plugins and friends at the moment and how the transition will look like, i start one when the left edges of the config finally round up). Grunt, Broccoli, Middleware, Meteor afterwards (Grunt is more important, but i'm no grunt user ;))  \n. > Sorry, but I will be able to fix loader only from July 8 until 14 (I will start traveling to Baikanur tomorrow).\nnp, i focus on the other things first, when someone wants to test it meanwhile, clone the fork for the time being :). i'm also busy right know, but sadly with ugly chore work for the holy capitalistic church, have fun over there and make it a nice one  \ud83d\udc4d \n. > Tweeted him.\n\ud83d\udc4d First, thank you very much for that\n\nDuplicates postcss-load-config/lib/loadOptions.js?\nDuplicates postcss-load-config/lib/loadPlugins.js?\n\nYep, i decided to publish them as separate modules for maintance reasons and for some specific usecases folks may encounter, where requiring only parts of load config is beneficial, i will rm them and update the repo soon, but e.g first need the name for postcss-load-plugins on npm. \n\nCould I open an issue there for kebab case by default?\n\nOn a first draft i implemented kebabCase (example below), but it gets a mess quickly, when you e.g load one postcss-plugin with prefix and one without like cssnext, cssnano etc. The presets should adress that, there the namespace is set by you in the preset itself and no collision with other external modules is possible, but regarding presets, there is nothing set in stone and i'm highly open to feedback and improvements to anything related to postcss-load-presets and presets in general. Please keep in mind that i agreed with with Andrey on this common config style (without presets):\npostcss.config.js\njs\nconst config = {\n options: {\n    parser: 'sugarss',\n    from: 'src/app.sss',\n    map: false,\n    to: 'dist/app.css'\n  },\n  plugins: {\n    'postcss-plugin1': null // => no options or rather the plugin defaults e.g for postcss-nested\n    'postcss-plugin2' : {option1: '', option2: ''}\n    'cssnext': {}\n}\nindex.js\n``` js\nimport postcssrc from 'postcss-load-config'\nimport postcss from 'postcss'\nconst css = fs.readFileSync('./src/app.css', 'utf8')\npostcssrc.then({plugins, options} => {\n  postcss(plugins).process(css, options).then((result) => console.log(result.css))\n})\n// postcss([ plugin1(), plugin2(options), cssnext(options) ]\n//  .process(css, {parser: require('sugarss'), from: 'src/app.sss', map: false, to: 'dist/app.css'}) \n```\nThat' s set in stone, but ...\nAbove when i opened that issue the first example(s), they use no postcss-prefix && kebabCase style for plugin declaration and presets should use that for there plugin declarations, simply because i like it terse and clean :) first a example config with presets\npostcss.config.js\njs\nconst config = {\n options: {\n    parser: 'sugarss',\n    from: 'src/app.sss',\n    map: inline,\n    to: 'dist/app.css'\n  },\n  presets: {\n    'postcss-your-company': {\n       name1: {option1: '' option2: ''},  // will override the plugins defaults where set\n       name2: {option1: '' option2: ''},\n       nameKebabed3: {option1: '' option2: ''}\n       name4: 'disable' // don't load this plugin, when not required in the current project\n     },\n  }\nwhats currently missing in postcss-load-presets and later in postcss-load-config are e.g:\n- extend preset with additional plugins anywhere in the presets plugin array \n``` js\nplugins: {\n  'postcss-plugin1': null,\n  'postcss-plugin2': null,\n},\npresets: {\n  'postcss-your-company': {\n     name1: 'disable', // will skip if not needed in current project\n     name2: {option1: '' option2: ''}  // will override the plugins defaults where set\n     nameKebabed3: {option1: '' option2: ''}\n     ....,\n     ....,\n    extend: [1, 2] // postition to inject the additional plugins in this preset\n    // extend: 'prepend'\n    // extend:  'append'\n},\n// => [ name1(), plugin1(), name2(), plugin2(), nameKebabed() ]\n```\n\nAre these like build-your-own-cssnext?\n\nYes, you can name them as you like postcss-preset-name is just for extrapolation and packages like cssnext, cssnano etc. could/should use a standard way, if decided upon. Then you can bundle a nice setup with the CLI for example and so on .. :). Share either the postcss.config.js file and/or/with a preset on npm || within your team || people interested in your setup,\nno \nbash\n$ npm i -D 1,2,3,4...., 5....., 6.............\nanymore\n\nI think I'm a good coder but this is more superbly put together than I conceived \ud83d\udc96\n\n\ud83d\udc4d your approach is very similiar to one of mine from the past, i can speak only for myself but you where on a good track imho. Share you thoughts, help out when in the mood and file issues like crazy if nessecary :)\n. > Could it be true instead and false to disable? null/undefined/'disabled' all feel wrong.\nSure better alternatives welcome true/false makes more sense. Suggestion for a replacement of 'disable'\n\nDid you already consider:\n\n``` js\nfunction load (plugin, options) {\nconst prefix= 'postcss-'\n  try {\n    plugin = require(plugin) // catch here\n  } catch (err) {\n    if (isPrefixed(plugin)) throw err\nif (isKebabed(plugin))  {\n   return load(prefix + reHyphenate(plugin))\n}\n\nreturn load(prefix + plugin)\n\n}\nreturn options === true ? plugin() : plugin(options) // not here\n}\n```\n\ncssnext implemented mappings for theirs too. The only thing I dislike is needing a preset just for a convention.  \n\ni take a look at them when i find the time. neither do i really it's just my current approach ;)\n\nYou mean postcssrc().then? Is the argument so you can override a config?\n\n``` js\noptions = {\n  plugins: {\n    'postcss-import': {\n      path: url.parse(context.request.split('!').slice(-1)[0]).pathname // gets the path directly from webpack\n      addDependencyTo: context\n    }\n  }\n} \n// should add option if not in the common config or override it\npostcssrc(options).then()...\n```\n\nThere's one major use case missing. Configs should accept functions.\n\nyep agree, that's a todo\n. > false right?\nyeah right :D, thats working for both without any problems\njs\nplugins:  {\n  'postcss-plugin': false // no options\n  'postcss-preset': {\n    plugin: false // disable\n  }\n}\nmaybe checking for presets in the plugins section is a better solution, and skip the presets: {}  key entirely.\n\nI could implement the above by Tuesday for further discussion \ud83d\ude0a\n\nYeah welcome, please help out would be really appreciated, i have some nasty chore at the moment\nIf you fork and PR or file issues with examples of how to basically :+1: , as you like and find the time\nIf it's on postcss-load-config, for now please keep the current config style for the moment, we can test and try different approaches in postcss-load-presets and then reconsider with ai.\n. \ud83d\udc4d i try to free some time in the evenings or rather force myself to :)\n. @TrySound thank you \ud83d\udc4d \n\nBut publish next major version please\n\nSure\nCan someone grap the name at the moment ?\n. @ai what's the min node version that needs to be supported by gulp and webpack ? node 4+\n. \ud83d\udc4e :) :) ok, then load-config needs to be tested for node 0.12+ first. legacy support is a bitch \ud83d\udc6f\n. grandma's dinner \ud83d\udc6f  hmm... sweatheart would you be so kind lifting that heavy box over there up to the attic. Of course always fun and pleasure \ud83d\udc4d  ...\n. needs to be done from time to time, no ape escape possible\n. @ai @RyanZim Error Handling is missing and a last review of the details for how the final accepted common config will look like. I'm sry for the insane delay on this i was interrupted by daily work a few weeks ago and at the moment i'm busy, because recently the laws in german (higher strictness) changed and most of the refugees i take care of got into serious trouble 'overnight'. Their laywers were calling in between hours, telling me chain deportations are going to be executed for most of them soon and therefore I needed to take action fast (court, move them etc...). Anyways :) in terms of the matter here, the current progress/plan is as follows.\npostcss.config.js\n(Done) -> {Object}\njs\nmodule.exports = {\n  parser: 'sugarss',\n  from: 'client/index.css',\n  map: false,\n  to: 'public/index.css',\n  plugins: {\n     postcss-import: {...options},\n     postcss-nested: null\n  }\n}\n(Idea) -> {Function}\nenv's propose is being a 'standarized' store for project specifics, CLI Flags(--map, --from, --to, --parser, --plugin), middlewares etc. store/cache local postcss config info in env. It's kind of redundant somehow, better solutions or ideas are welcome :).\njs\nmodule.exports = (env) => {\n  parser: 'sugarss',\n  from: `${env.from}`,\n  map: env.map, \n  to: `${env.to}`,\n  plugins: {\n     postcss-import: env.import,\n     postcss-nested: null\n  }\n}\npostcss-load-config \n- Node API  (Basically done)\n``` js\nimport postcssrc from 'postcss-load-config'\nconst env = {} // Idea is an object to override dynamic parameters depending on the usecase/setup\npostcssrc(env).then(({plugins, options}) => {\n  postcss(plugins).process('css', options).then((result) => console.log(result.css))\n}) \n```\n- Gulp\n(1) Autoload (Done)\n``` js\nimport { task, src, dest } from 'gulp'\nimport postcss from 'gulp-postcss'\ntask('css', (/ env? :) /) => { // No idea if this is possible, would be awesome\n // const env = {} e.g it's a 'special' task with requirements uncommon to the rest of the project\n  src('client/css/*.{sss|css}')\n    .pipe(postcss())\n    //.pipe(postcss(env))\n    .pipe(dest('public'))\n})\n```\n(2) Autoload and Assign (Idea)\n``` js\nimport { task, src, dest } from 'gulp'\nimport postcss from 'gulp-postcss'\nimport plugins from 'postcss-load-plugins' // -> {Array} plugins\nimport options from 'postcss-load-options' // -> {Object} options\n// equal to\n// import { plugins, options } from 'postcss-load-config'\ntask('css', () => {\n // const inline = require('postcss-plugin')\n // const $ = plugins(/ env /, true) // assign === true \n                                       // -> reduce plugins array to object and assign them.\n  src('client/css/.{sss|css}')\n    .pipe(postcss(plugins(/ env /), options( / env /)))\n    .pipe(postcss([$.plugin1, inline, $.plugin2, ...], options( / env */)))\n    .pipe(dest('public'))\n})\n```\n- Webpack \ncoming soon... :) I need to revisit the code first \nTo sum it up, missing pieces are \n- Error handling \n- Accepting a function as config \n- Refactor the Interface to make it more flexible (possiblity to assign plugins(?), return resolved)\n- Finish Intregrations (CLI(none), Grunt(none), Gulp(prototype), Webpack(prototype), Broccoli(none))\n@ai If you are open to consider integration in postcss core it might ease user migration to the common config as standard, but on the other hand it will bloat the core and may affect browser usage. We need a decision from your side here, because the idea to assign plugins to make changing their position in the chain possible etc. would be obsolete then. Also getting all middleware maintainers together and discuss/plan how to ship it would be a good idea :).\n. \ud83d\udc4d  yep, that's want i wanted to express with that awkward env thingy rubbish :D... it's just a an object with the right values (paths, specific options, plugin options etc.) passed through from the various build tools in the current project context, which will be merge/assigned then. Whats your opinion about exposing the possibility assigning plugins to reorder them if necessary?\n. > What is exposing? :) \nIt's meant like providing plugin assignment as a possibility, but it's likely that expressing it that way in this context is plain wrong :D, maybe the correct use would be e.g when talking about a 'public API' and you expose a method or the like for public usage. (When a native speaker reads this, please feel free to correct me, and if it's just utter crap, hopefully no employer ever reads this :D :D).\n\nCould you show some examples? :D\n\nSure :D\npostcss.config.js\n``` js\nconst default = {\n  parser: 'sugarss',\n  plugins: {\n     import: {},\n     reporter: {},\n     cssnano: {},\n  }\n}\nmodule.exports = (options) => {\n   parser: options.parser || default.parser,\n   plugins: {\n      'postcss-import': options.import || default.import,\n      'postcss-nested': options.nested || null,\n      'postcss-reporter': options.reporter || default.reporter,\n      'cssnano': options.cssnano || default.cssnano\n   }\n}\n```\ngulpfile.js\n``` js\nimport { task, src, dest } from 'gulp'\nimport postcss from 'gulp-postcss'\nimport { plugins } from 'postcss-load-config'\n// Development Task\ntask('css-dev', () => {\n  const $ = plugins({...options}, true)\nsrc('client/css/*.{sss|css}')\n    .pipe(postcss([$.import, $.nested, ..., $.reporter]))\n    .pipe(dest('public'))\n})\n// Production Task\ntask('css-prod', () => {\n  const $ = plugins({...options}, true) \nsrc('client/css/*.{sss|css}')\n    .pipe(postcss([$.import, $.nested, $.cssnano]))\n    .pipe(dest('public'))\n})\n/ Setting the env should be possible/done within the config, it's just used as an example here :) /\n// Specific Task with additional plugin(s)\ntask('css-inline', () => {\n  const $ = plugins({...options}, true) \n  const inline = require('postcss-plugin')\nsrc('client/css/*.{sss|css}')\n    .pipe(postcss([$.import, inline,  $.nested, $.cssnano]))\n    .pipe(dest('public'))\n})\n```\n. @RyanZim\nNODE_ENV\njs\n{\n  \"name\": \"css\",\n  \"main\": \"postcss.config.js\",\n  \"scripts\": {\n    \"css:prod\": \"NODE_ENV=production postcss  -o dest/index.css src/index.css\",\n    \"css:dev\": \"NODE_ENV=development postcss -o dest/index.css src/index.css\",\n  },\nNPM_CONFIG_ENV\njs\n{\n  \"name\": \"css\",\n  \"main\": \"postcss.config.js\",\n  \"config\": {\n    \"env\": \"development\"     \n  },\n  \"scripts\": {\n    \"css:prod\": \"$npm_config_env=production postcss -o dest/index.css src/index.css\",\n    \"css:dev\": \"postcss -o dest/index.css src/index.css\",\n  },\nbash\npostcss --env|-e dev -o dest/index.css src/index.css\nbash\npostcss --env|-e prod -o dest/index.css src/index.css\npostcss.config.js\njs\nmodule.exports = (options) => {\n  parser: 'sugarss'\n  plugins: {\n     'postcss-import': options.import || {...defaults}\n     'cssnano': options.env === 'prod' ? options.cssnano || {...defaults} : false \n     // TODO: skip loading respective plugin when set to false \n  }\n}\nAnd/Or as you stated out, via CLI flag, but internally the flag could use NODE_ENV or npm_config_env/npm_config_postcss. The envObject i mentioned above was kind of a bad example for what i was trying to express, i intermixed the integration part into middlewares with passing values to postcss-load-config.\n. @yachaka does it work that way? Maybe there is something coming up in regard of using es6 template literals and node's vm to use js templating for similiar proposes, but more generic, the problem is that examples with webpack (or any specific build tool) + postcss complicates to grasp the bits needed from the sole postcss side of affairs.\n. @swernerx what is your opinion on making it a preset instead of a plugin e.g\npostcss.config.js\njs\nmodule.exports = (ctx) => {\n  return {\n   parser: ctx.ext === '.sss' ? 'sugarss' : false,\n   plugins: {\n     'postcss-preset-imports': {...options} // e.g postcss-import, -url, -assets => {Array}\n     'postcss-plugin': {}  // => {Function}\n     'postcss-preset-cssmodules': {},\n     'postcss-preset-cssnext': {}\n  }\n}\ncommon config will support it with next release. Other ideas/feedback welcome :)\nBesides that, atm it looks like postcss-smart-import , as you mentioned, is a clean and updated version of postcss-import. For the matter of fact and as a starting point here at postcss-import would it be possible to send your efforts as PR before you continue envolving postcss-smart-import?\n. The revert from v8.x to 7.x currenty discussed would remove media query based imports aswell if I got that right and since the necessary cleanups (which you already did), is on the list of whomever will be the maintainer of postcss-import anyways, it as more in the direction, if you would be so polite to make your efforts available here.\nThe preset example above may be misleading, it's not necessary to config anything, although possible, it ships with defaults e.g like PreCSS / CSSNext. The distinction in terms of scope, between what 'is' a plugin (e.g do one thing and do it tell bla bla \ud83d\ude1b ) and when to better use a package/preset is important imo. Currently there is no boilerplate/standard how to make a preset but this could/should be changed. Your idea is good and understandable in terms of daily reliable usage, but can we do better by finding a common way to compose plugins, so config/setup gets less painful for most of the devs using postcss?  It's not arguing against your idea with postcss-smart-import if you prefer it that way go on with it, but maybe there is room for discussion.\n. > Plugin packs/presets (like Babel) are a good idea; postcss should have more, and someone should write a boilerplate or lib to streamline making plugin packs.\ntxt\n|-index.css\n|-postcss.config.js\n|-node_modules\n|  |-postcss-preset/[config]-awesome\n|     |-package.json\n|     |-index.js\n|     |-[postcss.config.js]\npostcss-preset-awesome\npackage.json\njs\n{\n  \"name\": \"postcss-preset-awesome\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Awesome Preset for PostCSS\",\n  \"engines\": { \"node\": \">=4\", \"npm\": \">=3\" },\n  \"main\": \"index.js\",\n  \"dependencies\": {\n     \"postcss-load-plugins\": \"^2.0.0\",\n     \"postcss-plugin\": \"^1.0.0\",\n     \"postcss-plugin\": \"^1.0.0\",\n     \"postcss-plugin\": \"^1.0.0\",\n  },\n  \"postcss\": { \n     \"plugins\": {\n        \"postcss-plugin\": {...defaults},\n        \"postcss-plugin\": {...defaults},\n        \"postcss-plugin\": {...defaults},\n      }\n   }\n}\nindex.js\n``` js\nimport pluginsrc from 'postcss-load-plugins'\nconst ctx  = {...defaults} || {}\n// Could also be used to set plugins/preset defaults, instead of, like above, done in package.json \npluginsrc(ctx, __dirname).then((plugins) => module.exports = plugins) // {Array}\n```\nUsage\npostcss.config.js\njs\nmodule.exports = (ctx) => {\n  return {\n    parser: 'sugarss'\n    plugins: {\n     'postcss-preset-awesome': {},\n    }\n  }\n}\n\nUsers that want a streamlined, complete no-configuration tool can build things like standard (a wrapper around eslint).\n\n\ud83d\udc4d  Same as above but with postcss-load-config instead of postcss-load-plugins\nAnother way would be like PreCSS does it. \n. @Diokuz \n```js\nconst css = fs.readFileSync('./src/app.css', 'utf-8') // {String}\npostcss(plugins)\n   .process(css, { from: 'src/app.css', to: 'app.css', map: { inline: false } })\n   .then((result) => {\n      fs.writeFileSync('./app.css', result.css, 'utf-8') // {String}\n     // Doesn't need options.from/to to work\n      console.log(result.map) \n     // Needs options.from/to to know the path/location of the origin (css) and\n     // destination (result.css) to generate the mappings (changes made by postcss plugins)\n     //\n     // Generated Souremap\n     //\n     // {\n     //   \"version\": 3,\n     //   \"file\": \"app.css\", (options.from)\n     //   \"sources\": [\"src/app.css\"], (options.to)\n     //   \"mappings\": \"AAAA,KAAI\" \n     // }\n   })\n. @IonicaBizau `postcss-url` should support `result.messages[i].dependency` and add the URL paths there, as `postcss-import` does it with `@imports`  . We currently work on an complete CLI overhaul. Could you trynpm i postcss/postcss-cli#develop``` for testing out v3?\nbash\npostcss src/**/*.pcss -o dest/\npostcss.config.js (Here's your config :D)\njs\nmodule.exports = (ctx) => ({\n   plugins: {\n     precss: {...options}\n   }\n})\nFor extname I recommend just using .css \ud83d\ude1b . @ai I understand, will try to see what options we have for renaming extname\npostcss src/*.pcss -o dest --ext '.css'. @aesopturtle Nope it's v3@beta (not released yet) package.json is still 2.6.0 there, did you npm uninstall postcss-cli && npm i postcss/postcss-cli#develop it should grap it directly from github\nYep, I understand the reasoning behind .pcss etc \ud83d\ude1b , I just need to think of a way to handle that accurately\nv3 will be released soon, I just always got something getting in the way the last days :D \n. cc/ @RyanZim \n. @ai mimimi... \ud83d\ude1b. @aesopturtle yep please reopen at postcss/postcss-cli and close here . @ai New docs WIP is here I try to uoate soon, e.g an ExtractTextPluginexample is missing, sry I was busy the last weeks \ud83d\ude1b  @hidace You can take what you like from there + please add an ExtractTextPlugin example and send PR to @postcss-loader if you're faster :), I need to finish vue-loader PostCSS implementation update beforehand. @AlesMenzel :D Well { ident: 'postcss' } is already outdated since webpack >= v2.2.1 Release Notes which removed the necessity to add it, what version of  extract-text-webpack-plugin do you use v2.0.0-rc.3? . @AlesMenzel Then it should work without the ident. Could you rm -rf node_modules and make a fresh install + changes to these lines in webpack.config.js\n```diff\n- loader: extractSass.extract({\n+ use: extractSass.extract({\n{\n  loader: 'postcss-loader',\n  options: {\n-  ident: 'postcss',\n    plugins: ()  => [ require('autoprefixer')() ],\n+  sourceMap: true\n  }\n}\n``` \nif it doesn't work  please open an issue @webpack-contrib/extract-text-webpack-plugin so we can continue there, bc it's likely to be a bug then :)\n. > Shouldn't there be a plugins query parameter in the ~/postcss-loader?{\"sourceMap\":true} ?\n@AlesMenzel Yep it's excatly about that, 'complex' options including a {Function} and/or require() statements needed the webpack specific ident: 'name' to work correctly, but this shouldn't be necessary anymore (v2.2.1). When you have time could you please open an issue @webpack-contrib/extract-text-webpack-pluginincluding a small repo for reproduction :) ? \nMeanwhile just keep theident` if that works. Thx in advance :stuck_out_tongue:. @ai Yep \ud83d\ude1b . @cengageLucas Try \nbash\nsudo rm -rf ./node_modules && sudo npm cache clean && sudo npm i\notherwise it's an npm bug :). @eriklharper You need to add \\n to the expected output for the tests to pass \ud83d\ude1b \njs\n'.vendor {\\n background: silver;\\n }\\n .vendor-font {\\n font-size: 14px;\\n }'\nmaybe a space here and there, the string comparison is strict about indentation and line breaks. @sandrina-p Add this of to your .travis.yml file for coverage to work \ud83d\ude1b \npackage.json\njson\n{\n   \"test\": \"jest --coverage\"\n}\ntravis.yml\nyaml\nafter_success:\n  - cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js\". css-loader compiles the [style] exports (e.g to camelCase) it's not a PostCSS issue, reopen in webpack-contrib/css-loader please. This is already ICSS (:export), does ._className { color: red;  } without any plugins etc also produce this issue ?. > I do ICSS utilities which will be used in all loaders and behave in the same way.\nWhat (\u30ce\u0ca0\u76ca\u0ca0)\u30ce\u5f61\u253b\u2501\u253b ?  \ud83d\ude43 \ud83d\ude1b :D.  > Well, I use postcss-loader first, and it creates :export stuff.\n@Diokuz That's likely the issue, you can't really use css-modules with postcss-loader yet #227\n@TrySound Yup, I'm already 'stalking' all the cssm repos :D . Please open issues with postcss-loader at postcss-loader repo :D. webpack 2 ? postcss-loader v ?. diff\n  postcss: function plugins(bundler) {\n    return [\n      require('postcss-import')({ addDependencyTo: bundler }),\n      require('postcss-mixins')(),\n      require('postcss-cssnext')({ autoprefixer: AUTOPREFIXER_BROWSERS }),\n      require('postcss-nested')(),\n-      require('postcss-load-config')(), // postcss-loader already implements this interally, \n-      // it's not a plugin (likely where the Error comes from)\n    ];. If you want to use postcss-load-config make the follwoing changes\nwebpack.config.js\ndiff\n-  postcss: function plugins(bundler) {\n-    return [\n-      require('postcss-import')({ addDependencyTo: bundler }),\n-      require('postcss-mixins')(),\n-      require('postcss-cssnext')({ autoprefixer: AUTOPREFIXER_BROWSERS }),\n-      require('postcss-nested')(),\n-      require('postcss-load-config')(),\n-    ];\npostcss.config.js (placed in './' (Root) at best)\n```js\nconst vars =  {\n   'color': 'red'\n}\nconst options = {\n   autoprefixer: {...options}\n}\nmodule.exports = (ctx) => ({\n     plugins: [\n      require('postcss-import')()\n      require('postcss-mixins')(),\n      require('postcss-cssnext')({ \n        variables: vars // CSS Variables (Custom Properties) Support, good for webpack usage\n        autoprefixer: options.autoprefixer \n      }),\n      require('postcss-nested')() // postcss-cssnext already supports nesting \n    ]\n})\n```\nOtherwise just remove postcss-load-config from webpack.config.js. Please add `` around the code and is it webpack ?  Then please reopen inpostcss-loaderinstead and include your configs (webpack.config.js) && (postcss.config.js).postcss-loaderisn't referenced in thepackage.json. \u26a0\ufe0f You need to install=< v1.3.3` for webpack v1. ```diff\n- var webpack = require('webpack');\nvar path = require('path');\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n- var extractCSS = new ExtractTextPlugin('css/[name].css?[chunkhash]');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar FriendlyErrors = require('friendly-errors-webpack-plugin');\nvar extractCSS = new ExtractTextPlugin('css/[name].css?[chunkhash]'); // \u53d1\u5e03\u8def\u5f84\uff0c\u8fd9\u91cc\u4e0d\u7528\u7edd\u5bf9\u8def\u5f84\u7684\u8bddcss\n``. Not sure ifnew ExtractTextPlugin('css/[name].css--->?[chunkhash]'<---);is correct. Why notnew ExtractTextPlugin('css/[name].[chunkhash].css');?. That's the old config syntaxpostcss-cli =< v2.0.0used. See the [Migration Guide](https://github.com/postcss/postcss-cli/wiki/Migrating-from-v2-to-v3) for more info and please close the issue here. Open a new issue in postcss/postcss-cli if still regressions. CSS Nesting is not supported by default in any browser yet, you need a plugin to handle nested structures e.g [postcss-nested](https://github.com/postcss/postcss-nested). Please close the issue here :) it's not related to PostCSS. Forpostcss >= v6.0.0, ensure to havepostcss-nested >= v2.0.0installed.node.js v4.2.2, there seems to be a bug somewhere in thenode v4.xline, could you trynode v4@latestplease ?. hmm... just the diff betweenv6.0.6...6.0.7maybe, but there where problems aswell. It will be difficult to fix correctly inpostcss, since this seems to be inbuffer` shipping with node itself :). https://github.com/nodejs/node/issues/8053\n\nIt\u2019s not undocumented, it\u2019s just inherited from the superclass \n\njs\nBuffer.from === Uint8Array.from\nBuffer API backport was in node >= v4.5.0\nSo the check in 88673ab56a fails, bc Buffer.from exists . instanceof  maybe? :). hmm.. \ud83e\udd14  if your first snippet works, I think it's the safer solution, I have no deeper knowledge about the exact Buffer prototype chain \ud83d\ude25. Either way needs definitely tests \ud83d\ude1b . ```js\n// node v8.1.4\nconsole.log(Object.getPrototypeOf(Buffer)) // [Uint8Array]\nconsole.log(Object.getPrototypeOf(Buffer.from)) // [Function]\nconsole.log(Buffer instanceof Uint8Array) // false\nconsole.log(Buffer.from instanceof Uint8Array) // false\nconsole.log(Uint8Array.from) // [Function]\n=> console.log(Buffer.from !== Uint8Array.from) // true (should work then) <=\n```\njs\nBuffer.from !== Uint8Array.from ? Buffer.from(str, 'base64') : new Buffer(str)\nSeems do it, my instanceof suggestion was crap \ud83d\ude1b . diff\nmodule.exports = (ctx) => {\n     return {\n            plugins: [\n                      // @import => css-loader#importLoaders\n-                     require(\"postcss-import\")({ addDependencyTo: ctx.webpack }),\n                      require(\"postcss-url\")(),\n                      require(\"postcss-cssnext\")({ browsers: [ \"last 3 versions\" ] }),\n                      require(\"rucksack-css\")()\n                   ]\n          }\n}\nIn case you are using postcss-loader >= v2.0.0 the ctx changed and doesn't expose the webpack property anymore for perf reasons. Like mentioned you won't need postcss-import when using webpack, it is even discouraged to do so, bc it can bloat your CSS sigificantly. For webpack @import needs to be converted into import/require() requests to ensure deduping imports. This is what css-loader does via importLoaders so use it instead please. In case you need/want to rely on postcss-import nevertheless postcss-import >= v9.0.0 && postcss-loader add @import to the webpack watcher as dependencies automatically and the { addDependencyTo: ctx.webpack } isn't needed anymore :). \u26a0\ufe0f Glob patterns are not supported by postcss-import or css-loader#importLoaders in general \ud83d\ude1b . Please open issues like that in postcss/postcss-loader instead :). Try adding an ident to your postcss-loader config in the first example, the {Function} stringifier is sometimes buggy when used in more complex setup (with vue-loader here)\nwebpack.config.js\njs\n{\n  loader: 'postcss-loader',\n  options: {\n    ident: 'postcss' // <= this line\n    plugins: () => [...plugins]\n  }\n}. Otherwise open an issue in vue-loader. webpack, extract-text-webpack-plugin, postcss-loader version (package.json) && Error Logs/Stacktraces please :) Out of the gut, I think the issue is here \npostcss.config.js\ndiff\nmodule.exports = {\n-    parser: 'sugarss', // <= SyntaxError\n    plugins: {\n-     'postcss-import': {}, // css-loader handles @import no need for this plugin in webpack\n      'postcss-cssnext': {},\n      'autoprefixer': {},\n      'cssnano': {}\n    }\n}\nSugarSS is whitespace sensitive convenience syntax for CSS, if you intend to use it use the .sss extension instead and a {Function} in postcss.config.js\nindex.sss\nsss\nhtml,\nbody\n  border: 0;\n  font-family: 'Conv_ProximaNova-Regular', Sans-Serif !important;\n  line-height: 1.5;\n  margin: 0;\n  padding: 0;\n  width: 100%;\nindex.css\ncss\nhtml,\nbody {\n  border: 0;\n  font-family: 'Conv_ProximaNova-Regular', Sans-Serif !important;\n  line-height: 1.5;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n} \npostcss.config.js\ndiff\n+ module.exports = ({ file, options, env }) => ({\n+  parser: file.extname === '.sss' ? 'sugarss' : false, // Handles `.css` && '.sss' files dynamically\n    plugins: {\n      'postcss-cssnext': {},\n      'autoprefixer': {},\n+     'cssnano':  env === 'production'  ? {} : false\n    }\n})\n. >  Module build failed: Syntax Error, Unnecessary curly bracket\nYep \ud83d\ude1b as the issue title suggest you are using a custom parser for plain .css files, the sugarss parser is not needed by default (see my comment above). CSS Custom Properties (CSS Variables) && postcss-custom-properties. @manulitopetito Since you intend to use webpack, that will be difficult to do (CSS File per JS Entry instead of CSS File per e.g Theme), but you don't really need n separate files since you can simply change the Custom Properties via JS during runtime. They are dynamic\n```css\n:root {\n   --theme-color: blue;\n   --theme-bg-color: red;\n}\n.some__class {\n  color: var(--theme-color);\n  background-color: var(--theme-bg-color);\n}\n```\n```js\n// document.documentElement === :root {}\nconst theme = (prop, value) => document.documentElement.style.setProperty(prop, value);\nconst button = document.getElementById('button')\nbutton.addEventListener('click', function () {\n   // Will update .some__class { color: var(--theme-color); } to be 'green'\n   theme('--theme-color', 'green')\n})\n```\n \u26a0\ufe0f  Read this Articles \u26a0\ufe0f \nhttps://smashingmagazine.com/2017/04/start-using-css-custom-properties/\nhttps://csswizardry.com/2016/10/pragmatic-practical-progressive-theming-with-custom-properties/\n. > so basically all webpack should do is compile all scss files to one theme-[x].css file where the custom-properties got replaced with the theme values.\n\n@manulitopetito Since you intend to use webpack, that will be difficult to do (CSS File per JS Entry instead of CSS File per e.g Theme)\n\n\u261d\ufe0f  Consider a separate build step for CSS then (e.g with gulp) . or something like styled-components/emotion/[ Insert CSS-in-JS library here...]\nThe multiple theme files with SASS approach won't work with webpack . postcss-conditionals if you are looking for this logic in particular ;). Otherwise setup a small test env \npostcss.js\n```js\nconst postcss = require('postcss')\nconst plugin = postcss.plugin('${name}', (options) => {\n   return (root, result) => {\n     // Code here...\n     // e.g \n     root.walkAtRules((rule) => {\n         // Logs the '@test' @-Rule token\n         console.log(rule)\n     })\n   }\n}\nconst css = @test (a) {\n .class {\n   color: red; \n  }\n}\npostcss([ plugin ]).process(css, { ...options })\n  .then((result) => {\n     console.log(JSON.stringify(result.root, 2, 2)) // Tokens {Array<{Object}>}\n     console.log('\\n\\n\\n')\n     console.log(result.css) // CSS {String}\n  })\n```\n\nAPI Docs \nAST Explorer. @BamiGorengo https://github.com/postcss/postcss-cli/wiki/Migrating-from-v2-to-v3#config-files\n. webpack.config.js\n```diff\n{\n    test: /.(css)$/,\n    use: ExtractTextPlugin.extract({\n        fallback: 'style-loader',\n        use: [\n            'css-loader?sourceMap',\n'postcss-loader?sourceMap&parser=postcss-scss'\n{ loader: 'postcss-loader', options: { sourceMap: true } }\n        ]\n    })\n},\n{\n    test: /.(scss)$/,\n    use: ExtractTextPlugin.extract({\n        fallback: 'style-loader',\n        use: [\n            'css-loader?sourceMap&modules&importLoaders=1&localIdentName=[local]___[hash:base64:5]',\n'postcss-loader?sourceMap&parser=postcss-scss'\n{ loader: 'postcss-loader', options: { sourceMap: true } }\n        ]\n    })\n},\n```\n\npostcss.config.js || .postcssrc.js\njs\nmodule.exports = ({ file }) => ({\n    parser: file.extname === '.scss' ? 'postcss-scss' : false,\n    plugins: {\n       'postcss-nested': {},\n       'precss': {}, // \u26a0\ufe0f It's more or less deprecated, look at it's package.json\n                     // and cherrypick the plugins/maintained alternatives you need :). \n                     // Also try without this plugin if it still doesn't work\n       'postcss-discard-comments': {...options}\n    }\n})\n\n\u26a0\ufe0f remove react-css-modules you are using CSS Modules via css-loaderalready, this module is bananas imho \ud83d\ude1b . \u261d\ufe0f How will the thrown {Error} look like then ? How to catch && handle it correctly ?\n\njs\npostcss(plugins).process(css, options)\n  .then((result) => result)\n  .catch((err) => {\n     // for e.g\n     err.name === '?' \n       ? new PostCSSError(err) // Syntax Error, Plugin Error, API Error etc...\n       : new Error(err) // Normal (JS) Error \n  }). \u261d\ufe0f How will the thrown {Error} look like then ? How to catch && handle it correctly ?\njs\npostcss(plugins).process(css, options)\n  .then((result) => result)\n  .catch((err) => {\n     // for e.g\n     err.name === '?' \n       ? new PostCSSError(err) // Syntax Error, Plugin Error, API Error etc...\n       : new Error(err) // Normal (JS) Error \n  }). Well this is \ud83d\udcaf unrelated to postcss and likely a problem with ETWP. ETWP extracts all modules from the module.rule with an ExtractTextPlugin.extract() and needs to rebuild each extracted module to remove it's dependencies from the Dependency Graph (e.g imports). The sorting logic there is very complicated, due to .extract() (loses the logic) and e.g allChunks is likely extracting some CSS twice if the module containing the CSS is referenced in more then one chunk. Which is 'correct'  but undesired... . js\nBuffer.from(str).toString('base64') \nNew Buffer is deprecated and will throw in node >= v8. Is this needed ? \ud83d\ude43 . exception => err. Could this be a new Error Type (Instance) instead please ? So third party implementations can handle it correctly via e.g if (err.name === 'WalkerError') handler... equal to how it works for err.name === 'CssSyntaxError' already\n```js\n// But not WalkerError please, it's a really bad name :)\nclass WalkerError extends Error {\n   constructor (err) {\n    super()\nthis.name = 'WalkerError'\nthis.message = ... // handle/format message (file, message, code frame etc..)\nthis.stack = ... // handle/format stack trace\n\nError.captureStackTrace(this, this.constructor)\n\n}\n}\n```\njs\ncatch (err) {\n  throw new WalkerError(err)\n}. ",
    "watilde": "@ai Thanks for ping me. I just caught up this thread \ud83d\ude3a \nFor adding the cli into the core, I think it's a good step to make developers use the stable version of the postcss core naturally, but I'd like to separate tests for the cli and the API because it can be hard to keep both tests for every single feature like the npm couldn't keep it or the gulp-cli for example. To solve this problem while keeping current structure, I can add the update-notifier to notice developers about the version updates of the postcss core.\nFor the config file, this design looks neat. The only thing I'd like to care is the value for plugins in the config file can be a function: https://github.com/postcss/postcss-cli/blob/master/test/config-all.js#L6\n. ",
    "A": "You can try http://github.com/tj/dox instead of jsdoc parser. It's kinda better.\n. ",
    "Semigradsky": "Hi! I don't know which symbol support was when this ticket was created but now all major browsers have support (except IE of course). Is current support enough for implementing this?. postcss-convert-values ?\n\nThis plugin reduces CSS size by converting values to use different units where possible; for example, 500ms can be represented as .5s. \n. Wow! :zap:  Thanks\n. :fearful:\nError: Can't find CSS links at http://habrahabr.ru/. Where autoprefixer plugin? I see only cssnano. \n",
    "ihorzenich": "@ai the reason is what PostCSS broke source map if I add material.min.css from Google MDL (http://www.getmdl.io/started/index.html). Bug looks like https://github.com/nDmitry/grunt-autoprefixer/issues/88\nI read about promblem with @charset \"utf-8\" and delete it almost, but bug still present.\n. ",
    "alwillis": "@ai I like the second version\u2014pretty much the same as the original Sass syntax, which I really enjoyed using back in the day.\nI like the direction this is going in\u2014no semicolons or curly braces, which adds lots of visual noise.\n. ",
    "mojereliev": "I like second version. Stylus minimal syntax + multiline write ( / ), must be very cool.\n. ",
    "urec": "1j01 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u043b \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 ,\u043c\u043e\u0436\u043d\u043e \u043f\u0438\u0441\u0430\u0442\u044c \u043c\u0443\u043b\u044c\u0442\u0438\u043b\u0430\u0439\u043d\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f(\u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445) \njavascript\np\n  // Colons make a lot of sense\n  color: #555\n  font-family:\n    \"Helvetica\" // Newlines imply commas\n    sans-serif // within indented lists\n\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u043c\u0443\u043b\u044c\u0442\u0438\u043b\u0430\u0439\u043d\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u043f\u043e\u0441\u043b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0441\u0442\u043e\u0438\u0442 \" : \"(\u0434\u0432\u043e\u0435\u0442\u043e\u0447\u0438\u0435)  stylus \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 +++\n. ",
    "kezzbracey": "My vote is also for the second version. I know a few people who are using Stylus before PostCSS right now purely so they don't have to type curly braces or semicolons.\nI can't speak as to the practicality of including colons, but I do know a lot of people who like terse syntax always use colons to make code more readable.\nRe. text editor support / highlighting for terse syntax, any Stylus plugin should handle that, e.g. for Sublime Text or Atom.\n. Flexibility is definitely great from the user side, but from the developer side it makes it difficult because it means many more tests have to be done for every possible combination of syntax options.\nIt's one of the reasons the Stylus devs have talking about removing the options to code with different syntaxes and settling on one approach.\nI'm getting ready to release a few plugins, and I can imagine that having to make them work with multiple syntax options could be pretty painful.\n. @andrejsm Even though I prefer not to use curly braces, you do make a good point that keeping things semantically similar to JS would give consistency.\nUsing Emmet can make it feel like you're barely writing curly brackets, but semicolons are always a slow down and a pain.\nSo in short, I think you might have just bought be around to agreeing the first option might be the better one.\n. @akella There are still many workflows where gradients aren't hidden inside mixins. For example, people use software to grab CSS out of Sketch / Photoshop / Reflow designs and drop it straight into code. Multiline gradients are common in these cases.\nAlso, plugins where several arguments are passed might be more easily used with multiline values.\n. @akella Fair point.\n. I just wanted to chime in with an example of where multi-line values can be handy for working with plugins.\nI'm developing a plugin at the moment to provide a PostCSS method of using @MoOx's color npm module. One example of how it can be used is where a value is given with three arguments passed between brackets, e.g.\n.element {\n    background-color: is_light(\n        $background_main,\n        color( $background_main shade(3%) ),\n        color( $background_main tint(3%) )\n    );\n}\n1. The first argument provides a color to check the luminosity of, i.e. whether the color is light. \n2. The second argument is the color to use if the \"is_light\" check returns true. \n3. The third argument is the color to use if the \"is_light\" check returns false.\nWhen working on this I played with a few approaches to handling the \"is light?\" logic, and found this structure to work the best. But allowing multiple lines in the value is pretty important for readability.\nI'm guessing that perhaps other plugin developers might find they want to use a structure like this, and as such it would be great if there were a way to make multi-line values also work with the upcoming terse syntax.\n. @1j01 Yeah that looks really good. If it could be made to get along with all plugins it would be great.\n. I think the examples / plans look quite thorough. I can't think of anything right now that would break them.\nI also agree with @7rulnik in that it would be great to have the option to choose between tabs or spaces. I think a lot of devs are set in their ways of using one or the other.\n. ",
    "talgautb": "may be we need 2 plugins ? I need use : but i don't like brackets\n. @1j01 +1\n. @ai hm, :((((((((((( i didn't see it\n. no such plugin here ((\n. my plugin work good for me :), @admdh 's plugin not working ((\n. ",
    "andrejsm": "There should be (1) distinct parsers for one or another style. Or make all configurable and allow to (2) explicitly set each option. Or to set more general (3) configuration preset.\nExample 1\njs\nlet parser = require('postcss-parser-stylus-alike')\npostcss([...]).process(input, { parser }).then(...)\nExample 2\njs\nlet options = {\n  parser: {\n    braces: false,\n    colons: false,\n    semicolons: false,\n  }\n}\npostcss([...]).process(input, { options }).then(...)\nor event go for .postcssrc\nyaml\nparser:\n  braces: 0\n  colons: 0\n  semicolons: 0\nExample 3\njs\nlet options = {\n  preset: 'noBracesSemicolons',\n}\npostcss([...]).process(input, { options }).then(...)\nIf omitting braces or colons will be optional, then should go for max!\n. @kezzbracey I fully agree with you. Therefore I prefer my first suggestion - distinct parsers. And seems at v5 PostCSS will have such a option.\nTo vote for proposed styles I will go with @ai's first suggestion as it is semantically similar to JS I write\njs\nlet style = {\n  color: 'red',\n  fontSize: '1.6em',\n}\ncss\ndiv {\n  color: red\n  font-size: 1.6em\n}\nI just don't want to type semicolons. Braces and colons I want to retain. They are used in JS, but semicolons mainly are redundant. Currently I have minor issues with forgetting to type semicolons in css.\n. ",
    "akella": "I think the best approach is in Sass, it is also heavily tested by a lot of teams now.\n.l\n    +clr\n    .l-col1\n        float: left\n        width: 20%\n    .l-col2\n        float: right\n        width: 70%\nLeaving ':' for readability, removing {} like noise, using indentation to parse.\n. @ai in sass they proved to be  useless for setting css values, this is just uncomfortable to type. If you mean arrays or some other things - we can have some magic symbol at start, like  {}. Multiline arrays are possible in Sass syntax too.\n. @ai understood you point, but i think this case is not that important, mostly all the gradients are hidden inside mixins now. I do it like +g($color1,$color2), so typing smthlike:\n.block\n    background: g($color1,$color2), g($color3,$color4)\nis not that hard at all for me. And multiple gradients is not a common situation in code, to consider it for syntax, imho.\nI mean, you can have 2-3 rules like that for a website, and than a couple of thousands ':' and '{}'. The latter is more important imho.\n. @kezzbracey agree on that, but i think the most important thing, that : and {} are way more common inside our CSSs than those multiple gradients. \n. postcss-partials-import throws no errors, but just dont replace @imports\nHere is working and not working versions for me \n\nHere is my test setup: http://take.ms/pXybX\nHere is input code:\nbla.css:\ncss\n@import \"blabla\";\ndiv{\n    display: block;\n}\nAnd blabla.css\ncss\nbody{\n    display: none;\n}\n\nHere is what it compiles to (no changes):\ncss\n@import \"blabla\";\ndiv{\n    display: block;\n}\nExpected :\ncss\nbody{\n    display: none;\n}\ndiv{\n    display: block;\n}\n. ",
    "imShara": "Drop braces and semicolon, please\n. ",
    "pvalentim": "Hey, any progress on this?\n. Thanks for the update, have a nice holiday!\n. ",
    "a-x-": ":+1:  but: With: : / And without: ;, {\n. ",
    "j-walker23": "second @akella approach\n. @ai Hey, i am brand new to postcss, convert from long time sass user (the \"old\", but so much better syntax!).\nCould you please explain in noob terms what you mean in \n\nRight now I see this way to find selector or declaration (\u201chas :\u201d mean to have : outside brackets):\n\nSpecifically what is meant by outside brackets please.\nAlso i have a question about the multiline selectors. Is there any reason it would fail if the commas were not included? Where the parser would treat each selector as if they had commas after them.\ncss\n.one\n.two\n.three\n  color: black\nI remember my IDE being confused in sass and would indent the selectors with auto format like below which was annoying. Obviously not an important reason, i was just curious so i thought i would ask.\ncss\n.one\n  .two,\n    .three\n  color: black\n. @ai haha damn, been a long night. I was thinking about stylus i guess. I am trying to implement poststylus now in a jspm css loader which brought me here a little while ago because i would love to just use PostCSS, but still have the clean indent syntax i have grown to love in pre processors. \nThanks for letting me know, updating.\n. ",
    "vkhv": "i vote for second suggestion \n. ",
    "7rulnik": "@ai no.\nI like how it's work in Jade. Jade throw error only if you mix tabs and spaces.\n. Sure. Like this?\n\nadds -js- prefix for Flexibility polyfill\n. Ping @ai \n. \n",
    "whaaaley": "I'm not sure whether you're still debating on : vs no : but i'm definitely for the use of :. I would even use curly braces again just to have the colon back. I think it helps readability a lot.\nPlus, you could then write plugins to process things like multiple properties, which I'm not sure would be possible with a no colon syntax.\neg:\ndiv\n  margin padding: 20px\n. Are parentheses required? If so, you could check if a parenthesis occurs before a colon, then that line would be part of the multiline rule.\nsass\n@media\n  handheld // no colon at all -> multi\n  (min-width: 100px) // parenthesis before colon -> multi\n  and (max-width: 200px) // parenthesis before colon -> multi\n  width: calc(100% - 100px) // parenthesis not before colon -> property/value\n. What is an example of some code that could be confused? One more note on my previous suggestion, my example there were only 2 rules, ( before : and then no : at all. Once a check fails, that could determine the end of the multiline at-rule and to go back to regular processing.\n. Oooh. I see. I've only just started messing with simple parsers. I suppose I was thinking once within an at-rule the parser would sort of switch gears to a sort of mini-parser until the end of the at-rule had been reached, then go back to dividing selectors once it's been deemed part of the at-rule. I'll have to think about this one for a while longer.\n. I'm not really sure how I feel about this suggestion or how it would work but... double indents?\n@media\n    handheld // atrule\n    min-width: 100px // atrule\n    and max-width: 200px // atrule\n  width: calc(100% - 100px) // regular property\n...or maybe more than the standard two? This could make formatting a bit prettier too.\n@media handheld // atrule\n       min-width: 100px // atrule\n       and max-width: 200px // atrule\n  width: calc(100% - 100px) // regular property\n. I agree that # comments would conflict with CSS. Are we still stuck on the multi-line indents problem?\n. ",
    "jescalan": "Hi guys! Just popping in to check the progress on this. Having a plugin that removes brackets and semis would truly be an amazing productivity boost. If there's any way I can help, let me know. Otherwise will be looking forward to this :grinning: \n. @ai for real? is there a beta release we can try out if we are just going for straight compilation? can't wait to get my hands on this :grin: \n. ",
    "DavidOliver": "I'm glad to see that (a) simpler syntax(es) is/are being planned, though I appreciate it's likely complicated to implement. My personal thoughts/prefernces follow.\nI'm used to the indented Sass type of syntax and have been using this with Stylus:\n.selector\n    property: value\nI find the colon very easy to type and that it helps with readability. I don't like typing semi-colons as I feel, like the Go developers, that they should be replaceable by machines. And I absolutely hate typing curly brackets in CSS. I don't find the argument for consistency between different languages very convincing; CSS and JS seem so different in their capabilities and intended uses.\nI'm not anywhere nearly as bothered about multiline values such as gradients as these generally occur relatively infrequently. My preference regarding tabs is hard/real tabs.\nHow would a simpler syntax affect things like @custom-selector :--seltest .one, .two - could that remain as is?\n. @ai, it's been 9 hours. Have you finished yet? ;)\n(I started the game a while back and need to get back into it. And Dark Souls. sigh)\n. ",
    "ryanmclaughlin": "Any updates on this question?\n. ",
    "thisconnect": "\nMany users asked about some compact syntax like Sass or Styles. In PostCSS 5.0 we can make it, it is good time to find the best compact syntax.\n\nAre you going to make postcss another sass/stylus/less? I hope this will be a plugin and would not blowup postcss. \nInstead of introducing a new non-standard, wouldn't it be nice if there is fully compatible postcss-less, postcss-stylus, postcss-sass and what you suggest... postcss-iLoveNewLines\n. I don't hate CSS, that is probably why I ended up using postcss. If i did not like CSS I would probably use less/sass/stylus/sugars . Nevertheless I don't mind if a project uses one of the 4 custom syntaxes. But I get more excited about standards becoming reality, for example http://caniuse.com/#feat=css-variables\n. ",
    "vtrushin": "May be try to detect, does last symbol at line is comma. If yes, ignore tab indent as semantic for next line. Or wrap multiline values in parentheses, like this:\ncss\nbackground: red\nbackground: (\n   white,\n   linear-gradient to bottom right,\n   white,\n   black\n)\n. ",
    "lalomartins": "Sorry, it's unclear to me \u2014 will there be nesting? With what syntax? @akella's sass-redux?\nIt could also be an option to just detect them insofar as not breaking the parser, then outputting them again to be handled by something like postcss/postcss-nested IMO.\n. :+1:\n. ",
    "danielbayley": "How about allowing # comments?\nThis would be nice with CoffeeScript together with this terse sass-like syntax.\nI appreciate that # is for #ids in CSS, but hashes followed by a space could easily be comments instead. Besides, the use of #ids seem to be mostly discouraged anyway.\nSomething like /#\\s+/ to match them? or maybe this should be a plugin?\n. > I think SugarSS will be finished on this or next week.\n:+1: \nHopefully I can figure out how to get this into atom-language-postcss-sugarss asap\u2026\n. atom-language-postcss-sugarss is up now. It's really just scaffolding at this point though as it just extends the existing Sass syntax highlighting. Any help is welcome\u2026\n\nWe are working on syntax highlight support in text editors.\n. \n",
    "dbox": "Thanks for the all the work @ai!\n. ",
    "aazcast": "Hi i modify a SASS Syntax Highlight to work with .SSS files.\nYou can find it in Package Control or https://github.com/aazcast/Syntax-SugarSS-SublimeText. @ai Hi i just send PR. This is the packagecontrol link: https://packagecontrol.io/packages/Syntax%20Highlighting%20for%20SSS%20SugarSS\nis available to install using packagecontrol.. ",
    "simplesmiler": "@ai looks like the t in postcss-urlt was from cssfmt, which is missing a t from the end.\nhttps://github.com/postcss/postcss/blame/master/README.md#L596\n. @ai sure.\n. @ai never done this before, should I rebase my patch branch against master first?\n. @ai  #499\n. @ai thanks :+1:\n. ",
    "yoshuawuyts": "Ideally I'd prefer an arbitrary function syntax for plugins without the need to pull in a package, e.g. \njs\nmodule.exports = function () {\n  return function (style) {\n    // traverse & modify style\n  }\n}\nThis would make it easier to intererop with other CSS bundlers, such as sheetify. :sparkles:\n. ah, yeah 2 + 3 make a lot of sense. Perhaps an api that looks like this could work for this case:\njs\nmodule.exports = function (meta) {\n  meta({ name: 'rebecca-purple' })\n  return function (style) {\n    // traverse & modify style\n  }\n}\nor\njs\nmodule.exports = function (css) {\n  css('rebecca-purple', function (style} {\n    // traverse & modify style\n  })\n}\n. Actually that sounds great, happy to see that happen ^^\n. ",
    "lukekarrys": "But shouldn't something like\ncss\n.selector {\n  -moz-animation: loader;\n  animation: loader;\n}\nEnd up as\ncss\n.selector {\n  animation: loader;\n}\ninstead of removed altogether?\n. Sorry I didn't know if it would be helpful to post test cases that didnt fail as well. Here are the ones that fail. If I run them through postcss@5.0.1 with autoprefixer then result.css is empty. It works with postcss@4.1.16.\n``` css\n.selector {\n  -moz-animation: loader;\n  -webkit-animation: loader;\n  animation: loader;\n}\n.selector {\n  -moz-animation: loader;\n  animation: loader;\n}\n```\n. ",
    "dmnsgn": "Okay thanks I'll look into it.\n. ",
    "notacouch": "@himynameisdave Sweet. Thanks!\n. @ben-eb Thank you!\n. ",
    "mikestreety": "Yeah, it's subtle, but I didn't want to have to write -c every time. It's more about an aid for forgetfulness.\n:smile:\n. ",
    "davidkpiano": "This would be fun to do in Sass as well... hmm...\n. ",
    "Grawl": "\ud83d\udc4d\n. \u0431\u043b\u0438\u043d \u0430 \u044f \u0432\u043e\u043e\u0431\u0449\u0435 \u043f\u043e\u0434\u0443\u043c\u044b\u0432\u0430\u044e \u0438\u043d\u043e\u0433\u0434\u0430 \u043f\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0430 \u0441\u0442\u0438\u043b\u0443\u0441\u0435. ",
    "MattDiMu": "@davidkpiano I did a similar plugin for sass&gulp, which is much simpler though. It's not about creating, but only about manipulating SVGs in sass. It just reads a given folder of SVG-files & creates url-encoded (for best gzip-compression) SASS-functions, which take colors as parameters and return the manipulated SVG. Furthermore it offers some utiliy-functions for these SASS-functions. It started as an experiment, but I've already used it in 4 professional project and it seems to work with all single-color SVGs I've come across until now (icomoon, font awesome and some self-created SVGs).\nhttps://github.com/MattDiMu/gulp-sassvg\nSuch a postcss-plugin could, however, probably do much more than just some regex.\n. ",
    "mahtd": "Yeah, I tested it :)\nI'm mattduckman on Twitter, although I don't really use it\n. In parser.es6:279, the parser picks up the } as a param, so it looks like it needs to break when it sees a } instead\n. lol thanks. The parser is intimidating though, it took me awhile to figure out how it works\n. ",
    "alexmchardy": "I'll just add that postcss-url doesn't copy assets into a specific base build directory. It will copy assets into a directory relative to the postcss to option (the destination of the css file). See postcss/postcss-url#34.\nThe idea of this plugin is to copy all assets into a base build directory while keeping the part of the asset's path that makes sense. So for url(../../images/icons/i.jpg) the file is copied to <base>/images/icons/i.jpg. This means, when processing many css files, they're referenced assets can be gathered into one base build directory instead of scattered all around.\n. Hi @tinchoz49. I tried to better explain what led me to create postcss-copy-assets in shutterstock/postcss-copy-assets#1.\nI'm in favor of a good tradeoff between reduced duplication and \"do one thing and do it well\".\n. ",
    "OEvgeny": "@ai It is complicating scss styles compilation.\n. Ok. thanks. Didn't know about peerDependencies deprecation.\nI check plugins and some of them didn't have PostCSS in deps (eg postcss-host).\nSo, I think will be good to add this info into plugin guidelines..\n. @TrySound I know. But it also means that with npm@<3 it will install PostCSS for each plugin in plugins directory. It's not needed for regular user, because postcss will be installed anyway to call .use() to plugin.\nOf course with npm@^3 it works better. In this case it just slows dependecies resolving.\n. @ai Thanks for clarification.\n. ",
    "Scrum": "@azat-io \n\"postcss\": \"^4.1.16\",\n\"cssnano\": \"^3.0.1\",\n. @TrySound \u043d\u0435 \u043f\u0440\u043e\u043a\u0430\u0442\u0438\u043b\u043e (\n. @azat-io c postcss-import \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 ( \u0442\u044b\u0446\n. @ai no alternatives to postcss\n. @ai \u0412 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043c\u043e\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 slims, \u0432 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e \u0441\u043c\u044b\u0441\u043b\u0435 \u0434\u043b\u044f \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\u043c\u0438.\n. @ai \u041c\u043d\u0435 \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u0436\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0438 \u0442\u0438\u043f\u0430 bootstrap \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0432 \u0441\u0435\u0431\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f grid \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0442\u0438\u043f\u0430 [class^=\"col-\"] \u043d\u043e \u043c\u043d\u0435 \u0438\u043d\u043e\u0433\u0434\u0430 \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u0435\u0433\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0435(\u043c\u043e\u0435\u043c \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440) \u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043d\u0435 \u043d\u0435 \u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0431\u044b \u0431\u043e\u0434\u0430\u0442\u044c\u0441\u044f \u0441 \u043f\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f\u043c\u0438, \u0438\u043b\u0438 \u0436\u0435 \u043c\u043d\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u0442 \u043d\u0435 \u0437\u043d\u0430\u044f \u043a\u0443\u0434\u0430 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0432\u043d\u0435\u0434\u0440\u0435\u043d \u0438 \u043d\u0435 \u0438\u043c\u0435\u044f \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439.\n. :) ok.\n. @ai this need for create presets plugins\n1. example post-preset-modules\njs\nexport default () => (ctx, res) =>[import(`${res.processor.name}-modules`)(/* options */)(ctx, res)];\n2.example post-preset-mini\n```js\nexport default () => (ctx, res) => {\n  if (res.processor.name === 'postcss') {\n    return [require('postcss-csso')(/ options /)(ctx, res)];\n  }\nif (ctx.processor.name === 'posthtml') {\n    return [require('posthtml-minifier')(/ options /)(ctx, res())];\n  }\n}\n```\nI use it to configure and download plugins to process. See post-load-plugins and example. @ai have you seen the plugin post-load-plugins ? One plugin to create a configuration and download plug-ins you think are bad ? Seal up all its use is not to dwell on PostCSS and PostHTML.\n\nand why you need to create a plugin, which could be used in PostCSS and PostHTML?\n\nFor convenience - no need to search, choose plug-ins if you need to mark up the letter. Can connect post-preset-email and work.\nI'm sure I'll use post-preset-mini in post-email - readme not ready.\n. @ai \n\nWhy not:\npostLoadPlugins(\u2026).css.process(\u2026)?\n.css method could call postcss() inside.\n\nThere is no need to determine process if I know him.\nThe main point of the plugin - run in unknown environment.\n\nIf .css will return a Processor you could write even:\npostcss([extraPlugin, postLoadPlugins(\u2026).css])\n\ncould you elaborate ?. > What does it mean \u201cunknown environment\u201d?\nwas meant to be unknown plug-in which process it will be ie plugin doesn't know about entourage but can define it\n\nUser may want to load some plugins from post-load-plugins, but other set manually.\n\nYes but this has nothing to do with the plugin that can identify the processor.\nIn post-load-plugins I will recommend you to use extends as an option or configuration in the package.json. post-load-plugins ? )) he knows nothing about the processes in which it will run, but it can define them, while not very nice post-processor. > He know nothing according current API?\nknows nothing, because it can be run in posthtml and maybe the list will grow.\njs \nposthtml(postLoadPlugins(\u2026)). The plugin should load only what is to the process.\nI aggregate the plugins and the configuration for them based on process name and connect through the process.\nPerhaps you mean that I upload all at once ?\njs\npostLoadPlugins(\u2026) => {\n  postcss: function which returns array ? right ?\n  posthtml: function which returns array ? right ?\n}\nsuppose that we have a situation\njs\npostunknown(postLoadPlugins(\u2026).???)\nhow to understand what process name I need ?\n. ok, thanks.. ",
    "bezoerb": "Just gave it another try here: https://github.com/postcss/postcss/pull/569 ;)\n. ",
    "sotayamashita": "@jedmao Thank you for your kindness. I will fork your repo. \n. @jedmao I just want to know its flow and try to use closure-ts on PostCSS.\n. Is it kind of hack ? https://github.com/AllThingsSmitty/css-protips \n. ",
    "leftstick": "I don't think so. But haven't tried yet.\nAccording to documentation, it should be a restriction at installing phase. In case someone are using older version of node\n. ",
    "ahmedelgabri": "Same here...\n. Thanks @ben-eb\n. ",
    "Tenzer": "Thanks!\n. ",
    "asan": "Here is quick explanation why test for obj.mappings is wrong:\nhttps://github.com/mozilla/source-map/blob/master/lib/source-map-generator.js#L21-L32\ninternally it stored as _mapping\nhttps://github.com/mozilla/source-map/blob/master/lib/source-map-generator.js#L366-L373\nand obj.mapping is appears only after toJSON\n. The other way to get obj.mappings is to try call toJSON or JSON.stringify(JSON.parse(...)) but im not sure how safe is it(requires some try-catch statment imo).\n. @lydell in my case this sourcemap object is from sass-loader(webpack), and it uses different instance of SourceMapGenerator(from webpack-core), so we need some kind of duck typing here, like:  if it can be converted to json, and this json has fieldmappings` - it sourcemap \n. Hm, interesting i try to simulate different instances of mozilla/source-map by requiring it in different case, it works ok on osx but fails on unix. Any ideas how to simulate sorcemaps required by different packages?\n. Ok i fix it using 'source-map' and  'isparta/node_modules/source-map' seems legit.\n@ai any thoughts on improving sourcemap detection?\n. @ai tnx a lot!\n. ",
    "bighuggies": "Ah, I totally missed that plug-in! No need for this then.\n. ",
    "dehuszar": "Updated\n. Sure, no problem.\n. Ah. Okay.  No problem.  I'll create a new fork next time.\nThanks!\n. @ai, @AlexanderTserkovniy I've replied in the postcss-reference issue as well, but I thought I'd reply here in case more eyes can help resolve the issue.\npostcss-import does not like import statements inside the reference AtRule after version 7x.  Dropping postcss-nested-import in place of the postcss-import appears to work.  That said, postcss-import claims to be able to import from inside media-query AtRule blocks, so I don't know why it won't here.  I'm going to test to see if the former assertion is in fact true and report back.\nI am hoping to get a patched version with some new enhancements and at a minimum updated docs pointing to the nested import plugin shortly.\nEither way, it does not appear to be an issue with the core library, so feel free to close the issue here.  Any further discussion can continue here if you like.. ",
    "pensierinmusica": "Done :)\n. ",
    "franckmaurin": "@TrySound what file do you mean ?\nThe css file which make error is loaded like this :\n```\nimport React    from 'react';\nimport { Link } from 'react-router';\nimport _        from 'underscore';\nimport styles   from './styles.css';\nclass WorkNav extends React.Component {\n  render() {\n    let prev, next;\n    let back          = \nBack\n                        ;\n    let brosLength    = this.props.bros.length;\n    let currentIndex  = (brosLength) ? _.indexOf(this.props.bros, this.props.path): -1;\n    if(brosLength && currentIndex>0) {\n      prev            = \nPrevious\n                        ;\n    }\n    if(currentIndex+1 < brosLength) {\n      next            = \nNext\n                        ;\n    }\nreturn (\n  <ul className=\"workSingle-nav\">\n    {prev}\n    {next}\n    {back}\n  </ul>\n)\n\n}\n}\nexport default WorkNav;\n```\n. oh sorry.\n```\nvar path                      = require(\"path\");\nvar webpack                   = require(\"webpack\");\nvar ExtractTextPlugin         = require(\"extract-text-webpack-plugin\");\nvar production = process.argv.indexOf(\"--production\") > -1;\nmodule.exports = {\nentry: {\n    index: [\n      \"./src/index.js\",\n    ]\n    //, critical: \"./src/critical.js\"\n  },\noutput: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"scripts.js\",\n    publicPath: \"/\",\n    libraryTarget: 'umd'\n  },\nresolve: {\n    extensions: [\n      \"\",\n      \".js\",\n      \".json\",\n    ],\n  },\nmodule: {\n    loaders: [\n      {\n        test: /.js$/,\n        exclude: /node_modules/,\n        loaders: [\n          \"babel\"\n        ]\n      },\n      {\n        test: /.json$/,\n        loaders: [\n          \"json\",\n        ],\n      },\n      {\n        test: /.css$/,\n        loader: ExtractTextPlugin.extract(\n          \"style\",\n          \"css!cssnext\"\n        )\n      },\n      {\n        test: /.(ico|jpe?g|png|gif)$/,\n        loaders: [\n          \"file?name=[path][name].[ext]&context=./src\",\n        ],\n      },\n      {\n        test: /.(woff|ttf|otf|eot\\?#.+|svg#.+)$/,\n        loaders: [\n          \"file?name=[path][name].[ext]&context=./src\",\n        ],\n      },\n      {\n        test: /.(html|txt)$/,\n        loaders: [\n          \"file?name=[path][name].[ext]&context=./src\",\n        ],\n      },\n    ],\n  },\nplugins: (\n    [\n      new ExtractTextPlugin(\"styles.css\"),\n      new webpack.DefinePlugin({\n        PROD: production\n      })\n    ]\n    .concat(\n      production\n      ? [\n        new webpack.optimize.UglifyJsPlugin({\n          compress: {\n            warnings: false,\n          },\n        }),\n      ]\n      : []\n    )\n  ),\ncssnext: {\n    sourcemap: !production,\n    compress: production,\n    browsers: \"last 2 versions\",\n    features: {\n      customProperties: {\n        variables: {\n          'fontUppercase': 'lft-etica, brandon-grotesque, Helvetica, Arial, sans-serif',\n          'fontSerif':     'lft-etica, ff-meta-serif-web-pro, Times, \"Times New Roman\", serif',\n          'fontSansSerif': 'lft-etica, Helvetica, Arial, sans-serif',\n          'fontMonospace': 'Consolas, Menlo, Monaco, \"Lucida Console\", \"Liberation Mono\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Courier New\", monospace, sans-serif'\n        }\n      },\n      customMedia: {\n        extensions: {\n          '--mobile': 'screen and (min-width: 1px)',\n          '--tablet': 'screen and (min-width: 719px)',\n          '--laptop': 'screen and (min-width: 1023px)',\n          '--desktop': 'screen and (min-width: 1199px)'\n        },\n        appendExtensions: true\n      }\n    }\n  }\n};\n```\n. @ai Would you have you an exemple of postcss-loader usage with cssnext plugin ? I didn't find how pass my cssnext properties into the postcss array config.\n. @MoOx Thank you Maxime.\nThe same file is \"undefined\" according to the loader.\n```\nERROR in ./~/css-loader!./~/postcss-loader!./src/components/Work/Single/Nav/styles.css\nModule build failed: TypeError: Cannot read property 'map' of undefined\n    at getDecls (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/cssnano/node_modules/postcss-merge-rules/dist/index.js:64:22)\n    at partialMerge (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/cssnano/node_modules/postcss-merge-rules/dist/index.js:95:60)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/cssnano/node_modules/postcss-merge-rules/dist/index.js:184:17\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/container.js:115:34\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/container.js:73:26\n    at Root.each (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/container.js:59:22)\n    at Root.walk (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/container.js:72:21)\n    at Root.walkRules (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/container.js:113:25)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/cssnano/node_modules/postcss-merge-rules/dist/index.js:190:13\n    at LazyResult.run (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:201:20)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:115:37\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n @ ./src/components/Work/Single/Nav/styles.css 4:14-143\nERROR in ./src/components/Work/Single/Nav/styles.css\nModule build failed: ModuleBuildError: Module build failed: TypeError: Cannot read property 'map' of undefined\n    at getDecls (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/cssnano/node_modules/postcss-merge-rules/dist/index.js:64:22)\n    at partialMerge (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/cssnano/node_modules/postcss-merge-rules/dist/index.js:95:60)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/cssnano/node_modules/postcss-merge-rules/dist/index.js:184:17\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/container.js:115:34\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/container.js:73:26\n    at Root.each (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/container.js:59:22)\n    at Root.walk (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/container.js:72:21)\n    at Root.walkRules (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/container.js:113:25)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/cssnano/node_modules/postcss-merge-rules/dist/index.js:190:13\n    at LazyResult.run (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:201:20)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:115:37\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:127:27\n    at LazyResult.asyncTick (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:129:15)\n    at DependenciesBlock.onModuleBuildFailed (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:315:19)\n    at nextLoader (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:270:31)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:292:15\n    at context.callback (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:148:14)\n    at Object. (/Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/lib/loader.js:30:18)\n    at /Users/franckmaurin/Dropbox/Pro/Server/dev/franckmaurin.lh/node_modules/css-loader/lib/processCss.js:187:3\n    at runMicrotasksCallback (node.js:337:7)\n    at process._tickCallback (node.js:355:11)\n```\n. And if I comment the same line of css, it's ok. Very strange.\n. @ben-eb @MoOx @ai YOU ROCK GUYS! It's fixed. :D \nThank you, I believe in postcss. :+1: \n. ",
    "XOP": "@TrySound, I saw the issue (#495) and it's not related. We use Stylus without \"sugar\".\n@ai, thanks for the answer!\nI'm facing the problem of parsing, exactly, realizing compilation is another procedure :smiley:. \nBut regarding mixins and sort - when postcss meets unusual token it just fails.\nSo yeah, adapted parser would be cool feature.\nWhat about making it - If within our team we'll have no other options - I'll begin. So far I'm looking for the ready-to-go tools.\n. Personally, I just left the idea...\nWe work with SCSS now and it works fine.\nI really don't have any necessity to go back to Stylus, it was a company wish :wink: \n. @TrySound I've just replaced quotes with correct symbols, there shouldn't be any clones\n. right, found, fixed\n. @ai, @TrySound sorry guys, have been out of internet coverage, thanks for help, will be back soon :)\n. :up:\n. ",
    "jamesplease": "\nI guess I don't understand why someone would want to run PostCSS on uncompiled CSS, then run it on Stylus?\n\nIf the situation arose that a linting error was caused by the compiler producing unexpected output, then it could be annoying to have to change your precompiled code or adjust the rules.\nAn analogy would be running a linter on Uglified JavaScript. I always include semicolons when I write JS, and I want my linter to enforce that. But Uglify strips them out to save on file size, so the uglified code would fail the linting rules that I want to use.\nIn general, I like linting what the developer inputs. I then rely on any transformation tools to correctly interpret the developer intent that when they transform it for the browser to use. But exactly what those tools output is generally not as big a concern of mine, and linting it isn't quite the same as linting developer input.\n. ",
    "alex-shamshurin": "There is a stylus parser in stylus lib. Could anyone use it? Are these tokens compatible with postcss?  https://github.com/stylus/stylus/blob/dev/lib/parser.js. ",
    "sergeysova": "@ai has any progress here?. @ai yes, I want. Webpack config:\njs\nmodule.exports = {\n  module: {\n    loaders: [\n      { test: /\\.css$/, loaders: ['style', 'css?sourceMap', 'postcss'] }\n    ]\n  }\n};\nno plugins used\n. @ai Sorry, it's problem in stylus!\n. ",
    "c0b41": "@ai thanks fixed soon :+1: \n. ",
    "oleersoy": "If I modify the input.css file to use the variable, as follows:\n``` css\n:root {\n  --varA: 'value';\n}\nh1 {\ncolor: var(--varA);\n}\n```\nThen there are no exceptions and the correct result gets logged:\n``` css\nole@MKI:~/Sandbox/test1$ node process.js \nh1 {\ncolor: 'value';\n}\n.\n\"postcss\": \"^5.0.10\",\n\"postcss-css-variables\": \"^0.5.0\"\n. Great thanks @MadLittleMods!\n. Reproduce steps: console\ngit clone git@github.com:superfly-css/superfly-css-utilities-colors.git\ncd superfly-css-utilities-colors\nnpm install\ngulp build:css\ncat target/main/css/index.css\n```\nThe ; is removed from the !important; markup in the src/main/css/index.css file.  \nIf the postcss-custom-properties processor is removed from the list of processors, then the semicolon stays intact.  To do this delete the postcss-custom-properties processor from the array of processors like this:\nconsole\natom node_modules/superfly-css-task-build/src/main/js/index.js\nAfter deletion the list of processors looks like this:\njs\nvar processors = [postcss_import, postcss_each, postcss_calc, postcss_color_function, autoprefixer, postcss_reporter({\n  clearMessages: true\n})];\nRun:\nconsole\ngulp clean\ngulp build:css\ncat target/main/css/index.css\nThe semicolon is now included in the output.\n. Sure.  This is the file content being built\n``` css\n/! superfly-css-utilities-colors | MIT License | https://github.com/superfly-css/superfly-css-utilities-colors/blob/master/LICENSE.md /\n/* =======================================\n   COLORS\n   0: Import shared color variables\n   1: Gray background color utilities\n   2: Notification background color utilities\n\n-- Naming Conventions --\n\nAll background color classes start with\n   u-color-background-.\n\n======================================= /\n/ 0 */\n@import \"superfly-css-variables-colors\";\n/ 1 /\n@each $weight in 100, 300, 400, 500, 600, 700, 900 {\n    .u-color-background-gray-$(weight) {\n      background-color: var(--color-gray-$(weight)) !important;\n    }\n}\n/ 2 /\n@each $weight in 100, 300, 500, 700, 900 {\n  @each $brand in primary, success, info, warning, danger {\n    .u-color-background-$(brand)-$(weight) {\n      background-color: var(--color-$(brand)-$(weight)) !important;\n    }\n  }\n}\n```\nWhen the build finishes it places the resulting file in target/src/main/resources, however the ; is stripped off the !important; part of the input.. Here's a few samples of the actual output:\n``` css\n.u-color-background-gray-100 {\nbackground-color: rgb(232, 232, 232) !important\n\n}\n.u-color-background-gray-300 {\nbackground-color: rgb(199, 199, 199) !important\n\n}\n.u-color-background-gray-400 {\nbackground-color: rgb(166, 166, 166) !important\n\n}\n```. Can we keep the issue open, since it correlates with other issues for 6.0?. It would be great if this could serve as one of the test cases for ensuring that it's fixed in 6.0.. Wouldn't you like to know that it fixes this issue once it's fixed?  I don't mind helping out with it.  If there is anything else I can do just let me know.. This description details one way to examine the issue:\nhttps://github.com/giakki/uncss/issues/319\nAlso if you try to run the deploy task for the repository that produces this test case you will also see it runs out of memory:\nhttps://superflycss.github.io/utilities-icons/target/test/html/\nNote the CSS file for the above test is 677,000 lines long.\nconsole\ngit clone https://github.com/superflycss/utilities-icons\ncd utilities-icons\nnpm i\nnpm run deploy\nThe only difference between npm run deploy and npm run build is that the former runs uncss also.  Build outputs files to target and deploy outputs minimized css to a deploy directory.. If you run npm run build it runs it without uncss.  If you run npm run deploy it runs the build with uncss.  The only difference is uncss.  Thanks for your input on this BTW.  Very much appreciated.\nAlso just FYI this is the build task.  And this is the deploy task.\nAlso these are the directories that the build uses. Only when running npm run deploy.  The build task (npm run build) which builds all the css runs fine.  If you run npm run build you will see that all the css that is in src/main/css get built to target/main/css.. True - we just wanted to see if you could give us some pointers on how it might be resolved?. Sounds good - thansk - Looks like the only way is to do a deep dive.. We could put it on one line or delete the mkdirp suggestion.  WDYT?. Ah - Very cool!\n. ",
    "callmez": "see https://github.com/webpack/css-loader/issues/173\n. ",
    "bameda": "Thanks!!! :smiley_cat: \n. ",
    "shellscape": "@TrySound is that something that postcss could be extended with externally?\n. @ai amazing. I'll start looking into that. thanks much!\n. How would it break the API if the argument was optional? We do this all the time in javascript...\n. @ai please give a chance to reply before closing an issue! I'd very much like to contribute to the project but its very unwelcoming to close an issue before we're given the chance to discuss it.\nif that's the case, then wouldn't it be a bug that the last Rule containing .bar{} has a raws.before: '\\n' since it has no fields as well?\nI looked for discussion or documentation on this and could find none. why would having fields or no fields change the way contents of raws - that in itself seems inconsistent. \n. thanks for the api link, not sure how i missed that one. I'll follow #199 as well!\n. \ud83c\udf89 thank you!. The ideal situation here is a slight modification that isn't necessarily for any particular sub-dialect of CSS, but rather something which would improve PostCSS. I think focusing on postcss-less as the use case probably distracted from either ignoreQuotes or an exposed token position being a net positive improvement for the lib.. @ai thanks once again . ",
    "laureanoarcanio": "Thanks for all the hard work guys!\n. ",
    "jithin1987": "@ben-eb It's true that the CSS syntax is invalid, but postcss should have failed consistently in both cases. Also its silently ignoring error, leaving it up to the user of postcss to figure out why not all files are processed. It should have thrown error and failed the task.\n. grunt-postcss 0.7.1 fixes this issue. Thanks everyone.\n. ",
    "keithjgrant": "Does this mean PostCSS should throw an error upon finding an invalid comment (//)? Because I\u2019m seeing these silently breaking my CSS, and I really wish I could get it to log an error.. ",
    "papandreou": "Found a hack that seems to do the job: https://github.com/postcss/postcss/commit/d9eaf41528cdadeb684eafa2b5660e54f758372e\nI'm taking the liberty of keeping this issue around as a feature request, though :)\n. If I wanted to do that, I would need to have mozilla.SourceMapConsumer available in my code, wouldn't I?\n. Only in the sense that it adds another dependency to my app and I need to keep it in sync with the version that postcss depends on.\n. Whoopsie, I didn't realize there were style checks. Fixed and force pushed.\n. @ai Done :)\n. Thanks a lot!\n. @ai Yeah, https://twitter.com/ondskabsgal\nMostly lurking, though.\n. ",
    "ahmadalfy": "Thank you, I plan to cover all the cases listed in the CSSWG draft\n. ",
    "Victorystick": "I see. I wasn't aware of that. Feel free to close this then.\nThis wouldn't have been an issue if postcss were to include named exports for those components so that\njs\nimport { Parser } from 'postcss';\nwere possible. But CommonJS makes this difficult.\n. I know @Rich-Harris has argumented against using string paths as an API, since it prevents refactoring the directory structure of a project (which is arguably an implementation detail).\nWhat we want is for developers to be able to select components at a more granular level than the entire package. ES modules makes this possible without using string paths. I'd love to help out of I can.\n. ",
    "alebelcor": "My pleasure!\n. ",
    "ivoputzer": "Unfortunately I'm not using postcss directly; see the other issue here.\nHowever I'm running v0.10.40, Promises are yet not part of the API; They should have been implemented from v0.12 onwards!\n. thanks @ben-eb! i already submitted a pr to the guys of gulp-autoprefix ;)\n. ",
    "lukelarsen": "@ben-eb Yeah I'll look into it. I'm primarily a designer. Sometimes code stuff comes slow to me. I'll get learning about testing it though. Thanks.\n. Thanks!\n. I can almost get to this. Work has been really busy and I've been busy preparing for the holidays coming up. I've never done testing like this so I plan on going through @ben-eb example to figure it out.\n. Yes a pull request would be helpful. I'm just slammed at work and have a freelance project going. This is towards the bottom of the list right now... sorry and thanks for checking in.\n. ",
    "roydukkey": "It seems Visual Studio includes its own version of gulp....... Referencing all $(DevEnvDir) external tools last allows VS to pick up the correct version of gulp.\n\n. ",
    "matijs": "Unticking $(DevEnvDir)\\Extensions\\Microsoft\\Web Tools\\External did the trick for me. It also allowed me to only have Gulp installed locally.\n. ",
    "oyeanuj": "@davidtheclark Did any of the things in your scut utility make it as a plugin? \n. ",
    "Siilwyn": "Wow, that was a fast merge.\nThanks! Looking forward to the tweet. :smiley_cat:\n. Aw, that's a bummer @himynameisdave...\n. I don't think much people go into the node_modules directory, open postcss and then read the docs offline. I could be wrong so if anybody is against removing the docs from the packaged version of postcss, speak up.\nThough for anybody wanting to read the docs offline cloning this repository would a good option. Also the readme file is included which contains some examples of how to use postcss.\n. @TrySound exactly, I think the readme.md is enough for most people.\nEdit: Besides the docs, why include the TypeScript source?\n. In hindsight, and after all of your replies (which I thank you for) I see why this isn't such a good idea. I still don't fancy the idea of including the TypeScript source but I understand why it is included.\n:outbox_tray: \n. Well stylefmt has a different purpose from the other two and is more similar to perfectionist. For postcss-sorting I have no idea why @hudochenkov didn't join forces as css-declaration-sorter was already there.\nI do have a hunch that he has a different vision on this subject than me and that's probably the reason he created a seperate plugin. postcss-sorting can also clean up empty lines, sort selectors and sort prefixed declarations. While css-declaration-sorter only moves declarations in source files which makes it roughly two times faster than postcss-sorting. In my opinion this also keeps the plugin much simpler by design and configuration following the Unix philosophy: \u201cdo one thing and do it well\u201d.\n. Not the only thing, as I stated above postcss-sorting does more than just sorting declarations (thus overlapping funcionality that stylefmt and perfectionist have). Also the predefined configurations are different, the configurations of css-declarations-sorter are approved by their authors and as I said in my opinion much simpler.\nI would be open to a conversation on if we can merge these two plugins together, but in the meantime I would really appreciate if css-declaration-sorter is also listed.\n. What are your thoughts @hudochenkov?\n. @hudochenkov thank you for clearing that up, that's a bit of unfortunate timing.\nFor the aim of being a part of high-level tools I have the same idea for css-declaration-sorter but even a bit smaller as I mentioned before.\nThe performance may indeed not be directly noticeable if used without any other processing, my idea of performance is that it should be as fast as possible so that when building the time of all build steps together is as short as possible. Because postcss-sorting also cleans newlines and processes at-rules it will always be slower than css-declaration-sorter, if I find the time I'll look if there are other performance wins for postcss-sorting to get.\n. ",
    "tenhobi": "@TrySound I do not want to use the value parser plugin, it is to masive. The extend of the String prototype was just for a test, I wanted to use code as is in JSFiddle example.\nI just want to get decl value as a string and replace all occurrences, not only the first one.\ndecl.value = decl.value.replace(new RegExp(_what_, \"g\"), _with_);\nThis should work (it works here http://jsfiddle.net/5xnq16ff), isn't it?\n. ",
    "ngduc": "@ben-eb gave a hint about using @reference. I'll try & update this. Thanks.\n``` css\n@reference {\n    @import 'bootstrap.css';\n}\n.myBtn {\n    @references .btn .btn-default .btn-text;\n    color: red\n}\n```\n. postcss-reference actually works for me. @davidtheclark: The above example is missing commas. Updated:\n```\n@reference {\n    @import 'bootstrap.css';\n}\n.myBtn {\n    @references .btn, .btn-default, .btn-text;\n    color: red\n}\n```\nBut look like it does not bring over :hover styles. I will file a bug for that.\n. ",
    "egoist": "well, Rollup is considered typo...\n. gotcha.\n. Now using the Promise.\n. @TrySound \ud83d\ude02 sorry for that, fixed.\n. @TrySound sure, later I'll add some to that repo.\n. ",
    "jakelazaroff": "Whoops, my bad!\n. ",
    "crimx": "@ai This might explain why. it's also useful to extension content script injection.\n. Done. Thank you for being patient and do excuse my poor English. Feel free to point out anything I've done wrong :).\n. ",
    "amaranter": "This works only with classes, please look at my tests. Thanks:)\n. Thank you! :+1:\nHave any problem or conflcit with merge? I dont see in plugin list.\n. ",
    "DPr00f": "Thanks, I know it wasn't the best way to contact. Sorry for that.\n. ",
    "saleo3": "Did you solve it? because I had the same issue and I fixed doing this:\nExtractTextPlugin.extract('style-loader', 'css-loader!postcss-loader')\nand by the way you can omit the -loader like this:\nExtractTextPlugin.extract('style', 'css!postcss')\n. ",
    "komlev": "Done\n. Done\n. ",
    "ctxhou": "ok, I fix it now.\n. ",
    "simeydotme": "thanks @ai ! :)\nFixing now, although... \nhttps://github.com/simeydotme/postcss/blame/master/docs/plugins.md#L228-L229\nhad me a little confused :)\n. Thanks! :bow: \n. ",
    "archana-s": "please let me know if something needs to be done. \n. ",
    "moshemo": "Thanks, that did it.  Much appreciated.\nI will also consider looking at the at-rule option, thanks again. \n. I thought it would be nice to use es6 in the postcss plugin that I'm writing.\n. Thanks.  I'll see if I can get it working.\n. I have been trying to create something similar using semantic-ui (personally speaking, I like semantic-ui more than bootstrap).  \nMy vision is to have the basic CSS feel like native CSS with atrules for variables.  For instance:  \n```\n@primary-color: #123450;\nbutton {\n    button: button;\n    button-color:  #abcdef;\n    button-background-color: @primary-color;\n    }\nbutton.disabled {\n    button: disabled;\n }\n```\nI am working on a button version right now and then hope to work on a menu version.\n. I must admit, I am new to creating plugins, but there is one thing I don't understand.  Won't the plugin or component library have documentation and won't that documentation explain what the syntax is referring to?\nIf you are talking about a developer who has had the css code passed on to them -- won't they know that button: disabled is not standard CSS just like @bootstrap button is not standard CSS?\n. In terms of W3C adding 'button' in the future.  Is there any indication that that is in the works?  If not, won't it be years until we have to worry about such an issue?\nI understand the desire to have the code be future proof, but ease of use and programming is also a factor -- is it not?  I look at @bootstrap-globals and @bootstrap button and see foreign code that I don't understand.  I find it hard to initially wrap my head around it.   \nI see button: disabled; and even if I don't understand it, I at least feel at home.\n. @ai  I hear that and it makes sense.  I would still, though, like to see a way to simplify the code.  Perhaps something like this:  \n.my-project-button {\n   @button-color:  red; \n}\nOr, perhaps this:\n.my-project-button {\n      @bootstrap-button-color:  red;\n}\nWhat I would personally like to avoid is having the multi-layered curly brackets.  I could easily live with the @ sign (although personally I would like to not have it).  What I don't like is  the rule within the rule.\nOne other idea -- in terms of the @bootstrap prefix.  Perhaps someone could define at the beginning of the document which library they would like to use in general or choose different libraries for different elements (with the ability to override).\nChoosing a library would look something like this:\n@framework semantic-ui\nIn terms of individual elements, I have something like the following in mind:\n```\n@buttons bootstrap\n@menus semantic-ui\n@table foundation\n.my-button {\n       @button-color: red;\n }\n.my-other-button {\n       @foundation-button-color:  green;\n  }\n.my-menu {\n       @menu-background-color: blue;\n }\n.my-table{\n       @table: hover;\n }\n```\n. Then how about creating a variable symbol (such as s dollar sign) and doing something like this: \n$button-color: red;\n. Or, alternatively:  \n@button-color red\n. @TrySound  I have been reading the api documentation, but am having trouble.  I'll check out the gitter channel.  Thanks.\n. ",
    "fernandofleury": "I would like to help on it.\n. anyone working on it already?\n. ",
    "LeonFedotov": "Cool :+1:\n. ",
    "tnga": "For node.js, i use to install it via the software manager on my linux distro; but i am surprise when get current update to 0.10.45 when it's officially 4.2.5 for LTS and 5.5.0 for latest stable version on official node.js website.\nHowever thank for your help about Promise polyfill.\n. ",
    "studiosciences": "My pleasure!\n. ",
    "igncp": "Right! You had it like this before... :sweat_smile:\nAdding postcss to a webpack bundle might be a rare case (normally it is used as a loader) but if you want to support that case without explicit loaders, I guess that another approach would be to write a script to bump the version automatically... anyway it is not a big deal, great project!\n. ",
    "tivac": "Thanks, I'll give that a shot!\nPostCSS is great, no need to apologize :+1: \n. Just in case this ends up helping someone else I wrote a little proof-of-concept rollup plugin that uses webpack to bundle postcss.\nThis is a very silly thing to do, and I really wish it wasn't necessary. Seems to work ok though?. ",
    "pygy": "Edit: retracted at @tivac's request :-)\n. ",
    "dan-gamble": "Whoops! Will open another PR quickly, sorry :)\n. Whoops, looks like it to be fair. Oh well, also noticed mine doesn't handle font!\n. I remember when i came in a while ago when there was only 2 and that still threw me a bit. I agree with @jonathantneal 1st point\n. ",
    "snide": "Strange. Connection being refused. Might be a firewall issue at work. Works fine on my phone. Thanks for checking.\n. ",
    "Arcanemagus": "Just to be clear, it's pretty simple to work around this bug in the editor packages by clamping the maximum character to the end of the line (Atom actually does this automatically if you feed it an invalid point, we just somewhat recently put in a warning to expose issues like this to see when a linter was feeding bad data to a helper library).\nLinters are meant to expose issues though, not create them, so this should be fixed at the source instead of worked around :wink:.\n. ",
    "timaschew": "Assumed that it's not necessary, becaues they really simple.\nBoth files located in src/styles\nstyles.css\n``` css\n@import \"vendor.css\"\n$blue: #888;\n$column: 200px;\n.menu {\n    width: calc(4 * $column);\n    background-color: #ccc;\n}\n.menu_link {\n    background: $blue;\n    width: $column;\n    a {\n      font-weight: bold;\n    }\n}\n```\nvendor.css\ncss\n.foobar {\n    color: #ccc;\n}\nThe file is loaded by a JavaScript file via require('../styles/styles.css').\nIt's working if I load the vendor file directly or if I put the content of the vendor into the styles file.\n. Oops. I add the semicolon: @import \"vendor.css\"; \nbut still have the same error message.\nThe object again:\njs\nRule {\n  nodes:\n   [ Declaration {\n       type: 'decl',\n       parent: [Circular],\n       source: [Object],\n       before: '\\n    ',\n       prop: 'color',\n       between: ': ',\n       value: '#ccc' } ],\n  type: 'rule',\n  parent:\n   Root {\n     raws: { semicolon: false, after: '\\n' },\n     type: 'root',\n     nodes: [ [Circular], [Object], [Object], [Object] ],\n     source: { input: [Object], start: [Object] },\n     lastEach: 51,\n     indexes: {},\n     _autoprefixerDisabled: false,\n     variables: { blue: '#888', column: '200px' } },\n  source:\n   { start: { line: 1, column: 1 },\n     input:\n      Input {\n        css: '.foobar {\\n    color: #ccc;\\n}\\n',\n        safe: false,\n        file: '/Users/timaschew/dev/redux-boilerplate/src/styles/vendor.css',\n        from: '/Users/timaschew/dev/redux-boilerplate/src/styles/vendor.css' },\n     end: { line: 3, column: 1 } },\n  before: '',\n  between: ' ',\n  selector: '.foobar',\n  semicolon: true,\n  after: '\\n',\n  lastEach: 9,\n  indexes: {},\n  _autoprefixerDisabled: false }\n. @ai I checked the stacktrace, it didn't change\n@TrySound \nturned off precss -> no changes, same stack\nturned off cssnext, just pass autoprefixer -> it works!\nSo it's a cssnext issue?\n. BTW: If I omit the semicolon without cssnext, it just compile, but it's interpreted as an media query and the output is\n``` css\n@media $blue: #888 {\n.foobar {\n    color: #ccc;\n}\n\n}\n```\n. @TrySound yes I just wanted to confirm or answer to what @ai said in his comment  :)\n@jeddy3 You're right, it's working with cssnext if I use precss before, thank you!\nI cathed the order up from these examples\nhttps://github.com/postcss/postcss-loader#usage, of course it's autoprefixer here and not cssnext\nhttps://github.com/lcjnil/react-redux-scaffold/blob/master/webpack.config.js#L127-L135\n. @ai I would suggest to provide a PR with a note or/and an example in the readme about the order in combination with cssnext. Maybe in both \nhttps://github.com/postcss/postcss#webpack\nand\nhttps://github.com/postcss/postcss-loader\nAnd maybe also in combination with the postcss-import, otherwise it isn't really usefull in development mode.\n. postcss 5.0.14 but I used cssnext and not postcss-cssnext :/\n\"Upgrading\" to postcss-cssnext fixes the error, BUT there was some other strange thing:\n@import \"vendor.css\" results into an error because _vendor could not found. Why it's searching with an underscore prefix? I tried to write @require \"vendor.css\" which works\n. @TrySound thanks, I created an issue here: https://github.com/jonathantneal/postcss-partial-import/issues/12\n. You're right it should be postcss-cssnext not cssnext.\nBut what you mean with it  doesn\u2019t use Autoprefixer ?\nThis line showing it is: https://github.com/MoOx/postcss-cssnext/blob/master/src/features.js#L70\n. > Nice work. But I think it is a wrong way to solve this real pproblem.\nWhich problem? :D\nI totally agree with you about we need need more task focused plugin packs, rather than all-in-one. \nThe table should be just an overview for people which might be interested in using some of the packs and see what they are actual use internally.\nOr maybe to prevent from creating new packs which would contain most of plugins which already exist in existing packs.\n\nOther solution, we should find same plugins with same settings and disable it.\n\nYou mean find packs with same plugins?\nBut right this case can be done with the table.\n\nbut I afraid that link from PostCSS docs will increase a more bad plugin packs.\n\nDon't really understand why? We can agree on list only packs which are only listed on\nhttp://postcss.parts/\nand/or\nhttps://github.com/postcss/postcss/blob/master/docs/plugins.md\nOr how it can increase more bad plugin packs?\n. Okay, but this can be prevented by saying explicitly that it's not ok. Anyway.\nI completed the table and wrote down some short FAQs, maybe you can check if I missed something or misunderstood something. \nhttps://github.com/timaschew/postcss-compare-packs/blob/master/README.md#what-does-it-mean-if-a-plugin-exists-in-more-than-one-pack\n. Yep sounds great :)\n. @maximkoretskiy\nWhy you don't use the dates from the releases page? https://github.com/postcss/postcss/releases\n. I think it would be easier to write it in one line with the version number, this way it's less typing :)\nBut it's your decision ;)\n. Seems to be used for some projects: https://github.com/nodejs/node/blob/master/CHANGELOG.md ;)\nBut it's up to you :)\n. ",
    "mattludwigs": "@TrySound here are my loaders:\n``\nmodule : {\n    noParse : [\n      /\\.min\\.js$/,\n      /lodash\\/index\\.js$/,\n      /immutable\\/dist\\/immutable\\.js$/,\n      /bluebird\\/js\\/browser\\/bluebird\\.js$/,\n      /\\.json$/,\n      /qs\\/dist\\/qs\\.js$/,\n    ],\n    loaders : [\n      {\n        test : /\\.js$/,\n        // eventually, Joi and Hoek will probably ship with browser builds, but\n        // until then, they need to run through Babel. once they provide browser\n        // builds, then we can change this to be an alias likeqs`\n        include : [\n          /\\/joi\\//,\n          /\\/hoek\\//,\n        ],\n        loader : 'babel',\n        query : {\n          stage : 0,\n          optional : [ 'runtime' ],\n          plugins : BUILD_STATIC ? [] : [ 'react-display-name', 'react-transform' ],\n          extra : BUILD_STATIC ? {} : {\n            'react-transform' : {\n              transforms : [{\n                transform : 'react-transform-hmr',\n                imports : ['react'],\n                locals : ['module'],\n              }],\n            },\n          },\n        },\n      },\n      {\n        test : /.jsx|js$/,\n        exclude : /node_modules/,\n        loader : 'babel',\n        query : {\n          stage : 0,\n          optional : [ 'runtime' ],\n          plugins : BUILD_STATIC ? [] : [ 'react-display-name', 'react-transform' ],\n          extra : BUILD_STATIC ? {} : {\n            'react-transform' : {\n              transforms : [{\n                transform : 'react-transform-hmr',\n                imports : ['react'],\n                locals : ['module'],\n              }],\n            },\n          },\n        },\n      },\n      {\n        test : /.json$/,\n        loader : 'json',\n      },\n      {\n        test : /.css$/,\n        loader : ExtractTextPlugin.extract('css?sourceMap'),\n      },\n  // atlas assets\n  {\n    test : /\\.scss$/,\n    exclude : [ path.resolve(__dirname, 'lease') ],\n    loader : ExtractTextPlugin.extract('css?sourceMap!autoprefixer?browsers=last 3 versions!sass?sourceMap'),\n  },\n  {\n    test : /\\.(jpe?g|png|gif|svg|woff|eot|ttf|woff2)$/,\n    exclude : [ path.resolve(__dirname, 'lease') ],\n    loader : 'url?limit=10000&name=[sha512:hash:base64:7].[ext]',\n  },\n\n  // lease assets (isomorphic)\n  {\n    test : isomorphicToolsPlugin.regular_expression('styles'),\n    include : [ path.resolve(__dirname, 'lease') ],\n    loader : ExtractTextPlugin.extract('css!autoprefixer?browsers=Chrome >= 13!sass'),\n  },\n  {\n    test : isomorphicToolsPlugin.regular_expression('images'),\n    include : [ path.resolve(__dirname, 'lease') ],\n    loader : 'file?name=[sha512:hash:base64:7].[ext]',\n  },\n  {\n    test : isomorphicToolsPlugin.regular_expression('fonts'),\n    include : [ path.resolve(__dirname, 'lease') ],\n    loader : 'url',\n  },\n],\n\n},\n};\n.\nModuleBuildError: Module build failed: ModuleBuildError: Module build failed: TypeError: Cannot read property 'constructor' of null\n    at clone (/home/runner/cahatlas.com/node_modules/postcss-merge-rules/dist/lib/clone.js:12:25)\n    at clone (/home/runner/cahatlas.com/node_modules/postcss-merge-rules/dist/lib/clone.js:29:25)\n    at clone (/home/runner/cahatlas.com/node_modules/postcss-merge-rules/dist/lib/clone.js:29:25)\n    at /home/runner/cahatlas.com/node_modules/postcss-merge-rules/dist/lib/clone.js:26:24\n    at Array.map (native)\n    at clone (/home/runner/cahatlas.com/node_modules/postcss-merge-rules/dist/lib/clone.js:25:31)\n    at partialMerge (/home/runner/cahatlas.com/node_modules/postcss-merge-rules/dist/index.js:105:48)\n    at /home/runner/cahatlas.com/node_modules/postcss-merge-rules/dist/index.js:184:17\n    at /home/runner/cahatlas.com/node_modules/postcss/lib/container.js:115:34\n    at /home/runner/cahatlas.com/node_modules/postcss/lib/container.js:73:26\n    at Root.each (/home/runner/cahatlas.com/node_modules/postcss/lib/container.js:60:22)\n    at Root.walk (/home/runner/cahatlas.com/node_modules/postcss/lib/container.js:72:21)\n    at Root.walkRules (/home/runner/cahatlas.com/node_modules/postcss/lib/container.js:113:25)\n    at /home/runner/cahatlas.com/node_modules/postcss-merge-rules/dist/index.js:190:13\n    at LazyResult.run (/home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:206:20)\n    at /home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:120:37\n    at LazyResult.asyncTick (/home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:134:15)\n    at /home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:132:27\n    at LazyResult.asyncTick (/home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:134:15)\n    at /home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:132:27\n    at LazyResult.asyncTick (/home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:134:15)\n    at /home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:132:27\n    at LazyResult.asyncTick (/home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:134:15)\n    at /home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:132:27\n    at LazyResult.asyncTick (/home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:134:15)\n    at /home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:132:27\n    at LazyResult.asyncTick (/home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:134:15)\n    at /home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:132:27\n    at LazyResult.asyncTick (/home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:134:15)\n    at /home/runner/cahatlas.com/node_modules/postcss/lib/lazy-result.js:132:27\n    at DependenciesBlock.onModuleBuildFailed (/home/runner/cahatlas.com/node_modules/webpack-core/lib/NormalModuleMixin.js:315:19)\n    at nextLoader (/home/runner/cahatlas.com/node_modules/webpack-core/lib/NormalModuleMixin.js:270:31)\n    at /home/runner/cahatlas.com/node_modules/webpack-core/lib/NormalModuleMixin.js:292:15\n    at context.callback (/home/runner/cahatlas.com/node_modules/webpack-core/lib/NormalModuleMixin.js:148:14)\n    at Object. (/home/runner/cahatlas.com/node_modules/css-loader/lib/loader.js:32:18)\n    at /home/runner/cahatlas.com/node_modules/css-loader/lib/processCss.js:211:3\n    at DependenciesBlock.onModuleBuildFailed (/home/runner/cahatlas.com/node_modules/webpack-core/lib/NormalModuleMixin.js:315:19)\n    at DependenciesBlock. (/home/runner/cahatlas.com/node_modules/webpack-core/lib/NormalModuleMixin.js:228:39)\n    at context.callback (/home/runner/cahatlas.com/node_modules/webpack-core/lib/NormalModuleMixin.js:148:14)\n    at Object. (/home/runner/cahatlas.com/node_modules/extract-text-webpack-plugin/loader.js:82:20)\n    at Compiler. (/home/runner/cahatlas.com/node_modules/webpack/lib/Compiler.js:204:18)\n    at Compiler. (/home/runner/cahatlas.com/node_modules/webpack/lib/Compiler.js:395:18)\n    at /home/runner/cahatlas.com/node_modules/tapable/lib/Tapable.js:99:11\n    at Compilation. (/home/runner/cahatlas.com/node_modules/webpack/lib/Compilation.js:433:11)\n    at errorAndCallback (/home/runner/cahatlas.com/node_modules/webpack/lib/Compilation.js:340:3)\n    at Compilation. (/home/runner/cahatlas.com/node_modules/webpack/lib/Compilation.js:400:12)\n    at /home/runner/cahatlas.com/node_modules/webpack/lib/Compilation.js:123:4\n    at Array.forEach (native)\n    at callback (/home/runner/cahatlas.com/node_modules/webpack/lib/Compilation.js:122:12)\n    at Compilation. (/home/runner/cahatlas.com/node_modules/webpack/lib/Compilation.js:137:11)\n    at DependenciesBlock. (/home/runner/cahatlas.com/node_modules/webpack/lib/NormalModule.js:85:18)\n    at DependenciesBlock.onModuleBuildFailed (/home/runner/cahatlas.com/node_modules/webpack-core/lib/NormalModuleMixin.js:315:10)\n    at nextLoader (/home/runner/cahatlas.com/node_modules/webpack-core/lib/NormalModuleMixin.js:270:31)\n    at /home/runner/cahatlas.com/node_modules/webpack-core/lib/NormalModuleMixin.js:292:15\n    at context.callback (/home/runner/cahatlas.com/node_modules/webpack-core/lib/NormalModuleMixin.js:148:14)\n    at Object. (/home/runner/cahatlas.com/node_modules/css-loader/lib/loader.js:32:18)\n    at /home/runner/cahatlas.com/node_modules/css-loader/lib/processCss.js:211:3\nmake: *** [build] Error 1\n```\n. @TrySound I have no idea where the css issue would or even could be in the project. Do you believe there is a css issue that could be causing this?\n. sorry wrong button, one second\n. @TrySound do you need the css that is wrong, or just some css?\n. @TrySound Okay, I will look for it, but I will need to some digging around the css files.\n. @TrySound I found the issue. It has to do with the not putting quotes here:\nfont-family: FontAwesome;\nI guess autoprefixer updated a few hours ago that might have broken our build making custom fonts need quotes.\nThank you for you help on this issue.\nHowever, do you think postcss should be doing a null check on obj before trying to call the method?\n. @TrySound trying to figure out where mergeRules: false should go, any suggestions?\n. @TrySound looks like cssnano 3.5.0 broken our build\nhttps://github.com/ben-eb/cssnano/releases\nWe were on 3.4.0, and they release 3.5.0 about 5 hours ago when our builds stopped working.\n. @TrySound that did not fix it unfortunately. We are going to try mergeRules.\n. @TrySound, @ben-eb  I am thinking this might be a compound issue between cssnano and postcss packages.\nWe have shrink wrapped our production environment that uses cssnano 3.4.0 and the build works there.\nBut it does not work with cssnano 3.5.x. I am not sure exactly which package the issue falls in or if it is between cssnano or postcss (or even another post css package).\nI am noticing there is never any checks on the obj to make sure it is not null or an empty object which either case can lead to errors.\nI did see:\nif (typeof obj !== \"object\")\nsomewhere in these files, but typeof null is \"object\".\n. Yes, thank you all for your time and quick responses!\n. ",
    "jwdotjs": "Hey all,\nOn Matt's team and we have a small sample. I'm not sure if it's relevant or not but the original code here fails to build:\n``` scss\n$theme-style: \"rounded\";\n$theme-type: \"material-design\";\n.md-shadow-z-2 {\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.22);\n}\n$general-border-radius: 4px !default;\n@mixin ease-out($duration: 450ms, $property: all, $delay: 0ms) {\n  transition: $property $duration cubic-bezier(0.23, 1, 0.32, 1) $delay;\n}\n@mixin opacity($value, $important: \"\") {\n  opacity: $value #{$important};\n  filter: alpha(opacity=#{$value * 100}) #{$important};\n}\n@if $theme-type == \"material-design\" {\n  .dropdown-menu {\n    @extend .md-shadow-z-2-i;\n    border: 0 !important;\n    border-radius: $general-border-radius !important;\n    margin: 0;\n    &:before,\n    &:after {\n      display: none !important;\n    }\n  }\n  .btn-group {\n    > .dropdown-menu {\n      @extend .md-shadow-z-2-i;\n      @include opacity(0);\n      margin-top: 0px;\n    }\n    &.dropup {\n      > .dropdown-menu {\n        margin-top: 0px;\n        margin-bottom: 0px;\n      }\n    }\n  }\n  .btn-group.open {\n    > .dropdown-menu {\n      @include ease-out(1500ms, opacity, 0.1ms);\n      @include opacity(1);\n    }\n  }\n}\n```\nand commenting out the @if at the bottom of the file will allow it to build.\nDoes that help?\n. Our builds started failing 6 hours ago. Previous to that ~6 hour mark, the builds were passing. \ndiff --git a/npm-shrinkwrap.json b/npm-shrinkwrap.json\nindex 427fdcd..e7fb2c6 100644\n--- a/npm-shrinkwrap.json\n+++ b/npm-shrinkwrap.json\n@@ -4629,12 +4629,12 @@\n     },\n     \"postcss-calc\": {\n       \"version\": \"5.2.0\",\n-      \"from\": \"postcss-calc@>=5.2.0 <6.0.0\",\n+      \"from\": \"postcss-calc@>=5.0.0 <6.0.0\",\n       \"resolved\": \"http://registry.npmjs.org/postcss-calc/-/postcss-calc-5.2.0.tgz\"\n     },\n     \"postcss-colormin\": {\n       \"version\": \"2.1.8\",\n-      \"from\": \"postcss-colormin@>=2.1.8 <3.0.0\",\n+      \"from\": \"postcss-colormin@>=2.1.7 <3.0.0\",\n       \"resolved\": \"http://registry.npmjs.org/postcss-colormin/-/postcss-colormin-2.1.8.tgz\"\n     },\n     \"postcss-convert-values\": {\n@@ -4643,24 +4643,24 @@\n       \"resolved\": \"http://registry.npmjs.org/postcss-convert-values/-/postcss-convert-values-2.3.4.tgz\"\n     },\n     \"postcss-discard-comments\": {\n-      \"version\": \"2.0.4\",\n-      \"from\": \"postcss-discard-comments@>=2.0.4 <3.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss-discard-comments/-/postcss-discard-comments-2.0.4.tgz\"\n+      \"version\": \"2.0.3\",\n+      \"from\": \"postcss-discard-comments@>=2.0.2 <3.0.0\",\n+      \"resolved\": \"http://registry.npmjs.org/postcss-discard-comments/-/postcss-discard-comments-2.0.3.tgz\"\n     },\n     \"postcss-discard-duplicates\": {\n-      \"version\": \"2.0.1\",\n-      \"from\": \"postcss-discard-duplicates@>=2.0.1 <3.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss-discard-duplicates/-/postcss-discard-duplicates-2.0.1.tgz\"\n+      \"version\": \"2.0.0\",\n+      \"from\": \"postcss-discard-duplicates@>=2.0.0 <3.0.0\",\n+      \"resolved\": \"http://registry.npmjs.org/postcss-discard-duplicates/-/postcss-discard-duplicates-2.0.0.tgz\"\n     },\n     \"postcss-discard-empty\": {\n-      \"version\": \"2.0.1\",\n-      \"from\": \"postcss-discard-empty@>=2.0.1 <3.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss-discard-empty/-/postcss-discard-empty-2.0.1.tgz\"\n+      \"version\": \"2.0.0\",\n+      \"from\": \"postcss-discard-empty@>=2.0.0 <3.0.0\",\n+      \"resolved\": \"http://registry.npmjs.org/postcss-discard-empty/-/postcss-discard-empty-2.0.0.tgz\"\n     },\n     \"postcss-discard-unused\": {\n-      \"version\": \"2.2.1\",\n-      \"from\": \"postcss-discard-unused@>=2.2.1 <3.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss-discard-unused/-/postcss-discard-unused-2.2.1.tgz\"\n+      \"version\": \"2.2.0\",\n+      \"from\": \"postcss-discard-unused@>=2.1.0 <3.0.0\",\n+      \"resolved\": \"http://registry.npmjs.org/postcss-discard-unused/-/postcss-discard-unused-2.2.0.tgz\"\n     },\n     \"postcss-filter-plugins\": {\n       \"version\": \"2.0.0\",\n@@ -4668,9 +4668,9 @@\n       \"resolved\": \"http://registry.npmjs.org/postcss-filter-plugins/-/postcss-filter-plugins-2.0.0.tgz\"\n     },\n     \"postcss-merge-idents\": {\n-      \"version\": \"2.1.5\",\n-      \"from\": \"postcss-merge-idents@>=2.1.5 <3.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss-merge-idents/-/postcss-merge-idents-2.1.5.tgz\"\n+      \"version\": \"2.1.4\",\n+      \"from\": \"postcss-merge-idents@>=2.1.3 <3.0.0\",\n+      \"resolved\": \"http://registry.npmjs.org/postcss-merge-idents/-/postcss-merge-idents-2.1.4.tgz\"\n     },\n     \"postcss-merge-longhand\": {\n       \"version\": \"2.0.1\",\n@@ -4679,7 +4679,7 @@\n     },\n     \"postcss-merge-rules\": {\n       \"version\": \"2.0.3\",\n-      \"from\": \"postcss-merge-rules@>=2.0.3 <3.0.0\",\n+      \"from\": \"postcss-merge-rules@>=2.0.1 <3.0.0\",\n       \"resolved\": \"http://registry.npmjs.org/postcss-merge-rules/-/postcss-merge-rules-2.0.3.tgz\"\n     },\n     \"postcss-message-helpers\": {\n@@ -4694,7 +4694,7 @@\n     },\n     \"postcss-minify-gradients\": {\n       \"version\": \"1.0.1\",\n-      \"from\": \"postcss-minify-gradients@>=1.0.1 <2.0.0\",\n+      \"from\": \"postcss-minify-gradients@>=1.0.0 <2.0.0\",\n       \"resolved\": \"http://registry.npmjs.org/postcss-minify-gradients/-/postcss-minify-gradients-1.0.1.tgz\"\n     },\n     \"postcss-minify-params\": {\n@@ -4703,9 +4703,9 @@\n       \"resolved\": \"http://registry.npmjs.org/postcss-minify-params/-/postcss-minify-params-1.0.4.tgz\"\n     },\n     \"postcss-minify-selectors\": {\n-      \"version\": \"2.0.4\",\n-      \"from\": \"postcss-minify-selectors@>=2.0.4 <3.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss-minify-selectors/-/postcss-minify-selectors-2.0.4.tgz\"\n+      \"version\": \"2.0.3\",\n+      \"from\": \"postcss-minify-selectors@>=2.0.1 <3.0.0\",\n+      \"resolved\": \"http://registry.npmjs.org/postcss-minify-selectors/-/postcss-minify-selectors-2.0.3.tgz\"\n     },\n     \"postcss-modules-extract-imports\": {\n       \"version\": \"1.0.0\",\n@@ -4733,19 +4733,19 @@\n       \"resolved\": \"http://registry.npmjs.org/postcss-normalize-charset/-/postcss-normalize-charset-1.1.0.tgz\"\n     },\n     \"postcss-normalize-url\": {\n-      \"version\": \"3.0.7\",\n-      \"from\": \"postcss-normalize-url@>=3.0.7 <4.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss-normalize-url/-/postcss-normalize-url-3.0.7.tgz\"\n+      \"version\": \"3.0.5\",\n+      \"from\": \"postcss-normalize-url@>=3.0.4 <4.0.0\",\n+      \"resolved\": \"http://registry.npmjs.org/postcss-normalize-url/-/postcss-normalize-url-3.0.5.tgz\"\n     },\n     \"postcss-ordered-values\": {\n-      \"version\": \"2.1.0\",\n-      \"from\": \"postcss-ordered-values@>=2.1.0 <3.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss-ordered-values/-/postcss-ordered-values-2.1.0.tgz\"\n+      \"version\": \"2.0.2\",\n+      \"from\": \"postcss-ordered-values@>=2.0.2 <3.0.0\",\n+      \"resolved\": \"http://registry.npmjs.org/postcss-ordered-values/-/postcss-ordered-values-2.0.2.tgz\"\n     },\n     \"postcss-reduce-idents\": {\n-      \"version\": \"2.2.2\",\n-      \"from\": \"postcss-reduce-idents@>=2.2.2 <3.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss-reduce-idents/-/postcss-reduce-idents-2.2.2.tgz\"\n+      \"version\": \"2.2.1\",\n+      \"from\": \"postcss-reduce-idents@>=2.2.1 <3.0.0\",\n+      \"resolved\": \"http://registry.npmjs.org/postcss-reduce-idents/-/postcss-reduce-idents-2.2.1.tgz\"\n     },\n     \"postcss-reduce-transforms\": {\n       \"version\": \"1.0.3\",\n@@ -4759,18 +4759,18 @@\n     },\n     \"postcss-selector-parser\": {\n       \"version\": \"1.3.1\",\n-      \"from\": \"postcss-selector-parser@>=1.3.1 <2.0.0\",\n+      \"from\": \"postcss-selector-parser@>=1.3.0 <2.0.0\",\n       \"resolved\": \"http://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-1.3.1.tgz\"\n     },\n     \"postcss-svgo\": {\n       \"version\": \"2.1.1\",\n-      \"from\": \"postcss-svgo@>=2.1.1 <3.0.0\",\n+      \"from\": \"postcss-svgo@>=2.0.4 <3.0.0\",\n       \"resolved\": \"http://registry.npmjs.org/postcss-svgo/-/postcss-svgo-2.1.1.tgz\"\n     },\n     \"postcss-unique-selectors\": {\n-      \"version\": \"2.0.2\",\n-      \"from\": \"postcss-unique-selectors@>=2.0.2 <3.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss-unique-selectors/-/postcss-unique-selectors-2.0.2.tgz\"\n+      \"version\": \"2.0.1\",\n+      \"from\": \"postcss-unique-selectors@>=2.0.1 <3.0.0\",\n+      \"resolved\": \"http://registry.npmjs.org/postcss-unique-selectors/-/postcss-unique-selectors-2.0.1.tgz\"\n     },\n     \"postcss-value-parser\": {\n       \"version\": \"3.2.3\",\n@@ -4779,7 +4779,7 @@\n     },\n     \"postcss-zindex\": {\n       \"version\": \"2.0.1\",\n-      \"from\": \"postcss-zindex@>=2.0.1 <3.0.0\",\n+      \"from\": \"postcss-zindex@>=2.0.0 <3.0.0\",\n       \"resolved\": \"http://registry.npmjs.org/postcss-zindex/-/postcss-zindex-2.0.1.tgz\"\n     },\n     \"postgres-array\": {\ndiff --git a/npm-shrinkwrap.json b/npm-shrinkwrap.json\nindex e7fb2c6..e400330 100644\n--- a/npm-shrinkwrap.json\n+++ b/npm-shrinkwrap.json\n@@ -1032,9 +1032,9 @@\n       \"resolved\": \"http://registry.npmjs.org/cssesc/-/cssesc-0.1.0.tgz\"\n     },\n     \"cssnano\": {\n-      \"version\": \"3.5.1\",\n+      \"version\": \"3.4.0\",\n       \"from\": \"cssnano@>=2.6.1 <4.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/cssnano/-/cssnano-3.5.1.tgz\"\n+      \"resolved\": \"http://registry.npmjs.org/cssnano/-/cssnano-3.4.0.tgz\"\n     },\n     \"csso\": {\n       \"version\": \"1.4.4\",\nSomewhere in the - are the broken package(s) and the + versions in this shrinkwrap fix the build. It seems to be more of a combination of the packages vs any one specific package from what we can tell so far. \n. Just wanted to say we confirmed this creates passing builds for us and that we really appreciate your prompt response and support. Thank you everyone!\n. ",
    "yoyurec": ":+1: \n. ",
    "nicolas-goudry": "This bug is still happening when you leave a whitespace at the end of a rule:\ncss\n.flex-example {\n  display: flex;\n  flex-flow: row wrap ;\n  justify-content: flex-start;\n  align-content: stretch;\n  align-items: flex-start;\n}\nI have some CSS rookies in my team and just spent an hour digging around our codebase to understand it came from this mistyping\u2026 Any way to avoid build errors like this?\n. For sure!\nERROR in ./~/css-loader?sourceMap&-minimize&modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]!./~/postcss-loader!./~/less-loader?sourceMap!./src/components/aw-components/aw-datagroup/aw-datagroup.less\nModule build failed: TypeError: Cannot read property 'constructor' of null\n    at clone (C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\autoprefixer\\lib\\prefixer.js:13:21)\n    at clone (C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\autoprefixer\\lib\\prefixer.js:29:19)\n    at clone (C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\autoprefixer\\lib\\prefixer.js:29:19)\n    at Function.Prefixer.clone (C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\autoprefixer\\lib\\prefixer.js:62:16)\n    at FlexFlow.Prefixer.clone (C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\autoprefixer\\lib\\prefixer.js:110:23)\n    at FlexFlow.Declaration.insert (C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\autoprefixer\\lib\\declaration.js:105:30)\n    at FlexFlow.Declaration.add (C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\autoprefixer\\lib\\declaration.js:138:19)\n    at FlexFlow.Prefixer.process (C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\autoprefixer\\lib\\prefixer.js:102:18)\n    at FlexFlow.Declaration.process (C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\autoprefixer\\lib\\declaration.js:144:50)\n    at C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\autoprefixer\\lib\\processor.js:123:31\n    at C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\postcss\\lib\\container.js:94:28\n    at C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\postcss\\lib\\container.js:81:26\n    at Rule.each (C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\postcss\\lib\\container.js:68:22)\n    at Rule.walk (C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\postcss\\lib\\container.js:80:21)\n    at C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\postcss\\lib\\container.js:83:32\n    at Root.each (C:\\Users\\NGO\\dev\\analog-way\\HTML5\\webrcs-react-redux-starter-kit\\node_modules\\postcss\\lib\\container.js:68:22)\n @ ./src/components/aw-components/aw-datagroup/aw-datagroup.less 4:14-295 13:2-17:4 14:20-301\n. For sure, I'll do it tomorrow! I'll keep you updated when it's done. Thanks!\n. You can find the repo here: react-redux-starter-kit-less-postcss-flex-flow-error.\nOn npm start, it fails with the same error I reported.\nAlso, it seems that the error only appear with flex-flow property, tried with box-sizing: border-box ; and it's ok. Thought it was with multiple values properties so I tried with border: 1px solid black ;, and it's also ok\u2026\nWeirder, it's even ok with flex-flow: row wrap-reverse ;!\n. Nice, thanks for the quick fix!\nHave a good time on your vacation :)\n. ",
    "arccoza": "Thanks man.\n. ",
    "F21": "Thanks! :+1: \n. ",
    "Ser-Gen": "Well, I think I mess up with dest option :\\\nAll the files generated by my plugin alone is really only the result of the source transformation.\nStandardized options in Postcss API and our plugins will be much better.\nMaybe it can simplify processing of generated files?\n. ",
    "viziionary": "I had to finally use es6-promise to monkey patch promises into node. This might not have anything to do with postcss, since its node that isnt exposing the Promise object. Anyway, Ill close this. If anyone else has this weird problem just install that package and use var Promise = require('es6-promise').Promise;.\n. ",
    "nezed": "@TrySound not sure about postcss-use, its main feature is requiring plugin, which not specified in postcss options\nAgree with @ben-eb about keeping additional features as external module, cause theirs syntax can confuse or conflict\n. @TrySound but its not only about internal API and not only about ignoring some plugins.\nIts also about custom options for plugin per specific files.\nSame as u can /* doiuse-disable flexbox */\n. ",
    "clentfort": "FYI: I'm currently working on a parser for CSS Selectors with support for Level 4 Selectors as defined here. It's not yet complete (traversing and manipulating the AST is missing), but if you are interested in integrating the parser into PostCSS I'd be happy to chat (and design/adjust the API according to suggestions). Otherwise I'd be happy if we could have an active discussion about the AST for Selectors, so I can steer my parser into the same direction (and maybe use it as a drop-in replacement at some point).\n. Well one major advantage so far is, that it supports plugins for the parser. This allows correct parsing of :not(SimpleSelector, SimpleSelector, ..) and :nth-child(2n+1 of SelectorList), which postcss-selector-parser has problems with. (It actually parses nested not-selectors, even though that is not allowed according to the official spec).\nThe parser is also faster on many cases (at least on my machine), you can test yourself by running the benchmarks in my repository. (Simply start them with babel-node, I didn't have the time yet to setup scripts in the package.json).\n. As I said, my selectors parses nested not-callst, even though strictly speaking it is not a valid CSS selector. I really can't see any disadvantage by parsing the parameters of a CallExpression, with the design of my parser it's pretty trivial to define specific rules for different calls (right now I have, to prototype the API, support for :not and :nth-child). It give tools such as Stylelint powerful tools to fully inspect selectors, i.e it could correctly calculate the specificity of selectors.\nI wonder about your concerns about the speed, I already mentioned that I benchmarked my parser against postcss-selector-parser and even though the tokenizing is slower (based on the more yieldy design), the overall parsing is faster for many inputs (also on inputs where another-selector-parser parses subtress that are ignored by postcss-selector-parser such as :nth-child(An+b of SelectorList))! Please check for yourself, the benchmarks are included in my repository! (Also please verify I'm instrumenting postcss-selector-parser correctly!) \nRegarding custom grammars: Well this is as much a problem with postcss-selector-parser, it needs to be extended to generated a correct AST, same goes for my parser. Sure I haven't added stuff like SASS Interpolation or Nesting operators, but those again shouldn't be too hard to add. For my use case I don't care about these.\n. ",
    "hokkaido": "Is this still something that is being considered / worked on?. Thanks for the answer. Is there any way to help with the effort? Would love to see this feature land in postcss.. ",
    "markfinger": "I've contributed a test case which coverts my use-case, specifically, exposing a file path to postcss, but ensuring that the generated source map can reference assets across multiple protocols.\nAlso, I'm not particularly attached to the names (or explicit behaviours) of the changes that I've made. So if there are recommendations which are more in-line with the \"postcss way\", I'm happy to make them. Though I'd rather avoid a bikeshed, if possible.\n. @ai I've pushed a change that replaced preservePaths with a check for protocols.\n. @ai I've flattened the commits. The CI seems to be spitting out some weird failures though\n. Cool. Thanks, @ai. \nDo you mind updating this when the changes are published to npm? \n. The use-case for sourcePath is to override the file that inserted into the source map's sources array.\nAs (I believe) postcss tries to read in previous source maps, the from should be a file path (feel free to correct me if I'm wrong). However, we can't dump an absolute fs path into the source map as browsers tend to bail at anything that's not a relative url, absolute, or a complete url (with protocol).\nBasically, I want to provide the from as an absolute file path, the to as the url that the asset will be served from, and the sourcePath as the url that the text content is reachable from in a browser.\n. As before, if there's an alternative that's more inline with the \"postcss way\", I'm happy to make any changes.\n. Browsers don't interpret OS file paths as urls, so when you're trying to navigate from devtools to the file contained in source, it tends to break in varying ways across browsers.\nFor example, in one of my projects, Firefox is currently breaking heavily on mapping the source map to the generated file. The one hack that sort of gets around it is to use a file://... protocol url so that navigation is a bit better.\n. Correction, browsers do interpret OS file paths as urls.\n. Yeah, I suppose you could strip the file:// from the start. The only problem I can see with that is you would end having either two code paths scattered throughout postcss or you'd need to store it during init. Either way, I think you'll still end up in much the same situation as the sourcePath override.\n. My need for that option is because postcss overloads the intention of from: It's both the input filename and the source url for the source map.\nIn most other build tools, there are either distinct phases (read in / emit to code / emit to source) or there are multiple options provided for this use case. For example: babel-generator's sourceMapTarget\n. Another example in babel: https://babeljs.io/docs/usage/options/. There are distinct options for filename and sourceMapTarget.\n. Sure, sounds good. I'll make the change\n. Ok, I've made the changes and added some docs for map.from\n. Yeah, sure\n. Alternatively, I can split this up into 2 PRs, if it makes it easier for you\n. Closing in favour of #759 and #760\n. Ok. It's been updated with @lydell's request.\n. Yeah, I noticed the caret. Personally, I don't think it'd be too much of an issue as the colon after the protocol wont match any realistic OS path -even OSX tries not to support it anymore as a non-delimiter character.\nThat being said, the caret makes it more explicit and probably offers some minor perf improvements, so I don't mind rebasing the pull again.\n. ",
    "lkraav": "Can someone point me to what the underlying problem is? It's the first I've heard of this topic.\n. ",
    "resting": "@ben-eb \ud83d\udc4dyou're the man!\n. ",
    "prettydiff": "Awesome, this request came from the Atom Beautify project so once I verify everything is solid support for PostCSS will enter Atom (via Atom Beautify) as well\nhttps://github.com/Glavin001/atom-beautify/issues/855\n. ",
    "LPGhatguy": "Do you have a link to the issue tracked in the Babel repository that corresponds to that problem? It seems like a totally version-breaking bug.\n. Sure thing, I'll look into it.\n. ",
    "montmanu": "To dynamically generate the prev option's path.. useful when the src file does not already include an annotation and the map is located in a different directory than the src file\n. I don't think that option currently accepts a function.. that's why I opened this PR and wrote the patch.\n. I'm not interacting with postcss directly.. I'm interacting with it via a plugin.\n. Sorry.. should have mentioned that: grunt-postcss\n. ok, thanks!\n. ",
    "minooo": "thanks very much!\n. ",
    "cmnstmntmn": "ty, i'll git it a try\n. ",
    "andywer": "Ohh, nevermind then!\n. Sure. My particular problem in postcss-debug is this:\njs\npostcss.plugin('postcss-debug-snapshot', () => (\n  css => {\n    console.log(css.toString())    // blank lines are gone\n  }\n))\n. css (first parameter of the pluginFunction), is a Root.\nMy sample CSS that confirmed the problem one of my plugin's users described was:\n``` css\n.test {\n  color: black;\n&:hover {\n    margin-top: calc(10px + 20px);\n  }\n}\n```\nThe blank line between color: black; and &:hover { is gone on css.toString().\nHope that helps :)\n. Ahhhh. That might be it: https://github.com/andywer/postcss-debug/blob/master/src/snapshot.js#L11\nIs this intended behavior? I would not expect cloning to have an impact on the textual representation, since then it's not exactly a clone anymore ;)\n. Thanks! Understanding the underlying reason already helped a lot :)\n. ",
    "kourge": "@jedmao, on a typings level, I believe if you export = postcss it does the right thing.\nThe problem most people have involves older versions of Babel (i.e. 5) treating module.exports = m as module.export = {default: m} when importing a module. Babel 6 no longer does this, and in a typeless environment this is not difficult to work around; simply require('...').default instead of require('...'). In TypeScript the declarations manifest as export = m versus export default m. Technically the export = m / module.exports = m way of exporting defaults is invalid under the ES6 spec if m does not have any enumerable properties, but realistically the ecosystem has continued to support this since single-function CommonJS modules are extremely popular.\n. As long as the postcss entry point itself directly does module.exports = f where f is a function, the only way to model this with typings is export =. As it is, the purpose of the \"typings\" field in package.json is to make Node module resolution work and right now it is broken.\nI wonder if this workaround can would work, say, in a theoretical typings-specific.ts:\ntypescript\nimport postcss from './postcss';\nexport = postcss;\nAnd have a second tsconfig.json file with {declaration: true, target: \"es5\", files: [\"typings-specific.ts\"]}?\n. ",
    "ismamz": "Yes, I wrote a tweet: https://twitter.com/ismamz/\nThank you!\n. I delayed send to improve the docs. I've added to postcss-plugins already :+1: \n. ",
    "yepninja": "Added better examples\n. Idea for plugin is from ES2015 feature - property shorthand\nhttp://es6-features.org/#PropertyShorthand\n. Yes, I do. It is useful plugin for me. It helps me to develop faster.\n. Well. Thanks\n. ",
    "delorge": "Shall this cache be avaiable as postcss.nodeCache or should it be part of Node api?\n. > var cache = {};\n\n\u2026\ncache[node.id] = myValue;\n\n@ai as I can see, cache should be avaiable everywhere, am I correct? Or maybe we need to add get/set cache methods for Node class? To be honest I'm not really familiar with such use cases :)\n. @ai aye, got it. I have a solution but it breaks 30+ tests :D I guess that's is an issue as well, because tests expect harcoded values, hence I'm not sure how do I test random values (of course I do, but I need an advice how to do that right).\n. @ai I mean postcss unit tests. For example, one of node tests: \n```\ntest('toJSON() converts custom properties', t => {\n    let root = new Root();\n    root._cache = [1];\n    root._hack = {\n        toJSON() {\n            return 'hack';\n        }\n    };\n    t.deepEqual(root.toJSON(), {\n        type:   'root',\n        id: root.id,\n        nodes:  [],\n        raws:   { },\n        _hack:  'hack',\n        _cache: [1]\n    });\n});\nroot.id is my addition, because otherwise test fails.\n```\n. @ai alright, I will check parser later, thank you :)\np.s. will try to test in benchmark as well\n. I tested node ids on benchmark with time-based IDs and random (encrypted) ones. I believe that it's impossible to generate unique ids in current  runtime process without performance loss. The question is: do we accept these losses or don't relay on IDs at all. \nhere are my results I've got so far:\nrandom IDs (average):\nparsers: \nMensch:                30 ms  (1.3 times faster)\nCSSOM:                 35 ms  (1.1 times faster)\nPostCSS:               40 ms\nPostCSS with Node IDs: 79 ms  (2.0 times slower)\nRework:                94 ms  (2.3 times slower)\nStylecow:              108 ms (2.7 times slower)\nGonzales:              148 ms (3.7 times slower)\nGonzales PE:           164 ms (4.1 times slower)\nprefixers:\nAutoprefixer:               60 ms\nAutoprefixer with Node IDs: 97 ms   (1.6 times slower)\nStylecow:                   322 ms  (5.3 times slower)\nnib:                        681 ms  (11.3 times slower)\nCompass:                    3099 ms (51.5 times slower)\npreprocessors:\nPostCSS:               68 ms\nlibsass:               69 ms   (1.0 times slower)\nPostCSS with Node Ids: 111 ms  (1.6 times slower)\nRework:                123 ms  (1.8 times slower)\nLess:                  269 ms  (3.9 times slower)\nStylecow:              408 ms  (6.0 times slower)\nStylus:                501 ms  (7.4 times slower)\nRuby Sass:             1310 ms (19.2 times slower)\ntime-based IDs (average):\nparsers:\nMensch:                35 ms  (1.2 times faster)\nCSSOM:                 41 ms  (1.0 times faster)\nPostCSS:               41 ms\nPostCSS with Node IDs: 48 ms  (1.2 times slower)\nRework:                73 ms  (1.8 times slower)\nStylecow:              127 ms (3.1 times slower)\nGonzales:              176 ms (4.3 times slower)\nGonzales PE:           202 ms (4.9 times slower)\nprefixers:\nAutoprefixer:               77 ms\nAutoprefixer with Node IDs: 93 ms   (1.2 times slower)\nStylecow:                   364 ms  (4.7 times slower)\nnib:                        873 ms  (11.3 times slower)\nCompass:                    3887 ms (50.3 times slower)\npreproccessors:\nlibsass:               80 ms   (1.0 times faster)\nPostCSS:               81 ms\nPostCSS with Node Ids: 93 ms   (1.1 times slower)\nRework:                145 ms  (1.8 times slower)\nStylecow:              447 ms  (5.5 times slower)\nLess:                  479 ms  (5.9 times slower)\nStylus:                529 ms  (6.5 times slower)\nRuby Sass:             3740 ms (46.1 times slower)\nAs you can see, PostCSS with encrypted Node IDs is quite slow, but time-based IDs look promising (I've even had zero losses couple of times :D)  @ai what do you think?\n. For generating IDs I used node-uuid which guarantees unique ID, because it uses not only timestamp in generating process, so IDs should be fine even if they were produced at the exact same time\n. alright, will make a PR for this one and for paser tonight.\n. well seems like some tests are still failing. shall I investigate this?\n. Node.toJson() tests are still failing after parser update; I guess this method is being used before parser does its job. Should I change tests and make them expect ids in node objects or change toJson method?\n. @ai yes I did,  ~30 tests break before postcss-parser-tests update; 2 tests are still broken after update. It confuses me\n. seems like postcss-parser-tests doesn't apply changes in this scenario\n. @ai well, as I mentioned above, managing unique IDs is expensive. But I didn't really expect such a poor performance of autoprefixer. The idea is good though, maybe symbols will work out. Don't forget to revert parser tests :)\n. investigating problems with last commit, I can confirm that postcss-parser-test has nothing to do with toJSON() node method, so I decided to change appropriate tests. @ai could you please check them out?\n. so what will we do about this one? toJSON method isn't really about cleaning node itself but its parent.\n. okay then :)\n. ",
    "francoisromain": "I am currently updating the library, and I will come back when it's ready.\n. ",
    "aslushnikov": "Great, thanks! \ncc @paulirish who is interested in this as well.\n. ",
    "paulirish": "Great to hear! We're shipping some awesome sass editing features in devtools and will be excited to demonstrate it working with autoprefixer in the pipeline. :)\ncheers\n. @matthew-dean perhaps! can you hook me up with a small less app with a watch task that I can try out?\n. ",
    "erquhart": "@matthew-dean I think he means a small website/app with styles written in less and a watch task in place via npm-scripts/grunt/gulp.\n. @ai \n\nAnd do we really need to spend time to fix it? ;)\n\nI think so.\nThe resulting sourcemap causes the browser to look for a file that doesn't exist, and bad data is a problem when anyone wants to use the postcss api for anything serious, such as a tool that provides a wrapper.\nIn my case, I'm copying the sources files to dest, and have no reliable way to determine which entry in the sources array is the bogus one. PostCSS reliably adds it and shouldn't.\nDoes this at least merit remaining open? I'm currently blocked by this and am unsure how to proceed. Maybe if it's open someone will eventually have time to look into it.\n. @ai right, but what if a source's path is bad for some other reason? I'd like to warn the user and maybe even error out. But due to this issue, my only route currently is to silently fail as you're suggesting. I'm not able to improve the user experience by providing useful warnings that may be meaningful.\n. @ai here ya go:\nsource -> transpiled\ntranspiled -> minified\n. That is the map from result. I don't use inline maps.\n. Ah, didn't even realize the map itself isn't provided in the visualization. Below is the entire map produced by postCSS, prettified. Let me know if you need the input map as well.\n{\n  \"version\": 3,\n  \"sources\": [\n    \"src/test/imports/import.less\",\n    \"less.less\",\n    \"src/import.less\",\n    \"src/test/less.less\"\n  ],\n  \"names\": [],\n  \"mappings\": \"AAAA,KACE,eAAA,CCCD,ACFD,KACE,WAAA,ACMA,UAAA,CFFD\",\n  \"file\": \"less.less\"\n}\n. Gotcha:\nMappingList {\n  _array:\n   [ { generatedLine: 1,\n       generatedColumn: 0,\n       originalLine: 1,\n       originalColumn: 0,\n       source: 'src/test/imports/import.less',\n       name: null },\n     { generatedLine: 1,\n       generatedColumn: 5,\n       originalLine: 2,\n       originalColumn: 2,\n       source: 'src/test/imports/import.less',\n       name: null },\n     { generatedLine: 1,\n       generatedColumn: 20,\n       originalLine: 2,\n       originalColumn: 2,\n       source: 'src/test/imports/import.less',\n       name: null },\n     { generatedLine: 1,\n       generatedColumn: 21,\n       originalLine: 3,\n       originalColumn: 1,\n       source: 'less.less',\n       name: null },\n     { generatedLine: 1,\n       generatedColumn: 21,\n       originalLine: 1,\n       originalColumn: 0,\n       source: 'src/import.less',\n       name: null },\n     { generatedLine: 1,\n       generatedColumn: 26,\n       originalLine: 2,\n       originalColumn: 2,\n       source: 'src/import.less',\n       name: null },\n     { generatedLine: 1,\n       generatedColumn: 37,\n       originalLine: 2,\n       originalColumn: 2,\n       source: 'src/import.less',\n       name: null },\n     { generatedLine: 1,\n       generatedColumn: 37,\n       originalLine: 8,\n       originalColumn: 2,\n       source: 'src/test/less.less',\n       name: null },\n     { generatedLine: 1,\n       generatedColumn: 47,\n       originalLine: 8,\n       originalColumn: 2,\n       source: 'src/test/less.less',\n       name: null },\n     { generatedLine: 1,\n       generatedColumn: 48,\n       originalLine: 6,\n       originalColumn: 1,\n       source: 'less.less',\n       name: null } ],\n  _sorted: true,\n  _last:\n   { generatedLine: 1,\n     generatedColumn: 48,\n     originalLine: 6,\n     originalColumn: 1,\n     source: 'less.less',\n     name: null } }\n. Cool. Looks like PostCSS is mapping the closing brackets?\n. I'll get one together soon. Thanks for your help, have a great night.\n. ",
    "mischnic": "Any news?. > Released in 7.0.10.\nThank you for your quick response.\nBut I discovered an issue: the last semicolon might be missing, then this happens (the last d of red is separate).\nArea there other cases where something similar might happen?\nThis would the the semicolon:\n```diff\ndiff --git a/lib/map-generator.es6 b/lib/map-generator.es6\nindex 8029cbf..dc13536 100644\n--- a/lib/map-generator.es6\n+++ b/lib/map-generator.es6\n@@ -227,7 +227,8 @@ class MapGenerator {\n         column += str.length\n       }\n\nif (node && type !== 'start') {\nif (node && type !== 'start' &&\n(node === node.parent.last ? node.parent.raws.semi : true)) {\n         if (node.source && node.source.end) {\n           this.map.addMapping({\n             source: this.sourcePath(node),\n```. > Released in 7.0.11\n\nThank you!. node.source.end.column is 1-based, the conversion to 0-based was missing (the previous other call to addMapping is correct).. column is the 1-based position in the generated css. But column += str.length happens before the end tag is mapped (now, column is the first column index of the next node), therefore the end token is at (if it has length 1):\njs\ncolumn - 1 // 1-based to 0-based\n       - 1 // end token length \nI'm not 100% sure this is always correct (but should be if all \"end tokens\" are of length 1).\ncolumn - 1 - str.length works for closing brackets of a rule, but for the semicolon of a declaration, the string is the whole line (\"background-color: red;\"), not just \";\".. ",
    "josephfusco": "Just wanted to point out this happened to me after installing \"gulp-sourcemaps\": \"^2.0.0-alpha\"\nTemp fix was dropping gulp-sourcemaps to the last stable 1.5.2 in package.json instead of 2.0.0-alpha\n. ",
    "rymohr": "Thanks, I'm aware of that. We use postcss to drive a custom style engine with a syntax nearly identical to CSS (we use style sheets to drive network visualizations in webgl, not DOM).  The default postcss parser plus a few plugins handles everything else just fine, so it would be a shame to have to fork it for such a minor issue.\nFor some context, the : is required because we have a custom @settings block that allows you to supply selectors as values within a declaration (in this case :orphan is a pseudo selector that selects all nodes without edges):\n@settings {\n  include: node, edge;\n  ignore: :orphan;\n}\nTo be clear, the only change I'm proposing is to not throw an error for a { one: :test; }. The existing test suite would still pass since a { one:: test; } would still throw.\n. Thanks.  For now we just preprocess the source and replace any : : occurrences with a custom token that doesn't trip the error. Works for now but feels like a hack. It just isn't worth the effort to maintain a parallel fork for such a minor change.\n. ",
    "VitaliyR": "@ai say it to Chinese coders :) \n. @ai should I add it there? \n. @ai \ud83d\udc4d \n. @ai didn't noticed it. Fix\n. I encountered this one also. . @ai ~43MB of ~126 CSS files. A lot of templates. Also, parsing takes time - about 1 minute, while JS+handlebars 1 min also :( . @ai I can try, but at least, what debugger says - it is parser issue. \n1: _parseMappings(aka SourceMapConsumer_parseMappings) [/home/vitaliy/hostroot/clioui/node_modules/grunt-postcss/node_modules/postcss/node_modules/source-map/lib/source-map-consumer.js:~423] [pc=0x1e9d743b1aa6] (this=0x1ad8636f0041 <a BasicSourceMapConsumer with map 0x3d66321b1979>,aStr=0x1ad863604101 <Very long string[539601]>,aSourceRoot=0x3a595704101 <null>)\nVery long string for source-map-consumer. @ai as I mentioned above, 126 CSS files with total size of about 43 MB. No, they're not concated - they should be separated and they're come from SCSS. I'm using only grunt here.\n\nDo you have such so big CSS because of inline images/font or it is a lot of rules?\n\n3 inlined fonts and 5 svg icons (it should be many, don't it?). @ai yes, it works. But we need that source maps :) \nI think, the biggest one - 600kb.. @ai anyway there are a lot of problems in a current version of postcss because of source maps. Parsing them takes a lot of time, more than half of total build time.\nFor instance, with sourcemaps this project builds for 2m 47s (where 1m 44s postcss), and without them - 1m 55s(where 52s postcss). Damn, that's bad :(\nProblem was fixed by fixing grunt-postcss locally - added possibility to handle CSS files in sequential mode, one by one. So, memory is fine for now and GC correctly cleans everything. Will create a PR for that.. @ai Sorry for posting in closed issue, but I just need to..\n\nWhy you so aggressive with me?\n\nSay sorry :) You're awesome!\nAm I really aggressive? \ud83d\ude1e \nAnd yes, I'm creating an issue right now in source-map repo.\nsourcesContent was set to false.. ",
    "BarryThePenguin": "I'm exploring the potential of using typescript in lost (referenced above). I've run into this problem too. Is there anything I can do to help?\n. ",
    "stehefan": "Oh okay, then I misread the guidelines. Thanks for clearing this up! :-)\n. ",
    "texastoland": "Copied from my loader issue:\njs\n// postcss.config.json\nmodule.exports = ({context, mainDir}) => ({\n  import: { // must run first\n    addDependencyTo: context,\n    path: mainDir,\n  },\n  cssnext: true,\n  reporter: { // must run last\n    clearMessages: true,\n    noIcon: true,\n  },\n}),\n\u2026and later with a library function:\njs\nconst config = Object.entries(require(configPath))\n  .filter(([key, options]) => options !== false)\n  .map(([key, options]) => [require(\"postcss-\" + kebabCase(key)), options])\n  .map(([plugin, options]) => options === true ? plugin : plugin(options))\n1. I think repurposing pacakage.json would be bad. Does another popular tool follow that convention? postcss.config.js (or similar) is my preference with the option to pass any JS or JSON.\n2. The config should accept a function that takes an options object. postcss-import accepts a dynamic argument in addDependencyTo. I also pass other configurable options.\n3. I pass a boolean to plugins that don't take options or to disable them.\nI could implement it in a weekend or help when it's decided.\n. > Cosmiconfig\nWoah cool!\n\nPostCSS Load Config\n\nSincerely excellent work.\n\nPostCSS Load Options\n\nDuplicates postcss-load-config/lib/loadOptions.js?\n\nPostCSS Load Plugins\n\nDuplicates postcss-load-config/lib/loadPlugins.js? Could I open an issue there for kebab case by default?\n\ncan you please free the name postcss-load-plugins for that module on npm,\n\nTweeted him.\n\nPostCSS Load Presets\n\nAre these like build-your-own-cssnext?\n@michael-ciniawsky I think I'm a good coder but this is more superbly put together than I conceived \ud83d\udc96\n. > 'postcss-plugin1': null // => no options or rather the plugin defaults e.g for postcss-nested\nCould it be true instead and false to disable? null/undefined/'disabled' all feel wrong.\n\nit gets a mess quickly, when you e.g load one postcss-plugin with prefix and one without like cssnext, cssnano etc.\n\nDid you already consider:\njs\nfunction load (plugin, options) {\n  const prefix = 'postcss-'\n  try {\n    plugin = require(plugin) // catch here\n  } catch (e) {\n    if (plugin.startsWith(prefix) throw e\n    else return load(prefix + kebabCase(plugin))\n  }\n  return options === true ? plugin() : plugin(options) // not here\n}\n\nThe presets should adress that, there the namespace is set by you in the preset itself and no collision with other external modules is possible,\n\ncssnext implemented mappings for theirs too. The only thing I dislike is needing a preset just for a convention.\n\npostcssrc.then({plugins, options} =>\n\nYou mean postcssrc().then? Is the argument so you can override a config? That doesn't sound as useful as:\n\njs\n  // postcss.config.json\n  module.exports = ({context, mainDir}) => ({\n    import: { // must run first\n      addDependencyTo: context,\n      path: mainDir,\n    },\n\nThere's one major use case missing. Configs should also accept functions. postcss-import accepts a reference to the postcss-loader context. In my example I'm also passing in the source path because it gets reused in other places like the context query parameter for css-loader.\n\ncssnext, cssnano etc. could/should use a standard way, if decided upon.\n\nCC @MoOx because cssnext is doing dynamic loading based on caniuse.\n. > Suggestion for a replacement of 'disable'\nfalse right?\n\nyep agree, that's a todo\n\nI could implement the above by Tuesday for further discussion \ud83d\ude0a\n. > maybe checking for presets in the plugins section is a better solution, and skip the presets: {} key entirely.\nAgreed \ud83d\udc4d\n\nIf you fork\n\nAlready forked and cloned.\n\nplease keep the current config style for the moment,\n\nI planned to PR true/false, the kebab shortcut, and passing functions from configs in load-config. I can change it afterward but those would make it usable in my current project!\n. Haha with a PR \ud83d\udc4d\n. ",
    "RyanZim": "@michael-ciniawsky how's that going?\n. FWIW:\nI don't use gulp, just postcss-cli.\nI have often wished that there was a way to alter the config based on whether I am building for production or development. (I would prefer not to run my css through a minifier on every file change.) If I am understanding env correctly, this would allow for this.\nHowever, do we need a full object for env? A boolean dev/prod flag would be fine for my use-case. This could be exposed in an appropriate way by the runner (i.e. a --prod flag on the cli). Thoughts?\n. > But I agree that many users need all this plugins, and they want a zero-config, out-of-box solution.\nWell said! A few thoughts on how to do that:\n1. Use sensible defaults (pretty good in the postcss ecosystem, would prefer a few changes to postcss-url's defaults; bikeshed that somewhere else :wink: ).\n2. Plugin packs/presets (like Babel) are a good idea; postcss should have more, and someone should write a boilerplate or lib to streamline making plugin packs.\n3. Users that want a streamlined, complete no-configuration tool can build things like standard (a wrapper around eslint).\n\n\nI am not big fan of integrating plugins into each other\n\n:+1: I think we need a good @import plugin and a plugin pack that includes postcss-url, etc.\n\nI am pretty strapped for time ATM, but I would be willing to help/maintain an import plugin.\n@ai I like your plan in https://github.com/postcss/postcss/issues/906#issuecomment-256414804. What repo should this be done in; and which plugin@version should we use as the code to work off of? \n. I did some digging in the source code, and I just can't get to the bottom of https://github.com/postcss/postcss-import/issues/168. @ai I hate to do it, but perhaps we should revert to v7? Of course, if someone can point me in the right direction, perhaps I can fix v8. @TrySound ?\n. @ai If I tested correctly, yes; postcss-smart-import has that issue. https://github.com/postcss/postcss-import/issues/168\n. FWIW, it appears to be a race condition in nested import loading. Make sure to use the test at https://github.com/postcss/postcss-import/pull/169; otherwise the issue is intermittent.\n. IMO, if someone can fix https://github.com/postcss/postcss-import/issues/168 or point me in the right direction to fix it, we can work with the current architecture. If not, we'll be forced to revert.\n. @ai I would be willing.\n\nDisclamer:\nTo be honest, postcss/postcss-import#168 has me stumped harder than any other bug I've ever encountered. That bug is the only reason I haven't fixed https://github.com/postcss/postcss-import/issues/233 yet. I don't want to fix it only to revert to v7 & do it all over again in a few weeks!\nI'm going to discuss postcss/postcss-import#168 a little with @MoOx, see if we can figure it out.\n. @ai PR for postcss/postcss-import#168 done: https://github.com/postcss/postcss-import/pull/236.\n. dependency message added: https://github.com/postcss/postcss-import/pull/241\n. :+1: For updating the boilerplate.. css would be a string containing the contents of src/app.css.\npostcss itself doesn't do any filesystem read/write based on to and from.. @Diokuz Most postcss runners aren't getting the file contents directly from the filesystem: \n\n\ngulp-postcss gets file content via Gulp API.\npostcss-loader gets file content via webpack API.\nPostCSS CLI use better reading mechanism to read multiple files faster.\nPostCSS for client JS has even no access to fs.\n\n\nSo we need to support passing and returning strings.. @ben-eb Not a bad idea to eliminate the fs from the example entirely. :+1: @ai?\n. That would be implicit behavior, not a good idea in most cases. Also, you must keep in mind that postcss core can run in the browser as well, so putting fs manipulations in core is just adding complexity. Not in favor of this.. Perhaps:\n\ncombines both-directional (left-to-right and right-to-left) styles in one CSS file.\n\nwould be clearer.\n. ",
    "winamp": "Thanks a lot Andrey! \n. ",
    "eramdam": "Oh, I'm indeed using postcss-safe-parser so maybe that's why. Will try again without it and re-open if still needed. Thanks for the insanely fast reply though!\n. I managed to narrow down my issue and PostCSS/Safe Parser are fine, the problem comes from html-parser2 which does weird stuff. Sorry for the annoyance \ud83d\ude1b \n. @ai when is 5.2 planned? If there's a planning. I can wait a little \ud83d\ude0a  \n(Thanks for the quickfix though! \ud83d\udc4d  )\n. I can definitely wait :)\n. ",
    "lutien": "There are some mistakes in sorting in section \"Others\" and this confused me :( \n. ",
    "ChristianMurphy": "Will do.\nThanks!\n. ",
    "pke": "Oh ok. Just after some more digging into the source code I figured it might not actually a loader problem\n. ",
    "peterbarraud": "Has anyone tried the browserify-postcss tranform?. ",
    "damsorian": "is there any example for do this?. ",
    "AngeIII": "node_modules/postcss-functions/dist/index.js\nCritical dependency: the request of a dependency is an expression\nplugin = require('postcss').plugin\nexport default plugin('postcss-functions', (opts = {}) => {\nfor webpack and to run this in browser it needs to be a plain class/object/function.\n. @ai yes, looks like postcss working good in webpack, but postcss-function latest version has \"glob\" added which produced this critical dependency, after removing this everything is working good.\nfork: https://github.com/wpbakery/postcss-functions. @ai I think there is no need to fix anything in postcss core :+1: , but in postcss-function there are options.glob:\nfunctions[name] = require(file);\nthis cannot be bundled in webpack, and I don't see any possibility to fix it without removing :/. ",
    "mmmveggies": "This is also a problem with links to http://api.postcss.org/Node.html\n. ",
    "soul-wish": "Not at all! That was really quick reply and accepting \ud83d\udc4d\n. ",
    "malchata": "Damn, I guess nothing. I wrote this plugin a while ago when I didn't notice another px to rem converter, but either I failed to notice one when I checked the list back then, or one was developed in the interim. So, I guess it's up to you whether or not to include mine. Your call, man. Thanks for your speedy reply.\n. Looking at the pxtorem plugin, I'd say this one is a little more straightforward, but yeah. I'm with you. Thanks for your consideration. Take care!\n. ",
    "dryoma": "Let me than ask it this way: what is a PostCSS tool? I.e. what tools are recommended to have this prefix, is there a judgement like \"this tool does X and Y, so it can be called a PostCSS tool\" or \"this tool does X, but to calls itself a PostCSS tool it should also do Y\"?\n. Ok, got it, thanks.\n. > Maybe it is not best way and we should change it in 6.0.\nThumbs up for that, will be a big help for linting tools!\n. I figured out the reason for the issue. Seems that postcss-scss transforms every //-comment into CSS comment, like so: // comment -> /* comment*/, thus adding two extra chars at the end of each //-comment.\n. ",
    "ogonkov": "Is there task to return support of comments within selectors @ai?. I mean ability  to use comments a lastylelint-disable-line. This one stylelint/stylelint#1628\n(sorry, just realized that i post to wrong project). ",
    "alansouzati": "My API is currently based on React components. Currently they load scss inside their index.js with webpack and style-loader/css-loader.\nYou can see an example of using our components here: https://github.com/grommet/grommet-simple/blob/master/src/index.js\nThe user can change(augment) the CSS, so it is not only about redefining config parameters. You can see one example of a theme extending a component CSS here: https://github.com/grommet/grommet-hpe-theme/blob/master/components/anchor.css.\nThe grommet-theme-loader that I created is currently taking care of extending the core component CSS.\n. Thanks for the feedback. I'm going to take a look into these libraries.\n. ",
    "TimothyGu": ":sign:\nAnother way is to somehow expose the MapGenerator object of the processor, so that I can use PostCSS's logic. \n. I'm trying to get all the file dependencies used in a PostCSS pipeline, which I see are available in the source map.\n. ",
    "madx": "No problem, I forced 5.0.21 meanwhile :smile: \n. I tried that but I'm not really confortable with postcss source code and found nothing interesting :confused: \n. ",
    "uMaxmaxmaximus": "\nBut webpack contains only few CSS tools. Of course, you need more tools. You need Autoprefixer and here you will use PostCSS (by postcss-loader). You need to inline SVG with colors (and you will use PostCSS). You need to lint your CSS (and you will use Stylelint based on PostCSS). You may need some CSS4 polyfills (and again you will use cssnext from PostCSS).\n\n@ai  That's what you call the PostCSS plug-in, is Webpask loaders, example:\njavascript\n'**/*.styl': 'style!css!css-min!autoprefixer!stylys'\nWe miss the contents of the file through a conveyor loaders:\n1) Stylus preprocessor\n2) autoprefixer add webdor prefixes\n3) css-min minidy css\n4) css convert to css\n5) style include style in html head\nBut unlike PostCSS,  webpack received files still somehow be combined intelligently, and automatically add to the generated html file. That is a standard conveyor processing of files in Webpack. In PostCSS the same, only css, but not for other types of files. Why does PostCSS need, if all he can do, Webpack can do, and even more?\n\n. > Parse CSS string into AST objects.\n\nDo something with this AST objects by API.\nGenerate new CSS string for change AST.\nGenerate source maps.\n\nOoh i understand! PostCSS is a tool for creating tools for transform css code?? Oooh, PostCSS is lower than the level of Webpack, I suppose? =)\nThat is basically a tool for building tools?\n. But as a bonus, PostCSS allows you to skip the file via conveyor of plugins, similar to a chain loaders Webpack? Suddenly a man have no Webpack. =) yes?\nPostCSS this is epic!! Why no one says what the hell this thing is doing) ?? Why everywhere it is written only that \"it revolution\" and \"it's cool\" but nowhere written that it allows you to build CSS AST and easy to work with him ??? =)\n. > Loaders with with string input. So they need to parse file again and again.\nYou mean that one loader can not transfer to another loader their parsed and modified AST, and is forced to pass a string? \u043e_\u041e\n. hmm, what distinguishes PostCSS, from dozens of ordinary CSS parsers? =_= convenience? and popularity?\n. It's phenomenal! And why some people compare it to the LESS and SASS? They think that PostCSS is a preprocessor, but not a utility for writing preprocessors? In all the articles I read today about PostCSS it is compared with the preprocessor. It's all meaningless, because it is completely different levels of abstraction. PostCSS lower level than the preprocessor. And it serves only as a UTILITY to create a preprocessor. I'm right? =)\nIf so, I will write on the http://habrahabr.ru (popular russian site 20kk people per month) lesson on working with PostCSS. finally normal language what it is and why you need. And at the Russian community there are no normal articles about PostCSS.\n. @ai Oh, my God, you have opened my eyes. I'm going to write a lesson on working with PostCSS. Thank you, bye =)\n. @ai Please, get your twitter\n. \u0412\u0441\u0435 \u043c\u044b \u0442\u0443\u0442 \u0440\u0443\u0441\u0441\u043a\u0438\u0435, \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u0438\u0442\u0432\u043e\u0440\u044f\u0435\u043c\u0441\u044f =)\n. @ai \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u0441\u0435 \u0434\u0435\u043b\u0430 :blush:\n. > \u0410 \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u0442, \u0435\u0441\u043b\u0438 \u043f\u043e\u0441\u0440\u0435\u0434\u0438\u043d\u0435 \u043b\u043e\u0430\u0434\u0435\u0440 \u0438\u0437\u043c\u0435\u043d\u0438\u0442 \u043a\u043e\u0434, \u043d\u043e \u043d\u0435 \u043e\u0431\u043d\u043e\u0432\u0438\u0442 AST?\n\u042f \u0441\u043b\u0435\u0433\u043a\u0430 \u043e\u0431\u043d\u043e\u0432\u0438\u043b \u043f\u043e\u0441\u0442, \u044f \u0434\u0443\u043c\u0430\u044e \u0447\u0442\u043e \u043a\u043e\u0434 \u0432\u043e\u043e\u0431\u0449\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e. \u041d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u043b\u0438\u0431\u043e \u0441\u0442\u0440\u043e\u043a\u0443 \u043b\u0438\u0431\u043e \u043e\u0431\u044c\u0435\u043a\u0442 \u0438\u043c\u0435\u044e\u0449\u0438\u0439 \u043c\u0435\u0442\u043e\u0434 toString(), \u0438 \u043b\u043e\u0430\u0434\u0435\u0440\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u043d\u0430\u0442\u044c \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0438\u043c \u043d\u0443\u0436\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430, \u0442\u043e \u0443 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u0437\u0432\u0430\u0442\u044c toString() \u0430 \u0435\u0441\u043b\u0438 \u0436\u0435 \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043a\u0430\u043a\u043e\u0439 \u0442\u043e \u043e\u0431\u044c\u0435\u043a\u0442, \u0442\u043e \u0434\u0435\u043b\u0430\u044e\u0442 \u0447\u0442\u043e-\u0442\u043e \u0432\u0440\u043e\u0434\u0435\njavascript\nif (obj instanceof PostCssAST){\n  // \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u0430\u043a \u0430\u0441\u0442\n}\nelse{\n  // \u043f\u0430\u0440\u0441\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0437\u0430\u043d\u043e\u0433\u043e\n}\n. \u041d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441 \u043d\u0438\u043c\u0438 \u0440\u0430\u0437\u0433\u043e\u0432\u0430\u0440\u0438\u0432\u0430\u0442\u044c, \u044f \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u043f\u0438\u0448\u0443 \u0441\u0430\u043c \u0438 \u0441\u043a\u0438\u043d\u0443 \u0438\u043c \u0440\u0435\u043a\u0432\u0435\u0441\u0442)\n\u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0441 \u0442\u0435\u043a\u0443\u0449\u0438\u043c\u0438 \u043b\u043e\u0430\u0434\u0435\u0440\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0443 \u043e\u0436\u0438\u0434\u0430\u044e\u0442, \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c\n. @ai \u0441\u043b\u0443\u0448\u0430\u0439, \u0432\u043e\u043f\u0440\u043e\u0441, \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u044f ast \u0432 \u0441\u043e\u0443\u0440\u0441\u043c\u044d\u043f, \u0438 \u0432 css \u043a\u043e\u0434 \u044d\u0442\u043e \u0434\u043e\u0440\u043e\u0433\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f? \n\u0422\u043e \u0435\u0441\u0442\u044c \u043d\u0443\u0436\u043d\u043e \u0441\u0442\u0440\u0435\u043c\u0438\u0442\u044c\u0441\u044f \u0438\u0437\u0431\u0435\u0433\u0430\u0442\u044c \u044d\u0442\u043e\u0433\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u043b\u0438\u0448\u043d\u0438\u0439 \u0440\u0430\u0437?\n. \u0432\u043e\u0442 \u0433\u043b\u044f\u0434\u0438, \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u043b \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438:\n\u0415\u0441\u043b\u0438 \u043b\u043e\u0430\u0434\u0435\u0440 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0442\u0440\u0435\u0442\u0438\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 (\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a func.length > 2)\n\u0422\u043e\u0433\u0434\u0430 \u043c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0435\u043c\u0443 \u044d\u0442\u043e\u0442 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 (ast \u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435), \u0435\u0441\u043b\u0438 \u0436\u0435 \u043b\u043e\u0430\u0434\u0435\u0440 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0432\u0441\u0435\u0433\u043e 2 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0442\u043e \u0442\u043e\u0433\u0434\u0430 \u043c\u044b \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043d\u0430\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u043c\u044d\u043f\u0430 \u0438 \u0441\u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u043b\u043e\u0430\u0434\u0435\u0440\u044b \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0442\u043e, \u0447\u0442\u043e \u043e\u043d\u0438 \u0438 \u043e\u0436\u0438\u0434\u0430\u044e\u0442, \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u043a\u0430\u0440\u0442\u0443. \u0410 \u043b\u043e\u0430\u0434\u0435\u0440\u044b \u043e\u0436\u0438\u0434\u0430\u044e\u0449\u0438\u0435 \u0442\u0440\u0435\u0442\u0438\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0431\u0443\u0434\u0443\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0442\u0440\u0435\u0442\u0438\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442, \u0438 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0432\u0430\u0442\u044c 2 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 (\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 undefined). \u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442, \u043f\u0440\u0438\u0437\u043d\u0430\u0442\u044c\u0441\u044f, \u0443\u0431\u043e\u0433\u043e, \u043d\u043e \u044f \u043f\u043e\u043a\u0430 \u0435\u0449\u0435 \u0434\u0443\u043c\u0430\u044e.\n``` javascript\nfunction PostCSS(code, map) {\nthis.callback(ast, function () {\n    return [ast.toCss(), ast.createMap()]\n})\n\n}\nfunction PostCSSBro(code, map, ast) {\n}\nfunction normalLoader(code, map) {\n}\n```\n\u041d\u0430\u0434\u043e \u043a\u0430\u043a \u0442\u043e \u0440\u0430\u0437\u0432\u0438\u0442\u044c \u044d\u0442\u0443 \u0438\u0434\u0435\u044e, \u043e \u0442\u043e\u043c \u0447\u0442\u043e\u0431\u044b \u043b\u043e\u0430\u0434\u0435\u0440 \u043c\u043e\u0433 \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u0447\u0442\u043e \u043e\u043d \u0423\u041c\u041d\u042b\u0419 \u0438 \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043a\u0430\u043a\u043e\u0435 \u0442\u043e AST \u0442\u043e \u043e\u043d \u0433\u043e\u0442\u043e\u0432 \u0435\u0433\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u044c, \u0438 \u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u0442\u0440\u043e\u043a\u0443, \u0438 \u0442\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f, \u043d\u0435 \u043d\u0430\u0434\u043e.\n. @ai \n\u0432\u043e, \u044f \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u043b, \u043d\u0430\u0434\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u043b\u043e\u0430\u0434\u0435\u0440\u0443 \u0434\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u043b\u043e\u0430\u0434\u0435\u0440\u0443, \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0440\u043d\u043e =)\n``` javascript\nfunction PostCSS(code, map) {\nif (this.nextLoader.length === 3) {\n    this.callback(ast)\n}\nelse {\n    this.callback(ast.toCss(), ast.toMap())\n}\n\n}\n```\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043b\u043e\u0430\u0434\u0435\u0440 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0434\u0430\u0436\u0435 \u043a\u0430\u043a\u0438\u0435 \u0442\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0441\u0435\u0431\u0435 \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0411\u0420\u0410\u0422\u0421\u041a\u0418\u0415 \u043b\u043e\u0430\u0434\u0435\u0440\u044b (\u0441\u0432\u043e\u0438 \u0440\u0435\u0431\u044f\u0442\u0430) \u043f\u043e\u0439\u043c\u0443\u0442, \u0433\u043b\u044f\u0434\u0438:\n\u041d\u0430\u0448 \u043b\u043e\u0430\u0434\u0435\u0440:\njavascript\nmodule.exports = function(){\n  if(this.nextLoader.needAst){\n    this.callback(ast)\n  }\n  else{\n    this.callback(ast.toCss(), ast.toMap())\n  }\n}\n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043b\u043e\u0430\u0434\u0435\u0440:\n``` javascript\nmodule.exports = loader\nloader.needAst = true\nfunction loader(ast){\n}\n```\n\u0438\u043b\u0438 \u0434\u0430\u0436\u0435 \u0442\u0430\u043a, \u0442\u0438\u043f\u0430 \u0435\u0441\u043b\u0438 \u043c\u044b, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043b\u043e\u0430\u0434\u0435\u0440\u0430, \u044d\u043a\u0441\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0430 \u043e\u0431\u044c\u0435\u043a\u0442, \u0442\u043e \u043e\u043d \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \"\u043e\u043f\u0446\u0438\u0438 \u043b\u043e\u0430\u0434\u0435\u0440\u0430\", \u0430 \u0435\u0433\u043e \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e loader \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043b\u043e\u0430\u0434\u0435\u0440\u043e\u043c\n``` javascript\nmodule.exports = {\nneedsAst: true,\nnoCompile: true,\nloader: function(ast){\n}\n}\n```\n\u0410 \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c \u043f\u043e \u0446\u0435\u043f\u043e\u0447\u043a\u0435 \u043b\u043e\u0430\u0434\u0435\u0440\u0435 \u043c\u044b \u0447\u0438\u0442\u0430\u0435\u043c \u044d\u0442\u0438 \u043e\u043f\u0446\u0438\u0438\njavascript\nmodule.exports = function loader(){\n  if(this.nextLoaderOptions.needsAst) {\n    this.callback(ast)\n  }\n}\n. \u0410, \u043d\u0443 \u0434\u0430. \u0442\u043e\u0447\u043d\u043e.\n. > \u0414\u0430, \u043d\u043e \u043e\u0431\u0441\u0443\u0434\u0438 \u0441 \u0440\u0435\u0431\u044f\u0442\u0430\u043c\u0438 \u0438\u0437 \u0432\u0435\u0431\u043f\u0430\u043a\u0430\n\u041c\u043e\u0436\u0435\u0442 \u0442\u044b \u043e\u0431\u0441\u0443\u0434\u0438\u0448\u044c? \u0410 \u0442\u043e \u0443 \u043c\u0435\u043d\u044f \u0442\u0440\u0430\u0431\u043b\u044b \u0441 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u043c \u0430 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0443\u043f\u0440\u043e\u0449\u0430\u0442\u044c \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0431\u0440\u0435\u0434. \u0418\u043b\u0438 \u0443 \u0442\u0435\u0431\u044f \u0432\u0440\u0435\u043c\u044f \u043d\u0435\u0442 \u043d\u0430 \u0442\u0430\u043a\u043e\u0435? (\n\u041a\u0430\u043a \u0440\u0430\u0437 \u0431\u044b \u0432\u0430\u043c \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u043b\u0430\u0441\u044c \u0442\u0430\u043a\u0430\u044f \u0444\u0438\u0448\u043a\u0430 \u0441 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0435\u0439 ast, \u0440\u0430\u0437 \u0432\u0435\u0431\u043f\u0430\u043a \u0442\u0430\u043a \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u0435\u043d.\n\u041d\u0435 \u043d\u0443 \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u043e\u0442 \u0442\u0430\u043a \u0442\u0438\u043f\u0430, \u043d\u043e \u0442\u0443\u0442 \u043c\u044b \u043b\u0438\u0448\u043d\u044e\u044e \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u044e \u041d\u0410 \u0412\u0421\u042f\u041a\u0418\u0419 \u0421\u041b\u0423\u0427\u0410\u0419, \u0414\u0415\u041b\u0410\u0415\u041c, \u0447\u0442\u043e \u043f\u043b\u043e\u0445\u043e ^^\njavascript\nvar code = new String(ast.toCss())\ncode.ast = ast\nthis.callback(code)\njavascript\nfunction loader(code){\n  var ast = code.ast || new AST(code)\n}\n. ",
    "HeikoMamerow": "Hey, I appreciate your conversation. This was very instructive for me. C\u041f\u0410\u0421\u0418\u0411\u041e ;-)\n. ",
    "alexlibby": "No problem - do the following in an ASTExplorer session:\n1. Replace the input CSS with this:\n``` css\nurl {\ncontent: \"https://color.adobe.com/create/color-wheel/?copy=true&base=2&rule=Triad&selected=0&name=Copy%20of%20Taupe&mode=rgb&rgbvalues=0.5117647171020507,0.4559572206288501,0.359224226741925,0.5918253479903853,0.843137264251709,0.6988034991830846,0.8117647171020508,0.7529411911964586,0.6509804129600525,0.5373702727493649,0.42941746491123256,0.6117647171020508,0.4599704491887691,0.3848124625970275,0.5117647171020507&swatchOrder=0,1,2,3,4\";\n}\n```\n1. Replace the code in the bottom left window with this:\n``` js\nimport * as postcss from 'postcss';\n// helper functions\nfunction stripParam(paramVal, stripVal) {\n  return paramVal.replace(stripVal + \"=\", \"\").toString();\n}\nfunction chunk(arr, n) {\n    return arr.slice(0,(arr.length+n-1)/n|0).\n           map(function(c,i) { return arr.slice(ni,ni+n); });\n}\n// functions to convert colors\nfunction displayRGB(colorVal, colorMode) {\n  var arr = [];\nfor (var v = 0; v < 3; v++) {\n    colorVal[v] = Math.round(colorVal[v] * 255); \n    arr.push(colorVal[v]);  \n  }\nreturn \"rgb(\" + arr.join(\", \") + \")\";\n}\nfunction displayHEX(rgb){\n rgb = rgb.match(/^rgba?[\\s+]?([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n return (rgb && rgb.length === 4) ? \"#\" +\n  (\"0\" + parseInt(rgb[1],10).toString(16)).slice(-2) +\n  (\"0\" + parseInt(rgb[2],10).toString(16)).slice(-2) +\n  (\"0\" + parseInt(rgb[3],10).toString(16)).slice(-2) : '';\n}\nvar colorsArray = [], colorMode;\nexport default postcss.plugin('postcss-color-cc', (options = {}) => {\n    // Work with options here\n    return css => {\n        // Transform each rule here\n        css.walkDecls(decl => {\n          var root = postcss.parse(css);\n          var rule = root.first;\n          var value = decl.value;\n      if (value.indexOf(\"color-wheel\") !== -1) {\n\n        // time to split into values\n        var proplist = value.split(\"&\");\n        for (var i = 0; i < proplist.length; i++) {\n\n        // parse for palette mode\n        if (proplist[i].indexOf(\"mode\") != -1) {\n          colorMode = stripParam(proplist[i], \"mode\").toUpperCase().trim();\n          console.log(\"Palette mode (RGB or HEX): \" + colorMode);  \n        }\n\n        // parse for RGB values\n        if (proplist[i].indexOf(\"rgbvalues\") != -1) {\n\n          // remove the \"rgbvalues=\" text and extract values fro URL to array\n          var colorlist = proplist[i].replace(\"rgbvalues=\", \"\").toString();\n          var array = chunk(postcss.list.comma(colorlist), 3);\n\n          // calculate colors in appropriate format\n          for (var v = 0; v < 5; v++){\n            if (colorMode == \"HEX\") {\n              colorsArray[v] = displayHEX(array[v]);   \n            } else if (colorMode == \"RGB\") {\n              colorsArray[v] = displayRGB(array[v]);\n            }\n          }\n\n          // render chosen format of color on screen\n          var origRule = decl.parent;\n          var firstRule = origRule.cloneBefore({ selector: ':root' }).removeAll();\n\n          for (var v = 0; v < 5; v++){\n            firstRule.append({ prop: \"--color\" + v, value: colorsArray[v] });\n          }\n\n          // remove original rule\n          var selectorID = rule.selector;\n          console.log(selectorID);\n          rule.remove();\n\n        }\n      }\n    }    \n  });\n};\n\n});\n```\nThe code I am trying to get working is in the // remove original rule section - this is the output from console:\n\nAny ideas?\n. Yep - that's the one I would expect to see :-)\nThis is the one I want to completely remove, so my expected output (eventually) would be this:\ncss\n:root {\n  --color0: rgb(131, 116, 92);\n  --color1: rgb(151, 215, 178);\n  --color2: rgb(207, 192, 166);\n  --color3: rgb(137, 110, 156);\n  --color4: rgb(117, 98, 131);\n}\nThere is still some tweaking to do, such as ensuring it lands at the top of any style sheet, but for now, I just want to see the original selector (in this case #url) removed. \n. Thanks for your help @ai - that worked perfectly!\nI've changed it as indicated, although I had to change the .walkDecls command to root.walkDecls, before it worked:\nexport default postcss.plugin('postcss-color-cc', (options = {}) => {\n    // Work with options here\n    return root => {\n        // Transform each rule here\n        root.walkDecls(decl => {   <!--- CHANGED HERE TOO...\n          var rule = root.first;\n          var value = decl.value;\nI can now change the plugin code I have stored over at Github... :-)\n. ",
    "yachaka": "For anyone wondering, I've settled on using es5 for theses modules.  \u00af_(\u30c4)_/\u00af\n. Webpack has a really complicated API, that's for sure.\nI'm pretty sure nobody really gets it.\nThanks anyways !\n. @michael-ciniawsky As @ai correctly mentioned, this is more of a Webpack issue. You're right though, Webpack code does obliterate the understanding at first sight.\n. ",
    "GarthDB": "ha! I'm an idiot - thanks.\n. @ai - it might work to implement Unified to handle the parser and plugin loading.\n. With what I'm building I'm using the JavaScript API.\n. ",
    "wooorm": "\nDisclaimer: I\u2019m biased.\n\nI\u2019m all for unified. \ud83d\ude09 \ud83d\udc4d I\u2019ve thought a lot about creating processors with retext/remark/* and unified works well. I don\u2019t know too much about PostCSS and the likes though.\n\nbut Unified\u2019s AST basis is not the best\n\nThat\u2019s not entirely true.\na) unified is separate from Unist: you can use any syntax tree you like (at least it should work, but is untested).\nb) Unist defines that nodes must have a type. All other stuff is optional.\nI really suggest using value: string for text nodes, children: Array.<Node> for parents, and position: {start: {line, column, offset}, end: {line, column, offset}} though. You don\u2019t have to, but it works in my experience.\nFinally, by using these properties, you get these helpers with it for free! \ud83c\udf88\n. @ai <3\n\n\nWhat is Unified without Unist?\n\n\nunified is everything non-node: the plugin management (.use), processing stages (.process, .parse, .run, .stringify), constructing new processors, etc. Aside: there\u2019s also helpers to create \u201cengines\u201d around processors, so you can create gulp-, grunt-, or atom- plugins, or CLIs, without much code.\n\n\nI one hand I love pain JS objects. In other hand DOM-like API is very good for new developers. For example, Stylelint rules show be written by developer with any qualification. What you thoughts about it?\n\n\nI initially started with an object model in retext: TextOM (old version can be seen here). I used to think similarity to the DOM would make it easier too, but I now think the inverse: everyone knows JSON objects, beginners know how to .push to a list of nodes, iterate over them, .splice from them, etc. The DOM is easy, but JSON is easier!\nThe difference is that, in PostCSS the helpers are on nodes: node.append(child), in Unist the utilities are published on npm (or wherever): append(node, child).\nP.S. Unist doesn\u2019t require nodes to be plain vanilla objects: they can be instances just as well.\nP.P.S. Some examples, quite similar to Stylelint: this one from awesome-lint, which isn\u2019t the easiest to do, but still quite readable I think. Another example is this one from the remark-lint docs.\n\n\nWhat do you think about Babel visitor API? It is good to combine all plugins to work in one loop instead of looping separated in every plugin.\n\n\nReally cool! I haven\u2019t run into performance yet, remark/retext/* aren\u2019t as big as PostCSS / Babel.\nBut, there should definitely be a plugin to do that. I think it could be entirely opt-in and based on external projects.\n. > I like the idea about engines. Where I can read about them and about your plugin API?\nThe plug-in API is described in \u201cprocessor.use\u201d (read the section on attachers and transformers too). \u201ctransformers\u201d are run by trough, so they can return values, return promises, accept a next callback, etc.\nMore on the engine is in its readme. The engine passes another value to plugins, a fileSet. I haven\u2019t needed it much though, so if there\u2019s something PostCSS needs / anyone needs we should discuss that \ud83d\udc4c \n\nWhat do you think about parent node in AST?\n\nIn TextOM we had those too. In my opinion they aren\u2019t useful very often (in remark/retext at least), and if you need them you can use visit-parents which passes a list of all parents to the visitor. Also: they\u2019re hard to keep up to date!\n\nOther question, how to make a validations? For example, to prevent user from setting integer to string value?\n\nCurrently, I don\u2019t really do that. In my opinion, in a loose language like JavaScript, you should just go with the flow and try to accept as many \u201cwrong\u201d values as possible and coerce them to things you do understand.\nAlso: it\u2019s a development thing right, something that may need to be there in tests, but not really when published to npm. I\u2019ve created some assertion libraries which test the tree, so those could be used\n. ",
    "ideadapt": "In my opinion this is not about content and validation, but syntax and parsing. The parser of postcss seems not to be strictly spec conform. I think a non spec conform css input should throw an error.\nAs far as I see, postcss does not use postcss-selector-parser, or did I oversee something?\nUpdate: I just found post-selector-parser having the same issue: https://github.com/postcss/postcss-selector-parser/issues/2\n. Hi\nThanks for the explanation.\ncss3-selectors/#negation is part of css-syntax-3. \nAt CSSLint/parser-lib the tokenizer itself is meant to be spec conform already. Thats why I came up with this issue. parser-lib threw an error when parsing my 20k css, it revealed a useless little peace of code, something like a:not(.a,.b) :)\nI still don't think validation is appropriate here, since its a tokenizer/parser issue. But however, I just learned that in CSS 4 this issue does not matter any more: https://github.com/postcss/postcss-selector-parser/issues/2#issuecomment-243084774\n. ",
    "alekhrycaiko": "Need to remove prior commit, closing.\n. ",
    "roose": "@ai done, https://github.com/roose/postcss-test\n. ",
    "bcole808": "+1, I am having a similar problem. \nI use grunt-sass to first compile our SCSS into CSS files, then I use grunt-postcss to do autoprefixer and cssnano and I have noticed that:\n\nSourcemaps output from just grunt-sass have correct line numbers\nSourcemaps output from grunt-postcss often have incorrect line numbers, like 1\n\nThis is basically my configuration in grunt:\n```\nsass: {\n    options: {\n        sourceMap: true,\n        outputStyle: 'compact',\n        includePaths: ['assets/styles']\n    },\n    dist: {\n        files: {\n            'assets/main.min.css' : 'assets/styles/main.scss',\n        }\n    }\n},\npostcss: {\n    options: {\n        map: true,\n        processors: [\n            require('autoprefixer')({\n                browsers: ['last 4 versions']\n            }),\n            require('cssnano')()\n        ]\n    },\n    dist: {\n        src: ['assets/*.css']\n    }\n},\n```. Thanks for helping look into this, @jonathantneal!\nI created an isolated example of the problem for you to see here: \nhttps://github.com/bcole808/postcss-examples/tree/issue-882/sourcemap-line-number-bug\nAnd here is a quick video illustrating the problem: \nhttp://www.bencole.net/s/2017-01-03_13-11-25.mp4 \nYou can see in the video that I inspect the color of the link to see where the color:red property is being set. When I run just grunt sass, the sourcemap points to line 5 of box.scss (correct line), but when I run grunt postcss suddenly it points to line 1 of box.scss (wrong line).\n. ",
    "jantimon": "In my plugin I had to add the config.compilation.compiler to https://github.com/jantimon/iconfont-webpack-plugin/blob/master/lib/postcss-plugin.js#L134 and moved the part where it loads and works with the images to another file so that webpack can watch the images for changes.\nUnfortunately that way it works only with webpack.\n. ",
    "g0ddish": "Just adding any background image to any component does it.\n```\n/*\n * DEVELOPMENT WEBPACK CONFIGURATION\n /\nconst path = require('path');\nconst fs = require('fs');\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst logger = require('../../server/logger');\nconst cheerio = require('cheerio');\nconst pkg = require(path.resolve(process.cwd(), 'package.json'));\nconst dllPlugin = pkg.dllPlugin;\n// PostCSS plugins\nconst cssnext = require('postcss-cssnext');\nconst postcssFocus = require('postcss-focus');\nconst postcssReporter = require('postcss-reporter');\nconst plugins = [\n  new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading\n  new webpack.NoErrorsPlugin(),\n  new HtmlWebpackPlugin({\n    inject: true, // Inject all files that are generated by webpack, e.g. bundle.js\n    templateContent: templateContent(), // eslint-disable-line no-use-before-define\n  }),\n];\nmodule.exports = require('./webpack.base.babel')({\n  // Add hot reloading in development\n  entry: [\n    'eventsource-polyfill', // Necessary for hot reloading with IE\n    'webpack-hot-middleware/client',\n    path.join(process.cwd(), 'app/app.js'), // Start with js/app.js\n  ],\n// Don't use hashes in dev mode for better performance\n  output: {\n    filename: '[name].js',\n    chunkFilename: '[name].chunk.js',\n  },\n// Add development plugins\n  plugins: dependencyHandlers().concat(plugins), // eslint-disable-line no-use-before-define\n// Load the CSS in a style tag in development\n  cssLoaders: 'style-loader!css-loader?localIdentName=[local][path][name][hash:base64:5]&modules&importLoaders=1&sourceMap!postcss-loader',\n// Process the CSS with PostCSS\n  postcssPlugins: [\n    postcssFocus(), // Add a :focus to every :hover\n    cssnext({ // Allow future CSS features to be used, also auto-prefixes the CSS...\n      browsers: ['last 2 versions', 'IE > 10'], // ...based on this browser list\n    }),\n    postcssReporter({ // Posts messages from plugins to the terminal\n      clearMessages: true,\n    }),\n  ],\n// Tell babel that we want to hot-reload\n  babelQuery: {\n    presets: ['react-hmre'],\n  },\n// Emit a source map for easier debugging\n  devtool: 'cheap-module-eval-source-map',\n});\n/\n * Select which plugins to use to optimize the bundle's handling of\n * third party dependencies.\n \n * If there is a dllPlugin key on the project's package.json, the\n * Webpack DLL Plugin will be used.  Otherwise the CommonsChunkPlugin\n * will be used.\n \n */\nfunction dependencyHandlers() {\n  // Don't do anything during the DLL Build step\n  if (process.env.BUILDING_DLL) {\n    return [];\n  }\n// If the package.json does not have a dllPlugin property, use the CommonsChunkPlugin\n  if (!dllPlugin) {\n    return [\n      new webpack.optimize.CommonsChunkPlugin({\n        name: 'vendor',\n        children: true,\n        minChunks: 2,\n        async: true,\n      }),\n    ];\n  }\nconst dllPath = path.resolve(process.cwd(), dllPlugin.path || 'node_modules/react-boilerplate-dlls');\n/\n   * If DLLs aren't explicitly defined, we assume all production dependencies listed in package.json\n   * Reminder: You need to exclude any server side dependencies by listing them in dllConfig.exclude\n   \n   * @see https://github.com/mxstbr/react-boilerplate/tree/master/docs/general/webpack.md\n   /\n  if (!dllPlugin.dlls) {\n    const manifestPath = path.resolve(dllPath, 'reactBoilerplateDeps.json');\nif (!fs.existsSync(manifestPath)) {\n  logger.error('The DLL manifest is missing. Please run `npm run build:dll`');\n  process.exit(0);\n}\n\nreturn [\n  new webpack.DllReferencePlugin({\n    context: process.cwd(),\n    manifest: require(manifestPath), // eslint-disable-line global-require\n  }),\n];\n\n}\n// If DLLs are explicitly defined, we automatically create a DLLReferencePlugin for each of them.\n  const dllManifests = Object.keys(dllPlugin.dlls).map((name) => path.join(dllPath, /${name}.json));\nreturn dllManifests.map((manifestPath) => {\n    if (!fs.existsSync(path)) {\n      if (!fs.existsSync(manifestPath)) {\n        logger.error(The following Webpack DLL manifest is missing: ${path.basename(manifestPath)});\n        logger.error(Expected to find it in ${dllPath});\n        logger.error('Please run: npm run build:dll');\n    process.exit(0);\n  }\n}\n\nreturn new webpack.DllReferencePlugin({\n  context: process.cwd(),\n  manifest: require(manifestPath), // eslint-disable-line global-require\n});\n\n});\n}\n/*\n * We dynamically generate the HTML content in development so that the different\n * DLL Javascript files are loaded in script tags and available to our application.\n /\nfunction templateContent() {\n  const html = fs.readFileSync(\n    path.resolve(process.cwd(), 'app/index.html')\n  ).toString();\nif (!dllPlugin) {\n    return html;\n  }\nconst doc = cheerio(html);\n  const body = doc.find('body');\n  const dllNames = !dllPlugin.dlls ? ['reactBoilerplateDeps'] : Object.keys(dllPlugin.dlls);\ndllNames.forEach(dllName => body.append(<script data-dll='true' src='/${dllName}.dll.js'></script>));\nreturn doc.toString();\n}\n```\n. Development :(\n. This takes forever\n```\n.headerbg{\n    background-image: url(\"./bg-header.png\");\n    background-size: cover;\n    background-color: transparent;\n}\n```\nthis takes half a second. Maybe I'm doing it wrong.\n.headerbg{\n    background-size: cover;\n    background-color: transparent;\n}\n. Where does it log to?\nChanges to config ->\nconst postcssDevtools = require('postcss-devtools');\n..........\n........\n postcssPlugins: [\n    postcssFocus(), // Add a :focus to every :hover\n    cssnext({ // Allow future CSS features to be used, also auto-prefixes the CSS...\n      browsers: ['last 2 versions', 'IE > 10'], // ...based on this browser list\n    }),\n    postcssReporter({ // Posts messages from plugins to the terminal\n      clearMessages: true,\n    }),\n    postcssDevtools()\n  ],\n. The issue was unrelated to PostCSS for anyone in the future who comes across this this issue was with my image (jpg|png|gif) loaders. Thanks for your assistance @ai !\n. ",
    "artemgurzhii": "@ai I would like to. Where can we chat? I would like to get more info.\n. ",
    "maliyshock": "http://joxi.ru/DmBnpRduNX4xOm\nOutput css is clear cause errors.\nI know that is not good. But i don`t have any ideas whats wrong. And it is better then nothing.\nI reproduce that situation on other machines with that package json\nAnd i cant give you more examples, cause it is exist product.\nTry it on your own code, with big scss files, and im sure u can reproduse that.\nInput scss - the code is fine\n``` css\n.table{\n  color: #000;\n  width: 100%;\n  text-align: left;\n  font-size: 13px;\n  min-width: 710px;\n& th{\n    font-family: Arial, \"Helvetica Neue\", Helvetica, sans-serif;\n    font-size: 12px;\n    color: $th;\n    background-color: $cabinet;\n    font-weight: 600;\n    padding: 18px 10px;\n    vertical-align: middle;\n    position: relative;\n&:first-child{\n  padding-left: $table-paddings;\n\n  & .table__sort-link{\n    margin-left: 41px;\n  }\n}\n\n&:last-child{\n  padding-right: $table-paddings;\n}\n\n}\n& td{\n    font-weight: 300;\n    font-family: Arial, \"Helvetica Neue\", Helvetica, sans-serif;\n    padding: 18px 10px;\n    position: relative;\n&:first-child{\n  padding-left: $table-paddings;\n}\n\n&:last-child{\n  padding-right: $table-paddings;\n}\n\n}\na{\n    color: $link;\n    text-decoration: none;\n  }\n& .table__title {\n    color: #000;\n  }\n}\n.table--monochrome{\n  & tr:nth-child(n) td{\n    background-color: transparent;\n  }\n}\n.table--vam{\n  & td{\n    vertical-align: middle;\n  }\n}\n.table__title{\n  text-align: left;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  display: inline-block;\n}\n.table--new-skin{\n  font-size: 13px;\n& th {\n    background-color: $user-plank;\n  }\n& .table__title{\n    color: #fff;\n    padding-top: 0;\n  }\n& .icon--round-check{\n    color: $cold-green;\n    font-size: 22px;\n  }\n& .icon--cross{\n    color: $cross;\n    font-size: 15px;\n  }\n& .icon--spinner{\n    color: $table-icon;\n    font-size: 23px;\n    //animation: spin 1s linear infinite;\n  }\n& .icon--clock{\n    font-size: 22px;\n    color: $table-icon;\n  }\n& .table__time{\n    color: $grey;\n    margin-top: 5px;\n  }\n& tr{\n    td.current{\n      background-color: $table-current;\n    }\n&:hover {\n  & td{\n    background-color: $drop-block;\n    &.current{\n      background-color: $table-current;\n    }\n\n    &.danger{\n      background-color: $table-danger;\n    }\n  }\n}\n\n}\n& .icon--round-cross{\n    font-size: 22px;\n    color: $table-triangle;\n    text-align: center;\n    position: relative;\n    display: inline-block;\n  }\n& .icon--cross-man{\n    color: $cross;\n    font-size: 27px;\n  }\n}\ntd.danger{\n  background-color: $table-danger;\n&:hover{\n    background-color: $table-danger;\n  }\n}\n.table__decline-bonus{\n  text-align: center;\n  color: #fff;\n  position: relative;\n}\n.table__float-triangle{\n  &:after{\n    @include pseudo-elem;\n    @include tri-t($table-danger, 12, 12);\n    top: 100%;\n    left: 50%;\n    margin-left: -12px;\n    margin-top: 13px;\n  }\n}\n.table__button-container{\n  float: right;\n  @include inlined;\n  width: 30%;\n  text-align: right;\n}\n.table__decline-bonus--tall{\n  .table & {\n    padding-top: 5px;\n    padding-bottom: 5px;\n  }\n& .b_btn{\n    font-size: 16px;\n    min-height: 30px;\n    padding: 0px 16px;\n    min-width: 0;\n  }\n& .table__text{\n    width: 70%;\n    @include inlined;\n    padding-left: 20%;\n  }\n}\n.table__date, .table__time{\n  display: block;\n}\n//.table__date{\n//  font-weight: bold;\n//}\n.table__sort-link{\n  position: absolute;\n  left: 0%;\n  margin-left: 10px;\n  width: 0;\n  height: 0;\n}\n.table__sort-link--up{\n  @include tri-t($table-triangle, 5, 6);\n  bottom: 15px;\n  left:20px;\n}\n.table__sort-link--down{\n  @include tri-b($table-triangle, 5, 6);\n  bottom: 15px;\n}\n.table__tr--shadow{\n  td {\n    box-shadow: inset 0px 1px 0 0px $cabinet;\n  }\n}\n.current{\n  &.table__title{\n    color: $cold-green;\n  }\n&.table__sort-link--up{\n    border-bottom-color:$cold-green;\n  }\n&.table__sort-link--down{\n    border-top-color:$cold-green;\n  }\n}\n.table{\n  .icon--arrow{\n    display: inline-block;\n    width: 24px;\n    height: 24px;\n&:after{\n  display: none;\n}\n\n}\n.icon--arrow-bottom{\n    & .svg-wrapper{\n      transform: rotate(0deg);\n      @include transition;\n    }\n& .svg-icon--arrow{\n  fill: $table-triangle;\n}\n\n&:before{\n  display: none;\n}\n\n}\n.icon--arrow-top{\n    & .svg-wrapper{\n      transform: rotate(180deg);\n      @include transition;\n    }\n& .svg-icon--arrow{\n  fill:$cold-green;\n}\n\n}\ntr.current td{\n    background-color: $drop-block;\n  }\ntr.current th{\n    background-color: $drop-block;\n  }\ntr.current .current{\n    background-color: $drop-block;\n  }\n}\n.contests-splicer:hover {\n  & td {\n    background-color: $dark-popup;\n  }\n}\n.deposit__td-icon{\n  width: 88px;\n}\n.table__toggler{\n  cursor: pointer;\n}\n.table__toggler-btn{\n  cursor: pointer;\n  position: relative;\n}\n```\n. \u041a\u0430\u043a\u043e\u0433\u043e \u043b\u0435\u0448\u0435\u0433\u043e \u043c\u044b \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c\u0441\u044f? XD\n\u041f\u043e CSS. \u041e\u043d \u043f\u0443\u0441\u0442\u043e\u0439 \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435. \u0422.\u0435. \u043a\u0430\u043a \u044f \u0441\u0435\u0431\u0435 \u044d\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e. Postcss \u043f\u0430\u0440\u0441\u0438\u0442 css-\u043a\u0443 \u0432 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043c\u043e\u043c\u0435\u043d\u0442 \u0447\u0442\u043e-\u0442\u043e \u0438\u0434\u0451\u0442 \u043d\u0435 \u0442\u0430\u043a, \u043e\u043d \u0432\u0430\u043b\u0438\u0442\u0441\u044f \u0438 \u0432\u044b\u043f\u043b\u0451\u0432\u044b\u0432\u0430\u0435\u0442 \u043f\u0443\u0441\u0442\u043e\u0439 css.\n\u042f \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e postcss-scss - \u044d\u0442\u043e \u0432\u0438\u0434\u043d\u043e \u0432 packaje.json.\n\u042f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e node-sass \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 scss  \u0432 css\n\u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u044d\u0442\u043e \u0442\u0430\u043a\nnode-sass markup/scss/layouts/old-layout/index.scss | postcss --use autoprefixer --autoprefixer.browsers '> 1%, last 2 versions' > public/css/my-styles.css\n. \u0421\u043f\u0430\u0441\u0438\u0431\u043e. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u043c\u043e\u0433\u0443 \u0447\u0443\u0442\u044c \u043f\u043e\u0437\u0436\u0435.\n\u0421\u0442\u0440\u0430\u043d\u043d\u043e, \u0447\u0442\u043e \u0441 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u043e\u043c, \u0438\u0431\u043e \u0435\u0441\u043b\u0438 \u044f \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u043c\u043e\u0434\u0443\u043b\u0435\u0439, \u0430 \u043d\u0435 \u043f\u0438\u0448\u0443 \"\u043e\u0442 \u0442\u0430\u043a\u043e\u0439-\u0442\u043e \u0432\u0435\u0440\u0441\u0438\u0438 \u0438 \u0432\u044b\u0448\u0435\" - \u0442\u043e \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u043a. \u041c\u043e\u0436\u0435\u0442 \u044d\u0442\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 postcss-cli ?\n. ",
    "swernerx": "It's interesting.\nI am just starting to follow this thread.\nPostCSS Smart Import was a fork of PostCSS Import, right.\nIt has different goals though. It has larger goals.\nThe first thing is that I updated all the deps.\nThen I removed all the media query handling for imports. PostCSS Import claims it follows the CSS spec here. I don't care about that. In my opinion the CSS spec of imports is not that interesting for doing a PostCSS plugin for the typical \"Webpack world\". For me the main reasons for the removal was simplification. A cleanup step for bringing new features in for a next step.\nI think that the whole URL handling + import area is pretty unstable right now. Especially as there are a lot of tools building up on PostCSS using other functions e.g. asset-width but with the same plain CSS-relative URLs. A PostCSS import plugin should IMHO handle all these steps correctly without delegating this to the user adding another plugin.\nAs mentioned in the readme of postcss-smart-import: I like to have a feature combination of postcss-import + postcss-url + postcss-assets + ... inlining / svg spriting / etc. inside one plugin.\nIMHO keeping postcss-import with the original feature scope alive is not that intesting for me. IMHO these plugin should implement whole scopes instead of just one area. At least from my point of view where the huge plugin environment with tons of separate plugins (all have to be executed in the right order) is quite cumbersome.\nPostCSS Smart Import is implemented in a side project for my day-to-day job. It's not anything I get actively paid or supported for. As most open source it's just that I required something for myself and there was no value in keeping it closed.\n. - As I said it has a different scope. So I do not think a PR makes sense. It reduces features e.g. the media query based imports.\n- I do not like to put sensible default behavior into a config/preset file so that every user has to care. We now what extensions e.g. are used for sugarss, etc. We just have to handle them right. Same with asset paths.\n. ",
    "airdrummingfool": "Here's a simple example project: https://github.com/airdrummingfool/postcss-issue-907\nIf you remove the empty postcss task (postcss([])) from the usemin less build pipeline, styles/main.css does not show up in the sources.. @ai I'm not sure I understand... without PostCSS, the issue does not happen. Can you elaborate on how it is a bug in source-map instead of PostCSS?. ",
    "teaualune": "@ai thanks! :coffee:\n. @ai those ducks are happy that you say them cute \ud83d\ude04 \n. ",
    "alexisvincent": "Thanks for the amazingly quick response. I noticed @guybedford did this in the latest systemjs-css plugin. Whats stopping me from importing postcss and plugins in the application and using it like that?\n. Thanks. To clarify, why this, over importing and using plugins directly in 'application' level code (Which gets compiled by something like browserify or webpack)?\n. Ok thanks. Do you know to what degree other plugins support running in the browser?\nI'll contribute once I'm feeling more confident I know whats going on :) Thanks :)\n. This is what I would have expected. However there's no real reason fs related things shouldn't be able to work. If we have a way of mapping browser URL's to files.\n. @al How did you even get pulled in to this convo?\n. @ai Sorry, convo <-> conversation\n. @al isn't mentioned anywhere, and yet he was still subscribed to the issue. Sounds like a bug with github to me\n. Oh I see \ud83d\udc4d \n. ",
    "al": "Wrong @al. Unsubscribing.\n. ",
    "emilbayes": "So my current use case is pretty specific; my test server for prototyping parses all the html it sends off and resolve any css using PostCSS. I've made a live reload plugin that will let me update inline \"compiled\" css, but the live reload server sends off absolute urls. Since relative urls can be ambiguous, it is not always possible to check whether the relative url in the source map is the same file as the received absolute url.\nAnother, albeit weaker case, is that browserify gives absolute paths (also because absolute paths are unambiguous). If you're worried about performance, we can cache the function in the constructor \n. Well, my use case is specific, but the applicability of absolute paths is not. The API is not disrupted by this change, since this would be a semver minor change. \n. Another option might be to allow to set a sourceRoot which would also solve the problem, and may be more semantic to the spec\n. Another application of this is if you write your output to a different place than where your input lives. I guess you solve this by resolving from and to, but if to can't be determined ahead of time, absolute paths are your only option\n. @ai I ended up re-resolving the source map sources in relation to to which worked great. For anyone else coming here, this is what I ended up doing:\n``` js\n'use strict'\nconst postcss = require('postcss')\nconst PassThrough = require('stream').PassThrough\nconst concat = require('concat-stream')\nconst duplexify = require('duplexify')\nconst path = require('path')\nconst mold = require('mold-source-map')\nmodule.exports = function (opts) {\n  opts = opts || {}\n  const p = postcss([ require('../index')(opts) ])\nconst input = new PassThrough()\n  const output = mold.transformSources(function (sourceFile) {\n    return path.resolve(path.dirname(opts.path), sourceFile)\n  })\ninput.pipe(concat(function (text) {\n    p.process(text, { from: opts.path, to: opts.path, map: true }).then(function (res) {\n      output.end(res.css)\n    }, function (err) {\n      output.emit('error', err)\n    })\n  }))\nreturn duplexify(input, output)\n}\n```\n. ",
    "kubosho": "@ai I fixed it (add input/output example) \ud83d\udc4d \n. I see.\n. @ai Fixed it! ;)\n. @ai Should I do like https://github.com/cssstats/cssstats-core/tree/master/test ?\n. @ai I understood. It means that should do the same display as https://github.com/t32k/stylestats#usage\n. I plan to fix at https://github.com/kubosho/postcss-stylestats/issues/1 in a few days...\n. Thank you for review. It was very helpful.\n. ",
    "sormy": "@ai no, it doesn't\n. ",
    "uncleyo": "Hi, I think I hit the same issue when running postcss on node-sass output.\nif map.from is set, the resulting .map file only references the empty virtual file, while all original sass maps are gone.\n. ",
    "alexturpin": "@ai see #926 . @ai Yep that's fine, just wanted to make sure that it was logged somewhere.. Hello!\nJust wondering if there have been any updates on this? :). No worries. It's not critical enough for me right now to focus time on fixing it, but if I ever come around to it I'll hit you up to ask for tips on where to look to fix it :)\nThanks. @ai What do you mean by pure PostCSS stack? Weback plugin?. Ah so it's a result of incompatibility between other sourcemaps and PostCSS' sourcemaps then?. No worries! Just trying to understand better :). ",
    "GaryJones": "FWIW, I can see evidence of this too.. ",
    "subicura": "+1. @ai Thanks!!. ",
    "x-yuri": "@ai Could you please help me reproduce the issue without postcss?\n1.scss:\nscss\nbody {\n    background: #ddd;\n}\ndiv {\n    width: 100px;\n    height: 100px;\n    margin: auto;\n    background: #666;\n}\n$ yarn add node-sass postcss-cli\n$ rm 1.css*; ./node_modules/.bin/node-sass --output-style compressed --source-map true --source-map-contents 1.scss 1.css\n$ rm 2.css*; ./node_modules/.bin/postcss 1.css --output 2.css\nnode-sass produces the following mappings:\nAAAA,AAAA,IAAI,AAAC,CACD,UAAU,CAAE,IAAI,CACnB,AACD,AAAA,GAAG,AAAC,CACA,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,CACnB\nBut after postcss I get:\nAAAA,KACI,eAAgB,CACnB,IAEG,YACA,aACA,YACA,eAAgB,CACnB\nI want to file a bug to source-map package regarding the issue. Or at least try to figure out why the mappings change. So I'd like to have a test case with source-map package alone.\nWell, my case might be a little off compared to this issue, but certainly related.. Let the author speak for himself:\n\nRuby sass sourcemaps are lacking a lot according to previous discussions with am11. I decided to do better than that and therefore libsass has much more detailed source-maps than ruby sass does (not sure if this is still true, since those discussion are over a year old).\n\nAlso, I'm curious what makes source-map package change source maps when no code changes.\nP.S. I'm going to check if OP's issue still holds.\n1: https://github.com/sass/node-sass/issues/1206#issuecomment-160246152. ...By the way, it might be the root cause of this issue.\n1: https://github.com/mozilla/source-map/issues/252. I now see. Regarding OP's test case. IMO nothing is broken in the \"after\" source map (as well as in the \"before\" one). source-map-vizualization doesn't have the last word in it. It's just another consumer. Which happens to be a visualization tool, and not the best one if you ask me. The whole issue with source maps comes from\u2014correct me if I'm wrong\u2014non-strict spec. source-map package doesn't do anything wrong, it just follows another interpretation of the spec. Not that I'm trying to put the blame on the spec, it probably has its reasons.\nThen, these days the issue can't be reproduced (line numbers off by two). Or line numbers are simply off by one consistently across the whole stylesheet. At least in Chromium 63.0.3239.132. From what I can see, Chromium takes the first mapping after the opening curly bracket.\nRegarding my test case, I was wondering why so much less mappings was left after postcss. So, postcss parses the css code, which results in AST with line/column numbers. No processing is done. Then source map is generated based on the AST. After which original source map is applied.\nNow then, what does \"apply\" here mean again? We have source code (A), source code A after processing with sass (B), and source code B after processing with postcss (C, nothing has changed). And we have two source maps: B -> A, C -> B. When applying, source-map package takes a mapping from C -> B source map, its original position (B) and maps it using B -> A source map to original original position (A). That gives us as many mappings as was generated by postcss, but there could be less (when adjacent mappings point to the same position).",
    "kkliebersbach": "Any progress on this? Still suffering quite a bit from this issue. . Thanks, looking forward to it. If you need some testing done, just let me know. :wink: . ",
    "Diokuz": "Thank you, but I still have a question) Why you have to place 'src/app.css' and 'dest/app.css' code twice? Why you cannot use only options.from and options.to, without css argument and then with fs.write magic? It looks like repeated unnecessary double-logic.. So, maybe just handle that case:\nvar postcss = require('postcss');\npostcss([ require('autoprefixer'), require('cssnano') ])\n    .process({ from: 'src/app.css', to: 'app.css' });\n// and after all transformations, `/app.css` will appear as an output file.\nI dont think one more readAndWrite method is a good idea either) but I think code-example above is more consistent and simpler for JS API usage.. > So we need to support passing and returning strings.\nMaybe just make another if (type of argument[0] === 'string') ... else if (typeof === 'object') ?)\nDocs says from and to \u2013 both are files, and I expect that if I need only input and output files, I can use only these two parameters, and forget about css-string and then, and fs.. I think I did not get something important here, please, help me)\nIt seems to me that .process({ from: 'src/app.css', to: 'app.css' }) more consistence with docs) It just says that options.from and options.to \u2013 are files. And logical question here: why these parameters not work)\n\noptions.from the path of the CSS source file. You should always set from, because it is used in source map generation and syntax error messages.\noptions.to the path where you\u2019ll put the output CSS file. You should always set to to generate correct source maps.\n\nhttp://api.postcss.org/global.html#processOptions\nAlso, I did not get, what css will be taken in this example and why:\nprocessor.process(css, { from: 'a.css', to: 'a.out.css' })\n  .then(result => {\n     console.log(result.css);\n  });\nhttp://api.postcss.org/Processor.html#process\nFrom css string or from a.css content?\nWhat options.from and options.to actually do?. postcss.parse('.src\u2044x___x {\\n  color: red;\\n}\\n:export {\\n  _x: src\u2044x___x;\\n}\\n').nodes[1]\n\u2193\u2193\u2193\nRule {\n  raws: { before: '\\n', between: ' ', semicolon: true, after: '\\n' },\n  type: 'rule',\n  nodes: \n   [ Declaration {\n       raws: [Object],\n       type: 'decl',\n       parent: [Circular],\n       source: [Object],\n       prop: 'x',\n       value: 'src\u2044x___x' } ],\n  parent: \n   Root {\n     raws: { semicolon: false, after: '\\n' },\n     type: 'root',\n     nodes: [ [Object], [Circular] ],\n     source: { input: [Object], start: [Object] } },\n  source: \n   { start: { line: 4, column: 1 },\n     input: \n      Input {\n        css: '.src\u2044x___x {\\n  color: red;\\n}\\n:export {\\n  _x: src\u2044x___x;\\n}\\n',\n        id: '<input css 2>' },\n     end: { line: 6, column: 1 } },\n  selector: ':export' }\nSo, props is x. After that css-loader just do that:\nexports[decl.prop] = decl.value;\nhttps://github.com/webpack-contrib/css-loader/blob/master/lib/processCss.js#L71\nand I lose _\nI just trying to understant what happens in postcss) Why _ lost in prop.\nI understant that it is rather css-loader problem, but I cannot figure out (inside css-loader source) what is wrong.. If I print decl:\njs\ndecl Declaration {\n  raws: { before: '\\n  _', between: ': ' },\n  type: 'decl',\n...\nSo, should it be like\njs\nexports[decl.raws.before.trim() + decl.prop] = decl.value;\n?\nHow to get proper classname there?. Without :export there is no prop key.\nThe question is: why you remove _ from prop, and what to advise css-loader maintainers? Theirs code looks logical, and decl.raws.before.trim() + decl.prop looks wired.. Well, I use postcss-loader first, and it creates :export stuff. Then I use css-loader only to create js objects, but it uses postcss for that. Here is config https://github.com/webpack-contrib/css-loader/issues/541\nShould postcss be able to parse ICSS, or maybe that is a problem?. > you can't really use css-modules with postcss-loader yet #227\nHaha, thats funny) Thanks anyway)\n\nPostCSS keeps _ in class. PostCSS removes leading _ from declaration properties, because it is illegal symbol there.\n\n@ai does postcss supports ICSS syntax?. @ai then I still didn't get it, why it is considered as a normal behaviour to drop leading _ in classnames inside :export?. ",
    "hbshun": "Well, thank you. ",
    "hzlmn": "I could do both, it's IMO a question to you and core team, what will be better for further plans.. @ai Ok, I gonna read throughcsstree source to figure out what could be done.. @ai As far as i can see, it is pretty possible to backport tokenizer from csstree. I started work on it and will create WIP pull request as soon as i can for ealier feedback.. @ai Seems like project' folder is getting bigger, what do you think about decoupling parser, tokenizer structures to separate folders? It could close one spot here #503 .. @ai Nevermind, anyway it should be part of another PR.\nQuick question, does current parser support passing ignoreErrors param, because as I can see here , this option never passed ?. Hah, you told backporting, so what i actually thought is to take tokenizer part from csstree srcs and port it to postcss. \ud83d\ude04  \nIf purpose is to use csstree then it is a question to @lahmatiy , because current version do not expose tokenizing ability and it involves modifying sources.\nBtw i don't like idea of adding dependency to heavy full featured parser only for tokenizing part, but as i see that project is work in project, so if splitting it to tokenizer , parser packages is an option, it can be easier.. @lahmatiy  Thanks for your feedback and your work on csstree. \nDue to your active work on improving  it, I think it's waste of time to backport it to PostCSS and as you mentioned could also be much effort to support as well. When csstree API will be ready, I can integrate it to postcss.\nFor now @ai, I can update current tokenizer or we can wait until csstree will be \"stable\".\n. ok. Seems like this test case does't pass tokenizing step. I am really wondering why it's not failed inside build, but here is sample.\n```js\nvar tokenize = require('./lib/tokenize')\nvar Input = require('./lib/input')\nvar css = `\na {\n    background: url(\"a).png\");\n    background: url(a;a);\n    background: url(a/*);\n    background: \\;a;\n}\n:not([foo=\")\"]) { }\n:not(div/)/) { }\n:not(:nth-child(2n of [foo=\")\"])) { }\n[foo=\\\"] { }\n[foo={] { }\n[foo=(] { }\n[foo=yes\\:(it\\'s\\ work)] { }\n\\@noat { }\nh1\\{\n    color: \\;\n}\n[attr=;] { }\n`\nvar input = new Input(css, {})\nvar tokens = tokenize(input)\nconsole.log(tokens)\n```\nand with current master postcss I have\n```shell\n/home/olehkuchuk/Projects/postcss/lib/tokenize.js:57\n        throw input.error('Unclosed ' + what, line, pos - offset);\n        ^\nCssSyntaxError: :12:6: Unclosed string\n    at Input.error (/home/olehkuchuk/Projects/postcss/lib/input.js:113:22)\n    at unclosed (/home/olehkuchuk/Projects/postcss/lib/tokenize.js:57:21)\n    at tokenize (/home/olehkuchuk/Projects/postcss/lib/tokenize.js:167:29)\n    at Object. (/home/olehkuchuk/Projects/postcss/index.js:31:14)\n    at Module._compile (module.js:570:32)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.runMain (module.js:604:10)\n``. @ai Correct, my bad :) \nCurrent version passed all tests correctly, but updated version not. Alltokenizerrelated test passed, butescape.csstokenization fails with above error. I Will look more closely on it.. @ai Not yet, I will ping you when it is ready.. Whatpostcss-benchmarkdo you mean? [This](https://github.com/postcss/benchmark) one  ?. @ai Hi, small question - why [this](https://github.com/postcss/postcss-parser-tests/blob/master/cases/inside.json#L23-L32) node has noendblock ? Is it a bug, or there are some purposes?. @ai Will you fix it, or can I ? I mean updating test case to be proper.. @ai It is already fixed, I just have 6 failing tests and this PR will be finished in 2-3 days (Depends on how much coffee I will drink :) ). @ai I passed all tests except [that](https://github.com/postcss/postcss-parser-tests/blob/master/cases/inside.json#L23-L32) one, butpostcss-benchmark` shows almost the same results :confused: I think it's because buffering for jumping back from current position. I will try to improve it a bit.. @ai Yes, but it is less than I expected :pensive:. @ai When do you plan a release? I am playing a bit with different structures and try to add performance improvement .... @ai Of course, I am working on it. Currently, when updated to new architecture (that should improve performance a bit) I have 3 tests failing and Im working on resolving them.\nAlso I have problem with ava when I use it directly without gulp task https://github.com/avajs/ava/issues/1211 maybe you had similar problem.. Thanks. It's almost the same that I done here, just wanted to improve perf at bit, but seems like in current scope it is pretty tricky.. Hi, what do you mean by \"plugin pack\"? Do you want to create you own plugin for postcss?. Any progress on it? I can create WIP PR and we can discuss about structure etc.... @ai Yes, I saw that issue, but it not fully the same thing it's kind like an addition to that propose of including contributing.md to the project, but rather focusing on docs side of postcss internals for example. That's why i created separate issue.. Hello, is it still relevant, can look on it if so?. Yeah, i was just thinking about some kind of general options validations based on something like json schema . Not only for this case. What do you think about it?. Ok, got it.. As for me, I need it, for custom syntax parser that i writing in TypeScript, so i thought that it maybe useful for someone as well.. @subzey \n\nSure. But it'll take some time for me to find out how the tokenizer works.\n\nI currently trying to add docs that will help with this (hopefully), could you please look on #1078 \nMaybe you have something that as a contributor you would like to see there. Also please take a look on parsing stage overview (draft version), is it understandable ?. Yes, I will look what i can do.. Hello, I have small question.\nFor such code sample \n```css\n// First case\n@import \"test\"\n// Second case\n@import \"test\";\n``\nHow shouldendposition be matched for such cases, cuz infirstcase it matched by closing character of params and insecondcase  it matched by start of;` ?\nAs i understand at-rule end position should be end of all params as in second case, but seems like right know Parser don't understand sequence ending different then char ;\n. Yes i know, due to spec. But postcss parse it cuz it should understand sometimes not standard compatible syntax, am i right? So the question is in such cases should it just match ending by end of @import or end of last param?\nI ask it cuz when parsing\na { @import \"./test\" \"test\" }\nshould end  position be end of params or end of import keyword. Okay, thanks.. Cute, no problems. Glad to help \ud83d\udc7e . Just as an addition i think it would be nice to decouple parser in separate package. What do you think @ai?. @ai Did you have a chance to look on it, if not i can fix it?. Okay, i will try to come with something later today.. @ai Quick question, should it be parsed as a single rule node with value \nequal to \"Compo/* incorrect*/sent or it should be three separate nodes corresponding (as in spec)?. @ai Seems reasonable, but to be honest I hardly think that there is a case when such selector could be useful :) . > TypeScript declaration file improvements:\n\nBe sure that your changes wont break anything as well as match TypeScript styling rules defined in \n   typings file.\n   How user can check it?\n\n\nUser can check it locally at least syntax when adding something :) Also he/she can recognize patterns used in.d.ts file like using class instead of interface or namespace instead of module. \nAlso there is even good guide by TypeScript team here. Added fixes based on your feedback. What do you think about achitecture doc's structure.Are you ok with that structure, anything that should be included there?. @Semigradsky Seems like was network problem.. Hi @ai, please review current progress. Are you ok with such description manner. Does it look reasonable for you, are there anything that should be added?. @ai please review, you can check https://github.com/hzlmn/postcss/blob/docs/CONTRIBUTING.md for visual representation.. Great! Sorry for terribly big delay on this \ud83d\ude04 . All passed except one for :not(div/*)*/). What should parser produce in such case?. @ai So comment stripping should be performed for all selectors types except class, id or type or when it should be stripped and when not? Don't you find it a bit confusing that certain selectors will be parsed differently like if i get .Compo/*test*/nent as a selector value i expect  parsing.a/*test*/[href*=\"test\"] to get the same.. @ai I have few additions as well will push PR in few hours :). One possible backward compatible solution is to add extra property to declaration for variables like with !important.. Can take a look, seems like easy fix.. See https://github.com/postcss/postcss/pull/1109. If you add space before and after comment it should be excluded.. > is meant what comment should be excluded if it located not in selector token. Right?\nIn current api we can not know is comment part of single selector or multiple like in this case so decided to have at least one space from some side. See Andrey's comment.\nGoing back to your question i am wondered why do you need such selector? Is it generated css?. 1. filtering variables from declarations. it mostly what done in most cases on user side.\n2. tests will be provided if PR make sense for you and postcss-parser-tests should be updated as well.\n3. why not? yes they are not exactly the same but i don't see possible problems with it.. Okay, so maybe make variable property as an object with subproperties that indicates is it sass/less style variable or custom property. Will close it for now.. Oops good point, thanks.. I know, it was done, because otherwise escapes.css fails in parsing. You can checkout branch and check my first commit. The key point here to produce understandable tokens for parser so it's not fully spec compatible.. Got it.. To be honest i can not come with good advice for it :disappointed:  So maybe i will just change it to something like be attentive and follow TypeScript styling guides. Maybe @jedmao could add something to it?. Oh also, i am wondered where should pluggable syntaxes description be placed cuz it is important part as well?. Good catch, thx. Wondering, is it good for performance? Raw css string could be massive and slicing it each time not a good idea as for me.. ",
    "souse": "how can i fixed it. how can i fixed it @ai . ",
    "Dan503": "oh and I'm using gulp-sass to compile my css. This is all I'm seeing in my console. I'm not sure how to gather any more information than this.\n. ahhh ok, it's not an error in postCSS. It's an error in the postCSS unMQ plugin. That makes sense, the plugin must not support ratio based queries.\nWhen I disabled the unMQ plugin the error went away. (I forgot I had a second set of post-css plugins for compiling an IE8 stylesheet)\nI'll post an issue on the unMQ repo. ",
    "longlho": "@jedmao I think this is breaking due to the generated postcss dist file having:\njs\nexports.default = postcss;\nmodule.exports = exports['default'];\nso import postcss from 'postcss' is broken due to default not exposed.. might have been the add-module-exports plugin in babel :-/\n. yeah definitely that. It adds module.exports = exports['default'] which wipes out exports. I'm using 2.1.5. ",
    "IonicaBizau": "@ai Wow, that was fast. :grin: Thanks!\nI was just wondering that maybe someone else did this before. The postcss-url code may help to build my own.. @michael-ciniawsky Thank you! :+1: . ",
    "creeperyang": "~~Ok, I'll have a try.~~\nAccording to source map v3 protocal:\n\nResolving Sources\nIf the sources are not absolute URLs after prepending of the \u201csourceRoot\u201d, the sources are resolved relative to the SourceMap (like resolving script src in a html document).\n\nThe file property has no relationship with sources path. So maybe we don't have to change anything.\nAnother word, gulp-postcss will have problem with the situation here (And this is why I raise the issue).\nSee https://github.com/postcss/gulp-postcss/blob/master/index.js#L58-L63:\njs\n     if (file.sourceMap) {\n        map = result.map.toJSON()\n        map.file = file.relative\n        map.sources = [].map.call(map.sources, function (source) {\n          return path.join(path.dirname(file.relative), source)\n        })\n        applySourceMap(file, map)\n      }\n@ai Sorry for the misunderstanding (file is used to resolve sources).. Yeah, a great number \ud83d\ude04 . ",
    "michaelkuroda": "@jedmao I see the problem with a simple project that only includes postcss and typescript v2.1.5. Does not include Babel or anything else.. ",
    "morlay": "Has same issue with TypeScript@2.1.x\nit cause by\nexports.default = postcss;\nmodule.exports = exports['default'];\nif we keep module.exports = exports['default']; \nwe have to use export = postcss; instead of export default postcss;\n. ",
    "demrks": "Sorry, I'm not that familiar with PostCSS, just noticed this behaviour while using stylelint that's using PostCSS to parse the styles. You can see it in this AST explorer: https://astexplorer.net/#/M8FFZ4wVEh . ",
    "bernex": "I think you do not understand question. PostCSS can't parse inline styles(parse5 output styles string), it does not hahe selector and brackets. How parse only brackets body and process with PostCSS?. display:flex;color:red; . ",
    "aesopturtle": "Is the version number 2.6.0?\nI tried postcss src/**/*.pcss -o dest/ but it throws an error saying Cannot find module 'src/**/*.pcss'.\nI also tried postcss src/**/*.pcss --dir dest/ but it ends up with the same result.. @michael-ciniawsky The main reason I use pcss extension is because I would like to keep it as a source file and have css extension as an output which could be minified, autoprefixed, etc.. @michael-ciniawsky I tried repeating the npm uninstall/install but still got v2.6.0 :(. Oh... sorry about that -_-\"\nShould I recreate it there?. Reopened at https://github.com/postcss/postcss-cli/issues/78. ",
    "MartinDawson": "@ai Yes, that's it, it's applying the correct vendors now. Thanks for the fast reply. Sorry for posting in the wrong github.\n. ",
    "dace": "Oh, great - good to know. Yeah, will take a look and update. Thanks!!. ",
    "janschoenherr": "I am getting this error:\nERROR in /***/~/postcss/lib/previous-map.js\n    Module not found: Error: Can't resolve 'fs' in '/***/node_modules/postcss/lib'. Thanks!. Thanks for getting back to me.. ",
    "bumbleblym": "not critical \ud83d\ude04. ",
    "alesmenzel": "This is the full log:\n```\n\nwebpack\n\nVersion: webpack 2.2.1\nTime: 1752ms\n[./_app.js] ./_app.js 567 bytes {0} [built]\n[./_test.js] ./_test.js 667 bytes {0} [built]\n[./node_modules/html-entities/index.js] ./~/html-entities/index.js 231 bytes {0} [built]\n[./node_modules/react-dom/index.js] ./~/react-dom/index.js 59 bytes {0} [built]\n[./node_modules/react-dom/lib/ReactDOM.js] ./~/react-dom/lib/ReactDOM.js 5.14 kB {0} [built]\n[./node_modules/react-hot-loader/index.js] ./~/react-hot-loader/index.js 41 bytes {0} [built]\n[./node_modules/react-hot-loader/lib/patch.js] ./~/react-hot-loader/lib/patch.js 209 bytes {0} [built]\n[./node_modules/react-hot-loader/patch.js] ./~/react-hot-loader/patch.js 41 bytes {0} [built]\n[./node_modules/react/react.js] ./~/react/react.js 56 bytes {0} [built]\n[./node_modules/strip-ansi/index.js] ./~/strip-ansi/index.js 161 bytes {0} [built]\n[./node_modules/webpack-hot-middleware/client-overlay.js] (webpack)-hot-middleware/client-overlay.js 1.82 kB {0} [built]\n   [0] multi react-hot-loader/patch webpack-hot-middleware/client ./_test.js 52 bytes {0} [built]\n[./node_modules/webpack-hot-middleware/client.js] (webpack)-hot-middleware/client.js 6.68 kB {0} [built]\n[./node_modules/webpack-hot-middleware/process-update.js] (webpack)-hot-middleware/process-update.js 3.88 kB {0} [built]\n[./node_modules/webpack/buildin/module.js] (webpack)/buildin/module.js 517 bytes {0} [built]\n    + 343 hidden modules\nERROR in ./A.scss\nModule build failed: Error\n    at C:\\Projects\\space-falcon\\node_modules\\webpack\\lib\\NormalModule.js:141:35\n    at C:\\Projects\\space-falcon\\node_modules\\loader-runner\\lib\\LoaderRunner.js:364:11\n    at C:\\Projects\\space-falcon\\node_modules\\loader-runner\\lib\\LoaderRunner.js:230:18\n    at context.callback (C:\\Projects\\space-falcon\\node_modules\\loader-runner\\lib\\LoaderRunner.js:111:13)\n    at C:\\Projects\\space-falcon\\node_modules\\postcss-loader\\index.js:153:13\n @ ./_app.js 3:0-30\n @ ./_test.js\n @ multi react-hot-loader/patch webpack-hot-middleware/client ./_test.js\nERROR in ./A.scss\nModule build failed: Error\n    at C:\\Projects\\space-falcon\\node_modules\\webpack\\lib\\NormalModule.js:141:35\n    at C:\\Projects\\space-falcon\\node_modules\\loader-runner\\lib\\LoaderRunner.js:364:11\n    at C:\\Projects\\space-falcon\\node_modules\\loader-runner\\lib\\LoaderRunner.js:230:18\n    at context.callback (C:\\Projects\\space-falcon\\node_modules\\loader-runner\\lib\\LoaderRunner.js:111:13)\n    at C:\\Projects\\space-falcon\\node_modules\\postcss-loader\\index.js:153:13\nERROR in C:\\Projects\\space-falcon\\node_modules\\extract-text-webpack-plugin\\loader.js??ref--2-0!C:\\Projects\\space-falcon\\node_modules\\style-loader\\index.js!C:\\Projects\\space-falcon\\node_modules\\css-loader\\index.js??ref--2-2!C:\\Projects\\space-falcon\\node_modules\\postcss-loader\\index.js??ref--2-3!C:\\Projects\\space-falcon\\node_modules\\sass-loader\\lib\\loader.js??ref--2-4!C:\\Projects\\space-falcon\\A.scss doesn't export content\n``. I just came across https://github.com/michael-ciniawsky/postcss-loader/tree/docs and there is this little noteIf you are using functions and require() inside options, you need to specify an identifier { ident: 'postcss' } for the setup to work` which seems to fix the issue.\nSimply by adding the indent options:\n{\n    loader: 'postcss-loader',\n    options: {\n        ident: 'postcss',\n        plugins: function () {\n            return [\n                require('autoprefixer')\n            ];\n        }\n    }\n},\nThank you very much!. Iam using the \"extract-text-webpack-plugin\": \"^2.0.0-rc.3\" version. @michael-ciniawsky Both use and loader keywords work, but removing the ident breaks the build, returning error:\nERROR in ./~/css-loader?{\"sourceMap\":true,\"modules\":true,\"importLoaders\":1,\"localIdentName\":\"[path][name]__[local]\",\"minimize\":false}!./~/postcss-loader?{\"sourceMap\":true}!./src/app/containers/page/page.scss\nModule build failed: Error: No PostCSS Config found in: C:\\Projects\\space-falcon\\src\\app\\containers\\page\n    at C:\\Projects\\space-falcon\\node_modules\\postcss-load-config\\index.js:51:26\n @ ./~/css-loader?{\"sourceMap\":true,\"modules\":true,\"importLoaders\":1,\"localIdentName\":\"[path][name]__[local]\",\"minimize\":false}!./~/postcss-loader?{\"sourceMap\":true}!./~/sass-loader/lib/loader.js?{\"sourceMap\":true}!./src/app/containers/page/registration/styles.scss 3:10-282 10:80-352\n @ ./src/app/containers/page/registration/styles.scss\n @ ./src/app/containers/page/registration/index.js\n @ ./src/app/routes/index.js\n @ ./src/app/app.js\n @ ./src/app/index.js\n @ multi react-hot-loader/patch webpack-hot-middleware/client ./src/app/index.js\nShouldn\u00b4t there be a plugins query parameter in the ~/postcss-loader?{\"sourceMap\":true} ?\nMight be a problem with inlining the plugins in options:\n```\nconst autoprefixer = require('autoprefixer');\n{\n    loader: 'postcss-loader',\n    options: {\n        // ident: 'postcss',\n        plugins: function () {\n            return [autoprefixer];\n        },\n        sourceMap: true\n    }\n},\n```\n. ",
    "anshulshukla": "After discussion with @ai , I found that issue is because of order of postcss-cssnext and postcss-nested , Its working fine when I am putting postcss-nested before postcss-cssnext . can someone suggest any particular order ?. @ai will do that , Thanks.. ",
    "SuperOl3g": "alex499 version just fallback to first image for all no-support browsers.\nMy version fully simulate image-set function logic.. Thanks). ",
    "packtpartner": "The main topic of all the books is CSS. You can read the TOC on the book page for more details. @ai Thanks for clarifying. I will create a new PR for the PostCSS book. Is there a place to feature CSS books?. ",
    "kolesnik": "Added it there https://github.com/ai/browserslist/issues/129\nThank you!. ",
    "mrmartineau": "@ai Shall I remove the extra content and resubmit?. @ai I know, I meant to keep two because I think its important to know how to extract the CSS into a new file. If you still don't think that's appropriate, perhaps we can link to a gist or something... sure, ok. I'll resubmit a fresh and clean PR later. ",
    "jakelauer": "Ahh, looks like it is a plugin, my fault. Stylefmt is causing it.. Please ignore, I found this issue in the postcss-scss repo: https://github.com/postcss/postcss-scss/issues/55\nThe solution is to change parser: scss to syntax: scss in the postcss config (if you're using CLI) or to make the change as described in the link.. ",
    "martinkr": "Indeed there were some issues ;) . Everything's fine now https://travis-ci.org/martinkr/postcss-mediaquery-writer . ",
    "nucliweb": "Thanks \ud83d\ude4c\ud83c\udffc. ",
    "Justineo": "Let's see who'll take the 1024th. \ud83d\ude06 . ",
    "equinusocio": "I get the same error with gulp-postcssthat use postcss 6.0. I'm using gulp-postcss 7.0.0  with postcss-cssnext 2.10.0 and I'm using .postcss file extension. Every time i write a selector that start with : i get this error:\n\nTypeError: Cannot read property '0' of undefined at Parser.decl (/Users/equinusocio/.vscode/extensions/shinnn.stylelint-0.24.0/node_modules/postcss/lib/parser.js:203:25) at Parser.other (/Users/equinusocio/.vscode/extensions/shinnn.stylelint-0.24.0/node_modules/postcss/lib/parser.js:170:18) at Parser.loop (/Users/equinusocio/.vscode/extensions/shinnn.stylelint-0.24.0/node_modules/postcss/lib/parser.js:81:26) at parse (/Users/equinusocio/.vscode/extensions/shinnn.stylelint-0.24.0/. \"version\": \"5.2.16\"\n\nSo shinnn.stylelint extension is using an old postcss version?. @shinnn Yes i know, but I didn't know what was the caused. I didn't know that the stylelint extension was using postcss.  You closed https://github.com/shinnn/vscode-stylelint/issues/73 . Ok thank you.. ",
    "cengageLucas": "Thanks. I got ahead of myself, and I think it's a mirroring issue. Main npm doesn't appear to have this problem, just me. :). ",
    "eriklharper": "Thanks, @ai that was very prompt!  Could you perhaps tell me what is causing that issue with my test above? \u261d\ufe0f . interesting, perhaps its something in my environment.. . why does the output strip the semicolons?. ",
    "h0tc0d3": "Of course.  My solution:\n\nBefore:\n\n. it's excellent!\n\nJest shows it after expected and received\n\nExpected and received can be very big. I think they need to be hidden. Throwing a log in 40k lines is a bad.\nThe console buffer will not be able to put this all the text.. I think a bad idea in this refactoring. Especially in the tokenizer. This may affect the performance degradation. Replace strings with es6 template string don't make weather.. Benchmark on Node 7.9.0:\n```\n1:\nName: .includes         Time: 1.7182436487297459ms.             Full Time: 17179ms.             Result: 46330732\nName: indexOf           Time: 1.5642128425685138ms.             Full Time: 15639ms.             Result: 46330732\n2:\nName: .includes         Time: 1.6923384676935387ms.             Full Time: 16920ms.             Result: 46330732\nName: indexOf           Time: 1.616123224644929ms.              Full Time: 16158ms.             Result: 46330732\n3:\nName: .includes         Time: 1.6825365073014602ms.             Full Time: 16822ms.             Result: 46330732\nName: indexOf           Time: 1.5832166433286656ms.             Full Time: 15829ms.             Result: 46330732\nHard test:\nName: .includes         Time: 11.45139027805561ms.              Full Time: 114491ms.            Result: 46340730\nName: indexOf           Time: 10.471194238847769ms.             Full Time: 104691ms.            Result: 46340730\n``\nIndexOf low level function without overhead and to VM easier to compare numbers.. PostCSS don't use typed arrays. What postcss plugins and task manager you use? . @portstromnew Buffer()marked as deprecated on latest versions of nodejs. I wrote this piece of code and @ai was decided that postcss will not support old versions nodejs. People wanted to excludenew Buffer()` code.. @ai I do't remember. Something was discussed in the gitter and some in pull request. @michael-ciniawsky review this code and also @ben-eb in gitter said his opinion.. I do not know for sure. Added just in case. I had a case with Uint8Array where not be from and subarray mthods.  \n\nClass Method: Buffer.from(array)\n\nAdded in: v5.10.0 . \n",
    "sandrina-p": "Thank you @ai ! \nPerhaps you could help me out to understand what am I missing to integrate Coveralls with my project. I don't get their instructions... It is all working on Travis side as well (I think)\nThank you again!. @michael-ciniawsky Thank you for your help!\nI did what you said, also added coveralls to package.json as --dev.\nI created a new PR with the changes that passed on Travis but on Coveralls is still all the same.\nWhat am I missing here? \ud83e\udd14 . Sorry I dont understand what you mean... Can you explain better?. Sure.\nPR: https://github.com/sandrina-p/postcss-start-to-end/pull/9/files#diff-168726dbe96b3ce427e7fedce31bb0bcR157\nTests: https://github.com/sandrina-p/postcss-start-to-end/blob/feature/add-option-ignoreNodeModules/index.test.js. Ah awesome! I will try it out and then comment back \ud83d\ude0a. Hey it worked!\nThanks \ud83c\udf89 . ",
    "gkal19": "I understood :cry:. @ai \nThanks! Unfortunately, I do not live in Rio \ud83d\ude06 . ",
    "solodynamo": "Okay will create one after reviewing the PR's flow.. Okay , will come up with something incorporating most of the above suggestions :). ",
    "abhigyank": "If this isn't assigned, I would like to work on this.. @ai could I be assigned to this?. ",
    "kimamula": "Added another commit to strictly distinguish Root from the other Node types.. ",
    "LuisKrotz": "Thanks for the replay, I hope this helps, i'll send more info as soon as I got to the project with this error again.\npackage.json\nWorking\n{\n  \"scripts\": {\n    \"build:styles\": \"./tasks/styles.sh\",\n    \"build:scripts\": \"./tasks/scripts.sh\",\n    \"build\": \"npm run build:styles && npm run build:scripts\",\n    \"watch:jslint\": \"find resources/assets/js -type f | entr jslint /_ --color\",\n    \"watch:scripts\": \"find resources/assets/js -type f | entr npm run build:scripts\",\n    \"watch:styles\": \"find resources/assets/sass -type f | entr npm run build:styles\",\n    \"watch\": \"npm run watch:styles && npm run watch:scripts\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer\": \"*\",\n    \"css-mqpacker\": \"*\",\n    \"jslint\": \"^0.10.1\",\n    \"node-sass\": \"^4.5.2\",\n    \"postcss-cli\": \"^3.2\"\n  }\n}\nNot Working\n{\n  \"scripts\": {\n    \"build:styles\": \"./tasks/styles.sh\",\n    \"build:scripts\": \"./tasks/scripts.sh\",\n    \"build\": \"npm run build:styles && npm run build:scripts\",\n    \"watch:jslint\": \"find resources/assets/js -type f | entr jslint /_ --color\",\n    \"watch:scripts\": \"find resources/assets/js -type f | entr npm run build:scripts\",\n    \"watch:styles\": \"find resources/assets/sass -type f | entr npm run build:styles\",\n    \"watch\": \"npm run watch:styles && npm run watch:scripts\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer\": \"*\",\n    \"css-mqpacker\": \"*\",\n    \"jslint\": \"^0.10.1\",\n    \"node-sass\": \"^4.5.2\",\n    \"postcss-cli\": \"*\"\n  }\n}\nALL WORKING with ^3.2\n\njs.list\nsite:public/vendor/js/{jquery-3.2.1.min.js,materialize.min.js}:public/js/vendor.min.js\nsite:resources/assets/js/app.js:public/js/app.min.js\npostcss.list\nsite:public/css/app.min.css:public/css/app.css\nscss.list\nsite:resources/assets/materialize/sass/materialize.scss:public/css/materialize.css\nsite:resources/assets/sass/app.scss:public/css/app.css\nconcat.list\nsite:public/vendor/css/{normalize.min.css,materialize.min.css}:public/css/vendor.min.css\n\nscripts.sh\n```\n!/bin/bash\nUSAGE\n./tasks/scripts.sh\nFILTER=$(test $# -eq 1 && echo \"^$1:\" || echo \"\")\necho \"[\"$(date +%H:%M:%S)\"] Concat\"\ncat tasks/js.list |\ngrep \"$FILTER\" |\ncut -d: -f2,3 |\nwhile read line\ndo\n    val=($(echo \"$line\" | tr : \"\\n\"))\n    eval cat ${val[0]} > ${val[1]}\ndone\nif test \"x$1\" = \"xsite\" || test \"x$1\" = \"x\"; then\n    echo \"[\"$(date +%H:%M:%S)\"] app.min.js\"\n    cat public/js/app.min.js > public/js/app.js\nfi\necho \"[\"$(date +%H:%M:%S)\"] Done\"\n```\nstyles.sh\n```\n!/bin/bash\nFILTER=$(test $# -eq 1 && echo \"^$1:\" || echo \"\")\necho \"[\"$(date +%H:%M:%S)\"] Sass\"\ncat tasks/scss.list |\ngrep \"$FILTER\" |\ncut -d: -f2,3 |\ntr : \"\\n\" |\nxargs -n2 node-sass\necho \"[\"$(date +%H:%M:%S)\"] PostCSS\"\ncat tasks/postcss.list |\ngrep \"$FILTER\" |\ncut -d: -f2,3 |\ntr : \"\\n\" |\nxargs -n2 postcss -u autoprefixer --autoprefixer.browsers \" last 2 version\" -u css-mqpacker -o\necho \"[\"$(date +%H:%M:%S)\"] Concat\"\ncat tasks/concat.list |\ngrep \"$FILTER\" |\ncut -d: -f2,3 |\nwhile read line\ndo\n    val=($(echo \"$line\" | tr : \"\\n\"))\n    eval cat ${val[0]} > ${val[1]}\ndone\nif test \"x$1\" = \"xsite\" || test \"x$1\" = \"x\"; then\n    echo \"[\"$(date +%H:%M:%S)\"] vendor.min.css\"\n    cat public/css/vendor.min.css > public/css/vendor.css\nfi\necho \"[\"$(date +%H:%M:%S)\"] Done\"\n.\nI0509 18:59:04.622311 1 sti.go:586] >>> Build tasks\nI0509 18:59:04.979568 1 sti.go:586] \nI0509 18:59:04.979595 1 sti.go:586] > @ build:scripts /opt/app-root/src\nI0509 18:59:04.979602 1 sti.go:586] > ./tasks/scripts.sh\nI0509 18:59:04.979607 1 sti.go:586] \nI0509 18:59:04.993649 1 sti.go:586] [18:59:04] Concat\nI0509 18:59:05.040313 1 sti.go:586] [18:59:05] ALL.JS\nI0509 18:59:05.040841 1 sti.go:586] [18:59:05] WHERE.VENDOR.JS\nI0509 18:59:05.042110 1 sti.go:586] [18:59:05] Done\nI0509 18:59:05.476719 1 sti.go:586] \nI0509 18:59:05.477061 1 sti.go:586] > @ build:styles /opt/app-root/src\nI0509 18:59:05.477084 1 sti.go:586] > ./tasks/styles.sh\nI0509 18:59:05.477090 1 sti.go:586] \nI0509 18:59:05.487401 1 sti.go:586] [18:59:05] Less\nI0509 18:59:18.322312 1 sti.go:586] [18:59:18] PostCSS\nI0509 18:59:19.934319 1 sti.go:593] \u2716 Processing public/assets/css/main.css\nI0509 18:59:19.936675 1 sti.go:593] [TypeError: this is not a typed array.]\nI0509 18:59:22.013189 1 sti.go:593] \u2716 Processing public/assets/css/internals.css\nI0509 18:59:22.013245 1 sti.go:593] [TypeError: this is not a typed array.]\nI0509 18:59:23.610931 1 sti.go:593] \u2716 Processing public/assets/css/symphony.css\nI0509 18:59:23.616205 1 sti.go:593] [TypeError: this is not a typed array.]\nI0509 18:59:24.645358 1 sti.go:593] \u2716 Processing public/assets/css/where.css\nI0509 18:59:24.648330 1 sti.go:593] [TypeError: this is not a typed array.]\nI0509 18:59:25.857180 1 sti.go:593] \u2716 Processing public/assets/css/about.css\nI0509 18:59:25.860179 1 sti.go:593] [TypeError: this is not a typed array.]\nI0509 18:59:26.993166 1 sti.go:593] \u2716 Processing public/assets/css/hotsites.css\nI0509 18:59:26.995514 1 sti.go:593] [TypeError: this is not a typed array.]\nI0509 18:59:27.009483 1 sti.go:586] [18:59:27] Done\nI0509 18:59:27.021639 1 sti.go:586] >>> DONE\n```\nOutput of the same script but in another project, this project uses less as preprocessor.. I find out that the problem only occurs with \nnpm info using npm@3.5.2\nnpm info using node@v4.2.6\n. ",
    "portstrom": "toBase64(str) {\n    if ( Buffer ) {\n        return Buffer.from ?\n            Buffer.from(str).toString('base64') :\n            new Buffer(str).toString('base64');\n    } else {\n        return window.btoa(unescape(encodeURIComponent(str)));\n    }\n}\nhttps://github.com/postcss/postcss/blob/master/lib/map-generator.es6#L125\nThis code is calling the function Buffer.from with an argument that is a string. In Node 4.2.6 this throws an exception.\n```\n$ node -v\nv4.2.6\n$ node\n\nBuffer.from(\"example\")\nTypeError: this is not a typed array.\n```\n\nThe correct way to do it is new Buffer(str):\n```\n\nnew Buffer(\"example\").toString(\"base64\")\n'ZXhhbXBsZQ=='\n```\n\nThis is the commit that broke it: https://github.com/postcss/postcss/commit/5aca2b0050db7166243c64f5d8d6089db25d4b98. @h0tc0d3 If you are not going to support Node 4.2.6 because it requires using the Buffer constructor, you should update package.json to say it's not supported. Currently it says Node 4.0.0 and above are supported.\nhttps://github.com/postcss/postcss/blob/master/package.json#L6. It works in Node 4.7.2 and 4.8.4 but not 4.2.6.. According to package.json, you support 4.0.0. This number should be increased.\nhttps://github.com/postcss/postcss/blob/master/package.json#L6. No, you don't support both. https://github.com/postcss/postcss/commit/88673ab56a19c426773d68467033d9b2802bfb54 just breaks previous-map.es6 just like https://github.com/postcss/postcss/commit/5aca2b0050db7166243c64f5d8d6089db25d4b98 broke map-generator.es6. If you revert it, it will solve the issue.. I explained in my first message.\nhttps://github.com/postcss/postcss/issues/1019#issuecomment-312423358\nBuffer.from can't be used with a string argument in node 4.2.6. It throws an exception.. It seems you already solved it, looking at https://github.com/postcss/postcss/issues/1052. ",
    "sullenor": "Yeah, I guess Root#normalize can be an issue, but not \ud83d\udcaf sure here (https://github.com/postcss/postcss/blob/master/lib/root.es6#L42-L44).\nThank you for the work around, I'll check it.. ",
    "martinyeh": "Thanks, it resolved!. ",
    "herorest": "help. ",
    "vjeux": "```js\nconst Input = require('./node_modules/postcss/lib/input');\nconst Parser = require('./node_modules/postcss/lib/parser');\nconst input = new Input(less);\nconst parser = new Parser(input);\nparser.tokenize();\nparser.loop();\nconsole.log(parser.root.first.first);\n```\nWhere less is set to the value of the sourcemap from your example. The result is:\n```js\nundefined:1\n{\"version\":3,\"sources\":[\"../css/app.css\"],\"names\":[],\"mappings\":\"AAAA;;;EAGE,eAAe;EACf;;;;;;;;;;;;eAYa;EACb,gBAAgB;CACjB;;AAED;EACE,qBAAc;EAAd,qBAAc;EAAd,cAAc;EACd,+BAAoB;EAApB,8BAAoB;MAApB,wBAAoB;UAApB,oBAAoB;EACpB,aAAa;EACb,UAAU;EACV,iBAAiB;EACjB,YAAY;CACb;;AAED;EACE,qBAAc;EAAd,qBAAc;EAAd,cAAc;EACd,6BAAuB;EAAvB,8BAAuB;MAAvB,2BAAuB;UAAvB,uBAAuB;EACvB,oBAAQ;MAAR,YAAQ;UAAR,QAAQ;CACT;;AAED;EACE,gBAAgB;CACjB;;AAED;EACE,qBAAqB;EACrB,gBAAgB;CACjB;;AAED;EACE,qBAAc;EAAd,qBAAc;EAAd,cAAc;EACd,+BAAoB;EAApB,8BAAoB;MAApB,wBAAoB;UAApB,oBAAoB;CACrB;;AAED;EACE,0BAAoB;MAApB,uBAAoB;UAApB,oBAAoB;EACpB,sDAA8C;EAA9C,8CAA8C;EAC9C,iCAAiC;EACjC,gBAAgB;EAChB,qBAAc;EAAd,qBAAc;EAAd,cAAc;EACd,+BAAoB;EAApB,8BAAoB;MAApB,wBAAoB;UAApB,oBAAoB;EACpB,oBAAQ;MAAR,YAAQ;UAAR,QAAQ;EACR,aAAa;EACb,sBAAsB;EACtB,0BAAkB;KAAlB,uBAAkB;MAAlB,sBAAkB;UAAlB,kBAAkB;CACnB;;AAED;EACE,oBAAoB;EACpB,qBAAc;EAAd,qBAAc;EAAd,cAAc;CACf;;AAED;;EAEE,sDAA8C;EAA9C,8CAA8C;EAC9C,iCAAiC;EACjC,mBAAmB;EACnB,iBAAiB;EACjB,eAAe;EACf,gBAAgB;EAChB,gBAAgB;EAChB,UAAU;EAC\nSyntaxError: Unexpected token  in JSON at position 17977\n    at JSON.parse ()\n    at new SourceMapConsumer (/Users/.../github/postcss-less/node_modules/source-map/lib/source-map-consumer.js:17:22)\n    at PreviousMap.consumer (/Users/.../github/postcss-less/node_modules/postcss/lib/previous-map.es6:46:34)\n    at new Input (/Users/.../github/postcss-less/node_modules/postcss/lib/input.es6:62:28)\n    at Object. (/Users/.../github/postcss-less/s.js:64:15)\n    at Module._compile (module.js:571:32)\n    at Object.Module._extensions..js (module.js:580:10)\n    at Module.load (module.js:488:32)\n    at tryModuleLoad (module.js:447:12)\n    at Function.Module._load (module.js:439:3)\n```. Okay, it's only happening in a single file that's generated so i'll just give up :)\nThanks for looking into it!. Usually the way to deal with those is to pass the parse function all the way down. This way when you are in container, you can call parse without require it.. Oh, that's unfortunate.\nThe thing you could do is to make Rule module be a factory.\njs\nmodule.exports = function(parser) {\n  return class Rule { ... };\n};\nThis is going to make the code look weird but would solve it.\nI have no idea about rollup but it would still have a dependency so I guess it would break since it's analyzing this statically, but don't know, would have to check.. I worked around in prettier so it's not a huge issue anymore. It would be nice if it works out of the box but oh well :). ",
    "dschinkel": "thanks, will do!. ",
    "Jinjiang": "Sorry, I also meet this problem for browser env with Rollup. \ud83d\ude41\nIs it good enough to publish a \"standalone\" version together like babel or prettier in the coming versions? That would be more compatible IMO.\nThanks.. @ai I mean:\n\n@babel/standalone via https://babeljs.io/setup#installation or\nhttps://unpkg.com/prettier@1.13.0/standalone.js via https://prettier.io/docs/en/browser.html. No problem. I have done that with nothing error.\n\nBtw the standalone package also could be published as an independent npm package to avoid increasing the size of the main package. And if there is an official one, maybe it will be widely used as an online repl, or in some code snippets/playground like codepen/jsfiddle/jsbin I guess. \ud83d\ude09\nThanks.. ",
    "iddan": "I know this is a problem @babel face as well. But as I see it custom syntax extensions should be registered in the parser level and code modifiers later.. Not everything: only custom syntax plugins. I think it can be in a future major release as it is a reasonable breaking change.. ",
    "gespinha": "Thanks! If the expected error is always the actual failed test, then the catch() will always be the same, right?\nIs there any test lib that allows me not to declare catch()?. Will do! Thank you!. ",
    "michaelalhilly": "Agreed. I posted the issue there. Thanks for the suggestion.. ",
    "bradennapier": "Ok thanks @TrySound \n. ",
    "mikeyGlitz": "I have node_modules/** in my .eslintignore file. That did not fix the problem. I've noticed that eslint-config-postcss and eslint-config-cssnano are listed as devDependencies of postcss. I don't know why my config would care about that.. ",
    "subzey": "Sure. But it'll take some time for me to find out how the tokenizer works.. Is it a-z, not a-f?. Looks like \\61 a would be parsed as a whole entity, \"\\\\61 a\", while it should stop after the first whitespace: \"\\\\61 \", \"a\".\nAlso, there can be no more than 6 hex digits (the escape seq ends even if there's no whitespace). A few words on a positional info format? What are those four numbers?. ",
    "i-like-robots": "Thanks for your fast response. ",
    "domenic": "Awesome, @ai! Does it also follow the spec's error-handling behavior? Your comments about \"valid document\" and \"more than just valid CSS\" make me worried it handles invalid CSS in a way different from a browser, which would make it hard to use in jsdom :-/.. ",
    "ipelekhan": "Sorry, but I can't. I'm working at the large bank, there is only one version of node.js across most of the projects, and we will not receive any updates soon. Right now I have done shrink wrap and changed dependency to 6.0.6 and it works fine. Are there any tips on debugging this issue?. Yeah, sure. Here it is:\n```bash\n$ node\n\nBuffer instanceof Uint8Array\nfalse\nBuffer.from !== Uint8Array.from\nfalse\n```. Is there anything else I can help resolving this issue?. Sorry, can't check right now, already left the office, I'll post an update tomorrow.. @ai, I can confirm, now it works. Thank you!. \n",
    "kaihendry": "Thanks @michael-ciniawsky ... removing that line allows me to move on. I think.. ",
    "killerlayup": "By the way, I can set postcss-loader successfully like this:\n{\n                    test: /\\.less$/,\n                    use: [\n                        {\n                            loader:'css-loader?minimize'\n                        },\n                        {\n                            loader: 'postcss-loader',\n                            options:{\n                                plugins: [require('autoprefixer')({\n                                    browsers: [\n                                            \"Android >= 4\",\n                                            \"iOS >= 5\"\n                                        ],\n                                    cascade: true\n                                })]\n                            }\n                        },\n                        {\n                            loader:'less-loader'\n                        }\n                    ] // will be replaced\n                }. ",
    "tom-drake": "I can refer you to what the library is doing and my understanding of how its working. Line 35 is the part which does the walking of the nodes. It is checking to see if its an AtRule and keeping a list of those AtRules as the loaders for some of the Decls. In the same walk it also checks if its a Decl and looks up the loader from the internal map. But the problem became clear when an error was throw because the associated AtRule had not been seen first even though it was defined first in the CSS.\nWe are using a fairly standard setup in this project with postcss-loader and a postcss.config.js file defining our plugins (postcss-inline-svg being the one I linked to earlier). There's no JS which interacts with the CSS that we have made as far as I'm aware.\nI can give sanitized css and the associated output from just a console.log on the Root element.\nstyle.css\n```\n@import \"a.css\";\n@import \"b.css\";\n@svg-load icon_1 url(ICON_1.svg) {}\n@svg-load icon_2 url(ICON_2.svg) {}\n:root {\n  --icons: {\n    & .icon.icon-1 {\n      background: svg-inline(icon_1) 50% no-repeat;\n    }\n& .icon.icon-2 {\n  background: svg-inline(icon_2) 50% no-repeat;\n}\n\n}\nbutton.btn {\n  @apply --icons;\n  ...\n}\n```\nRoot object:\nroot {\n  raws: { semicolon: false, after: '\\r\\n' },\n  type: 'root',\n  nodes:\n   [ Rule {\n       raws: {},\n       type: 'rule',\n       nodes: [Object],\n       source: [Object],\n       selector: '.icon-2, ...',\n       selector: 'button.btn .icon.icon-2, ...', /* Issue here on the walk of Root */\n       parent: [Circular],\n       lastEach: 38,\n       indexes: {},\n       _autoprefixerDisabled: false },\n     ...,\n     AtRule {\n       raws: [Object],\n       type: 'atrule',\n       name: 'svg-load',\n       parent: [Circular],\n       source: [Object],\n       params: 'icon_1 url(ICON_1.svg)',\n       nodes: [],\n       lastEach: 39,\n       indexes: {} },\n     AtRule {\n       raws: [Object],\n       type: 'atrule',\n       name: 'svg-load',\n       parent: [Circular],\n       source: [Object],\n       params: 'icon_2 url(ICON_2.svg)',\n       nodes: [],\n       lastEach: 39,\n       indexes: {} },\n     ...,\n     Rule {\n       raws: [Object],\n       type: 'rule',\n       nodes: [Object],\n       source: [Object],\n       selector: 'button.btn .icon.icon-1, ...',\n       parent: [Circular],\n       lastEach: 39,\n       indexes: {},\n       _autoprefixerDisabled: false } ],\n  source:\n   { input:\n      Input {\n        css: '...',\n        file: '...' },\n     start: { line: 1, column: 1 } },\n  lastEach: 41,\n  indexes: {},\n  _autoprefixerDisabled: false }\nI'm still not sure what is causing this issue so haven't been able to produce something which is reproducible other than the in my current projects code base. It does occur across other css files in the project as well.. I have updated our postcss.config.js file to use the postcss-inline-svg plugin before our postcss-cssnext plugin and that fixes the problem! Thanks for the help.. ",
    "igoradamenko": "Yes, if you don't have a better solution.. Yeah, it looks better!. Done: #1058.. Oh, I haven't changed tests. Sorry about it.. Fixed.. ",
    "sebastiandedeyne": "Took a deeper look into this. Looks like it's this issue: https://github.com/webpack-contrib/css-loader/issues/578\nI assumed it was a postcss issue since the regression started occurring around the same time of the escape sequence parsing changes here.\nThanks for your time, sorry for bothering!. ",
    "eric-burel": "Is this solved ? postcss still seem to load chalk on the browser, see the issue where I referenced this.. ",
    "wenliangdai": "My twitter is @Wenliang_Dai and I\u2018ve made up the translation to image title and alt.. @ai \"Chinese translation\" => \"\u4e2d\u6587\u7ffb\u8bd1\". @ai Yes, I will do that today.. @ai I was thinking most people should understand what Abstract Syntax Tree is. But you are right, I'll make this translated now.. ",
    "deflock": "Looks like advanced-variables' issue/feature. Are you trying to use @if statements with single operand?. Why do you think this is somehow related to postcss?\nOr provide some more information about your input and expected output. ",
    "zengjinchaodean": "I also encountered the same problem, my view version after version is 6.0.11, but when I use the nested style will also appear in 'Your current PostCSS version is 6.0.11, but postcss-advanced-variables uses 5.2.17. Perhaps this is the source of the error below. \". I've tried, and only postcss6. i check again , Below gulp-postcss, there is the 5.2.17 version of postcss, with the postcss6.0.11 version at the same level as gulp-postcss. The problem is settled, thank you. ",
    "godfan123": "gg. ",
    "khlevnov": "@ai I try to use this variant, but I've got the same error. Full text of error in a block below:\n\nERROR in [at-loader] ./index.ts:1:21\n    TS2307: Cannot find module 'postcss'.. Thanks, now import is working!. \n",
    "r3nya": "@khlevnov can you try import * as postcss from 'postcss'?\nOr you need to declare this module \u2026\nE.g.:\n\nPlease create a file with customs definitions:\ndefinitions/global.d.ts\nInclude it in tsconfig.json:\n\"filesGlob\": [\n    \"node_modules/**/*.d.ts\",\n    \"definitions/*.d.ts\",\n    \u2026\n  ],\nAnd final step:\ndeclare module 'postcss';\n\nPlease ping me if you will have any problems. =)\n. Btw, @jedmao I found that postCSS supports types for TypeScript (https://github.com/postcss/postcss/blob/master/lib/postcss.d.ts) \u2026 But it doesn't work I guess.. ",
    "chriseppstein": "Note: this change looks big because it changes the indent level, but if you turn off whitespace on the diff it's actually very small:\nhttps://github.com/postcss/postcss/pull/1072/files?diff=unified&w=1. @ai This change removed an enclosing block so the code inside got outdented by one level.. @ai is the any chance that we can get this delta backported and released as 5.2.18? without both versions released it won't fix the issue I'm seeing in my project :(. The postcss-selector-parser api is really weird when it comes to handling raws (escapes, comments,  and intervening whitespace). Sometimes comments are their own node, sometimes comments are part of raws, etc. I have a design in my head that is much better and more uniform that I would like to build out that I think should be the foundation of a first-class postcss api for selectors.\nThere's a lossy parse that trims whitespace but preserves comments but it can only be done at parse time (I think there should be methods to normalize/minify whitespace, prune comments, etc instead or as an option during stringification). Nodes didn't maintain internal consistency across mutation, and there's no sourcemap support to speak of.\nI'd like to write up a design proposal soon.. > Comments must be a separated node.\nPostCSS also [does not follow this rule][declaration_comment_ast]. I think it's very confusing. There are some comments in \"inconvenient locations\" that will not be iterated when walkComments() is invoked. Because of the complexity of selectors, the number of places that are \"inconvenient\" is increased.\n\nBut whitespaces we must put inside nodes to be compatible with other PostCSS API.\n\nWhitespace is tricky, I think the proper solution is to store whitespace and comments as nodes and provide convenient setters/getters to manipulate them. \n\nCan you show an example?\n\nIn 3.0 when I took over the value stored in raws was not kept in sync if a value was changes and the raw value would override the new value with the original raw value.\nhttps://github.com/postcss/postcss-selector-parser/blob/v3.0.0/src/selectors/attribute.js#L11-L34\nI've fixed this in a lot of places now. but a better design would make it easier to manage.\nSpeaking of raws. postcss itself does not handle escapes and this makes working with it unpredictable for edge cases. For instance:\n```css\nbg {\nbackground-color: #efefef;\nback\\ground-color: red;\nback\\67 round-color: blue;\n\n}\n```\nThe browser will happily treat all three of these as valid declarations of the background-color. But the postcss API user will see three distinct properties. I get that this is not normal code. but this is the kind of abnormality that the parser api should insulate users from.\nThis is less of an edge case in selectors though. Depending on the file encoding, escapes for the value for \u2764\ufe0f and the bare character in utf-8 should be the same when it comes to doing things like selector matching. In the selector parser I now store every ident that has an encoding in raws and store the unescaped value in the normal value that a user will read. The raws value is used to stringify back to the original input if left untouched.\n\nKeep all bytes of origin input. Support source map. \ud83d\udc4d \n\n[declaration_comment_ast]: https://astexplorer.net/#/gist/d243a005a053922a8e0f190b1555c394/0e18f3c1311b690766f190288f1ac58db6239efc. > Please open an issue with some details how it should be parsed by the spec\nI'm not sure exactly how these bugs manifest. But I just verified that @m\\65 dia is not parsed correctly. Chrome will happily parse that as @media and apply the styles accordingly. \nThis is the best, most accessible writing on the subject: https://mathiasbynens.be/notes/css-escapes\nHere's the basic escape sequence parser I wrote for the selector tokenizer: https://github.com/postcss/postcss-selector-parser/blob/master/src/tokenize.js#L67-L94\nIt doesn't convert the escape sequence to characters but it prevents word tokens from being prematurely ended (A space can be used to end the escape sequence if it's fewer than 6 characters \ud83d\ude44)\nThe parser then does extra work later to check if a token contains an escape and then unescapes them. A better implementation would be for the tokenizer to return both a raw value and a value after resolving all escapes to unicode, but that change was too complex for the time that I had available.\n\nCould you write some pseudo-code to show what API your are thinking of?\n\nRoughly, I'd like to parse selectors more correctly into the structures specified by CSS and keep values as nodes\nhttps://gist.github.com/chriseppstein/53298cef0c8cf62d7a275a8bdf7516cb\nThis keeps values associated as nodes with source location down to a much more granular location (as is typical with an AST). I think this makes mutating nodes more predictable and keeps a very sane model for how to handle the raw value, and ignorable whitespace before and after nodes in a variety of locations within the file.\nwhitespace and comment nodes can be interspersed with each other in the before and after of any node but would have an affinity for being part of a node's before. Any string value would have a raw where the value with escape sequences would be stored.\nFor simplified access to value nodes as strings, we can use a proxy that boxes/unboxes them and manages the escaping. or have properties that correspond to string or node accessors. With nodes for values, a lot of the apis in the selector parser just go away.. > As result PostCSS plugins will need more checks.\nThe AST I wrote up didn't have any whitespace nodes except in before and after of a node.\nso the api would not expose a whitespace node unless looking for them. a walker would not iterate over them by default. I've separated nodes into types, by default, walking would only walk over the nodes with a kind of \"selector\", which is how walking occurs right now. But you could imagine a whitespace walker that normalizes whitespace, or a comment walker that strips comments except for those beginning with !. I suspect you are not very familiar with the current selector API, it is very cumbersome. I've tried to make it more usable with the current API surface, but it's not easy to work with. The API for manipulating attribute value quotations is an example of this complexity. It's easier to assign the attribute selector's value an object that represents a string or an identifier.\nAlso, by preserving values as nodes, it should make the apis more sourcemap friendly.\nanyways, that's what I've had in mind, if you have something else, write it up and we can compare some use cases.. @ai I'm not sure I understand what you're suggesting is hard about that use case. having the arguments as nodes makes this easier as a developer and makes sourcemap tracking more robust.\nFor the case where the arguments are left unchanged a value node for a function would be trivial:\njs\nrule.walkFunctionCalls((fnCall) => {\n  if (fnCall.name.value === \"oldname\") {\n    fnCall.name = postcss.ident(\"newname\");\n    // or the accessor can be smart in such cases an allow string assignment and create a new ident.\n  }\n});\nFor the case where arguments are manipulated, nodes also seem to make the most sense. Maybe you're expecting that the whitespace and comment nodes would be part of the arguments to the function?\njs\nrule.walkFunctionCalls((fnCall) => {\n  if (fnCall.name.value === \"oldname\") {\n    fnCall.name = postcss.ident(\"newname\");\n    for (let arg of fnCall.arguments) {\n       // iterate over only the arguments, whitespace and comments nodes\n       // would only be found in those nodes' `before` and `after` properties.\n    }\n  }\n});\nDoes autoprefixer handle the replacement if there's an escape sequence in the function name? I suspect it doesn't. By making this a node, the value can easily represent the unescaped name but also store the escape sequences in a raw attribute. For values especially, this is important because there is no specific attribute to use to store raws against as part of a value is manipulated.\nAnways, again, I don't see why you think this makes the code more complicated. Please write some code to show me what you're worried about.. @ai ok thanks for clarifying. Sorry about the confusion. I'm still coming up to speed on how all this fits together.\nIt does look like stylelint uses postcss-scss and prettier does too. I wasn't aware these existed so I had been testing against postcss itself.\nThe selector parser tries to be all the syntaxes in one with no mode option, strict setting, or anything else like that. I don't think it's a good idea and would prefer if it was clearly supporting specific syntaxes. Errors are a feature.\nClosing this, will track from the selector-parser repo.. ",
    "manulitopetito": "@ai @michael-ciniawsky \nthanks, that looks promising! but how would I generate separate files for each theme?. thanks @michael-ciniawsky \nsorry if I wasn't clear.\nI want one generated css file per theme.\nlike:\ncomponents/button/button.scss,\ncomponents/button/input.scss,\nstyles/main.scss\nall get compiled to theme-light.css, theme-dark.css with different color variables applied.\nWe can't use custom properties natively because we have to support IE 10 / 11\nso basically all webpack should do is compile all scss files to one theme-[x].css file where the custom-properties got replaced with the theme values.. ",
    "msiemens": "\nWe can't use custom properties natively because we have to support IE 10 / 11\n\nMaybe you can use a polyfill like https://github.com/jhildenbiddle/css-vars-ponyfill in this case. It appears to support IE 9+. ",
    "terence55": "I'm dealing with the similar problem currently, I have to support IE and can't use custom properties polyfill. Then I write a webpack plugin themes-switch to do that. Maybe it can help you.\nNow I use variables to define different colors and dimensions, then webpack would generate multiple theme files at once, and the style formats can be less, postcss and sass. Then I can make a realtime-switch in my app.\ntheme-a.less\n@color-main: #0A6EFA;\n@color-text: #000;\ntheme-b.less\n@color-main: #222A42;\n@color-text: #FFF;\ndefault.less\n@import 'theme-a.less';\nmain.less\n@import 'default.less';\n.main {\n  background: @color-main;\n}\nConfig in webpack\njs\nnew ThemesGeneratorPlugin({\n      srcDir: 'src',\n      themesDir: 'src/assets/themes',\n      outputDir: 'static/css',\n      defaultStyleName: 'default.less',\n      themesLoader: {\n        test: /\\.(less|css)$/,\n        loaders: [\n          { loader: require.resolve('css-loader') },\n          { loader: require.resolve('less-loader') }\n        ]\n      }\n    })\nIn use\njs\nchangeTheme('theme-b', 'theme-b-123456.css'). ",
    "waqasdotnet": "@manulitopetito  I tried to use the similar approach with the help of these two tutorials and faced the same issue as you are facing.\nSass Theming: The Neverending Story\nTheming Web Apps with SASS\nThe CSS is generated in a single file instead of two separate files. I wanted to generate two separate CSS files just like you. I did some R&D about the issue and finally figured out how to do this.\nFirst of all you need to break your themes.scss file into two separate files as shown below.\n_theme-red-variables.scss\n$themes: (\n   red: (\n      mainColor: #aa3939,\n      secondaryColor: #D46A6A\n   )\n);\n_theme-blue-variables.scss\n$themes: (\n   red: (\n      mainColor: #2e4272,\n      secondaryColor: #4f628e\n   )\n);\nNext you need to make some changes in your button.scss file. Simply remove the @import statement from the top because we will import theme specific variables into their own separate files as shown below\nbutton.scss\n.button {\n    @include themify($themes) {\n       color: themed('secondaryColor');  \n       background-color: themed('mainColor');  \n    }\n }\nNext you need to create two separate theme files. In these files, you need to import theme specific variables file, mixin file and your button.scss file\ntheme-red.scss\n```\n// Import red theme variables file\n@import 'theme-red-variables';\n// Import mixins file, where you have defined themify and themed mixins\n@import 'mixins';  \n// Import button.scss file in this theme file \n@import 'button';\n```\ntheme-blue.scss\n```\n// Import blue theme variables file\n@import 'theme-blue-variables';\n// Import mixins file, where you have defined themify and themed mixins\n@import 'mixins';  \n// Import button.scss file in this theme file \n@import 'button';\n```\nTwo separate files will be generated using the above technique\ntheme-red.css\n.button {\n    color: #D46A6A;\n    background-color: #aa3939;\n }\ntheme-blue.css\n.button {\n    color: #4f628e;\n    background-color: #2e4272;\n }\nI hope I have explained the solution well and it will help you to resolve your problem.\n. ",
    "deser": "@ai, maybe you can advise smth? I need different processing for different entry points in one webpack config.\nThanks. You mean do postCSS processing not via config but inside webpack config?\n. You mean postcss-loader ? Sorry for taking your time but maybe you can advise some other non-postCSS tools?. ok, thanks a lot.\nBtw, seems I resolved my problem by using postcss-import\n. ",
    "geryit": "it was babel-loader adding prefixes. Thanks anyways!. ",
    "SerkanSipahi": "@ai sorry for my late response. \ni never give up :)\n\nHonestly, it is not easy.\n\nI will checkout docs/syntax.md thank you :)\n\nThe best way to do it \u2014 write a custom parser. We have a docs in docs/syntax.md and you can check postcss-scss for examples. But it will require a week.\n\nWhat does mean? I dont what do you want to explain :(\n\nThere is a hack, to write custom preprocessor before PostCSS which will replace {{ to some safe symbols. And then custom parser will find this special symbols and read them as {{.\n. @michael-ciniawsky is not what im looking for! I will not convert css to css ! What i want is to extract the conditions for further/different operations. Maybe 'postcss-conditionals' can be forged and could be modified for my case.. \n",
    "AlexanderTserkovniy": "Hey Andrey,\nThanks for answering, I have tried this solution and it did not work :(\n```css\n@reference {\n  @import \"ui-components/src/common-styles/font.pcss\";\n}\n:global {\n  & .form-group {\n    & label {\n      @references .font-size-minion all;\n    }\n  }\n}\n```\nResult:\nhttp://prntscr.com/hkbtp0\nlooks like it just is not applied, what could you recommend?. Thanks.. ",
    "nikhilgaba": "I blew some stuff up on my end, I will create a new PR and we can continue on this :). @ai Plan seems quite sound. I just haven't had a chance to look into the implementation.. ",
    "wessberg": "Let me prepare a PR for you, and then you can decide if you want to merge it in :-)\nI'll update this issue when its ready.. Submitted PR: https://github.com/postcss/postcss/pull/1095. Closing.. This works:\njavascript\nimport postcss, {Parser, tokenizer} from \"postcss\";\npostcss();\nBut this doesn't:\njavascript\nconst postcss = require(\"postcss\");\npostcss();\nSince the commonjs transpiled version binds the default export to the \"default\" property of the module.exports object (so you'd have to do require(\"postcss\").default). It does so because there are named exports and it has to provide a namespace object.\nThis is why it breaks now that there are named exports.\nFour ways forward as I see it:\n1) Provide PostCSS as a named export also. As a benefit, this also means that people using Typescript + Rollup doesn't have to force allowSyntheticDefaultImports\": true\" in their tsconfig.json.\n2) Accept that for clients using commonjs, they have to do require(\"postcss\").default. Clients using ES-modules will still be able to do import postcss from \"postcss\";.\n3) Reject this PR and only export postcss. Do nothing else\n4) Reject this PR and only export postcss. Put the Parser and Tokenizer into a separate library under the postcss organization on Github (such as postcss/postcss-parser) and export the Parser and Tokenizer from there. Depend on it from postcss/postcss.. Yeah, I guess they changed it in Babel 6 to improve interop with ES-modules.\nI totally understand. No one likes breaking changes. So let's not do that.\nWould you consider providing the parser (and tokenizer, etc) from a separate library, like you do with https://github.com/postcss/postcss-safe-parser and depending on it from postcss? I know that means that all parser-related postcss packages would then have to depend on that one instead. It's not ideal for compatibility.\nAnother option is to bundle two versions of postcss - one with ES-modules and one with commonjs modules. I guess that's gonna happen anyway eventually when .mjs is fully supported in Node. The commonjs version would continue to work as it does today, but the ES-module version would then provide these named exports.\nOtherwise, let's just close the PR. I'll depend on a fork instead if that is the case. A bit unfortunate, but I understand the reasoning.. Great news! I'm closing this PR then.. ",
    "DanielRuf": "The problem is that the testsuite of postcss-cssnext produces 3 failing tests, two of them are because of the line ending settings which are forced to \\n by postcss (by default).\nSo the plugins and the testsuite do not use the same line endings. The expected fixture files have the system line endings but the unit tests and the actual generated files use the wrong line ending with \\n even on my Windows machine.. Hm, but the testfiles automatically get the system file endings and the generated ones use \\n even on my Windows machine.\nOr is some options value needed that the maintainer has to set in the testsuite?. I guess there is no consequent and uniform decision abroad the postcss plugins. At least there are different settings and setups (some have appveyor and travis and many do not).. > But I like you fix. I will keep it until 7.0 release (I can\u2019t release too many major updates in the year).\nSo should I keep this open for the future and reference here from postcss-cssnext?. > I \u2018d like to see a software output same result on any platform\nWell, Windows changes the line endings so the testsuite breaks there. It is a fact that the testsuite is failing when you run it on Windows at the moment. The systems use different line endings when they generate files. So this should be solved by this PR.\nNot sure why the downvote as I try to fix an actual issue and make it more independent.. Tests should be independent and no specific line ending be required in general.\nAlso setting this globally is not what the default is and as I already wrote, it is the file generation while running the testsuite, this has nothing to do with the Git config in general.\nAnd it should not require such specific settings.\nMany also include the tests in own projects but do not need a Git setup.\nThere is a reason for eol constants in many languages ;-)\nAnd I guess @ai as owner can decide what makes sense and what not. Also this change does not negatively affect you directly. Or do you face any specific issues with the proposed change?. Mixed line endings would otherwise create other issues imo.. I'll check tomorrow if the changes makes much sense and how much it would improve thr builds.. > I really recommend to look to yarn as well. It is faster than npm, API is better and team work better.\nThe npm team learned from them and improved npm 5 and 6 and they are not interchangeable (lockfiles, tools, ecosystem, ...). But thanks for the recommendation (we do not prefer lockins / changes here).. The grunt-cli seems to be by accident, sorry,. ",
    "GrosSacASac": "Node version 8, NPM 5.5\n\"postcss-cli\": \"^4.1.1\",\n\"import-postcss\": \"^8.0.2\",\n\"cssnano\": \"^3.10.0\",\n\n. ",
    "ZeeCoder": "Yeah, these all cause the same error to appear:\n// some comment without actual css\n.a-class {\ncolor: inherit;\n}\n// this will cause an error too\n.ert {} // won't work\nOn 2 Jan 2018 17:53, \"Andrey Sitnik\" notifications@github.com wrote:\n\n@ZeeCoder https://github.com/zeecoder can you show exactly code input?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/postcss/postcss/issues/1102#issuecomment-354830188,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADglEhzM5vE6slEmhvF5ELYHKDf7MRufks5tGm02gaJpZM4RQyWv\n.\n. I was so sure postcss allowed for such comments! it works for the most part too, only on these edge cases it fails.. I think I just tried using it and since it worked fine, assumed it was part of postcss.\nI probably littered my postcss files with such comments all over the place without realising it could fail to compile.\n\nWonder if there's a postcss plugin to allow for such comments. \ud83e\udd14. ",
    "ArielGueta": "```\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nmodule.exports = {\n  entry  : './main.js',\n  output : {\n    filename: './dist/[name].js'\n  },\n  module : {\n    rules: [\n  {\n    test   : /\\.theme.css$/,\n    exclude: /node_modules/,\n    use    : ExtractTextPlugin.extract({\n      allChunks: true,\n      fallback : \"style-loader\",\n      use      : [\n        \"css-loader\",\n        {\n          loader : 'postcss-loader',\n          options: {\n            ident  : 'postcss',\n            plugins: ( loader ) => [\n              require('./postcss-themes')\n            ]\n          }\n        }\n      ]\n    })\n  }\n]\n\n},\n  plugins: [\n    new ExtractTextPlugin(\"./dist/main.css\"),\n  ],\n};\n``. Found the solution:\nRemovefallback: \"style-loader\"` solved this. . ",
    "amerllica": "@ai, Thanks a lot my dear friend, I like your manner \ud83d\udc4d \ud83d\udcaf \u2764\ufe0f \nMy issue not removing react components and then unused CSS, surely I created a sexy plan for .pcss files that definitely related to their own react components. so I never leave behind .pcss files after deleting react components.\nMy exactly issue is unused styles that freely rolling on extracted .css files that you said has no solution.\nThanks. I think to your offer, Absolutely every developer wanna be professional like you, so it's right way to fixing my own problem first and then it became a popular tool. thanks a lot dude \ud83c\udf39 \ud83d\udc9f . ",
    "sylvainpolletvillard": "I checked other interfaces and could not find anything. But I feel sick and can't think properly at the moment. Don't expect any other PR from me tonight. ",
    "x1unix": "@ai, was thinking about starting implementation but first want to check that this idea is actual and is necessary for the community.\nAlso, I think that we need to plan a roadmap for this feature and some basic standard.. @ai, agree with you. I will start a proof of concept on this weekend.. @andreyvolokitin, a pre-development discussion in progress. Any help or support is welcome.. @andreyvolokitin, afaik mostly used as autoprefixer or as polyfill for newest CSS features (like variables).. ",
    "andreyvolokitin": "How this problem solved currently? I planned to add postcss into my workflow but suddenly realized that it may cause big problems with webstorm code inspection (I am not sure about other things like autocomplete). The set of installed plugins is a random thing, but what we have currently is a webstorm plugin with a small fixed set of postcss plugins. It looks like a hard problem because we can modify css syntax any way we want but we can't make IDE follow accordingly.. @x1unix I mean, how everybody is using postcss currently? The only thing I can think of is turning off code inspection. ",
    "igloosi": "wrong board. ",
    "chenwenxian": "ok, very good!. ",
    "igorkamyshev": "May I send PR to resolve this issue?. Do you mean finalize or finally?\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally\nMay I try to implement that?. Done #1154 . Do I need to do something else to solve this issue?. Thanks! \ud83d\ude01. @ai sure. I must write tests only for finally or for then and catch too?. @ai okay. Will be fixed! \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb. Added test for finally.\nPlease, tell me, in which file I may see your tests for then and catch for inspiration?. I fixed test.\nBut, I guess on CI test will be failed anyway, because Promise#finally available only in Node.js 10+.. Done.. ",
    "hannwong": "Sorry to waste your time. I think I really am misunderstanding the PostCSS docs.\nProcessor.process(css, opts) actually does take in raw CSS (string) for css argument. In this way, PostCSS actually works as a postprocessor (though it can be a preprocessor as well).\nIn short, PostCSS is built flexibly as a pre/post processor.\nThis truly is the next level of CSS. Thanks!. ",
    "mgol": "It's not critical for me, it just required me to tweak the expected test results so that it anticipates different spacing for the first occurrence. Perhaps I should be passing the output through a formatter as you advised to not worry about it in tests.. ",
    "cccisbug": "just add '--no-map'. ",
    "coldtelling": "@ai Would love to, unfortunately I'm way too inexperienced ! . ",
    "tomgallagher": "Thanks very much for the help and the re-code.\nI am reading css from memory, it is never part of the file system and I do not write it to a file. I just send it as an object elsewhere. Does it matter if the file exists, if I have set map to false? Or should I read and write with a blank file that I create?\nI had a long search last night and the JS API has very few, if any, articles or guides associated with it when postcss is used outside the build process. There is the good API documentation but getting started is a bit of a challenge.\nThanks again.. Yes, I have been looking at that, but with all detailed API guides you need a basic level of competence before they actually start to make sense.\n\nyou use safe parser (so there will be no way messages) \n\nWhat's a way message?. ",
    "just-boris": "That works, thank you!. ",
    "kschiffer": "Done.. I gave it another shot which hopefully makes it clearer and also addresses the spell checking issues. Feel free to modify further to improve clarity.\nKeep up the good work! \ud83d\udc4d . Great to see this merged! Just noticed a small typo though:\n\ne.g. to find errors or automatically insert vendor prefixes.. \n",
    "Martodox": "@ai It is not an isolated issue.\nI run into an error Error: Cannot find module 'postcss' with Nexus proxy, so that could be the reason why @bschatz12's setup has quarantined that version.\nAny idea why that error occurs on 6.0.23 and not on 6.0.22 ?. ",
    "BiosBoy": "@ai hi. Thank you for your responce. It's very strange that webpack recognize PostCSS package like 5.2.18 version, when I had PostCSS 6.0.23 installed locally and global. \nAlso I want to say that I have two similar apps that uses one global webpack config above. The first is compile normally, but the second gives me the such error above. Maybe the problem is somewhere deeper...\nSadly that we have no way to solve this problem now, just only to downgrade the webpack (. ",
    "bahtou": "I'm getting a similar error\n\nUnknown error from PostCSS plugin. Your current PostCSS version is 6.0.23, but postcss-import uses 7.0.5. Perhaps this is the source of the error below.\n\npostcss-import@12.0.0 has this as dependencies\n\"dependencies\": {\n    \"postcss\": \"^7.0.1\",\n    \"postcss-value-parser\": \"^3.2.3\",\n    \"read-cache\": \"^1.0.0\",\n    \"resolve\": \"^1.1.7\"\n  },\nThe CSS that is throwing this error is @import 'styles/variables.css';  inside another CSS file.. Not sure if this could be it. I grepped the project and I found css-loader has \"postcss\": \"^6.0.23\",. ",
    "vitkarpov": "I've been diving here a little bit and found out that now it's really hard to change parser because it works with a token as an array directly, there are token[0] and token[1] here and there and so on. \nWhy don't we make a special object and raw array would be an internal implementation, do you think it could be worse for performance? If you haven't actually checked it, I'd like to make this kind of refactoring first. (and look at performance tests)\nPS.\nYesterday I did a simple thing, which I thought was simple at first:\n\ncreated map token_name \u2192 token_code, changed names to codes in original tokens and exported method getTokenNameByCode\neach place where was token[0] I changed to getTokenNameByCode(token[0]) \u2014 seems this parts have to work the same\n\nIntegration tests passed but I got a lot of errors from jest, like a lot, really \ud83d\ude48Obviously I made a couple of silly but tricky mistakes. Seems it's not okay that parse and tokenizer are tight together with such fragile interface, doesn't it?. > What do you mean? Can you show some code?\nSure, right now we're trying to work directly with arrays or Uint32Arrays (https://github.com/postcss/postcss/pull/1163) and every time we need to check the idea what could work better the whole codebase needs to be changed (as here https://github.com/postcss/postcss/pull/1163/commits/e5721f069eb3f4ad502e0829efadc705b4713ba1).\nI think that token should be an instance of Token, like:\njs\nclass Token() {\n  constructor(token_name, content, start_line, start_column, end_line, end_column) {\n    ...\n  }\n}\nWith some getters/setters/methods which don't depend on inner implementation, so it could be applied different ideas and changes would be in the same place (in Token object constructor).\nSeems it should be much overhead to create some extra object wrapped Uint32Array or anything.. > If we will convert code to string, we will reduce performance again\nYep, the first thing I wanted to make was refactoring, and I struggled because of high coupling two components token and parser.\n\nThis wrapper class could affect on performance ;)\n\nSure it could but would it be? Did you really check this as it's the same single object, just a wrapper? If you're don't mind of the idea I could make the refactoring and check the performance.. Sure if you have already done this before I believe you ;). In the ideal world - yes, it should be there to decouple components. But if\nit makes things worse then surely it can\u2019t be added at all.\nI'll give it a shot.. > As I see there is no change in perfomance\nBummer :(. @lily-moon btw, can you share perf tests results?. So it's become worse? \ud83e\udd14 . I believe Uint32Array could be an implementation detail behind object of Token type, proposed some refactoring first.\nAs you actually made this happen, what can you tell about readability/maintainability of this code?. ",
    "lily-moon": "Test was runned on node v8.11.3, Windows 10, Intel Core i7-8550U, 8 GB RAM\n```\nPostCSS x 77.54 ops/sec \u00b15.67% (45 runs sampled)\nPostCSS dev x 38.67 ops/sec \u00b12.38% (56 runs sampled)\nFastest test is PostCSS at 2.0x faster than PostCSS dev\nPostCSS:     13 ms\nPostCSS dev: 26 ms (2.0 times slower)\n. Now perf test shows following:\nPostCSS x 134 ops/sec \u00b15.08% (69 runs sampled)\nPostCSS dev x 118 ops/sec \u00b14.59% (83 runs sampled)\nFastest test is PostCSS at 1.14x faster than PostCSS dev\nPostCSS:     7 ms\nPostCSS dev: 8 ms (1.1 times slower)\n```\nOk! I'll avoid args. perf test result is following:\n```\nPostCSS x 67.18 ops/sec \u00b14.58% (39 runs sampled)\nPostCSS dev x 54.98 ops/sec \u00b15.92% (61 runs sampled)\nFastest test is PostCSS at 1.22x faster than PostCSS dev\nPostCSS:     15 ms\nPostCSS dev: 18 ms (1.2 times slower)\n.\n[22:09:53]    Rework x 25.90 ops/sec \u00b19.69% (47 runs sampled)\n[22:09:59]    PostCSS dev x 28.71 ops/sec \u00b18.25% (62 runs sampled)\n[22:10:05]    PostCSS x 55.20 ops/sec \u00b18.91% (55 runs sampled)\n[22:10:12]    PostCSS Full x 14.46 ops/sec \u00b111.18% (39 runs sampled)\n[22:10:17]    CSSOM x 66.08 ops/sec \u00b111.74% (61 runs sampled)\n[22:10:23]    Mensch x 32.95 ops/sec \u00b110.08% (53 runs sampled)\n[22:10:29]    Gonzales x 8.33 ops/sec \u00b119.45% (27 runs sampled)\n[22:10:36]    Gonzales PE x 8.88 ops/sec \u00b117.51% (27 runs sampled)\n[22:10:41]    CSSTree x 155 ops/sec \u00b17.64% (68 runs sampled)\n[22:10:47]    ParserLib x 5.96 ops/sec \u00b116.64% (19 runs sampled)\n[22:10:53]    Stylecow x 20.02 ops/sec \u00b112.80% (37 runs sampled)\n[22:10:58]    Stylis x 90.92 ops/sec \u00b110.15% (62 runs sampled)\n[22:10:59] Fastest test is CSSTree at 1.71x faster than Stylis\nCSSTree:      6 ms   (2.8 times faster)\nStylis:       11 ms  (1.6 times faster)\nCSSOM:        15 ms  (1.2 times faster)\nPostCSS:      18 ms\nMensch:       30 ms  (1.7 times slower)\nPostCSS dev:  35 ms  (1.9 times slower)\nRework:       39 ms  (2.1 times slower)\nStylecow:     50 ms  (2.8 times slower)\nPostCSS Full: 69 ms  (3.8 times slower)\nGonzales PE:  113 ms (6.2 times slower)\nGonzales:     120 ms (6.6 times slower)\nParserLib:    168 ms (9.3 times slower)\n```. Done.\ngulp tokenizers result:\n```\n[22:31:54]    PostCSS x 71.49 ops/sec \u00b15.81% (35 runs sampled)\n[22:32:00]    PostCSS dev x 73.00 ops/sec \u00b13.93% (46 runs sampled)\n[22:32:00] Fastest test is PostCSS dev at 1.02x faster than PostCSS\nPostCSS dev: 14 ms (1.0 times faster)\nPostCSS:     14 ms\ngulp parsers result:\n[22:32:11]    Rework x 26.28 ops/sec \u00b110.14% (47 runs sampled)\n[22:32:17]    PostCSS dev x 33.38 ops/sec \u00b111.70% (46 runs sampled)\n[22:32:23]    PostCSS x 49.60 ops/sec \u00b111.25% (52 runs sampled)\n[22:32:29]    PostCSS Full x 11.79 ops/sec \u00b18.48% (52 runs sampled)\n[22:32:35]    CSSOM x 61.15 ops/sec \u00b19.92% (55 runs sampled)\n[22:32:40]    Mensch x 32.44 ops/sec \u00b111.65% (45 runs sampled)\n[22:32:47]    Gonzales x 7.95 ops/sec \u00b118.52% (26 runs sampled)\n[22:32:54]    Gonzales PE x 6.86 ops/sec \u00b121.86% (24 runs sampled)\n[22:33:00]    CSSTree x 96.59 ops/sec \u00b113.78% (52 runs sampled)\n[22:33:07]    ParserLib x 5.59 ops/sec \u00b118.80% (18 runs sampled)\n[22:33:13]    Stylecow x 16.89 ops/sec \u00b116.36% (33 runs sampled)\n[22:33:18]    Stylis x 83.96 ops/sec \u00b111.00% (57 runs sampled)\n[22:33:18] Fastest tests are CSSTree,Stylis at 1.15x faster than Stylis\nCSSTree:      10 ms  (1.9 times faster)\nStylis:       12 ms  (1.7 times faster)\nCSSOM:        16 ms  (1.2 times faster)\nPostCSS:      20 ms\nPostCSS dev:  30 ms  (1.5 times slower)\nMensch:       31 ms  (1.5 times slower)\nRework:       38 ms  (1.9 times slower)\nStylecow:     59 ms  (2.9 times slower)\nPostCSS Full: 85 ms  (4.2 times slower)\nGonzales:     126 ms (6.2 times slower)\nGonzales PE:  146 ms (7.2 times slower)\nParserLib:    179 ms (8.9 times slower)\n```\nThats's without currentToken.fill(0) deleting. gulp tokenizers result: \n```\n[22:53:38]    PostCSS x 67.46 ops/sec \u00b13.18% (56 runs sampled)\n[22:53:45]    PostCSS dev x 73.06 ops/sec \u00b12.45% (67 runs sampled)\n[22:53:45] Fastest test is PostCSS dev at 1.08x faster than PostCSS\nPostCSS dev: 14 ms (1.1 times faster)\nPostCSS:     15 ms\ngulp parsers result:\n[22:54:04]    Rework x 25.91 ops/sec \u00b110.13% (48 runs sampled)\n[22:54:10]    PostCSS dev x 43.83 ops/sec \u00b19.30% (55 runs sampled)\n[22:54:17]    PostCSS x 58.40 ops/sec \u00b14.51% (66 runs sampled)\n[22:54:23]    PostCSS Full x 14.43 ops/sec \u00b110.96% (39 runs sampled)\n[22:54:29]    CSSOM x 61.17 ops/sec \u00b111.69% (57 runs sampled)\n[22:54:35]    Mensch x 32.21 ops/sec \u00b116.25% (51 runs sampled)\n[22:54:42]    Gonzales x 8.48 ops/sec \u00b117.16% (28 runs sampled)\n[22:54:48]    Gonzales PE x 9.11 ops/sec \u00b116.88% (26 runs sampled)\n[22:54:53]    CSSTree x 103 ops/sec \u00b120.06% (63 runs sampled)\n[22:55:01]    ParserLib x 5.66 ops/sec \u00b116.54% (20 runs sampled)\n[22:55:06]    Stylecow x 20.58 ops/sec \u00b113.34% (38 runs sampled)\n[22:55:12]    Stylis x 86.71 ops/sec \u00b19.97% (61 runs sampled)\n[22:55:12] Fastest test is CSSTree at 1.19x faster than Stylis\nCSSTree:      10 ms  (1.8 times faster)\nStylis:       12 ms  (1.5 times faster)\nCSSOM:        16 ms  (1.0 times faster)\nPostCSS:      17 ms\nPostCSS dev:  23 ms  (1.3 times slower)\nMensch:       31 ms  (1.8 times slower)\nRework:       39 ms  (2.3 times slower)\nStylecow:     49 ms  (2.8 times slower)\nPostCSS Full: 69 ms  (4.0 times slower)\nGonzales PE:  110 ms (6.4 times slower)\nGonzales:     118 ms (6.9 times slower)\nParserLib:    177 ms (10.3 times slower)\n```\nAnd Jest tests of tokenizer and parser fail, I did not edited them.. And thank you for your time! It was a usefull experience for me!. Yeah, I agree. \nIn the task, here; https://cultofmartians.com/tasks/postcss-tokenizer.html was mentioned that parser may take content as a raw css substring, that is why I did that.\nIf the main goal is to check whether tokenizer works faster with Uint32Array, this part of parcer's code may be appropriate temporary for this check.. ",
    "AaronJan": "Hi @ai   \ud83d\ude03 \nI'm just moving this to docs/plugins.md, but I got merged notice, should I undone the change of README.md? I have to add missing link anyway.... Thank you! \ud83d\udc4d . ",
    "OliverJAsh": "@jonathantneal That's very kind of you. I want to be clear that I'm not blaming anyone\u2014this is difficult to get right. It's great to hear that you care about this and want to get it right.\nI realise the version of postcss-nesting which we were using was far behind the latest version. However, on our small team, we can only invest in upgrades when we have good reasons for doing so, especially considering we have so many modules in our project.\nRecently, we wanted to upgrade to webpack v4, which required a new major version of postcss-loader, which required a new major version of postcss. We did all of that, but then noticed our CSS output was off. If there was a version mismatch somewhere, I expected an error, but there was none. \nFor awhile it wasn't clear what part of oust PostCSS setup was to blame, as users were experiencing all sorts of issues.\nWhen I eventually pinpointed the issue to nesting, I did check the documentation for the version of postcss-nesting I was using, but it made no mention of what PostCSS version it supported. In the end, I ended up inferring this information from the changelog, which mentioned PostCSS 6 support being added in postcss-nesting 3.0.0.\nPerhaps it would have helped if postcss-nesting documented what the support was with regards to PostCSS versions. However I think the real issue here is that this all failed silently. This should have failed quickly and loudly, so it was clear where and when an upgrade was necessary.\nIt's tempting just to say \"fix this by upgrading everything to the latest version\", but in my experience, upgrades just swap old bugs with new bugs. Furthermore, in many cases, a year of no upgrades can mean we're behind on several major versions, meaning a full upgrade could require a lot of work. We want to find the shortest path to achieving our goal, whatever that may be, so we would much prefer to deal in terms of small, transparent fixes.. > If plugin throwed a error, we check plugin PostCSS version. If it was different version, we print a warning before the error.\nIn my case, the plugin did not throw an error, rather it silently failed\u2014which meant that PostCSS did not warn about the version mismatch.\nCan we make PostCSS warn about a version mismatch regardless of whether or not the plugin errors?. I don't have any suggestions I'm afraid, but I would prefer too much information (potentially false positives) than no information at all (i.e. silent failures).. ",
    "CyberAP": "Now I see. Yes, if some plugin modifies the tree we should run all the watchers again on that particular leaf and down the road, which wouldn't be optimal. Maybe it's a good idea to prioritize not the plugins but actions? And only then sort them by plugin order. Mutators could go first and walkers should be the last.\nAnyway, thanks for your time and for the great plugin!\nIf I come up with a good new API I'll send it.. ",
    "straker": "Awesome. I can send a pr later today. Thanks. Closed via #1170 . Ok, np.. Perfect, was just about to ask about that. ",
    "halfzebra": "Thanks for the reply!\nSorry, submitted too early \ud83d\ude42 \n. What about the plugins that are residing under PostCSS org? I haven't counted them, but there are approximately at least 30 of them.. ",
    "AlexWayfer": "@ai but it's not:\n. Oh, I see plugins list page now. But I don't understand why there is separate minimal list in the README. . > This short list is highlighted plugins that we recommend\nOK, why postcss-mixins is not recommended?. > Because we recommend PreCSS which include postcss-mixins\nOK, thanks. Sorry, I'm newbie with PostCSS.. ",
    "plesiecki": "That's interesting. It's the same thing you can access from then's second argument or from catch. You can see it here https://repl.it/@plesiecki/ShamelessGorgeousSystemsanalysis. Well I guess you have to click \"run\" at the top ;). js\nconst postcss = require('postcss')\npostcss().process()\nand the result looks like this\njs\nLazyResult {\n  stringified: false,\n  processed: false,\n  error: TypeError: Cannot read property 'toString' of undefined\n    at new Input (/home/runner/node_modules/postcss/lib/input.js:58:20)\n    at parse (/home/runner/node_modules/postcss/lib/parse.js:16:15)\n    at new LazyResult (/home/runner/node_modules/postcss/lib/lazy-result.js:70:16)\n    at Processor.<anonymous> (/home/runner/node_modules/postcss/lib/processor.js:137:12)\n    at Processor.process (/home/runner/node_modules/postcss/lib/processor.js:119:23)\n    at evalmachine.<anonymous>:3:11\n    at Script.runInContext (vm.js:74:29)\n    at Object.runInContext (vm.js:182:6)\n    at evaluate (/run_dir/repl.js:133:14)\n    at ReadStream.<anonymous> (/run_dir/repl.js:116:5),\n  result: \n   Result {\n     processor: Processor { version: '7.0.2', plugins: [] },\n     messages: [],\n     root: undefined,\n     opts: {},\n     css: undefined,\n     map: undefined } }. It looks like something along those lines:\n```js\ntest('should error', async t => {\n    const err = await postcss(plugins).process(brokenCSS).catch(err => err)\n// assertions on err\n\n})\n``\nRight now to access an error I pass it fromcatch`.\nWell I can live with that ;)\nWhat do you think?. Forgot to mention in typescript right now I can't do something like this:\n```js\ntest('should error', async t => {\n    const {error} = await postcss(plugins).process(brokenCSS)\n// assertions on error\n\n})\n```\nbecause of the current state of d.ts . Thanks for immediate response :heart: \nI rewrote my test and I noticed another interesting thing.\nIn latest ava@1.0.0-beta.7 it goes like this:\njs\nconst {message} = await t.throwsAsync(postcss(plugins).process(cssWithSyntaxError))\nNow AVA complains about CssSyntaxError:\n\nPromise rejected with exception that is not an error\n\nAVA uses is-error module to test reason of promise rejection.\nWhat do you think about extending from Error in CssSyntaxError?\nShould I open separate issue for the above?\nFeel free to close this PR.. ",
    "boccob": "It's somehow connected with constructor of AtRule. I removed it and then missed properties appear in doc.. ",
    "Pomax": "ahh, the changelog and commit were not clear on that. Thanks.. sure: https://github.com/postcss/postcss/pull/1181. ",
    "bokie": "sorry, i just found it's still woking when you use the old way to use object-configuration. & without require. ",
    "Yongest": "i created postcss.config.js.\nbut now\uff0ccan't prefixed   attribution ,like 'dispaly:flex;flex:1';how to do.     i use gulp and postcss.config.js: \nmodule.exports = {\n    plugins: [\n        require('autoprefixer')\n    ]\n}\n. yes ,you are right ,when use 'displaly:flex',some events cant't be triggered\uff08vivo mobile  for Android 8.0+\uff09. . thank you very much.. ",
    "AviVahl": "probably was caused by https://github.com/postcss/postcss/pull/1186/files#diff-652c1c1ab9703a9fb1d789af4262c518. ```\n:vars {\n    jarjar: binks;\n    varvar: pink;\n}\n.local {\n    color: value(jarjar) value(varvar);\n}\n```. Super quick! I'll verify it fixes the issue on my end and reply back here. Thanks!. Verified as fixed from our end. Thanks for the updated release!. ",
    "janczer": "@ai I checked all PR again. Looks like everything is ok.. ",
    "morozRed": "@ai  Looks like it's all about weird char with code 65532 after curly bracket:\nCurrent token:  [ 'word', '.c', 1, 1, 1, 2 ]  value:  c  code  46\nCurrent token:  [ 'space', ' ' ]  value:     code  123\nCurrent token:  [ '{', '{', 1, 4 ]  value:  {  code  123\nCurrent token:  [ 'word', '\ufffc', 1, 5, 1, 5 ]  value:  \ufffc  code  65532\nCurrent token:  [ 'space', ' ' ]  value:     code  97\nCurrent token:  [ 'word', 'a', 1, 7, 1, 7 ]  value:  a  code  97\nCurrent token:  [ ':', ':', 1, 8 ]  value:  :  code  58\nCurrent token:  [ 'space', ' ' ]  value:     code  39\nCurrent token:  [ 'string', '\\'b\\'', 1, 10, 1, 12 ]  value:  '  code  39\nCurrent token:  [ ';', ';', 1, 13 ]  value:  ;  code  59\nCurrent token:  [ '}', '}', 1, 14 ]  value:  }  code  125\nSo I want to fix it.\nThis special unicode symbol gets recognized in tokenizer as a word.. ",
    "pgilad": "Sorry about the documentation flip, my mistake, but fixed. Anyway, there are currently lots of redundant files being bundled with postcss, that's why I noticed it and decided to go with a whitelist instead of blacklist..\nThis is what's currently bundled with postcss:\n\nAnyway I guess having a single method of working (i.e npmignore or files) in all projects is a worthwhile argument, although I think this is a public enough of a repo to distinguish it from \"your\" projects. Thanks for the feedback\n. \n. \ud83d\udc4d . @ai I think you added it to the wrong place, it should be added to .npmignore file. \ud83d\ude48 . I said prettier isn't perfect, but for an automatic tool, it's pretty close.\nAgain, thanks for the feedback. Honestly I find this repository is impossible to contribute to, I can't help but wonder how it would be for new comers, but this is your project (and a great one too, and thanks a lot for investing your time on it!)\n. Thanks I'll see about your suggested  contributions. ",
    "abm0": "@jeddy3 wow, thank you so much!. ",
    "pribilinskiy": "Ok, thanks. ",
    "vkrol": "\nOr you are OK with cutting it?\n\nI think so \ud83e\udd14\n\nWhat is a reason why you taking care of BOM? (to find the best option)\n\nI want to create the unicode-bom stylelint rule \nhttps://github.com/stylelint/stylelint/issues/3792. \n. @ai OK, thanks!. @ai thanks!. ",
    "sswebcoder": "\nSee #1109. If you add space before and after comment it should be excluded.\n\nBut what I should do in case without spaces?. I think what \n\nLet's keep comments only inside identificator (letters and digits). Not between difficult like different tokens.\n\nis meant what comment should be excluded if it located not in selector token. Right?. > Going back to your question i am wondered why do you need such selector? Is it generated css?\nI'm trying to debug this https://github.com/stylelint/stylelint/issues/3729\nIt's possible then somebody debugging himself styles and adding comment for exclude selector.. ",
    "lluisrojass": "I'm not sure I follow here. The plugin currently already does this, it turns %%styled-jsx-placeholder-0%% into /*%%styled-jsx-placeholder-0%%*/, and then runs the css through post-css:\nsee here: https://github.com/giuseppeg/styled-jsx-plugin-postcss/blob/master/index.js#L5\nI was under the impression that PostCSS cleans values from comments by design. and that was why these comments were getting stripped, but it looks like you're saying there is way to prevent comment stripping? \nif so, i would love to know how \ud83d\ude04 \n. Closing this issue, thank you for your answer @ai, i'm going to investigate further.. ",
    "ASVBPREAUBV": "Thanks. ",
    "rob-bar": "As I inspect the sourcemap file beter, there is also a sourcesContent key available in the sourcemap\nwith the whole css in it, is this wanted?. I see 2 solutions to this PR:\n- Fix the bug and do care about previous sourcemapping like it was.\n- Maybe also provide a way that post css does not touch the sourcemapping link in the bottom of the file at all? Is this even possible now? I think it gets stripped out either way.\n. if you just for example: change some values of properties...\nthe sourcemap will stay the same and you don't really want to update it I think.\nAnyhow, the override problem is more important than the addition, since the doc says that this works but it doesn't.\n. ",
    "aoberoi": "Thanks for the fast feedback @jedmao.\nI actually think void | Promise<void> | any as the return type would be a little less clear. If I happen to return a Promise<number>, for example, it isn't assignable to Promise<void>. The only reason it would work is that its all caught by the any in the union. The same goes for return number, it wouldn't be assignable to void, but would continue to work because of the any.\nTherefore I think Promise<any> | any is actually more accurate. It's like saying \"I don't care, return anything, I'm going to throw it away, unless its a Promise, and then I'm still going to throw away the resolved value.\". Hmm... I guess the meaning of any in this situation is subjective. It\u2019s totally valid that you feel it could mislead the developer into thinking the value has meaning, and yet it\u2019s also totally valid that I think void could signal that it\u2019s significant that there\u2019s no value returned, hence TypeScript exhibiting the behavior that number is not assignable to void. \nI\u2019d like you to consider an example, which is actually the situation for the plugin I\u2019m writing. I return a function that can call itself. When it calls itself, it\u2019s return value is important, and I chose that it returns a Promise<Container>. I use the Container value to recursively merge declarations back up to the Root. This isn\u2019t really an edge case, as any plugin dealing with importing or processing nested structures would likely design them to do the same. From an implementation point of view, this works. However if the return type of TransformCallback was Promise<void>, I would need to do something like the following just to satisfy the type system:\ntypescript\npostcss.plugin('foo', (opts) => {\n  // i\u2019d like to just return myRecursiveFunc, but instead...\n  return (root, result) => myRecursiveFunc(root, result).then(() => {});\n});\nI'd have to effectively erase the resolved value of my recursive function so that it\u2019s resolved value is assignable to void. That seems just as bad (actually worse, there's a performance cost) than the throw I used to convince the type system that result is never undefined. This demonstrates my interpretation above: TypeScript says Container is not assignable to void, so I must interpret the return type of void as meaningful.\nHow do you feel about keeping it as I\u2019ve suggested, but in order to clarify the subjective interpretation, we add to the doc comments to explicitly let the user know any is being used to stand in for a value that will be ignored. . \ud83d\udea8 This change can break type-checking in existing code, if that code did not specify the plugin property when pushing messages.. cc @jedmao (no rush \ud83d\ude04). @jedmao whoa, that's pretty rad. thanks for sharing!\ndo you know how the rest of the maintainers might feel about porting the codebase to TypeScript? it would be great if we didn't have to sync the code changes to the type definitions; that's always going to be a cat and mouse game.\nIMHO it wouldn't take a ton of effort, you've already done the majority of it, and the codebase already uses JSDoc pretty much everywhere. i'd be willing to contribute to that effort if the group agrees to go in that direction. it could be invisible to the users (still document everything as a JavaScript interface).. @ai totally fair.\nStill, ya gotta love the irony when the creator of a source code processing tool tells you he wants to get rid of source code processing tools in the project. :smile:. @ai sure! it's here: https://github.com/aoberoi/postcss-importer (not ready for public consumption, but its getting there)\nthis commit is probably the most interesting for this discussion: https://github.com/aoberoi/postcss-importer/commit/ba2033e6f1dcd7101971475f17a815db4a908a6f. Not quite. I'll summarize.\nThe plugin processes @import rules. One goal is that this plugin should be usable in any position within the plugins array. To accomplish this, the plugin needs to process any imported files using any plugins that might have come before itself in the plugins array. That ensures that the output CSS is processed through each plugin exactly once, with no configuration required to make it happen.\nSo, when this plugin is first, there will be no plugins before it in the array, and that means when I process imported files, this warning will be emitted.. It's here:\nhttps://github.com/aoberoi/postcss-importer/blob/03c1bfbea9b9a790a4d2c3689a73ded58c0834e3/src/RecursiveProcessor.ts#L25-L48. I considered that, but postcss.parse(css) won't make use of the other processor options, like syntax, parser, map, etc.. i think you mean this:\njavascript\nif (plugins.length > 0) {\n  return postcss(plugins).process(css, processOpts).root\n} else {\n  if (processOpts.parser !== undefined) {\n    return processOpts.parser(css);\n  } else if (processOpts.syntax !== undefined) {\n    return processOpts.syntax.parse(css);\n  }\n  return postcss.parse(css)\n}\ndoes that look right?. Great! It's a little more code, but I think this should be more efficient too. Not a problem.\nThank you so much.. cc @jedmao . @ai I think those are all the changes I\u2019ll have for a while. Feel free to release :smile:. @jedmao interesting idea indeed! Could  this work possibly help in the problem of having to synchronize the type definitions outside the source code? Specifically, do you know if there\u2019s a way to run tsc to output declaration files (.d.ts) from comments in the proposed style?. It seems the types that can be specified using JSDoc comments are still less expressive than TypeScript (most of the advanced types are missing, such as generics, mapped types, intersections, etc). However, if we\u2019re not going to author the source code in TypeScript, this would still be a good compromise towards making PostCSS more usable for TypeScript users. \nI recently heard this advice: \u201cif you aren\u2019t going to write the code in TS, then no types is better than wrong types\u201d. This leads me to believe that if we go down this route, we should remove the .d.ts file from this repo so that there\u2019s only one source of truth (the JSDoc comments). Something to consider, since that\u2019s quite a large trade off.\nIMHO if we\u2019re going to have an unsynchronized declaration file, it shouldn\u2019t be in this repo, but rather in DefinatelyTyped, so that it\u2019s opt-in and wrong declarations don\u2019t get in the way of productivity. . if we use this change as-is, css being an empty string would error. that doesn't seem to be what you want, given the title. if you want to check if the value is defined, you should probably use css === undefined instead.\nif you do actually want the empty string to generate an error, then i suggest you remove the css === null part of this condition, because !css would already be true for that case.. ",
    "adover": "@ai @aoberoi thanks for the feedback. I noticed this once I broke other things :) I'll raise an issue to explain more the issue I'm trying to fix. ",
    "DrewML": "\nIt seems the types that can be specified using JSDoc comments are still less expressive than TypeScript (most of the advanced types are missing, such as generics, mapped types, intersections, etc)\n\nThis is not accurate. I've yet to find a type I could not model with JSDoc. Per the constructs you mentioned:\nGenerics + Mapped Types\njs\n/**\n * @typedef {{ readonly [P in keyof T]: T[P] }} ReadonlyExample\n * @template T\n */\nVSCode showing TypeScript Language Service type\n\nUnion Types\n```js\n/*\n * @typedef {Object} Foo\n * @property {string} foo\n /\n/*\n * @typedef {Object} Bar\n * @property {string} bar\n /\n/\n @typedef {Foo & Bar} FooBar\n/\n/ @type {FooBar} */\nconst FooBarValue = {\n    foo: 'foo',\n    bar: 'bar',\n    bizz: 'test' // bizz properly gets flagged as not being a member of Foo & Bar\n};\n```\nVSCode showing TypeScript Language Service type**\n\n. ",
    "hcomnetworkers": "That would be perfect. . ",
    "florianmutter": "But could the MapGenerator as a first step add an optional annotation path prefix option? As the next step the loader could set the public path as a prefix.. ",
    "JustClear": "Oh... Thanks. \ud83d\udc4c. ",
    "drolsen": "Ah, ok good to know about being able to access decls from root like that!\nHowever, issue still remains for me unfortunatly.\n```javascript\nconst postcss = require('postcss');\nconst path = require('path');\nmodule.exports = postcss.plugin('postcss-rems', (options) => {\n  options = options || {};\n  let baseSize = undefined;\n  return root => {\n    // step 1\n    root.walkDecls('font-size', decl => {\n      if (decl.parent.selector === 'body' && decl.prop === 'font-size') {\n        baseSize = parseInt(decl.value, 10);\n      }\n    })\n//step 2\nroot.walkDecls(decls => {\n    console.log(baseSize);\n})\n\n};\n});\n```\nAs a simple test, I've reduced step 2's walkDecls to being a simple console log of the variable found in step one. My terminal shows an output of:\nundefined\nundefined\nundefined\n16\n...\nDigging a little further.. I put in a simple counter variable outside my plugin, and increment it within my plugin like so:\n```javascript\nconst postcss = require('postcss');\nconst path = require('path');\nlet counter = 0;\nmodule.exports = postcss.plugin('postcss-rems', (options) => {\n  options = options || {};\n  let baseSize = undefined;\n  return root => {\ncounter++;\nconsole.log(counter);\n\n// step 1\nroot.walkDecls('font-size', decl => {\n  if (decl.parent.selector === 'body' && decl.prop === 'font-size') { // <-- I am line 14\n    baseSize = parseInt(decl.value, 10);\n  }\n})\n\n//step 2\nroot.walkDecls(decls => {\n    console.log(baseSize); \n})\n\n};\n});\n```\nMy terminal output on this counter logging was as follows:\n1\n2\n3\n4\n5\n6\n10\n12\n20\nundefined\n22\n34\nSo I guess my disconnect here is I was under the impression that in a plugin, one would be walking all the pulled in CSS in one shot, but it appears that I'm running over each sheet separately. \nKeeping that in mind, my problem begins to make more sense. If my plugin is running over each sheet one at time, then of course some sheets will have been ran over prior to ever reaching my sheet that contains the body selector / value I need. Perhaps my configuration is incorrect, but if not, and truly is a per-sheet parsing, how does one ensure order of operation when trying pre-gathering data like I am in step 1?\nThank you!!!!\n. Using Webpack 4x, here is my configuration.\nAm I missing something that would put these all into a single entry before hitting POSTCSS? I thought I had this configured correctly, but you never know.\nThank you!\njavascript\n{\n  entry: {\n    assets: './build/styles.js', // entry point for style assets\n    guide: './build/guide.js'    // entry point for style guide assets\n  },\n  output: { ... },\n  module: { \n    rules: [\n      {\n        'test': /\\.css$/,    \n        'use': [\n          MiniCssExtractPlugin.loader,  // (see: https://www.npmjs.com/package/mini-css-extract-plugin)\n          {\n            'loader': 'css-loader',     // (see: https://www.npmjs.com/package/css-loader)\n            'options': {}\n          }, { \n            'loader': 'postcss-loader', // (see: https://www.npmjs.com/package/postcss-loader)\n            'options': {\n              'ident': 'postcss',\n              'plugins': (loader) => [\n                imports({ // Allows for @import and our entry point for namespace alias config\n                  resolve: (id, basedir) => {\n                    return resolver.resolveSync({}, basedir, id);\n                  }\n                }),\n                media(),        // Allows for custom media queries\n                exporting(),   // Pre-parse color variables\n                variables(),    // Allows var(--variables)\n                nested(),       // Allows for nested selectors\n                extend(),       // Allows for CSS @extend\n                mixins(),       // Allows for CSS @mixins\n                rems(),         // Allows for CSS rem()\n                removeRoots(),  // Cleans up leftover :root declarations.\n                mediaPacker()   // Allows for the consolidation of @media queries\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: './assets/css/[name].css',\n      chunkFilename: './[name].css'\n    })\n  ]\n}\nMy entry styles.js\n```javascript\nconst requireAll = (context) => context.keys().map(context);\n// Import variables CSS\nrequireAll(require.context('@vars/', true, /.css$/));\n// Import all remaining elements CSS\nrequireAll(require.context('@elements/', true, /.css$/));\n```. ",
    "mattlyons0": "Personally I agree. \nGiven the situation that postcss-less does use the postcss tokenizer would you be open to a PR to expose the position of the tokenizer in the input? It would just be adding a variable to the return function: https://github.com/postcss/postcss/blob/master/lib/tokenize.es6#L36. I mean something like this: https://github.com/mattlyons0/postcss/commit/a2b8a2de146d99f6e5a73a831318be5f8c7eb23b\nThat way we could create a new tokenizer from the position the current tokenizer is at (with the quoted string fixed at the start). Currently the only way to get the position is to tokenize until nothing is returned, as done: https://github.com/mattlyons0/postcss-less/commit/3a0e4d0914fa77d981afdaa13b57575e9d785e83#diff-5db080c77df4169f9ab46713aed73d51R20 but this has a slight performance impact since we are tokenizing just to get the remaining input. Don't have a twitter account and no attribution necessary, its such a small change.\nThanks for working through this with me and getting it in!. ",
    "mrG0bliN": "@ai \u044f \u0432 \u043a\u0443\u0440\u0441\u0435 \u0447\u0442\u043e \u043e\u043d \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442, \u043c\u0435\u043d\u044f \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u043f\u043e\u0445\u043e\u0436\u0435\u043c \u0441\u0442\u0438\u043b\u0435, \u044d\u0442\u043e \u0436\u0435 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 :(((. \u044d\u0442\u043e \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043d\u0430 js \u0438\u043b\u0438 \u0441\u0432\u043e\u0435 \u0447\u0442\u043e \u0442\u043e \u044d\u043a\u0441\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c?. \u043e\u043a\u0430\u0439, \u0441\u043f\u0430\u0441\u0438\u0431\u043e . ",
    "vittalas": "This is the way i have been trying to generate the ast's for the css files using the scss parser  (https://github.com/postcss/postcss-scss ) \nfile.ast = postcss().process(fs.readFileSync(file.source, \"utf8\"), {parser: postcssScss}); \nDid you mean to say the scss parser does that ?. ",
    "chernobelenkiy": "\nGreat. Can you format units as a code to fix warning from spelling check?\n\nYes, done.. > Sorry, one more thing (I am out of laptop and can't fix by my own).\n\nGenerares > generates (start from small letter). And can you also fix the plugin above with the same mistake.\n\nNo problem, fixed.. ",
    "justinmeiners": "@ai I understand. I am not involved in your project to make specific recommendations, but I thought I would bring this up for your consideration.\n\nUnfortunatelly, noone tweet about it and mentioned. \n\nSometimes you have to do the right thing, even when nobody else is watching :)\nThanks for your response.. ",
    "BondarenkoAlex": "\nI\u2019m so excited for this. Question: In this PR, observers will default to node enter, but I have thought Babel observers default to exit. I think we should be consistent. Would someone verify this?\n\nThe default value is \"enter\".\n\nNote: Identifier() { ... } is shorthand for Identifier: { enter() { ... } }\n\nhttps://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#toc-visitors. Ok. Ok. \u041e\u043a. \u041d\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c.. ",
    "vssaini": "Hi @ai \nI found PostCSS plugin list in package.json as follow. There is no postcss.config.js file.\n{\n  \"name\": \"travel-site\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"jquery\": \"^3.3.1\",\n    \"normalize.css\": \"^8.0.1\",\n    \"waypoints\": \"^4.0.1\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.3.3\",\n    \"@babel/preset-env\": \"^7.3.1\",\n    \"autoprefixer\": \"^9.4.7\",\n    \"babel-core\": \"^7.0.0-bridge.0\",\n    \"babel-loader\": \"^7.1.5\",\n    \"babel-preset-env\": \"^1.7.0\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"browser-sync\": \"^2.26.3\",\n    \"del\": \"^3.0.0\",\n    \"extract-text-webpack-plugin\": \"^4.0.0-beta.0\",\n    \"gulp\": \"^4.0.0\",\n    \"gulp-postcss\": \"^8.0.0\",\n    \"gulp-rename\": \"^1.4.0\",\n    \"gulp-svg-sprite\": \"^1.5.0\",\n    \"gulp-watch\": \"^5.0.1\",\n    \"postcss\": \"^7.0.14\",\n    \"postcss-hexrgba\": \"^1.0.1\",\n    \"postcss-import\": \"^12.0.1\",\n    \"postcss-mixins\": \"^6.2.1\",\n    \"postcss-nested\": \"^4.1.1\",\n    \"postcss-simple-vars\": \"^5.0.1\",\n    \"webpack\": \"^4.29.4\",\n    \"webpack-cli\": \"^3.2.3\"\n  }\n}\nand input CSS as follow - \n/! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css /\n/ Document\n   ========================================================================== /\n/*\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n /\nhtml {\n  line-height: 1.15; / 1 /\n  -webkit-text-size-adjust: 100%; / 2 /\n}\n/ Sections\n   ========================================================================== /\n/*\n * Remove the margin in all browsers.\n /\nbody {\n  margin: 0;\n}\n/*\n * Render the main element consistently in IE.\n /\nmain {\n  display: block;\n}\n/*\n * Correct the font size and margin on h1 elements within section and\n * article contexts in Chrome, Firefox, and Safari.\n /\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n/ Grouping content\n   ========================================================================== /\n/*\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n /\nhr {\n  box-sizing: content-box; / 1 /\n  height: 0; / 1 /\n  overflow: visible; / 2 /\n}\n/*\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd em font sizing in all browsers.\n /\npre {\n  font-family: monospace, monospace; / 1 /\n  font-size: 1em; / 2 /\n}\n/ Text-level semantics\n   ========================================================================== /\n/*\n * Remove the gray background on active links in IE 10.\n /\na {\n  background-color: transparent;\n}\n/*\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n /\nabbr[title] {\n  border-bottom: none; / 1 /\n  text-decoration: underline; / 2 /\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted; / 2 /\n}\n/*\n * Add the correct font weight in Chrome, Edge, and Safari.\n /\nb,\nstrong {\n  font-weight: bolder;\n}\n/*\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd em font sizing in all browsers.\n /\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; / 1 /\n  font-size: 1em; / 2 /\n}\n/*\n * Add the correct font size in all browsers.\n /\nsmall {\n  font-size: 80%;\n}\n/*\n * Prevent sub and sup elements from affecting the line height in\n * all browsers.\n /\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\nsub {\n  bottom: -0.25em;\n}\nsup {\n  top: -0.5em;\n}\n/ Embedded content\n   ========================================================================== /\n/*\n * Remove the border on images inside links in IE 10.\n /\nimg {\n  border-style: none;\n}\n/ Forms\n   ========================================================================== /\n/*\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n /\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; / 1 /\n  font-size: 100%; / 1 /\n  line-height: 1.15; / 1 /\n  margin: 0; / 2 /\n}\n/*\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n /\nbutton,\ninput { / 1 /\n  overflow: visible;\n}\n/*\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n /\nbutton,\nselect { / 1 /\n  text-transform: none;\n}\n/*\n * Correct the inability to style clickable types in iOS and Safari.\n /\nbutton,\ntype=\"button\",\ntype=\"reset\",\n[type=\"submit\"] {\n  -webkit-appearance: button;\n}\n/*\n * Remove the inner border and padding in Firefox.\n /\nbutton::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n/*\n * Restore the focus styles unset by the previous rule.\n /\nbutton:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n/*\n * Correct the padding in Firefox.\n /\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n/*\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from fieldset elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    fieldset elements in all browsers.\n /\nlegend {\n  box-sizing: border-box; / 1 /\n  color: inherit; / 2 /\n  display: table; / 1 /\n  max-width: 100%; / 1 /\n  padding: 0; / 3 /\n  white-space: normal; / 1 /\n}\n/*\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n /\nprogress {\n  vertical-align: baseline;\n}\n/*\n * Remove the default vertical scrollbar in IE 10+.\n /\ntextarea {\n  overflow: auto;\n}\n/*\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n /\n[type=\"checkbox\"],\n[type=\"radio\"] {\n  box-sizing: border-box; / 1 /\n  padding: 0; / 2 /\n}\n/*\n * Correct the cursor style of increment and decrement buttons in Chrome.\n /\ntype=\"number\"::-webkit-outer-spin-button {\n  height: auto;\n}\n/*\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n /\n[type=\"search\"] {\n  -webkit-appearance: textfield; / 1 /\n  outline-offset: -2px; / 2 /\n}\n/*\n * Remove the inner padding in Chrome and Safari on macOS.\n /\n[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n/*\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to inherit in Safari.\n /\n::-webkit-file-upload-button {\n  -webkit-appearance: button; / 1 /\n  font: inherit; / 2 /\n}\n/ Interactive\n   ========================================================================== /\n/\n * Add the correct display in Edge, IE 10+, and Firefox.\n /\ndetails {\n  display: block;\n}\n/\n * Add the correct display in all browsers.\n /\nsummary {\n  display: list-item;\n}\n/ Misc\n   ========================================================================== /\n/*\n * Add the correct display in IE 10+.\n /\ntemplate {\n  display: none;\n}\n/*\n * Add the correct display in IE 10.\n /\n[hidden] {\n  display: none;\n}\nbody{\n    font-family: 'Roboto', sans-serif;\n    color: #333;\n}\nimg{\n    max-width: 100%;\n    height: auto;\n}\n\n{\n    box-sizing: border-box;\n}\n\na{\n    color: #d59541;\n}\n.large-hero{\n    border-bottom: 10px solid #2f5572;\n    position:relative;\n}\n.large-hero__image{\n        display: block;\n    }\n.large-hero__text-content{\n    position: absolute;\n    top: 50%;\n    -webkit-transform: translateY(-50%);\n            transform: translateY(-50%);\n    left: 0;\n    width: 100%;\n    text-align: center\n   }\n.large-hero__title{\n    font-weight: 300;\n    color: #2f5572;\n    font-size: 2.4rem;\n    margin:0;\n   }\n@media(min-width: 530px){\n.large-hero__title{\n        font-size: 4.8rem\n   }\n    }\n.large-hero__subtitle{\n    font-weight: 300;\n    color: #2f5572;\n    font-size: 1.5rem ;\n    margin:0;\n   }\n@media(min-width: 530px){\n.large-hero__subtitle{\n        font-size:2.9rem\n   }\n    }\n.large-hero__description{\n    font-weight:100;\n    color: #FFF;\n    font-size: 1.1rem;\n    text-shadow: 2px 2px 0 rgba(0,0,0,.1);\n    max-width: 30rem;\n    margin-left:auto;\n    margin-right:auto;\n   }\n@media(min-width: 530px){\n.large-hero__description{\n        font-size: 1.875rem\n   }\n    }\n.btn{\n    background-color: #2f5572;\n    color: #FFF;\n    text-decoration: none;\n    padding: .75rem 1.2rem;\n    display: inline-block;\n  }\n.btn--orange{\n        background-color: #d59541;\n    }\n.btn--large{\n        padding: 1.1rem 1.9rem;\n    }\n@media(min-width: 530px){\n.btn--large{\n        font-size: 1.25rem\n    }\n    }\n.wrapper{\n    overflow:hidden;\n    padding-left: 18px;\n    padding-right: 18px;\n    max-width: 1236px;\n    margin-left: auto;\n    margin-right: auto;\n}\n.wrapper--medium{\n        max-width: 976px;\n    }\n.wrapper--no-padding-until-medium{\n        padding-left: 0;\n        padding-right: 0;\n    }\n@media(min-width: 800px){\n.wrapper--no-padding-until-medium{\n            padding-left: 18px;\n            padding-right: 18px\n    }\n    }\n.wrapper--no-padding-until-large{\n        padding-left: 0;\n        padding-right: 0;\n    }\n@media(min-width: 1010px){\n.wrapper--no-padding-until-large{\n            padding-left: 18px;\n            padding-right: 18px\n    }\n    }\n.wrapper .wrapper{\n        padding-left: 0;\n        padding-right: 0;\n    }\n.wrapper--b-margin{\n        margin-bottom: 1rem;\n    }\n@media(min-width: 530px){\n.wrapper--b-margin{\n            margin-bottom: 3.875rem\n    }\n    }\n.page-section{\n    padding: 1.2rem 0;\n}\n@media(min-width: 800px){\n.page-section{\n        padding: 4.5rem 0\n}\n    }\n.page-section--no-b-padding-until-medium{\n    padding-bottom: 0;\n  }\n@media(min-width: 800px){\n.page-section--no-b-padding-until-medium{\n      padding-bottom: 4.5rem\n  }\n    }\n.page-section--no-b-padding-until-large{\n    padding-bottom: 0;\n  }\n@media(min-width: 1010px){\n.page-section--no-b-padding-until-large{\n      padding-bottom: 4.5rem\n  }\n    }\n.page-section--blue{\n    background-color: #2f5572;\n    color: #FFF;\n  }\n.page-section--testimonials{\n    background-color: #e0e6ef;    \n  }\n@media(min-width: 1010px){\n.page-section--testimonials{\n        background: url('/assets/images/testimonials-bg.jpg') top center no-repeat;\n        background-size: cover    \n  }\n    }\n.headline{\n    font-size: 1.9rem;\n    font-weight: 300;\n    color: #2f5572;\n}\n@media(min-width: 530px){\n.headline{\n        font-size: 2.875rem\n}\n    }\n.headline--centered{\n        text-align: center;\n    }\n.headline--orange{\n        color: #d59541;\n    }\n.headline--small{\n        font-size: 1.2rem;\n    }\n@media(min-width: 530px){\n.headline--small{\n            font-size: 1.875rem\n    }\n    }\n.headline--narrow{\n        max-width: 500px;\n        margin-left: auto;\n        margin-right: auto;\n    }\n.headline--light{\n        font-weight: 100;\n    }\n.headline--b-margin-small{\n        margin-bottom: .5em;\n    }\n.headline--b-margin-large{\n        margin-bottom: 1.6em;\n    }\n.headline--no-t-margin{\n        margin-top: 0;\n    }\n.row::after{\n        content: \"\";\n        clear: both;\n        display: table;\n    }\n.row--t-padding{\n        padding-top:80px;\n    }\n.row--gutters{\n        margin-right: -65px;\n    }\n.row--gutters-large{\n        margin-right: -100px;\n    }\n.row--gutters-small{\n        margin-right: -45px;\n    }\n.row--gutters > div{\n        padding-right: 65px;\n    }\n.row--gutters-large > div{\n        padding-right: 100px;\n    }\n.row--gutters-small > div{\n        padding-right: 45px;\n    }\n.row__b-margin-until-medium{\n        margin-bottom: 1rem;\n    }\n@media(min-width: 800px){\n.row__b-margin-until-medium{\n    margin-bottom: 0;  \n}\n\n.row__medium-4{\n    float:left;\n    width:33.33%;\n}\n\n.row__medium-4--larger{\n    width:37%;\n}\n\n.row__medium-6{\n    float: left;\n    width: 50%;\n}\n\n.row__medium-8{\n    float:left;\n    width: 66.66%;\n\n}\n\n.row__medium-8--smaller{\n    width:63%;\n}\n}\n\n@media(min-width: 1010px){\n.row__b-margin-until-large{\n    margin-bottom: 0;  \n}\n\n.row__large-4{\n    float:left;\n    width:33.33%;\n}\n\n.row__large-4--larger{\n    width:37%;\n}\n\n.row__large-6{\n    float: left;\n    width: 50%;\n}\n\n.row__large-8{\n    float:left;\n    width: 66.66%;\n\n}\n\n.row__large-8--smaller{\n    width:63%;\n}\n}\n\n/ Begin Equal Height Rules /\n@media(min-width: 800px){\n.row--equal-height-at-medium{\n            display: flex\n    }\n    }\n.row--equal-height-at-medium > div{\n            float: none;\n            display: flex;\n        }\n@media(min-width: 1010px){\n.row--equal-height-at-large{\n            display: flex\n    }\n    }\n.row--equal-height-at-large > div{\n            float: none;\n            display: flex;\n        }\n.generic-content-container p{\n        font-weight: 300;\n        line-height: 1.65;\n        margin: 0 0 1.8rem 0;\n    }\n@media(min-width: 530px){\n.generic-content-container p{\n            font-size: 1.125rem\n    }\n    }\n.generic-content-container p a {\n        font-weight: 700;\n    }\n.section-title{\n    font-size: 2.55rem;\n    font-weight: 300;\n    text-align: center;\n}\n@media(min-width: 530px){\n.section-title{\n        font-size: 3.75rem\n}\n    }\n.section-title strong{\n        font-weight: 500;\n    }\n.section-title__icon{\n        display: block;\n        margin-left: auto;\n        margin-right: auto;\n        margin-bottom: .6rem;\n    }\n@media(min-width: 530px){\n.section-title__icon{\n            position: relative;\n            top:8px;\n            margin-right: .5rem;\n            margin-left:0;\n            margin-bottom: 0;\n            display: inline-block\n    }\n    }\n.section-title--blue{\n        color:#2f5572;\n    }\n.feature-item{\n    position: relative; \n    padding-bottom: 2.5rem;\n}\n@media(min-width: 530px){\n.feature-item{\n        padding-left: 94px\n}\n    }\n.feature-item__icon{\n        display: block;\n        margin: 0 auto;\n    }\n@media(min-width: 530px){\n.feature-item__icon{\n            position: absolute;\n            left:0\n    }\n    }\n.feature-item__title{\n        font-size: 1.6rem;\n        font-weight: 300;\n        margin-top: .7em;\n        margin-bottom:.8rem;\n        text-align: center;\n    }\n@media(min-width: 530px){\n.feature-item__title{\n            text-align: left;\n            margin-top: 1em;\n            font-size: 1.875rem\n    }\n    }\n.testimonial{\n    background-color: rgba(255,255,255,.8);\n    padding: 0 18px 1px 18px;\n    margin-bottom: 98px;\n}\n@media(min-width: 1010px){\n.testimonial{\n        padding: 0 1.8125rem 1px 1.8125rem;\n        margin-bottom: 0\n}\n    }\n.testimonial--last{\n        margin-bottom: 0;\n    }\n.testimonial__photo{\n        border-radius: 80px;\n        overflow: hidden;\n        width: 160px;\n        height: 160px;\n        margin: 0 auto -80px auto;\n        position: relative;\n        top:-80px;\n        border: 6px solid rgba(255,255,255,.8);\n    }\n.testimonial__title{\n        color: #2f5572;\n        text-align: center;\n        font-size: 1.5rem;\n        font-weight: 500;\n        margin: 0\n    }\n.testimonial__subtitle{\n        color:#d59541;\n        text-align: center;\n        font-weight: 400;\n        font-size: 0.9375rem;\n        margin:.25rem 0 1rem 0;\n    }\n/ Do not edit modules/_sprite directly as it is auto-generated by Gulp. Instead edit gulp/templates/sprite /\n.icon{\n    background-image: url('/assets/images/sprites/sprite-d675eadb.svg');\n}\n.icon--clear-view-escapes{\n    width: 142.4px;\n    height: 59.53px;\n    background-position: 0 0 ;\n }\n.icon--comment{\n    width: 64px;\n    height: 64px;\n    background-position: 99.70443349753694% 0 ;\n }\n.icon--facebook{\n    width: 21.23px;\n    height: 42.01px;\n    background-position: 26.040607071652357% 45.795830448496034% ;\n }\n.icon--fire{\n    width: 56px;\n    height: 64px;\n    background-position: 0 99.56481481481481% ;\n }\n.icon--globe{\n    width: 64px;\n    height: 64px;\n    background-position: 27.586206896551722% 99.56481481481481% ;\n }\n.icon--instagram{\n    width: 42.01px;\n    height: 42.01px;\n    background-position: 63.2917018534157% 49.234556504346486% ;\n }\n.icon--mail{\n    width: 64px;\n    height: 48px;\n    background-position: 0 48.00806451612903% ;\n }\n.icon--rain{\n    width: 64px;\n    height: 64px;\n    background-position: 99.70443349753694% 59.25925925925926% ;\n }\n.icon--star{\n    width: 64px;\n    height: 64px;\n    background-position: 59.11330049261084% 99.56481481481481% ;\n }\n.icon--twitter{\n    width: 51.78px;\n    height: 42.06px;\n    background-position: 94.04330452560171% 98.50700323226104% ;\n }\n.icon--wifi{\n    width: 60px;\n    height: 64px;\n    background-position: 68.79227053140097% 0 ;\n }\n.icon--youtube{\n    width: 34.75px;\n    height: 42px;\n    background-position: 36.69752421959096% 45.792307692307695% ;\n }\n.site-footer{\n    background-color: #2f5572;\n    color: #FFF;\n    padding: .5rem 0;\n    text-align: center;\n}\n.site-footer__text{\n        display: block;\n        margin-bottom: 1rem;\n        font-weight: 200;\n    }\n@media(min-width: 800px){\n.site-footer__text{\n            display: inline;\n            margin-bottom: 0;\n            margin-right: 1.4rem\n    }\n    }\n.site-header{\n    padding: 10px 0;\n    position: absolute;\n    width: 100%;\n    z-index: 2;\n    background-color: rgba(47,85,114, .3);\n}\n.site-header__btn-container{\n        float:right;\n    }\n.site-header__logo{\n        top:0;\n        position: absolute;\n        background-color: #2f5572;\n        padding: 25px 36px;\n    }\n.primary-nav--pull-right{\n        float: right;\n    }\n.primary-nav ul {\n        margin: 0;\n        padding: 0;\n    }\n.primary-nav ul::after{\n        content: \"\";\n        clear: both;\n        display: table;\n    }\n.primary-nav li {\n        list-style: none;\n        float: left;\n        padding-right: 20px;\n    }\n.primary-nav a {\n        text-decoration: none;\n        color: #FFF;\n        font-weight: 300;\n        display: block;\n        padding: 12px 0;\n    }\n. Hi,\nI think you can take a look over from the repository at Travel Site.. ",
    "buhlahkay": "Sorry, thanks for the quick response.\nHowever, just in case anyone stumbles across this in the future, I got some guidance via the postcss gitter channel, and found that the errors were from @import in my css. Installing the postcss-import plugin fixed the issue:\nmodule.exports = {\n  plugins: [\n    require('postcss-import'),\n    require('precss'),\n    require('cssnano')\n  ]\n}. ",
    "holidaypenguin": "Can I do it?. @ai Done. ",
    "chancancode": "!sorry for screwing up the alignment :disappointed:\n. ",
    "andrepolischuk": "alphabetically or by length of name?\n. "
}