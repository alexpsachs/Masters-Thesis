{
    "alexbbb": "I currently don't use Gradle in any of my projects and I don't have knowledge about this build system. When I use the android-upload-service in my projects I simply add it as an android library and make the manual changes in the manifest as described in https://github.com/alexbbb/android-upload-service/blob/master/README.md and everything works properly.\nIf you have the know-how to generate the Gradle build file, please make a fork and then send me a pull request and I'll merge it :) so other developers like you which use Gradle could use the library more easily. Thank you for your feedback ;)\n. Gradle build file has now been added.\n. Hi, sorry for the delay of my response, but I've been busy in this period. At the moment such feature isn't available in the library, but it could be added. If you want to help, you can fork my project, implement the feature and then send me a pull request, and I'll be glad to include it. If you need help feel free to contact me.\n. Hi, to be able to help you and find out if this behaviour is due to a bug, I need to know some things:\n- Android version on which the problem arises\n- The code that you use to invoke the service (you could send it in private to me)\n- The output log from the receiver\n. This issue has been resolved\n. Hi @eliasnaur and thank you for the pull request! I've checked your commits and I have to say that you've done a really nice job, providing new useful features and improvements to the library! \nI'm only going to add a class with a static method for those who wants to use HTTPS with self signed certificates, cause I've seen that you deleted AllCertificatesTruster class.\n. How large are the files you are trying to upload?\n. Great feedback! So, please try the following temporary patch. If it works I'm going to integrate it in the trunk.\nOpen UploadService.java and paste the following statement:\nconn.setFixedLengthStreamingMode(getTotalBytes(filesToUpload));\nright after:\nsetRequestParameters(requestStream, requestParameters, boundaryBytes);\nafter that clean and build the library, test it again and tell me if it works for you.\n. I've read the docs more carefully, and I think the best would be to use \nconn.setChunkedStreamingMode(0);\nThis way there's not the 2GB upload size limit and the best buffer length will be automatically set.\n. Thank you @derekentringer for reporting the issue and for testing the solution, that I just committed: https://github.com/alexbbb/android-upload-service/commit/f51a5850dce7bc9df716cace9306c1ca7ea2db3e\nUpdate your working copy and you're good to go ;)\n. What are you using on your server side?\n. The code that handles file upload is here: https://github.com/alexbbb/android-upload-service/blob/master/src/com/alexbbb/uploadservice/UploadService.java#L139\nThe \"broken pipe\" happens when you try to write to a connection that has already been closed by the peer. Never experienced such an issue. Check if you're trying to upload bigger size data than the maximum allowed by your server per each request.\n. Closing the issue due to unreproducible condition that leads to the error and lack of feedback\n. Thank you for your contribution! :+1: \n. Please post the entire stack trace and tell me when have you experienced this issue, so I can try to reproduce it.\n. @boygaggoo have you solved your issue?\n. @MarsVard can you please tell me how have you solved the issue or post a link to the commit here? At this moment I don't want to change the project structure, as it may affect projects using this library, mine included\n. Thank you @MarsVard \nThe issue is now fixed!\n. Thank you for your feedback! I've just added UploadService.NAMESPACE configuration, to prevent conflicts (Check the updated Setup info in the README.md). Haven't had time to fully test it. Try it and let me know if it works for you :)\n. It would be nice, but I don't have the time to do it at the moment. If you want to contribute, you can do that :)\n. Hi everybody! I'm switching all my projects to Android Studio. Right now I've seen that it uses jCentral by default instead of Maven Central. I'm considering in migrating the entire library as an Android Studio project and to drop the actual Eclipse project. When I'm done with that, I'm considering also to add the library in jCentral, to be able to include it in your projects by simply writing a line in your gradle build file. I've found this tutorial: https://www.virag.si/2015/01/publishing-gradle-android-library-to-jcenter/\nIf anyone of you has done this process before or has some knowledge about it and wants to give me some hints, I would really appreciate that :)\n. You can use JitPack.io to have gradle and maven dependency management support: https://jitpack.io/#alexbbb/android-upload-service\n. Check your Java Build Path. Take a look here: http://stackoverflow.com/a/16868374\n. @oguzhandongul the feature you requested has been implemented. Please update the library and give it a try :)\nUsage example:\njava\nUploadRequest request = new UploadRequest(this, \"uploadId\", \"http://path/to/server\");\n...\nrequest.setNotificationClickIntent(new Intent(this, YourActivity.class));\n. You can do it simply by calling\njava\nrequest.addFileToUpload(\"/absolute/path/to/your/file\",\n                        \"parameter-name\",\n                        \"custom-file-name.extension\",\n                        \"content-type\"));\nAs shown here: https://github.com/alexbbb/android-upload-service#how-to-start-android-upload-service-to-upload-files\n. Follow the example here: https://github.com/alexbbb/android-upload-service#how-to-monitor-upload-status\njava\n@Override\npublic void onCompleted(String uploadId,\n                        int serverResponseCode,\n                        String serverResponseMessage) {\n    Log.i(TAG, \"Upload with ID \" + uploadId\n               + \" is completed: \" + serverResponseCode\n               + \", \" + serverResponseMessage);\n    //Use a library such as org.json or google gson \n    //to parse JSON from serverResponseMessage string\n}\n. I've made some modifications to read response body from the server: https://github.com/alexbbb/android-upload-service/commit/140bef1b714dad0b6e19d55390c5b9374749ce81\nPlease update the library, try again as I suggested you in the previous comment and let me know what you get in \"serverResponseMessage\"\n. Thank you for your feedback :+1:  and I'm glad that everything works now :)\n. This error happened also to other users in the past, but none of them gave me a log to work with and an exact step-by-step description of how to reproduce the error. I've reproduced the error you described and by applying your solution, the problem is resolved, so I committed your patch: https://github.com/alexbbb/android-upload-service/commit/60ecf221d686b7d1af18ba619b9c19e07735075a\nJust update the library and you're good to go ;)\n. By batch upload you mean an UploadRequest on which you add more than one file (by calling addFileToUpload N times) or you're making N calls to UploadService.startUpload(request) ?\n. Ok, so to keep things simple and transparent to the users of the library, I set connection keep-alive only if there is more than one file to upload, otherwise I set it to connection close. Commit: https://github.com/alexbbb/android-upload-service/commit/9a7b35be68654a94888d228762ed382401d912f2\n. I've refactored the AbstractUploadServiceReceiver to get Context instead of Activity: https://github.com/alexbbb/android-upload-service/commit/313ece8bc032694e0cd70bd70ece4f8d8553e8cc\nPlease update the library and let me know if it works\n. @peterswang glad that the issue is solved. \nWhat do you mean with: \"it seems to handle wireless connection break by reporting an error and terminates the upload\"\n. @peterswang resume upload is not supported by the library at the moment, but it's not a simple thing because it depends also by the server-side. \nNetwork connectivity change handling is purposely left to the app that uses the library, because I decided to let the developer choose what to do in case of upload error is his app.\nHowever, if you have some ideas on how to handle either resume upload and network connectivity change automatically in the library and you want to share some code, I'll be glad to help you :)\n. It seems to me that your problem resides entirely on the server side and\nhas nothing to do with the android upload service. Try to ask the uWSGI\ncommunity and have a look here:\nhttp://leandroardissone.com/post/19690882654/nginx-405-not-allowed\nIl 03/feb/2015 01:54 \"peterswang\" notifications@github.com ha scritto:\n\nHere's the screenshot from Nginx access and error log.\n[image: screen shot 2015-02-02 at 4 51 44 pm]\nhttps://cloud.githubusercontent.com/assets/10738534/6012344/d55399d8-aafb-11e4-9ed1-2656738d604d.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/17#issuecomment-72571389\n.\n. Closing the issue because it's not an android upload service bug\n. Hi @AizazAZ \nSorry for the delay of my response, but I haven't had enough time to properly check the code you submitted until today. Right now, it's hard to merge your pull request as-is, but I've seen some interesting additions you've made, like the overall progress of the operation, the delayed notification progress update to prevent lag and some additions to the broadcast receiver to better monitor single file upload progress. Right now I'm considering to migrate the entire project in Android Studio and to publish it to jCentral. There are already some features that I plan to add, and together with them I'll also add some of your additions. You will be added to the contributors (annotation @author in the source files). I'll let you know which code I've copied from your solution once I'm done. Thank you again for the time you invested on this library!\n. @AizazAZ I've recently read some RFCs regarding standard http multipart form upload. I've seen that you have implemented a mechanism which tells the programmer which files have failed in the multipart request. Based on the server implementations that I have (php and node.js), if the multipart request fails at some point, all the successfully uploaded files which are part of the failed http multipart request gets automatically deleted by the server, so what's the point in notifying the programmer which files have failed, since he has to do the whole multipart request again? What do you think about it? Am I missing something?\n. @AizazAZ \nAdded DotShare in the list of apps which uses the library and just published a new release :)\n\nHave you done anything about the GZIP Compression? Currently the upload service uses android standard HttpUrlConnection, which is the recommended from Google.\nRegarding this pull request, I'm considering to implement the following ideas in the next milestone:\n- single file upload progress\n- delayed notification update\nThe code has changed from the one you used to make the modifications, so the two ideas needs to be re-implemented. If you want to contribute, we can get in touch and plan how to implement them together, so let me know :)\n. Please describe the case in which you get the error in detail, so I can try to reproduce it\n. @mywaystar are you using node.js + express + multer middleware to handle multipart form data?\n. @mywaystar I'll try to replicate this behavior with chunked responses when I have some time. What are you sending to the client as a response? If you can, post here the server side node.js code that you use (without your business logic of course :D)\n. Added example node.js server script: https://github.com/alexbbb/android-upload-service/tree/master/examples/server-nodejs\n. This solves the issue: http://stackoverflow.com/questions/24729329/node-js-disable-chunked-transfer-encoding\n. So you have implemented download capabilities with notification center progress indication, right?\n. In this case I think the best would be to create a separate project, dedicated only to download, called for example android-download-service, so it's smaller, less complex and so easier to maintain, and completely independent from the upload service. If someone needs to make an app which has to manage both upload and download, he will include both libraries. Otherwise only one of the two, without adding extra features that he's not going to use anyway.\nI'm curious to see your code to see how you have implemented it :)\n. Hi @stavarengo, you're not missing anything, because the feature of retrying an upload is not implemented in the library yet, though it would be a nice addition to have!\n. The feature has been implemented. To use it, update the library and add this statement where you set the upload request:\njava\n// set the maximum number of automatic upload retries on error\nrequest.setMaxRetries(2);\n. Are you using Android Studio? \nTry Build > Clean Project \nand then \nBuild > Rebuild Project\n. @idanbar134 does the proposed solution work for you?\n. @venvear and @idanbar134 please open a new issue if you experience a problem rather than posting in existing issues like this, which has nothing in common with your problem and only adds confusion :) Thank you!\n. Right now, to use Upload Service in Android Studio, I've simply imported the source code and the manifest in a new Android library project. I'm considering to migrate the library in android studio and publish it to jCentral. Please check issue #10. I'm closing this issue as the answer given by @foodyi works also for me.\n@aliceresponde I'm using a Mac also, and I think your problem has to do with your java system settings.\n. Please post your code so I can help you\n. I have some remarks to make :D (don't take it personally!):\n- the use of the AsyncTask is totally unnecessary, because Android Upload Service already works entirely in the background, not locking your main UI thread in any way :)\n- the value of responseString will always be null, as you set it only once at the beginning of the method and then you simply return it at the end. To get upload status and the response from the server you have to use the receiver provided with the library (https://github.com/alexbbb/android-upload-service#how-to-monitor-upload-status)\nI invite you to check the example app provided with the library. You can compile it and run it on your device. More specifically, look at how the MainActivity is structured: https://github.com/alexbbb/android-upload-service/blob/master/examples/app/src/com/alexbbb/uploadservice/demo/MainActivity.java\n. From what I see in the stack trace you posted, the problem is that the file /storage/emulated/0/Pictures/Nuro/IMG_20150305_143923.jpg cannot be open (No such file or directory). The problem can be one of those two:\n- you're passing a path to a file or directory which does not exist on the device. Try going to the same path with a file manager app to check if it exists.\n- you have not set the proper permission in your android app manifest to be able to read from internal and external storage (check android docs for that)\nThe next time you post some code, please use markdown to properly format it, because it's hard to read it :)\nHowever, the problem you're encountering is not a bug in Android Upload Service, so I'm closing this ticket because we're going off topic.\nPlease tell me if you solved this issue you opened by applying my suggestion: https://github.com/alexbbb/android-upload-service/issues/22\n. As the exception says:\nCaused by: java.lang.NullPointerException: Attempt to invoke virtual method 'android.app.Application android.app.Activity.getApplication()' on a null object reference\n        at com.nuro.messaging.ChatFragment.sendMessage(ChatFragment.java:479)\n        at com.nuro.messaging.ChatFragment.access$500(ChatFragment.java:63)\n        at com.nuro.messaging.ChatFragment$11.onCompleted(ChatFragment.java:648)\n        at com.alexbbb.uploadservice.AbstractUploadServiceReceiver.onReceive(AbstractUploadServiceReceiver.java:38)\nYou're invoking a method on a null object in your custom implementation of AbstractUploadServiceReceiver's onCompleted method. Debug your code.\n. @idanbar134 keep working like you do :) I suggest you to learn how to read Java Stack Trace, as it's your \"best friend\" to find out what's going wrong in some cases. Sorry to bother you with this ticket you opened: https://github.com/alexbbb/android-upload-service/issues/22 again, but I need to know if you still have the described problem or how you managed to solve it :)\n. Have you tried using one of the example server implementations? \nhttps://github.com/alexbbb/android-upload-service/tree/master/examples\nI don't know what your server architecture is, or if the traffic passes through a proxy before being handled by the server, but never had such an issue and I use the library in production with PHP and Python Twisted servers.\n. @JanithaR have you solved the issue?\n. I seriously discourage removing\nconn.setChunkedStreamingMode(0);\nas it will cause errors when you try to upload big files. Here is the official Android documentation about the method: http://developer.android.com/reference/java/net/HttpURLConnection.html#setChunkedStreamingMode%28int%29\nEven if we are in 2015 now, it's incredible how hard it may get to properly configure such an obvious thing as file upload, because it has to be finely configured both client side and server side. I suggest you to check your VPS server configuration or to remark the lack of this feature to your provider, as it's important.\n. Just to make sure that your configuration is correct:\n- check if you have added all the required permissions to your AndroidManifest.xml (EPIPE happens often as a result of missing permissions)\n- check that you are using the latest version of android-upload-service (open a terminal, navigate to the folder where you have cloned the git repo and execute: git pull)\n- check that the URL on which you are making the http/multipart request is reachable\nAfter that, please try an upload again and let me know if you have solved the problem\n. @Android33 can you provide a test case and tell me which web server are you using?\n. I've experienced this problem while trying to upload large files which exceeds maximum POST data length set on server. The multipart header that Android Upload Service sends does not specify a \"Content-Length\", so the server could not validate and refuse the request in advance. What happens is that at some point, when the maximum post data is reached, the server closes the stream, and the \"Broken pipe\" arises on the client side. This is the same behavior described in RFC 1867 on paragraph 5.2: https://www.ietf.org/rfc/rfc1867.txt\nTo try to solve this issue, I made this commit: https://github.com/alexbbb/android-upload-service/commit/50a83a361c1e0ab8bfac4c976c9fdaf36b925e43 which adds the total content length of the request in the headers. I encourage everyone who uses the library to update to the latest commit, make some tests and report any errors here.\n. The current master at the time of this writing: https://github.com/alexbbb/android-upload-service/commit/b65b6ccc7ac8d5a708b53c79f0af5e27202001cc works for me after the modifications, in all the test cases using PHP server and node.js server backends\n. 500 Internal Server Error means that there's something wrong on the server\nside. Please check your server code and also try one of the server examples\nI provided with the library.\nIl 14/lug/2015 05:50 AM, \"shoebhoney\" notifications@github.com ha scritto:\n\nHi\uff0cAlex\uff0cI am getting an Error, Could not parse multipart and server code\n500\ni am sending two files with different params names.\nUploadRequest request = new UploadRequest(this,\nUUID.randomUUID().toString(), erverUrlString);\nrequest.addFileToUpload(fileToUploadPath_1, paramNameString1, \"1.jpg\",\nContentType.APPLICATION_OCTET_STREAM);\nrequest.addFileToUpload(fileToUploadPath_2, paramNameString2, \"2.jpg\",\nContentType.APPLICATION_OCTET_STREAM);\nUploadService.startUpload(request);\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/28#issuecomment-121125799\n.\n. @shoebhoney Never experienced such issue with the progress bar. Do you have the same problem even after you have solved you server-side issues?\n. @ravenet thank you for your feedback\nBefore you start the upload request, save a reference to the upload request object somewhere. In the broadcast receiver, when you receive an error, you can retry the upload by simply calling the startUpload method again on the upload request object.\n\nPlease explain me what do you mean with: \"it is sending more empty bytes instead of remaining bytes when buffer size less than remaining data\". An example with some code would be useful for me to understand and address this issue. Thank you!\n. @ravenet made some changes to the transfer logic and added also automatic retries. Give it a try :) \nIf you have some problems, please open a new issue :)\n. Of course! Just fork the project, male your own additions and then send me\na pull request ;)\nIl 23/lug/2015 06:37 AM, \"Tea Times App\" notifications@github.com ha\nscritto:\n\nDear Alex,\nExcellent and I would to like to add features to this lib. Will you allow\nme to do so?\nThanks\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/30#issuecomment-123960692\n.\n. Akamai servers does not support HTTP/1.1?\nDisabling chunked mode can cause serious issues when uploading big files.\n\nPlease check this:\nhttp://developer.android.com/reference/java/net/HttpURLConnection.html#setChunkedStreamingMode%28int%29\nDo you have any suggestions?\n. @alphamu Do you know if there is a documentation from akamai, explaining how they expect the multipart form upload? It would be useful to improve the library and make it work seamlessly with akamai servers\n. Maybe the problem could be solved by setting the global \"Content-Length\" header (parameters + files)  in the root of the Multipart HTTP request before starting the upload.\nI've seen that nginx complains if that header is not present, and that could be also your case.\n. @alphamu Committed some changes to try to solve this issue. I haven't had time to test it, so please update the library in your projects and let me know if it works in your development and production scenarios. Thank you :)\n. @alphamu Checked your exception stack trace. The error you described has nothing to do with the recent changes I've made. The library internally has always used string paths. You have to specify the full absolute paths to the files you want to upload. From what I see, I think you have provided a wrong file path in the \"addFileToUpload\" method, resulting in the \"FileNotFoundException\". Please check the paths you provide. This doesn't seem to be an issue of the library.\n. @alphamu Try this way to obtain an absolute path from an URI:\njava\nString absolutePath = new File(uri).getCanonicalPath();\n. @alphamu I've seen the logs. I suggest you to filter logcat output to only get your app log messages.\nMade some other modifications. Please update the library sources, try again and let me know :)\n. @alphamu Any news?\n. Thank you for testing and I'm glad that it's working! In the library I've\ndefinitely switched from chunked mode to fixed size mode, so the server\nknows in advance the total upload length.\nIl 19/ago/2015 04:58 AM, \"Ali Muzaffar\" notifications@github.com ha\nscritto:\n\nHey Alex,\nGood news, whatever the last change was, it seems to have fixed it!\nJust be warned that they could have changed something on the server side\nin all this time but my image uploads are succeeding! Good job! I think you\nmay be the first library who can claim to work with Akamai!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/31#issuecomment-132428608\n.\n. This issue is a duplicate of #27 \nI'm closing it. Please refer to the other one\n. Save the ByteArray to a file on the device, then add the full path to the\nfile to the request.\n\n2015-07-14 9:43 GMT+02:00 shoebhoney notifications@github.com:\n\nHello Alex,\nI am uploading a Video to server as file, my need is to upload the\nthumbnail image of that video. So how can i do this in your library.\nMy server end developer need ByteArrayBody, so please tell me how to pass\nByteArrayBody?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/33.\n. ;)\n. From my tests, by using the latest commit available today: https://jitpack.io/#alexbbb/android-upload-service/9d589d2df4\nthe problem is not arising anymore, after the changes I've made to the gradle build file.\n. At the moment, you can set a high retry value (e.g. 100). If you want to\nretry when internet is available, is up to you to implement it to suit your\nneeds. Usually this is done by implementing a broadcast listener which\nlistens to internet connectivity change (check official Android docs).\nThen, in the listener implementation, you can start the upload as shown in\nthe examples.\nIl 05/ago/2015 11:57 PM, \"lefkatis\" notifications@github.com ha scritto:\nCan I choose to make the service retry until it sends the data\nsuccessfully?\nDoes it provide listeners for connectivity so as it would try to send the\nrequest when internet is available?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/35.\n. @exuvo Thank you for your contribution! Nice work :)\n. This signals the same issue as #34 except it refers to version 1.2\n. I suggest you to use this: http://commons.apache.org/proper/commons-fileupload/\n. Do you mean the possibility to upload several files in a single upload\nrequest?\nIl 19/ago/2015 05:43 AM, \"Alex Salgado\" notifications@github.com ha\nscritto:\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/39.\n. To upload multiple files in a single request, check the provided example: https://github.com/alexbbb/android-upload-service#how-to-start-android-upload-service-to-upload-files\n\nand simply make N calls to request.addFileToUpload for each one of the files you want to add to the upload request.\nOnce you start the upload, you will see the overall upload progress in the notification.\nBut, I suggest you to start N separate upload requests if you have so many files, so you can leverage on the automatic upload retry for each file and you have more control on the upload process. If you issue multiple upload requests, they are scheduled one after the another without you having to do anything.\n. From what I see in your code, I suggest you to try to make N upload requests, one for each one of the video files you want to upload:\n``` java\nwhile (!videos.isEmpty() && cont<=numVideos) {\n    UploadRequest request = new UploadRequest(this, UUID.randomUUID().toString(), serverUrlString);\n//setup the request and add the video file\n\ntry {\n    UploadService.startUpload(request);\n} catch (Exception exc) {\n    Toast.makeText(this, \"Malformed upload request. \" + exc.getLocalizedMessage(), Toast.LENGTH_SHORT).show();\n}\n\n}\n```\n. @patelanil2007 \nyou can't, the upload service handles only one upload request at a time\n. You have to add the following permission to your app's manifest:\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\nand then you can delete the uploaded file from the AbstractUploadServiceReceiver's onCompleted method. You have to keep a reference to the uploded file paths. One simple way is to create a HashMap with uploadID's as keys and full file paths as values. I suggest you to check this post regarding file delete: http://stackoverflow.com/questions/1248292/how-to-delete-a-file-from-sd-card\nHowever, I don't intend to implement such a feature at the moment, because it's beyond the scope of the library to make modifications on the file system. It's up to your app's specific logic to do that. Feel free to fork the project and add this feature if you need it :)\n. Exactly what gradle suggests in the error log you sent to me.\nAdd:\ntools:replace=\"android:theme\"\nin your app manifest's application tag.\n. Googling around for this kind of problems is always useful :)\nhttp://stackoverflow.com/questions/29756188/java-finished-with-non-zero-exit-value-2-android-gradle\n. Made a little change to the library manifest in the last commit, so you don't need to add the tools:replace directive in your app's manifest. You can try it out in your gradle build file:\ndependencies {\n    compile 'com.github.alexbbb:android-upload-service:51cfe3d32d'\n}\n. Check #41 \n. Have you followed the setup instructions in the readme after that you've\nset the gradle dependency?\nIl 30/ago/2015 09:21 AM, \"linkindrew\" notifications@github.com ha scritto:\n\ndependencies {\ncompile 'com.github.alexbbb:android-upload-service:51cfe3d32d'\n}\nEliminated the Gradle sync. error i mentioned above , now error is\noccuring on RUN :\nError:Execution failed for task ':app:dexDebug'.\ncom.android.ide.common.process.ProcessException:\norg.gradle.process.internal.ExecException: Process 'command\n'/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/bin/java''\nfinished with non-zero exit value 2\nsame i guess , i tried commenting\ncompile fileTree(dir: 'libs', include: ['*.jar'])\nbut nothing\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/42#issuecomment-136094554\n.\n. There was an error in the demo application's gradle build file. \nMade a commit to fix it: https://github.com/alexbbb/android-upload-service/commit/247ce33bfb5399d80eb253128c36ca131b769e4f\nPlease update your local source files to the latest commit and try again\n. I seem to have found what caused the issue! When you include different versions of some dependency libraries (in this case android-support-v4.jar) it fails to run. Made another commit: https://github.com/alexbbb/android-upload-service/commit/e257d727bb0a46cc7487c0c2534a7ee9138bd950\nPlease update your sources and retry :)\n. Thank you, too :+1: \nMade the minor release 1.3.1: https://github.com/alexbbb/android-upload-service/releases\n. @PanayotCankov just checked carefully the modifications that you've introduced!\nNow it will be easier to add support for more upload types and you've also solved the notification throttling issue. Great job :+1: \n\nCould you also provide a basic server side implementation which handles the binary upload task? I'd like to add it to the server side example implementations, so it will be easier for the new ones to get started and also for testing.\n. The parameter name is the name with which you retrieve the uploaded file on\nyour server. You can't omit that, otherwise how are you going to retrieve\nthe file on the server? You can introduce a constant in your app for\nexample, if the parameter name is always the same on your server. Check the\nprovided PHP server side code with this library, in which I've set the\nparameter name to always be \"uploaded_file\"\nIl 04/set/2015 04:50 PM, \"kcochibili\" notifications@github.com ha scritto:\n\nHello, I am using an external library which provides me with this object:\npackage com.baasbox.android.net;\nimport java.io.InputStream;\nimport java.util.Map;\n/*\n- Reifies an http request.\n- Created by eto on 23/12/13.\n  /\n  public class HttpRequest {\n  // ------------------------------ FIELDS ------------------------------\npublic static final int GET = 1;\n  public static final int POST = 2;\n  public static final int PUT = 3;\n  public static final int DELETE = 4;\n  public static final int PATCH = 5;\npublic final int method;\n  public final String url;\n  public final Map headers;\n  public File body;\n// --------------------------- CONSTRUCTORS ---------------------------\n    public HttpRequest(int method, String url, Map headers, File body) {\n        this.method = method;\n        this.url = url;\n        this.headers = headers;\n        this.body = body;\n    }\n// ------------------------ CANONICAL METHODS ------------------------\n```\n@Override\npublic String toString() {\n    StringBuilder sb = new StringBuilder(\"{url ->\" + url + \" method: \" + methodToString(method) + \", headers ->{\");\n    for (Map.Entry header : headers.entrySet()) {\n        sb.append(header.getKey() + \":\" + header.getValue());\n    }\n    sb.append(\"}}\");\nreturn sb.toString();\n\n}\nprivate static String methodToString(int method) {\n    String methodName;\n    switch (method) {\n        case GET:\n            methodName = \"GET\";\n            break;\n        case POST:\n            methodName =  \"POST\";\n            break;\n        case PUT:\n            methodName = \"PUT\";\n            break;\n        case DELETE:\n            methodName = \"DELETE\";\n            break;\n        case PATCH:\n            methodName = \"PATCH\";\n            break;\n        default:\n            throw new IllegalArgumentException(\"Invalid http method identifier\");\n    }\n    return methodName;\n}\n```\n}\nMy question is: how can i omit the \"parameter-name\" below when adding a\nfile to be uploaded by your library?\nrequest.addFileToUpload(\"/absolute/path/to/your/file\",\n                            \"parameter-name\",\n                            \"custom-file-name.extension\",\n                            \"content-type\"));\nI just wanna provide the url headers and file(body) because thats all i\nhave.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/44.\n. From what I see here: http://www.baasbox.com/documentation/?shell#upload-a-file\nit's a standard http/multipart request, and you can implement the upload of this kind in your app without even modifying the library, nor dealing with the BaasBox SDK objects that you described in the previous post. \nI would do something similar to this:\n\n``` java\nString uploadID = UUID.randomUUID().toString();\nUploadRequest request = new UploadRequest(context, uploadID, \"http://your_baas_server/file\");\nrequest.addHeader(\"X-BB-SESSION\", \"your baas session token\");\nrequest.addFileToUpload(\"/absolute/path/to/your/file\", \"file\", \"file\",\n                            ContentType.APPLICATION_OCTET_STREAM)\n//you can use a fixed content type \n//or you can get it with this Java 7 method: http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#probeContentType%28java.nio.file.Path%29\n//configure the notification\nrequest.setNotificationConfig(android.R.drawable.ic_menu_upload,\n                                  \"notification title\",\n                                  \"upload in progress text\",\n                                  \"upload completed successfully text\"\n                                  \"upload error text\",\n                                  false);\ntry {\n    //Start upload service and display the notification\n    UploadService.startUpload(request);\n} catch (Exception exc) {\n    //You will end up here only if you pass an incomplete UploadRequest\n    Log.e(\"AndroidUploadService\", exc.getLocalizedMessage(), exc);\n}\n```\n. This is already supported by the library in the latest master revision.\nhttps://jitpack.io/#alexbbb/android-upload-service/314e4c8dcb \nTry this:\n``` java\nString uploadID = UUID.randomUUID().toString();\nfinal BinaryUploadRequest request = new BinaryUploadRequest(context, uploadID, \"http://yourserver.com/upload-script\");\n//You can add your own custom headers\nrequest.addHeader(\"your-custom-header\", \"your-custom-value\");\nrequest.setFileToUpload(\"/absolute/path/to/file\");\n//configure the notification\nrequest.setNotificationConfig(android.R.drawable.ic_menu_upload,\n                              \"notification title\",\n                              \"upload in progress text\",\n                              \"upload completed successfully text\"\n                              \"upload error text\",\n                              false);\ntry {\n    //Start upload service and display the notification\n    request.startUpload();\n} catch (Exception exc) {\n    //You will end up here only if you pass an incomplete UploadRequest\n    Log.e(\"AndroidUploadService\", exc.getLocalizedMessage(), exc);\n}\n```\n. The server response string that you get in the broadcast receiver is generated by this method: https://github.com/alexbbb/android-upload-service/blob/master/src/com/alexbbb/uploadservice/HttpUploadTask.java#L212\nMade a little modification and now it should add new lines received from server. Please give it a try :)\nhttps://jitpack.io/#alexbbb/android-upload-service/d4a7a3baaf\n. Feel free to implement it and then send me a pull request :)\nIl 09/set/2015 08:53 AM, \"kingston\" notifications@github.com ha scritto:\n\nHi,\nOption to enable Ringtone after completes upload.\nThanks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/47.\n. Merged pull request #48 \n. Checked your code and everything seems ok :+1:\nHave you already made some tests?\n. @PanayotCankov there's no release schedule, my policy is to release a new version when it's stable and well documented\n. @PanayotCankov I'll take care of README.md update with binary upload example and a link to nativescript-background-http\n. Thank you for the pull request! Merged and done some modifications in the README.md\nI'll soon test everything and release version 1.4\n. version 1.4 just released :)\n. It would be a nice addition to have. Do you want to contribute by helping implementing it?\n. Great! Feel free to fork the project and implement all the things you need for multithreaded upload, then send me a pull request\n. feature added by merging pull request #69 \n. 2.0 with multi thread upload support is now released!\n. Have you added this to your top-level gradle build file?\n\nallprojects {\n    repositories {\n        jcenter()\n        mavenCentral()\n        maven { url \"https://jitpack.io\" }\n    }\n}\nIf it doesn't work, then clone the project to your computer, open the example app project and check if you can build and run it. \n. The library has just been added to jcenter repository. Please check updated dependency instructions here: https://github.com/alexbbb/android-upload-service#setup\n. To make a Multipart HTTP Request, you have to add at least one file. Your server needs only two strings (the base64 encoded image and a token) so a standard POST request is all you need. Currently is not supported by Android Upload Service, but you can fork the project and extend it to add such feature.\n. Just to be precise, this is not an issue, it's a feature request :) \nAs I've explained in my previous post, if you are going to upload an image by converting it in base64 (which you can easily do in your Java code) and then passing it as a request parameter, that's not a Multipart HTTP Request, since there's no file to send, but only two string parameters: the base64 encoded image and the token. For that, all you need is a standard POST request and there are certainly better solutions than my library: Android Volley, OkHTTP, Android Async HTTP, to name a few. \nBear in mind that uploading images in this way is bandwidth inefficient, since base64 encoding makes file sizes roughly 33% larger than their original binary representations, and that's not a good thing especially on mobile networks. You may find this article interesting: http://davidbcalhoun.com/2011/when-to-base64-encode-images-and-when-not-to/\nIMHO it would be much better to use a standard HTTP/Multipart request which in your specific case has one file (the image) and one parameter (the token) and change the server-side accordingly. You will have the added benefit that your server will need less processing time and CPU than when you use base64.\nIf you can't change your server side or you want to do your request with Android Upload Service, without using other libraries, here are some directions that you may find useful to implement what you need:\n- Create a new class by extending the base HttpUploadRequest class. That's needed to build the request. Check how MultipartUploadRequest and BinaryUploadRequest are made to get an idea\n- Create a new class by extending MultipartUploadTask. That will contain the logic with which the data will be transferred to the server. The task is called in the background. Check the existing tasks to get an idea of how the things works.\n- Write the needed code in UploadService class to add support for your newly created classes\n. Please post the code you use to create the request and a dump from Charles\n. This is strange. Your code seems correct to me, but you use the old upload API. Please do uploads like this: https://github.com/alexbbb/android-upload-service#http-multipart-upload-example \nWhat version of the library are you using? I've tried to replicate the problem you described, but with no luck. In my tests the boundary gets correctly passed in the Content-Type header.\nI'll explain how I made my tests on OS X. I don't use proxy tools like Charles, 'cause I prefer the good old combination of tcpdump and wireshark to analyze what's happening on the network.\n1. Open a terminal. Create a new folder somewhere in your local filesystem and enter into it: \n   mkdir test && cd test\n2. Checkout the latest library sources: \n   git clone https://github.com/alexbbb/android-upload-service\n3. navigate to examples/server-nodejs and then execute: \n   npm install; npm start \n   This will start the test HTTP Multipart server (you need node.js. If you don't have it, follow this guide: https://github.com/nodejs/node-v0.x-archive/wiki/installing-node.js-via-package-manager)\n4. Open up another terminal and start a tcpdump on your network interface (in my case is called en0):\n   cd && sudo tcpdump -i en0 -w test.pcap\n5. With Android Studio, open the example app (situated in examples/app), compile it and make it run on your android device\n6. By using a file explorer tool like ES File Explorer, get the full path of a file on your device. In ES File Explorer this is done by selecting the file, then opening \"properties\" and then tapping on \"copy full path\".\n7. Go back to Upload Service Demo App and fill in the fields as follows:\n   Server script URL: http://YOUR_LOCAL_IP:3000/upload/multipart\n   Path of the file to upload: paste the URL got from ES File Explorer\n   File parameter name: test\n   Then tap on Multi-Part Upload\n8. If everything was setup correctly and you don't have any networking or firewalling issues between your android device and your computer, you will see the success upload notification, and the following output in the server console window:\nStarted multipart upload of: test\n   Finished multipart upload of: test to: uploads/test\n9. Stop tcpdump by hitting CTRL+C and then open the pcap file in wireshark. You will see the following:\n   \nPlease make a test and let me know :)\n. @kuronaru any news?\n. Based on further testing with the latest release, the boundary gets always passed, so I've marked this as invalid and I'm closing the issue.\n. Nice suggestion, thank you :+1: \n. Thank you @YoungjaeKim :+1: \n. In the projects where I use the library, I needed also to associate\nadditional data to upload requests, but instead of carrying around extra\ndata in and out of the service, which personally I think it's not a good\npractice, I just made a class with static methods to set and retrieve\nadditional data based on the UploadID. Maybe you need the same thing, too.\nIl 23/nov/2015 08:07 PM, \"YoungjaeKim\" notifications@github.com ha\nscritto:\n\nI'd like to remove files after upload. For that, it would be good to put\nvalues before start the service and to get them at the handler afterwards.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/58.\n. @YoungjaeKim you set the UploadID in the constructor of the upload request. It can be whatever string you like. Usually I use UUID4 so I'm sure every UploadID is unique. Check the example: https://github.com/alexbbb/android-upload-service#http-multipart-upload-example\n\nfinal MultipartUploadRequest request = \n                        new MultipartUploadRequest(context,\n                                                   \"custom-upload-id\",\n                                                   \"http://www.yoursite.com/yourscript\");\n. You want to make the notification to disappear automatically if the upload\nhas been completed without errors, or when the user taps on it?\nIl 24/nov/2015 07:22 AM, \"Clau Yagyagan\" notifications@github.com ha\nscritto:\n\nCan we implment onNotificationClick\nnotification.flags |= Notification.FLAG_AUTO_CANCEL;\nor Notification.Builder.setAutoCancel(true)?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/59.\n. It's possible to add a configuration option to make the notification\ndisappear automatically when the upload has been completed and when the\nuser taps on it to open the associated intent.\nIl 24/nov/2015 07:50 AM, \"Clau Yagyagan\" notifications@github.com ha\nscritto:\nwhen the user taps on it coz it's still there whenever it's completed or\nwhen the user go back to the given intent\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/59#issuecomment-159171839\n.\n. Implemented the new feature! Update your project dependencies to use release 1.5:\n\ndependencies {\n    compile 'com.alexbbb:uploadservice:1.5'\n}\nthen, when you configure the notification settings in your code, you can set the auto clear flag when the user taps on it\njava\n//configure the notification\n//the last two boolean parameters sets:\n// - whether or not to auto clear the notification after a successful upload\n// - whether or not to clear the notification after the user taps on it\nrequest.setNotificationConfig(android.R.drawable.ic_menu_upload,\n                              \"notification title\",\n                              \"upload in progress text\",\n                              \"upload completed successfully text\",\n                              \"upload error text\",\n                              false, true);\n. You have two scenarios:\n1. The request to the server is successful, but something wrong happens in\nthe server\n2. The request to the server is not successful, and so you have something\nthat goes wrong on the client side.\nBoth scenarios are handled by using the BroadcastReceiver event handlers\n(check README). You handle the first one by checking the server response\ncode in the onCompleted method, and the second one in the onError method,\nwhere you get the Exception which caused the error.\nIl 28/nov/2015 12:53 PM, \"DjHacktor\" notifications@github.com ha scritto:\n\nIs there a pay to handle exception other than bad request in\nMultipartUploadRequest\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/60.\n. You have to handle that before adding the file in the upload request. Check the provided example app sources to see how I've done that: https://github.com/alexbbb/android-upload-service/blob/master/examples/app/app/src/main/java/com/alexbbb/uploadservicedemo/MainActivity.java#L158\n. If you want to contribute by adding this feature, you can fork the project and then send me a pull request :)\n. This is a feature implemented in 1.6. Check release notes and updated demo app.\n. Please explain what you need to do and why you need to call that method\n. @Babar-Bashir I can't help you with the information you provided. Please post the code you use to create the request, together with the LogCat output you get from the library. If you can do a tcpdump on your PC it would be the best thing to debug such scenarios. Before doing that:\n- Are you sure that you are contacting the correct path on your server?\n- Are there any firewalls in between which may block the traffic? E.g. the integrated firewall on your PC..\n- Which Android API version are you using?\n. Closing this this ticket as there's no response or evidence of a bug in the library.\n. @Isaackingston your analysis is correct. I upgraded all the library dependencies to the latest available versions, and I'm using appcompat 23.1.1: https://github.com/alexbbb/android-upload-service/blob/master/uploadservice/build.gradle#L32\n. Use this method.\n. Yes, you can. The maximum limit is set on your server. Check your server docs to see how to properly set it. On Android you have 2Gb file size limit if you use Android API < 19. If you use Android API >= 19, you don't have that limit ( http://developer.android.com/reference/java/net/HttpURLConnection.html#setFixedLengthStreamingMode%28int%29 ). That's due to the use of the fixed length streaming mode, which ensures maximum compatibility with every HTTP server out there.\n. Please post also what kind of errors you're getting. The code seems ok, but the error you are encountering is not clear.\n. @firaskudsy if your code on server and client is exacly the same as you posted:\n\n.addFileToUpload(Environment.getExternalStorageDirectory().getAbsolutePath() + \"/file2.mp4\", \"your-param-name\")\nthen you are uploading the file with parameter name: your-param-name. In the server side, the PHP script expects the file with parameter name uploaded_file and that's the exact cause of why you're not getting the file on your server side.\n. The answer to how to disable notification is in the JavaDocs (MultipartUploadRequest class), which I encourage you to read to discover all the functionalities and customizations provided by the library.\nTo delete the file after upload is completed, add your code in onCompleted method of your UploadServiceBroadcastReceiver subclass: https://github.com/alexbbb/android-upload-service#monitoring-upload-status\nJust a note:\n.addHeader(\"your-custom-header-name\", \"your-custom-value\")\n.addParameter(\"your-param-name\", \"your-param-value\")\nare there only to let you know that you can add headers and parameters to the request you make to the server. If you don't need them, simply drop them in your code.\n. That's an error which does not depend on the library...\n- have you added permission android.permission.WRITE_EXTERNAL_STORAGE in your app's manifest?\n- have you registered the uploadReceiver in your activity's onResume method, like shown in the example?\n- where is currentDateandTime variable declared? Which value does it have in the method where you use it?\n- where currentDateandTime value is set?\nAlso, try using:\nYourActivity.this.getContext().deleteFile(\"absolute/path/to/file\");\n. If you're using it inside a Service, then you have to call:\nuploadReceiver.register(this);\ninside your service's onCreate method, before starting the upload request, and you have to call:\nuploadReceiver.unregister(this);\ninside your service's onDestroy method.\nYou can use the deleteFile method like this:\ngetContext().deleteFile(\"absolute/path/to/file\");\n. Please post your service code\n. Now it's clear why it's not working :) That's not an Android Service, as you told me, but a BroadcastReceiver! You can't register an UploadServiceBroadcastReceiver (which is a subclass of BroadcastReceiver) inside another one, and you shouldn't try to do it! That's not the way to do it in Android. The subclass you created is not registered anywhere and so no one of the listener methods are called, and your file never gets deleted.\nFrom what I see, you have an event that's created somewhere and you want to do some action when that event occurs. The code inside your onReceive seems ok. \nIn your case, you have to completely remove the UploadServiceBroadcastReceiver from here and instead create a new class which extends UploadServiceBroadcastReceiver:\n``` java\npublic class UploadReceiver extends UploadServiceBroadcastReceiver {\n    private static final String TAG = \"OneSignalExample\";\n@Override\npublic void onProgress(String uploadId, int progress) {\n    Log.i(TAG, \"The progress of the upload with ID \"\n            + uploadId + \" is: \" + progress);\n}\n\n@Override\npublic void onProgress(final String uploadId,\n                       final long uploadedBytes,\n                       final long totalBytes) {\n    Log.i(TAG, \"Upload with ID \" + uploadId +\n            \" uploaded bytes: \" + uploadedBytes\n            + \", total: \" + totalBytes);\n}\n\n@Override\npublic void onError(String uploadId, Exception exception) {\n    Log.e(TAG, \"Error in upload with ID: \" + uploadId + \". \"\n            + exception.getLocalizedMessage(), exception);\n}\n\n@Override\npublic void onCompleted(String uploadId,\n                        int serverResponseCode,\n                        String serverResponseMessage) {\n    Log.i(TAG, \"Upload with ID \" + uploadId\n            + \" has been completed with HTTP \" + serverResponseCode\n            + \". Response from server: \" + serverResponseMessage);\n\n    //code to delete the file\n}\n\n}\n```\nThen you have two choices:\n- register the class as a broadcast receiver in your app's manifest, with the proper intent filter:\nYOUR_APP_NAMESPACE.uploadservice.action.upload\n- create a new instance of the broadcast receiver inside your app's subclass and register it there, using the register method:\n``` java\npublic class Initializer extends Application {\nprivate UploadReceiver uploadReceiver;\n\n@Override\npublic void onCreate() {\n    super.onCreate();\n\n    // setup the broadcast action namespace string which will\n    // be used to notify upload status.\n    // Gradle automatically generates proper variable as below.\n    UploadService.NAMESPACE = BuildConfig.APPLICATION_ID;\n    // Or, you can define it manually.\n    UploadService.NAMESPACE = \"com.yourcompany.yourapp\";\n\n    uploadReceiver = new UploadReceiver();\n    uploadReceiver.register(this);\n}\n\n}\n```\nYou have also to save the file name somewhere before calling the upload service on your onReceive, so you know which file to delete in the onCompleted method. You can do that for example by saving the value in a SharedPreference, but that's up to you :)\n. Have you registered the Initializer class in the app's Manifest?\n. ;)\n. Hi. As I've stated in my last comment in https://github.com/alexbbb/android-upload-service/issues/54 you can't use MultipartUploadRequest for what you are trying to achieve, because for a request to be a HTTP/Multipart, it needs at least one file, but you have only parameters. What you need is to extend base class libraries (refer to my comment in #54) to be able to make a standard HTTP POST request. Feel free to fork the project and implement what you need :)\n. Hi! I've given a quick look to your code and you've done a great job :+1:! Thank you for the pull request! I'm going to test it and look at the modifications in detail in the following days, 'cause I'm really busy at work in this period. If I have some questions I'll post them here, so we can discuss about them and go forward into merging the pull request in the master branch.\n. @mabdurrahman Also, after a bit of reasoning about the current code, I was thinking that it would be better to move these methods:\n- createNotification\n- updateNotificationProgress\n- updateNotificationCompleted\n- updateNotificationError\n- updateNotificationCancelled\n- setRingtone\n- broadcastProgress\n- broadcastCompleted\n- broadcastError\n- broadcastCancelled\nfrom UploadService class to HttpUploadTask class, which is the base class from which all the upload tasks inherit. I thought about this because now that the model has changed from \"a single task in time\" to \"multiple concurrent tasks in time\", to me it's more evident that every task should be responsible for managing the life cycle of its notification and broadcast status updates, instead of calling synchronized methods (which are a concurrency performance hit) in the service class to accomplish that. Each task will then have to call only a method to notify the service that has finished its execution (either successfully, with an error or due to cancellation), so we can safely manage the release of the wake lock after that all the tasks have finished.\nAs always, I'm open to discussion, ideas and other proposals :)\n. Just created a new branch by forking the current master. The first thing I've done is the refactoring which I've talked you about: https://github.com/alexbbb/android-upload-service/commit/77d5f2089a353f1eeef66aa20e467781e2ffa84e so you can see the code resulting from my idea. The UploadService class acts like a factory for new tasks and is responsible only to acquire and release the wake lock.\n. @mabdurrahman Just to recap..in the new branch that I created, I've reported all your ideas pushed with your following commits: https://github.com/mabdurrahman/android-upload-service/commit/b7647233a753b610c7e5378c63393dc09c786f6f and https://github.com/mabdurrahman/android-upload-service/commit/e8dadbc48369ca0596202a8ed55c6addd9a37957, together with:\n- the considerations we've made in the comments, \n- the refactoring with which all the code to manage the notification and the broadcasting of the progress status has been moved into HttpUploadTask class, to avoid concurrency slowdowns and race conditions.\n- some improvements to be sure that the wake lock is released and service is shut down after that all the tasks are completed\n- additional @author mabdurrahman tag in the files which you have modified\nFor now I've left the immediate task cancelling out of the modifications, because in some test cases, the cancelled broadcast was done twice, and that's not desirable. I have to make some more tests about this.\nWhat it's left are the modifications in the demo app, which you have done in https://github.com/mabdurrahman/android-upload-service/commit/95eba8ffe20523972e321291d5597329abbe2e1a and https://github.com/mabdurrahman/android-upload-service/commit/47e519b0a1205094c50f0bf38f4662c63725f823. Except that test string which has to be removed, all the rest is ok, so to proceed with the merging of the pull request, I think that we can proceed this way:\n- pull the multiupload branch\n- merge only your demo app modifications into it, without the following two commits: https://github.com/mabdurrahman/android-upload-service/commit/b7647233a753b610c7e5378c63393dc09c786f6f and https://github.com/mabdurrahman/android-upload-service/commit/e8dadbc48369ca0596202a8ed55c6addd9a37957\n- update this pull request\nAfter that, I'm going to merge your pull request into the multiupload branch, update the docs and merge everything into the master branch.\n. @mabdurrahman that's funny, 'cause we were thinking the same exact things!  In the latest commit I made the service foreground mode configurable, leaving it enabled by default and implementing your idea in the multiupload branch. This way it's now possible to configure if the service will go foreground when executing upload tasks. I've made some tests and it seems that everything is working as expected. Look at the code, give it a try and let me know if in your opinion I've missed something, so we could fix it. You can go ahead and merge your modifications into multiupload branch.\n. @mabdurrahman perfect :)\n. @mabdurrahman Made some tests and everything is working fine! Great job, thank you!\n. Please check this: https://github.com/alexbbb/android-upload-service#before-asking-for-help\nIf you use PHP for your server side, you generally have this behaviour when the data you want to upload exceeds  the values of upload_max_filesize or post_max_size set in php.ini.\n. The code you posted is ok, except this statement:\njava\n.addFileToUpload(path, \"profile_img\",\"test\",\"multipart/form\")\nbecause multipart/form is not a valid content type for a file. Check the addFileToUpload method JavaDoc.\nAfter fixing that, check your server-side, because I think the problem is there. From the stack trace you posted, you can see that the error originated here:\ncom.alexbbb.uploadservice.HttpUploadTask.writeStream(HttpUploadTask.java:240)\nThis happens when the server closes the connection before the request is completed, and so you get that exception. I suggest you to checkout the project sources and try the node.js server example with your android app. You can get it up and running in a matter of minutes. Let me know if the same exception occurs by using the demo server.\n. @priyochatterjee08 have you tries the demo server or resolved your server side issue?\n. Do not explicitly set it, by passing null, or use Java 7's\nFiles.probeContentType(path).\nIl 13 gen 2016 2:19 PM, \"Priyabrata Chatterjee\" notifications@github.com\nha scritto:\n\nHow do I know the content type in advance like whether it would be jpeg or\npng or pdf? My server is fine because I can upload the file through\nretrofit.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/70#issuecomment-171287527\n.\n. @priyochatterjee08 could you please post an example of how you do the upload with retrofit and with which version? I'm going to try that out with my server and dump the request to see what's the difference. Maybe I'm doing something wrong in the multipart request. Your question about the content type setting made me look in detail in the code, and I've found that actually in release 1.6 if you don't explicitly set the content type (by passing null), application/octet-stream is used by default. I've improved that in #77 and it will be included in the 2.0 release.\n. Thank you. I will try it as soon as I can. Made some improvements in connection setup in the new 2.0, which I've just released. If you want you can try it out.\n. Please show me the code with which you get the response from the server. The code to create the request is ok.\n. Can't reproduce your issue. I've used the example node.js demo server and the demo android app and I can correctly see the serverResponseMessage string in the onCompleted listener. \nI encourage you to checkout the sources and try the demo node.js server yourself with your app. Follow the instructions in the readme and in the command line. By default the server responds with the string Upload Ok! in the response body, but you can change that by editing this line to make your tests. Let me know :)\n. @juanmc2005 have you tried the proposed test or resolved your server side issue?\n. Your issue made me revisit the library's code to try to understand why it won't work in your scenario. I've found that currently version 1.6 supports only string based server body responses, terminated with a new line. If for some reason the response is not in UTF-8 or does not contain a new line at the end, you will end up with the empty serverResponseMessage string. I've fixed that in #76 and it will be available in the upcoming 2.0 release. Just wanted to let you know about that.\n. Just released 2.0. Let me know if now it works in your use case.\n. It depends on which HTTP method you set in the multipart upload request. By default is POST. \n. docs updated with https://github.com/alexbbb/android-upload-service/commit/758edc7eddb98239d59af2c04fb128322fc0142d\n. Version 1.6 has the following dependecies:\n\ncompile 'com.android.support:appcompat-v7:23.1.1'\ncompile 'com.android.support:support-v4:23.1.1'\nI suggest you to upgrade your project to those versions, instead of using the older 1.5 release. I've seen that you closed the ticket. Have you solved the issue?\n. When that kind of dependency problems happens, gradle allows you to force the usage of a specific library version. Check this answer: http://stackoverflow.com/a/24532623 \nIf you use v22 in your project, you can try including 1.6 and forcing that dependency version. I think that it will not cause any problem to android upload service. Never tried it personally, but you can try it if you want to upgrade to 1.6 or newer releases without having conflicts.\n. You're welcome. Please let me know if it works, so I could add that info in the readme and be helpful to other users, too :)\n. Great! Could you please post the exact gradle snippet which you used?\n. Hi, I think there's a way for gradle to generate also the .jar when creating the release version of the library, but I haven't had time to investigate how to do it after that I've migrated the project to Android Studio. If you have some suggestions, we can try them. \nThis might be useful: \n- http://stackoverflow.com/questions/23777423/aar-in-eclipse-ant-project\n- http://stackoverflow.com/questions/27309203/does-adteclipse-supports-apklib-or-aar-now-upto-adt-v23-04\n. When you import the project with maven or gradle, there's a step called \"manifest merger\" which is performed automatically. In your case you have to do that manually. If the service does not start, I think is due to this fact. Check this older revision of README.md which describes how to register the service in your manifest. Be sure to also copy and paste all the required permissions from the library manifest to yours and to add dependencies for Android support v4 and Android support v7. The versions used are listed in library's build.gradle in uploadservice folder. After that the service should work. The drawback is that when I'll release a new version, you will have to manually do all this stuff to upgrade. I'll check how to generate also library jar for the next release. \n. That error is something in your project, which is not related to Android Upload Service.\n. The only cause of this error is a mismatch in Android support libraries version. Android Upload Service uses v.23.1.1 and in your project you're using v.21. Update your project to the last version or check the solution in #75\n. Support library is used only for notifications compatibility. You can use\nv.21 too. Try the solution posted in #75 and change the version to 21. It\nshould work.\nIl 17 gen 2016 8:01 PM, \"neilyoung\" notifications@github.com ha scritto:\n\nYes, indeed, this is the problem. Unfortunately I cannot upgrade to 23,\nbecause the permission model has changed and right now there is no time to\nchange it all.\nSo it seems I can't use your library\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/81#issuecomment-172366246\n.\n. compileSdkVersion should match the version of the support library and I know it's a good practice to always use the latest available build tools. In your case, have you tried something like this?\n\n```\napply plugin: 'com.android.application'\nandroid {\n    compileSdkVersion 'Google Inc.:Google APIs:23'\n    buildToolsVersion \"23.0.2\"\ndefaultConfig {\n    applicationId \"com.MyProject.myProject\"\n    minSdkVersion 22\n    targetSdkVersion 22\n\n}\nconfigurations.all {\n    resolutionStrategy {\n        force 'com.android.support:support-v4:23.1.1'\n        force 'com.android.support:appcompat-v7:23.1.1'\n    }\n}\nbuildTypes {\n    release {\n        minifyEnabled true\n        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'\n    }\n}\n\ndexOptions {\n    preDexLibraries true\n}\n\n}\ndependencies {\n    compile project(':supertooltip')\n    compile 'com.google.code.gson:gson:2.3'\n    compile 'com.google.protobuf:protobuf-java:2.4.1'\n    compile 'com.google.maps.android:android-maps-utils:0.4+'\n    compile 'com.android.support:appcompat-v7:23.1.1'\n    compile 'com.google.android.gms:play-services:6+'\n    compile files('libs/acra-4.5.0.jar')\n    compile files('libs/universal-image-loader-1.9.1.jar')\n    compile 'com.alexbbb:uploadservice:1.6'\n}\n```\n. I've been able to reproduce exacly the issue you got with a project from scratch and I've documented the solution here: https://github.com/alexbbb/android-upload-service/wiki/Setup\nIgnore the initial setup instructions which are for the upcoming 2.0 release and check the troubleshooting section. I've also tried to reproduce your error by adding\ncompile 'com.google.code.gson:gson:2.3'\ncompile 'com.google.protobuf:protobuf-java:2.4.1'\ncompile 'com.google.maps.android:android-maps-utils:0.4+'\ncompile 'com.android.support:appcompat-v7:23.1.1'\ncompile 'com.google.android.gms:play-services:6+'\ninto the dependencies section of the app with which I've reproduced your error, but after adding the configurations.all instruction, everything works. I suspect that the dependency issue could be somewhere in those dependencies you have:\ncompile project(':supertooltip')\ncompile files('libs/acra-4.5.0.jar')\ncompile files('libs/universal-image-loader-1.9.1.jar')\n. @neilyoung managing dependencies is not easy and the mess is always around the corner. Every time a new tool comes around, they promise us it will be the best thing since sliced bread, but as we know, it's never easy like that :) Glad that you've found the solution. I'm closing this ticket.\nFor others who happens to come around in this thread, the working solution is here: https://github.com/alexbbb/android-upload-service/wiki/Setup\n. You're welcome :+1: \n. Hi,\nthe behaviour you described is perfectly normal. I'm going to explain you why. \nFirst, setting the content type as you've done is wrong and it's normal that your server side complains about it. The content type specifies the MIME type of the file and has nothing to do with the filename.\nAndroid Upload Service is compliant to RFC2388. In section 4.4 is stated that:\n\nThe original local file name may be supplied as well, either as a\n   \"filename\" parameter either of the \"content-disposition: form-data\"\n   header or, in the case of multiple files, in a \"content-disposition:\n   file\" header of the subpart. The sending application MAY supply a\n   file name; if the file name of the sender's operating system is not\n   in US-ASCII, the file name might be approximated, or encoded using\n   the method of RFC 2231.\n\nIn the current release 1.6 and in the upcoming 2.0, the filename is encoded in US-ASCII (as you can see here) and RFC 2231 is not supported. I suggest you to use ASCII file names though, to have the maximum compatibility across all the platforms and servers.\nI've worked on projects where upload of cyrillic filenames were involved and I've always used ASCII file names. If you need to know the original file name, as a quick fix you can simply pass it as a request parameter, which is encoded in UTF-8 and then use it on your server side.\n. Of course it's possible. That means implementing RFC 2231 and applying it when the filename charset is explicitly set and differs from US-ASCII. Unfortunately I don't have time to implement it, cause it's not requested in my actively running projects, but here comes the cool side of Github! If you want, you can fork the sources and implement it, then I'll merge your pull request :)\n. Wow you've been blazingly fast! :)\nI've just merged 2.0 development branch into master release and released 2.0, so you have to pull in the changes and implement the modifications on the new code base. Then send me a pull request.\n. @NitroG42 you can already set a custom uploadID to your upload request, check JavaDocs.\n. ",
    "s-nt-s": "Hi, I don't know how but it works for me:\nhttp://stackoverflow.com/questions/15011638/android-notification-not-working-on-2-3-6-samsung-galaxy-y\n. ",
    "derekentringer": "The one that I am testing with right now is 368MB.\n. Something helpful that I have found and am testing right now is using the setFixedLengthStreamingMode on the httpUrlConnection.\nhttp://developer.android.com/reference/java/net/HttpURLConnection.html\nMore info...\nTo upload data to a web server, configure the connection for output using setDoOutput(true).\nFor best performance, you should call either setFixedLengthStreamingMode(int) when the body length is known in advance, or setChunkedStreamingMode(int) when it is not. Otherwise HttpURLConnection will be forced to buffer the complete request body in memory before it is transmitted, wasting (and possibly exhausting) heap and increasing latency.\n. Works :) No more out of memory errors. Thanks for the quick turnaround. Again, great library.\n. Can confirm that setChunkedStreamingMode(0) also worked well.\n. ",
    "cheneygan": "this maybe because you have used inputstream. and the close sequence not correct. You may first close inputstream ,then close the outputstream,this cause EPIPE (Broken pipe) error\u3002\nif u   close inputstream befor outputstream,that is ok.\n. ",
    "gStanev": "I faced same issue.It happens only when i'm connected through mobile internet (over WiFi is working pretty good). First file that i uploaded is ok but with the second one i got same error \"sendto failed: EPIPE (Broken pipe)\".\n. ",
    "MarsVard": "I had the same problem, solved it in my fork, but I also kinda changed the project structure to ... gradle structure... should I make a pull request?\n. ok I understand, here's the line I changed\nhttps://github.com/MarsVard/android-upload-service/commit/d4c33a707d81794bf8de04927b360d08375b7032#diff-ddd9c1bec0fa6c650ff3c373898f8a33R17\n. ok :) I'll try to get it working this weekend (y) thanks for the awesome library\n. Yes! almost exactly as you did with uploads, but I based my changes on my own fork I had done sometime ago. I did pull your latest changes. before adding the download capabilities. adding the download capabilites to a clean fork would not be a problem.\n. ",
    "RichardLindhout": "+1 for gradle support\n. ",
    "alvinwoon": "+1\n. ",
    "nitinhayaran": "+1\n. Have you figured out what was causing the issue. I am experiencing same issue, where I am getting custom headers on the server, but no POST or FILES. \n. ",
    "juniorJaffa": "Hi, I \u2018ve done it at beginning and suppose that serverResponseMessage would be son but NOT. it is representation(key=value) of serverReponseCode.\nSo I mean that if serverResponseCode is 200-> serverResponseMessage display in debugger(LogCat) OK.\nNext, if server/php side set  http_response_code(202); then LogCat display serverResponseCode 202 -> and serverResponseMessage: Accepted.\nBelieve me, I tested serveral times to debug it up and down but could not get json response from server eve I send it from.\nI would not bother you if did not read your manual and implementation steps.\nserverResponseMessage is only velue representation of serverResponseCode BUT I need json response data that I sent from server side like:\n    http_response_code(200);\n        $result['data'] = array(\u2018picName\u2019=>\u2019abc.jpg\u2019, \u2019status\u2019=>\u2019OK');\n```\n$json = json_encode($result);\nheader(\"Content-Type: application/json\", true);\nexit($json);\n```\nHave you tried it, get json response from server to upload service?\nThanks for help, indeed.\nRegards, \nIng. Marian Kubincanek\nSenior Java Developer\nLinkedIn:\u00a0 http://www.linkedin.com/in/mariankubincanekhttp://www.linkedin.com/in/mariankubincanek http://www.linkedin.com/in/mariankubincanek\n\nOn Jan 28, 2015, at 09:50, Alex Gotev notifications@github.com wrote:\nFollow the example here: https://github.com/alexbbb/android-upload-service#how-to-monitor-upload-status https://github.com/alexbbb/android-upload-service#how-to-monitor-upload-status\n@Override\npublic void onCompleted(String uploadId,\n                        int serverResponseCode,\n                        String serverResponseMessage) {\n    Log.i(TAG, \"Upload with ID \" + uploadId\n               + \" is completed: \" + serverResponseCode\n               + \", \" + serverResponseMessage);\n    //Use a library such as org.json or google gson \n    //to parse JSON from serverResponseMessage string\n}\n\u2014\nReply to this email directly or view it on GitHub https://github.com/alexbbb/android-upload-service/issues/15#issuecomment-71799783.\n. Hi Alex,\n\nThat modification is exactly what I needed(InputStream data) to proceed server response data in android, great it works.\nThanks again. Enj day.\nRegards, \nIng. Marian Kubincanek\nSenior Java Developer\nLinkedIn:\u00a0 http://www.linkedin.com/in/mariankubincanekhttp://www.linkedin.com/in/mariankubincanek http://www.linkedin.com/in/mariankubincanek\n\nOn Jan 28, 2015, at 10:54, Alex Gotev notifications@github.com wrote:\nI've made some modifications to read response body from the server: 140bef1 https://github.com/alexbbb/android-upload-service/commit/140bef1b714dad0b6e19d55390c5b9374749ce81\nPlease update the library, try again as I suggested you in the previous comment and let me know what you get in \"serverResponseMessage\"\n\u2014\nReply to this email directly or view it on GitHub https://github.com/alexbbb/android-upload-service/issues/15#issuecomment-71807819.\n. Hi Alex,\n\nJust note. Next customization that I had to do in your upload android service was:\nUploadService\ngetMultipartHttpURLConnection\nconn.setRequestProperty(\"Connection\", \"close\");\n//        conn.setRequestProperty(\"Connection\", \"Keep-Alive\u201d);\nhttp://tiku.io/questions/782960/java-net-socketexception-sendto-failed-epipe-broken-pipe-on-android http://tiku.io/questions/782960/java-net-socketexception-sendto-failed-epipe-broken-pipe-on-android\nCause every 2nd request to send multipart(Picture+data) to server was with exception:\n01-11 14:07:24.920: I/CameraActivity(650): The progress of the upload with ID c88f3352-7a39-403f-8351-981b88dd79c3 is: 4\n01-11 14:07:25.065: D/dalvikvm(650): GC_FOR_ALLOC freed 2934K, 30% free 13180K/18624K, paused 22ms, total 22ms\n01-11 14:07:25.110: E/CameraActivity(650): Error in upload with ID: c88f3352-7a39-403f-8351-981b88dd79c3. sendto failed: EPIPE (Broken pipe)\n01-11 14:07:25.110: E/CameraActivity(650): java.net.SocketException: sendto failed: EPIPE (Broken pipe)\n01-11 14:07:25.110: E/CameraActivity(650):  at libcore.io.IoBridge.maybeThrowAfterSendto(IoBridge.java:499)\n01-11 14:07:25.110: E/CameraActivity(650):  at libcore.io.IoBridge.sendto(IoBridge.java:468)\n01-11 14:07:25.110: E/CameraActivity(650):  at java.net.PlainSocketImpl.write(PlainSocketImpl.java:507)\n01-11 14:07:25.110: E/CameraActivity(650):  at java.net.PlainSocketImpl.access$100(PlainSocketImpl.java:46)\n01-11 14:07:25.110: E/CameraActivity(650):  at java.net.PlainSocketImpl$PlainSocketOutputStream.write(PlainSocketImpl.java:269)\n01-11 14:07:25.110: E/CameraActivity(650):  at libcore.net.http.ChunkedOutputStream.writeHex(ChunkedOutputStream.java:102)\n01-11 14:07:25.110: E/CameraActivity(650):  at libcore.net.http.ChunkedOutputStream.writeBufferedChunkToSocket(ChunkedOutputStream.java:128)\n01-11 14:07:25.110: E/CameraActivity(650):  at libcore.net.http.ChunkedOutputStream.write(ChunkedOutputStream.java:77)\n01-11 14:07:25.110: E/CameraActivity(650):  at com.alexbbb.uploadservice.UploadService.uploadFiles(UploadService.java:265)\n01-11 14:07:25.110: E/CameraActivity(650):  at com.alexbbb.uploadservice.UploadService.handleFileUpload(UploadService.java:166)\n01-11 14:07:25.110: E/CameraActivity(650):  at com.alexbbb.uploadservice.UploadService.onHandleIntent(UploadService.java:137)\n01-11 14:07:25.110: E/CameraActivity(650):  at android.app.IntentService$ServiceHandler.handleMessage(IntentService.java:65)\n01-11 14:07:25.110: E/CameraActivity(650):  at android.os.Handler.dispatchMessage(Handler.java:99)\n01-11 14:07:25.110: E/CameraActivity(650):  at android.os.Looper.loop(Looper.java:176)\n01-11 14:07:25.110: E/CameraActivity(650):  at android.os.HandlerThread.run(HandlerThread.java:61)\n01-11 14:07:25.110: E/CameraActivity(650): Caused by: libcore.io.ErrnoException: sendto failed: EPIPE (Broken pipe)\n01-11 14:07:25.110: E/CameraActivity(650):  at libcore.io.Posix.sendtoBytes(Native Method)\n01-11 14:07:25.110: E/CameraActivity(650):  at libcore.io.Posix.sendto(Posix.java:155)\n01-11 14:07:25.110: E/CameraActivity(650):  at libcore.io.BlockGuardOs.sendto(BlockGuardOs.java:177)\n01-11 14:07:25.110: E/CameraActivity(650):  at libcore.io.IoBridge.sendto(IoBridge.java:466)\n01-11 14:07:25.110: E/CameraActivity(650):  ... 13 more\nOR \n01-11 14:12:23.165: E/CameraActivity(7394): Error in upload with ID: 7f190d3e-8edc-40fa-a7a3-c6f18c05e6d0. null\n01-11 14:12:23.165: E/CameraActivity(7394): java.io.EOFException\n01-11 14:12:23.165: E/CameraActivity(7394):     at libcore.io.Streams.readAsciiLine(Streams.java:203)\n01-11 14:12:23.165: E/CameraActivity(7394):     at libcore.net.http.HttpEngine.readResponseHeaders(HttpEngine.java:579)\n01-11 14:12:23.165: E/CameraActivity(7394):     at libcore.net.http.HttpEngine.readResponse(HttpEngine.java:827)\n01-11 14:12:23.165: E/CameraActivity(7394):     at libcore.net.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:283)\n01-11 14:12:23.165: E/CameraActivity(7394):     at libcore.net.http.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:497)\n01-11 14:12:23.165: E/CameraActivity(7394):     at com.alexbbb.uploadservice.UploadService.handleFileUpload(UploadService.java:170)\n01-11 14:12:23.165: E/CameraActivity(7394):     at com.alexbbb.uploadservice.UploadService.onHandleIntent(UploadService.java:137)\n01-11 14:12:23.165: E/CameraActivity(7394):     at android.app.IntentService$ServiceHandler.handleMessage(IntentService.java:65)\n01-11 14:12:23.165: E/CameraActivity(7394):     at android.os.Handler.dispatchMessage(Handler.java:99)\n01-11 14:12:23.165: E/CameraActivity(7394):     at android.os.Looper.loop(Looper.java:176)\n01-11 14:12:23.165: E/CameraActivity(7394):     at android.os.HandlerThread.run(HandlerThread.java:61)\nOR Socket Exceprion pointing to EPIPE\nSo to explain:\n- 1st android/http request opened socket con, server closed, but service kept opened.\n- 2nd request wanted to used before user con->so socket, but exceptionraised cause server do not have before used socket keep alive, closed, ended. Then android/http con closed too.\n- 3rd reuest like 1st\n- 4th like 2ns, crashed and so on.\nIt is right to use keep alive connection opened while uploading batch files, I mean 6 pictures in one time, batch upload.\nJust note, if other met the same problem ;)\nEnj day.\nRegards, \nIng. Marian Kubincanek\nSenior Java Developer\nLinkedIn:\u00a0 http://www.linkedin.com/in/mariankubincanekhttp://www.linkedin.com/in/mariankubincanek http://www.linkedin.com/in/mariankubincanek\n\nOn Jan 28, 2015, at 11:29, Alex Gotev notifications@github.com wrote:\nThank you for your feedback  and I'm glad that everything works now :)\n\u2014\nReply to this email directly or view it on GitHub https://github.com/alexbbb/android-upload-service/issues/15#issuecomment-71812298.\n. I like to help you ;)\nProperty about uploading should be set before start request like:\nenum{\n    SINGLE_UPLOAD, ->Con close\n    BATCH_UPLOAD -> Con Keep Alive\n}\n\nI customize more yor code and let you know, but fix Con:close works 100%. Now I building/testing one app and works perfect.\nThanks again ;)\nRegards, \nIng. Marian Kubincanek\nSenior Java Developer\nLinkedIn:\u00a0 http://www.linkedin.com/in/mariankubincanekhttp://www.linkedin.com/in/mariankubincanek http://www.linkedin.com/in/mariankubincanek\n\nOn Jan 28, 2015, at 14:11, Alex Gotev notifications@github.com wrote:\nThis error happened also to other users in the past, but none of them gave me a log to work with and an exact step-by-step description of how to reproduce the error. I've reproduced the error you described and by applying your solution, the problem is resolved, so I committed your patch: 60ecf22 https://github.com/alexbbb/android-upload-service/commit/60ecf221d686b7d1af18ba619b9c19e07735075a\nJust update the library and you're good to go ;)\n\u2014\nReply to this email directly or view it on GitHub https://github.com/alexbbb/android-upload-service/issues/15#issuecomment-71832269.\n. 1option \nUploadRequest on which you add more than one file (by calling addFileToUpload)\n\nRegards, \nIng. Marian Kubincanek\nSenior Java Developer\nLinkedIn:\u00a0 http://www.linkedin.com/in/mariankubincanekhttp://www.linkedin.com/in/mariankubincanek http://www.linkedin.com/in/mariankubincanek\n\nOn Jan 28, 2015, at 14:33, Alex Gotev notifications@github.com wrote:\nBy batch upload you mean an UploadRequest on which you add more than one file (by calling addFileToUpload) or you're making N calls to UploadService.startUpload(request) ?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/alexbbb/android-upload-service/issues/15#issuecomment-71834947.\n. exactly ;) good fix\n\nRegards, \nIng. Marian Kubincanek\nSenior Java Developer\nLinkedIn:\u00a0 http://www.linkedin.com/in/mariankubincanekhttp://www.linkedin.com/in/mariankubincanek http://www.linkedin.com/in/mariankubincanek\n\nOn Jan 28, 2015, at 14:40, Alex Gotev notifications@github.com wrote:\nOk, so to keep things simple and transparent to the users of the library, I set connection keep-alive only if there is more than one file to upload, otherwise I set it to connection close. Commit: 9a7b35b https://github.com/alexbbb/android-upload-service/commit/9a7b35be68654a94888d228762ed382401d912f2\n\u2014\nReply to this email directly or view it on GitHub https://github.com/alexbbb/android-upload-service/issues/15#issuecomment-71835886.\n. \n",
    "peterswang": "That resolved the issue.  Thanks so much for the quick fix.\nBTW, from the code, it seems to handle wireless connection break by reporting an error and terminates the upload?\n. I didn't see code that would resume the file transfer at the point of break, if connection terminated prematurely before a file completes transfer.  Such feature is necessary for transferring large files, especially when the transmission condition can change quickly.  Large files may never complete the transfers.\n. Here's the screenshot from Nginx access and error log.\n\n. Thanks.  It did turn out to be Nginx/uWSGI configuration issues., though nothing to do with static pages.\nFrom: Alex Gotev [mailto:notifications@github.com] \nSent: Monday, February 02, 2015 10:14 PM\nTo: alexbbb/android-upload-service\nCc: peterswang\nSubject: Re: [android-upload-service] 405 Error from Nginx/uWSGI (#17)\nIt seems to me that your problem resides entirely on the server side and \nhas nothing to do with the android upload service. Try to ask the uWSGI \ncommunity and have a look here: \nhttp://leandroardissone.com/post/19690882654/nginx-405-not-allowed \nIl 03/feb/2015 01:54 \"peterswang\" notifications@github.com ha scritto: \n\nHere's the screenshot from Nginx access and error log. \n[image: screen shot 2015-02-02 at 4 51 44 pm] \nhttps://cloud.githubusercontent.com/assets/10738534/6012344/d55399d8-aafb-11e4-9ed1-2656738d604d.png \n\u2014 \nReply to this email directly or view it on GitHub \nhttps://github.com/alexbbb/android-upload-service/issues/17#issuecomment-72571389 \n. \n. \n",
    "JamesBradyBear": "Welcome and really thanks for such kind reply. I'll hopefully add some more features after your update. best of luck and thanks you very much for this library, it saved me lot of time :+1: \n. Sorry that was a confusion at my part.\n. I am also thinking about supporting GZip compression and rather than using HTTP Client we should give user freedom to use any HTTP Client library he is happy to use, some libraries support GZip compression support out of the box. Here is Android's default implementation http://developer.android.com/reference/java/util/zip/GZIPOutputStream.html\n. Please let me know if you have updated :) and I am using this in my app DotShare http://dot-share.com/index-en.html \n. Yeah sure, I'll re pull the latest changes :+1: \n. ",
    "baptistejamin": "Yes. Exactly. I resolved the problem wuth disabling chucked responses.\n-----Message d'origine-----\nDe : \"Alex Gotev\" notifications@github.com\nEnvoy\u00e9 : \u200e24/\u200e02/\u200e2015 16:15\n\u00c0\u00a0: \"alexbbb/android-upload-service\" android-upload-service@noreply.github.com\nCc : \"Baptiste JAMIN\" baptistejamin@gmail.com\nObjet : Re: [android-upload-service] Error on chunked responses (#19)\n@mywaystar are you using node.js + express + multer middleware to handle multipart form data?\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "foodyi": "I had the same issue in andorid studo, i try to clean and rebuild, it could build successful. but when i debug project on device it will report the same error.\n. I just import java source code to my project,it works well.\n. ",
    "droididan": "Hey )\nThanks. i fixed it) have great day bro\nOn Thu, Mar 12, 2015 at 8:51 AM, foodyi notifications@github.com wrote:\n\nI just import java source code to my project,it works well.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/22#issuecomment-78431950\n.\n\n\nIdan Ayalon\n. Hi Alex,\nHow are you?\nI'm trying to upload pictures in ssl to my server and i get an exception:\ni use this line inside my uploadFileToServer method where i do all Requests.\n03-16 09:59:01.582  24782-24903/com.nuro E/com.newrelic.agent.android\ufe55\nFailed to detect New Relic instrumentation.  Something likely went wrong\nduring your build process and you should contact support@newrelic.com.\n03-16 09:59:27.094  24782-24782/com.nuro E/CliptrayUtils\ufe55\nhideClipTrayIfNeeded() TextView is focused!! hideClipTray()\n03-16 10:00:08.093  24782-24782/com.nuro E/CliptrayUtils\ufe55\nhideClipTrayIfNeeded() TextView is focused!! hideClipTray()\n03-16 10:00:16.895  24782-24782/com.nuro W/art\ufe55 Attempt to remove local\nhandle scope entry from IRT, ignoring\n03-16 10:00:16.925  24782-24782/com.nuro W/chromium\ufe55\n[WARNING:resource_bundle.cc(304)] locale_file_path.empty()\n03-16 10:00:16.926  24782-25935/com.nuro W/AudioManagerAndroid\ufe55 Requires\nBLUETOOTH permission\n03-16 10:00:17.004  24782-24914/com.nuro W/OpenGLRenderer\ufe55 Trying to scale\ndown bitmap for texture (2880x5120 -> 2304x4096)\n03-16 10:00:35.519  24782-24782/com.nuro W/TouchFlickNoti\ufe55\nCAPP_TOUCH_FLICK: UP vectorVelocity:-9048 signal:-1\n03-16 10:00:46.539  24782-24914/com.nuro W/OpenGLRenderer\ufe55 Trying to scale\ndown bitmap for texture (2880x5120 -> 2304x4096)\n03-16 10:00:47.806  24782-24782/com.nuro E/ChatFragment\ufe55 Error in upload\nwith ID: 12fc87f6-8e5f-48e9-8d8b-85058d4629ce. Write error: ssl=0x9a2e1200:\nI/O error during system call, Broken pipe\n    javax.net.ssl.SSLException: Write error: ssl=0x9a2e1200: I/O error\nduring system call, Broken pipe\n            at com.android.org.conscrypt.NativeCrypto.SSL_write(Native\nMethod)\n            at\ncom.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream.write(OpenSSLSocketImpl.java:740)\n            at com.android.okio.Okio$1.write(Okio.java:70)\n            at\ncom.android.okio.RealBufferedSink.emitCompleteSegments(RealBufferedSink.java:116)\n            at\ncom.android.okio.RealBufferedSink.write(RealBufferedSink.java:44)\n            at\ncom.android.okhttp.internal.http.HttpConnection$ChunkedSink.write(HttpConnection.java:330)\n            at\ncom.android.okio.RealBufferedSink.emitCompleteSegments(RealBufferedSink.java:116)\n            at\ncom.android.okio.RealBufferedSink$1.write(RealBufferedSink.java:131)\n            at\ncom.alexbbb.uploadservice.UploadService.uploadFiles(UploadService.java:298)\n            at\ncom.alexbbb.uploadservice.UploadService.handleFileUpload(UploadService.java:169)\n            at\ncom.alexbbb.uploadservice.UploadService.onHandleIntent(UploadService.java:139)\n            at\nandroid.app.IntentService$ServiceHandler.handleMessage(IntentService.java:65)\n            at android.os.Handler.dispatchMessage(Handler.java:102)\n            at android.os.Looper.loop(Looper.java:135)\n            at android.os.HandlerThread.run(HandlerThread.java:61)\nOn Thu, Mar 12, 2015 at 4:13 PM, idanbar134 bar.idan@gmail.com wrote:\n\nHey )\nThanks. i fixed it) have great day bro\nOn Thu, Mar 12, 2015 at 8:51 AM, foodyi notifications@github.com wrote:\n\nI just import java source code to my project,it works well.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/22#issuecomment-78431950\n.\n\n\nIdan Ayalon\n\n\nIdan Ayalon\n. Hey Alex,\nThe problem solved thank\nOn Mar 4, 2015 12:37 PM, \"Alex Gotev\" notifications@github.com wrote:\n\nAre you using Android Studio?\nTry Build > Clean Project\nand then\nBuild > Rebuild Project\n\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/22#issuecomment-77132725\n.\n. Ok, Thank.\nmy main goal is to capture an picture and upload it to the server or choose from the gallery \nAsyncTask\n\nprivate class UploadFileToServer extends AsyncTask {\n```\n    @Override\n    protected String doInBackground(Void... params) {\n        String responseString = null;\n    final UploadRequest request = new UploadRequest(\n            getActivity(),\n            UUID.randomUUID().toString(),\n            \"http://file.staging.nuro.im/user_files\");\n\n    request.addFileToUpload(filePath.toString(),\n            \"file\",\n            filePath.toLowerCase(),\n            getMimeType(filePath));\n\n\n    // Headers data\n   i set here my headers...\n\n\n    //You can add your own custom headers\n    request.addHeader(\"access-token\", accessToken);\n    request.addHeader(\"client\", client);\n    request.addHeader(\"expiry\", expiry);\n    request.addHeader(\"uid\", Uid);\n    request.addHeader(\"device_type\", \"android\");\n    request.addParameter(\"channel_id\", channelData.getId());\n\n    //configure the notification\n    request.setNotificationConfig(android.R.drawable.ic_menu_upload,\n            \"Uploading secure file\",\n            \"upload in progress text\",\n            \"upload completed successfully text\",\n            \"upload error text\",\n            false);\n\n    try {\n        //Start upload service and display the notification\n        UploadService.startUpload(request);\n\n    } catch (Exception exc) {\n        //You will end up here only if you pass an incomplete UploadRequest\n        Log.e(\"AndroidUploadService\", exc.getLocalizedMessage(), exc);\n    }\n\n    return responseString;\n}\n\n@Override\nprotected void onPostExecute(String result) {\n    Log.e(TAG, \"Response from server: \" + result);\n\n    // showing the server response in an alert dialog\n    showAlert(result);\n\n    super.onPostExecute(result);\n}\n\n}\n```\n. Hey,\nThanks again :))\nI looked at your examples. now i get error message from the FileUpload Class\nwhat i am trying to do:\n1. take a picture or choose from the gallery\n2. get the Uri from the camera or gallery\n3. Send the picture to my server\nError i got when trying to send the image ( i pass the Uri from the camera)\n03-05 14:39:30.757  10009-10009/com.nuro E/ChatFragment\ufe55 Error in upload\nwith ID: b6edaaf7-6446-4b61-9a11-4f2955dbab56.\n/file:/storage/emulated/0/Pictures/Nuro/IMG_20150305_143923.jpg: open\nfailed: ENOENT (No such file or directory)\n    java.io.FileNotFoundException:\n/file:/storage/emulated/0/Pictures/Nuro/IMG_20150305_143923.jpg: open\nfailed: ENOENT (No such file or directory)\n            at libcore.io.IoBridge.open(IoBridge.java:456)\n            at java.io.FileInputStream.(FileInputStream.java:76)\n            at\ncom.alexbbb.uploadservice.FileToUpload.getStream(FileToUpload.java:51)\n            at\ncom.alexbbb.uploadservice.UploadService.uploadFiles(UploadService.java:292)\n            at\ncom.alexbbb.uploadservice.UploadService.handleFileUpload(UploadService.java:169)\n            at\ncom.alexbbb.uploadservice.UploadService.onHandleIntent(UploadService.java:139)\n            at\nandroid.app.IntentService$ServiceHandler.handleMessage(IntentService.java:65)\n            at android.os.Handler.dispatchMessage(Handler.java:102)\n            at android.os.Looper.loop(Looper.java:135)\n            at android.os.HandlerThread.run(HandlerThread.java:61)\n     Caused by: android.system.ErrnoException: open failed: ENOENT (No such\nfile or directory)\n            at libcore.io.Posix.open(Native Method)\n            at libcore.io.BlockGuardOs.open(BlockGuardOs.java:186)\n            at libcore.io.IoBridge.open(IoBridge.java:442)\n            at java.io.FileInputStream.(FileInputStream.java:76)\n            at\ncom.alexbbb.uploadservice.FileToUpload.getStream(FileToUpload.java:51)\n            at\ncom.alexbbb.uploadservice.UploadService.uploadFiles(UploadService.java:292)\n            at\ncom.alexbbb.uploadservice.UploadService.handleFileUpload(UploadService.java:169)\n            at\ncom.alexbbb.uploadservice.UploadService.onHandleIntent(UploadService.java:139)\n            at\nandroid.app.IntentService$ServiceHandler.handleMessage(IntentService.java:65)\n            at android.os.Handler.dispatchMessage(Handler.java:102)\n            at android.os.Looper.loop(Looper.java:135)\n            at android.os.HandlerThread.run(HandlerThread.java:61)\nThis is my code\nprivate void UploadFileToServer(String path) {\nAbstractUploadServiceReceiver uploadReceiver = new\nAbstractUploadServiceReceiver() {\n```\n        @Override\n        public void onProgress(String uploadId, int progress) {\n            Log.i(TAG, \"The progress of the upload with ID \"\n                    + uploadId + \" is: \" + progress);\n        }\n    @Override\n    public void onError(String uploadId, Exception exception) {\n        Log.e(TAG, \"Error in upload with ID: \" + uploadId + \". \"\n                + exception.getLocalizedMessage(), exception);\n    }\n\n    @Override\n    public void onCompleted(String uploadId, int\n\n```\nserverResponseCode, String serverResponseMessage) {\n                Log.i(TAG, \"Upload with ID \" + uploadId\n                        + \" has been completed with HTTP \" +\nserverResponseCode\n                        + \". Response from server: \" +\nserverResponseMessage);\n```\n            showAlert(\"Response from server: \" + serverResponseMessage);\n        }\n    };\n uploadReceiver.register(getActivity());\n\n\n    final UploadRequest request = new\n\n```\nUploadRequest(getActivity(),UUID.randomUUID().toString(),SERVER_ADDRESS);\nrequest.addFileToUpload(path, \"test\" ,path,\nContentType.APPLICATION_OCTET_STREAM);\n// Headers data\n        String Uid = ((NuroApplication)\ngetActivity().getApplication()).getNuroApi().headers.getUid();\n            String accessToken = ((NuroApplication)\ngetActivity().getApplication()).getNuroApi().headers.getAccessToken();\n            String client = ((NuroApplication)\ngetActivity().getApplication()).getNuroApi().headers.getClient();\n            String expiry = ((NuroApplication)\ngetActivity().getApplication()).getNuroApi().headers.getExpiry();\n```\n        //You can add your own custom headers\n        request.addHeader(\"access-token\", accessToken);\n        request.addHeader(\"client\", client);\n        request.addHeader(\"expiry\", expiry);\n        request.addHeader(\"uid\", Uid);\n        request.addHeader(\"device_type\", \"android\");\n        request.addParameter(\"channel_id\", channelData.getId());\n    //configure the notification\n    request.setNotificationConfig(android.R.drawable.ic_menu_upload,\n            \"Uploading secure file\",\n            \"upload in progress text\",\n            \"upload completed successfully text\",\n            \"upload error text\",\n            false);\n    try {\n        //Start upload service and display the notification\n        UploadService.startUpload(request);\n\n    } catch (Exception exc) {\n        //You will end up here only if you pass an incomplete\n\n```\nUploadRequest\n                Log.e(\"AndroidUploadService\", exc.getLocalizedMessage(),\nexc);\n            }\n        }\nBest!\nIdan\nOn Thu, Mar 5, 2015 at 12:57 PM, Alex Gotev notifications@github.com\nwrote:\n\nI have some remarks to make :D (don't take it personally!):\n- the use of the AsyncTask is totally unnecessary, because Android\n  Upload Service already works entirely in the background, not locking your\n  main UI thread in any way :)\n- the value of responseString will always be null, as you set it only\n  once at the beginning of the method and then you simply return it at the\n  end. To get upload status and the response from the server you have to use\n  the receiver provided with the library (\n  https://github.com/alexbbb/android-upload-service#how-to-monitor-upload-status\n  )\nI invite you to check the example app provided with the library. You can\ncompile it and run it on your device. More specifically, look at how the\nMainActivity is structured:\nhttps://github.com/alexbbb/android-upload-service/blob/master/examples/app/src/com/alexbbb/uploadservice/demo/MainActivity.java\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/23#issuecomment-77344680\n.\n\n\nIdan Ayalon\n. Hi Alex,\nThank, i'm noob programmer :) working on my skills. but thank you for best\nsupport.\nIdan\nOn Mon, Mar 9, 2015 at 3:36 PM, Alex Gotev notifications@github.com wrote:\n\nAs the exception says:\nCaused by: java.lang.NullPointerException: Attempt to invoke virtual method 'android.app.Application android.app.Activity.getApplication()' on a null object reference\n        at com.nuro.messaging.ChatFragment.sendMessage(ChatFragment.java:479)\nYou're invoking a method on a null object in your custom implementation of\nAbstractUploadServiceReceiver's onReceive method. Debug your code.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/24#issuecomment-77853841\n.\n\n\nIdan Ayalon\n. Thanks. I learn the hard way :) and I solved it.\nOn Mar 9, 2015 4:54 PM, \"Alex Gotev\" notifications@github.com wrote:\n\n@idanbar134 https://github.com/idanbar134 keep working like you do :) I\nsuggest you to learn how to read Java Stack Trace, as it's your \"best\nfriend\" to find out what's going wrong in some cases. Sorry to bother you\nwith this ticket you opened: #22\nhttps://github.com/alexbbb/android-upload-service/issues/22 again, but\nI need to know if you still have the described problem or how you managed\nto solve it :)\n\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/24#issuecomment-77868167\n.\n. Hi Alex,\n\nI'm trying to upload a photo that i pick from the gallery using this code:\npublic String getPath(Uri uri) {\n        // just some safety built in\n        if( uri == null ) {\n            return null;\n        }\n        // try to retrieve the image from the media store first\n        // this will only work for images selected from gallery\n        String[] projection = { MediaStore.Images.Media.DATA };\n        Cursor cursor = getActivity().getContentResolver().query(uri,\nprojection, null, null, null);\n        if( cursor != null ){\n            int column_index =\ncursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);\n            cursor.moveToFirst();\n            return cursor.getString(column_index);\n        }\n        // this is our fallback here\n        return uri.getPath();\n    }\n@Override\npublic void onActivityResult(int requestCode, int resultCode, Intent\ndata) {\n        super.onActivityResult(requestCode, resultCode, data);\n        String realPath = \"\";\nif (resultCode == Activity.RESULT_OK  ) {\n        if( requestCode == REQUEST_CAPTURE_PICTURE ){\n            file = new\nFile(Environment.getExternalStorageDirectory().toString());\n                for (File temp : file.listFiles()) {\n                    if (temp.getName().equals(\"temp.jpg\")) {\n                        file = temp;\n```\n                   realPath = file.toString();\n                    break;\n                }\n            }\n        }\n    if (requestCode ==  REQUEST_PICK_PICTURE) {\n        if (data != null ) {\n            selectedImageURI = data.getData();\n            Log.i(TAG, selectedImageURI.toString());\n\n            //realPath =\n\n```\n\"/storage/emulated/legacy/20150308_184443.jpg\";\n```\n                realPath = getPath(selectedImageURI);\n        }\n    }\n\n    // upload the files with android-upload-service\n    UploadFileToServer(realPath, getActivity());\n}\n\n}\n```\nand this is my chooseImage method:\nprivate void chooseImage() {\n    Intent intent = new Intent();\n    intent.setType(\"image/*\");\n    intent.setAction(Intent.ACTION_GET_CONTENT);\n    startActivityForResult(Intent.createChooser(intent, \"Select\nPicture\"), REQUEST_PICK_PICTURE);\n    }\nthe 'getPath' returns empty string and the app crashes...\ni tried to direct 'realPath' (String) to real photo on SD and it worked.\ni would be happy to know what is my noob mistake this time :)\nbest,\nIdan\nOn Mon, Mar 9, 2015 at 4:57 PM, idanbar134 bar.idan@gmail.com wrote:\n\nThanks. I learn the hard way :) and I solved it.\nOn Mar 9, 2015 4:54 PM, \"Alex Gotev\" notifications@github.com wrote:\n\n@idanbar134 https://github.com/idanbar134 keep working like you do :)\nI suggest you to learn how to read Java Stack Trace, as it's your \"best\nfriend\" to find out what's going wrong in some cases. Sorry to bother you\nwith this ticket you opened: #22\nhttps://github.com/alexbbb/android-upload-service/issues/22 again, but\nI need to know if you still have the described problem or how you managed\nto solve it :)\n\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/24#issuecomment-77868167\n.\n\n\n\nIdan Ayalon\n. Hi,\nI solved the problem. it was wrong routing on the server side :)\nthanks\nOn Thu, Mar 19, 2015 at 7:46 AM, JanithaR notifications@github.com wrote:\n\nI have used this library for various projects for a long time. Today I\nstarted running into a problem where none of the parameters sent via POST\nis not received by the server. They are simply missing at server end. I use\na class with my own coding to make POST requests which do not have files\nand they work fine. Only requests made using this library fail with no POST\nparameters.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/25.\n\n\nIdan Ayalon\n. hey,\nyou can close this issue. thanks\nOn Mon, Mar 30, 2015 at 1:12 PM, Bryanearl notifications@github.com wrote:\n\nWhen i add several files to upload, it only uploads the last file added to\nthe arrayList\n\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/26.\n\n\nIdan Ayalon\n. Hi alex\nI have the same issue, it will be awsome if you can ass this feature...\n. ",
    "venvear": "Hello Alex,\nI'm trying to upload file to my server and i get an exception:\nError in upload with ID: 7a31894d-342e-4bfc-99be-4bbf4c0ae0c8. sendto failed: EPIPE (Broken pipe): java.net.SocketException: sendto failed: EPIPE (Broken pipe)\n            at libcore.io.IoBridge.maybeThrowAfterSendto(IoBridge.java:546)\n            at libcore.io.IoBridge.sendto(IoBridge.java:515)\n            at java.net.PlainSocketImpl.write(PlainSocketImpl.java:504)\n            at java.net.PlainSocketImpl.access$100(PlainSocketImpl.java:37)\n            at java.net.PlainSocketImpl$PlainSocketOutputStream.write(PlainSocketImpl.java:266)\n            at com.android.okio.Okio$1.write(Okio.java:70)\n            at com.android.okio.RealBufferedSink.emitCompleteSegments(RealBufferedSink.java:116)\n            at com.android.okio.RealBufferedSink.write(RealBufferedSink.java:44)\n            at com.android.okhttp.internal.http.HttpConnection$ChunkedSink.write(HttpConnection.java:334)\n            at com.android.okio.RealBufferedSink.emitCompleteSegments(RealBufferedSink.java:116)\n            at com.android.okio.RealBufferedSink$1.write(RealBufferedSink.java:131)\n            at com.alexbbb.uploadservice.UploadService.uploadFiles(UploadService.java:290)\n            at com.alexbbb.uploadservice.UploadService.handleFileUpload(UploadService.java:163)\n            at com.alexbbb.uploadservice.UploadService.onHandleIntent(UploadService.java:133)\n            at android.app.IntentService$ServiceHandler.handleMessage(IntentService.java:65)\n            at android.os.Handler.dispatchMessage(Handler.java:102)\n            at android.os.Looper.loop(Looper.java:135)\n            at android.os.HandlerThread.run(HandlerThread.java:61)\n. ",
    "aliceresponde": "@alexbbb  hi, I'm lost... \nError:Execution failed for task ':app:dexDebug'.\n\ncom.android.ide.common.process.ProcessException: org.gradle.process.internal.ExecException: Process 'command '/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/bin/java'' finished with non-zero exit value 2    I clean, build  but  the  issue  continue.\n. \n",
    "JanithaR": "Yes, I think that's the case here as well (I mean it's definitely server side issue). I've been with this problem for a few hours now. Could you elaborate what exactly you mean by \"wrong routing on the server side\"? I'm not a server guy or PHP but I need to wrap my head around this.\n. Not yet. Still looking for it by the server side guys. I'll definitely\nupdate here when I resolve the issue.\nSo far I could only narrow it down to the HttpURLConnection class. Because\nwhen that's in use only it seems the sever is acting weird.\nOn Mar 25, 2015 4:36 PM, \"Nitin Hayaran\" notifications@github.com wrote:\n\nHave you figured out what was causing the issue. I am experiencing same\nissue, where I am getting custom headers on the server, but no POST or\nFILES.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/25#issuecomment-85984015\n.\n. The server side is done using CodeIgniter and the same code base works on\nthe test servers and every other local server we tried. It's only this\nparticular client provided server having this issue.\n\nOn Wed, Mar 25, 2015 at 5:26 PM, Alex Gotev notifications@github.com\nwrote:\n\nHave you tried using one of the example server implementations?\nhttps://github.com/alexbbb/android-upload-service/tree/master/examples\nI don't know what your server architecture is, or if the traffic passes\nthrough a proxy before being handled by the server, but never had such an\nissue and I use the library in production with PHP and Python Twisted\nservers.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/25#issuecomment-85998359\n.\n\n\ngrapixsoft@gmail.com\n. Hey thanks for the bump, I seriously forgot to update here.\nYes one of the guys was able to figure it out. Here's his exact description.\nThe server doesn\u2019t accept requests sent with the header \u2018Transfer-Encoding\u2019 = \u2018chunk\u2019.\nI\u2019ve tried to fix this on the VPS, but couldn\u2019t find a reliable way to do it.\nBut you can turn it off in the Android code.\nOn UploadService.java, around line 270, remove the line conn.setChunkedStreamingMode(0);\nI tried it and it works just fine. I didn't have much time to go in depth\nwith this but for anyone running into the problem just make a copy of the\nlibrary, include that in your project and just comment the line specified\nabove.\nThanks\n. Yes, I'm quite aware of that and I wouldn't recommend this either. Making a\ncopy of the library and commenting it out should be THE very last resort.\nSince a lot of things aren't exactly under my control I had to resort to\njust commenting it out. Plus I'm 99% confident the app won't upload files\nlarger than 1MB.\nOn Mar 31, 2015 9:24 PM, \"Alex Gotev\" notifications@github.com wrote:\n\nI seriously discourage removing\nconn.setChunkedStreamingMode(0);\nas it will cause errors when you try to upload big files. Here is the\nofficial Android documentation about the method:\nhttp://developer.android.com/reference/java/net/HttpURLConnection.html#setChunkedStreamingMode%28int%29\nEven if we are in 2015 now, it's incredible how hard it may get to\nproperly configure such an obvious thing as file upload, because it has to\nbe finely configured both client side and server side. I suggest you to\ncheck your VPS server configuration or to remark the lack of this feature\nto your provider, as it's important.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/25#issuecomment-88140973\n.\n. \n",
    "Android33": "I am having issues in using this library. it gives me error on some files (http://prntscr.com/72e68t screenshot) broken pipe. (http://prntscr.com/72e7pu) it runs for others perfectly\n. http://prntscr.com/72ey4c now the problem is at line 172\n. ",
    "agrawalamod": "For some reason, I still keep getting this error. I am using the latest commit (3.0) for the library with Node JS server. This is specifically for large files that exceed maximum POST data length set on server.\n. Yes, I am using the Node JS server from examples. It works perfectly fine for smaller files (<1 GB). I was using this service for a long time and never faced this issue before. Lately, this is an issue (since 2.1, I think).\n. Sure. I have enabled debugger. I have attached the output for Android logcat and Node JS server. There's no error on server as such. Server does show content-length from the header. This happens when I try to upload >2 GB of data (using multiple multipart requests in parallel or single multipart request for that matter). \nAndroid output / Server output\n. ",
    "gotev": "Can you replicate the error with the demo server provided in the examples?\n. Ok, so to be able to replicate the issue, I also need the debug log from the library (check in the wiki > Recipes) and the output from the server when the error arises. Thank you.\n. From what I see, it could be a server-side issue. Currently the node.js demo server uses multer 0.1.8. I've seen that currently 1.x is available. The first step is to upgrade multer to the latest version. Its public API has changed so some refactorings will be needed, too.\n. Please post Library version you use and a snippet reproducing the error. That issue was fixed in a previous release. I do not support or maintain older versions. I highly recommend you to upgrade to the latest 3.1 release which is the most stable and updated. Check the Setup wiki page for detailed migration instructions and the other pages for actual examples of how to use the new library version. . As of 2.0, you can simply extend MultipartUploadRequest class directly in your app's code to add the desired feature. No need to fork the library, just add the dependency and you're good to go :)\n. The problem is not reproducible anymore with release 2.0.1, so I'm closing this ticket. Open a new one if you have issues.\n. Made some tests be returning a JSON from the server and it always worked on the client side, so I'm closing this issue.\n. After some research, I discovered that JAR packaging is not possible because com.android.support:support-v4 library needs AAR packaging, since it adds some resources. That library is needed for the notifications, so if you want to use the library in eclipse you can either find a way to use AAR dependencies or checkout the project sources and link them into your app.\n. I've made some other research on the internet, to try to find the standard which defines how to handle non US-ASCII file names in Multipart upload, in response to pull request #85. What I've found corresponds to the RFCs referred to in the previous posts, so I thought:\n\nThis can't be the way it's handled today! Almost 19 years passed since November 1997 (RFC 2231). Thousands of people around the world works every day to improve the internet, its standards and its protocols. There must be a better and more modern way. Let's check how three of the major browsers handles this with some tests!\nYou can skip to the end results at the bottom of this post if you don't want to enter into the details.\n\nTest material\nSoftware\nTests have been done on Apple OS X 10.11.2 \"El Capitan\", with:\n-  Android Upload Service example node.js server (node v4.2.1 with express 4.12.0 and multer 0.1.8)\n-  Safari 9.0.2\n-  Firefox 43\n-  Google Chrome 47.0.2526.111\n-  Wireshark v2.0.0-0-g9a73b82\nWhy not Internet Explorer?\nIt's a relic from the past, it's obsolete and not really a good browser. Its development has (fortunately) stopped, as Microsoft is working on Edge, so it's pointless to test how it behaves.\nHtml pages\nnoencoding.html:\nhtml\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Multipart Upload Test</title>\n  </head>\n  <body>\n    <form action=\"http://localhost:3000/upload/multipart\" method=\"post\" enctype=\"multipart/form-data\">\n      text parameter: <input type=\"text\" name=\"param1\"><br>\n      file: <input type=\"file\" name=\"file1\"><br>\n      <input type=\"submit\" value=\"Upload\">\n    </form>\n  </body>\n</html>\nutf8.html:\nhtml\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Multipart Upload Test</title>\n  </head>\n  <body>\n    <form action=\"http://localhost:3000/upload/multipart\" method=\"post\" enctype=\"multipart/form-data\">\n      text parameter: <input type=\"text\" name=\"param1\"><br>\n      file: <input type=\"file\" name=\"file1\"><br>\n      <input type=\"submit\" value=\"Upload\">\n    </form>\n  </body>\n</html>\nthe two files are identical, except the meta tag in utf8.html.\nForm parameters\nparam1: \u0442\u0435\u0441\u0442\nfile name: \u0442\u0435\u0441\u0442 \u0444\u0430\u0439\u043b.txt with content (UTF-8 encoding):\n```\nsometext\n\u043d\u0435\u0449\u043e \u043d\u0430 \u043a\u0438\u0440\u0438\u043b\u0438\u0446\u0430\n```\nTests\nSafari 9.0.2\nnoencoding.html\nMultipart Request dump (shown in UTF-8):\n```\nPOST /upload/multipart HTTP/1.1\nHost: localhost:3000\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundarygr71kAhqi4tgO1Nx\nOrigin: file://\nConnection: keep-alive\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9\nContent-Length: 349\nAccept-Language: it-it\nAccept-Encoding: gzip, deflate\n------WebKitFormBoundarygr71kAhqi4tgO1Nx\nContent-Disposition: form-data; name=\"param1\"\n\u0442\u0435\u0441\u0442\n------WebKitFormBoundarygr71kAhqi4tgO1Nx\nContent-Disposition: form-data; name=\"file1\"; filename=\"???? ????.txt\"\nContent-Type: text/plain\nsometext\n\u043d\u0435\u0449\u043e \u043d\u0430 \u043a\u0438\u0440\u0438\u043b\u0438\u0446\u0430\n------WebKitFormBoundarygr71kAhqi4tgO1Nx--\n```\nnode.js server output:\n```\nHTTP/Multipart Upload Request from: ::ffff:127.0.0.1\nReceived headers\nhost: localhost:3000\ncontent-type: multipart/form-data; boundary=----WebKitFormBoundarygr71kAhqi4tgO1Nx\norigin: file://\nconnection: keep-alive\naccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\nuser-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9\ncontent-length: 349\naccept-language: it-it\naccept-encoding: gzip, deflate\nStarted file upload\n  parameter name: file1\n  file name: ???? ????.txt\n  mime type: text/plain\nCompleted file upload\n  parameter name: file1\n  file name: ???? ????.txt\n  mime type: text/plain\n  in: /Users/alex/workspace/android-upload-service/examples/server-nodejs/uploads/???? ????.txt\nReceived Parameters\nparam1: \u0442\u0435\u0441\u0442\n```\nutf8.html\nMultipart Request dump (shown in UTF-8):\n```\nPOST /upload/multipart HTTP/1.1\nHost: localhost:3000\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundarydg4PpHkZAtlllqGk\nOrigin: file://\nConnection: keep-alive\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9\nContent-Length: 339\nAccept-Language: it-it\nAccept-Encoding: gzip, deflate\n------WebKitFormBoundarydg4PpHkZAtlllqGk\nContent-Disposition: form-data; name=\"param1\"\n\u0442\u0435\u043a\u0441\u0442\n------WebKitFormBoundarydg4PpHkZAtlllqGk\nContent-Disposition: form-data; name=\"file1\"; filename=\"\u0442\u0435\u0441\u0442 \u0444\u0430\u0439\u043b.txt\"\nContent-Type: text/plain\nsometext\n\u043d\u0435\u0449\u043e \u043d\u0430 \u043a\u0438\u0440\u0438\u043b\u0438\u0446\u0430\n------WebKitFormBoundarydg4PpHkZAtlllqGk--\n```\nnode.js server output:\n```\nHTTP/Multipart Upload Request from: ::ffff:127.0.0.1\nReceived headers\nhost: localhost:3000\ncontent-type: multipart/form-data; boundary=----WebKitFormBoundarydg4PpHkZAtlllqGk\norigin: file://\nconnection: keep-alive\naccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\nuser-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9\ncontent-length: 339\naccept-language: it-it\naccept-encoding: gzip, deflate\nStarted file upload\n  parameter name: file1\n  file name: \u0442\u0435\u0441\u0442 \u0444\u0430\u0439\u043b.txt\n  mime type: text/plain\nCompleted file upload\n  parameter name: file1\n  file name: \u0442\u0435\u0441\u0442 \u0444\u0430\u0439\u043b.txt\n  mime type: text/plain\n  in: /Users/alex/workspace/android-upload-service/examples/server-nodejs/uploads/\u0442\u0435\u0441\u0442 \u0444\u0430\u0439\u043b.txt\nReceived Parameters\nparam1: \u0442\u0435\u043a\u0441\u0442\n```\nFirefox 43\nnoencoding.html\nMultipart Request dump (shown in UTF-8):\n```\nPOST /upload/multipart HTTP/1.1\nHost: localhost:3000\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:43.0) Gecko/20100101 Firefox/43.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\nAccept-Language: it,it-IT;q=0.9,en;q=0.8,en-US;q=0.6,ru;q=0.5,en-GB;q=0.4,bg-BG;q=0.3,bg;q=0.1\nAccept-Encoding: gzip, deflate\nDNT: 1\nConnection: keep-alive\nContent-Type: multipart/form-data; boundary=---------------------------68979457712607291332000877029\nContent-Length: 457\n-----------------------------68979457712607291332000877029\nContent-Disposition: form-data; name=\"param1\"\n\u0442\u0435\u0441\u0442\n-----------------------------68979457712607291332000877029\nContent-Disposition: form-data; name=\"file1\"; filename=\"\u0442\u0435\u0441\u0442 \u0444\u0430\u0438\u0306\u043b.txt\"\nContent-Type: text/plain\nsometext\n\u043d\u0435\u0449\u043e \u043d\u0430 \u043a\u0438\u0440\u0438\u043b\u0438\u0446\u0430\n-----------------------------68979457712607291332000877029--\n```\nnode.js server output:\n```\nHTTP/Multipart Upload Request from: ::1\nReceived headers\nhost: localhost:3000\nuser-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:43.0) Gecko/20100101 Firefox/43.0\naccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\naccept-language: it,it-IT;q=0.9,en;q=0.8,en-US;q=0.6,ru;q=0.5,en-GB;q=0.4,bg-BG;q=0.3,bg;q=0.1\naccept-encoding: gzip, deflate\ndnt: 1\nconnection: keep-alive\ncontent-type: multipart/form-data; boundary=---------------------------68979457712607291332000877029\ncontent-length: 457\nStarted file upload\n  parameter name: file1\n  file name: \u0442\u0435\u0441\u0442 \u0444\u0430\u0438\u0306\u043b.txt\n  mime type: text/plain\nCompleted file upload\n  parameter name: file1\n  file name: \u0442\u0435\u0441\u0442 \u0444\u0430\u0438\u0306\u043b.txt\n  mime type: text/plain\n  in: /Users/alex/workspace/android-upload-service/examples/server-nodejs/uploads/\u0442\u0435\u0441\u0442 \u0444\u0430\u0438\u0306\u043b.txt\nReceived Parameters\nparam1: \u0442\u0435\u0441\u0442\n```\nutf8.html\nMultipart Request dump (shown in UTF-8):\n```\nPOST /upload/multipart HTTP/1.1\nHost: localhost:3000\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:43.0) Gecko/20100101 Firefox/43.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\nAccept-Language: it,it-IT;q=0.9,en;q=0.8,en-US;q=0.6,ru;q=0.5,en-GB;q=0.4,bg-BG;q=0.3,bg;q=0.1\nAccept-Encoding: gzip, deflate\nDNT: 1\nConnection: keep-alive\nContent-Type: multipart/form-data; boundary=---------------------------12937980301591564335365471313\nContent-Length: 393\n-----------------------------12937980301591564335365471313\nContent-Disposition: form-data; name=\"param1\"\n\u0442\u0435\u0441\u0442\n-----------------------------12937980301591564335365471313\nContent-Disposition: form-data; name=\"file1\"; filename=\"\u0442\u0435\u0441\u0442 \u0444\u0430\u0439\u043b.txt\"\nContent-Type: text/plain\nsometext\n\u043d\u0435\u0449\u043e \u043d\u0430 \u043a\u0438\u0440\u0438\u043b\u0438\u0446\u0430\n-----------------------------12937980301591564335365471313--\n```\nnode.js server output:\n```\nHTTP/Multipart Upload Request from: ::1\nReceived headers\nhost: localhost:3000\nuser-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:43.0) Gecko/20100101 Firefox/43.0\naccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\naccept-language: it,it-IT;q=0.9,en;q=0.8,en-US;q=0.6,ru;q=0.5,en-GB;q=0.4,bg-BG;q=0.3,bg;q=0.1\naccept-encoding: gzip, deflate\ndnt: 1\nconnection: keep-alive\ncontent-type: multipart/form-data; boundary=---------------------------12937980301591564335365471313\ncontent-length: 393\nStarted file upload\n  parameter name: file1\n  file name: \u0442\u0435\u0441\u0442 \u0444\u0430\u0439\u043b.txt\n  mime type: text/plain\nCompleted file upload\n  parameter name: file1\n  file name: \u0442\u0435\u0441\u0442 \u0444\u0430\u0439\u043b.txt\n  mime type: text/plain\n  in: /Users/alex/workspace/android-upload-service/examples/server-nodejs/uploads/\u0442\u0435\u0441\u0442 \u0444\u0430\u0439\u043b.txt\nReceived Parameters\nparam1: \u0442\u0435\u0441\u0442\n```\nGoogle Chrome 47.0.2526.111\nnoencoding.html\nMultipart Request dump (shown in UTF-8):\n```\nPOST /upload/multipart HTTP/1.1\nHost: localhost:3000\nConnection: keep-alive\nContent-Length: 350\nCache-Control: max-age=0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8\nOrigin: null\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryHrDjBtr7cxYDaB6k\nAccept-Encoding: gzip, deflate\nAccept-Language: it-IT,it;q=0.8,en-US;q=0.6,en;q=0.4\nCookie: session=\n------WebKitFormBoundaryHrDjBtr7cxYDaB6k\nContent-Disposition: form-data; name=\"param1\"\n\u0442\u0435\u0441\u0442\n------WebKitFormBoundaryHrDjBtr7cxYDaB6k\nContent-Disposition: form-data; name=\"file1\"; filename=\"???? ?????.txt\"\nContent-Type: text/plain\nsometext\n\u043d\u0435\u0449\u043e \u043d\u0430 \u043a\u0438\u0440\u0438\u043b\u0438\u0446\u0430\n------WebKitFormBoundaryHrDjBtr7cxYDaB6k--\n```\nnode.js server output:\n```\nHTTP/Multipart Upload Request from: ::1\nReceived headers\nhost: localhost:3000\nconnection: keep-alive\ncontent-length: 350\ncache-control: max-age=0\naccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8\norigin: null\nupgrade-insecure-requests: 1\nuser-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36\ncontent-type: multipart/form-data; boundary=----WebKitFormBoundaryHrDjBtr7cxYDaB6k\naccept-encoding: gzip, deflate\naccept-language: it-IT,it;q=0.8,en-US;q=0.6,en;q=0.4\ncookie: session=\nStarted file upload\n  parameter name: file1\n  file name: ???? ?????.txt\n  mime type: text/plain\nCompleted file upload\n  parameter name: file1\n  file name: ???? ?????.txt\n  mime type: text/plain\n  in: /Users/alex/workspace/android-upload-service/examples/server-nodejs/uploads/???? ?????.txt\nReceived Parameters\nparam1: \u0442\u0435\u0441\u0442\n```\nutf8.txt\nMultipart Request dump (shown in UTF-8):\n```\nPOST /upload/multipart HTTP/1.1\nHost: localhost:3000\nConnection: keep-alive\nContent-Length: 339\nCache-Control: max-age=0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8\nOrigin: null\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryUoSMJPN5VXIDa2Vy\nAccept-Encoding: gzip, deflate\nAccept-Language: it-IT,it;q=0.8,en-US;q=0.6,en;q=0.4\nCookie: session=\n------WebKitFormBoundaryUoSMJPN5VXIDa2Vy\nContent-Disposition: form-data; name=\"param1\"\n\u0442\u0435\u0441\u0442\n------WebKitFormBoundaryUoSMJPN5VXIDa2Vy\nContent-Disposition: form-data; name=\"file1\"; filename=\"\u0442\u0435\u0441\u0442 \u0444\u0430\u0439\u043b.txt\"\nContent-Type: text/plain\nsometext\n\u043d\u0435\u0449\u043e \u043d\u0430 \u043a\u0438\u0440\u0438\u043b\u0438\u0446\u0430\n------WebKitFormBoundaryUoSMJPN5VXIDa2Vy--\n```\nnode.js server output:\n```\nHTTP/Multipart Upload Request from: ::1\nReceived headers\nhost: localhost:3000\nconnection: keep-alive\ncontent-length: 339\ncache-control: max-age=0\naccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8\norigin: null\nupgrade-insecure-requests: 1\nuser-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36\ncontent-type: multipart/form-data; boundary=----WebKitFormBoundaryUoSMJPN5VXIDa2Vy\naccept-encoding: gzip, deflate\naccept-language: it-IT,it;q=0.8,en-US;q=0.6,en;q=0.4\ncookie: session=\nStarted file upload\n  parameter name: file1\n  file name: \u0442\u0435\u0441\u0442 \u0444\u0430\u0439\u043b.txt\n  mime type: text/plain\nCompleted file upload\n  parameter name: file1\n  file name: \u0442\u0435\u0441\u0442 \u0444\u0430\u0438\u0306\u043b.txt\n  mime type: text/plain\n  in: /Users/alex/workspace/android-upload-service/examples/server-nodejs/uploads/\u0442\u0435\u0441\u0442 \u0444\u0430\u0439\u043b.txt\nReceived Parameters\nparam1: \u0442\u0435\u0441\u0442\n```\nResults\nSafari 9.0.2 and Google Chrome 47.0.2526.111\nIf charset is not specified, non US-ASCII characters in multipart headers are replaced by ?. Parameter values are converted in HTML Entities. The content of the file gets encoded using the original file encoding.\nIf charset UTF-8 is specified, all the multipart headers and parameter values are encoded in UTF-8.\nThe content of the file gets encoded using the original file encoding.\nFirefox 43\nIf charset is not specified, non US-ASCII characters in multipart headers and parameter values are converted in HTML Entities. The content of the file gets encoded using the original file encoding.\nIf charset UTF-8 is specified, all the multipart headers and parameter values are encoded in UTF-8. The content of the file gets encoded using the original file encoding.\nFinal thoughts\nAs I've seen from the tests, if the charset is not specified, US-ASCII is used. Non US-ASCII characters in file names can be replaced by ? or with their HTML Entity representation. Personally I prefer the first option, which is adopted by Safari and Google Chrome. Non US-ASCII characters in parameter values are replaced with their HTML Entity representation.\nSo, to make the library act like one of the modern browsers:\n-  Add a method called setUtf8Charset() in MultipartUploadRequest class. The method sets an internal boolean flag, called for example utf8request, which value is false by default\n-  In MultipartUploadTask, implement the following:\n  - when utf8request = false, convert all the parameter values in html entities.\n  - when utf8request = true, encode all the multipart headers and parameter values in UTF-8\nThis way it will be simple for the library user to use UTF-8 when having to deal with non US-ASCII character encoding, beding sure that every value (file name, parameter name or parameter value) will be properly encoded.\n. @asafbennatan 2.0.1 just released. Update your dependencies and you will be able to set UTF 8 Charset in your requests :smiley: \n. All the needed namespace refactorings has been done (code & docs)! Now the library is hosted on jcenter and maven central as well.\nMaven\n<dependency>\n  <groupId>net.gotev</groupId>\n  <artifactId>uploadservice</artifactId>\n  <version>2.0</version>\n  <type>aar</type>\n</dependency>\nGradle\ndependencies {\n    compile 'net.gotev:uploadservice:2.0'\n}\n. Hi! Checked your code. Basically you have added the setting to encode the header with a different charset. With which server-sides have you tested it? I'm not sure it's the correct way of implementing it, as the server needs a way to detect which encoding has been used on the client-side. If you can point me to some RFC or docs you have read on how to do that, it will be helpful, as I want to keep the library as standard compliant as possible. Thank you!\n. Thanks for the idea, which has been now implemented in #91. From the next 2.1 release you will be able to use utf 8 charset.\n. The best you could do is add all the files in a single Http/Multipart request and you will have a single notification which shows overall progress. The demo app creates a single request for every selected file just as a proof of concept. Just call\njava\n.addFileToUpload(\"/absolute/path/to/your/file\", \"your-param-name\")\nmultiple times on the upload request object.\n. Too little info to be able to help you or replicate the error. Please check this.\n. You mean restarting the upload if an error occurs?\n. As shown in the example here, this is accomplished by calling setMaxRetries method on your upload request. If the upload fails, it will be automatically retried by the library without notifying you errors for the number of times that you specify. If the upload fails even after those retries, your broadcast receiver's onErrormethod will be called. \nPractice suggests that if a request fails for more than 2 or 3 times in a row, maybe the device is not connected to the internet or your server is not reachable at that moment, so you have to implement a proper strategy to handle that. I suggest you to read here to get a hint.\n. Please read this and provide some additional info. If you received Bad Request, check your server implementation, too. The library supports API >= 10\n. Until you provide some details about how you've configured the dependencies in your project and which exact code you use to make a request to your server, I'm unable to help you. I actively use 2.0 release without problems in production.\n. with 2.0 you add file like this:\njava\naddFileToUpload(bean.getLocalFilePath(), \"media\")\nand with 1.3.1:\njava\naddFileToUpload(bean.getLocalFilePath(), \"media\", \n            System.currentTimeMillis() + \".mp4\", \n            ContentType.APPLICATION_OCTET_STREAM);\nthat's the only difference I see in your code. In 2.0, when you use addFileToUpload(String, String), you are leaving the mime type detection to the system and the filename in the multipart header will be equal to the original file name on storage. In 1.3.1 you explicitly add the extension .mp4, but not in 2.0, so if the original file name does not have mp4 extension and your server performs some validation on extension, it may refuse your request. First thing to try is to explicitly set the content type and file name when using 2.0. If still does not work on Jelly Bean, I think the best thing to do is perform a tcpdump of a request made with 2.0 on KitKat and above and a tcpdump of a request made with 2.0 on JellyBean. The difference between the two will tell us where the problem is, so we can fix it and you can use the latest 2.0 release.\n. Made a test with latest master revision of the library and the example node.js server. \nDumped the requests with Wireshark.\nCode to generate the request (inside an Activity):\njava\nnew MultipartUploadRequest(this, \"http://10.0.2.2:3000/upload/multipart\")\n                        .addFileToUpload(fileToUploadPath, \"file1\")\n                        .setCustomUserAgent(\"UploadServiceDemo/2.0\")\n                        .addParameter(\"param1\", \"value1\")\n                        .setMaxRetries(2)\n                        .startUpload();\nTest on Android 4.2.2 (API 17)\nTest #1\nParameters:\nparam1=value1\nFiles: Text file without extension\n```\nPOST /upload/multipart HTTP/1.1\nConnection: close\nContent-Type: multipart/form-data; boundary=-------AndroidUploadService1454961376057\nUser-Agent: UploadServiceDemo/2.0\nHost: 10.0.2.2:3000\nAccept-Encoding: gzip\nContent-Length: 331\n---------AndroidUploadService1454961376057\nContent-Disposition: form-data; name=\"param1\"\nvalue1\n---------AndroidUploadService1454961376057\nContent-Disposition: form-data; name=\"file1\"; filename=\"test\"\nContent-Type: application/octet-stream\ntest file\nwith something in it\n---------AndroidUploadService1454961376057--\n```\nTest #2\nParameters:\nparam1=value1\nFiles: Text file with .txt extension\n```\nPOST /upload/multipart HTTP/1.1\nConnection: close\nContent-Type: multipart/form-data; boundary=-------AndroidUploadService1454961490761\nUser-Agent: UploadServiceDemo/2.0\nHost: 10.0.2.2:3000\nAccept-Encoding: gzip\nContent-Length: 321\n---------AndroidUploadService1454961490761\nContent-Disposition: form-data; name=\"param1\"\nvalue1\n---------AndroidUploadService1454961490761\nContent-Disposition: form-data; name=\"file1\"; filename=\"test.txt\"\nContent-Type: text/plain\ntest file\nwith something in it\n---------AndroidUploadService1454961490761--\n```\nin both cases I havent had any errors. Retried the same on Android API 19, and the requests are exactly the same, except for the boundary which is different, so I can't reproduce your issue. Have you managed to solve it by following the indications which I've posted?\n. Hi! I've seen the commit included in the pull request. Is there some benefit to explicitly add @aar in the compile declaration? I'm currently using the library in many active projects and never had to specify that. The library has only aar artifact, since it uses android support libraries.\n. Read some docs. Maybe adding @aar can help to avoid behaviors like this: https://github.com/gotev/android-upload-service/wiki/Setup#android-support-libraries-version-mismatch\nIs something similar which happened to you? Sorry bothering you with questions, but I'm just trying to understand better this gradle directive :)\n. Hi!\nAndroid Upload Service uses Android's native HttpUrlConnection to perform requests. To use cookies, all you have to do is place the following two lines:\njava\nCookieManager cookieManager = new CookieManager();\nCookieHandler.setDefault(cookieManager);\nsomewhere before any of your network requests. I would put that into the Application subclass. This way cookie management should be done automatically for you and you don't have to set them manually in the requests. Check the official documentation (Sessions with cookies paragraph). Try and let me know.\n.  @rohannexialabs your question is a little bit OT, but if I was in your shoes I would have done the following:\nMy server supports HTTP/2 and SPDY and I'm targeting Android API < 19?\n- Yes, then find a way to get the cookies associated to the domain of the upload server from the OkHttp Cookie Manager, and manually set the Cookie header with the string value got from there in the upload requests\n- No, get rid of the OkHttp stack underneath Volley and use standard HurlStack, as OkHttp is the default implementation used in Android 4.4+ (API >= 19) to provide HttpUrlConnection. Then use CookieManager as described in one of the preceding posts. Cookie management will be done automatically.\n. Of course it's not working, you should be setting cookie header like this:\njava\n.addHeader(\"Cookie\", \"webpy_session_id=\" + sessionId)\nIf you have multiple cookies, then separate them with ;, for example:\ncookie1=somevalue;cookie2=someothervalue\nalso, setMethod(\"POST\") is useless here as it's the default HTTP method used in Multipart Upload. JavaDocs here.\n. @rohannexialabs This doesn't seem to me to be a bug in Android Upload Service, as all you do is set a header with a value. If the server does not recognize the session, then you're passing the wrong value. What I suggest you to do in this case, instead of blindlessly trying solutions, is to make a dump with Wireshark and capture:\n- the response to the authentication request you make to your server to start the session. You should see a Set-Cookie header in the response\n- the http multipart request you make to your server with android upload service. Check if the Cookie header contains the cookie expected by your server (the one which is contained in the Set-Cookie header)\nAlso, log the parameters you pass into the requests.\n. Fine! Wireshark is always your best ally when something is not working as expected :)\nIf you could post a snippet which shows how to properly get the cookie from OkHttp and set that into the upload request, I will include that in the Wiki as a recipe for future reference.\n. @rohannexialabs Thank you. Could you also post the code snippet with which you get sessionId out of OkHttp's Cookie Manager? So I could make a complete recipe which shows an example of an authentication request which returns a cookie and how to use that in the upload request\n. Added a section in the Wiki, with both examples: https://github.com/gotev/android-upload-service/wiki/Advanced-topics#cookies\n@rohannexialabs I had to modify your code a little bit to make it generic and usable outside your context\n. @elemprod @rohannexialabs with the just released 2.1 release, the library natively supports OkHttp stack, so workarounds are not needed anymore to manage cookies. You can simply pass your OkHttpClient instance when you initialize the library. More info on Wiki Setup page.\n. As of now, this is no longer a dream, it's reality and it works exactly like described.\n. The gist is available here: https://gist.github.com/gotev/6784c1303793c6ee9e56\n. Updated wiki (recipes page)\n. Check this for setup instructions, in which you can find how to add parameters, and this to be sure you've setup everything correctly. After that, if you still have problems, do a dump with Wireshark and report what you've discovered here.\n. Ok, so post here the code you wrote to make the request and the Android API version on which you are running it.\n. Checked https://abc.ae/phpfiles/progress_file_upload.php and you have either expired, non trusted or self signed SSL certificates, so by default for security reasons, the library does not accept that and your upload does not happen. In development stage, use this but get valid certificates before going in production. Actually, the class mentioned in that gist is part fo the 2.0.1 release, but I've just dropped that from current master due to #96\n. custom logging is in schedule #97 :smile: \nHave you fixed your certificate exceptions? Also when the exception is ignored and I point my browser at the URL you provided, I got this:\n\nWhich doesn't seem to be the error output of the PHP script you provided. Also, are you able to perform multipart upload with other tools to the same URL? \n. Ok :+1: If you are in a test environment then what would be helpful to address a possible bug in the library, is to make a dump with wireshark or tcpdump when the upload succeeds using one of your other tools or libraries, then repeat the same with android upload service. The difference between the two dumps will tell you where exactly the problem is. Also, how big is the file you're uploading?\n. I'm curious now, what caused the upload issue?\n. I've experienced the same behaviour like you described in the following condition on Android 4.4+:\n- an upload is running in the background without a notification\n- the user swipes out the app from the pager\nThis happens because when the user swipes out the app from the pager, the root intent used to launch the app gets removed, and so the app's main execution thread is stopped. When you are running an upload without a notification, or you have set UploadService.EXECUTE_IN_FOREGROUND = false, the service's main thread runs in the same thread as your app, and so it gets stopped. A solution for this case with the current release is to set a notification configuration for the upload. The progress will be displayed in the notification center and the service will run in the foreground (By default UploadService.EXECUTE_IN_FOREGROUND = true). When you swipe out the app, the upload should continue.\nI've done some research about how to prevent that the service gets stopped when the user swipes out the app while it runs in the background. A possible solution could be this, but testing is needed.\nJust to get more insights of your use case...when you get back into your app, the upload resumes from where is was, gets restarted from the beginning, or nothing happens until you explicitly trigger a new upload?\n. Yeah, it's exactly the same behaviour. I also have experienced that on Android 4.4, 5.1 and 6.0 but to date I haven't found a way to prevent that. It's standard Android behaviour. When you swipe out the app, the process gets killed by the system. Since the service is bound to the app's process, it gets killed, too, so the current upload freezes. If you don't swipe out the app from the pager, but you leave it there while using some other app, it will work fine. Apps like Telegram or WhatsApp have background services with a persistent job queue and support for resume, so when you swipe them out and the services gets restarted, they continue their work from where it was left. Unfortunately, standard HTTP/Multipart upload does not support resume, so even if you implement a persistent job queue, the last upload will be restarted. I'm open to ideas if you have some.\nThere are some tricks around, like adding a periodic task with AlarmManager or relaunching the service from another one, but they sound more like a hack and so I don't consider them as options.\n. Currently the service has START_STICKY policy. Another option could be switching to  START_REDELIVER_INTENT so the last intent sent to the service will be automatically redelivered upon restart. That, however, is a partial solution, as the last running upload will be restarted from the beginning. Let me know if you discover something new or if you find a way to not interrupt the background service when the app gets swiped out. I'll do some research and tests and I'll report my results here.\n. @K-7 Have you discovered something? I've made some tests, but when you swipe out the app, I've not found a way to prevent the service from being killed\n. Got it. However, that is not always possibile (e.g. the connection between your device and the server drops, the server process crashes unexpectedly, ..).\nCould you please provide a minimal server implementation with which to reproduce this exact use case?\n. @makunomark Thank you! If you could provide the server side code with an example to reproduce your use case, we could find a way to handle it and to include the needed modifications in milestone 2.1, which I plan to release as soon as I'm done with #95 \n. @makunomark Implemented endpoint which responds with 401 and a JSON\nRequest with cURL:\ncurl -d\"a=1\" -D - http://localhost:3000/upload/forbidden\nResponse:\n```\nHTTP/1.1 401 Unauthorized\nX-Powered-By: Express\nContent-Type: application/json; charset=utf-8\nContent-Length: 85\nETag: W/\"55-mWd+MzHLLzpnX6S7f6W1cQ\"\nDate: Thu, 31 Mar 2016 14:17:19 GMT\nConnection: keep-alive\n{\"success\":false,\"message\":\"this endpoint always returns 401! It's for testing only\"}\n```\nBy using the latest library snapshot with demo app, what I get in the LogCat is the following:\nD/UploadService: HttpUploadTask - Starting upload task with ID c69db9b1-df8b-429b-ba2a-be25481745d0\nD/UploadService: HurlStackConnection - creating new connection\nD/UploadService: HttpUploadTask - Broadcasting upload progress for c69db9b1-df8b-429b-ba2a-be25481745d0 Uploaded bytes: 163 out of 71071\nI/UploadServiceDemo: The progress of the upload with ID c69db9b1-df8b-429b-ba2a-be25481745d0 is: 0\nD/UploadService: HttpUploadTask - Server responded with HTTP 401 to upload with ID: c69db9b1-df8b-429b-ba2a-be25481745d0\nD/UploadService: HttpUploadTask - Broadcasting upload completed for c69db9b1-df8b-429b-ba2a-be25481745d0\nI/UploadServiceDemo: Upload with ID c69db9b1-df8b-429b-ba2a-be25481745d0 is completed: 401, {\"success\":false,\"message\":\"this endpoint always returns 401! It's for testing only\"}\nD/UploadService: UploadService - c69db9b1-df8b-429b-ba2a-be25481745d0 now un-holded the foreground notification\nD/UploadService: UploadService - All tasks finished. UploadService is about to shutdown...\nSo, when the upload fails with a 4xx error code, the notification correctly displays the error message and you will get the response in BroadcastListener's onCompleted method as expected\njava\n@Override\npublic void onCompleted(String uploadId, int serverResponseCode, byte[] serverResponseBody) {\n    Log.i(TAG, \"Upload with ID \" + uploadId + \" is completed: \" + serverResponseCode + \", \"\n               + new String(serverResponseBody));\n}\nTherefore, I consider this issue resolved.\n. Please read the wiki and check the docs before posting issues like this, because the answer was already here. I'm closing this one.\n. The upload progress rate depends entirely on how much data you are uploading and your bandwidth. The upload transfers 4KB chunks at a time, as you can see in HttpUploadTask class. So, if you have a little file to upload and a large bandwidth, that's what you will see. If you try to upload a bigger file (e.g. 50MB) with the same bandwidth, you will notice the progress. It's perfectly normal behaviour. In addition to that, a throttling on notification update has been done to update the notification a maximum of 6 times in a second, as you can see here, to prevent locking your app's main thread.\n. Since the service communicates status updates with broadcast intents, it's not possible to have callbacks with the current release. However, you can achieve the same behaviour by extending the UploadServiceBroadcastReceiver to filter only the events for a specific uploadID:\n``` java\npublic class SingleUploadBroadcastReceiver extends UploadServiceBroadcastReceiver {\npublic interface Delegate {\n    void onProgress(int progress);\n    void onProgress(long uploadedBytes, long totalBytes);\n    void onError(Exception exception);\n    void onCompleted(int serverResponseCode, byte[] serverResponseBody);\n    void onCancelled();\n}\n\nprivate String mUploadID;\nprivate Delegate mDelegate;\n\npublic void setUploadID(String uploadID) {\n    mUploadID = uploadID;\n}\n\npublic void setDelegate(Delegate delegate) {\n    mDelegate = delegate;\n}\n\n@Override\npublic void onProgress(String uploadId, int progress) {\n    if (uploadId.equals(mUploadID) && mDelegate != null) {\n        mDelegate.onProgress(progress);\n    }\n}\n\n@Override\npublic void onProgress(String uploadId, long uploadedBytes, long totalBytes) {\n    if (uploadId.equals(mUploadID) && mDelegate != null) {\n        mDelegate.onProgress(uploadedBytes, totalBytes);\n    }\n}\n\n@Override\npublic void onError(String uploadId, Exception exception) {\n    if (uploadId.equals(mUploadID) && mDelegate != null) {\n        mDelegate.onError(exception);\n    }\n}\n\n@Override\npublic void onCompleted(String uploadId, int serverResponseCode, byte[] serverResponseBody) {\n    if (uploadId.equals(mUploadID) && mDelegate != null) {\n        mDelegate.onCompleted(serverResponseCode, serverResponseBody);\n    }\n}\n\n@Override\npublic void onCancelled(String uploadId) {\n    if (uploadId.equals(mUploadID) && mDelegate != null) {\n        mDelegate.onCancelled();\n    }\n}\n\n}\n```\nThen, in your activity:\n``` java\npublic class YourActivity extends Activity implements SingleUploadBroadcastReceiver.Delegate {\nprivate static final String TAG = \"AndroidUploadService\";\n\nprivate final SingleUploadBroadcastReceiver uploadReceiver =\n    new SingleUploadBroadcastReceiver();\n\n@Override\nprotected void onResume() {\n    super.onResume();\n    uploadReceiver.register(this);\n}\n\n@Override\nprotected void onPause() {\n    super.onPause();\n    uploadReceiver.unregister(this);\n}\n\npublic void uploadMultipart(final Context context) {\n    try {\n        String uploadId = UUID.randomUUID().toString();\n        uploadReceiver.setDelegate(this);\n        uploadReceiver.setUploadID(uploadId);\n\n        new MultipartUploadRequest(context, uploadId, \"http://upload.server.com/path\")\n            .addFileToUpload(\"/absolute/path/to/your/file\", \"your-param-name\")\n            .setNotificationConfig(new UploadNotificationConfig())\n            .setMaxRetries(2)\n            .startUpload();\n\n    } catch (Exception exc) {\n        Log.e(TAG, exc.getMessage(), exc);\n    }\n}\n\n@Override\npublic void onProgress(int progress) {\n    //your implementation\n}\n\n@Override\npublic void onProgress(long uploadedBytes, long totalBytes) {\n    //your implementation\n}\n\n@Override\npublic void onError(Exception exception) {\n    //your implementation\n}\n\n@Override\npublic void onCompleted(int serverResponseCode, byte[] serverResponseBody) {\n    //your implementation\n}\n\n@Override\npublic void onCancelled() {\n    //your implementation\n}\n\n}\n```\nNot tested, so give it a try.\n. You're welcome :smile: \n. Open a new issue and fill in the requested information. Updated example of SingleUploadBroadcastReceiver here: https://github.com/gotev/android-upload-service/wiki/Monitoring-upload-status#single-upload-broadcast-receiver. Check out the demo example app and refer to the instructions provided in the \"monitoring\" wiki page. Also, enabling debug log may help you. You shouldn't call that method. Just build up the upload request and start it. Make sure your broadcast receiver is registered. Check the recipes and monitoring wiki pages for detailed instructions. If you don't receive any event, probabily something is not setup.. Hi! You can do that by listing all the files in a folder with a filter for mp4 files, using Java's File class. After you've done that, just add all the files in the list to your request by calling addFileToUpload multiple times. Check the Recipes in the Wiki. \nI'm closing this ticket, as this issue tracker is used to track library issues and improvements, but this is a \"how to\" question. Next time, please ask such questions on StackOverflow, thank you :)\n. Have you read the asking for help page in the wiki? This is not the proper place to ask for support :(\nCheck the demo app provided in the examples and the wiki and I'm sure you will succeed. If you're trying to get a Context inside a service or activity, simply pass this.\n. Post your code\n. Marked as invalid and closed due to lack of feedback and code with which to replicate the problem. \n. It's a good idea! From what I've read, it's just a matter of adding setGroup statement when the notifications are generated. If you want you can implement that and then send me a pull request\n. Yeah, I agree with your analysis\n. The modification will be included in the upcoming 2.1 release. Thank you for the suggestion!\n. No description provided. Also, Android Upload Service does not use any database, so the problem clearly resides in the app using the library. Marking the issue as invalid and closing it.\n. @kevinmeresse Thank you for the pull request! I've seen the changes you've done and I have one thing to say. I think it would be better to get all the response headers and return them in the onCompleted listener as a Map<String, String>, instead of just the Location. Returning only the location seems somewhat too custom and since the public API is going to be changed, I think it would be better to provide the as generalized as possible implementation. What do you think about?\n. @kevinmeresse I managed to implement getting the response headers. The modification will be available in the 3.0 release, so I'm closing this pull request.\n. 1. Can you sistematically replicate this behaviour every time with the same file?\n2. Android 4.4.2 uses OkHttp 1.5 internally to provide HttpUrlConnection implementation. That's pretty old. Try to switch to OkHttp stack implementation (which uses OkHttp 3.2.0), by following this guide, without changing anything else and tell me if you still have the same behaviour\n. @quantum0813 I think the problem is exactly the same reported here. It's a bug in the old OkHttp implementation used by Android 4.4, which has been fixed, so try to switch the http stack as I've described and let me know. If you target multiple android versions, then I definitely advise you to do that, to have a consistent networking behaviour.\n. @quantum0813 are your tests successful?\n. Closing due to lack of feedback. Made some tests with the proposed solution, and the problem doesn't occur. Read this\n. #### Changes made to UploadServiceBroadcastReceiver\nThe following two methods have been dropped:\njava\npublic void onProgress(String uploadId, int progress)\npublic void onProgress(final String uploadId, final long uploadedBytes, final long totalBytes)\nin favor of:\njava\npublic void onProgress(UploadInfo uploadInfo)\nwhich provides the same data exposed by the two older methods, plus:\n- upload task start time in milliseconds\n- upload task elapsed time in milliseconds\n- upload rate in Kbit/s\n- number of retries that have been made\n- list of all the successfully uploaded files\nThe following method signature:\njava\npublic void onError(String uploadId, Exception exception)\nhas been changed to:\njava\npublic void onError(UploadInfo uploadInfo, Exception exception)\nThe following method signature:\njava\npublic void onCompleted(String uploadId, int serverResponseCode,\n                        byte[] serverResponseBody)\nhas been changed to:\njava\npublic void onCompleted(UploadInfo uploadInfo,\n                        int serverResponseCode, byte[] serverResponseBody)\nThe following method signature:\njava\npublic void onCancelled(String uploadId)\nhas been changed to:\njava\npublic void onCancelled(UploadInfo uploadInfo)\n. @moraisholanda It's not been released yet \ud83d\ude00 I'll release it together with 3.0 release when it's ready. I'll close the ticket once it's released.\n. @moraisholanda hopefully before the end of may, as I'm really busy in this period. I'll notify you once 3.0 is released.\n. @moraisholanda OT here, open a new issue instead\n. Thank you for the report. Modified Setup wiki page \n. Which Http Stack are you using with Android Upload Service and on which Android version does this happen?  Are your uploads successful at the end? By what I see from your report, it seems that something happened on your device network connection during the first upload attempt, because when you have java.net.ProtocolException: unexpected end of stream it usually means a network error between your device and your server. How is the device connected to your server when this happens? WiFi or Mobile (Edge, 3G, 4G)?\n. Ok, so from what you say one request is sucessful, but when you make 141 requests, you get that error from your server. I need to know:\n- on which Android version does this happen, \n- with which Http Stack (HurlStack or OkHttpStack)\n- with which Android Upload Service version\nEnable also library debug log, as described here and post everything that Upload Service outputs when you perform the requests which throws the Exceptions. When posting code, logs or stack traces, please use the following Markdown syntax to improve readability:\n\n```java\nyour code, log or stack trace\n```\n\nThank you :)\n. Thank you for the detailed report :+1: \nAt this point, it will be useful to test your code against Android Upload Service demo server, to see if the exact same error happens, so I can replicate it too. To make this test, start the node.js demo server on your computer, by following this guide. It won't take you more than 5 minutes if you need to also install node.js. When started, the node.js demo server will show you the full URLs on which it listens for incoming connections. Just modify this line in your code:\njava\nfinal String serverUrlString = \"http://\" + serverURL + \"/main.php?nm=appandroid&app_id=android\";\nwith:\njava\nfinal String serverUrlString = \"http://\" + YOUR_COMPUTER_IP + \":3000/upload/multipart\";\nthen run your app and post here what you get in the LogCat.\n. Also, by analyzing your stack trace, I've noted this.\njava\nD/UploadService: UploadFile - Using original file name: null\nwhich I think is because you are doing:\njava\n.addFileToUpload(filePathName.getPath().replaceAll(\"\\\\s+\", \"_\"), paramNameString)\nThis way if you have a file which has spaces in it, you are substituting them with _ and so when the Upload Service tries to read the file from disk, it fails. Just use filePathName.getAbsolutePath() here.\n. I'm glad to know that it's not a bug in the library :) I've seen also the code you posted, and I suggest you to read the Wiki, because this is wrong;\njava\n        String uploadCurrentFile = uploadRequest.startUpload();\n        if (uploadCurrentFile != null && sendToServer()) {\n            uploadRequest.setAutoDeleteFilesAfterSuccessfulUpload(true);\n        }\n        else uploadRequest.setAutoDeleteFilesAfterSuccessfulUpload(false);\nYou are starting the upload request, and then you are setting setAutoDeleteFilesAfterSuccessfulUpload afterwards, so in this case, as the docs says, no file is going to be deleted automatically. Remember that the request objects follows the Builder logic, so startUpload must be the last method you call on the request object. Every other method you call on that object after you called startUpload is not going to have any effect.\nCheck out the demo Android project that you can find in the examples. I'm closing this issue as the tracker here is used only for bug report and library development. This is much more of a support request at this point, and the right place to ask is on StackOverflow :)\n. @vanloc0301 just one more thing...I suggest you to call your business logic methods from the onCompleted method of the UploadServiceBroadcastReceiver and not like you've shown in your post. The onCompleted method is the only place in which you know that the upload succeeded.\n. Actually, how to achieve this is already explained in the wiki. You have to create a subclass of UploadServiceBrodcastReceiver, add your business logic in it and then register it in your manifest. I've added some more explanations to make it clear that that's the way to go if you want to listen for events outside your activities and services.\nIf you want to listen for events in one of your services, you can do that, too, and the docs linked by the wiki page already specify exactly where you should register and unregister the listener.\n. Of course. What you need to do is to save the content of the binary upload inside a file. In your case:\njava\n{\n    \"name\": \"Andrew\",\n    \"picture\": {\n        \"name\": \"...profile.png\",\n        \"__type\": \"File\"\n    }\n}\nand then add it to the binary upload request, together with the three headers. \nHowever, what you posted is a simple POST request, and Android Upload Service is not the best suited library for that. Maybe you should check Retrofit or OkHttp for simple POST requests which does not involve a large amount of data.\n. The library does not overwrite OkHttp interceptors, as you can see here. Post your code. Also enable library logging as described in the wiki.\n. @emanzanoaxa have you solved your issue?\n. Have you tried performing the parallel uploads by using the provided demo server? I advise you to do so, to be able to replicate the same condition and be sure that it doesn't depend on the server-side. I've never had such issues and I don't think it's a matter of race condition. Every Upload task is executed in its own thread. You can get an insight on how things works internally by looking at the developer's manual section in the wiki (it's still work in progress). It refers to the current master branch, but the architecture is the same as 2.1, except that I've introduced base classes which are independent from the protocol used to perform upload, to be able to write also other protocols, like FTP, as plugins, and rely on all the existing automations and features provided by the upload service.\n. I can confirm that with the following code used to set up network interceptors in OkHttp, the headers myheader and mysecondheader are not set in the requests.\n``` java\nOkHttpClient client = new OkHttpClient.Builder()\n        .followRedirects(true)\n        .followSslRedirects(true)\n        .retryOnConnectionFailure(true)\n        .connectTimeout(15, TimeUnit.SECONDS)\n        .writeTimeout(30, TimeUnit.SECONDS)\n        .readTimeout(30, TimeUnit.SECONDS)\n        .addNetworkInterceptor(new Interceptor() {\n            @Override\n            public Response intercept(Chain chain) throws IOException {\n                Request request = chain.request();\n                Request newRequest;\n            newRequest = request.newBuilder()\n                        .addHeader(\"myheader\", \"myvalue\")\n                        .addHeader(\"mysecondheader\", \"mysecondvalue\")\n                        .build();\n            return chain.proceed(newRequest);\n        }\n    })\n    .cache(null)\n    .build();\n\nUploadService.HTTP_STACK = new OkHttpStack(client);\n```\nI think the reason resides in how OkHttpStackConnection is implemented, as it uses the HttpUrlConnectionImpl class which wraps the OkHttpClient and I don't know how it handles the interceptors chains at the moment. Setting the headers in the BinaryUploadRequest and MultipartUploadRequest surely works.\n. @hendrawd have you already checked this and this ? Post the code you use with which I could replicate your issue.\n. @hendrawd Correct me if I'm wrong.\n1. You have setup Volley + OkHttp3\n2. You setup a persistent cookie store on HttpUrlConnection\n3. You use HurlStack with Upload Service\n3. You perform an authentication request to your server with Volley\n4. You try to upload a file with an Upload Service request\n. @hendrawd so, with your setup, Upload Service is using HttpUrlConnection stack. Cookies are handled internally by Volley + OkHttp3 when you perform authentication requests. No cookies are stored in the HttpUrlConnection's Cookie Manager, which is used by Upload Service, so the behaviour you are observing at the moment is not a bug, but a consequence of how everything is setup.\nI can think of two options here:\n1. After that you setup Volley + OkHttp3, pass the same OkHttpClient instance also to the Upload Service (be sure to add the needed gradle dependency that you can get from the Setup wiki page):\njava\n   UploadService.HTTP_STACK = new OkHttpStack(client);\nand then perform the upload requests.\n2. Leaving your setup as is now, find a way in which you could get cookies from Volley + OkHttp3, and set them in the Upload Service requests\n. @emanzanoaxa Investigated further and found the answer. As stated here interceptors do not work with OkUrlFactory. By looking at how it works internally I discovered that it instantiates the HttpURLConnectionImpl the same way as the Upload Service implementation does, so interceptors are not supported and that's why you could not set headers from there. I think that a total rewrite of the uploadservice-okhttp module is needed to support interceptors.\n. @mandrachek You're welcome to help developing ok-http module to support also interceptors. The library was originally designed to work with HttpUrlConnection. OkHttp was added later with the HttpUrlConnection implementation. To support all the OkHttp features, it's needed to totally rewire the networking layer to work with the OkHttp's request/response API.\n. After https://github.com/gotev/android-upload-service/commit/290f4f89168b7d29005209ceda6f240bc445cf6a and https://github.com/gotev/android-upload-service/commit/f9358f1f1e669cc88816cd7287d230e8e25bc475, this example works: https://github.com/gotev/android-upload-service/issues/122#issuecomment-216577406 and has been added into the App implementation of the demo app.\nso request interceptors are now supported. This has already been asked and responded in #104 (also reported in the wiki) if you want a quick way to achieve the same behaviour as with callbacks. \nSome design decisions has to be made to have callbacks without the broadcaster. Every Upload task runs in a separate background thread (you can see the internal architecture in the developer's manual page in the wiki), which means that if I add a listener to it, events will be dispatched in the same thread, so you have to make sure you are in your UI thread if you want to update your UI and if you do something blocking in the listener, the upload will be also affected. As it is now, event handling happens in the UI thread and the upload in a background thread.\nI'm open to new ideas and software design, so if you have something to propose, you're welcome!\n. So, your idea will be to have something like:\njava\nnew MultipartUploadRequest(context, \"http://server.com\")\n    .addFileToUpload(\"/path/to/file\", \"param-name\")\n    .setDelegate(delegate)\n    .start();\nWhere delegate is an instance of a class which implements the same methods exposed by the actual UploadServiceBroadcastReceiver.\nAs you can see from the architecture in the developer's manual on the wiki, the UploadRequest classes generates an Intent which is sent to the service. The intent gets processed by the UploadService which instantiates a new task in a new thread. The challenge here is how to pass the delegate instance to the thread which actually performs the upload. As far as I know, you can't serialize it in an Intent. The only way I could think of doing that is to have a separate class in which to set the delegate instance for that particular uploadID, and to get the instance from the thread, but personally I don't like that approach. Do you have better ideas to achieve that?\n. @pawankumar01 just to clarify, you don't need to create an extra activity just to handle the broadcast receiver events in order to perform the network calls you need, as you can use it also inside a Service or you can create a subclass of UploadServiceBroadcastReceiver and register it in your manifest, so everything will happen in the background even if no activities of your app are running. You can find examples in the monitoring page of the wiki. Tell me if the provided examples or explanations are not clear enough.\n. I would discard the option to bind the service to an activity, because that will limit the possibility of \"running everything in the background\" if you set the delegate.\nHaving a BroadcastReceiver inside the library in which to register the object instances which implements the delegate methods is a good idea, but then there's another challenge: how to register the broadcast receiver in the manifest of the upload service, considering that the user can change the broadcast action string?\nxml\n<receiver android:name=\"MyReceiver\">\n    <intent-filter>\n        <action android:name=\"com.yourcompany.yourapp.uploadservice.broadcast.status\" />\n    </intent-filter>\n</receiver>\ncom.yourcompany.yourapp is chosen by the user when he performs the initial setup. This is needed to be able to have multiple apps on the same device which uses the Upload Service simultaneously. This leaves us with the static Map option only. I have to think of a way in which I could provide an implementation of setDelegate method in the base UploadRequest class, so that all the upload tasks could have the callback option available out of the box and without exposing publicly the static Map. Another thing to think about is how to properly remove delegate instances when the upload task is completed, in order to dispose them, otherwise we would have a huge memory leak. Correctly disposing the delegate instances is a thing to consider also if we use the BroadcastReceiver approach. I'm open to suggestions.\n. @pawankumar01 made an implementation of what we've discussed. You can try that in a project too. Found a way to call the delegate methods on the main thread. Follow this guide to add the dependency for the snapshot artifacts in your Gradle build file: https://jitpack.io/#gotev/android-upload-service/d84ca6e2a6\nThen, you can try it out like this:\n``` java\nnew MultipartUploadRequest(context, \"http://server.com\")\n    .addFileToUpload(\"/path/to/file\", \"param-name\")\n    .setDelegate(new UploadStatusDelegate() {\n        @Override\n        public void onProgress(UploadInfo uploadInfo) {\n    }\n\n    @Override\n    public void onError(UploadInfo uploadInfo, Exception exception) {\n\n    }\n\n    @Override\n    public void onCompleted(UploadInfo uploadInfo, ServerResponse serverResponse) {\n\n    }\n\n    @Override\n    public void onCancelled(UploadInfo uploadInfo) {\n\n    }\n})\n.startUpload();\n\n```\nLet me know if it works for you or if you have some issues. I recommend you to not use this snapshot build in production.\n. @pawankumar01 Hmm, that's strange. The onCompleted method always gets called, as you can see here. In my tests I've placed the following code into the onCompleted method\njava\nLog.i(TAG, String.format(Locale.getDefault(),\n                \"ID %1$s: completed in %2$ds at %3$.2f Kbit/s. Response code: %4$d, body:[%5$s]\",\n                uploadInfo.getUploadId(), uploadInfo.getElapsedTime() / 1000,\n                uploadInfo.getUploadRate(), serverResponse.getHttpCode(),\n                serverResponse.getBodyAsString()));\nand when the upload is successful by using the demo server, in the LogCat I can see correctly:\nID 87aa531f-986d-46ee-a19b-50e87eed6d90: completed in 22s at 2493,09 Kbit/s. Response code: 200, body:[Upload Ok!]\nCould you please post your code here?\n. Never used System.out.print on Android, so I don't know if you can see the log message in the LogCat. Try using ,Log.i instead to log messages for this test and tell me which messages you see during the Upload. I'm Pretty sure that you will see the successful message. Also, from where are you launching the Upload.. an Activity, a Service, a static class? Is your app running or is in the background?\n. You're welcome! I consider this issue resolved. If some errors arises, create a new issue and be as detailed as possible in describing how to replicate the error.\n. @herry-trium there's no solution to that, as it's how Android is designed. Look #100 for all the details.. From what I see you need a basic POST request. I don't see any file in your request, but a plain JSON string which you send to the server. Android Upload Service purpose is for file uploads, not simple POST requests, for which I advise you to keep using the excellent OkHttp, however, I'll tell you how to achieve the same result.\nPlace this somewhere in your code:\n``` java\npublic static String writeToFileAndGetPath(Context context, String data) throws IOException {\n    OutputStreamWriter outputStreamWriter = null;\ntry {\n    File outputFile = File.createTempFile(UUID.randomUUID().toString(),\n                                          \"json\", context.getCacheDir());\n    outputStreamWriter = new OutputStreamWriter(new FileOutputStream(outputFile));\n    outputStreamWriter.write(data);\n\n    return outputFile.getAbsolutePath();\n\n} finally {\n    if (outputStreamWriter != null) {\n        try {\n            outputStreamWriter.close();\n        } catch (Exception ignored) { }\n    }\n}\n\n}\n```\nAnd then:\n``` java\nprivate String postData(Context context, String accessToken, String filename) throws IOException {\n    String json = String.format(\"{\\\"title\\\": \\\"%s\\\",\\\"name\\\":\\\"%s\\\"}\", filename, filename);\n    String filePath = writeToFileAndGetPath(context, json);\n    long fileLength = new File(filePath).length();\nreturn new BinaryUploadRequest(context, \"http://server.com\")\n        .addHeader(\"Authorization\", String.format(\"Bearer %s\", accessToken))\n        .addHeader(\"Content-Type\", \"application/json\")\n        .addHeader(\"X-Upload-Content-Type\", \"image/jpg\")\n        .addHeader(\"X-Upload-Content-Length\", String.valueOf(fileLength))\n        .setFileToUpload(filePath)\n        .setAutoDeleteFilesAfterSuccessfulUpload(true)\n        .setUsesFixedLengthStreamingMode(true)\n        .setMaxRetries(2)\n        .startUpload();\n\n}\n```\nI've written this on-the-go, so some adjustments may be needed.\n. @gaurnagchauhan are you trying to achieve the resumable upload type? https://developers.google.com/drive/v3/web/manage-uploads\n. Check how you build the request and this table. If you have an evidence of a bug in the library, create a new issue with the code you used and the steps to reproduce, so I can address it. I'm closing this issue, as the original question has been answered.\n. Closing this due to no interest about this protocol, which is not intensively used.. The code you used is ok. Android Upload Service runs in the background regardless of the activity life cycle, so when you create a request and start it, like you've done, you can safely exit from your activity and the upload will be continued in the background (unless you swipe out the app from the pager, in which case things gets more complicated #100 ). If you have used a broadcast receiver inside your activity, check if you have properly unregistered it. You can find a detailed explanation here.\nFrom what I see in your report, It doesn't seem to me that the service which is leaking is Android Upload Service:\njava\nE/ActivityThread: Activity com.github.dht.screenger.activities.ScreengerActivity has leaked ServiceConnection azy@16fd5a0 that was originally bound here\nbecause it does not support binding with activities, as it runs completely detached and I don't see it in the log. Check if you have some services bound to the activity, which are not unbinded in the onDestroy.\n. Provide more details\n. @gaurnagchauhan you have to use Wireshark to see the complete body of the requests and responses from your server. You can use tPacketCapture to dump the network traffic directly on your device, then transfer the .pcap on your computer and open it with Wireshark.\n. Unfortunately not at the moment. Interceptors are not supported currently in the OkHttp implementation for Upload Service. That may be also the cause of your 400 bad request, if you set headers in the interceptors.\n. To set the headers, check this and follow the link to the JavaDoc.\n@gaurnagchauhan to have an out-of-the-box support for OneDrive, since the docs are really good, but to implement it client-side some effort is required, I think the best will be to create a plugin for UploadService, by implementing a new UploadRequest type specifically for OneDrive and a new UploadTask which will handle all the protocol part in the background. Basically, after that this has been implemented, as a library user you will simply have to add a dependency in your gradle build file and then be able to write something like this:\njava\nnew OneDriveUploadRequest(...)\n .setFileToUpload(....)\n .startUpload();\nIf you want to contribute, this will be helpful. I'm still writing it, so without any doubt there is some missing information, but with your feedback I could improve that too. I can help with the implementation, too.\n. Try to start the the node.js demo server provided in the examples on your computer, update the server URL, run the same upload and post the output that you will get, so if it's a bug I can replicate it, too.\nAnother option is to dump network traffic as described in the link, without changing anything, so you can see full request headers and body sent to your server.\n. @moosabaloch have you solved your issue?\n. @moosabaloch you're welcome!\n. The best you can do in this case is to dump network traffic with tcpdump on your server when you perform a request with Postman and then do another dump when you perform the request from Android. After this, open the dumps with wireshark and see how HTTP requests are made. You should be able to spot the difference between the two and I think it may have to do with headers. For example, if you are using OkHttp with interceptors to set the headers, that is not going to work, as described in #122\n. I advise you to check your server-side code and to perform the checks suggested in the Troubleshooting wiki page.\n. Binary upload works with the example test server provided in the examples. You should try to send your requests to it, so you can see if there are some missing headers that needs to be set. There's nothing better than performing a network traffic dump in this case. You can find hints on the troubleshooting page. If you have a working case and and a non-working case, there is something different between the two requests for sure. Find that difference, and bingo! If you use OkHttp for example, you have to know that setting headers in the interceptors is not going to work, as described in #122\n. So, you are sending both multipart and binary upload requests to the same server endpoint, right?\n. @omryros as I told you before, do a network traffic dump on your server or on your computer and your device and check which are the differences between the two requests. To me there's no evidence of a bug in the library from what you've posted. I think it's some setting in how the requests are made. Also, a screenshot of your POSTMAN request setup would be helpful, otherwise I don't have the needed details to eventually replicate your condition.\n. Closing this due to insufficient details to replicate. By tests made, both binary and multipart uploads works as expected.\n. If you add multiple files to a single multipart request, you can already have that behaviour. If you start multiple concurrent uploads, you will see multiple notifications, in which case a summary notification has to be implemented.\n. You have two options:\n- pass all the files with the same parameter name\n- pass every file with a different parameter name\nOn your server, in the first case you have to handle an array of files coming in with the same parameter name, in the latter you will have different parameter name for every file.\n. Currently only the upload progress is grouped and you can't display the number of files\n. 3.0 has support for placeholders in notification strings, so this could be added\n. As soon as I can. I'm really busy in this period and this is a project I do in my spare time...\n. Refer to Placeholders class for reference of the supported placeholders. You can use them in UploadNotificationConfig strings\n. Wouldn't it be best and easier to be able to pass a File object instance instead of Uri? Supporting Uri means also adding code to properly handle it. Something like this. If you have some suggestions, you're welcome.\n. I also agree. Feel free to fork the project and implement that, then send me a pull request.\n. Merge with #137 \n. @LinkedHK Here is the retry logic. The upload gets retried automatically when an exception gets thrown while performing the upload. Successful upload means that the server responds with an HTTP code between 200 and 299, as you can see here. In the upcoming 3.0 release, you will get an UploadInfo object in every event callback. From this object you can see how many retries have been made, so you can implement your own business logic, being able to cancel the upload when necessary. I think that this feature is enough to accomplish what you described.\n. It's correct that the retry counter is incremented. Follow this example.\n1. You setup an HTTP Multipart upload with maximum of 2 upload retries.\n2. The upload starts, but then fails at say 50%. Due to how HTTP/Multipart is (RFC2388), the partially uploaded content gets discarded by the server and you have to start over. Be aware that HTTP/Multipart does not support resuming uploads, as it's written in the specifications.\n3. The retry counter is incremented\n4. A new upload request is made, it starts from the beginning and then fails at 25%. The same applies as what I've written in 2\n5. The retry counter is incremented \n6. A new upload request is made, it starts from the beginning and the fails at 65%\n7. The retry counter is incremented\n8. You have no more available retries, so an exception is fired\nWhat you need is to be able to resume uploads, but then you should use a different protocol, definitely not HTTP/Multipart. If you want, you can extend the library by implemeting one of the resumable upload types (e.g. tus or resumablejs). FTP (which supports resume) is coming in the 3.0 release.\n. Enable debug log and try to replicate the issue. When you are able to replicate it, post only the library debug log.\n. I understand, but in this case the code doesn't help me address the issue, since we are talking about a specific behaviour. You should log persistently on a file or in the cloud, replicate the issue on mobile network and then get the log when you connect the phone to your pc. To log persistently there are a wide variety of solutions which I'm not going to mention here. You just need to make your own logger delegate implementation. \n. Great! I will look at the code as soon as I can and I'll give you some feedback :)\n. @stephentuso Given a quick look at your commit. You don't need to inject Context like that, because you already have it in the protected service variable in the base UploadTask class, which contains the reference to the UploadService and you should use that when you need an Android Context\n. @stephentuso Thank you! I'm reviewing your pull request and it will be merged for 3.1. If I have some questions I'll write to you here :) Travis is sometimes weird and the same thing also happens to me very often on master build. I've read that the 137 Killed code happens when there is too much load on their servers. The emulator will be needed when unit and integration tests will be added.\n. @NaikSoftware create a new issue with all the details\n@drstranges as soon as I can\n. merged in uri_support branch. It will be part of 3.1.\n. @konalegi the map pointed out by @hendrawd is private by purpose, because it's handled internally by Android Upload Service. If you need a task list using the current release (e.g. a list with the uploadID's) what I suggest you to do is implement it in your code. Make a simple array list of strings and add all the uploadIDs into it when you start an upload task. You also need a broadcast listener (look in the wiki) which listens for task completion and deletes the corresponding uploadID from your list. In the 3.0 release you will find the UploadService.getTaskList() method.\n. @moraisholanda in my experience this works. Can you give us some feedback about that?\n. Thank you @hendrawd \nSo, since we haven't got any feedback and there isn't any evidence of a bug in the library, I'm closing this.\n. 3.0 has been released!\n. You get that in the Broadcast receiver's onCompleted method. Refer to the wiki.\n. @oneidc it depends also on your server-side implementation. Dump network traffic (refer to the wiki troubleshooting page) when you perform that request and post it here.\n. Good idea and thanks for the pull request @knordbo ! These are my thoughts:\n1. I would have written the code like this in updateNotificationError to keep it simpler:\njava\n   if (params.getNotificationConfig() == null \n       || params.getNotificationConfig().getErrorMessage() == null) return;\n2. The idea should be extended also for updateNotificationCompleted and updateNotificationProgress\n. @knordbo your modifications are in 3.0.2. Upgrade to use them :)\n. You have to get the full path of the images on the device and then build up the requests as shown in the Recipes page on the wiki. There is no integration with retrofit.\n. This is not a feature I'm going to add to the project, however you can easily achieve that by creating an AsyncTask with a sleep before the invocation of the startUpload method.\n. Many thanks for this pull request @stephentuso \ud83d\udc4d \n. You have to wait for 3.0 release (#140) which is planned for this weekend. \nThen, in the UploadInfo that you will get in the broadcast listener or delegate, you can get what you need by invoking the getUploadRate() method. You can also display it in the notifications by using placeholders (#117).\n. You don't need a workaround for this, as it is already possible to have only one upload task at a time. Added explanation in the wiki\n. 3.0 is not release yet, so you're using 2.1, and so you can't import those classes\n. You have to wait for 3.0, which will be released tomorrow.\n. Currently the master branch is what will be released as 3.0. The wiki has been updated for 3.0. The new release is scheduled for today. Hold on and use 3.0 when I release it later today. \n. Refer to the Wiki\n. You can actually see the number of upload threads when you set the log level to debug (check Recipes) and you start the library\n. Thank you @AngleV ! Typo fixed\n. This is not possibile. You have to download it somewhere on the device and pass the absolute path to the file once it has been downloaded to the upload request.\n. You can get the context inside a BroadcastReceiver by calling getReceiverContext()\n. It's protected. You can access it because UploadServiceBroadcastReceiver is a subclass of BroadcastReceiver\n. @cskilbeck added also helper to get context in the Wiki\n. The answer to your question is in the code. It's not an issue, but an expected behaviour. If you remove that line of code you will quite surely get abnormal upload rate values in the first second.\n. Because those are two completly different things.\nBroadcast interval is specified here. It's not the same because it gets at least one second to get a good upload rate indication, but the default broadcast interval is max 6 per second.\n. It cannot be set. Are you using placeholders to display upload progress rate?\n. This has been asked in #67 \n. Apparently something wrong is happening during the upload. I need more details. One thing you could do is calculate SHA1 or MD5 checksums of the file on Android and then on the server and check if the two corresponds. Another very useful thing in this case is to dump network traffic to be able to debug what's happening on the wire (e.g. to see if there are lost packets during the upload)\n. Use addParameter instead of addArrayParameter in the MultipartUploadRequest, since neither of your parameters are arrays.\nFrom your description and the code, I think the problem is on the wire. The most useful thing is to dump the network traffic when it happens, to see exactly what happens during the transfer of the bytes from the device to the server. Without this information, there's nothing helpful that can be done. If it's a bug in the library, with the dump we can find the exact circumstances in which it happens, replicate the problem and solve it.\n. @AngleV I highly recommend you to use OkHttp stack. I use it in production. I'm considering to make it the default HTTP stack in a future release. Let me know.\n. @AngleV Do you still have the issue using OkHttp?\n. Closing this for lack of feedback. Reopen the issue if the error still persists after using OkHttp stack.\n. Which kind of upload are you using (multipart, binary, ftp) ?\nThe library debug log will be helpful to be able to spot what happens in this case, as it seems to be a library bug! Post as many details as you can, thank you!\n. @konalegi Thank you, although it would be helpful to see the entire error stack trace at the bottom. Are you guys using HurlStack or OkHttp stack? I've seen that socket timeout error happening with HurlStack\n. @konalegi thank you! The socket timeout happens because of the poor network connectivity and that's fine, because it's a network issue and not a programming issue. What the library should do in this case is to retry the upload until maxRetries gets reached and the percent of the operation should start from 0 again. If you have the same behaviour as described by @AngleV it will be helpful to enable library debug log and see exactly what happens, to be able to spot the cause of the issue.\n. The behaviour you experienced maybe the same as #161\n. Merging this with #161\n. Try to replicate that behavior and collect some evidence logs. Just check the wiki for retry explanation. @AngleV you can now use this by upgrading to 3.0.2\n. The check if the file exists is performed when you build the upload request. Probabily what happened in your case is that when you built the two requests, the file existed, then the first one completed and the second one caused the problem.\n. This is a bug in the OkHttp version used internally by your Android version. What I suggest you to do is upgrade to 3.0 and use the OkHttp stack implementation, so you will get a newer OkHttp version without that bug\n. @neilyoung to use OkHttp you have to follow the instructions here and also to upgrade from an older release.\n. @neilyoung that's because you are still using the HurlStack and not the OkHttp stack. Follow the instructions in the Setup page of the Wiki\n. Yes, you can. Just create your own instance of the OkHttpClient, set the desired timeout and then pass it to the OkHttpStack constructor when you initialize the library, as shown in the Setup page of the Wiki.\n. @neilyoung @AngleV @konalegi just released 3.0.1 which updates OkHttp stack from 3.2.0 to 3.4.1. Please test it and tell me if this problem is still present. \n. @hendrawd don't know your server implementation, but if something goes wrong with HTTP/Multipart before the upload gets completed successfully, it's up to the server to discard the partially uploaded files. So can you confirm that by introducing a 30s delay in the server response and setMaxRetries to 1 by using the demo server written in node.js I can reproduce the error?\n@AngleV I've looked at my build log and I don't have that warning message. The same applies also to the automatic build logs on Travis CI. Check if you have used different OkHttp versions in your app in your dependencies\n. What I need are precise steps to reproduce the error by using the demo app and the demo server provided in the examples, otherwise I can't address the issue\n. @neilyoung @hendrawd @AngleV just released 3.0.3 which contains the fix to this issue. It should have been solved now. Try and let me know :)\n. That's explained in the Recipes section of the Wiki\n. URIs will be supported in a future release. There is a pending pull request #137  which implements them. You can review it and contribute if you find some errors, to make the implementation better\n. Never had such an issue with the notification icon. I suggest you to generate the notification icon by using Android Asset Studio. Upload your PNG and the web app will do the rest. Download the zip and put the files in your resources\n. Sorry, but this concern is completely out of scope here. The colors of the icons does not depend on the upload service library nor the Android support library.\n. The version of OkHttp will be upgraded to the latest in the next release\n. @NitroG42 check the 3.0.1 release which uses OkHttp 3.4.1\n. To make the library core light, OkHttp is NOT the default HTTP stack in 3.1 (check #122). @ar-g you're welcome to create a demo app with Express tests\n. Replacing the jar like you've done is not something I'm supporting in any way. The only change in the latest master is a wake lock release. Nothing else was changed, so I suggest you to stick with the latest official release.\n. You can use JitPack\n. You have to click on commits in JitPack and then select the first one after SNAPSHOT from the list. I've done that for you this time: https://jitpack.io/#gotev/android-upload-service/754f15bea4\nAnd you will get the latest commit jar\n. @AndrewBryukhov just released 3.0.1 which updates OkHttp from 3.2.0 to 3.4.1. I suggest you to use that instead of JitPack dependency. Try it and let me know.\n. As is specified in the Setup Wiki page:\n\nBear in mind that you can't use request interceptors to set request headers and parameters (#122). You have to set them using the proper UploadRequest methods.\n\nPlease use Markdown formatting for code and stack traces as expained here, thank you!\n. Please read the Wiki and follow the links to the JavaDoc before opening issues like this :)\n. You can find the supported upload types in the Recipes page of the Wiki. The two upload types you pointed out are not currently supported, but you can extend HttpUploadRequest and HttpUploadTask to support them also. The developer's manual of the Wiki can be helpful.\n. Not planned, but since it's open source you can implement it if you need it and then you can send a pull request,s o it will be included in the next release\n. Great!!\n. @charleston10 I've checked the specifications of both of the two protocols and I suggest to stick with the resumable one. Follow the developer's guide. If you need some help to complete the implementation, just ask :)\n. I know that protocol and I plan to add support for it in the future. If you want to help you're welcome. I plan to make OkHttp the default stack and drop HttpUrlConnection  stack which is not reliable, to be able to make requests easily. TUS implementation uses HttpUrlConnection provided by Android, so I wouldn't use their implementation as a starting point.\n. @hendrawd action buttons in notifications can be useful regardless of the upload protocol used. Would you do the implementation?\n. @DanielNovak haven't had time to do it, but I'll be more than happy to assist you for the implementation.. @JeanAtAppsoluce nothing has been done on TUS so far, since I've never had to use it in production. You can look at the ftp and SFTP modules (SFTP is still in PR) to see a plug-in example. I have limited time because of many things going on, but I'll be glad to give you some hints. Go ahead :). Closing this due to inactivity and lack of contributions. Can be reopened if someone wants to do something about this with a PR ;). Dependencies updated and new artifacts released.\n. At the moment a single icon is used for both the progress notification and the upload completed notification. UploadNotificationConfig could be extended by adding setCompletedIcon(int resourceID) method and then getting the icon resource ID in UploadTask's updateNotificationCompleted method\n. @doublefree upgrade to 3.0.2 and you will be able to set both error and success notification icons. Refer to UploadNotificationConfig.\n. If Amazon S3 supports standard HTTP Multipart requests you can use the library out of the box. If it uses some other proprietary upload protocol, to use the library you will need to create a new subclass of UploadRequest and UploadTask base classes, as described in the developer's manual and implement it. The library is open for extension :)\n. That has already been solved in #158\nUpdate your dependency to 3.0.3\n. That's not a bug, but lacked some docs. Updated Recipes wiki.\n. A little note:\njava\n.addParameter(\"parameter\",\"value\")\nhas been added in the recipes code only to show you that you can add your custom parameters.\nHave you added the request code inside an Activity?\nIs the Activity running when the Upload is completed?\nUpdated the Monitoring upload status wiki page with the following information, which may be helpful to you:\n\nIf you set the delegate inside an activity, pay attention to its lifecycle, e.g. if you create a request with a delegate inside an activity and then you close it, the request will run in the background, but no callback methods will be invoked, because the delegate has been created inside the activity, which no longer exists. Delegates works best when used inside a service or an actvity from which the user never goes away during the entire upload process. If this is not your case, I suggest you to use one of the following two approaches.\n. The reason why the anonymous class onCompleted method was not called is because it went out of scope. When you implement the interface in the activity, and the activity stays in the foreground till the end of the operation, onCompleted gets called. It's just a matter of scopes, so it's not a bug in the library.\n\nRegarding your server side, be sure that the response is in UTF 8 which is the default encoding the library uses. You can also get the raw response body bytes from the serverResponse object. 0xD and 0xA are the HEX codes for CR (carriage return) and LF (line feed) according to ASCII table so check how you return the JSON in your PHP script.\n. Updated the Monitoring upload status wiki page:\n\nThe recommended way to use delegates inside Activities or Services is to implement the UploadStatusDelegate interface in your Activities or Services instead of using the anonymous inner class, to prevent variable out of scope problems.\n\nPlease make use of markdown syntax to improve readability the next time, as I've noted in the asking for help wiki page. I've done that for you this time in your posts.\nMade some tests using the node.js demo server and the demo app provided in the examples, and this is what I get in the LogCat:\nshell\nI/UploadServiceDemo: ID 27a37309-dde3-47cf-8f89-cc223d4fb767: completed in 0s at 0,00 Kbit/s. Response code: 200, body:[Upload Ok!]\nE/UploadServiceDemo: Success:/storage/emulated/0/Download/11700901_10204551472013917_5124724800122680120_o.jpg\nI/Header: Connection: close\nI/Header: Date: Sat, 20 Aug 2016 09:48:04 GMT\nI/Header: transfer-encoding: \nI/Header: X-Android-Received-Millis: 1471686484540\nI/Header: X-Android-Response-Source: NETWORK 200\nI/Header: X-Android-Selected-Protocol: http/1.1\nI/Header: X-Android-Sent-Millis: 1471686484410\nI/Header: X-Powered-By: Express\nE/UploadServiceDemo: Printing response body bytes\nE/UploadServiceDemo: 55 \nE/UploadServiceDemo: 70 \nE/UploadServiceDemo: 6C \nE/UploadServiceDemo: 6F \nE/UploadServiceDemo: 61 \nE/UploadServiceDemo: 64 \nE/UploadServiceDemo: 20 \nE/UploadServiceDemo: 4F \nE/UploadServiceDemo: 6B \nE/UploadServiceDemo: 21\nSo those CR and LF characters are added by your PHP server-side script in the response. Here you can see the code which is being executed in the onCompleted method. If you dump network traffic I'm pretty sure you will see CR and LF at the beginning of the response body coming from your server.\n. @hendrawd if you need help with the implementation, let me know here\n. @hendrawd Yes. When addAction is invoked, a new element has to be added to the underlying list. We can log a warning message if the upload notification config has more than three buttons\n. @mnaswin3 not yet, but you can send a PR!. Implemented actions for notifications. Major refactor to UploadNotificationConfigclass was needed, to have a better structure, less method count (#248) and easier code readability. It drops retro-compatibility, but for the better. Updated demo app. This feature will be available starting from release 3.3.\nRead the code example below, which is taken from the demo app's BaseActivity, in which I have implemented an example of how you can cancel an upload from an action.\nBefore 3.3:\njava\nprotected UploadNotificationConfig getNotificationConfig(@StringRes int title) {\n    return new UploadNotificationConfig()\n            .setIcon(R.drawable.ic_upload)\n            .setCompletedIcon(R.drawable.ic_upload_success)\n            .setErrorIcon(R.drawable.ic_upload_error)\n            .setCancelledIcon(R.drawable.ic_cancelled)\n            .setIconColor(Color.BLUE)\n            .setCompletedIconColor(Color.GREEN)\n            .setErrorIconColor(Color.RED)\n            .setCancelledIconColor(Color.YELLOW)\n            .setTitle(getString(title))\n            .setInProgressMessage(getString(R.string.uploading))\n            .setCompletedMessage(getString(R.string.upload_success))\n            .setErrorMessage(getString(R.string.upload_error))\n            .setCancelledMessage(getString(R.string.upload_cancelled))\n            .setClickIntent(new Intent(this, MainActivity.class))\n            .setClearOnAction(true)\n            .setRingToneEnabled(true);\n}\nIn 3.3:\n```java\nprotected UploadNotificationConfig getNotificationConfig(String uploadId, \n                                                         @StringRes int title){\n    UploadNotificationConfig config = new UploadNotificationConfig();\nPendingIntent clickIntent = PendingIntent.getActivity(\n        this, 1, new Intent(this, MainActivity.class),\n        PendingIntent.FLAG_UPDATE_CURRENT);\n\nconfig.setTitleForAllStatuses(getString(title))\n        .setRingToneEnabled(true)\n        .setClickIntentForAllStatuses(clickIntent)\n        .setClearOnActionForAllStatuses(true);\n\nconfig.getProgress().message = getString(R.string.uploading);\nconfig.getProgress().iconResourceID = R.drawable.ic_upload;\nconfig.getProgress().iconColorResourceID = Color.BLUE;\n\n// this is how you add an action to a specific notification status\nconfig.getProgress().actions.add(new UploadNotificationAction(\n        R.drawable.ic_cancelled,\n        getString(R.string.cancel_upload),\n        NotificationActions.getCancelUploadAction(this, 1, uploadId)));\n\nconfig.getCompleted().message = getString(R.string.upload_success);\nconfig.getCompleted().iconResourceID = R.drawable.ic_upload_success;\nconfig.getCompleted().iconColorResourceID = Color.GREEN;\n\nconfig.getError().message = getString(R.string.upload_error);\nconfig.getError().iconResourceID = R.drawable.ic_upload_error;\nconfig.getError().iconColorResourceID = Color.RED;\n\nconfig.getCancelled().message = getString(R.string.upload_cancelled);\nconfig.getCancelled().iconResourceID = R.drawable.ic_cancelled;\nconfig.getCancelled().iconColorResourceID = Color.YELLOW;\n\nreturn config;\n\n}\n``\nIt's more verbose now, but you can finely tune every aspect of every notification, in a way which was not possible before (#293), and it's easier to read. Check out the new utility functions inUploadNotificationConfig` which lets you set properties globally for all the notification statuses.. 3.3 released and this feature is now available!. @VSG24 Fine. If you implemented that part, how would you do it instead? I have reasons for that kind of implementation, but I want to hear your feedback and suggestions. @VSG24 Ok but no value added with your comments yet and it's a pity. I like to discuss about software design a lot! A part the obvious, what do you suggest? It's open source, everything can be changed for the better :smiley:. How many files do you have in your Upload request?\n. This is a result of a design decision I've made.\n[[UPLOADED_FILES]] shows the number of successfully uploaded files. \nSince the Multipart upload does not support resume, if the connection drops at some point, the operation has to be executed from the beginning, so even if you have uploaded 5 of 11 files, the server will discard them on error and you have to start over. So as you cen see here the successfully uploaded files are added only when the operation has been completed without errors. \nIf you take a look at the FTPUploadTask class, which supports resume, you will see that each file is added to the successfully uploaded files after it has been completely uploaded because even if the connection drops at that point, the next attempt will be made starting from the next file.\n. @hendrawd what I've tried to explain is that you can't say that a file is successfully uploaded when you use http multipart, unless all the upload operation is completed, because the server sees all the files you have in your request as a single stream of data\n. @hendrawd maybe we should re-think how to do this properly in the next release, so at the moment I'm not going to merge this one. What ideally I want to achieve is to have custom set of actions for:\n progress\n success\n* error\nSo, for example, in the progress notification I may want to have \"Cancel upload\". On the success notification I may want to have \"Dismiss\" and \"Open\", and on the error I want to have \"Retry\".. You have to put your PC ip address, not localhost\n. You're right, that's an issue! The problem is that in FTP Upload the files gets removed from the files to upload and set into successfully uploaded files after completion, as you can see here. I'm going to address that.\n. @hendrawd the issue should be resolved after my commit. If you can, checkout the project, make some tests with the demo app and let me know. If the problem is fixed, it will be available in the upcoming 3.1 release.\n. @hendrawd can you confirm that this issue is resolved after the fix was committed?\n. @hendrawd thank you for testing. I'm closing this\n. mCurrentPhotoPaths is your own variable which has the paths to the files to upload. Reset that once the upload is successful and before selecting new files, otherwise you will have the behaviour you described.\n. This has been implemented in #179. Yes, I agree, thank you for the pull request!\n. @hendrawd implemented! You can try the latest snapshot which includes the new feature:\ngroovy\nallprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\ngroovy\ncompile 'com.github.gotev:android-upload-service:277dc4e40a'\nExample of how to configure cancelled icon, message and auto clear behaviour:\njava\nprivate UploadNotificationConfig getNotificationConfig(String title) {\n    return new UploadNotificationConfig()\n            .setIcon(R.drawable.ic_upload)\n            .setCompletedIcon(R.drawable.ic_upload_success)\n            .setErrorIcon(R.drawable.ic_upload_error)\n            .setCancelledIcon(R.drawable.ic_cancelled)\n            .setTitle(title)\n            .setInProgressMessage(\"Uploading...\")\n            .setCompletedMessage(\"Upload completed successfully!\")\n            .setErrorMessage(\"Error while performing upload!\")\n            .setCancelledMessage(\"Upload has been cancelled!\")\n            .setAutoClearOnCancel(false)\n            .setAutoClearOnSuccess(true)\n            .setClearOnAction(true)\n            .setRingToneEnabled(true);\n}\nthen simply set UploadNotificationConfig as usual in the UploadRequest.\nThe following methods have been added to UploadNotificationConfig:\njava\n.setCancelledIcon(R.drawable.ic_cancelled)\n.setCancelledMessage(\"Upload has been cancelled!\")\n.setAutoClearOnCancel(false). You can do that in your onCompleted implementation like this:\njava\n@Override\npublic void onCompleted(UploadInfo uploadInfo, ServerResponse serverResponse) {\n    YourClass obj = new Gson().fromJson(serverResponse.getBodyAsString(), YourClass.class);\n}\n. Just update uploadservice to 3.0.3, it has been fixed. Always check that your upload service dependencies are aligned to the latest release. You can find it in the setup wiki page.\n. The FTP Upload module uses Apache Commons Net FTP underneath, so it doesn't have anything to do with the HTTP stack. I think the issue is because of the default filename encoding.\n. @hendrawd upgrade your dependencies for FTP module 3.0.4, try and let me know. Check you have enabled UTF-8 as the default character encoding on your FTP server, otherwise you won't be able to use non-ASCII file names.\n. This is not an HTTP Multipart, FTP or binary upload, so it's not supported by this library. However, you should ask this kind of questions on StackOverflow.\n. I've formatted your issue to be readable this time.\nYou haven't looked in the Wiki and in the demo app MainActivity\n. GI-I9500_TMMARS is a cloud software from TrendMicro, it's not a real device. Added defensive programming statements to prevent NullPointerExceptions and log the conditions which previously arised them. The fix will be available in 3.1. Thank you for the report!\n. @YasirAmeen please read the Wiki before opening issues like this\n. The library is for upload only. To download files you should rely on Android's integrated Download Manager or on JobScheduler.\n. @ddpatel2606 however, you are free to fork the library and add that functionality if you need it\n. This happens almost surely because your server certificate uses TLS 1.2, which is not enabled by default on Android API < 21. It's an Android problem, but there is a solution to it. \nFirst of all, I recommend you to switch to the OkHttp stack (which will be the default HTTP stack from 3.1+). Next, copy Tls12SocketFactory.java into your project. Then, to enable TLS 1.2, you can do like this in your initialization code:\n``` java\npublic class App extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    UploadService.HTTP_STACK = new OkHttpStack(getHttpClient(this));\n}\n\nprivate static OkHttpClient getHttpClient(Context context) {\n    OkHttpClient.Builder builder = new OkHttpClient.Builder()\n            .followRedirects(true)\n            .followSslRedirects(true)\n            .retryOnConnectionFailure(true)\n            .connectTimeout(15, TimeUnit.SECONDS)\n            .writeTimeout(30, TimeUnit.SECONDS)\n            .readTimeout(30, TimeUnit.SECONDS)\n            .cache(null);\n\n    return enableTls12OnPreLollipop(clientBuilder).build();\n}\n\n/**\n * Enables TLS 1.2 on Pre-Lollipop devices (16 >= Android API < 20)\n * Check: https://github.com/square/okhttp/issues/2372#issuecomment-244807676\n * @param client OkHttpClient.Builder on which to apply the patch\n * @return OkHttpClient.Builder with the patch applied\n */\nprivate static OkHttpClient.Builder enableTls12OnPreLollipop(OkHttpClient.Builder client) {\n    // the problem sill persists on some samsung devices with API 21, so it's necessary\n    // to apply the patch till API 21\n    if (Build.VERSION.SDK_INT >= 16 && Build.VERSION.SDK_INT < 22) {\n        try {\n            SSLContext sc = SSLContext.getInstance(\"TLSv1.2\");\n            sc.init(null, null, null);\n            client.sslSocketFactory(new Tls12SocketFactory(sc.getSocketFactory()));\n\n            ConnectionSpec cs = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)\n                    .tlsVersions(TlsVersion.TLS_1_2)\n                    .build();\n\n            List<ConnectionSpec> specs =  new ArrayList<>();\n            specs.add(cs);\n            specs.add(ConnectionSpec.COMPATIBLE_TLS);\n            specs.add(ConnectionSpec.CLEARTEXT);\n\n            client.connectionSpecs(specs);\n        } catch (Throwable exc) {\n            Log.e(\"OkHttp\", \"Error while setting TLS 1.2\", exc);\n        }\n    }\n\n    return client;\n}\n\n}\n```\n. Head to the setup Wiki page\n. You intend SFTP or FTPS? \nHTTPS is supported\n. Signaled to https://github.com/spacecowboy/NoNonsense-FilePicker/issues/115\n. Nice question! Actually there is not a way, 'cause you can get only the successfully uploaded file names. I will add this in the next release \n. The best will be to have access to the original request directly from the UploadInfo. This means the requests have to be serialized. The problem is that every upload request can define its own additional parameters (e.g. FTPUploadRequest has completely different parameters than HttpUploadRequests like multipart and binary) and the first thing to think of is how to uniform that, so that the serialization and de-serialization could be implemented once for every actual and future upload request protocol.. 3.3 released and this feature is now available!. > delegate may not be called so i can't delete those uploaded files\nauto delete on successful upload is a feature which exists since 2.0 of Android Upload Service and you can achieve that by simply setting a flag in the request. Check javaDocs linked in wiki. If your server sends you back standard HTTP responses (as it should), the files will be deleted only when the response from server is successful (http code 2xx). If an error occurs, your server should send you different HTTP response codes indicating that an error occurred. In that case you don't need to re-implement the auto delete feature on your own. If you have a fancy server, read further.\n\nIf I use BroadcastReceiver, I can't update the UI. I saw some people suggest some GET_TASK(ActivityManager), but I think the solution make thing complicated\n\nThe global broadcast receiver is intended to be used when doing actions which are completely detached from the UI (e.g. your own setAutoDeleteFilesAfterSuccessfulUpload logic if you have non-standard server responses). \nWhen you call the startUpload() method, you will get the associated uploadId string and you have to store it somewhere where it's independent of the activity lifecycle (e.g. a singleton in-memory class, a SharedPreference, ...) if you need it to check that particular uploadId status in the future.\nImage this scenario:\n- The user makes an upload\n- You show upload progress in your UI\n- The user leaves the activity\n- The operation finishes\n- The user gets back into the activity\nWhat you have to do is to register a BroadcastReceiver in your activity to update the UI when the user is in it. Obviously, when the user leaves the activity, the broadcast receiver will not receive any other event. In the onResume you simply have to call UploadService.getTaskList() to see which tasks are still in progress. If you have previously saved all the uploadIds, you can easily see which of them have been completed since the user left your activity, so you can show the UI with the updated status.\n. You're welcome\n. URI support is work in progress (uri_support branch) and is part of 3.1 release, which will be released very soon. Then you can simply pass the stringified version of your file:// or content:// URI.\n. @Habibah28 added MyCyberLaw. It will be visible on the main README when I release 3.1\n. This seems to be happening in a test environment. Add some more details.\n. As the error says, you are passing a null or invalid user_id to your server. Check the parameters you are sending in the request.\n. You can specify a single intent for an Upload request. What you do after that is up to you. So you could launch an activity for example and decide where to redirect the user from there.\nNumber of retries are set in the upload request when you create them. If the request fails even after the automatic retries, is up to you to decide how to allow users to retry the same request. \nAll the above is like that on purpose, as the library is designed to be as simple as possible, to be more flexible and allow many different implementations and behaviours. \n. @iamdangerous you shouldn't perform DB or time consuming operations inside a BroadcastReceiver! I suggest you to use the receiver only to start IntentServices when you have to do I/O (either to/from disk or the network)\nQuoting from @hendrawd response:\n\nyou can copy the current library and import it as a project library and edit UploadServiceBroadcastReceiver.java directly, so you can get the context.\n\nI do not advise to do that, because you loose the purpose of gradle dependency management, and you will not have automatic updates of the library. Best practice suggests that you should never import a project like that. Just keep using the gradle dependency as you do. If you need a custom broadcast receiver and the one provided in the library does not suit your needs, just copy the contents of UploadServiceBroadcastReceiver.java inside a new class of you project and make the needed changes. That class only contains the boilerplate code needed to correctly receive the events, so you are safe copying its content or inheriting from that class and introduce your own logic.\nHowever, it's not a bad idea to extend the default implementation of UploadServiceBroadcastReceiver by providing the Context in the receiver methods, to easily launch intents. Adding it as an enhancement for the next release.\n. If you're importing the whole library only for the BroadcastReceiver, you are better using the gradle dependency and only copy the Java source of the receiver, this way you'll benefit from easier upgrades for the future releases\n. @hendrawd got it. Will be solved in 3.1 when context will get passed to the receiver methods\n. @prashermanas HTTP Multipart and Binary uploads does not support resume, as per RFC specifications. Only FTP uploads supports resume. If you want to upload or retry downloads only when a connection is available, you have to implement your own strategy. Here you can find some hints.\n. What is your uploaded files size? \nAlso, bear in mind that the upload progress delegate does not work in background, but only when your activity is in foreground. You have to use the broadcast receiver in the background.\n. The files are really small, so if you have a good bandwidth from client to server, it's possible that the onProgress gets called only once at the start and then the onCompleted gets called. . Resume is supported for the entire Upload operation, not partially uploaded files. For example if you have 3 files and you upload 2 of them successfully and the third one interrupts, the upload will continue by retrying the third one from the start. This is because I've not found a way to do that using the apache Commons net library (which is the library used to add FTP capability). If you know how it's done, suggestions, code snippets or pull requests are welcome!. Of course. Check the wiki Recipes page. Check out the demo app and read this. Enable library debug log and you will see what is going on internally. I'm sure retry is working. The code seems ok. The library has a back off timer in the retries, so the next retry is not bound to internet connectivity change but it's done after an increasing delay (check wiki for details). If you think it's a bug, provide more details and steps to reproduce.. Made a fix and added to 3.1 dev version. You can try it from JitPack. This includes also fix for #214 \ngroovy\nrepositories {\n    maven { url 'https://jitpack.io' }\n}\ngroovy\ncompile 'com.github.gotev:android-upload-service:c5d3b2940f'\nLet me know if the issue can be considered fixed. Thank you!. I think it's a good solution because you are not supposed to re-use the same UploadRequest object twice and just change a parameter and then call the start method again. You should create a new UploadRequest for every operation, so basically just encapsulate the UploadRequest object creation in a function and pass the needed parameters (as shown in the Recipes snippets). But if the file path is same, notification will be re-used\n@hendrawd made some tests, but can't find evidence of this. > new MultipartUploadRequest(this, mCurrentPhotoPath, url)\n@hendrawd If you do like that, of course you will get that behaviour, because every upload request should have a unique ID, but in your case you are simply using the path, so if I want to upload the same file to two different servers for example, you are not correctly providing a unique ID. I advise you to rely on the library's internal unique ID system, but if you want to use your own, make sure the ID you generate is unique for every new request.. The library simply generates an UUID4 string, which you can generate and achieve the same thing . @hendrawd you have explained your scenario well even in the previous post. What I suggest you to do in your case is simply: \n```java\nString uploadId = UUID.randomUUID().toString();\nMultipartUploadRequest req = new MultipartUploadRequest(this, uploadId, url);\nThe `id` which you will get from:java\nString id = req.startUpload();\n``\nin this case is the sameuploadIdyou have passed in the constructor, so you know theideven before thestartUploadmethod invocation, because you generated it. Scenario like yours are exactly the reason why I've implemented also the constructor in which you can pass your ownuploadId`.\nSome reference:\nMultipartUploadRequest constructor | startUpload method. Made a fix and added to 3.1 dev version. You can try it from JitPack.\ngroovy\nrepositories {\n    maven { url 'https://jitpack.io' }\n}\ngroovy\ncompile 'com.github.gotev:android-upload-service:0bf8fdc257'\nLet me know if the issue can be considered fixed. Thank you!. @hendrawd can I consider the issue as solved?. Enable library debug log and post it here. Are you using the last stable version from gradle dependency (3.0.3) or the latest master revision?. I would love to see a mini demo project which replicates this error systematically, with description of the steps to reproduce, so I could address it. Thanks for the fix :). is your app going in the background during the upload?. Ok, how can I replicate your scenario? Please fill in the required information in the issue\nXLSX doc is not uploading to server\nis insufficient as information to be able to address an eventual bug in the library.. Marking as invalid and closing due to lack of information. Don't know what you exactly want to achieve, but here's a multipart example:\n```java\npublic void uploadMultipart(final Context context) {\n    String json = \"{\\\"someField\\\": \\\"someValue\\\"}\";\ntry {\n    String uploadId =\n      new MultipartUploadRequest(context, \"http://upload.server.com/path\")\n        // starting from 3.1+, you can also use content:// URI string instead of absolute file\n        .addFileToUpload(\"/absolute/path/to/your/file\", \"your-param-name\")\n        .addParameter(\"jsonParameterName\", json);\n        .setNotificationConfig(new UploadNotificationConfig())\n        .setMaxRetries(2)\n        .startUpload();\n} catch (Exception exc) {\n    Log.e(\"AndroidUploadService\", exc.getMessage(), exc);\n}\n\n}\n. of course, you can add as many parameters as you want. Just pass every json string as a different parameter name and you're done! For example:java\n.addParameter(\"firstJson\", json1)\n.addParameter(\"secondJson\", json2)\n```\nCheck also the Wiki and JavaDocs. How have you solved it?. Thank you for the explanation! Upload Service aims to target always the latest version of the dependencies, to be up to date. If you have problems, you can rely on Gradle's conflict resolution strategies, to use the most appropriate version of OkHttp for your project, avoiding you to do multiple library dependencies updates in a row for a particular build, like you experienced. \nIf you have problems with the library, create new issues, with as much detail as you can to help replicate your scenario.. What do you mean by \"issue is not permanent\"? \nFrom the log I can see that the first upload is completed successfully, so you should see the upload successful notification. The second upload is cancelled, so the onCancelled delegate method will be called and you should see the error notification. I don't see anything strange here.\nJust two notes. You can write the code like this by using the supported builder pattern:\njava\nnotificationConfig.setIcon(R.mipmap.ic_launcher)\n                  .setTitle(context.getString(R.string.app_name))\n                  .setInProgressMessage(context.getString(R.string.uploading))\n                  .setCompletedIcon(R.mipmap.ic_launcher)\n                  .setCompletedMessage(context.getString(R.string.uploaded))\n                  .setErrorIcon(R.mipmap.ic_launcher);\njava\nnew MultipartUploadRequest(context, Constants.BASE_URL + \"/uploadFile\")\n    .addFileToUpload(fileUri.getPath(), \"file\", fileName)\n    .setNotificationConfig(notificationConfig)\n    .setMaxRetries(10)\n    .setDelegate(delegate)\n    .startUpload();. @vgevorgyan this is really strange, because it shouldn't happen. I've tried to make multiple requests at the same time, but no upload gets cancelled automatically like in your log. If you could provide a snippet (or a demo app) with which this happens systematically, feel free to re-open the issue and post everything here, so I could replicate it and solve it. Thank you!. Reproduced! With 10 requests, made with a 1s interval, I can get two cancelled requests every time.\n```java\nprivate void reproduce226(final Context ctx) {\n    Handler handler = new Handler();\nfor (int a = 1; a<= 10 ;a++) {\n    handler.postDelayed(new Runnable() {\n        @Override\n        public void run() {\n            multipleRequests(ctx);\n        }\n    }, 1000 * a);\n}\n\n}\nprivate void multipleRequests(Context ctx) {\n    final String endpoint = \"http://posttestserver.com/post.php\";\n    final int maxRetries = 2;\nfinal UploadNotificationConfig notificationConfig = new UploadNotificationConfig()\n        .setAutoClearOnCancel(false)\n        .setAutoClearOnSuccess(true);\n\ntry {\n    String fatherId = \"father\" + Long.toString(System.nanoTime());\n    new MultipartUploadRequest(ctx, fatherId, endpoint)\n            .setMethod(\"POST\")\n            .setNotificationConfig(notificationConfig.setTitle(fatherId))\n            .addParameter(\"color\", \"#ffffff\")\n            .setMaxRetries(maxRetries)\n            .setDelegate(new UploadStatusDelegate() {\n                @Override\n                public void onProgress(Context context, UploadInfo uploadInfo) {\n\n                }\n\n                @Override\n                public void onError(Context context, UploadInfo uploadInfo, Exception exception) {\n\n                }\n\n                @Override\n                public void onCompleted(Context context, UploadInfo uploadInfo, ServerResponse serverResponse) {\n                    try {\n                        String childId = \"child\" + Long.toString(System.nanoTime());\n                        new MultipartUploadRequest(context, childId, endpoint)\n                                .setMethod(\"POST\")\n                                .setNotificationConfig(notificationConfig.setTitle(childId))\n                                .addParameter(\"color\", \"#ffffff\")\n                                .addParameter(\"test\", \"value\")\n                                .addParameter(\"new\", \"parameter\")\n                                .setMaxRetries(maxRetries)\n                                .startUpload();\n                    } catch (Exception exc) {\n                        Log.e(getClass().getSimpleName(), \"second request error\", exc);\n                    }\n                }\n\n                @Override\n                public void onCancelled(Context context, UploadInfo uploadInfo) {\n\n                }\n            })\n            .startUpload();\n} catch (Exception exc) {\n    Log.e(getClass().getSimpleName(), \"multipleRequests Error\", exc);\n}\n\n}\n@mbernier85 is it similar to your code?. with the last commit, the issue should be fixed, because by running it in the demo app, no more requests are being cancelled. The problem was [here](https://github.com/gotev/android-upload-service/commit/3e2afd0a38a94b9e98d8c41b088576904348ef50#diff-f0fbcc8d8677824dae1f58e2469c0468L343) because after a task was completed, a check was made to see if there were other running tasks, and if not, the service was shut down. This woudn't let child requests to run, because of the following sequence of operations which happened:\n1. task completed -> fire onCompleted event\n2. no more running tasks? begin service shutdown\n3. new task started from onCompleted callback\n4. the service performs shutdown operations (see UploadService onDestroy), \n   which in turn cancels all the running tasks -> fire onCancelled event on the new task\n5. service stopped\n```\nSo, the service's auto-shutdown strategy should be re-thinked\n. I think the library already has all the needed prerequisites to run in a separate process\n\nAndroid Studio is used for library development. By enabling library debug log, many things can be spotted without using a debugger at all.\nThe library does not use LocalBroadcastManager but already sends global broadcasts and the receiver implementation is based on BroadcastReceiver.\nThe library does not use SharedPreferences. It only has in-memory state. Task, queue or state management outside the memory is up to the library user on purpose, to be as generic an indipendent as possible.\n\nIf you want to start making tests, you can fork the library and safely add the android:process=\":uploadservice\" attribute in the manifest. The two semicolons at the beginning of the name indicates that the new process is private to the app which created it, which is what we want.\nYou can use the provided demo app in the examples directory, which is already linked to the local project to make tests.. Here there is some useful information about Doze and how to test it. Reporting testing here.\nTesting your app with Doze\nYou can test Doze mode by following these steps:\n\nConfigure a hardware device or virtual device with an Android 6.0 (API level 23) or higher system image.\nConnect the device to your development machine and install your app.\nRun your app and leave it active.\nForce the system into idle mode by running the following command:\nshell\n    $ adb shell dumpsys deviceidle enable\n    $ adb shell dumpsys deviceidle force-idle\nObserve the behavior of your app after you reactivate the device. Make sure the app recovers gracefully when the device exits Doze.\n\nTesting your app with App Standby\nTo test the App Standby mode with your app:\n\nConfigure a hardware device or virtual device with an Android 6.0 (API level 23) or higher system image.\nConnect the device to your development machine and install your app.\nRun your app and leave it active.\nForce the app into App Standby mode by running the following commands:\nshell\n    $ adb shell dumpsys battery unplug\n    $ adb shell am set-inactive <packageName> true\nSimulate waking your app using the following commands:\nshell\n    $ adb shell am set-inactive <packageName> false\n    $ adb shell am get-inactive <packageName>\nObserve the behavior of your app after waking it. Make sure the app recovers gracefully from standby mode. In particular, you should check if your app's Notifications and background jobs continue to function as expected.\n\n. After some tests on an Android emulator (qemu) and on a Nexus 5X with Android 7.1.2 (API 25) with the following procedures, Doze does not seem to affect foreground uploads in current 3.2.x UploadService:\nPrerequisites\n\nRunning demo server provided in the examples\nRunning demo app provided in the examples on a device or virtual device connected to adb and Android Studio's LogCat\nTerminal open in the utils/doze-test directory (it requires adb to be in the PATH of your system)\n\nDoze\n\nOpen the demo app\nSelect a large file (>= 50 MB) and upload it with a multipart upload\nUsing scripts in utils/doze-test, execute ./doze-enable\nCheck adb log to see if the upload continues\nIf it continues after some time, execute ./doze-disable\n\nApp standby\n\nOpen the demo app\nSelect a large file (>= 50 MB) and upload it with a multipart upload\nUsing scripts in utils/doze-test, execute ./app-standby-enable\nCheck adb log to see if the upload continues\nIf it continues after some time, execute ./app-standby-disable\n\nSo, after those tests, it seems Doze mode is fully supported. If you have a device on which is not working, reopen the issue and provide as many details as you can to replicate the scenario.. > The lack of an explicit reference causes the constructors to be stripped from both FileSchemeHandler and ContentSchemeHandler during release builds of a Xamarin Android project when using this library from a Xamarin Android Binding library.\nI don't know Xamarin.Android but maybe it uses ProGuard or something similar. At that point in the code, Java Reflection is used. Since the constructors are not public, they are stripped down and you get the exception. Is there a way in Xamarin to add exceptions or keepClass attributes like in ProGuard on Android? I think it's the better option, because I would keep the implementation as it is now by using reflection, which makes extensions easier and reduces boilerplate code.. Reflection is also used in task creation, but in that case classes and the constructors are all public, and you don't have issues there. Maybe Xamarin simply strips down everything non public. If that is the case, I can make the change, which also could add the benefit to enable custom SchemeHandler implementations by library users. made constructors public and changed the reflection method used. Tried on Android and it works. Please try and check if you still have the runtime error in Xamarin Android. @ianschmitz thank you! I've changed the reflection pattern used in SchemeHandlers, so a constructor is not needed anymore. I think it should be fine now.\nI've seen that Xamarin uses NuGet for dependency management. It will be fantastic to have Android Upload Service published there. Do you know how to do it and if it's possible to automate it? All I need is a command line script (+ a bunch of other files if needed) which builds the library bindings for Xamarin Android and then publishes them to NuGet. This way everytime I make a new release, it will be available also on NuGet.. @ianschmitz yes some return types have been changed to fully support inheritance in builder pattern without writing a ton of boilerplate, but were you able to do the bindings again without problems after that change? What I've used is simply Java Generics.. Some research is needed on this, because from your report it seems Xamarin bindings have serious trouble in mapping Java Generics, which I've introduced to ease the native Android development of the library. http://stackoverflow.com/questions/36533263/xamarin-android-binding-to-java-type-which-inherits-generic-type. I think it would be nice to support also Xamarin.Android, because not so many libraries out there are supported out of the box. Do this work?\n```java\nMultipartUploadRequest request = new MultipartUploadRequest(Application.Context,\n                ApiClient.GetMediaUploadEndpointUrl(audioData, sendEmail));\nrequest.AddFileToUpload(FileSystem.GetAudioStorageFilePath(audioData.FileName),\n                        \"contentFile\", \"Audio_Recording.m4a\", \"audio/mp4\");\nrequest.AddHeader(\"Cookie\", cookieHeaderValue);\nrequest.SetNotificationConfig(notificationConfig);\nrequest.SetMaxRetries(3);\nstring uploadId = request.StartUpload();\nIf it works, it's certainly less elegant, but requires zero effort to bind it and you can easily use the library in Xamarin. Then, to make it elegant again, it would be sufficient to extend `MultipartUploadRequest` in pure C# (e.g. `CMultipartUploadRequest`)  and override all the methods so you can use the builder pattern again:java\nstring uploadId = new CMultipartUploadRequest(Application.Context, ApiClient.GetMediaUploadEndpointUrl(audioData, sendEmail))\n                .AddFileToUpload(FileSystem.GetAudioStorageFilePath(audioData.FileName), \"contentFile\", \"Audio_Recording.m4a\", \"audio/mp4\")\n                .AddHeader(\"Cookie\", cookieHeaderValue)\n                .SetNotificationConfig(notificationConfig)\n                .SetMaxRetries(3)\n                .StartUpload();\n``\nThe library supportsMultipartUploadRequestandBinaryUploadRequestin the core (so two C# classes which extends them are all it's needed to be implemented), plusFTPUploadRequestwith a plugin module, which can be binded to C# the same way. What do you think about this?. Upload task implementation handles the composition and writing of the entire body, as you can see in [MultipartUploadTask](https://github.com/gotev/android-upload-service/blob/master/uploadservice/src/main/java/net/gotev/uploadservice/MultipartUploadTask.java). If you manipulate the body in the interceptors, you can't have a precise count, and also other strange things could happen. I strongly advise you to **not manipulate or alter the body in the interceptors**, because the total count of body bytes will not be correct, and the library doesn't have a chance to do anything. From my point of view, it's a wrong way of using interceptors with UploadService. Use interceptors for headers (such asAccess-Token` injection).. I know HttpLoggingInterceptor and I also use it in my projects. You have to turn off body log level (use header instead), because it works well only for small requests. It's not advised for files, as you will get all the file output in your LogCat. Also, remember to put the logging interceptor as the last one in the chain of interceptors, as suggested by the authors.\nTo only inject headers, you can simply do this:\n```java\nprivate Interceptor getAuthInterceptor() {\n    return new Interceptor() {\n        @Override\n        public Response intercept(Chain chain) throws IOException {\n            Request.Builder request = chain.request().newBuilder()\n                    .header(\"YourHeader\", \"YourValue\")\n                    .header(\"YourHeader2\", \"YourValue2\");\n        return chain.proceed(request.build());\n    }\n};\n\n}\nWithout setting method and body again. I believe this line is the source of your problems:java\nrequestBuilder.method(original.method(),original.body());\n``. Updated also the demo app to show how to use a request interceptor and logging interceptor. Made some tests with it and the described behavior can't be replicated.. Multipart protocol is used when you have both files and parameters. If you have only parameters, you needn't a multipart request, but a simple POST request. Upload Service request builders does the linting and launches an exception if no file is provided. It's just how the protocol works and Upload Service simply follows the standard strictly. In your case, if you don't have a file in your form, simply do a POST request. If your server only acceptsmultipart` even without files, you can also extend the core functionality of the library to have what you need by extending MultipartUploadRequest and MultipartUploadTask.. #244 makes this possible. Il will be possible to start Multipart upload requests even without any file starting from release 3.2. wonderful! Thank you for the pull request!. just like any other file on your device. Check recipes. The library does not support uploading a byte array directly because of the following things:\n passing large data in the intents used to start the service is not advisable, as per android docs\n if the upload fails after the retries or your app gets killed by the system, you can't automatically retry it when the service or your app gets restarted, because that byte array will be lost since it's in-memory only.\nSo if you pass large dateset across your app in the intents, avoid that, as it's system and memory inefficient. What I advise you to do is to persist your byte array in a temporary file inside your app's cache, get the file path, pass it to the upload service and set setAutoDeleteFilesAfterSuccessfulUpload(true) on the upload request, so as soon as the upload gets completed successfully, your temp file will be automatically deleted.. @mmintz multipart uploads and binary uploads are not the best when you have a slow or dodgy connection, that's known, because if the connection drops or the response from the server exceeds the timeouts, you have to start over. It's just how the protocol works. By dynamically tuning network timeouts to greater values (which you can do in Upload Service) you can increase the fault tolerance. Beyond that, there's really nothing more we can do client side. The best is to support resumable uploads (check #171 ).\n\nNo need for me to provide server code or anything\n\nAny advice on how to simulate an environment like yours? Have you tried to measure the bandwidth between you and your server, the percentage of lost packets and latencies in the scenario you described?\n\nThis issue has been reported before but no change. Before the upload progress was not resetting (when the upload was retried) so you would get uploads with progress 300%. Now progress is fixed but files still not get uploaded.\n\nAre you referring to #161 ?. I recommend you to use OkHttp stack with a request interceptor to set authentication tokens. Check also the OkHttp Authenticator. Headers set with interceptors are added to the Upload Service requests starting from release 3.1. update if you use an old version.. Doing some thinking about how to add an onRetry callback. The discussion is open.\nFirst of all, it means making the initial request accessible and modifiable and that will require a major refactoring in the library.\nIdeally, you want to have something like:\njava\npublic boolean onRetry(Context context, int attempt, UploadInfo info, \n                       UploadRequest originalRequest, Exception exception) {\n    // your code\n    // if the retry has to be done, return true, otherwise false\n    return true;\n}\nAs of today, this callback will be called inside the UploadServiceBroadcastReceiver or the UploadStatusDelegate, which are both run on the main thread. \n@lolet I imagine that to refresh your token, you need to perform a network request from within the onRetry callback and set the new one after you got the response. This means performing a blocking call or something that requires I/O or takes some time. To be able to do that, the only solution I can see is that the onRetry gets called in the background, in the same thread where the UploadTask is running, to prevent NetworkOnMainThread and blocking the UI. This is easier to do if you set a delegate, but problematic when you use BroadcastReceiver which receives the Intent on the main thread and has no way of performing something time-consuming.. @lolet I've seen the commit. Thank you!\nFirst, a little explanation. The onError gets called only if you can't reach the server because it's down or you have network issues. That's how I've decided to implement it initially in the library. Maybe it will be more appropriate to call onCompleted only if the server responds with 200 <= httpCode < 300 and call onError for both network connectivity exceptions and server errors, by also providing the server response (#259).\nNext, I would call broadcastRetry only if shouldContinue = true, otherwise it will be called even if the request gets cancelled in some cases.\nAnother thing which has to be done is request serialization, to be able to access the original request and fully modify it (headers, parameters and files) in the onRetry method.\nAfter doing all the above mentioned refactorings and implementations, the main problem still persists: how to do time-consuming things inside the onRetry method, which gets called on the main thread. The only way it could be done in my opinion is make the onRetry return a Future<Boolean>. Something like this:\njava\npublic Future<Boolean> onRetry(Context context, int attempt, UploadInfo info, \n                               final UploadRequest originalRequest, \n                               Exception exception) {\n    return new FutureTask<Boolean>(new Callable<Boolean>() {\n        @Override\n        public Boolean call() {\n            // do something synchronous which consumes time\n            // you can modify the originalRequest by calling methods on it\n            // if the retry has to be done, return true, otherwise false\n            return true;\n        }\n    });\n}\nIf the method returns null, the retry will not be performed, otherwise the task will invoke the Future in its own thread and perform the retry if it returns true.. The above ideas are subject to the same considerations I wrote here. Unless a solution is found, this feature will be impossible to implement for broadcast receivers. If in a month from now nothing comes up, I will close this marking it as wontfix.\nIf you need onRetry callbacks to renew tokens or for authentication matters, consider using OkHttp stack with UploadService, together with Authenticator and Interceptors, which solves the problem.. java\nMultipartUploadRequest req = new MultipartUploadRequest(context, \"your.server.com\")\n    .addFileToUpload(\"/path/to/fileA\", \"fileA\")\n    .addFileToUpload(\"/path/to/fileB\", \"fileB\")\n    .addFileToUpload(\"/path/to/fileC\", \"fileC\");. you can make two binary upload requests. You can't put parameters in binary uploads, as per docs in the recipes section of the wiki.. 1. In the UploadInfo you have the list of the successfully uploaded files\n2. You mean limiting the upload bandwidth?. java\nList<String> files = uploadInfo.getSuccessfullyUploadedFiles();\nfor (String file : files) {\n    //Do something with each file\n}\nYou can see this in action in the demo app as well.\nAt the moment, there's no way to have client side rate limiting for the uploads. Do you have an idea on how to do it?. try with:\njava\n-keep class net.gotev.uploadservice.** { *; }. @BobCat931 thanks for the feedback. Added to https://github.com/gotev/android-upload-service/wiki/Advanced-topics. > Setting -keep class net.gotev.uploadservice.* { ; } excludes the whole library from ProGuard processing which is unnecessary and defies the sole purpose of ProGuard.\nI know. What methods and classes to keep depends on which features of the library are you using, so providing a ProGuard configuration which is suitable for all the scenarios is not possible. Thank you for your feedback, using -keep class net.gotev.uploadservice.schemehandlers.** { *; } can certainly be a better fit in most of the cases and can help reduce methods.. Improved wiki. @dominolog is it a PR done by mistake?. I'd love to see a PR with that feature!. yes, a multipart upload request with threee files. You can use placeholders in notification messages. https://github.com/gotev/android-upload-service/wiki/Recipes#notification-configuration. And yes, you can add multiple files like that. So, you need something a library doesn't support yet: multiple parallel multipart requests which has to be aggregated on a single notification, but with separate error handlers for each upload. To support that, a library redesign may be needed and your help is greatly appreciated.. if you send all the images in a single request, you can't make 1 by 1 uploads, because all the files are added in the same request. That's how multipart works. Also, since the multipart request is not resumable, if at some point the upload fails, you have to start over from the beginning. To make 1 by 1 uploads you will have to make N Multipart requests and handle each one of them separately.\nIf you want to have N multipart requests, but see their progress in a single notification with overall progress, it has to be implemented.\nBeing said that, if you have a single multipart request, you can display the total number of files and the uploaded files with the following upload notification config:\njava\nprotected UploadNotificationConfig getNotificationConfig() {\n    return new UploadNotificationConfig()\n            .setInProgressMessage(Placeholders.UPLOADED_FILES + \" of \" + \n                                  Placeholders.TOTAL_FILES + \". Speed: \" + \n                                  Placeholders.UPLOAD_RATE)\n            .setCompletedMessage(\"upload completed\")\n            .setErrorMessage(\"error while uploading files\")\n            .setCancelledMessage(\"upload aborted\")\n            .setRingToneEnabled(true);\n}\n\nin case there is more checks, it needs to read from a server callback better.\n\nWhat do you mean by read from a server callback better?\nFrom my point of view, the better choice for more complex use cases is to use the broadcast receivers, either globally or inside an activity, depending on your use case. Both are documented here. You can have whatever checks you need in the onCompleted where you have the HTTP status and response body from the server.. @mostafaspace maybe #259 addresses exactly what you need. @azizarc88 open a new issue instead of posting here, thanks. Unfortunately I don't have plans to do it myself due to lack of time, but contributions are always welcome, so feel free to make your own implementation and send a PR. Closing this due to lack of contributions so far. Feel free to reopen it if you have a PR ;). The error was replicated in the demo App. After running it with the fixes applied, this is the output:\njava\nD/UploadService: UploadRequest - setting provided upload ID\nD/UploadService: UploadRequest - Created new upload request to http://posttestserver.com/post.php with ID: d1497088-2adc-438e-add9-17e2e986601e\nI/UploadService: UploadService - Starting service with namespace: net.gotev.uploadservicedemo, upload pool size: 4, 1s idle thread keep alive time. Foreground execution is enabled\nD/UploadService: UploadService - Successfully created new task with class: net.gotev.uploadservice.MultipartUploadTask\nD/UploadService: HttpUploadTask - Starting upload task with ID d1497088-2adc-438e-add9-17e2e986601e\nD/UploadService: OkHttpStackConnection - creating new connection\nD/OkHttp: --> POST http://posttestserver.com/post.php http/1.1\nD/OkHttp: Content-Type: multipart/form-data; boundary=-------AndroidUploadService1488564041697\nD/OkHttp: Content-Length: 149\nD/OkHttp: Connection: close\nD/OkHttp: --> END POST\nD/UploadService: UploadTask - Broadcasting upload progress for d1497088-2adc-438e-add9-17e2e986601e: 101 bytes of 149\nD/OkHttp: <-- 200 OK http://posttestserver.com/post.php (1233ms)\nD/OkHttp: Date: Fri, 03 Mar 2017 18:00:43 GMT\nD/OkHttp: Server: Apache\nD/OkHttp: Access-Control-Allow-Origin: *\nD/OkHttp: Vary: Accept-Encoding\nD/OkHttp: Connection: close\nD/OkHttp: Content-Type: text/html; charset=UTF-8\nD/OkHttp: <-- END HTTP\nD/UploadService: HttpUploadTask - Server responded with HTTP 200 to upload with ID: d1497088-2adc-438e-add9-17e2e986601e\nD/UploadService: UploadTask - Broadcasting upload completed for d1497088-2adc-438e-add9-17e2e986601e\nD/UploadService: UploadService - All tasks finished. UploadService is about to shutdown...\nD/UploadService: OkHttpStackConnection - closing connection\nD/UploadService: UploadService - Stopping foreground execution\nD/UploadService: UploadService - UploadService destroyed\nThe request is successful. To prevent the upload service running indefinitely, starting from 3.3 it can be explicitly stopped using \n UploadService.stop(context);. It returns true if the service is getting stopped, false otherwise. It stops the service only if no tasks are running\n UploadService.stop(context, true). It returns true if the service is getting stopped, false otherwise. It forcefully stops the service, even if some tasks are running.. Implemented new auto shutdown strategy. The service will be automatically shut down after 10s of idleness. This value is configurable with UploadService.IDLE_TIMEOUT and is expressed in milliseconds.. Closing this due to lack of interest from the community about this feature, so it's better to just drop it.. As reported in the recipes wiki, javadocs and demo app for multipart upload request, just call setUtf8Charset method on the request builder.. I use the library in production and I'm sure it correctly sends the multipart data. The request is correct. You are passing a file as data and three parameters. Thank you for all the details, but unfortunately I do not understand how you parse the multipart data in your server side script. I think the error is actually there. What I advise you to do is to clone the git repo and start the demo server, by following the instructions provided here. Perform the same upload without changing the request, but only the server URL. With the demo server you will see exactly which parameters gets passed in the request and the files will be saved in the upload directory.. @Ceaggar http://www.strathweb.com/2012/08/a-guide-to-asynchronous-file-uploads-in-asp-net-web-api-rtm/. With which version are you experiencing this problem? This is similar to #245 . released 3.2.2 which fixes this issue. This has been resolved in #244, which is part of 3.2 release. Just upgrade to the latest 3.2.2 release.. It's simply because the example you copied and pasted is really old and the public API of the broadcast receiver has been changed since then. Updated example here: https://github.com/gotev/android-upload-service/wiki/Monitoring-upload-status#single-upload-broadcast-receiver. I agree with you. Haven't considered this use case when introduced that check.. released version 3.2.3 with the check removed. resolved in #254. Follow the setup instructions in the wiki, then go to recipes. Probabily you need a multipart upload. To monitor status, check the monitoring upload page.. You should use the broadcast receiver. Just invoke the multipart request from everywhere you have a context. This will launch the upload service, which will be executed even if the user goes away from the activity. To listen for the status, create a new broadcast receiver which extends the UploadServiceBroadcastReceiver, register it in your manifest and you're done. There are instructions in the monitoring wiki page. \nAny suggestions on how to improve the docs and make it more easily understandable?. Just check the monitoring wiki page and follow the instructions for a global broadcast receiver. You should open new issues for those requests, but for this time only I'll respond here.\nYou can specify custom uploadIDs. Just create a naming convention like: \n\"videoUpload-\" + System.currentTimeMillis()\nAnd then you can differentiate uploads in delegates and broadcast receivers by matching uploadIDs starting with videoUpload- or whatever else you decide.\n. I have to remind you this is not a support forum. Issues here has to be pertinent to library errors and in this case it seems to be purely a server-side error due to your particular environment or configuration. I encourage you to head to the troubleshooting section of the wiki and to make your tests also with the provided node server example, which I'm sure that behaves correctly. You can also make tests with posttestserver.com. > I'm no expert on requests but I think onError will not get the job done\nActually, I think it can solve the problem, and I'm going to explain why IMHO.\n\nWhat if the request reached the server, and there was a custom error I created? \n\nWhen implementing whatever endpoint, you should always follow the HTTP Status codes definition in RFC2616 to be standard compliant and to not reinvent the wheel.\n\nFor example: \"max file size is 5mb\", its a simple if/else check on server-side where the request is received but the file did not moved to folder to say its \"uploaded\".\n\nFail fast is a good approach when dealing with requests to a server. If the client is not allowed to perform an action, you should kick it as soon as possible.\nFollowing the RFC, to implement your example, you should simply return 413 Request Entity Too Large and not accept the request at all, so you don't consume network bandwidth and resources both on the client and the server. When you have to check the length of the upload, always use fixed length streaming mode on the client, which is supported by Upload Service. This results in the Content-Length header being sent in the request, so you can inspect it on the server and act accordingly. \nYou can always return a response body with HTTP status 4xx. In fact, if you have more complex checks which does not match any of the 4xx error codes, practice suggests to send a 400 Bad Request with the error detail in the response body. \nE.g.:\nHTTP Status: 400 Bad Request\nResponse body:\njson\n{\n  \"error\": \"you should accept the privacy policy agreements in your profile to be able to upload photos\"\n}\nLet's examine a more complex scenario. You upload a file which has to be validated by the server after it has been uploaded. You let the client perform the upload, and after it has been completed you perform the server-side checks. After the checks have been performed, you return a 2xx if everything is ok or a 4xx with all the relevant details which tells the client exactly what has gone wrong.\nHaving said that, I like your idea to be able to modify the notification message from the callbacks, because it allows you to display more details to the user after the request has been completed (either successfully or with an error), though I'm not sure if it's possible with the actual architecture, because each upload task manages its own notification and then sends broadcasts to notify the status outside the task. . What you return in the response body and how to parse it, is up to you, there's no official standard for that. The problem is how to update the notification from the callbacks, given the considerations of my previous post.. This is getting OT here as new ideas comes. Let's continue the discussion about notifications on #260. Ideally, what I want to achieve is to pass the notification itself to the onSuccess and onError callbacks. At that point you could modify it as you wish. You can add all the required business logic in the onSuccess and onFailure callbacks to best accomodate your needs and to override the default behaviour.\n\nWe have a service that returns a 200 response code but returns a JSON error object in the response text\n\nI advise you to return a 4xx from your server if the upload is not successful or some server-side validation does not pass, as I wrote here to be as standard compliant as possible.. @PhilLab currently there's no such feature, but what you propose is interesting. Opened a new issue: https://github.com/gotev/android-upload-service/issues/291. Thinking of a way to pass the entire Notification.Builder to the broadcast receivers, to be able to modify the notification from the callbacks there are the following problems:\n everything which is transmitted in a broadcast intent must be Parcelable or at least Serializable. NotificationCompat.Builder is not.\n If I invoke the build method on the builder, I get a parcelable notification, but I couldn't modify it\n Even if I find some way of passing the editable notification to the callbacks, there's another problem. The task communicates in a decoupled way with the receiver, so If I send an event, I have to wait for another event to come in to proceed. In this case, when I send the notification, I have to wait for another incoming intent to be able to proceed to display the notification. This smells of bad design, also because If the library user doesn't need receivers at all to monitor the uploads, the upload task would not work.\n Considering only delegates instead of broadcast receivers, the problems listed above are partially gone, but as I wrote in #292 the actual callbacks implementation leads to memory leaks in many cases and I would not proceed on this issue before fixing that behaviour. When fixed, there are some scenarios to be considered. The delegate can be in a class in your app, in a Service or in an Activity. In the first case, there's no problem when your app is running, even in the background. In the second and third case, if the service gets stopped before the upload has completed or the user navigates away from the activity, you will lose the reference to the delegate and the Upload Service will start dispatching the remaining events for that task as broadcast intents, which can be captured only by global broadcast receivers.\nSo, after those thoughts, I think there is no way of passing the notification to the callbacks, modify them inside the callbacks, return them to the task and then display them in the notification center. I'm open to further ideas. If nothing comes in, I'll mark this as wontfix in a month from now. That would be fantastic!. Closing this due to the fact third party upload services change their implementations very often and implementing every one of them from scratch will require too much maintenance effort, so it's better to just use their SDKs, which are surely more maintained . Of course yes, just use context.getString(R.string.yourstring) to get the strings to pass into the UploadNotificationConfig setters.. Added example in the wiki: https://github.com/gotev/android-upload-service/wiki/Recipes#notification-configuration. The problem is due to the fact that you do this:\njava\npublic void addFileToUploadRequest(UploadFile uf) {\n    try {\n        uploadRequest.addFileToUpload(uf.filePath, \"file\");\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    }\n}\nSo what happens on the server-side is that you see only the last file, even if also the others are present in the upload payload. This is not a library problem, but how the multipart protocol works. You have two options:\n use file[] as parameter name for all your files, so in your server-side you can handle file as an array. Example\n assign a different parameter name to each one of your files, e.g. file1, file2, ..., fileN and then you have to handle them one by one on the server side. Example. You must create a new upload request for each file then, and you will have N parallel uploads for N files, which as a consequence will generate N notifications. Consider if you want to have N files in a single request (single notification with many files) or N requests (a notification for every uploaded file). You should not call startUpload multiple times on the same upload request. Every request is one-shot.. Seems a server-side problem or some header or parameter missing. I need more insights to address this. Please do also the following:\n- post here the cURL export of the request from Postman which works\n- try the above code with the demo server, by changing the endpoint of the request to http://yourip:port/upload/multipart (actual IP and Port will be shown once you start the server) and see if you still get an error. You can get either absolute path to files and also content provider paths from Android. Both are supported and a working example is implemented in the demo app, so I don't get the point of this question, but maybe I'm missing something from your point of view, so please make an example. Passing byte arrays in intents is certainly bad, especially for large content. . To get info about running tasks you have to use a broadcast receiver or a delegate like described in the monitoring wiki page. Actually that was done on purpose to allow you to choose the OkHttp version. Simply add a compile dependency to OkHttp 3.7.0 in your app or library and you should be ok. You have to simply add the required permission to your app and request it\nruntime for android > 6.0 before calling the service. Permission handling\nis not a library concern\nIl 19 mag 2017 6:21 PM, \"secu2\" notifications@github.com ha scritto:\n\nVersion info\n\nAndroid Upload Service version: 3.2.3\nAndroid version and API version: 19+ & targetSdkVersion 25\nHTTP stack (e.g. HurlStack or OkHttpStack): OkHttpStack\n\nWhat did you expect?\nThe upload service to be able to read a content://com.android.providers.media.documents/\nUri\nWhat happened instead?\nA permission problem :\njava.lang.SecurityException: Permission Denial: reading com.android.providers.media.MediaDocumentsProvider uri content://com.android.providers.media.documents/document/image:47 from pid=14195, uid=10076 requires android.permission.MANAGE_DOCUMENTS, or grantUriPermission()\nLibrary initialization code:\npublic BinaryUploadRequest setFileToUpload(final Uri file, final String fileName) throws FileNotFoundException {\n        this.fileName = fileName;\n    /* ------- DEBUG -------        Cursor cursor = context.getContentResolver().query(file, null, null, null, null);        if (cursor == null) {            Logger.error(getClass().getSimpleName(), \"null cursor for \" + file + \", returning size 0\");        }        int sizeIndex = cursor.getColumnIndex(OpenableColumns.SIZE);        cursor.moveToFirst();        long size = cursor.getLong(sizeIndex);        cursor.close();        Log.d(TAG, \"setFileToUpload: Successfully retrieved file size: \"+size);        /* ----- END DEBUG ----- */\n\n    super.context.grantUriPermission(\"net.gotev.uploadservice\", file, Intent.FLAG_GRANT_READ_URI_PERMISSION);\n\n    String fullUrl = serverUrl+path+fileName;\n    Log.d(TAG, \"Updating URL to \"+fullUrl);\n    this.params.setServerUrl(fullUrl);\n    realm.executeTransaction(...);\n\n    return super.setFileToUpload(Uri.decode(file.toString()));\n\n\n[Commented code] this code is causing the problem when used in the\n   runnable part of the upload service but works here as my app has all the\n   needed permissions to read a content Uri.\nAs you can see I tried to grantUriPermission() in vain\n\nRequest code:\nMyCustomBinaryUploadRequest(getContext(), UUID.randomUUID(), currentUserInstance.serverURL, currentUserInstance.currentAbsoluteDirPath(), null)\n.setFileToUpload(fileUri, fileName)\n.startUpload();\nWhere have you added the request code?\n\nActivity\nService\nOther class (add additional info about it)\n\nLogCat output (please set log level to DEBUG\nhttps://github.com/gotev/android-upload-service/wiki/Recipes#logging-\nfirst)\nD/MyCustomBinaryUploadRequest: Upload f29f61c7-0eaf-4ebe-a0dd-137171bc37e8 registered in DB for user drive5650\nD/MyCustomBinaryUploadRequest: Updating URL to https://drive5650.phpnetstorage.eu/IMG_20170518_163139.jpg\nD/MyCustomBinaryUploadRequest: Registering file to upload for request f29f61c7-0eaf-4ebe-a0dd-137171bc37e8 in DB for user drive5650 (File path on device : content://com.android.providers.media.documents/document/image%3A47 Remote path : /)\nD/MyCustomBinaryUploadRequest: Registered file to upload for request f29f61c7-0eaf-4ebe-a0dd-137171bc37e8) in DB for user drive5650\nD/AcceuilActivity: Launched upload of file content://com.android.providers.media.documents/document/image:47 to https://drive5650.phpnetstorage.eu/. (UploadID : f29f61c7-0eaf-4ebe-a0dd-137171bc37e8)\nD/AcceuilActivity: Registering the uploadservice status broadcast listener.\nI/UploadService: UploadService - Starting service with namespace: net.gotev, upload pool size: 2, 1s idle thread keep alive time. Foreground execution is enabled\nD/UploadService: UploadService - Successfully created new task with class: net.gotev.uploadservice.BinaryUploadTask\nD/UploadService: UploadService - f29f61c7-0eaf-4ebe-a0dd-137171bc37e8 now holds the foreground notification\nD/UploadService: HttpUploadTask - Starting upload task with ID f29f61c7-0eaf-4ebe-a0dd-137171bc37e8\nI/UploadService: UploadTask - Broadcasting error for upload with ID: f29f61c7-0eaf-4ebe-a0dd-137171bc37e8. Permission Denial: reading com.android.providers.media.MediaDocumentsProvider uri content://com.android.providers.media.documents/document/image:47 from pid=14195, uid=10076 requires android.permission.MANAGE_DOCUMENTS, or grantUriPermission()\nServer side\nServer side is an Apache 2 (WebDav)\nMore info\n\nI also tried in vain adding permissions to the uploadservice module \n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/gotev/android-upload-service/issues/269, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AQA7r_1L1jhczbMU_xXJvTviaAmWA_ASks5r7cF4gaJpZM4Ngu7y\n.\n. @gajicm93 Great! . Wow this is definitely bad! Going to fix OkHttp to 3.8.0 and make a quick release. Stay Tuned. just released 3.2.4. Update your dependencies and the problem will be solved. Enable library debug logging and you will see all the library internal messages. Need more details to tell if the problem is in the implementation you made or in the core library. If you post the sources it will be a lot easier. . The library can automatically delete successfully uploaded files. Just set setAutoDeleteFilesAfterSuccessfulUpload(true) in your Upload Request builder. If you want to delete only specific files after successful upload, don't invoke the setter on the builder and use the standard android way to delete files in the onCompleted method callback.. I've seen you changed the question in the title. If you have multiple questions, please open a new issue for every question. Also, provide some more details about How Upload to the specified directory? as your question is incomplete. Which protocol are you using, FTP, Multipart or something else?. Please add some more details. FTP Module is only a wrapper of Apache Commons FTP library. I don't know if there's a way to interrupt the download. Some research is needed. What do you mean the timeout is not working?. Please follow the issue template and provide more details. issues like this do not provide any way of replicating the problem and spotting if it's an Apache Commons FTP bug or an Android Upload Service bug. Thank you!. Sorry, but you have to follow what is in the issue template and provide necessary details, otherwise I couldn't help you in any way. The exception is thrown because the transfer of the file to your FTP directory is not possible. I don't have the Apache Commons Net FTP docs at hand, but this may be due to permission policy for your FTP user or if the file already exists, in which case it doesn't get overwritten.\n\nCan you successfully upload the file for the first time? If I understand correctly, you get the exception only the second time you try to upload it.. Here it's storeFile method JavaDoc. The method should overwrite the existing file the second time you try to make an upload. \nThe best way to check if the problem is in the library or in your FTP server config is to use one of the test FTP servers. Just follow the wiki, use a broadcast receiver and update your progress bar with data coming from the onProgress receiver method. The first blank line is as it should be after the headers, but I've noted that there are actually two \\r\\n at the beginning and that may be the source of your problem. Not sure how this impacts other web servers though and if removing the extra \\r\\n will cause some problems on other servers. It's the first server-side script which gives this kind of problems. I have to investigate about this.\n```\nPOST /some/api HTTP/1.1\nConnection: close\nContent-Type: multipart/form-data; boundary=-------AndroidUploadService1499093154573\nContent-Length: 17054\nAccept-Encoding: gzip\nUser-Agent: okhttp/3.8.1\n---------AndroidUploadService1499093154573\nContent-Disposition: form-data; name=\"parameter\"\nvalue\n---------AndroidUploadService1499093154573\nContent-Disposition: form-data; name=\"photo\"; filename=\"image.jpg\"\nContent-Type: image/jpeg\n...\n``. @PhilLab this is going to be addressed, so the extra\\r\\n` will be removed.. @PhilLab now you shouldn't have problems with your web server.\n```\nPOST /upload/multipart HTTP/1.1\nConnection: close\nUser-Agent: AndroidUploadService/3.3\nContent-Type: multipart/form-data; boundary=-------AndroidUploadService453972475000\nContent-Length: 71697\nHost: 192.168.50.116:3000\nAccept-Encoding: gzip\nmyheader: myvalue\nmysecondheader: mysecondvalue\n---------AndroidUploadService453972475000\nContent-Disposition: form-data; name=\"param1\"\nvalue1\n---------AndroidUploadService453972475000\nContent-Disposition: form-data; name=\"sdfdsf\"; filename=\"uploadservice-architecture.png\"\nContent-Type: image/png\n...file content...\n---------AndroidUploadService453972475000--\n``. Seen your PR. Basically you are passing the paths of all the files to be uploaded in all the broadcast intents, naming them asfilesLeft, which is not correct for two reasons:\n-filesLeft` makes the library user think of getting only the list of the files left to be uploaded, but you are passing all of them always.\n- the getTotalFiles count is not correct, because you are adding the total files count + the successfully uploaded files count. > Actually, this behavior I observed was the reason why I called the member filesLeft - after all it is zero after a successful upload and completely full at a failed upload.\n\nAs I did not test partially successful uploads, my patch seemed correct for me, despite your valid arguments that it is not.\nI think, the clearance of params.getFiles() in the successful upload broadcasting is the bug here\n\nWhen I designed that part, I had already in mind supporting uploads with resume capabilities, in which case there are also partially uploaded files. Your argument is totally right regarding Multipart Uploads and I understand your reasons behind the naming in that case. My previous comment was rather incomplete though, because where the problem arises with the current implementation is when you have FTP uploads, which can resume, and so you can have successfully uploaded files and partially uploaded files in a single request.\nSince Multipart Uploads does not support resume, you can have only two scenarios: \n successful upload (all the files have been uploaded) or \n unsuccessful upload (none of the files have been uploaded). \nThis is the reason why I clear all the files and the behaviour you described. Take a look here for more detailed explanation.. You're absolutely right, it's definitely a bug! https://github.com/gotev/android-upload-service/issues/294\nLooking at your PR, we can keep the filesLeft list and make a little modification. \n\nModify addSuccessfullyUploadedFile method by traversing the successfully uploaded file from the params.getFiles() list to successfullyUploadedFiles list, so every time a file gets uploaded, it will be added to successfully uploaded files and removed from the original list. At that point we can get rid of these two lines of code: BinaryUploadTask and MultipartUploadTask\nRename uploadFilesToPaths method to pathStringListFrom and create UploadInfo like this:\njava\n final UploadInfo uploadInfo = new UploadInfo(params.getId(), startTime, uploadedBytes,\n                                              totalBytes, (attempts - 1),\n                                              successfullyUploadedFiles,\n                                              pathStringListFrom(params.getFiles()));\nThis way #294 will be solved and the implementation will be correct for all the kinds of uploads. If you have further suggestions, you're welcome!. @PhilLab thanks for the contribution!. This fixes #201 and #294 . @alez007 thanks for the PR! I'm working on something similar, but also with resume capabilities for the next release. My implementation is different from the one you proposed, so I'm not going to directly merge your code, but I'll use some of your ideas, so I will add you to the contributors as well with credits for the snippets of your code.. @Robertoq7 just follow the project issues and this thread. There's no time estimate \ud83d\ude03 . @alez007 have you managed to support resuming the uploads? I started looking your code. Are you using it for S3 or other cloud storage service?. What I want is to join our ideas and add a good chunk upload feature with resume capability, which can be pluginnable, to support for example S3, Google Drive and Tus, which is an open source protocol for uploading, so your custom upload feature can be seen as a plugin and you will also have easier maintenance over time.\n\nIf necessary, we can also change the current architecture if it doesn't fit. The goal is to have reliable resumable uploads on Android and easy to maintain codebase.\nI'm not in a hurry :smiley:. A resumable upload protocol is needed for resume capabilities to work. Thought about adding support for the open source tus protocol, but I need help since I don't have much time to do it myself. I'll be glad to assist the implementation though.. Hi there! Finally had some time in a long period to look at this. To be fair, I don't need this feature myself and for my apps, and don't have time to develop it as well, but if someone wants to take the lead it's welcome and I can provide guidance and code review. Just post your ideas \ud83d\ude0aOn the other side, since this has been opened more than one year ago, if no one is willing to or having time to implement this feature, I'm going to close this PR in 14 days from now. As announced, I'm closing this. Thank you!. Please provide more information. Sorry, still no details about your problem, had to close for lack of information. No plan to support eclipse, which is deprecated for Android development. Check my response: https://github.com/gotev/android-upload-service/issues/79#issuecomment-179525871. @ringcentraljerry had the time to see this only now. This is strange since the uploaded bytes gets reset before any new upload attempt and that should be sufficient. In the description I see the scenario is an upload on a mobile network (3G, 4G, ...), then you turn on WiFi and you get an incorrect upload progress. I've tried this on my Nexus 5X and when switching networks, the upload gets simply retried from the start. On which device have you experienced that behaviour? I'm sure your proposed solution works, but I want to dig it deeper to understand why an how this happens.. The error seems unrelated to the library. I see securuty exceptions from other components of your app. Check if you have correctly requested runtime permissions on Android 6.0. I suggest you to try the demo app with your server and try the same things, so you can spot where tge real problem is. Ok, so the problem is in the way you're getting the URI to the file. You got to have a content uri, which has no problems on Android 6.0+ with Upload Service. The issue is because of stricter policies applied by the Android platform that you have to follow. This can help you. It would be great if you could make a fork and replicate your problem in\nthe upload service demo app, so I could help you and then I could use it as\na test case against new versions.\nIl 05 lug 2017 6:08 PM, \"attawit\" notifications@github.com ha scritto:\n\nI have tried this. And by the way the file have been new created by\ncompressing from the original uri. content and the file was written in the\nsandbox of the app which I have test before that It is not empty or\nunreachable . Let be try to understand Async with parcel it may related\nissue.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/gotev/android-upload-service/issues/283#issuecomment-313149771,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AQA7rzKqxDXFn0C6_HMOWldn2WavXNedks5sK7TqgaJpZM4OL1rp\n.\n. A String trimmer in the request configuration will be helpful. I'll add it in the next release. I suggest you to re-enable the notification config, otherwise you could not benefit from the foreground execution of the upload task, resulting in lower upload rate and higher probability that Android kills the task if it needs memory or to save battery. If you look at the upload service source, I've documented everything in detail. Basically android wants a persistent running notification to enable foreground execution for the service.. No problems at all, you can try the demo ftp server provided with the FTP module. Where tou can write on the server depends entirely by the policy set for the user in the FTP configuration. Have you tried making the requests from your devices to my demo server? You can find it in the examples. Never experienced such behaviour on my real and virtual devices, with node.js, java and python backends. Please give it a try and let me know.. @shasderias Does the proposed solution on stack overflow solve the problem? . @shasderias After inspecting your problem a little bit, I see that you have invoked the android system file picker, but then to get the absolute file path, you have used NoNonsense File Picker's getFileForUri which is an utility function to be used only with NoNonsense File Picker. As also you have noted, there are differences between real and emulated devices. I recommend passing the content:// URI directly to the Upload Service, which supports them and will resolve them automatically. Also, you should never get rid of:\n\njava\nif (requestCode == FILE_CODE && resultCode == Activity.RESULT_OK) {\n    //handle picked file\n}\nin onActivityResult.\nClosing this because it's not a bug in Upload Service library.. This is already supported and documented here. By stopping an upload you are actually cancelling it.. Are you using ProGuard?. You can use this which is a little bit restrictive. Let me know if the issue is solved.. Improved wiki. Please enable debug log and post it here. It can be due to Doze mode. it could be many things. Isolating the problem is crucial. These are some tests which I thought of:\n upload the same files from a mac or pc using filezilla or other ftp client.\n try upload from a virtual device running Android 6+\n try upload from a real device with Android < 5.0\n try upload with the device screen constantly on.\nFor each one of these test cases, you should check if you have the same behaviour you described, so we can at least know if the problem is specific to Apache Commons FTP, the backgrounding on Android or some bandwidth limitations on your server-side.. The Apache FTP code you posted is for download, not upload, so that test can't be considered. Downloading and uploading are two different things. Different parts of the FTP library are involved. Regarding the first test, tell me the length of the transferred files.. A part from all the configuration options which the FTP module has, the only differences I could spot in the way the upload is done are:\n  you are monitoring the progress with ProgressInputStream, which is a class I could not find in the FTP commons library. The FTP module uses the CopyStreamListener. \n you use a buffer of 1MB, where the default buffer used by Upload Service is 4KB. You can customize it by calling UploadService.BUFFER_SIZE = 1024 * 1024; in the application initializer\nAlso, I've seen there's a newer 3.6 version of the  commons net library in which they've fixed many things, so I'll schedule an update for the next release. Have you used that version for your tests?\nAlso, another thing I spotted only now by looking at your debug log is that you are making two FTP requests for two files, where you can simply have a single FTP request with many files, which is a lot more efficient. @shweps just published new upload service 3.2.5 with Apache commons net 3.6. Try it and let me know if something changes. @shweps so it seems your server-side FTP does not have keep alive enabled. If you want to disable socket timeout on the client, just pass 0 in the FTP config. If you have control over your FTP, I definitely recommend you to have keep alive enabled on the client with the socket timeout and setup keep alive on the server. Example for ProFTPd. As stated in https://github.com/gotev/android-upload-service/issues/235#issuecomment-277547987 multipart and binary uploads does not support resuming the upload. If something goes wrong, you have to start over, so the feature you described is simply not applicabile in this case, because even if 3 out of 5 files are successfully uploaded and then the connection drops, the server will discard automatically partial uploaded data. Server sees a multipart request as a single stream of data. Showing the upload progress like that makes sense only for resumable uploads, like s3, google drive, one drive, tus or some other custom upload type.. Supporting resumable upload protocols is the next step of the library. Multipart is a well supported but old protocol, which does not suit modern needs and does not perform well on poor and dodgy networks. I only have to find the time to make the necessary implementations, because some architectural changes needs to be made to support them properly. One of those is request serialization.. Wonderful! You can fork the main repo and add your modifications, so it will be available for other users too as a temporary solution! . Try to pass the content Uri as a String directly to the upload service instead of resolving the path. Just use the Uri's toString method and also take a look at this post: https://stackoverflow.com/a/5309965\nClosing because it's not a bug in Upload Service. @PhilLab the easiest and quickest thing which can be done is to pass the notification ID in the UploadInfo, so you can have it in all the callbacks. The notification ID will be an Integer as it can be null when the upload request does not have a notification configuration set.. Now you can do the following in every callback:\njava\nif (uploadInfo.getNotificationID() != null) {\n    NotificationManager notificationManager = \n        (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);\n    notificationManager.cancel(uploadInfo.getNotificationID());\n}\nIn the onProgress callback method you will always get a null notification ID because even if you passed a NotificationConfig when you created the request, the notification is ongoing and managed by the service. It wouldn't make sense to cancel it while in progress btw. In the other callbacks you will get the ID only if you have set an UploadConfig and not set auto canceling for that state.\nYou can also cancel the notification in another place if you keep the notification ID you got.. Currently the click intent is unique for all the states of the notification (progress, completed, cancelled, failed). Check #179 \nThe feature you requested is now implemented and will be available starting from release 3.3. You were really close, although there are some cases which were not managed. Take a look at https://github.com/gotev/android-upload-service/commit/14c36a9a4068e4d935847fbf9927e26652b58736. Never used that library, but it's certainly possible to integrate it in UploadService as a plugin. The first step is making it work with a standard HttpURLConnection or an OkHttpClient, then I can guide you through the plugin implementation. The only thing which I need is an HttpURLConnection or an OkHttpClient  which passes through the proxy, the rest is really easy.. As soon as you provide me an example of a secured HttpURLConnection or secured OkHttpClient implementation which uses Tor Onion Proxy or NetCipher. It's up to you.. That's pretty cool! To use it with OkHttp it's just a matter of configuration with current Upload Service release! Prepared a wiki page here. Follow NetCipher tutorial and docs to setup connection with Orbot, which is out of scope here. If you have ideas or snippets to improve the wiki page for other users, post here.\nUsing HttpURLConnection requires extending existing HurlStack and HurlStackConnection and using StrongConnectionBuilder to create the connection, instead of the default Hurl methods. Those two classes can then be exported as a separate plugin for Upload Service. I recommend you to use OkHttp though, to have consistent and updated network behaviour on all the android versions you support. HttpURLConnection uses OkHttp underneath starting from Android 4.4.. I advise you to keep initialization in the Application delegate and perform only the request in the activity. You can also drop this line and let the MultipartUploadRequest automatically create an upload ID for you.. Wiki updated. Thanks for the PR! For those not familiar with the new Channels concept, here's the video. I have some questions and notes about your PR:\n Why have you switched the minSdkVersion to 14?\n In UploadNotificationStatusConfig you added the possibility to setup the channel name explicitly, so I imagine you want to be able to specify a different channel for every notification status, to allow maximum customization, which is good, but then when you are constructing the default value in UploadNotificationConfig, I see an hardcoded channel name, which is not good, because the default setting will always point to net.gotev.uploadservice and not to the library user's namespace. I propose you the following changes:\n  * rename the channel field in UploadNotificationStatusConfig to notificationChannel which is more expressive\n  * remove the channel parameter from the UploadNotificationStatusConfig costructor and make it like this:\n  java\n  public UploadNotificationStatusConfig() {\n      notificationChannel = UploadService.NAMESPACE;\n  }\n  In this way the default channel will reflect the user setting. \n  * add the method setNotificationChannelForAllStatuses to UploadNotificationConfig to be able to set the same channel for all the statuses easily\n here you are creating a single notification channel. What happens if I set four different channel names for the four notification statuses?\n here all the channels are given NotificationManager.IMPORTANCE_DEFAULT value. I think the best will be to make this configurable, by adding an additional setting called notificationChannelImportance (which defaults to NotificationManager.IMPORTANCE_DEFAULT) in UploadNotificationStatusConfig\n* Also, you can get rid of the createNotificationChannel method and create the channel directly here. Ok for the minSdk. Android < 4.0 (2011) is rarely used today so it's time to move forward to have the latest features. \nRegarding notification channels, I see that the user can still set four different channels for the four states. After some thinking, maybe the best would be to have a single notification channel for all the states, so I would move notificationChannelId from UploadNotificationStatusConfig to UploadNotificationConfig, so it's clearer at API level that all the states shares the same notification channel and it's not error-prone when you write the configuration code.\nTo allow custom notification channel creation, with all the customizations, I think the best would be to let the user create it outside the library and then just pass the notificationChannelId to the notification config. At this point, here we can do this:\njava\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n    String notificationChannelId = params.notificationConfig.notificationChannelId;\n    if (notificationChannelId == null) {\n        notificationChannelId = UploadService.NAMESPACE;\n    }\n    if (!notificationManager.getNotificationChannels().contains(notificationChannelId)) {\n        NotificationChannel channel = new NotificationChannel(notificationChannelId, \"Upload Service channel\", NotificationManager.IMPORTANCE_DEFAULT);\n        notificationManager.createNotificationChannel(channel);\n    }\n}\nand remove createNotificationChannel method. In this way:\n if the user creates a custom channel somewhere and provides its ID, the library will simply use it without creating a new one\n the user does not have to override a task just to implement a custom channel\n if the user makes multiple upload requests, the new channel will be created only the first time\n if the user does not create a notification channel or if it provides a null or non-existent channel name, it will be automatically created with default settings.\nForgot to tell you in previous comments that for the CI build to work you have to modify this line in .travis.yml to:\n- build-tools-26.0.1\nAnd this line to:\n- android-26. Great! Thanks for the contribution \ud83d\ude03  . Print something out in the onConnected callback in the initializer and put some logging also in the other callbacks, to get more details. If you could not connect with Orbot, it's not an Upload Service issue. Bear in mind that the Orbot callback is asynchronous, so you're not guaranteed in any way that Orbot is connected when your Activity is shown. Here you would have to check if Orbot is connected before sending the request. You have many ways to do that.\nCheck the updated wiki. They don't do that automatically. Check the updated wiki. Thanks for pointing this out! It should be fixed now and it will be released in 3.3.1. Released 3.3.1 with this fix. Please post the stack trace of the OutOfMemory error. You shouldn't get that error since the file gets uploaded with a buffer even in fixed streaming. Are you using OkHttp or HttpUrlConnection stack? On which android device and version does this happen?. This is the same as #114. It's a bug in the underlying network layer on Android 4.4, not in the library.\n Follow the directions to setup OkHttp and tell me if you have the same error. Generally speaking, I always recommend using OkHttp for the reasons described in the wiki.. @parubabr you're welcome! Greetings from Milan!. When the upload service starts with foreground execution privileges, it needs to display an ongoing notification in the Notification Center, as per Android design. The upload service is a task runner, so it does not have its own notification. For this reason, one of the running tasks has to take care of holding and updating the foreground notification. This has been implemented starting from this commit when multiple parallel uploads were introduced with #69\nThe principle is the following: \n imagine N tasks running in parallel\n each task sends a broadcast whenever there is some progress to show and updates its own notification (to get a better understanding, read the developer's manual page in the wiki)\n you do not know in advance which task will finish first\n whenever a task sends a broadcast update, the most recent one holds the foreground notification and updates it\nThis approach works without problems to solve the problem of keeping the foreground notification always updated, but the downside is that you will experience the ping-pong of notifications you described, because the most recent notification will always be the first one. I'm open to new ideas to improve this. Feel free to fork, experiment and send a pull request. . Previously the notification builder was created like you have done, but there's a state problem with that approach if I set different things for the different notification states. This is why I've changed the implementation recently to create a new one every time.\nE.g. for in progress status I want some actions buttons, and I want some other ones for completed status. You will end up having all the action buttons of the in progress also for the completed because the notification builder does not start from a clean state, but retains the latest one, which is not good.\nBy looking at the NotificationCompat.Builder constructor source, I found that every time a builder gets created, the when property gets set to the current time in milliseconds. This property determines the sorting of the notifications. So the problem can be solved by simply saving the System.currentTimeMillis() the first time, and then using setWhen in the builder. Check commit in #307 . Check your gradle file. Maybe you have used forced dependency resolution with a support library lower than 26. You must use support library 26 to support Android O. If for whatever reson you have a runtime support library lower than 26, you get that error.. > Used ```groovy markdown to highlight your code to make it more readable\nchange targetSdkVersion to 26. Also, from my own experience, avoid 26.+ in dependencies. It's better to always specify a fixed version. In this case 26.0.1. Look also at the demo app, which works successfully. Here is the example build.gradle. Try the demo app on the same phone and let me know if it  works,. Have you enabled ProGuard?. Same as #311 . So it's not an isolated case. @vincentsong a PR will greatly speed up the process. Be sure to have support library 26 at compile time. Check your gradle dependencies.. You're welcome!. Can you please provide exact steps to reproduce it? . Don't use file:// URIs from Android 7.0 onwards. FileProviders has to be used instead. Check this discussion for more detailed information. I highly recommend you to update to latest 3.4 version for Security reasons. Check 3.4 release notes about that. When posting logcat be sure to enable debug log, otherwise the information posted is not relevant to the uploads and is not useful to help you.. @mupm1 see #263 However, you should not post unrelated questions in other issues. Open a new one the next time, thanks.. @MahmoudMostafa125 seen your log. After filtering it out:\nUploadRequest - setting provided upload ID\nUploadRequest - Created new upload request to http://192.168.1.5/camera_option/upload.php with ID: c7026451-57b0-42af-8f92-87fe06fcc0fd\nMultipartUploadRequest - Auto-detected MIME type for /storage/emulated/0/TMMFOLDER/tmp.png is: image/png\nMultipartUploadRequest - Using original file name: tmp.png\nUploadRequest - setting provided upload ID\nUploadRequest - Created new upload request to http://192.168.1.5/camera_option/upload.php with ID: 80550c54-5ce9-4b75-b52d-3139d2581351\nMultipartUploadRequest - Auto-detected MIME type for /storage/emulated/0/TMMFOLDER/tmp.png is: image/png\nMultipartUploadRequest - Using original file name: tmp.png\nUploadService - Starting service with namespace: com.mahmoud.camera_option, upload pool size: 4, 5s idle thread keep alive time. Foreground execution is enabled\nUploadService - Successfully created new task with class: net.gotev.uploadservice.MultipartUploadTask\nUploadService - Starting service with namespace: com.mahmoud.camera_option, upload pool size: 4, 5s idle thread keep alive time. Foreground execution is enabled\nUploadService - Successfully created new task with class: net.gotev.uploadservice.MultipartUploadTask\nUploadService - Starting service with namespace: com.mahmoud.camera_option, upload pool size: 4, 5s idle thread keep alive time. Foreground execution is enabled\nUploadService - 99aafa0e-d0b0-4d78-9d6a-fb5bcc55a4cc now holds the foreground notification\nUploadService - Successfully created new task with class: net.gotev.uploadservice.MultipartUploadTask\nHttpUploadTask - Starting upload task with ID 99aafa0e-d0b0-4d78-9d6a-fb5bcc55a4cc\nHurlStackConnection - creating new connection\nHttpUploadTask - Starting upload task with ID c7026451-57b0-42af-8f92-87fe06fcc0fd\nHurlStackConnection - creating new connection\nHttpUploadTask - Starting upload task with ID 80550c54-5ce9-4b75-b52d-3139d2581351\nHurlStackConnection - creating new connection\nUploadTask - Broadcasting upload progress for c7026451-57b0-42af-8f92-87fe06fcc0fd: 97 bytes of 209972\nUploadTask - Broadcasting upload progress for 80550c54-5ce9-4b75-b52d-3139d2581351: 97 bytes of 209972\nUploadService - \nUploadServiceBroadcastReceiver registered globally in your manifest.\nUploadService - \nUploadServiceBroadcastReceiver registered globally in your manifest.\nUploadTask - Broadcasting upload progress for 99aafa0e-d0b0-4d78-9d6a-fb5bcc55a4cc: 97 bytes of 209972\nUploadService - \nUploadServiceBroadcastReceiver registered globally in your manifest.\nHttpUploadTask - Server responded with HTTP 200 to upload with ID: 80550c54-5ce9-4b75-b52d-3139d2581351\nUploadTask - Broadcasting upload completed for 80550c54-5ce9-4b75-b52d-3139d2581351\nHurlStackConnection - closing connection\nHttpUploadTask - Server responded with HTTP 200 to upload with ID: 99aafa0e-d0b0-4d78-9d6a-fb5bcc55a4cc\nUploadTask - Broadcasting upload completed for 99aafa0e-d0b0-4d78-9d6a-fb5bcc55a4cc\nHttpUploadTask - Server responded with HTTP 200 to upload with ID: c7026451-57b0-42af-8f92-87fe06fcc0fd\nUploadTask - Broadcasting upload completed for c7026451-57b0-42af-8f92-87fe06fcc0fd\nUploadService - 99aafa0e-d0b0-4d78-9d6a-fb5bcc55a4cc now un-holded the foreground notification\nHurlStackConnection - closing connection\nUploadService - All tasks completed, stopping foreground execution\nUploadService - Service will be shut down in 10000ms if no new tasks are received\nHurlStackConnection - closing connection\nUploadService - Service is about to be stopped because idle timeout of 10000ms has been reached\nUploadService - Stopping foreground execution\nUploadService - UploadService destroyed\nI see that the problem resides in how you have used the library, because you are uploading /storage/emulated/0/TMMFOLDER/tmp.png twice.\nAs suggested in the log:\nUpload delegate for upload with Id 80550c54-5ce9-4b75-b52d-3139d2581351 is gone!\nProbably you have set it in an activity and the user navigated away from it\nbefore the upload was completed. From now on, the events will be dispatched\nwith broadcast intents. If you see this message, consider switching to the\nUploadServiceBroadcastReceiver registered globally in your manifest.\nRead this:\nhttps://github.com/gotev/android-upload-service/wiki/Monitoring-upload-status\nI recommend you to switch to the broadcast receiver implementation. In your case the delegates does not suit your use case. I've added this notice in the logs when you use the delegates, but the user navigates away from the activity.. Be aware that Android O introduced many changes regarding backgrounding. I highly suggest you to show the notification for the upload in O, because it allows the service to run in foreground and to not be killed by the OS.\nDocs needs to be updated regarding this ;). > Tried to create pull request, and got rejected.\nReally strange. \n\nAnd anyway, you already have Null-checks everywhere except that mentioned place, it would make sence to put them there as well\n\nOf course. Scheduled for the next release.. @darekxan so you are using upload service but you take care yourself of displaying a notification, not using the provided system?. @jbekas they are working right now. This will be addressed for sure, but a long term solution has to be thought for the long run \ud83d\ude03 . @guerrillalg I know how to solve the NPE :smiley: and it will be done so you can safely use the service without a notification for API < 26. The problem is that from Android 8.0+ (API 26) background services are not started as foreground if they lack a notification and so they will be killed by the OS when your app goes to the background or when the device goes idle. To continue displaying progress and actions inside the apps without a notification in the future, a different solution has to be found when you don't want to set a Notification Config. \nFor example, WhatsApp is showing a notification like \"WhatsApp is being run in the background\" to be able to start the sync processes, while all the progress indicators are still in the UI. Maybe we can do the same or think for a different solution. I'm open for new ideas.\nMeanwhile, the fix is going to be pushed and I'll notify you here :smiley:. @jbekas @guerrillalg @darekxan 3.4.1 released!\nAlso, since some of you told me you're using custom notification systems, what could Android Upload Service do to ease your job or make your code better?. Just launch the next upload in the onCompleted. You need to persist the list somewhere and to create your own upload queue.. Duplicate of #317. Check the answer there. Not out-of-the-box. Support for a thing like this has to be implemented, if possible at all. I also use retrofit, but I don't know its internals to tell you if this can be accomplished. At the moment, you can share the same underlying OkHttp stack. A pull request with this feature is always welcome!. Explain exactly what you need to accomplish and to check. First of all, enable library debug log (check the wiki). If that doesn't suit your needs, follow instructions in the setup wiki and use OkHttp stack. Then setup OkHttp logging interceptor. You can see an example of how to build an OkHttp stack with interceptor here: https://github.com/gotev/android-base-app/blob/master/app/src/main/java/net/gotev/baseapp/Network.java#L95. Check this: https://github.com/gotev/android-upload-service/issues/311#issuecomment-327308479. Are you sure the file you are sending does not get modified while it is uploading? This seems the case.. Closing due to inactivity and inability to reproduce the issue. There's already a full explanation about this in the wiki. Double check your gradle dependencies. This is happening because at runtime the resolved version of the support library is < 26. Probabily some of your dependencies uses an older version. It happenened to other users already, check the closed issues. . Do the status change from 0 to completed directly?. If you could enable debug log, reproduce it and send the log here it will be great \ud83d\ude03  so I could be able to help you and address eventual bugs. Closing due to inactivity. Wow that may be a bug, thanks for the issue, I'll look at it asap. In meantime, if you find a solution, feel free to send a PR. I don't think so. In order to replicate the issue, I need some further details:\n- how many parallel uploads are you doing?\n- can you replicate this on a simulator?\n- does it happen only on API 26?\nThanks, this information is vital to proceed. @Shakezulla57 does this happen with a single upload or with multiple concurrent uploads?. This can also due to the notification ping-pong fixed in 3.4.1. Update to the latest version and let me know if the same behaviour still applies.. it seems an Android O issue as other users are also experiencing the same behaviour. Upload Service creates the channel only if it doesn't already exist. Reinstall your apps and check if you have the described behaviour out of the box without creating yourself a channel with the same name.. From what I see there are some misconceptions in the code you posted.\nPlease refer to the wiki recipes page and the provided demo server for a good example of binary upload. I also encourage you to test your server with the provided demo app. Binary upload puts the binary content of the file as the body of the upload stream. Since this issue is not a bug or feature request, I'm going to close it.. Closing as it's duplicate of #180 . @fatemeh2sh please post your gradle file and tell me some more details, because I can't understand what's the source of your problem and what exactly stops you from using the library. The error is in your gradle file, not in upload service. Please check the provided gradle build file in the demo app to see how it should be done.\nRemove\ncompile project(':libuploadservice')\n//compile 'com.alexbbb:uploadservice:1.6'\nAnd uncomment\ncompile \"net.gotev:uploadservice:${libraryVersion}\"\ncompile \"net.gotev:uploadservice-okhttp:${libraryVersion}\"\ncompile \"net.gotev:uploadservice-ftp:${libraryVersion}\". The demo app has many other additions that I use to develop which are not necessary to run the library, like dex count, android-apt, bintray plugin. It's meant to be a proof of concept. The setup instructions provided in the wiki setup page are enough. If you've followed them then head to the recipes page and if you still have problems, post the code snippet and all the details of the error.. You're welcome :smile:. You can actually start services or activities from the callback since you have the context passed \ud83d\ude00 \nWhat you mean by \"specific ID\"?. This is not something regarding the library itself, but common Android programming. Imagine you get a JSON like this from your server: \njson\n{\n  \"video_id\": \"43839847923\"\n}\nIn the onCompleted method you will have to write (add Gson library to your Gradle first):\n```java\n@Override\npublic void onCompleted(Context context, UploadInfo uploadInfo, ServerResponse serverResponse) {\n    JsonObject json = new Gson().fromJson(serverResponse.getBodyAsString(), JsonObject.class);\n    String videoId = json.get(\"video_id\").getAsString();\nIntent intent = new Intent(context, YourActivity.class); \nintent.putExtra(\"videoId\", videoId);\ncontext.startActivity(intent);\n\n}\n```. So you need to add an action to the completed notification which opens the activity, right? \ud83d\ude03 . It's possible if you add an action to the completed notification. You can set a PendingIntent for each action. Please check the working example of that in the demo app provided. What are you trying to do in the onCompleted callback is not possibile, because the notification configuration is made once before the upload is started and it's immutable. What are you trying to do is to display dynamic actions in the notifications, which at the moment is not supported. What you can do as a workaround, is to add a pending intent to a particular activity or service before starting the upload, then have that service or activity read a value from a shared preference or in-memory variable and then populate that value in the on completed method.. Great! \ud83d\udc4d  Thanks for your contribution. Good catch \ud83d\ude03  Thanks for the PR! \ud83d\udc4d . If you need base 64 a custom upload type has to be implemented. The library does not support it out of the box because it's an old way of uploading, which is less efficient than multipart or binary upload, because it requires more bandwidth. The world has to move forward, but if you have to interface your app  with an old backend, don't worry, Upload Service uploads are implemented as  plugins, so you can add what you need. I suggest you to look at how Binary upload request and multipart have been implemented and refer to the developer manual in the wiki :smiley:. Do you send big payload as a response of the upload from the server?. Yes, because the payload you sent gets cached entirely by chuck. The same happens if you use the OkHttp Http Logging Interceptor with BODY level. Basically, to be able to show you what's passing on the wire, everything gets cached. Logging interceptors usually warns you that you're going to have problems in tracking huge payloads and recommends not tracking uploads. So, this is not an Upload Service issue.. With current version 3.4.1 you can only set messages before the upload has been started. However, if you just want to display some custom message after the upload gets completed, you can set\njava\nconfig.getCompleted().autoClear = true\nAnd then create your custom notification in the onCompleted callback. No check are made to detect if a file has zero length, but it will be good to have it.\nRegarding the FileNotFoundException, check that the path to the file is trimmed, accessible to your app (you have storage read and write permissions). Ensure all other previous writes to the file are finished prior to starting the upload (e.g. you take a photo and then upload it. Be sure the write process has terminated before starting the upload).. It seems totally a backend issue. Can't understand why you need to invoke the service with the main thread post.\nA part from that, have you tried the provided demo app APK with same settings?. Sorry to disappoint you but that stack trace is not referring to an error from the library, but to some media player.\nPlease enable library debug log and post it here, so we can spot where the problem exactly is :smiley:. @barron9 the double ?? should be avoided, as it sounds nervous. Since you are asking for help, the library debug log is really useful to spot instantly what's going wrong in your specific case, otherwise it's hard to help you. The log you posted is not referred to the FTP upload problem.\nDefinitely suggest you to remove this line:\njava\nUploadService.EXECUTE_IN_FOREGROUND=false;\nAs you may have problems with Android Oreo. I suggest to leave that by default which is true. A foreground service is a service that the user is actively aware of and is not a candidate for the system to kill when low on memory. It doesn't mean it will be run on the main thread.\nRemove also this line:\njava\nUploadService.HTTP_STACK = new OkHttpStack(); // a new client will be automatically created\nas you are using FTP and not HTTP.\nThis works with my test FTP server. Minimal example provided in the readme also works.\n```java\nUploadService.NAMESPACE = BuildConfig.APPLICATION_ID;\nLogger.setLogLevel(LogLevel.DEBUG);\ntry {\n    new FTPUploadRequest(this, \"ftp.server.com\", 21)\n            .setMaxRetries(4)\n            .setNotificationConfig(new UploadNotificationConfig())\n            .setUsernameAndPassword(\"username\", \"password\")\n            .setCreatedDirectoriesPermissions(new UnixPermissions(\"777\"))\n            .setSocketTimeout(5000)\n            .setConnectTimeout(5000);\n            .addFileToUpload(\"/path/to/your/file\", \"/remote/dir/\")\n            .startUpload();\n} catch (Exception exc) {\n    Log.d(\"AndroidUploadService\", exc.getMessage(), exc);\n}\n```. This has been asked many times before. When you need to do basic JSON post to a remote server, the best fit is OkHttp + Retrofit :smiley:. Hi harin \ud83d\ude03 \nSorry to hear that, but let's solve this issue. First of all, I strongly encourage you against the practice of including libraries as modules. Add jCenter and maven Central to your gradle (follow Wiki Setup page) and use the maven artifact dependency instead, to be always aligned to the latest version \ud83d\ude09 \nRegarding the error check this: https://github.com/gotev/android-upload-service/issues/311#issuecomment-327308479 it's certainly a problem in your gradle dependencies. If nedded force the support library to be always the latest.  Many times when you have many dependencies and some of them are not updated you get those errors.. That's great :smiley: and thank you!. > The HTTP test service I tried using returns the uploaded file contents in its response. I expected that this will not be a problem for the upload library.\nThe library has not been designed to handle big responses from the server after an upload, so at the current state of the art, it's normal you're getting this error.\nBig responses cannot be passed in intents by Android design, to keep the app responsive and the whole library is based on intents to pass data to and from the service.\nFrom my point of view, handling big responses means downloading the response body got from the server in a temporary location and then returning the path to the response payload in the intent. This could work for your use case, but it will be an overkill in the vast majority of the cases when the response is a simple json or plain text. I'm open to suggestions and considerations.. Created Known limitations section in the wiki. @lini thanks for the feedback \ud83d\udc4d . Of course \ud83d\ude03  https://github.com/gotev/android-upload-service/wiki/Monitoring-upload-status\u00f9\nBut please check the Wiki before opening issues the next time \ud83d\ude09 . Where is this BaseAdapter located? Inside an activity or a service? Delegate methods are good only inside an Activity which doesn't get dismissed during the upload or inside a service which runs always, otherwise use the broadcast receiver. Take a look at the  monitoring upload status wiki page here. @sirinanjirinsa if you switch activities, delegates does not work, use broadcast receiver. Check the suggested wiki page in the previous comment. @saran2somu are you using the delegate or the broadcast receiver?\n  . If you use the delegate, remember it will be destroyed once you go away from the originating activity, so I strongly discourage using delegates for anything big to be uploaded if you want to show progress also in your app. Check the monitoring Wiki page and there you will find all the details.. Follow recipes wiki page to see how to add files and check linked javadocs for more advanced usages. Renaming files on the device file system is up to you before uploading, not responsibility of the library. What you can do is to assign a file name to to the uploaded file, which is the file name seen by the server. That's also explained in detail in the JavaDocs. If you find some missing docs, open a new issue :smiley: providing as much detail as you can, thank you!. Currently you have to reupload the last unsuccessful file from the start. Upload Service leverages Apache FTP library, which I don't know if supports this feature, since I haven't found any docs regarding it . @MobDeveloper163 that sounds like it could work! I'm really busy in this period, so feel free to fork and send me a PR \ud83d\ude09. Closing this due to lack of contributions so far. Every upload has an unique upload ID, which you can use to perform different actions in the receiver. The uploadID is a string and you can use also a custom one. Check recipes wiki page to see how.\nI'll give you an example. Imagine you have three types of uploads and so you need to perform three different actions in the receiver. You can create the upload ID like this:\nKotlin\nval uploadID = \"UPLOAD_ACTION\" + UUID.randomUUID().toString()\nWhere UPLOAD_ACTION will be different based on the upload type. Then, in the onCompleted of the broadcast receiver, you can do different things based on that\nKotlin\nif (uploadInfo.getUploadId().startsWith(\"UPLOAD_ACTION1\")) {\n    //Action 1\n} else if (uploadInfo.getUploadId().startsWith(\"UPLOAD_ACTION2\")) {\n    //Action 2\n}. From what I see, the problem is in the server-side. I recommend you to use Apache Commons FileUpload to handle multipart uploads \ud83d\ude09  . Hi @mikepenz and thank you for this PR \ud83d\ude80 It's pending from a really long time and it will need a refresh, because I didn't have time to review it until now. Great job and this can be merged \ud83d\udc4c\nIs this a feature you are still using in production and which are you wanting to maintain? Unfortunately I can't do it, but you can become a maintainer of the library if you accept.\nIt's out of scope, but it's great to see your name here, since I got inspiration from your FastAdapter to make my RecyclerAdapter library. It does a fraction of the things yours does, but it's all I need. Thank you for that, too!. @mikepenz what a pity! I comprehend the burden of maintaining something you are not using anymore in production, so I think the better thing to do it to close this PR and don't merge it. Keep going on your libraries too! \ud83d\ude0e\nIf someone else wants to take the lead and maintain it, just contact me and let's talk about it.. Thanks @mikepenz \ud83d\ude09 . Merging in #324 . Check the example in \"monitoring upload\" wiki page. Look for the onCompleted method. Help me help you. Issue templates are here for this :wink:\nProvide the code and all the details of your specific implementation, thank you :smiley:. @varunchandran333 completely OT here. #349 \n@khimamsh \n\nActually you have specified code regarding notification while uploading file, That is not working in android oreo.\n\nAre you using broadcast receiver or the delegate?\n\neven i to dont have that code regarding this, Because we will be just adding dependencies .\n\nSorry, can't understand what you wanted to say. Can you explain it in another way?. Please be more specific. With which protocol?. Closing due to lack of precise information. Maybe you were referring to #171 . Please check the monitoring wiki page before opening issues :smiley:. Check your backend. There's no limitation.. This is not possible programmatically as far as I know, due to the fact the service is defined in the manifest of the library. If you know how to make this possible, go ahead and make a PR \ud83d\ude09 . As this this can't be made configurable, closing this issue. Thanks for the report. If I understand correctly, you are starting the service from a scheduled job while your app is in the background, right?. The background service starts in foreground execution by default, but I suspect this error is due to the fact that Oreo has limited the startService method while the app is in the background, so there may be no easy workaround to overcome this limitation without migrating to the JobScheduler API. I need to make some research. Help is greatly appreciated.. @mfrtrifork yes that's a good point. Also when on Oreo we have to force the notification config to be setup declared when making the request. @guerrillalg you're right. I think some big changes are required to make things more flexible and I like your idea. We could open a new 4.x branch and together build the new version without having to care about retrocompatibility issues.\nAs a temporary fix for Oreo, I'm going to release a new version in the next few days. version 3.4.2 released. I need more details about your scenario to be able to replicate the issue. Have you tried on another device?\nAlso, post the library debug log. Unfortunately, unless I have more details, I can't do anything about this issue with the sole information provided. On Huawei, the only thing which cames to mind is their aggressive battery life saver, which stops apps in the background unless you explicitly add them into the whitelist and allow them to use networking.. Unfortunately this log doesn't help because it doesn't contain library logs. Please set log level to DEBUG, reproduce the error and send the log back \ud83d\ude09 . @Faiyyaz how have you managed to solve it?. Unless you upload N files in the same request, this is not supported yet. If you have ideas about how to do it, you're welcome and let's talk about it \ud83d\ude09 . @marcherdiego it's already like that when you have all the files in the same request, but it won't be safe or clean to do it for N independent requests. What will you do if one of the new requests temporarily or permanently fail?. Since I personally don't need to have this feature and no PR has come in a long time, I'm closing this. Feel free to reopen it if you want to contribute with a PR.. Just check the recipes wiki page and there you can find links to the javadocs: https://github.com/gotev/android-upload-service/wiki/Recipes. Simply check the monitoring wiki page and use a broadcast receiver.. This is perfectly fine, as the connection to the server cannot be established and you directly get the error message after two failed attempts. Enable the debug log and you will see it.\nThe onProgress is invoked only if the connection is established and the transfer is ongoing.. This is a bug with older devices which simply does not support (and never will) TLS 1.3. It's an Android networking problem, independent of the library.. Same as #376. Update to 3.4.2 which supports Oreo. 3.3 is old and has security issues.. Post the library debug log. Without a library log there's nothing I can do to help you based on the information you provided. There are too many things which can cause that error. I suggest you to open the Troubleshooting guide in the wiki a follow it. In the vast majority of the cases it can help you find what's wrong. I'm closing this :wink:. Hi and thank you for this issue. I need some feedback. There's a wiki full of information, including the response to your question, but somehow people miss it or doesn't seem to find it, even if it's linked in the readme. You're not the first so don't worry :wink:\nSince this is an open source project aimed at continuous improvement, any suggestion on how to make it easier for anyone to find the wiki is very appreciated :wink:\nThank you. Glad you foind the answer! Any suggestions on how to make the wiki or the directions easier for a newcomer? :). @Mritunjay10 any suggestion to make things easier to find or to improve the library and docs are really appreciated, feel free to open new issues with your proposals :wink: Open Source is great because of many people's point of views and feedbacks. I'm closing this :wink:. The solution is in the first message of the stack trace. You just need to add a notification config in the request. It's also strage to see the service invocation from an UI thread. You can safely invoke it from the background.. Please be more specific. MultipartUploadRequest is nothing more than a builder, so simply add optional fields to the request only if they have a value. \n```java\ntry {\n    MultipartUploadRequest req = new MultipartUploadRequest(this, uploadId, Constant.add_member_signup)\n                      .addFileToUpload(pathapplicant_imageS, \"photograph\")\n                      .addFileToUpload(pathnominee_imageS, \"nominee_photograph\")\n                      .addFileToUpload(path1, \"photograph\")\n                      .addFileToUpload(path2, \"nominee_photograph\")\n                      .addFileToUpload(path4, \"docs[1][]\")\n                      .addFileToUpload(path5, \"docs[2][]\")            \n                      .addParameter(\"api_token\", api_token_string)\n                      .addParameter(\"salutation\", salutationS)\n                      .addParameter(\"name\", first_nameS)\n                      .addParameter(\"father_husband_name\", father_husband_nameS)\n                      .addParameter(\"designation\", designationS)\n                      .addParameter(\"hq\", hqS)\n                      .addParameter(\"address\", current_addressS)\n                      .addParameter(\"dob\", dobS)\n                      .addParameter(\"doa\", doaS)\n                      .addParameter(\"dor\", dorS)\n                      .addParameter(\"permanent_address\", permanent_addressS)\n                      .addParameter(\"admission_cheque\", addmissison_cheque_noS)\n                      .addParameter(\"cheque_amount\", amountS)\n                      .addParameter(\"mobile_no\", mobile_noS)\n                      .addParameter(\"whatsapp_no\", altmobile_noS)\n                      .addParameter(\"acc_no\", bank_acc_noS)\n                      .addParameter(\"ifsc_code\", ifscS)\n                      .addParameter(\"bank_name\", bank_nameS)\n                      .addParameter(\"branch_name\", branch_nameS)\n                      .addParameter(\"pf_no\", pf_noS)\n                      .addParameter(\"pan_card\", pancard_noS)\n                      .addParameter(\"introduce_no\", \"\")\n                      .addParameter(\"railway_id\", railway_idS)\n                      .addParameter(\"id_number\", voter_idS)\n                      .addParameter(\"blood_group\", blood_groupS)\n                      .addParameter(\"nominee_salutation\", nom_salutationS)\n                      .addParameter(\"nominee_name\", nom_first_nameS)\n                      .addParameter(\"relationship\", nom_relationshipS)\n                      .addParameter(\"nominee_phone\", nom_mobile_noS)\n                      .addParameter(\"nominee_address\", nom_current_addressS)\n                      .addParameter(\"docs_name[0]\", \"voter ID / Aadhar card\")\n                      .addParameter(\"docs_name[1]\", \"Railways ID card\")\n                      .addParameter(\"docs_name[2]\", \"PAN Card\")\n                  .addHeader(\"Accept\", \"application/json\")\n                  .setNotificationConfig(new UploadNotificationConfig())\n                  .setMaxRetries(2)\n\nif (path3 != null) {\n    req.addFileToUpload(path3, \"docs[0][]\");\n}\n\nreq.startUpload();\n\n} catch (Exception exc) {\n    Toast.makeText(this, exc.getMessage(), Toast.LENGTH_SHORT).show();\n}. Check this: https://github.com/gotev/android-upload-service/issues/263. In Android O, the notification sound has to be set on the channel itself, so that method is no longer affecting the ringtone on newer Android versions. Suggest you to check some tutorial about android notification channels. Maybe we can put some info about this in the upload service wiki :wink:. You've simply swapped filePath and parameter name in the addFileToUpload method. If you look at the setup wiki page, there's an example using gradle to force a certain library version. Not sure if v25 will work with latest 3.4.2, which uses support library 26 needed to support Oreo.. This is a well known problem with TLS 1.2 on older Android devices. It's not a library problem, but n Android network layer limitation. I suggest you to use OkHttp (check setup wiki) and the suggestions mentioned here: https://github.com/square/okhttp/issues/2372#issuecomment-331623598. First, you should disable SSLv3, which is unsecure. You can do that independently from the library, acting on the default HttpUrlConnection class or if you use OkHttp, see the above mentioned thread.. Have you checked the troubleshooting wiki page? It seems almost surely a server side setting regarding the max post size. Try uploading to a different webserver, like httpbin or posttestserver and I'm sure it will work :wink: . @emadph follow @NLLAPPS links. It's a server side setting for sure.. This has been already asked and responded to in past issues, please search before opening new ones. However I suggest you to read the Android service documentation for Oreo. It's stated that you can't do background jobs if you don't set a Notification. Upload Service simply complies to standard android specs, so this is not an issue.. @danangww look here. I saw you already asked this question on https://github.com/NativeScript/nativescript-background-http/issues/120\nSeems a native script wrapper specific error. . To help you, provide library debug logs and all the context to replicate the issue, so I can tell if it's an issue with the library. Already seen the error you posted, but it's not library specific.. Please check the wiki, in the recipes section you'll find what you asked. Check existing closed issues before opening a new one :smiley: \nDuplicate of #369. Hi @muhrifqii and thanks for your PR \ud83d\ude0e! Finally had some time to review it! \nThanks to your contribution I thought about one of the design decisions I made when the support for Notification Channels has been added. At that time none of my projects used notification channels and it was a feature needed for the app to just run on Android 8.\nIn particular, the decision to create the notification channel if it doesn't exist inside the library has been proven to be wrong, because in that way you are tempted to wrap the whole composition logic of the notification channels and groups inside the library. In fact, your PR proves it and I have to thank you for this.\nTime has passed since then and I have to say that in all the apps I implemented during this period, I've always created notification channels and groups by composition using standard SDK APIs inside every app and then just passed the channel names to the android upload service library.\nJust to make an example. If you look at https://github.com/gotev/android-upload-service/pull/382/files#diff-0dd55c8313c82ef1d5070fbe5d18e718R138 and the following lines added by this PR, I can tell you it's the almost exact code I use in utility methods to create notification channels and groups if needed. Furthermore, every app I made had different requirements about groups and priorities.\nI know it's tempting to include this utility code in the library so you don't have to deal with it in every app you make and simply \"Drop some strings to the library et voil\u00e0, everything works\", but I think it will be better to not deal with the whole notification channels and groups logic inside the library itself, because this is going to limit library users when Google comes up with new features and additions, it increases maintenance effort and overall brings some serious limitations and unwanted side effects.\nSo, to conclude this review It think it will be better to not merge this PR and to also remove notification channel creation in the library, launching an exception like \"notification channel does not exist\" and providing better guidance in the Wiki about this decision and how to make a correct implementation.\nYour point of view it's also important, so feel free to comment \ud83d\ude03. Please provide more details. @govindtank beware that doing that works only for Android < Oreo, due to the policy introduced by Google which forces you to display a notification when a background service is run. When on Oreo, the Upload Service will throw an exception telling you to do so if you've not a set a notification configuration. \nTo automatically hide a notification after the upload completes:\n```java\nUploadNotificationConfig config = new UploadNotificationConfig();\nconfig.getCompleted().autoClear = true;\nyourUploadRequest.setNotificationConfig(config);\n```\nYou can also tune other settings or auto clear the notification also for the other states. Refer to this JavaDoc and the wiki.. @Pro-55\n\nI want to completely hide the notification while uploading. \n\nThat's not possible because Oreo needs a notification for the service to be able to run with maximum priority without the risk of being interrupted. It's one of the Oreo new requirements for foreground services. Have a look here for all the details: https://developer.android.com/about/versions/oreo/background#services. @Pro-55 As I told you in my previous comment, Android Upload Service uses a Foreground Service to be able to complete the upload operation requested by the user in real time and with high priority, even when the device is idle. As stated by Android docs (https://developer.android.com/guide/components/services) in Android 8 and newer, foreground services MUST display a notification. In one of the paragraphs of the services page I linked, they also explicitly describe that if you set a notification channel to anything below LOW it will be automatically adjusted by the system to display the notification. Reading and studying the docs always pays off. It doesn't matter if you show progress status in your app, Android requires the notification to be there.\nAfter saying that for clarification, let's see if Android service is really what you need.\nAndroid Upload Service purpose is to upload data to a remote server as a result of an user's direct action, like selecting some photos or files to be sent or a sync operation which the user has explicitly set to be done. In this case the user has also the benefit of being informed of the progress even if not using the app.\nOn the other hand, if you want to do some stuff on the background which are not a consequence of a user-triggered actions, for example you want to send some data or files automatically to your server at some time each day, then you need a different approach and you have to use a Job. In that case have a look at the recently released Work Manager: https://developer.android.com/topic/libraries/architecture/workmanager/ \nIs this upload something which the user wants the app to do (e.g. select some photos to upload or has enabled some auto-backup option to be done after taking a photo)?\n- Yes. Then use Upload Service. Displaying progress to the user means being a good citizen\n- No, it's something internal of the app and the user doesn't even know. Then use Work Manager.. Upgrade to 3.4. Please be more specific and provide full information to replicate. @gian123 the same response \ud83d\ude04 Please be more specific and provide full information to replicate. closing this due to lack of interaction and relevant information to replicate the problem and eventually see if it's a bug.. It's not a bug in the library, simply follow this and check also how you get the variables in your backend.. @alexkok Thank you for your PR \ud83d\udc4cGreat job!. Released with 3.5.0. Double check your server first. Then provide steps to reproduce and detailed log by enabling library debug log, as described in the wiki.. It has been asked several times before. Check this and this. Updated wiki as well. Hi @MarkAdamson and thank you for your PR \ud83d\ude03! The only problem I see with this approach is when you make a lot of uploads in an app which is never killed. At some point (limit case) the IDs are going to exceed the maximum allowable integer and this is going to crash the app. Are you using this modification in a production app?. Fill in required information in the issue (code and library debug log). This issue is being closed because it does not adhere to our issue template, and/or because it omits information requested in the issue template that is required for us to investigate the problem efficiently. The issue template can be found here.\nIf you\u2019re able to provide complete information as requested in the issue template, please do so below and we\u2019ll re-open the issue. Thanks!. Jcenter does not require url setting. Just use jcenter(). If in doubt check the build Gradle of the example app.. Please fill in required issue information and be sure to check wiki regarding callbacks (monitoring wiki page). If your app gets killed, the service will be stopped, because it's part of your app, it doesn't run independently. To achieve the behavior you described, WorkManager from Android Architecture is the most appropriate.. Just look at HttpUrlConnection socket timeout setting. Thank you for the details. Do this happen while you are using the app of when you leave it in the background? Having a working code which does its job on nougat and fails every time on Oreo with reproducible conditions will help finding the solution.. Thank you for the tests and the analysis. For the first part, regarding the detection of the connectivity, it may be because on Oreo and newer versions, connectivity change is not broadcasted anymore (see: https://stackoverflow.com/questions/48527171/detect-connectivity-change-in-android-7-and-above-when-app-is-killed-in-backgrou) and there are restrictions on background services. I'm considering re-implementing the library using the newly introduced work manager to mitigate those scenarios.\nFor the second part, you must have different request codes for different action buttons.. Hi! This has been asked several times before in the issues. Check #263 :wink:. This has to do with your server side certificates and not with the library itself. It is discussed widely in one of the OkHttp issues regarding this problem.. However the log you sent is not a library related issue. I suggest you to use latest OkHttp stack it you're not using it already :smile:. Just add .setUtf8Charset() on your request builder as described here: https://github.com/gotev/android-upload-service/wiki/Recipes#-http-multipartform-data-upload-rfc2388. Try with latest version. @Pro-55 without a code example of what you're doing, I can't help you. The interface is correct but in Java the object may be null as well without causing problems. I suggest to properly update JavaScript bindings to handle null cases instead, because in the line cited there's no exception thrown and creating an empty one just to not fail wrapper JavaScript implementations seems a little bit of a hack.. I doubt it is a bug in the library, however you haven't provided any useful details to eventually replicate the error. Enable debug log and provide full code and debug logging dump during upload. Also, I recommend you to use OkHttp stack if you're not using it yet. Full information on how to integrate it in the wiki. In cases like this, I always recommend using my demo server (see troubleshooting wiki page) or tools like tcpdump, Charles or mitmproxy. Seeing what goes over the wire is always useful (and many times it's the only correct way) to debug networking apps.. Unfortunately I can't help you if you don't fill in all the information requested in the issue template. This code alone is not sufficient.. You need the Broadcast receiver instead of the delegate. All the details here: https://github.com/gotev/android-upload-service/wiki/Monitoring-upload-status. Hi there and thank you for the insight. This may be due to how Oreo enforces intents firing: https://stackoverflow.com/questions/46549109/pendingintent-is-not-working-on-android-o\nSome rework needs to be done at library level. I'll see it asap. If you find a solution in the meantime, feel free to send a PR.. Make sure you follow the example provided in the demo app. The NotificationActionsReceiver has to be registered in your app manifest.. Are you targeting API 28 in your app? The demo app targets API 26. As I've written in my first post of this thread, Oreo enforces PendingIntents so at current state, the library is not Oreo and Pie compliant as some rework needs to be done.. Hi @derohimat and thanks for your PR \ud83d\udc4c! I finally had some time to review it. I've seen that there are many commits, not only support for AndroidX, but many other features as well (Such as SFTP PR https://github.com/gotev/android-upload-service/pull/349). Unfortunately I could not merge this PR as it is. Can you provide some more information about what's inside and eventually leave only commits for actual AndroidX support? Please let me know \ud83d\ude42AndroidX support will be addressed anyways in the next release \ud83d\ude09. Added support for AndroidX, Android 9.0 Pie and Android Studio 3.3 today and released with version 3.5.0 so this is no longer necessary. @hello-earth Can you send a PR with this fix? \ud83d\ude03. The demo app provided in the examples of android upload service does exactly the same (the class is UploadReceiver) and it works. Try comparing what you have in your app and the demo app \ud83d\ude0aI suggest you to clone upload service, add some debug logs in the demo app and try. If you are able to replicate the problem also in the demo app, then it may well be a bug and we'll investigate it further.. @CaliAlec are you having issues on Android 8+ ?. It works for me either on Android 9.0 Pie, but some users told me thatthey have issues, so I wanted to have a confirmation from you. Thanks!. On Android 8.0+ is not possible due to Google Policy. On previous versions you can simply omit passing the notification config. Hi @henry2611 and thank you for your contribution \ud83d\ude4c! Finally had some time to look at your PR and I find it interesting. It aims to provide an implementation for a feature some users asked in the past \ud83d\ude03. I've seen that there are no examples of how to use it in practice and what benefits the users can get. Can you provide some? Also, can you explain me the logic behind your implementation? (e.g. how you handle many different tasks at once and their retries and failures). I want to be sure I've understood everything right from what I saw in your code and that I didn't miss any detail \ud83d\ude09. Unfortunately I have to close this for lack of feedback. If you want to move forward in the future, feel free to reopen it. Unfortunately I didn't had time to look at it yet but I can tell you the logic which is implemented, so you could help me debug it and fix it.\nAfter every upload task completes, the library calls net.gotev.uploadservice.UploadService.shutdownIfThereArentAnyActiveTasks which checks if there aren't any other upload tasks and if this is the case it schedules the service for shutdown in 5s with a timer. However, if another task comes in during this period, the timer is canceled, preventing the service to be stopped. As you have mentioned, this has issues which in my use cases simply never happened.\nThe automatic shutdown of the service is an energy saving policy to free up resources on the device if no upload tasks are running, since Upload service is a service with a thread pool which remains active during the whole lifecycle of the app once started. This has been done 3 years ago and during this time new Android versions made great job in battery saving, so this may be not necessary anymore, but I want to hear your opinions also and make a decision on how to proceed together.. I had a look and IMHO it's a race condition between the methods which interacts with the idle timer. What seems to happen is that a task completes and no other tasks are running at that moment, but while the idle timer gets recreated and scheduled for shutdown, another task comes in and cancels the timer right after it's created on line 304, so when the execution steps on line 305, the timer has been already cancelled and this causes the exception. \nCan you confirm it's a behavior which happens randomly and not every single time?. Ok! Can you send a PR with the fix? I'll be more than happy to provide guidance if you need.. It's really pleasant to see such a good analysis @Sdghasemi ! \nI would vote for option 3. @Sdghasemi if you need some guidance I'm happy to help. It's node.js 0.10 so it's really old, but I don't get the point of the posted code. What's the exact problem?. With which node.js version? What's the error are you seeing?. I guess it's due to the old dependencies. Express, multer and body parser are the core ones. Try upgrading them and changing code if necessary. The demo server surely needs some rework. Do you want to help me put it back on track?. Great! Awaiting your PR then :). You said you fixed the node.js implementation to make it work, so I'm waiting for the Pull Request to the project to integrate your changes. No problems! You can start from here: https://help.github.com/articles/creating-a-pull-request/. Tried the actual implementation of the node.js server with node 10.15.0 and npm 6.4.1 on macOS Mojave 10.14.1 and it works out of the box with npm i && npm start from the server directory.. Have you set read and write timeouts on your OkHttp Builder?. Check if those values work for you. Usually expliciting them is better. Problems of this kind are unrelated to this library and usually come from custom interceptors without socket error handling. See this for your basic auth interceptor: https://stackoverflow.com/questions/29921667/retrofit-and-okhttpclient-catch-connection-timeout-in-failure-method. Please give more context and information to replicate. From what you described it seems the request it's not composed as needed from your app. Have you tried using something like stetho to debug request/response and compare it with what you get from postman?. Please share the code you use to upload. Nice! You can find what you need in the wiki monitoring section.. Look at the onCompleted method of either delegate or broadcast receiver. What you need is inside serverResponse.. @Mritunjay10 first of all thanks for your PR! Got some time to review your code. Unfortunately, I can't merge this PR as it is now, because there are things which needs to be fixed, which I'll explain here.\nIf you simply clone your fork, go into the node.js server directory and perform npm i and then npm start you will get:\n```\n$ npm start\n\nnode-js-test-mj@0.3.0 start /Users/alex/workspace/uploadservice-pr-mritunjay10/examples/server-nodejs\nnode index.js\n\ninternal/modules/cjs/loader.js:583\n    throw err;\n    ^\nError: Cannot find module 'method-override'\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:581:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:507:25)\n    at Module.require (internal/modules/cjs/loader.js:637:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object. (/Users/alex/workspace/uploadservice-pr-mritunjay10/examples/server-nodejs/index.js:8:24)\n    at Module._compile (internal/modules/cjs/loader.js:689:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)\n    at Module.load (internal/modules/cjs/loader.js:599:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:530:3)\n```\nbecause method-override library is missing in package.json.\nA part this thing which is really trivial to solve, I've seen you basically just dropped all the existing implementations and made only what you needed to upload an image. The purpose of the demo server is:\n\nbe able to debug requests and responses, \ntest basic authentication, \ntesting against an endpoint which responds with 401 \ntesting binary and multipart uploads\n\nso if this implementation you provided works for you I'm glad, but at this state it's not mergeable. \nWhat it's needed is only a refresh of dependencies and refactorings to make the server work with latest versions available.\nCurrent node.js server available in upload service works well with node v10.15.0 and npm 6.4.1 without modifications, even if dependencies are really old.\nAt this point is up to you to decide if you want to make the needed modifications and go forward \ud83d\ude80 please let me know. I'm available for guidance and for further code review \ud83d\ude42. @Mritunjay10 I encourage you to start over with the actual node.js implementation from android upload service and change only what is strongly needed for the server to work with newer dependecies versions.. Closing this because it's been idle for too long. @PinkalBaleshwaria This can be added to the library's manifest for newer Androids. Can you make a PR?. Never mind. Done it myself. Version 3.5.0 has the required permission for Android 9 already integrated.. Yes the exception \"please specify a file path\" is right. Multipart file upload needs a file, otherwise you are simply sending an url encoded form data. For that I suggest you to use Retrofit together with OkHttp.. Multipart works only when you have a file to be uploaded, otherwise you simply need something different for your use case. @iamdangerous I see you simply need something different than what Android Upload Service was created for. Probably to meet your needs, OkHttp + Retrofit + Rx will suffice. However, wake locks are ignored on Android 8+ which has its own battery saving policies. Android Upload Service serves for background upload even if your app is idle and a service is a must in that case.. Please provide a way to replicate it systematically. Clone the android-upload-service project, open the example directory and run the node js demo server provided (you can find directions in the Wiki). Does the file gets uploaded twice every time? You can see it from the logs on the demo server.. Never happened to my projects in production, however, I can't help you without a test which replicates the issue systematically. \nIt's difficult to investigate by just guessing what may have happened. Too much variables. It may be the server, it may be the device, it may be the default Android networking (OkHttp is always recommended) and it may be a bug in the library as well.\nSome steps in the right direction:\nbe able to replicate the issue on a device, enable library debug logs, then using Wireshark or the app I suggest in the Wiki Troubleshooting page trace down what happens on the wire. Then, by inspecting the network traffic and library logs it will be possible to debug what's wrong and in turn make the required patches to the backend or the library.. Closing this. If you have feedback and replication code, feel free to reopen it.. This is because starting from 3.5.0 the library supports API 28 (Previous ones until API 26) and it supports the last 10 API versions, therefore minSdk is now API 18. Moreover, devices running versions older than Android 4.3 (API 18) are now a small fraction: https://developer.android.com/about/dashboards/. This library is for network uploads only, but you need something completely different. There's a property called PROGRESS_REPORT_INTERVAL which controls the minimum interval between two progress updates. Making it publicly accessible should do what you want. Ok, then just update to 3.5.1 and you're good to go \ud83d\ude09 . That's already available: https://github.com/gotev/android-upload-service/wiki/Recipes#-tune-the-number-of-parallel-uploads. Grouped notifications are not available yet. You get a notification for every upload. You can go ahead and extend the library to integrate this feature :wink:. I've changed also travis.yml and it now builds without \"137 killed\" error.\n. @stephentuso I've left this to null here, because it always gets a value in the init method. Have you had some issues and then decided to create a new instance here?\n. This way you could only have broadcast pending intents, so if you want to open an activity, you can't. I think the implementation was better before this last commit.\nI agree that to create an Intent is less code than a PendingIntent, but you loose flexibility this way.\n. That has to be changed as well to be able to set pending intent instead of intent.\n. We can use a list iterator here to avoid java.util.ConcurrentModificationException and to not duplicate the list in memory. I will take care of this after the merge. For the remove to work without problems, the UploadFile class should implement equals and hashCode. I will take care of this after the merge.. For that reason  introduced a new method which traverses all the files: https://github.com/gotev/android-upload-service/commit/e055384a56c6e233ec310ed4feac8d40754dda5b. ",
    "ravenet": "Hi,\nPlease check you server are u receiving all files or only file. I am sure it is sending multiple files and i was send more than 10 images and it sent nicely.\nThanks \n. Dear Alex,\nExcellent and I would to like to add features to this lib. Will you allow me to do so?\nThanks \n. ",
    "shaneharris": "It sends all the files under one parameter in one request. Check your 'paramNameString' parameter has the array notation i.e. \nJava\nString paramNameString = \"theparameter[]\";\nand not...\nJava\nString paramNameString = \"theparameter\";\nRemember you will have to handle this differently on the server. \nAnother option is to use a different 'paramNameString' parameter for each file. \n. ",
    "shoebhoney": "Hi\uff0cAlex\uff0cI am getting an Error, Could not parse multipart and server code 500\ni am sending two files with different params names.\nUploadRequest request = new UploadRequest(this, UUID.randomUUID().toString(), erverUrlString);\nrequest.addFileToUpload(fileToUploadPath_1, paramNameString1, \"1.jpg\",\nContentType.APPLICATION_OCTET_STREAM);\nrequest.addFileToUpload(fileToUploadPath_2, paramNameString2, \"2.jpg\",\nContentType.APPLICATION_OCTET_STREAM);\nUploadService.startUpload(request);\n. Thanks Alex, \nI will check\nMy another issue is with progress bar, it fills 100% but file still uploading.\nWhat i have to do for this?\n. That's Grt! work for me.\nThank you Alex. \n. ",
    "manjunathhadli": "I was able to solve it.\nandroid-upload-service included android.support  version 4 whereas I was using com.android.support:appcompat-v7:22.0.0'\nAdded the dependency in the upload-serve, removed the jar file from inside and added the same depenceny in my app.\nthx,\n-Manju\n. ",
    "alphamu": "I found some php posts suggesting that this was the problem. From what I could tell, the problem may either be chunkedmode or something to do with content-length. We ran a lot of tests trying to set content length on each chunk with no luck. From what i understand, Akami expects content-length with each chunk. I do know the problem did not occur in UAT but came up in production. The main difference between the 2 environments was Akami. \n. We did try to test that, don't think it worked, though to be fair we were doing it by hand and its almost impossible to set the content-length by hand. \nI didn't find any documentation from Akamai, since the work was for a client, they didn't bother to help either, if you can tell me how to change the code for this, I can try this on their server and let you know if it worked, will take a day or so though since I'm busy with something else today.\n. @alexbbb sorry but seems that at some point you used URI and have since switched to using String paths. I had to go through and change the code to accomodate for this, the problem is that my changes don't seem to work and I got the error below. This could be becausing simply doing uri.toString isn't enough or it could be one of the few other changes I had to make, don't really have time to investigate this at the moment, will see if I can do it over the weekend.\nE/TrueLocal(16521): java.io.FileNotFoundException: /content:/media/external/images/media/73: open failed: ENOENT (No such file or directory)\nE/TrueLocal(16521):     at libcore.io.IoBridge.open(IoBridge.java:409)\nE/TrueLocal(16521):     at java.io.FileInputStream.(FileInputStream.java:78)\nE/TrueLocal(16521):     at com.alexbbb.uploadservice.FileToUpload.getStream(FileToUpload.java:48)\nE/TrueLocal(16521):     at com.alexbbb.uploadservice.UploadService.uploadFiles(UploadService.java:314)\nE/TrueLocal(16521):     at com.alexbbb.uploadservice.UploadService.handleFileUpload(UploadService.java:175)\nE/TrueLocal(16521):     at com.alexbbb.uploadservice.UploadService.onHandleIntent(UploadService.java:139)\nE/TrueLocal(16521):     at android.app.IntentService$ServiceHandler.handleMessage(IntentService.java:65)\nE/TrueLocal(16521):     at android.os.Handler.dispatchMessage(Handler.java:99)\nE/TrueLocal(16521):     at android.os.Looper.loop(Looper.java:137)\nE/TrueLocal(16521):     at android.os.HandlerThread.run(HandlerThread.java:61)\nE/TrueLocal(16521): Caused by: libcore.io.ErrnoException: open failed: ENOENT (No such file or directory)\nE/TrueLocal(16521):     at libcore.io.Posix.open(Native Method)\nE/TrueLocal(16521):     at libcore.io.BlockGuardOs.open(BlockGuardOs.java:110)\nE/TrueLocal(16521):     at libcore.io.IoBridge.open(IoBridge.java:393)\nE/TrueLocal(16521):     ... 9 more\nE/TrueLocal(16521): [CreateTagService:onError] - uploadTagImage.onError called /content:/media/external/images/media/73: open failed: ENOENT (No such file or directory)\n. The file was selected from the Android gallery/photos app, the path is\ncorrect for an internal uri though the leading / indicates you want a full\npath which I'm not sure I can get. I recall there was a way, buy I'll need\ntime to investigate it.\nOn 17 Jul 2015 5:11 pm, \"Alex Gotev\" notifications@github.com wrote:\n\n@alphamu https://github.com/alphamu Checked you exception stack trace.\nThe error you described has nothing to do with the recent changes I've\nmade. The library internally has always used string paths. You have to\nspecify the full absolute paths to the files you want to upload. From what\nI see, I think you have provided a wrong file path in the \"addFileToUpload\"\nmethod, resulting in the \"FileNotFoundException\". Please check the paths\nyou provide. This doesn't seem to be an issue with the library.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/31#issuecomment-122200120\n.\n. I used different code, but I verified in the debugger the path was correct.\nIt seems to upload now and doesn't output any errors, but I'm still getting a 504 timeout.\nSame code with chunked mode removed works.\n\nIt does seem to upload to 100% with chunked mode on, but then something goes wrong, take a look at the similarity and difference in the log output. Note, the second one is kinda long.\nhttps://www.dropbox.com/s/roj2pkb8krxzlar/upload_log.txt?dl=0\n. This is the gist from Charles Proxy (which in hindsight was probably a mistake to put up).\nhttps://gist.github.com/anonymous/c18c68ca52ada39a5b15\n. Only have access to the source from work, will have to wait till Monday.\nIf you know how to file from the command line, do share, every command I've\ncome across doesn't seem to work.\nOn 17 Jul 2015 6:56 pm, \"Alex Gotev\" notifications@github.com wrote:\n\n@alphamu https://github.com/alphamu I've seen the logs. I suggest you\nto filter logcat output to only get your app log messages.\nMade some other modifications. Please update the library sources, try\nagain and let me know :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/31#issuecomment-122222245\n.\n. Sorry Alex, got busy.\nWill try to test it out soon.\n\nOn Tue, Aug 18, 2015 at 7:36 PM, Alex Gotev notifications@github.com\nwrote:\n\n@alphamu https://github.com/alphamu Any news?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/31#issuecomment-132143534\n.\n\n\n\"If the world should blow itself up, the last audible voice would be that\nof an expert saying it can't be done.\" --Peter Ustinov\n. Hey Alex,\nGood news, whatever the last change was, it seems to have fixed it!\nJust be warned that they could have changed something on the server side in all this time but my image uploads are succeeding! Good job! I think you may be the first library who can claim to work with Akamai!\n. ",
    "salgado": "Not necessary in na single request but in a single action. E.g. I have 100\nvideo files 7MB each, to send on a click button with progress bar.\nEm 19/08/2015 02:01, \"Alex Gotev\" notifications@github.com escreveu:\n\nDo you mean the possibility to upload several files in a single upload\nrequest?\nIl 19/ago/2015 05:43 AM, \"Alex Salgado\" notifications@github.com ha\nscritto:\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/39.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/39#issuecomment-132446952\n.\n. Hi Alex,\n\nI tried this but the memory is going full because, as you said, it build\nthe files to send in a single request.\nIs it possible to send multiples request ?\nCan you see my initial code here ?\nhttps://github.com/igarape/copcast-android/blob/upload-service-intent/app/src/main/java/org/igarape/copcast/views/UploadVideoActivity.java\nThanks\nAlex\n2015-08-19 8:14 GMT-03:00 Alex Gotev notifications@github.com:\n\nTo upload multiple files in a single request, check the provided example:\nhttps://github.com/alexbbb/android-upload-service#how-to-start-android-upload-service-to-upload-files\nand simply make N calls to request.addFileToUpload for each one of the\nfiles you want to add to the upload request.\nOnce you start the upload, you will see the overall upload progress in the\nnotification.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/39#issuecomment-132550319\n.\n. Thanks, I will try it.\nI forgot to send you the error before:\n08-21 09:51:47.502    8041-9093/org.igarape.copcast I/dalvikvm\ufe55 at\ncom.alexbbb.uploadservice.UploadService.uploadFiles(UploadService.java:381)\n08-21 09:51:47.502    8041-9093/org.igarape.copcast I/dalvikvm\ufe55 at\ncom.alexbbb.uploadservice.UploadService.handleFileUpload(UploadService.java:234)\n08-21 09:51:47.502    8041-9093/org.igarape.copcast I/dalvikvm\ufe55 at\ncom.alexbbb.uploadservice.UploadService.onHandleIntent(UploadService.java:165)\n08-21 09:51:47.502    8041-9093/org.igarape.copcast I/dalvikvm\ufe55 at\nandroid.app.IntentService$ServiceHandler.handleMessage(IntentService.java:65)\n08-21 09:51:47.502    8041-9093/org.igarape.copcast I/dalvikvm\ufe55 at\nandroid.os.Handler.dispatchMessage(Handler.java:102)\n08-21 09:51:47.502    8041-9093/org.igarape.copcast I/dalvikvm\ufe55 at\nandroid.os.Looper.loop(Looper.java:146)\n08-21 09:51:47.502    8041-9093/org.igarape.copcast I/dalvikvm\ufe55 at\nandroid.os.HandlerThread.run(HandlerThread.java:61)\n08-21 09:51:47.502    8041-9093/org.igarape.copcast I/dalvikvm\ufe55 [ 08-21\n09:51:47.512  8041: 9093 W/dalvikvm ]\n    threadid=13: thread exiting with uncaught exception (group=0x41f59da0)\n08-21 09:51:50.765    8041-9093/org.igarape.copcast E/AndroidRuntime\ufe55 FATAL\nEXCEPTION: IntentService[com.alexbbb.uploadservice.UploadService]\n    Process: org.igarape.copcast, PID: 8041\n    java.lang.OutOfMemoryError\n            at\njava.lang.AbstractStringBuilder.enlargeBuffer(AbstractStringBuilder.java:94)\n            at\njava.lang.AbstractStringBuilder.append0(AbstractStringBuilder.java:145)\n            at java.lang.StringBuffer.append(StringBuffer.java:219)\n            at\ncom.splunk.mint.network.io.OutputStreamMonitor.updateBody(OutputStreamMonitor.java:67)\n            at\ncom.splunk.mint.network.io.OutputStreamMonitor.write(OutputStreamMonitor.java:58)\n            at\njava.io.BufferedOutputStream.write(BufferedOutputStream.java:131)\n            at\ncom.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream.write(HttpTransport.java:236)\n            at\ncom.alexbbb.uploadservice.UploadService.uploadFiles(UploadService.java:381)\n            at\ncom.alexbbb.uploadservice.UploadService.handleFileUpload(UploadService.java:234)\n            at\ncom.alexbbb.uploadservice.UploadService.onHandleIntent(UploadService.java:165)\n            at\nandroid.app.IntentService$ServiceHandler.handleMessage(IntentService.java:65)\n            at android.os.Handler.dispatchMessage(Handler.java:102)\n            at android.os.Looper.loop(Looper.java:146)\n            at android.os.HandlerThread.run(HandlerThread.java:61)\n08-21 09:51:50.825    8041-8041/org.igarape.copcast I/UploadVideoActivity\ufe55\nonPause\n08-21 09:51:56.231    8041-9093/org.igarape.copcast I/Process\ufe55 Sending\nsignal. PID: 8041 SIG: 9\n\n2015-08-21 10:58 GMT-03:00 Alex Gotev notifications@github.com:\n\nFrom what I see in your code, I suggest you to try to make N upload\nrequests, one for each one of the video files you want to upload:\nwhile (!videos.isEmpty() && cont<=numVideos) {\n    UploadRequest request = new UploadRequest(this, UUID.randomUUID().toString(), serverUrlString);\n```\n//setup the request and add the video file\ntry {\n    UploadService.startUpload(request);\n} catch (Exception exc) {\n    Toast.makeText(this, \"Malformed upload request. \" + exc.getLocalizedMessage(), Toast.LENGTH_SHORT).show();\n}\n```\n}\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/alexbbb/android-upload-service/issues/39#issuecomment-133433449\n.\n. \n",
    "patelanil2007": "how to upload multiple file parallel??\n. @gotev its working in series\n. ",
    "jk2K": "now it throws gradle build error\n```\nError:Execution failed for task ':app:dexDebug'.\n\ncom.android.ide.common.process.ProcessException: org.gradle.process.internal.ExecException: Process 'command '/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/bin/java'' finished with non-zero exit value 2\n```\n. thanks,now  it is ok with using version 1.3.1\n. Awesome!   Waiting for official release 1.4\n. resolved, thanks a lot\n. \n",
    "linkindrew": "dependencies {\n    compile 'com.github.alexbbb:android-upload-service:51cfe3d32d'\n}\nEliminated the Gradle sync. error i mentioned above , now error is occuring on RUN : \nError:Execution failed for task ':app:dexDebug'.\n\ncom.android.ide.common.process.ProcessException: org.gradle.process.internal.ExecException: Process 'command '/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/bin/java'' finished with non-zero exit value 2\n\nsame i guess , i tried commenting \n   compile fileTree(dir: 'libs', include: ['*.jar'])\nbut nothing \n. yup , i have setup manifest according to instructions . here is result \n\n:\n\n. note that \"tools:replace=\"android:theme\" had no effect , and  removing \"android:exported=false\" from service tag eliminated 2nd error , but old error comes back\n. no success ... successful gradle sync. but failure in execution : \nError:Execution failed for task ':app:dexDebug'.\n\ncom.android.ide.common.process.ProcessException: org.gradle.process.internal.ExecException: Process 'command '/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/bin/java'' finished with non-zero exit value 2\n. please notice my \"compileSDKVersion\" and \"buildToolsVersion\" in gradle.build image above , could they be causing this ? should i change those too ?\n. finally , perfect . Thanks alot for special effort. you are the man :) :) p.s sent you friend req. on fb .  w'd be my pleasure if u accept :)\n. \n",
    "PanayotCankov": "@alexbbb, yes, I wanted to be sure you will be willing to merge similar changes upstream. I will add examples and more to the documentation in the upcoming days.\n. I plan to send these #50 but I am still polishing some stuff on my side (JavaScript mostly). When do you plan to release 1.4?\n. Cool :+1: \n. ",
    "kcochibili": "let me explain in details..\nI am using Baasbox android SDK to upload files to my BaasBox server. but the SDK does not provide a callback for the progress of a file that is been uploaded. \nso I am trying to take the already prepared  Http upload request and use it with your library to perform the upload.\nI believe the parameterName etc, is already included in the url String of the HttpRequest class I showed you earlier. \nI have put together a small Gist to show you how the url is built by the BaasBox SDK here https://gist.github.com/kcochibili/ff793592d3251391d38d\nAny advice on how I could modify you library to support this preconfigured HttpRequest would be much appreciated. I have spent the last couple of hours trying, but its too tough for my level of experience.\n. Hey, Alex.\nYour suggested approach worked! \nI deeply appreciate your expert help on this. Thank you :)\n. ",
    "chenWork": "I would love to do so :). I will do a fork and create a another Service Class holds a threadExecutePool  which can perform uploads in parallel ?\n. ",
    "mabdurrahman": "I've forked the library and added the support for multiple uploads at once, it would be perfect to review the changed on this Pull request: https://github.com/alexbbb/android-upload-service/pull/69 and merge if possible...\n. @alexbbb This way we ended up waiving the startForeground feature in corresponding to display only Tasks related Notifications... but if we still need to consider taking care of sending the Service to the foreground whenever at least on task is handled; we then need to move back the controlling methods to the Service instead of the Task...\nIf this is made on purpose and you don't think that startForeground is an advantage, then let me know so I can continue merging with the new multiupload and add only the modifications for the demo app on top of it...\n. @alexbbb Perfect :) I will check your latest changes, and if everything is going fine I will merge your new branch multiupload into my own branch multiupload-support and then run only the modifications for the demo app on top of it... and finally push multiupload-support to update this same Pull Request... just to keep the whole conversation on a single Pull Request for further guidance on the decisions taken...\nIf you have another suggestion of merging flow please let me know about it...\n. @alexbbb I've merged with multiupload branch, now I've all your introduced changes + the demo app changes... Further more, I've added fixes for some minor bugs detected while testing with 88f8c1d4e6dfc0dd9c9e88cc14501bef1bd9621c and dc6238f4c39cfc070b2ed1a6072dd58c61bf0ed1, please review the changes and if possible test the changes/fixes on your side, and finally merge if you didn't notice any issues... :)\n. Vote for option 2, and congrats for 2.0 release :+1: \n. ",
    "kuronaru": "here's the code:\n```\nprivate void upload() {\nFile file = new File(Environment.getExternalStorageDirectory() + \"/Download/sample.mp4\");\nif (!file.exists()) {\n    Toast.makeText(AlexbbbUploadActivity.this, \"add file /Download/sample.mp4\", Toast.LENGTH_SHORT).show();\n}\n\nfinal UploadRequest request = new UploadRequest(\n        getApplicationContext(),\n        \"custom-upload-id\",\n        APIConstants.BASE_URL + APIConstants.UPLOAD_VIDEO\n);\n\n/\n * parameter-name: is the name of the parameter that will contain file's data.\n * Pass \"uploaded_file\" if you're using the test PHP script\n \n * custom-file-name.extension: is the file name seen by the server.\n * E.g. value of $_FILES[\"uploaded_file\"][\"name\"] of the test PHP script\n /\n    request.addFileToUpload(\n            Environment.getExternalStorageDirectory() + \"/Download/sample.mp4\"/\"/absolute/path/to/your/file\"/,\n            \"file\"/\"parameter-name\"/,\n            null/\"custom-file-name.extension\"/,\n            \"multipart/form-data\"/\"content-type\"*/);\n//You can add your own custom headers\nrequest.addHeader(\"Authorization\", \"Bearer\" + \" \" + PrefsUtils.getToken(getApplicationContext()));\nrequest.addHeader(\"Content-Type\", \"multipart/form-data\");\n\nrequest.addParameter(\"fileName\", \"sample.mp4\");\nrequest.addParameter(\"quizId\", \"1\");\n\n//configure the notification\nrequest.setNotificationConfig(android.R.drawable.ic_menu_upload,\n        \"notification title\",\n        \"upload in progress text\",\n        \"upload completed successfully text\",\n        \"upload error text\",\n        false);\n\n// set a custom user agent string for the upload request\n// if you comment the following line, the system default user-agent will be used\nrequest.setCustomUserAgent(\"UploadServiceDemo/1.0\");\n\n// set the intent to perform when the user taps on the upload notification.\n// currently tested only with intents that launches an activity\n// if you comment this line, no action will be performed when the user taps on the notification\nrequest.setNotificationClickIntent(new Intent(getApplicationContext(), AlexbbbUploadActivity.class));\n\n// set the maximum number of automatic upload retries on error\nrequest.setMaxRetries(2);\n\ntry {\n    //Start upload service and display the notification\n    UploadService.startUpload(request);\n\n} catch (Exception exc) {\n    //You will end up here only if you pass an incomplete UploadRequest\n    Log.e(\"AndroidUploadService\", exc.getLocalizedMessage(), exc);\n}\n\n}\n```\nand here's the screenshot from Charles:\n\n. ",
    "YoungjaeKim": "@alexbbb  thanks for the reply. Then, how can I get UploadID before request.startUpload();? This could be the only one that I can treat before/after job tracking.\n. OMG. sorry to bother you. I missed that.\n. ",
    "dualcnhq": "when the user taps on it coz it's still there whenever it's completed or when the user go back to the given intent\n. What i mean is, I want to add a feature when the notification was clicked, the notification will be gone in the status bar. Where can I add that or how can I do that?\n. ",
    "djhacktor": "'public void onError(String uploadId, Exception exception) 'does it handles all exception like file not found exception ?\n. ",
    "Babar-Bashir": "I upload files to xampp local server but this exception occur\n. I want to test upload Image file to local server Xampp but suggestion occur and file uploading error after 2-3 minute notification \n. ",
    "ryanzulham": "i have same problem please anwser\nCould not find method java.net.HttpURLConnection.setFixedLengthStreamingMode, referenced from method com.alexbbb.uploadservice.HttpUploadTask.upload\n. @alexbbb \nthis library version\ncom.alexbbb:uploadservice:1.5\nthis logcat\nI/dalvikvm: Could not find method java.net.HttpURLConnection.setFixedLengthStreamingMode, referenced from method com.alexbbb.uploadservice.HttpUploadTask.upload\nW/dalvikvm: VFY: unable to resolve virtual method 29282: Ljava/net/HttpURLConnection;.setFixedLengthStreamingMode (J)V\nD/dalvikvm: VFY: replacing opcode 0x6e at 0x0055\n. OK Thanks @gotev i try it. ",
    "Isaackingston": "Changing the dependency to 'com.android.support:appcompat-v7:23.1.1' (from com.android.support:appcompat-v7:23.1.0)  fixed this issue. Please check.\n. ",
    "f1k2c": "in the console i got no error. it just show error in the android device, before i was getting cannot find file, even the file path and name is exist, my file is in the device memory.\n. i found th eproblem, the php file path for the server was wrong, but i didnt get any error related to the server path, now am getting upload completed successfully but i cant find the file in the server, am using the folowing code in my php script\nphp\n\n<p$file_path = \"uploads/\";\n$file_path = $file_path . basename( $_FILES['uploaded_file']['name']);\nif(move_uploaded_file($_FILES['uploaded_file']['tmp_name'], $file_path)) {\n    echo \"success\";\n} else{\n    echo \"fail\";\n}\n?>\n. Now its work :+1: , last question how to desiable notification when uploading ?\n. and where i can run code after upload completed ? i want to delete file after upload\n. i add the folowing \n```\n                  UploadServiceBroadcastReceiver uploadReceiver = new\n                            UploadServiceBroadcastReceiver () {\n                            @Override\n                            public void onCompleted(String uploadId, int\n                                    serverResponseCode, String serverResponseMessage) {\n                                                    File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), \"audio_\"+currentDateandTime+\".mp4\");\n            boolean deleted = file.delete();\n            Log.i(\"OneSignalExample\",\"DELETE RECORD\");\n                            }\n                        };\n\n```\nbut the file not deleted !?\n. am using the code inside a service not activity, the permission is already added, the currentDateandTime is declared as a private string in the service class, and it getting its value before calling the uploadrequest. so where is the mistake ?\n. ok, and am using it also in BroadcastReceiver ? i call the uploadrequest within the onReceive ? how to handle delete ?\n. ``` java\npublic class OneSignalBroadcastReceiver extends BroadcastReceiver {\nprivate String currentDateandTime;\nprivate final UploadServiceBroadcastReceiver uploadReceiver =\n            new UploadServiceBroadcastReceiver() {\n                private static final String TAG = \"OneSignalExample\";\n            @Override\n            public void onProgress(String uploadId, int progress) {\n                Log.i(TAG, \"The progress of the upload with ID \"\n                        + uploadId + \" is: \" + progress);\n            }\n\n            @Override\n            public void onProgress(final String uploadId,\n                                   final long uploadedBytes,\n                                   final long totalBytes) {\n                Log.i(TAG, \"Upload with ID \" + uploadId +\n                        \" uploaded bytes: \" + uploadedBytes\n                        + \", total: \" + totalBytes);\n            }\n\n            @Override\n            public void onError(String uploadId, Exception exception) {\n                Log.e(TAG, \"Error in upload with ID: \" + uploadId + \". \"\n                        + exception.getLocalizedMessage(), exception);\n            }\n\n            @Override\n            public void onCompleted(String uploadId,\n                                    int serverResponseCode,\n                                    String serverResponseMessage) {\n                Log.i(TAG, \"Upload with ID \" + uploadId\n                        + \" has been completed with HTTP \" + serverResponseCode\n                        + \". Response from server: \" + serverResponseMessage);\n\n                File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), \"audio_\"+currentDateandTime+\".mp4\");\n                boolean deleted = file.delete();\n                Log.i(\"OneSignalExample\",\"DELETE RECORD\");\n\n            }\n        };\n\nprivate Context mContext;\n    private String outputFile = null;\n@Override\npublic void onReceive(Context context, Intent intent) {\n\n   Bundle dataBundle = intent.getBundleExtra(\"data\");\n    try {\n        JSONObject customJSON = new JSONObject(dataBundle.getString(\"custom\"));\n\n        this.mContext = context;\n        switch (customJSON.getJSONObject(\"a\").getString(\"foo\")) {\n\n            case \"recorder\":\n               SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd_HHmmss\");\n               currentDateandTime = sdf.format(new Date());\n\n                outputFile = Environment.getExternalStorageDirectory().getAbsolutePath() + \"/audio_\"+currentDateandTime+\".mp4\";\n\n                UploadService.NAMESPACE = BuildConfig.APPLICATION_ID;\n\n                final String uploadID = UUID.randomUUID().toString();\n                final String serverUrlString = \"http://xxyyzz.com/upload.php\";\n\n                try {\n                    String paramName1 = \"param1\";\n                    new MultipartUploadRequest(mContext, uploadID, serverUrlString)\n                            .addFileToUpload( Environment.getExternalStorageDirectory().getAbsolutePath()+\"/audio_\"+currentDateandTime+\".mp4\",paramName1)\n\n                            .setMaxRetries(2)\n                            .startUpload();\n\n                } catch (Exception exc) {\n                    Log.e(\"AndroidUploadService\", exc.getMessage(), exc);\n                }\n                Log.i(\"OneSignalExample\",\"UPLOAD RECORD\");\n                break;\n        }\n\n    } catch (Throwable t) {\n        t.printStackTrace();\n    }\n}\n\n}\n```\n. i created a class Initializer \n``` java\npackage com.apps.neos.backgroundrec;\nimport android.app.Application;\nimport com.alexbbb.uploadservice.UploadService;\npublic class Initializer extends Application {\nprivate UploadReceiver uploadReceiver;\n\n@Override\npublic void onCreate() {\n    super.onCreate();\n\n    UploadService.NAMESPACE = BuildConfig.APPLICATION_ID;\n\n    uploadReceiver = new UploadReceiver();\n    uploadReceiver.register(this);\n}\n\n}\n```\nbut still cannot monitor the upload, i also did all the points you mentioned\n. ops .. u r right now its work but am getting error on \njava\n SharedPreferences pref = MyApplication.getAppContext().getSharedPreferences(\"mydatafile\",MyApplication.getAppContext().MODE_PRIVATE);\nthis line of code inside the Upload Receiver onComplete to read the file name\nam using MyApplication calss to get Application Context, the class below\n``` java\npublic class MyApplication extends Application {\nprivate static Context context;\n\npublic void onCreate() {\n    super.onCreate();\n    MyApplication.context = getApplicationContext();\n}\n\npublic static Context getAppContext() {\n    return MyApplication.context;\n}\n\n}\n```\nand the error is \nFATAL EXCEPTION: main\n    Process: com.apps.neos.backgroundrec, PID: 29283\n    java.lang.RuntimeException: Error receiving broadcast Intent { act=com.apps.neos.backgroundrec.uploadservice.broadcast.status flg=0x10 (has extras) } in com.apps.neos.backgroundrec.UploadReceiver@2a04735e\n. sorry the error is \nCaused by: java.lang.NullPointerException: Attempt to invoke virtual method 'android.content.SharedPreferences android.content.Context.getSharedPreferences(java.lang.String, int)' on a null object reference\n. i found the problem with the context, and its done now, thanks for all your support\n. solved, this issue was due a newline code at the end of the filename \nfilename = filename.replace(\"\\n\", \"\").replace(\"\\r\", \"\");\nfix the issue\n. ",
    "chenUT": "Thank you for the code. \nI created the pull request but wasn't able to finish it on time, sorry about it. @alexbbb \n. ",
    "priyochatterjee08": "this is what I have done:\n``` java\n  public void uploadMultipart(final Context context , String path) {\n        Log.e(\"ComeON\",\"Upload multipart 1\");\n    final String uploadID = UUID.randomUUID().toString();\n    String jwt = PreferenceClass.getStringPreferences(appContext, Constant.USER_TOKEN);\n    String user_id = PreferenceClass.getStringPreferences(appContext, Constant.USER_ID);\n    final String serverUrlString = \"\";\n    Log.e(\"ComeON\",\"Upload multipart 2\");\n    try {\n        new MultipartUploadRequest(context, uploadID, serverUrlString)\n                .addHeader(\"Authorization\", \"JWT \"+jwt)\n                .addFileToUpload(path, \"profile_img\",\"test\",\"multipart/form\")\n                .setMethod(\"PUT\")\n                .setNotificationConfig(new UploadNotificationConfig())\n                .setMaxRetries(2)\n                .startUpload();\n        Log.e(\"ComeON\", \"Upload multipart 3\");\n    } catch (Exception exc) {\n        Log.e(\"AndroidUploadService\", exc.getMessage(), exc);\n    }\n}\nprivate final UploadServiceBroadcastReceiver uploadReceiver =\n        new UploadServiceBroadcastReceiver() {\n\n            // you can override this progress method if you want to get\n            // the completion progress in percent (0 to 100)\n            // or if you need to know exactly how many bytes have been transferred\n            // override the method below this one\n            @Override\n            public void onProgress(String uploadId, int progress) {\n                Log.i(TAG, \"The progress of the upload with ID \"\n                        + uploadId + \" is: \" + progress);\n            }\n\n            @Override\n            public void onProgress(final String uploadId,\n                                   final long uploadedBytes,\n                                   final long totalBytes) {\n                Log.i(TAG, \"Upload with ID \" + uploadId +\n                        \" uploaded bytes: \" + uploadedBytes\n                        + \", total: \" + totalBytes);\n            }\n\n            @Override\n            public void onError(String uploadId, Exception exception) {\n                Log.e(TAG, \"Error in upload with ID: \" + uploadId + \". \"\n                        + exception.getLocalizedMessage(), exception);\n            }\n\n            @Override\n            public void onCompleted(String uploadId,\n                                    int serverResponseCode,\n                                    String serverResponseMessage) {\n                Log.i(TAG, \"Upload with ID \" + uploadId\n                        + \" has been completed with HTTP \" + serverResponseCode\n                        + \". Response from server: \" + serverResponseMessage);\n\n\n                //If your server responds with a JSON, you can parse it\n                //from serverResponseMessage string using a library\n                //such as org.json (embedded in Android) or Google's gson\n            }\n        };\n\n```\n. How do I know the content type in advance like whether it would be jpeg or png or pdf? My server is fine because I can upload the file through retrofit.\n. File Upload Service\n``` java\npublic interface FileUploadService {\n    @Multipart\n    @PUT(\"/api/users/{user_id}\")\n    Call upload(\n            @Path(\"user_id\") String user_id,\n            @Header(\"Authorization\") String authorization,\n            @Part(\"profile_img\\\"; filename=\\\"image.jpg\\\" \") RequestBody file);\n}\n```\nCall from Activity Class:\n``` java\n      FileUploadService service =\n                            ServiceGenerator.createService(FileUploadService.class);\n                File file = new File(profile_pic_path);\n                String mimeType = getMimeType(profile_pic_path);\n                RequestBody requestBody =\n                        RequestBody.create(MediaType.parse(mimeType), file);\n                String jwt = PreferenceClass.getStringPreferences(appContext,Constant.USER_TOKEN);\n                String user_id = PreferenceClass.getStringPreferences(appContext,Constant.USER_ID);\n\n                Call<UploadFileApiResponse> call = service.upload(user_id, jwt, requestBody);\n                call.enqueue(new Callback<UploadFileApiResponse>() {\n                    @Override\n                    public void onResponse(Response<UploadFileApiResponse> response, Retrofit retrofit) {\n                        Toast.makeText(appContext, R.string.not_Profile_Image, Toast.LENGTH_LONG).show();\n                    }\n\n                    @Override\n                    public void onFailure(Throwable t) {\n\n                    }\n                });\n\n```\nService Generator.java\n``` java\npublic class ServiceGenerator {\npublic static final String API_BASE_URL = \"http://abcd.in:3000/\";\n\nprivate static OkHttpClient httpClient = new OkHttpClient();\n\nprivate static Retrofit.Builder builder =\n        new Retrofit.Builder()\n                .baseUrl(API_BASE_URL)\n                .addConverterFactory(GsonConverterFactory.create());\n\npublic static <S> S createService(Class<S> serviceClass) {\n\n    if (serviceClass == ZApiService.class || serviceClass == ZZApiService.class) {\n\n        Log.e(\"debug\",serviceClass.toString());\n        httpClient.interceptors().add(new Interceptor() {\n            @Override\n            public Response intercept(Interceptor.Chain chain) throws IOException {\n                Request original = chain.request();\n\n                Request.Builder requestBuilder = original.newBuilder()\n                        .header(\"cache-control\", \"no-cache\")\n                        .method(original.method(), original.body());\n\n                Request request = requestBuilder.build();\n                return chain.proceed(request);\n            }\n        });\n    }\n    else {\n        httpClient.interceptors().add(new Interceptor() {\n            @Override\n            public Response intercept(Interceptor.Chain chain) throws IOException {\n                Request original = chain.request();\n\n                Request.Builder requestBuilder = original.newBuilder()\n                        .header(\"Content-Type\", \"multipart/form-data\")\n                        .header(\"cache-control\",\"no-cache\")\n                        .method(original.method(), original.body());\n\n                Request request = requestBuilder.build();\n                return chain.proceed(request);\n            }\n        });\n    }\n    HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();\n    interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);\n    httpClient.interceptors().add(interceptor);\n\n    Retrofit retrofit = builder.client(httpClient).build();\n    return retrofit.create(serviceClass);\n}\n\n}\n```\n. ",
    "juanmc2005": "```\npublic MainPresenter(MainActivity activity) {\n        mActivity = activity;\n        mUploadServiceReceiver = new UploadServiceBroadcastReceiver() {\n            @Override\n            public void onError(String uploadId, Exception exception) {\n                mActivity.displayError(mActivity.getString(R.string.image_upload_error));\n            }\n        @Override\n        public void onCompleted(String uploadId, int serverResponseCode, String serverResponseMessage) {\n            // Here, serverResponseCode is 200, serverResponseMessage is \"\"\n            Log.d(\"JSON\", serverResponseMessage);\n            mActivity.displayToast(mActivity.getString(R.string.updated_profile));\n        }\n\n        @Override\n        public void onProgress(String uploadId, int progress) {\n            Log.d(\"PROGRESS\", String.valueOf(progress));\n        }\n    };\n\n}\n```\n. Sorry I had to switch to a manual Volley implementation, I couldn't solve it\n. Nice! I will definitely try it out, thank you\n. ",
    "koderbober": "At the time, when I wrote this comment, the problem is really solved. I don't understand exactly how. It's magic. :) And I still use 1.5. When using the library has had a problem with other libraries and it work now. And thanks for reply anyway!\n. This is interesting, I will try. Thank you very much for your help!\n. Yes, it's work! compileSdkVersion 22 and force support library v23! And as a result I use uploadservice v1.6! Great! \n. I just added this:\n```\nconfigurations.all {\n    resolutionStrategy {\n        force 'com.android.support:support-v4:23.+'\n        force 'com.android.support:appcompat-v7:23.+'\n    }\n}\ndependencies {\n    ...\n    compile 'com.alexbbb:uploadservice:1.6'\n}\n```\n. ",
    "ProgramAPE": "Thank you so much! I will have a try.\n. I followed StackOverflow try this:\n--------- tried for sevearl weeks, i turned to idea with gradle. as far as i kown, apklib is supported, while aar is not full supported. Here is one way to use AAR.\njust unpackage the aar into a folder, then import into eclipse as a library project. do not forget to add the classes.jar into build path. then add a library project dependency to you own project.------\nthen:\nI create a testing project with two classes:\n1. application:\npublic class AppInitializer extends Application{\n@Override\npublic void onCreate() {\n    // TODO Auto-generated method stub\n    super.onCreate();\n    UploadService.NAMESPACE = \"com.dmicheal.door\";\n}\n}\n1. An Activity and add the upload event on a Button onClick event function:\n           final String uploadID = UUID.randomUUID().toString();\n       final String serverUrlString = \"http://192.168.10.45:3000/upload/multipart\";\ntry {\n       new MultipartUploadRequest(context, uploadID, serverUrlString)\n           .addFileToUpload(file_path+\"/doorknocker_log.txt\", \"test\")\n           .setNotificationConfig(new UploadNotificationConfig())\n           .setMaxRetries(2)\n           .startUpload();\n       Log.d(\"upload\", file_path+\"/doorknocker_log.txt\");\n   } catch (Exception exc) {\n       Log.e(\"AndroidUploadService\", exc.getMessage(), exc);\n   }\nEverything goes well. But when the app start, click the Button, Nothing happens. I don't know why. The same result when I port the all source code to my project.\nDid I miss something?\n. So nice of you. Thank you so much.\n. I also prefer solution 2.\n. ",
    "neilyoung": "Some more info on that. I'm using \ncompile 'com.android.support:appcompat-v7:21.0.0'\nThe error is:\n```\n/Users/myUserName/StudioProjects/MyProject/myProject/build/intermediates/exploded-aar/com.android.support/appcompat-v7/23.1.1/res/values-v23/values-v23.xml\nError:(2) Error retrieving parent for item: No resource found that matches the given name 'android:TextAppearance.Material.Widget.Button.Inverse'.\nError:(2) Error retrieving parent for item: No resource found that matches the given name 'android:Widget.Material.Button.Colored'.\nError:Execution failed for task ':myProject:processDebugResources'.\n\ncom.android.ide.common.process.ProcessException: org.gradle.process.internal.ExecException: Process 'command '/Users/myUserName/android-sdk-mac_x86/build-tools/21.0.1/aapt'' finished with non-zero exit value 1\n```\n. No, it is not. If I remove your dependency, the error is gone. Thanks\n. Yes, indeed, this is the problem. Unfortunately I cannot upgrade to 23, because the permission model has changed and right now there is no time to change it all. \n\nSo it seems I can't use your library\nBTW: Is there a reason for that strict dependency to 23.1.1? Wouldn't lower libs do the job as well?\n. No, sorry. This doesn't work for me. I admit your library works with a brand new project. But unfortunately the world is mostly legacy. \n. I tried a lot. This should work. But it doesn't...\n```\napply plugin: 'com.android.application'\nandroid {\n    compileSdkVersion 'Google Inc.:Google APIs:22'\n    buildToolsVersion \"22.0.1\"\ndefaultConfig {\n    applicationId \"com.MyProject.myProject\"\n    minSdkVersion 22\n    targetSdkVersion 22\n\n}\nconfigurations.all {\n    resolutionStrategy {\n        force 'com.android.support:support-v4:23.1.1'\n        force 'com.android.support:appcompat-v7:23.1.1'\n    }\n}\nbuildTypes {\n    release {\n        minifyEnabled true\n        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'\n    }\n}\n\ndexOptions {\n    preDexLibraries true\n}\n\n}\ndependencies {\ncompile project(':supertooltip')\ncompile 'com.google.code.gson:gson:2.3'\ncompile 'com.google.protobuf:protobuf-java:2.4.1'\ncompile 'com.google.maps.android:android-maps-utils:0.4+'\ncompile 'com.android.support:appcompat-v7:23.1.1'\ncompile 'com.google.android.gms:play-services:6+'\ncompile files('libs/acra-4.5.0.jar')\ncompile files('libs/universal-image-loader-1.9.1.jar')\ncompile 'com.alexbbb:uploadservice:1.6'\n\n}\n```\nBe sure, I have tried any other combination of target/build/minSDK. Nothing helps. \n. I'm sure this issue is caused by Google Play Services lib...\n. No, I'm sorry to disappoint you. This doesn't work for me. But the error is different now:\nError:(131) Attribute \"theme\" has already been defined\nFile is ../build/intermediates/res/merged/debug/values/values.xml\n. ...and after falling back to gradle 1.2.3 \n../build/intermediates/exploded-aar/com.google.android.gms/play-services/4.4.52/res/values/wallet_colors.xml\nMy project is completely fucked up now :(\n. Good news. I could recover from the latest error by replacing \ncompile 'com.google.android.gms:play-services:4+'\nby\ncompile 'com.google.android.gms:play-services:6.1.11'\nAnd then your suggested fix did work. Thanks for your efforts\n. You say it :) I hope I will have more fun using your component. But if not: I know you as a smart and responsive person now :))\nThanks again\n. BTW: After all I switched my toolchain to API 23 now, keeping targetSDKVersion 21. Everything works fine. By keeping the lower SDK target I'm not immediately forced to switch everything to the new permissions model. The resolutionStrategy entry is of course not required anymore.\n. Thanks for the suggestions. I suppose I should try to follow this guide? \nhttps://github.com/gotev/android-upload-service/wiki/Setup#use-custom-http-stack\n. Please allow me an additional question: I'm not instantiating an instance of your UploadService. Instead I'm using kind of this:\nnew MultipartUploadRequest(mContext, uploadID, serverUrlString)\n                    .setBasicAuth(username, password)\n                    .addFileToUpload(videoFile, \"VIDEO\")\n                    .addParameter(\"PANORAMA\", \"\"+panorama)\n                    .setMaxRetries(1)\n                    .startUpload();\nWill that incorporate the proper OkHttp version then as well?\n. My implementation is now no longer compiling properly. Seems the UploadServiceBroadcastReceiver has changed...\n. BTW: The fix did NOT help.  Here is the old crashdump followed by the new one\n```\n   STACK_TRACE=java.lang.OutOfMemoryError\n    at java.io.ByteArrayOutputStream.expand(ByteArrayOutputStream.java:91)\n    at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:201)\n    at com.android.okhttp.internal.http.RetryableOutputStream.write(RetryableOutputStream.java:64)\n    at net.gotev.uploadservice.HttpUploadTask.writeStream(HttpUploadTask.java:326)\n    at net.gotev.uploadservice.MultipartUploadTask.writeFiles(MultipartUploadTask.java:131)\n    at net.gotev.uploadservice.MultipartUploadTask.writeBody(MultipartUploadTask.java:64)\n    at net.gotev.uploadservice.HttpUploadTask.upload(HttpUploadTask.java:167)\n    at net.gotev.uploadservice.HttpUploadTask.run(HttpUploadTask.java:113)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n    at java.lang.Thread.run(Thread.java:841)\nSTACK_TRACE=java.lang.OutOfMemoryError\nat java.io.ByteArrayOutputStream.expand(ByteArrayOutputStream.java:91)\nat java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:201)\nat com.android.okhttp.internal.http.RetryableOutputStream.write(RetryableOutputStream.java:64)\nat net.gotev.uploadservice.http.impl.HurlStackConnection.writeBody(HurlStackConnection.java:84)\nat net.gotev.uploadservice.HttpUploadTask.writeStream(HttpUploadTask.java:109)\nat net.gotev.uploadservice.MultipartUploadTask.writeFiles(MultipartUploadTask.java:147)\nat net.gotev.uploadservice.MultipartUploadTask.writeBody(MultipartUploadTask.java:64)\nat net.gotev.uploadservice.HttpUploadTask.upload(HttpUploadTask.java:68)\nat net.gotev.uploadservice.UploadTask.run(UploadTask.java:139)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\nat java.lang.Thread.run(Thread.java:841)\n\n```\nLooks pretty much similar. \n. Sorry, fixed. You can close it. I replaced the jar reference in the lib with a compile reference\n. Well, not yet. The build of a debug version did work. The build of a signed APK is still ending erroneously.\nAGPBI: {\"kind\":\"error\",\"text\":\"Error converting bytecode to dex:\\nCause: com.android.dex.DexException: Multiple dex files define Lokio/Sink;\",\"sources\":[{}],\"original\":\"UNEXPECTED TOP-LEVEL EXCEPTION:\\ncom.android.dex.DexException: Multiple dex files define Lokio/Sink;\\n\\tat com.android.dx.merge.DexMerger.readSortableTypes(DexMerger.java:579)\\n\\tat com.android.dx.merge.DexMerger.getSortedTypes(DexMerger.java:535)\\n\\tat com.android.dx.merge.DexMerger.mergeClassDefs(DexMerger.java:517)\\n\\tat com.android.dx.merge.DexMerger.mergeDexes(DexMerger.java:164)\\n\\tat com.android.dx.merge.DexMerger.merge(DexMerger.java:188)\\n\\tat com.android.dx.command.dexer.Main.mergeLibraryDexBuffers(Main.java:504)\\n\\tat com.android.dx.command.dexer.Main.runMonoDex(Main.java:334)\\n\\tat com.android.dx.command.dexer.Main.run(Main.java:277)\\n\\tat com.android.dx.command.dexer.Main.main(Main.java:245)\\n\\tat com.android.dx.command.Main.main(Main.java:106)\\n\",\"tool\":\"Dex\"}\nSuggestions welcome...\n. Clean/rebuild did it. What a mess...\n. Simple enough: I had the retry count to 1 and the server did hung the request for > 30 secs. This seems to be a case you are not handling correctly. The server retries, but the counters are not reset before.\nEDIT: Is there a way to increase the timeout?\n. ",
    "asafbennatan": "would it be possible to expose file name field charset in-order for it to be set?\n(in future versions)\n. ok its done (took a while for it to compile under android studio...)\nhere is my updated repository https://github.com/asafbennatan/android-upload-service\nhow do we merge it ?\n. done\n. Cool Thanks!\n2016-02-10 22:43 GMT+02:00 Alex Gotev notifications@github.com:\n\n@asafbennatan https://github.com/asafbennatan 2.0.1 just released.\nUpdate your dependencies and you will be able to set UTF 8 Charset in your\nrequests [image: :smiley:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gotev/android-upload-service/issues/82#issuecomment-182575586\n.\n. Hi Alex,\ni did not read anything about what the RFC says in that situation,\ni just used it to solve my problem where the file name could not be\nrepresented by US-ASCII (only UTF-8, as the charset used by java is UTF-8) ,\nso if i think about it , it has nothing to do with the RFC because this was\nto prevent the problem of converting between charsets in which one string\nhas no valid representation( ie UTF-8 to US-ASCII)\n\n2016-01-26 10:11 GMT+02:00 Alex Gotev notifications@github.com:\n\nHi! Checked your code. Basically you have added the setting to encode the\nheader with a different charset. With which server-sides have you tested\nit? I'm not sure it's the correct way of implementing it, as the server\nneeds a way to detect which encoding has been used on the client-side. If\nyou can point me to some RFC or docs you have read on how to do that, it\nwill be helpful, as I want to keep the library as standard compliant as\npossible. Thank you!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gotev/android-upload-service/pull/85#issuecomment-174884487\n.\n. \n",
    "rohitPagare": "want to send header with hindi characters...\nbut when i do like this\nmultipartUploadRequest.addHeader(\"headline\", \"\u0936\u094d\u0930\u0940 \u0938\u093f\u0926\u094d\u0927\u093f\u0935\u093f\u0928\u093e\u092f\u0915\");\nit gives error\nHeader headline must be ASCII only! Read http://stackoverflow.com/a/4410331\nplease help me\n. ",
    "saharshtibrewal": "+1\n@gotev If you could give me some pointers on where best to make this change, I will try to implement the same and send you a pull request.\nThanks for the library.\n. ",
    "yaseenayahya": "yes sir.\n. ",
    "TechValensJava": "Hi,\nI have tried this with Tag 1.3.1 of your repository and its working with that on Jellybeans.\nSo I was wondering why it was not working with gradle dependency.\n. I had used 2.0 release and configured it as per direction and it works fine on kitkat ,Lolipop but it gives error in Jellybeans (my server sent Bad Request) but if I use 1.3.1 release it worked fine.\nFor 2.0 , I used below snippet\nnew MultipartUploadRequest(QueueService.this, String.valueOf(bean.getUploadID()), bean.getAction())\n                .addFileToUpload(bean.getLocalFilePath(), \"media\")\n                .addHeader(\"Authorization\", \"Token \" + SharedPref.getSharedPrefData(QueueService.this, SharedPref.PREFRENCE_KEY_TOKEN))\n                .addHeader(\"X-APP-ID\", WebServiceConstants.APP_ID)\n                .setNotificationConfig(new UploadNotificationConfig().setIcon(R.drawable.notification_icon).setTitle(\"VuNote shot upload\"))\n                .setMaxRetries(2)\n                .startUpload();\nAlso I have added the dependency and used NameSpace declaration in Application.\nFor 1.3.1, I have used below snippet\nUploadRequest request = new UploadRequest(QueueService.this,\n                String.valueOf(bean.getUploadID())\n                , bean.getAction());\n```\n    request.addHeader(\"Authorization\", \"Token \" + SharedPref.getSharedPrefData(QueueService.this, SharedPref.PREFRENCE_KEY_TOKEN));\n    request.addHeader(\"X-APP-ID\", WebServiceConstants.APP_ID);\n    request.addFileToUpload(bean.getLocalFilePath(), \"media\", System.currentTimeMillis() + \".mp4\", ContentType.APPLICATION_OCTET_STREAM);\nSystem.out.println(\"request of Upload img : \" + request.toString());\nrequest.setNotificationConfig(R.drawable.notification_icon, getString(R.string.app_name)+\" shot upload\",\n        \"Uploading...\", \"Upload completed\",\n        \"Upload Error\", false);\n\ntry {\n    UploadService.startUpload(request);\n\n}\n\n```\nI have added the service in manifest.\n. ",
    "meierjan": "I just doesn't work without the @aar for me. And as it is an android-library it should be an aar.\n\nThe main difference between a Jar and a AAR is that AARs include resources such as layouts, drawables etc. This makes it a lot easier to create self-contained visual components. For example if you have multiple apps that use the same login screen, with Jars you could share classes but not the layout, styles, etc., you still had to duplicate them. With AARs everything is bundled in one neat package.\nSource\n. \n",
    "rohannexialabs": "Hi, I also want to add session cookie in the request. I am using OkHttp client along with persistent storage to store the cookie. Below is the code - \n```\npersistentCookieStore = new PersistentCookieStore(ctx);\n        // Using OkHTTPClient for managing the cookies received from the server\n        OkHttpClient client = new OkHttpClient();\n        client.setCookieHandler(new CookieManager(\n                persistentCookieStore,\n                CookiePolicy.ACCEPT_ALL));\n    // Forcing Volley to use OkHttpClient instead of OkHttp\n    mRequestQueue = Volley.newRequestQueue(ctx, new OkHttpStack(client));\n\n```\nHow should I send session cookies in this scenario?\n. Hi, thanks for quick reply. I have tried solution 1st and tried to get the session id and add it to the headers but somehow server isn't picking it. Can you please take a look -\nString uploadId =\n                    new MultipartUploadRequest(context, TransportConstants.URL_FILE)\n                            .addFileToUpload(uri.getPath(), \"myfile\")\n                            .addParameter(\"tdir\", current_path)\n                            .setMethod(\"POST\")\n                            .addHeader(\"webpy_session_id\", sessionId)\n                            .setNotificationConfig(new UploadNotificationConfig())\n                            .setMaxRetries(2)\n                            .startUpload();\nThe name of the cookie is webpy_session_id and the session Id is correct but still I am getting authentication error. Is there something else I should do?\n. Thanks for the prompt reply, I have used the code suggested by you but still the authentication issue persists.\n. Ok will try, thanks for response again.\n. Your suggestion of using Wireshark was marvelous. Turns out that I was sending wrong session Id, its working fine now. Thanks for quick support and awesome library.\n. Will be glad to return the favor, might even help me in future :D\nString uploadId =\n                    new MultipartUploadRequest(context, \"api url\")\n                            .addFileToUpload(\"path to file\", \"parameter name\")\n                            .addParameter(\"addtional parameter name\", \"value\")\n                            .addHeader(\"Cookie\", \"cookie name=\" + sessionId)\n                            .setNotificationConfig(new UploadNotificationConfig())\n                            .setMaxRetries(2)\n                            .startUpload();\n. Ok sure, but this will vary for different user since the implementation might be a bit different.  I am using PersistentCookieStore by Fran Montiel (https://gist.github.com/franmontiel/ed12a2295566b7076161). To get the cookie information I created a function in my network singleton class where I have used PersistentCookieStore -  \npublic String getSessionCookie() {\n        if (persistentCookieStore != null) {\n            for (final HttpCookie cookie : persistentCookieStore.getCookies()) {\n                if (cookie.getName().equalsIgnoreCase(Constants.SESSION_COOKIE_NAME)) {\n                    return cookie.getValue();\n                }\n            }\n        }\n        return null;\n    }\nI called the function from the Activity where I am using your repository and got the session token. I have already posted how I am then using it further. Reply back if you need more.\n. @gotev Thanks for the message and build, will try the new release and let you know.\n. ",
    "elemprod": "Hi Alex,\nThank you very much for the feedback!   This helped solve my issue.\n-Ben\n\nOn Feb 12, 2016, at 12:01 PM, Alex Gotev notifications@github.com wrote:\nHi!\nAndroid Upload Service uses Android's native HttpUrlConnection to perform requests. To use cookies, all you have to do is place the following two lines:\nCookieManager cookieManager = new CookieManager();\nCookieHandler.setDefault(cookieManager);\nsomewhere before any of your network requests. I would put that into the Application subclass. This way cookie management should be done automatically for you and you don't have to set them manually in the requests. Check the official documentation http://developer.android.com/reference/java/net/HttpURLConnection.html (Sessions with cookies paragraph). Try and let me know.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/gotev/android-upload-service/issues/94#issuecomment-183451266.\n. \n",
    "younas-bangash": "My server is reachable and i recheck again the setup everything is fine suppose i have 5 parameter to send to server i.e Key pair values i am not able to send and also i not able to send file using example project also\n. compileSdkVersion 23\nminSdkVersion 10\ntargetSdkVersion 23\nMultipartUploadRequest req = new MultipartUploadRequest(this,\"https://abc.ae/phpfiles/progress_file_upload.php\")\n                        .addFileToUpload(''/storage/sdcard0/Download/video.mp4\", \"uploaded_file\")\n                        .setNotificationConfig(getNotificationConfig(filename))\n                        .setCustomUserAgent(USER_AGENT)\n                        .setAutoDeleteFilesAfterSuccessfulUpload(autoDeleteUploadedFiles.isChecked())\n                        .setUsesFixedLengthStreamingMode(fixedLengthStreamingMode.isChecked())\n                        .setMaxRetries(2);\n//progress_file_upload.php\n/*\n//i am not able to add below parameters\n$EventID=$_REQUEST[\"EventID\"]; \n$Image=$_REQUEST[\"Image\"];\n*/\n if ($_FILES[\"uploaded_file\"][\"error\"] > 0) {\n        echo \"Error: \" . $_FILES[\"uploaded_file\"][\"error\"] . \"<br>\";\n    } else {\n        echo \"Upload: \" . $_FILES[\"uploaded_file\"][\"name\"] . \"<br>\";\n        echo \"Type: \" . $_FILES[\"uploaded_file\"][\"type\"] . \"<br>\";\n        echo \"Size: \" . ($_FILES[\"uploaded_file\"][\"size\"] / 1024) . \" kB<br>\";\n        echo \"Stored in: \" . $_FILES[\"uploaded_file\"][\"tmp_name\"];\n    }\n. we have self signed SSL certificates I hope and wish you include the log in that good library but actually nothing help \n. I use other tools and it upload successfully but not uploading from your library it show message Error in Uploading file now \n. The url i provide is the test url i cant provide you the actual url due to my company security reason\n. Thanks dear i solve the problem really thanks for your help \n. I am really apologize the error was from my side thanks again wish you best of luck\n. ",
    "K-7": "The behaviour I observed is as follow -\n1. I trigger the upload service, the upload starts and upload notification proceeds\n2. I swipe out the App, the upload notification freezes. The service is mostly killed or pasued (not sure)\n3. I reopen the app and trigger the upload service, the upload happens smoothly\n4. As I had written a CONNECTIVITY_SERVICE for my App I could figure out that when the upload service gets freezon on swipping out the App, and I try to turn off and on my WiFi, using CONNECTIVITY_SERVICE I could triggered the upload service and upload worked fine though the App was closed\n5. Only issue Iam facing now is the moment the App is swipped out the Upload service gets frozen\nI tried it out in Android 5.1 and Android 6.0 both the cases I am facing the same isssue\n. Thank you, let me figure out what best I can do.\n. ",
    "makunomark": "Yes, Ill provide a minimal implementation shortly\n. The server side code is sort of proprietary, if I could explain how it works I believe we could have it worked out. I have never seen how its implemented but I believe its in Java. And it sends response if the file fails to upload. Like the way you receive a response on successful upload, the server responds when the file is not successfully uploaded, for instance with a status code 401.\n. @gotev thankyou so much. It works :+1: \n. ",
    "milaptank": "Hey @gotev Your work helps me a lot thank you so much :+1:  :100: % working \nI want this and i got it \njava\n@Override\npublic void onCompleted(int serverResponseCode, byte[] serverResponseBody) {\n    JSONObject response = new JSONObject(new String(serverResponseBody, \"UTF-8\"));\n}\n. ",
    "C130187": "I am not able to see any result of my implementation in the onCompleted()..I have followed exactly what is said here..I dont see any toast or anything printed in the debugger as well..please help. ",
    "danielprad0": "i've tried as well the code, but can't make it work, i can't see a toast, or alert when there's an error uploading the file. some help please!. Once everthing's done you have to call the method uploadMultipart right but what parameters do i have to use ? . I have a question if want to implement the \"Global Broadcast receiver\" there are two things i have to set up  the receiver in the manifest and the class, and thats it?  . ",
    "rushikeshruda": "oncompleted is not getting executed after the upload is completed plzz help... ",
    "kevinmeresse": "@gotev I totally agree! I thought it was a good first step to have at least the Location in case of redirects, but since you mention it, returning all the headers is way better :-) I'll commit an update today.\n. ",
    "quantum0813": "Thanks for your quick reply. I have updated my app to use the OkHttp stack implementation. I'll do some more testing, and report back.\n. ",
    "moraisholanda": "I can not download upload-service-ftp to compile 'net.gotev:uploadservice-ftp:2.2'\n. @gotev  I understand, I would love to be able to use, including setting was at that time the server for testing. Do you have any prediction?\n. thank you, I'll wait.\n. Hello, all right, I'm not able to use the UploadServiceBroadcastReceiver in a service. I'm using as instructed:\nIf you use it in a {@link android.app.Service}, you have to\n      * Call this method inside {@link android.app.Service # onCreate ()}, after {@code super.onCreate ();}.\n  @Override\n     public void onCreate () {\n         super.onCreate ();\n         uploadReceiver.register (this);\n     }\n. ",
    "hendrawd": "i changed\njava\ncompile 'net.gotev:uploadservice:2.1@aar'\ncompile 'net.gotev:uploadservice-okhttp:2.1@aar'\nto\njava\ncompile 'net.gotev:uploadservice:2.1'\ncompile 'net.gotev:uploadservice-okhttp:2.1'\nand the problem gone\n. Actually it is not only happens on OkHttpStack only. When i use the default stack(HurlStack), the problem still exist. Now i can't authenticate to server using HTTP header\n. Actually my approach for auth is not using username and password, but using auth token, so i don't think .setBasicAuth(\"username\", \"password\"); will work.\nI tried\nCookieManager cookieManager = new CookieManager();\nCookieHandler.setDefault(cookieManager);\nbut that didn't worked too. I don't know, maybe it is because of i used volley with OkHttp3Stack?\nUsually i just set the cookie directly to the header for authentication.\n. 1. yes\n2. i set the cookie for authentication on getHeaders() method of volley's request\n3. yes\n4. yes\n5. yes\n. Yes i though of that too, thank you for your response @gotev. So i decided to use HurlStack instead of OkHttpStack\n. Oh i will try it with one request. Looks like i missed this feature, thanks alot\n. @gotev by add multiple files here, did you mean we must specify each file's parameter name here? \nLike this:\nmultipartUploadRequest.addFileToUpload(path1, \"file1\")\n.addFileToUpload(path2, \"file2\")\n.addFileToUpload(path3, \"file3\");\nBecause the files count to send to server is not fix, so i think it's not possible to use that style.\nCurrently server only get 1 parameter name, that is \"file\". \n. I tried with first case, but it doesn't give me that behaviour. Behaviour here i mean it will show the number of files instead of just uploading info.\nHere is my code to upload to the server. And server is successfully accepted the files.\n```\nUploadNotificationConfig uploadNotificationConfig = new UploadNotificationConfig()\n.setClickIntent(someIntent)\n.setClearOnAction(true)\n.setRingToneEnabled(false);\nfinal MultipartUploadRequest multipartUploadRequest = new MultipartUploadRequest(this, url)\n.addFileToUpload(\"some path1\", \"upload[]\")\n.addFileToUpload(\"some path2\", \"upload[]\")\n.setNotificationConfig(uploadNotificationConfig)\n.setMaxRetries(2);\n``\n. Oh i see, looks like i should implement the number manually. Do you think you can add this feature for future update?\n. how to use this placeholder?\n. May i ask why do you need that task list? So maybe we can make a workaround here.\n. Currently there are no task list, but insteadprivate static final Map uploadTasksMap = new ConcurrentHashMap<>();` that can't be accessed directly outside of UploadService. If you want to just stop the upload task(s), there are already exist methods to do that.\n. Can you show full code of your service and the method that you used to start your service?\n. Yes, i have tested it myself and it works\n. Yeay! Thank you for the update Alex :)\n. Actually it's already parallel if you start multiple upload requests at once\n. @patelanil2007 As @gotev mentioned before, have you checked the wiki? Maybe your phone have only a single core or you run on simulator?\n. This happens to HurlStack too, and the file uploaded sometimes twice or triple which is same file, but actually i just want only upload once. I wonder if setMaxRetries to 0 will help? It will be better error that upload multiple same files at once.\n. @gotev Actually it is not me who maintained code on server, so i don't know exactly how the server will handle, but the first upload is not partially uploaded file. All the same files uploaded fully to server.\n. For protocol that doesn't support resume, i think if we can support cancel button to the notification configuration, it will better.\n. @gotev yes, i could try\n. It's ok for marshal and un-marshal PendingIntent, but i think it is better if we can add more than 1 actions there, so i work on List instead of just 1 PendingIntent. I have tried with more than 1 action, and 3 is the best(visible). What do you think?\n. @VSG24 Do you want to use setter and getter for message?. 36\n. any number still not working\n. The connection is not dropped at some point. And i upload multiple files at once with 1 parameter, like this\nfor (String mCurrentPhotoPath : mCurrentPhotoPathList) {\n    Uri uriToUpload = Uri.parse(mCurrentPhotoPath);\n    multipartUploadRequest.addFileToUpload(uriToUpload.getPath(), \"upload[]\");\n}\n. @gotev oh i see. I will check ftp upload later then. Thanks\n. #179 \n. If there anything that i can improve, let me know\n. Hi @gotev, since error and success notification re-use the same notification as the progress notification, and there is no way to remove action from a notification, the action button will still persist even we don't want that behavior. Currently i disable success and fail notification and make my own notification when success or failed, because i make \"Cancel Upload\" action button to the progress notification, and i don't want that action button still persist on success/failed notification.. @gotev Yes i agree with you. We should differentiate each notification first(progress, success and failed) to make the function works.. Oh yes, i forgot that i do upload with different ip address on phone. I feel stupid atm, lol. Thanks @gotev \n. @gotev yes, i will\n. @gotev sorry i was on vacation last week, i will test it and let you know\n. @gotev i have tested on the sample project and it's now working fine\n. Here is the snippet of the code that i use for FTPUpload\n```\nprotected void doUploadFTP() {\n    final String serverUrlString = \"192.168.2.1\";\nFTPUploadRequest request = new FTPUploadRequest(this, serverUrlString, 21)\n        .setUsernameAndPassword(\"user\", \"password\")\n        .setMaxRetries(4)\n        .setNotificationConfig(getNotificationConfig(\"File upload\"))\n        .useCompressedFileTransferMode(true)\n        .setAutoDeleteFilesAfterSuccessfulUpload(false);\n\nfor (String mCurrentPhotoPath : mCurrentPhotoPaths) {\n    try {\n        Uri uriToUpload = Uri.parse(mCurrentPhotoPath);\n        request.addFileToUpload(uriToUpload.getPath(), \"/dir/subdir/\");\n    } catch (FileNotFoundException exc) {\n    } catch (IllegalArgumentException exc) {\n    }\n}\n\ntry {\n    request.startUpload();\n} catch (MalformedURLException e) {\n    e.printStackTrace();\n}\n\n}\n```\nAs you can see, i always re-create the request everytime i want to upload, so it is not because of re-useable request.\n. @gotev Yes, you are right. Looks like i forgot include mCurrentPhotoPaths.clear(); when changing MultipartUploadRequest to FTPUploadRequest\n. This related to https://github.com/gotev/android-upload-service/blob/master/uploadservice/src/main/java/net/gotev/uploadservice/UploadTask.java#L329\n. I have tested on sample project and it's working fine :)\n. Maybe 1 more field on UploadInfo? Like UploadInfo.fileName?. @Habibah28 If you read the wiki, there is already a documentation about how to achieve that\nbehavior\n. getReceiverContext(); method doesn't exist. What do you want to achieve with that context?\n. I think you can't do that with the current receiver, because some of the fields has private and protected access.\nSolution from me, you can copy the current library and import it as a project library and edit UploadServiceBroadcastReceiver.java directly, so you can get the context.\nMaybe @gotev can provide a better solution.\n. @gotev But, as i said before, some of the fields has private and protected access dependencies to other classes. We can't  just copy the contents of UploadServiceBroadcastReceiver.java\nAnd as you mention about long running operation on BroadcastReceiver, yes i agree it is not a best practice, because it can be killed anytime and the process running on foreground too.\nMore about it can be found at https://developer.android.com/reference/android/content/BroadcastReceiver.html on Process Lifecycle section\n. @gotev This is what i mean by we can't just copy paste directly the receiver\n\n. Not yet. The upload will fail immediately if the connection is interupted\n. Do you think it is a good solution?\nIf i as a user actually want to upload the same file multiple times with different parameters it will fail.\nExample case if i develop photo sharing application that use your library,\n\u261e User have a photo\n\u261e User upload it with parameter user_id = 1\n\u261e User upload the same photo with parameter user_id = 2 right away\n\u261e The second upload will fail even if user upload it intentionally. Yes, actually that is what i did in my code. I always create new MultipartUploadRequest object every time. But if the file path is same, notification will be re-used. @gotev is the request same with my example?\nMake sure you set the upload id here\nnew MultipartUploadRequest(this, mCurrentPhotoPath, url). There is a reason why i set the ID directly. I can't get the ID directly from MultipartUploadRequest until i call multipartUploadRequest.startUpload();. But i need the ID when setting up MultipartUploadRequest to be used as a canceller, because user can cancel the upload anytime. I suppose i need to generate unique ID by myself to achieve it.. Yes, i know. Sorry i wasn't really clear from my last post. I edited your library to use notification action button #181  because of my requirement. The button just simply a cancel action. \nI can create NotificationAction by:\njava\nNotificationAction actionCancel = new NotificationAction(R.drawable.ic_close, getString(R.string.notification_active_action_cancel_upload), UploadCanceller.getPendingIntent(this, uploadId));\nThen i set it to NotificationConfig\njava\nprivate UploadNotificationConfig getNotificationConfig(String uploadId) {\n    return new UploadNotificationConfig().addAction(actionCancel);//i set other configs too\n}\nThen i set it to MultipartUploadRequest\njava\nmultipartUploadRequest.setNotificationConfig(getNotificationConfig(mCurrentPhotoPath));\nI can't get the id before i call\njava\nString idNeeded = multipartUploadRequest.startUpload();\nBut i must set the canceller with ID before call startUpload, that's why i create the ID directly. I will check it. i can't test it yet, but i will re-open this issue next time if it re-occured. @Hardik-mehta you can add as many parameters as you want\njava\nnew MultipartUploadRequest(context, \"http://upload.server.com/path\")\n    .addParameter(\"jsonParameterName\", jsonString1)\n    .addParameter(\"jsonParameterName2\", jsonString2)\n    .addParameter(\"jsonParameterName3\", jsonString3)\n    .startUpload();. I implemented it because i look at https://github.com/gotev/android-upload-service/blob/master/uploadservice/src/main/java/net/gotev/uploadservice/UploadNotificationConfig.java#L225\nWe broadcast PendingIntent if only the clickIntent is null. If not null, it will still open an Activity, because at the end of the method we return PendingIntent.getActivity(context, 1, clickIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n. Ok then, i will revert this one\n. ",
    "vanloc0301": "My phone using Wifi to upload.\nI upload array file but don't have any file in server.\nI try with code to upload only a file(this working):\n```\nfinal String paramNameString = \"uploaded_file\";\nfinal String pathCurrentFileName = recorder.getFileName();\nfinal String filesToUploadString = getFilename(pathCurrentFileName.toString().replaceAll(\"\\s+\", \"_\"));\ntry {\n    MultipartUploadRequest stun = new MultipartUploadRequest(this, serverUrlString)\n            .addFileToUpload(pathCurrentFileName.replaceAll(\"\\s+\",\"_\"), paramNameString)\n            .setCustomUserAgent(USER_AGENT)\n            .setAutoDeleteFilesAfterSuccessfulUpload(false)\n            .setUsesFixedLengthStreamingMode(true)\n            .setMaxRetries(2);\n    String uploadCurrentFile = stun.startUpload();\n    if (uploadCurrentFile != null) {\n}\ndao.deleteCallWhenUploadSuccess(filesToUploadString);\n\n} catch (MalformedURLException exc) {\n    showToast(exc.getMessage());\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n}\n```\nBut I go to upload multiple files, the exception occurs.\nBefore, I am working(in current my device tested).\n. This is all information:\n- Android 4.4.4 API 19.\n- Http Stack? I don't know about this. I only using your library and try to upload a file to the server.\n- Android Upload Service version: net.gotev:uploadservice: 2.0.1 not net.gotev:uploadservice:okhttp 2.1.\nI trying update to uploadservice:2.1 and using Logger.setLogLevel(LogLevel.DEBUG); to using Log.\nWaiting for minutes. Thanks. \n. I updated to uploadservice:2.1.\nI change my code to:\n```\npublic void MultipartUploadFileAudioRecord(final Context context) {\n    final String serverUrlString = \"http://\" + serverURL + \"/main.php?nm=appandroid&app_id=android\";\n    final String paramNameString = \"uploaded_file\";\npathRootLapsoft = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + \"/GoLink-CRM/\");\nfileListWasAdded = getFileFromDirectory(pathRootLapsoft);\n\n\nif(fileListWasAdded.isEmpty())\n    listView.setAdapter(null);\n\nfor(File filePathName : fileListWasAdded)\ntry {\n    try {\n        Thread.sleep(200);                 //200 milliseconds is one second.\n    } catch(InterruptedException ex) {\n        Thread.currentThread().interrupt();\n    }\n    String filename = getFilename(filePathName.getPath()).replaceAll(\"\\\\s+\",\"_\");\n    String uploadId =\n            new MultipartUploadRequest(context, serverUrlString)\n                    .addFileToUpload(filePathName.getPath().replaceAll(\"\\\\s+\", \"_\"), paramNameString)\n                    .setNotificationConfig(new UploadNotificationConfig())\n                    .setMaxRetries(2)\n                    .startUpload();\n    dao.deleteCallWhenUploadSuccess(filename);\n} catch (Exception exc) {\n    Log.e(\"AndroidUploadService\", exc.getMessage(), exc);\n}\n\n}\n```\nIt has an error like:\nA/PowerManager: WakeLock finalized while still held: UploadService\nIt doesn't throw many exception, and you can see this is all log in the logcat, \nstill error Error in uploadId 9c719e03-63f2-4a88-a207-8280849afdf2 on attempt 1. Waiting 1s before next attempt. unexpected end of stream:\n```\nD/UploadService: HttpUploadRequest - null or empty upload ID. Generating it\nD/UploadService: HttpUploadRequest - Created new upload request to http://example.net/main.php?nm=appandroid&app_id=android&uid=android with ID: a1afcdf6-4372-4fd5-9b84-590fdbafc4c3\nD/UploadService: UploadFile - Detected MIME type for /storage/emulated/0/GoLink-CRM/01643653367_2016-04-22_09.11.51.mp4 is: null\nD/UploadService: UploadFile - Using original file name: null\nI/UploadService: UploadService - Starting service with namespace: net.gotev.uploadservice, upload pool size: 4, 1s idle thread keep alive time. Foreground execution is enabled\nD/UploadService: UploadService - Successfully created new task with class: net.gotev.uploadservice.MultipartUploadTask\nD/UploadService: UploadService - a1afcdf6-4372-4fd5-9b84-590fdbafc4c3 now holds the foreground notification\nD/UploadService: HttpUploadTask - Starting upload task with ID a1afcdf6-4372-4fd5-9b84-590fdbafc4c3\nD/UploadService: HurlStackConnection - creating new connection\nD/libc: [NET] getaddrinfo+,hn 25(0x76696574706861),sn(),family 0,flags 4\nD/libc: [NET] getaddrinfo-,err=8\nD/libc: [NET] getaddrinfo+,hn 25(0x76696574706861),sn(),family 0,flags 1024\nD/libc: [NET] getaddrinfo-, 1\nD/libc: [NET] getaddrinfo_proxy+\nD/libc: [NET] getaddrinfo_proxy-, success\nD/UploadService: HurlStackConnection - closing connection\nI/UploadService: HttpUploadTask - Error in uploadId 9c719e03-63f2-4a88-a207-8280849afdf2 on attempt 1. Waiting 1s before next attempt. unexpected end of stream\nD/UploadService: HttpUploadTask - Server responded with HTTP 200 to upload with ID: a1afcdf6-4372-4fd5-9b84-590fdbafc4c3\nD/UploadService: HttpUploadTask - Broadcasting upload completed for a1afcdf6-4372-4fd5-9b84-590fdbafc4c3\nD/RingtoneManager: getActualDefaultRingtoneUri(context, 2)\nD/UploadService: UploadService - a1afcdf6-4372-4fd5-9b84-590fdbafc4c3 now un-holded the foreground notification\nD/UploadService: HttpUploadTask - Broadcasting upload progress for ea40eeea-398d-4a71-a0e2-ab5b274eeb5d Uploaded bytes: 173 out of 14153\nD/UploadService: HurlStackConnection - closing connection\nD/libc: [NET] getaddrinfo+,hn 29(0x7777772e766965),sn(),family 0,flags 4\nD/libc: [NET] getaddrinfo-,err=8\nD/libc: [NET] getaddrinfo+,hn 29(0x7777772e766965),sn(),family 0,flags 1024\nD/libc: [NET] getaddrinfo-, 1\nD/libc: [NET] getaddrinfo_proxy+\nD/libc: [NET] getaddrinfo_proxy-, success\n```\n. Tomorrow, I will test on my local server.\nI will update my question.\nThank you very much. You are awesome. \n. Thanks pro.\nI remove this line:\n`replaceAll(\"\\s+\", \"_\") and this working.\nI also have problem when try delete file after upload success.\nI tried with code:\n```\npublic void MultipartUploadFileAudioRecord() {\n    final String serverUrlString = \"http://\" + serverURL + \"/main.php?nm=appandroid&uid=android\";\n    final String paramNameString = \"uploaded_file\";\npathRootLapsoft = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + \"/Lapsoft-CRM/\");\nfileListWasAdded = getFileFromDirectory(pathRootLapsoft);\n\n\nif(fileListWasAdded.isEmpty())\n    listView.setAdapter(null);\n\nfor(File filePathName : fileListWasAdded)\ntry {\n    try {\n        Thread.sleep(200);                 //1000 milliseconds is one second.\n    } catch(InterruptedException ex) {\n        Thread.currentThread().interrupt();\n    }\n    String filename = getFilename(filePathName.getPath()).replaceAll(\"\\\\s+\",\"_\");\n    MultipartUploadRequest uploadRequest  = new MultipartUploadRequest(this, serverUrlString)\n                    .addFileToUpload(filePathName.getAbsolutePath(), paramNameString)\n                    .setMaxRetries(2);\n    String uploadCurrentFile = uploadRequest.startUpload();\n    if (uploadCurrentFile != null && sendToServer()) {\n        uploadRequest.setAutoDeleteFilesAfterSuccessfulUpload(true);\n    }\n    else uploadRequest.setAutoDeleteFilesAfterSuccessfulUpload(false);\n  } catch (Exception exc) {\n    Log.e(\"AndroidUploadService\", exc.getMessage(), exc);\n}\n\n}\n```\nI checked sendToServer return values = true.\nI don't know class setAutoDeleteFilesAfterSuccessfulUpload working after I uploaded?\n```\npublic String getTextFromInputStream(InputStream is) {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n    StringBuilder stringBuilder = new StringBuilder();\nString currentLine;\ntry {\n    while ((currentLine = reader.readLine()) != null) {\n        stringBuilder.append(currentLine);\n        stringBuilder.append(\"\\n\");\n    }\n} catch (IOException e) {\n    e.printStackTrace();\n}\n\nreturn stringBuilder.toString().trim();\n\n}\npublic boolean sendToServer() throws IOException {\n    final String scripturlstring = \"http://\" + serverURL + \"/main.php?nm=loc_demo&tp=0&cmd=cmd2&app_id=android&uid=android\";\n    URL scripturl = new URL(scripturlstring);\n    HttpURLConnection connection = (HttpURLConnection) scripturl.openConnection();\nInputStream answerInputStream = connection.getInputStream();\nfinal String answer = getTextFromInputStream(answerInputStream);\n\nif (answer.equals(\"deleted\")) return true;\nelse return false;\n\n}\n``\n. Thanks, @gotev . I usingfilePathName.delete();` and this working.\n. ",
    "dht": "Thank you! works like a charm. Probably missed it before.\n. Thank you, you've pointed me to the right direction. I appreciate your kind attention.\n. ",
    "emanzanoaxa": "I couldn't figure out why the Authorization headers are not being set by the interceptors, but I set the headers manually from the BinaryUploadRequest builder and is working. \nNow I have another problem, I am launching several services to upload up to 10 images in parallel and only the first one is being uploaded correctly, the weird thing is the upload services responds with a 200 response code. It can be a race condition issue?\nI've forked your repository to try to add multiple binary uploads in the same service but I don't know if it's possible with the current implementation or it will require a lot of code refactoring.\n. ",
    "mandrachek": "Such a shame, because otherwise this looks like a great library.\nNot having interceptors means stetho doesn't work.  And if you're doing something more complicated like bearer token authentication, it's pretty much a non-starter.\n. ",
    "rlazar": "+1 interceptors are needed.\n. ",
    "pawankumar01": "In my scenario, I need to make other server call on completion of request which I need to unnecessary put the code in activity and initiate the request again from activity.  It would be much better If we can initiate request from callback without touching activity.\nHow about taking the callback(onSuccess and onError) as a parameter and if it's not null, trigger that callback as well as broadcaster. We can map each callback with uploadId respectively to trigger correct callback.\nThis way we will be able to use both as required.\n. @gotev correct I was thinking something like setDelegate(). Your provided examples are clear :) \nThe problem with single entry Receiver would be that for every upload we need to keep track from where this upload request was initiated so that give handle back. Callback will solve that implicitly.\nAs you stated one option can be create a separate class and have static map in that and call as required or may be having BroadcasterReceiver registered within library itself, which will calls delegate method.\nThe other could be if we set the callback Map in UploadService \n(http://stackoverflow.com/questions/14710765/passing-parameter-from-an-activity-to-a-thread-in-a-service) and update the service  and service calls relative delegate method. \nNot sure, if they are the best solution.\n. @gotev Great! thanks for such a quick implementation. Its almost working. However I observed that when the file is successfully uploaded with http response code 200 then onCompleted is not getting called. \nFor other http response codes onCompleted is getting called and onError also looks to be working fine.\n. I am using the following code and uploading the file to Amazon S3.\n```\nString uploadId =\n                    new MultipartUploadRequest(App.context, url2)\n                            .addFileToUpload(file.getAbsolutePath(), \"ql\")\n                            .setNotificationConfig(new UploadNotificationConfig())\n                            .setMaxRetries(2)\n                            .setMethod(\"PUT\")\n                            .setDelegate(new UploadStatusDelegate() {\n                                @Override\n                                public void onProgress(UploadInfo uploadInfo) {\n                            }\n\n                            @Override\n                            public void onError(UploadInfo uploadInfo, Exception exception) {\n                                Console.log(\"Upload failed\");\n\n                            }\n\n                            @Override\n                            public void onCompleted(UploadInfo uploadInfo, ServerResponse serverResponse) {\n                                System.out.print(\"successful\" + serverResponse);\n                                if (serverResponse.getHttpCode() == 200)\n                                    RestClient.notifyServerFileUploaded(file, obj);\n                                else {\n                                    Console.log(\"Something went wrong\" + serverResponse.getBodyAsString());\n                                }\n\n                            }\n\n                            @Override\n                            public void onCancelled(UploadInfo uploadInfo) {\n\n                            }\n                        })\n                        .startUpload();\n\n    } catch (Exception exc) {\n        Log.e(\"AndroidUploadService\", exc.getMessage(), exc);\n    }\n\n``\n. Now I am not able to reproduce the issue.  Now its printed properly with bothLog.iandSystem.out.print`. \nI am launching the Upload from Fragment and app is running in the foreground. \nWill let you know if I see the issue again. Thanks a lot!\n. ",
    "herry-trium": "Hello @gotev \nI am trying this solution since very long. But when i clear my app from from recent apps/memory, i loose contact with my service and delegate methods as well. Please help.. Okay, thanks!. ",
    "gaurnagchauhan": "thanks sir. I will check this code and inform you it is working or not.\n. now i successfully upload files in google drive. But now i facing new issue to upload files in oneDrive. Its give me 405 method not allowed.\n. just tell me how to see network traffic by setting log level\n. setting HttpLoggingInterceptor to okhttp client will not work?\n. i try to upload files in onedrive with the help of BinaryUploadRequest. I remove header \"Authorization\" then also BinaryUploadRequest make call and gives me 400, {\"error\":{\"code\":\"invalidRequest\",\"message\":\"Invalid Content-Range header value\"}}\n. I can upload files with me help of okHttp. https://dev.onedrive.com/items/upload_large_files.htm#upload-fragments\n. can i set my range header on BinaryUploadRequest? and if yes then how?\n. dose i set my Content range on binaryUploadRequest?\n. ",
    "SilvaEngComp": "Hi! I'm trying upload a simple user resister with image user. This is my cod:\ntry{\n        String upload = UUID.randomUUID().toString();\n        new MultipartUploadRequest(context,upload,wd.getUrl())\n\n//                    .addFileToUpload(wd.getImgUrl(), \"foto\")\n                    .addParameter(\"nome\", wd.getNome())\n                    .addParameter(\"email\", wd.getEmail())\n                    .addParameter(\"senha\", wd.getSenha())\n                    .addParameter(\"data\", wd.getData())\n                    .addParameter(\"cpf\", wd.getCpf())\n                    .addParameter(\"op\", wd.getOperation())\n                    .addParameter(\"token\", wd.getToken())\n                    .setMethod(\"POST\")\n                    .setUtf8Charset()\n                    .setNotificationConfig(new UploadNotificationConfig())\n                    .setMaxRetries(2)\n                    .startUpload();\n        }catch(Exception e){\n    }\n\nI'm inicializating:\nimport net.gotev.uploadservice.BuildConfig;\nimport net.gotev.uploadservice.UploadService;\npublic class Initializer extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        // setup the broadcast action namespace string which will\n        // be used to notify upload status.\n        // Gradle automatically generates proper variable as below.\n        UploadService.NAMESPACE = BuildConfig.APPLICATION_ID;\n        // Or, you can define it manually.\n//        UploadService.NAMESPACE = \"com.yourcompany.yourapp\";\n    }\n}\nSo! My phone show upload is done, but my php server not receive that. Someone can to hep me?. ",
    "moosabaloch": "Wait lemme try\ni have to install npm then...\n. Thanks Bro its working....\n. i am checking my PHP server...\n. @gotev Can you please guide me what the problem is  occurring and where to debug...?\ni have tested my PHP server its working perfect from POSTMAN but not from android app.\nand the android app is working perfectly with Node.js server.\n. ",
    "omryros": "the server is on production and is active at all times so he works for sure, any other ideas maybe? i would be so damn grateful :/ i cant find any library that can send this request for some reason\n. the only difference seems to be that one is binary and the other is not and that the one which isnt binary has a name field for the file\n.   String uploadId =\n                        new MultipartUploadRequest(context, serverURL)\n                                .addFileToUpload(file.getAbsolutePath(),\"name\")\n                                .setNotificationConfig(new UploadNotificationConfig())\n                                .setMaxRetries(2)\n                                .startUpload();\nString uploadId =\n                        new BinaryUploadRequest(context, serverURL)\n                        .setFileToUpload(file.getAbsolutePath())\n                        .setNotificationConfig(new UploadNotificationConfig())\n                        .setMaxRetries(2)\n                        .startUpload();\n. the multipart is being recieved as a text file, when i checked Postman app and sent with binary file it worked, but for some reason i cant get it to work from my app\n. ",
    "kinsleykajiva": "when is 3.0 coming...\n. ",
    "stephentuso": "Files may not be the best for all cases. For example, media received from the gallery/camera is in the form of Android content Uris. From everything I've read, it doesn't seem guaranteed that you can get a file path from a content Uri. It is, however, easy to get an InputStream with context.getContentResolver().openInputStream(uri). Supporting Uris would definitely simplify things for an app I am developing right now.\n. Thanks, I didn't notice that, I removed the context parameter from all of the UploadTask classes.\n. @gotev I cleaned up UploadFile some, I put the operations performed on File and Uri into separate classes. This would also make it easier to support some other type of file path in the future, even though that probably won't be necessary.\n. @gotev After doing some research, it looks like exit code 137 in the travis builds means that host killed the process, probably due to high memory usage. See here. Notice how commit 372eaca above (\"Add UploadFileHandler...\") succeeded, and the next commit failed (\"Improve javadoc comments\"), which only changed some comments.\n. Well that passed, but who knows, maybe I got lucky... it seems like the error is random. I turned off the emulator and didn't run connectedCheck, which was unnecessary if I'm correct that there aren't any tests right now. That should have cut down on the memory usage. This might be an option if the emulator is needed later. However, if I'm right about this, looking at the build history it's interesting that this has only affected builds on master once.\n. Thanks! Ah, maybe I didn't look through the build history enough. Should I go ahead and revert travis.yml then? Or do you want to wait until tests are added?\n. @gotev Not that I remember, I'll revert it\n. ",
    "dominolog": "+1 to @stephentuso comment. Local Uri can be opened as InputStream and the entire Android content model is based on Uri. In most cases the library is used for transferring local files obtained as Uris from ContentResolver.\n. ",
    "LinkedHK": "Thank you for your references.\nI've checked the source the retry count doesn't reset(e.g set 0) upon the upload progress (upload resume). is it correct and it's being set 0 only in the run method? Im' sorry if my logic is wrong or I missed something I just believe the retry counter should be set zero when upload has some progress. otherwise it's useless in the long unreliable network. I have had to implement the file uploader for  iOS and faced with similar problem.\n. @gotev Hi.thank  you for your detailed explanation.  I 've figured out in the code the way retry counter is incremented.but what I didn't know about that HTTP/Multipart does not support resuming uploads. I will not bother with the extending of the library as the project has been already delivered. \nClosing the issue.\n. ",
    "vervatovskis": "Seems to be complicated, to reproduce it, I have to move far from the router to reduce the signal. I cannot reproduce it in front of my pc with a plugged phone.\n. `public class PhotoUploadStatusReceiver extends UploadServiceBroadcastReceiver {\n```\nprivate static final String TAG = \"PhotoUploadStatus\";\nprivate Context mContext;\n@Override\npublic void onReceive(Context context, Intent intent) {\n    if (mContext == null){\n        mContext = context;\n    }\n    super.onReceive(context, intent);\n}\n@Override\npublic void onError(String uploadId, Exception exception) {\nupdateUploadStatus(uploadId);\n\n}\n@Override\npublic void onCompleted(String uploadId,\n                        int serverResponseCode,\n                        byte[] serverResponseBody) {\nclearUploadStatus(uploadId);\n\n}\nprivate void clearUploadStatus(String uploadId){\nIntent mServiceIntent = new Intent(mContext, DataService.class);\nmServiceIntent.putExtra(IntentConstant.TASK_ID, IntentConstant.CLEAR_UPLOAD_TASK_ID);\nmServiceIntent.putExtra(IntentConstant.UPLOAD_TASK_ID, uploadId);\nmContext.startService(mServiceIntent);\n\n}\nprivate void updateUploadStatus(String uploadId){\nIntent mServiceIntent = new Intent(mContext, DataService.class);\nmServiceIntent.putExtra(IntentConstant.TASK_ID, IntentConstant.UPDATE_UPLOAD_TASK_ID);\nmServiceIntent.putExtra(IntentConstant.UPLOAD_TASK_ID, uploadId);\nmContext.startService(mServiceIntent);\n\n}\n```\n}\n`\nHere my code.\nCould the onCompleted method be called when there is a network error?\n. I created a persistent Log file. The \"ERROR\" is just a tag.\nI tried 5 pictures upload, 3 succeeded and two failed (Same conditions poor/unstable network).\nlog4j.txt\n. Well, I confirm that I received all the errors broadcasts :) You can close the ticket please.\nAnd thanks for the log tip.\n. ",
    "NaikSoftware": "Please merge this. Current stable version not working on android 7+! Its  throws exception for Uri created with FileProvider or some others\n. @gotev I merged this PR in my fork https://github.com/NaikSoftware/android-upload-service\n(dependency 'com.github.NaikSoftware:android-upload-service:3.1.+) For success build on JitPack I deleted other modules from project. Its working fine in my project with ContentProvider Uri's.\n. ",
    "drstranges": "+1 It'll be nice to see the new version as soon as possible!\n. ",
    "hamsddxn": "but the only worry is muti files to upload in one upload notification,\nI tried this example\nmultipartUploadRequest.addFileToUpload(path1, \"file1\")\n.addFileToUpload(path2, \"file2\")\n.addFileToUpload(path3, \"file3\");\nbut only the last file is uploaded to the server\n. ",
    "knordbo": "@gotev do you have any thoughts on this?\n. Cheers for the comments @gotev ! I agree and applied those changes.\n. Support library is also a + dependency. I'd strongly recommend not using.. ",
    "saran2somu": "Thanks Alex Gotev . I have used addParameter() method for send the data . Thanks, its working good. \n. When I upload small size png image list, On completed called , but in large file onCompleted not called , I have using custom okhttpclient with HttpLoggingInterceptor option.\nLogging print the success response, but oncompleted not called . I have cross check with my server side image list uploaded successfully.\n . I'm using in my activity, request delegate.. ",
    "AngleV": "Yes you're right !!\nThank you \n. Strange thing is that this happens only sometimes and NOT always. As i all ready stated most of the times jpg files uploads normally. \nCode i am using to upload is the following\n``` java\nMultipartUploadRequest req = new MultipartUploadRequest(this, SERVER_UPLOAD_STRING)\n        .addFileToUpload(filesToUploadString, PARAM_NAME_STRING)\n        .addArrayParameter(\"user\", loggedUserID)\n        .addArrayParameter(\"name\", name)\n        .addArrayParameter(\"region\", region)\n        .addArrayParameter(\"country\", country)\n        .addArrayParameter(\"country_code\", country_code)\n        .addArrayParameter(\"latitude\", latitude)\n        .addArrayParameter(\"longitude\", longitude)\n        .addArrayParameter(\"comments\", description.getText().toString())\n    .setNotificationConfig(getNotificationConfig())\n    .setCustomUserAgent(USER_AGENT)\n    .setAutoDeleteFilesAfterSuccessfulUpload(false) // TODO set this to TRUE on release\n    .setMaxRetries(5);\n\nreq.setUtf8Charset();\nreq.startUpload();\n```\non server side my script is \nphp\nif ($_FILES[\"uploaded_file\"][\"error\"] > 0) {\n    echo \"Error: \" . $_FILES[\"uploaded_file\"][\"error\"] . \"<br>\";\n} else {\n    move_uploaded_file($_FILES[\"uploaded_file\"][\"tmp_name\"], $target_file);\n}\nCalculating the SHA's checksums as you suggested is a nice trick to take further action but is not solving the issue i guess.\n. Write now i am switching to okhttp as stack and performing some tests to see if it will be any difference.\nyou think is wise or waste of time ?\n. Since i use Glide to my project i have included com.github.bumptech.glide:okhttp-integration:1.4.0 \nand in my Application class \n```\n OkHttpClient mClient = new OkHttpClient();\n    mClient.setFollowRedirects(true);\n    mClient.setFollowSslRedirects(true);\n    mClient.setRetryOnConnectionFailure(true);\n    mClient.setConnectTimeout(15,TimeUnit.SECONDS);\n    mClient.setWriteTimeout(30, TimeUnit.SECONDS);\n    mClient.setReadTimeout(30, TimeUnit.SECONDS);\n    mClient.setCache(null);\n\n    UploadService.HTTP_STACK = new OkHttpStack(mClient);\n\n```\nUnfortunately it does not work\ni got the upload notification that runs for ever and nothing happens.  Any advise ?\nUPDATE\nnevermind i use your  'net.gotev:uploadservice-okhttp:3.0' and it works fine. \nPerforming uploads to see if it still has the issue and i will let you know \n. @gotev \nYes im using OkHttp stack. still cant figure out what is wrong...\n. @gotev \nAwesome dude :+1: \nThank you\n. @gotev thanks\nwill perform some tests and i'll get back to you !!!\n. @gotev \ni am getting the following warn when i try to compile \nWarning: okhttp3.internal.huc.OkHttpsURLConnection: can't find referenced class org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement\n. Yes !!!\nEDIT\n-keep class net.gotev.* { ; }\n. ",
    "helloyxc": "I am waiting for the 3.0 release.\n. why the waiting time is not same as the broadcast time, just one second?\n. Could I set the broadcast interval when start a upload?\n. ",
    "vikramviswanathan": "Yes. I'm using the 2.1 version\ndependencies {\n    compile fileTree(include: ['*.jar'], dir: 'libs')\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:23.4.0'\n    compile 'com.android.support:support-v4:23.0.0'\n    compile 'com.android.support:design:23.4.0'\n    compile 'com.android.support:cardview-v7:23.0.+'\n    compile 'com.android.support:recyclerview-v7:23.0.+'\n    compile 'net.gotev:uploadservice:2.1'\n    compile 'net.gotev:uploadservice-okhttp:2.1'\n}\n. Sorry to keep bothering you. What do I need to do if I want to use the 2.1 version? The Wiki link gives me the example that has this classes included.\n. Also getting an error on this line \nString uploadID = req.setDelegate(this).startUpload();\nat setDelegate(this).\nI'm following the example provided in this link\nhttps://github.com/gotev/android-upload-service/blob/master/examples/app/app/src/main/java/net/gotev/uploadservicedemo/MainActivity.java\n. ",
    "cskilbeck": "Ah, brilliant! Thanks.\nOn Fri, Jul 8, 2016, at 01:37 PM, Alex Gotev wrote:\n\nYou can get the context inside a BroadcastReceiver by calling\ngetReceiverContext()\n\u2014 You are receiving this because you authored the thread. Reply to\nthis email directly, view it on GitHub[1], or mute the thread[2].\n\nLinks:\n1. https://github.com/gotev/android-upload-service/issues/152#issuecomment-231348569\n2. https://github.com/notifications/unsubscribe/AEw3KxQm2V0KOkEN9H4fd6d_HkTGeDMTks5qTkRzgaJpZM4JH-KG\n. Sorry, I can't find that function, I've looked all over Google etc and\nin the docs but it's not showing up. Is it a public/protected member of\nBroadcastReceiver?\nOn Fri, Jul 8, 2016, at 01:54 PM, Charlie Skilbeck wrote:\n\nAh, brilliant! Thanks.\nOn Fri, Jul 8, 2016, at 01:37 PM, Alex Gotev wrote:\n\nYou can get the context inside a BroadcastReceiver by calling\ngetReceiverContext()\n\u2014 You are receiving this because you authored the thread. Reply to\nthis email directly, view it on GitHub[1], or mute the thread[2].\n\n\nLinks:\n1. https://github.com/gotev/android-upload-service/issues/152#issuecomment-231348569\n2. https://github.com/notifications/unsubscribe/AEw3KxQm2V0KOkEN9H4fd6d_HkTGeDMTks5qTkRzgaJpZM4JH-KG\n. OK, that's weird, I get compiler error: cannot find symbol method\ngetReceiverContext()\nThis is my event receiver code, I've tried it with and without the line:\n@TargetApi(Build.VERSION_CODES.LOLLIPOP_MR1)\nAny ideas? I'm targeting API 23, build tools 21.0.1\n```\npackage com.dogtail;\nimport android.annotation.TargetApi;\nimport android.content.Context;\nimport android.os.Build;\nimport com.Log.log;\nimport net.gotev.uploadservice.ServerResponse;\nimport net.gotev.uploadservice.UploadInfo;\nimport net.gotev.uploadservice.UploadServiceBroadcastReceiver;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\npublic class UploadEventReceiver extends UploadServiceBroadcastReceiver {\n    private static final String TAG = \"UploadEventReceiver\";\n@Override\npublic void onProgress(UploadInfo uploadInfo) {\n    log.i(TAG, String.format(\"Upload progress %d\",uploadInfo.getProgressPercent()));\n}\n\n@Override\npublic void onCancelled(UploadInfo uploadInfo) {\n    log.i(TAG, \"Upload cancelled!\");\n}\n\n@Override\npublic void onError(UploadInfo uploadInfo, Exception exception) {\n    log.i(TAG, \"Upload failed!\");\n}\n\n//@TargetApi(Build.VERSION_CODES.LOLLIPOP_MR1)\n@Override\npublic void onCompleted(UploadInfo uploadInfo, ServerResponse serverResponse) {\n    Context ctx = getReceiverContext();\n    log.i(TAG, \"Upload completed!\");\n    try {\n        File f = Utils.createFile(TailTracker.context(), \"uploaded.txt\");\n        FileWriter fw = new FileWriter(f, true);\n        PrintWriter p = new PrintWriter(fw);\n        for(String s: uploadInfo.getSuccessfullyUploadedFiles()) {\n            p.println(s);\n        }\n        p.close();\n        fw.close();\n    }\n    catch (IOException e) {\n        log.e(TAG, e.getMessage());\n    }\n}\n\n}\n```\nOn Fri, Jul 8, 2016, at 04:20 PM, Alex Gotev wrote:\n\n@cskilbeck[1] added also helper to get context in the Wiki[2]\n\u2014 You are receiving this because you were mentioned. Reply to this\nemail directly, view it on GitHub[3], or mute the thread[4].\n\nLinks:\n1. https://github.com/cskilbeck\n2. https://github.com/gotev/android-upload-service/wiki/Monitoring-upload-status\n3. https://github.com/gotev/android-upload-service/issues/152#issuecomment-231388425\n4. https://github.com/notifications/unsubscribe/AEw3KzTISPO_FQXLAo4uFme0vJHYLa2_ks5qTmrHgaJpZM4JH-KG\n. ",
    "konalegi": "Having the same issue, have only screenshot of debug log. \n\n. Error trace of timeout error, i hope it helps.\n\n. ",
    "amitsharma492": "I am facing same issue on Lastest Version of lib. Got some solution?\n. I am facing this issue on some Mi Android Device in the poor network. Can we do something with Retry policy? this might be an issue but I didn't find anything to control retry option.. I have set maximum retry to zero but still request going twice or more than two while uploading the photo.. How to Monitor the Status of uploading in MainActivity if Upload Service is Called from a class other than MainActivity? . How Can I apply custom Intent Filter I don't want to monitor every upload but from some specific activity/service.\nI am uploading Video from Different Class and Image from a different class, so I want to monitor only Video Upload not Image Upload.\n. ```\npublic static final int MAX_RETRIES = 0;\npublic static final boolean FIXED_LENGTH_STREAMING_MODE = true;\nfinal MultipartUploadRequest request = new MultipartUploadRequest(this, uploadId, serverUrl)\n        .setMethod(\"POST\")\n        .setUtf8Charset()\n        .setNotificationConfig(getNotificationConfig(uploadId, R.string.multipart_upload))\n        .setMaxRetries(MAX_RETRIES)\n        //.setCustomUserAgent(getUserAgent())\n        .setUsesFixedLengthStreamingMode(FIXED_LENGTH_STREAMING_MODE);\nrequest.addParameter(\"ImageName\", \"\");\nrequest.addFileToUpload(filepath, \"fielName\");\nrequest.startUpload();. it is not happening every time, the issue with few devices(Xiaomi and OnePlus) and low network (low internet speed). \nIs it happening due to retry policy or something else? because on my server side duplicate upload issue is not happening in when the network is good and I am not able to detect this in Moto G4 Plus and a few other devices well. \n Now I am not using okttpClient, \nWhile Using Okttpclient the same problem was happening in almost all the devices in Low network and on that time number of duplicate was equal to the number of Retry attempts.public static final int MAX_RETRIES = 3;`\nif maxium retry was 3 then same 3 duplicate upload was there. \nPlease help me its very critical for me. . ",
    "AndrewBryukhov": "I'm using retrofit and got dependency conflict with compile 'net.gotev:uploadservice-okhttp:3.0':\njava.lang.NoSuchMethodError: No virtual method internalCache(Lokhttp3/OkHttpClient;)Lokhttp3/internal/InternalCache;\n. Problem jar:\nul.zip\n. I can't use official release becouse i have a dependency conflict with retrofit for okhttp\n. > Contributions are welcome and encouraged! Just fork the project and then send a pull request.\nlol\n. This is similar maven, it is not last jar\n. great\nPlease place this to wiki with expand.\n. ",
    "mmintz": "Thank you very much. However the images generated have no color.\n. The original file is has a blue arrow. But when the app is showing the notification the arrow is white.\n\n\n. I was just saying that it would be nice if we could use custom notification. Are you creating the notification using Compat ? I am sorry if i am getting out of scope. I was just asking.\n. Thank you so much for the great response. You have done great work man. I will try to give some info on how to simulate the exact same environment asap.\nYes i was refering to #161 . The difference is that yes now its fixed it does not go beyond 100 % but what i realized is that even with huge timeouts most files are going untill 99% and never finish (fail). Then it retries depending on the ammount of retries i set on the muplipart request but NEVER uploads the files. Goes untill 99% and then fails after some period of time.\nThanks again for the response!\nGreat work ! . ",
    "NitroG42": "Using the latest version of OkHttp would be great, because if we're using another library that uses the version 3.3.1 will make a \nFatal Exception: java.lang.NoSuchMethodError: No virtual method recover(Ljava/io/IOException;)Lokhttp3/internal/http/HttpEngine; in class Lokhttp3/internal/http/HttpEngine; or its super classes (declaration of 'okhttp3.internal.http.HttpEngine' appears in /data/app/com.bweez.app-2/base.apk:classes2.dex)\n       at okhttp3.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:493)\n       at okhttp3.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:127)\n       at okhttp3.internal.huc.HttpURLConnectionImpl.getOutputStream(HttpURLConnectionImpl.java:261)\n       at net.gotev.uploadservice.okhttp.OkHttpStackConnection.writeBody(OkHttpStackConnection.java:74)\n       at net.gotev.uploadservice.MultipartUploadTask.writeFiles(MultipartUploadTask.java:139)\n       at net.gotev.uploadservice.MultipartUploadTask.writeBody(MultipartUploadTask.java:64)\n       at net.gotev.uploadservice.HttpUploadTask.upload(HttpUploadTask.java:68)\n       at net.gotev.uploadservice.UploadTask.run(UploadTask.java:139)\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)\n       at java.lang.Thread.run(Thread.java:818)\nIt happens if we try an upload without any internet connection.\nRight now the only way is to fork the library and update the okhttp version which is kind of annoying.\n. Oh I'm really sorry, I missed this part of the doc ! \nThank you for the info\n. ",
    "ar-g": "Need to have them, one of the things which stops from using a library. A couple of things which came to the mind are using robolectric or using a separate app with espresso tests.\n. ",
    "charleston10": "In the future maybe can be implement? Do you think about it?\n. I like your library. I'll create this implementation and send a pull request for you.\nThanks\n. @gotev Ok, no problems. I'm studying the architecture of project for I implement the specification.\nI'll follow 'resumable' as u said.\nIs there anything I should consider?\n. @gotev  I found this library TUS. This contains protocols for Resumable Upload\nAnd have any examples for utilization\nProtocol Tus\nRepository\nNodeJs\nJavaScript\nJQuery\nJava\nAndroid\n. ",
    "DanielNovak": "@gotev any progress on this? Thank you.. @alez007 is the chunk upload code working fine for you? Is the PR still valid (code is up-to-date)? We need to support chunk upload and your PR could be very helpful until the official library supports it.  Thanks.. @alez007 Thanks, and did you figure out how to resume the upload (I understand that this is not part of the PR)? Basically what I want to support is resume in case the connection drops out and you are uploading a large file.. Thank you again. I will try to implement something similar in our project - it seems like this should be the easier part (just storing the upload progress somewhere in the DB, and then using this when the upload is restarted).. @gotev I am waiting for the info from our backend guys - since we are just starting a new project and I am doing research for the Android part. I am sure they will probably pick the simpler approach - sending files in chunks (TUS seems to be more complicated). So I will report back later and I will try to submit a PR if I have something to share, but right now this PR may cover my needs (in case we go with chunked mode).. I will try to help with code reviews / testing. I will also look at other parts of your lib during the implementation in our project. I am starting to like this lib :-). \ud83d\udc4d . ",
    "JeanAtAppsoluce": "I need to handle multiple file uploads in the background using the TUS resumable upload protocol and have read that you were interested in implementing that protocol, but it's been a while now. \nI've already implemented the protocol server side and in our web client, now android's turn. Have you had some work done on that subject ? If not i'd be glad to submit a PR including the TUS protocol, but i might need some help since i've just discovered your library. Going to read your developer doc now, please advise of any known hickup / things i should know before starting. ",
    "doublefree": "that works!\n. ",
    "thuantan2060": "I working when i use .addHeader(\"file-name\", new File(path).getName()).\n. ",
    "andsh": "This request is in an activity\nThe activity is active during whole time since the start till the end of the request\nThe additional POST parameter is needed by me because I have to identify the uploaded file on the server according to the parameter's value\nThe only way to get onCompleted called is to use the different configuration - instead of this anonymous class i have made my activity class implements UploadStatusDelegateq added 4 Overriden methods to my activity: onProgress, onError, onCompleted,onCancelled\nThis way I see get the call to onCompleted method and can get the server response there.\nBut in the serverResponse i have another question.\nOn my server I send this response (PHP): echo json_encode(array(\"st\"=>0));\nOn the onCompleted method of my activity in receive this string '{\"st\":0}' But in the beginning of this dtring i receive two additional bytes - 0xD and 0xA\nWhat is the source of these two bytes in the beginning of my onCompleted.serverResponse?\n. To ensure the server response encoding I've modified the PHP script the following way:\nheader('Content-Type: application/json; charset=utf-8');\necho utf8_encode(json_encode(array(\"st\"=>0)));\nOn the client side in the onCompleted method I inserted the following code\n      int code = serverResponse.getHttpCode();\n      Log.e(\"gotev\", \"onCompleted3 \" + code);\n      byte[] ba = serverResponse.getBody();\n      for (int j=0; j<ba.length; j++) {\n        Log.e(\"byte\",String.format(\"%02X \", ba[j]));\n      }\n      String str2 = new String(ba, Charset.forName(\"UTF8\"));\n      Log.e(\"gotev\", \"strs equ= \" + resps.equals(str2));\n      JSONObject jo = new JSONObject(resps);\n      int st = jo.getInt(\"st\");\n      Log.e(\"gotev\", \"onCompleted5 st=\" + st);\nAnd I've got the following in the Logcat in my Android Studio\n08-20 12:13:50.999 20111-20111/bg.motolife.app E/gotev: onCompleted3 200\n                                                        {\"st\":0}\n08-20 12:13:51.000 20111-20111/bg.motolife.app E/byte: 0D \n08-20 12:13:51.000 20111-20111/bg.motolife.app E/byte: 0A \n08-20 12:13:51.000 20111-20111/bg.motolife.app E/byte: 7B \n08-20 12:13:51.000 20111-20111/bg.motolife.app E/byte: 22 \n08-20 12:13:51.000 20111-20111/bg.motolife.app E/byte: 73 \n08-20 12:13:51.000 20111-20111/bg.motolife.app E/byte: 74 \n08-20 12:13:51.000 20111-20111/bg.motolife.app E/byte: 22 \n08-20 12:13:51.000 20111-20111/bg.motolife.app E/byte: 3A \n08-20 12:13:51.000 20111-20111/bg.motolife.app E/byte: 30 \n08-20 12:13:51.000 20111-20111/bg.motolife.app E/byte: 7D \n08-20 12:13:51.000 20111-20111/bg.motolife.app E/gotev: strs equ= true\n08-20 12:13:51.001 20111-20111/bg.motolife.app E/gotev: onCompleted5 st=0\nSee, in the second string i don't see any string header because of new line and carriage return characters in the string\nAnd then In the byte loop we see first 2 bytes are exactly line_feed and carriage_return\nFrom where are these two bytes in the beginning of the serverResponse?\n. Thank you for this workaround.\nCan you please direct me, how to switch to the OkHttp stack?\n. Thank you\nThis solution works perfectly\n. ",
    "mnaswin3": "Hi guys, \nany update on this feature?. ",
    "VSG24": "config.getCancelled().message = getString(R.string.upload_cancelled);\nThis coding style is horrible and not appropriate for Java or any other lang as far as I can tell.. @gotev @hendrawd Just taking a look at other libraries and even Android SDK itself, I think it's pretty clear how it should be done.. You are so right, I think another way of doing multiple uploads with the same parameter name is to call the startUpload multiple times.(separate calls for each file). ",
    "ghost": "Please write exp. URL... ftp://user:password@ipaddress\n. ",
    "folol": "@gotev  thanks a lot\n. ",
    "YasirAmeen": "ok Thank you i got it :-)\n. ",
    "ddpatel2606": "okay...thanks\n. ",
    "PhilLab": "PR for retrieving the files left: #277. @zoptaltechnical This is the code example you are looking for: https://github.com/gotev/android-upload-service/wiki/Recipes#multipart . Just calladdFileToUpload() multiple times. But please be so kind and don't use this issue for further questions regarding this multipart upload as it is about a (slightly) different feature. If you experience additional difficulties, maybe StackOverflow can help. @gotev Do you have plans for the \n\nmultiple parallel multipart requests which has to be aggregated on a single notification\n\nright now or would this be something open for community contributions?\nYou said this would need a library redesign - will this feature really mean widespread code changes?. Is there a broadcasting/intent possibility to remove the \"upload successful\" notification after some time?\nI upload files to the server, then display the notification's success message (which is \"please wait for the server to process your uploads\") and after some time the server notifies me about the processing being finished. In this moment, I want to remove the AndroidUploadService notification. The used server implementation catches this now I don't know if this should be fixed in this library nonetheless because maybe there are other server implementations impacted by this.. Your comment is totally right. However, if I step trough the lines of UploadTask.broadcastCompleted(): \n- the method onSuccessfulUpload() is called\n- which clears all files\n- and the UploadInfo is created with an empty params.getFiles() list for the \"filesLeft\" (which would be correct) and all files in in the parameter successfullyUploadedFiles (also correct).\nFully failed uploads have no successfullyUploaded File so UploadInfo is created with the correct data, i.e. zero successful files and the other files as \"left to upload\". Correct as well.\nActually, this behavior I observed was the reason why I called the member filesLeft - after all it is zero after a successful upload and completely full at a failed upload.\nAs I did not test partially successful uploads, my patch seemed correct for me, despite your valid arguments that it is not.\nI think, the clearance of params.getFiles() in the successful upload broadcasting is the bug here. Ok, makes sense to me. But then (using the previous naming scheme) why is totalFiles=0 in case of a successful upload? Isn't that unexpected?. I did something like this last month in my local code and now decided to commit it. If you want to merge it see the PR. This was my first attempt but if we erase the element in the function addSuccessfullyUploadedFile, the iterator still becomes invalid. This was the code I tried, maybe I used the iterators wrong:\n    Iterator<UploadFile> i = params.getFiles().iterator();\n    while (i.hasNext()) {\n        addSuccessfullyUploadedFile(i.next());\n        // params.removeFile erases the element and the iterator is invalid. i.remove() would be correct but then, the method above must not delete the element\n    }. Thanks, did not spot that one.\n",
    "chamroeunbm": "Thank you very much for spending a lot of time explaining in detail. Much appreciated!\n. ",
    "willkernel": "I have solved the problem by removing the following codes ,beacuse there is a conflict when i use RMP\njava\nrealm {\n    syncEnabled = true;\n}\n. ",
    "iamdangerous": "In the above class , in method onCompleted(UploadInfo uploadInfo, ServerResponse serverResponse)\nI need context to perform db operations like below\n\nUri uri = MyProvider.MessageLists.CONTENT_URI;\n            ContentValues cv = new ContentValues();\n            ...\n            context.getContentResolver().update(uri,cv,where,mSelectionArgs);\n\nAnd later on I have to call functions of service\nlike below -\n\nIntent service = new Intent(context, MyService.class);\n                    IBinder binder = peekService(context,service);\n                    MyService.LocalBinder binder_2 = (MyService.LocalBinder) binder;\n                    MyService myService = binder_2.getService();\n. Thanks for helping me out , well I am copying the library locally and will import it into my project .\n. \n",
    "sandeshlasnapure": "I am trying to upload two file having 120-300 kb size each.\nMy progress delegate is in foreground activity. . ",
    "Bekakk": "thanks Alex your attention\nIs it a possible to retry file uploading  when something wrong?\n. Alex\nCan you show me code snippets how to can retry Ftp uploading if something wrong?\nthanks\n. \n` @OnClick(R.id.ftpUploadButton)\n    void onUploadFTPClick() {\n        final String serverUrlString = serverUrl.getText().toString();\n    final String filesToUploadString = filesToUpload.getText().toString();\n    final String[] filesToUploadArray = filesToUploadString.split(\",\");\n\n    FTPUploadRequest request = new FTPUploadRequest(this, serverUrlString, 21)\n            .setUsernameAndPassword(\"*****\", \"*****\")\n            .setMaxRetries(4)\n            .setNotificationConfig(getNotificationConfig(\"File upload\"))\n            .useCompressedFileTransferMode(true)\n            //.setCreatedDirectoriesPermissions(new UnixPermissions(\"777\"))\n            .setAutoDeleteFilesAfterSuccessfulUpload(autoDeleteUploadedFiles.isChecked());\n\n    for (String fileToUploadPath : filesToUploadArray) {\n        try {\n            request.addFileToUpload(fileToUploadPath, \"/\", new UnixPermissions(\"777\"));\n        } catch (FileNotFoundException exc) {\n            showToast(exc.getMessage());\n        } catch (IllegalArgumentException exc) {\n            showToast(\"Missing some arguments. \" + exc.getMessage());\n        }\n    }\n\n    try {\n        String uploadID = request.setDelegate(this).startUpload();\n        addUploadToList(uploadID, \"FTP upload\");\n\n    } catch (IllegalArgumentException exc) {\n        showToast(\"Missing some arguments. \" + exc.getMessage());\n    } catch (MalformedURLException exc) {\n        showToast(exc.getMessage());\n    }\n}`\n\nThis is my source.I tryed to upload large file with Ftp.I disconnected internet connection and then connected ,but retry still not working\nwhat is a wrong in my source?can you help me?\nthanks. 1)For example,I uploaded myfirst.zip file successfully,How I can get my file name in  onCompleted method? can you show me code?\n2) Yes,You are right.. unfortunately i don't.\nThanks your attention. ",
    "kovac777": "After several manipulations its WORKING!!! I change remote path from \"/uploads/123/\" to \"uploads/ZGGWBshr.jpg\" I remove slash before remote path and its WORKING!!!\n12-12 08:49:25.170 10604-10945/cloud.assistent.by.mobile D/UploadService: FTPUploadTask - FTP default working directory is: /\n12-12 08:49:25.170 10604-10945/cloud.assistent.by.mobile D/UploadService: FTPUploadTask - Starting FTP upload of: /storage/emulated/0/Download/ZGGWBshr.jpg to: upload/ZGGWBshr.jpg\n12-12 08:49:25.275 10604-10945/cloud.assistent.by.mobile D/UploadService: FTPUploadTask - Created remote directory: upload\n12-12 08:49:25.492 10604-10945/cloud.assistent.by.mobile D/UploadService: UploadTask - Broadcasting upload progress for d71abf26-39b9-47e8-9e34-4336545471c9: 4096 bytes of 18136\n12-12 08:49:25.912 10604-10945/cloud.assistent.by.mobile D/UploadService: UploadTask - Broadcasting upload completed for d71abf26-39b9-47e8-9e34-4336545471c9\n12-12 08:49:25.917 10604-10945/cloud.assistent.by.mobile D/UploadService: UploadService - d71abf26-39b9-47e8-9e34-4336545471c9 now un-holded the foreground notification\n12-12 08:49:25.917 10604-10945/cloud.assistent.by.mobile D/UploadService: UploadService - All tasks finished. UploadService is about to shutdown...\n12-12 08:49:25.919 10604-10604/cloud.assistent.by.mobile D/UploadService: UploadService - Stopping foreground execution\n12-12 08:49:25.920 10604-10604/cloud.assistent.by.mobile D/UploadService: UploadService - UploadService destroyed\n12-12 08:49:25.932 10604-10945/cloud.assistent.by.mobile D/UploadService: FTPUploadTask - Logout and disconnect from FTP server: 88.99.35.56:21. ",
    "praveen-xymob": "Thanks for reply. I am using latest master version. Shall I use it using gradle 3.0.3 to fix this issue?. ",
    "sitansu12568204": "XLSX doc is not uploading to server.. ",
    "Hardik-mehta": "Thank you so much for your quick response.can we pass multiple json\nparameters in add parameters.\nOn Jan 12, 2017 7:35 PM, \"Alex Gotev\" notifications@github.com wrote:\n\nDon't know what you exactly want to achieve, but here's a multipart\nexample:\npublic void uploadMultipart(final Context context) {\n    String json = \"{\\\"someField\\\": \\\"someValue\\\"}\";\ntry {\n    String uploadId =\n      new MultipartUploadRequest(context, \"http://upload.server.com/path\")\n        // starting from 3.1+, you can also use content:// URI string instead of absolute file\n        .addFileToUpload(\"/absolute/path/to/your/file\", \"your-param-name\")\n        .addParameter(\"jsonParameterName\", json);\n        .setNotificationConfig(new UploadNotificationConfig())\n        .setMaxRetries(2)\n        .startUpload();\n} catch (Exception exc) {\n    Log.e(\"AndroidUploadService\", exc.getMessage(), exc);\n}\n\n}\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/gotev/android-upload-service/issues/224#issuecomment-272170900,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AS6vd3MNGzDcwnAo6o9a16qZ2qLsEnpBks5rRjMagaJpZM4Lhwlx\n.\n. Thank you so much for your Valuable help I will try and let you know.\nOn Jan 12, 2017 7:44 PM, \"Alex Gotev\" notifications@github.com wrote:\nof course, you can add as many parameters as you want. Just pass every\njson string as a different parameter name and you're done! For example:\n.addParameter(\"firstJson\", json1);\n.addParameter(\"secondJson\", json2);\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/gotev/android-upload-service/issues/224#issuecomment-272173213,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AS6vd6x21aM0dzOxDQdWzRmoQLI1vKWkks5rRjVUgaJpZM4Lhwlx\n.\n. \n",
    "vgevorgyan": "That was my mistake, sorry :)\nIt was not related with android-upload-service.\nIssue was socket-io and okhttp. Just updated socket-io version which using the same okhttp version that I'm using.\nBut problem came when I started using uploadservice-okhttp, be cause there you are using okhttp 3.5 version, but I used 3.3.1, to not have duplication issue I have changed okhttp version to 3.5, which make issue with socket-io, which fixed by moving socket-io to latest version.\nBy the way I have an other issue, when I call startUpload() it shows up notification and immediately write error, I have checked logs nothing there, but this is happening not always, but conditions are the same (same file, even same runtime). But maybe I need to create an other issue for this :)\nThanks, for response :). Hi,\nI have fixed my issue by adding delay between first and second uploads.\nIn first upload onCompleted, I wait one second then start second upload, and problem was gone.\nI have debug code, but couldn't understood why it was cancel the second upload.\nNon-permanent means, it is not happening every time.\nRegards. ",
    "efkan": "@vgevorgyan updating socket-io version works for my app too. It stopped me for 2 days. Thanks for sharing this!. ",
    "mbernier85": "hi @gotev \nI got the same issue as above. \nFrom what I understand of the error, when you start a new upload in the onCompleted method, the cancel service message is sent, and it seems to cancel the old upload that was completed but also the new upload that is currently in progress.\nUploadRequest - null or empty upload ID. Generating it\nUploadRequest - Created new upload request to https://example.com/upload-photo with ID: 15aeb0a5-715d-4513-af76-af4f09908ce3\nMultipartUploadRequest - Auto-detected MIME type for /storage/emulated/0/DCIM/9fca8e70dccc11e6bf0525aa8ba682ea_77791.jpg.jpg is: image/jpeg\nMultipartUploadRequest - Using original file name: 9fca8e70dccc11e6bf0525aa8ba682ea_77791.jpg.jpg\nUploadService - Starting service with namespace: packageName, upload pool size: 8, 1s idle thread keep alive time. Foreground execution is enabled\nUploadService - Successfully created new task with class: net.gotev.uploadservice.MultipartUploadTask\nUploadService - 15aeb0a5-715d-4513-af76-af4f09908ce3 now holds the foreground notification\nHttpUploadTask - Starting upload task with ID 15aeb0a5-715d-4513-af76-af4f09908ce3\nUploadService: OkHttpStackConnection - creating new connection\nUploadTask - Broadcasting upload progress for 15aeb0a5-715d-4513-af76-af4f09908ce3: 129 bytes of 1400143\nUploadTask - Broadcasting upload progress for 15aeb0a5-715d-4513-af76-af4f09908ce3: 651671 bytes of 1400143\nHttpUploadTask - Server responded with HTTP 200 to upload with ID: 15aeb0a5-715d-4513-af76-af4f09908ce3\nUploadTask - Broadcasting upload completed for 15aeb0a5-715d-4513-af76-af4f09908ce3\nUploadRequest - null or empty upload ID. Generating it\nUploadRequest - Created new upload request to https://example.com/upload-photo with ID: 8ca47cdd-dab6-4fe6-a770-c70d3d80cf97\nMultipartUploadRequest - Auto-detected MIME type for /storage/emulated/0/DCIM/9fca8e70dccc11e6bf0525aa8ba682ea_32211.jpg.jpg is: image/jpeg\nMultipartUploadRequest - Using original file name: 9fca8e70dccc11e6bf0525aa8ba682ea_32211.jpg.jpg\nUploadService - 15aeb0a5-715d-4513-af76-af4f09908ce3 now un-holded the foreground notification\nUploadService - All tasks finished. UploadService is about to shutdown...\nOkHttpStackConnection - closing connection\nUploadService - Starting service with namespace: packageName, upload pool size: 8, 1s idle thread keep alive time. Foreground execution is enabled\nUploadService - Successfully created new task with class: net.gotev.uploadservice.MultipartUploadTask\nUploadService - Stopping foreground execution\nUploadService - UploadService destroyed\nUploadService - 8ca47cdd-dab6-4fe6-a770-c70d3d80cf97 now holds the foreground notification\nUploadTask - Broadcasting cancellation for upload with ID: 8ca47cdd-dab6-4fe6-a770-c70d3d80cf97\nUploadService - All tasks finished. UploadService is about to shutdown.... I needed to add transitive: false to this lib for it to use by version of okhttp. ",
    "ianschmitz": "There may be some caveats to running in a different process depending on the implementation in this repo. Some mentioned in the google issue at https://code.google.com/p/android/issues/detail?id=193802#c14:\n1) Since the service is in a different process, you wont' be able to stop on any debugger breakpoints in the service until you have Android Studio switch over to or attach to this other process.\n2) If you've been using local BroadcastReceiver via LocalBroadcastManager for communication between your app UI and the foreground service, you'll need to switch to full a BroadcastReceiver because you're now into the realm of inter-process communication.\n3) SharedPreferences won't work correctly in multi-process so you need to use a content provider or other way how to make you processes communicate.. Most likely won't have the capacity to do this for the next little while. Is there someone else that can take this on?. There are rules that you can use in the Android binding library to control classes/fields/methods/etc. The constructor isn't stripped at this layer in the build process. It is stripped during the build of the Android app project. The method is actually removed from the classes.dex when being copied from the binding library. There aren't any ways i have found to control that specific behavior. \nDisabling linking/ProGuard on the app project unfortunately doesn't have an effect on this issue. Seems specific to Debug vs Release build configuration.. Agreed that the public vs private definitely has an effect. Logically I can see their reasoning for stripping it. It is indeed a private class/constructor, and nobody internally in the package references the constructor. The SchemeHandler interface is public, so the remaining methods besides constructor are left in the resulting dex bundle.\nI have confirmed that other private fields/methods aren't stripped, but they were explicitly referenced in the package.. Just grabbed the latest from master with your included changes. Still observing the constructor removed in the generated classes.dex\n\n. Looks good.\nI don't have any experience publishing Android binding libraries to NuGet unfortunately. It would likely involve building a test suite to test the API surface of the generated C# wrapper. I just noticed that a recent commit changing the inheritance structure of MultipartUploadRequest (https://github.com/gotev/android-upload-service/commit/41994edbb565a16593f0e26ccb19c0f80c316222#diff-ed86f756af0dc22f04c2f52c6d6b5753) broke some of the method return types in the C# wrapper. It seems like the whole thing can be pretty brittle depending on how you structure your Java code.. The changes made by https://github.com/gotev/android-upload-service/commit/80f425610ea2a12830c8e32804a3d6ae2928936f appeared to fix the issue with the missing methods in the classes.dex. Applying just those changes worked fine.\nPulling the latest from master including the changes to inheritance created a broken C# wrapper. Specifically methods like HttpUploadRequest.AddHeader() now return Java.Lang.Object instead of HttpUploadRequest like they did before the changes. So i can no longer link together the method calls like i was previously:\njava\nstring uploadId = new MultipartUploadRequest(Application.Context, ApiClient.GetMediaUploadEndpointUrl(audioData, sendEmail))\n                .AddFileToUpload(FileSystem.GetAudioStorageFilePath(audioData.FileName), \"contentFile\", \"Audio_Recording.m4a\", \"audio/mp4\")\n                .AddHeader(\"Cookie\", cookieHeaderValue)\n                .SetNotificationConfig(notificationConfig)\n                .SetMaxRetries(3)\n                .StartUpload();. Agreed. May not be worth your time to try to support a Xamarin binding as it could make you much less flexible/agile with your development on this library.\nA quote from https://developer.xamarin.com/guides/android/advanced_topics/binding-a-java-library/troubleshooting-bindings/\n\nBinding an Android library (an .aar or a .jar) file is seldom a straightforward affair; it usually requires additional effort to mitigate issues that result from the differences between Java and .NET. These issues will prevent Xamarin.Android from binding the Android library and present themselves as error messages in the build log.\n\n. Yes referencing the MultipartUploadRequest when calling the methods works just fine.\nThe binding library supports ways to transform the output of the C# wrapper. So an example would be transforming the return type of HttpUploadRequest methods.\nThere's more information here: https://developer.xamarin.com/guides/android/advanced_topics/binding-a-java-library/customizing-bindings/java-bindings-metadata/. ",
    "volser": "The issue was with OkHttpClient, because client has interceptors\n```\nOkHttpClient.Builder httpClientBuilder = new OkHttpClient.Builder()\n                .addInterceptor(logging)\n                .addNetworkInterceptor(auth);\nprivate final HttpLoggingInterceptor logging = new HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY);\nprivate final Interceptor auth = chain -> {\n        Request original = chain.request();\n    String authorization = null;\n\n    Request.Builder requestBuilder = original.newBuilder();\n\n    .....\n\n\n    requestBuilder.method(original.method(),original.body());\n\n    Request request = requestBuilder.build();\n    Response response = chain.proceed(request);\n\n    return response;\n};\n\n```. I do not change body in my interceptor, only headers, I think HttpLoggingInterceptor read body to log:\nhttps://github.com/square/okhttp/blob/master/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java. ",
    "mahdiabdolmaleki": "Upload Bitmaps without saving them to the file system.\nBitmap bitmap= intent.getExtras().get(\"data\");\nByteArrayOutputStream stream = new ByteArrayOutputStream();\nbitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);\nbyte[]  byteArray = stream.toByteArray();\nHow to upload byteArray to server?. Thanks Alex. . ",
    "jankowskib": "Please look at my commit, it's kinda hacky but it works for my needs. Unfortunately it doesn't work completely for BroadcastReceiver because of lack of access to HttpUploadTask instance. Also I had to throw exception In HttpUploadTask because onError / onRetry wouldn't been called if server returned with non 200.. ",
    "mupm1": "in binary upload  i cant add param to path(.addFileToUpload(path, \"param\")). how can send one by one? or two by two?. ",
    "MrPrezbo": "Experienced same issue after updating to 3.1 - worked after adding that line to my proguard file. Thanks . ",
    "Shakezulla57": "Yep this worked. Sorry for the late follow up.. I'm having the same issue on O. It seems like it might be the progress notification, the longer the upload the more notification sound spam there is.. Single upload, and I'm using the new Oreo channels. Trying it on marshmallow and I'll post back the results.. Same build on Marshmallow doesn't spam the notification. Must be something with the notification channels.. My channels are set to normal importance and it's happening.. ",
    "ivujosevic": "@gotev Even -keep class net.gotev.uploadservice.schemehandlers.** { *; } is more than enough.\nSetting -keep class net.gotev.uploadservice.** { *; } excludes the whole library from ProGuard processing which is unnecessary and defies the sole purpose of ProGuard.\nI excluded the whole schemehandlers package as I didn't have time to find the exact class or method that makes the problem, but I'm sure that even that excludes more than necessary.. ",
    "mostafaspace": "Hello,\nIn the topic of Multiple File Upload Notifiation, I've been trying to reach a notification like this:\nhttp://i.imgur.com/bsV3rRd.png\nIs this is possible with the current notification config or It can't be done?\nThanks.. Thanks so much for you answer,\nCan you tell me where to look about making 1 by 1 progress? \nAnd is this what you mean?\nfor (String photo : selectedPhotos){\n                    uploadRequest.addFileToUpload(photo, \"image[]\");\n                }\nThanks.. Hello, \nThank you so much.\nI tried it and its ok, but I find it difficult to track upload errors, Tried to get callbacks from server and then update the notification error, but it didn't work as I need it to. So I just added the whole request in the for loop and send 1 request for each image, this way I get single notification for each image for failed messages.. \nOne other thing, in the image[] way , the progress bar is combining the whole request, not uploading them 1 by 1. What I had in mind was a progress bar for each uploaded file, and only if failed it gets own notification with the file name and the reason.\nThank you for your great work ;). I'm not really sure what to call it. But here I'll try to simplify what I mean:\n-Send all photos in one request using image[]\n-Upload each of them 1 by 1, but in one notification bar e.g. 1 of 3 (http://i.imgur.com/bsV3rRd.png) \n-Each photo of them has its own progress bar and error callback\n-If has error, show the error and  file name in a new notification\nI think i reached that but without the \"one request\" nor \"error callbacks\" part.\nhttp://i.imgur.com/LCodsGW.png\nFor now I added .setAutoClearOnSuccess(true) to leave only the errors, and I have only mime-type and file-size checks, so I just wrote the \"might\" be too large error and Photopicker picks only photos. but in case there is more checks, it needs to read from a server callback better.\nOverall, it works fine, It just needed to be more accurate for the user to know the exact error and the file name so he can take the needed action.\nThank you so much. I get what you mean, so lets forget about the image[] and send one photo per request.\nWhat I mean by read from server callbacks is each request does send a callback in the onCompleted but in case there is an error, can you update the notification error to be the message of  onCompleted?. What if the request reached the server, and there was a custom error I created? The HTTP code will still be 200, and you get success message but the file did not actually upload. \nFor example: \"max file size is 5mb\", its a simple if/else check on server-side where the request is received but the file did not moved to folder to say its \"uploaded\". \nI'm no expert on requests but I think onError will not get the job done. checking server error codes only is not enough. You can use onCompleted to do both, check server errors and check custom errors. and whatever the error, let it be shown in the notification error.. Wow, I really didn't know about all these server errors, all I knew was to get the file size after its uploaded, then if it doesn't match, then ignore it. and if it does, move it to uploads folder.\nWell, about the complex scenario, What if u can trigger the error at onCompleted and take the message to the notification?\nif (jsonObject.has(\"error\")) {\ntriggerError(jsonObject.getString(\"error\"));\n}\nBut in this way it will be a must to have error in the returned json. same can be done for success.. Ok, Don't let each task mange its own notification. Make a global notification and update it by ID in the task and later in the callback. does that make sense?\nSomething like this:\nhttp://stackoverflow.com/a/32561752/2036226\nFist time is the global, second time inside the task.. ",
    "azizarc88": "Hello,\nCan you please help me..?\ni just try your library using MultipartUploadRequest\nbut i got an error, it say\njava.lang.NoSuchMethodError: No direct method <init>(Landroid/content/Context;Ljava/lang/String;)V in class Landroid/support/v4/app/NotificationCompat$Builder; or its super classes (declaration of 'android.support.v4.app.NotificationCompat$Builder' appears in /data/app/com.sigapp.id-2/base.apk)\nand i using com.android.support:support-v4:25.+\nThanks before.. oh great!, you provide the best documentation \ud83d\udc4d\ud83c\udffb\nhttps://github.com/gotev/android-upload-service/wiki/Monitoring-upload-status\ni just read it haha. But how to set action name / filter name in your UploadService ?\nthis needed for filter in broadcast right ?\nLocalBroadcastManager.getInstance(this).registerReceiver(broadcastReceiver, new IntentFilter(\"FilterName\"));. I understand now, instead of using localbroadcastmanager for register broadcast, i need to register with \nbroadcastReceiver.register(getApplicationContext()); \ud83d\udc4d\ud83c\udffb. ",
    "zoptaltechnical": "I am unable to upload multiple files due to lack of code example , Please provide complete code to upload multiple files, Correct me if i have missed anything , Thanks. ",
    "fishwjy": "compile 'net.gotev:uploadservice:3.2.1'\nI use this version.\nAnd my SDK settings:\nminSdkVersion 19\ntargetSdkVersion 22\ncompileSdkVersion 25\nPhone ProtoType: Android 4.4.4 \n. ",
    "judemanutd": "@gotev i was a little confused about that.Should i create a class make it extend a service and then within that declare a broadcast receiver?So just 1 class in total?. @gotev sorry for the late reply.I think the docs are pretty understandable,me being an amateur is probably what made the process a little tedious but it think i got it now,thank you.. ",
    "Ric17101": "Ok, thanks BTW.  I will troubleshoot the error on the server side as per the wiki suggested.. ",
    "dunwen": "i know my problem where is...\nMultiDex not use correctly. ",
    "akiller": "Just a very quick thought but for this and #259 would there be any benefit in passing a delegate into BinaryUploadRequest which is responsible for determining the upload result? This could be called during both completed and errored requests to allow the app to override the actual result of the upload and resulting notification of the upload.\nWe have a service that returns a 200 response code but returns a JSON error object in the response text - would it not make sense to optionally allow each app to tell you (the upload service) how to deal with it? E.g., if our service returns an error code that the uploaded file is a duplicate of one that already exists we may want to just gracefully accept it on the app rather than show an error.\nFor example:\n```\npublic class RequestResultParser {\n    public boolean isSuccessful(UploadInfo uploadInfo, ServerResponse serverResponse) {\n        if (serverResponse.getHttpCode() != HttpStatus.SC_OK)\n            return false;\n    // We could deserialise the JSON and do checks based on error code etc here\n    if (serverResponse.getBodyAsString().contains(\"{error:\"))\n        return false;\n\n    return true;\n}\n\n}\n```. > Ideally, what I want to achieve is to pass the notification itself to the onSuccess and onError callbacks. At that point you could modify it as you wish. You can add all the required business logic in the onSuccess and onFailure callbacks to best accomodate your needs and to override the default behaviour.\nOh OK, that makes sense to me. It sounds pretty simple in theory but I'm sure it won't be!\n\nI advise you to return a 4xx from your server if the upload is not successful or some server-side validation does not pass, as I wrote here to be as standard compliant as possible.\n\nDefinitely. It wasn't my doing :). We're currently using our own uploader for most of our apps but are considering moving them over to this library and will update to proper status codes at that point.. ",
    "NLLAPPS": "Great! what is your email so I can send it to you. Don't expect anything organised :). See \nhttps://stackoverflow.com/questions/3853767/maximum-request-length-exceeded\nhttps://stackoverflow.com/questions/3668155/how-do-i-resolve-the-maximum-request-length-exceeded-exception. I don;t think you have checked SO links I've provided to you.. Let me be more clear, it is about your web.config file.\nYou need to increase the allowed upload size.\n. Upload size cannot be set on a HTML code. \nI don't know what else you might need.\nI am simply trying to point out that this issue is not related to the library. I believe you still need to show notification for long processes even if you are using work manager if it is running O or above . ",
    "hmskhan": "my server side code\n$myFile = $_FILES['image'];\n$fileCount = count($myFile[\"name\"]);\nfor ($i = 0; $i < $fileCount; $i++) {\n        //file path to upload in the server \n    $file_path = \"uploads/\". $myFile[\"name\"][$i];\n    move_uploaded_file($myFile[\"tmp_name\"][$i], $file_path);\n}\nI add N files to the request using addFileToUpload method but it only uploads the last one.\n. ",
    "secu2": "My app has all the permissions requested:\n<uses-permission android:name=\"android.permission.MANAGE_DOCUMENTS\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n[...]\nI even retrieve the file name with no problem before starting the service : \njava\nCursor cursor = getActivity().getContentResolver().query(fileUri, null, null, null, null, null);\nif(cursor != null && cursor.moveToFirst()){\n    String fileName = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\n}\nThe READ_EXTERNAL_STORAGE permission is requested at runtime and granted successfully just before launching the file chooser.. Seems like using an encoded Uri worked for me :\n[BinaryUploadRequest].setFileToUpload(file.toString());\ninstead of :\n[BinaryUploadRequest].setFileToUpload(Uri.decode(file.toString()));. ",
    "gajicm93": "I'm having the exact same problem. And using the encoded Uri doesn't fix the problem for me? Please help? @secu2 @gotev \nIt's not a permission problem cause it's not working on Android 5.1 either, and I have everything in Manifest, all possible permissions... Fixed it!\nThe problem is with the Intent you pick up content with, and whether you properly take read permission for Uri. Here is the solution if anybody needs it:\nhttps://stackoverflow.com/questions/25414352/how-to-persist-permission-in-android-api-19-kitkat/29588566#29588566. ",
    "virengujariya": "@gotev It was silly mistake since I was removing AWS transfer listener reference in between. It is fixed now. logging did help though. Thanks! . ",
    "moter": "setSocketTimeout(5000) doesn't work in FTPUploadRequest. How do you know if the server is connected?. I get it.the FTPUploadRequest setMaxRetries(), number of maximum too large.\n. English is poor, please forgive me\u3002\nUsing FTP to upload files to the window server was correct yesterday, but it went wrong today. The device system is android4.4.4. The same file, second pass will make mistakes ,and return \"Error while uploading: xx to xx\"\nI don't understand the code \njava\ntry {\n    String remoteFileName = getRemoteFileName(file);\n    if (!ftpClient.storeFile(remoteFileName, localStream)) {\n        throw new IOException(\"Error while uploading: \" + file.getName(service)\n                              + \" to: \" + file.getProperty(PARAM_REMOTE_PATH));\n    }\n    setPermission(remoteFileName, file.getProperty(PARAM_PERMISSIONS));\n} finally {\n    localStream.close();\n}. Successfully upload the file for the first time.But,Some FTP servers can upload second times\u3002\nI'll see if the FTP service is insufficient\u3002\nExample\uff1a\n  new FTPUploadRequest(mContext, _ip, _port)\n                            .setUsernameAndPassword(_accout, _pwd)\n                            .addFileToUpload(path, to)\n                            .setNotificationConfig(config)\n                            .setCreatedDirectoriesPermissions(new UnixPermissions(\"777\"))\n                            .setSocketTimeout(301000)\n                            .setConnectTimeout(301000). You are right\uff0cthis is FTP server Permission denied\u3002\nthanks. ",
    "alez007": "I'm also aiming to implement a way to resume this upload, let me know if you're having any problems with this feature. Have fun!. @gotev I'm currently using it for an in-house resume upload feature that needs chunks uploaded in order.  Regarding S3, I haven't used it with multipart upload although that would make for a nice exercise, I can give that a try if you're not in a hurry :). I haven't had too much time lately and I kind of pulled all master changes into my repo and solved conflicts, but I saw quite a few structural changes were made.. @DanielNovak yes, using it in production. It's a simple fix for the current pull request that is failing tests, if I have time later on I'll push a working code. . A proper resume feature will involve a bit more work, currently the resume capability will have to be done on your side, my resume capability is based on onChunkUploadSuccess event, I'm saving the status of what has been uploaded so far somewhere in the app. Basically this is what @gotev meant by combining ideas, do something good from the start.... I wasn't aware that this pull request will be needed so I only invested a limited amount of time in developing it. I think it's ready to be used as it is, I've also updated the branch with latest commits from master. The build fails with a strange error, error: package NotificationCompat does not exist but it should work once you import it into your project.. @gotev clearly this kind of request is going to return from time to time, I'll see if I can find some time to at least start it... until then why not integrate this straight into master for the time being and make sure we add backward compatibility with the future chunk upload feature ?\n. ",
    "Robertoq7": "Hi @gotev !\n\nI'm working on something similar, but also with resume capabilities for the next release. \n\nCan you tell me please when will be available this release? \nThank you,\nRobert. ",
    "ubuntudroid": "Any news on chunk uploads?. ",
    "ringcentraljerry": "@gotev any comments?. @gotev This issue can be reproduced on Samsung S7, and our QA said that many devices have this issue.. ",
    "attawit": "I have checked on the requested runtime permissions already. And FYI, if I remove    .setNotificationConfig(new UploadNotificationConfig()) from the Request, this Writing exception to parcel java.lang.SecurityException are gone.   ...\nLet be try Demo App but frankly speaking, I have issue on set up Butterknift Bind on the demo code which found some error on my Android Studio.  Let me try again.... Still have the same error Security Exception even on the demo code.  . @I have tried this.  And by the way the file have been new created by compressing from the original uri.  content and the file was written in the sandbox of the app which I have test before that It is not empty or unreachable .  Let me try to understand Async with parcel it may related issue. But I still donot understant since I have not used any database, why E/DatabaseUtils  from Log Error.  . I have tried to test when I have changed to API 22, during that time I found some mistake on server IP \"192.122.123.22 \" there is a space after 22, After I have removed that But I have removed the .setNotificationConfig(new UploadNotificationConfig()) also. It seems working. Then I'd like to regenerate the error again. By changing back to API 23, I put back everything but can not generate that error. But that Exception still occurs related to facebook.  Thank you , I will buy a beer if you are in thailand :). @You are correct, this have been related to the case of Android kills the task while it needs memory also. I can use notificationconfig now. . BTW, do you ever seen problem with writing file in root directory instead of directory when put the parameter in function. Is this related to the ftp daemon which may not be supported or not?. I used to found /-1/1/ ,https://stackoverflow.com/questions/44817623/android-uri-getpath-has-1-1-in-front/45025234#45025234\nthis will help you. \n https://stackoverflow.com/questions/37104383/android-strorage-access-framework-persistable-permission-not-granted-during-asyn?noredirect=1&lq=1. ",
    "shasderias": "req.txt\nresp.txt\nRequest and response from Wireshark, to my untrained eye, looks like the request is truncated?\n. Apologies for the tardy reply, been caught up with work.\nOut of the box, demo server with demo app works fine. However, I've managed to narrow down the cause of the crash.\nIt appears that the crash occurs when a content URI returned from an image pick intent is passed to android-upload-service on an emulated android device. For example:\ncontent://com.google.android.apps.photos.contentprovider/-1/1/content%3A%2F%2Fmedia%2Fexternal%2Ffile%2F115/ORIGINAL/NONE/1782493397\nWhereas (i) a URI returned from an image pick intent on an actual android device, (ii) a URI returned from a file pick intent, and (iii) an absolute path to a file, are all handled correctly.\nAccordingly, you can reproduce the crash by placing FilesPickerActivity.java from the demo app with the FilesPickerActivity.java in this gist.\nRelevant changes extracted for ease of reference:\n```\nprivate void startIntent() {\n    Intent intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n    startActivityForResult(intent, FILE_CODE);\nreturn;\n\n\n```\n```\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    Uri picked = data.getData();\nif (picked != null) {\n    onPickedFiles(Collections.singletonList(picked.toString()));\n}\nreturn;\n\n\n```\nThe modified demo app (with the above changes to FilesPickerActivity.java) works fine on an actual device.\nIf it is helpful, this is the content URI returned from the intent on an actual device:\ncontent://com.google.android.apps.photos.contentprovider/0/1/content%3A%2F%2Fmedia%2Fexternal%2Fimages%2Fmedia%2F2198/ORIGINAL/NONE/2112727210\nI think the \"/-1/\" (\"/0/\" on actual device)  is somehow related to the problem as Utils.getFileForUri is unable to get an absolute path when passed the URI on an emulated android device.\nIn other words, if onActivityResult is written as follows:\n```\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    Uri picked = data.getData();\nif (picked != null) {\n    onPickedFiles(Collections.singletonList(Utils.getFileForUri(picked).getAbsolutePath()));\n}\nreturn;\n\n\n```\nthe app then crashes with\n07-14 17:34:56.914 2382-2382/net.gotev.uploadservicedemo E/AndroidRuntime: FATAL EXCEPTION: main\nProcess: net.gotev.uploadservicedemo, PID: 2382\njava.lang.RuntimeException: Failure delivering result ResultInfo{who=null, request=1, result=-1, data=Intent { dat=content://com.google.android.apps.photos.contentprovider/-1/1/content://media/external/file/116/ORIGINAL/NONE/1993790720 flg=0x1 clip={text/uri-list U:content://com.google.android.apps.photos.contentprovider/-1/1/content%3A%2F%2Fmedia%2Fexternal%2Ffile%2F116/ORIGINAL/NONE/1993790720} }} to activity {net.gotev.uploadservicedemo/net.gotev.uploadservicedemo.MultipartUploadActivity}: java.lang.IllegalArgumentException: Can't decode paths to '-1', only for 'root' paths.\n    at android.app.ActivityThread.deliverResults(ActivityThread.java:4053)\n    at android.app.ActivityThread.handleSendResult(ActivityThread.java:4096)\n    at android.app.ActivityThread.-wrap20(ActivityThread.java)\n    at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1516)\n    at android.os.Handler.dispatchMessage(Handler.java:102)\n    at android.os.Looper.loop(Looper.java:154)\n    at android.app.ActivityThread.main(ActivityThread.java:6077)\n    at java.lang.reflect.Method.invoke(Native Method)\n    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:866)\n    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:756)\nCaused by: java.lang.IllegalArgumentException: Can't decode paths to '-1', only for 'root' paths.\n    at com.nononsenseapps.filepicker.Utils.getFileForUri(Utils.java:73)\n    at net.gotev.uploadservicedemo.utils.FilesPickerActivity.onActivityResult(FilesPickerActivity.java:93)\n    at android.app.Activity.dispatchActivityResult(Activity.java:6915)\n    at android.app.ActivityThread.deliverResults(ActivityThread.java:4049)\n    at android.app.ActivityThread.handleSendResult(ActivityThread.java:4096)\u00a0\n    at android.app.ActivityThread.-wrap20(ActivityThread.java)\u00a0\n    at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1516)\u00a0\n    at android.os.Handler.dispatchMessage(Handler.java:102)\u00a0\n    at android.os.Looper.loop(Looper.java:154)\u00a0\n    at android.app.ActivityThread.main(ActivityThread.java:6077)\u00a0\n    at java.lang.reflect.Method.invoke(Native Method)\u00a0\n    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:866)\u00a0\n    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:756)\n. @gotev The stackoverflow posts pertain to a completely different problem. I'm not getting any permission errors. Given that the truncated file has some of the actual file's content, I don't think it is relevant at all (as if it were a permission issue, I shouldn't be able to access any part of the file).. ",
    "MeTaXaS4": "sorry didn't see it, thanks. ",
    "shweps": "t: null or empty upload ID. Generating it\nt: Created new upload request to 192.168.49.245 with ID: af4168fe-2c2b-48f8-bfc3-fc4bdec2129a\nt: null or empty upload ID. Generating it\nt: Created new upload request to 192.168.49.245 with ID: 4aa50051-069b-4f96-904c-e98f1dc1e0d1\ne: Successfully created new task with class: net.gotev.uploadservice.ftp.FTPUploadTask\ne: Successfully created new task with class: net.gotev.uploadservice.ftp.FTPUploadTask\ne: af4168fe-2c2b-48f8-bfc3-fc4bdec2129a now holds the foreground notification\nk: Connect timeout set to 15000ms\nk: Connecting to 192.168.49.245:1234 as ftp\nk: Connect timeout set to 15000ms\nk: Connecting to 192.168.49.245:1234 as ftp\nk: Socket timeout set to 30000ms. Enabled control keep alive every 15s\nk: Socket timeout set to 30000ms. Enabled control keep alive every 15s\nk: FTP default working directory is: /\nk: Starting FTP upload of: VID_20170308_163550.mp4 to: VID_20170308_163550.mp4\nk: FTP default working directory is: /\nk: Starting FTP upload of: Thumbs.db to: Thumbs.db\nBroadcasting upload progress for af4168fe-2c2b-48f8-bfc3-fc4bdec2129a: 4096 bytes of 13312\nBroadcasting upload completed for af4168fe-2c2b-48f8-bfc3-fc4bdec2129a\ne: af4168fe-2c2b-48f8-bfc3-fc4bdec2129a now un-holded the foreground notification\nk: Logout and disconnect from FTP server: 192.168.49.245:1234\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 4096 bytes of 4081409866\ne: 4aa50051-069b-4f96-904c-e98f1dc1e0d1 now holds the foreground notification\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 1736704 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 4218880 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 6819840 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 9359360 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 11579392 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 13885440 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 16404480 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 18833408 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 21491712 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 24080384 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 26558464 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 29081600 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 31461376 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 34021376 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 36540416 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 39182336 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 41652224 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 44158976 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 46825472 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 49414144 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 52068352 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 54697984 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 57294848 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 60063744 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 62676992 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 65589248 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 69238784 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 71438336 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 74166272 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 76709888 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 79749120 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 82427904 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 86048768 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 88879104 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 91488256 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 93970432 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 96542720 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 99176448 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 101781504 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 104300544 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 106897408 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 110542848 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 112664576 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 115187712 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 117866496 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 120426496 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 123023360 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 125648896 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 128241664 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 131637248 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 133173248 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 135225344 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 137728000 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 140288000 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 142802944 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 145182720 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 147828736 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 150740992 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 152809472 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 155328512 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 157990912 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 160501760 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 162881536 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 165441536 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 167981056 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 170479616 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 173072384 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 175661056 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 178237440 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 180756480 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 183296000 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 185946112 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 188465152 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 190996480 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 193675264 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 196288512 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 198733824 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 201355264 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 203980800 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 206479360 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 209158144 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 211779584 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 214212608 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 216858624 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 219258880 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 221552640 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 223977472 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 226398208 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 229392384 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 230039552 bytes of 4081409866\nBroadcasting upload progress for 4aa50051-069b-4f96-904c-e98f1dc1e0d1: 230043648 bytes of 4081409866. i notice that it still sending data but very very slow. also happened in galaxy A3 with marshmallow. i disable the doze mode and it still happened... have another idea? its slow down almost stop after 15 seconds. Hi Alex Gotev, first of all thank you for the response.\ni have tried all of the above and dose are my results:\n- upload the same files from a mac or pc using filezilla or other ftp client: \n               works fine not as fast but good from end to end.\n- try upload from a virtual device running Android 6+: \n               i didnt test this part.\n- try upload from a real device with Android < 5.0:\n               i have tried to use my on client build on the Apache Commons FTP and it works fine\n               the code i use is :\n               public boolean ftpDownload(FTPFile serverFile) {\n                          String path = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), \n                                                \"Movies\").getAbsolutePath();\n                          File file = new File (path, serverFile.getName());\n                          if (file.exists ()) file.delete ();\n                                   FileOutputStream fileOutputStream = null;\n                                   try {\n                                            fileOutputStream = new FileOutputStream(file);\n                                            long startTime = System.currentTimeMillis();\n                                            boolean success = mFTPClient.retrieveFile(file.getName(), fileOutputStream);\n                                            long endTime = System.currentTimeMillis();\n                                            Log.i(\"TEST\", \"total time for \\\"\" + file.getName() + \"\\\": \" + (endTime \n                                                     startTime));\n                                            return mFTPClient.completePendingCommand();\n                                      } catch (Exception e) {\n                                            e.printStackTrace();\n                                      } finally {\n                                                    try {\n                                                              fileOutputStream.close();\n                                                    } catch (IOException e) {\n                                                              e.printStackTrace();\n                                             }\n                                 }\n                            return false;\n                         }\n             and on lg g6 to lg g5 both android api 6+ and it still works fine. still mutch slower then your's.\n\n\ntry upload with the device screen constantly on.\n           still dose not help.. java\n public synchronized boolean ftpUpload(String srcFilePath, String desFileName) {\n        boolean status = false;\n        try {\n            FileInputStream fileInputStream = new FileInputStream(srcFilePath);\n            mFTPClient.setBufferSize(1024 * 1024);\n            ProgressInputStream progressInput = new ProgressInputStream(fileInputStream.getChannel().size(),\n                    fileInputStream, this);\n            status = mFTPClient.storeFile(desFileName, progressInput);\n            fileInputStream.close();\n            return status;\n        } catch (Exception e) {\n            e.printStackTrace();\n            Log.d(TAG, \"upload failed: \" + e);\n        }\n        return status;\n    }\nmy mistake i have tried both. and the file is 3.8GB movie.mp4. yes i used 3.6 version in my code also ProgressInputStream is wrapper that is made to follow the progress.\ni change to UploadService.BUFFER_SIZE = 1024 * 1024 still didnt help. so i finaly found the issue i needed to set .setSocketTimeout(1000000) because i guess that the default is 15s and the socket turn down after that. still the uplode is slow dou. \n",
    "rathoddeep": "Hello there,\nThank you so much for you valuable reply, it means there is no other option for that issue.. ok thank you but for my temporary solution can you just write code here for resumable upload.. Hello There,\ni just implement some code in your library and its completely working for resume failed image upload.\n. ",
    "VladislavNikolaev": "Sorry, it was my fault, i was trying to upload some huge files in parallel, fixed it by sequenced upload. \nClosing this issue. . ",
    "haneef5k": "@VladislavNikolaev can share your code..i want to know, how to implement sequence  upload..  Thank you @gotev ... .Working perfectly..!. Thanks !. Still even i cant achieve notification on Android Oreo..  if i enable default notification config \n .setNotificationConfig(new UploadNotificationConfig()). i'm getting continues  notification tone. \nAnd  i don't see any recipe how to implement notification channel for this library as beginner.\n'protected UploadNotificationConfig getNotificationConfig(final String uploadId, String title) {\n        UploadNotificationConfig config = new UploadNotificationConfig();\n    PendingIntent clickIntent = PendingIntent.getActivity(\n            getContext(), 1, new Intent(getContext(), MainActivity.class), PendingIntent.FLAG_UPDATE_CURRENT);\n\n    String mbrMajlisUploadChannel = \"mbrmajlis_channel\";\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n\n        String notificationChannelId = params.notificationConfig.getNotificationChannelId();\n       // notificationChannelId = params.notificationConfig.getNotificationChannelId();\n        if (notificationChannelId == null) {\n           // config.setNotificationChannelId(mbrMajlisUploadChannel);\n            notificationChannelId = UploadService.NAMESPACE;\n        }\n\n        config.setNotificationChannelId(notificationChannelId);\n\n    }\n\n    config.setTitleForAllStatuses((title))\n            .setRingToneEnabled(false)\n            .setClickIntentForAllStatuses(clickIntent)\n            .setIconForAllStatuses(R.mipmap.ic_launcher)\n            .setLargeIconForAllStatuses(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))\n            .setClearOnActionForAllStatuses(true);\n\n//        config.getProgress().message = \"Uploaded \" + UPLOADED_FILES + \" of \" + TOTAL_FILES\n//                + \" at \" + UPLOAD_RATE + \" - \" + PROGRESS;\n//        config.getProgress().iconResourceID = R.drawable.ic_upload;\n//        config.getProgress().iconColorResourceID = Color.BLUE;\n    config.getCompleted().message = \"Upload completed successfully\";\n\n//        config.getCompleted().iconResourceID = R.drawable.ic_upload_success;\n//        config.getCompleted().iconColorResourceID = Color.GREEN;\n    config.getError().message = \"Error while uploading\";\n\n//        config.getError().iconResourceID = R.drawable.ic_upload_error;\n//        config.getError().iconColorResourceID = Color.RED;\n    config.getCancelled().message = \"Upload has been cancelled\";\n\n//        config.getCancelled().iconResourceID = R.drawable.ic_cancelled;\n//        config.getCancelled().iconColorResourceID = Color.YELLOW;\n    return config;\n}`.\n",
    "kortstin": "Thanks! What piece of code would I need to change to just pass the content Uri as a String directly? . Awesome! I was hoping it was possible. Sounds good though! When could the plugin for that feature be integrated into UploadService? . Okay cool! I think there is an implementation for NetCipher using HttpURLConnection in a sample they provided. Let me see if I can find it.\n. Okay here is a link to a sample of HttpURLConnection using NetCipher. \nhttps://github.com/guardianproject/NetCipher/tree/master/sample-hurl\nWould this be sufficient as an example? They have one for OkHttp3 as well. Awesome!! Thanks so much! So would that Application delegate code snippet go within the upload method I have in MainActivity?. Hey thank you so much for your response and the update to the wiki. So as far as the Info Logs in each part of  initCipher( ) method, I can only get as far as the one that states \"Initializing NetCipher Client. The OrbotHelper.get(this).init statement seemingly is never reached and a connection is never actually established. I checked the actual class that holds the OrbotHelper commands and it is supposed to show user a prompt to install Orbot proxy app if it is not already installed. It never does though.. ",
    "gamer3dx": "\nMinSDK: Starting with Support Library version 26.0.0, the minimum supported API level has changed to API v14 for all support library packages. And work with channel ID completely implemented in 26.0.0-beta1.\nChannel name: yep, i forgot about the NAMESPACE property. My bad. Name net.gotev.uploadservice was selected only to provide default channel for the library, with minimal functionality. Main idea was to give access to channelId, so developer can create notification channels somewhere outside the library, if he will decide to use his own channels. And that's also related to \nset four different channel names for the four notification statuses.\n\n\nSingle notification channel: Yes, we can do it, but all notifications posted to a notification channel should behave the same.  So I thought that because all four notification channels related to the same process - we can use single channel for of them.\nI've added protected createNotificationChannel on purpose, so any user of this library could override it while implementing his custom UploadTask class and set all required properties on his own, cause importance is not only property - we also can change sound, lights, vibration, behavior on lockscreen, DND settings. So, if we gonna pass notification channel importance - we also should pass light (boolean), color (Color), vibration (boolean), vibration pattern (long[]) and so on.. Seems fine for me. I will apply all necessary changes tomorrow.. \n",
    "parubabr": "Hi! Thank you for trying to help me!\nHere is the error:\n\nE/dalvikvm-heap: Out of memory on a 67100972-byte allocation.\nI/dalvikvm: \"pool-1-thread-1\" prio=5 tid=11 RUNNABLE\nI/dalvikvm:   | group=\"main\" sCount=0 dsCount=0 obj=0x43b0d490 self=0x63501a10\nI/dalvikvm:   | sysTid=30966 nice=0 sched=0/0 cgrp=apps handle=1662775760\nI/dalvikvm:   | state=R schedstat=( 441852478 10902184 347 ) utm=25 stm=19 core=1\nI/dalvikvm:     at java.io.ByteArrayOutputStream.expand(ByteArrayOutputStream.java:~91)\nI/dalvikvm:     at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:201)\nI/dalvikvm:     at com.android.okhttp.internal.http.RetryableOutputStream.write(RetryableOutputStream.java:64)\nI/dalvikvm:     at net.gotev.uploadservice.http.impl.HurlBodyWriter.write(HurlBodyWriter.java:27)\nI/dalvikvm:     at net.gotev.uploadservice.http.BodyWriter.writeStream(BodyWriter.java:51)\nI/dalvikvm:     at net.gotev.uploadservice.MultipartUploadTask.writeFiles(MultipartUploadTask.java:141)\nI/dalvikvm:     at net.gotev.uploadservice.MultipartUploadTask.onBodyReady(MultipartUploadTask.java:66)\nI/dalvikvm:     at net.gotev.uploadservice.http.impl.HurlStackConnection.getResponse(HurlStackConnection.java:145)\nI/dalvikvm:     at net.gotev.uploadservice.HttpUploadTask.upload(HttpUploadTask.java:72)\nI/dalvikvm:     at net.gotev.uploadservice.UploadTask.run(UploadTask.java:136)\nI/dalvikvm:     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\nI/dalvikvm:     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\nI/dalvikvm:     at java.lang.Thread.run(Thread.java:841)\n\nI am testing with an Asus Zenfone 5 and Android 4.4.2\nMy knoledge about this subject is limited, I didn't understand what you mean with \"Are you using OkHttp or HttpUrlConnection stack?\". I followed instructions here and some videos on Youtube to include your library in my little project. I also added this line to build.gradle:\ncompile 'net.gotev:uploadservice-okhttp:3.3.1'\nThanks again!. > W/dalvikvm: threadid=11: thread exiting with uncaught exception (group=0x430f2140)\n\nE/AndroidRuntime: FATAL EXCEPTION: pool-1-thread-1\n    Process: com.mysite.testuploadfilegotev, PID: 4754\n    java.lang.OutOfMemoryError\n        at java.io.ByteArrayOutputStream.expand(ByteArrayOutputStream.java:91)\n        at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:201)\n        at com.android.okhttp.internal.http.RetryableOutputStream.write(RetryableOutputStream.java:64)\n        at net.gotev.uploadservice.http.impl.HurlBodyWriter.write(HurlBodyWriter.java:27)\n        at net.gotev.uploadservice.http.BodyWriter.writeStream(BodyWriter.java:51)\n        at net.gotev.uploadservice.MultipartUploadTask.writeFiles(MultipartUploadTask.java:141)\n        at net.gotev.uploadservice.MultipartUploadTask.onBodyReady(MultipartUploadTask.java:66)\n        at net.gotev.uploadservice.http.impl.HurlStackConnection.getResponse(HurlStackConnection.java:145)\n        at net.gotev.uploadservice.HttpUploadTask.upload(HttpUploadTask.java:72)\n        at net.gotev.uploadservice.UploadTask.run(UploadTask.java:136)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n        at java.lang.Thread.run(Thread.java:841). This solved the problem! I was searching for a solution and making tests for 2 days... Thank you so much! I hope you lot of success! Btw, I live in Brazil but all my family are from Italy! Cheers!. \n",
    "lxs137": "Thank you! It fix my problem.. ",
    "meparam": "Please have a look i am sharing the complete gradle file\n```groovy\napply plugin: 'com.android.application'\nandroid {\n    compileSdkVersion 26\n    buildToolsVersion '26.0.0'\n    defaultConfig {\n        applicationId \"com.param.sample\"\n        minSdkVersion 16\n        targetSdkVersion 21\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n    configurations.all {\n        resolutionStrategy {\n            force 'com.android.support:support-v4:26.+'\n            force 'com.android.support:appcompat-v7:26.+'\n        }\n    }\n}\ndef uploadServiceVersion = \"3.4\"\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {\n        exclude group: 'com.android.support', module: 'support-annotations'\n    })\ncompile project(':instacropper')\n**compile 'com.android.support:support-v4:26.+'\ncompile 'com.android.support:design:26.+'\ncompile 'com.android.support:appcompat-v7:26.+'**\ncompile 'com.android.support.constraint:constraint-layout:1.0.2'\ntestCompile 'junit:junit:4.12'\ncompile \"net.gotev:uploadservice:$uploadServiceVersion\"\n\n}\n```. I have done what you have suggested. still same error , no change in error so far . I think this is problem with only 3.4 version. Demo works fine but with gradle build it is giving error. Even 3.3 is also working. ",
    "vincentsong": "I got same problem, any plan to fix it?. ",
    "MahmoudMostafa125": "this is my log and the debug enabled \n`09-12 21:48:10.101 D/dalvikvm: Late-enabling CheckJNI\n09-12 21:48:10.171 D/ActivityThread: handleBindApplication:com.mahmoud.camera_option\n09-12 21:48:10.201 W/ApplicationPackageManager: getCSCPackageItemText()\n09-12 21:48:10.201 D/DisplayManager: DisplayManager()\n09-12 21:48:10.201 I/dalvikvm: Could not find method android.view.Window$Callback.onPointerCaptureChanged, referenced from method android.support.v7.view.WindowCallbackWrapper.onPointerCaptureChanged\n09-12 21:48:10.201 W/dalvikvm: VFY: unable to resolve interface method 21264: Landroid/view/Window$Callback;.onPointerCaptureChanged (Z)V\n09-12 21:48:10.201 D/dalvikvm: VFY: replacing opcode 0x72 at 0x0002\n09-12 21:48:10.201 I/dalvikvm: Could not find method android.view.Window$Callback.onProvideKeyboardShortcuts, referenced from method android.support.v7.view.WindowCallbackWrapper.onProvideKeyboardShortcuts\n09-12 21:48:10.201 W/dalvikvm: VFY: unable to resolve interface method 21266: Landroid/view/Window$Callback;.onProvideKeyboardShortcuts (Ljava/util/List;Landroid/view/Menu;I)V\n09-12 21:48:10.201 D/dalvikvm: VFY: replacing opcode 0x72 at 0x0002\n09-12 21:48:10.211 W/dalvikvm: VFY: unable to find class referenced in signature (Landroid/view/SearchEvent;)\n09-12 21:48:10.211 I/dalvikvm: Could not find method android.view.Window$Callback.onSearchRequested, referenced from method android.support.v7.view.WindowCallbackWrapper.onSearchRequested\n09-12 21:48:10.211 W/dalvikvm: VFY: unable to resolve interface method 21268: Landroid/view/Window$Callback;.onSearchRequested (Landroid/view/SearchEvent;)Z\n09-12 21:48:10.211 D/dalvikvm: VFY: replacing opcode 0x72 at 0x0002\n09-12 21:48:10.211 I/dalvikvm: Could not find method android.view.Window$Callback.onWindowStartingActionMode, referenced from method android.support.v7.view.WindowCallbackWrapper.onWindowStartingActionMode\n09-12 21:48:10.211 W/dalvikvm: VFY: unable to resolve interface method 21272: Landroid/view/Window$Callback;.onWindowStartingActionMode (Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;\n09-12 21:48:10.211 D/dalvikvm: VFY: replacing opcode 0x72 at 0x0002\n09-12 21:48:10.211 I/dalvikvm: Could not find method android.content.res.TypedArray.getChangingConfigurations, referenced from method android.support.v7.widget.TintTypedArray.getChangingConfigurations\n09-12 21:48:10.211 W/dalvikvm: VFY: unable to resolve virtual method 648: Landroid/content/res/TypedArray;.getChangingConfigurations ()I\n09-12 21:48:10.211 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0002\n09-12 21:48:10.211 I/dalvikvm: Could not find method android.content.res.TypedArray.getType, referenced from method android.support.v7.widget.TintTypedArray.getType\n09-12 21:48:10.211 W/dalvikvm: VFY: unable to resolve virtual method 670: Landroid/content/res/TypedArray;.getType (I)I\n09-12 21:48:10.211 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0008\n09-12 21:48:10.221 I/dalvikvm: Could not find method android.content.Context.createDeviceProtectedStorageContext, referenced from method android.support.v4.content.ContextCompat.createDeviceProtectedStorageContext\n09-12 21:48:10.221 W/dalvikvm: VFY: unable to resolve virtual method 415: Landroid/content/Context;.createDeviceProtectedStorageContext ()Landroid/content/Context;\n09-12 21:48:10.221 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:10.221 I/dalvikvm: Could not find method android.content.Context.getCodeCacheDir, referenced from method android.support.v4.content.ContextCompat.getCodeCacheDir\n09-12 21:48:10.221 W/dalvikvm: VFY: unable to resolve virtual method 421: Landroid/content/Context;.getCodeCacheDir ()Ljava/io/File;\n09-12 21:48:10.221 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:10.221 I/dalvikvm: Could not find method android.content.Context.getColor, referenced from method android.support.v4.content.ContextCompat.getColor\n09-12 21:48:10.221 W/dalvikvm: VFY: unable to resolve virtual method 422: Landroid/content/Context;.getColor (I)I\n09-12 21:48:10.221 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:10.221 I/dalvikvm: Could not find method android.content.Context.getColorStateList, referenced from method android.support.v4.content.ContextCompat.getColorStateList\n09-12 21:48:10.221 W/dalvikvm: VFY: unable to resolve virtual method 423: Landroid/content/Context;.getColorStateList (I)Landroid/content/res/ColorStateList;\n09-12 21:48:10.221 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:10.221 I/dalvikvm: Could not find method android.content.Context.getDataDir, referenced from method android.support.v4.content.ContextCompat.getDataDir\n09-12 21:48:10.221 W/dalvikvm: VFY: unable to resolve virtual method 425: Landroid/content/Context;.getDataDir ()Ljava/io/File;\n09-12 21:48:10.221 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:10.221 I/dalvikvm: Could not find method android.content.Context.getDrawable, referenced from method android.support.v4.content.ContextCompat.getDrawable\n09-12 21:48:10.221 W/dalvikvm: VFY: unable to resolve virtual method 426: Landroid/content/Context;.getDrawable (I)Landroid/graphics/drawable/Drawable;\n09-12 21:48:10.221 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:10.221 I/dalvikvm: Could not find method android.content.Context.getNoBackupFilesDir, referenced from method android.support.v4.content.ContextCompat.getNoBackupFilesDir\n09-12 21:48:10.221 W/dalvikvm: VFY: unable to resolve virtual method 433: Landroid/content/Context;.getNoBackupFilesDir ()Ljava/io/File;\n09-12 21:48:10.221 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:10.221 I/dalvikvm: Could not find method android.content.Context.isDeviceProtectedStorage, referenced from method android.support.v4.content.ContextCompat.isDeviceProtectedStorage\n09-12 21:48:10.221 W/dalvikvm: VFY: unable to resolve virtual method 446: Landroid/content/Context;.isDeviceProtectedStorage ()Z\n09-12 21:48:10.221 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:10.221 I/dalvikvm: Could not find method android.content.Context.startForegroundService, referenced from method android.support.v4.content.ContextCompat.startForegroundService\n09-12 21:48:10.221 W/dalvikvm: VFY: unable to resolve virtual method 461: Landroid/content/Context;.startForegroundService (Landroid/content/Intent;)Landroid/content/ComponentName;\n09-12 21:48:10.221 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:10.271 I/dalvikvm: Could not find method android.content.Context.getColorStateList, referenced from method android.support.v7.content.res.AppCompatResources.getColorStateList\n09-12 21:48:10.271 W/dalvikvm: VFY: unable to resolve virtual method 423: Landroid/content/Context;.getColorStateList (I)Landroid/content/res/ColorStateList;\n09-12 21:48:10.271 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:10.281 W/dalvikvm: VFY: unable to find class referenced in signature (Landroid/graphics/drawable/Icon;)\n09-12 21:48:10.281 I/dalvikvm: Could not find method android.widget.ImageView.setImageIcon, referenced from method android.support.v7.widget.AppCompatImageView.setImageIcon\n09-12 21:48:10.281 W/dalvikvm: VFY: unable to resolve virtual method 21858: Landroid/widget/ImageView;.setImageIcon (Landroid/graphics/drawable/Icon;)V\n09-12 21:48:10.281 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0000\n09-12 21:48:10.281 I/dalvikvm: Could not find method android.content.res.Resources.getDrawable, referenced from method android.support.v7.widget.ResourcesWrapper.getDrawable\n09-12 21:48:10.281 W/dalvikvm: VFY: unable to resolve virtual method 611: Landroid/content/res/Resources;.getDrawable (ILandroid/content/res/Resources$Theme;)Landroid/graphics/drawable/Drawable;\n09-12 21:48:10.281 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0002\n09-12 21:48:10.281 I/dalvikvm: Could not find method android.content.res.Resources.getDrawableForDensity, referenced from method android.support.v7.widget.ResourcesWrapper.getDrawableForDensity\n09-12 21:48:10.281 W/dalvikvm: VFY: unable to resolve virtual method 613: Landroid/content/res/Resources;.getDrawableForDensity (IILandroid/content/res/Resources$Theme;)Landroid/graphics/drawable/Drawable;\n09-12 21:48:10.281 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0002\n09-12 21:48:10.291 E/dalvikvm: Could not find class 'android.graphics.drawable.RippleDrawable', referenced from method android.support.v7.widget.AppCompatImageHelper.hasOverlappingRendering\n09-12 21:48:10.291 W/dalvikvm: VFY: unable to resolve instanceof 184 (Landroid/graphics/drawable/RippleDrawable;) in Landroid/support/v7/widget/AppCompatImageHelper;\n09-12 21:48:10.291 D/dalvikvm: VFY: replacing opcode 0x20 at 0x000c\n09-12 21:48:10.291 I/dalvikvm: Could not find method android.widget.TextView.getAutoSizeMaxTextSize, referenced from method android.support.v7.widget.AppCompatTextView.getAutoSizeMaxTextSize\n09-12 21:48:10.291 W/dalvikvm: VFY: unable to resolve virtual method 22154: Landroid/widget/TextView;.getAutoSizeMaxTextSize ()I\n09-12 21:48:10.291 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0006\n09-12 21:48:10.291 I/dalvikvm: Could not find method android.widget.TextView.getAutoSizeMinTextSize, referenced from method android.support.v7.widget.AppCompatTextView.getAutoSizeMinTextSize\n09-12 21:48:10.291 W/dalvikvm: VFY: unable to resolve virtual method 22155: Landroid/widget/TextView;.getAutoSizeMinTextSize ()I\n09-12 21:48:10.291 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0006\n09-12 21:48:10.291 I/dalvikvm: Could not find method android.widget.TextView.getAutoSizeStepGranularity, referenced from method android.support.v7.widget.AppCompatTextView.getAutoSizeStepGranularity\n09-12 21:48:10.291 W/dalvikvm: VFY: unable to resolve virtual method 22156: Landroid/widget/TextView;.getAutoSizeStepGranularity ()I\n09-12 21:48:10.291 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0006\n09-12 21:48:10.291 I/dalvikvm: Could not find method android.widget.TextView.getAutoSizeTextAvailableSizes, referenced from method android.support.v7.widget.AppCompatTextView.getAutoSizeTextAvailableSizes\n09-12 21:48:10.291 W/dalvikvm: VFY: unable to resolve virtual method 22157: Landroid/widget/TextView;.getAutoSizeTextAvailableSizes ()[I\n09-12 21:48:10.291 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0006\n09-12 21:48:10.291 I/dalvikvm: Could not find method android.widget.TextView.getAutoSizeTextType, referenced from method android.support.v7.widget.AppCompatTextView.getAutoSizeTextType\n09-12 21:48:10.291 W/dalvikvm: VFY: unable to resolve virtual method 22158: Landroid/widget/TextView;.getAutoSizeTextType ()I\n09-12 21:48:10.291 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0008\n09-12 21:48:10.291 I/dalvikvm: Could not find method android.widget.TextView.setAutoSizeTextTypeUniformWithConfiguration, referenced from method android.support.v7.widget.AppCompatTextView.setAutoSizeTextTypeUniformWithConfiguration\n09-12 21:48:10.291 W/dalvikvm: VFY: unable to resolve virtual method 22208: Landroid/widget/TextView;.setAutoSizeTextTypeUniformWithConfiguration (IIII)V\n09-12 21:48:10.291 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0006\n09-12 21:48:10.291 I/dalvikvm: Could not find method android.widget.TextView.setAutoSizeTextTypeUniformWithPresetSizes, referenced from method android.support.v7.widget.AppCompatTextView.setAutoSizeTextTypeUniformWithPresetSizes\n09-12 21:48:10.291 W/dalvikvm: VFY: unable to resolve virtual method 22209: Landroid/widget/TextView;.setAutoSizeTextTypeUniformWithPresetSizes ([II)V\n09-12 21:48:10.291 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0006\n09-12 21:48:10.291 I/dalvikvm: Could not find method android.widget.TextView.setAutoSizeTextTypeWithDefaults, referenced from method android.support.v7.widget.AppCompatTextView.setAutoSizeTextTypeWithDefaults\n09-12 21:48:10.291 W/dalvikvm: VFY: unable to resolve virtual method 22210: Landroid/widget/TextView;.setAutoSizeTextTypeWithDefaults (I)V\n09-12 21:48:10.291 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0006\n09-12 21:48:10.301 I/dalvikvm: Could not find method android.widget.TextView.getAutoSizeStepGranularity, referenced from method android.support.v7.widget.AppCompatTextHelper.loadFromAttributes\n09-12 21:48:10.301 W/dalvikvm: VFY: unable to resolve virtual method 22156: Landroid/widget/TextView;.getAutoSizeStepGranularity ()I\n09-12 21:48:10.301 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0197\n09-12 21:48:10.301 I/dalvikvm: Could not find method android.text.StaticLayout$Builder.obtain, referenced from method android.support.v7.widget.AppCompatTextViewAutoSizeHelper.createStaticLayoutForMeasuring\n09-12 21:48:10.301 W/dalvikvm: VFY: unable to resolve static method 20441: Landroid/text/StaticLayout$Builder;.obtain (Ljava/lang/CharSequence;IILandroid/text/TextPaint;I)Landroid/text/StaticLayout$Builder;\n09-12 21:48:10.301 D/dalvikvm: VFY: replacing opcode 0x71 at 0x0013\n09-12 21:48:10.321 I/dalvikvm: Could not find method android.view.ViewConfiguration.getScaledHorizontalScrollFactor, referenced from method android.support.v4.view.ViewConfigurationCompat.getScaledHorizontalScrollFactor\n09-12 21:48:10.321 W/dalvikvm: VFY: unable to resolve virtual method 21052: Landroid/view/ViewConfiguration;.getScaledHorizontalScrollFactor ()F\n09-12 21:48:10.321 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:10.321 I/dalvikvm: Could not find method android.view.ViewConfiguration.getScaledVerticalScrollFactor, referenced from method android.support.v4.view.ViewConfigurationCompat.getScaledVerticalScrollFactor\n09-12 21:48:10.321 W/dalvikvm: VFY: unable to resolve virtual method 21057: Landroid/view/ViewConfiguration;.getScaledVerticalScrollFactor ()F\n09-12 21:48:10.321 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:10.341 E/lssset: false\n09-12 21:48:10.341 E/lssset: false\n09-12 21:48:10.341 E/lssset: false\n09-12 21:48:10.341 E/lssset: false\n09-12 21:48:10.341 E/lssset: false\n09-12 21:48:10.341 E/lssset: false\n09-12 21:48:10.341 E/lssset: false\n09-12 21:48:10.341 E/lssset: false\n09-12 21:48:10.341 E/lssset: false\n09-12 21:48:10.341 E/lssset: false\n09-12 21:48:10.391 D/OpenGLRenderer: Enabling debug mode 0\n09-12 21:48:10.872 D/dalvikvm: GC_FOR_ALLOC freed 1639K, 18% free 12078K/14648K, paused 26ms, total 27ms\n09-12 21:48:10.872 W/CursorWrapperInner: Cursor finalized without prior close()\n09-12 21:48:10.902 D/dalvikvm: GC_FOR_ALLOC freed 37K, 18% free 12124K/14728K, paused 20ms, total 20ms\n09-12 21:48:10.932 D/dalvikvm: GC_FOR_ALLOC freed 1K, 18% free 12203K/14808K, paused 20ms, total 20ms\n09-12 21:48:11.112 I/Timeline: Timeline: Activity_idle id: android.os.BinderProxy@41e020d8 time:58329292\n09-12 21:48:15.546 E/paaath: /storage/emulated/0/SHAREit/pictures/IMG20170904010822.jpg\n09-12 21:48:15.546 E/liststringss: [/storage/emulated/0/SHAREit/pictures/IMG20170904010822.jpg]\n09-12 21:48:16.257 E/paaath: /storage/emulated/0/SHAREit/pictures/IMG20170904010051.jpg\n09-12 21:48:16.257 E/liststringss: [/storage/emulated/0/SHAREit/pictures/IMG20170904010822.jpg, /storage/emulated/0/SHAREit/pictures/IMG20170904010051.jpg]\n09-12 21:48:17.268 E/liststringss: [/storage/emulated/0/SHAREit/pictures/IMG20170904010822.jpg]\n09-12 21:48:18.079 E/paaath: /storage/emulated/0/SHAREit/pictures/IMG20170904005843.jpg\n09-12 21:48:18.079 E/liststringss: [/storage/emulated/0/SHAREit/pictures/IMG20170904010822.jpg, /storage/emulated/0/SHAREit/pictures/IMG20170904005843.jpg]\n09-12 21:48:20.631 E/paaath: /storage/emulated/0/SHAREit/pictures/IMG20170904005759.jpg\n09-12 21:48:20.631 E/liststringss: [/storage/emulated/0/SHAREit/pictures/IMG20170904010822.jpg, /storage/emulated/0/SHAREit/pictures/IMG20170904005843.jpg, /storage/emulated/0/SHAREit/pictures/IMG20170904005759.jpg]\n09-12 21:48:24.205 I/Timeline: Timeline: Activity_launch_request id:com.mahmoud.camera_option time:58342384\n09-12 21:48:24.225 W/ApplicationPackageManager: getCSCPackageItemText()\n09-12 21:48:24.235 I/dalvikvm: Could not find method android.support.design.widget.AppBarLayout.setKeyboardNavigationCluster, referenced from method android.support.design.widget.AppBarLayout.\n09-12 21:48:24.235 W/dalvikvm: VFY: unable to resolve virtual method 2919: Landroid/support/design/widget/AppBarLayout;.setKeyboardNavigationCluster (Z)V\n09-12 21:48:24.235 D/dalvikvm: VFY: replacing opcode 0x6e at 0x006e\n09-12 21:48:24.235 I/dalvikvm: Could not find method android.support.design.widget.AppBarLayout.setTouchscreenBlocksFocus, referenced from method android.support.design.widget.AppBarLayout.\n09-12 21:48:24.235 W/dalvikvm: VFY: unable to resolve virtual method 2922: Landroid/support/design/widget/AppBarLayout;.setTouchscreenBlocksFocus (Z)V\n09-12 21:48:24.235 D/dalvikvm: VFY: replacing opcode 0x6e at 0x007f\n09-12 21:48:24.295 I/dalvikvm: Could not find method android.widget.Button.getAutoSizeMaxTextSize, referenced from method android.support.v7.widget.AppCompatButton.getAutoSizeMaxTextSize\n09-12 21:48:24.295 W/dalvikvm: VFY: unable to resolve virtual method 21622: Landroid/widget/Button;.getAutoSizeMaxTextSize ()I\n09-12 21:48:24.295 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0006\n09-12 21:48:24.295 I/dalvikvm: Could not find method android.widget.Button.getAutoSizeMinTextSize, referenced from method android.support.v7.widget.AppCompatButton.getAutoSizeMinTextSize\n09-12 21:48:24.295 W/dalvikvm: VFY: unable to resolve virtual method 21623: Landroid/widget/Button;.getAutoSizeMinTextSize ()I\n09-12 21:48:24.295 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0006\n09-12 21:48:24.295 I/dalvikvm: Could not find method android.widget.Button.getAutoSizeStepGranularity, referenced from method android.support.v7.widget.AppCompatButton.getAutoSizeStepGranularity\n09-12 21:48:24.295 W/dalvikvm: VFY: unable to resolve virtual method 21624: Landroid/widget/Button;.getAutoSizeStepGranularity ()I\n09-12 21:48:24.295 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0006\n09-12 21:48:24.295 I/dalvikvm: Could not find method android.widget.Button.getAutoSizeTextAvailableSizes, referenced from method android.support.v7.widget.AppCompatButton.getAutoSizeTextAvailableSizes\n09-12 21:48:24.295 W/dalvikvm: VFY: unable to resolve virtual method 21625: Landroid/widget/Button;.getAutoSizeTextAvailableSizes ()[I\n09-12 21:48:24.295 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0006\n09-12 21:48:24.295 I/dalvikvm: Could not find method android.widget.Button.getAutoSizeTextType, referenced from method android.support.v7.widget.AppCompatButton.getAutoSizeTextType\n09-12 21:48:24.295 W/dalvikvm: VFY: unable to resolve virtual method 21626: Landroid/widget/Button;.getAutoSizeTextType ()I\n09-12 21:48:24.295 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0008\n09-12 21:48:24.295 I/dalvikvm: Could not find method android.widget.Button.setAutoSizeTextTypeUniformWithConfiguration, referenced from method android.support.v7.widget.AppCompatButton.setAutoSizeTextTypeUniformWithConfiguration\n09-12 21:48:24.295 W/dalvikvm: VFY: unable to resolve virtual method 21635: Landroid/widget/Button;.setAutoSizeTextTypeUniformWithConfiguration (IIII)V\n09-12 21:48:24.295 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0006\n09-12 21:48:24.295 I/dalvikvm: Could not find method android.widget.Button.setAutoSizeTextTypeUniformWithPresetSizes, referenced from method android.support.v7.widget.AppCompatButton.setAutoSizeTextTypeUniformWithPresetSizes\n09-12 21:48:24.295 W/dalvikvm: VFY: unable to resolve virtual method 21636: Landroid/widget/Button;.setAutoSizeTextTypeUniformWithPresetSizes ([II)V\n09-12 21:48:24.295 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0006\n09-12 21:48:24.295 I/dalvikvm: Could not find method android.widget.Button.setAutoSizeTextTypeWithDefaults, referenced from method android.support.v7.widget.AppCompatButton.setAutoSizeTextTypeWithDefaults\n09-12 21:48:24.295 W/dalvikvm: VFY: unable to resolve virtual method 21637: Landroid/widget/Button;.setAutoSizeTextTypeWithDefaults (I)V\n09-12 21:48:24.295 D/dalvikvm: VFY: replacing opcode 0x6f at 0x0006\n09-12 21:48:24.335 W/ResourceType: Too many attribute references, stopped at: 0x01010034\n09-12 21:48:24.335 W/ResourceType: Too many attribute references, stopped at: 0x01010034\n09-12 21:48:24.345 E/lissssts: [/storage/emulated/0/SHAREit/pictures/IMG20170904010822.jpg, /storage/emulated/0/SHAREit/pictures/IMG20170904005843.jpg, /storage/emulated/0/SHAREit/pictures/IMG20170904005759.jpg]\n09-12 21:48:24.345 E/imgpaths: /storage/emulated/0/SHAREit/pictures/IMG20170904010822.jpg\n09-12 21:48:24.345 E/size\u00a0:: 3868\n09-12 21:48:24.355 I/dalvikvm-heap: Grow heap (frag case) to 18.381MB for 3244816-byte allocation\n09-12 21:48:24.945 I/dalvikvm-heap: Grow heap (frag case) to 20.213MB for 1920016-byte allocation\n09-12 21:48:25.125 I/dalvikvm-heap: Grow heap (frag case) to 22.066MB for 1920016-byte allocation\n09-12 21:48:25.186 E/size\u00a0after\u00a0:: 1875\n09-12 21:48:25.206 E/imgpaths: /storage/emulated/0/SHAREit/pictures/IMG20170904005843.jpg\n09-12 21:48:25.206 E/size\u00a0:: 1767\n09-12 21:48:25.236 D/dalvikvm: GC_FOR_ALLOC freed 7176K, 40% free 14116K/23460K, paused 23ms, total 23ms\n09-12 21:48:25.536 D/dalvikvm: GC_FOR_ALLOC freed 73K, 14% free 15993K/18400K, paused 23ms, total 23ms\n09-12 21:48:25.536 I/dalvikvm-heap: Grow heap (frag case) to 18.051MB for 1080016-byte allocation\n09-12 21:48:25.656 D/dalvikvm: GC_FOR_ALLOC freed 3011K, 28% free 14059K/19476K, paused 21ms, total 21ms\n09-12 21:48:25.686 E/size\u00a0after\u00a0:: 1054\n09-12 21:48:25.686 D/UploadService: UploadRequest - setting provided upload ID\n09-12 21:48:25.686 D/UploadService: UploadRequest - Created new upload request to http://192.168.1.5/camera_option/upload.php with ID: c7026451-57b0-42af-8f92-87fe06fcc0fd\n09-12 21:48:25.686 D/UploadService: MultipartUploadRequest - Auto-detected MIME type for /storage/emulated/0/TMMFOLDER/tmp.png is: image/png\n09-12 21:48:25.686 D/UploadService: MultipartUploadRequest - Using original file name: tmp.png\n09-12 21:48:25.696 E/imgpaths: /storage/emulated/0/SHAREit/pictures/IMG20170904005759.jpg\n09-12 21:48:25.696 E/size\u00a0:: 1999\n09-12 21:48:25.726 D/dalvikvm: GC_FOR_ALLOC freed 1097K, 28% free 14059K/19476K, paused 21ms, total 21ms\n09-12 21:48:25.726 I/dalvikvm-heap: Grow heap (frag case) to 17.038MB for 1997584-byte allocation\n09-12 21:48:26.046 D/dalvikvm: GC_FOR_ALLOC freed 16K, 26% free 15994K/21428K, paused 20ms, total 21ms\n09-12 21:48:26.167 D/dalvikvm: GC_FOR_ALLOC freed 3010K, 20% free 14059K/17520K, paused 22ms, total 22ms\n09-12 21:48:26.197 E/size\u00a0after\u00a0:: 1054\n09-12 21:48:26.197 D/UploadService: UploadRequest - setting provided upload ID\n09-12 21:48:26.197 D/UploadService: UploadRequest - Created new upload request to http://192.168.1.5/camera_option/upload.php with ID: 80550c54-5ce9-4b75-b52d-3139d2581351\n09-12 21:48:26.197 D/UploadService: MultipartUploadRequest - Auto-detected MIME type for /storage/emulated/0/TMMFOLDER/tmp.png is: image/png\n09-12 21:48:26.197 D/UploadService: MultipartUploadRequest - Using original file name: tmp.png\n09-12 21:48:26.217 I/UploadService: UploadService - Starting service with namespace: com.mahmoud.camera_option, upload pool size: 4, 5s idle thread keep alive time. Foreground execution is enabled\n09-12 21:48:26.217 I/dalvikvm: Could not find method android.app.NotificationManager.getNotificationChannel, referenced from method net.gotev.uploadservice.UploadTask.init\n09-12 21:48:26.217 W/dalvikvm: VFY: unable to resolve virtual method 320: Landroid/app/NotificationManager;.getNotificationChannel (Ljava/lang/String;)Landroid/app/NotificationChannel;\n09-12 21:48:26.217 D/dalvikvm: VFY: replacing opcode 0x6e at 0x003e\n09-12 21:48:26.217 D/dalvikvm: DexOpt: unable to opt direct call 0x0139 at 0x49 in Lnet/gotev/uploadservice/UploadTask;.init\n09-12 21:48:26.227 D/UploadService: UploadService - Successfully created new task with class: net.gotev.uploadservice.MultipartUploadTask\n09-12 21:48:26.227 I/UploadService: UploadService - Starting service with namespace: com.mahmoud.camera_option, upload pool size: 4, 5s idle thread keep alive time. Foreground execution is enabled\n09-12 21:48:26.227 D/UploadService: UploadService - Successfully created new task with class: net.gotev.uploadservice.MultipartUploadTask\n09-12 21:48:26.227 I/dalvikvm: Could not find method android.app.Notification.getBadgeIconType, referenced from method android.support.v4.app.NotificationCompat.getBadgeIconType\n09-12 21:48:26.227 W/dalvikvm: VFY: unable to resolve virtual method 305: Landroid/app/Notification;.getBadgeIconType ()I\n09-12 21:48:26.227 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:26.227 D/dalvikvm: DexOpt: couldn't find field Landroid/app/Notification;.category\n09-12 21:48:26.227 W/dalvikvm: VFY: unable to resolve instance field 8\n09-12 21:48:26.227 D/dalvikvm: VFY: replacing opcode 0x54 at 0x0006\n09-12 21:48:26.227 I/dalvikvm: Could not find method android.app.Notification.getChannelId, referenced from method android.support.v4.app.NotificationCompat.getChannelId\n09-12 21:48:26.227 W/dalvikvm: VFY: unable to resolve virtual method 306: Landroid/app/Notification;.getChannelId ()Ljava/lang/String;\n09-12 21:48:26.227 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:26.227 I/dalvikvm: Could not find method android.app.Notification.getGroup, referenced from method android.support.v4.app.NotificationCompat.getGroup\n09-12 21:48:26.227 W/dalvikvm: VFY: unable to resolve virtual method 307: Landroid/app/Notification;.getGroup ()Ljava/lang/String;\n09-12 21:48:26.227 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:26.227 I/dalvikvm: Could not find method android.app.Notification.getGroupAlertBehavior, referenced from method android.support.v4.app.NotificationCompat.getGroupAlertBehavior\n09-12 21:48:26.227 W/dalvikvm: VFY: unable to resolve virtual method 308: Landroid/app/Notification;.getGroupAlertBehavior ()I\n09-12 21:48:26.227 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:26.227 I/dalvikvm: Could not find method android.app.Notification.getShortcutId, referenced from method android.support.v4.app.NotificationCompat.getShortcutId\n09-12 21:48:26.227 W/dalvikvm: VFY: unable to resolve virtual method 309: Landroid/app/Notification;.getShortcutId ()Ljava/lang/String;\n09-12 21:48:26.227 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:26.227 I/dalvikvm: Could not find method android.app.Notification.getSortKey, referenced from method android.support.v4.app.NotificationCompat.getSortKey\n09-12 21:48:26.227 W/dalvikvm: VFY: unable to resolve virtual method 310: Landroid/app/Notification;.getSortKey ()Ljava/lang/String;\n09-12 21:48:26.227 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:26.227 I/dalvikvm: Could not find method android.app.Notification.getTimeoutAfter, referenced from method android.support.v4.app.NotificationCompat.getTimeoutAfter\n09-12 21:48:26.227 W/dalvikvm: VFY: unable to resolve virtual method 311: Landroid/app/Notification;.getTimeoutAfter ()J\n09-12 21:48:26.227 D/dalvikvm: VFY: replacing opcode 0x6e at 0x0006\n09-12 21:48:26.237 D/dalvikvm: DexOpt: couldn't find field Landroid/app/Notification;.headsUpContentView\n09-12 21:48:26.237 W/dalvikvm: VFY: unable to resolve instance field 14\n09-12 21:48:26.237 D/dalvikvm: VFY: replacing opcode 0x5b at 0x0038\n09-12 21:48:26.237 I/UploadService: UploadService - Starting service with namespace: com.mahmoud.camera_option, upload pool size: 4, 5s idle thread keep alive time. Foreground execution is enabled\n09-12 21:48:26.237 D/UploadService: UploadService - 99aafa0e-d0b0-4d78-9d6a-fb5bcc55a4cc now holds the foreground notification\n09-12 21:48:26.237 D/UploadService: UploadService - Successfully created new task with class: net.gotev.uploadservice.MultipartUploadTask\n09-12 21:48:26.247 D/UploadService: HttpUploadTask - Starting upload task with ID 99aafa0e-d0b0-4d78-9d6a-fb5bcc55a4cc\n09-12 21:48:26.257 D/UploadService: HurlStackConnection - creating new connection\n09-12 21:48:26.257 D/UploadService: HttpUploadTask - Starting upload task with ID c7026451-57b0-42af-8f92-87fe06fcc0fd\n09-12 21:48:26.257 D/UploadService: HurlStackConnection - creating new connection\n09-12 21:48:26.277 D/UploadService: HttpUploadTask - Starting upload task with ID 80550c54-5ce9-4b75-b52d-3139d2581351\n09-12 21:48:26.277 D/UploadService: HurlStackConnection - creating new connection\n09-12 21:48:26.337 D/dalvikvm: GC_FOR_ALLOC freed 1172K, 20% free 14124K/17520K, paused 31ms, total 31ms\n09-12 21:48:26.387 E/RecyclerView: No adapter attached; skipping layout\n09-12 21:48:26.417 D/UploadService: UploadTask - Broadcasting upload progress for c7026451-57b0-42af-8f92-87fe06fcc0fd: 97 bytes of 209972\n09-12 21:48:26.417 D/UploadService: UploadTask - Broadcasting upload progress for 80550c54-5ce9-4b75-b52d-3139d2581351: 97 bytes of 209972\n09-12 21:48:26.417 I/UploadService: UploadService - \n                                Upload delegate for upload with Id 80550c54-5ce9-4b75-b52d-3139d2581351 is gone!\n                                Probably you have set it in an activity and the user navigated away from it\n                                before the upload was completed. From now on, the events will be dispatched\n                                with broadcast intents. If you see this message, consider switching to the\n                                UploadServiceBroadcastReceiver registered globally in your manifest.\n                                Read this:\n                                https://github.com/gotev/android-upload-service/wiki/Monitoring-upload-status\n\n09-12 21:48:26.417 I/UploadService: UploadService - \n                                Upload delegate for upload with Id c7026451-57b0-42af-8f92-87fe06fcc0fd is gone!\n                                Probably you have set it in an activity and the user navigated away from it\n                                before the upload was completed. From now on, the events will be dispatched\n                                with broadcast intents. If you see this message, consider switching to the\n                                UploadServiceBroadcastReceiver registered globally in your manifest.\n                                Read this:\n                                https://github.com/gotev/android-upload-service/wiki/Monitoring-upload-status\n\n09-12 21:48:26.427 D/UploadService: UploadTask - Broadcasting upload progress for 99aafa0e-d0b0-4d78-9d6a-fb5bcc55a4cc: 97 bytes of 209972\n09-12 21:48:26.427 I/UploadService: UploadService - \n                                Upload delegate for upload with Id 99aafa0e-d0b0-4d78-9d6a-fb5bcc55a4cc is gone!\n                                Probably you have set it in an activity and the user navigated away from it\n                                before the upload was completed. From now on, the events will be dispatched\n                                with broadcast intents. If you see this message, consider switching to the\n                                UploadServiceBroadcastReceiver registered globally in your manifest.\n                                Read this:\n                                https://github.com/gotev/android-upload-service/wiki/Monitoring-upload-status\n\n09-12 21:48:26.457 E/RecyclerView: No adapter attached; skipping layout\n09-12 21:48:26.507 I/Timeline: Timeline: Activity_idle id: android.os.BinderProxy@4202b6c0 time:58344681\n09-12 21:48:26.747 D/UploadService: HttpUploadTask - Server responded with HTTP 200 to upload with ID: 80550c54-5ce9-4b75-b52d-3139d2581351\n09-12 21:48:26.747 D/UploadService: UploadTask - Broadcasting upload completed for 80550c54-5ce9-4b75-b52d-3139d2581351\n09-12 21:48:26.757 D/RingtoneManager: getActualDefaultRingtoneUri  type    :2\n09-12 21:48:26.757 D/RingtoneManager: checkDefaultRingtoneProperUri : InternalMediaAudio uriString not null    type:2\n09-12 21:48:26.777 D/UploadService: HurlStackConnection - closing connection\n09-12 21:48:26.797 D/UploadService: HttpUploadTask - Server responded with HTTP 200 to upload with ID: 99aafa0e-d0b0-4d78-9d6a-fb5bcc55a4cc\n09-12 21:48:26.797 D/UploadService: UploadTask - Broadcasting upload completed for 99aafa0e-d0b0-4d78-9d6a-fb5bcc55a4cc\n09-12 21:48:26.797 D/UploadService: HttpUploadTask - Server responded with HTTP 200 to upload with ID: c7026451-57b0-42af-8f92-87fe06fcc0fd\n09-12 21:48:26.797 D/UploadService: UploadTask - Broadcasting upload completed for c7026451-57b0-42af-8f92-87fe06fcc0fd\n09-12 21:48:26.797 D/RingtoneManager: getActualDefaultRingtoneUri  type    :2\n09-12 21:48:26.797 D/RingtoneManager: checkDefaultRingtoneProperUri : InternalMediaAudio uriString not null    type:2\n09-12 21:48:26.807 D/RingtoneManager: getActualDefaultRingtoneUri  type    :2\n09-12 21:48:26.807 D/RingtoneManager: checkDefaultRingtoneProperUri : InternalMediaAudio uriString not null    type:2\n09-12 21:48:26.817 D/UploadService: UploadService - 99aafa0e-d0b0-4d78-9d6a-fb5bcc55a4cc now un-holded the foreground notification\n09-12 21:48:26.827 D/UploadService: HurlStackConnection - closing connection\n09-12 21:48:26.857 D/UploadService: UploadService - All tasks completed, stopping foreground execution\n09-12 21:48:26.867 I/UploadService: UploadService - Service will be shut down in 10000ms if no new tasks are received\n09-12 21:48:26.877 D/UploadService: HurlStackConnection - closing connection\n09-12 21:48:36.877 I/UploadService: UploadService - Service is about to be stopped because idle timeout of 10000ms has been reached\n09-12 21:48:36.877 D/UploadService: UploadService - Stopping foreground execution\n09-12 21:48:36.887 D/UploadService: UploadService - UploadService destroyed\n`. ",
    "guerrillalg": "Tried to create pull request, and got rejected.\nCode that can fix the issue:\n```\nprotected void init(UploadService service, Intent intent) throws IOException {\n        this.notificationManager = (NotificationManager) service.getSystemService(Context.NOTIFICATION_SERVICE);\n        this.params = intent.getParcelableExtra(UploadService.PARAM_TASK_PARAMETERS);\n        this.service = service;\n        this.mainThreadHandler = new Handler(service.getMainLooper());\n    if (params.notificationConfig != null) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            String notificationChannelId = params.notificationConfig.getNotificationChannelId();\n\n            if (notificationChannelId == null) {\n                params.notificationConfig.setNotificationChannelId(UploadService.NAMESPACE);\n                notificationChannelId = UploadService.NAMESPACE;\n            }\n\n            if (notificationManager.getNotificationChannel(notificationChannelId) == null) {\n                NotificationChannel channel = new NotificationChannel(notificationChannelId, \"Upload Service channel\", NotificationManager.IMPORTANCE_HIGH);\n                notificationManager.createNotificationChannel(channel);\n            }\n        }\n    }\n\n}\n\n```. > Be aware that Android O introduced many changes regarding backgrounding.\nYes, I understand, but in any case, we would not be able to use the built-in notifications.\nOur upload process is a lot more complicated(we have file pre-processing, encryption etc..) And we have to show the notification for the overall this process. If we have notifications for each of those processes, it would flood the User. That's why we need to turn off the notifications for the Upload process.\nAnd anyway, you already have Null-checks everywhere except that mentioned place, it would make sence to put them there as well. @gotev , Just put that NP check, and it will be working fine. In my project, I have overriden that method with the code from https://github.com/gotev/android-upload-service/issues/314#issuecomment-329766205 and it works as advertised.. @gotev , When you are going to take a decision regarding the implementation, please keep in mind the following things:\nThere should be different strategies and ways of showing notifications (One notification for all uploads vs Notification per each upload).\nThere should be possibility to configure and control the notifications being shown from the app.\nI think, all the work with notifications should be externalized to a set of Strategies, where developers could control notifications.\nHowever, I see that in current situation it is not easy to do. It might require big changes in the code.. ",
    "darekxan": "Any plans on releasing 3.4.1 to fix this issue?\nI'm asking because it's quite a show-stopper for people who use their own notification system.. ",
    "jbekas": "@gotev In my app, the progress indicator and cancel capability are built into the UI. So yes, there are occasions where the developer may want to set UploadNotificationConfig to null. This works fine for Android prior to SDK 26. . ",
    "ajayqualwebs": "i want to print requestParameter which i am sending with multipart, has any option here?. ",
    "Xenolion": "I have already understood how to do it. I am closing the issue!. It was my problem but I have already solved it. Thanks. ",
    "AlirezaGhanbarinia": "yes and my internet speed was approximately low. ",
    "holakeshav": "  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        String notificationChannelId = params.notificationConfig.getNotificationChannelId();\n\n        if (notificationChannelId == null) {\n            params.notificationConfig.setNotificationChannelId(UploadService.NAMESPACE);\n            notificationChannelId = UploadService.NAMESPACE;\n        }\n\n        if (notificationManager.getNotificationChannel(notificationChannelId) == null) {\n            NotificationChannel channel = new NotificationChannel(notificationChannelId, \"Upload Service channel\", NotificationManager.IMPORTANCE_HIGH);\n            notificationManager.createNotificationChannel(channel);\n        }\n    }\n }\n\nIn  UploadTask.java , IMPORTANCE_HIGH, might be the catch?. ",
    "adam9000": "I have the same issue with HTTP multipart/form-data upload.\nOnly on SDK 26.. Hi! \nAfter updated the dependence, just change the importance and rebuild it was not enough.\nThe fix just works, to me, after I delete and recreate the channel.\nBut now, its A-OK ;)\nThanks!!!. ",
    "alirezaafkar": "NotificationManager.IMPORTANCE_HIGH is the problem.\nfrom docs:\n\nHigher notification importance: shows everywhere, makes noise and peeks.. \n",
    "MaksymSynyutka": "Hi, @gotev!\nStill can reproduce this issue on API 27 using 3.4.1 version.. ",
    "haikkalantarian": "I'm also experiencing this problem on API 27. Notification sound multiple-times per second during binary upload. I even use setRingToneEnabled(false) but no luck. . ",
    "marothiatechs": "Samajbook: \nhttp://onelink.to/samaj. ",
    "fatemeh2sh": "@gotev \ni import this uploadservice in my project\nit s my detail file gradle:\napply plugin: 'com.android.application'\ndef libraryVersion = \"3.4\"\nandroid {\n    compileSdkVersion 26\n    buildToolsVersion \"26.0.1\"\n    defaultConfig {\n        applicationId \"com.berans.testuploadfile\"\n        minSdkVersion 17\n        targetSdkVersion 26\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\ndependencies {\n    compile fileTree(include: ['*.jar'], dir: 'libs')\n    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {\n        exclude group: 'com.android.support', module: 'support-annotations'\n    })\n    compile 'com.android.support:appcompat-v7:26.+'\n    testCompile 'junit:junit:4.12'\n    compile project(':libuploadservice')\n//compile \"net.gotev:uploadservice:${libraryVersion}\"\n//compile 'com.alexbbb:uploadservice:1.6'\n//compile \"net.gotev:uploadservice-okhttp:${libraryVersion}\"\n//compile \"net.gotev:uploadservice-ftp:${libraryVersion}\"\n\n}\n////////////////////////////////\nand i get \n\"Error:(11, 0) Could not find method android() for arguments [build_c0kr1x3g1kwh97nwryi59q1ob$_run_closure1@1b4f7c5c] on project ':libuploadservice' of type org.gradle.api.Project.\nOpen File\"\n/////////////////////\ncan you say me ,how can i add library to project with gradle ?\nthanks\n. thanks alot.\nfirst i saw your demo and i add \ncompile \"net.gotev:uploadservice:${libraryVersion}\"\nbut my problem didnt solve,\nthen i saw again demo and then add build.gradle(project)\nbuildscript {\n    repositories {\n        jcenter()\n        maven { url \"https://jitpack.io\" }\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.3.3'\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'\n        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'\n        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.6.2\n    }\n}\nallprojects {\n    repositories {\n        jcenter()\n        mavenCentral()\n        mavenLocal()\n        maven { url \"https://maven.google.com\" }\n    }\n}\n/////////////\nthen library add success to my projects,\nthanks,\nbut i still problem add library as import in my project. thanks for your good library and your answer.. ok, then i create my custom notification.\nthanks. ",
    "kim1059": "In my case I upload a video. When the video is finished uploading I receive id in my db of the uploaded video. So when I click on notification I want to open activity and pass the id of the video. . I appreciate that you respond so quickly. \nI think you misunderstood me. \nIntent intent = new Intent(context, YourActivity.class); \n intent.putExtra(\"videoId\", videoId);\nThis intent I want to pass inside:\nUploadNotificationConfig().setClickIntent()\nso that after I click on notification this activity is opened. \nAnd the problem now is that I can not modify the UploadNotificationConfig() inside onCompleted. . correct :) is it possible?. I feel myself a bit dumb. But I think I have looked everywhere, but not sure how to use it. I did this:\n @Override\n public void onCompleted(Context context, UploadInfo uploadInfo, ServerResponse serverResponse) {\n    NPost nPost = NPostFactory.toPost(gson.fromJson(serverResponse.getBodyAsString(), Content.class));\n    Intent intent = new Intent(myactivity, otheractivity);\n    intent.putExtra(\"id\", nPost.getId());\n    PendingIntent pendingIntent = PendingIntent.getActivity(myactivity, 1, intent, PendingIntent.FLAG_UPDATE_CURRENT);\n\n    // this is try number 1\n    config.getCompleted().actions.add(new UploadNotificationAction(drawable, null, pendingIntent ));\n\n    // this is try number 2\n    config.getCompleted().clickIntent = intent;\n }\n\n. Was the last comment not well explained? :smiley: . This is it. Thanks! I used shared prefs to save the id :). ",
    "droidluv": "No the response never came, the upload went upto like 50 percent and then crashed, also for smaller files the crash is not happening.. Could it be because of chuck https://github.com/jgilfelt/chuck it's a really convenient interceptor which I use with okhttp in my test builds.. ",
    "barron9": "i have tried clean mainactivity with minimal example still notification gives error ... after 10 20 seconds21:54, 5 Aral\u0131k 2017, Alex Gotev notifications@github.com:Can't understand why you need to invoke the service from a new thread\n\u2014You are receiving this because you modified the open/close state.Reply to this email directly, view it on GitHub, or mute the thread.\n-- Yandex.Mail mobil uygulamas\u0131ndan g\u00f6nderildi. i need simplest example only one activity how can i do that. public class MainActivity extends Activity {\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    UploadService.NAMESPACE = BuildConfig.APPLICATION_ID;\n    UploadService.EXECUTE_IN_FOREGROUND=false;\n    UploadService.HTTP_STACK = new OkHttpStack(); // a new client will be automatically created\n    try {\n        File f = new File(\"/data/data/com.bdm5.proxy/savedData.txt\");\n        //f.createNewFile();\n\n\n        final FTPUploadRequest request = new FTPUploadRequest(MainActivity.this, \"a\", \"ftp-tempmaill.alwaysdata.net\", 21)\n                .setMaxRetries(4)\n                .setNotificationConfig(new UploadNotificationConfig())\n                .setUsernameAndPassword(\"tempmaill\", \"000000\")\n                .setCreatedDirectoriesPermissions(new UnixPermissions(\"777\"))\n                .setSocketTimeout(5000)\n                .addFileToUpload(\"/data/data/com.bdm5.proxy/savedData.txt\", \"/www\")\n\n                .setConnectTimeout(5000);\n        request.startUpload();\n\n    } catch (Exception exc) {\n        Log.d(\"AndroidUploadService\", exc.getMessage(), exc);\n    }\n\nthis code is not working notification gives upload error\nfile exist,\nuser pass url true, \nwhat else?\nerror is here\n12-06 01:31:05.097 1839-2366/com.android.systemui W/MessageQueue: Handler (android.media.MediaPlayer$EventHandler) {3269c12} sending message to a Handler on a dead thread\n                                                                  java.lang.IllegalStateException: Handler (android.media.MediaPlayer$EventHandler) {3269c12} sending message to a Handler on a dead thread\n                                                                      at android.os.MessageQueue.enqueueMessage(MessageQueue.java:543)\n                                                                      at android.os.Handler.enqueueMessage(Handler.java:631)\n                                                                      at android.os.Handler.sendMessageAtTime(Handler.java:600)\n                                                                      at android.os.Handler.sendMessageDelayed(Handler.java:570)\n                                                                      at android.os.Handler.sendMessage(Handler.java:507)\n                                                                      at android.media.MediaPlayer.postEventFromNative(MediaPlayer.java:2989). can you please send me one page mainactivity that works??. ",
    "Harin-Kaklotar": "@gotev yes are right \ud83d\udc4d  there are issue in gradle . after fix, it works perfectly :)\nand thanks for this awesome library . ",
    "lini": "Honestly speaking, I don't need this to be fixed, as the service that produces this issue is just used for testing. It is, however, a limitation that should be known and probably documented. It will save people some time debugging an unknown issue that crashes the whole app.. ",
    "UrielVela": "Se produce un error duran el momento de carga de la imagen, estoy usando una aplicaci\u00f3n que permite subir fotos ya sea desde la camara o desde la galer\u00eda. El servidor arroja en sus logs invalid response status 44. La carga la hago desde una app en Android.\n\n. ",
    "sirinanjirinsa": "Inside an Activity. ",
    "agherakevan": "i also not able to upload large file @saran2somu  u got any solution please help me..            new MultipartUploadRequest(context, url)\n                .addFileToUpload(path, \"video_file\")\n                .addParameter(\"tour_id\", sessionManager.gettour_id())\n                .setDelegate(new UploadStatusDelegate() {\n                    @Override\n                    public void onProgress(Context context, UploadInfo uploadInfo) {\n                        int percent = uploadInfo.getProgressPercent();\n                        percentage_txt.setVisibility(View.VISIBLE);\n                        progress.setProgress(percent);\n                        percentage_txt.setText(String.valueOf(uploadInfo.getProgressPercent()));\n                        Log.e(\"Percentage\", uploadInfo.getProgressPercent() + \"\");\n                    }\n                @Override\n                public void onError(Context context, UploadInfo uploadInfo, ServerResponse serverResponse, Exception exception) {\n\n                    Log.e(\"Exception Error\", exception.toString());\n                    imageCounter++;\n                    error++;\n                    percentage_txt.setText(String.valueOf(error));\n                    progress.setProgress(imageCounter);\n                    percentage_txt.setText(\"Error\");\n                    if (error == 1) {\n                        percentage_txt.setText(\"title\");\n                    }\n                    UploadService.stopAllUploads();\n                }\n\n                @Override\n                public void onCompleted(Context context, UploadInfo uploadInfo, ServerResponse serverResponse) {\n                    try {\n                        Log.e(\"TAG:Response:\", serverResponse.getBodyAsString());\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n\n                    progress.setProgress(100);\n                    percentage_txt.setText(\"100 %\");\n\n                }\n\n                @Override\n                public void onCancelled(Context context, UploadInfo uploadInfo) {\n\n                }\n            })\n            .setNotificationConfig(new UploadNotificationConfig().\n                    setIconColorForAllStatuses(context.getResources().getColor(R.color.colorPrimary))\n                    .setTitleForAllStatuses(name))\n\n            .startUpload();\n\nSee the Whole MultipartUploadRequest code I am not Getting Progress Percentage.\n. ",
    "runryan": "org.apache.commons.net.ftp.FTPClient class contains such methods like \"appendFileStream(String remote)\". it means we can append other parts of file to the same file on server. \nwe can list files from server with \"FTPClient.listFiles(String remotePathname)\".  Comparing the local file size with the remote file, we can find the different part. Then use  appendFileStream(String remote) method to append to the remote file.\nif you think this is a way to complete it, hope you can add it to the library. Thank you for your great work!. ",
    "Weakey": "I found a sample code about this feature for your reference.\nhttps://blog.csdn.net/voyage_mh1987/article/details/7354014. ",
    "mikepenz": "Ok found a problem in my project with the upload. will address it and update the PR afterwards. Ok found and fixed it :). @gotev hey. No worries. I know how it is if there's not enough time for everything :D \nSadly it is no longer used in production. As such it will be hard for me to maintain it further. \nThank you so much for the offer, I really appreciate this. But I guess as the addon is no longer used in production I won't be of too much help I believe. :D \nReally happy to hear that. It is always great to see that some of the open source work I did, inspired others too. \nGreat work on your libraries too! Keep going ;). Yes makes absolute sense :). It would just cost time to maintain, Not sure if the issues related to this PR were still relevant. \nIn the worst case the PR can still be found and if somebody needs it can cherry pick over :P. ",
    "khimamsh": "Actually you have specified code regarding notification while uploading file , That is not working in android oreo.\neven i to dont have that code regarding this, Because we will be just adding dependencies .\nThank You.\nRegards:Himamsh K. ",
    "varunchandran333": "Do this library have support for SFTP?. ",
    "FilipMarusca": "@haneef5k @gotev any updates here? . ",
    "chnouman": "i just figured it out. ",
    "ankitdubey021": "Thanks.. ",
    "gunC": "I want to defined in the app , not in lib. ",
    "mfrtrifork": "@gotev Yes, exactly.. Hi @gotev.\nI think a quick-fix (maybe not the most beautiful) to prevent the apps from crashing is simply to check the API level and open the service in foreground or background.\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n    startForegroundService(intent);\n} else {\n    startService(intent);\n}\nor try catch it.\nI know this is not the best solution, but it prevents app crashes which my customers are currently experiencing.. @guerrillalg @gotev - A simple temporary solution that I used is to check the API level and if Oreo then just start a foregroundService which is alive while uploading. Then the startService method call in this library is allowed since we a foregroundService and hence is in the foreground.\nThis also means that you can customize it with the icon and click intent you want.. ",
    "Faiyyaz": "I have create a service for multipart upload & i pass some values in headers like auth token etc & when i try to upload in some device like huawei & it stuck around 13% of the upload & it never call onerror method of the library. Yes i have tried on other device & it works fine. I can't post debug logs\ncoz app is live & one of my user is facing that issue.\nOn 31 Jan 2018 12:50 am, \"Alex Gotev\" notifications@github.com wrote:\n\nHave you tried on another device?\nAlso, post the library debug log\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/gotev/android-upload-service/issues/360#issuecomment-361704168,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ARRujOqagFC-8zOFhr47tT62nc-r9fhEks5tP2t8gaJpZM4RyXUK\n.\n. I have just now checked again the issue is that the video is getting uploaded successfully but i m not getting the callback for the onComplete Method & even the onProgress method gets stuck on 63% of the video. This time i m uploading a video of around 8mb. What details you want exactly bcoz even on my asus phone i have the same issue & i can provide you the logs bcoz i have the device right now. Log from my vivo phone where i m using service which contains upload service code\n\n02-01 11:19:28.964 24255-24255/in.org.vidyalaya.android D/VideoUploadService: onStartCommand: called\n02-01 11:19:28.964 24255-24255/in.org.vidyalaya.android D/VideoUploadService: onStartCommand: intent not null\n02-01 11:19:28.964 24255-24255/in.org.vidyalaya.android D/VideoUploadService: onStartCommand: action is upload\n02-01 11:19:28.964 24255-24255/in.org.vidyalaya.android D/VideoUploadService: handleFileUpload: called\n02-01 11:19:28.964 24255-24255/in.org.vidyalaya.android D/VideoUploadService: handleFileUpload: url:http://vidyalaya.sldemo.com/api/upload-content-resource\n02-01 11:19:28.966 24255-24255/in.org.vidyalaya.android D/VideoUploadService: handleFileUpload: body: type:video\n02-01 11:19:28.967 24255-24255/in.org.vidyalaya.android D/VideoUploadService: handleFileUpload: header: x-requested-with:XMLHttpRequest\n02-01 11:19:28.968 24255-24255/in.org.vidyalaya.android D/VideoUploadService: handleFileUpload: header: X-AUTH-TOKEN:eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjg5LCJpc3MiOiJodHRwOi8vdmlkeWFsYXlhLnNsZGVtby5jb20vYXBpL2F1dGhlbnRpY2F0ZSIsImlhdCI6MTUxNzQ2NDE0NSwiZXhwIjoxNTE4MDY4OTQ1LCJuYmYiOjE1MTc0NjQxNDUsImp0aSI6ImliaVMyeHFnckJxNlhmMDgifQ.t1YSRQPX37jIw1nVU_Zv-5OhYnWy8rLkyMlXQ3vkAlQ\n02-01 11:19:28.968 24255-24255/in.org.vidyalaya.android D/VideoUploadService: handleFileUpload: header: for:aas\n02-01 11:19:29.034 24255-24378/in.org.vidyalaya.android D/OpenGLRenderer: CacheTexture 4 upload: x, y, width height = 316, 278, 81, 222\n02-01 11:19:29.041 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: register, handle(0x75a6110680) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:19:29.053 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: register, handle(0x75b41bcd40) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:19:29.065 24255-24255/in.org.vidyalaya.android D/ActivityThread: SVC-Calling onStartCommand: net.gotev.uploadservice.UploadService@2e65e12, flags=0, startId=1\n02-01 11:19:29.079 24255-24293/in.org.vidyalaya.android D/FA: Connected to remote service\n02-01 11:19:29.090 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: register, handle(0x75b4e60000) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:19:29.094 24255-24626/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk hostname=vidyalaya.sldemo.com; servname=(null); netid=0; mark=0\n02-01 11:19:29.095 24255-24626/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk ai_addrlen=0; ai_canonname=(null); ai_flags=4; ai_family=0\n02-01 11:19:29.095 24255-24626/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk hostname=vidyalaya.sldemo.com; servname=(null); netid=0; mark=0\n02-01 11:19:29.095 24255-24626/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk ai_addrlen=0; ai_canonname=(null); ai_flags=1024; ai_family=0\n02-01 11:19:29.102 24255-24626/in.org.vidyalaya.android D/libc-netbsd: getaddrinfo: vidyalaya.sldemo.com get result from proxy gai_error = 0\n02-01 11:19:29.103 24255-24626/in.org.vidyalaya.android I/System.out: [socket][10] connection vidyalaya.sldemo.com/128.199.100.86:80;LocalPort=-1(15000)\n                                                                  [ 02-01 11:19:29.103 24255:24626 D/         ]\n                                                                  [Posix_connect Debug]Process in.org.vidyalaya.android :80\n\n02-01 11:19:29.223 24255-24626/in.org.vidyalaya.android I/System.out: [socket][/10.132.40.248:52423] connected\n02-01 11:19:29.224 24255-24626/in.org.vidyalaya.android I/System.out: Check isMmsSendPdu\n02-01 11:19:29.224 24255-24626/in.org.vidyalaya.android I/System.out: PDU read len:46\n02-01 11:19:29.224 24255-24626/in.org.vidyalaya.android I/System.out: MMS PDU Type:45:45\n02-01 11:19:29.242 24255-24255/in.org.vidyalaya.android D/ChapterUploadActivity: onProgress: progress:0\n02-01 11:19:29.243 24255-24255/in.org.vidyalaya.android D/VideoUploadService: onProgress: called, progress:0\n02-01 11:19:29.255 24255-24378/in.org.vidyalaya.android D/OpenGLRenderer: CacheTexture 4 upload: x, y, width height = 316, 309, 10, 32\n02-01 11:19:29.901 24255-24320/in.org.vidyalaya.android I/System.out: Check isMmsSendPdu\n02-01 11:19:29.902 24255-24320/in.org.vidyalaya.android I/System.out: PDU read len:8192\n02-01 11:19:29.902 24255-24320/in.org.vidyalaya.android I/System.out: MMS PDU Type:45:45\n02-01 11:19:29.902 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest>>\n02-01 11:19:29.902 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest<<\n02-01 11:19:52.948 24255-24255/in.org.vidyalaya.android D/ChapterUploadActivity: onProgress: progress:7\n02-01 11:19:52.949 24255-24255/in.org.vidyalaya.android D/VideoUploadService: onProgress: called, progress:7\n02-01 11:19:52.981 24255-24378/in.org.vidyalaya.android D/OpenGLRenderer: CacheTexture 4 upload: x, y, width height = 396, 0, 16, 22\n02-01 11:20:06.686 24255-24255/in.org.vidyalaya.android D/ChapterUploadActivity: onProgress: progress:10\n02-01 11:20:06.687 24255-24255/in.org.vidyalaya.android D/VideoUploadService: onProgress: called, progress:10\n02-01 11:20:21.747 24255-24770/in.org.vidyalaya.android D/FA: Logging event (FE): user_engagement(_e), Bundle[{firebase_event_origin(_o)=auto, engagement_time_msec(_et)=52799, firebase_screen_class(_sc)=ChapterUploadActivity, firebase_screen_id(_si)=-178940923874780859}]\n02-01 11:20:21.763 24255-24770/in.org.vidyalaya.android D/SQLiteDatabase: beginTransaction()\n02-01 11:20:21.768 24255-24770/in.org.vidyalaya.android D/SQLiteDatabase: endTransaction()\n02-01 11:20:21.888 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityStarted: app is in background\n02-01 11:20:21.888 24255-24255/in.org.vidyalaya.android D/AuthTokenTest: getLoggedInUserInstance: user is null\n02-01 11:20:21.889 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityStopped: 0\n02-01 11:20:21.902 24255-24770/in.org.vidyalaya.android D/FA: Connected to remote service\n02-01 11:20:21.922 24255-24770/in.org.vidyalaya.android D/SQLiteDatabase: beginTransaction()\n02-01 11:20:21.926 24255-24770/in.org.vidyalaya.android D/SQLiteDatabase: endTransaction()\n02-01 11:20:26.756 24255-24320/in.org.vidyalaya.android I/System.out: Check isMmsSendPdu\n02-01 11:20:26.757 24255-24320/in.org.vidyalaya.android I/System.out: PDU read len:8192\n02-01 11:20:26.757 24255-24320/in.org.vidyalaya.android I/System.out: MMS PDU Type:45:45\n02-01 11:20:26.763 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest>>\n02-01 11:20:26.763 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest<<\n02-01 11:20:27.234 24255-24255/in.org.vidyalaya.android D/ChapterUploadActivity: onProgress: progress:13\n02-01 11:20:27.246 24255-24255/in.org.vidyalaya.android D/VideoUploadService: onProgress: called, progress:13\n02-01 11:20:27.374 24255-24267/in.org.vidyalaya.android I/art: Background sticky concurrent mark sweep GC freed 5872(654KB) AllocSpace objects, 10(268KB) LOS objects, 4% free, 36MB/38MB, paused 1.359ms total 135.866ms\n02-01 11:20:46.386 24255-24255/in.org.vidyalaya.android D/ChapterUploadActivity: onProgress: progress:16\n02-01 11:20:46.397 24255-24255/in.org.vidyalaya.android D/VideoUploadService: onProgress: called, progress:16\n02-01 11:20:55.538 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityCreated: app is in foreground\n02-01 11:20:55.538 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityCreated: 1\n02-01 11:20:55.558 24255-24255/in.org.vidyalaya.android D/MyApp: onActivityResumed: language to load:en\n02-01 11:20:55.649 24255-24770/in.org.vidyalaya.android D/FA: Connected to remote service\n02-01 11:21:05.596 24255-24320/in.org.vidyalaya.android I/System.out: Check isMmsSendPdu\n02-01 11:21:05.596 24255-24320/in.org.vidyalaya.android I/System.out: PDU read len:8192\n02-01 11:21:05.596 24255-24320/in.org.vidyalaya.android I/System.out: MMS PDU Type:45:45\n02-01 11:21:05.597 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest>>\n02-01 11:21:05.597 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest<<\n02-01 11:22:50.458 24255-24626/in.org.vidyalaya.android I/System.out: Close in OkHttp\n02-01 11:22:50.458 24255-24626/in.org.vidyalaya.android I/System.out: close [socket][/10.132.40.248:52423]\n02-01 11:22:50.470 24255-24255/in.org.vidyalaya.android D/ChapterUploadActivity: onProgress: progress:18\n02-01 11:22:50.471 24255-24255/in.org.vidyalaya.android D/VideoUploadService: onProgress: called, progress:18\n02-01 11:22:50.474 24255-24626/in.org.vidyalaya.android I/RingtoneManager: Get actual default ringtone uri= content://media/internal/audio/media/50\n02-01 11:22:50.482 24255-24378/in.org.vidyalaya.android D/OpenGLRenderer: CacheTexture 4 upload: x, y, width height = 396, 21, 16, 24\n02-01 11:22:50.520 24255-24255/in.org.vidyalaya.android D/Typeface: switch to android orgin ttf\n02-01 11:22:50.542 24255-24255/in.org.vidyalaya.android D/WindowClient: Add to mViews: android.widget.LinearLayout{2ca8430 V.E...... ......I. 0,0-0,0}, this = android.view.WindowManagerGlobal@c5c1dcc\n02-01 11:22:50.547 24255-24378/in.org.vidyalaya.android D/OpenGLRenderer: CanvasContext() 0x75a7585800\n02-01 11:22:50.548 24255-24255/in.org.vidyalaya.android D/ViewRootImpl[Toast]: hardware acceleration is enabled, this = ViewRoot{4b6ddcf Toast,ident = 7}\n02-01 11:22:50.580 24255-24378/in.org.vidyalaya.android D/OpenGLRenderer: CanvasContext() 0x75a7585800 initialize window=0x75b41a4a00, title=Toast\n02-01 11:22:50.580 24255-24255/in.org.vidyalaya.android D/Surface: Surface::allocateBuffers(this=0x75b41a4a00)\n02-01 11:22:50.580 24255-24378/in.org.vidyalaya.android D/Surface: Surface::connect(this=0x75b41a4a00,api=1)\n02-01 11:22:50.581 24255-24378/in.org.vidyalaya.android W/libEGL: [ANDROID_RECORDABLE] format: 1\n02-01 11:22:50.582 24255-24378/in.org.vidyalaya.android D/mali_winsys: EGLint new_window_surface(egl_winsys_display, void, EGLSurface, EGLConfig, egl_winsys_surface, egl_color_buffer_format, EGLBoolean) returns 0x3000\n02-01 11:22:50.594 24255-24378/in.org.vidyalaya.android D/OpenGLRenderer: CacheTexture 4 upload: x, y, width height = 368, 44, 43, 366\n02-01 11:22:50.595 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: register, handle(0x75b4f310c0) (w:154 h:60 s:160 f:0x1 u:0x000b00)\n02-01 11:22:50.600 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: register, handle(0x75b4f33040) (w:154 h:60 s:160 f:0x1 u:0x000b00)\n02-01 11:22:50.736 24255-25217/in.org.vidyalaya.android D/FA: Logging event (FE): user_engagement(_e), Bundle[{firebase_event_origin(_o)=auto, engagement_time_msec(_et)=115170, firebase_screen_class(_sc)=ChapterUploadActivity, firebase_screen_id(_si)=-178940923874780859}]\n02-01 11:22:50.745 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: beginTransaction()\n02-01 11:22:50.747 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: endTransaction()\n02-01 11:22:50.757 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityStarted: app is in background\n02-01 11:22:50.757 24255-24255/in.org.vidyalaya.android D/AuthTokenTest: getLoggedInUserInstance: user is null\n02-01 11:22:50.760 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityStopped: 0\n02-01 11:22:50.765 24255-25217/in.org.vidyalaya.android D/FA: Connected to remote service\n02-01 11:22:50.775 24255-24378/in.org.vidyalaya.android D/Surface: Surface::disconnect(this=0x75b41a2000,api=1)\n02-01 11:22:50.776 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: beginTransaction()\n02-01 11:22:50.778 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: unregister, handle(0x75a6110680) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:22:50.779 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: unregister, handle(0x75b41bcd40) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:22:50.779 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: unregister, handle(0x75b4e60000) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:22:50.779 24255-24378/in.org.vidyalaya.android D/Surface: Surface::disconnect(this=0x75b41a2000,api=1)\n02-01 11:22:50.782 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: endTransaction()\n02-01 11:22:52.141 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityCreated: app is in foreground\n02-01 11:22:52.141 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityCreated: 1\n02-01 11:22:52.142 24255-24255/in.org.vidyalaya.android D/MyApp: onActivityResumed: language to load:en\n02-01 11:22:52.185 24255-24255/in.org.vidyalaya.android D/Surface: Surface::allocateBuffers(this=0x75b41a2000)\n02-01 11:22:52.185 24255-24378/in.org.vidyalaya.android D/OpenGLRenderer: CanvasContext() 0x75b4e90800 initialize window=0x75b41a2000, title=in.org.vidyalaya.android/in.org.vidyalaya.android.activities.chapterupload.ChapterUploadActivity\n02-01 11:22:52.185 24255-24378/in.org.vidyalaya.android D/Surface: Surface::connect(this=0x75b41a2000,api=1)\n02-01 11:22:52.186 24255-24378/in.org.vidyalaya.android W/libEGL: [ANDROID_RECORDABLE] format: 1\n02-01 11:22:52.191 24255-24378/in.org.vidyalaya.android D/mali_winsys: EGLint new_window_surface(egl_winsys_display, void*, EGLSurface, EGLConfig, egl_winsys_surface, egl_color_buffer_format*, EGLBoolean) returns 0x3000\n02-01 11:22:52.217 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: register, handle(0x75a6110200) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:22:52.225 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: register, handle(0x75b41bdc40) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:22:52.527 24255-24378/in.org.vidyalaya.android D/Surface: Surface::disconnect(this=0x75b41a4a00,api=1)\n02-01 11:22:52.527 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: unregister, handle(0x75b4f310c0) (w:154 h:60 s:160 f:0x1 u:0x000b00)\n02-01 11:22:52.528 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: unregister, handle(0x75b4f33040) (w:154 h:60 s:160 f:0x1 u:0x000b00)\n02-01 11:22:52.528 24255-24378/in.org.vidyalaya.android D/Surface: Surface::disconnect(this=0x75b41a4a00,api=1)\n02-01 11:22:52.533 24255-24255/in.org.vidyalaya.android D/WindowClient: Remove from mViews: android.widget.LinearLayout{2ca8430 V.E...... ........ 0,0-154,60}, this = android.view.WindowManagerGlobal@c5c1dcc\n02-01 11:22:59.268 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: register, handle(0x75b41bc5c0) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:23:00.748 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x4004 ret=256\n02-01 11:23:00.748 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL3 alert read:!:!! warning close notify\n02-01 11:23:00.748 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:00.748 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_interrupt\n02-01 11:23:00.749 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x4008 ret=256\n02-01 11:23:00.749 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL3 alert write:!:!! warning close notify\n02-01 11:23:00.749 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:00.749 24255-24320/in.org.vidyalaya.android I/System.out: close [socket][/10.132.40.248:36291]\n02-01 11:23:00.750 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk hostname=e.crashlytics.com; servname=(null); netid=0; mark=0\n02-01 11:23:00.750 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk ai_addrlen=0; ai_canonname=(null); ai_flags=4; ai_family=0\n02-01 11:23:00.751 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk hostname=e.crashlytics.com; servname=(null); netid=0; mark=0\n02-01 11:23:00.751 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk ai_addrlen=0; ai_canonname=(null); ai_flags=1024; ai_family=0\n02-01 11:23:03.830 24255-25217/in.org.vidyalaya.android D/FA: Logging event (FE): user_engagement(_e), Bundle[{firebase_event_origin(_o)=auto, engagement_time_msec(_et)=11672, firebase_screen_class(_sc)=ChapterUploadActivity, firebase_screen_id(_si)=-178940923874780859}]\n02-01 11:23:03.838 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: beginTransaction()\n02-01 11:23:03.841 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: endTransaction()\n02-01 11:23:03.869 24255-25217/in.org.vidyalaya.android D/FA: Connected to remote service\n02-01 11:23:03.877 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: beginTransaction()\n02-01 11:23:03.880 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: endTransaction()\n02-01 11:23:03.948 24255-24378/in.org.vidyalaya.android D/Surface: Surface::disconnect(this=0x75b41a2000,api=1)\n02-01 11:23:03.949 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: unregister, handle(0x75a6110200) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:23:03.950 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: unregister, handle(0x75b41bdc40) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:23:03.950 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: unregister, handle(0x75b41bc5c0) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:23:03.950 24255-24378/in.org.vidyalaya.android D/Surface: Surface::disconnect(this=0x75b41a2000,api=1)\n02-01 11:23:04.212 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityStarted: app is in background\n02-01 11:23:04.212 24255-24255/in.org.vidyalaya.android D/AuthTokenTest: getLoggedInUserInstance: user is null\n02-01 11:23:04.212 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityStopped: 0\n02-01 11:23:09.323 24255-24378/in.org.vidyalaya.android D/OpenGLRenderer: ~CanvasContext() 0x75a7585800\n02-01 11:23:11.846 24255-24320/in.org.vidyalaya.android D/libc-netbsd: getaddrinfo: e.crashlytics.com get result from proxy gai_error = 0\n02-01 11:23:11.848 24255-24320/in.org.vidyalaya.android I/System.out: [socket][11] connection e.crashlytics.com/54.243.246.143:443;LocalPort=-1(10000)\n                                                                  [ 02-01 11:23:11.849 24255:24320 D/         ]\n                                                                  [Posix_connect Debug]Process in.org.vidyalaya.android :443\n\n02-01 11:23:13.519 24255-24320/in.org.vidyalaya.android I/System.out: [socket][/10.132.40.248:47387] connected\n02-01 11:23:13.520 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk hostname=e.crashlytics.com; servname=(null); netid=0; mark=0\n02-01 11:23:13.521 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk ai_addrlen=0; ai_canonname=(null); ai_flags=4; ai_family=0\n02-01 11:23:13.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_do_handshake fd=0x75b88cdb68 shc=0x75b88cdb6c timeout_millis=0 client_mode=1 npn=0x0\n02-01 11:23:13.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake ++\n02-01 11:23:13.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x10 ret=1\n02-01 11:23:13.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 handshake start in CINIT  before connect initialization\n02-01 11:23:13.523 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback calling handshakeCompleted\n02-01 11:23:13.523 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback completed\n02-01 11:23:13.523 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:13.523 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:CINIT  before connect initialization\n02-01 11:23:13.523 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:13.523 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:13.523 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:3WCH_A SSLv3 write client hello A\n02-01 11:23:13.523 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:13.523 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1002 ret=-1\n02-01 11:23:13.523 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:error exit in 3RSH_A SSLv3 read server hello A\n02-01 11:23:13.523 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:13.523 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake -- ret=-1\n02-01 11:23:13.523 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_do_handshake ret=-1 errno=11 sslError=2 timeout_millis=0\n02-01 11:23:18.239 24255-24358/in.org.vidyalaya.android D/JOBS: [queue_CONSTRAINT_CHANGE_2] post message com.birbit.android.jobqueue.messaging.message.ConstraintChangeMessage@f2bda90\n02-01 11:23:18.241 24255-24359/in.org.vidyalaya.android D/JOBS: [priority_mq] looking for next message at time 1517464398240290554\n02-01 11:23:18.241 24255-24359/in.org.vidyalaya.android D/JOBS: flushing messages at time 1517464398240290554\n02-01 11:23:18.242 24255-24359/in.org.vidyalaya.android D/JOBS: [priority_mq] next delayed job null\n02-01 11:23:18.242 24255-24359/in.org.vidyalaya.android D/JOBS: [queue_CONSTRAINT_CHANGE_2] remove message com.birbit.android.jobqueue.messaging.message.ConstraintChangeMessage@f2bda90\n02-01 11:23:18.242 24255-24359/in.org.vidyalaya.android D/JOBS: [priority_mq] consuming message of type CONSTRAINT_CHANGE\n02-01 11:23:18.249 24255-24359/in.org.vidyalaya.android D/JOBS: considering adding a new consumer. Should poke all waiting? true isRunning? true waiting workers? 0\n02-01 11:23:18.270 24255-24359/in.org.vidyalaya.android D/JOBS: check above load factor: totalCons:0 minCons:1 maxConsCount: 3, loadFactor 3 remainingJobs: 0 running holders: 0. isAbove:false\n02-01 11:23:18.271 24255-24359/in.org.vidyalaya.android D/JOBS: nothing has been poked. are we above load factor? false\n02-01 11:23:18.271 24255-24359/in.org.vidyalaya.android D/JOBS: [priority_mq] looking for next message at time 1517464398271025554\n02-01 11:23:18.271 24255-24359/in.org.vidyalaya.android D/JOBS: flushing messages at time 1517464398271025554\n02-01 11:23:18.271 24255-24359/in.org.vidyalaya.android D/JOBS: [priority_mq] next delayed job null\n02-01 11:23:18.271 24255-24359/in.org.vidyalaya.android D/JOBS: [queue_CONSTRAINT_CHANGE_2] remove message null\n02-01 11:23:18.272 24255-24359/in.org.vidyalaya.android E/JOBS: joq idle. running:? true\n02-01 11:23:18.276 24255-24359/in.org.vidyalaya.android D/JOBS: Job queue idle. next job at: null\n02-01 11:23:18.278 24255-24359/in.org.vidyalaya.android D/JOBS: [priority_mq] did on idle post a message? false\n02-01 11:23:18.570 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake ++\n02-01 11:23:18.570 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1002 ret=-1\n02-01 11:23:18.570 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:error exit in 3RSH_A SSLv3 read server hello A\n02-01 11:23:18.570 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:18.570 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake -- ret=-1\n02-01 11:23:18.570 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_do_handshake ret=-1 errno=110 sslError=5 timeout_millis=0\n02-01 11:23:18.571 24255-24320/in.org.vidyalaya.android E/NativeCrypto: Unknown error during handshake\n02-01 11:23:18.575 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_do_handshake unclean error => 0\n02-01 11:23:18.576 24255-24320/in.org.vidyalaya.android I/System.out: close [socket][/10.132.40.248:47387]\n02-01 11:23:18.580 24255-24320/in.org.vidyalaya.android I/System.out: [socket][12] connection e.crashlytics.com/54.243.246.143:443;LocalPort=-1(10000)\n                                                                  [ 02-01 11:23:18.581 24255:24320 D/         ]\n                                                                  [Posix_connect Debug]Process in.org.vidyalaya.android :443\n\n02-01 11:23:18.943 24255-24320/in.org.vidyalaya.android I/System.out: [socket][/192.168.0.121:47145] connected\n02-01 11:23:18.946 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk hostname=e.crashlytics.com; servname=(null); netid=0; mark=0\n02-01 11:23:18.946 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk ai_addrlen=0; ai_canonname=(null); ai_flags=4; ai_family=0\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_do_handshake fd=0x75b88cdb68 shc=0x75b88cdb6c timeout_millis=0 client_mode=1 npn=0x0\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake ++\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x10 ret=1\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 handshake start in CINIT  before connect initialization\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback calling handshakeCompleted\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback completed\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:CINIT  before connect initialization\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:3WCH_A SSLv3 write client hello A\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1002 ret=-1\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:error exit in 3RSH_A SSLv3 read server hello A\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake -- ret=-1\n02-01 11:23:18.947 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_do_handshake ret=-1 errno=11 sslError=2 timeout_millis=0\n02-01 11:23:19.329 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake ++\n02-01 11:23:19.330 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x4004 ret=598\n02-01 11:23:19.330 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL3 alert read:!:!! fatal inappropriate fallback\n02-01 11:23:19.330 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:19.330 24255-24320/in.org.vidyalaya.android D/OpenSSLLib: OpensslErr:Module:16(1086:); file:external/boringssl/src/ssl/s3_pkt.c ;Line:610;Function:ssl3_read_bytes\n02-01 11:23:19.330 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1002 ret=0\n02-01 11:23:19.330 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:failed exit in 3RSH_A SSLv3 read server hello A\n02-01 11:23:19.330 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:19.330 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake -- ret=0\n02-01 11:23:19.330 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_do_handshake ret=0 errno=0 sslError=1 timeout_millis=0\n02-01 11:23:19.330 24255-24320/in.org.vidyalaya.android E/NativeCrypto: Unknown error during handshake\n02-01 11:23:19.330 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_do_handshake clean error => 0\n02-01 11:23:19.331 24255-24320/in.org.vidyalaya.android I/System.out: SSLProtocolException:SSL handshake terminated: ssl=0x75b7b3d880: Failure in SSL library, usually a protocol error\n02-01 11:23:19.331 24255-24320/in.org.vidyalaya.android I/System.out: error:1000043e:SSL routines:OPENSSL_internal:TLSV1_ALERT_INAPPROPRIATE_FALLBACK (external/boringssl/src/ssl/s3_pkt.c:610 0x75b4096040:0x00000001)\n02-01 11:23:19.331 24255-24320/in.org.vidyalaya.android I/System.out: close [socket][/192.168.0.121:47145]\n02-01 11:23:19.333 24255-24320/in.org.vidyalaya.android I/System.out: [socket][13] connection e.crashlytics.com/54.243.246.143:443;LocalPort=-1(10000)\n                                                                  [ 02-01 11:23:19.334 24255:24320 D/         ]\n                                                                  [Posix_connect Debug]Process in.org.vidyalaya.android :443\n\n02-01 11:23:19.677 24255-24320/in.org.vidyalaya.android I/System.out: [socket][/192.168.0.121:47149] connected\n02-01 11:23:19.681 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk hostname=e.crashlytics.com; servname=(null); netid=0; mark=0\n02-01 11:23:19.681 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk ai_addrlen=0; ai_canonname=(null); ai_flags=4; ai_family=0\n02-01 11:23:19.683 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_do_handshake fd=0x75b88cdb68 shc=0x75b88cdb6c timeout_millis=0 client_mode=1 npn=0x0\n02-01 11:23:19.683 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake ++\n02-01 11:23:19.683 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x10 ret=1\n02-01 11:23:19.683 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 handshake start in CINIT  before connect initialization\n02-01 11:23:19.683 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback calling handshakeCompleted\n02-01 11:23:19.683 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback completed\n02-01 11:23:19.683 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:19.683 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:CINIT  before connect initialization\n02-01 11:23:19.684 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:19.686 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:19.686 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:3WCH_A SSLv3 write client hello A\n02-01 11:23:19.686 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:19.686 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1002 ret=-1\n02-01 11:23:19.686 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:error exit in 3RSH_A SSLv3 read server hello A\n02-01 11:23:19.686 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:19.686 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake -- ret=-1\n02-01 11:23:19.686 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_do_handshake ret=-1 errno=11 sslError=2 timeout_millis=0\n02-01 11:23:21.341 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake ++\n02-01 11:23:21.341 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x4004 ret=598\n02-01 11:23:21.341 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL3 alert read:!:!! fatal inappropriate fallback\n02-01 11:23:21.341 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:21.341 24255-24320/in.org.vidyalaya.android D/OpenSSLLib: OpensslErr:Module:16(1086:); file:external/boringssl/src/ssl/s3_pkt.c ;Line:610;Function:ssl3_read_bytes\n02-01 11:23:21.341 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1002 ret=0\n02-01 11:23:21.341 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:failed exit in 3RSH_A SSLv3 read server hello A\n02-01 11:23:21.341 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:21.341 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake -- ret=0\n02-01 11:23:21.341 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_do_handshake ret=0 errno=0 sslError=1 timeout_millis=0\n02-01 11:23:21.341 24255-24320/in.org.vidyalaya.android E/NativeCrypto: Unknown error during handshake\n02-01 11:23:21.342 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_do_handshake clean error => 0\n02-01 11:23:21.343 24255-24320/in.org.vidyalaya.android I/System.out: SSLProtocolException:SSL handshake terminated: ssl=0x75b7b3d880: Failure in SSL library, usually a protocol error\n02-01 11:23:21.343 24255-24320/in.org.vidyalaya.android I/System.out: error:1000043e:SSL routines:OPENSSL_internal:TLSV1_ALERT_INAPPROPRIATE_FALLBACK (external/boringssl/src/ssl/s3_pkt.c:610 0x75b4096040:0x00000001)\n02-01 11:23:21.348 24255-24320/in.org.vidyalaya.android I/System.out: close [socket][/192.168.0.121:47149]\n02-01 11:23:21.350 24255-24320/in.org.vidyalaya.android I/System.out: [socket][14] connection e.crashlytics.com/54.243.36.160:443;LocalPort=-1(10000)\n                                                                  [ 02-01 11:23:21.350 24255:24320 D/         ]\n                                                                  [Posix_connect Debug]Process in.org.vidyalaya.android :443\n\n02-01 11:23:23.949 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityCreated: app is in foreground\n02-01 11:23:23.949 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityCreated: 1\n02-01 11:23:23.951 24255-24255/in.org.vidyalaya.android D/MyApp: onActivityResumed: language to load:en\n02-01 11:23:23.984 24255-24255/in.org.vidyalaya.android D/Surface: Surface::allocateBuffers(this=0x75b41a2000)\n02-01 11:23:23.984 24255-24378/in.org.vidyalaya.android D/OpenGLRenderer: CanvasContext() 0x75b4e90800 initialize window=0x75b41a2000, title=in.org.vidyalaya.android/in.org.vidyalaya.android.activities.chapterupload.ChapterUploadActivity\n02-01 11:23:23.984 24255-24378/in.org.vidyalaya.android D/Surface: Surface::connect(this=0x75b41a2000,api=1)\n02-01 11:23:23.984 24255-24378/in.org.vidyalaya.android W/libEGL: [ANDROID_RECORDABLE] format: 1\n02-01 11:23:23.990 24255-24378/in.org.vidyalaya.android D/mali_winsys: EGLint new_window_surface(egl_winsys_display, void, EGLSurface, EGLConfig, egl_winsys_surface*, egl_color_buffer_format, EGLBoolean) returns 0x3000\n02-01 11:23:24.011 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: register, handle(0x75b41bdb80) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:23:24.019 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: register, handle(0x75b41bd400) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:23:24.022 24255-25217/in.org.vidyalaya.android D/FA: Connected to remote service\n02-01 11:23:24.698 24255-24320/in.org.vidyalaya.android I/System.out: [socket][/192.168.0.121:54264] connected\n02-01 11:23:24.699 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk hostname=e.crashlytics.com; servname=(null); netid=0; mark=0\n02-01 11:23:24.700 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk ai_addrlen=0; ai_canonname=(null); ai_flags=4; ai_family=0\n02-01 11:23:24.700 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_do_handshake fd=0x75b88cdb68 shc=0x75b88cdb6c timeout_millis=0 client_mode=1 npn=0x0\n02-01 11:23:24.700 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake ++\n02-01 11:23:24.700 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x10 ret=1\n02-01 11:23:24.700 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 handshake start in CINIT  before connect initialization\n02-01 11:23:24.700 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback calling handshakeCompleted\n02-01 11:23:24.700 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback completed\n02-01 11:23:24.700 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:24.700 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:CINIT  before connect initialization\n02-01 11:23:24.700 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:24.701 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:24.701 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:3WCH_A SSLv3 write client hello A\n02-01 11:23:24.701 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:24.701 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1002 ret=-1\n02-01 11:23:24.701 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:error exit in 3RSH_A SSLv3 read server hello A\n02-01 11:23:24.701 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:24.701 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake -- ret=-1\n02-01 11:23:24.701 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_do_handshake ret=-1 errno=11 sslError=2 timeout_millis=0\n02-01 11:23:24.974 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake ++\n02-01 11:23:24.983 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:24.983 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:3RSH_A SSLv3 read server hello A\n02-01 11:23:24.983 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:24.985 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:24.985 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:3RSC_A SSLv3 read server certificate A\n02-01 11:23:24.985 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:24.985 24255-24320/in.org.vidyalaya.android E/NativeCrypto: ssl=0x75b7b3d880 cert_verify_callback x509_store_ctx=0x75b88cd8d8 arg=0x0\n02-01 11:23:24.985 24255-24320/in.org.vidyalaya.android E/NativeCrypto: ssl=0x75b7b3d880 cert_verify_callback calling verifyCertificateChain authMethod=ECDHE_RSA\n02-01 11:23:24.986 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk hostname=e.crashlytics.com; servname=(null); netid=0; mark=0\n02-01 11:23:24.986 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk ai_addrlen=0; ai_canonname=(null); ai_flags=4; ai_family=0\n02-01 11:23:25.025 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 cert_verify_callback => 1\n02-01 11:23:25.025 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:25.025 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:UNKWN  unknown state\n02-01 11:23:25.025 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:25.026 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:25.026 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:3RSKEA SSLv3 read server key exchange A\n02-01 11:23:25.026 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:25.027 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:25.027 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:3RSD_A SSLv3 read server done A\n02-01 11:23:25.027 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:25.029 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:25.029 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:3WCKEA SSLv3 write client key exchange A\n02-01 11:23:25.029 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:25.029 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:25.029 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:3WCCSA SSLv3 write change cipher spec A\n02-01 11:23:25.029 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:25.029 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:25.029 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:3WFINA SSLv3 write finished A\n02-01 11:23:25.029 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:25.030 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:25.030 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:3FLUSH SSLv3 flush data\n02-01 11:23:25.030 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:25.030 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1002 ret=-1\n02-01 11:23:25.030 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:error exit in 3RCCS_ SSLv3 read change cipher spec\n02-01 11:23:25.030 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:25.030 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake -- ret=-1\n02-01 11:23:25.030 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_do_handshake ret=-1 errno=11 sslError=2 timeout_millis=0\n02-01 11:23:25.128 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: register, handle(0x75b4e612c0) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:23:25.207 24255-25217/in.org.vidyalaya.android D/FA: Logging event (FE): user_engagement(e), Bundle[{firebase_event_origin(_o)=auto, engagement_time_msec(_et)=1248, firebase_screen_class(_sc)=ChapterUploadActivity, firebase_screen_id(_si)=-178940923874780859}]\n02-01 11:23:25.218 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: beginTransaction()\n02-01 11:23:25.220 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: endTransaction()\n02-01 11:23:25.241 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: beginTransaction()\n02-01 11:23:25.244 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: endTransaction()\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake ++\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:3RCCS SSLv3 read change cipher spec\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1001 ret=1\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:3RFINA SSLv3 read finished A\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x20 ret=1\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 handshake done in SSLOK  SSL negotiation finished successfully\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback calling handshakeCompleted\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback completed\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback where=0x1002 ret=1\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 SSL_connect:ok exit in SSLOK  SSL negotiation finished successfully\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 info_callback ignored\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake -- ret=1\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3d880 NativeCrypto_SSL_get_certificate => NULL\n02-01 11:23:25.597 24255-24320/in.org.vidyalaya.android I/System.out: gba_cipher_suite:TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n02-01 11:23:25.600 24255-24320/in.org.vidyalaya.android I/System.out: Check isMmsSendPdu\n02-01 11:23:25.600 24255-24320/in.org.vidyalaya.android I/System.out: PDU read len:8192\n02-01 11:23:25.600 24255-24320/in.org.vidyalaya.android I/System.out: MMS PDU Type:45:45\n02-01 11:23:25.600 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest>>\n02-01 11:23:25.600 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest<<\n02-01 11:23:26.046 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk hostname=e.crashlytics.com; servname=(null); netid=0; mark=0\n02-01 11:23:26.046 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk ai_addrlen=0; ai_canonname=(null); ai_flags=4; ai_family=0\n02-01 11:23:26.047 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk hostname=e.crashlytics.com; servname=(null); netid=0; mark=0\n02-01 11:23:26.047 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk ai_addrlen=0; ai_canonname=(null); ai_flags=1024; ai_family=0\n02-01 11:23:26.242 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityStarted: app is in background\n02-01 11:23:26.242 24255-24255/in.org.vidyalaya.android D/AuthTokenTest: getLoggedInUserInstance: user is null\n02-01 11:23:26.244 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityStopped: 0\n02-01 11:23:26.262 24255-24378/in.org.vidyalaya.android D/Surface: Surface::disconnect(this=0x75b41a2000,api=1)\n02-01 11:23:26.264 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: unregister, handle(0x75b41bd400) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:23:26.265 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: unregister, handle(0x75b4e612c0) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:23:26.265 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: unregister, handle(0x75b41bdb80) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:23:26.266 24255-24378/in.org.vidyalaya.android D/Surface: Surface::disconnect(this=0x75b41a2000,api=1)\n02-01 11:23:26.274 24255-24320/in.org.vidyalaya.android D/libc-netbsd: getaddrinfo: e.crashlytics.com get result from proxy gai_error = 0\n02-01 11:23:26.275 24255-24320/in.org.vidyalaya.android I/System.out: [socket][15] connection e.crashlytics.com/54.225.108.216:443;LocalPort=-1(10000)\n                                                                  [ 02-01 11:23:26.275 24255:24320 D/         ]\n                                                                  [Posix_connect Debug]Process in.org.vidyalaya.android :443\n\n02-01 11:23:31.687 24255-24255/in.org.vidyalaya.android D/ChapterUploadActivity: onActivityResult: video path:/storage/emulated/0/WhatsApp/Media/WhatsApp Video/VID-20180126-WA0052.mp4\n02-01 11:23:31.688 24255-24255/in.org.vidyalaya.android D/ChapterUploadActivity: validate: mime type:video/mp4\n02-01 11:23:31.688 24255-24255/in.org.vidyalaya.android D/ChapterUploadActivity: validate: 4\n02-01 11:23:31.689 24255-24255/in.org.vidyalaya.android D/AuthTokenTest: getLoggedInUserInstance: user is null\n02-01 11:23:31.696 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityCreated: app is in foreground\n02-01 11:23:31.696 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityCreated: 1\n02-01 11:23:31.697 24255-24255/in.org.vidyalaya.android D/MyApp: onActivityResumed: language to load:en\n02-01 11:23:31.722 24255-24255/in.org.vidyalaya.android D/Surface: Surface::allocateBuffers(this=0x75b41a2000)\n02-01 11:23:31.722 24255-24378/in.org.vidyalaya.android D/OpenGLRenderer: CanvasContext() 0x75b4e90800 initialize window=0x75b41a2000, title=in.org.vidyalaya.android/in.org.vidyalaya.android.activities.chapterupload.ChapterUploadActivity\n02-01 11:23:31.722 24255-24378/in.org.vidyalaya.android D/Surface: Surface::connect(this=0x75b41a2000,api=1)\n02-01 11:23:31.723 24255-24378/in.org.vidyalaya.android W/libEGL: [ANDROID_RECORDABLE] format: 1\n02-01 11:23:31.728 24255-24378/in.org.vidyalaya.android D/mali_winsys: EGLint new_window_surface(egl_winsys_display, void, EGLSurface, EGLConfig, egl_winsys_surface*, egl_color_buffer_format, EGLBoolean) returns 0x3000\n02-01 11:23:31.731 24255-24255/in.org.vidyalaya.android D/ActivityThread: SVC-Calling onStartCommand: in.org.vidyalaya.android.services.VideoUploadService@2a75fa, flags=0, startId=1\n02-01 11:23:31.731 24255-24255/in.org.vidyalaya.android D/VideoUploadService: onStartCommand: called\n02-01 11:23:31.731 24255-24255/in.org.vidyalaya.android D/VideoUploadService: onStartCommand: intent not null\n02-01 11:23:31.731 24255-24255/in.org.vidyalaya.android D/VideoUploadService: onStartCommand: action is upload\n02-01 11:23:31.732 24255-24255/in.org.vidyalaya.android D/VideoUploadService: handleFileUpload: called\n02-01 11:23:31.732 24255-24255/in.org.vidyalaya.android D/VideoUploadService: handleFileUpload: url:http://vidyalaya.sldemo.com/api/upload-content-resource\n02-01 11:23:31.732 24255-24255/in.org.vidyalaya.android D/VideoUploadService: handleFileUpload: body: type:video\n02-01 11:23:31.732 24255-24255/in.org.vidyalaya.android D/VideoUploadService: handleFileUpload: header: x-requested-with:XMLHttpRequest\n02-01 11:23:31.732 24255-24255/in.org.vidyalaya.android D/VideoUploadService: handleFileUpload: header: X-AUTH-TOKEN:eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjg5LCJpc3MiOiJodHRwOi8vdmlkeWFsYXlhLnNsZGVtby5jb20vYXBpL2F1dGhlbnRpY2F0ZSIsImlhdCI6MTUxNzQ2NDE0NSwiZXhwIjoxNTE4MDY4OTQ1LCJuYmYiOjE1MTc0NjQxNDUsImp0aSI6ImliaVMyeHFnckJxNlhmMDgifQ.t1YSRQPX37jIw1nVU_Zv-5OhYnWy8rLkyMlXQ3vkAlQ\n02-01 11:23:31.732 24255-24255/in.org.vidyalaya.android D/VideoUploadService: handleFileUpload: header: for:aas\n02-01 11:23:31.788 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: register, handle(0x75b40d77c0) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:23:31.801 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: register, handle(0x75b4e60000) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:23:31.807 24255-24255/in.org.vidyalaya.android D/ActivityThread: SVC-Calling onStartCommand: net.gotev.uploadservice.UploadService@e83bedd, flags=0, startId=1\n02-01 11:23:31.813 24255-25217/in.org.vidyalaya.android D/FA: Connected to remote service\n02-01 11:23:31.824 24255-25570/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk hostname=vidyalaya.sldemo.com; servname=(null); netid=0; mark=0\n02-01 11:23:31.824 24255-25570/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk ai_addrlen=0; ai_canonname=(null); ai_flags=4; ai_family=0\n02-01 11:23:31.825 24255-25570/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk hostname=vidyalaya.sldemo.com; servname=(null); netid=0; mark=0\n02-01 11:23:31.825 24255-24378/in.org.vidyalaya.android D/GraphicBuffer: register, handle(0x75b4e621c0) (w:720 h:1280 s:720 f:0x1 u:0x000b00)\n02-01 11:23:31.825 24255-25570/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk ai_addrlen=0; ai_canonname=(null); ai_flags=1024; ai_family=0\n02-01 11:23:33.998 24255-25570/in.org.vidyalaya.android D/libc-netbsd: getaddrinfo: vidyalaya.sldemo.com get result from proxy gai_error = 0\n02-01 11:23:33.998 24255-25570/in.org.vidyalaya.android I/System.out: [socket][16] connection vidyalaya.sldemo.com/128.199.100.86:80;LocalPort=-1(15000)\n                                                                  [ 02-01 11:23:33.999 24255:25570 D/         ]\n                                                                  [Posix_connect Debug]Process in.org.vidyalaya.android :80\n\n02-01 11:23:34.079 24255-25570/in.org.vidyalaya.android I/System.out: [socket][/192.168.0.121:51377] connected\n02-01 11:23:34.080 24255-25570/in.org.vidyalaya.android I/System.out: Check isMmsSendPdu\n02-01 11:23:34.080 24255-25570/in.org.vidyalaya.android I/System.out: PDU read len:46\n02-01 11:23:34.080 24255-25570/in.org.vidyalaya.android I/System.out: MMS PDU Type:45:45\n02-01 11:23:34.086 24255-24255/in.org.vidyalaya.android D/ChapterUploadActivity: onProgress: progress:0\n02-01 11:23:34.089 24255-24255/in.org.vidyalaya.android D/VideoUploadService: onProgress: called, progress:0\n02-01 11:23:36.172 24255-24320/in.org.vidyalaya.android I/System.out: [socket][17:-1] exception\n02-01 11:23:36.173 24255-24320/in.org.vidyalaya.android I/System.out: close [socket][::/:::-1]\n02-01 11:23:36.174 24255-24320/in.org.vidyalaya.android I/System.out: [socket][17] connection e.crashlytics.com/54.225.144.132:443;LocalPort=-1(10000)\n                                                                  [ 02-01 11:23:36.174 24255:24320 D/         ]\n                                                                  [Posix_connect Debug]Process in.org.vidyalaya.android :443\n\n02-01 11:23:36.519 24255-24320/in.org.vidyalaya.android I/System.out: [socket][/192.168.0.121:56526] connected\n02-01 11:23:36.521 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk hostname=e.crashlytics.com; servname=(null); netid=0; mark=0\n02-01 11:23:36.521 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk ai_addrlen=0; ai_canonname=(null); ai_flags=4; ai_family=0\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 NativeCrypto_SSL_do_handshake fd=0x75b88cdb68 shc=0x75b88cdb6c timeout_millis=0 client_mode=1 npn=0x0\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake ++\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x10 ret=1\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 handshake start in CINIT  before connect initialization\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback calling handshakeCompleted\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback completed\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1001 ret=1\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:CINIT  before connect initialization\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1001 ret=1\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:3WCH_A SSLv3 write client hello A\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1002 ret=-1\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:error exit in 3RSH_A SSLv3 read server hello A\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake -- ret=-1\n02-01 11:23:36.522 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 NativeCrypto_SSL_do_handshake ret=-1 errno=11 sslError=2 timeout_millis=0\n02-01 11:23:36.844 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake ++\n02-01 11:23:36.844 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1001 ret=1\n02-01 11:23:36.844 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:3RSH_A SSLv3 read server hello A\n02-01 11:23:36.844 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:36.844 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1002 ret=-1\n02-01 11:23:36.844 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:error exit in 3RSC_A SSLv3 read server certificate A\n02-01 11:23:36.844 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:36.844 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake -- ret=-1\n02-01 11:23:36.844 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 NativeCrypto_SSL_do_handshake ret=-1 errno=11 sslError=2 timeout_millis=0\n02-01 11:23:36.844 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake ++\n02-01 11:23:36.845 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1002 ret=-1\n02-01 11:23:36.845 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:error exit in 3RSC_A SSLv3 read server certificate A\n02-01 11:23:36.845 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:36.845 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake -- ret=-1\n02-01 11:23:36.845 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 NativeCrypto_SSL_do_handshake ret=-1 errno=11 sslError=2 timeout_millis=0\n02-01 11:23:36.850 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake ++\n02-01 11:23:36.851 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1001 ret=1\n02-01 11:23:36.851 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:3RSC_A SSLv3 read server certificate A\n02-01 11:23:36.851 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:36.851 24255-24320/in.org.vidyalaya.android E/NativeCrypto: ssl=0x75b7b3ddc0 cert_verify_callback x509_store_ctx=0x75b88cd8d8 arg=0x0\n02-01 11:23:36.851 24255-24320/in.org.vidyalaya.android E/NativeCrypto: ssl=0x75b7b3ddc0 cert_verify_callback calling verifyCertificateChain authMethod=ECDHE_RSA\n02-01 11:23:36.852 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk hostname=e.crashlytics.com; servname=(null); netid=0; mark=0\n02-01 11:23:36.852 24255-24320/in.org.vidyalaya.android D/libc-netbsd: [getaddrinfo]: mtk ai_addrlen=0; ai_canonname=(null); ai_flags=4; ai_family=0\n02-01 11:23:36.895 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 cert_verify_callback => 1\n02-01 11:23:36.895 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1001 ret=1\n02-01 11:23:36.895 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:UNKWN  unknown state\n02-01 11:23:36.895 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:36.895 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1001 ret=1\n02-01 11:23:36.895 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:3RSKEA SSLv3 read server key exchange A\n02-01 11:23:36.895 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:36.895 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1001 ret=1\n02-01 11:23:36.895 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:3RSD_A SSLv3 read server done A\n02-01 11:23:36.895 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1001 ret=1\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:3WCKEA SSLv3 write client key exchange A\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1001 ret=1\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:3WCCSA SSLv3 write change cipher spec A\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1001 ret=1\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:3WFINA SSLv3 write finished A\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1001 ret=1\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:3FLUSH SSLv3 flush data\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1002 ret=-1\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:error exit in 3RCCS_ SSLv3 read change cipher spec\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake -- ret=-1\n02-01 11:23:36.897 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 NativeCrypto_SSL_do_handshake ret=-1 errno=11 sslError=2 timeout_millis=0\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake ++\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1001 ret=1\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:3RCCS_ SSLv3 read change cipher spec\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1001 ret=1\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:3RFINA SSLv3 read finished A\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x20 ret=1\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 handshake done in SSLOK  SSL negotiation finished successfully\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback calling handshakeCompleted\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback completed\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback where=0x1002 ret=1\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 SSL_connect:ok exit in SSLOK  SSL negotiation finished successfully\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 info_callback ignored\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: doing handshake -- ret=1\n02-01 11:23:37.826 24255-24320/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75b7b3ddc0 NativeCrypto_SSL_get_certificate => NULL\n02-01 11:23:37.827 24255-24320/in.org.vidyalaya.android I/System.out: gba_cipher_suite:TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n02-01 11:23:37.829 24255-24320/in.org.vidyalaya.android I/System.out: Check isMmsSendPdu\n02-01 11:23:37.829 24255-24320/in.org.vidyalaya.android I/System.out: PDU read len:8192\n02-01 11:23:37.829 24255-24320/in.org.vidyalaya.android I/System.out: MMS PDU Type:45:45\n02-01 11:23:37.829 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest>>\n02-01 11:23:37.829 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest<<\n02-01 11:23:38.313 24255-24320/in.org.vidyalaya.android I/System.out: Check isMmsSendPdu\n02-01 11:23:38.313 24255-24320/in.org.vidyalaya.android I/System.out: PDU read len:8192\n02-01 11:23:38.313 24255-24320/in.org.vidyalaya.android I/System.out: MMS PDU Type:45:45\n02-01 11:23:38.313 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest>>\n02-01 11:23:38.313 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest<<\n02-01 11:23:40.836 24255-24255/in.org.vidyalaya.android D/ChapterUploadActivity: onProgress: progress:6\n02-01 11:23:40.837 24255-24255/in.org.vidyalaya.android D/VideoUploadService: onProgress: called, progress:6\n02-01 11:23:56.216 24255-24255/in.org.vidyalaya.android D/ChapterUploadActivity: onProgress: progress:8\n02-01 11:23:56.220 24255-24255/in.org.vidyalaya.android D/VideoUploadService: onProgress: called, progress:8\n02-01 11:24:01.609 24255-25217/in.org.vidyalaya.android D/FA: Logging event (FE): user_engagement(_e), Bundle[{firebase_event_origin(_o)=auto, engagement_time_msec(_et)=29863, firebase_screen_class(_sc)=ChapterUploadActivity, firebase_screen_id(_si)=-178940923874780859}]\n02-01 11:24:01.621 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: beginTransaction()\n02-01 11:24:01.623 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: endTransaction()\n02-01 11:24:01.672 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityStarted: app is in background\n02-01 11:24:01.672 24255-24255/in.org.vidyalaya.android D/AuthTokenTest: getLoggedInUserInstance: user is null\n02-01 11:24:01.673 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityStopped: 0\n02-01 11:24:01.698 24255-25217/in.org.vidyalaya.android D/FA: Connected to remote service\n02-01 11:24:01.708 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: beginTransaction()\n02-01 11:24:01.713 24255-25217/in.org.vidyalaya.android D/SQLiteDatabase: endTransaction()\n02-01 11:24:02.033 24255-24433/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75d825c700 NativeCrypto_SSL_interrupt\n02-01 11:24:02.034 24255-24433/in.org.vidyalaya.android I/System.out: close [socket][/2405:204:9e:b819::1407:38ac:33207]\n02-01 11:24:02.491 24255-24433/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75d825cfc0 NativeCrypto_SSL_interrupt\n02-01 11:24:02.492 24255-24433/in.org.vidyalaya.android I/System.out: close [socket][/10.132.40.248:55348]\n02-01 11:24:02.577 24255-24433/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75ded28a00 NativeCrypto_SSL_interrupt\n02-01 11:24:02.578 24255-24433/in.org.vidyalaya.android I/System.out: close [socket][/2405:204:9e:b819::1407:38ac:33206]\n02-01 11:24:06.580 24255-24320/in.org.vidyalaya.android I/System.out: Check isMmsSendPdu\n02-01 11:24:06.580 24255-24320/in.org.vidyalaya.android I/System.out: PDU read len:8192\n02-01 11:24:06.580 24255-24320/in.org.vidyalaya.android I/System.out: MMS PDU Type:45:45\n02-01 11:24:06.580 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest>>\n02-01 11:24:06.580 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest<<\n02-01 11:24:09.695 24255-24433/in.org.vidyalaya.android D/NativeCrypto: ssl=0x75d825d340 NativeCrypto_SSL_interrupt\n02-01 11:24:09.696 24255-24433/in.org.vidyalaya.android I/System.out: close [socket][/2405:204:9e:b819::1407:38ac:54607]\n02-01 11:24:17.670 24255-24436/in.org.vidyalaya.android I/System.out: close [socket][/10.132.40.248:52422]\n02-01 11:24:17.885 24255-24436/in.org.vidyalaya.android I/System.out: close [socket][/10.132.40.248:52421]\n02-01 11:24:41.233 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityCreated: app is in foreground\n02-01 11:24:41.233 24255-24255/in.org.vidyalaya.android D/BGCheck: onActivityCreated: 1\n02-01 11:24:41.249 24255-24255/in.org.vidyalaya.android D/MyApp: onActivityResumed: language to load:en\n02-01 11:24:41.342 24255-25791/in.org.vidyalaya.android D/FA: Connected to remote service\n02-01 11:24:51.324 24255-24320/in.org.vidyalaya.android I/System.out: Check isMmsSendPdu\n02-01 11:24:51.324 24255-24320/in.org.vidyalaya.android I/System.out: PDU read len:8192\n02-01 11:24:51.324 24255-24320/in.org.vidyalaya.android I/System.out: MMS PDU Type:45:45\n02-01 11:24:51.324 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest>>\n02-01 11:24:51.324 24255-24320/in.org.vidyalaya.android I/System.out: [OkHttp] sendRequest<<\n02-01 11:24:57.648 24255-25570/in.org.vidyalaya.android I/System.out: Close in OkHttp\n02-01 11:24:57.648 24255-25570/in.org.vidyalaya.android I/System.out: close [socket][/192.168.0.121:51377]. Thanks but i have solved the issue. It was the issue of broadcast receiver getting removed by some devices. Thanks for your help\ud83d\ude09. I created a global upload receiver for the upload & i have unregister it only after completing the upload of the video & i have block the back button while uploading the video. But then how it works in the sample app in oreo devices?. Did you add the class called NotificationActions & NotificationActionsReceiver and declared the latter class as a receiver in your manifest with your own package name?. But for me its not working even after that in my project so is it my issue or the library issue?. Its targeted to 27 but not work on oreo devices only. > > Did you add the class called NotificationActions & NotificationActionsReceiver and declared the latter class as a receiver in your manifest with your own package name?\n\nYes, I did.\n<receiver android:name=\"com.example.events.UploadReceiver\" android:exported=\"false\"> <intent-filter> <action android:name=\"net.gotev.uploadservicedemo.uploadservice.broadcast.status\" /> </intent-filter> </receiver> <receiver android:name=\"com.example.events.NotificationActionsReceiver\" android:exported=\"false\"> <intent-filter> <action android:name=\"net.gotev.uploadservicedemo.notification.action\" /> </intent-filter> </receiver>\nBut the cancel button is not working.\n\nYour action name is wrong it should contains your package name and then upload.broadcast.status. > Thank you so much @Faiyyaz It works now  . But not on Oreo :( Thank you for helping me.\nYou are welcome @Aravindraj93.\nYes the oreo is the issue for me too. ",
    "marcherdiego": "I would divide the total uploaded bytes by the sum of the whole pool of bytes to be uploaded in the first place. ",
    "Aravindraj93": "It would be great, if we can show the uploading progress within the app itself. Waiting for the update Thank you for the library.@gotev . Same issue here. Please help me if you find a solution @Faiyyaz . In my case the cancel button is not working on any devices. But it works on sample app.. > Did you add the class called NotificationActions & NotificationActionsReceiver and declared the latter class as a receiver in your manifest with your own package name?\nYes, I did.\n<receiver android:name=\"com.example.events.UploadReceiver\" android:exported=\"false\">\n            <intent-filter>\n                <action android:name=\"net.gotev.uploadservicedemo.uploadservice.broadcast.status\" />\n            </intent-filter>\n        </receiver>\n        <receiver android:name=\"com.example.events.NotificationActionsReceiver\" android:exported=\"false\">\n            <intent-filter>\n                <action android:name=\"net.gotev.uploadservicedemo.notification.action\" />\n            </intent-filter>\n        </receiver>\nBut the cancel button is not working. . Thank you so much @Faiyyaz  It works now \ud83d\udc4d . But not on Oreo :(   Thank you for helping me.. ",
    "WestBonner": "Solved: \nnew MultipartUploadRequest(this, uploadid, URL)\n                    .setUtf8Charset(). ",
    "AlbertoMrFz": "I have the same issue.\nIn samsung galaxy note III with android 4.4.2 And in samsung galaxy s6 with android 7\nHow i can solve them?. I have tried on a device with android 7 and the same thing happens to me. So it's not a problem with old devices. ",
    "djoxy032": "I tried to use 3.4 but application crashes when it comes to upload.. I had a minor bug but still the same problem with upload error. There is not crash errors but only upload error. . \n. ",
    "Mritunjay10": "Sorry, but I failed to find the answer to my question even I read through the readme and the links given in it.\nCan you give me the link or hint me the code.\nYour help will be highly appreciated!. Sorry, to bother but I found the way out!\nYour work is highly appreciated you created a full working code base on REST API and I must say it's easy to use and works like a charm.\nAgain, thanks, brother you rocked!. The problem is I can't upload file. it just shows this in the console - \nresolve: [Function: resolve],\n     normalize: [Function: normalize],\n     isAbsolute: [Function: isAbsolute],\n     join: [Function: join],\n     relative: [Function: relative],\n     _makeLong: [Function: _makeLong],\n     dirname: [Function: dirname],\n     basename: [Function: basename],\n     extname: [Function: extname],\n     format: [Function: format],\n     parse: [Function: parse],\n     sep: '/',\n     delimiter: ':',\n     win32: [Circular],\n     posix: [Circular] }\nbut folder is created\n. My node is 8.11. I am trying to add new dependencies so let me try first if I fail I will request you.. Well, I fixed the code for multiple uploads so I am good now let me know if I can contribute to this amazing library.. I didn't get you. Sorry, new to GitHub . I requested the pull request with updated index.js and package.json. Thanks for the heads up I will fix that asap and let you know. I may need your guidance for 401 errors.. ",
    "harishrawal": "I want to add path(image path) but my uri is null . how to send the null path in api.  . ```\n try {\n              String uploadId = UUID.randomUUID().toString();\n              new MultipartUploadRequest(this, uploadId, Constant.add_member_signup)\n                      .addFileToUpload(pathapplicant_imageS, \"photograph\")\n                      .addFileToUpload(pathnominee_imageS, \"nominee_photograph\")\n                      .addFileToUpload(path1, \"photograph\")\n                      .addFileToUpload(path2, \"nominee_photograph\")\n                      .addFileToUpload(path3, \"docs[0][]\") // path3 is not mendatory. if path3 is not available my api is not hit. Please suggest me!\n                      .addFileToUpload(path4, \"docs[1][]\")\n                      .addFileToUpload(path5, \"docs[2][]\")            \n                      .addParameter(\"api_token\", api_token_string)\n                      .addParameter(\"salutation\", salutationS)\n                      .addParameter(\"name\", first_nameS)\n                      .addParameter(\"father_husband_name\", father_husband_nameS)\n                      .addParameter(\"designation\", designationS)\n                      .addParameter(\"hq\", hqS)\n                      .addParameter(\"address\", current_addressS)\n                      .addParameter(\"dob\", dobS)\n                      .addParameter(\"doa\", doaS)\n                      .addParameter(\"dor\", dorS)\n                      .addParameter(\"permanent_address\", permanent_addressS)\n                      .addParameter(\"admission_cheque\", addmissison_cheque_noS)\n                      .addParameter(\"cheque_amount\", amountS)\n                      .addParameter(\"mobile_no\", mobile_noS)\n                      .addParameter(\"whatsapp_no\", altmobile_noS)\n                      .addParameter(\"acc_no\", bank_acc_noS)\n                      .addParameter(\"ifsc_code\", ifscS)\n                      .addParameter(\"bank_name\", bank_nameS)\n                      .addParameter(\"branch_name\", branch_nameS)\n                      .addParameter(\"pf_no\", pf_noS)\n                      .addParameter(\"pan_card\", pancard_noS)\n                      .addParameter(\"introduce_no\", \"\")\n                      .addParameter(\"railway_id\", railway_idS)\n                      .addParameter(\"id_number\", voter_idS)\n                      .addParameter(\"blood_group\", blood_groupS)\n                      .addParameter(\"nominee_salutation\", nom_salutationS)\n                      .addParameter(\"nominee_name\", nom_first_nameS)\n                      .addParameter(\"relationship\", nom_relationshipS)\n                      .addParameter(\"nominee_phone\", nom_mobile_noS)\n                      .addParameter(\"nominee_address\", nom_current_addressS)\n                      .addParameter(\"docs_name[0]\", \"voter ID / Aadhar card\")\n                      .addParameter(\"docs_name[1]\", \"Railways ID card\")\n                      .addParameter(\"docs_name[2]\", \"PAN Card\")\n                  .addHeader(\"Accept\", \"application/json\")\n                  .setNotificationConfig(new UploadNotificationConfig())\n                  .setMaxRetries(2)\n                  .startUpload(); //Starting the upload\n\n      } catch (Exception exc) {\n          Toast.makeText(this, exc.getMessage(), Toast.LENGTH_SHORT).show();\n      }\n\n```. path3 is not mendatory. if path3 is not available my api is not hit. Please suggest me!  . Thanks you for your valuable suggestion. ",
    "sraka1": "@obaidjatoi did you resolve this issue?. ",
    "emadph": "@gotev thx for quick response\ni checked and seems every thing was fine...\nServer side Code\n```java\npublic object Upload() { \n            try\n            {\n                var httpRequest = HttpContext.Current.Request;\n                var Service = new ChatService();\n                var filePost = httpRequest.Files[0];\n            //// Save Func...\n\n            return filePost.ContentLength;\n\n        }\n        catch (Exception ex)\n        {\n\n        }\n        return 0;\n    }\n\n```\nby the way  i checked with ajax and upload same file from web and Server Side worked..\nnow what !? \n. @NLLAPPS\ni already add this methods\nYou can check here and see : \n```java\n\n\n\n<label for=\"file\">Filename:</label>\n<input type=\"file\" name=\"file\" id=\"file\" />\n\n<input type=\"submit\" />\n\n\n\n\n```. @NLLAPPS\ndid u check this html code ?! \nupload size more than 2 gig \nany change in web config except this !? . @NLLAPPS  thx dude \ni know but the guy from server side not accept this :)). @NLLAPPS \ntanks guys ... . ",
    "danangww": "Thanks, I will try to find out the solution. :). Thank you so much, this problem is solved. . ",
    "bhavincb": "hii @gotev , \ni had already asked that but by looking at error it seems there is some issue with uploadservice. that is why i had raised issue here.. ",
    "felixdivo": "@gotev Will this eventually be merged?. ",
    "muhrifqii": "IMHO it will be convenient for faster implementation (without having subclassing this and that, or submodule the lib) then have a well configured upload notification channel (if the app needed to do so).\nYes it will definitely bring more maintenance effort if notification API changes. But it's all up to you.\nBtw, @gotev thank you for returning, and happy new year \ud83d\udc4d . ",
    "govindtank": "@TikTak123 if you just don't want to see the notification while uploading happens, just don't add the below line;\n            .setNotificationConfig(new UploadNotificationConfig())\nremove that line, so no notification will be shown on your device, hope it helps. thank you @gotev for the information, i wasn't aware about that notification policy till now in oreo.. ",
    "TikTak123": "@gotev Thank you. ",
    "Pro-55": "I want to completely hide the notification while uploading. Can you give a code snippet that can be used to do this? Currently I'm setting the notification to a channel and that channel has lowest importance by default. While uploading the channel importance is set to medium automatically. Do you have any idea why this is happening? Code for my channel is:\nNotificationChannel channelGeneral = new NotificationChannel(channelIdGeneral, channelNameGeneral, NotificationManager.IMPORTANCE_MIN);\n        channelGeneral.enableVibration(false);\n        channelGeneral.enableLights(false);\n        getNotificationManager().createNotificationChannel(channelGeneral);. The notification configuration is: \nprivate void notificationConfig() {\n        config.setNotificationChannelId(channelIdGeneral);\n        config.setRingToneEnabled(false);\n        config.getProgress().autoClear = true;\n        config.getError().autoClear = true;\n        config.getCompleted().autoClear = true;\n        config.getCancelled().autoClear = true;\n    }. I have displayed an UI progress bar in the main activity to show the upload progress. I just want to set the Importance of this channel to MIN so it wont be displayed. But it is somehow changing to LOW for some reasons.\n. I agree with what you are saying but what got me confused here is that the code is working as expected on Android 8.0 devices and changing channel importance on devices with Android 8.1. Okay Thank you for helping.. I'm having the same issue. I have updated Android Upload Services to 3.4.2 & now it says that onError method does not override or implement a method from a supertype. . I was supposed to pass an extra parameter ServiceResponse to the method. The error went away but the upload for Oreo devices has stopped altogether.\n. I'm using it to display a progress bar while the image is uploaded to the server. It is displayed on top of one of the activities.\n. ",
    "iman2420": "Just try to delete file:// from uri.\nexample: /data/user/0/xxx.xxx.xxx/cache/0123.png. ",
    "peace-shillong": "I have reviewed the Sample APP And Found the Solution:\nProblem was with my Initializer Class:\n      UploadService.NAMESPACE = BuildConfig.APPLICATION_ID;\n    // Or, you can define it manually.\n    //UploadService.NAMESPACE = \"com.example.peace.testupload\";\n\nI commented the third line and now it works!. ",
    "gian123": "the same problem. ",
    "alexkok": "Great, thanks @gotev!. ",
    "akosijiji": "@gotev thanks! I realised it's the file size issue!. ",
    "MarkAdamson": "This sounds like a different issue to me. Issue #392 is to do with the internal notification id, not to do with upload IDs or notification actions.. ",
    "XJIOP": "Ah sorry then I create new ticket. Testing on emulator, after starting upload (Multipart) immediately open notification and click button (cancel upload), broadcast logs is empty. Same with connection lost, by enable fly mode get error status only after 10 min, on Nougat get error immediately.. About action buttons, I have tested on Oreo and it only works with this sample\n```\n    public static PendingIntent getCancelUploadAction(final Context context,\n                                                      final int requestCode,\n                                                      final String uploadID) {\n        Intent intent = new Intent(context, NotificationActionsReceiver.class);\n        intent.setAction(INTENT_ACTION);\n        intent.putExtra(PARAM_ACTION, ACTION_CANCEL_UPLOAD);\n        intent.putExtra(PARAM_UPLOAD_ID, uploadID);\n    return PendingIntent.getBroadcast(context, requestCode, intent, PendingIntent.FLAG_UPDATE_CURRENT);\n}\n\n```\nand on Nougat it works too.. Another problem with the action buttons. Multiple uploads every single notification action button has same upload ID taked from last added upload.\nexample\n\nCreated upload with ID: 74a7377d-49f3-405b-b3e3-885e2d0ccfc5\nCreated upload with ID: faab050a-73ff-4f64-a694-49e16f236659\nClicked action button with ID: 74a7377d-49f3-405b-b3e3-885e2d0ccfc5 \nreturn faab050a-73ff-4f64-a694-49e16f236659\nClicked action button with ID: faab050a-73ff-4f64-a694-49e16f236659 \nreturn faab050a-73ff-4f64-a694-49e16f236659\n\nto fix that need unique ID in requestCode for pendingIntent\nint uniqueInt = (int) (System.currentTimeMillis() & 0xfffffff);. ",
    "SunilKumarEvolgence": "Auto Retry is not working properly (automatically retry failed uploads, with a configurable exponential back off) Could you please elaborate this point?..... Auto Retry is not working properly (automatically retry failed uploads, with a configurable exponential back off)\nhope you get my point i would like to hear more from you will waiting for your positive response...\n. ",
    "manishshakyadevp": "V/NativeCrypto: Write error: ssl=0x76c0c7c208: I/O error during system call, Connection reset by peer\u00a0\nV/NativeCrypto: SSL shutdown failed: ssl=0x76c0c7c208: I/O error during system call, Success\nthere messages comming. its coming sometimes on some wifi connections\n. ok thanks sir\nOn Thu, Aug 2, 2018 at 7:40 PM, Alex Gotev notifications@github.com wrote:\n\nHowever the log you sent is not a library related issue. I suggest you to\nuse latest OkHttp stack it you're not using it already \ud83d\ude04\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/gotev/android-upload-service/issues/401#issuecomment-409939662,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AoFTLXzAlz5r2aEOwBxgF8ezErqTK_E1ks5uMwhFgaJpZM4Vr8Kk\n.\n. \n",
    "albinhubsch": "@gotev indeed it is! I was not paying attention to the complete documentation\nexception - exception that caused the error. It can be null if the request successfully reached the server, but it responded with a 4xx or 5xx status code.\nthanks for making it clear. The crash in the external library has been resolved.. ",
    "vikasgupta4190": "Unicode problem .Not send unicode format to server.. issue solved  after used this function .setUtf8Charset();\nThank you. ",
    "CaliAlec": "I was having the same issue: the global broadcast receiver callbacks weren't being called even though I wasn't setting any delegates.\nFor me it was because I was setting an applicationIdSuffix for my debug builds such as below:\nbuildTypes {\n        debug {\n            applicationIdSuffix \".debug\"\n            debuggable true\n            ...\n        }\n        release {\n            debuggable false\n            ...\n        }\n    }\nThe package name in the Intent Filter's action wasn't the same for my debug builds, so to fix the issue I'm using the packageName variable in my Manifest:\n<action android:name=\"${packageName}.uploadservice.broadcast.status\" />. @gotev I'm on 9.0 but like I said, I think my issue was because of the package name suffix. It's solved for me.. ",
    "androidnoob123": "Thank you for the reply, @gotev. Sorry for the trouble, but I think you misunderstood me.\nI am not asking to hide the notification. I'm saying if there's a possibility of not showing the progress bar but still showing the notification during upload. Hiding notification is not allowed in 8+, but it is not mandatory to show progress bar, is it? \nI guess changing to .setProgress(0, 0, false) will do that. Is there any way I can achieve that without changing the base code? Or do I have to import the folder as module and make change in the base code (in UploadTask.java.) Please let me know. Thank you!. ",
    "sepehr1014": "We're having this issue as well. Any solutions?. @gotev Could you update us on this issue? Did you get a chance to look into this?. ",
    "Sdghasemi": "That's the exact point, it's totally random.\nWe're using your perfect library as one of our core features (social network app), but I myself have never got this error. Our users on the other hand might do a lot of uploading stuff which makes it more probable to happen. So yes, it happens randomly.. There are several options to solve the issue. Since you know your code better than me, you can choose more wisely:\n1. Get rid of the whole shutdown procedure as you said about the battery saving features of newer Android versions.\n2. Run the whole shutdown and cancel procedure in a single thread to avoid async method calls.\n3. Make the timer instance modifications synchronized to make sure a method call gets finished and another starts.\n4. Add a cancel check right before scheduling it on line 305.. Thanks @gotev, I'll keep you posted for the PR. Appreciate the assistance.. ",
    "vicmns": "Nop, wouldn't the Builder provide a default value for each one?. Looking at the OkHttpClient.Builder class indeed it has default values:\njava\nconnectTimeout = 10_000;\nreadTimeout = 10_000;\nwriteTimeout = 10_000;. ",
    "kishan2212": "\nPlease share the code you use to upload\n\nHey i'm done with it but now i want to store my json response after calling my webservice where can i find my json reponse ?. > \n\nNice! You can find what you need in the wiki monitoring section.\n\nsorry but i can't find anything in wiki monitoring section.\ncan you please tell me. > \n\nLook at the onCompleted method of either delegate or broadcast receiver. What you need is inside serverResponse.\n\nthanks but what if i want to put this on asynctask ? . java.lang.NullPointerException: Attempt to invoke virtual method 'java.lang.String java.lang.Object.toString()' on a null object reference\nshowing here error \n@Override\n                        public void onError(Context context, UploadInfo uploadInfo, ServerResponse serverResponse, Exception exception) {\n                            progressDialog.dismiss();\n                        }. what if i check path blank or not if blank i remove file parameter will it works ?. > \n\nMultipart works only when you have a file to be uploaded, otherwise you simply need something different for your use case\n\nokay thanks have to learn retrofit . ",
    "PinkalBaleshwaria": "You need to add this permission in your AndroidManifest.xml file and you don't have to handle any permission check. It will always be granted.\n\n. ",
    "yudikarma": "ok @gotev anyway thanks so much for very fast respons. ",
    "Mahan3340": "@gotev is it possible to add it as feature because I don't want to clone the whole lib just for a private to public conversion. "
}