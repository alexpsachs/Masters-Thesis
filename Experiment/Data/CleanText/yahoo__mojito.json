{
    "caridy": "This is not longer supported in 0.5.x where we use YUI Log instead. Closing.\n. closing old ticket.\n. fixed a while back.\n. I don't think this is valid anymore since prod quality apps will probably get assets from CDN, in which case the headers are controlled by the CDN itself (and mojito-shaker). If mojito serves those assets, the current configurations that we have should be good enough. Closing.\n. closing old ticket.\n. closing old ticket.\n. /ping @imalberto, let's keep this around just for reference until we land the 0.6 refacfor where they will be able to control middleware thru express directly.\n. this is done in mojito-next (0.9), where middleware are just express/connect middleware.\n. ops, I didn't notice this open issue before making the pull request. Anyway, here is the pull:\nhttps://github.com/yahoo/mojito/pull/182\n. This is now solved for ac.done and ac.composite.done as well.\n. This is related with the composite error handling, issue #25. Once we get that fix, FrameMojit will catch the error and potentially propagated through ac.error which couse the proper error report in the browser.\n. You can now create your own frame mojit and control errors in the child, or you can rely on the express middleware to manage the errors.\n. solved in 0.5.0.\n. This is covered by the refactor in 0.5.3 to facilitate the creation of new framemojits, and inheriting from the original implementation to only change template and data.\n. This is still an issue. Let's bump this up. /cc @rwaldura @jenny \n. will be available in mojito@0.5.5 scheduled for next week.\n. @isao is this still an issue?\n. Solved in 0.5.x while dispatch does not know about yui modules anymore.\n. old issue. closing.\n. @isao is this still an issue?\n. @drewfish is this still an issue or the msg was corrected?\n. Closing this, should not be a problem in 0.5.x.\n. compile command is gone.\n. Let's bump this up @rwaldura, to add it as part of the default frame. Should be easy. /cc @jenny \n. Closing this since we want people to have their own FrameMojit.\n. mojito-cookie-addon for the client side is already using Y.Cookie for all these methods:\n[\n            'exists',\n            'get',\n            'getSub',\n            'getSubs',\n            'remove',\n            'removeSub',\n            'set',\n            'setSub',\n            'setSubs'\n        ]\nWe just need to get to feature parity for the server side implementation.\n. Not longer an issue with 0.5.x.\n. Solved by the new loader infrastructure in 0.5.x\n. This is invalid, each lang bundle should require it's dependencies, including \"intl\" if it needs to call Y.Inlt.add. \n. @isao is this still the case?\n. /ping @isao \n. if (!children || Y.Object.size(children) === 0) {\n                throw new Error('Cannot run composite mojit children because' +\n                                ' there are no children defined in the' +\n                                ' composite mojit spec.');\n            }\nIn 0.5.x we have that check in place.\n. ac.pageData.set('foo', 'some value here') does this, just remember to require mojito-data-addon. This data is also available in all templates rendered under the same request/page thru {{page}} object.\n. This is not longer in the realm of mojito, but mojito-shaker. The comboing thing was introduced in 0.5.x. Closing.\n. This is not longer in the realm of mojito, but mojito-shaker. Closing.\n. Fixed as part of 0.5.x, we now use the proper adapter.error when something happen within the dispatch workflow.\n. This is not longer an issue in 0.5.x, closing.\n. I think this is already supported. just saying!\n. In 0.5 mojito-handler-error middleware was introduced. In 0.6 you will be able to handle this in express directly.\n. @isao can we close this?\n. /ping @isao, can you move this to mojito-cli-lint?\n. 0.5.x static handler relies entirely on the store and the urls produced by the store, anything else is ignored (404).\n. This was resolved in 0.5.x as part of the notFound feature in mojito-handler-static addon.\n. This is supported in 0.5.x thru cache and forceUpdate configurations.\n. In 0.6 you should be able to do this thru express directly.\n. This is fixed on 0.5.0pr3 where the default configuration for log is under the yui->config settings from config.json or application.json.\n. {\n                \"environment\": {\n                    \"development\": {\n                        \"dev\": null,\n                        \"test\": null\n                    },\n                    \"production\": {\n                        \"stage\": null,\n                        \"prod\": null\n                    }\n                }\n            }\nThat's the default configuration in dimensions.json. Closing this.\n. @add0n that feature already exists. In the server or in the client, you can access to ac.context.runtime in the controller. In the binder you have access to mojitProxy.context.runtime, it will have:\nserver or client, depending on the runtime.\nAbout the other part of the request, I don't think configuration are any better than a descriptor in the filename.\n. oh man, everyone is having the same problem with the pull request. We need to document the process better. Btw, you can always use \"git cherry-pick\" to avoid having another clean pull request.\n. If you want to try out the current implementation, check the demo here:\nhttps://github.com/caridy/mojito-handlebars-demo\n. @Schnitz of course I need help jajajaja\n. @isao, the idea is to have the same support since mustache is a subset of handlebars, so we can drop mustache implementation and still support .mu.html files as an alias of .hb.html. I don't see why we need to have both when handlebars can perfectly handle mustache templates.\n. sure, let's close this one then. I will pull another next week!\n. @drewfish is this still an issue?\n. -1\nThis might be VERY problematic.\n. I'm saying we need a better way to define routes. Here is what I will like to see:\n1- a way to identify routes\n2- using the route identifier from mojits and from shared mojits controller to produce urls\n3- using the route identifier from a template's helper in the client and server to produce urls\nAfter few weeks analyzing this problem as part of a separate effort (YAF integration), I came to the conclusion that such identifier is, in most cases, what we also call an app-level event, hence number 2 is potentially problematic because of the nature of the mojits, specifically the share-ability, which makes difficult to have app-level stuff that will be triggered by a shareable piece.\nBottomline, if we consider the \"call\" that identifier in the current mojito infrastructure, you should move part of the logic into specs by having instances of your top level mojito (your current \"index\"), having custom default actions per each. In which you might ended up with a 1-1 mapping between routes and mojit instances. Here is an example:\n{\n    \"story\": {\n        \"verbs\": [\"get\"],\n        \"path\": \"/:interestId/:alias\",\n        \"regex\": {\n            \"alias\": \"?:(.+).html.*\"\n        },\n        \"call\": \"page-story.index\",\n        \"params\": \"alias_type=story\"\n    },\n    \"interest_id\": {\n        \"verbs\": [\"get\"],\n        \"path\": \"/:interestId\",\n        \"regex\": {\n            \"interestId\": \"?:([^/]*)/?\"\n        },\n        \"call\": \"page-interest.index\",\n        \"params\": \"alias_type=path&alias=/\"\n    },\n    \"path\": {\n        \"verbs\": [\"get\"],\n        \"path\": \"*\",\n        \"call\": \"page.index\",\n        \"params\": \"alias_type=path\"\n    }\n}\nthen in your specs:\n{\n    \"specs\": {\n        \"index\": {\n            \"type\": \"YourAwesomeFrame\",\n            \"action\": \"index\",\n            \"config\": {\n                \"something\": \"here\"\n            }\n        },\n        \"page-story\": {\n            \"base\": \"page\"\n        },\n        \"page-inderest\": {\n            \"base\": \"page\"\n        }\n    }\n}\nIn which case you can even move those params into the instance in specs, and just call for urls based on the instance name.\n. The other thing that I noticed is that some of the features from DaliProxy are now gone. E.g, performance metrics for every request, something that was built-in as part of the \"makeRequest\" routine. This has to be included in the new implementation, for those who care about performance (like me!).\nI don't see support for \"multipart\" response headers, even though I have never used it, but I remember the endless discussions about this subject (for the record I was against it). I don't think mojito supports that today, but I'm not 100% sure.\nAnyway, my 2 cents.\n. @mridgway yes, just look for references to \"getTime()\" which is the way they mark important moments. Now, I'm not so sure this is available or not, in the old Dali implementation for maple, it was available through the custom beans, but I know mojito is kind of obscure in terms of accessing \"beans\" directly. I will have to investigate more.\n. alright, let me do it on develop branch then.\n. n.p. here is the clean pull: https://github.com/yahoo/mojito/pull/179\n. @drewfish isn't this a case for a custom regex? Can you comment and close?\n. This should be solved in mojito-next (0.9) which is using express 3.x routes.\n. @isao if you provide more details where should we put the tests, I can help as well, but I didn't found any previous tests for \"mu\".\n. This is one of the primary use-cases in mojito, and it should work. Can you provide more details @trungpham? repro case maybe?\n. closing old tickets.\n. Few notes:\n- Yes, with handle bars this is not an issue since internally it is a sync process, but it might be problematic for other view engines like MU.\n- Yes, MU will be an alias of HB starting on 0.5.4 (PR already merged), which means we are off the hook for now.\n- First byte do not helps at all with this, they are different beasts.\n- Partials might help in many use cases (already introduced in 0.5.3).\nThe solution proposed in issue #454 sounds good.\n. We are moving toward synchronous template resolution and rendering, in which case this is not going to be an issue in 0.6.x, I will like to keep this around until we get there.\n. closing in favor of issue #454\n. This was solved a while ago when ac.done() and ac.composite.done() become equivalents in term of api. Check HISTORY.md for more details.\n. Closing this now that we have the infrastructure to facilitate the creating of new frame mojits, which is what we want people to do.\n. Perfect, thanks for the pull request @Schnitz. Now we just need the test!\n. will a custom specs definition per mojit help in this case to get better organization/granularity?\n. PR #905 adds support for multi part application.json by using applicationConfigFiles in the master section of application.json to specify relative files that should be parsed. import_settings is still pending though.\n. this was solved a while ago.\n. guys, let's not pollute this issue, I have created a new issue #249 for the data sharing discussion. \n. @gvaish there are not custom dimensions in mojito, that's the whole point of this issue, so we can keep the context domain finite.\n. this is a follow up from the discussion started on issue #247\n. @gvaish the way I see it, this is just DATA, hence it should be a model not a property under ActionContext. A model that any controller can have access to, collecting the data from it. There are a couple of problems though:\n1. Models (as today, by default) are created per Y instances (which means: per Mojit instances), so really sharing them is not that easy. But we can share the underlaying data between those instances easily through YUI.\n2. Models don't have access to the ActionContext or Req object, which is a problem today in my opinion because we cannot even propagate a cookie to a 3rd party api, or collect data directly from the request, etc. So, in a sense, you will have to propagate the req object from the controller to the model intentionally to be able to capture that data added by the middleware, not trivial.\n. Closing this now that ac.pageData is in place.\n. closing old tickets.\n. closing old tickets.\n. @ericf @Satyam, let's take some time to evaluate this, and come up with a plan that fits mojito and yui. For us, It is a good opportunity to revisit the use case of model now that we are doing some refactor in Axis to use Y.Model without the rest of the Y.App framework in the context of Mojito. We will see!\n. Btw, I don't think this discussion affects the pull request in the first place. We still need to support Y.Model instances in mojito, and @focuzz proposal seems to be a good starting point. e.g.:\nY.mojito.models[NAME] = Y.Base.create('pieModel', Y.Model, [], { }, { });\n. @drewfish yes. for backward compatibility, and for simple use cases, a current mojito model can work just fine. I don't see why we should remove it. And I think the commit from @focuzz fulfills that!\n. I have mixed feelings about this. I think once Y.Model lands in mojito we can definitely know how to call them, and to have some documentation explaining the different type of models or data-services or whatever, and how they will work with mojito. \n. @trungpham it is not dead, we have people actively working on this, but it is not moving as fast as we want, mostly due to the other initiative to stabilize performance, and that one has a higher priority at the moment. In any case, here is the trello board for this exercise in case you want to follow-up/subscribe:\nhttps://trello.com/board/mojito-yaf/50627b0ad717546b7685105d\n. This is not longer relevant in 0.6, closing.\n. I don't think the internationalization is related with the \"base\" or \"comboBase\", but I will investigate. I can ensure you that my patch for SSL support works just fine since we use it in Axis ;)\n. @focuzz can you try to add an empty:\n\"yui\": {\n         \"config\": {}\n   }\nin your application.json to see if that solves the problem with the language property in the combo url?\n. I think we can close this issue since yui.base or yui.comboBase should not be used to customize the client configuration, it only affect the way mojito populates YUI at the server side (by default from node_modules/yui/.\nFor the client, you can use yui.config.comboBase in application.json.\n@rwaldura probably we should clarify that in the documentation.\n. @focuzz can you try that example with this setting in the application.json:\n\"yui\": {\n        \"dependencyCalculations\": \"precomputed+ondemand\"\n    }\nIt is just a hunch, but I guess this problem is related with the fact that old IE versions require some YUI specific modules, and since the default behavior in mojito is \"precomputed\", it fails badly in those escenarios.\nIf this fix the problem for your example with the latest mojito, that means we should set \"precomputed+ondemand\" as the default behavior, and eventually introduce a new one to use the new features in YUI 3.6.x to optimize the loader metadata per request.\n. This should not be an issue anymore in 0.5.x since YUI loader will load IE specific bundles when needed. Closing this.  @focuzz, feel free to reopen it.\n. @zhouyaoji can we close this?\n. @FabianFrank this is challenging because of the variable port. In manhattan, it is manhattan the one responsible for defining the port and calling for listen on the exported server object. In dev, we let mojito to pick up the port from application.json. In nujitsu and heroku they will provide a port as well. I like your patch  to listen(process.env.PORT), maybe that's the right thing to do. I think we will need to work with manhattan to get them to use the same principle used by nujtsu and heroku.\nAbout the appPort in application.json, I think that's just useless since you can't leverage the dimensions to have different port per env or whatever, I think we should just remove that thing and stick to the server.js definition for the listen on dev mode when process.env.PORT is not defined.\n. @focuzz this is definitely needed. Can you provide the tests as well as part of this pull request?\n. n.p. I will try to help.\n. @focuzz yes I do! username: caridy\n. This falls under the refactor proposed for 0.6.x where models are more flexible, and mojito will not try to do much with them.\n. @focuzz @mridgway yes, that's the main reason I decided not to pull the client side version of the HB implementation. YUI already does part of the job, and most important, HB relies heavily on partials and precompiled views. And this is not supported yet in mojito. @drewfish asked me to remove the changes that I did in mojito server side to precompile those views in HB way.\nThe way I see it, we should use this opportunity (renaming views into templates, etc) to embrase HB as the standard engine for mojito, and drop the current (and unnecessary) processes to load them from the client side in a form of *.mu.html directly, and instead, leverage YUI to do precompilation at the server side before flushing them to the client or merging them with the rest of the JS files through Shaker. And the current users, using mustache templates will not get affected since we can keep the backward compatibility.\n. To clarify, that change that I'm proposing will remove the current mu/hb client side implementation, in favor of a more YUI friendly implementation, and it will obviously improve performance a lot since rendering templates will be a synchronous process without string manipulation.\n. @focuzz yes. In theory, the resource store (/cc @drewfish) should be able to take care of this during the booting time (Shaker can also leverage resource store for the matter). In my opinion, this will bring few benefits:\n- partials are easy when u already have pre-processed templates per mojits.\n- easy to deploy the compiled templates, to a device, to a browser, to the server (by shaker)\n- templates can be treated as YUI modules, hence we can define them as dependencies, etc. Very useful if you want to optimize what you load and when you load it.\n- these new compiled templates will be familiar for anyone who has been using HB with YUI.\n- and finally, the obvious performance improvement.\n. @drewfish right! but the reality is probably different. None of those templates engines have a chance against handlebar or dust for the web. Compiled templates for the client side is a must in the majority of the cases. Now, to address that concern, there is nothing that prevents us the use of a non-compilable template engine. We can alway send them into the client side in a form of TEXT, and then exposing them in a form of a function that will run in async mode to do the rest of the job. Here is an example with both approaches on it:\n```\nYUI.add(\"views/foo/bar\", function (Y, NAME) {\n  var templateObject = {/* a json representation of the template for non-compilable template engines */};\n  /* or */\n  var templateFunction = function (data) {/* a js representation of the template for compilable template engines */};\n\n  YUI.namespace(\"_mojito._cache.compiled.' + mojit + '.views\").bar = function (data, callback) {\n       // do whatever you want here, if you have a templateFunction call it.\n       callback(templateFunction(data));\n\n       // or just use the templateObject if that's what u have with your engine running on top of YUI as a wrapper.\n       Y.ABC.run(templateObj, data, callback);\n  };\n\n});\n```\nIn other words, rather that provide support for engines, we can provide support for generating YUI modules that represent compiled templates that can be used at the client and server side alike. This aligns better with the fact that we can to delegate heavy string processes to the build or booting process for performance reasons as well. And at the end, a template is just a YUI module that expose a function under a certain namespace, and that function expect data and a callback.\n. This is going to be addressed in 0.6 thru express-state. I will keep this around for reference. In the current mojito, only stuff set thru ac.pageData.set() and ac.data.set() will be serialized and rehydrated in the client side.\n. this is done.\n. @rwaldura this is still an issue, feel free to create a card in trello for prioritization.\n. Mixing \"ac\" from parent to child chould be problematic. I think the solution for this is also related to the work I have done on error propagation from child to parents, etc. I will think more about this.\n. @sqawasmi can you provide an repro case?\n. That's all I need, thanks @sqawasmi. I will try to get this fix for 0.5.5 on monday.\n. This fix will be included in tomorrow's release!\n. @mridgway until we get a better integration, the idea is to do something like this:\nindex: function(ac) {\n    var foo = new ac.models.ModelFoo({/* model config */});\n    foo.load(function() {\n        ac.done(foo.toJSON());\n    });\n}\nAlthough, I don't see the point of having the models collection, I rather prefer to do something like:\nindex: function(ac) {\n    var foo = new Y.ModelFoo({/* model config */});\n    foo.load(function() {\n        ac.done(foo.toJSON());\n    });\n}\nand defining the proper requirement as part of the controller's requires config, since that's more natural for YUI users, and ultimately, the optimization of what needs to be loaded (in the client side) in case you have more than one model under a mojit.\nand eventually, once we get better integration with Y.View/Y.Renderer we should be able to do something more advanced, in this case passing the reference of the model into the view/renderer, just like YAF.\n/cc @drewfish\n. hey @jintao, what's the intent of this new feature? It looks like you're targeting development, to be able to see live changes whilte developing on top of mojito, but I see a lot of production pieces changed as well (like the default views for HTMLFrameMojit).\n. @bigfatsea, this is a very old issue that was closed a while ago. Can you create a new issue and provide more data? including mojito version, repro case, etc.\n. @drewfish let me change that right now.\n. @isao is this still needed after all the changes in the tests?\n. Closing this in favor of PR #926\n. @mridgway @drewfish I think that makes a lot of sense. There are a couple of things though:\n1. a template engine can pre-compile views as part of the build process, in which case those views will be available in the client side as a YUI module (probably shaker can take care of this)\n2. a template engine can go a get a *.html from the server on demand, and compile it on the fly.\nI think _loadTemplate abstraction can take care of the hazard of resolving the template on the client side from a YUI module or by loading it over the network, and calling back with the content or object representation in case of a precompiled version as a YUI module.\nThis will close the loop IMHO, since people will not need to deal with the hazard of resolving the templates and partials, just the manipulation of the string or precompiled-representation of the string.\n. Hmm, I agree with both of you, but this is conflicting:\na) if we use the same .common.js script for HB engine, it will have to require \"handlebars\", and it will load that in the client side (32k). Obviously this is pretty bad. This defeats the original purpose of reusing the same implementation. I believe keeping them separate is not a big deal, and we will have more control for optimizations.\nb) if a template is required on-demand, and we load it over the wire as a regular html (raw template) we will have to require \"handlebars\", which again introduce the overhead of loading 32k (even if we require it on demand when needed). This kinda push us to my initial proposal: templates should \"always\" travel as compiled in a form of a yui module, and in dev-mode mojito (and _loadTemplate routine for the matter) should take care of this process, and mojito compile views (or shaker for the matter) should take care of the optimization based on \"requires\" statements.\nc) when do we really need the raw version to travel over the network (or from local filesystem)? maybe when generating a html5app, but in that case we can also compile them as YUI modules as part of the build process. I'm not so sure we should allow the raw to travel over the network. (they are smaller in a raw format though).\n. :+1:\n. :+1: awesome work @mridgway\n. @lzhan, I will cover this as part of PR #842, no worries.\n. yay! if we are all agreed, let's do that then. Please, close this PR.\n. :+1: it will not hurt to have that in place in case someone wants to hack into the template engine.\n. @bitlyfied it was fixed in 0.4.2 few days ago, but it is not tagged as stable yet!\n. @jshirley yes, this is definitely an area we need to put some effort to help early adopters, but it is very early for that in my opinion. Although, I can answer some of the questions:\n- yes, u can use `mojito build html5app --context \"device:iphone\" to generate the HTML/JS/CSS for the infamous www folder, and use it in phonegap, or even to generate stuff that will work within Sensha for example.\n- yes, u can use shaker once u decide to build that html5app, I don't remember the exact command for that. cc @dferreiroval for more details on this. I think u have to run mojito-shake --context \"device:iphone\", then mojito build ....\n- in axis, we use regular WebViews, with our own sugar layer to support YUI.CL for communication between mojito app and the native layer, but this is about to change with a formal container that we are about to release which is similar to phonegap but targeting mojito apps as first class citizens.\n. @rwaldura I still think Shaker plays a role on the code that you put into your device. It will definitely clean up the code/comment/log statements. It can help with the cssembed rutine (very useful for iOS in my opinion to avoid flicking). It can help with the rollups (avoid having 100 files to load/parse/cache by the webview, instead u load only few created by shaker. etc.\n. Closing this after the work on 0.5.x. /cc @drewfish \n. @drewfish can you share the sass addon somehow so I can adjust my less and coffee ones based on the one u just finish?\n. This will be supported thru locator plugins in 0.6\n. @realistschuckle I will call this closed. We never officially released those compilers though.\n. This is the realm of mojito-shaker, in 3.x shaker supports this.\n. This is now fully supported in 0.5.x by using:\n```\n[{\n    \"settings\": [ \"master\" ],\n    \"yui\": {\n        \"config\": {\n            \"base\": \"/static/yui/\",\n            \"combine\": false, / or true, if you like /\n            \"comboBase\": \"/combo~\",\n            \"comboSep\": \"~\",\n            \"root\": \"/static/yui/\"\n        }\n    }\n}]\n```\n/cc @zhouyaoji @rwaldura @jenny this is potentially an important use-case for people creating corporate apps, should we add it to the documentation somewhere?\nClosing this.\n. #429 was resolved. Can we close this? /cc @rwaldura \n. :shipit:\n. @drewfish yes, this is the approach they use. I had some issues with the path, and the workflow, should be solved with the last  commit.\n. @drewfish it seems to be working now. Can you try it locally, by running ./travis/travis.sh?\nThings that are pending:\n- how to facilitate the use of this travis config for bleeding branches only but not on develop and master?\n- how to speed up the process since it takes a long time now due the YUI builder?\n. @drewfish I added the -b 3.x option on the clone command as part of #459\n. @mridgway that solution is more elegant, thanks!\n:shipit:\n. In 0.6 we are moving toward synchronous template resolution and rendering, which means that this is not going to be a problem. I will keep this around as a reference.\n. With the last commit, we can support something like:\n[\n    {\n        \"settings\": [ \"master\" ],\n        \"specs\": {\n            \"foo\": {\n                \"type\": \"Foo\",\n                \"config\": {\n                     \"models\": {\n                          \"m1\": \"ModelXYZ\"\n                     }\n                }\n            }\n        }\n    }\n]\nwhere you can define regular mojito models under /models folder or mojits/MojitName/models folder, and those models will be instantiated, and they will be pushed into the controller as an attribute based on the mapping configuration.\nIn other words, a model instance can be pushed into a mojit, shared between mojits, serialized, and rehydrated by the framework before instantiating a mojit instance.\nNext stop: how can the framework create/instantiate those models before dispatching any mojit?\n. @drewfish the problem with spec.models is the store. As today, the instance.models will hold the mapping from the RS. Something like:\n{ bar: true, foo: true, m1: 'ModelXYZ' }\nwhere models/bar.server.js and mojits/Foo/models/foo.common.js are the models. And m1: 'ModelXYZ' is what we pass in the spec.\nWe can always do some conditional statements, but I rather prefer to use a different nomenclature, maybe \"data\", something like:\n\"specs\": {\n            \"foo\": {\n                \"type\": \"Foo\",\n                \"config\": {},\n                \"data\": {\n                       \"m1\": \"ModelXYZ\"\n                }\n            }\nor we can change the store :)\n. @jenny @lzhan can we get rid of this? :)\n. Closing after merging #1103 \n. This is not longer valid, shaker do not use the action anymore :), closing.\n. @mridgway thanks for the refactor on travis.yml :)\n. Client side metrics are coming next, plus more mojito-core marks and timelines.\n. Yes, more clean up is definitely needed, documentation, and client side, will work on that today. \"store\" for example is a legacy stuff, and a bunch of other things. And eventually adding hierarchical perf metrics.\n. closing this one in favor of #478\n. @dferreiroval let's try to find out who is augmenting it then.\nAlso, rather than freeze the object when returning it, you can freeze it once when storing it in cache, in case we decide to freeze it.\n. :shipit:\n. We need to corroborate if we really need to make any change in the cache behavior for this method.\n. :shipit:\n. About the perf->logFile definition, I'm getting to think that this feature is more likely to be triggered from the command line, something like:\nmojito start --perf path/to/file.log\nand by default log on ./artifacts/perf/.log\nIt seems more natural, because you don't have to change your application.json to get a perf result. And keeping application.json->perf as the general configuration.\nAbout unifying the results in one file, I'm not convinced, but that's Ok, I will change it.\n. Added the --perf path/to/file.log, working on the new format now.\nQ: should we always append to the file? should we reset the file content on start? the catch here is that on start, we set requestId = 0, if we don't reset the file, we might ended up some clobbered data. @drewfish what do you think?\n. The other thing I was thinking is that if you're running $ mojito start --perf something.log and you plan to run it multiple times, your script can generate the filename, rather that mojito trying to adjust it. The main problem with adjusting from mojito is that tools that are expecting a particular files will have to understand the logic, which defeats the purpose of the logFile definition. So, let's stick to the plan, resetting the file if exists, and let's move on.\n. Alright, done with it. @drewfish please review.\n. You should strike for not serving any static asset from your node.js server, instead versioning them and serving them from CDN. As @redonkulus you should use shaker.\n. This is now solved with the new infrastructure in 0.5.x. Closing.\n. +1\n. - yes, using ac.models.get('modelName') will be better in terms of performance, building models on demand, but will break BC.\n- yes, iterating on instance.models should be better, I wasn't sure due to the old code where all models were included if shareYUIInstance was false.\nAnyway, let's break the BC and we will see :p\n. @isao I still see a bunch of them on tests/fixtures/ when doing a grep.\n. +1\n. +1\n. +1\n. +1\n. Related to issue #70, we definitely need to clean this up. I wonder what is this logger doing that YUI logger doesn't. The only thing that I can see from the source is the new 'MOJITO' level. Now that node.js env is a first class citizen for YUI, YUI logger should support all the stuff we need, even when we don't have Y on a file, we should be able to require require('yui/yui-base') to get Y.log there.\n. FYI, fixed in 0.5.0pr2, and will be documented as part of 0.5.0. Y.log is the logger in mojito, no more wrapping.\n. @imalberto do we need this after all? if yes, can you clean it?\n. @dmorilha @imalberto do we really need this after all? if yes, can you clean it?\n. @dmorilha this is probably an issue for: https://github.com/yui/yuitest\n. Can we close this @dmorilha?\n. @imalberto looking good now +1\n@add0n yes, according to Ric's tests, it is 5x faster :( a ticket for YUI has been raised I believe.\n. @mojit0 I strongly disagree on that. YUI will continue evolving, and fix should be done in YUI so everyone will get the benefit of it, not only mojito, but on top of that there is nothing that prevent us for adding a new module called 'json-stringify.server.js' in autoload as a replacement of the original one with the fix if it is absolutely needed.\n. @jenny yes, this was merged to our search-perf branch to be able to evaluate how big is the impact as today. Before we merge back to develop we can clean this up.\n. What version of mojito?\n. @dmorilha, is this still an issue in 0.5.x?\n. Yes, and it makes sense. The reason for this behavior is the instance expansion process. _dispatch (which is an internal API that you should not be using) will use dispatcher.dispatch under the hood, which uses store.expandInstance(command.instance, command.context, callbackWhenInstanceIsReady). And the expandInstance method could be async or sync depending on the state of the internal cache. If the instance is already expanded, it runs in sync mode, which is what happen during your second pass.\n. @jlecomte let me rephrase my initial statement \"And the expandInstance method could be async or sync depending on the state of the internal cache.\", I should have said \"And the expandInstance method will call the callback method in an async or sync way, depending on the state of the internal cache.\"\nI'm not very familiar with the reasons why ac._dispatch, and the subsequence processes were designed that way, but one this is clear for me, ac._dispatch does support a callback, not in the tradicional way, but thru the adapter (second argument). adapter.error and adapter.done are the two posible callbacks. Now, if you need a callback to tell you about the progress of the operation, saying, when the instance was expanded, when the action is finished, when the render is started, etc, we will have to evaluate it. I will like to understand more about your use-case.\n. deja-vu, I think I reviewed this commit few days ago. Anyway:\n- why are we using \"stupid\" flag?\n- Y.mojito.util.shouldShareYUIInstance(opts.appShareYUIInstance, this.instance); is either not needed or should be assigned to something I believe.\nStill:\n+1\n. @rwaldura can we close this?\n. I see few issues on this PR:\n- semantically, \"expandInstance\" as we have it today, does not reflect the need of an action, actions are properties of the controller, not the mojit instance.\n- what was a simple request before (e.g: definition.json) is now a more complex request with parameters, which of course will not work in html5 and offline apps where those querystring parameters mean nothing.\n- for the sake of few mojits that might have completely different (octagonal) actions we will be sacrificing all other mojits that will probably use the same or similar binders. When I say sacrificing, I mean we will have a performance penalty whenever the same mojit is used with different actions but also adding a lot of complexity to bind the instance to the action.\n- this doesn't play nicely with the new feature introduced in 0.4.0 to support custom binder definition within the action, something like:   ac.done({}, {view: {name: 'foo', binder: 'bar'}}), shaker will not be able to know about this during build time.\n- Since shaker will not control the JS dependencies, and rollups anymore, only the CSS, this really boils down to selecting the proper \"skin/rollup\" per action, and that, in production, might be a unique url per view.\nMy proposal is:\n- expand instances without action.\n- shaker can add css urls (single one in production per view). we already have such as structure defined as part of the expanded instance.\n- duplication of urls for similar views should be fine since gzip will help here, or we can introduce a wildcard like '*' to decouple skin/rollup from the actual view in case all actions use the same css.\nWith respect to \"extensibility concerns\" from @ricallinson, I'm not so sure about it, and I have concerns about the semantic of the current structures (even though we can change that semantic at any time), but what I'm very sure about is that performance is paramount, and having the ability to do more stuff (making more decisions) during the runtime process to expand the instance is a performance problems. In theory, RS addons will do a pretty dummy process IF they really need to expand the instance more. In other words, making this more restrictive will help to keep performance controlled.\n/cc @jenny \n. @dferreiroval, I'm not saying that u should not produce the proper css during expand instance, in fact, I'm saying you should, I'm just saying that you should not rely on the action.\nAbout the context, the context is not based on the route, so, making a call to load definition.json will have the proper context, so, you do have the context without need to pass it as querystring.\n. +1\n. good catch\n+1\n. +1\n. +1\n. @isao should we move this to cli?\n. +1\n. Do we really need app->config in there? That one is not longer set by default, instead ac.config.getAppConfig() is provided by mojito-config-addon. I think output adapter does not use that config anymore. Otherwise:\n+1\n. -1, controller-context is going away in 0.5.x.\nIn top of that, there is nothing that prevent you for redefining Y.mojito.ActionContext at any given time, just by requiring a particular YUI module that redefine the original definition across the app.\n. +1\n. Can we close this? /cc @zhouyaoji @drewfish @lzhan \n. Can we close this PR? /ping @zhouyaoji @drewfish \n. +1\n. +1\n. @imalberto this is problematic. the main objective was to minimize the amount of addons that were needed to create when creating AC object, if output-adapter requires config, then we have by default 2 addons instead of 1.\nInstead, if this addon really need any app config definition, then you can access it directly, without requiring mojito-config-addon in the same way that we do there.\nSo far, I see this:\n- instance.appConfig.viewEngine\n- this.app.config.cacheViewTemplates\n- this.app.config.pathToRoot   // for HTML5build\nand in the config addon we are accessing the config via this._store.getAppConfig(this._ctx) when needed.\nI wonder if viewEngine and cacheViewTemplates and pathToRoot really need to be computed everytime. Maybe @drewfish has more information, but in my mind, only environment dimension should affect it, hence we can compute it once, and use them in output out of the box. In my mind, the goal is to avoid calling this._store.getAppConfig(this._ctx) everytime, and this is a good opportunity.\n. +1\nwe can clean up the ac.app later on.\n. Should mojito be smart enough to generate robots and manifest files?\nI do think that we should be able to redefine/force specific files though, so I will give it a +1\n. Ok, I will merge this, and we can plan for having some sort of npm bundle to add support for robots and manifest that can be plugged into the apps by just adding them as dependencies.\n. Ops, I just noticed the error msg in travis about the todo flag in jslint, who fails on node 0.8\nhttp://travis-ci.org/#!/yahoo/mojito/jobs/2559216\n@mridgway @mojit0 do you know what's going on with this?\n. @jlecomte u can commit that line under the same PR, and it will be aggregated automatically once u push to your branch.\n. Ok, this is ready to be merged. I will hold it until I finish the update of node-jslint pkg to support todo flag, so we can validate the tests and move on.\n. @rwaldura we discussed the details, and @bthaeler will be working with @drewfish and myself to get the whole infrastructure as a NPM pkg rather than part of mojito itself, and using hooks within mojito core to be able to control the flow. I'm closing this one.\n. +1\n. This was fixed in 0.5.2 by @lzhan \n. +1\n. I still think we should attack the action/id as a potential perf issue, because that will change a lot, specially the ID if it is generated automatically like in Julien's demo.\n. I'm glad you raise that question, because it was confusing. Right now, for whatever reason unknown to me, all available \"shared\" modules are attached to the Y in index.js, this is happening as part of this method:\nfunction configureYUI(Y, store, load) {\n    var shared,\n        module;\n    shared = store.yui.getConfigShared('server', {}, false);\n    Y.applyConfig(shared);\n    // also pre-load shared modules\n    for (module in shared.modules) {\n        if (shared.modules.hasOwnProperty(module)) {\n            load.push(module);\n        }\n    }\n}\nwhere \"load\" is actually a reference to CORE_MOJITO_MODULES, and as part of that process, perf and logger are attached, just like all the other common and server components from autoload.\nThe \"feature\" is what made me remove the use statement for logger and perf in case they were required, and requiring them everytime, but adding a conditional statement within perf to do nothing if DataProcess->perf-config was not set upfront.\n. merging the guard since this is blocking the search-news-app tests.\n. @lzhan those environments are not aligned with those defined in the manhattan workflow. Is that something we want to provide out of the box as the default config or not?\n. @shiweiwei97 in general, there were a lot of assumptions about models. The good news is that all those assumptions are going away really soon as part of 0.5.x. The bad news is that it will break your current code, so you will have to use a new API, in which case you ask for a model based on the registered name: ac.models.get('foo') (it doesn't matter if it is local or global, or if u use sharedYUIInstance or not, it will just work), and also you will have to require the models in your controller plus a new addon called mojito-models-addon.\nThis new API will help with performance, but also will help to produce more strict code definition of the requirements and how to access them.\n. This should be fixed in 0.5.x. Closing this, feel free to reopen if you have any issue with 0.5.2+\n. Ok, let's just clean this up for the PR @drewfish .\n. +1\n. +1\n. +1\n. +1\nI like original better than old though.\n. @drewfish can you comment on this?\n. Agreed. This will be exposed in 0.5.0\n. Trello card: https://trello.com/card/issue-gh599-expose-attachactioncontextaddonson-actioncontext/504e5e3b7cd1578456fc430f/368\n. This PR is very long and confusing, probably because there is a mix of old code with new code, and refactors in the middle, I will need more time to make sense of it.\nI do have few questions already:\n- How does this work on client side?\n- How a model for example, can have access to debugger?\n- How does this work with the current perf api? They clearly overlap, one of them have to be blended.\n. @bthaeler let's have a quick meeting to talk about this PR. /cc @drewfish \n. @imalberto can u review this?\n. Just remove the block that is not needed, then +1\n. More work to be done on this.\n. +1\n. @imalberto can you update the release notes?\n. @rwaldura those notes are for 0.5.0pr1, while the same issue is on 0.4.6\n. +1\n. FYI: in theory, after 0.5.0 released, we can create a RS addon that provides robots.txt and crossdomain.xml synthetic files.\n. +1\n@mojit0 should we cherry pick this for develop-perf for the pr2 as well?\n. Ok, let's fix the 404 and let's merge this.\n. Let's just make sure we document this and provide an easy way to upgrade. Probably a good opportunity to introduce mojito upgrade command to facilitate this type of changes in the future.\n. +1\n. +1\n. +1\n. +1\n. let's wait until after pr2 patch happens to merge this.\n. Travis is failing due to a timeout rather than a code problem I guess: \"Executing your script (./travis/script.sh) took longer than 30 minutes and was terminated.\"\n. Yes, part of the next refactor. Trello card #88 :)\n. +1\n. Aside from those minor details in the tests +1\n. +1\n. Make sure you're using the correct value for \"dependencyCalculations\", I will recommend to use \"precomputed+ondemand\", or just \"ondemand\" if you plan to use Y.use at any given time in your code. More details here:\nhttp://developer.yahoo.com/cocktails/mojito/docs/intro/mojito_configuring.html\nNote, in 0.5.0pr2 this configuration is deprecated, and instead, mojito will support \"Y.use\" without special configurations.\n. Well, we will need a test-case for this. Can you provide a very simple app so we can look at it?\n. Also, will be interesting to see if this is already solved with 0.5.0pr2\n. Read:\nhttps://github.com/yahoo/mojito/wiki/ReleaseNotes0_5_0pr1\nhttps://github.com/yahoo/mojito/wiki/ReleaseNotes0_5_0pr2\nthat will guide you through the changes to get that working on pr2\n. Marco, yes, using base to try to use a different version of YUI will not work, we have other ideas around base. I will try to take a look at your project soon.\n. @ItsAsbreuk this is partially supported in develop-perf branch and PR656, and we definitely one to support this use case. Keep in mind that Mojito is set to build offline html5 apps, which represent the same use case, using YUI from a local repo rather than CDN, etc.\nIn PR2, all modules (yui and app) are served from a local combo by default (Mojito Combo), so you don't really need to worry about base. In 0.5, that will change a little bit, but you can still use that option, or any configuration you want.\nBTW, I will be talking about this in YUIConf :)\n. @ItsAsbreuk I forked your demo, and here is the working copy using develop-perf branch:\nhttps://github.com/caridy/test-mojito-datatable/commit/c824081aa2c6fa4e25a9894c7b57165ef37021ea\nI'm not using a custom YUI base since that version already uses 3.7.3, but keep in mind that you can still customize this by using a custom setting for the runtime:client.\nIn my fork, I can see the datatable working, with 3 columns, and 3 rows. I enabled fetchCSS to be able to get the styles for it.\nIs this what you need?\n. Yes, you're running on the bleeding edge, that's why many of these problems are happening. We are working toward the final 0.5GA but for now, you should probably try pr3:\nhttps://github.com/yahoo/mojito/wiki/ReleaseNotes0_5_0pr3\n. yes, it is on the table, and I will try to get it in.\n. Here is the PR #721 to address this, no promises though.\n. @ItsAsbreuk can we close this?\n. @imalberto can u close this?\n. +1\n. +1\n. +1\n. closing in favor of PR #664\n. Can you specify the name of those files (including affinity)? also, what version of mojito are u using? and finally a copy of your application.json\n. @ItsAsbreuk, can you comment or close this? This should be working fine in 0.5.x\n. @lzhan can we close this? Was this fixed?\n. +1\n. +1\n. This should not be an issue in 0.5.x (latest). Closing this. Feel free to re-open if you have any issue with it.\n. Yeah, it sounds like we finally have a strong reason to implement mojito upgrade command.\n. We will also need to update all the commands since most of them uses the store. This is kind of challenging because they might also use YUI (in a very minimum way) but we might need to do some clean up I think.\n. +1\nwe can refine the factory later on.\n. +1\n. +1, I might be wrong, but @drewfish was fixing a similar issue, there might be conflicts.\n. Yeah, I decided to change it because:\n- getController or createController are only relevant for testing because the instance object is created per request per mojit instance using the blending mechanism. I believe it should be removed.\n- it is not really a factory, because you're going to get a new method on every dispatch.\n- \"createController\" is more descriptive, and follows our current guideline, like store.createStore() etc.\n. Instead of hacking with _stringify, we might use util.inspect instead.\nhttp://nodejs.org/docs/latest/api/util.html#util.inspect\n. +1\n. This sounds like a feature we introduced few days ago to support synthetic files. You should be able to create a RS addon to define any custom url, and a customizable way to produce the content of the file. In other words, u should be able to came up with any client url that will use a custom method to read, potentially compile the content, and define the headers for that particular resource.\n. I like that, easy to use, etc. But still I don't expect people to define favicon.ico in the routes everytime, we should have support for the basic ones out of the box.\n. in mojito-next (0.9.x), you can now use express directly to serve those special files without having to mess with RS.\n. +1\n. @ericf that's a good question. As today, whenever you call to render a template in mojito you will pass what we call a viewObject (yes, probably not the best name), and this object represent a *.<engine>.html resource, and you also pass the mojit instance, so the renderer knowns a little bit more about the actual resource. Part of this process is to ask for partials based on the mojit instance information, and those are compiled, cached and passed as a reference while executing the compiled template. If the engine is smart enough to support nested at that point, I don't know :)\n. Perfect.\n. Clean up combo-handler:\nMODULE_META_ENTRIES          = ['requires', 'use', 'optional', 'skinnable', 'after', 'condition'],\nMODULE_META_PRIVATE_ENTRIES  = ['after', 'expanded', 'supersedes', 'ext', '_parsed', '_inspected',\nREGEX_LANG_TOKEN = /\\\"\\{langToken\\}\\\"/g,\nREGEX_LANG_PATH  = /\\{langPath\\}/g,\nREGEX_LOCALE = ...\nMODULE_TEMPLATES = ...\nconstants in combo-handler is not needed anymore.\n. +1\n. +1\n. +1\n. +1 even though this is a requirement from tests. Probably we should clone/copy at the test level and not at the app level, but in any case, this is a one time operation.\n. +1\n. +1\n. +1\n. One of the things is happening at the moment is that all requests are treated as potential combo or static requests, this is clearly an overhead. In theory, we should be able to leverage appConfig.staticHandling.prefix to validate that the url is a potential static url to avoid doing extra operations everytime, the problem is that prefix if a default value of the store and not a default value of the configs.\n. @drewfish I remember we removed a file from \"middleware/test-handler-static.js\" as some point.\n. Marco, I'm not so sure I understand what you ask for. In your code, it is your responsibility to control the flow, and eventually call ac.done or ac.error.\nAbout production, obviously you don't want a node process to crash, but if that happen, your container (hosting infrastructure for node) should be able to restart the process automatically. Most container out there are doing that.\n. @ItsAsbreuk this is not mojito, but javascript. Basically, if you have something like this:\nfunction foo () {\n        try {\n            bar()\n        } catch(e) {\n            Y.log('to something about this error');\n        }\n    }\nthe try will catch any error during the execution of bar function, but if bar happens to do some asynchronous operation, for example using Y.io to load something and then execute a callback, errors within that callback will NOT be caught by the try/catch statement because that routine is done already.\nSo, in other words, you have to handle those cases where you have an async routine, by adding another try/catch or if statements when posible since the try statement will have some performance penalties as well.\n. Better error control will be introduced in 0.6, stay tunned.\n. mojito-next (0.9.0) allow you to use the regular process in express to control 500 errors.\n. @drewfish can you review this? I'm still seeing some troubles with -c:\n\u2716 exec error: Error: Command failed: java.lang.NullPointerException\n    at java.util.Arrays.sort(Arrays.java:1078)\n    at com.yahoo.platform.yuitest.coverage.results.SummaryCoverageReport.getFilenames(SummaryCoverageReport.java:116)\n    at com.yahoo.platform.yuitest.coverage.results.SummaryCoverageReport.generateFileReports(SummaryCoverageReport.java:96)\n    at com.yahoo.platform.yuitest.coverage.results.SummaryCoverageReport.(SummaryCoverageReport.java:80)\n    at com.yahoo.platform.yuitest.coverage.report.YUITestCoverageReport.main(YUITestCoverageReport.java:81)\n. +1\n. +1\n. +1\n. +1 \nif you have a chance, add the test.\n. +1\n. Closing this in favor of 0.5.x where we use a completely different approach to load and render ondemand mojits. this should not be an issue there.\n. +1\n. I foresee some conflicts with my other PR #714, but I can take care of that.\n. /cc @ItsAsbreuk @sdesai\n. @ItsAsbreuk that's already covered with the new yui->config->seed and yui->config->base / comboBase / root, they are not affecting the server side execution, only the client side. I showed an example during my yuiconf presentation, here is the link of the gist:\nhttps://gist.github.com/4070536#file_custom_seed_2.json\n. +1\n. +1\n. @isao can we close this?\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. @drewfish what I don't understand is why using unshift or push for the \"shared\" mojit when collecting al ress will not make a difference. Can you look at this? Probably we should add some tests here.\n. +1\n. The hack for json-stringify is still needed. I ran this gist:\nhttps://gist.github.com/4119541\nAnd the results are:\n$ node json.js \nstringify native:  184170\nY.JSON.stringify:  375190\nparse native:  187691\nY.JSON.parse:  186450\nAs you can see, stringify is still not using the native under the hood, should be ready in 3.8.0 though.\n. @drewfish yes, it is used on the server side because all available files are attached to Y, no matter if they are required or not :)\n. I'm not so sure I like that name. In my mind, the tunnel is still a \"client\" in a sense that it is suppose to ack like a client to a remote mojito server.\n. +1\n. +1\n. +1\n. +1\n. +1\n. done with the review.\n. +1\n. It sounds like the same 5 failures that @lzhan was reporting in develop-perf.\n. Fair enough, let me add the test.\n. @ItsAsbreuk this was fixed in develop-perf already, and the fix will be part of 0.5.0GA\n. Thanks for the quick fix @lazybean, I will let @zhouyaoji to review and merge it.\n. Can you provide a test case or something? In theory, we should be able to add/set headers during the dispatch phase.\n. +1\nNote: these tests are really bad, we should not use regex as part of the assert, because it completely obscure the failures behind the regex result. we need to plan for a big refactor of all these tests.\n. Isn't there a property for all cli that computes the path of the app? that's what you're looking here right? If I recall correctly, that's something available as today.\n. +1\nThis will solve the issue temporary, but might have other implications down the road. I'm wondering if this is only affecting &, and if by replacing the encoded token right before sending it to the client for the whole string will be just enough, so we don't have to target specific items. \n. @jlecomte I don't think we are in the same page. In my mind, you will never load a yaml file from the browser, instead what mojito does it to call the store to collect the path/to/mojit/definition.json, which is not a file, but a json structure produced by the store that happens to be based on a yaml file that you have in disk, but that's all.\nIn other words, the store is the filesystem abstraction, and it serves json structures that are computed based on the dimensions/context, and it just happen that the url looks the same than the actual path for the file, but that's just a coincidence.\nCan someone confirm that this is the actual behavior?\n. +1 :p\n. @isao is right, in fact logLevelOrder should be in config.json rather than in mojito.js directly. This is not part of this PR though.\n. PR #795 which includes some notes about this commit.\n. +1\n. Actually, @drewfish already did this, closing this.\n. @zhouyaoji other than that, I think it is imperative that we add some documentation about the important of the 3rd parameter, which is normally NAME from the YUI.add statement, this parameter should always be used because that's what allow you to use logInclude and logExclude. All our examples, and demos should reflect that.\n. @zhouyaoji, I added few more notes on PR #806\n. btw @zhouyaoji, to change the PR, you don't need to create a new one, you can continue committing code in your branch, and the PR will pile them up accordingly.\n. +1\n. Runtime logs are now processed correctly (since 0.5.2). Test, cli and store logs are still having issues with encoding.\n. We had a discussion about this problem few days ago, in a different context, but it boils down to the same problem: whether or not we should flatten a multi-level structure, or just analyze the first level of modules.\nMy vote is for not supporting mojito entities at a deeper level, only the first level, which makes a lot of sense since putting and application together means aggregating and flatting a group of mojito entities with a custom configuration at the app level.\nThat doesn't means an npm package can't require another npm pkg, it can, but it can't not rely on the mojito definition for that pkg.\n. This should be covered in 0.5.3, where mojito keeps track of the version and pkg information to avoid walking similar pkgs. @drewfish can you confirm and close?\n. /ping @zhouyaoji, can we close this?\n. @drewfish can you check this? I'm not familiar with appLevel workflow.\n. This sounds like a temporary solution, eventually we will need to have that meta in the synthetic files as well.\n. +1\n. @isao we are transforming the port from a numeric value to a string, for some reason @drewfish change it to a numeric value, can you comment?\n. +1 then\n. There are few more stuff that were removed:\nyui section, \"extraModules\", \"loader\", \"urlContains\", \"base\" and \"url\" are not supported anymore..\n. +1\n. @jenny this has to be reviewed asap after 0.5.0GA.\n. @rolandoyahoo in your aspects, it looks like you don't have base or type for \"frame\" definition, is that code an psuedo-code? or you really don't have such thing?\n. +1\n. +1\n. @drewfish is right, the use case I'm trying to solve here is:\nAs a dev, I want to create an instance of a model and share it with other mojits in the page.\nThese global models are really page models since they should be part of the page data scope that is a long living structure, but we are not there yet. In fact, the whole re-hydration process has to be implemented as well, but this is the first step in that direction.\n. @isao as today, mojits are doing PULL to get a model, which is just fine. The problem is when we want to control the mojit from outside, and use some kind of PUSH into the mojit to get control over the model that the mojit will ended up using. For that, parent-child is not enough, because in many cases, we want to define the data structure at the page/app level, and that's what this PR resolves. Eventually we will have configurations and stuff that can let the mojito framework to do more, but for now, a mojit is responsible for registering it.\n. @rwaldura I'm not so sure we are ready for primetime for this new feature. Let's call it experimental for now!\n. @lzhan can we also remove the internal static reference to version from mojito.common.js in autoload?\n```\nYUI.add('mojito', function(Y, NAME) {\nY.namespace('mojito').version = '0.2';\n\n```\n. @drewfish the gist is just a simple demostration, I do have a test based on benchmark.js that reflects the same though.\nNow, about the delete vs if, the problem here is the V8 low level optimizations. The if is in every test, but only on the object that was transformed using delete the if will take longer. Apparently, by using delete, V8 will change the type of object in memory, which affects the members resolution.\n. This is set to land on 0.5.2.\n. Ready for review.\n. Thanks @drewfish, I will resolve the conflicts and merge.\n. @maumunoz thanks for the repro-case, I will look into it.\n. I can confirm that this issue is related to issue #843, and @drewfish is working on a fix for 0.5.1.\nThe instanceId sent to the /tunnel should be used as part of the binder map that is part of the response. The issue is introduced by the expandInstance routine, which is creating a new id everytime to avoid bleeding.\n. I can confirm that this issue was solved by PR #845\n. +1\n. - error handling was addressed:\n$ mojito benchmark benchmarks/strings-concat-benchmark.js \nBenchmarking YUI module strings-concat-benchmark [./demo/benchmarks/strings-concat-benchmark.js]\nStarting benchmarks.\nconcat x 142,256,065 ops/sec \u00b144.61% (24 runs sampled)\n\u2716 array join: ReferenceError: g is not defined\n\u26a0 Fastest is concat\n- Usage doc was expanded to notice 3 important things:\nNOTES:\n  * The name of the yui module that defines the benchmark test should\n    match the filename. In the first example, the test should be defined\n    as `YUI.add(\"foo-benchmark\", function (Y) {/*...*/});`, otherwise\n    the test will fail.\n  * Any yui module from yui core, mojito core or application level module\n    that runs on the server runtime could be required as part of the\n    \"requires\" array in the benchmark test without any extra configuration.\n  * If you want to require a yui module that is meant to run in the client\n    runtime, make sure you specify the proper --context option.\nAbout comparing different implementations, the recommended way will be to have store.expandInstanceForEnv and store.expandInstanceForEnvAlt in your code, so, you can do the same you do in the original, plus some enhancements, and see how it goes. I will recommend not to mock things or write actual code in the tests directly if the intent if to test a feature that already exists.\n/cc @drewfish \n. We will put this on hold in favor of \"mojito-benchmak\" npm package.\n. @isao whenever you get a chance, we should revisit this now that we have mojito-cli\n. very old PR, closing.\n. Can we keep this experimental things out of the main branch until we get to a more stable and polish implementation? There are many different ways to test this without getting the experimental code into branch.\n. @drewfish, can you do a second pass on this one?\n. please, check the notes\n. +1\n. @isao I like this solution better (I mean not using forceRelativePaths).\n. +1\n. Adding this to trello, tentative for 0.5.4:\nhttps://trello.com/card/issue-gh865-composite-ac-composite-error-handling-hides-errors-from-parent/504e5e3b7cd1578456fc430f/367\n. will be available in mojito@0.5.5 scheduled for next week.\n. Closing after merging #1103 \n. @bthaeler a couple of questions:\n- did you validate the unit tests? I remember when I put in place the perf there were few issues with the tests due to the fact that every script is using Y.mojito.hooks, which is undefined if it is not part of the testsuite mocks.\n- is the current output format of the perf still preserved? if not, we need to verify with @drewfish about this impact of that since we use it in the current profiler and potentially in our CI to monitor performance, but I'm not sure about that last part.\n. According to @drewfish we are not using perf and profiler at all in our CI, so, feel free to break it, and even remove it in favor of the new profiler.\nSo, the only thing pending is the tests to pass.\n. Few pointers:\n- everyone who uses hooks should requires mojito-hooks.\n- mock it in https://github.com/yahoo/mojito/blob/develop/tests/base/mojito-test.js to do nothing when running tests.\n- to run tests, check:\n  cd tests/ \n  ./run.js help\n- more info about tests here: https://github.com/yahoo/mojito/tree/develop/tests\n. @bthaeler that's all for now. Let's work together to accomodate those details so we can finally merge it.\n. +1\n@bthaeler I think we are ready to merge it. Since we have a release coming up on monday, I will hold this until after that. \n/cc @jenny \n. today or tomorrow! 0.5.2 is out!\n. +1\n. In develop already, should be available as part of 0.5.2 release.\n. +1\n. +1\n. +1\n. @drewfish No, that's not supported. It developers want to keep control over what they have/use, there is not need for that. Also the error tolerance is important, since application.json is optional.\n. @drewfish I will merge this so we can work on the PR #907 to accomodate the rest of the changes.\n. Closing this in favor of issue #916 which addressed the comments here and more to accomodate this commit for the multi-part application config files as well.\n. What version of mojito are you using? Can you provide a simple code to reproduce the issue?\n. On Trello for investigation:\nhttps://trello.com/card/client-gh908-get-error-after-calling-mojitproxy-refreshview-in-a-composite-mojit/504e5e3b7cd1578456fc430f/325\n. /ping @zhouyaoji \n. +1\n. we are that fast @jianlin, heheheh!, closing this.\n. @isao this should be moved to mojito-cli-create.\n. The problem here is the isolation. The helpers registered are global, and that might be very confusing in complex apps. The approach that we are exploring is to have a level of isolation by default at the mojit level for partials and helpers. I will keep you posted. Let's keep this open in the meantime.\n. Helpers will be ready in 0.5.5 later today!\n. +1\n. Tests are still unstable, one of jobs passed, the other fail here:\nFailed Common: simplemodelclient onMozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:18.0) Gecko/20100101 Firefox/18.0\nPassed, 1 Failed , 0 skipped \nin testCase_yui_3_7_3_2_1358546278029_33\ntest simplemodelclient:Unexpected error: Y.one(...) is null\nI did a manual verification, and it works just fine. Seems like a timer issue in Arrow.\nAnyway, this is ready for review!\n. /ping @zhouyaoji \n. I was thinking about this just yesterday!\n. @isao can we solve this at the cli level? In production, in 0.6.x we don't want to have a fancy error, only when running thru mojito start, in which case I think this belongs to the cli.\n. +1\n. Since the lang bundles are attached only if the host module is use when mojito runs in the client side, this solution will not work unless you create a dummy module called \"shared\" and require it in the controller you want to access the app level langs. On the server this is not a problem because all bundles are attached.\n. I think the new custom frame mojit plug the new global helpers solves most of the problems related to this PR. Aside from that, we should have a better infrastructure once we mix in the modown pieces.\n. There are a bunch of tests without the verify here and there, others that are not using mock at all when they should. Those that I just added don't need verification because I'm not mocking any actual method, but just preparation for later on add more mocks for some of the adapter tests..\n. - I'm not so sure about artifacts, in fact, SD is ignoring artifacts/ by default when creating a pkg.\n- useCache: I'm not so sure we want to have that enabled by default, it sounds like a manual process to build the cache, and enable it in the application.json, and it is definitely an advanced option.\n- @return, I think yui is just avoiding adding the return statement if there is nothing to return. Yes, it might lead to missed docs but it is not a big deal.\n. PR as validated, closing it.\n. @isao this is breaking jenkins.\n. It will be posible in the next iteration: 0.5.3 coming up in the next few days.\nIn this new version, creating a custom HTMLFrame will be a breeze, in which case you will have full control over the capabilities of your frame, and we will encourage people to have their own frame rather than using the one shipped with mojito, which btw will become legacy.\nMore info about this here:\nhttps://github.com/yahoo/mojito/pull/926\nAn example of the custom frame mojit here:\nhttps://gist.github.com/4543247\n. Closing this now that the HTMLFrame refactor is in place in 0.5.3. Reference to the PR #926 for more details.\n. I can take this for 0.5.3, it seems a low-impact change. About the ac.done vs ac.composite.done, that have to be discussed. But basically, adding complexity into the mix is a recipe for failure. They are not the same thing, while composite is way more complex.\n. Closing this now that PR #950 was merged. It will be ready in 0.5.3, in the meantime, you can try it using \"develop\" branch. The details on of syntax is in the PR. Basically ac.done and ac.composite.done are equivalent in terms of API.\n. Travis is still unstable, one job is green the other fails due to arrow issues. This is ready for the final review /cc @drewfish \n. Travis is still unreliable, one job passed, the other fail with timeout:\ntest simplemodelclient:Unexpected error: Y.one(...) is null\n. @jlecomte, I'm not proud of it, lol, but we plan to remove all that once we landed the \"import_settings\" feature. We are just trying to unblock you guys in the meantime.\n. +1\n. Travis is still unstable. One passed, the other fail :(\n. +1\nNote: I guess you will need to update the tests, for the store mock maybe.\n. That's all for now @zhouyaoji \n. An example of this is the use of the latest YUI version in the client side thru the seed configuration:\n[{\n        \"settings\": [ \"master\" ],\n        \"yui\": {\n            \"config\": {\n                \"seed\": [\n                    \"http://yui.yahooapis.com/3.8.1/build/yui-base/yui-base-min.js\",\n                    \"http://yui.yahooapis.com/3.8.1/build/loader-base/loader-base-min.js\",\n                    \"http://yui.yahooapis.com/3.8.1/build/loader-yui3/loader-yui3-min.js\",\n                    \"loader-app\",\n                    \"loader-app-base{langPath}\"\n                ],\n                \"gallery\": \"gallery-2013.01.16-21-05\",\n                \"base\": \"http://yui.yahooapis.com/3.8.1/build/\",\n                \"comboBase\": \"http://yui.yahooapis.com/combo?\",\n                \"root\": \"3.8.1/build/\"\n            }\n        }\n    }]\nIn this case, 4 files will conform the seed. Alternative, those 3 YUI modules could be comboed, in which case we will have 2 files, one from YUI CDN and one from the app CDN to complete de Seed of the app. Happy hacking!\n. FYI: blend and blend3 are both doing array concat from what I can see in the code. /cc @drewfish\n. We can definitely improve error messages when it comes to invalid files and syntax errors.\nIn the case of the comments, you can get use to use .yaml files instead of .json to be able to add comments (supported in 0.5.x). You don't need to rework the content, u just need to rename and add your yaml comments.\n. closing this very old ticket, specially because we want to walk away from the store for many of the hacky stuff we were doing before mojito-next.\n. /ping @zhouyaoji \nFor the record, it works just fine for me.\n. Started on 0.5.3, we are encouraging people to implement their own frame mojit. we did the provision for this by simplifying everything, so it becomes easy for anyone to set any mojit as a frame mojit, in which case you will control the view and the position of the elements at your convenience.\n@zhouyaoji is working on the documentation, in the meantime, you can check this example:\nhttps://github.com/caridy/Mojito-Apps\n. /cc @zhouyaoji \n. this is ready for review. /cc @drewfish \n. @drewfish few notes after the last commit:\n- this.failed in now in place, but this.queue is not destroyed (to null). The reason for that is people can try to add childs at any time using addChild public method. Whether that's before of after an error occur, it does not matter.\n- I made _onChildFailure private, we don't want people to use that. Also, I figured that by calling adapter.error() in the first place should invalidate adapter.done and any succesive call, so we are covered there.\n- Finally, the failFast thing, I don't think we need that. If there is an explicit propagation flag, an error should fail fast. If there is not such as flag in any child, then there is not need to worry about errors, not need to aggregate them, and there is no way to consume them, so, I think we can leave that out.\n. for the trackId, either regular ult or \"pageview-candidate\" (a la comscore) makes sense because they will be consumed by external platforms during or after the requests gets to mojito, so I agree with adding support for that. For the bucket, I'm not so sure this is the right place. A tunnel is a POST request with a big payload, and adding parameters to it can complicate things, on top of that, the bucket should/will be attached to the request/headers before hitting mojito dispatcher (by a middleware or my a layer in front of the FE boxes), in which case you should not need to pass it around.\n. Yeah, that part is clear, but it does not answer my previous question. Why do we need tmpl? it is the same in both requests, which makes me think it belongs to the context rather than just a querystring parameter.\n. @jlecomte one last question: Does this custom tunnel url is defined per req? per page? per mojit?\nIn the current implementation, the tunnel req url is defined per app, which means it is static, all requests and pages and mojits will use the same thing, but it seems to me that the tracking information you want to add is per mojit (the _ylt section) and per page (the tmpl section). Can you clarify?\n. @gvaish I think we will have to revisit this use-case, specially the use of relative paths. In general, a combo is just an artifact to support your app that it happens to be part of the app itself, and it should not get affected by forceRelativePaths since it will not work in a pure html5 type of app.\nSo, change number one: disable combo for your app:\n\"yui\": {\n     \"config\": {\n           \"combine\": false\n     }\n}\nChange number two: if you want to serve yui from your app, you need some special settings to do so. If you want to serve from CDN, the default configuration should help. Here is the doc about yui configs:\nhttp://developer.yahoo.com/cocktails/mojito/docs/topics/mojito_yui_config.html\n. @gvaish you're facing a configuration issue. @zhouyaoji  and myself are working on a very extensive piece of doc about yui configuration in mojito, still preliminar (https://github.com/zhouyaoji/mojito/blob/docs_yui_seed_update/docs/dev_guide/topics/mojito_yui_config.rst#getting-yui-to-your-application)\nIn general, I tried the app using mojito start and it works just fine with combine: false, which is obviously not needed when it runs from the server. Now, the problem is when you build it into HTML. In that case, my recommendation is to have a way to configure some settings specially for that. @isao has been experimenting with this, and by creating a new environment called \"build\" you can easily move all the custom settings into that bucket to be used when you use build, and that way, you can have the same app that works when running mojito start and also when doing mojito build.\n@isao I think this is a common use-case, and we should consider having that environment as a default environment in dimensions.json.\nAside from that, I will send you a PR later today with the proper configuration.\nBTW: why do you have two apps? server and pure?\n. Ok, no PR today. I just noticed that you are running on a very edge case where assets with relative paths gets messed up with this condition in assets addon:\nif (content.indexOf('./') === 0) {\n                content = this.getUrl(content.slice(2));\n            }\nI need more investigation on this. Adding it to trello in the meantime.\n. No, it is not. You can get it from \"develop\" branch, or wait until we push to NPM in a couple of days.\n. +1\nIsn't compile going away?\n. +1\nIt is looking pretty solid. When are we going to get travis back?\n. +1\n. /ping @isao \n. @isao can we move this ticket to the mojito-cli-test pkg?\n. /cc @zhouyaoji \n. @zhouyaoji will be great if we can fix this and also replace all the null with \"info\" or \"debug\", which is the right thing to do.\n. Got it! thanks @zhouyaoji \n. /ping @ekashida \n. mojito-next (0.9) allow you to do whatever you want with the tunnel middleware, but the problem with making calls thru GET is the payload size.\n. closing this in favor of issue #1050 which is a more realistic use case.\n. This is also suppose to fix issue #982.\n. @isao can you elaborate more?\n. +1\n. It might be related to PR #997 and the upcoming fix #1007 \n. This fixes Jenkins when testing custom logs per client and server with different contexts.\n. ping issue #922 \n. Just keep in mind that this feature is EXPERIMENTAL and API might change in the future. If you use it, and it is fine to use it, you will be in the bleeding edge of mojito :).\n. +1\n. We will remove the ability to use a prefix due the fact that static assets should not be coming from the app origin, but from CDN, and for development we will use a \"fixed\" path, same for html5 apps. Closing this.\n. @rwaldura this is the only change for the patch. Once we get confirmation from Albert, we can issue the patch or just 0.5.6, whatever works best.\nAs a side note, this is not related to yahoo/mojito-shaker#43, it was a bug I introduced as part of PR #997 \n. /ping @drewfish \n. +1\n. +1\n. +1\n. @lexander mojito does not write logs into a file, that's not something the framework will do, but the underlaying infrastructure, in this case node.js. Mojito simply writes into the node.js console, whatever node.js does with the logs, dumping them into a file, or transmit them into an aggregated hub for multiple cores, or whatever other crazy idea people decide to implement has very little to do with mojito.\nAside from that, mojito is smart enough to detect if you're using TTY or not, to add colors into the logs or not, in case you boot the application using sparks or any other similar runner, and it works just fine with heroku and nodejitsu log aggregators.\n. Weird, this._libs.path.join(this._appConfigStatic.pathToRoot || '', res.url) seems to be ok, unless that there is no url for the res, which is even more weird. /cc @drewfish \n. Solved in mojito@0.5.6\n. -1\n. We should consider dropping this in favor of PR #1029.\n. Closing in favor of #1029 \n. @isao yes, I don't think we will need the bin in both places once the cli gets ready, and we clean up mojito.\n. +1\n. +1\n. /ping @zhouyaoji \n. Hmm, the post-install step is not windows friendly I suspect. Aside from that, I see references to ynpm, which is internal, and should not be there.\nCan we use a JS file instead? Probably using the require('npm') module to analyze the registry. Something like this:\nrequire('npm').load(function (e, npm){\n    npm.config.set('global', true);\n    console.log(npm.commands.list(['mojito']));\n});\nthat code will tell you whether or not mojito was installed globally, and where.\nA couple of things to keep in mind:\n- last time I tried require('npm') under ynpm, it failed, but Martin fixed it a couple of months ago.\n- require('npm') should behave the same under npm and ynpm, it is seamless for the script.\n- you will have to add npm under dependencies.\n. It seems that we still have some issues with 0.10, I will investigate more.\n. @kevinhasslinger when that happens, do you see the request for \"a\" in the access logs while mojito responds with \"b\"? I wonder if the problem is happening before the request gets to mojito.\n. +1\n. +1\nmaybe we should add a note about mojito-cli saying that all the commands will work the same or something like that.\n. @jlecomte logFile was never intended to be defined in application.json, it is a cli only option. In order to collect perf information you need two things:\n- perf config in application.json (to enable timeline, mark, etc.)\n- mojito start --perf or mojito start --perf something.log or mojito start --perf each{req}.log\naside from that, remember to use the profiler to generate the nice charts, e.g:\nmojito profiler --input something.log\n. done with the first pass @ekashida \n. /ping @zhouyaoji \n. Workaround, from Yi:\nIn controller: ac.done(data, Y.mix(meta, {yourVar: xxx}));\nIn binder: \nmojitProxy.refreshView(params, function(data, meta) {\n    var yourVar = meta.yourVar;\n});\n. done with the review!\n. +1\n. +1\n. I will merge on behalf @ekashida \n. Can you elaborate more? Tunnel will not work with an offline app.\n. I'm not so sure I follow. Views, Models and Controllers are just YUI modules setting in the static folder when producing an offline app. They will be loaded when needed without any hazard. Aside from that, the definition/spec will be loaded from local as well since they will be precomputed and stored in disk. In other words, on demand mojits will/should work just fine. What will not work is the mojitProxy.invoke() if a component is a server side.\n. @gvaish few comments:\n- /static/TodoMojit/definition.json?*** is just fine. Those querystring parameters will not play a role because that definition.json was already generated when you did mojito build html5app path/ --context whatver:something, so, they will be effectively ignored.\n- /tunnel calls should not be made under those conditions unless that a particular mojit is forcing controller to use server affinity.\n- If a call for definition.json fails, that's an indication that the mojit cannot run in the client side and the tunnel will be issued, and apparently that's what is going on here, because http://gvaish.github.com/static/TodoMojit/definition.json returns 404 for whatever reason.\n- this seems to be a problem with the relative path that has to be used in your app, if you hit this url for defintion: http://gvaish.github.com/todomvc-mojito/common/static/TodoMojit/definition.json?runtime=client&site=&device=&lang=en&langs=en%2Cen&region=&jurisdiction=&bucket=&flavor=&tz=, it works just fine. I will try to reproduce the issue later today.\n. @gvaish I was able to reproduce the issue, and I found a couple of bugs in store-client that prevent the use of relative paths in HTML5 apps, I plan to fix it asap. I will commit against this issue.\n. Trello card: https://trello.com/card/todomvc-gh1050-store-client-does-not-play-nicely-with-relative-static-handling-prefix/504e5e3b7cd1578456fc430f/474\n. @gvaish we discussed the card today during a meeting, and we have decided to move it into another board where we are reworking mojito-next which is the next big iteration on mojito and its underlaying components. The reason why we moved there is because I have found some issues with the current implementation and fixing it might take longer that I was expecting which aligns better with the refactors that we are planing for mojito-next. In other words, this might get ready in 0.6.x but not in 0.5.x. Apologies for the inconveniences, and I will recommend you not to load dynamic mojits when running and html5 ap in the meantime. We can discuss more offline.\n. Interesting, you're using ac._dispatch as a page object to store info per request, I like it!. There are a couple of things to keep in mind though:\n- The only reason this works is because ac._dispatch is used in composite (and in your scheduler) to reuse the dispatch instance created by mojito.js on every request, but that do not have to be the case all the time.\n- By avoiding copying that static app config per mojit instance in a request we cross the second bridge, which means that object can be changed by one of the mojits affecting the other mojits in the same request dispatch process, which considering that we crossed the first bridge when we decided to drop the isolation between mojits, which is ok.\nIf we clearly state that this is the natural behavior in the docs, potentially introducing the page object to formalize this instead of just relying on ac._dispatch (attaching that page object into req under the hood), I will give this a +1.\n. I will argue that the schemas should not be part of mojito source, but part of mojito-cli-validate or something similar but not core. We can also explore a similar approach to the one we have lineup for the initial archetypes that can bring some default npm devDependencies that can be used by cli to resolve few other things.\n. Lets add a couple of tests and merge this.\n+1\n. +1\nI will hold my breath on this one.\n. @drewfish yes, store uses yui-sandbox in multiple places, and since it should runs in isolation, using sandbox is the right thing to do for those routines.\n. Closing after merging #1103 \n. +1\n. +1\n. +1\n. /ping @zhouyaoji \n. +1\n. Note: All unit tests passed in travis\n. It seems like it does not work :(\n. +1\n. -1 I don't like the _mockLib approach.\n. The reason why you introduced _mockLib because you want to mock the internal method called retrieveFile. I think, either you expose that method, along with the other 3 private methods, or you mock the things that the method is trying to use. Which in this case is Y.io I think.\n. @lzhan once you remove the try/catch, feel free to merge.\n+1\n. @drewfish unit tests are ok now! travis is not doing much on the functionals though!\n. @drewfish merged the latest, now we have some unit tests failing:\n13 Passed, 4 Failed , 0 skipped\n in composite tests\n- test proxied mojits are processed properly:Unexpected error: Cannot read property 'proxied' of undefined\n- test defered mojits are processed properly:Unexpected error: Cannot read property 'proxied' of undefined\n- test addChild defer response:Unexpected error: Cannot read property 'proxied' of undefined\n- test addChild proxy response:Unexpected error: Cannot read property 'proxied' of undefined\n. Let's hold on this until I finish the investigation on 3.10.0 today!\n. @lzhan can you merge this?\n. +1\n. Though: \"The enhancement here is really about been able to call ac.done with a noop signal when the output has been sent thru another channel.\"\n. Workaround to signal the end of the process:\nclearTimeout(ac._timer);\n. @lazybean it is actually the other way around, init was deprecated a while ago, and the actual action name is \"index\".\n/ping @zhouyaoji \n. +1\n. @soljin as a side note, we are moving on the direction @drewfish mentioned, and starting on 0.6.x we will have more and more small packages to do very little. In the case of the view engines, the packages will be locator plugins, and will be responsible for compiling views and rendering compiled views. For now, you can reserve the package name as drew suggested mojito-dot.\nBtw, those perfs numbers are impressive, looking forward to try that out.\n. @soljin great work, you're officially the first person to create a community extension for mojito, thanks a lot!, we expect more on this front when we start promoting the capabilities of extending mojito core functionalities.\nAbout the component, a couple of notes:\n- Please, add the step-by-step guide, including the fact that they have to install the package in the app directory using npm i mojito-dot --save, etc.\n- In the code, I see you're using Y.namespace('Env.Mojito.Handlebars') as the internal cache mechanism, rename it to use Y.namespace('Env.Mojito.dot') so you don't run into any conflicts.\n- You might want to write some unit tests on this.\n- You might want to write some integration tests on this to make sure that it works with every new mojito release (we might be able to help here).\nAgain, great job!\n. /ping @zhouyaoji \n. /ping @drewfish \n. Closing after merging #1103 \n. fixes issue #1099\n. I think there is nothing missing at this point.\n+1\n. +1\n. Follow-up: windows support is coming: PR #264 #460 #1097 #869 #1063 \n. All unit tests are passing except nodejs 0.6, where some of them are failing:\n\nConsolidated Test Report Summary\n\nTotal Number of Executed Tests  :672\nTotal Number of Passed Tests  : 647\nTotal Number of Failed Tests  : 13\nTotal Number of Skipped Tests  : 12\n\nList of Failed Test Descriptors\n\nFailed Descriptor Path : /home/travis/build/yahoo/mojito/tests/unit/lib/app/addons/rs/rs_test_descriptor.json\nTotal Number of Failed Tests : 2\nFailed Descriptor Path : /home/travis/build/yahoo/mojito/tests/unit/lib/app/autoload/autoload_test_descriptor.json\nTotal Number of Failed Tests : 3\nFailed Descriptor Path : /home/travis/build/yahoo/mojito/tests/unit/lib/app/commands/commands_test_descriptor.json\nTotal Number of Failed Tests : 1\nFailed Descriptor Path : /home/travis/build/yahoo/mojito/tests/unit/lib/lib_test_descriptor.json\nTotal Number of Failed Tests : 7\n. All unit tests passed in windows for client and server. If travis is ok with this one, we should merge it.\n. npm test is not working properly in windows for the mojito repo, apparently related to yahoo/arrow/issues/93\n. +1\n. I presume this is a client side issue.\n. +1\n. Y.Model.Vanilla is also related to issue #259, just for reference!\n. Unit tests passed in travis!\n. :+1: \n. travis is failing big, but has nothing to do with this PR.\n. +1 fingers crossed!\n. I will like to get this compared to develop and pr1 to be sure.\n. +1\n. @lazybean I'm with you on this one, it should be a single route.\n/ping @zhouyaoji \n. +1\n. The global structures that you're reference here ARE NOT action context, they need to be something else. ActionContext addons are tied to an action executed on a mojit instance by definition, which means they will never be global. But I could not agree more that today people are using addons to mitigate a bigger problem, the lack of page-level structures that can be used by any mojit instance in the context of that page (independently or the runtime). We do have some ideas, and we will formalize them in the next few days, I will keep you posted.\n. @saich the problem here is that ac.helpers are, or should be, template engine agnostic. They should be stateless functions that can be serialized and sent to the client side (coming soon). What changes is the fact that every engine implementation might use them or not. A lot of changes are coming in this area, so I will close this PR and we will see how to accomodate things in the future.\n. +1\n. A note was added into the release note. This is a regression that will be patched soon.\n. Workaround described here:\nhttps://github.com/yahoo/mojito/issues/1046#issuecomment-15330353\nClosing in favor of issue #1046\n. +1\n. If this is a re-run of a previous commit, make sure u also update some other new tests that are using the ../../../ trick.\n. +1\nPlease, add two cards to trello:\n- todo to fix the skipped tests\n- todo to remove the old server.js files\n. +1\n. mojito should work just fine in windows. If you have any issue, ping @juandopazo.\n. @isao can we close this?\n. I was able to reproduce this. thanks for the repro case, I will try to land a fix asap.\n. +1 (please ask @zhouyaoji to update docs if needed)\n. in 2) you mean node_modules/mojito-cli/bin/mojito right?\n. cool, got it!\n. please, check the failure in travis, might be a false positive.\nalso, I think you have to remove the mocks from \"mojito-test.js\" file.\n. +1\n. Oh boy, so much love for this PR :)\n. @lzhan don't forget to add the entry to history\n. We plan to remove the recursive tests in favor of testing the current pkg only.\n/ping @isao \n. mojito test will test unit tests, why should I test my dependencies? each of those dependencies are npm pkgs and they should be tested before releasing them. In other words, there is no point on testing dependencies when testing the units in the app.\n. +1\n. +1\n. @lzhan this is not enough, I will add more notes into the diff so we can also validate that the new data overrule the old one, and the transfers works as expected. Let's hold on this.\n. Done with the suggestions.\n. +1 great job\n. +1\n. finished the first pass, let's talk offline for more details.\n. A lot of comments, let's do another pass tomorrow\n. we are getting close :)\n. done with the pass!\n. +1\n. +1\n. Yes, the reason is perf. For the routes to be contextualize, we need to process them per request, this is an expensive operation, and will now allow us to rely on the internal cache implemented by express. Also, the fact that routes are normally not changed per context.\nOn top of that, this doesn't necessarily means you cannot limit what you expose to the client side. In fact, you have full control of what is exposed, by using express-map's filter mechanism to expose the list of routes you want, in case you don't want them all to be exposed.\n. @lzhan can you work on the notes that I left few days ago?\n. +1 (subject to travis result)\n. +1\n. /ping @zhouyaoji @jenny \n. /ping @zhouyaoji \n. /ping @zhouyaoji \n. makes sense!\n. Now in mojito-next (0.9.x), you can simply control any error accordingly:\nhttp://expressjs.com/guide.html#error-handling\nAlthough, I think this enhance makes sense, and I wonder how to detect it today thru express' error handling method. Feel free to reopen this.\n. /ping @isao @lzhan \n. +1\n. need more time to review the addon, too complex.\n. Ok, let's take this for a spin.\n+1\n. Yeah, I still need more time to finish the review.\n. ok, we can take this for a spin, and we can re-iterate on top of this.\n+1 after fixing the stuff that @isao mentioned. \n. Hmm, this is probably affecting any JSON file, not only routes.json.\n. @imalberto is this fixed in mojito-next? what happen if there is a malformed routes.json? feel free to close this.\n. Trello Card 432:\nhttps://trello.com/c/Cz5hCgj6/432-search-perf-0-gc-profiling\n. +1 please, verify that travis passes before merging.\nTODO\n- [x] History entry is still missing\n. +1\nTODO:\n- [x] history entry\n- [x] unit test\n. @zhouyaoji can this be closed?\n. Thanks @jarnoux, I will look into it today.\n. There is a fundamental flaw with this approach, it is the fact that YUI uses a namespace, which means you can hold references around, and those references will not be updated whenever you re-attach a module. E.g:\ncontroller-foo requires bar, if controller-foo is updated, it can be re-use thru loader, and it will be able to resolve the references to the bar namespace, and everything will work just fine. Now, if you update bar, and re-use it, the references that controller-foo is holding will be preserved, which means that controller-foo will be using the old bar, not the new one.\nThere is a little that we can do about this. I think it is not a blocker.\n. We could link to http://yuilibrary.com/yui/docs/api/classes/Model.html or we can document at least the get and set, which are the common methods for pageData and data.\n. +1\n. We should probably have a todo list in trello to avoid forgetting the fixes for all these little things.\n. travis issue:\nnode app.js\n/home/travis/build/yahoo/mojito/examples/quickstartguide/app.js:18\napp.use(mojito.middleware());\n               ^\nTypeError: Object function Mojito(app) {\n    this._app = app;\n    this._config = {};\n    extend(Mojito, libdispatcher, liblogger, libmiddleware, libtunnel);\n    app.mojito = {};\n    this._init(app);\n    return this;\n} has no method 'middleware'\n    at Object.<anonymous> (/home/travis/build/yahoo/mojito/examples/quickstartguide/app.js:18:16)\nseems to be related.\n. thanks @ooskapenaar, we will look into it. /cc @drewfish \n. This should have been fixed by now. @lzhan can you validate and close this?\n. Honestly, I don't remember what behavior is correct. But I think the runtime was an important part of the security protection. I think this will work just fine:\nRemove those secrets from the master setting, and put it in server runtime, it will not leak:\njson\n[\n  {\n    \"settings\": [ \"master\" ],\n    \"specs\": {\n      \"frame\": {\n        \"type\": \"HTMLFrameMojit\",\n        \"config\": {\n            \"deploy\": true,\n            \"child\": {\n              \"type\": \"PagerMojit\",\n              \"config\": {}\n            }\n        }\n      }\n    }\n  },\n  {\n    \"settings\": [ \"runtime:server\" ],\n    \"specs\": {\n      \"frame\": {\n        \"config\": {\n          \"child\": {\n            \"config\": {\n              \"secret1\": \"this is a secret\"\n            }\n          }\n        }\n      }\n    }\n  }\n]\nWhich means that the secret is only available for the server runtime, which has a semantic meaning, and makes more sense.\nAlso, since that syntax is very weird, you could use the extension from @jlecomte to make this easier by using dot notation in json files:\njson\n  {\n    \"settings\": [ \"runtime:server\" ],\n    \"specs.frame.config.child.config.secret1\": \"this is a secret\"\n  }\n. My only concern about this is that people will tend to copy those examples, which means they will copy those dev-only settings. I will like to have them into the proper environment:development context, and make sure that our apps are running with --context enviroment:development when they are about to be used to func tests. This will be ideal IMO.\n. Yeah, I don't know how that part works in our functional tests.\n. not so sure about the reasons behind this change, but the direction we are moving with modown express extensions is a little bit different. Here is what we have in express-yui and express-state so far is this:\n- require('<extension-name>') will require('express') under the hood and extend it.\n- <extension-name>.extend(express); will extend any express class.\n- <extension-name>.augment(app); will augment any express app instance.\nThese three ways to plug an express extension solves all scenario as far as I can tell. Hopefully we can agree that mojito-next is going to be, primarily, an express extension, and we can follow the same principle. Here is the code:\nhttps://github.com/yahoo/express-yui/blob/master/lib/yui.js#L208\n. having multiple extensions wrapping the defaultConfiguration is really not a problem because it will create a chain of functions to be executed on the same context, that will work just fine. The question that is on the table today is whether or not we want to pursue the first item from my list (plug automatically), but on the other two items, we are convinced. But since it doesn't hurt to automatically plug the extension into express and then manually try to plug it again, that give us some more time to decide about item 1.\n. @ericf wrote the proposal to formalize this here:\nhttps://gist.github.com/ericf/6133744\n. /cc @zhouyaoji \n. +1\nthanks for cleaning this up @drewfish \n. +mojito@0.7.5\n. regression introduced by fix for issue #1017 /cc @lzhan @isao \n. @lzhan can you validate and close this?\n. /ping @zhouyaoji \n. done with the first pass.\n. +1\n. This is looking good!\n. +1\n. pageData is not going to be preserved under a RPC call, which means that we don't pass the pageData back and forward when making tunnel requests. This is a limitation because we can't not predict the size of the pageData, and we can't, at the moment, resolve conflicts between what comes back from a tunnel request and what was potentially changed in the client side at the page level. For that you should use the data, which is more self contained for the mojit instance, but it doesn't mean you will not running in conflicts, until we introduce the latency compensation mechanism.\nWhat you can do is to use data just to transport the value, then once in the callback in the binder, you can set the value at the page level, which will triggers the change event, and it is your responsibility to keep the pageData and the data in sync.\n/cc @zhouyaoji we should probably add this a potential issue under: http://developer.yahoo.com/cocktails/mojito/docs/topics/mojito_data.html#sharing-data\n. +1\n. Todo:\n- [ ] merge to next (which might be a little more complicated)\n- [x] update history entry\n. +1\n. Makes sense! I will add it to trello.\n. This is done in mojito-next (0.9)\n. Since the page obj is probably going to have contextualized stuff (don't know), I will suggest to allow requests to attach a page object into the request object (or potentially req.locals, which is the standard way of doing it in express 3) and then getting mojito.js to augment that object with more stuff if it exists, or just create a new object.\n. /ping @zhouyaoji \n. Sounds good to me!\n. bumping this into trello board: https://trello.com/c/XYLOloRT/768-search-gh-1254-allow-the-same-context-to-be-used-multiple-times-in-configuration\n. Ok, I added a lot of comments, but I guess I got confused since that was not the original purpose of the PR, although some of them are relevant for the error manipulation. Feel free to ignore the others.\n. mojito-next (0.9.x) uses the new serialization based on express-state pkg that should not mess with the encoding of the urls.\n. we don't have enough information to figure the environment. that's in the user-land.\n. @lzhan can we close this? /cc @zhouyaoji \n. /cc @drewfish \n. LGTM, although the functional tests are failing, but might not be related to this PR. /cc @lzhan can you take care of this?\n. @lzhan, a unit test for this is going to be difficult because @jarnoux removed the piece of logic that we controlled in favor of something controlled by express directly. What we might need to do is to review if we were doing any unit test around that manual verification, and remove them.\nIn the other hand, if we want to really test this, we might want to use supertest which allow us to fake an express request, but I think for now we are good.\n. +1\n. +1\n. what if we do this when dispatching a new mojit (right before expanding the instance), or doing it right inside the store method to expand the mojit instance. \n. I think we solved this a while ago. /cc @lzhan @imalberto \n. Let's make sure we add a trello card, or an issue in github to remove the unnecessary code once we drop support for 0.8\n. /ping @lzhan \n. @aljimenez did you ever solve this?\n. LGTM, we just need the unit test for this, and we can merge it.\n. +1\n@lzhan can you merge this?\n@gomezd is the test in travis related to this test? or something else?\n. /cc @lzhan \n. +1\n. /ping @lzhan \n. /ping @lzhan \n. I'm still not convinced that this is right. I think it works, and the tests passes because the mock for ac.done() on every child is synchronous, but if you add a setTimeout() there, it will fail. Can we try it?\n. @lzhan I still have my reservations about this. I think the problem is there somewhere, we are just not seeing it. The good news is that this is not going to make it worst, in fact it fixes the reported issue. So, I will give you a +1 so we can move on, but make sure that you open an issue and a trello card to solve the remaining issue, at least to investigate how to deal with multiple calls to execute while the callbacks will be executed in random order.\n. +1\n. this is why I fought very hard to get the archetypes in mojito pkg rather than the global cli :/\n. @ItsAsbreuk some of those thoughts make sense, and in fact they are the recommended way to use the cli, but the reality is a little bit different. Imagine an scenario where you have two mojito projects, one using mojito 0.7 (which you can't update for business reasons, which is very common) and another one using the bleeding edge of mojito, then how do you solve the mojito create? are you going to install two cli's? or switch between them? how?\nThe archetypes are bound to the mojito version installed in your project, and the cli should rely on that pkg, and the content of the pkg to resolve which archetype to install, that way you get updated archetypes with every new version of mojito without having to update a cli.\nanyhow, this was slippering, and I don't recall the exact reason why @isao did this, there must be a reason.\n. we have multiple archetypes, maybe we can add one with promises :)\n. Alright, closing this in favor of customization per application thru archetypes.\n. nice! that's probably the preferable way, without having to bring promises into the core.\n. Hey, this is a limitation of handlebars and not an issue in mojito. Handlebars will not propagate context from parent to a partial, that's why all functions and data available at the regular template will not be available into the partial unless you use ../something to reference to the parent context. Here is the discussion about the actual fix in the next version of handlebars, which includes some of the workaround:\nhttps://github.com/wycats/handlebars.js/issues/182\n. @jithin1987 yes, now I understand what you want to do. First of all: ac.partial has nothing to with handlebars partials, it is a partial rendering as opposite to ac.done() which does a full rendering releasing the control from the controller. Basically, when calling ac.partial.render(data, 'new-tasks', callback), it is equivalent to call ac.done(data, { view: { name: 'new-tasts' } }), as you described, but with the ability to control the output before releasing the control.\nAnyway, there is a bug in line 66 in the partial addon where the second argument should be just instance instead of instance.type:\nhttps://github.com/yahoo/mojito/blob/develop/lib/app/addons/ac/partial.common.js#L66\nFeel free to send a PR or wait for us to get to that. /cc @lzhan \n. @jithin1987 yes, path/to/filename within the views folder could be used to call ac.done() but also ac.partial.render(). In this case, it is ok to call partials/task, if that doesn't work for you, it might be a bug.\n. @jithin1987 any update on this?\n. Yes, I remember I added a rule to treat files under partials/ as a different kind of views, therefore they are not available has views to avoid the duplication specially in Shaker, where all files are going to be aggregated. We need to decide what to do in this case. My initial thoughts are:\n- keep the current schema\n- add a rule in the template lookup routine to deal with partials/* if they really want to render an individual partial as a regular template.\nI will sync up with the team later today and we can make a decision on this. @jithin1987 thanks again for the help to get the to bottom of this.\n. No no, this is a no-go in mojito. You have full control using express middleware in mojito to do whatever you want with those arguments before they get to mojito engine:\nhttp://developer.yahoo.com/cocktails/mojito/docs/topics/mojito_extensions.html#middleware\n. @lzhan are u still working on this one?\n. +1\n. this solves issue #1306\n. LGTM\n. @ItsAsbreuk, are you using shaker?\n. alright, let's get this fixed. @ItsAsbreuk if you can provide a very basic repro case, that will be awesome.\n/cc @lzhan can you investigate more about this?\n. @lzhan was this fixed?\n. Ok, I will close this one, and you can open a new issue for the long term solution.\n. In general, this part of the code is very fragile, and we should be able to improve it drastically using modules, but that will requires more time. Let's discuss it offline.\n. @lzhan ping me tomorrow to discuss this\n. +1\n. LGTM but some tests are failing!\n. @jianglibo it will take a while to fix this one. Once we release mojito-next (few next week), we should be able to replace the piece that does the serialization with the brand new express-state. I will keep you posted!\n. mojito-next (0.9) solves this issue by using express-state serialization routine.\n. +1\n. @imalberto can you provide more details about this? in theory, you can have a top level middleware that adds the mojito instance into the req object potentially, and that will enabling accessing in any extra middleware.\n. @realistschuckle that mechanism exists today, and will remain even after we release mojito next officially (in ALPHA today). The mechanism is triggered by the prefix in the middleware name in application.json, if the middleware starts with mojito- it will be treated as a \"middleware factory\", and it will pass the proper configuration midConfig, if not, it will be treated as an express middleware.\nIf this issue is not targeting that specific mechanism but the fact that calling app.use() directly by developers in app.js without having to add the middleware into application.json, and still use the \"middleware factory\", then I'm against it. I think there are plenty of mechanism for custom middleware in express, and we should not be dictating how to do it.\n. oh, I forgot to mention a very small detail :), my bad, but it is an important one, if you have a mojito- prefixed middleware, that means you're trying to mess with the default order, and you will have to re-specify the default middleware by name as well (keep in mind that by default your custom middleware will work before the default ones). In other words, you can do this:\napplication.json\n{\nmiddleware: [\n    './mymiddleware/mojito-a-test'\n    'mojito-handler-static',\n    'mojito-parser-body',\n    'mojito-parser-cookies',\n    'mojito-contextualizer',\n    'mojito-handler-tunnel',\n    './mymiddleware/mojito-another-test'\n]\n}\nhope that help to clarify how to use the factory. in this particular example, I'm loading two custom factory middleware, mixing them with the default ones. I know I know, this is a terrible API, and a very bad design, (for the record: no my fault), and that's why I want to keep it in place for backward compatibility, but encourage people to follow express principles, but if you look into mojito-next, you will see that the low-level middleware are not longer doing much with the factory.\n@imalberto can you double check all the things that I'm saying here? I'm abusing my memory, so I might be wrong. Ideally, we could move away from the factory at some point in the near future, and ideally we can start by exposing the low-level middleware side by side with their factory counterpart for backward compatibility.\n. I agree with @drewfish, let's remove the ability to use application.json's middleware to contextualize middleware.\n. solved, we are now fully aligned with express. no more configuration in application.json for middleware.\n. it is looking good. small details here and there, but in general, we are pretty close to get this one merged.\n. +1\n. Tests to fix:\nFailed mojito-addon-rs-yui-tests on nodejs\n13 Passed, 1 Failed , 1 skipped \n in yui rs addon tests\n yui meta for loader-app-base-en-US:Value should be undefined.\n Expected: undefined (undefined)\n Actual: [object Object] (object)\nFunc:\n```\n\n                       List of failed descriptors\n\nFailed Descriptor Path : /home/travis/build/yahoo/mojito/tests/func/common/common_descriptor.json\nTotal Number of Failed Tests : 2\n\n```\n. There is something weird going on with the unit test that is failing, I see:\nA.isUndefined(config.groups.app.modules['lang/PagedFlickr_de'], '`lang/PagedFlickr_de` should be undefined');\nfailing due to the fact that the module is in fact defined, but it seems that it should not be defined, although we can clearly see that module in fixture: tests/fixtures/gsg5/mojits/PagedFlickr/PagedFlickr_de.js. \nI don't remember anything about making lang bundles undefined modules.\n/cc @drewfish \n. yeah, that's absolutely right, there is something going on here, I will investigate more.\n. All systems are green! we can go ahead and merge this. /cc @imalberto \n. still very fragile, and we will probably replace all this with the new Intl stuff that we are working on it. I will give you a +1 to get this out of the way until the refactor, but this test seems to be very fragile.\n+1\n. +1 remember to update the docs\n. +1 merge after updating the middleware docs and all the breaklines :)\n. +1\n. this is the principle of unit testing, you test the unit, not its dependencies. you will have to mock Y.mojito.ModelDecorator in order to tests controller.server.js. there are plenty of examples thru the documentation for how to mock things when testing: http://developer.yahoo.com/cocktails/mojito/docs/topics/mojito_testing.html#mocking-models\n. +1\n. wrong branch.\n. +1\n. solves issue #1320 \n. yes, trying to figure out what's going on, there is a func test failing.\n. alright, all systems are green now!\n. /cc @zhouyaoji can you take care of this?\n. +1\nmake sure we add  A LOT of docs around this.\n. +1\n. +1\n. +1\n. +1\n. +1\n. LGTM\n. few notes from the top of my head:\n- routes.json is in place just for BC, and we should encourage people to do express routes.\n- I think middleware section should be expanded to highlight how to control them at the granular level.\n- the attachRoutes is only needed if routes.json is going to be used.\n. yeah, the expand on middleware is excellent.\n. What about all the routes.json files in all those examples that have the line commented now? did u removed the actual files? or are u keeping them around for now?\n. this LGTM btw.\n. I'm just concern that they try to copy the example, changing routes.json, and nothing happens. Probably we should add a note into those routes.json, at the top, saying something like, \"...to use this routes do this...\", or simply remove them to avoid confusion and left an example with one that works, probably combining routes.json + some other express routes.\n. Let's clarify about the url addon offline.\n. @imalberto that doesn't clarify on the url addon, is that still supported? if yes, how? It seems like it fails for @zhouyaoji \n. Btw, the last few PRs issued against develop have been merged really quick, without giving us at least 24 hrs to review them, it seems that we are not having a proper review process anymore, can we bring that back? /cc @aljimenez @jlecomte \n. The problem here is that you really don't know if the code is a YUI module or not, that's why it was executed in a different context to identify what type of script it is, then the proper execution in the main context.\n. @aljimenez sorry for the delay, I was on the road, few notes:\n- YUI.applyConfig() has nothing to do with YUI.add(), they are orthogonal\n- if you have a vendor script in your mojit, something that is not a YUI module and tries to use window for example (since you use it from the client side only), you need to control the error (I think you have that one covered in this PR).\n- this assumption is bold: \"By the time we want to capture the YUI details, we assume the file is a YUI module\".\nThe other thing is that you could simply check, if it is a yui module in a context, and then capturing the callback function and re-execute (call) the YUI.add() in the current context without having to read the file again, that is probably the ideal solution.\n. I thought this was done internally whenever you try to use that context to access data from the store.\n. fair enough.\n. This is supported thru express-annotations: https://github.com/yahoo/express-annotations#appfindallannotations\nYou can add specific marks into each route, (e.g.: client: true), then expose the result of the app.findAll() operation overruling the mojito default behavior, which is expose everything.\n. LGTM, there is a failing test though.\n. LGTM\n. This PR is misleading, it is not extending mojits, it is extending individual modules within a mojit, and that's supported today as far as I can tell, by relying on the YUI module definition, I wonder why are you trying to mix the concepts of a mojit and modules in this PR.\n. need some time to go over this tomorrow.\n. @aljimenez let's have a chat tomorrow about this PR, I have few specific questions and some suggestions, but this is a very complex PR, hard to make sense of all pieces.\n. ok, I will not hold back on this: +0.9\n. LGTM\n. what version of mojito are u using? latest versions should support that as described here:\nhttps://github.com/yahoo/mojito/pull/950\n. Today, with mustache, we can add \"mojito-partial-addon\" and call for ac.partial.compiler('foo') to get the stringify version of the template, and pass it to the client side if we want to use that there.\nWith handlebars, we should be able to do the exact same. Here is an example:\nhttps://github.com/caridy/mojito-handlebars-demo/blob/master/mojits/HelloHandlebars/controller.server.js\nThe difference between mustache and handlebars at this point is that mustache produce a string that has to be processed at the client side by the mustache engine, while handlebars produce a Javascript code that represents a function, and by calling that function, it will return the rendered template.\nBut from the mojito point of view, they are the same thing, so, ac.partial should behave the same.\n. agreed, I will adjust it.\n. @drewfish \"mojito compile views\" is pretty dummy today (it doesn't select specific views per context, etc). Shaker does a better job in this area, but still I feel that, sometimes, having the ability to serialize a partial and sending it over to the client side to execute a particular process without all the hazard of compiling all of them during build time is a nice to have feature, specially if you have some sort of logic to pick the right view programmatically rather than a fixed value.\n. I will argue that this type of rollup process (mojito compile views) should be made by shaker rather than mojito itself. But about the specific feature we are discussing here (partial->compiler), I added to facilitate (in the near future) the use of {{> partial}} for handlebars templates. At this point, mojito-partial-addon is the only external addon that knows how to resolve (based on the name of the view) the partial fullpath, etc. So, if we are going to support this feature anytime soon, we need a way to pre-compute partials before executing the composite view. That being said, we can stick to the plan of having no compiler routine at the addon level if you feel strong about this. \n. Yes. Keep in mind that this gets executed once per process per view unless you use bypassCache.\n. Old habits are hard to change, let's use mojito namespace instead of YUI namespace if that's more convenient.\nThe main purpose of the cache is to share compiled views across multiple Y instances (mojit instances). I wasn't sure if Y.mojito.* was shared across all Y instances, I'm still not sure!\nWhat the best way to share data across Y instances under mojito namespace then? something equivalent to Y.Env === YUI.Env\n. Here is an example of how to document callbacks for the new yuidocs:\nhttps://github.com/yui/yui3/blob/master/src/app/js/model.js#L375\n. Let's just keep in mind that the number of views is a finite number, and they will be cache after the first read per view. Also, we can easily change all this to async since the \"render\" method is async by nature (adapter.done or adapter.error are the callbacks). \nCompile and precompile are meant to be used as part of the build process IMHO.\n. In my original code I was using:\nHB = require('yui/handlebars').Handlebars\ninstead of the regular \"requires\" statement. This is the way @ericf is using it in photonearme project. I wasn't sure about the implications. I think this approach will isolate HB into its own Y instance, but I remember having some problems with the way HB.compile works when using the \"requires\". But it if works fine, then we can keep using the require :)\n. The rational that I used in the initial code was: \"whenever a template is cache, it uses the fullpath as a hash, which means it there is not need to have a sandbox per mojit.\", and that works well with require('yui/handlebars').\nNow, I don't know if this works nicely with the new RS (I guess it behaves the same), and how are we going to support partials. I think we will have to put more thoughts on the partial resolution in the short term, in which case, having a sandbox per mojit might work better to register partials per mojit. This doesn't mean we can't have a global hash for cache entries, but we will need a way to register those partials somehow.\nAnother question for @drewfish, are we going to support global views? and global partials? If yes, then how they work in the context of a mojit?\n. Why do we need a yuiPrefix?\n. @imalberto so this feature is targeting \"mojito build\" right? If that's the case, how is this different from having a custom yui->config setting in application.json for a particular dimension with these custom values: comboBase, base, combine, filter?\n. @mridgway we should move these statements into its own .sh file (arrow.sh maybe), just like we did with yaf-develop branch under the ./travis/ folder. In my mind, .travis.yml should be simple enough, just having references to scripts we want to execute.\nWe can also create a ./travis/travis.sh script for anyone who want to run these tests locally.\nI wonder if we should have the .jar file as part of our repo.\n. Yes, I think unit tests is just fine, and whoever wants to run functional tests, they should be able to do it manually.\n. @mridgway the main reason for refactoring this is because we could have a dummy before_install script, and a custom one for our bleeding branches (yaf-develop for example) to use the bleeding YUI version (branch 3.x). Otherwise we will have to have a different .travis.yml file in those branches.\n. I think so. There are few \"mark\" actions as part of the legacy that need to be reviewed. Marks should be really important moments rather than start/end, you're right. I will start changing some of them.\n. Hmm, I wanted to measure the \"use\" routine, and I want to measure the whole \"dispatch\" process separately.\n. The previous approach was trying to get in the way by doing app.on('connection'), then adding the \"end\" event. Apparently, it didn't play nicely with mojito. In many cases, specially when using a browser to hit the page, the connection never reach the close or end point, but using curl does it. I guess it was the way mojito is ending that connection.\nAfter moving it into this low level hooking, everything works perfectly.\n. I was thinking to use the same at the server and client (eventually consolidate perf module since it does exactly the same), and at the client there is not just thing as YUI_config.mojito., maybe this is a good time to add it ;)\n. There are few problems I guess:\n- mojito-perf might be included at a mojit level to do perf, in which case that configuration needs to be available, in which case we don't call instrumentMojitoRequest, but other settings are there.\n- at some point, we might want to instrument few things but not the MojitoRequest, in which case we need the config anyone.\n- In the client side, there is not such thing as instrumentMojitoRequest, and the config has to be available to be used.\nIn my mind, Y.config.perf or Y.config.mojito.perf is the right thing to use to unify the implementation.\n. agreed.\n. You're right, it doesn't add any ID into the log. I'm getting this:\nmojito-composite-addon:execute timeline=634 (slot-1,slot-2,slot-3,slot-4,slot-5,slot-6,slot-7,slot-8,slot-9,slot-10,slot-11,slot-12,slot-13,slot-14,slot-15,slot-16,slot-17,slot-18,slot-19,slot-20,slot-21,slot-22,slot-23,slot-24,slot-25,slot-26,slot-27,slot-28,slot-29,slot-30,slot-31,slot-32,slot-33,slot-34,slot-35,slot-36,slot-37,slot-38,slot-39,slot-40,slot-41,slot-42,slot-43,slot-44,slot-45,slot-46,slot-47,slot-48,slot-49,slot-50)\nand I should be getting: mojito-composite-addon:execute[ID-HERE]. What will be the right way to collect the instanceId in this case?\n. Few reasons:\n- in the short-term, we want \"dump\" to produce a json for the SVG.\n- at some point, someone might want to dump data programmatically to collect the state of the execution. Imagine a mojit that runs last, and print the perf info in the page.\n- it was exposed before, not so sure why :)\n. The option are Copy or Freeze, and we are expecting Object.freeze to become more performance in the upcoming V8. We can't allow the original object to be modified otherwise we will be bleeding between requests, or even within the same request between mojits.\n. It is, line 128:\n* @param {string|object} id Unique identifier of the mark, usually\n *      the requestId or a command object.\n. Well, there are other implications on this one. Can we merge this and later on discuss how are we going to deal with collisions and multiple requests? /cc @drewfish \n. One more note on this one: you freeze once, you have to copy everytime, so this is not apple to apple.\n. agreed, raising the concern in the board right now! thanks\n. sometimes we re-use perf variable for multiple timelines within the same code-path, segmenting the timeline into small pieces (like in \"ActionContext\" implementation), in which case there are 3 perf.done(); , and that doesn't tell you which timeline is being closed, I find the name of the timeline to be useful to understand the code better. I do agree that half the sentence can be stashed, but still I want to know which timeline that code should be closing. Maybe we should pass a param that does nothing. something like: perf.done('hb:render');, in that case we definitely don't need the comment.\n. Agreed, I added the namespace to pass the tests, but after I fixed the mojito mock to provide that namespace, I'm off the hook to use the full namespace here.\n. I was about to call it master-app-config but static-* sounds better.\n. Well, the idea is to provide an abstraction layer, not only for process, but for any kind of data storage based on our definition of data scopes. For that, and special the client side, YUI has the cache module and offline-cache as well sharing the same api that supports expiration, maximum, etc. And this is the API that they use today where request and response are generic data structure, and they can be serialized when needed.\nhttp://yuilibrary.com/yui/docs/cache/\n. I added the extension explicitly to trigger the error if they try to access something else, but later on I added a verification of the extension, so I can use this structure now. Should be ready in the next commit.\n. lol, I'm not very good at regex in general, so I escape anything that it suspicious. Feel free to clean that up.\n. In theory, it should use YUI.applyConfig(), but there is a remaning bug in yui that prevents us from using the config API. Instead, we need to plug them directly into the main object. Dav will have this fix for the next release.\n. In theory, in production, we will use the YCS combo rather than the app combo. But I do agree we should make this more performance, maybe creating a hash in memory for all YUI modules or just not dealing with YUI modules at all. Let me think about this.\n. http://yuilibrary.com/projects/yui3/ticket/2532854\n. good point, I will generalize that.\n. agreed.\n. Yes, apparently :) I will consolidate that. I wonder if they will be different at some point!, not so sure yet.\n. they could be CSS since YUI uses yui modules meta for css as well.\n. Hmm, didn't quite get what you mean. Both methods return a object in the same form of {moduleName: res}, in the case of yuiRess, they are fake \"resources\".\n. It is not empty anymore since I have a default value in config.json. but I do agree that prefix in its current form is not semantically correct. In my mind, prefix means a prefix path, not a prefix word. We can attempt to change that as well but it will have BC implications.\n. Good point.\n. It was considered, but the thing is that it will not be consistent with /static/combo~/static/foo.js~/static/bar.js.\n. Can you add a block of comment explaining the details about this routine, and why we need to do the two cycles to pre-compute the length?\n. this is not longer supported, use yui->config->debug, logLevel and filter accordingly.\n. this is not longer supported\n. this is not longer supported.\n. this is not used anymore.\n. this should probably go into the staticHandling on environment:dev section as false, and in here as true.\n. is this property still used?\n. This is not longer needed, was solved at the store level, files will always have stat.mtime.\n. nice catch!\n. This condition can be replaced with:\ndir = Y.Array(dir);\nwhich guarantee an array as a result.\n. if 'debug' is false, logLevel is irrelevant. In this particular case, the translation from \"log\" to yui->config will be having debug: false, without logLevel.\nbtw, debug: false is the default setting :)\n. what's the purpose of redefining base here? I guess u will have to use combine: false otherwise it will continue use comboBase instead. \n. If you want to get logLevel to warn, remember to add debug: true as well.\n. what's the reason for this line? is that 1000 an arbitrary number?\n. I will like to preserve the output options through the cliOptions\n. Any particular reason for reverting the changes in this block?\n. callback should be the second argument instead to follow model pattern.\n. Use:\ncallback(...)\nreturn;\nit is confusing to have a return of the result of a callback, specially when the current method should return null. Not need to same one line ;)\n. I like this way of providing a utility method, but I don't like the name, specially because we are overloading YUI.use() with this definition. I probably prefer something like libutils.yuifactory or libutils.getYUIInstance() or something like that. And it is ok to reuse the same Y under the hood, YUI does that as well.\n. Do not overload return, replace it with:\nif (callback) {\n     callback(y);\n}\nreturn y;\n. [duplicated note] I don't like the name, specially because we are overloading YUI.use() with this definition. I probably prefer something like libutils.yuifactory or libutils.getYInstance() or something like that. And it is ok to reuse the same Y under the hood, YUI does that as well.\n. this is very confusing, should be my_yui but that one is also confusing. In theory, yui-sandbox.js will be the proper way to require YUI, and that one should be smart enough to figure out which version of YUI to use (the one bundle as a requirement of mojito) or the one installed at the app level, or the one the user specify somehow, but we are not there yet ;)\n. YUI does always return the Y instance, even if the callback is passed for chaining purposes!\nAbout the number of lines, not a big deal since this is server side only.\n. cool\n. In this paragraph you reference log object, which is not defined, instead it shoudl be logLevel property or attribute. Remove the reference to time stamp.\n. Remember that logLevel does not work if debug is not set to true.\n. debug is never default I think\n. searchMojit is probably not a good name because we don't use mojit as part of most yui modules.\nI will recommend to use DemoBinderIndex and DemoModelFoo since those are the actual stuff that they will use.\n. Remember to use \"debug\": true, otherwise all this is irrelevant.\n. I don't think this is a good example, because getAppConfig is bound to the current context, instead of the static configuration from master. And in fact, the log level setting was already set. I think it is better to stick to Y.config.logLevel as a way to know the level at any given time at the server side.\n. @drewfish No, because Y.config.logLevelOrder comes from getAppConfig() from store in the first place, it is set as part of the Y.config early on, and it lands in the _configureLogger through Y.config.logLevelOrder. So, developers my want to redefine that list, in which case the lower priority element does not need to be 'debug' necessarily.\n. This is pretty risky because getMojitTypeDetails is a public method, and people will use it in many different ways, they might end up corrupting the cached data. Can we pass a flag or something if we don't want to make a copy intentionally to make it work more performant?\n. remove comboBase, not needed.\n. remove comboBase, not needed.\n. use loader-app-resolved{langPath}, which behaves better, and in any case u are already using loader-yui3-resolved.\na quick note on this:\nif you plan to run functional tests, it will not work because yui-test is not part of the resolved meta ;) for that u have to use \"/yahoo.libs.yui/loader-yui3/loader-yui3-min.js\" instead of \"loader-yui3-resolved{langPath}\"\n. nice catch!\n. I think enableHookGroup is also missing from this. Even though only perf is calling it conditionally, I think we will have more scripts calling it, in which case we need a mock for testing.\n. What is the purpose of setting it to null when it is already a falsy value?\n. Any particular reason for adding hook into the instance instead of command. In theory, an instance's action can only be executed if there is a command to be dispatched. In my mind, hook is more tied to command than it is to instance. In any case, you should have access to command from everywhere during the dispatch process, just like instance. In the server, this is just a technicallity, but in the client, that instance is persistent, and command is created every time an action is invoked.\n. client_ctx sounds weird here, specially when you assign it to outputHandler.hook. Is client_ctx  the persistent hook in the client side? If yes, can we rename it? We don't want to keep overloading the context term in mojito, we already use it for many things.\n. Why is this happening here? This sounds like a leak-prompt structure, because any request can potentially change this. If the hook is something created per request, then it should be an inmutable object. \n. In my experience, trying to accomodate a component to be common when in reality the behavior of the client and server are very different will bring problems. I wonder if we should split this into server and client.\n. Please, preserve all Y.log(msg, 'info or debug or error', NAME), instead of commenting them.\n. Why do we have these docs here? this is the hook utility, it will be difficult to keep this in sync with all the hooks defined across the mojito or the app. We can create a tool to generate such as list, or we can document them in a form of YUI events on site, rather than here.\n. Any particular reason for moving handler's function definition down rather than in the var statement?\n. my convention, we use my = this instead of self = this. Don't ask my why :)\nAnd by the way, don't need to define the comments for that line, it is ok to have my defined even when u don't use it later on.\n. Can you elaborate more about this __hook_ctx very private reference?\n. This is the only part that I really don't like. Extending the signature of the class to add the hook reference after the callback is not pretty. Let's try to find another way to keep that reference around.\n. same as above, we should not do this here. Let's find another way for the adapter to pull a reference of the current hook.\n. This is interesting. If we can specify the list of folders for mojits, we probably can do something similar to specify the list of folders to pick up other application.json files as well rather than doing the regular walk (in case the app owner wants to control this process).\n. This is very confusing. Having ycb to hold the app level application.json then to hold the merged version. I wonder if we should use a separate structure.\n. Does this means we need to call store.preload() before getting any app.config value?\n. At the moment, readConfigSimple does not provide that capability, and the multi-extension capability as well. Once that land it, we can change it I guess.\n. What happen if preloadInitial and then preload is called? Will be good if we support that use-case, so we can do some stuff before getting to the .preload() execution.\n. related to the comment above.\n. Finally, different port per different context :) nice\n. isn't switch one of the bad parts in javascript? A couple of \"if\" statements should be just enough considering that the value was already validated/preset.\n. Travis failure:\n458+ /home/travis/builds/yahoo/mojito/bin/mojito jslint -p\n459store.js\n460   1 87,9: Expected 'case' at column 5, not column 9.\n461     case 'skip': break;\n462   2 87,22: Expected 'break' at column 9, not column 22.\n463     case 'skip': break;\n464   3 88,9: Expected 'case' at column 5, not column 9.\n465     case 'initial':\n466   4 89,13: Expected 'store' at column 9, not column 13.\n467     store.preloadInitial();\n468   5 90,13: Expected 'break' at column 9, not column 13.\n469     break;\n470   6 91,9: Expected 'default' at column 5, not column 9.\n471     default:\n472   7 92,13: Expected 'store' at column 9, not column 13.\n473     store.preload();\n474app/commands/start.js\n475   1 76,1: Unexpected '(space)'.\n. Any update on this one?\n. ok, we can revisit this later on after the first merge.\n. any update on this one?\n. My question is why hook gets real_hook whenever a new hook is register? is this something to have \"hook\" defined only if there is at least one hook registered? I'm just curious about this statement.\n. ok\n. There is not need to shorten the names when it comes to nodejs. Let's use the full \"Middleware\" instead of \"Mw\".\n. Let's also add the documentation for these two new methods.\n. We can eliminate the setMemoryDebugObject, we don't need that anymore.\n. I will do that.\n. isn't \"useCache\" more descriptive for production, in which case useCache is false by default during development.\n. this._config.useCache sound better!\n. I will recommend to use a folder similar to artifacts, potentially called \"build/rescache.json\" or \"cache/rscache.js\" or \"cache/rs/cache.json\". Two main reasons:\n- mixing user-code with generated code could be problematic, specially when it comes to SVN/Git, where a folder is easier to deal with.\n- we might want to cache more things, like application.json (merged), or compiled templates, etc.\n. meta.assets is merged to parentMeta \"optionally\", but parentMeta is the one passed into the ac.done routine.\n. Actually, this is a question for you. Apparently, metaMerge does not work well for very deep structures, like meta.assets. The solution I have so far is to merge assets object, then merge the rest.\n. Why is _packagesVisited initialized twice?\n. got it!\n. \"pass the an object\" or \"pass an object\"?\n. there is something wrong with the link between these two sentences.\n. no title here?\n. the ...?\n. It might be useful to specify that the binder to use with the view can also be specified, like this {view: { name: 'foo', binder: 'bar' }}, in case you don't want to use the binder whos name is equal to the view name. Or maybe in another example, similar to our ac.done documentation.\n. dispatcher is a bad name for a binder in my opinion, it might confuse people. Can we change this?\n. ok\n. ops, fixing it.\n. We can replace this cycle with a concat and Object.keys(modules).\n. Why do we need to copy it? This operation is a one time operation, and at the moment we cache it, the original can be modify in the current execution, while a new copy will be produce whenever the same value is requested.\n. I will like to see store.set and store.get as generic methods to cache and retrieve entries based on a context that could be used by any RS addon.\n. I recall the static handler using the fullpath at some point when computing client side YUI stuff. Let's make sure this is not breaking that part of the system.\n. We know pathToRoot could be undefined since it is an optional flag, but res.url for a view, that's just not right. We need to get to the bottom of this.\n. I will suggest that we don't call it deprecated that fast. We can suggest that the change is intent to clear the space for the upcoming mojito-cli, but using the current global mojito will help with the archetypes and tests. I don't know, it sounds like to early to push them not to install it globally, when that's what they are used to.\n. do not create objects if they are not going to be used. move this below the if (!specsReq), otherwise you will be creating an empty object per req even when it is not a tunnel request, in which case this will have to be collected by GC.\n. isn't easier to use require('path.extname(), then slicing based on that? this line seems complex.\n. hmm, I guess we should use require('url').parse() to really understand that url.\n. here is where you use instance for the first time, here is where you should create the object with base on it.\n. If it is not found, it should be 404, if it is an invalid url, then 500 is just fine.\n. this will be problematic for BC. Can we preserve the tunnel as a sugar for all the new middleware? middlewares within a middleware is a common practice, and once we refactor mojito middleware infrastructure, in which case we know we will break BC, we can remove the sugar.\n. same as above.\n. same as above\n. move logic after the if\n. If err is detected, we should call next(err) at least.\n. this is a bold assumption, what is req._tunnel is not set? Why is this middleware coupled with others?\n. same as above, bold assumption. I think we should call next(new Error()) instead.\n. same as above.\n. same as above.\n. If this is not used in this middleware, it should not be defined here.\n. better to set it to undefined, which will skip the JSON.stringify process.\n. appConfig is a local variable pointing to this.appConfig.\n. when this location member can be undefined?\n. when the res.url will be undefined/null?\n. me too!\n. Yes, we remove that exception a while ago, and we expect that url is always defined.\n. So, location is not produced by the store? it just comes from the pkg information as optional then? if that's the case, we are good!\n. You should not have try/catch in your tests, instead you can use the provision for failures, here is an example:\n\"test expandInstanceForEnv1\": function () {\n        var instance = {\n           type: 'test_mojit_1',\n           config: {testKey4: 'other'}\n        };\n        A.throwsError('<expected error message goes here.....>', function () {\n            // this function gets executed immediately...\n            this.store.expandInstanceForEnv(\"client\", instance, {}, function(err, base) {});\n        });\n    }\nmore details here:\nhttp://yuilibrary.com/yui/docs/api/classes/Test.Assert.html#method_throwsError\n. same as above!\n. same as above!\n. same as above!\n. registerMiddleware sounds awkward. should be registeredMiddleware() or just app.mojito.middlewares(). Now, middlewares should be stateless, which means they should not be bound to app at all. This makes me think that probably we should do:\napp.use(mojito.middlewares());\nwhich returns a middleware that groups a set of middleware that are bundled with mojito and takes in consideration any custom middleware in app.json. This is exactly what I do in modown-yui with yui.expose().\n. again, this makes a lot of sense, by it will be mojito.middlewares(), which is stateless.\n. probably the default middlewares should be attached to the function itself, something like mojito.middlewares[mid], where the function also acts like an object with members.\n. where are the routes from routes.json mounted? I don't see the call here. How can I remove that and do my own thing?\n. is this really needed?\n. lol\n. lol, thanks @ekashida. I knew something was not right with that \"s\". jajajaja\n. should be 'app' instead of 'app:yaml' right?\n. why do we need to pass app here? in theory once the first request comes in. you can get a handle on the app by doing req.app.\n. default sounds ambiguous here because it is not about default, but those that are set up thru application.json isn't it?\n. for debug we should probably use mojito:middleware:contextualizer, so you can do any of these:\n$ export DEBUG=*\n$ export DEBUG=mojito:*\n$ export DEBUG=mojito:middleware:*\n$ export DEBUG=mojito:middleware:contextualizer\nspecially because we will have a lot of components\n. I heard that qs is faster than querystring, lets add a card to review this.\n. hmm, I usually do app.set('mojito.context'), because get is overloaded, and a mistake can cost you hours of debugging.\n. Is mojito.context attached once during the mojito object creation? then it is ok. I will say lets use mojito context instead of the dot. More a la express!.\nAlso, this code can be simplified, not need to ask fro req.app.mojito, and you can use a local variable probably for better readability.\nFinal question on this: how does that app level setting plays with the request level? do we want that?\n. why is this still needed? isn't easier to just export the function wrapper?\n. mojito:middleware:dispatcher\n. eventually this will become req.app.yui.use('mojito-dispatcher') as a one time operation. Let's add a big TODO for that.\n. eventually, Y should not be in this middleware, only a handle to the dispatcher itself.\n. mojito:*\n. I will not review this one deeply because eventually modown-yui should kick in.\n. I'm worry about using app.set() a lot, specially for things that are very mojito specific. The problem is that we don't know how express is handling that, and how efficient it is. In my opinion those things should be just req.app.mojito.store for example.\n. good call. the instance created for store as a sandbox should be passed thru this as well, the same for the commands that are creating Y instances.\n. not need to overload Mojito, it is only used to hold MOJITO_MIDDLEWARE, remove it.\n. not need to walk then and attach them one by one. express supports this:\napp.use([foo, bar, baz]);\nso you can return an array of middleware!\n. this becomes irrelevant if the previous one returns an array.\n. not so sure what this does!\n. remove app from here.\n. let's not promote this too much. simple simple simple\n. I already have it in another PR, once I merge it, we can move these methods to that new script.\n. let's get rid of all those non-sense timers, debug does that for us.\n. watch out with this, manhattan has the wrong cwd.\n. lets make sure we force runtime: server somewhere\n. options.perf is going away.\n. as I mentioned before, this might be more suitable to be attached to app.mojito itself.\n. why two separate call? what is _createMojito doing that the constructor of the extension can't do?\n. weird spacing here!\n. this is just to re-use the data model associated to a mojit instance whenever the new instance is created from the mojitProxy, which already rehydrated the data model. This also solves the problem of the communication between proxy and instance when running in the client side.\n. I do have few benchmarks tests locally, I plan to start adding them into the repo to be ran manually. The only problem so far is that benchmark is still not whitelisted, working on that with Gil.\n. using vanilla class when running on non-client runtime (aka server)\n. no! function benchmarks are manual operations most of the time.\n. this is for manual process so far.\n. Agreed, I just copied the same code from ModelBase but change the way it gets built, but I wanted to preserve the actual code from @ericf \n. this was not used at all in deploy.\n. In this case, we might want to keep it around for a while, but the objective was to be used as an internal api, I don't think it is even documented, and probably removing it just fine.\n. provision all the stuff per request.\n. this doesn't seem to be used at all in carrier.\n. good!\n. I'm just trying to preserve the current structures, but I do agree with you that routes should be computed once, they should not be tied to runtime context, and that's the way we want to move forward.\n. They are equivalents in terms of code and features, we will use one of them. The main different between them is the way the class is constructed, once of them relies on Y.BaseCore, while the other is just a prototype and few mixes.\n. In develop branch we remove the copy, and instead, we consider staticAppConfig an internal object that we will NEVER change.\nIn fact we made few other changes that will change this block, but we can solve those conflicts when trying to merge this.\n. where is mojito being set? I don't see it in this file.\n. I made some changes here as well, merge will have to be done manually~\n. We don't want routes to be contexualized, instead you can compute routeMaker once as part of the previous if and use the static context for that.\n. this is problematic, the path should come from app.js\n. I'm not so sure we should do this. Adding more middleware on demand will cause the actual middleware will not honor the order. Instead, I think we will have to emulate express here, doing our own simple walk on those middleware, and controlling the error and the next. I did that in modown-yui->middleware for the static, please, double check.\n. same as above!\n. I'm not so sure we need to be defensive here.\n. are these really relative to __dirname?\n. instead of console.error we should throw\n. this class is 99% similar to the one used in composite. It seems like anyone who wants to invoke an action from code will be using this class as a buffer to control the output, and we should generalize it, so we have a single implementation for all components.\n. cosmetic changes and v8 optimizations.\n. adding hooks for the async process.\n. does _expandSpec accept a full instance? remember that this can have way more info than the fakeInstance has in the past.\n. please, do NOT use ./ notation, that does NOT work in windows, instead, do node run.js\n. same as above!\n. @drewfish I can change the code to use ModelVanilla, but remember we didn't create this code, we copied as a temporary solution, and any update in the original code should be pulled in here as well, so the less changes, the better.\n. I want to have more scripts, I think it is really clear how to run then, and that might help a lot in terms of productivity. Now, assuming that npm test is what our CI will probably use, and what we, as developers, will run when we really want to validate the whole library, I will argue that all the other test command should NOT have --coverage to speed things up, and have some special command to generate coverage, something like:\nnpm run coverage\nI also will like to rename this to just unit, and the same for func should be added, so we can do:\nnpm run unit\nnpm run func\nI will also like to see:\nnpm run lint\nnpm run docs\n:)\n. docs please\n. Is this cd \"path\" affecting the users path? if yes, then we should find another solution or restoring the path afterwork.\n. all these are needed in the new dispatcher middleware.\n. This can now be moved into lib/util.js\n. why to keep this as async data? if needed, then I add a note explaining.\n. not need to have the rpc since the controller is server affinity.\n. right before the invoke, you might want to set a new value thru self.mojitProxy.data.set('foo', 'something');, this value should be available in the server side in the controller, and could be modified, or aggregated and send back to the client to validate the whole flow.\n. In here, you should be able to validate self.mojitProxy.data.get('foo') and self.mojitProxy.data.get('mydata'), to verify that they are what you expect.\n. probably you can check ac.data.get('foo') and aggregate it to mydata value so you can test the flow of the data where foo is only set from client side, and travels to server and back to client (probably modified or aggregated).\n. in here, you might also listen for changes in data, something like self.mojitProxy.data.on('change', function () {  /* probably counting how many times it changes */ });\n. should be warn instead of info, and make sure you also add NAME as the 3rd argument for better filtering.\n. not needed anymore\n. is this needed?\n. This is not a middleware, it should not have a middleware signature. lets discuss the details offline.\n. why do we need the routes attached to page anymore?\n. can we use debug() instead?\n. attachRoutes should NOT be a middleware because it will force to register the routes once the first request comes in.\n. why are all routes regex?\n. why are all debug statements commented out?\n. This should be exposed, so people can do this in their app.js:\napp.get('/foo', mojito.dispatch('foo.index'));\nwhich is going to be equivalent to do this in routes.json:\n{\n    \"foo.index\": {\n         \"path\": \"/foo\",\n         \"verb\": [\"get\"],\n         \"call\": \"foo.index\"\n    }\n}\nwhich also means, you will be able to do this in your templates: {{#linkTo \"foo.index\"}}, although this is not part of this PR, but the next one.\n. why version 10?\n. I will like to remove RPC from that name, maybe lazyLoadClientMojit\n. event-mouseenter is not needed\n. remove!\n. remove!\n. route.call\n. nice! remember to add a BIG warn for deprecation.\n. var util = require('./path/to/lib/util');\nthat file should hold any utility method needed for the server side (hence anything needed in a node module), feel free to add copy method in there.\n. remove!\n. I thought those params defined per route in routes.json were intended to be just attached as req.params under the hood. In which case all these cloning and stuff are not very useful.\n. if we don't need it, remove it :)\n. not need to use || null here.\n. how is this used across mojito? who uses those query params added manually from routes.json?\n. this is a little confusing code. Overloading matchCall[0] is confusing. Either you add a good note, or change the code with more variables to avoid the overloading.\n. || null is really not needed.\n. I don't think the name will be relevant! the call and path are!\n. I don't think this belongs to here! Tunnel should be either: \na) set in app.js as a middleware with path: e.g.: app.post('/tunnel', tunnelMiddleware); or\nb) mojito.js can do it automatically which is not good because they devs will not have a way to change it or modify it. \nbut it is definitely not related to router.js\n. same as above!\n. this should only happens if annotations exists, extractAnnotations(route), other routes are not relevant for mojito.\n. in the future we might want to support a more generic annotation mechanism, walking all callbacks and producing an array of annotations, for now looking at the last one is just fine.\n. what is temporary here?\n. sanitized how? whatever we need to do, we should do it upfront as a one time operation, so when it comes to serialize and send, we have everything ready.\n. this condition could be always true if there are no routes. I propose to have mojito.routes as undefined, then once we build the cache, we set it to an object, and that's the condition.\n. remove \" for first time\".\n. just remove it\n. there is a bug here, probably an existing bug. If I have two keys: foo and foobar, and you try to replace :foo first, then it will invalidate :foobar as well. The solution is to sort the lookup array so you try to replace the longest keys first.\n. are the existing querystrings irrelevant? I don't see the second part of parts being used.\n. This route is, I presume, the new route object from cache, which is probably different from what they get today. Can we transform it?\n. Can you sync up with Julien to see if what are they doing with the routes? If they are not using anything fancy, we can remove this.\n. we are removing routes.json contextualization, better to use a different file for the test.\n. context might be set, instead, you can do this:\nif (!options.context.runtime) {\n    options.context.runtime = 'server';\n}\nthat will work in most cases, even when you want to force runtime to be another thing from the cli, etc.\n. how does this solves the issue? can you elaborate more?\n. Ok\n. remove any old code!\n. can we cache this? one per request? probably attaching it to _page object the first time it is used?\n. this is really private I think\n. this will not work in old browsers, this is a common affinity file. Use Y.Object.each instead.\n. Is the name used to hash this into a collection? at this method, name is just another member, I don't see why it has to be unique.\n. I see convertAppRoutes is hashing it using name. I don't think this is good because internally you will never reference that by a similar name. It should be an array, just like it is in express.\n. why not using regex as regex? who is using this structure aside from us?\n. this cache is not the template cache, but the engine cache. I don't think you need this.\n. please, adjust the 4-space-tabs to match mojito code.\n. I think this only applies to yui modules, not all js files.\n. useSync does not apply to get if I remember correctly.\n. here is where you need the useSync, so the use statement can be sync.\n. if you have the the proper flag, templates will not be cached, why do you need to watch them?\nviewEngine:\n          cacheTemplates: true\n. store should NOT know about the runtime Y for mojito, but since you need it to refresh the pieces, I think it should be a global variable instead, something like global.mojitoY, then accessing that from within parseResourceVersion.\n. No so fast @jarnoux, lets make sure we do the right thing here. I don't even know if the addon should be part of mojito, it could be package called mojito-hotswap that adds this capabilities. I will discuss the details with the other folks on Wed. In the meantime, I will do a second pass on the review.\n. good, then don't disable it until after host.runtimeYUI.use(res.yui.name), which should be sync as well.\n. move this line to the end of the block.\n. remove the callback, it is a sync method anyways.\n. I'm not convinced, the cache for the templates is a lazy cache, which means we always add the item to the cache, but we don't get items from cache unless cacheTemplates is true. In other words, having a _cache object attached to the view engine is not an issue, because when the accessor wants to pick up a template and render it in the engine, it will not use that cache if cacheTemplates if not true.\n. Yes, @isao is right, you should write this routine by iterating over the methods defined by Object.keys(req.app.routes), not need to use methods.\n. <em>ac.pageData.*</em>?\n. Not need to store this in memory anymore, a local variable should be just fine. Remember that this is a copy of the static config, and keeping it in memory increases the number of elements to be walked by GC.\n. yes, I will add a card for that for @ekashida to work on.\n. hopefully not! lets double check that to see how expensive is this.\n. I wonder, if it is not a dir, and it is not a symlink, what else could it be? I think this is equivalent to say, if it is a file, exit :)\n. We don't need to worry about path.existsSync() anymore because we required nodejs 0.8 now.\n. I don't think we should worry about this. If they try to extend it manually, let the lib to handle that :)\n. Using intl as the indicator of lang association is not really an option because you might be getting intl from one of the dependencies. In this case, the module is getting lang stuff thru mojito-intl-addon but it does not use Y.Lang.* directly, so there is not need to have intl in the requirement list.\nIn the past, what I did was to rely on the name of the modules to know if there is a need to have a lang token associated with a module. We can discuss the details offline.\n. format issues here.\n. If this binder is not doing much, why do we need it in the first place?\n. event-mouseenter is not needed here.\n. - break line\n- intl is not needed in the requires because the module is not calling Y.Intl or Y.Lang in the code.\n. remove commented code.\n. same as above, why do we need this?\n. format issue.\n. intl not needed here.\n. this is going to be problematic, let's talk offline about the intl detection.\n. this is still problematic because the order of the modules is not strict, so you might process lang/foo before foo.\n. btw, myArray.indexOf('foo') > -1 will be good enough to locate a string.\n. Same here, indexOf() will be just enough.\n. got it! makes sense. Let's just use indexOf() which is faster than the array since it is native.\n. these 2 if statements are confusing. The thing here is just to check if the mod is not in intlmodule, add it. There is not need to use a variable add and two if anymore. Let's clear that up and get ready to merge.\n. can you add some notes/comments to describe the flow of these whole block? complex blocks should be described so people can get the whole picture.\n. normally, modules and expanded_modules should be set already when reaching this point. Isn't this equivalent to say just:\nmodules[module.name].lang = ['languageholder'];\nand the same for extended_modules? I don't think we need all this duplication of code for something that already happens before.\n. we should make this \"debug\" as well\n. Can you mark this as experimental?\n. I was thinking on something less sweet! something like:\napp.mojito.get('foo', '/foo', middleware1, middleware2, dispatch('foo.index', { params }))\n. if this block is not going to use the sugar method, better to remove the sugar then until people start asking for it :)\n. or just remove it for now.\n. why do we need this? this is a one way operation to generate a token, but the token will never be use to generate the original entries used to generate the token. remove.\n. what is this?\n. please remove!\n. {}\n. is this api really changing or is this just a mismatch in the old doc?\n. do we really need this? I thought express-map will do all this heavy lifting.\n. require('express-map/lib/pathto')?\n. can u comment on this question?\n. ok, I never fully understood why the whole escaping of the serialized token. But now that we rely on express-state, I will argue that express-state is responsible for any escaping process needed to expose data into the client side as part of the html response. /cc @ericf \n. u keep using space in between empty {} lol.\n. nice, I bet this is really useful for testing at least!\n. if it is not a string, but an object, what do u do with it? \n. confusing, better to just call it encodeRouteName as a local variable, if that's the main objective here.\n. linting is needed here, space between func name and :\n. @drewfish @isao do you guys remember what was the problem with the whole encoding thing?\n. I literally made you to get in a trap! Now in line 93 you're augmenting the original params object per request, but params is actually an app level value, leaking data between requests :), solution will be described in lined 93. jejeje\n. route: libutil.extend({}, routeParams, req.params),\nwill work better :), avoiding the leak.\n. oh, right, I remember now. Well, at this point there is only few things that might be runtime data specific, so we can constrain that to those elements to avoid doing the full sanitizing process on all data we sent. Let's create a card for that @imalberto. Also, how expensive if this operation today?\n. break line please\n. break line please\n. break line please\n. Does this means that if we have two models: foo.js and foo.mobile.js, which the module names foo and foo-iphone, and in my controlled I ask for foo, the contextualized version will never be used. Is that a possibility? I wonder why the contextualized version of the model does not have the priority over the regular model name?\n. Update method docs to reflect the workflow and the priority in the lookup process.\n. Ok, let's change it them. The thing is, if you're using the yui module name (which is usually the same as the model name, especially if you rely on NAME argument), then you're not contextualizing this, and by making the change with this PR will NOT break that. It will still work. The only case where BC is not going to be contained, is if you have a different name for your model, in which case the contextualization will resolve it anyways, since it uses the internal registry for the mapping. What do you think?\n. Also, I don't like the yuiName name for that variable. It is not really the yui name but the real model name, the other modelName is the synthetic one.\n. \"info\", NAME);\n. do the error template requires results? or just the title?\n. I will argue that the right thing here is to do ac.error(); and let the parent to deal with the error, but I might not have the full info here.\n. we should NOT encourage people to do this kind of cache. If this cache is absolutely necesary, I will recommend do YUI.Env.*, which explicitly state that it is global.\n. Each result will be wrap by an UL? sounds weird.\n. same as above!\n. Isn't this suppose to come from the lang bundle?\n. proper log signature across all these files please.\n. same as above.\n. same as above\n. Ok, you're right. All the contextualized references are driven by the filename (e.g. what view to use, or what binder to use, etc). In that case, and based on our discussion about models the other day, I will say that ac.models.get() should only be driven by filenames, and not attempt to resolve a model by its internal name (yuiName). So we keep the resolution process consistent across all the ac.* members. This is also going to help in mojito-next, and yes, this might be a non-BC change.\n. I will argue that this is a back practice when it comes to mock members of an object. the problem here is that if there is an exception within the body of the function that is doing the mocking, the original method will not be restored, and successive tests might break as a consequence of it.\nnormally, what I recommend here is to use the setUp and tearDown to store and restore the methods that might get mock in the individual tests, guaranteeing that each test will always get the right original method.\n. yeah, this assignment sounds a little bit weird for me as well.\n. @zhouyaoji there are a couple of new pkgs here:\n- https://github.com/yahoo/mojito-cache/\n- https://github.com/yahoo/mojito-config-expansion/\n. yes, as @drewfish mentioned before, this is going to be problematic because you might call execute mutliple times even when the previous execute() is not done. So, what I will propose is to create the new this.queue object right after calling this.queue.done() in line 199. That means everytime you call execute() the current queue will get in motion, and will become inaccessible automatically, a new queue object will be create. there is not need to keep a hold on the old queue, what matters is the callback when it is done or when an error occur, and that we have it anyway.\n. I suspect that some of the children data will be mixed, can you make sure that in all tests you are getting what you're executing in the callback, without leaks between execute commands?\n. I don't think so, because Y.all returns a fixed array while getElementsByTagName() returns a dynamic collection that changes overtime with new link tags.\n. why is the port needed?\n. middleware are monadic functions that has nothing to do with the state of the app. I wonder why you decided to move this from mojito.middlware to app.mojito.middleware()?\n. same as above.\n. I don't like this.\n. I thought we were going to move this into the corresponding pkg that requires it.\n. same as above.\n. why is the context needed here? is this the mojito context?\n. I will vote for libmojito.middleware() as a middleware function. then within that function having an internal cache routine that triggers on the first request, to be able to pick app.mojito, and app.mojito.store to collect any app level settings that is needed by the middleware to function.\n. isn't this suppose to happen in the app.js?\n. why? normally, if you do the proper extend (following the principles described by @ericf) you should be able to get a handle on the original class by looking into the defined property.\n. so, it is not the context of mojito, just a context object. cool, lets rename it to params.\n. I like mojito store as a config. we are already doing something similar with express-yui, by using app.set('locator', locatorInstance);\n. this is not an expensive operation, specially because it happens once per request. why the if then?\n. probably we should call this dispatcherMiddleware instead of mid for better docs.\n. that's ok, it is not an expensive and reiterative operation.\n. this is not about the split, but the sub.\n. yes, sub is very performant (http://yuilibrary.com/yui/docs/api/files/yui_js_yui-lang.js.html#l251), it is not going to take more than the indexOf('{') operation that you have anyways. lets change it.\n. I think we should use an inline function instead of a require here.\n. breakline\n. :) break\n. one more\n. more\n. more\n. I know you like them!\n. is this the last one?\n. oh no!\n. lol\n. lol\n. ok ok, this is the last one! feel free to ignore my annoying comments.\n. this one is contradictory with the PR, if it starts with mojito-, why it is not a middleware factory/generator? it seems that there are more exceptions here: if it is a mojito internal middleware, then we don't use the generator, is that it?\n. I'm not saying it is incorrect, I'm just saying that this should be documented somehow.\n. lol\n. what about the closing quote? seems like an invalid one.\n. invalid quote\n. invalid quote\n. invalid quotes\n. this method should probably be defined where source.models is defined. here it will be set everytime a new mock is created, not a big deal though.\n. it is important to highlight that routes are not going to computed per request, they will be attach as express routes, and the user of the \"settings\" in this file are only used in conjuction with the context passed when extending express mojito.extend(app, {context: {foo: 'bar'}}).\n/cc @imalberto \n. @imalberto is this still supported?\n. what is this? can u elabore more?\n. why not using url addon anymore?\n. me as above.\n. ok, let's talk about this, because this features should be available, at least that's my understanding.\n. this is definitely an issue/bug, because it is suppose to use the express routes directly. /cc @imalberto \n. we should wait until we clarify this.\n. this is very misleading and very error prompt. Mojito that this known limitation that whenever you plan to use a lang bundle, you need to call Y.Intl.setLang(), but doing what you're doing in line 55 is going to be problematic.\nI have few recommendations for this:\n- you should rely on Y.Intl.lookupBestLang() (http://yuilibrary.com/yui/docs/api/classes/Intl.html#method_lookupBestLang), and Y.Intl.getAvailableLangs() to avoid calling setLang() with an invalid lang.\n- if the issue is to avoid having bundles that do not contain the right lang information, then you could do completion of the bundles and messages in bundles during build process to guarantee that all bundles and all language are available for use. this is the same we do in flickr and media, and it reduce the complexity of the app code and the framework code drastically in favor of a more normalized build process.\n. keep in mind that delete is problematic due to its nature. It will mess up with the V8 internal optimization, slowing down the access to any member of the object that suffers a delete. In most cases, setting the value to undefined or null is more than enough.\n. By doing this, you're effectively bypassing the internals of the YUI library to set up the proper active lang (including the event system associated with it).\n. this is what I was saying before, we were looking for the closest match, to make sure that we don't use an invalid one, but that doesn't guarantee that a particular module has that lang, that's the missing link here I think, and it should be easy to resolve without having to get into all this complexity.\n. avoid the use of delete in static objects.\n. we should avoid using camelcase on module names, I recall some issues with CDN in the past.\n. breakline\n. 3rd argument is important to filter out errors per component/library, either you use mojito or mojito-client.\n. yeah, that makes sense.\n. this line in confusing. is this a typecast to boolean with default to true?\n. ",
    "isao": "fixed\n. This pull request was accepted and applied. It's in 0.3.8 now. Thank you!\n. fixed by 17f264713aacd41b95b64be47236a55455d3fa62\n. yes this fix landed in 0.3.10, see b49e45c007d60997eb7ffe139d6eb952eee7feb4 and ff69faf27fbc5a44126d50f88d4af15d38997601\n. fixed with f384f71583be578bb7c46c9f31021dfbaf492c36 and pull and f384f71583be578bb7c46c9f31021dfbaf492c36\n. mojito test no longer operates on mojito iteself.. thanks for the cleanup, closing.\n. fixed a while ago\n. I think so..\n. yes still a bug I think. I don't see any related test.js code changes. closing here and tracking at yahoo/mojito-cli-test#3\n. fixed with commits b2c6599f5155394fb70ed0eb961f814b500ba163 and f3cbc317a2aa637ba923c62a9561c3b0bde6100f\nthanks for closing @rwaldura \n. yes still a bug I think. I don't see any related test.js code changes. closing here and tracking at yahoo/mojito-cli-test#2\n.  Y.mojito.lib.REST will probably be deprecated soon\n. this landed in April here 89fffae172007caa467a91d672f04c01073a5e35\n. somewhat, but I think the main point was it added unnecessary complexity. No need to new Foo() and call an instance method, when all that is ever needed is to just call the method...\n. I'd like to keep it open -- will tackle this once the cli gets moved to it's own package\n. @caridy yes I'll include this issue or completed feature in mojito-cli-jslint after I create org repo for it\n. yes, I'd generally like to act on individual files for jslint as well as the other commands where possible. I'm closing this but tracking for the general case here: yahoo/mojito-cli/issues/21 thanks!\n. an app with no application.json could still serve mojits via htpp://host/@MojitName/action\nIt's an unlikely usecase, but I'd say no change, or generate a warning.\n. hi Eric, this pull request was accepted and applied. It's in 0.3.8 now. Thank you!\nSorry for the awful glob of a commit it got lumped in with. We'll get this process smoothed out before the next release.\n. This request is very much appreciated, but unfortunately, this has aged out:\n\"This pull request cannot be automatically merged.\"\nClosing for now. Please reopen or make a new one referencing pull 124.\nSorry for the delay. If there were tests here as well, it would make it a bit easier to accept more quickly.\n. ok, your patches have been applied (couldn't auto merge), thanks Caridy\n. Ok, hopefully you're happy with the workaround. Don't want to have bash in the mojito command code path when the rest of it is js, so closing this for now\n. true...\n. This issue should be fixed in ours too... \nWe could have this and similar (like your DaliProxy PR) released as npm installable bundles. This would make features available for opt-in and make a ramp for real-world testing...\nOn Jul 16, 2012, at 8:12 PM, \"Michael Ridgway\" reply@reply.github.com wrote:\nIt looks like the issue has been fixed in Mu. Maybe it's worth doing another PR for the latest version?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/issues/132#issuecomment-7025669\n. yes the team is working on a fix to this ASAP...\nIt would be really helpful if you could post a mojito app test case too...\n. This patch looks good, thank you.\nOTOH you can include winston in your package.json as a dependency and  cd yourapp && npm install then:\nvar winston = require('winston');\n. hi goatslacker, this pull request was accepted and applied. It's in 0.3.8 now. Thank you!\nSorry for the awful glob of a commit it got lumped in with. We'll get this process smoothed out before the next release.\n. Diego, we're not going to land these patches, as mojito shaker is now supported (require'd from the node path)\n. done dep now 3.5.x https://github.com/yahoo/mojito/commit/6305a769a33138cc1002c38508b020e5db5b7717\n. you're right, I had a random node_modules folder w/ yui 3.4.1 in an intermediate parent dir that I never look in. :(\nfixing now\n. Hi Dav,\nThanks a bunch in advance. From the node repl, things are ok\n% cd openmojito/source\n  % node\n\nvar YUI = require('yui').YUI\nYUI.version\n  '3.5.1'\nvar Y = YUI().use('loader-base', 'yql');\nY.YQL\n  [Function]\n\nIn the mojito code I changed the requires, and Y.useSync() to Y.use()..\nOne thing, it looks like YUI.GlobalConfig is undefined in 3.5.x out of the box, where 3.4.x populated it. I tried setting it, and some other stuff, but can't get mojito to load yui modules...\nwarn: (yui): NOT loaded: datatype-date-format\n  warn: (yui): NOT loaded: datatype-date-parse\n  warn: (yui): NOT loaded: io-base\n  warn: (yui): NOT loaded: io-nodejs\n  ...\n  etc\nI know this is all vague, especially since a mojito implementation thing, but in case it's a simple matter thought I'd float this past you early... :/\nTIA\nIsao\n-----Original Message-----\nFrom: Dav Glass reply@reply.github.com<mailto:reply@reply.github.com>\nDate: Thu, 10 May 2012 14:24:13 -0700\nTo: Isao Yagi isao@yahoo-inc.com<mailto:isao@yahoo-inc.com>\nSubject: Re: [mojito] Upgrade to YUI 3.5.0  (#139)\nFeel free to ping me if you need any assistance with the upgrade.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/issues/139#issuecomment-5637069\n. thanks!\n. credit to dmorilha@ (thanks Daniel)\n. arg, this pull request got closed when I pushed to the main repo (which included my fork's changes).\nso the second commit should be displayed/listed elsewhere...\n. looks like this won't apply cleanly now, sorry. but really looking forward to it.\nside note: since views are .hb. it doesn't need to be 100% interoperable with the mojito mu implementation\n. Looking forward to it, thanks Caridy\n. ah looks like all changes on a branch get included on a pull request. closing this so I can submit separately.\n. Ren would like feedback on docs/contributing.md in particular\n. taking advantage of minor commit to test ci hooks\n. Please redo this pull-request off a branch containing only the files you want changed/added\n. Thanks Marco, I cleaned up the pull request a bit and resubmitted it for you. pull #207\nclosing this one. \n. Yup can't wait for pull #179 too. As-is the handlebars pull is opt-in, so this bug fix is nice until the internal mu renderer goes away.\n. This got pushed to the next sprint for me, but Dav did email me about it. \nThanks a bunch for the pull request,\nOn May 24, 2012, at 10:38 PM, \"Michael Ridgway\" reply@reply.github.com wrote:\nI'm not sure if this is still being worked on by someone else, but I'd like to open this up and see if we can get some traction with this. Maybe @davglass can chime in too.\nSo far all of the tests run, but they do not pass. Here are my test failures: https://gist.github.com/2785983\nThis pull request should be considered incomplete until we can get all tests to pass.\nYou can merge this Pull Request by running:\ngit pull https://github.com/mridgway/mojito yui\nOr you can view, comment on it, or merge it online at:\nhttps://github.com/yahoo/mojito/pull/163\n-- Commit Summary --\n- Attempted upgrade to YUI 3.5\n- Changed YUI version to 3.5.1\n-- File Changes --\nM source/lib/index.js (10)\nM source/lib/management/commands/compile.js (4)\nM source/lib/management/commands/test.js (18)\nM source/lib/store.server.js (10)\nM source/package.json (3)\n-- Patch Links --\nhttps://github.com/yahoo/mojito/pull/163.patch\n https://github.com/yahoo/mojito/pull/163.diff\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/pull/163\n. not sure, maybe store.server.js _sortYUIModules().. I'll dig in after my battle with jenkins.\n. This request is very much appreciated, but unfortunately, this has aged out:\n\"This pull request cannot be automatically merged.\"\nClosing for now. Please reopen or make a new one referencing pull 170.\n. By closing it, I didn't imply that something based on this won't ever be accepted. You clearly put a lot of good work into it, and it's something we need. It aged out through no fault of yours.\nAnyway, I'll reopen.\n. Right, I was thinking it's just a flag and work isn't lost. And any day we can eliminate 1.8k loc without breaking is a good day :)\nWhat is the situation with instrumentation?\n. that's cool. just wasn't sure if anything was being taken away (besides\nbloat) :)\nthanks Michael\n-----Original Message-----\nFrom: Michael Ridgway\nreply+i-4789727-903696e1ee2531cecf509e9a329571f6ad4ecc73-46951@reply.githu\nb.com\nTo: Isao Yagi isao@yahoo-inc.com\nSubject: Re: [mojito] Replace DaliProxy with simple IO (#170)\nFrom the sound of it, Mojito didn't provide this functionality before, so\nI don't think it should be a part of this PR. I think this is something we\ncan add as a feature later (and I'm highly interested in having it as\nwell).\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/pull/170#issuecomment-6194747\n. fixed with pull #195. I moved these to the wiki. You can edit or git/clone/edit/push from there right now.\nRationale: multiple versions can be considered public/published at the same time, absolute links to the github code browser didn't feel right, and relative links no longer work in the main page vs the branch pages.\n. closing in favor of yui3.5.x compatible version..\n. love it. thanks!\n(team is going to write some tests first though fyi)\n. Ok, I'm told we're going to write tests for this before landing it on the mainline.\n. Bill, Scott, and Lichun are reworking the tests. Need to make it easier for us to write framework (and app for that matter) unit tests. And making our functional tests public/open too. I'll ask them to keep you in the loop. \nI thought we'd land this as a kind of opt-in semi-supported preview, but it was decided to do more complete doc/test/etc roll out.\n(OTOH, you can also release this as a community node/npm module.)\n. this contains all the same commits as your pull request 180, except \"215acce Added unit tests for controller.\"\nis that on purpose? should I just pull this one?\n. :+1: look great. ran it through the secondary tests (pull-job 23) but it got kicked out for jslint errors.\n. You can write your custom view engine using Dust. In fact I think early versions of Mojito used Dust.\nBut it probably won't be added to the core, which will attempt to become leaner.\n. Hi Juzer. The docs describe using YQL (you can define your own tables, and CRUD operations are supported) as a web-service interface.\nThere's nothing about using redis/mysql/postgres/etc specific to mojito yet. To use these you can do it the simple node.js way, in your server-affinity controllers, models, add-ons, or middleware.\nIf that's unfamiliar, you might want to ask the kind folks at https://groups.google.com/forum/?fromgroups#!forum/nodejs or #node.js on freenode.\n. Thanks Julien.\nWe'll get some guidelines up on the github wiki very soon, but we land all\nnew code on develop, not the master branch FYI.\nI'll need to pull this to my develop, test and redo the pull request (or\nyou can if you have time).\nBest,\nIsao\n-----Original Message-----\nFrom: Julien Lecomte\nreply+i-4917852-2b1ee3f58f20405b6ab158e8a07b51588421d046-46951@reply.githu\nb.com\nTo: Isao Yagi isao@yahoo-inc.com\nSubject: [mojito] Allow user-provided middlewares with a name starting\nwith 'mojito-' to gain access to the resource store, YUI instance, logger,\ncontext, etc. (#187)\nYou can merge this Pull Request by running:\ngit pull https://github.com/jlecomte/mojito master\nOr you can view, comment on it, or merge it online at:\nhttps://github.com/yahoo/mojito/pull/187\n-- Commit Summary --\n- Allow user-provided middlewares with a name starting with 'mojito-' to\n  gain access to the resource store, YUI instance, logger, context, etc.\n-- File Changes --\nM source/lib/index.js (14)\n-- Patch Links --\nhttps://github.com/yahoo/mojito/pull/187.patch\n  https://github.com/yahoo/mojito/pull/187.diff\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/pull/187\n. Yup no problem, thx\nOn Jun 6, 2012, at 5:01 PM, \"Julien Lecomte\" reply@reply.github.com wrote:\nHey Isao, I'd appreciate if you could do it. I had originally checked out the develop branch but it wasn't stable at that time so I could not test my change. Let me know if I can help in any other way. Thanks!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/pull/187#issuecomment-6165962\n. Hi Julien,\nI applied this patch off the develop branch in my fork, but our regressions fail. I also pushed this on a branch named 0.3.26-pull187, which is applied to the last stable release. But.. our automated tests are now only working for code committed since then.\nIs this tested and working in your dev/test env?\nIsao\n. PIBCAK, my bad :)\nit's back in the testing queue.\n-----Original Message-----\nFrom: Julien Lecomte\nreply+i-4917852-2b1ee3f58f20405b6ab158e8a07b51588421d046-46951@reply.githu\nb.com\nTo: Isao Yagi isao@yahoo-inc.com\nSubject: Re: [mojito] Allow user-provided middlewares with a name starting\nwith 'mojito-' to gain access to the resource store, YUI instance, logger,\ncontext, etc. (#187)\nHi Isao,\nYup, I am using it on my dev box, no problem at all! Something must have\ngone wrong during the merge.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/pull/187#issuecomment-6287469\n. passed regressions. hopefully before too long these wil be runnable by everyone.. :)\n. Hi Julien,\nForgot to mention, it passed and I landed it on github in three places...\n1. develop - to be included in the next release\n2. master - by mistake\n3. branch 0.3.26-pull187 - so you could use it in case there were\n   regressions\nNote 2 & 3 are essentially the same thing right now. But Fri we'll roll\n0.3.27 onto master, which will swap YUI 3.4.x with 3.5.1.\nThis may create break your code. Fixups were required to our test cases as\npart of the upgrade, I believe.\nWhich brings me to #3. For your release, you could of course just use the\npatched version you're already using, or specify this in your app\npackage.json for some interim period:\n\"dependencies\": {\n   \"mojito\": \"git://github.com/yahoo/mojito.git#0.3.26-pull187\"\n}\nIsao\nhttps://github.com/yahoo/mojito/tree/0.3.26-pull187\n-----Original Message-----\nFrom: Isao Yagi isao@yahoo-inc.com\nTo: Julien Lecomte \nreply+i-4917852-2b1ee3f58f20405b6ab158e8a07b51588421d046-46951@reply.githu\nb.com\nSubject: Re: [mojito] Allow user-provided middlewares with a name starting\nwith 'mojito-' to gain access to the resource store, YUI instance, logger,\ncontext, etc. (#187)\nPIBCAK, my bad :)\nit's back in the testing queue.\n-----Original Message-----\nFrom: Julien Lecomte\nreply+i-4917852-2b1ee3f58f20405b6ab158e8a07b51588421d046-46951@reply.githu\nb.com\nTo: Isao Yagi isao@yahoo-inc.com\nSubject: Re: [mojito] Allow user-provided middlewares with a name starting\nwith 'mojito-' to gain access to the resource store, YUI instance, logger,\ncontext, etc. (#187)\nHi Isao,\nYup, I am using it on my dev box, no problem at all! Something must have\ngone wrong during the merge.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/pull/187#issuecomment-6287469\n. Awesome. Pull request accepted on 20ba639c, closing.\n. Thank you Iamalberto. I applied this to our develop branch 20ba639c\n. notes:\n- passes regressions mojito-github-commit-pull job 14 (internal)\n- David provided test cases separately\n. applied. thanks. (cherry-picked first and last to 4b05b29 d4b9c54 on develop.)\n. looks good, passes regressions, being applied in real apps, soo..\n. merged\n. looks good. awaiting an update to some internal tests (that scrape page an look for unencoded values)\n. fyi Scott fixed in 51c9cc0 pull #246\n. passes secondary tests. We should do: \"yuitest\": \"~0.7.4\", \"yui\": \"~3.5.1\", to pick up future patch level upgrades too.\n. sure, please do. thank you\n. fyi, just push the edit to your okuryu/ fork's update-package-json branch and it will appear in this pull request\n. Big thanks to Gonzalo Cordero for finding this memory leak, AND identifying the offending code. The leak affects dynamic mojits, and has existed for quite some time. Pull #225 was submitted for mojito's mainline, develop.\nNote I made two branches:\n- mojit-leak off HEAD of develop which has currently has a broken mojito test app and uses YUI 3.5.1\n- mojit-leak-036 back port on top of the last mojito 0.3.26 release\n. this change will, where relevant, output log statements during mojito start like:\n[WARN] MojitoServer: your mojit \"foo\" has a server affinity and these client-related deps: node-base, node-core, dom-core, dom-base, io-upload-iframe\n[WARN] MojitoServer: Mojito may be unable to start, unless you have provided server-side DOM/host-object suppport\n. Lints fine, put a space in my comment, thanks. This is a stop-gap for people experiencing start failure after upgrading to .3.27. A better fix is a try/catch around the dep instantiation and actual error handling. Is this a no-go as-is?\n. it's pull #233 not 228 now\nhowever, for some (probably unrelated) reason, it fails mojito-github-pull (job 22)\n. :+1: \"sys\" was renamed util in node.js 0.3.0 https://raw.github.com/joyent/node/v0.3.0/ChangeLog so it should not present any problems for ynodejs04\n. for some (probably unrelated) reason this fails mojito-github-pull (job 22)\n. secondary failed (pull job 30) because wrench isn't whitelisted internally\neven so :+1: :+1:\n. nice. mridgeway's processing PRs this sprint, assigning..\nFabian, can you give him a heads up on any license/manifest/readme changes we need as well?\n. we need to take the compat checking route until 0.4 is eol here (hopefully soon). and the glob.js change will break... thanks though migrationBot! :)\n. moved to pull #381\n. :+1:\n. you should be able to do unit testing however you like. To swap it out, you can put a module mojito-cli-cmd-test in your require path and it will be run instead of mojito test. also, fyi we will be improving our test system, but not to the exclusion of other test runners/frameworks.\nif you come up with something, please share. :)\n. Hi focuzz, you can do it like this:\n% node --debug `which mojito` start\nusing whatever options for node or mojito accordingly. You can specify the path to mojito as well. For example if locally installed (i.e. npm i mojito) like:\n% node --debug node_modules/.bin/mojito start\nI put \"node_modules/.bin\" in my $PATH, so the first form works in both cases.\nmojito create app already creates an index.js and server.js. I agree these files should conform better to the use case you describe.\nHTH,\nIsao\n. Right, I changed label to \"enhancement\" from \"doc\". As-is maybe it's a FAQ entry..\n. pull #422 should land soon, and make mojito start more node-ish and node-hosting friendly\n. seems to me this patch does the right thing regardless of Y.Model :+1:\n. did this pass secondary?\n. secondary for pull job 25 has one failure\nPreInitTest(com.yahoo.test.mojito.framework.usecase.BugVerificationTest): expected:<true> but was:<false>\n. how about the wiki for this?\n. yes that landed in 0.3.30\n. Thanks Fabian. I'd love to accept this if only for the unit tests, and it passes secondary (pull job 29) :clap:\nSince ac.error is a standard Error object is there a reason you use \"reasonPhrase\" instead of \"message\"? Just wondering.\n. sounds good to me, thanks again Fabian.\n:+1:\n. oops, weird. side note github improved the pull request handling to land pr's on any fork/branch.. cool.\nanyway resynced. been trying a bunch of things, but the simplest case is the dataprovider \"assets.common\"..\n. (pr was re-submitted on arrow branch)\n. Note, this PR as it's non-functional right now.. Background: it's a helper script for jenkins only. \nFabian, we're not sure about making arrow/selenium/phantomjs a mojito devDependency or not, but I like your implication of adding it as an optional module mojito-cli-cmd-arrow style. Comments/input welcome\n. inspired by mojit0's yuitest/javascript deletion... next up yuidocjs hopefully \n. actually, it'd be nice to npm module-ize much of the internals... nice comment by Isaac Schlueter in his npm-www Design Philosophy\nNo lib folder\nIf you would put it in lib/, then it belongs in a separate module.\n. not a standard afaik, but there's @substack's browserify which looks really neat, and some related projects. prob more. and reportedly some folks actually use npm for hosting browser-only code/assets. \nbut we have YUI, Loader, and Gallery, so I don't think we can cross the streams efficiently, so to speak. browserify is for node.js code in the browser, and yui/mojito is kind of.. the other way around...\n. -29,764 loc, awesome!\nmojito test {,-c,app,mojit} all worked for me..\n. :+1: zhouyaoji?\n. :+1: assuming secondary passes\n. graceful-fs is another module by @isaacs. it's fs with some extras see https://github.com/isaacs/node-graceful-fs\nwhat's happening? is this a whitelisting issue with our repo and CI, or maybe related to something @drewfish was seeing with shaker..?\n. agreed, we should clean these up.\n. oops accidentally put plus one a sec ago.. but folks are still verifying secondary failures\n. this is off git checkout -b arrowd17c56aa up/arrow and cherry-picking 17c56aa... I'm surprised. But I think we can just squash this entire branch onto develop.\n. @mridgway ah. you're right. I think I did this on my phone. closing!\n. :+1:\n. Hi Vinit, just to confirm, the same code and command works for 0.3.x?\n. good idea-- we should modify the archtype logic to use the major-minor-x version number in use.\n. heh, Fabian mentioned that earlier, and I restated it not fully noticing..\nCan't we just load the mojito version from package.json and pass the major/minor version to template used by commands/create.js ?\n. ahh this never landed? bummer. @add0n is refactoring HTMLFrameMojit, maybe he can benefit from or apply this. Otherwise I can try to clean this up if you're too busy.\n. @drewfish @dferreiroval what should we do here? it's a one-liner\nmy opinion- shared mojits as they exist now should be deprecated, but I might be convinced until more sensible scoping changes that are planned land\n. Actually I think it's a good/thoughtful patch. I should have not opined, especially if it solved a real problem for you. But if not let's close.. Thanks @dferreiroval\n. +1\n. @mridgway npm i mojito won't install mojito's devDependencies - that will require cd path/to/mojito && npm i at least for recent npms\n. +1\n. shipit\n. shipit :)\n. +1\n. @rwaldura yes, that pr couldn't merge automatically, and assumed var path etc where mojito code used var pathlib, var libfs etc... Also didn't incl 0.6 support\n. updated to be merge-able, omitting the dep version edits\n. :shipit:\n. +1\n. +1\n. actually I need to comment out more. omm the unit tests failed with the mojito-test.js on develop, and run without error when I comment out the modules with associated tests.\n. works now without the commenting commit; backed it out\n. @drewfish I backed out //A.skip() thanks\n. the intermittent travis failure appears related to yuitest and the missing fixtures\n. the middleware tests can't run in the browser\n. yes, \"readme\" is the contents of README.md at dirname package.json so is \"fixed\" on head now\nusers, tarball, shasum etc come from the npm registry\ndist-tag yui341 points to the stable version using YUI 3.4.1 (jsdom)..\nRen, can you suggest specific changes for the other metadata?\n. users I think means \"users who have starred this module\"..\nnpm star mojito\n..since I am listed and have done so...\n. and fyi \"maintainers\" is a list of npm users who have done npm pub\n. @mojit0 any reason not to land this?\n@zhouyaoji something to add to docs when it lands..\n. perhaps the last commit corresponded to github/travis downtime. 0.4.5 was just cut it would be a good time to merge this. otoh you can merge or rebase latest develop, see if travis tests again.\n. +1 (I was actually doing this one as well..)\n. +1\nwe should also turn off colors if !process.stdout.isTTY\n. :shipit:\n. ## steps to reproduce\nwith HEAD of develop d3df9426a13823d766dee519df02bf6e1f4f1c98\n```\n% npm rm -g mojito\n% cd some/mojito app\n% npm i path/to/mojito#d3df9426a13823d766dee519df02bf6e1f4f1c98\n% ./node_modules/mojito/bin/mojito test app -c .\nInstrumenting \"/Users/isao/Desktop/newsboxes\" for test coverage\n    (this will take a while).\nfs.js:420\n  return binding.lstat(pathModule._makeLong(path));\n                 ^\nError: ENOENT, no such file or directory '/Users/isao/Desktop/newsboxes/node_modules/mojito/lib/tests'\n    at Object.lstatSync (fs.js:420:18)\n    at Object.realpathSync (fs.js:878:23)\n    at instrumentDirectory (/Users/isao/Desktop/newsboxes/node_modules/mojito/lib/app/commands/test.js:498:24)\n    at /Users/isao/Desktop/newsboxes/node_modules/mojito/lib/app/commands/test.js:803:13\n    at Object.run (/Users/isao/Desktop/newsboxes/node_modules/mojito/lib/app/commands/test.js:651:9)\n    at main (/Users/isao/Desktop/newsboxes/node_modules/mojito/lib/management/cli.js:125:13)\n    at Object. (/Users/isao/Desktop/newsboxes/node_modules/mojito/lib/management/cli.js:137:1)\n    at Module._compile (module.js:446:26)\n    at Object..js (module.js:464:10)\n    at Module.load (module.js:353:31)\n```\n. top level (arrow) tests are excluded\nbut we need fw tests to support mojito test command per the docs\n. BTW, we should get rid of lib/tests/harness/lib/yuitest/ in favor of npm packages with https://npmjs.org/package/yui-coverage\n. Agreed, but git apply/am didn't work after the source dir change, even though patch -p2 did..\n. I had closed this earlier because the yuitest-coverage npm package doesn't contain the yuitest-coverage-report.jar\n. that's an odd version, but this is fixed on develop and will be included in next release 0.4.9\n. done, thank you @rwaldura \n. +1 do it\n. @mridgway pull #468 should fix the createElement error-- caused by mixing nodejs code with browserland\n. shipit\nthanks @mridgway \n. lgtm\n. travis failure from unrelated (intermittent mu test failure)\n:shipit:\n. +1\n. any reason not to merge #367?  is the failing test related to view renderer code changes?\n. fixed with c2a0ad9d439c8b536247ab51bf3b6bb481ae3a0a and 1be70b03a1bf80f0b4c325624a8a5e43a2ee46d8\nthanks @mridgway \n. +1 though not sure why a store unit test is failing on Travis (node .8 only)\n. yes, I know. should we not plug this client-side memory leak in the meantime?\n. issue closed a while back with yahoo/mojito/pull/498\n. Yes, those conditions are met by this pr. See https://gist.github.com/3717231\n. good catch\n+1 \n. test and lint errors coming from your perf branch. these need to be applied to/from yahoo/develop \n. ok, but it has nothing to do w/ perf (they're basically non-functional changes), and that branch won't hit develop for a while..\n. in case you're waiting for it.. :shipit:\n. nice\n.  examples/developer-guide/adding_view_engines tests are just broken and should be fixed.\nspot checking others, many example tests are also broken because they are just the boilerplate tests from mojito create mojit that do not match the actual code.\ni.e. examples/developer-guide/simple_view/mojits/simple/tests/controller.server-tests.js has the boilerplate tests\nA.areSame('Mojito is working.', results);\n...but the controller has a different example. These tests should be deleted.\nI thought we had a CI that monitored these?\n. all tests in develop:examples/ run without error.\nas noted in pull #525 tests for these example apps fail (not crash)\n- examples/scroll_views\n- sandbox/binderrender\ncrashes fixed, test failures to be tracked at issue #731\n. works now.\n``\n% mojito create app issue526\npath.existsSync is now calledfs.existsSync`.\ncreating app type named 'issue526'\n(using \"default\" archetype)\n\u2714 app: issue526 created!\n\u2714 mojito done.\n% cd issue526/\n%  mojito create mojit test_mojit\npath.existsSync is now called fs.existsSync.\ncreating mojit type named 'test_mojit'\n(using \"default\" archetype)\n\u2714 mojit: test_mojit created!\n\u2714 mojito done.\n% mojito test mojit mojits/test_mojit\npath.existsSync is now called fs.existsSync.\nwarn: (yui): NOT loaded: mojito-perf\nwarn: (yui): NOT loaded: mojito-perf\nTest Results:\nartifacts/test/result.xml\n\u2714  passed test_mojit-tests :: test_mojit user tests :: test mojit\n\u2714  passed test_mojitModelFoo-tests :: test_mojitModelFoo user tests :: test mojit model\nTotal tests: 2  \u2714 Passed: 2   \u2691 Deferred: 0 \u2716 Failed: 0   100% pass rate\n% mojito version\npath.existsSync is now called fs.existsSync.\nVersion of mojito is 0.4.8\n\u2714 mojito done.\n```\n. moved yahoo/mojito-cli/issues/21\n. this would be great on develop as well\n. +1\n. fixed with pull 666 I think (fix has landed will be in 0.4.9) new hybridapp uses local yui-- html5app assumes network and CDN YUI unless configured differently.\n. thanks for the heads up. I believe @lzhan fixed this just now with yahoo/mojito/pull/550\n. @yukinying I agree, that example code is not production quality code.\n. see also yahoo/mojito/pull/554\n. +1\n. yep, :shipit: :)\n. yes, I am running mojito on node 0.8.11 and have been on 0.8.x since pull #498 landed early last month, and the current mojito package.json says:\n\"engines\": {\n    \"node\": \">0.4\",\n    \"npm\": \">1.0\"\n},\nmojito isn't really using express (at least the ones that would break on node 0.8). I think we can remove express dependency and upgrade connect without affecting mojito.\n. so just changing the declared dependency versions of connect & express to \"*\" seems to work fine, at least with examples/newsboxes (with some deprecation warnings).\n```\n% git clone myfork node8fork\n% cd node8fork\nedit package.json\n% egrep 'connect|express' /package.json\n        \"connect\": \"\",\n        \"express\": \"\",\n% cd examples/newsboxes/\n% npm link ../../\n% npm ls | egrep 'connect|express'\n\u251c\u2500\u252c connect@2.5.0\n\u251c\u2500\u252c express@3.0.0rc4\n\u2502 \u251c\u2500\u252c connect@2.4.4\n\u2502 \u251c\u2500\u252c express@2.5.2\n\u2502 \u2502 \u251c\u2500\u252c connect@1.8.7\n\u2502 \u251c\u2500\u252c express@2.5.11\n\u2502 \u2502 \u251c\u2500\u252c connect@1.9.2\n% which mojito\nnode_modules/.bin/mojito\n% mojito start\npath.existsSync is now called fs.existsSync.\nWarning: express.createServer() is deprecated, express\napplications no longer inherit from http.Server,\nplease use:\nvar express = require(\"express\");\n  var app = express();\n...\n\u2714  Mojito started 'mojito_newsboxes' on http://localhost:8000/\n``\n. arrow 0.64 fixes the sub-dependency issue, andnpm i mojito@0.4.8` on node 0.8 doesn't display any warnings.\nshould be ok now. thanks @dmitris \n. This change for mojito create app hybrid creates an app that contains a mojit named \"top_frame\". This is different from mojito create app [simple,default,full] which only create the app, and the mojit is created in a second step. However, this was the requirement I was given.\n. n.b. if archetypes include binder tests, mojito test app . fails with dom on nodejs error; fixed for pre-existing archetypes in pull #607\n. error on my part? problem may be with archtypes I'm working with. Retesting on head of develop seems ok. Closing\n. sorry for the flip-flop, the problem does indeed exist.\n. ahh. not my day. error caused by mis-match of mojit name and mojit's package.json name.\nsorry for the noise, closing for real.\n. specs changed, will resubmit\n. +1 (the failed test on 0.6 only is the example app yql call again)\n. specs changed, will resubmit\n. :shipit: \n. @drewfish We discussed this when I tried implementing the hybrid archetype as a package-- RS doesn't support it, and the existing create.js doesn't use mojito or the resource store at all yet.\nThis feature is pretty minor in terms of code changes, and may be useful for the IDE/CRT integration.\nI agree we should support of npm packaging of archetypes in the future, as planned, so that archetypes can be sanely shared, versioned, etc. If that future/planned feature blocks this entire PR, let me know and I'll make a new one without the mojito create custom feature.\n. ah, need to fix this fix: https://github.com/isao/mojito/blob/develop/lib/mojito.js#L455\nconnect.close() method doesn't exist (anymore?). seems like it's only called via mojito build & compile cmds.\n. thx @drewfish.\nside note, according to this poll 14 groups use custom middleware (which will probably need some updates) and only one cites express 2.x as a dep.\n. thinking we wait till node 0.4 support is deprecated and just go to connect 2.x...\n. revist later\n. thanks @drewfish for the fast diagnosis and remedy.\nsmoke test:\nbuild html5app before this PR\n% tree ../aaa-build-hybrid/ | grep server\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 carrier.server.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 cookie.server.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 deploy.server.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 device.server.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 http.server.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 hb.server.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 mu.server.js\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 perf.server.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 controller.server.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 foo.server.js\n%\nafter:\n% tree ../aaa-build-hybrid/ | grep server\n%\n. @imalberto can we remove ejs and the associated test that requires it? ejs is not whitelisted for internal use per @caridy \n. thx\nn.b.  travis error unrelated to code change\n. That entire readme is woefully out of date\nwe should replace it with something simple like: \"to run mojito's unit tests: cd path/to/mojito && npm test\".. etc. \n. ..now that @lzhan hooked up the npm scripts (mojito@>=0.6.1). and/or link to @zhouyaoji arrow docs\n. fixed in pull #666. thanks @zhouyaoji \n. +1\n. It'd be nice to define a static route directly in routes.json without user code. Perhaps a convention for the routes.json \"action\" field to indicate a filesystem directory, plus a new field for http response headers (another long standing feature request).\n. on node 0.8.x\n```\nbefore this commit\n% mojito version | tail -3\npath.existsSync is now called fs.existsSync.\n  '11': 'n',\n  '12': 'e',\n  '13': '.' }\nafter\n% mojito version | tail -3\npath.existsSync is now called fs.existsSync.\nVersion of mojito is 0.5.0pr2\n\u2714 mojito done.\n```\n. btw Search needs this for 0.5.0, per @rwaldura. It's already landed on develop.\n. +1\n. travis failure by way of yahoo-arrow's npm deps, not code\n. +1\n. I fixed the typo in my commit 2528ac3d7381916578ce985f228a1feb91b92424 but for some reason it still awaits code review on pull #700\nI'll also note the the command is only prints the name, description, and version from a package.json file in the current directory. Were you in an app dir?\n. fixed typo. error message otherwise as before, but could be improved (is working, just unclear to user that the command works only in an npm dir)\n. +1 (again) now that the yaml lib is whitelisted\n. fixed by 0bdde0f35eb14973ff02c006eaa49b34bde9a8b4\n. +1\n. looks like those examples were deleted. closing, thanks @caridy \n. @caridy @drewfish @imalberto does this look like it reverses zhouyaoji's merges and revert develop-perf?\n. +1\n. +1\n. was your branch based on develop or develop-perf? \n+1 for now\n. +1\n. +1\n. +1\n. compile cmd is deprecated\n. +1\n. yes, test.js implements different console text coloring functions  that are not tty aware.\nI have a branch or stash somewhere I think that started converting the code to use utils.js style tty aware colors...\n. pull #872 prevents color codes being output in test results, when piped to a file (or other non-tty usage).\nHowever, output from other mojito components still send colorized output (lib/app/autoload/perf.server.js, and some Y.log calls).\nClosing this, and will track the various other offenders separately.\n. @caridy test & cli logging are tty aware. escape codes are coming from code-under-test and elsewhere, right?\n. as mentioned there are some color codes output when running mojito test but they do not come from the cli. The actual test output is tty aware. i.e. the following have no colors when piped to a file or cat, etc:\n```\n...\n\u2714  passed ReadModelRss-tests :: rss model tests :: processError exists\n\u2714  passed ReadModelRss-tests :: rss model tests :: processError not exists is falsey\n\u2714  passed ReadModelRss-tests :: rss model tests :: processResponse strips tags\n\u2714  passed ReadModelRss-tests :: rss model tests :: strip tags\n\u2714  passed ReadController-tests :: ReadController tests :: sizing test 1\nTotal tests: 30 \u2714 Passed: 30  \u2691 Deferred: 0 \u2716 Failed: 0   100% pass rate\n``\n. Travis: \"Executing your script (./travis/script.sh) took longer than 30 minutes and was terminated.\"\n. +1\n. travis should be fine. func tests pass forarrow tests/func/common/html5apptest_descriptor.json`\n. ok thanks. right the failures are not build cmd related but (desc pasted below)\nList of Failed Test Descriptors\nFailed Descriptor Path : /home/travis/builds/yahoo/mojito/tests/func/examples/developerguide/developerguide_descriptor.json\nTotal Number of Failed Tests : 1\nFailed Descriptor Path : /home/travis/builds/yahoo/mojito/tests/func/usecases/usecasestest_descriptor.json\nTotal Number of Failed Tests : 14\n. +1\n. it was a trade-off to allow the raw json.hb file to be linted and syntax highlighted\n. note, this is not intended for pr6\n. We've been planning to deprecate \"app-level\" mojits, which are really a kind of convoluted global model containers AFAIK. We should proceed to officially deprecate app-level if we go with this.\nThis is an improvement, but IMO it'd be preferred to have a parent mojit (or the thing that owns page-scope) inject/specify shared resources and data.\nTop-down injection would simplify control and optimization with respect to order of execution. Whereas the global model would have to deal with invocations bottom-up. I'm thinking of the case of mojit A request/context -> webservice I, ws II.. etc -> modelled data, and mojit B -> ws I, ws III -> modelled data\n. Yes, I understand, and again, it's simple enough and better than what exists. I'm just wary of opening the door to globals and treating apps like web pages.\nInstead of register/request globally, can this be scoped to ancestor mojit?\nAnyway, +1 with these caveats\n. @caridy actually delete removes the key, so javascript must check the prototype chain. by assigning something falsey as a value of the key, the falsey check is immediate. I wouldn't say delete is evil, but +1 :)\n. +1\n. +1\n. need to add /jslint continue:true/ at top or nr the statement(s)\n. +1\n. +1\n. +1 thanks!\n. I'll hold off till 2013..\n. +1\n. +1\n. hm, travis not seeing the updates, will redo pr\n. +1\n. +1\n. +1\n. +1\n. thanks @imalberto, moving this feature request to yahoo/mojito-cli-create/#11\n. +1\n. +1\n. should be in 0.5.3\n. +1\n. @caridy yes, this should be handled by mojito-cli(-start). I'll migrate this issue once the org-repo is created\n. Hi @jianlin, @caridy, I put in a fix for this in mojito yahoo/mojito#1150\nmojito-cli's start command takes advantage of that patch and this one to make a nicer \"Port %d already in use.\" error.\nChanges reflected in mojito@0.6.1 (just released) and mojito-cli@0.0.4 (latter to be published very soon)\n. +1\n. +1\nis there a reason for two separate test files though?\n. +1\nside note, seems like you could add some mock verifications for some of the adapter = Y.Mock() you added.\n. I didn't see any cache invalidation code. Perhaps log cache info and add a cache invalidation flag to mojito start for the developer use case?\nIt looks like you're saving everything in single cache file, so any code/lib change will invalidate. I was going to suggest discrete caches for app, yui, lang, etc. to enable partial invalidation for the developer use case, but I figure that's not what this PR is about.\nAlso, the build command creates new stand-alone applications, whereas the (deprecated) compile command creates app work-products. The \"rescache\" sub-command and might make more sense there. Of course the deprecation makes things confusing too, but just my $0.02.\n. thanks. the travis/npm-test run passes omm, let's see what travis and jenkins say. I hope the simpler run.js test -u --path unit in edfe1b83b9ce1e3cfa0ba401a7e71ce835a82bbb addresses the test count discrepency you noticed.\n. test count dropped. making groupings more consistent with the usage of arrow --driver\n. ok, the \"Cannot load a local file without arrow_server running\" errors should be fixed with pull #943 \n. +1\n. False failure, esp given the contents of the change. Travis 1213.2 on node 0.6 passes, but 1213.1 on node 0.8 fails. I suspect a timing issue with the test app, though I've seen this particular error before..\nFailed Common: simplemodelclient onMozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:18.0) Gecko/20100101 Firefox/18.0\nPassed, 1 Failed , 0 skipped \nin testCase_yui_3_7_3_2_1358883115041_33\ntest simplemodelclient:Unexpected error: Y.one(...) is null\n. +1\n. +1\n. travis has errors ff/selenium unrelated\n. +1\n. check out the docs at http://developer.yahoo.com/cocktails/mojito/docs/topics/mojito_resource_store.html and the tests https://github.com/yahoo/mojito/blob/develop/tests/unit/lib/app/autoload/test-store.server.js etc\nas you know, the team is in the process of changing structures and apis though\n. @jlecomte after checking the docs, you can try some forensics with your app and this patch https://github.com/isao/mojito/commit/8fbac40f7 (or just npm i mojito@git://github.com/isao/mojito.git#issue968 in your app dir)\nin your app, do mojito start and you'll get a dump of some files in /tmp containing the app and mojit data structures. I'm doing similar, @drewfish can explain more...\n. i'm deleting the branch with the patch above, moved patch to https://gist.github.com/isao/5314079\n. +1\n. +1\n. closed by pull #1044 (see also https://github.com/yahoo/mojito/wiki/ReleaseNotes0_5_7)\n. +1\n. @trungpham sorry unfortunately no docs beyond the code, which is due for refactoring after we move the cli commands into mojito-cli. \n. @trungpham I think this is a bit involved for the existing mojito test cli command, but definitely want to look into this. Closing here and tracking at yahoo/mojito-cli-test#1\n. +1\n. +1\n. +1\n. (redacted)\n. @caridy made this gist to explain, before I saw the full context of the commit (I mistakenly thought you replaced the str.replace instead of adding a second one).\nsorry, nm :) \n:+1:\n. thx. there are some lint errors on develop HEAD now. gonna fix those..\nhttps://travis-ci.org/isao/mojito/jobs/4656428\n(edit: nm that was an old job)\n. +1\n. +1\n. tests failed so I'm applying the patch to increase the delay.. waiting for travis now.. https://travis-ci.org/isao/mojito/builds/4994538\n. I rebased, so the orig test results for the failed commit (head of develop at the time with func tests enabled) doesn't appear above, but it is here https://travis-ci.org/isao/mojito/builds/4993672 fyi\n. 7 vs 9 failures\n. fix confirmed by Ji Liang\n. +1\npls reference issue #1006 in merge commit\n. +1\n. I agree the \"full\" archetypes have their quirks. closing here, tracking at yahoo/mojito-cli-create#12\n. +1\n. error occurs here when res.url is null: https://github.com/yahoo/mojito/blob/develop/lib/app/autoload/store.server.js#L712\nin node 0.8:\n% node -pe 'require(\"path\").join(null)'\n.\nin node 0.9+ \n```\n% node -pe 'require(\"path\").join(null)'\npath.js:360\n        throw new TypeError('Arguments to path.join must be strings');\n              ^\nTypeError: Arguments to path.join must be strings\n```\n. pull #1028 fixes the exception above, and mojito starts with newsboxes.. there may be other errors related to path.join(null) on node 0.9/0.10\n. @caridy if mojito-cli will ever be installed locally in an app (as opposed to globally) as \"mojito\", then we also need to change or remove the \"bin\": {\"mojito\": \"bin/mojito\"} in package.json as well.\n. passes functional\n. Good point, though mojito is not windows compatible now anyway.\nI wanted to take the js and npm api approach, but thought npm as a dependency was too heavy for this.\n. note: this PR works for npm i -g mojito but not for npm link or npm link path/to/mojito. The latter two overwrite the mojito-cli \"mojito\" executable symlink\n. closing in favor of runtime messaging in cli.js, thanks @caridy \n. +1\n. nice \u2019stash. :)\n. yes, good point. maybe a short url to docs too.\nholding off on this during \"opt-in\" period discussed today in mtg\n. mojito's underlying express/connect/node http server is started without specifying a host, and afaict mojito ends up listening to \"connections directed to any IPv4 address (INADDR_ANY).\" link\nOMM:\n% netstat -an | grep 8666\ntcp4       0      0  127.0.0.1.8666         127.0.0.1.60749        ESTABLISHED\ntcp4       0      0  127.0.0.1.60749        127.0.0.1.8666         ESTABLISHED\ntcp4       0      0  127.0.0.1.8666         127.0.0.1.60746        ESTABLISHED\ntcp4       0      0  127.0.0.1.60746        127.0.0.1.8666         ESTABLISHED\ntcp4       0      0  127.0.0.1.8666         127.0.0.1.60745        ESTABLISHED\ntcp4       0      0  127.0.0.1.60745        127.0.0.1.8666         ESTABLISHED\ntcp4       0      0  *.8666                 *.*                    LISTEN\n... bout http://0.0.0.0:8666 also works\n. We asked @Yujun-Qian to have the schemas included with core mojito source, which makes the most sense at this point-- especially if we think it will be changed.\nI also think we must validate our test apps against the mojito schemas in CI. +1\n. thanks for the feedback @caridy @drewfish. the root of the undefined res.url issue was test mock, not store code. unit tests pass on 0.10.2 mac.\n. +1\n. that diff looks ok, the docs say \"On Windows backslashes are used.\". and those paths are for middleware/uri's seems. \nbut I'm sure there are other places where this issue does apply.\n. looks like this:\n\u2714     Mojito(v0.5.7) started 'mojito_newsboxes' on port 8000\n. +1 (travis error only on cumulative timeout)\n. +1\n. +1\n. not sure how it relates to phantomjs but +1\n. yes, I'll add the ~1.0.5 change to this PR\n. Note-- will also need to wait for arrow@0.0.76 for these updated descriptor files to work as expected...\n. I made the dep change locally. I'll push it when arrow@0.0.76 comes out (and mojito's CI suites pass), to get the travis checkmark...\n% git diff -U1 head^ package.json\ndiff --git a/package.json b/package.json\nindex 4d2e442..562cde5 100644\n--- a/package.json\n+++ b/package.json\n@@ -27,3 +27,3 @@\n         \"wrench\": \"~1.3.9\",\n-        \"ycb\": \"~1.0.0\",\n+        \"ycb\": \"~1.0.5\",\n         \"yui\": \"~3.9.1\",\n@@ -55,3 +55,3 @@\n         \"node-static\": \">0.6.8\",\n-        \"yahoo-arrow\": \">=0.0.75\"\n+        \"yahoo-arrow\": \"~0.0.76\"\n     },\n. +1\nhardcoding --reuseSession is fine and good. But the original intent of this shell script is to be able to run all the tests the same way in travis/ci et al. There already is run.js with lots of config/options, which is a convenience wrapper script for arrow. And there's using the arrow cli itself. Effort to make it more convenient in this script I think would be better spent simplifying run.js.\n. BTW func tests on travis fail with:\nThe log length has exceeded the limit of 4 Megabytes\n. +1\n. fixed by #1152 \n. fyi fix included in mojito@0.6.1 which was just published earlier today. \n. @aljimenez sorry I didn't realize you reported this too, so much earlier. Thanks for the report and apologies for delay!\n. +1\n. @zhouyaoji you can use this as the basis http://git.io/qaSSdw .. I will make those trello cards I promised later today, thanks!\n. yes, it's a re-run, 6166f775ae4fef48adc21f5befa490ab18d2a803 is cherry-picked\nlooks like I need add'l commits anyway for travis to pick it up again.\n. fyi travis is green for this on my build history https://travis-ci.org/isao/mojito/builds/7409900\n. will be in 0.6.1 (or next release after 0.6.0)\n. @chetanankola can you provide a repro, or gist of the routes.json?\n. just to add, the routes.json in question looks like:\n\"routes\": {\n           \"_default_path\": {\n               \"verbs\": [\"GET\"],\n               \"path\": \"/:module/:action\",\n               \"call\": \"*.*\"\n           }\n       },\ntest cases for this type of route exist already http://git.io/6W_avQ\nunit tests pass on travis.\n. fwiw travis errored on node 0.10 - func only, unit + func passed on the others. error was:\n```\nNo output has been received in the last 10 minutes, this potentially indicates a stalled build or something wrong with the build itself.\nThe build has been terminated\n```\n. see yahoo/mojito#1152\n. also here https://github.com/yahoo/mojito/wiki/Releasenotes0-6-1\n. +1\n. @caridy the qs guide and cli reference have been updated. I'll take another look before next release.\nFolks who are using cli commands from mojito package like node_modules/.bin/mojito {jslint,test,docs} (for example in CI) will need to either:\n1. install mojito-cli locally (i.e. as a devDep) preferred and node_modules/.bin/mojito {jslint,test,docs} will continue to work\n2. use node_modules/mojito/bin/mojito which is what SD does right now.\nThe latter case 2) will need to be updated to 1) or similar when the next phase-- cli code removal from mojito package-- is released.\n. Ah, yes thanks Caridy. I should clarify. This PR will go in the next release, probably versioned mojito@0.7.0.\n- mojito versions up to 0.6.1 have node_modules/.bin/mojito which points to node_modules/mojito/bin/mojito.\n  - Some folks use either one path or the other to reach inside the mojito package for cli operations.\n  - This PR removes the first (.bin) path, not the second.\n  - The cli code will be removed from mojito proper soon with pull #1162. At that point the second path node_modules/mojito/bin/mojito will not be there either.\n- mojito-cli (all versions) have node_modules/.bin/mojito which point to node_modules/mojito-cli/bin/mojito when installed locally with your app, as in the devDep case. \nSo using node_modules/.bin/mojito in CI will work for both old mojito@\"=<0.6.1\" by itself, or mojito@\">=0.7.0\" installed with mojito-cli@\">=0.0.4\" as a devDep.\n(edited mojito@0.6.1 is last release with a symlinked \"mojito\" in node_modules/.bin)\n. \"8 additions 7,502 deletions\" :)\n. rebased to clear merge conflict. added update to package.json script.lint and script.docs \n. +1\n. @gomezd thanks for the PR. @caridy is correct, running tests on stuff in node_modules was considered a bug, and I don't think a configurable depth is a safe workaround. Ideally these common components have their own tests and CI.\nOTOH mojito test mojit path/to/dep/tests might work (you may need to symlink path). If you feel strongly about this please file an issue at yahoo/mojito-cli-test.\nThanks again, closing here.\n. +1\n. +1\n. suggested fixes:\n1. portfinder.getPort's callback doesn't check for errors\n1. will there always be only one instance of phantomjs? if not you should add the port number to line 238\nminor:\n1. needs de-linting\n1. maybe it's just me, but I find the '/../' in the paths confusing and messy. can we start referring to paths from MOJITOLIB moving forward? i.e. path.join(MOJITOLIB, '/node_modules/phantomjs')\n. I'd throw rather than process.exit() for 2757556d91d9feaa364be6fcb6605423a06c6407 but it's fine. thanks for fixing all that lint!\n+1\n. minor note, it's still possible, there's just no cli unless you install the mojito-cli package\n. Thanks for this PR. I like having the loadConfig() function rather than inlined in the store init, and the new event.\nCan you give some use cases of addons that legitimately need to modify the configs? I'd like to understand this a bit more. My initial reaction is that should not be allowed or accommodated... If this is needed/valuable for your apps, but not more generally, perhaps some of it can be moved to an external package.\nI'm also concerned about the performance impact. The ycb stuff, for now, is expensive and this PR doubles the cost.  Also, does this result in fs or syscalls at request time?\nLastly, a test case would be nice, and please remove the travis branch config...\nThanks.\n. lgtm, thank you @gomezd and @jarnoux \n. +1\n. +1\n. thanks for the clarification @lzhan. my +1 stands :)\n. I added get/set @method tags for mp.data and mp.pageData, and changed mp.data and mp.pageData @type from Object to Model.Vanilla so class docs are linked. Also added link to Y.Model.\nThe structure is a bit deep/awkward, but it is hopefully more helpful. See yahoo/mojito#1201\n. This looks good to me. I think some of these changes should be the new default behavior (not a separate code path + config), but drewfish is back tomorrow. We'll get his input before proceeding.\n. this test would be interesting to repeat in node 0.10.x. Before then node would trigger GC \"whenever the event loop was idle.\" But the behavior was removed because in practice, V8 was better at deciding when to GC. http://blog.nodejs.org/2013/03/11/node-v0-10-0-stable/ (search for \"idle garbage collection\")\nI think the count of GC events would not mean GC was required more often, for pre 0.10 versions..\n. /ping @zhouyaoji \n. I link to the manual, and the full api docs are pulled in from Model.Vanilla. Here's a screenshot: http://cl.ly/QQvy (get & set, as well as all the other methods, get displayed when rendered by yuidoc)\n. follow up on listing get/set explicitly-- won't work with @uses\n. travis errors were unrelated. this PR has no code changes.\n$ wget -nv http://selenium.googlecode.com/files/selenium-server-standalone-2.30.0.jar\nNo output has been received in the last 10 minutes, this potentially indicates a stalled build or something wrong with the build itself.\nThe build has been terminated\n. @lzhan: discussed with @imalberto, and he is making a PR that installs just the node-markdown dependency in the quickstart guide example, so that it should behave like the other examples (no double-cloning)\n. +1\n. +1\n. +1\n. Yes, saw that in express-yui and others, but assumed there was some reason the approach was needed there, and I thought @ericf mentioned wanting to move away from that earlier today. Also, if both mojito.js and express-yui depend on monkey-patching the same function to get instantiated, they can't be used together easily, can they?\nAnyway, the patch fell out of some other stuff I was trying for simplifying app-start, and wanted to share quickly before I left on vacation (func test app haven't been updated, etc.). I thought it was a small improvement...\n. that looks great. closing this pr.\n. +1\n. symlinks work fine in git, but not on windows..\n. +1\n. @caridy the archetypes needed to be in the cli because mojito create app couldn't assume that mojito was installed, and if it was, wouldn't know where (non-global). It was the \"quick start\" use case.\nI recall proposing a config for the cli commands, which in the create case could be used to locate for archetypes locally, and eventually over http. But there was a lot of resistance to this.\nI'll submit a PR in a few to have create use a mojito-lib archetypes dir if known, which should help.\n. @ItsAsbreuk thanks for the feedback and suggestion. pull isao/mojito-cli-create#6 will use a locally installed mojito/archetypes directory to look for matching archetypes which should help with mojito create mojit ... being more in sync. mojito create app.. is a different story of course, but there remains these options:\n- specify the full path to the archetype like mojito create path/to/mojito/archetype\n- specify the path to a moijto install with the --libmojito path/to/mojito option. If there is an archetypes directory there, the create command will attempt to use it.\n. you'd think. didn't work for me.. does it work for you? \n. oh god how did that get there I am not good with computer\n:) will fix\n. lines 13 & 14 use \"> \", as does mojito's package.json, so I tried to be consistent.\n. yes, I know, I said as much this morning.. :)\n./node_modules and ./examples/**/node_modules are excluded and everything else is allowed\n. yes, sorry for the funny diff.. just look at the full file.\nI sorted to compare with .npmignore\n. Originally I thought using the static function String() for type casting converted undefined, NaN, etc to \"\"... It doesn't so I added the ||\"\".. so yeah the function call doesn't really do anything except in the unlikely case that al is a number. I'll update.\n. jslint is fine with it (there's no dot or [^... )\n. ah geez. that change needs to be made to 40+ files and the README. leaving that another PR for now.\n. I would prefer to drop the \"lib\" prefix convention personally. It essentially identifies things originating from a require, and I don't see much value in that on node.js. \n. yes, it was int before, but the braces messed up the syntax highlighting/linting, and it didn't affect functionality.\n. To provide the build:* context config. I tried adding to the environment:* context but I guess that's not permitted.\nSome app configs are intended for use only with a hybrid build inside CRT, and potentially per device. The build:debug and build:release were chosen to mirror Anne-Lise's scripts for copying dev vs minified resources.\n. @zhouyaoji thought these dimensions belong in mojito, but I wanted the change set to be minimal wrt non-hybridapp users and the mojito dimension issue seems to be in flux.\n. good suggestion.\n+1 for now assuming you need this in for something else.\ncommander, the cli option parser used supports default values as well. You may want to explicitly define defaults and initial values with it's api first and save a few if(foo)'s\n[edit] my comment doesn't actually apply to your change.. I assumed port  and context were a cli params... srry \n. While I prefer the one-line version, it does imply that callback returns something.\nI'll adopt your change.\n. yui-sandbox.js is clever, but wasn't available when I wrote this, and doesn't address the issue I had. I needed to specify the path to YUI to require while working on the build stuff as an external command (i.e. an npm module mojito-cli-cmd-build).\nThat requirement doesn't apply anymore now that the code is in the mainline, so I'll take it out.\n. the callback(y) may return, and then return y will be executed which is poor form. I suppose the more explicit and clear way would be this:\nif (callback) {\n    callback(y);\n    return;\n} else {\n    return y;\n}\n...but that's 6 lines vs 1. How strongly do you feel about this?\n. ok, I'll change the method name to getYUIInstance()\n. it's inconsistent, I know. the hybrid archetype is supposed to include both an app and a mojit and the mojit name was hard-coded (was a requirement)\n. interesting looks like the jslint I have and jslint.com don't care about the comma in the config. I'll add it for consistency\n. agreed, that's much cleaner. I'll update, thx\n. when a user has a bundle without a location property. It's defined here but not here for example.\n. during this test for this fixture.\n. So res.url is always defined? I thought it wasn't in some cases on the client i.e. shared mojits. If no res.url is valid, then 'content-path' should not be defined with a unusable value. If the test exposes a case where res.url should be defined but isn't, then I think we should open a separate issue.\n. I like these suggestions, but fwiw, time penalty for coverage is negligible for mojito's unit tests, which is why I suggested it to @lzhan. I do have npm run cover in a bunch of places distinct from npm test, but mainly because I didn't declare istanbul as a devDependency in those cases.\n. note to self: docs & lint will need to be edited to use mojito-cli when lib/app/commands is removed.\n. yup, I removed it a few minutes after this initial push, after running the tests and some apps.\n. I was kind of confused how this file didn't get a jslint error for that. in the old mojito jslint command, there is an exclusion rule for /mojito/, so I was paranoid there was something intentionally funky. we'll see.\nAfter removing it, jshint still says:\n- mojito.js: line 22, col 19, 'requestCounter' is defined but never used.\n- mojito.js: line 262, col 18, 'logConfig' is defined but never used.\n- mojito.js: line 266, col 20, 'debugConfig' is defined but never used.\n- mojito.js: line 382, col 14, 'm' is defined but never used.\n. the test-module names are comma separated without any intervening spaces, i.e. <mojit-module1>,<mojit-module2>,<mojit-module3>. Otherwise only they're seen as separate arguments and only <mojit-module1> will be used.\nThis is in the old cli, BC behavior.\n. this is new. and IMO preferred. Put it first?\n. there are no \"framework\" tests anymore...\n. might read better if the output options and defaults were just explained at the bottom\n. this module isn't listed as a dependency in package.json. Did you mean this?\nmethods = require('express/node_modules/methods'),\n. thx, my mistake.. I had started rebasing onto develop, and.. :/\n. The package \"methods\" exports an array of HTTP methods, including a bunch of esoteric ones. But, unless I'm missing something, it doesn't seem to be needed-- this line iterates over the methods array, but is only actionable if it matches a key in req.app.routes.\nWould it be better to just iterate over Object.keys(req.app.routes)? That'd generally be just ['get', 'post'] for web apps\n. ah, yes, thanks-- copy and paste error\n. yes I noticed tests/func/applications/frameworkapp/commandline/* too, and it does look like it's no longer used. will also rm from head of develop.\n. while it's clear from the code on the next non-comment line, that the actual type is Y.Model, using Model.Vanilla is api-compatible and is what's used on the server. The reason I use it is so yuidoc will hyperlink to it's api docs, which are the same.\n. fs.lstat(zzz).isDirectory() is always false if zzz string points to a symlink, whether or not it resolves to a directory.\n. (if you want to follow the symlink, use fs.stat instead of fs.lstat)\n. is this more what you're looking for?\n// return if dir is not a directory, or a symlink to a directory\nif (!this._libs.fs.statSync(dir).isDirectory()) {\n    return;\n}\n(..also move it after the exists() test further down...)\nnote that this will throw if dir is a symlink to non-existent file.\n. typo {affinity}} and {selector}}\n. you should add that the filename corresponds to the binder action name.\n. I think the distinction between mojit methods and functions is a bit confusing and not needed IMO.\n. this: mojito-addon-{addon} should be: mojito-{addon}-addon\n. this is just a subset, not a complete list.\nalso note that these are \"ac\" addons-- technically there are \"rs\" and \"view-engine\" addons\n. it'd be good to add how this convention translates to urls\n. I see, I missed that. Maybe the \"Location\" conventions could include some naming info too, like:\nmojits/{mojit_name}/binders/{action}.js\nmojits/{mojit_name}/models/{model-name}.{affinity}.js\nmojits/{mojit_name}/views/{action}.{view-engine}.js\n. I like a pathname convention header, then some text explaining the dynamic parts and their relationship to Mojito. The sub-sections are probably easier to relate when rendered instead of raw text, but in a diff they seem to break up the flow. Just my $0.02.\n. If memory serves cleanse/uncleanse was for protecting against XSS in an app's configs that were sent to client. IMO, it shouldn't apply to things the developer has defined. But perhaps there was a concern developers would put user input in the config object destined for the client at runtime.\n. ",
    "rwaldura": "@add0n Bill have you got any specific ideas for this? i.e. a draft\n. assigned to Joe\n. we'll document this thoroughly with 0.5\n. mmmh thought we had fixed this...\n. doesn't appear to be too much of a problem...\n. in what ways?\n. framemojit\n. ticket not useful as-is\n@add0n please add a description?\n. So, can we say we're done with this? \n. Fairly sure we've resolved this. \n. ??? what does this mean?\n. Thanks.\n. fixed in 0.5.0 pr2\n. See pull request #124.\n. #124 was superceded by #489.\n. implemented in search-perf branch\n. see related issue #126\n. See also bz5753621 for an example of how Express is currently used -- i.e. we need to support the upload use-case even though we drop Express.\n. why? is it a performance optimization?\n. sounds like housekeeping issue: I'd rather address this on an ongoing basis -- during commit review -- than with a ticket\n. see #422, #436 \n. we'll use Istanbul for code coverage\n. arrow\n. Short URL updated. Thanks!\n. FYI I fixed the short link.\n. Thanks for the patch bmharris. \nIs it better to mention routes right upfront, in the README, or should we attempt to delay that complexity till later -- and use a full URL instead in the README? I.e. http://localhost:8666/@myMoijt/index\n. bmharris: we're going to try to keep the README super lightweight, and have more solid documentation around routes in the Wiki etc. Thanks again for the patch though! Keep 'em coming!\n. E.g. http://developer.yahoo.com/cocktails/mojito/docs/code_exs/route_config.html\n. @epuidokas hey, I think we might have closed this a bit prematurely. We're very interested in this feature!\nSay, I'm curious: were you able to quantify the benefits gained by this patch?\n. triptych: I'm going to close this issue in favor of issue #126 instead, okay?\nhttps://github.com/yahoo/mojito/issues/126\nClearly a duplicate.\n. Thanks for the report, Chetan.\nGuess we'll just have to upgrade Express!\n. @mojit0 is working on this, via #422.\n. See also bz5753621 for an example of how Express is currently used -- i.e. we need to support the upload use-case even though we drop Express.\n. We've updated Express to 2.5.10. I'll open another ticket to chuck it out entirely (i.e. drop our dependency on Express).\n. We're going to take a different approach with this.\nThanks for the patch though!\n. Sweet! Thanks for the patch!\n. Oh wait. Could you submit a patch please?\n. Very kind of you, thanks.\nWhoever gets to it first then!\nThanks again for reporting the issue.\n. see also #345, #359.\n. this issue is superseded by pull #285\n. Sweet, thanks!\n. Why are you trying to generate URLs based on dynamic urls with regex and wildcards?\nWhat's the use-case?\n. Yeah, we're ditching Mu in favor of Handlebars -- see pull request #179.\n. Unfortunately we're having to delay Handlebar support, so we're going to pull in request #211 which fixes the NULL case.\n. I guess I don't understand: what prevents you from binding this link to an event handler?\n. Fair to close then?\n. @imalberto how is this problem solved by FirstByte?\n. @zhouyaoji we should document ac.flush() is asynchronous\n. This fix is for issue 208.\n. This fix is for GitHub issue #208\n. See also related pull request #179 which is about Handlebar support.\n. this is required for BPi support\n. superseded by #285\n. goonieiam: is this something you can provide a patch for? Do you know exactly what needs to be fixed?\n. > this._mojits contains duplicated ids\nCan you view the IDs? Do they look like YUI_3_4_1_blahblah or YUI_3_5_1_blahblah?\n. > this._mojits contains duplicated ids\nCan you view the IDs? Do they look like YUI_3_4_1_blahblah or YUI_3_5_1_blahblah?\n. BZ 5651900 \n. Joe?\n. @ramses0 is your code nothing more than the tutorial app? what's in your HelloMojit?\n@zhouyaoji \n. Mmmh wow okay. @jenny could we look into this? I'm not going to be able to get to this today, sorry.\n. I'm closing this ticket in favor of #387 -- let's work on this over there.\n. See pull request #123.\n. Thanks for the patch. It does appear very simple indeed. We've been wanting to address this area (frame configuration) comprehensively, but maybe it's time for a quick fix.\nWe'll look at this in Sprint 38 starting July 16 and ending 2 weeks hence, thanks!\n. Fabian:\nCan we safely close this in favor of pull request #228?\n. OK\nWhoever merges pull request #228, please close this issue at the same time.\n. Scoot: just curious, do you know why/how all those commits get into the first pull request?\n. Kind of a silly mistake. Thank you Ryuichi Okumura!\nHey, out of curiosity, how did you hear about Mojito? Is it being considered for some Y! Japan projects?\n. see also https://github.com/yahoo/mojito/wiki/ReleaseNotes0_4_3\n. Very.\n@drewfish, Cary: any possible downsides to this patch?\n. Related: I heard from another client (Stars, I think) that the more routes you have, the slower it gets. \nI'll dig up the reference.\n. Joe, can you comment?\n. @zhouyaoji can you comment?\n. Is it probably possible, but we've never looked into it.\nWhat is your motivation for wanting to do so?\n. Oh, very interesting! \nWould you be willing to do an experiment in your fork and show us what it looks like?\n. See also http://yuilibrary.com/projects/yui3/report/132 for the YAF side of things.\n. See also forum discussion at \nhttp://developer.yahoo.com/forum/Yahoo-Mojito/Integrating-with-YUI-3-5-MVC-App/1339551100881-219004e1-417c-4bd9-bf46-4c5d7ee7c1cc\n. Oh interesting. Wasn't aware of this discussion, thanks!\n. Thanks @focuzz ! Let's try and fix this.\n. @zhouyaoji +Joe for doc update\n. @focuzz can you describe the problem a bit more? what functionality is broken?\n. Thanks @focuzz , let us know what you find out!\n. @zhouyaoji Joe can you help?\nSeems like oversight.\n. Hi @focuzz:\nIndeed I don't think we ever tested that, seeing how we use mostly Macs and Linux boxen. \nWould you be able to narrow it down further? What seems to be the problem in nodejs-yui?\n. Yeah might just be a silly path issue.\n. Thanks Alexey. This is starting to sound like a bigger item than anticipated, does it not?\nWe're not currently setup to run our automated tests on Windows, so it's going hard for us to validate your fixes (Of course, we could validate they don't break MacOS/Linux, but that's only a negative test...)\nFew people have asked for Windows support, it hasn't been a priority for us at this point.\n. Sounds like a good compromise. Thanks!\nLet's keep this issue open to track this feature.\n. Thanks @Merlin8000 for your vote.\nPart of the problem is that we're not setup for running (testing) Mojito on Windows. \nTravis doesn't help, as it doesn't support Windows either. Any ideas?\nhttp://about.travis-ci.org/docs/user/ci-environment/ \n. We certainly didn't try to break Windows compatibility on purpose. :(\n@focuzz was looking into what's currently broken, and I was under the impression that, with a good PR, we could solve this. \n@Merlin8000 would you be willing to help him?\n. Great to hear! \nAny ideas on how we could get this tested? Is there some sort of Travis-like for Windows out there? How do the Node guys test their stuff?\n. Okay, can we claim we're done here?\nReopen if you disagree.\n. We do this daily -- I've asked Dirk to explain how.\n. @jqianyahoo what version of Mojito is this?\nI venture this has been fixed by the new resource store released in 0.4.0\nlet us know, thanks!\n. See #422.\n. See also issue #230.\n. As Drew mentioned, the current HTMLFrameMojit has some limitations, which Mojito users like yourselves run into rather quickly. \nWe can patch the existing mojit, but it seems like a real chance for something new and better. Would you be interested in offering your own for adoption? \n@renatoi may have some comments here, re. e.g. the MicroFrame?\n. see also issue #259\n. @add0n does this fall under your current investigation?\ncan we deal with this somehow? either close, or merge, or decide what to do\n. Thanks @rmadhuram!\nI like the spider suggestion. Joe, how could we do this?\n. For the record, all the documentation is checked-in and available in the source tree at e.g.\nhttps://github.com/yahoo/mojito/blob/develop/docs/dev_guide/code_exs/query_params.rst\n. I'd like to understand better, it feels a little strange to me: why issue a raw HTTP message from the framework? \n. @mojit0 Could this be done from the middleware? Should it be?\n. Understood. It does sound cool, but our primary use-case is presentation -- building Web Services, not so much. \nWhich isn't to say this is a bad idea, or that folks shouldn't do it, but I think we need to stay focused. This feels a bit out of scope for us at this point. \nA pull request would go a long way! ;)\n. See pull request #252.\n. I'm talking to @zhouyaoji about it. Please don't merge, thanks!\n. see pull request #252\n. didn't we do this already? #252\nre-open if I'm wrong\n. What is the fix? What needs to be removed from the dependsOn array?\n. Mmmmh did you really mean to include all these commits into your pull request? That's a lot of stuff that got picked by your branch.\nMaybe recreate the PR after rebasing your branch?\n. obsolete; superseded by #285\n. Thanks Ric. We'll try to merge in the next Sprint, starting Monday 7/23.\n. see #278\n. Workaround is to pass the parent's action context to the child mojit.\n. @zhouyaoji ping ping\n. you bet. sorry about that, will do so in the future\n. @jintao Maybe your PR isn't bit-perfect as-is, but I think it's awesome!\nThanks very much for this. I'm going to sit on it for a bit, and schedule for Q4, okay? There are other things in the same vein that we want to do.\nThanks again!\n. see also bz5741324\n. included in #842, closing\n. Supersedes PR #209.\n. is this related to #358?\n. does this PR supersede #250?\n. was that issue #384? did you not mention it on purpose?\n. Hi Jay:\nThanks for your interest in Mojito. I have to agree with you, at this point in time there's a marked lack of documentation on how to do this. We've been working on this though! We are preparing an announcement, and you can expect a clear direction (and code!) in a few weeks. \nIf your project just cannot wait, PhoneGap is a possible option for the time being. \nShaker only deals the comboing of assets. It's used to optimize loading performance; doesn't solve the AppStore problem.\n. See also forum thread.\n. See also #452 which appears related.\n. @zhouyaoji doc bug\n. silly me!\n. Honestly, I just don't see a ton of demand for it at this point.\nCan you tell us more about what you're doing and why you need WebSockets?\n. no response from @chetanankola, closing\n. Hi @ooskapenaar : can you implement an AJAX-based polling mechanism?\nWhat kind of \"heavy crunching\" is your server doing? That's rarely the ideal use-case for Node.\n. see also related tickets #375, #284, #358.\n. @dferreiroval does Shaker make this PR obsolete?\n. i'll submit a diff against package.json for some changes -- others will have to be fixed at release time\n. Silly question: have we verified that, with these changes, a Mojito app still starts in Manhattan?\n. @gvaish go ahead and reopen issue if \"base\" isn't enough. Thanks!\n. see also related issue #544\n. Ouch.\nhttps://github.com/yahoo/mojito/blob/develop/lib/app/autoload/rest.common.js#L75\n. Next Sprint candidate. Sprint's already pretty full though -- might get bumped. How critical is this? What's it blocking?\n. Next Sprint, S41.\n. closing -- we'll track this as a feature request when it comes up\n. let's complete this when we really have some level of integration with YAF\n. This is already tracked at https://github.com/addyosmani/todomvc/issues/131\nPlease ignore.\n. Did @capecodehq report this? He was going to.\n. Acutally, his issue  may or may not be the same. He reported (verbally) seeing some duplicate output when using HB.\nI'll let @capecodehq elaborate further, and maybe open a separate ticket.\n. this PR is for issue #264: Windows support\n. @jenny mentioned in SoS\n. See #466.\n. please update bz ticket 5815270 when you close this, thanks!\n. this issue was resolved by applying PR #490\n. this PR (it's actually a PR, not an issue) is superceded by #490.\n. yes we should\n. I believe @imalberto is referring to #494 by @capecodehq .\n. thanks Isao!\n\"> 0.4\" is equivalent to \">= 0.4.0\"\n. Thanks @dmitris !\n@zhouyaoji will fix\n. YUI's is here: \nhttps://github.com/yui/yui3/wiki/Contributing.md\nI notice ours doesn't link to our coding standard: https://github.com/yahoo/mojito/wiki/Coding-Standards\nIt probably should.\n. Not quite yet.\n@zhouyaoji can you create a file CONTRIBUTING.md that merely points to \nhttps://github.com/yahoo/mojito/wiki/Contributing-Code-to-Mojito\nThanks!\n. This issue now superseded by #537 .\n. +1\n. whack whack\nthanks for the wakeup call\nnext Sprint candidate\n. uhm, maybe not next Sprint -- seeing how it's pretty full as it is -- but soonish, I agree.\n. We've been talking about revamping the CLI for a while now. Things we want to do: \n- #115 [bz5424065] split up the CLI from the framework -- @mojit0 is passionate about this one\n- this ticket: CLI syntax and defaults, as well as #533, also filed by @dmitris \n- #85: lint a single file\n- #31: unit test for the CLI\n- also search the list of issues for tag \"cli\" https://github.com/yahoo/mojito/issues?labels=cli&state=open\nIt's an area that's ripe for change. I'm going to bundle all these up into a future Sprint in Q4. \n. @caridy are we still on hold for this?\nCan @lzhan help?\n. status on this? update or close?\n. please also close the bz ticket after merging, thanks!\n. To recap, goals for this feature:\n1- preserve backwards compatibility with all existing config\n     -> i.e. parse application.json and other config files w/o change\n2- allow comments in configuration files\n     -> i.e. parse app.{yml,yaml}\n3- prefer yaml to json\n     -> warn if both application.json and application.yaml are present, use application.yaml\n. see also arrow#24\n. yahoo/arrow#24 rather\n. let's\n. release notes found at https://github.com/yahoo/mojito/wiki/ReleaseNotes0_5_0pr1\n. see also #565 and follow-up #623 which dealt with these special files\n. @ooskapenaar have you checked the release notes since 0.4.4?\nhttps://github.com/yahoo/mojito/wiki/ReleaseNotes0_4_5\nhttps://github.com/yahoo/mojito/wiki/ReleaseNotes0_4_6\nhttps://github.com/yahoo/mojito/wiki/ReleaseNotes0_4_7\nhttps://github.com/yahoo/mojito/wiki/ReleaseNotes0_4_8\n. Team: would it be possible to write a conversion tool for 0.5 that would detect such errors? W/o necessarily fixing them, would just issue a warning.\n. @zhouyaoji any comments?\n. thanks @rmadhuram you're our hero!\n. Was redone as #842.\n. Oooooh interesting! @lzhan has done some work in this area too. \n@lzhan can you comment?\n. see #670 (@lzhan github autolinks if you prefix with a hash sign)\n. @lzhan what does Julien need to do to add comments in his config files? Just rename them to .yaml?\nWhen was this released? Which Mojito version?\n. Thanks.\nI thought JSON was a subset of YAML? I.e. every json file is also a valid yaml file. Is that not the case?\nhttp://en.wikipedia.org/wiki/YAML#JSON\n. We're really close, but postponed it till after GA purposefully.\n. 0.5.1, seeing how close we are.\nSprint after 0.5 GA release.\n. @jlecomte is reporting this is still occurring with 0.5.1\n. Guys:\nI think I understand what we're trying to accomplish here, but can you make sure you document this thoroughly?\nI.e. can you draft something for @zhouyaoji , or patch the existing doc? \nhttp://developer.yahoo.com/cocktails/mojito/docs/intro/mojito_mvc.html#models\nwhich maps to\nhttps://github.com/yahoo/mojito/blob/develop/docs/dev_guide/intro/mojito_mvc.rst\nThanks!\n. Oshi: yes, but it's more involved, as we now depend on Arrow to run the tests. \nhttps://github.com/yahoo/arrow\nWe'll have to expand the documentation to include how to do this.\nFor now, I'd proceed assuming the installation succeeded.\n. see also issue #25\n. @zhouyaoji \nhttp://developer.yahoo.com/cocktails/mojito/docs/quickstart/\nThanks @AndyOfLinux for the report. Welcome to Mojito!\nNote that you can issue pull requests against the documentation, e.g.\nhttps://github.com/yahoo/mojito/blob/develop/docs/dev_guide/quickstart/index.rst\n. @yukinying thanks for the report. Indeed meta is a bit a of magic that's somewhat obscure.\n. Let's flesh out http://developer.yahoo.com/cocktails/mojito/api/classes/ActionContext.html#method_done\nhttp://developer.yahoo.com/cocktails/mojito/docs/intro/mojito_mvc.html#specifying-the-view\nmentions you can specify a view, but it's sparse. \n@zhouyaoji I notice the link http://developer.yahoo.com/cocktails/mojito/api/files/node_modules_mojito_lib_app_autoload_action-context.common.js.html#l388 from http://developer.yahoo.com/cocktails/mojito/api/classes/ActionContext.html#method_done is broken?\n. resolved fixed\n. Good idea, but frankly Error: listen EADDRINUSE already says it all.\n. Agreed. Let's have a better error message, e.g.\n\"Port already in use. Is another Mojito, or another program, already running on this port?\"\nWhat do you think? I wish I could tell users how to get rid of this error, but doing so is very OS-specific.\n. let's resolve this: @gomezd, @caridy, do you have any more comments?\n. @kinlum Agreed! Thanks for reporting this.\n. tunnelPrefix lets you change the URL.\nhttp://developer.yahoo.com/cocktails/mojito/docs/intro/mojito_configuring.html\nWhere/when would parameters get appended? On every call?\n. @aljimenez any comments, or update?\n. +1\nThank you for signing our CLA!\n. PR 1-0-0-0, wooo-hooo!\n:100: \n. @gotwarlost check this out, released in 0.5.5 today \nhttps://github.com/yahoo/mojito/wiki/ReleaseNotes0_5_5\n. All right Joe! Nice work.\nWe\u2019re going to make a developer out of you \u263a\nFrom: Joe Catera [mailto:notifications@github.com]\nSent: Wednesday, February 27, 2013 6:00 PM\nTo: yahoo/mojito\nSubject: [mojito] Setting staticHandling.prefix=\"\" does not allow you to remove the prefix to the static URL (#1015)\nThe Store allows you to use an empty string to configure your app not to have a prefix for static URLs:\nmojito/lib/app/autoload/store.client.js\n// This value could be an empty string so we have to do a real check.\nthis.staticPrefix = '/static';\nif (this.appConfig && this.appConfig.staticHandling &&\nthis.appConfig.staticHandling.hasOwnProperty('prefix')) {\nthis.staticPrefix = (this.appConfig.staticHandling.prefix\n?\n'/' +\nthis.appConfig.staticHandling.prefix : '');\n}\nUnfortunately, the Resource Store, however, seems to override this behavior:\nmojito/lib/app/addons/rs/url.js\n_calcResourceURL: function(res, mojitRes) {\nvar fs = res.source.fs,\nrelativePath = fs.fullPath.substr(fs.rootDir.length\n-   1), urlParts = [liburl.resolve('/', (this.config.prefix || 'static'))];\nI've actually played around with both files and changing the value in\nrs/url.js, allowing you to define the default prefix or have none at all.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/yahoo/mojito/issues/1015.\n. Is this the final fix, that yields a new Shaker release?\nEither way, you\u2019re awesome.\nFrom: Caridy Patino [mailto:notifications@github.com]\nSent: Thursday, February 28, 2013 6:30 PM\nTo: yahoo/mojito\nSubject: [mojito] fixing regression in mojito@0.5.5 that breaks shaker (#1016)\n\nYou can merge this Pull Request by running\ngit pull https://github.com/caridy/mojito shaker-fix\nOr view, comment on, or merge it at:\nhttps://github.com/yahoo/mojito/pull/1016\nCommit Summary\n-   fixing refression from 0.5.5 where the url used by the metas was not coming from RS, which breakes shaker.\nFile Changes\n-   M lib/app/addons/rs/yui.jshttps://github.com/yahoo/mojito/pull/1016/files#diff-0 (6)\nPatch Links:\n-   https://github.com/yahoo/mojito/pull/1016.patch\n-   https://github.com/yahoo/mojito/pull/1016.diff\n. I want to use this issue to keep track of all issues related to this compatibility break.\nE.g. see also yahoo/mojito-shaker#43\n. @zhouyaoji \n@lexander thanks for the report. Where should the log location be specified? Which section of the doc is it missing from?\n. Ooooh very strange! @kevinhasslinger we're going to need your help debugging this one, because it sounds very very peculiar. Could you generate some automated traffic against your app, and identify a reproducible test case? That would really help narrow down the problem.\n. Wireshark is cool, and will certainely show exactly what's happening on the wire.\nBut I'd start with Firebug, see what the \"Net\" panel says.\n. Thanks for following up!\n. @isao who's working on the CLI\n. @isao you're entirely correct.\nLet's change the startup message to \"Mojito started on on port 8666\" because that's what it does.\n. \nLogo to use\n. @luchenghan\n. I'm sorry, there was some confusion: please replace the \"Powered by Cocktails\" logo with a Mojito logo.\n@luchenghan \nThe title should be all text.\n. ",
    "zhouyaoji": "Mojito now supports specifying routing parameters with an object, which is the preferred way. We are deprecating the use of a query string to specify routing parameters.\nThanks.\n. The source has been corrected as have the API docs on YDN that can be viewed here: http://developer.yahoo.com/cocktails/mojito/api/classes/Assets.common.html\n. This issue has been fixed. See https://github.com/yahoo/mojito/blob/develop/examples/developer-guide/binding_events/mojits/PagerMojit/binders/index.js.\n. I don't see any errors in Firebug when I run either the  'using_configs' or the 'global_assets' app. I was running Firefox 13.0.1 on a Mac OS X, Version 10.6.8. Can you please specify the OS and version of Firefox that you are running? Thanks.\n. Because this example has been updated and Mojito has had many changes in the past three months, this issue might have been resolved, so I'm closing it for now. \n. No, Mojito allows you to specify routing parameters using an object as showin in issue #7. The use of specifying routing paramaters with a query string has been deprecated. Instances of using a query string to specify routing parameters have been removed from the docs and code examples except for two deprecation notices. I'll close issue #7 as well. Thanks.\n. Just to clarify for the documentation, the value for \"tunnelTimeout\" is a number (not a string) and is in milliseconds as shown in the example 'application.json' below, correct?\n[\n    {\n        \"settings\": [\"master\"],\n         ...\n        \"tunnelTimeout\": 5000,\n        \"specs\": {\n            ...\n        }\n    }\n]\n. Hi Satyam,\nYou can find documentation for binders at the following URL: http://developer.yahoo.com/cocktails/mojito/docs/intro/mojito_binders.html\nI'm not sure I completely understand item 'b)' in the issue that you filed. When you say templates, are you talking about 'archetypes' that are used to generate the mojit files (i.e., https://github.com/yahoo/mojito/tree/develop/source/lib/archetypes/mojit)? If so, please see the Creating Code from Archetypes (http://developer.yahoo.com/cocktails/mojito/docs/reference/mojito_cmdline.html#creating-code-from-archetypes).\nAs for 'c)', I am not aware that private controller methods are inherently different when they are run on the client or server, but obviously the runtime environments are different, so private methods on the server could, for instance, could access Node modules, whereas private methods on the client could access the DOM. I will confirm that there are any other differences for you as well. \nThe reStructuredText source files for the Mojito documentation on YDN (see directory at http://developer.yahoo.com/cocktails/mojito/docs/) is also on GitHub (https://github.com/yahoo/mojito/tree/develop/docs/dev_guide), so you can add docs or make changes and then make a pull request.\nPlease let me know if you need more documentation for 'a)' and 'b)', and I will get back to you about item 'c)'. \nThanks for your feedback and for filing this issue.\n. a) I see, you're talking about the 'mojito doc' command not generating documentation for binders. I'll file a enhancement ticket for this. Thanks!\nb) We've made several changes to the archetypes over the past couple of weeks that you should see in the near future. If you notice that there is a bug or an issue that you can identify clearly and in detail, please file a bug or make a pull request.\nc) Yes, I have confirmed with the Mojito team and private controller methods should work the same on the client and server. The only caveat is what I mentioned earlier--if you're using Node.js modules, you won't have access to that on the client or if you're accessing the DOM, you won't have access to that on the server.\nThanks, Satyam!\n~Joe\n. Hi Satyam,\nI went ahead and tested 'mojito docs' to see if it generated docs for binders, and it does.\nAfter you write a new binder function, you would do the following:\n1. Add YUIDoc comment blocks for your new function. See http://yui.github.com/yuidoc/syntax/index.html#primary-tags as a reference.\n2. From your application directory, run the following:\n   $ mojito docs mojit {mojit_name}\n3. Go to the doc URL outputted by Mojito.\n4. You should see the documentation for your new function.\nLet me know if this helps. Thanks.\n. I've fixed the links to the ActionContext Class in both the API Overview and Glossary chapters. I fixed the misspelling in the Mojito Documentation Directory (http://developer.yahoo.com/cocktails/mojito/docs/), but I was not able to publish the updated page to YDN because of a server error. I have contacted the SEs for YDN, so the problem should be resolved soon. Thanks for catching those mistakes!\n. I've merged a pull request with the updated docs. The source file for the documentation directory is not part of the GitHub repo, so I'm closing this bug. I will follow up with YDN if the documentation directory is not updated. Thanks.\n. Hi Dimitry,\nThe 'ydntheme' is used to create the YDN docs. You can just comment out the line with 'html_theme' and run 'sphinx-build'; the docs should build fine.\nThanks for correcting the tests for the example. I'll go ahead and merge your pull requests.\n~Joe\n. The 'simple' examples are not part of the documentation. The examples for the documentation are all in 'examples/developer-guide'. Because it's not a doc issue, I'm going to relabel the issue. \n. For the following examples, you have to go to URL http://localhost:8666/myBase/index to execute the mojit instance of type HTMLFrameMojit, which will deploy the binder code to the client. This information is in the file readme.md of each example.\n- simple/part3\n- simple/part4\n- simple/part5\nMy guess is that focuzz went directly to http://localhost:8666, which would only render the child mojit instance and not deploy the binders to the client.\n. Isao,\nI believe Drew said that users will be able to start Mojito without 'mojito start' in the future. Should I add your instructions for starting Mojito without 'mojito start' to the docs or wait until Mojito offers a more standard way of doing it? If the latter, shouldn't this be an 'enhancement' issue (if it doesn't already exist) w/ a documentation element?\n. Thanks, Isao. Great, I'll add the issue of adding the FAQ entry to my sprint backlog. \n. I was told that YDN was doing link checking as part of their QA. I personally used a link checker before publishing the docs to YDN, but the API docs have changed because of API changes and the latest API docs were generated by yuidoc.js instead of the old YUIDoc that used Python. As a result, the URLs for the API docs changed and broke links. I'll contact the YDN team and do another link check for the time being. \n. Great: the simpler, the better. The README will also contrast more with the quickstart tutorial, so the latter, which has a step for editing 'application.json', becomes more important.\n. Correction, the quickstart has a step for editing the controller. The getting started tutorial has a step where the user creates an instance of a mojit in application.json. In any case, the progression from README to quickstart to getting started is nicely paced.\n. Sorry, I didn't see this sooner. Can you please label docs bugs as \"documentation\" in the future? Thanks, that's how I generally find issues that I should be working on.\n. No problem. I've fixed the problems.\n. Thanks for spotting that issue. The formatting was also affecting the ordered list. I've fixed the problem.\n. Thanks, Caridy. I've updated the docs, correcting the issue.\n. Thanks, Ren. I already fixed the problem. See the following page: http://developer.yahoo.com/cocktails/mojito/docs/intro/mojito_configuring.html#build-obj\n. [bz 5779384] Fixed doc bugs based on user feedback.\n. Thanks for catching that. I've corrected the link.\n. Related GH issue that was already closed: https://github.com/yahoo/mojito/issues/387\n. Sure, done! \n. Merged pull request #641 that fixes jslint errors in getting-started-guide examples.\n. Thanks for filing the issue! I've added the missing 'bar.hb.html' template so that the app works.\n. Thanks for filing this issue. I've corrected the code snippets in the \"Setting Up this Example\" section and added documentation for using context configs and the 'selector' property in the \"Implementation Notes\" section. In addition, the example \"Dynamically Adding CSS to Different Devices\" was also missing the context \"device:iphone\" and the 'selector' property in both the implementation notes and steps: both have been corrected. \n. Hi Dmitri, I'm discussing with team members what to do about 'docs/topics' now. Hope to have a solution soon. \n. Hi Dmitri,\nI've moved 'docs/topics/getting-started-guide' to 'docs/getting-started-guide' and removed 'docs/topics'. The 'docs/topics' were used to create more formal documentation, which meant the information was for the most part redundant, so it was better to remove the directory to avoid the confusion that you mentioned. I'll start working on the bugs for the getting-started-guide next. Thanks again.\n. Thanks, Dmitri. I've added the missing code for the controller. Thanks for reviewing the docs!\n. Thanks, dmitris. I've fixed the issue and also filed a GH issue (#649) to fix the issue with the model names. \n. I've updated the source docs, so you can view using regular expressions for routing at the following URLs:\n- https://github.com/yahoo/mojito/blob/develop/docs/dev_guide/intro/mojito_configuring.rst#routing\n- https://github.com/yahoo/mojito/blob/develop/docs/dev_guide/intro/mojito_configuring.rst#using-regular-expressions-to-match-routing-paths\nYDN seems to be making template changes, so I was unable to publish the latest docs on YDN. I'll get in contact with them and push them as soon as possible.\n. Great, I just published the doc to YDN. \n. Thanks for filing the issue. I've updated the docs: http://developer.yahoo.com/cocktails/mojito/docs/faq/#moj-params-controller-binder\nCan you verify that the information is accurate and clear? \n. Great, thanks for reviewing the updated doc!\n. Looks good. Go ahead and merge.\n. Removed the information on executing tests and linked to the twiki on how to run tests instead.\n. Sorry, I still want to review the changes. I am not sure why we are changing the title of the inter-mojit communication examples to \"Allowing Inter-Mojit Communication\". This does not follow the format for the other code example chapters. \nBasically, it's breaking the parallelism of the titles: \nConfiguration\nViews\nAssets\nData Access\nEvents\nInter-Mojit Communication  (Allowing... -> this doesn't follow)\nOther\n. Okay, sorry. I was glancing at the changes. Thanks, that's what it should be. \n. HI oshiwoshy,\nAre you referring to the Getting Started section in the YDN docs (http://developer.yahoo.com/cocktails/mojito/docs/getting_started/) or the getting-started-guide directory in\nthe Mojito GitHub repo (https://github.com/yahoo/mojito/tree/develop/docs/getting-started-guide)? I didn't see the error in the YDN docs, but maybe I'm missing something. Thanks.\n. Thanks, Joshua. I've corrected the issue in the source file for the documentation. YDN has just revamped their site, so I'm unable to update the docs right now. I've contacted the YDN team and hope to resolve the error as soon as possible. Thanks for catching that and filing this GH issue.\n. The documentation has been corrected and published to YDN. Thanks again. \n. +1\n. Thanks @lazybean for your pull request.\n. +1\n. Unfortunately, It doesn't seem to fix the problem with Y.log(\"message w/o specifiying log level in second parameter\") either. I installed 0.5.0pr5 and ran the sample logging app and again no message. \nI added 'console.log(cat)' to the 'mojito.js' seen below and saw that 'cat' is undefined when the log level is not specified.\n```\n  Y.on('yui:log', function (e) {\n        // we want to use Y.config instead of the original yuiConfig so\n        // people can switch that value on runtime for debugging\n        var c = Y.config,\n            cat = e && e.cat && e.cat.toLowerCase();\n    console.log(cat);  // => displays 'undefined' for Y.log(\"just a message, no log level\");\n    // applying logLevel filters\n\n    // If 'cat' is undefined, log(c, e.msg., cat, e.src) is never executed.\n    if (cat && ((c.logLevel === cat) || (c.logLevelOrder.indexOf(cat) >= 0))) {\n        log(c, e.msg, cat, e.src);\n    }\n\n```\n. Good point. It's implied, but it should be stated clearly. Let me close the PR, update my branch, and make another PR. Thanks, Caridy.\n. Hi Christopher,\nThanks for filing the issue. The \"Testing\" chapter in the documentation specifies that the '{app_name}/tests' directory is for application tests: http://developer.yahoo.com/cocktails/mojito/docs/topics/mojito_testing.html\nAre you looking at a different section of the documentation? I'll update that particular section or add clarification.\n. This has been fixed in the source file for the documentation: https://github.com/yahoo/mojito/blob/develop/docs/dev_guide/quickstart/index.rst\nI replaced 'mojito test' with 'mojito help' to confirm that Mojito has been installed. The Mojito documentation on YDN will be updated after some more changes have been made for the next release. Thanks for filing the issue. I'll close the issue once the docs have been updated on YDN.\n. Thanks, I've updated the range of versions of Node.js that Mojito can run on.\n. Thanks, Drew, you're right. I was having an issue using a mojit-level addon when trying to convert Ric Allinson's hybrid app to use Mojito v0.5, so I created my own example to recreate the problem. I recreated the problem, but the real problem was the registered YUI module name of the addon Once I change the registered YUI module name, the mojit-level addon works correctly. I'll have to take another look at the hybrid app. I'll close this (non)issue. \n. Thanks, jianlin! Could I ask you to make a couple of changes to your pull request?\nI would like to remove the space between the text and the asterisk. \nFor example, could you make the following changes:\n- addons * => addons\\* \n- default.json *  => default.json*\nThanks, again.\n. Thanks, jianlin, but, unfortunately, you have to escape the asterisk because it's adjoining the syntax for notating monospace text. Thus, addons' will  render _incorrectly, but addons_' will render correctly. I tried to make that clear in the example I gave you, but GH removed the escape symbol \"\\\".\nSo, if you look at the rendered page from your changes at https://github.com/jianlin/mojito/blob/4fb37c29483059f7703b4dcc28420de759717852/docs/dev_guide/intro/mojito_apps.rst, you will see that the backticks are displayed.\nSorry to ask you to make another change! \n. Hi jianlin,\nI made the change myself and added 'routes.json' to the list as well as added an asterisk to 'yui_modules', which isn't created by default either. I'll go ahead and close your pull request. Thanks again!\n. Hi Jianlin,\nI saw that the Travis build failed for some reason, so instead of merging your PR, I just made the change myself. You can see the updated docs on YDN as well as on GH: http://developer.yahoo.com/cocktails/mojito/docs/topics/mojito_testing.html\nThanks for helping to improve the docs!\n~Joe\n. Thanks, fixed!\n. I've added YAML examples to the configuration docs and a link to an npm module for converting JSON to YAML. \nSee http://developer.yahoo.com/cocktails/mojito/docs/intro/mojito_configuring.html.\nThanks for filing this issue!\n. Thanks for catching that, @rwaldura. I've fixed the problem.\n. Hi jianlin, \nWe call \"bar\" a mojit instance that can be used to call actions. These actions can be mapped to routing paths. That information is captured in the \"Getting Started\": http://developer.yahoo.com/cocktails/mojito/docs/getting_started/mojito_getting_started_tutorial.html#create-the-application\nThe intention of the quickstart is to just have the user install Mojito and then create and run an application. The getting started tutorial offers more details about what's going on.\nAs for \"foo\" becoming a variable useable in a template--that is only true in the case of using composite mojits, where the parent mojit can execute the child instance and attach the rendered child view to the parent's template. We are working on a more expanded tutorial that will cover composite mojits and the HTMLFrameMojit. Right now, we have a chapter in the \"Developer Topics\" book on the HTMLFrameMojit and composite mojits and examples. \n- http://developer.yahoo.com/cocktails/mojito/docs/topics/mojito_composite_mojits.html\n- http://developer.yahoo.com/cocktails/mojito/docs/topics/mojito_frame_mojits.html\nThe \"type\" property is part of the spec. You can file an enhancement issue to have an alias for \"type\" if you like.\nThanks,\n~Joe\n. I'm going to close this issue for now because the getting started discusses mojit instances and routing paths. Thanks.\n. Thanks, kinlum!\n. It worked fine for me, and when I search for a term that had no results such as \"zzzzzz\", the search page says that there were no results found. Closing bug. Thanks!\n. Thanks, Raj! The issue has been corrected.\n. Thanks, akshar100. You couldn't actually run 'make html' to build the docs before because we didn't have a Makefile that would call Sphinx. I am guessing that you used Shaker before as they had a Makefile that allowed you to build the documentation. In any case, I have added a Makefile and Sphinx config and template files so that you now can run 'make html' to build the docs locally. Thanks again.\n. @caridy The example is supposed to show that if you don't specify the log level in Y.log, the default (\"info\" in this example) defined in application.json is used.  Thus, explicitly specifying info or debug is counter to what that particular Y.log statement is trying to show. I'll fix the typo right right now. \n. Thanks, emersonmatsumoto! I've corrected the documentation.\n. Hi rmadhuram, I've updated the Shaker docs for you, but if you see issues with the Shaker docs in the future, please file an issue in the yahoo-shaker GH repository: https://github.com/yahoo/mojito-shaker/issues\nThanks again for helping to improve the documentation.\n. Thanks, Raj. I've fixed the link. Sorry if I asked this before, but for Shaker doc issues, can you file the issue in the Shaker GH repo (https://github.com/yahoo/mojito-shaker). \n. Great, thanks!\n. Thanks, Alex. I'll merge your PR and just rewrite/reword your description. \n. Thanks, I've updated the link!\n. I've updated the images to be more consistent and of better quality. Thanks for your feedback! @lmalberto\n. Thanks lazybean for the PR, but the method should be 'index', not 'init'. The 'init' method for controllers was deprecated a while ago, although it still exists for models. \n. Thanks for catching that, lazybean. I thought I had removed all references to the 'init' method in controllers when we deprecated the 'init' method in controllers, but I obviously missed one. I also grepped the rest of the doc source files and found only references to 'init' in binder code, which is valid. I also added 'ac.done' to the 'index' method as you suggested. Thanks again for your help!\n. Thanks, @lazybean. I've corrected the link.\n. I've updated the quickstart with instructions to install mojito-cli. \n. Thanks, fixed!\n. Thanks, fixed!\n. Fixed, thanks!\n. @isao I've made coverage a subsection of the testing section as recommended. As for the long option, I've changed the test to read \"with the long option --directory or an abbreviation such as \n--dir. I didn't want to over explain, and I find \"unambiguous abbreviation\" a bit confusing. \n. The quickstart was moved a while ago to the \"Getting Started\" chapter, but YDN just recently pulled the old quickstart from the site. You can view the quickstart at the following URL: http://developer.yahoo.com/cocktails/mojito/docs/getting_started/quickstart.html\n. @imalberto Thanks, the typo has been corrected.\n. Thanks, @oyving. I've updated the link in the page. Sorry about the confusion. The quickstart was a separate document at one point, then later folded into the Getting Started chapter. After the quickstart was published to a different URL, the original quickstart was not deleted from the server, and the links, which weren't broken because of the errant page), were not updated. The problem is hopefully resolved now. \n. Looks good, but I think we also need to document that the methods accessed through the data and pageData namespaces are available from the mojitProxy object.\n- http://developer.yahoo.com/cocktails/mojito/api/classes/MojitProxy.html#property_data\n- http://developer.yahoo.com/cocktails/mojito/api/classes/MojitProxy.html#property_pageData\n. Thanks, @lazybean. @caridy can you take a look at my updated draft? I added short explanation and a code snippet using onRefreshView. Thanks!\nhttps://github.com/zhouyaoji/mojito/blob/docs_onRefreshView/docs/dev_guide/intro/mojito_binders.rst#refreshing-views\n. Great, I've updated the documentation on YDN as well. Thank you!\nhttp://developer.yahoo.com/cocktails/mojito/docs/intro/mojito_binders.html#refreshing-views\n. @lzhan I've added the module apps and tests. Can you take a look at them and let me know if I need to make any changes? Thanks!\n. Thanks, the link has been corrected!\n. Thanks, the module name in the boilerplate code created for model changed, so the tutorial should have been updated but wasn't. I'm in the process of updating the tutorial now. I apologize for the error. I'll have the updated documentation published as soon as possible. Aside from the error, please let me know if you have other feedback. \n. +1\n. Thanks nccuMis, I've fixed the type.\n. This PR is intended to fix issue #1253.\n. @Caridy Thanks for your comments! I'll make the log statements more consistent, confirm that I'm not wrapping each result in a <ul> element, and have the children use an ac.error instead of using an error template. I'm going to leave the caching mechanism in place. We should file an issue to correct that.\n. @caridy I removed the error template and used ac.error instead, which will just show the errors in the server logs. I also cleaned up the Y.log statements, and corrected the templates so that not each result is wrapped in <ul> tags--you were correct as usual. Anyway, let me know if I can go ahead and merge the changes. Again, we can file an issue to fix the caching next. Thanks again!\n. Thanks, fixed.\n. @lzhan Updated trib app to use live data by default but mocked data when the query string parameter environment=development is passed to the app.\n. @lzhan I updated the middleware to only use the environment:development context when given the query string environment=development, so the apps will run in the default context and get live data. For the tests, I updated the descriptors so that the applications are pinged with the environment=development query string parameters and then return the mocked.\n. Hi Jithin,\nThe Arrow test code works, but the instructions for running the tests was missing a step for starting the Arrow server. I corrected the steps for running the Arrow tests and went through all the steps again and had no issue running the functional tests. I was using Arrow version 0.0.87. \nThanks.\n. @caridy Strange, I only updated the documentation, but I'll take a look at the build failure and try to figure out what went wrong.\n. @imalberto The documentation now discusses the naming convention for modules, which was included in the last PR when updating the documentation. \n. @imalberto Sure, no problem.\n. @imalberto Sure, I'll add new lines to app.js, check the app causing that functional test to fail, and look for any middleware configuration in application.json files. Also, I realized that the package.json files for the examples are not correct either. I'll update the PR as soon as I can. Thanks!\n. @caridy The middleware section in mojito_appjs.rst points to the middleware section of mojito_extensions.rst, which gives more detail. Is this expansive enough? https://github.com/yahoo/mojito/blob/develop/docs/dev_guide/topics/mojito_extensions.rst#middleware\n@caridy @imalberto  Thanks for your feedback. I'm going to create a separate chapter called \"Routing\" that will cover defining routing paths in app.js and add a deprecation note to the routes.json documentation in mojito_configuring.rst. I'll also note that regular expressions are no longer supported in routes.json. I'll try to have this PR updated by tomorrow. \n. @imalberto @caridy I added a chapter for defining routing paths in app.js called mojito_routing.rst, deprecated the routes.json section in mojito_configuring.rst, and replaced example routes.json with equivalent routing paths set in app.js. There are a lot of changes, but I am mostly concerned with the new chapter mojito_routing.rst and mojito_configuring.rst. \n. @caridy I didn't delete any of the routes.json files in the example code.  I thought it best to wait for the time when the file is no longer supported to delete it.\n. @imalberto @caridy Great, I was able to use the Url addon after registering the routes with app.get. I'll update the documentation and add the generating_urls example/test again.\n. @imalberto @caridy I added and an updated generating_urls example/documentation, the tests, updated the file mojito_routing.rst to include how to make URLs w/ the Url addon and registering routes w/ app.map. See the last commit: 154edc2d84b39eb7500298d2539c075ea0f80a11\n. Thanks, rewrote the sentence.\n. I created a new section that explains how to pass data to the parent template. I also didn't like using the property 'title' because users might confuse this with passing the value for the HTML  element, which is not what is happening.\n. Sure, will do. Thanks!\n. To be consistent with the other sections, I'll mention the default location in the into and mention that you can use the options --directory or --dir to specify a directory. There will be an example below with a short explanation. I think that should be sufficient. \n. Thanks, Isao, the documentation does state that \"Mojito will send the\nbinder file  {action}.js with the response body, where {action} is the controller action\nmapped to the request URL.\" Is that clear enough? \n. It seems kind of redundant to have the sections \"Location\" and \"Naming\" include the same information. I'd rather either consolidate the sections into one or just make the naming convention more conspicuous in the \"Naming\" section. I'll try both and see which solution is better. Thanks!\n. This is explained in the \"Paths\" section as well. I also created a separate section about how to use the paths that stipulates the ways and links to the sections in the docs for using the HTMLFrameMojit, using the static URL in templates, and dynamically attaching assets. \nI think I'll just merge \"Location\" and \"File Name\" to \"Pathnames\" in this chapter. I have been using \"Location\" and \"File Naming\" throughout the documentation, but \"Pathnames\" would at least not be in conflict with the rest of the documentation.\n. The returned data object will have the results or an error object. The error template displays the error, which is not desired effect in production, but for an example app, it makes it easier to view errors. If you use ac.error, the child mojit's template will simply not be rendered, but the error will show up in the server logs. Just using ac.error might be the better solution though. \n. The caching implementation was created by the YUI team. I don't include it in the tutorial. Can you file a separate issue for this? Thanks.\n. The lang bundle is just used by the PageLayout mojit for the top-level heading as an example. The child mojits do not perform localization. \n. The index template also handle the case where no results are shown; thus, I didn't want to have a <ul> if there were no results, but it shouldn't wrap each result with a <ul>. but I'll confirm and make changes if needed.\n. Will do. Thanks!\n. Thanks, I went with your suggestion.\n. Yes, I did. I talked to Isao, and he said that mojito create uses the archetypes in the mojito-cli-create package, so the archetypes in the mojito source are obsolete. I'm closing this PR and opening a new one that has removed the archetypes directory to avoid future confusion.\n. Thanks, @clarle, I'll add that to the documentation.\n. It's available, but does not work unless you attach the routes from routes.json, at least that's what I discovered when testing the Url addon. I'm not sure how we want to handle this problem (feel free to confirm), whether it's through documentation, filing an issue, or removing the addon. \n. @caridy Can I merge this PR and file an issue or shall we wait? \n. Okay, no problem. FYI, this is blocking the hand-off and the GA of v0.9. Thanks.\n. ",
    "drewfish": "Instead of just passing static configs to init(), I'd like instead to pass a \"model context\" (or \"model proxy\").  The configs (app or mojit) can be gotten from this proxy.  This would be a larger change though -- a bit of an architectural change.\n. I didn't find any documentation addressing this specifically. I do notice that if a model as an init() method it is passed a single parameter which contains the instance config.  (The instance config is a merge of the spec (as found in application.json) and the defaults.json.)\n(Not sure why this issue got closed as an accepted pull request... :confused: )\n. The init() method is called automatically by the mojito as the model is created.\nOne approach is to pass the config you want to each method of your model as needed, something like model.foo(config, ...).  You can get the config similar to what you were doing with ac.config.  However, ac.config is an API object (and it only exists if your controller depends on the mojito-config-addon).  You'll need to pass the results of ac.config.get() or ac.config.getAppConfig().\n. Here's the API documentation for the ac.config addon:\nhttp://developer.yahoo.com/cocktails/mojito/api/classes/Config.common.html\n. Generally if you want to define a config for the whole application you want to put it into application.json.  Then you can use ac.config.getAppConfig() to get those values out.\n. There is already some config variables for this (see \"cache\" and \"maxAge\" in \"staticHandling\" in application.json).  Not sure how well it works though :(\nThere's also an idea (filed separately) to give user-provided middleware access to the ResourceStore, which would be enough for them to write their own customized static handler.\n. The language bundle handling is especially an issue.\n. This was completed a while ago.\n. I'm pretty sure this was fixed in commit 8d4ce645 (though that function was later renamed to validateContext()).\n. This looks to be a duplicate of issue #50.\n. With the YCB support, I don't think we need to do this anymore.\n. Closing.  Please reopen if you feel it is still needed.\n. Probably that when dispatch() (which is what runs a mojit) calls store.expandInstanceForEnv() (which is what calculates all the resources needed to run the mojit) and there is an error, that dispatch() doesn't return the error appropriately (or doesn't catch the exception), eventually leading to neither ac.done() nor ac.error() being called.\n. See https://github.com/yahoo/mojito/blob/develop/lib/app/autoload/dispatch.common.js#L118\n. Reopened, since it is still a valid problem.\n. Closing, since the latest thinking is to build mojito more on express.\n. We spawn a java process to generate instrumented code for code coverage, in app/commands/test.js.\n. This was an internal code factoring task, and the associated bug (4647457) has expired.\n. Installing from the NPM registry works fine.  I just tried installing from the github repo too, and it worked.\ngit clone git://github.com/yahoo/mojito.git\ncd mojito/source\nsudo npm install -g .\nnpm ls -g\nI'm using npm@1.0.106 and node.js version 0.4.9.\n. Please reopen with details of the steps you are taking if you are still running into trouble.\n. I think we should take a different approach.  I think that Mojito should make it easy for people to implement their own equivalent of HTMLFrameMoijt.\nIf you look at HTMLFrameMojit today, it is doing two things:  putting Mojito client in the page, and putting other assets in the page.  That's it -- those are the only things that HTMLFrameMojit is doing that has anything to do with the Mojito framework.  Any special logic beyond that is specific to each application, and should be done in the application code, not in Mojito.\nOf the two Mojito-specific things that HTMLFrameMojit does, deploying the client into the page is already pretty straightforward.  (It's a single call to ac.deploy, guarded by a check on the \"deploy\" flag in the config.)  That means Mojito just needs to provide an easy way to put the assets in the page.  (I think a clean approach to doing this would be to take that current logic from the HTMLFrameMojit controller and move it into the \"assets\" AC addon, probably into a method called renderAsHTML(location) or something like that.)\n. Nice and clean.  Thanks for including a unit test too!\n. Some folks on the Mojito team think that we should re-design how mojito start works.  Currently it's much more convoluted than it perhaps should be.  Once it works a lot simpler, it'll hopefully be much easier to tweak to do what you want on a case-by-case (app-by-app) bases.\n. I'm hoping that the Mu upgrade will fix this too.  (In my mind this is just an issue with the templating engine (mu) and not with the Mojito framework.)\n. I would prefer that the manifest and index.js get fixed, instead of just being commented out.  (I dislike code that is just left commented out, -especially- when no reason is given in the comment for why it's commented out.  This behavior leads to a messy code base, unfortunately.)\n. If this PR just contained the context bug fix, it would likely be applied fairly quickly.  The changes about removing index.js (will this break existing users?) and the \"manifest\" file (is there other code that makes it?) complicate the situation considerably.\n. I'm closing this as a duplicate of issue #139.\n. This PR has a bunch of commits that don't appear to be related (probably because it's so old). Could you perhaps create a feature branch for the delta and create a new PR from that?\n(Apparently a github PR is locked to the branch, not commit, so further changes to the branch (your \"develop\" branch in this case) will become part of the PR as well.  You can get around this by creating a separate branch for each pull request.)\n. Sorry, I didn't mean to let this pull request linger so long.\nIf you made a pull request that just added handlebars, it would likely be accepted pretty quickly.\nThe ac.partial.compiler() stuff worries me.  I'm worried that it is taking Mojito in the wrong direction.  If/when Mojito supports \"partial\" (which I think of as \"includes\") in templating engines, that shouldn't have to involve the controller (or even addons or ActionContext) -- it should just work (from the view of the developer using Mojito).\n. This was fixed in commit 4ff4d43.\n. This PR has a bunch of commits that don't appear to be related.  Could you perhaps create a feature branch for the delta and create a new PR from that?\n. Clean version is pull #171.\n. I think we have a preference to update the mustache library outright, pull request #116, rather than try to patch an old version.\n. +1 to the idea.  (Will review later.)\n(This indicates the value of this idea:\n+ 55 additions\n- 1,826 deletions\n)\n. That might be fixed by pull #157.\n. This looks like it's mixing two things.  If it contained just the handlebars support, it would likely be merged fairly quickly.\n. Looking in lib/app/autoload/route-maker.common.js it looks like the default regex for :token matches is [^/]+ so I'm surprised it didn't work for you.  Given that, I suspect that a custom regex won't help (though it's worth a try).\n. In Mojito there is no default view engine.  The view engine that matches the view (mu for .mu.html views, and handelbars for .hb.html views) is used.  This also means that you don't need to specify engine: in ac.done() -- as long as there's a view engine that matches the .{ve}.html part of the view then that will be used.\n. I think it should still work with the new resource store.  The new store continues to set 'binder-url', 'binder-path', 'binder-module', 'binder-yui-sorted' in the mojit instance.\n. @FabianFrank That's how Mojito works today.  If you say ac.done(..., {view: {name: 'index'}}); it will use the index.iphone.js binder for iphone users.\nWhat the original request wants is a way to use a binder that doesn't match the name of the action.\n. +1\n. Binders always have client affinity, so the affinity should not be specified in the binder's filename.\n. nice, thanks!\n. The workaround encorporates into Mojito the fix that will eventually go into YUI:\nhttps://github.com/yui/yui3/commit/5fcddf2efbc9645d24058b40550bc013783f8444\n. +1 to the idea\n. I think the key should be \"viewEngine\" only if the config details apply to all view engines.  (Our \"mu\" view engine is just one, there can be others.)\nNote to implementer: it looks like Mojito instantiates the ViewRenderer in the following three places, all of which have access to the application config:  app/addons/ac/output-adapter.common.js, app/addons/ac/partial.common.js, and app/autoload/mojito-client.client.js.  It seems like the approach is to change the API for ViewRenderer and the view engines to take config from application.json.  (Please use an \"options\" argument which is an object, so that we can add new things later without relying on argument order.) This API change will likely be a backwards-compatibility breaking change, but it should affect a minority of users (only those who've written their own view engines).\n. @caridy:  I agree with your assessment.  The fixup should be done in the mojito-handler-tunnel middleware.\n@mojit0:  The \"DaliProxy\" mojit is just a proxy mojit -- it has very little to do with Dali.  It's used as the proxy mojit by the mojito-handler-tunnel middleware.\n. +\u221e\n. This issue should probably move to https://github.com/yahoo/ycb/issues.\n. The current approach is nice because it allows the caller of YCB to deal with filesystem issues (sync vs. async, etc).  However, it doesn't allow for the \"include\" feature that we'd like to add.\nIf we change YCB to read the files itself, the interface will have to be asychronous of course (perhaps optionally sync as well).\nUsing the object-oriented interface, we could perhaps get both approaches:\n``` javascript\nvar ycbfile = new YCB({...options...});\nycbfile.loadJSON({...json...});\n/// --- or ---\nycbfile.loadFile(path, callback);\n/// --- or ---\nycbfile.loadFileSync(path);\n/// --- then later\nvar config = ycbfile.read({...context...});\n``\n. Even with specs-defined-in-the-mojit (which is possible today in fact), I think there might be a good usecase for splitting theapplication.json` into parts.\n. +1.  I think this is the right thing to do, and the right place to do it.\n. You can have the middleware attach the data to the request object, then have the controller use the \"mojito-http-addon\" and call ac.http.getRequest() to get that request object.\nIdeally Mojito would have an official way to support this.\n. Yes.  The new RS has a validateContext(ctx) method, and uses it liberally.  That method throws an error if the context keys/values aren't found in dimensions.json.\n. Check out the new mojito-data-addon available in 0.5.9pr1.  It can expose data as either ac.data.set(name,value) or ac.pageData.set(name, value).  For pageData, that info is available to all controllers in the request (once set) and is available to all binders on the resulting page (as mojitProxy.pageData.get(name)).\n. nice\n. Hehe.... just as Mojito is trying to learn some things from YUI App Framework, it is trying to learn some things from Mojito.  The two teams are working together.  It's still just a bunch of ideas -- nothing is final yet.\n. I think what @caridy is saying (please correct me if wrong) is that using a Y.Model for a Mojito Model is optional.  You can still use a normal Mojito Model, or other thing, if you want.\n. @ericf Well, the trick about Mojito Models is that Mojito actually gives no prescription on the structure or semantics of a Model.  They don't even have to have methods!  So to say that \"Mojito Models are data services\" is inaccurate.  Mojito Models aren't anything, just a place in the Mojito framework for a user to put functionality, and we suggest that they put \"model\" functionality (whatever that means) there.\n. @caridy That's fine.  I agree that we likely want to update our documentation to primarily discussion Y.Model.\n(The fact that other types of code/objects can be used is really an advanced feature, specifically so that Mojito has an out to deal with concerns like @Satyam raises.)\n. @Satyam You've clearly communicated your reservations about Y.Model.  We've heard you.  In Mojito, you can use Y.Model if you want, or use something else if you want.\nThis issue is probably poorly named.  It should instead say \"Mojito model should allow use of Y.Model\".\n. Yes, we do plan on endorsing Y.Model.  It does work for many people.  If anyone wants to use something else that is possible too.\n. I agree it would be good to have this ability.  It shouldn't be hard -- probably just a matter of documenting how to do it.\n. I actually prefer a different approach, where Mojito makes it easy for anyone to write their own replacement to HTMLFrameMojit.  (HTMLFrameMojit doesn't really do that much that is special.)  In Yahoo, we already have a couple of teams who've written their own custom versions.\n. I hope to get this merged this week.\n. Yes, we're thinking about doing exactly that.  (See pull request #179.)  It'll take a little bit for that to fully happen, since all of our docs and examples are currently using mu.\n. In the past, it was an architectural decision that Mojito would allow multiple view engines, and not just one (mu).  Unless there's a strong argument otherwise, I'd like to keep this.  Keeping this flexibility means that users aren't stuck with handlebars if something better comes out in the future -- the user can use whichever they want.  (It's pretty easy to wire a new view engine into Mojito.)\nFWIW, Mojito already supports compiling view by using mojito compile views.  This is something that needs support from each view engine (hb, mu, etc).  I agree it would be nice if Mojito did something like this automatically (to reduce the number of HTTP requests).\n. I think I understand what you're saying.  In today's Mojito, you should be able to create a view engine that implements exactly what you describe :)\n. Alas, I didn't try.\n. incorporated in PR #327.\n. +1\n. still +1\n. yay!\n. Does the NPM community have a standard on how to ship NPM modules to the browser?  The special sauce of Mojito is that much of the framework and application code runs in both the server and client.  We currently do that using YUI modules, but yeah, if there's an NPM standard for that, that would be a more broadly used/understood standard and would be a better choice just because of that.\n. +1\nHehe... I would say we don't need to write unit tests for the external libraries we use, but as long as we have the tests already, why not...\n. +1\n. +1\nMojito.common.js should go away in my mind. (The only place Y.mojito.version is used is in HTMLFrameMojit controller.  Given that the version number is significantly out of date, I don't think anyone would mind if we just dropped it altogether.)\n. Can't cleanly merge.  I'll cut a new PR when that's available.\n. After all the changes from the code review, I ran another \"fork\" build.  Build 67 passed, except for that single test as mentioned before.\n. As mentioned in the original PR, this is related to bug #259.\n. @mridgway I think you have a very good point.  We should have a complete answer for the integration before we take any steps (so that we take the right steps).\nThe assumption is that Y.Models are also useful for the controller.  However, that's very much from the \"classic mojito\" point of view, and doesn't take into account things like you've mentioned.\n. Closing this, since the plan is to merge this work into the yaf-develop branch, which is PR #370.\n. +1\n. @FabianFrank I was thinking the same thing.  I think fixing this will require the following (all in store.server.js):\n- early during preload(), we need to calculate the currently-running Mojito's version\n  - should go in this._config.mojitoVersion (already exists)\n  - should come from this._config.mojitoRoot + package.json\n  - don't use _preloadPackage(), since that has significant side effects\n- in _preloadPackage() when info.pkg.name is 'mojito, check whether info.pkg.version matches this._config.mojitoVersion\n  - if doesn't match, skip that package at least, probably emit a warning, perhaps emit an error\n. @isao Sure, but I think there is a runtime issue as well.  If global-mojito is run, and the local-mojito is a different version, mojito can/should detect that and give a warning/error.  That's what my big suggestion was about.\n. -1.  The diff confuses me, since it seems to say that mojits/Foo/lang/Foo_en.js isn't for language en.  That doesn't seem right.\n. I think the heart of the problem is that Mojito doesn't (currently) allow shared mojits to define language bundles.  Perhaps that is what should change.\n. I can imagine both .client. and .server. versions being exactly the same, except for the implementation of the _loadTemplate() method.  (That should have the same signature in both versions.)\n(Hmm... and come to think of it, ideally _loadTemplate() would be some implemented in a utility lib somewhere, since I can image that every view engine would need to have something like _loadTemplate() with separate implementations for client and server.)\n. Oh, and if we can make is so they're the same except for the implementation of _loadTemplate(), then the two test files can just be a single one with .common. affinity.\n. Yeah, I think the template-loader should be a future refactor.\nI'm going back-and-forth whether render() and compiler() (and precompile()) should just be passed the template contents, of whether it should use a \"utils\" library for loading the template.\nAt this point, I favor the latter, because:  (a) it's a generic \"loadFile()\" method that does the right thing for each environment, whether passed a filesystem path or a URL, and (b) future rendering engines might support partials/includes, which means that they'll have the file paths to load besides the root template.\n. Yeah, that's what the mojito compile views command does.  It's up to the user to decide which approach they wish to take.\n. I agree.  This PR has uncovered a lot of good ideas, but they shouldn't/can't be implemented as part of this pull request.\n. @capecodehq Can you post here the value of staticHandling.prefix that you are using?\n. I mostly agree.  However, there is a user-training/documentation component (since users will need to install mojito with the -dev flag).\n. Ah, great.\n+1\n. The res.url should definitely have the staticHandler.prefix attached.  If not, that's a bug elsewhere, and not a bug in commands/build.\n. Look in app/addons/rs/url.server.js, that's the only place that each resource's URL is set.  It's possible that there's a bug elsewhere that is preventing addon-rs-url from getting the right appConfig.\n. Oh, addon-rs-url is just using the static appConfig, so the URLs aren't context-sensitive.  That is definitely a bug (and be the bug you're running into).\n. :metal: ship it\n. No, Mojito doesn't really do anything with the models, just manages them a little.  It is actually up to each controller to use the model as they see fit.\nI'm strongly tempted to close this PR, since I think Caridy's proposal is cleaner/better.\n. I'm actually +1 for Caridy's suggestion too (despite authoring this PR).  What he suggested is the simple, natural way to use YUI modules (not matter what type).\n. Closing this PR as \"won't implement\".  The natural YUI module should be used instead.\n. +1\n. I like this feature, since it allows users to customize how the view engines run.  So I propose we pass the options to Handlebars.\n. @yemanet What version of mojito are you using?\n. @rwaldura That's unknown, since the root cause of #358 is unknown.\n. The \"model factory\" confuses me.  As far as I know, there is no such thing in Mojito.\n. will port to javascript\n. +1\n(will be painful to deal with the merge conflicts, but it is a valuable cleanup)\n. +1\nThe new run.js looks real nice.\n. well done, travis sir\n. Wouldn't this be contrary to the way YUI modules are usually authored?\n. You can fix this using the builds.html5app.forceRelativePaths in application.json.\nhttp://developer.yahoo.com/cocktails/mojito/docs/intro/mojito_configuring.html#html5app-obj\n. I have a start of this here:\nhttps://github.com/drewfish/mojito/commits/rs-contents\nIt needs more unit tests.\nAlso, I think mimetype calculations need to be done a bit differently.  They should probably move to an RS addon, so that they can be done at server-start time (and so that other addons, such as one that stitches in sass or less, can tweak them).\n. You can find it here:\nhttp://somefancy.com/drew/mojito/pkg-sass.tgz\n. @dferreiroval that would be awesome!  I'm inclined to rip out this feature once shaker has a better version.  I'm not sure if we need to fix this in the mean time, since I'm not sure how many users are using mojito compile inlinecss.\n. I think the readme will fix itself one a package gets published that has the new directory structure.\n. What's wrong with the description ?\n. The dist-tags.stable should probably be 0.3.30 and .latest should probably be 0.4.2.\n. What's wrong with contributors?\n. I think users is something that the NPM registry generates, and is not under our control.\n. I think maintainers comes from npm owner ls mojito -- that is, those folks with permission to publish the package.\n. Without looking in detail at this yet, a comment and a question:\n- This PR seems to also include removal of examples/sandbox/, which should really be a separate commit.\n- Has this new approach been tested by deploying an app to Manhattan?\n. If this works on all the hosting environments (open-source, plus our internal Manhattan), then +1.\n. +1\n(no code changes, so not sure why travis is so unhappy)\n. I think this is already addressed by \"yui\": { \"base\" } in application.json:\nhttp://developer.yahoo.com/cocktails/mojito/docs/intro/mojito_configuring.html#yui-obj\n. @gvaish The base value is limited, in that it can point to any file in an assets/ directory.  The documentation on assets should have details no that.\nHowever, the base isn't enough to handle combo URLs.  Combo URLs are strongly desired, since they perform significantly better (and are what is used in production as well, for that very reason).\nI'm renaming the ticket from \"Offline YUI Serve\" to \"Serve YUI from Mojito Server\".\n. (I have an experimental/hacky approach to this here:\nhttps://github.com/drewfish/mojito/commit/ca2f559\n)\n. Is there a unit (or functional) test for this?\n. I think there's already a setting to fix this.  The problem is more complicated than just adding a \".\", since the HTML file could be built at foo/bar/baz.html, in which case the static URLs should be prefixed with \"../..\".\nSee forceRelativePaths here:\nhttp://developer.yahoo.com/cocktails/mojito/docs/intro/mojito_configuring.html#html5app-obj\n. This looks like a bug in Mojito. (At one point, it had a check to skip making the rollups for the mojits that ship with Mojito, for exactly the filesystem issues you ran into.)\nWhat version of Mojito are you using? This is hopefully fixed in that latest version (0.4.2).\n. travis build fails on only one node version (0.8), due to errors we've seen (transiently) in other builds\n@travisbot please try again\n. +1\n. +1\n. What version of Mojito?\n. @dferreiroval is this to fix issue #438 ?\n. Yeah, this PR doesn't look right.  The action should be attached to the command, and that should be sufficient.  (We shouldn't have to add the action to the instance.)\n. Yeah, 646 files changed :smile:, which makes me wonder how many files left haven't changed.\n. The unit tests (both kinds) pass when I run them by hand.  Haven't figured out how to run the functional tests yet though.\n. +1\n. Is this the approach that YUI uses for their travis builds?\n. From the travis logs:  make: *** No rule to make target 'npm'.  Stop.\n. I got this error:\nshifter --config build-npm.json\nmake: shifter: No such file or directory\nmake: *** [npm] Error 1\n. Also, after cloning the YUI repo into yui-src, it doesn't appear to checkout the 3.x branch.\n. Should this have a unit test as well?\n. Travis failure is our recurring intermittent mojito-mu-tests error.\n. The models config should be a top-level part of the spec (not inside config), as in:\n``` javascript\n[\n    {\n        \"settings\": [ \"master\" ],\n        \"specs\": {\n            \"foo\": {\n                \"type\": \"Foo\",\n                \"models\": {\n                     \"m1\": \"ModelXYZ\"\n                },\n                \"config\": {\n                }\n            }\n        }\n    }\n]\n```\nThis is because the config is meant only for the controller. Anything that is for the framework (such as type or deploy) is a sister to config.\n. Besides that spec.config.models to spec.models change, +1.\n. We should change the store to do the right thing. specs is user-facing configuration, and we should be focused on giving a good API to the users, and fix up our implementation to support that good API.\n. +3\n. +1\n. False-positive?  I'm seeing the following in job 157.1:\n1217TypeError: Cannot call method 'createElement' of null\n1218 at /home/travis/builds/yahoo/mojito/node_modules/yahoo-arrow/node_modules/yui/dom-core/dom-core-min.js:7:262\n...\n1228[2012-09-06 07:25:37.570] [ERROR] NodeDriver - Failed to get the test report\n1229[2012-09-06 07:25:37.572] [ERROR] Arrow - Failed to get the test report, Controller: /home/travis/builds/yahoo/mojito/node_modules/yahoo-arrow/lib/controller/default\n. In the func tests of job 157.1, there are a bunch of descriptors that don't seem to be running any tests. For example, line 1601: 0 Passed, 0 Failed , 0 skipped. I don't know if this is OK or not.\n. +1\n. This was introduced in PR #456.  I'm looking into it.  If I can't get it resolved by Monday, we should consider rolling back #456, so that we can cut a release.\n. Note that merging this PR will mean that Shaker2.0 (still) doesn't work with Mojito 0.4.x.\n. I think the perf implementation could be cleaned up a lot.  For example, that store variable is worrying. I'd prefer to see a single object, created for each request, that contains the details for just that request.\n. Travis failure is the standard \"mu\" failure.\n. huge changeset, only did a quick review.  +1 to changes I saw.\n+1 to four bullet points above.\n. I'd prefer instead if there was a perf.logFile setting, which gives the logfile name. (It is still put in artifacts/perf/.)\nI think the line format should be:\ntype | requesstID | start | type-specific | group | label | id | desc\nThe type-specific is different for each type:  for MARK it is empty and for TIMELINE it is the duration.\n. I think having multiple files will make the analysis harder.  Having one file per \"run\" (where each run is multiple requests, perhaps each run being a separate version of mojito) seems the natural way to group things to me.\n. Yeah, the --perf path/to/file.log looks nice.\n. Default should be artifacts/perf/perf.log, or perhaps ../log.\n. Good question.  My first thought is that we should append, but you're right about the requestId.\nOne idea:  a separate file for every server-start (filename has start timestamp).  I generally wish to avoid creating a huge number of files, but this might be a good compromise.\n. OK\n. Looks good pretty good, though some cleanups are needed. We could merge it into search-perf now, and cleanup when search-perf merges to develop. (search-perf, in general, needs a bunch of cleanups before hitting develop.)\n. Closing as \"wontfix\", since this is taken care of by shaker.\nFor further discussion of shaker's features, it be best to hold those discussions on shaker's github issues.\n. +1\n. +1\n. Closing this, since changes related to performance should be made to the \"search-perf\" branch.\n. In the \"develop-perf\" branch (which perhaps will become mojito@0.5), the ControllerContext is no longer used.\n. +1\n. I think the idea was to have a getter instead, as in ac.models.get('foo') to return the model.\n. The config AC addon will be breaking BC as well (and it has to).\n. I'm going to merge onto search-perf, since it's needed there too.\n. lgtm.  I will merge after team is done doing a perf run.\n. closing, since I'll issue a different PR against develop-perf\n. travis build fails -after- mojito jslint succeeds\n. Yeah, this is a redo of PR #509.\n. Without /*stupid:true*/ I get Unexpected sync method errors.\n. I looks like we have a bug in our examples where the binder tests are \"common\" affinity when they should be \"client\".\n. +1\n. +1\n. See mojito help jslint for more details. (Every mojito command has a mojito help which explains the command.)\n. It looks like the view engines are no longer getting viewEngineOptions when run on the server.\n. Could you perhaps add a test, to make sure that viewEngineOptions doesn't get lost again in the future?\n. +1\n. I worry about the missing loader.  In the past, the loader was used to make sure that all YUI modules needed to dispatch the mojit are loaded, before the actual dispatch happens.  This is especially important on the client-side, where a mojit could be dispatched which wasn't one of the mojits in the initial page generation.\n. Ah, good point.  It does update dispatch.common.js, but just as cleanup, not changing the implementation (from the previous commit).\n. +1\n. +1\n. Hi Dmitri,\nThis looks great!  We're already doing a lot of /*jslint anon:true, sloppy:true, nomen:true, node:true*/ in other places in Mojito, so that approach is valid.  (If we change our mind about that, we'll have a lot of other things to change as well.)\nOne thing:  so far in Mojito we've been trying to honor plusplus:false, so that means changing the for (...; ...; i++) to for (...; ...; i += 1).\n. The following examples have jslint errors:\n- developer-guide/binding_events\n- developer-guide/configure_routing\n- developer-guide/device_views\n- developer-guide/framed_assets\n- developer-guide/framed_config\n- developer-guide/generating_urls\n- developer-guide/hello\n- developer-guide/htmlframe_mojit\n- developer-guide/inter-mojit\n- developer-guide/locale_i18n\n- developer-guide/model_yql\n- developer-guide/multiple_mojits\n- developer-guide/scroll_views\n- developer-guide/simple_assets\n- developer-guide/simple_config\n- developer-guide/simple_logging\n- developer-guide/simple_view\n- developer-guide/using_cookies\n- developer-guide/using_parameters\n- getting-started-guide/part2/basic_yql\n- getting-started-guide/part3/intl-templates\n- getting-started-guide/part4/paged-yql\n- getting-started-guide/part5/flickr-list\n- input/cookies\n- input/get\n- input/merged\n- input/post\n- input/route\n- performance/string\n- sandbox/bindercomm\n- sandbox/binderrender\n- sandbox/bindertime\n- sandbox/controller-state\n- sandbox/lazy_load\n- sandbox/metabubble\n- sandbox/server_side\n- sandbox/strangeloop\n- sandbox/view_refresh\n- sandbox/yuiconf\n- simple/part3\n- simple/part4\n- simple/part5\n- simple/part6\n- simple/part7\n- simple/part8\n. We still have a lot of examples that are failing jslint.\n. +1\n. +1\n. I think we can't assume that viewEngine will only vary based on environment. Oh... hmm... ac.app.config doesn't prevent that, since it's contextualized.\n+1\n. You could instead have a route for /robots.txt that invokes a mojit, but that's probably overkill for most cases.\nI'd prefer a solution that allows that to happen, but we can go with this for now, and tweak it later.\n. Missing unit tests for ActionContext.\n. Also, now is a good time to remove the commented-out code in app/autoload/action-context.\n. The action & ID are already part of the cache key, as part of the fakeInstance.\n. +1\n. How does the code in mojito-perf (real implementation) get loaded in?  If it's via YUI requires:[], that means that if one module somewhere has a requirement on perf then every module starts logging perf.  That seems a little odd.\nAnother approach is to automatically load mojito-perf if perf is set in application.json.  This could perhaps be accomplished by adding mojito-perf to CORE_MOJITO_MODULES in index.js.\n. Need unit test for the new readConfigSync() method.  Also need unit test for reading YAML files.\n. Lint error:\napp/addons/ac/output-adapter.common.js\n   1 123,80: Unexpected space between '}' and ')'.\n     meta.assets = Y.mojito.util.metaMerge(meta.assets, config.assets || {} );\n. Unit tests pass.\n. lint passes, unit tests pass, +1\n. Actually, there's a process for updating the version (built into the release process), so this pull request is invalid.\n. jslint and unit tests pass\n. I agree with the idea, but the proposed code isn't quite right, since without calling _setYUIDependencies() calling _precomputeYUIDependencies() is wasted effort.\nWhether we need to call _precomputeYUIDependencies() or not depends on whether we intend to keep support for dependencyCalculations:precomputed.\n. Yes, I agree.  However, the code in this pull request isn't right.\n. +1.  If any issues come up we'll fix forward.\n. This is missing child.config which is very important I suspect.\n. I think child.config is needed by other users.\n. Besides two small comments, +1.\n. +1\n. +1\n. Hi @bthaeler,\nThe develop-perf branch just went away, and github auto-closed pull requests against it.  You'll have to redo this pull request against the develop branch.  Sorry about this.\nDrew\n. +1\n. +1.  I think that store.server.js should probably be using yui-sandbox instead, for when it uses Y.Loader.\n. For finding custom archetypes, I would have preferred if it used the resource store (store.getResources('server', {}, {type:'archetype', subtype:archetypeType})), so that archetypes delivered by NPM modules could be easily used.\n. OK cool.  I don't imagine that anything in this PR will block future use of archetypes delivered via NPM modules.\nSo, +1.\n. Looking at the express@2.5.2 code, it looks like it implements a res.send() as a wrapper around res.end() which is part of http.ServerResponse.\n. +1\n. +1\n. +1\n. +1\n. +1\n. Some small small questions, even without answers +1.\n. +1\n. I don't think we need to change the name of the function.  In my mind getController() works well for both cases (create or return singleton) -- it's just a factory.\nLater we can add a configuration option so that config in application.json (or perhaps even in the mojit's definition.json) can decide whether a new controller instance is created or not.\n. Even without the changes mentioned above, +1.\n. This was branched from 0.5.0pr2 (though it appears to apply to develop-perf just fine).\n. +1\n. Hi everyone,\nThe develop-perf branch just went away, and github auto-closed pull requests against it.  You'll have to redo this pull request against the develop branch.  Sorry about this.\nDrew\n. +1\n. +1\n. rats, wrong branch :(\n. +1\n. I see this in the travis output for the unit tests:\n[ERROR] LibManager - Error: ENOENT, no such file or directory '../../../../../lib/app/middleware/mojito-combo-handler.js'\n1666true\n1667hook\n1668Loading dependency: ../../../../base/mojito-test.js\n1669Loading dependency: /home/travis/builds/yahoo/mojito/node_modules/yahoo-arrow/lib/common/yui-arrow.js\n1670Executing test: ./test-combo-handler.js\n1671\n1672module.js:340\n1673    throw err;\n1674          ^\n1675Error: Cannot find module '/home/travis/builds/yahoo/mojito/tests/unit/lib/app/middleware/test-combo-handler.js'\n1676    at Function.Module._resolveFilename (module.js:338:15)\n1677    at Function.Module._load (module.js:280:25)\n1678    at Module.require (module.js:362:17)\n1679    at require (module.js:378:17)\n1680    at Object.ARROW.onSeeded (/home/travis/builds/yahoo/mojito/node_modules/yahoo-arrow/nodejs/node.js:93:9)\n1681    at onYUIAvailable (/home/travis/builds/yahoo/mojito/node_modules/yahoo-arrow/lib/client/yuitest-seed.js:133:15)\n1682    at /home/travis/builds/yahoo/mojito/node_modules/yahoo-arrow/lib/client/yuitest-seed.js:140:13\n1683    at Object.<anonymous> (/home/travis/builds/yahoo/mojito/node_modules/yahoo-arrow/lib/client/yuitest-seed.js:152:3)\n1684    at Module._compile (module.js:449:26)\n1685    at Module._extensions..js (module.js:467:10)\n. It looks like test-handler-static.js has a negative combo test (in \"bad or missing files\") but it doesn't appear to have a positive combo test.\n. In the \"valid combo url\" test, the comment \"combining an existing file with an invalid one should trigger 400\" is wrong I think.\nOtherwise, +1.\n. I was thinking \"actionTimeout\", since it's the timeout for executing the action (on the controller).  \"controllerTimeout\" works also, from same argument.\n. +1\n. +1\n. Yep.  I'll redo this PR after 714 lands.\n. Closing.  Will issue new PR after develop-perf stabilizes.\n. +1\n. Hi everyone,\nThe develop-perf branch just went away, and github auto-closed pull requests against it.  You'll have to redo this pull request against the develop branch.  Sorry about this.\nDrew\n. +446 :smile:\n. +1\n. +1\n. +1\n. +1\n. It looks like invoking an action on a composite mojit is failing on the client side.\nSteps to reproduce\n- In tests/func/applications/frameworkapp/common do a ../../../../../bin/mojito start to start the app.\n- Visit http://localhost:4081/#MojitContainer in a browser.\n- Click the MyMojits button.\n- The Output block should contain My Child Mojits: with two mojits, however none are shown and errors are in the error console.\n. +1\n. Perhaps also lib/server-log.js?\nPerhaps also the setLog*() methods in MojitoServer?\nIs lib/app/autoload/json-stringify-hack.server.js actually being used?\n. I didn't see anyone depending on \"json-stringify-hack\", so I'm not sure we're even using it.\nRegardless, +1.\n. I see.  It's affinity is \"common\" however.\n. I'll rename it to just \"Tunnel\".  (It -is- a client, as in \"mysql client\" or \"http client\", but \"client\" can get confused with our affinity:client.)\n. I'll also add a note to the delete command.rpc that it might need to move to a different place in the future.\n. Actually, TunnelClient does make more sense once I look at the context more.  Closing this, will issue a new PR with necessary other changes.\n. +1\n. +1\n. The develop-perf branch just went away, and github auto-closed pull requests against it.  You'll have to redo this pull request against the develop branch.  Sorry about this.\n. BTW, travis is passing even with failed tests.  Not sure if the failures are related to this PR though.\nFailed Descriptor Path : /home/travis/builds/yahoo/mojito/tests/func/examples/developerguide/developerguide_descriptor.json\n18455Total Number of Failed Tests : 2\n18456--------------------------------------------\n18457Failed Descriptor Path : /home/travis/builds/yahoo/mojito/tests/func/usecases/usecasestest_descriptor.json\n18458Total Number of Failed Tests : 3\n. Looks good, but needs at least 1 unit test to make sure that appConfig.yui.config.seed is honored.\n. +1\n. Hi @ItsAsbreuk,\nThanks for filing this issue -- I think you did the right thing. It just happens that we had already seen (and fixed) this already.  It's always better to over-report a problem than have it lost/forgotten, so your report was good.  Keep sending the issues, and we'll address them as best we can!\nDrew\n. +1\n. +1\n. +1\n. Hi @dferreiroval,\nThe develop-perf branch just went away, and github auto-closed pull requests against it.  You'll have to redo this pull request against the develop branch.  Sorry about this.\nDrew\n. Ah, right, the cli isn't used in Manhattan.\n. Hi @dferreiroval,\nThe develop-perf branch just went away, and github auto-closed pull requests against it.  You'll have to redo this pull request against the develop branch.  Sorry about this.\nDrew\n. +1\n. This approach whitelists all of comboSep, no matter what it contains.  If we want to whitelist & we can do that by changing cleanse() in lib/app/autoload/utils.common.js.\n. closing, so that I can redo this against the \"develop\" branch instead\n. What I've seen done is use fake keys for comments, such as...\njavascript\n{\n    \"//\": \"we'll use bar because it prevents baz from blixing\",\n    \"foo\": \"bar\"\n}\nThat doesn't help with arrays of course.\n. Hi @jlecomte,\nThe develop-perf branch just went away, and github auto-closed pull requests against it.  You'll have to redo this pull request against the develop branch.  Sorry about this.\nDrew\n. Hmmm... not sure why I closed the pull request.  This should be re-submitted to the \"develop\" branch.\n. I redid this as PR #800.\n. Boss says \"merge it, and we'll fix problems that come up\".\n. We do intend to support comments in config files, though after 0.5.0GA.\nThe latest thinking is to support YAML, which is a superset of JSON, and which supports comments.  (So, any file that is valid JSON is also valid YAML.)  One good resource for testing what YAML supports is the online parser.  (Comments start with the # character BTW.)\n. Cool.  We'll probably leave this PR open for a while, until we've done planning for 0.5.1, to make sure it doesn't get lost.\n. +1\n. +1\n. Yep, this was fixed in mojito@0.5.3.  Since mojito walks NPM packages breadth-first (all first-level packages are walked before second-level, those before 3rd level, etc), the \"shallower\" version of mojito, likely the direct dependency of the app, will be used.\n. Hi @jlecomte, could you give more details?  The output of npm ls would be a good start.\n. OK, thanks, I'll dig into it.\nDoes yahoo-mojits-search-core need to be linked?\n. I'm able to reproduce, in all of the following: ./dev, ./node_modules/.bin/mojito-shaker shake, and ./node_modules/.bin/mojito start.\nI don't think the link is related to the problem at all.\n. Hmmm... this is a tricky problem.  You have two versions of mojito installed in your app:  mojito@0.5.4 is shallow in the dependency tree, and mojito@0.5.5 is deep in the dependency tree.\nWe can only use one version of mojito.  Which should we use?  One the one hand, we should use the \"shallowest\" since it represents a more specific/tighter dependency.  This is especially true if it is a direct dependency of the app.  (The app is saying \"use this version of mojito\".)  However, in your case, you have a version of mojito deeper in the dependency tree with has a higher version.  Presumably some other NPM module needs this higher version of mojito and that's why they specified it explicitly.\nComplicating this particular situation is the fact that the resource store API changed between 0.5.4 and 0.5.5.\nAdditionally, mojito-shaker appears to be using whatever version of mojito that NPM returns (via require()), which in your case is the shallower version of mojito.  This prevents the yahoo-mojits-search-core package from getting version 0.5.5.\n. After talking with Caridy, the consensus is that we should be using the shallow version of mojito.  This is what is used today.  So, mojito just needs to skip other versions of mojito.\n. This should be fixed by PR #1023 (which was just merged).  It'll be in the next release of mojito (after 0.5.5).\n. +1\n. +1.  Good description of problem, and good solution.\n. +1\n. +1\n. I changed the port numbers in tests/func/applications/apps.json which is a bit different.\n. Hi,\nI believe what you are seeing is an intended optimization by mojito.  The idea is that even if you define a selector in your applications.json, if you don't have files with that selector then there's no reason to customized the configuration (and thus cache key) based on that selector.  By only creating the customizations that are actually used by the app greatly increases app start time.\nIs there an underlying problem that you are experiencing?  What odd/wrong behavior are you seeing that lead to you to investigate this?\n. Yeah, it sounds like something is going wrong inside of mojito.  Could you email me your application repo (perhaps via yahoo mail, since I know you work at yahoo)?\nThe config that the resource store is generating (per selector, as appropriate) deals with the YUI loader configuration.  Other configs, such as read by ycb, should still work normally regardless of which selectors you have defined.  So, I suspect the bug isn't the one you suggest but is another one in a different place in mojito.\n. I created a simple app that demonstrates the problem with the title:\nhttps://github.com/drewfish/mojito-issue835\n. Hi @rolandoyahoo,\nIf possible, could you try using the HEAD of develop to see if that fixes your problem?  (I suspect it'll fix at least some of your troubles, but want to make sure that there aren't other issues as well.)\nYou can get the lastest by putting this in your package.json:\n \"mojito\": \"git://github.com/yahoo/mojito.git#develop\"\n(Note, this causes \"npm install\" to do a git clone, so it takes a while.)\n. It looks like you're using an older version of mojito-shaker.  The version that works with the latest mojito is mojito-shaker@2.0.37pr5.\n. I just tried a fresh checkout of the salcap repo, and git://github.com/yahoo/mojito.git#develop works, so I'm closing this as fixed.  It'll get released as part of 0.5.1.\nPlease re-open if you are still having trouble with this.\n. +1\n. \"app-level\" mojits are really something different.  An \"app-level\" mojit isn't really a mojit, it's just a collection of resource shared with all other mojits.\nThe YAF convergence design has a feature in it where the user can define app-level models.  This is especially useful when running client side (on the page) where you might only want one \"user\" model for example.\n. Yeah, a lot of this would be improved with the data scopes we've been wanting.  I'm OK with most of this PR until we have those, though.\n. +1\n. Beware that lib/app/mojits/HTMLFrameMojit/controller.server.js uses Y.mojito.version.  I know that lib/app/autoload/store.server.js has the mojito version, so perhaps we can expose that somehow.  Also I think the RS isn't quite getting the mojito version correctly, so that needs to be updated.\nHmm... perhaps we could have the RS populate Y.mojito.version.\n. Yes exactly, since you removed Y.mojito.version :)  I would be OK with changing HTMLFrameMojit's controller to just say \"Powered by Mojito\".\n. +1\n. Just to be pedantic, your gist suggests that delete isn't the problem, but if (obj.member_doesnt_exist) is the problem.\n. +1\n. From reading the description:\nI worry about getting rid of pathToRoot.  It was necessary for some users of mojito build html5app. Evidence strongly suggests that this was no longer being used (dead code) anyways.\n. +1 good stuff.\nOne comment about supporting subdirectories in views/partials/, but we can add that feature in the future when/if requested.\n. A few notes:\n- It looks like the benchmark filename has to be the same name as the YUI module name.  This should be explicitly noted in the documentation.\n- You should probably add an on('error') handler to show errors, otherwise they get swallowed and the user has no idea what went wrong with the benchmark.\n- I want to compare different versions of an operation.  However, I don't want to do the setup in each iteration.   There's no preCycle event (or the equivalent).  (For example, I want to compare different versions of store.expandInstanceForEnv(), but the only way to do that is to put them all in different benchmark files, since there's currently no preCyle to do things like store.expandInstanceForEnv = function() {...}.)\n. +1\n. A couple of small comments.  +1 even without those addressed.\n. +1\n. +1\n. How come some of the descriptor files have config.application.type but others don't?  (I see two times mojito and static, but only common_descriptor.json has \"type\":\"mojito\".\n. +1\n. I think that example might be broken.  Compare the YUI module name of the AC addon versus the one that the controller is depending on:\nhttps://github.com/zhouyaoji/Mojito-Apps/blob/master/addon_ex/mojits/myMojit/addons/ac/mojitlevel.common.js\nhttps://github.com/zhouyaoji/Mojito-Apps/blob/master/addon_ex/mojits/myMojit/controller.server.js\nThe controller is depending on addon-ac-mojitlevel yet that addon has a YUI module name of addon-ac-cheese.\n. We are guarding against not \"cleansing\" yui.config.conboSep, but we're not guarding against cleansing yui.config.groups.app.comboSep.\n. +1\n. +1\n. +1\n. +1\n. Closing this, as we're going to take a different approach, of adding import_settings support in the YCB files.\n. +1\n. Does this support application.json which includes application2.json which includes application3.json?\n. +1\n. +1\n. Hi jianlin,\nMojito 0.5.0 and 0.5.1 don't support yaml.  We'll restore that functionality in 0.5.2 (specifically via pull request #916).\nDrew\n. +1\n. Perhaps instead move the asset management stuff (renderListAsHtmlAssets() etc) into the \"assets\" AC addon.  That way you (perhaps) don't need a new AC addon.\n. +1\n. Re: omitting the @return, I'd rather specify explicitly that it returns nothing, instead of having the return value undefined.  (Otherwise, a reader could wonder whether we forgot to document the return type.)\n. Yeah, I had looked at adding this to mojito compile then noticed the deprecation warning.  I didn't know that mojito build was for building applications -- I just thought it was useful for building things.  I think I don't understand the semantic difference between \"build\" and \"compile\".  I'll move to mojito compile (and remove the deprecation warning).\nCache invalidation is accomplished by deleting the file :smile: .  This is something we'll have to document.\n. I though about useCache instead, but unfortunately if it's missing that's falsy, which would lead one to think that the cache shouldn't be used.  By default we want the cache to be used (if it exists).  (Sure, we could play tricks with hasOwnProperty() but that doesn't solve the semantic inconsistency.)\n. Yeah, I'll move the file out of the app root.  I'll put it under artifacts/ (probably artifacts/cache/) since the whole purpose of artifacts/ is to hold generated files.\n. RE useCache/skipCache:  the idea is that if the cache file exists it will be used.  So, by default the cache is disabled, because it doesn't exist :smile: .  If the user doesn't run mojito compile rescache then there won't be any caching.  If the user runs mojito compile rescache then the cache file is created and the resource store will pick it up.  Don't want to use the cache anymore? Delete it!\nI argue that the resource cache isn't that advanced a feature -- it's a production optimization and will hopefully become a common build step for our users.  Skipping the cache if it exists is a more advanced use case, I think.\n. RE artifacts/, hmm... good point.  The old/deprecated mojito compile ... commands in fact would put their results in mojits/{mojit}/autoload/compiled/.\nThe trick with cache/ is that there are some cases where caches are writing to a filesystem, but those caches shouldn't be shipped with the application.  Imagine CI step that starts up the app and runs functional tests on it.  The caching that happens as part of the functional tests might not be appropriate to ship to production.\nHowever, this new rescache.json definitely is something that should be shipped.  Yet, it shouldn't be checked into SCM.  This is unusual.\nAs a side note, I think npm pack will also ignore files listed in a .gitignore file (if the .npmignore file doesn't exist).\n. Closing pull request, since this has some tricky issues and doesn't address the underlying needs of the customer (search).\n. Yeah, that copy seems unnecessary to me as well.  Travis builds passed.\n+1\n. +1\n. +1\n. Do the applications that are started get shut down?\n. I worry about taking away the ability to pass parameters.  Perhaps we can email the users list to see if anyone is using that feature. Nevermind, that was never a feature of the ac.composite.done() arguments.\n. Also, we should probably update examples/ and tests/ to use the new API.\n. +1\n. +1\n. Yep, I'll get tests to pass before merging.\n. +1\n. +1\n. +1.  I ran all tests locally and they all passed.  I'll merge after our internal builds stabilize.\n. Sorry for the pause, it took a bit longer than I expected :(\n. +1\n. Looks pretty good, but the error handling could be a little cleaner I think.  Instead of this.queue.skip perhaps use this.failed.  Then, it might be a little clearer how/when we should call this.adapter.error() and when we shouldn't.\n. Here are some ideas I had:\nhttps://github.com/drewfish/mojito/commits/composite-errors\n. +1\n. What kind of parameters do you want to add?  Are they fixed values, or do they come from code?\nBasically, what is the high-level reason for these parameters?\n(I'm open to the idea, but want to understand the underlying usecase/reason/issue.)\n. Yeah, I'll make that change.  I was following the same format as commands/gv, but commands/compile doesn't need that.\n. Yeah, but until it does I need to make some changes to it for the thin-ress work.  I wanted to get some unit tests around my changes, to be sure that I didn't break anything.\n. +1\n. Will this PR fix travis?  No unfortunately :( :)\n. +1\n. Closing for now, since this PR regresses performance :(\n. +1\nBTW, upgrading selenium is a prerequisite to upgrading yahoo-arrow beyond 0.0.73.\n. +1\n. +1\n. +1\n. +2\n. The trick is that you can have more than one model in each mojit.  In that case you'll need a way to distinguish them.  So, giving your models an explicit name (in the YUI module name) is considered a good practice, to make room for the future.\n. +1\n. Looks like a bug in the resource store.\n. I think the fix entails added a check in lib/app/autoload/store.server.js _preloadDirMojit() to make sure that the dir argument is actually a directory (and just return if it isn't).\n. +1\n. Where are you seeing this?  I couldn't find \"mayor\" when I grepped through the source code.\n. +1\nAnything to put in HISTORY.md about this?\n. +1\n. +1\n. Closing this in favor of PR #1056 (merged), which implemented this idea a little differently.\n. Since PR #1056 is merged an passes CI already, here are the perf improvements:\n\n. +1\n. +1\n. I ran all the tests (unit and func) on my devbox, so hopefully all is good.\n. There are two other users of yui-sandbox.js.  Should they be removed too?\n. +1\n. +1\n. +1\n. If everything works out, +1.\n. +1\n. +1\n. +1\n. Looks pretty good.  We should pay special attention to the results of the functional tests, because the are all we have for testing mojito client-side.\n. I've fixed a couple of tests on https://github.com/drewfish/mojito/tree/data-channels, will work on more.\n. Yeah, I'm running functional tests by hand locally.  Lots of failures there, so I'll have more commits to fix those.\n. Yeah, I saw those.  I'll circle back to fix those before finishing fixing the functional tests.\n. I don't think we should merge this with mojito#develop.  I think it's fine to have it live just in mojito#next.\n. +1\n. +1\n. Hi @soljin,\nYou should be able to add doT support to mojito without baking it into the mojito package itself.  Mojito supports \"extension\" packages which can add new functionality.  (This functionality can be mojits, or other things such as view engines like you're suggesting.)  There are some details here:\nhttp://developer.yahoo.com/cocktails/mojito/docs/topics/mojito_npm.html#authoring-an-npm-module-containing-shared-mojito-resources\nThis approach allows you to publish a new package to NPM (perhaps called mojito-dot) to add this functionality to mojito.  Users of mojito who want doT support would then also depend on this package.  This allows you to maintain this package (bug fixes, new features, etc) with its own release cycle, not tied to mojito's release cycle.\nFeel free to email me with any questions you might have about how to do this.\nDrew\n. +1\n. I think some RS addons will need similar tweaks too.\n. +1\n. once builds pass, +1\n. we should update the YCB dependency in package.json to \"~1.0.5\"\n. small notes, but otherwise +1\n. action-context.common.js done() seems to have an unused pageData variable.\n. A few small comments, even without addressing them, +1.\n. +1\n. Could try using YUI.add() for the tests, instead of YUI.use()?  (We might need to change all tests in an app to use the same approach.)\n. +1\n. +1\n. experiment over.  arrow 0.0.76 just isn't cutting it for us.  (arrow reported failed tests yet didn't return a non-zero exit code so that the build could fail.)\n. Search benchmarked this with their app, results in bz 6296025.\n. Based on search's results, I think this PR should be abandoned :disappointed: .\n. I've run the tests myself and posted the numbers to the bug.  It looks like this is indeed faster for search.\n. From retesting by search:\n```\nmojito@0.5.9pr1:\n10.3 conn/s - 97.5 ms\nmojito@develop:\n11.0 conn/s - 90.8 ms\nmojito@develop + pr1120:\n11.3 conn/s - 88.3 ms\nSo it looks like pr1120 has possibly a slight positive impact, if any. Indeed,\nthere is some variance between 2 consecutive tests. However, what is pretty\nclear is that the develop branch has a clear advantage over pr1.\n```\n. +1\n. This is an interesting idea.  At the very least I think it's worth doing some experiments to see how much of a benefit it might have.\n. +1\n. +1\n. +1\n. +1\nWould be nice if the YQL calls where mocked out instead.\n. +1\n(can't wait to upgrade to yui@3.10 also)\n. +1\n. +1\n. Hmm... perhaps @jlecomte should review/test this too, to see if it fits his needs.\n. other than cleanup, +1\n. +1\n. +1.  This also makes the mojito-0.6.1.tgz package go from 1.2M to 177k.\n. +1\n. +1\n. +1\n. +1\n. I tried this approach and found that it caused mojito to be slower. The interpretation is that _mojitRVs is so big that it causes a large GC walk which slows things down. (Or, having the large _mojitRVs causes other memory pressure, trigger more GC walks or something like that.)\nI'll look at the details later.\n. OK, I found the experiment I did earlier. It's from March 21st this year.\nHere's what I did:\n- Ran a search-app-news search results page and captured the calls to store.expandInstanceForEnv().\n- Wrote a script that loads those calls and replays them, looking for GC events.\n- Tweaked the RS to do two types of changes:  calculate _mojitoDetails at startup or on demand (AKA lazily), store the _mojitoDetails JSON.stringify()ed or as a raw datastructure.\n- Ran the script with the four experiments (2 x 2).\nAlas, it only captured the GC events of the scripts, not the total runtime. Here are the results:\n- lazy/stringified - 9 GC events\n- lazy/raw - 9 GC events\n- startup/stringified - 5 GC events\n- startup/raw - 6 GC events\nFrom this I surmised that keeping the source data (_appRVs and _mojitRVs) is a lot of data which causes enough memory pressure to cause more GC runs (and more data to walk on each run).\n(I had written all these results into a trello card but alas I can't find it.)\n. Just moved the card to the right board, so it's now located at:\nhttps://trello.com/c/Cz5hCgj6/256-search-perf-0-gc-profiling\n. The .chosen for resource versions was added as part of pull #1108 (to fix issue #1107) so we should be careful to preserve that.\n. Looks like travis build failed due to environmental issues (bad network) and not anything to do with code quality.\n. I've confirmed that this (as of 8e6fc76) doesn't regress issue #1107.\n. +1\n. Looks like travis build failed due to environmental issues (bad network) and not anything to do with code quality.\n. Oh, still need test(s) to make sure that app.json resourceStore.lazyLoad (a) actually causes a lazy load, and (b) an app still works with lazy load.\n. One last task. Please add a note in the HISTORY.md file mentioning the new feature. You could add something like this in the \"Features\" section:\n``\n* There is a newresourceStore.lazyResolve:trueoption inapplication.json. \nNormally, the resource store at server start pre-calculates the details for all mojits for all contexts/selectors.\n(It's optimized to only do this for dimensions/selectors that are actually used.)\nBy setting this new option the resource store will skip this calculation at srever start and instead do it at runtime as needed.\nThis might be a good option to use if you have a large number of dimensions defined indimensions.jsonand a lot of selectors defined inapplication.json`,\nyet your app will only serve traffic from a subset of those.                    \n``\n. Travis is having issues, but the union of builds for 3cf8896 and 91c6bf2 give full tests coverage and passing tests.\n. +1 :shipit: \n. Unit tests are missing.  (You can run unit tests usingnpm run unit`.)\n. +1\n. :ok_hand: \n. +1\n. :doughnut: \n. :v:\n. :minibus: \n. +1\n. When I tried it the x-axis didn't line up for the first and third graph (on chrome).\n\n. +1 looks good\n. :horse: \n. Travis node-0.10 failure looks like a transient failure (failed to get \"nopt\" npm module).\n. The failed travis \"func\" jobs appear to be broken since commit 3e8f18f.\n. +1\n. Well the middleware is actually just as request-specific as the page object (including contextualization).\nI'm looking at line 33 of lib/output-handler.server.js, which is where the page object is created. Right after creating it we could also merge in req.page (or req.locals or whatever we want to call it).\n. Oh hmm... I see what you mean, mojito.js is pushing data into the page object. That's a little dirty and is being done that way because the output handler doesn't have direct access to the store. However, the output handler does have direct access to the request object, so I argue that the output handler ctor should be responsible (instead of mojito.js) for moving data from req.page[1] to the page object.\n[1] ... or whatever we call it\n. As it turns out, the mojit resolution process already has this exact mapping. (It can be found at ac.command.instance.models.)\nFor backwards compatibility we should probably first look in Y.mojito.models[name] then fallback to Y.mojito.models[instance.models[name]] which implements this feature. (Plus good error checking of course.)\n. Should the last one take precedence, or merge over an earlier one?  The merge allows a particular context to be \"built up\" from multiple files.  (Alas, merging arrays is problematic.)\n. I guess I was trying to make a distinction between \"replace\" and \"merge\".  You seem to have been thinking of \"merge\" too, so I think we have the same idea :smile:.\n. Available in mojito 0.8.1.\n. Still needs a unit test.\n. Looks good.\n. +1\n. @jarnoux You can solve your problem by using after('addResourceVersion') yes? If so that lowers the priority of this issue, though we should still look at why addons/rs/yui is doing a Do.Halt.\n. +1\n. +1\n. Travis has 4 failing tests, not sure if they're related though.\n. Does that mean that I can add ?environment=production to a query parameter and hit the production database (even on a staging server) ?\n. +1\n. +1\n. It seems reasonable to me to want to use ac.composite.execute() multiple times like you suggest.\n. We might want to hold off on this until a new version of ycb is available, and then update package.json to depend on that.  (Otherwise PR is looking good.)\n. Hmmm... I wonder if there's some way we can get travis to re-test this (now that ycb@1.1.0 has been released).\n. +1\n. +1\n. travis passed, +1\n. +1\n. :candy: \n. +1, but hopefully travis will be able to test this as a PR so we know the fitness before merging.\n. I'm also fond of promises.  The trick is that not all (server-side) javascript developers are even familiar with promises.  That's not to say that Mojito should cater to the lowest common denominator, just that it should work well with the current/average skillset of the developer community.  The core value of Mojito is not that it's \"a framework that uses the leading edge technologies\" but instead that it is \"a framework for developing large/complex applications using MVC\".  Said another way, our mandate isn't to present/promote leading edge technology/practices.\n(Also, promises might be considered bleeding edge, as I've seen some promise libraries properly propagate errors, and/or have performance overhead from try/catch blocks.)\nHowever, in Mojito we do have the archetypes as a way to easily use promises in your project.  Yeah, the documentation on how to setup and use archetypes is a bit lacking.\n. BTW, I very often turn to the async NPM package for managing callback-heavy algorithms.  It has a lot of methods but I mainly use series() and parallel() and occasionally waterfall().\n. +1\n. +1\n. nice!\n. I think mojito should be smart enough to not reload a CSS asset that has already been loaded on the page.\n. Are you running your test in a browser or in node?\n. +1\n. Yeah the current mojito middleware is a mess (and I'm to blame for much of it!). For mojito-next I would love if we could make it very simple -- just follow express common approaches. Even if this means breaking backwards compatibility.\nIf you look at the express middleware most of them are factories. Some of them take arguments (such as app.use(express.static(__dirname + '/public'))) and some of them don't (such as app.use(express.bodyParser())).\nWhat would be nice, to me, is that we remove any magic and make it so that every app has to register all middleware themselves.  We can provide a mojito.middleware which contains the loaded files but it is still up to the app.js author to write app.use(mojito.middleware.tunnel(...)), app.use(mojito.middleware.contextualizer(...)), etc.  Each middleware should be passed the arguments (if it is a factory) as appropriate for that middleware.\nNow, on top of that we could provide some sugar.  Perhaps something like mojito.middleware is really also a function so that you can do app.use(mojito.middleware()) and it'll create and return all the middleware in the \"right\" order. (Hmm... maybe that could be done with mojito.middleware(app) instead.)  Or something like that, you get the idea.  It's all just sugar to make common stuff easy.\nIn reality mojito doesn't have that many middleware, and each is performing a specific independent roll. It would be nice if app developers become familiar with them so that they can decide when to use them, or even when not to use them or use a replacement instead.\n. looks good\n. Should that particular lang bundle be undefined because it shouldn't apply to that particular environment/context ?\n. 0 Passed, 1 Failed , 0 skipped \n in testCase_yui_3_10_3_2_1391551010905_38\n test mojitproxybroadcastdynamic:Values should be equal.\n Expected: bunny (string)\n Actual: null (object)\nFails on node 0.10, passes on node 0.8.\n. +1\n. One test is failing in travis.\n. +1\n. +1\n. I totally agree. This caused me trouble when I was writing an app with Mojito, and I wound up implementing my own contextualizing middleware that did just this.\n. It is, inside the store. However, req.context doesn't have it, so it's not possible to write other middleware that uses req.context to do interesting things.\n. This comment should really be a comment introducing the cache() method (plus add yuidoc tags).\n. Why does this ac.partial.compiler() method exist?  Where/how might it be used?\n. Why would anyone want to call ac.partial.compiler() and send the results to the client side?  mojito compile views is meant to take care compiling the views, so that nothing special has to be done in the controller.\n. Hmm... OK.  I would say that if ac.partial.compiler() is sufficiently useful (as you argue) then we should let it drive a change to the view engine API and require that -all- view engines (including mu) support it (via the new compiler method).\n. And we should perhaps update mojito compile views to be better about contexts, etc.  It seems a little dangerous to invent a new feature when the old one isn't sufficient, when we could instead fix up the old feature.  We don't want to end up with a million slightly-different ways of doing things.\n. Does this config ({useSync:true}) only apply to that particular YUI instance?\n. useSync is turned on here, but not turned off elsewhere.  Is that OK?\n(Hmmm... I guess we won't know until we do a deeper analysis of where use() is being called.  It's OK to do things synchronously while the server is starting up, but after that we should definitely be doing things asynchronously.  That perhaps answers my own question:  set useSync:false after the server has started.)\n. If we're deleting the hack, there's no need to continue talking about it.  Perhaps a comment like this would be better:\njavascript\n// We need to ignoreRegistered so that we get a full list of dependencies (including those that\n// happened to be loaded by some other code).\n. nice\n. OK, yeah, we (mojito team) will have to do the rest of the validation for this PR.\n. If I add this line back, the test passes again :(\n. It seems that resolve() is the cleaner API call.  Alas, I couldn't figure out how to change the loader.calculate({required:required}) into a loader.resolve() call.\n. Yeah, I should have dug through the docs more.\nUnfortunately, it's still tunneling the requirements from a previous, and I have to resort to the delete YUI.Env._renderedMods hack to prevent that.\n. I just fixed that.  Refresh the PR.\n. It's not strictly necessary.  The first argument of the callback is an error object, and by using cb(null) I'm say \"really really there's no error\".  A matter of style I guess.  I can remove it.\n. This will conflict with the YUI 3.5.1 upgrade.\n. This will conflict with the YUI 3.5.1 upgrade.\n. This will conflict with the YUI 3.5.1 upgrade.\n. This will conflict with the YUI 3.5.1 upgrade.\n. This will conflict with the YUI 3.5.1 upgrade.\n. This will conflict with the YUI 3.5.1 upgrade.\n. This will conflict with the YUI 3.5.1 upgrade.\n. This will conflict with the YUI 3.5.1 upgrade.\n. This will conflict with the YUI 3.5.1 upgrade.\n. This will conflict with the YUI 3.5.1 upgrade.\n. This will conflict with the YUI 3.5.1 upgrade.\n. This will conflict with the YUI 3.5.1 upgrade.\n. The YUI 3.5.1 way is Y = require('yui').YUI({useSync:true}).use('json-parse', 'json-stringify');, but note that the Y will be \"stuck\" to useSync mode.  For this case (just using Y.JSON) it's not a big deal.  To be safe you could call Y.applyConfig({useSync:false}) after.\n. If I'm reading the code correctly, when -p is given the file isn't written.  Is that correct?  If so, it seems strange to print the name of a file that doesn't exist.\n. Ah great, I misunderstood.\n. I wonder if \"wrench\" and \"yuidocjs\" should be in \"devDependencies\" instead?  (That is, neither of those are needed in production.)\nHmmm... perhaps there should be a separate \"mojito-dev\" (or \"mojito-tools\") package that contains development-time things (and let \"mojito\" just contain the runtime parts).\n. Oh yeah, for sanity please keep the dependencies sorted.\n. I've never seen a YUI.add() that had a return statement before.  What does that do?\n. Very good point, I'll add it.  (The old resource store was never really officially public, but we/me should still be careful to enumerate changes.)\ndone.\n. This would be a new coding style.  I see length caching in very few places in Mojito, and I haven't seen it much in javascript programming in-the-large either.\nAlso, this change, while perhaps worthwhile, doesn't really relate to the resource store redesign.  (That is, length caching wasn't being done by the old code either.)\n. Good point.  I'll try fleshing this out.\n. I'm all for that.  I'll add the TODO.\ndone.\n. This is part of how Y.Base works.  See the documentation for that.  It's entirely possible that we don't need to specify ATTRS if it's going to be empty.\n. You mean cloneObj()?  No, it's generic.  In fact, we might want to move to Y.clone(obj, true) instead.\nHistorically, the resource store wasn't a YUI module, so pulling in other YUI modules (such as the utils.js) was tricky.  We should definitely take the opportunity to clean up though.\n. :)  Yeah, not sure how to specify \"whatever the user put in the file\" type though...  I'll try to think of a better type description.\ndone, though perhaps oddly.\n. I'll make these changes (even though I strongly disagree with the type-before-name documentation style).\n. I will change.  (This happens at server-start time so micro-optimizations aren't as critical.)\ndone.\n. The dimensions.json file should contain an array, as per YCB specification.  (The issue is perhaps that we don't do any validation of the structure of a user-provided dimensions.json file.)\n. Doh!  Will fix.\ndone.\n. I'll add a commit.  It will likely say something like \"This method is part of how Y.Plugin.Base works.  See documentation for that.\".\n. Yes, null will work too.  I'll change.\ndone.\n. Yes, you're reading that right.  The join isn't going to do much practical.  I did it this way to be consisten with how res.name is generated for other types as well.  However, thinking about it, I think perhaps all other types also guard length===1.\nI'll review them all, and do necessary cleanups/simplifications.\n. I will add (and review all other methods for the same omission). \ndone.\n. The event name is the same name as the method.  I get your point about \"on{eventName}\".  I'm OK with that as the convention/style, if we agree to that as a team.\n. Composition of URLs should not use libpath.  If we did, we'd have URLs like http://server/foo\\bar\\baz on windows, which is clearly wrong.\n. That makes good sense.  I'll make the change.  (Eventually we'll need to refactor away from using these two functions.  I didn't want to do that in this project, to avoid making too many changes (especially RS API changes) as possible.)\ndone.\n. The refactoring into a constant is a good idea.  The rest is a new feature.\nrefactoring done.\n. Will change.  (I think the evt.args was used before I copied such into local vars.)\ndone.\n. The results are sorted by dependency order, not lexicographic order.  (In fact, the dependency ordering is the purpose of this method.)\n. Yes, such a request has already been made the YUI team.  They had already made an attempt to obviate our need to delete YUI.Env._renderedMods but it didn't quite work.  Regardless, the comment should have HACK in it, since it really is a hack to work around a bug in the YUI loader.\nAdded \"HACK\" to comment.\n. Nope, YUI.Env is correct.  It's a result of how Y.Loader works.\n. I did an experiment:  we don't need to specify ATTRS.  I will remove.\n. The walkSettings() is tested as part of the tests for the YCB library.  The _listUsedDimensions() doesn't have a unit test.  I will add.\nWhile I agree with the general wish to unit test as small units as possible, there is a danger here.  Closers are very useful -- they're one of the strengths of javascript.  Trying to code without ever using a closure is posible, but can sometimes cause more pain than micro-testing might alleviate.\n. Will change.\ndone.\n. This is another thing which we should discuss as a team.\n. I will add a comment.\ndone.\n. I will adjust its name.\ndone.\n. It will likely only fail during a very strange situation, since the fs.fullPath came from the filesystem.  This could happen, for example, if fullPath is a symlink to nowhere.\nThe practical affects of failure is that mojito start fails.  This end result is desirable (I think) because Mojito would not have been able to use that file during runtime if it can't load it during server-start time.  I'll add try/catch and good errors around this.  (I suspect that readFileSync() would have reported the failed file name, but it's best if we report it just in case.)\n. It's a closure over the yui var, so I'm not sure how useful that would be.  Open to arguments of course.\n. attachActionContextAddons() is not a public API.  The method should be marked private.\ndone (marked private).\n. I'll use whatever the team feels is best practice/style.  Using Boolean() seems more straightforward to me, since it says what it does.  However, since the file has client affinity, k-weight might be the driving consideration.\n. Yeah, the resource store has its internal _yuiUseSync().  Might be useful to break that out to utils.js or something like that.\n. Never for URLs.\n. Never for URLs.\n. Will move, rename, unittest, and document.\ndone.  moved to management/utils.js as decodeHTMLEntities().\n. This wasn't changed as part of the store redesign.  I believe that 11111 was chosen explicitly so that it wouldn't conflict with 8666.\n. The callback param is to a function that's internal to commands/compile.js, and it always passes the callback.  Guard still needed?\n. The callback param is to a function that's internal to commands/compile.js, and it always passes the callback.  Guard still needed?\n. Sure.  That enhancement is outside the scope of the resource store redesign work, I would argue.\n. Yes, or NFS error, etc.  The practical effect is that the mojito compile rollups command fails with an uncaught exception from writeFileSync().  Hopefully that exception will have details on why the write fails.  (It's my understanding that one should not catch exceptions unless one can reasonably act/recover from them.  In this case, the error/exception from libfs is likely to be more detailed than anything we could provide.)\n. Same argument as before:  the callback param is to a function that's internal to commands/compile.js, and it always passes the callback.  Guard still needed?\n. Great.  This is not something that the new resource store removed so it's not a regression.  The filed enhancement stands, and can be implemented once this PR lands (or before if needed).\nSaid another way, this PR shouldn't try to address all possible bugs -- it should focus on redesigning/rewriting the resource store.\n. I agree.  Note however that the above diff was consistent with the existing coding style in the file.  I feel it's more important to maintain the existing coding style in a file, otherwise the file becomes a mish-mash of different coding styles.\nPlease be careful about trying to turn this PR into a changeset that solves all problems!\n. I agree.  Note however that the above diff was consistent with the existing coding style in the file.  I feel it's more important to maintain the existing coding style in a file, otherwise the file becomes a mish-mash of different coding styles.\nPlease be careful about trying to turn this PR into a changeset that solves all problems!\n. discuss as a team\n. Sure.  This file was semi-experimental to start with. Still should be well doc'd though.  (It really is a shining candidate for the mythical \"mojito_dev\" package.)\n. This is not a public method.  It's not available to users.  Please consider the context of the code being reviewed!\n. This was just moved from a different location in the file.  The logging subsystem needs reconsideration, but that's outside the scope of the pull request.\n. It's a good idea, but this is not the right place to validate the user's dimensions.json, since this code is called several times, leading to multiple reports of the same error.\n. I just tried that, and using Y.Test lead to the tests not being run.\n. The RS skips files that start with a dot, and vim swap files start with a dot.\n. This RS addon is now the official way to read JSON files, at least for other parts of the RS (including its addons).\n. Each rollup file is written idempotent, so a failure would just mean that some of the rollup files are written.  Each rollup that is written should be correct.  Each run of mojito compile rollups will rebuild/rewrite all rollup files.\n. Oh sorry, I wasn't paying attention to the context this time... :(\nThe _sortYUIModules() can operate in a \"shortcut\" mode when we're not precomputing dependencies.  In this case, we'll be using the YUI Loader, so we don't actually need to sort the modules (YUI Loader with dependency-order sort the modules for us).  The fact that I had to explain this suggests that the function is probably poorly named :(  (It's definitely not intuitive.)\n. Yeah, for the new code I started using that syntax.  Alas, addons/ac/deploy.server.js is fairly old code.\nOh, also, that documentation syntax does work so well when the keys can have arbitrary values, which is the case here.\n. done.\n. done.\n. I've commented all the initializer methods.\n. After having thought about this, I prefer the current approach.  While the join() is superfluous here, keeping it means that that line of code will continue to function correctly should earlier handling of baseParts change.  Said another way, the join() is slightly more future-proof -- resilient to future edits.\n. done.\n. I like the current approach, since it is more future-proof against future code changes.\n. done.\n. done.\n. I agree that this would be an optimization.  However, almost every optimization comes at a cost to code readability/maintainability.  We should only optimize that which is truly a problem (based on real-world profiling numbers).\nThe above is less performant, but I'm not sure that it would show up on any measurements/profiling, since it is not called that much.  Also, it happens at server-start, which is less time-critical.  So, I intend to keep it as-is.\n. fixed.\n. no reply :)\n. just kidding... done.\n. I'm going to punt on the loadSync() refactoring.  It's something that is broader than the Resource Store redesign.\n. I'm going to punt on this.  This class is internal to this file.\n. Punting on this for this PR, since the issue is broader than the resource store redesign.\n. controversial\n. punting, as is a broader issue than this PR.\n. Each file (index.js and app/commands/test.js) have its own definition of what it means to \"configure YUI\".\n. punting for same reason\n. It's not a \"completion callback\" or \"error callback\" but it is a callback.  walkSettings() calls back into the other scope for each file.  It fits the definition of \"callback\" in my mind.\n. Punting on this micro-optimization.  This happens at server-start time, which isn't time sensitive.\n. found it... it was behind the sofa.\n. controversial\n. I'm strongly in favor of this.  We should use Y.merge() if possible (it might not be).  This change, however, sweeps across more than just the resource store, so I'm going to punt for this PR.\n. Perhaps yes, or better yet read() should call readNoMerge() and then merge the results.  I will look into this.\n. This was a comment that was just moved around in the file.\nYeah, this function needs some love.  I think there's already an open bug on it :(\nHowever, fixing this is outside the scope of the resource store redesign.\n. I prefer Y.Lang.isArray().  However, going to punt since the resource store redesign didn't create this code (just cleaned up whitespace).\n. I'm going to punt on this, since the RS redesign didn't remove the comment.\n. I'm going to punt on this, since the RS redesign didn't remove the comment.\n. This is a valid optimization for libs/ycb, since this is code that is called at runtime.  However, the resource store redesign didn't introduce this inefficiency, so I'm going to punt.  (I'm trying to keep the RS redesign from growing even larger than it already is...)\n. punting, since problem wasn't introduced by the resource store redesign.\n. Yep, I've fixed all cases of this.\n. :ambulance: controversial\n. punting, as problem not introduced by RS redesign\n. punting, as problem not introduced by RS redesign\n. punting, as problem not introduced by RS redesign\n. Ideally yes.  Hopefully that happens as the tests are ported to the new testing framework.\nI'm punting here/now since I'm concerned about this redesign work growing in scope...\n. Ideally yes.  Hopefully that happens as the tests are ported to the new testing framework.\nI'm punting here/now since I'm concerned about this redesign work growing in scope...\n. done.\n. Yeah, it was a pain to me that the testing framework didn't have it and that I needed to write it myself :(\n. Ideally yes. Hopefully that happens as the tests are ported to the new testing framework.\nI'm punting here/now since I'm concerned about this redesign work growing in scope...\n. Yeah, none of the tests are delinted.  Hopefully that happens as the tests are ported to the new testing framework.\nI'm punting here/now since I'm concerned about this redesign work growing in scope...\n. I tried, but the tests failed to run when using mojito test.\n. Yeah, none of the tests are delinted. Hopefully that happens as the tests are ported to the new testing framework.\nI'm punting here/now since I'm concerned about this redesign work growing in scope...\n. Yeah, none of the tests are delinted. Hopefully that happens as the tests are ported to the new testing framework.\nI'm punting here/now since I'm concerned about this redesign work growing in scope...\n. I'm punting here/now since I'm concerned about this redesign work growing in scope.  This hopefully gets taken care of as the tests are ported to the new testing framework.  (The function should be in testing utils.)\n. Ideally yes. Hopefully that happens as the tests are ported to the new testing framework.\nI'm punting here/now since I'm concerned about this redesign work growing in scope...\n. See other comment about cmp().\n. See other comments about waiting until tests are ported...  and punting for now...\n. see other comments about delinting tests...\n. see other comment about cmp().\n. see other comments about delinting tests...\n. I'm not happy about it either.  It's likely that jslint will have something (useful? good?) to say once this is delinted.\n. done.\n. see other comments about cmp().\n. done.\n. done.\n. I've updated the event handlers to on{eventName}.\n. Formatting changes done.\n. I've removed ATTRS.\n. Long-standing bug in mojito's javascript-only YCB where it'll only make one substitution in a value.\n. It might be better if the handler is function(err, obj) and then it can call adapter.error(err) instead.\n. Why this namespace?  Are we using it in a similar way that others might use it?  Might it be better to use a \"mojito\" namespace to avoid collision?\n. Might be nice to document the callback parameters, such as @param {function(obj)} callback.\n. Hmmm.... this file is .client.js, so talk about \"reading from disk\" is a little confusing... :)\n. If possible, we should avoid the readFileSync().  Since view engines are run during request time, blocking here means that we block handling of other requests while we're waiting for the template to load from disk.\n. Why not just requires:['handlebars'] and then pull var HB from Y.Handlebars?\n. I think some kind of error handling is needed here, if the server times out or such.  (Ideally an error should propagate up to cb, so that it can figure out how to respond.)\n. nice\n. Yes, that's the problem with async, it's a virus :smile: -- if a low-level function is async that very often causes higher-level functions to need to be async as well.\nI think the use of readFileSync() in a codepath that happens during runtime might have significant performance implications, especially with higher levels of concurrency.  Yeah, I do think that means that compiler() and precompile() should by async.  (And yeah, that's outside the scope of this pull request.)\nI'm not especially worried about multiple reads of the same file happening at the same time.  Yeah, we should probably optimize this, but also very often the operating system filesystem has caching built in, and might also be doing collapsing of multiple calls.  (Similarly, we should be doing same-request collapsing in .client. so that we're not making multiple HTTP requests for the same template at the same time.  It's more important here in fact, because the Y.io library is very likely not doing same-request collapsing.)\n. (As an aside, why do we have both compiler() and precompile()?  They appear to be doing the same thing!)\n. I think this comment can go away now that we have the adapter.error() call.\n. Hmm... I guess I'm suggesting something like Y.namespace('Env.Mojito.Handlebars') then.  The \"Env.Handlebars\" seems very generic, and somebody else might be using that as well, causing us to trip each other up.\n. It might well be.  (The more relates to streaming... indicating whether there is more data that needs to be rendered in the template (true) or whether this is the last time data will be pushed through the template (false).)\nRegardless, changing the render() API is outside the scope of this pull request.\n. @ericf Do you see a downside to just using requires:['handlebars'] ?  I'd like to keep things as simple as possible.\n. (BTW, all other users of contextObj should probably be using config.context instead too.)\n. Reading the cli.json file should go into management/utils.js.  We'll want to add support for cli.json in the other commands in the future.\n. To match how other tests are organized withing source/lib/tests. the controller test should go in here instead:  source/lib/tests/autoload/mojits/HTMLFrameMojit/controller.server-tests.js.\n. Not sure how these are used (yet), but it might help avoid confusion of the YUI_PREFIX is $y_ :smile:  (The MOJITO_PREFIX could be $m_.)\n. Yeah, deleting binder.children is quite dangerous, since I think it might break some of the advanced features of client-side mojito.\n. Hmm... Procfile looks like a Heroku-specific thing.  (Unfortunate that it's not called Heroku instead (similar to Travis's travis.yaml).)  Some ideas to address this confusion:\n- Add a comment to this file, which explains what it's for.\n- Remove the file entirely, and update our docs to explain how to get a mojito app running on Heroku.\n- Better yet, I think Heroku might work just fine without a Procfile if we update the app's package.json such that node start starts up mojito.\n. I'm not against moving index.js to mojito.js, just curious, why is that valuable?\n. This change seems very very strange.  The file has gone from one that registers actions on the controller, to one that creates a mojito app.  Yet, it's still in the /actions/ subdirectory of a mojit.  I think this is perhaps an error.\n(Of course, since it looks like examples/sandbox/ex1/ is doomed, the issue is probably moot.)\n. If we do keep index.js, we should put a comment so we remember why we have the indirection.  Could be as simple as:\njavascript\n// convention and history mean applications expect there to be an index.js\nmodule.exports = require('./mojito');\n. So tests/fixtures/packages/node_modules (and children) are definitely needed in order to do proper testing in the resource store.  Does the new .gitignore support that (it's hard for me to tell from looking at the rules).\n. Why are we removing scripts.start? Is that not used by any hosting environment?\n. I think  you also have to specify @method because yuidoc doesn't parse it out automatically.\n. I think  you also have to specify @method because yuidoc doesn't parse it out automatically.\n. This is a private one-line method, that is called in only one place. Do we really need it?\n. OK, makes sense.\n. This seems very strange to me.  My understanding was that the path library was supposed to do filesystem path construction in a way appropriate for each platform.\n. Is there a way that the right thing can happen without the process.platform check?  In this case, can the source of relativePath be fixed to not have the wrong path separator?\n. That's mostly true. However, the rollupFsPath variable contains a path on the filesystem, and so should probably be using libpath.\n. Ditto here, this is also a filesystem path.\n. Yeah, it took me a bit to realize it was translating from FS path to URL. Perhaps the comment should say that instead:  // translate from filesystem path to URL.\n. After a throw?  I've never seen that before.\n. Hmm... that should callback(new Error(...)) instead of throw.  I'll make that change.\n. This is already in the \"deprecation\" notes.  It's been deprecated for a while, and is ripe for removal in my opinion.\nI'm not sure how we'd put a warning on a property we always populate (seems noisy) unless we re-implement this as a property getter.  Not worth the effort in my opinion.\n. I'll make that change.  However, according to the grammar rules I learned (or at least, the way I remember it), a sentence can be fully grammatical even without a subject or verb if those can be easily inferred.  As such, don't expect to see \"This parameter is\" at the beginning of the sentence :wink:\n. I agree, so long as travis is running the full test suite (func as well as unit).\n. It might be nice to also include a link to the docs (http://about.travis-ci.org/docs/user/gui-and-headless-browsers/). That might make maintenance easier in the future should the docs change.\n. Note that not all instances have IDs -- only those that come from the top-level \"spec\" in application.json will. It might be better to use instance.instanceID instead.\n. Shouldn't the \"core_action_start\" and \"core_action_end\" marks be a timeline instead?\n. This should probably be mojit:dispatch instead.  Inventing new terminology will only add confusion, in my opinion.\n. Having VT100 terminal colors worries me.  There are times when we shouldn't be showing colors (such as logging in Manhattan). I'd prefer no colors, to naive color implementation that doesn't take into consideration the execution environment.\nAlso, calling this out using colors assumes that that is what the user wishes to look at.  Right now, that makes sense since we're focusing on performance. However, later when our mindset is different, the colors won't be appropriate.\n. We sorta have a tradition in mojito codebase to prefix variables that hold libraries with lib, as in libpath = require('path'). This is to prevent collision between variables names that make sense for the current algorithm and the libraries.\nThat idea is definitely not applied consistently throughout mojito thought :disappointed: though I wish it was.\n. Is monkeypatching res.end the best way to accomplish this? Does the \"req\" object have an event we can hook into?\n. The \"express\" confuses me? If this is the timeline for the entire request, I would prefer to see \"request\" or something like that.  Also, since this is a timeline, why the \":timeline\"?\n. The YUI config object doesn't have a \"perf\" key, so why are we setting this here?  http://yuilibrary.com/yui/docs/api/classes/config.html\nIf we're going to pollute the YUI config object with our own configuration details, we should at least namespace it to our library, as in: YUI.applyConfig({ mojito: { perf: ... }});.\n. Instrumenting each request does look a lot nicer than instrumenting the whole server.  By doing this, we can be sure that performance metrics for each request are kept separate from other requests.\n. Oh... my expectation is for this to look something like this:  Y.mojito.perf.instrumentMojitoRequest(appConfig.perf, req, res);\n. I think \"child:done\" is the wrong name for this.  The description leads me think the name should just be \"child\".\nOh, I'm not sure that \"render\" is the right verb in the description. \"Render\" already means something very particular in Mojito.  Perhaps \"time to execute a child mojit\" or \"time to dispatch a child mojit\".\n. I don't thinks cfg.id contains what you think it does.\n. Why are we exporting dump?  This appears to be an internal method.\n. OK, it should maybe be called \"Y.use\" instead then.\n. this._config.appConfig contains the appConfig overrides that were sent to the ResourceStore constructor. I believe that (at least) one command is using this.\n. The description isn't correct. It should be something like \"get details for the mojit\" or \"expand mojit details\".\n. This comment is in the wrong place.  It should be part of the API docs!\n. It's safer to use libfs and libpath for these variable names, so that they don't get clobbered.\n. I think it's completely reasonable use-case to have multiple perf marks/timelines with the same [group,label,id], so I don't think this should be a warning.\n. I guess I imagine something like this instead:\njavascript\nmark = {};\nmark.group = group;\nmark.label = label;\n...\nbuffer[group].push(mark);\nreturn mark;\n. This documentation is in the wrong place. Most of it isn't necessary, since it's already documented in the mojito help start. The fact that options can have a perf should be in the API docs for addMojitoToExpressApp().  Hmm... none of the other options.* are documented today, so you are forgiven :smile: .\n. Sure.\nAll I'm trying to say is that, if all marks/timelines for a request are separate from other requests, then there is no such thing as a \"collision\".  I should be able to do the following in my code, without warnings:\n``` javascript\nfor (...) {\n    ...code...\n    Y.mojito.perf.mark('libfoo', 'got here');\n    ...code...\n}\n``\n. Note for posterity:  this probably doesn't do what was intended.  This is saying that _all_ lang bundles found in a shared mojit are really the \"default\" language and not the language they otherwise specify.  (For example, it's saying that lang/Foo_de.js in a shared mojit is really english, not german.)\n. UsingY.mojito.modelsas the source isn't correct. We should be usinginstance.modelsinstead.\n. I think theY.mojito.modelslookup is wrong.  When using sharedYUIInstance, that will contain -all- the models in the app (including those in other mojits).  Instead, the check should useinstance.models[modelName]`.\n. Ideally this discussion would be cooked down into a single comment, something like:\n// We have to heir() otherwise this.something in the model\n// will pollute other instances of the model.\n. The stack doesn't.  I think the e.message contains the error, so yeah that should be in the output as well.\n. Why was this added?\n. Are you sure that this is safe to do? (Yeah, I know this code will be going away.) You might instead try changing the list ['first', 'second', ...] below to ['first-addon', 'second-addon', ...].\n. This change seems dangerous to me, though I'm still trying to work out how.  However, since this code will be going away (soon?), let's just ship it.\n. The comment is saying what the code is doing, and so isn't very useful.  I prefer to -not- have these kinds of comments.  (Comments that answer \"why?\" are much better than those that answer \"what?\".)\n. OK yeah, for the re-use of the perf variable it does make some sense.  (I've seen other cases where a comment does nothing except say what the next line of code does, which is a bad comment in my opinion.)\n. Does jslint complain about this double assignment?\n. It looks like, on the server, that Y.mojito.ViewRenderer isn't being used. That's slightly inconsistent, but it looks like it'll be OK.\n. This seems kinda random.  What does app/autoload/dispatch.common.js have to do with view engines?\n. The convention in the mojito codebase is to use my (instead of that).\n. This is OK, but just a note that there is code in the wild that uses ac.dispatch().  So, this is a BC break and should be called out in the release notes.\n. Small small thing:  what does the || [] do here?  Doesn't slice() always return an array?\n. Small small thing:  I don't think this comment is necessary.\n. This seems strange.  Why not just call this.config.getAppConfig()?\n. I'm talking about the configAddon.getAppConfig && configAddon.getAppConfig() part.  Why not just appConfig = this.config.getAppConfig() ?\n. I prefer to keep it cleaner.  If store.config is missing that's quite exceptional, and we should fail early.\n. A matter of style, but if this requires mojito module then we should just be able to access this as YUI.Env.mojito.DataProcess no?\n. The names request and response are confusing here, since they look like the \"req\"/\"res\" pair from connect/express.\nI would suggest something like name and data or perhaps entryName and entryData (or something like that).\n. There are about 4 other places where we hand-make a \"modules\" config.  They need to be updated too.\n. Just a note that this is the \"static\" app config:  the app config that is contextualized by the startup context (if any).  (It might be better to call this 'static-app-config' just to avoid confusion later.)\n. A small matter of style:  we sorta have an convention of naming the variable containing the libraries as libfoo.  It might be worthwhile to maintain that for consistency.\n. IMHO this is a very clunky function name.  Perhaps readConfigSimple() (as a counterpart to readConfigYCB()).\nAlso the description still says Reads and parses a JSON file.\n. Missing yuidoc comments.\nCan't the type parameter be inferred from the file extension?\n. One thing that has always been a problem is path = require('path');.  In this case, it's really hard to use path as, say, the path of something.  So it's just a matter of namespacing -- somehow having the libraries available but not having them chew up useful variable names.\n. It might be good if there's a BIG LOUD COMMENT saying that this is a temporary hack/workaround.\n. X_NEW2 has the proposed implementation.  (Ignore X_NEW.)\n. We needed to add this because the dispatch-helper does need to do a proper YUI dependency calculation.  Considering the significant differences in implementation, this should probably be split into two methods.\n. Why do we need to attempt the three extensions?  Can't we just use libpath.extname(filePath)?\n. Small small point, but so far the \"dependencies\" have been sorted alphabetically.  Might be nice to maintain that.\n. Using libpath.basename(files[i], libpath.extname(files[i])) instead of the replace(/\\.(js|css)$/, '') is a little more correct/robust, but might not be worth the effort.\n. What does \\= match?  I didn't think that = was a special token in regex, and thus doesn't need escaping.  Ditto with \\%2F, I didn't think that % was special.\n. This code seems a little strange -- it seems like mojito has too much knowledge of how YUI works.  Is there a YUI API call we can make instead (loader.addGroup() or something like that) ?\n. Ditto previous comment.\n. Is existsSync() being called during runtime?  That might have bad performance implications.\n. http://nodemanual.org/latest/js_doc/RegExp.html indicates that neither = nor % are special, so I think the regexes should be /=/g and /%2F/g instead.\n. Please add that information to a comment.  We really should circle back and do it the right way (once the right way is available).\n. Good catch.  However, store.getResources() returns a list of resources, so you might need to [0] on it.  Also, I think the 'asset-xml-crossdomain' argument might instead need to be {id: 'asset-xml-crossdomain'}.  (Said another way: I think I rather bungled the previous version of the code :disappointed:  .)\n. Since a single resource can have both.common. and .client. versions, I think this needs to be done differently. I think we should first walk common version, then walk client versions, so that the metadata about client version clobbers (has higher priority than) metadata about common versions.\nActually, this shouldn't be \"common and client\" but instead \"common and env (current runtime)\".\n. These two blocks look the same. Am I missing something?\n. I'm surprised that this is needed, since the port can only be an integer, no?  (The change can't hurt.)\n. Why do hybrid apps need a separate dimensions.json file?\n. Why are there two comments for the same function?  It should be one comment I think.\n. The type parameter is strange.  Why do we need it -- why can't we just iterate over extensions in the function itself, instead of recursing?\n. Also, the fact that this trims the extension from the file is sort-of an implementation details.  What this method is really doing is trying different \"flavors\" of the file, first file.yml, then file.yaml, then file.json.  That is what the caller cares about, I think. \n. This suggests that we support package.yaml, is that true?  Does npm support that?\n. This suggests that we support package.yaml, is that true?  Does npm support that?\n. The indenting is messed up.  Try using spaces (instead of tabs).\n. The @param {int} type documentation is left over from an older version of this method.\n. Since we know these YUI modules are javascript files, can we hardcode the MIME type and charset?\n. This appears to be mixing apples and oranges.  The getYUIModuleResources() method looks like it's returning resources, but it really is returning YUI loader config info.  So I think it should either return resources (real or faked), or yuiRess, getYUIModuleResources(), and the res of res: yuiRess[module] (later on) should be renamed.\n. Oh sorry, I didn't see that getYUIModuleResources() was returning fake resources.  Yeah, it's fine as is.\n. I don't think this is right.  The trick is that config.prefix might be empty, as we need to support this use-case (or at least we used to).\n. I don't think we want to use libpath.join() for URLs.  If we did, if the server is windows we'd generated URLs like /foo\\bar\\baz which is really weird.\n. I don't think we want to use libpath.join() for URLs.  If we did, if the server is windows we'd generated URLs like /foo\\bar\\baz which is really weird.\n. Neat idea, and probably OK.\nMy worry is that the syntheticStat probably marks the resource as a directory.  The way we use this stat structure today it's probably no big deal, but it might lead to interesting surprises later.\nI have a slight preference for saying that \"synthetic files don't have a 'stat' structure\" and then make sure that trickles into all parts of the system (static handler in this case).\nBut, the above code will work fine for now.\n. I thought that jslint complained about a = b = ....\n. If staticPath is used for URLs, it should not use libpath (which will create weird URLs with \\ in them if the server is on windows).\n. There were users (Livestand at least) who didn't want a prefix at all.  They'd put staticHandling: { prefix: '' } in the app.json, and we needed to be sure to do handle that.\nI think the CocktailsRT stuff is based directly off the old Livestand code, so might need to prefix:'' as well.\n. This is the part that I suspect will fail in Manhattan.  In Manhattan the server handles multiple apps, and so doesn't cd to any particular app directory at startup.\n. Should comboBase be appConfig.staticHandling.prefix + '/combo~' ?\n. It might be better to create a separate cmdArgs array, and push things to it as needed.  Something like:\njavascript\nvar cmdArgs = ['start'];\nif (port) {\n    cmdArgs.push(port);\n}\nif (params) {\n    cmdArgs.push('--context');\n    cmdArgs.push(params);\n}\n...\np = runCommand(basePath + '/' + path, cwd + \"/../bin/mojito\", cmdArgs, function () {});\n. Wrong method name I think.\n. I think this should be @method rpc.\n. No idea, this was in the previous version of the code too.  I can remove it if desired.  I'm pretty sure it's not being used anyways.  (The fixtures are only used for unit tests, and the one unit tests which loads gsg5-appConfig doesn't test for \"foo\".)\n. Unfortunately process.cwd() doesn't point to the app's directory in Manhattan, so I think you'll need to use something like libpath.join(__dirname, '..', '..').\n. Why mojito-view-renderer-server-tests?  Where is this YUI module defined?\n. Why mojito-view-renderer-client-tests?  Where is this YUI module defined?\n. Won't logLevelOrder[0] now always be debug, since we're always using config.json?\n. This is an app archetype, which contains a canned \"top_frame\" mojit, so I think what Isao has is correct.\n. A short comment would by nice, something like \"global model cache when on the client\".\n. Really?  I think that might be controversial.  As an app developer I might want my local model to override my global model.\nLooking at the implementation of get() I think the following will result in the local model being returned from both calls:\njavascript\nY.mojito.models.cuba = localModel;\naddon.get('cuba');  // returns localModel\naddon.registerGlobal('cuba', globalModel);\naddon.get('cuba');  // returns localModel\n. I think you want to do the path.join(__dirname, ...) here too.\n. Yes I agree.\nHowever, since in expandInstanceForEnv() we're using the results as part of a blend3() the extra copy doesn't do anything, and removing it lead to a very noticeable performance gain.\nI'll add the flag.\n. I copied this code from another file, so I'm not sure why.  I think it's because ArrayAssert doesn't do a recursive comparison of values if the array contains things like objects or other arrays.\n. OK.  Presumably that's their intent, if they're replacing a string with an array then they intend for the array to be used.\n. I think blend() and blend3() (and copy() and mergeRecursive()) are intended to work on JSON-like objects/arrays.\n. I think Y.Lang.isObject() returns true for arrays too, although it probably doesn't matter too much for this situation.\n. Small point:  perhaps Y.JSON.stringify(urlParams) just to be safe.\n. I think empty params are left out to \"optimize\" the URL -- so that it's as short as possible.\n. Instead of commenting this out, why not just delete it?\nIf it should be kept, there should be a comment saying -why- it should be kept.\n. Instead of commenting this out, why not just delete it?\nIf it should be kept, there should be a comment saying -why- it should be kept.\n. Instead of looking for just the \"app\" group do we perhaps want to iterate over all (potential) groups?\n. We could do that, but the goal of this feature is to automatically find and merge the application.jsons in the NPM packages.\n. Yeah, this approach seemed a little too clever for me as well.  I will rework.\n. Yes.  That is because the NPM-package-walk during preload needs to happen so that the other application.jsons can be detected.\nI'm strongly considering making a preloadFast() or something like that, which is a much lighter version of preload(), so that can be used instead when a full preload() is undesired.\n. This should use readConfigSimple() instead.  The work to wire in YAML will update readConfigSimple() to also understand YAML files.\n. That's part of what I'm saying.  Right now in develop, we should not be trying to support YAML.  So, you should use readConfigSimple().  The work to support YAML will do the needful, whether that's update readConfigSimple() to readConfigSync() or not.\n(I am working on the YAML support.  readConfigSync() is going away, so calling it will cause a merge conflict of sorts. It's better to use the established API (readConfigSimple) than to use readConfigSync() which isn't used by anyone else and which is going away.)\nSaid another way, this pull request should -only- be focused on implementing multiple application.jsons, and not also trying to partially support YAML.\n. Yeah, I had thought of that too.  I will implement.\n. I had no idea switch was contraindicated.  The errors are because I forgot to run jslint, which I'll do.\n. This comment should be part of the method docs, not buried in the code.\n. This suite has the same name as the suite found in tests/cli/lib/app/commands/test-info.js.  I don't know if that'll cause a problem or not.\n. It's a little weird having cleanup in tearDown() but the initialization isn't being done in setUp().  I suggest moving those mockery.whatever() calls from the test itself into setUp().\n. This isn't dead code, this is in fact the new API.  The \"else\" branch is actually the old code/API which we'll deprecate at some point.\n. Where are the asserts in this test?\n. This approach, of passing \"this\" to the function call, is weird.  Reading it, I don't understand what kind of object \"this\" is, or how it relates to the tests we're attempting.  If you'd created a mock object and passed it as the first argument to call() that'd make more sense to me.\n. I think you always need to metaMerge() in parentMeta, otherwise it'll never use parentMeta.view.\n. What about other fields of meta besides meta.assets ?  We don't want to drop those on the floor.\n. I thin each test suite needs a unique name.\n. count might be better renamed as listenCalls so it's easier to tell what it is counting.\n. You also might want to capture the port passed to listen() so that the tests can check that it's passed through correctly.\n. As a point of style, it's rarely helpful to put a function body all on one line.  It's cleaner and easier to read and maintain/update if it's on multiple lines.  My opinion at least.\n. How are we ensuring that the context is passed to the right place?  (Perhaps the mocked createServer() needs to capture the options, so that we can test that it received them.)\n. Similar to previous comment about context.\n. If we're doing this metaMerge(), do we still need the metaMerge() on line 157 (just above)?\n. OK, sounds good then.  I didn't realize the metaMerge() was so particular.\n. It's initialized for every call to preloadResourceVersions().  Internally, preload() calls preloadResourceVersions() twice.  The first time is mainly to find RS addons (which can also be found in node_modules).  The second time is the \"real\" load, done once the store has all its addons plugged in.  If we didn't clear out packagesVisited then the RS addons wouldn't get a chance to see the resources in the NPM modules.\nSaid another way, the packages (and app itself) are used to populate appRVs and _mojitRVs.  Anytime we (re)initialized those structures we need to (re)initialize _packagesVisited as well, so that those RV structures can get repopulated.\n. Passing the whole instance, nice.\n. This looks like it won't support subdirectories in views/partials/, which might be nice to have.\n. Small point:  would be nice if the comment leader was consistent.\n. Reading the global out of forwardConfig after setting it there is a bit confusing.  I understand what the code is doing but I don't understand _why.  There should probably be a comment explaining why we need to globalHookHandler = forwardConfig.globalHookHandler.\n. I think this should go inside the test() method, since I generally think code outside of methods is a bad idea.\nAlso, since the DNS lookup could take a while, it should really be added (at the top of the) async series, so that we can wait until it's done before doing the other tasks.\n. I think this callback should go inside the anonymous function passed to dns.lookup().\nAlso, couldn't hurt to sneak in some error checking, something like:\njavascript\nif (err) {\n    callback(err);\n    return;\n}\n. Sure.\n. The skip property doesn't appear to be part of the Parallel API.  Can we do this.skip instead?\n. Might be nice to add a comment here that this datastructure is part of the buffer argument to the callback of this.queue.done.  (It took me a little bit to figure this out, in part because the documentation for Y.Parallel is so thin.)\n. Can we rename the buffer argument to results or childResults or something like that?  buffer isn't very descriptive.\n. I wonder if we can put do some useful logging in this replacement, instead of just no-op.\n(The situation is made a little more confusing because ac.composite doesn't actually call this.adapter.done() itself, but instead calls the cb argument to ac.composite.execute().  However, we do call this.adapter.error() whenever a child fails and propagates that failure.)\n. I understand why we're doing this, but I don't think this is the best approach.  Perhaps instead we can do this.queue = null if that works.\nIn fact, we should be clearing out this.queue regardless of whether we succeed or fail.\n. Hmm... perhaps it might be clearer to use this.queue.results instead of buffer.\n. I was worried about this too, so (a) this change is in expandInstanceForEnv() so that it happens as late as possible (after all RS addons), and (b) I ran all the tests (unit & func) locally before issuing this PR.\n. Oooooooh, me like.\n. D'oh.. missed that, will use that instead.\n. I still think adding the real addon-rs-url in the descriptor is a cleaner fix (if it works).\n. I don't think the user needs to rename their mojito-foo.js middleware to foo.js, since we're simply stopping treating the mojito- prefix as special.\n. It would be nice if we could get this middleware API documentation as part of this PR.\n. The resource store is keeping track of all middleware in all the NPM modules (well, those that are mojito bundles).   It might be nice to use the store to find these middleware, so that they don't necessarily have to be in the app themselves.  (An example might be a search-mojito-contextualizer which is a couple modules deep in the NPM hierarchy.  The user should still be able to specify search-mojito-contextualizer in the middleware: [...] in application.json.)\n. I think this file might need a @module yuidoc section.  (If missing I think its methods get added to the module in the previously processed file :disappointed: .)\n. This shouldn't be here, since we don't know what the version number of the next release will be.  (It might be 0.5.9pr2 or something like that.)  Instead add new details to the version @VERSION@ section.\n. Should this comment be // Stop printing output from phantomjs ?\n. Might be clearer if this is called ModelVanilla in this file.\n. Do we really need to console.log()?  It'd be nice if all tests (unit, func, benchmark, etc) only wrote to STDOUT when absolutely necessary.\n. Is this meant to be run as part of the automated testing?\n. I'm confused.  This PR has autoload/model-base.common.js and autoload/model-vanilla.common.js files.  Are these two implementations different?  If they're different then the ctor in model-vanilla.common.js should be called ModelVanilla, I argue.  If they're the same, why do we need a model-vanilla.common.js?\n. Yeah, ac.config.getAppConfig() is preferred for the user.\n. Hmm... the router middleware should have run before this dispatcher, and it too should have called store.getRoutes(req.context), so I wonder if that can be reused.  Probably not much of an optimization.\n. OK.  I still find it confusing that a file called model-vanilla.js is creating a prototype called ModelBase and then exposing it as Y.Model.Vanilla.  The prototype name should be ModelVanilla in my mind.\n. Another approach is to put some code in listener to look for a string where phantomjs says that it's ready.\n. If ARGSFUNC is specific to just the functional tests, it might be nice to move it into the # func tests section.\n. Yeah, expandSpec() should handle a full instance just fine.  In fact, _expandSpec() can recursively merge specs (follow a chain of \"base\"), so it can/should merge data.  The main benefit to passing the instance to _expandSpec() is that it allows us to use a blend() later (instead of blend3()).\n. I mostly agree, however note that there is also Y.Model.Vanilla = ModelBase; in this file.  See how confusing that is?  If this is just temporary (if we'll switch in the future to using something provided directly from YUI) then it's no big deal.\n. This sounds nice to me too.\n. If not used, go ahead and chop it out.\n. Should this perhaps be called \"LazyLoadRPCBinderIndex\"? If there's another \"MainBinderIndex\" in the app then this one will conflict with it.\n. Missing documentation.\n. Uggg.. there's a bunch of yui-internal stuff in here. Can we get a \"re-use()\" feature added to YUI, and use that instead?\n. Do we need to initialized the dispatcher for every request?\n. Yeah, this looks a lot cleaner. In general we should care whether something is the exact resource we want or a symlink to it. That implies the use of stat instead of lstat. (Said another way, only use lstat if you really do care whether something is a symlink or not. We don't.)\n. Doesn't look like this is using the ?count= parameter, so this code can be deleted.\n. I think we can keep this comment (\"fulfilled with the same format as getLast()\") since it -is- true :)\n. This structure is useful for the new algorithm, but should be called something else. It contains resource versions and is used by _resolveVersions() so perhaps it should be called _mojitDetailRVs.\n. I'm not sure why this is here. I can't think why shaker-specific things need to be in the mojito library.\n. Dropping the chosen:true filter is fine as long as this PR doesn't regress issue #1107 .\n. This needs to be guarded against staticAppConfig.resourceStore.lazyResolve. If we're resolving at startup we _do want to clear these members.\n. crtType is probably better spelled as mojitType since that what it holds.\n. Similarly, why not just res? (Why is \"crt\" important? What info does it convey.)\n. I think this is serving the same purpose as _mojitDetails so we should use that instead.  (The current _mojitDetailsRVsCache is holding the resolved mojit details, not just the individual RVs, so perhaps it should be called _mojitDetailsCache (or perhaps just _mojitDetails).)\n. To be consistent with other nomenclature, the comment should probably be MojitType: selector: affinity: non-stringified details instead.\n. That's fine, it's just that there's nothing in the mojito code base today that has anything to do with shaker, so it's a little strange to add this. Having resources with type:addon,subtype:shaker can be done without adding this line to mojito.\n. For both of these \"environment\" is really \"affinity\" no?  If so it'd be clearer to say \"affinity\" instead.\n. BTW, loadConfigs() is missing documentation. (Yeah, I know this PR just moved it).\n. Hmmm... I wonder if we want to stash this condition into this.lazyResolve or something like that.\n. Uggg... having two variables that only differ by case seems to be a recipe for confusion/bugs. What does each variable hold? Is there a better way of describing each of them?\n. I think yuidoc will need a @method resolveResourceVersions in order to generate documentation for this method.  (Yuidoc doesn't parse javascript -- it only looks at comments.)\n. Can we use the same \"sort resources by depth\" trick here too?\n. \"Environment\" is traditionally (in mojito code and docs) as things like \"development\", \"production\", \"staging\", etc. \"Runtime\" is used to describe the client vs. server. \"Affinity\" is used to describe which runtime a particular piece of code is intended for.\nUnless there's a strongly compelling reason to use different semantics here, it is strongly recommended to stay with the existing semantics. (If we want to change it, we should change it everywhere: all code and documentation.) That work (and discussion with the whole mojito team about the value of that work) is beyond the scope of this pull request, so please stick to existing semantics. Consistency aids clarity.\n. Hmmm... this @return is confusing. What is the intended return value of this resolveResourceVersions() method?\n. Oh hmm... excepts a lot of places in the resource store \"env\"/\"environment\" is used for runtime (that is \"client\" or \"server\"). However, each resource has an \"affinity\" (\"client\", \"server\", or \"common\") for a particular \"environment\". If a field contains the affinity of a resource it should be labelled as \"affinity\".\n. I've never seen that convention before, but I can see the value of it.\n. Yep, sorting works well.\n. I think \"environment\" here is just \"client\" or \"server\".\n. Might want to move this below the cache lookup, so that we don't pay the cost for the getResourceVersions() call if there is a cache hit.\n. Yes, this was intentional. The new flow requires that we create the runtime YUI instance before creating the resource store. (The resource store used to be created first.)\n. The variable name \"mymodel\" isn't very descriptive. I believe that this is intended to hold the YUI module name of the model, so perhaps we can call it \"yuiName\" instead.\n. I think that the model should still be registered using the passed in name, that is \"modelName\".\n. Yes, that's possible. I was thinking we should keep the YUI module name has priority to maintain backwards compatibility. (If BC wasn't a concerns I'd just say to use the model name, and not allow the YUI module name.)\n. This should perhaps say\nThe YUI module name of the model, or the model's filename (minus the affinity and context parts).\nIf the model's filename is give, a contextualized version of the model will be returned.\n. I think there is some confusion here.  NAME is the YUI module name.  We do expect models to continue registering themselves as Y.mojito.models[NAME] = ....\nThe \"model name\" comes from the model's filename, so models/foo.server.js has a model name of foo (but could have a YUI module name of FooModel or anything really).\nSo, the yuiName variable really does contain the YUI module name of the model.  This can (and often is) different than the \"module name\".\n. Cool, if we agree on the non-BC change then yeah we can make it simpler.  (Regardless of what mojito-current does, mojito-next should only have the by-filename lookup.)\n. space after closing parenthesis\n. This sentence is a little clunky.  Perhaps:\nCalling `ac.models.get('mymodel')` wil return the model which is appropriate for the current context.\n. If there is an error I'm not sure we can make any assumptions about the contents of the raw variable. So, we might need a return after the Y.log.\n. Hmm... this extra comment should probably be removed.  (Alas, looks like something I might have left... :disappointed: .)\n. There's something not quite right about the docs for modelName, perhaps just that the comma needs to change to a period.\n. Tags are unbalanced:  h2 opens but h3 closes.\n. Hmmm... I curious why you are particularly interested in this test... :smile:\n. Have you tried this?  I think we might still need the requires to have {{name}}ModelFoo.\n. I'd maybe say something addition, such as \"res.headersSent was introduced in node10\".\n. You might also want to create a new dispatcher for every test (in the setUp). To do this you might need to use Y.mojito.util.heir(Y.mojito.Dispatcher) so that you're using a separate object for each test.\n. If we're no longer doing if (settings[section.settings]) then I think we can drop this assignment (settings[section.settings] = path) as well.\n. I think we also need to make sure that neither data1 nor meta1 has information from kid_a or kid_b.  (Said another way, the results of the first call to execute() shouldn't be mixed into the results of the second call.)\n. If j is just one more than i it might make more sense to do = matches[i + 1] instead.\n. What about just having mojito (or the user's app.js) just app.set('store', mojito.store) instead? Same approach for other midConfig fields as well.  Then each middleware can simply req.app.get('store').\n. Yeah, I agree about the change where initialization occurs on the first request.\nI agree that app.set('mojito store') is probably better.\nAs far as search middleware boot-up, remember that they are in control app.js which means that they can load there middleware however they want. (They don't necessarily need to let mojito do it.) Hmmm... the issue with what I'm describing is that we do want sugar for mojito to register the middleware that it knows about (the middleware that the RS found). If they wanted to instantiate (with stuff like midConfig) middleware by hand (not using mojito's sugar) then they still need to find out the list of middleware that mojito knows about, but this is just a RS.getResourceVersions() call so shouldn't be too hard.\n. \"propertly\" ?\n. ",
    "jithin1987": "Just wanted to ask if there is any documentation for this? I am trying to access config in defaults.json in model.\n. I tried passing ac.config to init() But for some reason it's coming as null. Though there is no config in the spec for my mojit, I was expecting it to contain the ones from defaults.json. - which brings another question, is defaults.json mojit level or app level ? If it's mojit level what is the standard way to define app level configurations and how to use it? \n. Ok. this is what I had to do to get this work. call model.init(ac.config) and define setting in \"config\" of the mojit in application.json.\nWhich is all fine but how do I have a config defined once for the entire application? I thought putting a defaults.json in app level will take care of it, but it didn't.\n. Thank you very much. Got it working.\n. I am also facing the same issue. And it's been open for 2 years !!! Thanks @taomin for the workaround.\n. @caridy But it does work when I use ac.done() and the associated view uses the partial. ie instead of ac.partial.render () this works\n150             ac.done({data : newData }, {\n151                 view :  {\n152                     name: \"new-tasks\"\n153                 }\n154             });\nThen what is the purpose of ac.partial ? From the naming it suggests that it's for manipulating partials but it cannot load html inside partials directory. Documentation - http://developer.yahoo.com/cocktails/mojito/api/classes/Partial.common.html#method_render - says for ac.partial.render() view has to be views folder, which makes me conclude that ac.partial is not for handlebar partials.\nMy use-case if to instantiate this partial with new data, like in YUI template - http://yuilibrary.com/yui/docs/template/\n. @caridy Thank you very much for clarifying. One doubt I still have with partials is that, in Mojito is it possible to instantiate a view partial with data and render it, without having to include it in a view first ? ie in view.name can I use partial/task instead of using new-tasks which includes the partial task\n. @caridy @lzhan This still does not work for me.\n199                 ac.partial.render(\n200                     currentData.comments,\n201                     'partials/message',\n202                     function(error, result) {\n203                         Y.log(error);\n204                         Y.log(result);\n205                         ac.done(result);\n206                     }\n207                 );\nLog Output\ndebug: View \"partials/message\" not found\ndebug: undefined\nI do have this file partials/message.hb.html\nMy Mojito version is 0.7.5\n. @caridy @lzhan  \nI think I figured out what is happening, if I use any path other than partials it works.\nEg:  partial/message.hb.html works. But I wanted to use partials because this way I can make my index.html  include the partial in it and based on a user action I can refresh that part by using partial.render()\nSo my options here are to make this part of my mojit a child mojit or use a different view to have my content rendered there.\n. And the easiest fix here for me is to do cp -r partials/ partial or ln -s partials partial\n. It's on node. It's. Unit test ran via mojito test\u2014\nSent from Mailbox for iPhone\nOn Mon, Jan 27, 2014 at 10:18 AM, Drew Folta notifications@github.com\nwrote:\n\nAre you running your test in a browser or in node?\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/issues/1314#issuecomment-33400601\n. \n",
    "mojit0": "Pull request is now in for a patch that should resolve this.\n. This should function properly now with the update to startup from https://github.com/yahoo/mojito/pull/422.\n. I've updated the README file to reflect the proper installation. Because there's a \"binary\" for Mojito you currently have to do a global install as well. Proper steps should be:\nnpm install -g mojito\nnpm install mojito\nThe first command will put the mojito command where it should be found. \n. This is a reasonable short-term workaround provided you don't mind having the same version of Mojito for all your applications, or being unsure which version is currently installed globally should you be installing separate local copies. Over the long term our intent is to split the \"cli\" so bin/mojito would be a separate package you install globally and you'd install whichever \"lib\" version you need for a particular application. For now I'm going to close this request. But thanks for the quick input and interest! Keep em coming!\n. The reason for the \"double install\" is currently related more to the fact that the mojito \"binary\" must be installed for you to use 'mojito create'. Once you've done that you can then cd into the individual applications and install the mojito library. The current package isn't \"split\" into a \"cli\" and \"lib\" pair, but that's our intent. So long-term you'd globally install the command line tools, and locally install the library version your various applications depend on.\n. Nice patch. If you'd like this merged quickly we'll need some unit tests for templating which help ensure we're not going to see any regressions, otherwise we'll merge this once we have developed those tests ourselves.\n. It's not truly unnecessary, but it is incorrect. It should read:\nnpm install .\nThis ensures a local node_modules directory is created and populated with the necessary dependencies.\nWe'll update and push at the next opportunity.\n. We've scheduled this pull request for integration during our current sprint. Thanks for the submission!\n. This is a reasonable extension, but our goal for HTMLFrameMojit is that it be more API driven than \"automagic\" and something you may often write on your own to optimize the needs of your application. For that reason we're suggesting you use this as your own variant rather than bringing this patch in as the baseline version.\n. There are a couple of issues. Updating express is something we can schedule, but there's also some unfortunate cruft in the startup sequence that means the server.js file won't start mojito properly so changing from 'mojito start' to 'server.js' may not be workable. The good news is this is on our radar for the near-to-mid-term. We'll try to see if we can bump this up given that it's in your way tho!\n. I believe a fix for this is now awaiting final review. It's effectively a duplicate of issue #12. \n. lgtm\n. lgtm  :)\nOn May 14, 2012, at 12:53, \"Isao Yagi\" reply@reply.github.com wrote:\n\nRen would like feedback on docs/contributing.md in particular\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/pull/151#issuecomment-5698738\n. Replaced by \"clean\" version without additional commits.\n. Within the context of an application this appears to work. But it breaks 'mojito test' for those working on the framework itself. If you cd into a new checkout of mojito, then descend into the source directory and execute 'mojito test' this patch causes it to fail without executing any tests. I think we'd need a version that works for all scenarios before we could merge this in.\n. https://github.com/yahoo/mojito/pull/232 merged and ready to push with next release fixes this.\n. https://github.com/yahoo/mojito/pull/233 (Same edits, minus the extra commits).\n. Fixed by https://github.com/yahoo/mojito/pull/228 which should be merged shortly :)\n. Oops. Hate it when that happens. Wrong issue :)\n. OK, but I'm going to have to close and redo that pull request. It's a mess. Full of unrelated commits. \n. Typically has to do with how the pull request's base branch was created. In this case it appears they didn't do a clean checkout and/or rebase sequence prior to their editing/pull request creation.\n. The two test failures in that job have been around since at least build #84 (developer guide test bugs).\n. Dali will be leaving Mojito although we're not sure about timing. There's a pull request we haven't had a chance to fully vet which replaces Dali with Socket.io which I believe will mean any patch of this type will need to be done on that new infrastructure. In the interim I'd say go ahead and create a pull request and we'll prioritize how we want to get both things accomplished.\n\nss\nOn Jun 27, 2012, at 11:43 PM, Caridy Patino wrote:\n\nWhen making a tunnel request, the body.reqs[0].data.context will be produced at the client side based on mojitProxy.context, this of course has runtime=client. Once this context obj lands on the server side as part of the tunnel request, it is processed by mojito-handler-tunnel to produce the \"command\" structure used to _dispatch the mojit action. The problem is that \"runtime\" is not overruled (even though it was forced during a previous middleware entity.\nAs a result, if you have any settings like this in your application.json:\n{\n   \"settings\": [ \"runtime:server\" ],\n   \"foo\": \"bar\"\n}\nac.app.config.foo will be \"bar\" only when hitting a traditional controller/action through a route, but it will not be honored during a tunnel request to any of the mojits, because for the tunnel, runtime will be \"client\".\nAs today, we solved this by hacking into the DaliProxy, and doing this in the controller:\n110               proxyCommand.context.runtime = 'server';    //// <---- this is our hack!\n111\n112               // dispatch the command as the proxy\n113               ac._dispatch(proxyCommand, makeAdapter(ac, txId));\nso, the mojit that will be executed will honor the runtime accordingly.\nI don't think this is the right thing to do, I think mojito-handler-tunnel should take care of this before producing the final \"command\" structure.\nPlease, let me know if all this makes any sense, so I can do a proper pull request if needed.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/issues/236\n. Currently testing this for merge and inclusion in the next release.\n. Unfortunately this patch doesn't pass jslint due to '' usage. The patch should be updated to either remove the '' (which is probably the best solution given that we don't have a coding standard which promotes '' use), or to add the jslint directive 'nomen' as in /_jslint nomen:true/ to the top of the file. If you're able to make these changes and run the result through jslint cleanly that'll be fastest. Otherwise let us know and we'll do it on our end...it'll just take a tiny bit more time :)\n. Closing in favor of a more comprehensive update to Mojito startup logic: https://github.com/yahoo/mojito/pull/422\n. I can't speak to how we'd prioritize merging this feature, but if you have a use case requirement and would like to contribute a solution we'll definitely consider it. \n. @rwaldura It will depend on the nature of the error/status code in question. Certain codes might be detectable as early as middleware in the pipeline, but most are far more likely to occur within the engine and well after the middleware has handed off to the Mojito core and the server-side controller logic.\n. +1 to making this a wiki page, not a commit.\n. That's a lot of commits. What's the specific set of deltas that's triggering this issue? \n. Closing since yuitest npm module doesn't include code coverage support :(. We'll pick this back up after test conversion is complete.\n. Yeah, I like the kind of defacto standard that' arisen around 'deps' for JS files that aren't npm modules but dependencies, lib for only your own stuff, and everything else as a node module.\n. Still debugging an html5build related regression, although all unit tests pass. Don't merge yet :)\n. Tracked this down to a problem caused by the glob module's inclusion of graceful-fs, which hangs write operations. I've logged a bug with node-glob, but I confirmed that changing line 39 of glob.js from:\n\nvar fs = require('graceful-fs')\nto:\nvar fs = require('fs')\nfixes the issue.\n. https://github.com/isaacs/node-graceful-fs/pull/8 fixes this issue. Working to get it patched up :)\n. Isaacs patched node-graceful-fs for me and pushed 1.1.10. With that patch in place this now passes. See pull job #34 :). Ready to rock!\n. New tests, and existing tests, are being moved to Arrow in anticipation of open sourcing that framework. At present all that work is being done in a separate branch with anticipation of merging it into develop when the tests are ported, Arrow is open sourced, and we've completed work to augment mojito test with a way to run both the tests existing customers have written and the new framework tests being written for Arrow.\n. New tests, and existing tests, are being moved to Arrow in anticipation of open sourcing that framework. At present all that work is being done in a separate branch with anticipation of merging it into develop when the tests are ported, Arrow is open sourced, and we've completed work to augment mojito test with a way to run both the tests existing customers have written and the new framework tests being written for Arrow.\nss\nOn Jul 26, 2012, at 9:30 PM, Fabian Frank wrote:\n\nHow can those tests be run? Using mojito test?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/pull/318#issuecomment-7296811\n. +1\n. passed pull job #33\n. Gotta work on those syncs :)\n. The GitHub diff didn't allow looking at the store.server.js file :(. But a manual inspection of the file looks solid. All evidence to the contrary from the blizzard of comments above this looks great. And thanks for putting up with my line-by-line review :).\n. +1\n. A few nits, otherwise +1.\n. @FabianFrank server.js is no longer part of the Mojito framework. It was removed by one of the later commits. The server.js files in Mojito applications invoke app.start(), which calls listen(). As to port, or other configuration vars, the createServer call allows you to pass options to configure the server. You can also manipulate them via the app instance before you call start(). Also, all code that uses port in particular, has been changed to look at process.env.PORT. I tested specifically with Heroku foreman and it works just fine. Mojito starts up, it just runs on port 5000. There's also a unit test included which verifies that if you set process.env.PORT yourself Mojito will use that port. So there's plenty of control to ensure that when it comes to the listen/port-number question this should \"just work\" for most common cases.\n. @mridgway As to BC, I'm almost certain this could break any application since it is clearly an API change. The old utils.App object is gone, so any application which was depending on that object will break. Additional minor changes to API also exist around the Mojito object and MojitoServer (which is effectively now private). That said, I have no issue with that. I don't think we should use that as a criteria for anything other than how we write our release notes until we reach a point where we're willing to ship a 1.0.0 version.\n. @mridgway Re commenting the server.js files... I can do that :). I think if we're going to do that tho, it'd be good to get some input on precedence as you pointed out. At this point I believe there are three clearly used values in order: any options passed in, any value for process.env.PORT, and the default port value of 8666. There's at least one other place in the code which also uses appConfig to supply data. And there's the long-standing question of what about the process.argv and using input from the command line. I'd like to take that discussion/solution and put it in a new PR tho.\n. @isao I think it's ok. Was waiting to ensure tests passed properly and for the current release to be cut so we had time in case some edge case popped up.\n. A proper REST implementation should support GET, POST, PUT, and DELETE. For performance reasons it's sometimes useful to also support HEAD requests. As part of that support HTTP status codes other than 200 can indicate success and should be properly handled. We may want to open a separate issue for full REST support so we can focus this bug on only what's being blocked at the moment tho.\n. There is a pull request for dynamic port but not for ip address. We can put that in our queue.\n. 0.4.7 and 0.5.0pr2 support a new update which removes the start() call and replaces it with listen() support. The index.js and server.js files of existing applications need to be updated to support these releases but they should solve this issue.\n. +1\n. On Sep 12, 2012, at 10:58 AM, Caridy Patino wrote:\n\nAbout the perf->logFile definition, I'm getting to think that this feature is more likely to be triggered from the command line, something like:\nmojito start --perf path/to/file.log\nand by default log on ./artifacts/perf/.log\n+1\n. In my mind this is a concrete example of the value of using an M prefixed namespace and isolating from YUI rather than tying ourselves so tightly to it we become dependent on their bug fix schedule. With an M.JSON wrapper we could fix this bug without affecting our API or changing anything but our internals. What will we do when YUI fixes their issue? Continue to have some code with YUI.JSON and some without? or change it back. Both are poor alternatives to taking ownership of the interface under a Mojito (M) prefix.\n. @caridy I didn't mean to suggest that YUI won't evolve. My point was that without an insulating layer we can only evolve at the pace they evolve. I believe that we have evidence already that we may find that having our pace dictated by the YUI team may occasionally be burdensome and require us to do changes, such as this pull request, that are actually counter to our long-term API goals.\n. I'd still like a comment such as:\n// This is only here because shaker needs it and we can't find a better way at the moment.\n:)\n. I'd be good with a default that works inversely to that. Seems to me the default should serve customer application needs first.\nss\nOn Sep 19, 2012, at 2:40 PM, Fabian Frank wrote:\nYou are running mojito jslint wrong. You are doing\n$ mojito jslint\nwhich runs jslint for the mojito framework, not your app. You should run\n$ mojito jslint app\nif you want to lint your app.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/yahoo/mojito/issues/533#issuecomment-8706080.\n. @dmitris I agree with all your points. A reimplementation/cleanup of the command line is one of our goals. We've almost completed work to resolve much of the trouble and inconsistency with mojito start vs. npm start that should land in the not-to-distant future. The rest is undergoing some design discussion but it's on our plate.\n. +1\n. @drewfish I'm not worried about it. I'm sure it'll have to reappear at some point. But this PR is about fixing unit tests...not fixing Mojito execution.\n. @caridy afaik we're using the version in npm and hence the todo flag isn't supported until that package is updated from a jslint version which supports it.\n. Just a note, but we're unlikely to update the docs for shareYUIInstance except when we remove it entirely...which should happen in a very short time. The direction we're taking is that shareYUIInstance will be how Mojito works, and if sandboxing of separate instances is needed for a particular application the developer can do it themselves.\n. +1\n. +1\n. +1\n. +1\n. Other than optional nits, +1\n. +1\n. Adds a getter so that the server.js file for a Manhattan app can look like:\nprocess.chdir(__dirname);\nmodule.exports = function(config, token) {\n   var Mojito = require('mojito');\n   var app = Mojito.createServer();\nprocess.emit(\"application-ready\", token, app.getHttpServer());\n};\n. Yea. It's likely needed in all branches.\n. @caridy The whole point is to make it Manhattan friendly :) I've tested it with the latest changes and it seems stable now with Manhattan deployment uncommented in the server.js file. The release notes for the proposed 0.4.7 will have to point to updating both the index.js and server.js files in any applications which are using the older versions.\n. +1\n. +1\n. +1\n. One other change between versions that might be affecting you depending on the files in question is that modules are no longer automatically added by mojito. So errors of the type Y.mojito being undefined mean you need a requires array entry for 'mojito'. Errors around slots on the action context like ac.params mean you need a requires array entry for 'mojito-params-addon', and so on. Is it possible that one of these kind of issues is happening? \n. @caridy re: the commands, yes. I'll do that today, along with untangling the conflict re: Drew's unit test fixes, and update the PR.\n. Adjusted per feedback. Thanks guys.\n. +1\n. +1\n. +1\n. +1\n. +1\n. One comment, otherwise +1\n. +1\n. Marco,\nI know Bill is working in the direction you're suggesting with his work on integrating YAF in the client. He can provide more detailed input.\nss\nOn Dec 9, 2012, at 2:14, \"Marco Asbreuk\" notifications@github.com<mailto:notifications@github.com> wrote:\nI wanted this to be a pull-request, but I can only post issues...\nCan't we use Y.EventTarget instead of the suggested interMojit-communication? The first is such a great infrastructure of and familiair by YUI-developers.\nBesides that, I think there are some more reassons why broadcasting through a masterMojit by code doesn't seem the right way (from my point of view):\n1) When you setup the broadcasted event at the masterMojit, you assume the targetid of the receiverMojit is available. However, when the receiverMojit gets a refreshView(), its Id will change.\n2) You want Mojits to act as singleton modules (mojits). So, you should be able to distribute them and integrate them without having to change the code elsewhere (except for application.json). But using this structure, you always need to modify code of a masterMojit in order to succeed communication to your receiverMojit\n3) I like the mojitStructure and I'm developing an app with quite a lot child-mojits. I find myself writing a bunch of code within the masterMojit just for making communication possible. Because I'm struggling with childMojits that might not yet exist (issue #847https://github.com/yahoo/mojito/issues/847), I'm writing it this way:\ninstance.mojitProxy.listen('statusChange', Y.bind(function(payload) {\n        var instance = this,\n            mojitChildren = instance.mojitProxy.getChildren(),\n            receiverID = mojitChildren[\"footer\"];\n        if (receiverID) {\n            mojitProxy.broadcast('broadcast-statusChange', {message: payload.data.message}, { target: {viewId:receiverID.viewId }});\n        }\n        else {\n            Y.ItsaDialogBox.showErrorMessage('Internal error', 'mojitChild \\'footer\\' does not exists.');\n        }\n    }, instance));\nSo, with many childMojits, the code becomes huge.\nI think I could use Y.EventTarget right out of the hood, but I want to programm the suggested Mojito-way.\nWhat your oppinion in this?\nMarco.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/yahoo/mojito/issues/848.\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. why the explicit null? \n. missing semi? \n. As a matter of style I like to keep semantics between null and undefined clear. Passing null here means arguments.length == 1 on the other side. That's different than allowing it to remain 'undefined'.\n. Not a big fan of \"no space after //\". I think we should standardize on \"real sentences\" for comments. So:\n// Log a warning if server mojit has a dom dependency.\n. In general I'd like to see us hide code of this type behind a config flag. So we'd see this if we had debug/verbose on but wouldn't run the check otherwise. \n. jslint :)\n. I think checks here should be explicit module names, contained in a CONSTANT somewhere :)\n. This api change wasn't mentioned in the backward-compatibility notes.\n. could cache length here. probably not a big deal in this case but it's a good habit.\n. It would be good for us to get in a habit of providing enough data here to know what the keys/values should look like in parameter objects.\n. perhaps we could migrate ycb etc. into an npm module so we avoid these kinds of things? a todo here might be nice to remind us to come back and clean this up\n. The use of ATTRS in uppercase would imply a constant, but I think we're going to let this data structure be populated. Perhaps we need a different naming convention and and/or an accessor?\n. Is there a reason this function isn't in the common utils.js file?\n. Not sure \"mixed\" is a type :). An example, or expanded description here would be nice.\n. As a general case all code in Mojito, with the exception perhaps of the resource store, was updated to follow the Google Closure standard, which is still YUIDoc compatible, of putting the type first, then the param name. Also, we should be using proper sentence syntax in all comments, Initial caps and a period. This allows us to run the Google linter to verify that we're properly commenting the code since I checks not only code but comments against their matching functions to find missing param declarations, out-of-order declarations, etc.\nparam {string} fullPath The path to the JSON file. \n. Seems like this could be right after the split() call to be more efficient.\n. Ok, confused. We say earlier if length of the split !== 1 return. Then we join what can only have 1 part. Am I reading that right? \n. The return comment says {array} but readConfigJSON's return comment says {mixed}.\n. I think we want Y.JSON here.\n. and 'json'\n. Missing a comment.\n. Why not just null? \n. Missing description.\nAs a general case, do we want to just use a single asterisk comment for private functions? \n. indent 4\n. How do we test whether this walk process works correctly? I think it would be good for us to start migrating anonymous functions like this \"outward\" where we pass them via name. This would allow us to a) comment them and their intent, b) unit test them independently against different data sets.\nSo perhaps the nested function(settings, config) {...} logic becomes:\n/*\n- Walks YCB settings data and ensures each setting is initialized properly.\n- param {object} settings ...\n- param {config} config ...\n  /\nthis.INIT_YCB_CONFIG: function(settings, config) {...};\nthen we invoke via:\nthis._appConfigYCB.walkSettings(this.INIT_YCB_CONFIG);\nThen we can write nice unit tests targeting that helper function by name.\n. Might be useful to cache packageJson.yahoo as 'pjy' or some such outside the loop rather than traversing multiple times.\n. Might be clearer to provide the event name here since the function name doesn't look like a handler, i.e. it's not \"on{eventName}\". Or we could start a trend and name handlers with a common naming convention.\n. If this.config.prefix starts with '/' this may create issues. Might be best to stick with libpath.join(), unless we've got checks elsewhere to ensure that prefix never starts with '/'. The related calls on urlParts (above and below this line) raise a similar concern.\n. This entire function seems to be a dup of the prior one, with one ! as the only difference. Adding a param to a shared private routine and making the two public routines wrappers would be a dry-er approach.\n. This subset of functionality could be factored out and shared with the common routine extracted to support the previous comment.\n. Might be nice to take 'autoload', 'yui_modules', 'tests' here and make them members in an 'ignore array', which could then perhaps also include other dirs such as 'artifacts' or dirs which the mojito app developer wants hidden.\n. Based on two optional pop() calls below, a quick check here for > 3 would let us exit early if the basename isn't valid (has too many '.' s).\n. Y.JSON\n. why not getResources(env, ctx, ...);\n. Y.JSON\n. I'm confused. There's nothing here which would imply that the results are actually sorted from what I can tell.\n. The leading _ here would imply we're violating encapsulation and removing a private property. We should probably request a way to clear this data via a public function call, or provide the YUI team with a pull request and augment YUI.Env with our proposed function if it's not defined in the interim.\n. Should the line below reference Y.Env rather than YUI.Env? \n. defining:\nvar dict;\nand then using:\ndict = {};\nthis.sortedModules[env] = dict;\nwould avoid constantly traversing the same chain repeatedly. The same approach for poslKey and lang would keep traversals to a minimum.\n. As a coding standard it's a bad practice to assign to a parameter. Older versions of certain browsers would crash if you did this. Newer standards are looking like they'll disallow this practice in strict mode.\n. Nice. But a comment about intent here would be nice to clarify the goal of the loop.\n. A nit, admittedly, but the function of this routine and the name don't mesh for me. parseYUIModule implies we're going to read, but this routine does a lot more, it fully initializes a range of data structures as well.\n. What if this fails? \n. This seems like a nice reusable \"initCtx\" routine that could be leveraged to mock contexts etc. Maybe we can extract it?\n. Should include this API change in the compatibility and change docs.\n. !! might be cleaner.\n. Slick. Probably overkill but it might be nice to extract as a reusable function:\nY.mojito.loadSync: function(name, path) { ... };\n. libpath.join ? \n. libpath.join() ? \n. Should probably be in utils. Also, needs a comment.\n. malformed json (trailing ,)\n. No comment.\n. :)... another use of Y.mojito.loadSync(name, path);\n. not 8666? \n. prefer:\nif (typeof callback === 'function') { callback(...) };\n. Prefer:\nif (typeof callback === 'function') { return callback(err) } else { throw new Error(err) };\n. I'd like to see us use options to set the Y log level and update all our logging calls to log at a level rather than this type of checking. So no if() here, just libutils.log('Removed: ' + shortDest, DEBUG); \nMaybe we need a design discussion on how to upgrade our logging so we can do a general pass.\n. What if this fails? Full disk, permission errors, etc? \n. callback check. I'll stop noting them individually, I'd just like us to adopt a common pattern of checking they are real.\n. I think the answer is yes. We have open bugs/pr's for this if I read the context correctly: https://github.com/yahoo/mojito/pull/285\n. libutils perhaps? it'd be nice to be consistent and it seems many other files here use libutils.\n. libutils? \n. parameter assignment\n. If we're going to keep this file it'd be nice to comment the various functions in it. Many are uncommented.\n. Reformat comments of this type into jsdoc standard.\n. parameter assignment\n. Is this an API change we need to note in the change docs? \n. sync loading. Perhaps we could make this into a client-side require() ? \n. Different api for the same function name across files seems like it's asking for bugs.\n. Seems like extra overhead here. We have 3 args possible: msg, lvl, src. We should be able to avoid an apply() and just call directly.\n. same sync load logic for loading the store.\n. A nit, but I wouldn't name this callback, it's more like the \"walker\" than a function you call on async completion or in case of error.\n. cache this.settings. it's accessed multiple times within each iteration of the loop and never changes.\n. Missing description.\n. parameter assignments (context, options)\n. I'd like to see us replace all one-off merge routines with a single one from utils.\n. Could these variations be handled via parameters rather than duplicate code? \n. wow. just wow.\n. parameter assignments (base, parent)\n. prefer:\nArray.isArray()\n. Missing description.\n. Missing description.\n. We could check that here and report it via warn(). \n. this.dimensions, this.dimensionPaths, options.useAllDimensions, this.dimsUsed should probably all be cached outside the triply-nested loop here.\n. Missing description.\n. 'return' rather than 'result'\n. Parameter assignment.\n. could be null. need check for that here...but in this particular case I think the entire check is unnecessary. for/in won't bail on a null so if dimension is null we just pass over the loop without error.\n. cache this.dimensions and this._dimensionPaths outside the loop.\n. constructor checks are notoriously poor ways to determine type. If we really want an Object we may want to use Y.lang.isObject here.\n. Could we add a mocking constructor to the test framework to do this? It's repeated a number of times here.\n. Probably should be Y.Test, not YUITest and require in 'test'.\n. Should use a common routine from the test harness, or at least the one from utils so we are using one we write unit tests for.\n. Y.JSON\n. A nice routine. We should suggest this as an augmentation yuitest or find a place for it in our test harness (mojito-test.js on the Arrow branch).\n. Another nice reusable mocking function. Can we migrate to the test harness? \n. Won't pass jslint with multiple var statements. I think we want our test files to be lint-free.\n. We should consistently use the sandbox Y instance.\n. Won't pass jslint with multiple var statements.\n. } catch (err) {\n. dup\n. not quite a dup, but it seems like we could use a common routine for building a resource mock.\n. dup\n. dup\n. jslint\n. dup\n. jslint\n. Guess we can have a team chat about this syntax. Never liked it myself, probably because older parsers would give you an auto-semicolon-oscopy rather than wait to see if the next line started with a '.';\n. Y.JSON\n. dup\n. made me think of blah.js.swp (vi swap files). do these get ignored? \n. Prefer to move the comment inside the else block and put the else on the same line as the } rather than splitting this way.\n. Comment inside the else block.\n. Fair enough. Perhaps we could consider a url builder to use so we're sure we get consistent results.\n. Point taken. It's not as big a deal in server-side JS, but can be a huge performance issue when iterating over client-side \"dynamic lists\" such as HTMLCollection etc. \n. Sorry. Meant \"read json\" here. We seem to do that a lot :). This routine did a bit more than pure read, but not much.\n. Ok. Didn't clue in to that at first. I'm all for a little more obvious name so it's not confused with a simple getter.\n. Not in that case. Just noting that we're lax in other areas and maybe carried that over here. If it's internal it's fine as is.\n. Agreed.\n. Would we end up with partial output we'd want to clean up? Or perhaps it's enough to just say \"hey, it failed\" as long as a restart would potentially work once the underlying issue was addressed.\n. For what it's worth both Bill and I wrote JS for over ten years following your preferred format -- it's ours too. But we lost that battle to the community and tooling behind jsdoc.\n. I guess my point is that a static analysis tool, such as the Closure compiler, would flag this as well. If the readConfigJSON routine says it returns mixed then so does this method since it returns the value of invoking that function.\n. Still a bit confused. The sortedPaths var is an object, which has no inherent sort behavior. Object.keys likewise doesn't provide any guarantee of order, although it is an array. I'm willing to take this offline tho, just so I can more clearly understand the data structures and how they're operating here.\n. K. I'm still working through the YUI cookbook to fill out my YUI knowledge. \n. I agree closures are useful. They're critical for certain things. As a general case I'd still prefer to organize our code for maximum testing tho. As a framework rather than a single vertical I think erring on the side of testing, instrumentation, etc. is in our long-term best interest.\n. npm start works without any additional changes to the package.json. I'll remove the Procfiles.\n. could remove the file entirely, but convention and history mean applications expect it here.\n. We _must have index.js for Manhattan, but we don't want it to be full of \"real code\" or it becomes a mess for every other environment. Hence we have mojito.js with the real logic and both the server.js (which is what npm start uses by default) and the index.js (which is what Manhattan requires) simply point to the real code.\n. Actually, I could be confusing the Mojito framework index.js with the Mojito application index.js file here. In which case we could potentially remove the index.js file from the framework. Individual applications still need a Manhattan-compatible index.js if they're going to deploy to Manhattan.\n. scripts.start is what you enter if you want npm start to do something other than node server.js. we no longer need that redirection to ensure npm start will start mojito consistently.\n. return here? \n. Should we start adding warn level logging around deprecated features? \n. Comment text should be a full sentence form. Initial caps and end with a period.\n. Grammar\n. I'm working more from the \"imagine the comment in YDN docs perspective. So:\nThe runtime environment (either 'client' or 'server').\n. String wrappers and constructors like this are generally a \"bad part\" :). Probably best to just take \"String\" off and use:\n(al || '').trim();\n. Probably need the regex(p) flag in a jslint directive if the test code is going to pass lint.\n. No description :)\n. I think arrow is suggesting we use Y.add() rather than use(). \n. Yes. Actually the problem with this code is it's a bug...if coreMojitoYuiModules is null/undefined this fails. I'll update.\n. Removed\n. Do we need to watch for simple 'en' or 'de' here? \n. this is fine for now, but i'd like to see us adopt a pattern that doesn't create objects that might not be necessary. so anywhere we could check for null/undefined instead of creating objects which affect memory consumption we should.\n. slight performance gain if we cache length before the loop.\n. slight performance gain to cache expanded_modules[name] as 'slot' or whatever rather than reaccessing it repeatedly through the [] operator.\n. I think this has to change to something ala '{{name}}ModelFoo'.\n. I think I'd put a warn: here so people are aware we're throwing away the base object and just copying their input.\n. Any reason you're not using ArrayAssert here? \n. Note that this alters the semantics of the prior version, which let dest fall through to the final loop which would copy over properties. As long as we only want the blending operation to work on \"content\" this version is fine. But if we were to put any metadata on the Array instance it would be lost in this new version.\n. See earlier note about metadata on arrays.\n. Might be able to squeeze a bit more out of this by not checking medium and lowest repeatedly. I think these checks are going to do implicit Boolean conversions with each iteration. \n. comma after stupid:true ?\n. ",
    "mridgway": "This should be supported already. I'm not entirely sure about the validation of AC and other such components, but we should file individual bugs for components that need validation.\nWe also discussed refactoring this to remove the BC condition and clean up the code.\n. Fixed by #336.\n. This is no longer relevant as we are moving towards Handlebars.\n. No longer relevant.\n. This would be good to look at during the index.js and server.js investigation.\n. Are there other places that we need to clean up other than yuidoc? If not, this can be closed since #243 is merged.\n. Ok that makes sense. Once Arrow supports code coverage and is open sourced we will be able drop the java code.\n. Related to https://github.com/yahoo/mojito/issues/58\n. Are there any existing rendering tests that I can use as an example? I was under the assumption that the tests were already there and that running the test suite should identify the regressions.\nI'll take a look at creating some new tests then.\n. Closing this, as even the newest Mu library does not fix the issues. I would prefer to replace Mu, or even Mustache entirely in favor of Handlebars (#174).\n. Superceded by #489.\n. So I just ran a test with the updated Mu2 and it still fails with nulls being passed to the templates. I think we need to fix this at both ends: open a ticket against Mu2 and add some error handling to Mojito.\n. Created a ticket against Mu: https://github.com/raycmorgan/Mu/issues/28\n. It looks like the issue has been fixed in Mu. Maybe it's worth doing another PR for the latest version?\n. #170 also addresses this issue. With either of these patches, I still don't think you can do proper error handling for time outs. I think there is a bigger issue inside Dali in how timeouts are handled. It doesn't seem to propagate back up the Dali stack to the tunnel client when the RPC call times out. With #170 it would be much easier to handle error cases (and I plan on doing subsequent pull requests for it if it is accepted).\n. This will require changing the NPM dependency to 'yui' instead of 'yui3'.\nI've been trying to get this working but it's not as simple as a find/replace.\n. There's no way this is the only thing that needs to change. There are a ton of require('yui3') lines in the source code that need to change to use 'yui'. Are you sure you're not just loading the yui3 module that is still in /node_modules?\n. It feels wrong for URLs to be based off of Mojit instances and actions. It should be based off of the routes.json, using the identifiers that are used there.\n. Unfortunately even the latest version of the Mu library doesn't fix this issue either. I think the Mu library needs to be replaced, as it doesn't seem up to par with the Mustache spec. Dot notation doesn't work with Mu either.\n. I ran the code on our current project and there seems to be an issue with metaMerge recursion that I'm trying to work out:\nRangeError: Maximum call stack size exceeded\n    at Function.APPLY_OVERFLOW (native)\n    at Object.metaMerge (\u2026/node_modules/mojito/lib/app/autoload/util.common.js:132:41)\n    at Object.metaMerge (\u2026/node_modules/mojito/lib/app/autoload/util.common.js:138:55)\n    at Object.metaMerge (\u2026/node_modules/mojito/lib/app/autoload/util.common.js:138:55)\n    at Object.metaMerge (\u2026/node_modules/mojito/lib/app/autoload/util.common.js:138:55)\n    at Object.metaMerge (\u2026/node_modules/mojito/lib/app/autoload/util.common.js:138:55)\n    at Object.metaMerge (\u2026/node_modules/mojito/lib/app/autoload/util.common.js:138:55)\n    at Object._updateBuffer (\u2026/node_modules/mojito/lib/app/mojits/TunnelProxy/controller.server.js:34:43)\n    at Object.flush (\u2026/node_modules/mojito/lib/app/mojits/TunnelProxy/controller.server.js:50:22)\n. Just applied the patch from #157 and it does indeed fix the issue. Everything looks to be running normally. I'll continue testing it though.\n. Caridy, can you point me to where makeRequest had built in performance metrics? I see there is a PerformanceMonitor  class in there, but I don't see a reference to it being used anywhere. I don't think Mojito ever made use of it either. I agree this should be something that is added, perhaps in a future PR though.\n. Pull requests shouldn't be closed due to being out of date. They can be updated with another commit to make them easy to merge or they can be pulled and fixed by the developers locally. Closing requests like this just means contributors won't make new ones because they have no idea whether it will be pulled before it can be merged by Github's button. \n. I fully understand. I'm just speaking as a matter of process.\nI'll update this PR tonight if I get a chance.\n. From the sound of it, Mojito didn't provide this functionality before, so I don't think it should be a part of this PR. I think this is something we can add as a feature later (and I'm highly interested in having it as well).\n. Reopening fresh PR.\n. Nice.\n. +1\nThis should become the default and recommended view engine.\n. Merged in #356. Thanks @caridy!\n. @drewfish Does the new resource store affect any of the code in this PR? I saw that the notes mentioned that it made this feature possible, so should this be re-implemented to make use of the new functionality in the RS?\n. +1 for the short term. In the long run, I think it makes sense not to differentiate between built-in and user-created middleware.\n. Example run on the getting-starting-guide example project:\n```\nmridgway:flickr-list mridgway$ mojito jslint app -p .\nmodels/flickr.common.js\n   1 7,32: Expected exactly one space between 'function' and '('.\n     YUI.add('ModelFlickr', function(Y, NAME) {\n   2 8,5: Missing 'use strict' statement.\n     var API_KEY = '9cc79c8bf1942c683b0d4e30b838ee9c';\n   3 12,34: Expected exactly one space between 'function' and '('.\n     getFlickrImages: function(queryString, start, count, callback) {\n   4 14,21: Missing radix parameter.\n     start = parseInt(start) || 0;\n   5 15,21: Missing radix parameter.\n     count = parseInt(count) || 10;\n   6 20,30: Expected exactly one space between 'function' and '('.\n     Y.YQL(q, function(rawYqlData) {\n   7 26,17: Expected 'rawPhoto' at column 21, not column 17.\n     rawPhoto = null,\n   8 27,17: Expected 'photos' at column 21, not column 17.\n     photos = [],\n   9 28,17: Expected 'photo' at column 21, not column 17.\n     photo = null,\n  10 29,17: Expected 'i' at column 21, not column 17.\n     i = 0;\n  11 31,24: Unexpected space between ';' and 'i'.\n     for (; i < rawPhotos.length; i++) {\n  12 31,24: Expected ';' and instead saw 'i'.\n     for (; i < rawPhotos.length; i++) {\n  13 31,26: Unexpected space between 'i' and '<'.\n     for (; i < rawPhotos.length; i++) {\n  14 31,26: Expected ')' and instead saw '<'.\n     for (; i < rawPhotos.length; i++) {\n  15 31,28: Expected '{' and instead saw 'rawPhotos'.\n     for (; i < rawPhotos.length; i++) {\n  16 31,38: Expected an assignment or function call and instead saw an expression.\n     for (; i < rawPhotos.length; i++) {\n  17 31,47: Unexpected '++'.\n     for (; i < rawPhotos.length; i++) {\n  18 31,49: Expected ';' and instead saw ')'.\n     for (; i < rawPhotos.length; i++) {\n  19 31,49: Expected an identifier and instead saw ')'.\n     for (; i < rawPhotos.length; i++) {\n  20 31,49: Stopping.  (41% scanned).\nmojits/FlickrBrowser/assets/logmutator.js\n   1 7,42: Expected exactly one space between 'function' and '('.\n     YUI.add('flickr-logger-mutator', function(Y) {\n   2 30,1: Missing 'use strict' statement.\n     }, 'whatever');\nmojits/FlickrBrowser/binders/index.js\n   1 7,45: Expected exactly one space between 'function' and '('.\n     YUI.add('FlickrBrowserBinderIndex', function(Y, NAME) {\n   2 25,5: Missing 'use strict' statement.\n     Y.namespace('mojito.binders')[NAME] = {\n   3 31,23: Expected exactly one space between 'function' and '('.\n     init: function(mojitProxy) {\n   4 33,67: Expected exactly one space between 'function' and '('.\n     this.mojitProxy.listen('flickr-image-chosen', function(event) {\n   5 47,23: Expected exactly one space between 'function' and '('.\n     bind: function(node) {}\nmojits/FlickrBrowser/controller.common.js\n   1 7,34: Expected exactly one space between 'function' and '('.\n     YUI.add('FlickrBrowser', function(Y) {\n   2 21,5: Missing 'use strict' statement.\n     Y.mojito.controller = {\n   3 29,24: Expected exactly one space between 'function' and '('.\n     index: function(ac) {\n...\n85 errors found.\n```\n. See #371 for fix.\n. Is this relevant any more? Looks like this can be closed since we are recommending upgrading to later versions.\n. Closing as \"won't fix\". We are migrating away from Mu entirely and recommend using Handlebars.\n. Fixed by https://github.com/yahoo/mojito/pull/242\n. Fixed in #243.\n. ycb is currently not doing any file reading logic; data is inserted into the library by passing in a full javascript object. Do we need to move all filing reading logic into ycb in order to make this work? This would be an API shift from what I can tell.\n. @chqla Yes, it should be fixed in 0.4.3 by PR #394.\n. Sorry, #395.\n. I am working with @reid to make node-jslint usable as a node module: https://github.com/reid/node-jslint/pull/42.  This way we won't have to copy/paste any jslint source code into our project, we can just require the npm module.\n. Superseded by #360\n. Hi Fabian, I'm currently investigating some regressions in our functional tests with this PR. I am expecting to have this completed by the end of the week and ready for the next release.\n. Functional tests passed with the latest develop branch merged. I merged your PR into develop at https://github.com/yahoo/mojito/commit/1a24399604dc449375799549de64f53a6b4ed058 (didn't get picked up for some reason in this PR)\nThanks again @FabianFrank!\n. @FabianFrank I'll get this fixed up and in by the end of the week.\n. Merged. Thanks a bunch @FabianFrank.\n. @drewfish Is this now implemented in the new Resource Store?\n. This is now fixed.\n. It looks like this could be fixed by passing \"base\" or \"comboBase\" into the configuration for YUI. The ability to configure YUI was added in https://github.com/yahoo/mojito/pull/350. @focuzz can you confirm that this will work for you?\n. +1. I know Travis has Windows testing on their radar, but no ETA for support. We may just have to wait for them to get our CI on Windows up and running, but I don't think it should prevent us from accepting PRs that make Windows work as long as they don't raise regressions on our current CI.\n. The PR hasn't been merged, and there is still much left to be done if we're going to properly support Windows. As such, I think this should be left open.\n. @focuzz You said you have a client side version of the Handlebars view engine. Do you have a link to this implementation?\n. This was released in 0.4.2.\n. Added in PR #300.\n. This issue encompasses several things that should be optimized in the creation of the AC object. The change that landed in 0.3.30 only made it so that the RouteMaker was instantiated if the url addon was used (before it was instantiated regardless of being used).\nThe example that this description calls out is the action-context passing store.getRoutes() into each mojit. That's a lot of data being passed around that seems unnecessary. It seems like the route-maker should be instantiated once per process and hold on to the data that it needs instead of passing all of the data to the child mojits.\n. We opted to split the addon into server and client. The i13n addon has also been moved into the internal Mojito which will be released today.\n. +1\n. Eventually yes, but not right now. We're gearing up for the new testing framework.\n. If we want to remove it completely we would have to phase it out due to a BC break. The 'mojito' mojit has to exist due to all components (including mojits) requiring it. Also some of the management tools define a mojito app as a component that contains a server.js or index.js that require 'mojito': https://github.com/yahoo/mojito/blob/develop/source/lib/management/utils.js#L432\n. This should be merged into the arrow branch instead of develop right?\n. From what I understand, this patch makes a Y.Model available in a controller so that you could instantiate one or more instances of it. These models would then be passed to the view to be rendered. But the view does not have a way of access the attributes of the model because it should be using model.get('foo').\nI think we need to discuss more in depth what integrating YAF components means for Mojito. We should come up with some functional use cases of how we would use the YAF components and work from there, instead of throwing the components in and sorting them out afterwards.\n. I agree having the ac.models collection doesn't seem necessary.\nThis implementation at least gets users started with Y.Model, so I suppose that's a good thing. In the future if it's just a matter of changing ac.done(model.toJSON()) to ac.done(model) then we're making progress towards our goal (which I think we should still have a solid plan for).\n. The patch for arrow has been applied and will be available in the next release in the next couple of days.\n. Remaking to pull into develop.\n. Simple comments on this, though nothing blocking. Looks good: :shipit:\n. This looks good to me.\n. :shipit:\n. Indeed. It almost seems like an abstraction for a template-loader would be good to have, and then the view-engines are just dealing with how to render and compile strings. Perhaps a future refactor?\n. So this pull request has spiralled into a very large set of features and refactors. All of this is definitely the direction we want to head, but it is made more difficult by the fact that we have to still support Mu (not my choice unfortunately). I propose that we get we get Handlebars into the framework so that it is available to use and is the default. Once we are able to remove the Mu engine, we will be able to refactor components that deal with fetching, compilation, and rendering of templates, such that we can make the above optimizations.\n. Fixed in #386.\n. This shouldn't actually change anything for the user. By default, npm install will also install devDependencies. In order to not install them, one would pass the production flag: npm install --production\n. Yeah, I would argue that's a bug with npm.\n. Hi Alberto, we recently added the Handlebars view engine. Do the changes to the mu engine need to be applied there as well? I can't tell whether the Handlebars engine would need any changing to support this.\n. Looks good to me. :shipit:\n. So the options are now passed to the mustache engine but not the Handlebars. So we need to decide whether options should be passed to Handlebars or the options go away once we remove Mustache.\n. :shipit: For things like this I don't think a PR is necessary.\n. Can you move the rules down a level to something like:\n{\n    \"jslint\": {\n        \"rules\": {\n            \"white\": true,\n            \"sloppy\": true\n        }\n    }\n}\nI could see value of having configuration for excluded directories as well. I want to make sure that we can limit changes to this configuration in the future.\nOtherwise, +1 from me.\n. :shipit:\n. Looks good to me.\n. I'll move the {bin,lib} folders up now then.\nThat's an interesting point. Do we need the tests/ directory to be in the npm package? Do our functional tests rely on this? Right now, I've made it so that only the bin, docs, and lib folders get packaged.\n. I think I'd prefer to add a special case for node_modules directories that are used for tests. We may have cases (and I have had this before) where I've installed node_modules into an example app to try things out.\n. I removed the other PR since this one included those commits.\nYou can see Travis CI working at http://travis-ci.org/#!/mridgway/mojito\n. Oops, meant to post these comments in the other PR.\n. @isao, we'll have to coordinate this merge with fixes for the Jenkins instances. Let me know when you have some time to sit down and get this done.\n. Fixed in 0.4.2.\n. Why do the binders even have an affinity? Aren't they always client? Most apps that I've seen don't have an affinity on the binders.\n. Binder tests inherently require the DOM. I agree they should be able to run on the server using something like PhantomJS and we plan on addressing this with Arrow, but the affinity should still be client. I'm going to merge this since it's a no brainer.\n. Closing, since we'll be bypassing 3.6 and upgrading to 3.7.\n. We're already subverting that by storing them in our own container and requiring that they be added to that container. In my mind, Mojito is a framework that should allow adding special types of modules (controllers, binders, etc.) just like YUI does. Either that or not store them in a container and just instantiate them based on class name regardless of their namespace.\n. It is not fundamentally different from using namespaces explicitly, but it gives us more control over this namespace. We've already had to have BC breaks because the namespacing was incorrect in our archetypes and examples, and I'd like to prevent this from happening again (except this one more time to use the API).\nThis may change depending on how the YAF integration works (whether if it even uses the controllers, binders, models namespaces), but if we have a hard expectation of where a developer's objects need to be stored, we should abstract it out.\n. :shipit:\n. Why do you have to comment out stubbed modules? Other tests will break if you comment them out.\n. @isao None of the middleware tests seem to run properly:\n```\nnode /Users/mridgway/Projects/mojito/tests/../node_modules/yahoo-arrow/index.js /Users/mridgway/Projects/mojito/tests/unit/lib/app/middleware/*_descriptor.json --report=true --reportFolder=/Users/mridgway/Projects/mojito/tests/artifacts/arrowreport/unit/ --reuseSession --logLevel=WARN --browser=firefox\n/Users/mridgway/Projects/mojito/node_modules/yahoo-arrow/node_modules/yui/dom-core/dom-core-min.js:7\n\",d=\"compareDocumentPosition\",n=[],m=(function(){var q=e.config.doc.createElem\n                                                                    ^\nTypeError: Cannot call method 'createElement' of null\n    at /Users/mridgway/Projects/mojito/node_modules/yahoo-arrow/node_modules/yui/dom-core/dom-core-min.js:7:262\n    at Object.YUI.add.requires [as fn] (/Users/mridgway/Projects/mojito/node_modules/yahoo-arrow/node_modules/yui/dom-core/dom-core-min.js:7:382)\n    at proto._attach (/Users/mridgway/Projects/mojito/node_modules/yahoo-arrow/node_modules/yui/yui-nodejs/yui-nodejs.js:749:37)\n    at proto._use.handleLoader (/Users/mridgway/Projects/mojito/node_modules/yahoo-arrow/node_modules/yui/yui-nodejs/yui-nodejs.js:1065:33)\n    at Object.YUI.add.Y.Loader._finish (/Users/mridgway/Projects/mojito/node_modules/yahoo-arrow/node_modules/yui/yui-nodejs/yui-nodejs.js:6790:19)\n    at Object.YUI.add.Y.Loader._onSuccess (/Users/mridgway/Projects/mojito/node_modules/yahoo-arrow/node_modules/yui/yui-nodejs/yui-nodejs.js:6839:14)\n    at Object.YUI.add.Y.Loader._insert.complete (/Users/mridgway/Projects/mojito/node_modules/yahoo-arrow/node_modules/yui/yui-nodejs/yui-nodejs.js:7036:24)\n    at YUI.add.Y.Loader._insert.Y.Get.js.onSuccess (/Users/mridgway/Projects/mojito/node_modules/yahoo-arrow/node_modules/yui/yui-nodejs/yui-nodejs.js:7098:30)\n    at YUI.add.pass (/Users/mridgway/Projects/mojito/node_modules/yahoo-arrow/node_modules/yui/yui-nodejs/yui-nodejs.js:3945:26)\n    at YUI.add.Y.Get.js.check (/Users/mridgway/Projects/mojito/node_modules/yahoo-arrow/node_modules/yui/yui-nodejs/yui-nodejs.js:3969:21)\n```\nI get this error once for each test file.\n. Travis lies. Looks like it could be an environment error on their 0.4 box.\n. Looking good. +1 from me. Just to confirm, this has no downstream BC breaks correct?\n. @FabianFrank As far as I can tell, listen is called internally: https://github.com/mojit0/mojito/blob/1666833c4436647046e3bb2fa2bc8812c52722f8/lib/mojito.js#L620\nWhich hosts are you referring to?\n. Unfortunately we also have the configuration for port in our application.json as well, so it becomes an issue of precedence. https://github.com/mojit0/mojito/blob/1666833c4436647046e3bb2fa2bc8812c52722f8/lib/mojito.js#L64 covers the cases you talked about, but I see your point on making it easy to customize in the app.\n. @mojit0 I don't disagree about the BC stuff. I just wanted to ensure that we document it during release.\nI do tend to agree with Fabian though. It should be immediately apparent to a user who opens their server.js how they can set the port number for the mojito app (or feed it in from their host). I'd be fine with documentation inside of the server.js, maybe even a commented out line of code that sets the port number.\n. +1\n. Looks like this regression was added by #196 which was a fix for a YUI 3.5.1 regression. If we're upgrading to YUI 3.6 we can roll back #196 because it was fixed with IO.\n. Upgrade to YUI 3.6 is blocked by a regression, so we're waiting until 3.6.1 or 3.7.0 before we upgrade. Therefore, I am fixing this in place as it is now. PR incoming.\n. Fixed in #450.\n. I think we should exclude all tests as it was before and then add back in the jars that are needed (!lib/tests/harness). The tests themselves are not needed by a downstream application, so we should exclude them.\n. @isao Agreed. I think we should evaluate that as we make mojito test work with Arrow.\n. Where did Ric's commit go? I feel like we should preserve the original PR's commits to give them credit.\n. +1\n. Typos and small fixes like this don't need to be in pull requests. They can just be merged into develop manually.\n. +1\n. Yowza! +1 conceptually. Not sure if I can read through all of the changes though =P\n. Ouch, didn't change old unit tests...\n. +1, looks good.\n. Yep, was already on its way =D\n. It may in fact be the same issue. I was seeing the invoke handler being called twice, because adapter.flush called ac.done and then adapter.done also called ac.done.\n. ycb is now a separate node_module. You will have to run npm install in your application in order to pull down the new dependency.\n. What is the error that you are getting?\n. +1. Travis failure can be ignored.\n. @isao is looking into the createElement errors. These are created by the new middleware tests.\nThe 0 Passed, 0 Failed , 0 skipped is a result of having empty test files. During the transition we created placeholder tests that instantiate the components so that we can easily add tests. This way, if we start doing code coverage, the files still have some coverage and are included in the report.\n. All tests are now passing. I consider this ready to be merged. There is still some clean up work to be done separately and we'll have to monitor stability as we go.\n. +1 for doing this so we can cut a release.\n. My understanding is that a fix for this won't be ready for when we want to do a release. If we can fix this soon after that release, I don't see a reason not to do another follow up release.\n. Travis failure is mu test again.\n. +1\n. I would prefer to just merge #367 and be done with Mu altogether.\n. The consensus of the team was to hold off on this until we know that Handlebars is working properly. We should get a new consensus on this and depending on the outcome either fix the Mu view engine or merge #367 and remove Mu entirely.\n. It should be noted that the tests are now correct, but there is still a race condition in the Mu view renderer when using ac.flush(). Many times the done() call will happen before the flush() completes which is the test failure we were seeing.\n. Looks like there is a bug in Arrow with 0.6. I'm currently debugging this.\n. I submitted a PR to Arrow: https://github.com/yahoo/arrow/pull/14\nThis build should fix the internal builds and the issues some of our local test runs were having.\n. Does this supercede #124? This is a really outdated PR that needs to be closed if we're not going to merge it.\n. Sounds good. I'm going to close #124 in that case.\n. :shipit:\n. What is ejs being used for?\n. Another option is JSON5 (https://github.com/aseemk/json5) but I'm not sure how you would make this available on the client side.\n. :-1: \n. In this case, filename is the file that jslint was run on. The logic for instantiation differs slightly: https://github.com/yahoo/mojito/pull/199/files#L0R364\nThis variable ensures that I write the filename only if I write an error to the screen after instantiation.\n. Not sure, it was copy/pasted from @mojit0's examples.  I don't think it does anything to be honest.\n. Here's an example of how to document objects and their properties: http://code.google.com/p/jsdoc-toolkit/wiki/TagParam#Parameters_With_Properties\n. Is there any reason to make this synchronous? The only thing I can think of is getting multiple hits before the compilation is cached.\n. Can we make this a TODO line instead of a WTF line? =P\n. The second library here should be able to use $$config.lib$$\n. Changed this. adapter.error will now be called with a non-200 status code on IO call.\n. Yeah, this was from @caridy. I'll defer to him.\n. Removed this comment. Was a remnant form a copy/paste =P\n. So I discussed this with @caridy as well. It's a double-edged sword: if you use asynch then you may have multiple hits that have to load from the filesystem while the first is still reading but if you use synch you block other requests. I would prefer asynch as well, but this will then require an API change for compiler and precompile functions as they'll need a callback.\n. Fixed, good catch.\n. Fixed as per previous comment.\n. Not sure if there is a standard way of documenting this. I'll look into this.\n. Changed it to Y.namespace('Env.Mojito.Handlebars')\n. Updated.\n. Now that I think about it, I think the require('yui/handlebars').Handlebars is the more standard way of using YUI server side according to the docs. I'm not sure what the difference is though.\n. Removed\n. The default value is actually 10000 as per the original hard coded value.\n. Why a space between > and 0.3? npm documentation states that \">version\" is the format.\n. I'd argue for just have the index.js rather than two files if we're going to follow convention.\n. Looks like this was probably just git interpreting a file move due to some similarities in the files (copyright mostly).\n. Yeah, I'd prefer to be explicit about what we want to keep as it was before.\n. This is intentional so that we can mock out _doRequest. Before the unit tests were mocking out what is now _makeRequeset, which skips 90% of the logic in this library.\n. This new line made it in because of a console.log testing. I'll remove this.\n. My understanding is that the URL addon is in charge of generating URLs, not file system paths. As such, we should not be using libpath here at all, or else we get URLs with backslashes.\n. On Windows, relative path contains backslashes, so in order to generate an appropriate URL, those backslashes need to be converted to forward slashes. I don't know of another way to do this. Theoretically you don't need the Windows check, so we could probably just remove the conditional.\n. Got it. I'll change these fsPaths back to how they were before.\n. This is due to a nasty YUI dependency collision since Mojito already has it installed. I'd like to work with @proverma on this to figure out what is going on. Please note that developers that want to run the tests locally may have to do this same step.\n. npm test will now just run the unit tests. We can debate whether it should also run mojito test as well, but I feel that it shouldn't run the functional tests since they take around 20 minutes to run.\n. @caridy I can refactor the travis.yml into scripts as you requested. I'm not a fan of having the .jar as part of the repo.\n. Thinking about this some more, I don't know if it is necessary to refactor this out. Some of these steps like xvfb and the display port I would not expect anyone to run outside of the Travis environment. I think the other three steps would just be a documentation issue. Given that, I don't know what advantage we get by moving these into separate files.\n. ",
    "add0n": "There is currently a workaround for this issue:\nnode --debug ./bin/mojito start\n. I think, as a general rule, that we're moving towards having API (i.e. a call into Mojito) for things such as this, since it's much more powerful and flexible.\n. This looks and tests fine.\n. Karen -\nThanks for this. I'll get it integrated in this sprint!\nCheers,\n- Bill\nOn Jun 16, 2012, at 11:45 AM, Karen Fay wrote:\n\nMustache still crashes if a non-enumerable null value is passed to a view or if there's a null in an array. This pull request addresses those cases.\nCase 1:\n   Controller:\n       ac.done( { foo: null } );\n   View:\n       {{foo}}\nCase 2:\n   Controller:\n       ac.done( { foo: [ 1, 2, null, 4 ] }\n   View:\n       {{foo}}\nYou can merge this Pull Request by running:\ngit pull https://github.com/kfay/mojito bug-5515521\nOr you can view, comment on it, or merge it online at:\nhttps://github.com/yahoo/mojito/pull/211\n-- Commit Summary --\n- More null fixes for Mustache\n-- File Changes --\nM source/lib/app/libs/Mulib/Mu.js (8)\n-- Patch Links --\nhttps://github.com/yahoo/mojito/pull/211.patch\n https://github.com/yahoo/mojito/pull/211.diff\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/pull/211\n. This is a particular pain point of mine so I really appreciate the work you've done to make Mojito work on Windows. The main thing preventing us from merging this is our concern about being able to have a CI environment that can keep the Windows port tested, as stated by rwaldura above. Please let us know if there is a testing framework for Windows like Travis.\n. Isao - Go ahead and clean this up, if you would please. The refactoring of HTMLFrameMojit is leading into a larger discussion / refactoring of how we can enhance Mojito's client capabilities (to encourage folks to push more logic client side for better performance and user experience).\n. Fixed in 0.4.2. Closing.\n. I guess I'd ask to see the actual perf numbers here around 'faster'. IIRC, the Y.JSON call checks first to see if the platform it is running on has a native JSON call and just returns the value of that.\n\nWe just changed all 'JSON' calls to 'Y.JSON' to have consistency across the codebase not too long ago. If there is a huge perf win here, then yes for all 'server' affinities we can make an exception and use the raw 'JSON' call. Otherwise, my vote is to leave this as is.\n. 5X is certainly worth it.\n+1\n. I can confirm that this fixed the problem I was seeing - thanks Drew and Caridy!\n. At a minimum, issue #2 should be fixed via this PR:\nhttps://github.com/yahoo/mojito/pull/845\nwhich will be available in 0.5.1\nCheers,\n- Bill\n. Oops. Sorry. I meant to issue this against the develop-yaf branch.\n. +1\n. ",
    "imalberto": "Is a composite mojit with no \"children\" considered valid configuration ?\nIf not, then perhaps do the same check as in ac.composite.done() and throw an error if size is 0.\n. See pull request here: https://github.com/yahoo/mojito/pull/192\n. - I think handlebar will address the async rendering part.\n- FirstByte will flush mojits as content becomes available.\n. This pull request has been superceded by : https://github.com/yahoo/mojito/pull/371\n. Rejecting PR after discussion with Ric.\n. @mridgway Looks like it. This will first be merged with \"search-perf\" and hopefully \"develop\" down the line.\n. @rwaldura Thanks for adding the PR# !\n. @caridy Can you please review so that we can merge into search-perf ?\n. I'll close this PR. deepFreeze cost is too high. Will handle the loading of ac.addons in a separate PR.\n. This PR has been superceded by PR#517. @dmorilha , can you please close this PR ?\n. This PR supercedes PR#516\n. Team has reviewed code, so merging into search-perf.\n. +1\n. Updated with feedback from @caridy \n. @drewfish\n- nice catch about the viewEngineOptions\n- mojito jslint did not complain about the double assignment\n- undo the change to dispatch.common. nothing to do with output adapter.\n. @caridy Constructor for action-context still set the app.config object. Can the config addon be accessed from the output-adapter addon ?\n. Commit 777b0f4 updated with feedback from @caridy \n. commit fea41a5 update from @drewfish feedback\n. This PR has been replaced by https://github.com/yahoo/mojito/pull/553. Closing.\n. PR based on @drewfish and @caridy feedback\n. @drewfish Closing this PR. See https://github.com/yahoo/mojito/pull/560 instead.\n. @caridy \n- The original impl was using app.config object (based on the fact that current AC contructor does not change). so agreed here.\n- In comment https://github.com/yahoo/mojito/pull/540#issuecomment-8789854, can you elaborate what you were referring to ? Perhaps some clarification as to what is the preferred way to access appConfig in general.\n- For recomputing viewEngine etc etc config values, +1 if this can be done at startup and simply fetched at runtime\n. +1\n. +1 \n. NOTE: that now the url addon is reading the appConfig from the contextualized  and not the static config anymore to address html5app that are built with a specific context.\n+1\n. Already updated release notes.\nhttps://github.com/yahoo/mojito/wiki/ReleaseNotes0_4_6\n. Fix reviewed and submitted in develop-perf. See PR #663\n. \"ejs\" is being used by some of the developerguide examples showcasing templates. \n. OK. Just sync'ed with @caridy. Removed in commit https://github.com/imalberto/mojito/commit/3c2c36d03550a0ad701349894e0e78e4db59ec23 as part of PR #682\n. +1\n. +1\n. Files reverted (not included the doc + example + new hybrid files):\nbin/mojito\nlib/app/archetypes/app/yahoo/application.json\nlib/app/archetypes/app/yahoo/assets/favicon.ico\nlib/app/archetypes/app/yahoo/dimensions.json\nlib/app/archetypes/app/yahoo/mojits/.placeholder\nlib/app/archetypes/app/yahoo/package.json.hb\nlib/app/archetypes/app/yahoo/routes.json\nlib/app/archetypes/app/yahoo/server.js\nlib/app/commands/build.js\nlib/app/commands/build/html5app.js\nlib/app/commands/build/index.js\nlib/app/commands/build/scraper.js\nlib/app/commands/build/shared.js\nlib/app/commands/build/writer.js\nlib/app/commands/create.js\nlib/app/commands/info.js\nlib/management/cli.js\nlib/management/utils.js\npackage.json\ntests/run.js\ntests/unit/lib/app/autoload/test-store.server.js\n+1\n. Failing tests are related to composite execution on client. Might have been fixed with #742\n. @caridy Sent you the list of failing tests\n. I think the config you want is\n```\nsettings: [ \"master\" ]\nspecs:\n    hello:\n        type: \"HelloWorldMojit\"\n\n```\nHere is a more complete example of application and routes YAML config:\n- https://github.com/imalberto/appyamlexample/blob/master/application.yaml\n- https://github.com/imalberto/appyamlexample/blob/master/routes.yaml\n. What is your mojito version installed ?\nThe app example works with mojito 0.4.9-2 (https://github.com/imalberto/appyamlexample/blob/master/package.json)\nI am guessing you are using a different version.\nafter you clone the app, do a \"npm install\", and make sure you start the app with the local installed version. \n. Can you please file a bug for this ? \nInclude your example app, and error messages you get. Thanks !\n. +1\n. +1\n. +1\n. +1\n. +1\n. Note: Travis build is failing because mojito-contextualizer package dependency is not yet published to npm.\n. @drewfish Good catch (typo). This PR will be merged with mojito#next. Updated PR description.\n. Closing this PR after discussion with team.\n. Thanks guys for all the feedback. I'll be making changes to this PR based on the ongoing discussion for the next review.\n. /ping @zhouyaoji \n. @caridy Already added the Trello cards. Thanks !\n. TravisCI says build passes both for unit and functional tests !!\nhttps://travis-ci.org/yahoo/mojito/builds/7481963\n. /ping @zhouyaoji \n. /ping @zhouyaoji \n. @caridy Added some comments.\n. This should throw the exception for malformed json: \nhttps://github.com/yahoo/mojito/blob/develop/lib/util.js#L115\n. lgtm +1\n. +1\n. Closing this PR in favor of https://github.com/yahoo/mojito/pull/1205\n. @lzhan Probably should add some tests to cover this for future regression.\n. @ericf Re: your previous comment, will look into how Mojito can leverage more of express-map and express-annotations in upcoming PR to address how the pathTo functionality can be exposed to handlebars helper (both client and server runtime).\n. Also, after discussion with @caridy , will also be removing annotations and the find() method as part of route-maker and ac.url addon.\n. # Unit Test Report Summary\nTotal Number of Executed Tests: 487\nTotal Number of Passed Tests: 475\nTotal Number of Failed Tests: 0\nTotal Number of Skipped Tests: 12\n. LGTM\n. Done with review.\n. @zhouyaoji LGTM. Please check the build failures on Travis that it's not related to the PR. Otherwise +1\n. Reverting this PR as it is not needed.\n. /ping @zhouyaoji \n. @lzhan I think you still need to resolve the conflicts from your local branch before this can be merged.\n. Most of the changes are related to tests and examples. LGTM +1\n. +1\n. Taking into account that promises might not everybody's cup of tea, I would not make it the default and force it onto users. Perhaps a new archetype could be added that would use Promises instead of callbacks.\nUsers will have the choice to use either.\n. @caridy What you mentioned in here is correct.\n@realistschuckle The next major version is anticipated to be versioned 0.9.0 and should be available by end of Feb. Most of the improvements are internal, but from the app perspective, there will be some backward incompatibilities mostly related to how your application is bootstrapped with Mojito. But how you configure and execute your mojits will remain unchanged.\nBtw, this issue only applies to the mojito-next branch, and has been addressed. So closing this one.\n. /cc @caridy @drewfish \n. @caridy PR is ready to merge. The unit and func tests are OK when running individually , but failing as a whole when running of the entire suite, related to the issues @lzhan is investigating using the Locator feature from Arrow.\nOnce this PR is merged, @zhouyaoji can then merge his PRs related to examples and docs (since they've changed). See #1324 #1327\n. @caridy Once you have this merged, we should plan to release a 0.10.0a alpha in NPM so that we can start baking the version in the other dependent packages.\n. @zhouyaoji Please make sure you merge those changes to the next branch too.\n. LGTM.\n@zhouyaoji Can you also summarize the rules you've applied to the current named modules as a reference ? Others might find it useful when naming their modules.\n. @zhouyaoji Can you please hold onto that PR until we merge this one ? #1321 \nMost of the examples have changed to comply with the new app.js format.\n. /cc @zhouyaoji @caridy @drewfish \n. yep. working with @zhouyaoji on that.\n. /cc @zhouyaoji @caridy \n. All builds passed. \n. /cc @zhouyaoji You might need to revisit the documentation surrounding perf configuration since this is up to app.js to pass the correct options.\n/cc @caridy \n. +1\n. +1 \nyeah for express-state !\n. /cc @zhouyaoji \n. @zhouyaoji \nFunctional test test_quickstartupguide_readpage_error.js both failing on node8 and node10. Probably a typo on the example app during the renames.\nAlso, you might want to check PR#1342 to make sure that none of the application.json has a middleware configuration. See the PR doc for example, which needs to be added to the wiki.\n. LGTM, pending tests passing.\n/cc @aljimenez @zhouyaoji \n. +1\n. +1\n. /cc @zhouyaoji \nJoe, here is the gist of it:\nJust to clarify, any express app that uses a later version , relies on the bodyParser middleware to handle POST body requests will see the same issue as outlined here, with or without Mojito.\nMojito pins down the express version to this last know \"good\" version for running the tests suites, but it no way restricts the application to this express version. There are other alternatives to bodyParser.\n. +1\n. +1\n. @zhouyaoji Looking good. Just remove references to appPort in application.json and mijito.tunnelMiddleware() in app.js since those are no longer supported.\n. +1. Merge it :)\n. +1\n. +1\n. Thanks @caridy \n. /ping @caridy @zhouyaoji \nHey guys,\nI've updated the wiki to include the additional app.map() that are required if app.js is registering routes outside of routes.json.\nRemember that routes.json is sugar for now to actual app.get() and app.map() api calls. If needed, the application (preferably) can even provide their own wrapper around these calls for more complex configuration.\nThis is also mentioned in the HISTORY.md.\n. @caridy \nThe url add-on is still supported, and is used by both mojito-shaker and mojito-debug extensions. The url add-on relies on the routes being properly registered. I think looking at the examples, the routes are not registered via routes.json but in app.js. The matching app.map() calls should setup the right mapping for the url add-on to work.\n. +1\n. Thanks for the feedback. In retrospect, line185-193 should probably be removed completely. Agreed ?\n. All YUI modules share a common base URL. In this case, yuiPrefix replaces that base URL. Once on user agent, the YUI base URL can be recreated.\n. @caridy Just to clarify, this is not a \"mojito build\" feature -- that code is triggered by constructMojitoClientRuntime(). Others can comment, but by the time ac.deploy addon is run, all the yui modules urls have already been set (with correct base, comboBase) -- all that is done in mojito-loader. If those custom values are set in application.json, that would work. See line 640 - it would definitely be better if this was retrieve from config.\n. Agreed :)\n. instance.base might be undefined ?\n\"action\" is not declared or set within the scope;\n. This was not added, but commented out from the original tests. But can be safely removed.\n. I did that initially, but then thought of \"search-app\" that does not use that convention for their addons. If the norm is \"xxx-addon\", sure we can proceed the original way.\n. appConfig is reused a few times in that function (vs invoking getAppConfig())\n. just in case config addon is not available. if that is very unlikely, then calling config.getAppConfig() directly is cleaner.\n. Sounds good.\n. Right.\n. In this case, the default is really the \"mojito built in\" middleware.\nQuestion: Do we want to support the \"middleware\" configuration in application.json in addition to app.use() ?\n. app is needed to do the app.use() to register the middleware, and since mojito in this case is stateless, there is no reference to app. \n. Like module.exports = new RequestContextualizer().handle(); ?\n. I originally had it in your suggested format. @drewfish and I had a quick discuss about it and thought app.get() is more express like. But your points are valid. I'll revert it to req.app.xxx for now and can revisit later if necessary.\n. This attaches the middleware to the mojito function so that from app.js, user can do things like :\napp.use(mojito['mojito-handler-static]);\n. How are we recommending users who have app specific middleware to add them to express ?\n. Would need to match the log level from application.json - reading the log level without resource store seems like a hack. For now, it appears that resource store always log to \"info\" level.\n. I'll add a TODO in the source file with your explanation, and resolve it during the next merge.\n. Thanks! its supposed to be if (!store && req.app && req.app.mojito) {\n. Noted as a comment in the source file to resolve manually after the next merge with develop.\n. Will add a note to that effect that the appRootDir should either come from app.js or locator via an api at some point when locator is integrated. This is similar to : https://github.com/yahoo/mojito/pull/1101/files#L18R123\nUntil such time, appDir = app.mojito.options.root;\n. Based on the current directory structure where the built-in middleware lives, Yes.\n. Will update.\n. Will remove the try/catch and allow the error bubble up to the application. Better for debugging.\n. added the missing static and contextualized app config as part of this commit 23e63ce . thanks for catching this.\n. updated (commit     c3703c1 )\n. For now, this is required by ac.config and ac.url\n. Thanks, added the check here https://github.com/yahoo/mojito/pull/1191/files#L1R269 . Querystring as part of the query will take priority.\n. Prepending the \"path\" to the \"call\", so that this can be supported without having name conflict:\n// In this case, \"/foo\" and \"/bar\" are sharing the \"admin.foo\" controller\napp.get('/foo', mojito.dispatch('admin.foo'));\napp.get('/bar', mojito.dispatch('admin.foo'));\n. Avoiding an invocation of Y.Lang.type() if it is not required.\n. I think the original thought of setting the \"name\" to just be \"call\" is good enough.\nMaking the name unique is more of a \"maintain backward compatibility\" as previously, the \"name\" was provided by developer in routes.json, and by convention, they were unique across all routes.\nTurns out that mojito-shaker uses the name property to group rollups per route entry. We can revert it to being set to \"call\" only, and document that in order to ensure uniqueness, the caller should generate and associate a named identifier to it.\n. In Mojito today, the semantic and syntax for regex is different from ext_match.\nI think once we remove the transformation later in a not-so-distant future, this won't be needed anymore. For now, might be better to keep the route configuration format the same as what it is today, for BC sake.\n. Fixed.\n. Fixed.\n. Fixed. Adding it to this._page.computedRoutes.\n. Gone !\n. Its added here: https://github.com/yahoo/mojito/pull/1191/files#L10R24\n. Thanks ! Adding diff here for reference: https://github.com/imalberto/mojito/commit/74fe35abf88af0155871a7c0d6eac37c8fec8276\n. Please move back to devDependencies as the application will make express its dependencies.\n. Should commandline/ folder be deleted ?\n. There are 2 ways to register routes: using app.VERB and via routes.json. In this case, the annotations is Mojito specific, and there is no need to ask applications to attach some \"annotations\" that they are not going to use but is needed by the fw. By doing so, registering a route is same as any Express app:\napp.get('/foo', dispatcher('foo.index'));\nWhatever data the  dispatcher needs is kept private from the app.\n. Synced up with @ericf on this. Please see above in router.js. \n. @ericf Thanks for the suggestions. For this use case, it will be required for the app to do something like dispatcher.resetRoutes() as a prerequisite before modifying the routes configuration. \n. The merge for the _init function seems to have moved some of the \"next\" code around. Can you compare with what we have here ?\n. This is to allow the ac.deploy addon to allow regex to be serialized to the client using express-state as part of the cleanse process.\n. Will remove the sugar method.\n. make() returns a URI, so was probably a mismatch.\n. Not on the client unfortunately. I mentioned that to @ericf and in the end, we have might a solution that works on both run time, but for now this is needed and is abstracted by route-maker with common affinity.\n. Won't work on the client using this. Was going to implement this method as part of next PR to provide helpers for the built in templates. And it has to run on both run time.\n. Good catch. Should set routeParams = params || {}; above.\n. Agreed. Problem is most of those files have sloppy: true; At some point those should be removed in favor of lest lint config. The lack of space in this case is to be consistent in that file. Otherwise some function will have space, and others won't . They should all be cleaned up in one go, in a separate PR maybe.\n. Will rename as suggested.\n. ok. if @ericf confirms, we can remove it.\n. Models should not be telling controllers which view to select. Instead, models should return either results, or error, and controller should take appropriate action.\n. Only check for truthy or falsy\n. @zhouyaoji You could cache the results by using a variable local to the module vs attaching it to the Y instance.\n. if (!result.error) { would work too\n. Probably want to follow the node convention:\n- if error: cb(results.error)\n- if no error: cb(null, results)\n. Same as above. Follow node callback convention.\n. It's better not to pass ac to this function. This function is only iterating through the data. Makes the intent clearer.\n. cb(err) vs cb(null, results).\n. Same here with passing the error as 1st arg, but if no error, the results should be the 2nd arg.\n. Might be preferable to rely on YUI instead: loadedcssele = Y.all('link');\n. Unused function from previous revisions. Removed in this PR.\n. Not too happy about this block about how the call is decoded.\n. With this change, now app.js can do something like this:\n```\nvar express = require('express'),\n      libmojito = require('mojito'),\n      app = express();\nlibmojito.extend(app, {\n    context: {\n        runtime: 'server',\n        environment: 'staging',\n        colo: 'sp1'\n    }\n});\n// proceed as usual\napp.use(libmojito.middleware()); \n... ....\n``\n.portis not needed, since the actuallistenis done at theapp.jslevel. Good point. Will be removing references toportin next commit.\n. I thinkparams` is perhaps better suited here, since it will be used to resolved any parametrized urls.\n. @caridy That's the approach Mojito took for all its built-in middleware.\nThis specific implementation is to provide a level of BC for all other middleware that relies on the internal store, logger, etc. If not, that will require all of them to be updated.\nIn addition, we can document that going forward, the recommended way is to do as you suggested, and that this is mark a deprecated feature and will be removed in the future. /cc @zhouyaoji \n. You are correct. I think that specific line though is part of the header file documentation showing basic usage for now to extend app with mojito.\n. Good point!\n. @drewfish I like this idea overall instead of just tagging onto app.mojito namespace! The only thing is that \"store\" is very generic, and I am thinking perhaps a more mojito specific NS should be used. e.g. app.set('mojito store', mojito.store');.\nFor this specific issue here, search team have quite a few mojito-* extensions out there with middleware that relies on midConfig being passed to for initialization, and having to delay the initialization until that first request will basically break those. We can provide a level of BC but make sure we document those as deprecated and not recommented for future use, which I think is the least resistant path.\n. sync'ed with @caridy offline. For now, the find() api will remain in the ac.url addon.\n. I've updated lib/mojito so that now app.js can access the store if needed:\n// app.js\n...\nstore = app.get('mojito store'); // access to the resource store\nversions = store.getResourceVersions(...);\n...\nWe can update the built in middleware to use that new interface in a future PR.\n. Fixed.\n. Not a big fan that the call is split on every request to be able to handle dynamic substitution. But with this change, one can do this:\n// app.js\napp.get('/:mojitId/:action', libmojito.dispatch('{mojitId}.{action}'));\n. just checking if it is worth doing the sub on the value. otherwise sub will happen for every call, even if it is not parametrized. if that's not that expensive, I would like to remove it too.\n. yep, typo. i meant sub, not split which has to happen since it is dynamic in this case. updated my original comments.\n. fixed a bunch of examples too.\n. thanks. updated.\n. Correct, you can only use app.use(libmojito.middleware['mojito-handler-static']); for the mojito built-in middleware, since those lazy init at the first request. I think the source of confusion is because Mojito is trying to support the lazy init way, but at the same time provide some level of BC for legacy extensions.\nI will update the source file to doc this.\n/cc @zhouyaoji to make sure we capture this in the wiki and clarify this.\n. New line please.\n. New line.\n. New line.\n. New line.\n. New line.\n. New line. Ok, last one. Please review the other app.js.\n. Learned from the best ! :)\n. Indentation does not seem correct.\n. No more tests to skip.\n. html5app tests suite removed - no longer supported.\n. Used by examples app to parse command line arguments.\n. This explicit tunnel call is no longer required. That's taken care of by  mojito.middleware().\n. appPort no  longer valid in application.json.\n. Remove.\n. @lzhan  This does not look right.\n. @caridy Not anymore. \n@zhouyaoji  This is documented here.\n. ",
    "dmorilha": "would be nice to have it reporting to stdout instead of creating files :P\n. 0.4.2 but I already checked that on previous versions...\n. @caridy  @jimenez yes, still an issue on 0.5.4. Sorry for the huge delay, I usually don't see public github notifications.\n. very true, i tried before but wasn't able to use like you suggested, I sorted out it was my mistake. Thank you Caridy\n. code example https://gist.github.com/4687222\n. by the way the problem happened we think that could be a regression on the way mojito handled arrays.\n. Wouldn't that be aligned with the idea of circles someone's in mojito's team proposed a while back?\nIt would be nice to have this as a configurable trade-off into the apps configuration. If that's too much of complexity and could turn to be the natural behavior, it is even better!\n. ",
    "dmitris": "Do the --print and -p options (https://github.com/yahoo/mojito/pull/199 and https://github.com/yahoo/mojito/pull/251) solve the issue? If so, let's close it, otherwise, let's specify what exactly needs to be done.\n. @isao I think you meant the mojito-shaker - https://github.com/yahoo/mojito-shaker utility (correcting for people landing on the issue through search or browsing)\n. I think it is still a problem - the test fails since see https://github.com/yahoo/mojito/issues/255 and the proposed fix https://github.com/dmitris/mojito/commit/b6b646f87cb001daa77b11fe7d503485fc5add46\n. Here is the code example in question:\njavascript\n[\n  {\n    \"settings\": [\"master\"],\n    \"custom-route\": {\n      \"verbs\": [\"get\"],\n      \"path\": \"/custom-route\",\n      \"call\": \"mapped_mojit.index\"\n    }  // missing comma \n    \"another-route\": {\n      \"verbs\": [\"post\"]  // missing comma\n      \"path\": \"/*\",\n      \"call\": mojit-post-route.post_params\"  // missing the starting quote\n    }\n  }\n]\n. I see the same error when running\nmojito test app .\nin any subdirectory of examples/developer-guide/ - for example examples/developer-guide/adding_view_engines or examples/developer-guide/binding_events or examples/developer-guide/configure_routing\nThe full error is:\ndmitris$ mojito test app .\nwarn: (yui): NOT loaded: mojito\nwarn: (yui): NOT loaded: mojito\nwarn: (yui): NOT loaded: mojito\nwarn: (addon-rs-yui): your mojit \"RoutingMojit\" has a server affinity and these client-related deps: dom-core, dom-base, node-core, node-base, node-event-delegate, node-pluginhost, dom-style, dom-style-ie, dom-screen, node-screen, node-style\nwarn: (addon-rs-yui): Mojito may be unable to start, unless you have provided server-side DOM/host-object suppport\nwarn: (mojito-perf): microtime not found. Recorded times will not have microsecond accuracy\nwarn: (mojito-perf): microtime not found. Recorded times will not have microsecond accuracy\n/Users/dmitris/.nvm/v0.6.21/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:1147\n            throw (e || new Error(msg));\n                        ^\nTypeError: Cannot read property 'documentElement' of null\n    at Object.fn (/Users/dmitris/.nvm/v0.6.21/lib/node_modules/mojito/node_modules/yui/dom-base/dom-base-min.js:7:50)\n    at [object Object]._attach (/Users/dmitris/.nvm/v0.6.21/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:701:33)\n    at [object Object]. (/Users/dmitris/.nvm/v0.6.21/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:968:33)\n    at Object._finish (/Users/dmitris/.nvm/v0.6.21/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:6432:19)\n    at Object._onSuccess (/Users/dmitris/.nvm/v0.6.21/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:6477:14)\n    at Object. (/Users/dmitris/.nvm/v0.6.21/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:6674:24)\n    at [object Object]. (/Users/dmitris/.nvm/v0.6.21/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:6736:30)\n    at /Users/dmitris/.nvm/v0.6.21/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:3791:26\n    at /Users/dmitris/.nvm/v0.6.21/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:3814:21\n    at /Users/dmitris/.nvm/v0.6.21/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:3840:21\nmycomp:configure_routing dmitris$ \nmycomp:configure_routing dmitris$ pwd\n/Users/dmitris/dev/hack/mojito/examples/developer-guide/configure_routing\nmycomp:configure_routing dmitris$ \n. agreed that the command-line usage seems counter-intuitive or framework developer centered, not user centered.  As a user, you are more likely to lint your application, the files under current directory, rather than the mojito framework itself. Imagine that \"make test\" would run tests on the Makefile system and dependencies instead of the current directory!\nBut even running \"mojito jslint app .\" does not bring much help finding syntax errors.  jslint spits lots of output even on the unmodified code example - and real syntax errors get buried among notices about wrong spaces and column numbers.  Compare the following two gists:\nhttps://gist.github.com/3754876 - jslint output, 116 lines, 57 errors found (!)\nhttps://gist.github.com/3754881 - closure compiler, output, 16 lines, 4 errors, points directly to the lines with syntax errors\njslint does not seem the right tool if you want to make sure your Javascript code is syntactically valid and quickly locate the errors.\n. agreeing with @mojit0 - the current command-line usage is counterintuitive, and it is also inconsistent. You run \"mojito start\" to start the server using the resources in the current directory, even if you try to do (the invalid) \"mojito start app \".  \"mojito build\" and \"mojito compile\", if I understand correctly, work on the files under the current directory (the help descriptions do not mention \"mojito build app\").  But test and jslint options require to pass \"app .\" to work on the current directory.  I think the defaults should be modified:  \"mojito test\" and \"mojito jslint\" should have \"app .\" as the default, and there should be separate options to test/jslint the framework itself -  for example, \"mojito test framework\" or \"mojito test --self\".  I will make a separate issue for that.\n. Here's the current error if you mistype the mojito name (path):\n$ mojito jslint mojit mojits/QueryMojito\nfs.js:500\n  return binding.readdir(pathModule._makeLong(path));\n                 ^\nError: ENOENT, no such file or directory '/Users/dmitris/dev/hack/my-mojito/examples/developer-guide/using_parameters/mojits/QueryMojito'\n    at Object.fs.readdirSync (fs.js:500:18)\n    at processDir (/Users/dmitris/.nvm/v0.8.9/lib/node_modules/mojito/lib/app/commands/jslint.js:93:20)\n    at processFiles (/Users/dmitris/.nvm/v0.8.9/lib/node_modules/mojito/lib/app/commands/jslint.js:361:5)\n    at Object.run (/Users/dmitris/.nvm/v0.8.9/lib/node_modules/mojito/lib/app/commands/jslint.js:478:14)\n    at main (/Users/dmitris/.nvm/v0.8.9/lib/node_modules/mojito/lib/management/cli.js:125:13)\n    at Object. (/Users/dmitris/.nvm/v0.8.9/lib/node_modules/mojito/lib/management/cli.js:137:1)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\nI changed it to:\n$ mojito jslint mojit mojits/QueryMojito\n\u2716 Mojit mojits/QueryMojito not found.\nusage:\nmojito jslint [app | mojit] [] {options}\n    - target: app or mojit\n    - path (required for a mojit target): the path to the mojit to run jslint on\nRun jslint on the app in the current directory:\n    mojito jslint app .\nRun jslint on mojits/Bar:\n    mojito jslint mojit ./mojits/Bar\nRun jslint on the mojito framework itself!\n    mojito jslint\nOPTIONS: \n      --print      :  print results to stdout \n       -p          :  short for --print\n. you can run the following command to check for jslint errors in all examples:\n$ cd examples\n$ mojito jslint app .\npath.existsSync is now called fs.existsSync.\nLint report: mojito/examples/artifacts/jslint\n2106 errors found.\n$ cd developer-guide/\ndmitris$ mojito jslint app .\npath.existsSync is now called fs.existsSync.\nLint report: mojito/examples/developer-guide/artifacts/jslint\n1189 errors found.\n$ cd ../getting-started-guide/\ndmitris$ mojito jslint app .\npath.existsSync is now called fs.existsSync.\nLint report: mojito/examples/getting-started-guide/artifacts/jslint\n198 errors found.\n. The API key works, but the example still does not due to missing file mojits/Flickr/views/bar.hb.html  If I add that file, it looks ok - not sure what exactly was supposed to go in that view.\nThe bar view is called in controller.server.js\nhttps://github.com/yahoo/mojito/blob/develop/examples/getting-started-guide/part2/basic_yql/mojits/Flickr/controller.server.js#L29\njavascript\n         ac.done({images: images}, {view: {name: 'bar'}});\n. Let me know if this is right way to fix the jslint issues and worth to continue.\n. what about the idiom:\nvar x, y, z, i = 0;\nfor (; i < 10; i += 1) {}\nI read that it is done to save a few bites (minification).  What should we change it to?  I did in several examples:\nvar x, y, z, i;\nfor (i = 0; i < 10; ...\nis it right?\n. fixed by  @zhouyaoji - closing (though feel free to grab \nexamples/developer-guide/model_yql/mojits/flickr/controller.server.js with fewer jslint errors)\nhttps://github.com/yahoo/mojito/issues/562#issuecomment-8865712\n. this is the file:\nhttps://github.com/yahoo/mojito/blame/develop/docs/dev_guide/code_exs/binding_events.rst\nthe easiest is probably to double-check and modify all cases where there is a \"select\"\n. I can install nojito ok with node v0.8.11 and npm 1.1.62 even though there are warnings:\nnpm WARN engine connect@1.8.2: wanted: {\"node\":\">= 0.4.1 < 0.7.0\"} (current: {\"node\":\"v0.8.11\",\"npm\":\"1.1.62\"})\nnpm WARN engine express@2.5.2: wanted: {\"node\":\">= 0.4.1 < 0.7.0\"} (current: {\"node\":\"v0.8.11\",\"npm\":\"1.1.62\"})\nIs it a npm configuration difference or something else?\n. ",
    "epuidokas": "Does this invalidate https://github.com/yahoo/mojito/issues/7 ?\n. How should this be handled?\n1. Throw warning, attempt to copy application.json from the default archetypes into application folder and continue execution\n2. Throw an error and serve a 500\n3. Something else?\nWhen should this be handled (at startup, at request time, or both)?\n. Changed setting to staticHandling.forceUpdate\n. Not sure what policies the Mojito team has, but I'd clean up that commit history and leave the version incrementing out of this pull request.\n. Not sure what other applications typically do for their start commands, but honestly, the workaround didn't seem that bad to me.\nhttps://github.com/yahoo/mojito/issues/23#issuecomment-4848007\nnode --debug ./bin/mojito start\nMaybe it's just a matter of documenting and officially supporting usage that way.\n. ",
    "ginader": "that did the trick!\nthanks :-)\n. ",
    "tonytamsf": "beingmaster-lm:hello tonytam$ npm -v\n1.0.17\nbeingmaster-lm:hello tonytam$ node -v\nv0.4.9-pre\nI will to replicate \nbeingmaster-lm:hello tonytam$ uname -a\nDarwin beingmaster-lm 10.8.0 Darwin Kernel Version 10.8.0: Tue Jun  7 16:33:36 PDT 2011; root:xnu-1504.15.3~1/RELEASE_I386 i386\n. ",
    "chrismytton": "I don't understand your reasoning?\nIf I want to have a separate version of mojito for each application, then I can just run npm install mojito@x.x.x in the root of each application, which will install that version of mojito into the app's node_modules directory.\nI had thought that the GitHub install instructions were so that you could have a local version to hack on, installed globally so you can test it? Otherwise I don't see the point of the GitHub install instructions.\n. ",
    "triptych": "I don't follow this either - I was able to run the app without the double install...\n. Sounds good, thanks for the update.\n. ",
    "matthewmueller": "+1, currently null inputs to the template will blow up the server.\n. ",
    "gvaish": "Closed in favour of https://github.com/yahoo/mojito/pull/123\n. Case study added in commit #a8cd0e2bb\n(https://github.com/gvaish/mojito/commit/a8cd0e2bb0320657653369a68cc36e799b949543)\n. Erik,\nSure. No need to carry forward the complete commit history! :)\n. Well, an issue... Doctype remains non-configurable in that case.\nThere is no way during processing (read: controller execution) that the info about \"DOCTYPE\" can be provided to HTMLFrameMojit except from application.json\nI would be eager to know about alternate, API driven mechanism for the same.\n. Gotcha!\n. Andrew,\nPoints noted. Infact, as I write this comment, I have some ideas running at the back of my mind... let me try to \"revamp\" the HTMLFrameMojit to \"externalize\" the reusable code into another component that can be used from elsewhere as well not just HTMLFrameMojit\n. @rwaldura Will await the new HTMLFrameMojit.\n. How do I surface the data from middleware to controller then?\nDefine custom dimension?\n. I kind of support your idea.\nNoting that req is the only unique object per request (at NodeJS level).\nMay be a simple add-on \"mojito-shared-addon\" would do... add to request at middleware layer and access via addon.\nWell, the name may not sound good!\n. So... one direct way is to attach is to req object - that's guaranteed to be unique per request (at NodeJS layer).\nThe key issue is how to surface it all the way up to mojito layer..\nCan we use another property in ActionContext - say, user-data or something else? This should be merged with the req's property (same name) before it enters the mojito layer (ac).\nIMHO, that should be the easiest and, probably, the cleanliest way out!\n. This is really cool! Thanks @drewfish!\n. @drewfish Great. I missed this option :)\n. @drewfish Well, what's the base to serve from the local server? It will be good to have it documented officially as well\n@rwaldura The answer to above should decide whether or not to reopen.\n. @drewfish Awesome buddy! Given a couple of remarks in the commit ca2f559\n. This is super awesome!\n@caridy - Makes a definite case for documentation / hilite.\n. Seems fixed in 0.4.42. Was earlier running 0.3.30\n. @mojit0 I think it would be a good feature to have... specially if you have a machine with multiple IPs configured.\n. 0.4.42\n. My fault... it should have been 0.4.2 \n. @rwaldura Well, I guess we may have excitingly different approaches to solve the same problem - contrasting case studies! :)\n. Hmmm... noticed that ycb was pulled in already in node_modules/mojito/node_modules/ycb folder. But then why this error?\nUsing node @ 0.6.20, npm @ 1.1.37 and mojito @ 0.4.43.\n. Seemed liked a version conflict in global mojito install vs local mojito install.\nGlobal was 0.4.2 while local was 0.4.43.\n./node_modules/mojito/bin/mojito start works\n. Will give a shot and report the updates.\n. @caridy That's precisely the idea... CDN serving after combo-ing the binders.\nWill checkout the shaker... had done earlier but received some gotchas. That was in 0.x, now it's 2.x. Tempted to give a full shot this time!\n. @redonkulus Understand the rollup part... but the CDN?\nI remember to have tried out Shaker but noticed that it required server-affinity controller. Having only either common and/or client didn't work out.\nWill give a shot again.\nBut the question still remains... once I get the compiled JS files, how do I configure to use them via CDN?\n. Hmmm... but how about a non-S3, non-Y CDN... at least for non yui-files?\nIs it already there (and a simple conf) or WIP or I overlooked?\n. btw, I've used the following config:\n\"builds\": {\n    \"html5app\": {\n        \"forceRelativePaths\": false,\n        \"attachManifest\": true\n    }\n},\n\"staticHandling\": {\n    \"appName\": \"todomvc\",\n    \"useRollups\": false\n}\n. @caridy Thanks.\nyui.config.combine=false works great.\nHowever, cannot get base or root working... I want to serve YUI from Yahoo-CDN. How do I do that?\nNor is comboBase working.\nAll in all, it's only combine or don't. Can't use YUI served from URL like http://yui.yahooapis.com/3.8.1/build/\n. Tried lot of hands... but failed to get html5app use relative ./static path in loader-app-base.js that gets generated.  :-(\n. @caridy Thanks. Will wait for the PR.\npure, I guess is a misnomer. I should rather call is affinity-common and may be rename server to affinity-server in the same spirit.\nI wanted to demonstrate few innovative and interesting things for Mojito:\n1. Common affinity for controller and how it works. How proxy.invoke can be used to wire binder and controller. Do not use any other framework other than base Mojito. Hence the name pure.\n2. Use server affinity for controller and remaining code being essentially the same, demonstrate how proxy.invoke can tunnel up into the server, execute the logic in server context.\nFurthermore, there two more case studies in mind:\n1. Use YUI3 App framework on top of Mojito to see how to restructure the base Mojito app.\n2. Use jQuery framework on Mojito. (I could have used Dojo or Backbone or anything else but jQuery is just more popular than others).\n. Bingo. I did not dig deep into the code but I thought something like this... bleeding edge of the edge! :-)\n. @caridy / @isao - The code is not yet pushed to npm, right?\n. @caridy Bingo. I assumed/expected the same :-)\nBasically, what I was looking at is - if I have mojits that have either common or client affinity controllers only, can Mojito work without making a call to \"/tunnel\" to fetch the components (views, model, controller etc).\nI guess it doesn't make too much sense for this case...\n. Well, the \"referenced issue\" is - https://github.com/addyosmani/todomvc/pull/507\n. @caridy The issue that I am seeing is that even though all components have \"common\" affinity (controller + model), the html5app code generated makes a call to /tunnel.\nbtw, the application is live at http://gvaish.github.com/todomvc-mojito/common/\nKeep the firebug open and you'll notice two calls:\n1. /static/TodoMojit/definition.json?runtime=client&site=&device=&lang=en&langs=en%2Cen&region=&jurisdiction=&bucket=&flavor=&tz=  -- this should have been /common/static/... -- wondering if this should be with query-params or .../definition.json only\n2. /tunnel -- why? Do I have a wrong config at https://github.com/gvaish/todomvc-mojito/blob/master/todomvc-mojito-common/application.json ?\nAdding @isao \n. @caridy Cool. So, it seems the todomvc app has really served Mojito dev well :smile: \nWill await the updates. Take your time!\n. @caridy Is the Trello task done? I saw a notification\n\nJenny Donnelly checked Add missing tests to IDE integration suite [IDE no longer supported] on\n [todomvc][gh1050] store-client does not play nicely with relative static handling prefix on mojito-dev\n\nBut then the card went missing... Got curious.\n. @caridy Will ping you directly.\n. ",
    "selfcontained": "I think the concept of routes is pretty well known amongst deveopers, more-so than a magical full URL that mojito supports.  Developers are used to the concept of routing in their mvc, and to not mention it may make some assume that it only has these magical @MojitoName.action urls.  My 2cents.\n. ",
    "Marak": "Please let me know if there is anything I can do to help in making sure mojito apps can be required and started programmatically.\nA top-level method to start up a server that accepts configuration options would be ideal. \n. ",
    "FabianFrank": "@mojit0 @Marak @rwaldura @chetanankola \nI just played with Mojito 0.3.28 and nodejitsu. After small changes (see referenced pull request) I got our weather training app working on nodejitsu:\nhttp://fabianfrank.myweatherapp.jit.su/\nYou can find the source of the weather app (fixed package.json and server.js) here:\nhttps://github.com/FabianFrank/trainingMojito/tree/master/lesson1/myWeatherApp\n. great job @caridy let me know if you need help :-)\n. When looking at @redonkulus use case, I think it would be good that when we have\nindex.js\nindex.iphone.js\nMojito automatically serves the index.iphone.js binder. People shouldn't have to implement this logic by themselves. We should have this kind of automatic file picking for devices across the framework, I think.\n. +1 great idea\n. @isao @mojit0 Please see my comment in the diff, the changes introduce a new problem. Please let me know if you want to re-use this issue/continue here or if I should report a new issue. Thanks.\n. https://github.com/yahoo/mojito/pull/205/files#L1R86\n. I also think it can be closed.\n. +1, this will fix issue #231\n. The required commit is\nhttps://github.com/node-migrator-bot/mojito/commit/c5bd87378797ece3baa9c6049ed08fd2438a4157\n. @rwaldura yes, I reviewed the pull request and it will fix this one.\n. I tried to address this issue with a pull request. This fix works fine in our app.\n. @caridy A test has been provided in the pull request. Thanks.\n. +1 I will submit a pull request shortly.\n. mojito test only executes tests with common or server affinity. If you want client-side UTs to run with mojito test you have to give them common affinity and then ensure that the DOM is available when the tests are running:\nhttp://yuilibrary.com/yui/docs/yui/nodejs-dom.html\n. I hate it when my git configs get mixed up, second time today :-( throwing this one away.\n. @drewfish thanks. Please let me know if we can merge it like this, otherwise I am happy to make some changes according to your feedback.\n. @drewfish @isao Can we get this with the next mojito release?\n. @drewfish  Is there an ETA for when we can merge this one?\n. I requested wrench to be whitelisted internally.\n. @isao wrench has been whitelisted internally, so the secondary build should also pass now. can you please check again? thanks!\n. I don't think we have to make changes to the README or other documentation, because the usage of mojito docs didn't change. wrench is MIT licensed, like all other npm modules that we use. We could mention it at the bottom of the README, like we mention Mustache. On the other hand we also don't mention other dependencies there, so I wasn't sure if we want this. Any thoughts?\n. @isao @mridgway Is there an ETA for when we can merge this one?\n. :thumbsup:\n. Pull request #267 would allow you to use\n$ node server.js\nSadly it doesn't honor the port option from application.json. Hopefully we can improve that.\n. I also made it work with heroku, just some minor changes:\nhttps://github.com/FabianFrank/trainingMojito/compare/FabianFrank%3Amaster...heroku\nhttp://mojito-demo.herokuapp.com/\n. Thanks @caridy, let's follow up internally and I will provide updated code after we have a conclusion.\n. Since Denis and therefore Manhattan agreed to accept a server.js that calls .listen() we can change Mojito to align with what the community seems to have accepted as standard.\n. @alganet I think this absolutely makes sense, when providing APIs.\nI have one more use case and I think it answers the why question of @rwaldura :\nIt is a huge help to not only see a generic error code but a specific description of the real error from the perspective of an API customer. A lot of good Yahoo APIs even give you a URL in the description where you can read more. I think Mojito should support this feature, because it can make APIs implemented in Mojito a lot better.\n. @rwaldura Makes sense. I agree with the primary use case, but often APIs are somewhat a by-product of a cool app and we shouldn't force them to be worse than necessary, so I gave you a pull request. :-)\n. I took the term reasonPhrase from the HTTP documentation: http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html. Node itself also decided to re-use this term.\n. Hi Lichun,\nI don't think we should be adding shell scripts to the Mojito codebase. Something like\n$ mojito arrow -type [unit|functional] [-seleniumHost HOSTNAME] ...\nmakes more sense, because it will scale much better than a collection of scripts. The config should not always have to be on the command line, but also be storable in a config file, such as arrow.json. It should be similar to how mojito docs and mojito test works, so that you can run arrow tests using the mojito command for the framework, a full app or a single mojit. In order for more Cocktails projects to adopt arrow, we should integrate it with mojito. Otherwise it is less appealing than mojito test, which showed th way to go with respect to how tests are an integral part of the framework and the apps we develop.\nLet me know if you need help implementing a new command mojito arrow, I have already worked on that part of he codebase.\nFabian\n. How can those tests be run? Using mojito test?\n. I would recommend that every time we make compatibility breaking changes, we have to increment the dependency in the skeletons. So that all apps created with mojito@0.4.x should depend on mojito >=0.4.0 or maybe even 0.4.x.\n. @drewfish Do you think it makes sense to automatically pick the right mojito version depending on the mojito version that is currently active at run time instead of hardocding the version in the archetype? I was just looking at how to fix this and I think we could do this by reusing some code from the version command implementation. Let me know if you think this is a good idea and I can send the PR.\n. @jenny I was approached by several people in Bangalore about this. The breaking/crashing unit tests are fixed with: https://github.com/yahoo/mojito/pull/395\n. closing duplicate, I seem to experience github hickups right now\n. The binders don't have an affinity, but the tests have. IMHO this makes sense, because it makes sense to run binder tests on the server (for convenience, faster builds).\n. Thanks @mridgway. FYI, we are running them on the server in Axis today, by injecting the dom dependency into YUI as explained on http://yuilibrary.com/yui/docs/yui/nodejs-dom.html.\n. Sounds like you might have changed the affinity of the controller instead of the test. Only change the test's affinity!\n. -1\n@mojit0 Please look at my inline comment regarding the server.js file. This PR will not fix the issue with Mojito apps not being deployable on hosters out of the box. Users will still have to modify server.js and add the .listen() call manually.\n. I recall nodejitsu required me to call listen(), otherwise the app was not reachable.\nHeroku requires you to listen on what they give you as $PORT (environment variable). I don't see how this listen() call inside lib/mojito.js can be easily changed to do this by an end user. I prefer to have this startup sequence exposed in server.js as it is in my PR so that it fulfills 3 targets:\n1. works on Manhattan\n2. works on \"most\" node hosters\n3. can be changed easily to suit proprietary hoster needs (such as listening on a port they pass to you as a parameter or env variable)\n. @mridgway I don't think supporting all hosters should be an effort inside the start logic/sequence of Mojito. Maybe the next hoster calls it $YOURPORT instead of $PORT, I don't think we can cater to all of them. I'd like to have a plain/standard start sequence that is easily extensible for custom hoster needs like $PORT or a Procfile, etc.\n. +1\n. This also solves a production problem for us, where we might see an error log like\nERROR Server OutputHandler: Error 500: Cannot read property 'url' of undefined\nbut don't know which mojit should have been executed and therefore don't know what might be going on. After this PR we'll see the name of the Mojit that failed:\nERROR Server OutputHandler: Error 500: Unable to compute assets root for mojit \"FooBar\". This usually happens when trying to run a mojit that does not exist.\n. @isao it seems we are good to merge ;-)\n. +1\n. You are running mojito jslint wrong. You are doing\n$ mojito jslint\nwhich runs jslint for the mojito framework, not your app. You should run\n$ mojito jslint app\nif you want to lint your app.\n. +1\n. @isao @mojit0 I am afraid that this one introduces a problem. For example we have URLs in our config that we send to the client and they contain ampersands. Now instead of the string 'foo&bar' we get 'foo\\u026bar' on the client. same would happen for > or other characters that are replaced with their unicode representation in this way.\n/cc @caridy\n. Those are good points. I did not realize that the dependencies were sorted, sorry. I agree with your assessment and I will move them to devDependencies.\n. I don't thick we should add a Procfile, because as @drewfish said this is Heroku proprietary.\n. This will not work with all hosters, because there is no call to .listen(). A lot of hosters expect you to call listen by yourself. Not calling listen() is the main reason why Mojito doesn't deploy out of the box on hosters and why I submitted pull request #267.\n. AFAIK nodejitsu uses it.\n. From https://npmjs.org/doc/json.html#X-Version-Ranges I don't think that \">= 0.6.x\" is a valid way to specify a version. It should either be \"0.6.x\" or \">= 0.6.0\". From my experiments with Heroku and Nodejitsu I have seen that \"0.6.x\" always works but \">= 0.6.0\" caused problems, so I would recommend using \"0.6.x\".\n. Yeah, I changed scripts.start to \"server.js\" for Nodejitsu deployments.\n. @dmorilha Is there a particular reason for using freeze? According to http://jsperf.com/freeze-vs-seal-vs-normal/3 frozen/sealed objects are a lot slower handled by v8 than \"normal\" objects.\n. The problem is not about the freeze call itself, but about the performance hit that appears whenever doing something with an object that has been frozen. In my mind the questions is, what is faster:\n1. a request that operates on a frozen object\n2. a request that does a clone and then operates on a regular object\ni.e. is the clone overhead worse than the overhead of operating on a frozen object?\n. @drewfish doesn't the stack contain the parsing error and line number?\n. ",
    "Satyam": "I have found that defining an onRefreshView method in your binder allows you to re-attach your event listeners.\njavascript\nonRefreshView: function (node) {\n     this.bind(node);\n},\n. See the use of refreshView in:\nhttp://developer.yahoo.com/cocktails/mojito/docs/intro/mojito_binders.html#binder-examples\n. Sorry, I had just discovered that method myself so I got excited and replied too soon.\n. a) I wasn't asking about client documentation, I am reporting that when mojito documents an application, it does not document the binders.\nb) Yes, I was referring to archetypes, sorry.  I know where they are and I know I can change them but I am reporting this so that the standard version is already fixed.\nc) ok, thanks\n. Please, don't add Y.Model to Mojito as it is.   It has several architectural shortcomings and it would be a bad thing if those propagated to Mojito.\n- It mixes data and meta information into the same namespace (it uses attributes for all).\n- isNew is calculated based on a false assumption. With data moved apart from meta information, isNew and isModified can be attributes, as they should\n- It does not support multiple field primary keys, which is a normal practice in most existing databases.\n- method toJSON confuses two separate features that should have been split into different methods.\n- the mix of data and metadata into the same space makes it difficult to add extensions because you risk adding attributes which might collide with existing database field names or, alternatively, it forces you to add a layer of translation to data coming from existing data sources to rename conflicting names.  This is a never-ending situation because you never know which future feature might add a new attribute name and, in the future, create a conflict you didn't plan for.\nFor more information see:\nhttp://satyam.github.com/WhyGalleryModel.html\n(just read a few lines after each of the headings to get an idea of the issues)\nhttp://yuilibrary.com/gallery/show/md-model\nhttp://yuilibrary.com/forum/viewtopic.php?p=32738#p32738\n. As a proof of the bad design of Y.Model allow me to point to the following methods of Y.Model itself, which are originally defined in Attribute (or one of its constituents) and had to be redefined in Model as a patch to compensate for its bad use of those attributes:\n- get\n- set\n- setAttrs\n- _defAttrChangeFn\n- addAttrs\nSome of them are declared in the API docs (click on the 'protected' checkbox to see them) as \"Duckpunches\", whatever that might mean (non-native English speakers like myself would certainly appreciate if documenters avoided some halfassed colloquialisms in formal documents).  To me, it means \"unnecessary overhead to compensate for a bad design descision\".\nThus, Y.Model is already patching itself for the improper use of a core YUI module.\n. All the attribute issues would have been avoided if data and meta data had been split from the start.  If you look at my gallery-md-model, it has a 'coalesced' data event from the start without any patching.  I would rather not know the reasons to patch Model, I would rather have a better Model that needs no patching.\nSo far in all the discussions I've been involved in, nobody has ever pointed out a single issue with my proposed solution.   I am sure it has some issues but my point is:  it seems nobody has ever taken the time to look at it!!!!!!   I could have filled the whole thing with plain trash and it would have been the same since nobody would have noticed.   Nobody has ever said that my model doesn't work because of this and that simply because nobody cared to look. Hopefully, it doesn't have any issue, but all the replies I've ever got are in the lines of \"because the  says so\"\nAll the reasons I hear about the decisions taken seem to go around technicalities on how to use the YUI library for the sake of the YUI library itself and nice examples with data read via YQL or some such.  Someone, long ago, asked for a real CRUD application with a real SQL database.   Can someone please remember that a Model is meant to represent real data, not about cool programming?\nIf you cannot manipulate a real, existing SAP table, you don't have a good enough model.  And you cannot do it with plenty of patching.  My intention is for Model to do it without any patching, and those include the patches that Model itself already has. None of my suggestions are incompatible with YQL datatables or other non-SQL type of data.  My solution does not exclude your datasource, Y.Model excludes plenty of regular, existing SQL tables.\n. Have I mentioned performance?   Y.Model is based on Backbone.Model.   Both have a get method.  \nThis is the original 'get' method of Backbone:  https://github.com/documentcloud/backbone/blob/master/backbone.js#L236\nThis is my getValue method, which is the equivalent but does not use the get method inherited from Attribute: https://github.com/Satyam/yui3-gallery/blob/master/src/gallery-md-model/js/gallery-md-model.js#L155   \nThis is what Y.Model ends up using by having to use Attribute (the public get() method calls _getAttr() ):\nhttp://yuilibrary.com/yui/docs/api/files/attribute_js_AttributeCore.js.html#l468\nSorry about all of those (apparently) zillions of Backbone developers who would never switch to YUI because they are completely unable to rewrite all their model.get() and model.set() to use getValue() and setValue() but preserving the name of the public interface for all those poor souls comes at a great cost.   \nI just mentioned get and its equivalents because they are brief enough to see in a screenfull.  Have you checked the set/setValue on each?\nTry running some performance tests.\nY.Model might be based on the very popular Backbone, but it has not improved on it.  Not a bit.\n. Whatever you show in the examples and tutorials is what developers will end up using.\nImplicitly and in the minds of most people learning Mojito, you would be endorsing Y.Model.\nIt really doesn't matter how you phrase your disclaimer.\nLots of people will waste a lot of time based on that.\nSo be it.\n. @focuzz \nI don't want Mojito samples with my custom Model.   My goal was to show the design errors in Y.Model and have those fixed in Y.Model itself and, to do that, I showed how it could be done better, perhaps not right, as I cannot claim to have the perfect solution, but at least much better than what's on offer. \nBTW, I wouldn't mind if someone showed me what's wrong with my design or that what I call defects in Y.Model are not such or that the performance of Y.Model is not much worst than mine.\nI have not blindly criticized Y.Model, I have spent quite a lot of time and effort studying it and finding solutions which I took more time and effort to show how to fix.  I have not seen any indication that anyone has ever bothered to take a look at what I coded, documented and explained.\nIt is not that one or the other model can be used depending on use cases, Y.Model has design errors.  Those errors might not be evident in some use cases, but they are still there.   It is not mainly about whether you use multiple primary keys, the core issue is not there, multi-field primary keys might be a nice feature, but it is not critical.  The core issue here is that data and meta-data should be separated.  You can't use attributes to hold them both.   You have to leave Attribute's set and get alone and use setValue and getValue (or any other name you want) for data. Just look at the links I provided a few posts before.   See how my getValue matches more closely Backbone.Model.get intent if not its name.  The primary design goal for Y.Model seems to have been to make its interface identical to that of Backbone.Model at whatever cost.  The cost has been too high.\n@drewfish It makes sense that you endorse Y.Model.  It wouldn't hurt if you fix it first.   It is not a matter of using one or the other.   One is a badly copied version of Backbone.Model plus a whole bunch of patches to a core component (which should not be patched) to enforce that arbitrary decision to make Y.Model look like Backbone, as if anyone could prize that so badly that they would be willing to live with the restrictions, the patches and their performance hit.\nBy all means, do use Y.Model, but fix it first.\n. ",
    "taomin": "I am afraid we are talking about different issues; I know the onRefreshView function. This bug is talking about calling refreshView on a composite mojit will cause the whole JS stopped working, not the bind() function\n. Shouldn't mojito catch the error if mu fail for any reason ?  letting server die is not a good idea since any dependent library can fail,\n. ",
    "rmadhuram": "Hi Ren,\nI'll submit one soon. It should be a one line fix, but testing the fix would suck up lot of my time. I'll get to it as soon as I get some time.\nRegards,\nRaj\n\nFrom: Renaud Waldura reply@reply.github.com\nTo: rmadhuram rmadhuram@yahoo.com \nSent: Wednesday, April 18, 2012 11:45 AM\nSubject: Re: [mojito] Tunnel client timeout is hardcoded to 10 seconds (#135)\nOh wait. Could you submit a patch please?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/issues/135#issuecomment-5205752\n. Here is the patch:\n``` javascript\ndiff --git a/source/lib/app/autoload/tunnel.client-optional.js b/source/lib/app/\nindex 7117671..19f4e9a 100644\n--- a/source/lib/app/autoload/tunnel.client-optional.js\n+++ b/source/lib/app/autoload/tunnel.client-optional.js\n@@ -30,7 +30,7 @@ YUI.add('mojito-tunnel-client', function(Y, NAME) {\n                 },\n             getProxyTimeout: function() {\n\n\nreturn 10000;\nreturn appConfig.tunnelTimeout || 30000;\n                 }\n             };\n```\n\nI tested it by modifying the inter-mojit example and verified it works.\nPlease note that I bumped up the default timeout to 30 seconds. Applications can override by setting the \"tunnelTimeout\" property in application.json\nRegards,\nRaj\n. Sounds good.\n. I found the broken link here as well: http://developer.yahoo.com/cocktails/mojito/docs/reference/glossary.html \nLooks like the API docs were re-parented and that was not reflected in docs that were pointing to it.\n. When fixing this, you may also want to fix the typo \"Using Query Paramaters\" in http://developer.yahoo.com/cocktails/mojito/docs/\nThanks,\nRaj\n. Oops. looks like winmerge wrote everything with CRLF. Please ignore this pull request. I'll fix and send another.\n. Hi Joe, actually it was originally titled \"Allowing Inter-Mojit Communication\". I changed it to \"Inter-Mojit Communication\". Green is mine, red is previous.\nThanks,\nRaj\n. Thanks!\n. +1\n. Sorry the context is not carried over when I click on \"Report a bug\" \nIt is on this page:http://developer.yahoo.com/cocktails/shaker/shaker_starting.html#running-shaker\n\"Nontherless here a table where you can find the most stable version of Shaker for each mojito mayor version:\"\n. Thanks Joe.\n. Thanks Joe. Sure. I'll do it from next time onwards.\nRaj\n. ",
    "ricallinson": "That sounds better. The \"index.js\" file is redundant and can be removed completely. My view on the \"manifest\" file is that it should be generated by the Mojito server and not the build step.\n. I will re-submit.\n. Option 1:\nThere could be two versions of the Addon, one for the server and one for the client.\nOption 2:\nRemove \"http\" from the \"dependOn\" array and add it as a YUI require. However, this would always throw a warning as the http Addon will never be found by the client.\n```\nI13nAddon.dependsOn = ['config', 'url'];\nY.mojito.addons.ac.i13n = I13nAddon;\n}, '0.1.0', {requires: [\n    'mojito',\n    'mojito-addon-http'\n]});\n```\nI can submit a patch for Option 2 if required?\nIn either case the i13n Addon should not be part of the public facing Mojito library as it cannot be used by anyone other than Yahoo!\n. Pull request submitted https://github.com/yahoo/mojito/pull/287\n. Yea. I moved it as it's been sitting here for a month. The diff is still one file.\n. Thanks Drewfish. I'll close this pull and open a new one once I've gone down the rabbit hole.\n. Pull request here https://github.com/yahoo/mojito/pull/466\n. After discussing this in detail with the Shaker folks I now understand the general use-case of wanting the \"action\" to be part of the instance schema. Although Mojito core does not use it today anyone extending the Resource Store with an Addon could depend on the \"action\" for caching purposes or for applying specializations to the returned instance object. Not having the the \"action\" available limits the extensibility of mojito.\nHowever, I'm not sure the new \"definition.json\" URL format is ideal.\n. I've been trying to get the tests passing for this pr but it seems the functional tests are unstable and throw different errors on each run. All unit-tests pass and the randomly failing functional tests are not connected to the changes in this pr.\n. Updated pr;\n- libyaml used to maintain consistency\n- readConfigThroughCacheSync renamed to readConfigSimple and description updated\n- yuidoc comments added for readConfigSync\n- unit-tests added for readConfigSync\n. Good catch, added.\n. Good catch, added.\n. Good catch, will update docs.\nThe type parameter is used in the recursive call so the function knows which format to test for next.\n. Not sure I understand. How would that help?\n. Never mind, I get it. The code was originally designed to allow overriding of the \".json\" files which is why it uses the indexed array.\n. ",
    "davglass": "Feel free to ping me if you need any assistance with the upgrade.\n. Yes, in my old yui3 module I used YUI.GlobalConfig as a hack to get Node.js support. Since the yui module is an official YUI release, all of the modules are in the package and I didn't have to \"work around\" things.\nYou should be able to set YUI.GlobalConfig = { ... } before you create your instance and it should still work.\nIf you have a simple repro case, I'd be happy to help debug it :)\n. I took a quick peek at this today (note, I know nothing about mojito)\nhttps://github.com/davglass/mojito/tree/3.5.1\nI have it down to only failing 6 tests when running in \"ondemand\" mode:\nhttps://gist.github.com/2788649\nI didn't have time to dive into what \"precomuting\" mojito is doing under the hood with Loader, but it's not working properly. All of the errors that I saw before flipping that bit was due to it not loading any YUI modules. Switching over to \"ondemand\" forced it to use my Loader in Node and YUI core modules began loading again.\nThere were some serious updates (and shortcuts) added to 3.5.x's Loader that you guys should probably use. But I didn't have time to deep dive into the precomputed stuff to see if I could find it.\nI'd be happy to \"tag-team\" this with one of you guys if you have time to explain how you guys are \"precomputing\" dependencies and then I can help you migrate to the newer Loader API's (which are much nicer) and get this finished.\n. Down to one failing now with my latest checkin:\n```\nFAILURE DETAILS:\n================\nmojito-store-server-tests :: Store tests :: appConfig deferAllOptionalAutoloads\nbreg\nExpected: undefined (undefined)\nActual: /static/mojito/autoload/transport/beanregistry/registry.client-optional.js (string)\nTotal tests: 331    \u2714 Passed: 309 \u2691 Deferred: 21    \u2716 Failed: 1   93% pass rate\n``\n. Yes.\n. Yeah, you could totally set it to false after the server starts, I just changed the things needed to make 3.5.1 run, I know little to nothing about what Mojito is doing under the hood ;)\n. That was my thoughts, just giving a helping hand with what I could do ;)\n. It's probably because your not usingloader.resolve` to resolve the deps. \nYou can either put that line back, or switch to calling resolve & getting the modules from the return. \n. This should do it:\njavascript\nloader.require(required);\nvar out = loader.resolve(true); //This forces a calculate\n. That's fine, I need to get a repro case of this so I can fix it properly. I thought I covered all the issues with resolve in my tests. \n. ",
    "gomezd": "That was probably my bad. I'll update my repo and if this change is still relevant, will send a clean request. I agree the process should be better documented.\nThanks!\n. You may still want to include some 'common tests' for example, that come from 'devDependencies' pkg in the first level of dependencies, for reusability.\nActually It would be really useful to filter by pkg, being able to decide which ones you include or not, but seems to be a larger change.\n. Ageed. I didn't mean testing your dependencies but testing different apps with reusable testes that come from a dev dependency.\nIn particular i'm thinking of tests that can validate specific pieces of your app, say configs, file naming conventions for selectors, or things like that.\nI also agree that this is not unit testing and i know you guys are thinking about this kind of tools So I'll let you decide :)\n. We have implemented the changes you requested. Please review.\nThanks\n. Just a note from the description of this PR: \"It also introduces the ability for plugins to alter configurations\". This is part of a previous PR:\nhttps://github.com/yahoo/mojito/pull/1187\n. Done.\n. Done suggested changes to unit tests.\n. @caridy Yes, what is running in travis is for this PR\n. IMHO we need to do extensive performance testing to determine any possible impact of this.\nAnd i'm not a big fan of having to declare the dependencies in another file (defaults.json), seems to me confusing and error prone.\n. ",
    "redonkulus": "@rwaldura why was this closed? Its a bug. In my examples above, the URL I want is never actually rendered correctly.\n. @rwaldura I'm passing in a variable to url.make() so that the URL is generated dynamically.  Based on the route the following:\nurl.make('page', 'index', '', 'GET', { interestId: 'Barack_Obama'});\nShould produce /Barack_Obama \nHowever, the 3rd rule always matches since all the routes share the same controller/action call. We should be able to use the same controller/action call for different routes. As Mike said, it should match based on the routes and not just the \"call\" attribute.\n. @caridy are you saying the above pattern would not be recommended in the routes file? I would have to have a different action to support each route? Seems convoluted. \n. Any update on this pull request? ETA perhaps?\n. +1 to this, as its sorely needed to serve different binders across different devices (mobile vs desktop). What is the status / ETA on this?\n. I confirmed this is fixed in the 0.4.* release.\n. @rwaldura this would be a blocker from upgrading to 0.4.\nEven with changing appName to something other than \"/\", I still do not get the shared assets to load.\n. Good call, moved under \"rules\".\n. @drewfish this was fixed last week, forgot to update PR.\n. @jenny will we be able to customize the jS Hint config settings?\n. You can use Shaker for handling assets from CDN and rolling up files:\nhttps://github.com/yahoo/mojito-shaker\n. You can use Shaker for handling assets from CDN and rolling up files:\nhttps://github.com/yahoo/mojito-shaker\n. @gvaish there is a section in the Shaker docs that menions deployment via Yahoo CDN or Amazon:\nhttp://developer.yahoo.com/cocktails/shaker/shaker_usage.html#environment-configuration\nBasically just creating the following configuration in your application.json file:\n{\n    \"settings\": [\"environment:prod\"],\n    \"shaker\": {\n        \"task\": \"s3\",\n        \"config\": {\n            \"client\": {\n                \"key\": \"<key>\",\n                \"secret\": \"<secret>\",\n                \"bucket\": \"<bucket>\"\n            }\n        }\n    }\n}\n@dferreiroval can confirm.\n. @gvaish on the same doc page, its mentioned that you can create your own deployment task using Buildy to deploy to another CDN:\nhttp://developer.yahoo.com/cocktails/shaker/shaker_usage.html#deploying-elsewhere\nHope that helps.\n. @caridy seems like the manhattan workflow would be a specific yahoo use case right? Is that something we need to enforce for the non-y community?\n. This looks good. Thanks.\n. Not to hijack this PR but have you guys had a chance to look at JSON5? Is a superset of JSON which supports comments, multi line, trailing commas and other things. Obviously performance and other backwards compatibility features would need to be evaluated. However, it keeps the JSON format with the added commenting feature this PR introduces. \nhttps://github.com/aseemk/json5\n. We do this in our app now and was introduced before we moved all affinities from server to common. This could cause issues with mojitProxy.destroyChild and possibly introduced memory leaks when refresh view is used. Its worth looking into the affects this has on the client before its baked into Mojito.\n@kfay may have more info here.\n. Do you also need a check for .yml?\n. Do you also need a check for .yml?\n. ",
    "jlecomte": "Hey Isao, I'd appreciate if you could do it. I had originally checked out the develop branch but it wasn't stable at that time so I could not test my change. Let me know if I can help in any other way. Thanks!\n. Hi Isao,\nYup, I am using it on my dev box, no problem at all! Something must have gone wrong during the merge.\n. Additionally, it would be nice to extract the YCB library and make it its own independent npm package which mojito can depend on.\n. I'm not sure what the final solution should be. Please, tell me if the use cases are clear enough though. I'd be more than happy to sit down and walk you through them.\n. A method should not be sometimes synchronous and sometimes asynchronous if it does not support a callback function as a parameter. That is the only way to abstract the nature of the execution of a routine.\nYes, we are calling an internal API and there are good reasons why we are doing that. We would like to have the _dispatch method support a callback function as argument so that our code will work on the first run as well as any subsequent runs! Thanks.\n. We should also add support for crossdomain.xml... Caridy, can you add that one line, or do you need a new pull request?\n. Isao, yes, that is exactly what I was talking about.\n. We don't want to convert our config files to YAML at this point.\n. My understanding is that, indeed, JSON is a subset of YAML since YAML version 1.2 and modern YAML parsers can parse JSON correctly. Whether that's the case in Mojito 0.4.9, I don't know... But that's not the point. If I want to share the config between the client and server, which is one of the things that Mojito excels at doing, why use a YAML parser instead of the standard JSON parser which is available on the browser? Why ship unnecessary bytes to the client? That does not make any sense!\nJSON5 is nice, but I don't care about any of its features except the ability to insert comments...\n. Drew, this would be great for us. What is the ETA to have Mojito fully support YAML?\n. OK, if this feature request is being scheduled for 0.5.1, you may close this PR.\n. @redonkulus yes, we have. Please see PR #796 for some additional background about this thread.\n. Caridy: let's not hijack the issue I reported (which I think is a pretty simple fix) with something which, although somewhat relevant, is an entirely different discussion. Let's chat offline because I very strongly disagree with your comment.\n. I am still seeing this issue with mojito 0.5.4 when linking a package that requires mojito 0.5.x.\n. $ ynpm ls\nsearch-apps-news@0.0.1 /git-data/apps/search-apps-news\n\u251c\u2500\u252c jsdom@0.2.1 \n\u2502 \u251c\u2500\u2500 cssom@0.2.5 \n\u2502 \u251c\u2500\u2500 htmlparser@1.7.6 \n\u2502 \u2514\u2500\u252c request@2.14.0 \n\u2502   \u251c\u2500\u252c form-data@0.0.7 \n\u2502   \u2502 \u251c\u2500\u2500 async@0.1.22 \n\u2502   \u2502 \u2514\u2500\u252c combined-stream@0.0.4 \n\u2502   \u2502   \u2514\u2500\u2500 delayed-stream@0.0.5 \n\u2502   \u2514\u2500\u2500 mime@1.2.9 \n\u251c\u2500\u2500 mockery@1.4.0 \n\u251c\u2500\u252c mojito@0.5.4 \n\u2502 \u251c\u2500\u2500 colors@0.6.0-1 \n\u2502 \u251c\u2500\u252c express@2.5.10 \n\u2502 \u2502 \u251c\u2500\u252c connect@1.9.2 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 formidable@1.0.12 \n\u2502 \u2502 \u251c\u2500\u2500 mkdirp@0.3.0 \n\u2502 \u2502 \u2514\u2500\u2500 qs@0.4.2 \n\u2502 \u251c\u2500\u252c glob@3.1.21 \n\u2502 \u2502 \u251c\u2500\u2500 graceful-fs@1.2.0 \n\u2502 \u2502 \u251c\u2500\u2500 inherits@1.0.0 \n\u2502 \u2502 \u2514\u2500\u252c minimatch@0.2.11 \n\u2502 \u2502   \u251c\u2500\u2500 lru-cache@2.2.2 \n\u2502 \u2502   \u2514\u2500\u2500 sigmund@1.0.0 \n\u2502 \u251c\u2500\u252c js-yaml@1.0.2 \n\u2502 \u2502 \u2514\u2500\u252c argparse@0.1.12 \n\u2502 \u2502   \u251c\u2500\u2500 underscore@1.4.4 \n\u2502 \u2502   \u2514\u2500\u2500 underscore.string@2.3.1 \n\u2502 \u251c\u2500\u252c jslint@0.1.9 \n\u2502 \u2502 \u2514\u2500\u252c nopt@1.0.10 \n\u2502 \u2502   \u2514\u2500\u2500 abbrev@1.0.4 \n\u2502 \u251c\u2500\u2500 mime@1.2.4 \n\u2502 \u251c\u2500\u2500 mkdirp@0.3.5 \n\u2502 \u251c\u2500\u2500 request@2.9.202 \n\u2502 \u251c\u2500\u252c rimraf@2.1.4 \n\u2502 \u2502 \u2514\u2500\u2500 graceful-fs@1.2.0 \n\u2502 \u251c\u2500\u2500 semver@1.0.14 \n\u2502 \u251c\u2500\u2500 wrench@1.3.9 \n\u2502 \u251c\u2500\u2500 yui@3.7.3 \n\u2502 \u251c\u2500\u252c yuidocjs@0.3.38 \n\u2502 \u2502 \u251c\u2500\u2500 graceful-fs@1.2.0 \n\u2502 \u2502 \u251c\u2500\u252c minimatch@0.1.5 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 lru-cache@1.0.6 \n\u2502 \u2502 \u251c\u2500\u2500 node-markdown@0.1.1 \n\u2502 \u2502 \u251c\u2500\u252c rimraf@2.0.3 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 graceful-fs@1.1.14 \n\u2502 \u2502 \u2514\u2500\u252c yui@3.9.0pr1 \n\u2502 \u2502   \u2514\u2500\u252c request@2.12.0 \n\u2502 \u2502     \u251c\u2500\u252c form-data@0.0.3 \n\u2502 \u2502     \u2502 \u251c\u2500\u2500 async@0.1.9 \n\u2502 \u2502     \u2502 \u2514\u2500\u252c combined-stream@0.0.3 \n\u2502 \u2502     \u2502   \u2514\u2500\u2500 delayed-stream@0.0.5 \n\u2502 \u2502     \u2514\u2500\u2500 mime@1.2.7 \n\u2502 \u251c\u2500\u2500 yuitest@0.7.8 \n\u2502 \u2514\u2500\u2500 yuitest-coverage@0.0.6 \n\u251c\u2500\u252c mojito-shaker@3.0.7 \n\u2502 \u251c\u2500\u2500 async@0.1.22 \n\u2502 \u251c\u2500\u2500 gear@0.8.3 \n\u2502 \u251c\u2500\u252c gear-lib@0.8.7 \n\u2502 \u2502 \u251c\u2500\u2500 csslint@0.9.10 \n\u2502 \u2502 \u251c\u2500\u252c handlebars@1.0.10 \n\u2502 \u2502 \u2502 \u2514\u2500\u252c optimist@0.3.5 \n\u2502 \u2502 \u2502   \u2514\u2500\u2500 wordwrap@0.0.2 \n\u2502 \u2502 \u251c\u2500\u252c jslint@0.1.9 \n\u2502 \u2502 \u2502 \u2514\u2500\u252c nopt@1.0.10 \n\u2502 \u2502 \u2502   \u2514\u2500\u2500 abbrev@1.0.4 \n\u2502 \u2502 \u251c\u2500\u2500 knox@0.0.11 \n\u2502 \u2502 \u251c\u2500\u2500 less@1.2.2 \n\u2502 \u2502 \u2514\u2500\u2500 uglify-js@1.2.6 \n\u2502 \u251c\u2500\u252c glob@3.1.21 \n\u2502 \u2502 \u251c\u2500\u2500 graceful-fs@1.2.0 \n\u2502 \u2502 \u251c\u2500\u2500 inherits@1.0.0 \n\u2502 \u2502 \u2514\u2500\u252c minimatch@0.2.11 \n\u2502 \u2502   \u251c\u2500\u2500 lru-cache@2.2.2 \n\u2502 \u2502   \u2514\u2500\u2500 sigmund@1.0.0 \n\u2502 \u251c\u2500\u2500 mime@1.2.9 \n\u2502 \u251c\u2500\u2500 mkdirp@0.3.5 \n\u2502 \u251c\u2500\u2500 semver@1.0.14 \n\u2502 \u2514\u2500\u252c yui@3.7.3 \n\u2502   \u2514\u2500\u2500 request@2.9.202 \n\u251c\u2500\u252c mojito-shaker-mobstor@1.1.1 \n\u2502 \u251c\u2500\u2500 mime@1.2.9 \n\u2502 \u2514\u2500\u2500 mobstor@1.1.4 \n\u251c\u2500\u252c search-apps-base@0.1.33 \n\u2502 \u2514\u2500\u2500 async@0.1.22 \n\u251c\u2500\u2500 y_mojito@0.1.2 \n\u251c\u2500\u252c yahoo-mojits-search-bread-crumb@0.0.15-11 \n\u2502 \u251c\u2500\u2500 yahoo-utils-string-truncate@0.0.11 \n\u2502 \u2514\u2500\u252c yahoo-utils-url@0.1.20 \n\u2502   \u2514\u2500\u2500 yahoo-utils-globals@0.0.9 \n\u251c\u2500\u252c yahoo-mojits-search-core@0.4.0-120 -> /git-data/common/mojits/yahoo-mojits-search-core/src\n\u2502 \u251c\u2500\u2500 mockery@1.4.0 \n\u2502 \u251c\u2500\u252c mojito@0.5.5 \n\u2502 \u2502 \u251c\u2500\u2500 colors@0.6.0-1 \n\u2502 \u2502 \u251c\u2500\u252c express@2.5.10 \n\u2502 \u2502 \u2502 \u251c\u2500\u252c connect@1.9.2 \n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 formidable@1.0.12 \n\u2502 \u2502 \u2502 \u251c\u2500\u2500 mkdirp@0.3.0 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 qs@0.4.2 \n\u2502 \u2502 \u251c\u2500\u252c glob@3.1.21 \n\u2502 \u2502 \u2502 \u251c\u2500\u2500 graceful-fs@1.2.0 \n\u2502 \u2502 \u2502 \u251c\u2500\u2500 inherits@1.0.0 \n\u2502 \u2502 \u2502 \u2514\u2500\u252c minimatch@0.2.11 \n\u2502 \u2502 \u2502   \u251c\u2500\u2500 lru-cache@2.2.2 \n\u2502 \u2502 \u2502   \u2514\u2500\u2500 sigmund@1.0.0 \n\u2502 \u2502 \u251c\u2500\u252c js-yaml@1.0.2 \n\u2502 \u2502 \u2502 \u2514\u2500\u252c argparse@0.1.12 \n\u2502 \u2502 \u2502   \u251c\u2500\u2500 underscore@1.4.4 \n\u2502 \u2502 \u2502   \u2514\u2500\u2500 underscore.string@2.3.1 \n\u2502 \u2502 \u251c\u2500\u252c jslint@0.1.9 \n\u2502 \u2502 \u2502 \u2514\u2500\u252c nopt@1.0.10 \n\u2502 \u2502 \u2502   \u2514\u2500\u2500 abbrev@1.0.4 \n\u2502 \u2502 \u251c\u2500\u2500 mime@1.2.4 \n\u2502 \u2502 \u251c\u2500\u2500 mkdirp@0.3.5 \n\u2502 \u2502 \u251c\u2500\u2500 request@2.9.202 \n\u2502 \u2502 \u251c\u2500\u252c rimraf@2.1.4 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 graceful-fs@1.2.0 \n\u2502 \u2502 \u251c\u2500\u2500 semver@1.0.14 \n\u2502 \u2502 \u251c\u2500\u2500 wrench@1.3.9 \n\u2502 \u2502 \u251c\u2500\u2500 ycb@1.0.4 \n\u2502 \u2502 \u251c\u2500\u252c yui@3.8.1 \n\u2502 \u2502 \u2502 \u2514\u2500\u252c request@2.12.0 \n\u2502 \u2502 \u2502   \u251c\u2500\u252c form-data@0.0.3 \n\u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 async@0.1.9 \n\u2502 \u2502 \u2502   \u2502 \u2514\u2500\u252c combined-stream@0.0.3 \n\u2502 \u2502 \u2502   \u2502   \u2514\u2500\u2500 delayed-stream@0.0.5 \n\u2502 \u2502 \u2502   \u2514\u2500\u2500 mime@1.2.7 \n\u2502 \u2502 \u251c\u2500\u252c yuidocjs@0.3.38 \n\u2502 \u2502 \u2502 \u251c\u2500\u2500 graceful-fs@1.2.0 \n\u2502 \u2502 \u2502 \u251c\u2500\u252c minimatch@0.1.5 \n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 lru-cache@1.0.6 \n\u2502 \u2502 \u2502 \u251c\u2500\u2500 node-markdown@0.1.1 \n\u2502 \u2502 \u2502 \u251c\u2500\u252c rimraf@2.0.3 \n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 graceful-fs@1.1.14 \n\u2502 \u2502 \u2502 \u2514\u2500\u252c yui@3.9.0pr1 \n\u2502 \u2502 \u2502   \u2514\u2500\u252c request@2.12.0 \n\u2502 \u2502 \u2502     \u251c\u2500\u252c form-data@0.0.3 \n\u2502 \u2502 \u2502     \u2502 \u251c\u2500\u2500 async@0.1.9 \n\u2502 \u2502 \u2502     \u2502 \u2514\u2500\u252c combined-stream@0.0.3 \n\u2502 \u2502 \u2502     \u2502   \u2514\u2500\u2500 delayed-stream@0.0.5 \n\u2502 \u2502 \u2502     \u2514\u2500\u2500 mime@1.2.7 \n\u2502 \u2502 \u251c\u2500\u2500 yuitest@0.7.8 \n\u2502 \u2502 \u2514\u2500\u2500 yuitest-coverage@0.0.6 \n\u2502 \u251c\u2500\u2500 y_mojito@0.1.2 \n\u2502 \u251c\u2500\u2500 yahoo-utils-globals@0.0.9 \n\u2502 \u251c\u2500\u2500 yahoo-utils-query-highlight@0.0.14 \n\u2502 \u251c\u2500\u2500 yahoo-utils-relative-time@0.0.20 \n\u2502 \u251c\u2500\u2500 yahoo-utils-scheduler@0.3.5 \n\u2502 \u251c\u2500\u2500 yahoo-utils-search-environment@0.0.15 \n\u2502 \u251c\u2500\u252c yahoo-utils-search-preferences@0.2.5 \n\u2502 \u2502 \u2514\u2500\u2500 yahoo-utils-sonora@0.1.7 \n\u2502 \u251c\u2500\u2500 yahoo-utils-string-truncate@0.0.11 \n\u2502 \u2514\u2500\u2500 yahoo-utils-url@0.1.20 \n\u251c\u2500\u2500 yahoo-mojits-search-debug@0.0.7-10 \n\u251c\u2500\u252c yahoo-mojits-search-image-dd@0.0.15-22 \n\u2502 \u251c\u2500\u252c yahoo-utils-query-highlight@0.0.14 \n\u2502 \u2502 \u2514\u2500\u2500 yahoo-utils-globals@0.0.9 \n\u2502 \u251c\u2500\u2500 yahoo-utils-string-truncate@0.0.11 \n\u2502 \u2514\u2500\u252c yahoo-utils-url@0.1.20 \n\u2502   \u2514\u2500\u2500 yahoo-utils-globals@0.0.9 \n\u251c\u2500\u252c yahoo-mojits-search-media-search-result@0.0.17-12 \n\u2502 \u251c\u2500\u2500 yahoo-utils-relative-time@0.0.20 \n\u2502 \u251c\u2500\u2500 yahoo-utils-string-truncate@0.0.11 \n\u2502 \u2514\u2500\u252c yahoo-utils-url@0.1.20 \n\u2502   \u2514\u2500\u2500 yahoo-utils-globals@0.0.9 \n\u251c\u2500\u252c yahoo-mojits-search-related-concepts@0.0.12-14 \n\u2502 \u2514\u2500\u252c yahoo-utils-url@0.1.20 \n\u2502   \u2514\u2500\u2500 yahoo-utils-globals@0.0.9 \n\u251c\u2500\u252c yahoo-mojits-search-sort-by-options@0.0.13-15 \n\u2502 \u2514\u2500\u252c yahoo-utils-url@0.1.20 \n\u2502   \u2514\u2500\u2500 yahoo-utils-globals@0.0.9 \n\u251c\u2500\u252c yahoo-mojits-search-time-filter@0.0.13-2 \n\u2502 \u2514\u2500\u252c yahoo-utils-url@0.1.20 \n\u2502   \u2514\u2500\u2500 yahoo-utils-globals@0.0.9 \n\u251c\u2500\u252c yahoo-mojits-search-video-dd@0.0.18-15 \n\u2502 \u251c\u2500\u252c yahoo-utils-query-highlight@0.0.14 \n\u2502 \u2502 \u2514\u2500\u2500 yahoo-utils-globals@0.0.9 \n\u2502 \u251c\u2500\u2500 yahoo-utils-string-truncate@0.0.11 \n\u2502 \u2514\u2500\u252c yahoo-utils-url@0.1.20 \n\u2502   \u2514\u2500\u2500 yahoo-utils-globals@0.0.9 \n\u251c\u2500\u252c yahoo-mojits-search-video-duration-filter@0.0.12-12 \n\u2502 \u2514\u2500\u252c yahoo-utils-url@0.1.20 \n\u2502   \u2514\u2500\u2500 yahoo-utils-globals@0.0.9 \n\u251c\u2500\u252c yahoo-mojits-search-webresult-dd@0.0.15-8 \n\u2502 \u251c\u2500\u252c yahoo-utils-query-highlight@0.0.14 \n\u2502 \u2502 \u2514\u2500\u2500 yahoo-utils-globals@0.0.9 \n\u2502 \u2514\u2500\u252c yahoo-utils-url@0.1.20 \n\u2502   \u2514\u2500\u2500 yahoo-utils-globals@0.0.9 \n\u251c\u2500\u2500 yahoo-utils-csf@0.2.16 \n\u251c\u2500\u252c yahoo-utils-debug@0.0.16 \n\u2502 \u2514\u2500\u2500 yahoo-utils-globals@0.0.9 \n\u251c\u2500\u2500 yahoo-utils-jscheck@0.0.3 \n\u251c\u2500\u2500 yahoo-utils-lazyload@0.0.3 \n\u251c\u2500\u252c yahoo-utils-lpmproxy@0.2.0 \n\u2502 \u251c\u2500\u2500 colors@0.6.0-1 \n\u2502 \u251c\u2500\u252c handlebars@1.0.10 \n\u2502 \u2502 \u251c\u2500\u252c optimist@0.3.5 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 wordwrap@0.0.2 \n\u2502 \u2502 \u2514\u2500\u2500 uglify-js@1.2.6 \n\u2502 \u2514\u2500\u252c yui@3.7.3 \n\u2502   \u2514\u2500\u2500 request@2.9.202 \n\u251c\u2500\u2500 yahoo-utils-markup-test@0.0.16 \n\u251c\u2500\u252c yahoo-utils-search-environment@0.0.15 \n\u2502 \u2514\u2500\u2500 yahoo-utils-globals@0.0.9 \n\u251c\u2500\u2500 yahoo-utils-ult@0.0.22 \n\u2514\u2500\u2500 ycb@1.0.4\n. yahoo-mojits-search-core is a linked package that contains another mojito instance with a different version. Here is the error I get:\n[ERROR][Cosmo:Registry] Could not load application i1362524287 due to exception TypeError: Object # has no method 'makeStaticHandlerDetails'\n    at process (/git-data/apps/search-apps-news/node_modules/yahoo-mojits-search-core/node_modules/mojito/lib/app/addons/rs/yui.js:699:68)\n    at RSAddonYUI.YUI.add.Y.extend.resolveResourceVersions (/git-data/apps/search-apps-news/node_modules/yahoo-mojits-search-core/node_modules/mojito/lib/app/addons/rs/yui.js:708:17)\n    at ResourceStore.YUI.add.e.rbind (/git-data/apps/search-apps-news/node_modules/mojito/node_modules/yui/oop/oop-min.js:7:2149)\n    at YUI.add.i.Method.exec (/git-data/apps/search-apps-news/node_modules/mojito/node_modules/yui/event-custom-base/event-custom-base-min.js:7:1350)\n    at ResourceStore.YUI.add.i.inject.o.(anonymous function).r.(anonymous function) as resolveResourceVersions\n    at ResourceStore.YUI.add.Y.extend.preload (/git-data/apps/search-apps-news/node_modules/mojito/lib/app/autoload/store.server.js:407:18)\n    at Object.Store.createStore (/git-data/apps/search-apps-news/node_modules/mojito/lib/store.js:91:15)\n    at new MojitoServer (/git-data/apps/search-apps-news/node_modules/mojito/lib/mojito.js:69:29)\n    at Object.Mojito.createServer (/git-data/apps/search-apps-news/node_modules/mojito/lib/mojito.js:685:12)\n    at Object. (/git-data/apps/search-apps-news/server.js:125:29)\n. That mojit is linked during development. It does not have to be, but it is useful to be able to do so.\n. I'm not a big fan of this PR. I would have preferred the original proposal which was to be able to have configurations set for the same contexts (included settings: master) in multiple files as long as they are not the same keys. Using runtime: common seems like a hack to me...\n. Just reiterating what we need: on each mojitProxy.invoke calls, we want to be able to _programmatically (i.e. using dynamic values) set the entire URI used in the /tunnel call. Just as an example, in our specific case, a call could look like:\n/tunnel;_ylt=A0oGdV8GMC1RcBgAQNhXNyoA;_ylu=X3oDMTE5aWhtbjdhBHNlYwNvdi10b3AEY29sbwNzazEEdnRpZANTTUUwNDFfMTU0BHBvcwMx?tmpl=USN002\nThe next /tunnel call would look like:\n/tunnel;_ylt=A0oGdV8GMC1RcBgAathXNyoA;_ylu=X3oDMTE1ZmMwa2RqBHNlYwNzcgRwb3MDMQRjb2xvA3NrMQR2dGlkA1NNRTA0MV8xNTQ-?tmpl=USN002\nLet me know if any of this makes sense.\n. The exact reason of why we need that parameter is complicated to explain and not very relevant to this discussion. I can explain it to you offline. It has to do mostly with other parts of our infrastructure.\n. Yes, I just tested it and this change fits my needs. Thanks!\n. We have decided to package this hotswap plugin in a separate npm package. I will close this PR shortly.\n. The extension @caridy refers to is https://github.com/yahoo/mojito-config-expansion\n. merge over = take precedence. I don't see the difference...\n. Can we prioritize this request? We would like to have it by the end of November/early December. Thanks!\n. Absolutely! I think Albert was not sure whether you guys were still willing to review, especially since quite a few of you have signed off of the internal mojito-team ilist. Thanks for your help!\n. Why should the store NOT know about the YUI instance used by mojito at runtime? I don't like the idea of clobbering the global node namespace.\n. ",
    "ekashida": "Makes sense. I was a little more concerned about the fact that this part of the code hadn't been touched but I was getting this error. I'll make the appropriate changes on my end.\n. @aljimenez, feel free to ping me if you need more details around how to configure and handle custom tunnel URLs.\n. Still working on this (tests, docs, end-to-end testing, etc). Would like some feedback for what I have so far!\n. @caridy I think I've addressed all your feedback, although I'm still getting those weird unit test errors. I'll keep looking at them...\n. agreed\n. I don't think it was simplified much, but the comment definitely helps :)\n// Remove the extension name.\next  = libpath.extname(name);                                                  \nname = name && ext && name.slice(0, -ext.length);\n. I got rid of this logic completely by passing in (from demux) just the basename without the extension:\n// Get the basename without the .json extension.                               \nname = libpath.basename(path, '.json');\n. agreed\n. agreed\n. Damn you copy/paste!\n. I also like mojito.middleware(). Just a note: the plural of middleware is middleware :)\n. ",
    "kfay": "I couldn't find the Mu lib tests, but if there is a test suite I can update, please point me to them. Thanks!\n. I think there's still some validity in lines 185-188. If there's no binder for a mojit, we don't need the binderMap information.\n. ",
    "okuryu": "@isao Agreed. I would like to push that change with this request if you want to do something.\n. Yeah, I know. Already pushed the change into my branch.\n. @rwaldura Thanks pull in. Currently, I have no reports of project which using Mojito, but it may be appear that like it in the future. So, this is one of my contribution for Yahoo! Technology as a individual working. :octocat: You can just see my commits following. :+1:\nhttps://github.com/yui/yui3/commits?author=okuryu\nhttps://github.com/yui/yuidoc/commits?author=okuryu\nhttps://github.com/yui/yeti/commits?author=okuryu\nhttps://github.com/yui/yuitest/commits?author=okuryu\nhttps://github.com/yahoo/boomerang/commits?author=okuryu\nhttps://github.com/yql/yql-tables/commits?author=okuryu\nAnd,\nhttps://github.com/yahoo/mojito/commits?author=okuryu\n. ",
    "goonieiam": "I'd have to spend some time digging around, I don't have a clear solution I can provide. If anyone is able to point me in the right direction, I might be able to help. \n. ",
    "ramses0": "$ mojito version\npath.existsSync is now called fs.existsSync.\nVersion of mojito is 0.3.30\n...following: http://developer.yahoo.com/cocktails/mojito/docs/getting_started/mojito_getting_started_tutorial.html#make-the-application\n$ mojito test app .path.existsSync is now called fs.existsSync.\n[warn] undefined: overriding application config value: env\n[WARN] MojitoServer: your mojit \"HelloMojit\" has a server affinity and these client-related deps: node-base, node-core, dom-core, dom-base, node-event, node-pluginhost, node-screen, dom-screen, dom-style, dom-style, node-style\n[WARN] MojitoServer: Mojito may be unable to start, unless you have provided server-side DOM/host-object suppport\n...snip...\ntimers.js:103\n            if (!process.listeners('uncaughtException').length) throw e;\n                                                                      ^\nTypeError: Cannot read property 'documentElement' of null\n    at Object.YUI.add.requires [as fn] (/usr/local/lib/node_modules/mojito/node_modules/yui/dom-base/dom-base-min.js:7:50)\n...tutorial or mojito is broken.\n. Yep, this is \"base case\" stupidly following the tutorial.  I tried changing controller.server.js to controller.client.js to maybe adjust the \"affinity\" (?) but it gave different error messages which I am not familiar enough with mojito / node to figure out off the top of my head.\nQuickstart worked: http://developer.yahoo.com/cocktails/mojito/docs/quickstart/  but the \"HelloWorld\" has not.  Literally just mojito create app ; mojito create mojit ; mojito start as suggested by the tutorial.\nThis is with latest npm / node and the 0.3.30 mojito freshly downloaded.  npm install mojito -g ... and copy/paste all the config stuff from the tutorial examples.  Server starts after tweaking, but gives a different error message which I don't have on this computer. Shouldn't be hard to reproduce.\n. Pulling yahoo:develop and re-running stuff worked well.\nINFO mojito-dispatcher: Dispatching an instance of 'hello/index' with the modules: [HelloMojitModelFoo, mojito-perf, mojito, HelloMojit, mojito-config-addon, yui-base, json-stringify, oop, event-custom-base, mojito-view-renderer, array-extras, mojito-util, mojito-output-adapter-addon, querystring-parse, querystring-stringify, querystring-stringify-simple, mojito-route-maker, mojito-url-addon, mojito-assets-addon, mojito-http-addon, mojito-cookie-addon, mojito-params-addon, mojito-composite-addon, mojito-action-context, mojito-controller-context, mojito-resource-store-adapter, intl-base, event-custom-complex, intl, mojito-dispatcher, mojito-hb, mojito-mu]\nstatus\nMojito is working.\ndata\nsome: data\nThe old error message for posterity (after changing affinity from server to client):\nINFO mojito-dispatcher: Creating controller context\nWARN Server OutputHandler: Error 404: Mojit controller prototype is not an object! (mojit id: 'hello')\nError: Mojit controller prototype is not an object! (mojit id: 'hello')\n    at Object.YUI.add.ControllerContext.init (/usr/local/lib/node_modules/mojito/lib/app/autoload/controller-context.common.js:46:25)\n    at Object.ControllerContext (/usr/local/lib/node_modules/mojito/lib/app/autoload/controller-context.common.js:21:14)\n    at YUI.add.store.expandInstance.groups (/usr/local/lib/node_modules/mojito/lib/app/autoload/dispatch.common.js:247:30)\n    at proto.notify (/usr/local/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:836:17)\n    at proto.use (/usr/local/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:807:19)\n    at runMojit (/usr/local/lib/node_modules/mojito/lib/app/autoload/dispatch.common.js:287:45)\n    at modulesLoaded (/usr/local/lib/node_modules/mojito/lib/app/autoload/dispatch.common.js:338:21)\n    at YUI.add.Y.namespace.Dispatcher.init.store (/usr/local/lib/node_modules/mojito/lib/app/autoload/dispatch.common.js:366:25)\n    at Object.YUI.add.Loader.load (/usr/local/lib/node_modules/mojito/lib/app/autoload/loader.common.js:34:17)\n    at YUI.add.Y.namespace.Dispatcher.init.store (/usr/local/lib/node_modules/mojito/lib/app/autoload/dispatch.common.js:360:28)\n. Thanks for the note... I _did change the controller affinity when I was \"messing around trying to fix what I didn't know was broken\".  But this pull request fixed everything so I wasn't getting any error messages. I just wanted to share what was the error message I had gotten before as I didn't include the details in the previous issue.\n. ",
    "idearat": "I think closing is the right answer for 0.3.27 bugs. It turned out to be an unstable release for a lot of consumers. Focusing on 0.3.30+ and 0.4+ is the best answer.\n. +1\n. +1\n. In general I prefer \"builders\" so we avoid the assumption about whether there's a / needed or not. But +1 :).\n. ",
    "jfhbrook": "My suggestion would be to cherry-pick the right commit, and then amend the commit message (that typo was my bad, I feel like a total dork :( )\n. ",
    "devsathish": "Its just a change of two lines.\nReplace HTMLFrameMojit:controller.server.js:76 with the following.\n//Set the title (with fallback to default title)\nvar title = (meta.common && meta.common.title)?meta.common.title:'';\ndata.title = title || ac.config.get('title') || 'Powered by Mojito ' + Y.mojito.version;\nI don't have the diff file. Hence giving the change in this comment.\n. ",
    "haisuby": "is this patch available in the current version? I couldn't see any changes for this title issue. rwaldura@, could you please confirm the inclusion of this patch in the recent version? Thanks!\n. ",
    "chqlb": "Is this bug fixed @mridgway ? I encounter this problem with mojito 0.4.2.\n. thanks  @mridgway,\n. This issue is caused by jsdom not supported in mojito anymore.\nThe affinity of binder tests should be client. So, you need to rename the binder tests\nfile from index.common-tests.js to index.client-tests.js\n. ",
    "nottoseethesun": "I have Mojito 0.4.3 and still see this exact issue.\n. Thank you.  I had tried that and it works.  But I am not sure why.\nI see that we have a dependency on a model declared with 'client' affinity.  It uses 'Y.mojito.lib.REST.POST'.  But does that have a dom dependency?  It seems that 'REST' lib code should work on the server, since it's of 'common' affinity: './tests/unit/lib/app/autoload/test-rest.common.js'    \nSo I tried renaming the client-side model to have 'server' affinity, but get:\nAlertModalMojit-tests :: AlertModalMojit user tests :: test mojit\nValues should be the same.\nExpected: Mojito is working. (string)\nActual: undefined (undefined)\nEventually, we'll want to move our controllers to the server side, and will need to get tests for server-side mojits to work.\n. We actually found that running the 'app' test with the affinities all set to 'client' had the same result as deleting all the 'test' dirs in the mojit dirs: It's an empty result, which is different than success, which I had thought we had.\n. Agree on the doc being okay.  Thank you.  The error message issue should be fixed though.\n. Thanks Drew!\n. Earlier I had tried pr5, and then and now get this error pasted below.  These things fail so often that kept it at pr4 for now and did not have time to report it.  However if it is a potential blocker on this, then let's see what we can do to fix this - thanks! - > \nvpn-pool-10-72-116-11:app cbalz$ pwd\n/Users/cbalz/projects/y_salcap/desktop/salcap-desktop/app\nvpn-pool-10-72-116-11:app cbalz$ node_modules/mojito-shaker/bin/mojito-shake --debug 5 --run\n[SHAKER] - Initializing ShakerCore\n/Users/cbalz/projects/y_salcap/desktop/salcap-desktop/app/node_modules/mojito-shaker/addons/rs/shaker.server.js:45\n                this.meta = this.rs.config.readConfigSimple(libpath.join(this.\n                                           ^\nTypeError: Object undefined[config] has no method 'readConfigSimple'\n    at RSAddonShaker.YUI.add.Y.extend.initializer (/Users/cbalz/projects/y_salcap/desktop/salcap-desktop/app/node_modules/mojito-shaker/addons/rs/shaker.server.js:45:44)\n    at RSAddonShaker.YUI.add.v._initHierarchy (/Users/cbalz/projects/y_salcap/desktop/salcap-desktop/app/node_modules/mojito/node_modules/yui/base-core/base-core-min.js:7:2892)\n    at RSAddonShaker.YUI.add.v._baseInit (/Users/cbalz/projects/y_salcap/desktop/salcap-desktop/app/node_modules/mojito/node_modules/yui/base-core/base-core-min.js:7:930)\n    at RSAddonShaker.YUI.add.l._defInitFn (/Users/cbalz/projects/y_salcap/desktop/salcap-desktop/app/node_modules/mojito/node_modules/yui/base-base/base-base-min.js:7:1303)\n    at YUI.add.o.fireComplex (/Users/cbalz/projects/y_salcap/desktop/salcap-desktop/app/node_modules/mojito/node_modules/yui/event-custom-complex/event-custom-complex-min.js:7:1752)\n    at YUI.add.e.CustomEvent.fire (/Users/cbalz/projects/y_salcap/desktop/salcap-desktop/app/node_modules/mojito/node_modules/yui/event-custom-base/event-custom-base-min.js:7:4346)\n    at RSAddonShaker.YUI.add.E.fire (/Users/cbalz/projects/y_salcap/desktop/salcap-desktop/app/node_modules/mojito/node_modules/yui/event-custom-base/event-custom-base-min.js:7:11039)\n    at RSAddonShaker.YUI.add.l.init (/Users/cbalz/projects/y_salcap/desktop/salcap-desktop/app/node_modules/mojito/node_modules/yui/base-base/base-base-min.js:7:842)\n    at RSAddonShaker.YUI.add.v._initBase (/Users/cbalz/projects/y_salcap/desktop/salcap-desktop/app/node_modules/mojito/node_modules/yui/base-core/base-core-min.js:7:791)\n    at RSAddonShaker.YUI.add.l._initBase (/Users/cbalz/projects/y_salcap/desktop/salcap-desktop/app/node_modules/mojito/node_modules/yui/base-base/base-base-min.js:7:550)\nvpn-pool-10-72-116-11:app cbalz$ npm ls\nsalcap@0.0.1 /Users/cbalz/projects/y_salcap/desktop/salcap-desktop/app\nvpn-pool-10-72-116-11:app cbalz$ npm ls | grep mojito\n\u251c\u2500\u252c mojito@0.5.0pr5\n\u251c\u2500\u252c mojito-shaker@2.0.37pr5\n\u251c\u2500\u2500 y_mojito@0.1.2\nvpn-pool-10-72-116-11:app cbalz$ \n. Works fine, thanks!\n. ",
    "trungpham": "Model should not have access to the request data.\nHowever, the controller can instantiate an instance of the model, and pass it the request context. But this should be something that the developer chooses to do, not the framework.\n. I like mocha and jasmine syntax better. Less verbose. And mocha has better\nsupport for async testing.\nOn Jul 10, 2012 12:14 PM, \"Renaud Waldura\" \nreply@reply.github.com\nwrote:\n\nIs it probably possible, but we've never looked into it.\nWhat is your motivation for wanting to do so?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/issues/256#issuecomment-6885690\n. yay\n. Yay. I never understood the idea of the current Mojito Model.\n\nIt cannot be instantiated. It does not hold any data. It looks like a group of static functions?\nWhy was it called a model to begin with? :)\n. Exactly. They are just service model. They hold no data.\nThe trick here to somehow migrate the data from the node to the browser\nafter node populated the data.\nOn Jul 14, 2012 2:40 PM, \"Alexey Shafranovich\" \nreply@reply.github.com\nwrote:\n\nAs I see, models as they exist, can be useful as for example as gateways\nfor external api (xml or any other - not just rest) etc. So they are\nuseful, but are they \"data models\", probably \"service models\"?\nJust my thought...\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/issues/259#issuecomment-6986884\n. Is the whole YAF a dead effort?\n. is this getting merged into master anytime soon?\n. \n",
    "carystanley": "There are not any downsides, it just defers the work of building the RouteMaker only in contexts where it is actually used.\nFor applications like ours with multiple routes and multiple Mojits, but where the url addon is only used a few times there is significant savings.\n. Renaud, this would help \"Star\", presently the RouteMaker is instantiated once at the Route Middleware and once and Deploy if you are deploy client-side and then once for every Mojit called (every ActionContext). This would remove the the instantiation for each ActionContext and only instantiate on the first call made to ac.url per ActionContext.\n. I have removed the use of underscores in the patch, hopefully that should resolve things. The following still appears:\n1- 'window' was used before it was defined.\n    if (typeof window !== 'undefined') { // Line 84, Pos 24\nBut this was an issue before my changes\n. I agree, if Shaker is to replace this functionality then it should be taken out of Mojito.\n(It only worked for the \"default\" context anyways)\n. ",
    "focuzz": "I'm sorry... What is Y.Binder?\n. As I see, models as they exist, can be usefulfor example as gateways for external api (xml or any other - not just rest) etc. So they are useful, but are they \"data models\", probably \"service models\"?\nJust my thought...\n. Hope this helps https://github.com/yahoo/mojito/pull/269\nThis just enables Y.Model to be passed into ac.models[NAME] this way:\nY.mojito.models[NAME] = Y.Base.create('pieModel', Y.Model, [], { }, { });\n. Well, I can say that transparent routing support on server and client can be right thing. It can be implemented manually using Y.Router (with manual client-side route-to-action mapping) but it can be perfect to share routes.json config on client and server, but it requires to spend some time to be done.\nAbout dynamic mojit loading - I've created \"placeholder\" - generic mojit based on code of LazyLoad, that reacts on messages(events) addressed to him, and reloads it's content (recreates inner mojit). Can share some thought about it.\nAnd I think, good idea is to give ability (I don't tried yet) for binders, to access models. It can be useful for form validation for example.\nI think there is no need of Y.View on client - controller already does everything.\nJust my thought and my vision.\n. @Satyam @drewfish It seem like everybody can hack a little bit to get whatever he wants. I think it's not a problem to make some different samples with current (plain) model, with Y.Model and with custom model.\nFor me for example problem with keys is not a problem because \n1. i'm using guid as pk in most cases (not a composite key)\n2. most valuable for me - i do not expose db objects directly to frontent - it's more secure and it's more productive because frontend gets data in way it processes it\nbut I understand that your usecases (to @Satyam) exist, and I think they should be documented for example in model or extend mojito section.\nWhat do you think?\n. yes, but I've just found one more place to patch this way (and it seems like there is bug there since this patch and new rs)\nlib/app/addons/rs/yuiserver.js at line 482 -> loader.base = this.yuiConfig.base;\n. PS you can see result of wrong url generation (with yahoo cdn) in mojito log. Something like\n[MOJITO] (1345200114416) qeperf: mojit instance expansion complete: yui_3_5_1_2_4_1345200105025_10123\n[MOJITO] (1345200114416) qeperf: loading YUI modules for YUI instantiation: yui_3_5_1_2_4_1345200105025_10123\n[MOJITO] (1345200114416) mojito-loader: loading http://yui.yahooapis.com/3.5.1-2/build/datatype-date-format/lang/datatype-date-format_en.js, ...\nwhen using internationalization\n. yes, mojito with empty yui section works\n. Yes, sample app https://github.com/focuzz/mj-defer-demo (just app, with just mojit with defer true). Works in FF, Crome etc. Fails in IE6/7. Fails at mojito/autoload/output-handler.client.js on line 101 (Unable to get property 'indexOf' of undefined or null reference) - headers contains 'content-type'.\n. Didn't help... Will try to dig more deep in evening.\n. Yes, I will try to find root of problem, today some hours later. It seems (as I remember) like yui loader can't find modules that are required to start mojito... I'll dig it a bit and will write or more deep description, or solution (if i'll find any)\n. I've made some fixes, so mojito starts and renders mojits (there is problem with binders). So situation is better and it don't passes only 2 tests. You can see changes here https://github.com/focuzz/mojito/tree/win-compat\nI'm not doing pull request, because multi os support slightly broke cody prettiness, because\n- path.sep appeared only in node 0.8 and I'm using handmade function to get separator\n- there is a lot of places where path.combine have used to generates url, what brakes on windows\n- robably I've found not all places where fixes needed\n  So can anybody review it and tell me whether I'm doing it in right way, or I should correct something?\n  Thank you.\n. Well, I'm using them all (win + lin + mac) for different tasks, so it's not a critical problem for me right now. I understand about priority, so, I'll try to fix remaining issues in future(probably week or two). And after I can try to maintain this windows compatible branch, and merge your releases - and probably community will grow by time. If it will be interesting to anyone - probably it can be unofficial windows compatible branch or something like this in future (hope).\n. npm install mojito@0.4.2\nnode_modules\\.bin\\mojito.cmd test\nbut it seems like this don't work because of path differences on *nix and windows\n. it seems like here we can find ci services for node https://github.com/joyent/node/wiki/Build-Servers\nbamboo is free for open source projects http://www.atlassian.com/software/bamboo/pricing - and it was written that windows is supported too\n. Yes, it seems like it can/should be documented, but as I see situation, why not to do this out of the box, when this feature is so simple?\n. @caridy probably, but I haven't worked with yuitest yet, so it'll take some time...\n. @caridy Do You use gtalk?\n. I have client/server versions based on yui and this @caridy server version. I can make a pull request if you need.\n. @mridgway yes, i've uploaded it on github here https://github.com/focuzz/mojito/tree/hb\n. @mridgway i didn't found how compile works (server-side version), so it's just mimicry of mu version\n. sounds very good but how much time will it take? you want to rewrite hb compilation mechanics, right?\n. @caridy you want compile templates directly into js code, and use this code on client and server directly, to make markup, right?\n. ",
    "ericf": "First I'd like to respond to the statement that proof that Y.Model is a bad design can be determined by the fact that it's overriding Y.Attribute methods, without understand why it's overriding those methods.\n\nAs a proof of the bad design of Y.Model allow me to point to the following methods of Y.Model itself, which are originally defined in Attribute (or one of its constituents) and had to be redefined in Model as a patch to compensate for its bad use of those attributes:\n- get\n- set\n- setAttrs\n- _defAttrChangeFn\n- addAttrs\n\nThe reasons Model overrides these Attribute methods are to provide features that did not exist in Attribute, but which are planned to be added to it.\n- A coalesced change event which fires anytime one more attribute values change has proven to be an extremely useful feature of Model. In fact most places where Attribute is used, like in Widget, this feature is also very desirable. Because it has proven so useful, this feature is moving into Attribute. This feature was not added to Attribute to begin with because of resourcing issues, and the worry of regressions in Attribute since it's depended on so heavily within YUI.\n- Attribute aliases are the other reason Model overrides Attribute methods. We wanted to provide a consistent, always present, id attribute on all models, independent of whether the model used one of its other attributes to actually represent the model's id; e.g. a Model which uses uuid. This required id to also work an a alias for another attribute. The benefits are the consistent API and slight level or indirection for things consuming models (like views). @sdesai has provided an alternate implementation of attribute aliases which works solely on getters and setters.\nPlease understand that we were not happy to have to override Attribute to gain these features. But we felt there were important enough and, all things considered, felt this was the best implementation of these feature at that time. Luckily, we have a path moving forward which would alleviate the need for Y.Model to override Y.Attribute, and this is something we are working on.\n. @drewfish @caridy If both end up existing in Mojito, at least in documentation, should what's currently called \"Model\" in Mojito be referred to as a \"data service\"?\nIt seems that some of the confusion around Mojito models is that they more closely match people conceptions of a static data service. Whereas when people's conception of a model is something instance-based which encapsulates data with the methods to interactive with and transmit that data.\n. I feel strongly that we should avoid compiling templates on the client, simply because the Handlebars compiler is so large:\n- handlebars-base: 3KB\n- handlebars: 32KB\nIt still seems worth being able to load the templates on demand, but instead of shipping the raw templates over the wire, we could instead ship dynamically generated YUI modules which contain the pre-compiled Handlebars templates. This way templates can become module dependencies, be loaded via YUI's Loader, and combo-loaded when more than one template is being requested.\nThis is the approach I've been using when sharing templates between the server and client.\n. We have began discussing how we can surface which modules are not suitable for the server on the YUI Library website.\n. I wanted to point out that I just created this page on the YUI website which allows people to easily see the set of modules which are natively supported in Node.js and those which require a DOM:\nhttp://yuilibrary.com/yui/environments/\nThe current script we use to generate this is here:\nhttps://gist.github.com/53ff69e7cc6de31c9543\n. @drewfish Will there ever be any invoking of the constructor-based models by Mojito, or is that left to the developer?\n. +1 for leveraging the Y object like in @caridy's comment.\n. I'm curious what you envision this interface looking like, and how it would be fundamentally different than placing constructor functions on some namespace.\n. I currently have YUI Pull Request #168 open which allows Y.BaseCore to be used with Y.Base.create(). I've asked Satyen to review it so we can merge it into YUI's 3.x branch.\n. LGTM.\n@caridy What's the reason that nested partials do not work?\n. @caridy Based on what you have implemented here, nested partials should work just fine. Here's a very simple example:\nhttp://jsbin.com/omital/2/edit\n. @imalberto this is looking good!\nLooking at route-maker.common.js I was hoping that more of the APIs from express-annotations and express-map could be used, then I noticed the .common.js. How much of Router Maker is used client-side?\nI think it would be good to talk about the annotation strategy, i.e. using simple annotation values instead of objects, like dispatch, instead there could be separate annotations for call, params, options. Also, I was thinking that express-map's pathTo() factory could be used to by the app to create a URL generator function that could be passed to Route Maker.\n. When you require('yui/[something]') in moduleA.js and in moduleB.js, it uses the same YUI instance under the hood, and therefore you get back the same Y.Handlebars object.\nThese two ways use a shared YUI instance:\n``` javascript\nvar Y1 = require('yui/handlebars'),\n    Y2 = require('yui').use('handlebars');\nY1 === Y2 // => true\n```\nIf you want to create a separate YUI instance, you can do the following:\n``` javascript\nvar YUI = require('yui').YUI,\n    Y   = YUI({useSync: true}).use('handlebars');\n// Notice the useSync, that's important. The way of using a shared instance \n// already does that.\n```\nThere's some more details on our YUI on Node.js user guide.\n. The more really smells like API creep on this adapter. Are you guys locked into this render() interface?\n. @drewfish The things to consider are how where templates, partials, and helpers will be cached, and what type of sandboxing you'll want with these things.\nIf you use a standard YUI module dependency require: ['handlebars'], then the Y.Handlebars object and any templates, partials, or helpers that have been registered to it, will only be available in that sandbox (I think, this should be tested because Handlebars is an odd duck since it's an embedded project in YUI.) This is what I'd suggest doing as a starting point. If you need more flexibility and control you might like to use Node.js-style: require('yui/handlebars').\n. I think right after the route is created, we could add the dispatch annotation. dispatcher.dispatch() returns a route handler function with a dispatch property, we could capture this return value and add the annotation here. I think this will be much clearer than adding the annotation it inside the dispatcher.js.\n``` javascript\nvar handler = dispatcher.dispatch(route.call);\nappverb;\napp.annotate(route.path, { dispatch: handler.dispatch });\n```\nMaybe there's some timing thing I'm missing, but this means you could remove the iteration over all the routes, the init state flag, etc from dispatcher.js.\n. I think all of this can be removed but using the the approach here in router.js.\n. I'd hope no one would run into this issue. But if we're worried about it, we could always override app._router.route() to blow alway the cache, this way when the next request comes in, the app's route map will be re-generated and cached.\n. ",
    "Merlin8000": "I'd like to chime in and add to the few that would like to see windows compatibility.  While I'm not actively developing in mojito now, the lack of windows compatibility was absolutely the first thing that really took the wind out of my sails when I was first getting started with it.\nI've been keeping a watchful eye on this project because I see a lot of promise, and this is definitely one of the things that I would like to see.\n. @rwaldura As I understand it, it's common for unit testing frameworks like that to have difficulties with Windows.  I honestly don't see a comparable solution, I think that the next-best QA tool may be the bug tracker (as stated here, that's a pretty far cry from a build/testing framework).\nSo really I can only say that I hope that things improve.  I understand the current state of things and will continue to keep a watchful eye on this project.\nIf the number of requests for support is a factor in setting priorities then I appreciate that you've included my vote.\n. I'd at least be willing to run tests if the instructions are well written.\n. ",
    "rsaiprasad": "I strongly believe that windows compatibility is a must esp for a app framework like this. Most of the developers esp the less experienced one out there are on Windows. And for the framework to be adopted more, its a must that these guys can use it easily with out pain. Infact this is should be one of the high priority bugs to be resolved. \n. Thanks @focuzz your fixes work like charm. I am able to run mojito on windows now. Would let you know incase I find any bugs / issues.\n. ",
    "markandey": "It's your call..\nSince HTMLFrameMojit is part of framework and documented, people will use it and then they might find it hard to add a meta tags. \nI saw the HTMLFrameMojit's template(view)  was having a way to add, but somehow it was not implemented in Controller. SO I thought this could be one of the TBD task. \n. ",
    "alganet": "@rwaldura Our team is developing an application that also behaves like an API when needed. There is a mojitProxy-less mojit that responds to raw RESTful requests that must follow a strict contract.\nOne of our major requirements is to have a really small payload and fast network performance, and reusing the status message seems like a good approach, even compatible with AJAX clients via xhr.statusText.\nOur current implementation uses the default \"Warning\" HTTP header for this, but it isn't as canonical as customizing the status message, since the \"Warning\" header has been used for expressing errors in the entity body, not related to the request itself. \nTunneling the errors through the entity body itself and sending a generic HTTP status is one of our possible choices, but this generates overhead in both clients and proxies trying to calculate the Content-Length of the response.\n. Thank you very much Fabian! That will help my team a lot =D\n. ",
    "sqawasmi": "seems this related to an issue i have, ac.http.redirect is not working in HTMLFrameMojit child, this was working fine in 0.5.2 but got broken by 0.5.3\n. the following is a sample repo:\nhttps://github.com/sqawasmi/htmlframe_mojit_mojito_issue_293.git\nin mojito 0.5.2, requesting the following link:\nhttp://127.0.0.1:8666/\nwill redirect you to http://127.0.0.1:8666/index\nhowever, running the same application using mojito 0.5.3 will give HTTP/1.1 200 OK with \"null\" in the body. \n. ",
    "ooskapenaar": "SEO and website marketing requires not only a message as in this PR, but fully template styled HTML 404 and 500 pages.\nShould this functionality be implemented in the middleware (express) or in the mojito layer, e.g. output-handler.server.js?\n. I am patching the error function in ac-context.common.js and output-handler.server.js to add an html parameter in a backward compatible manner:\njavascript\n-     error: function(err) {\n+     error: function(err,html) {\njavascript\n-         var out = '<html><body><h1>Error: ' + err.code + '</h1>' +\n+        var out = html || '<html>' +\n+                '<body><h1>Error: ' + err.code + '</h1>' +\n. What is the correct way to feed several messages back to the client when the server is doing some heavy crunching and wants to periodically give feedback to the client in YUI?\nWith Websockets, you don't need to poll the server, nor does the server need to keep track of sessions etc. I currently have a scenario like this and need an answer.\n. Hi @rwaldura, well it's this is an admin front-end to a MongoDB based node app, which controls processes such as CSV imports. Now regardless of whether these are forked out, or performed via bash script, {or: whatever}, we want to be able to report on these processes in real time. As it is, I am starting these processes using Y.mojito.REST, but this doesn't offer websocket type functionality.  And yes, I can implement polling, sure, because we only ever allow one CSV import at a time. However, I can imagine parallel scenarios, where parallel sessions would be polling and WebSockets would be an elegant solution to the session management hassle one would otherwise have.\nTo me node.js is not restricted by short or long process life times. As long as you can work asynchronously, node.js is a good fit.  Isn't that right?  The CSV import is fully asynchronous.\nThanks\n. -1\nThe change you are proposing is not backwards compatible.\nIt seems that the following behaviour needs to be documented better:\nif you use   'middleware/passport-init'   instead of   'middleware-passport-init',   you can specify any subfolder transparently and mojito will handle it correctly.  \nAlso, if you name one of your middleware files  beginning with mojito, e.g.  'middleware/mojito-my-Y-enabled-script'  you will disable the default mojito middleware and your script will be passed a config object.\n2c Ron\n. Hi, \nthanks for the hint. I still had the old server.js. With the new server.js I get roughly the same error \n...\nMOJITO qeperf: YUI use: yui_3_5_1_2_4_1351760856053_73\n            throw (e || new Error(msg));\n                        ^\nTypeError: Cannot read property 'controllers' of undefined\n    at Object.YUI.add.requires as fn\n    at proto._attach (/usr/local/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:701:33)\n...\nAs stated originally, line 41 is\nY.mojito.controllers[NAME] = {\n(BTW. There was no index.js in   mojito/lib/app/archetypes/app/default  although suggested in the 0_4_7 release notes.)\n. thanks for the answer.  yes definitely possible.  I am going through the code now and adding these explicit dependencies.    Are there comments in the moijto code somewhere that explain more about this change?\n. I just grepped out the possibilities - these all have to potentially be explicitly included, right? e.g. I often use the composite addon\n'mojito-analytics-addon'\n'mojito-assets-addon'\n'mojito-carrier-addon'\n'mojito-composite-addon'\n'mojito-config-addon'\n'mojito-cookie-addon'\n'mojito-cookie-addon'\n'mojito-deploy-addon'\n'mojito-device-addon'\n'mojito-http-addon'\n'mojito-intl-addon'\n'mojito-meta-addon'\n'mojito-output-adapter-addon'\n'mojito-params-addon'\n'mojito-partial-addon'\n'mojito-url-addon'\n'mojito-hb'\n'mojito-hb'\n'mojito-mu'\n'mojito-mu'\n'mojito-action-context'\n'mojito-controller-context'\n'mojito-dispatcher'\n'mojito-loader'\n'mojito-logger'\n'mojito-mojit-proxy'\n'mojito-client'\n'mojito-test'\n'mojito-output-handler'\n'mojito-perf'\n'mojito-perf'\n'mojito-resource-store-adapter'\n'mojito-rest-lib'\n'mojito-route-maker'\n'mojito-client-store'\n'mojito-tunnel-client'\n'mojito-util'\n'mojito-view-renderer'\n'mojito-resource-store'\n. Last comment:  FIXED! \n. 2c: this issue arose because I assumed that the patch version 0.0.x change means I don't have to read the release notes because the upgrade won't break my app.  perhaps review your version numbering protocol.   \nalso it seems that the change that I ultimately had to address is described in the release notes for 0.5.0... a feature \"leak\"?\notherwise the changes reqd to make things run were actually minimal. thanks for your help.\n. @Caridy,  it would be great to have an example of such a RS addon.  Currently we just patched the url.js to include the common site map.xml  file (in the list of static routes).  It would be great to do this correctly with our own addon.\nUsing 0.5.0.\n. +1\n. +1\nJbtw: That workaround does not seem to work in arbitrary child controllers 0.5.x, 0.7.1 (i.e. all our controllers are under HTMLFrameMojit, and there this call does not help, working with clones, or something?).\n. ",
    "jintao": "Yes, Just want to support live changes while developing mojito (the same as meteor), Actually I have not understand  resource management in mojito , So I do not know how to auto add client side support scripts during launch mojito, So I put client side support scripts in to HTMLFrameMojit defult view... \nI will continue to understand how to more auto add client side scripts, But if you can help, that will be good. \n. ",
    "vinitj": "@isao same code and command works for Mojito 0.3.30 \n. ",
    "jenny": "This is out of scope and unsupported (even if it previously worked). Please clarify if I'm misunderstanding the lack of value of such a feature. \n/cc @rwaldura \n. This is a good change that we'd like to merge in. However, 0.5 introduces a number of significant changes that need to be merged into this PR first.\n. We are proposing to move to JS Hint. Will close this for now, but let's revisit after that lands.\n. I've added this to the sprint for investigation.\n. FYI tracked here: http://yuilibrary.com/projects/yui3/ticket/2532759\n. We should not merge this pull request. We should provide a workaround to the Y.JSON bug and remove it when we upgrade to a YUI version that contains the fix.\n. Thanks for the clarification. \n. Tracked here: https://trello.com/card/search-gh879-shaker-groups-app-combosep-should-support-just-like-yui-config-combosep/504e5e3b7cd1578456fc430f/307\n. https://trello.com/card/gh979-search-tunnel-params-mid-march/504e5e3b7cd1578456fc430f/415\n. Will be avail in 0.6.1 this week!\n. ",
    "bigfatsea": "I'm getting this error again. (osx 10.8, nodejs 0.8.16, npm 1.1.69)\n/usr/local/lib/node_modules/mojito/lib/app/autoload/store.server.js:1480\n            posls = this.selector.getAllPOSLs();\n                                  ^\nTypeError: Cannot call method 'getAllPOSLs' of undefined\n    at ResourceStore.YUI.add.Y.extend.resolveResourceVersions (/usr/local/lib/node_modules/mojito/lib/app/autoload/store.server.js:1480:35)\n    at ResourceStore.YUI.add.Y.extend.preload (/usr/local/lib/node_modules/mojito/lib/app/autoload/store.server.js:407:18)\n    at Object.Store.createStore (/usr/local/lib/node_modules/mojito/lib/store.js:91:15)\n    at new MojitoServer (/usr/local/lib/node_modules/mojito/lib/mojito.js:69:29)\n    at Object.Mojito.createServer (/usr/local/lib/node_modules/mojito/lib/mojito.js:685:12)\n    at Object.exports.run (/usr/local/lib/node_modules/mojito/lib/app/commands/start.js:88:18)\n    at Function.CLI.run (/usr/local/lib/node_modules/mojito/lib/management/cli.js:176:17)\n    at Object. (/usr/local/lib/node_modules/mojito/bin/mojito:12:5)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n. ",
    "diervo": "Agree, doesnt make too much sense as far as I understand...It was a conception mistake for our part. Deprecate it.\n. Let me know if you have any doubt in Shaker! I will love to help.\nBy the way we are re-writting it for the new Mojito, so keep tunned! :)\nAnything let me know! Thanks guys!\n2012/8/17 Jay Shirley notifications@github.com\n\nThanks very much guys, this is great to hear. I'm really excited about\nseeing what's coming down the pipe.\nThanks for the additional insight into shaker, @caridyhttps://github.com/caridy-- that was basically how my understanding was. I built a sort of stop gap\nbefore seeing shaker for my YAF application. It works to at least reduce\nthe requests down.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/yahoo/mojito/issues/403#issuecomment-7831829.\n\n\nDiego Ferreiro Val\n@diervo\n. @rwaldura Right now Shaker doesn't support inlining throw fies, but I have open a issue on Shaker for that. AFAIK the compiler version is kind of dummy, so I would like to implement something more robust. Anyway this compiler option it's interesting in the meanwhike. I let you know.\n. @rwaldura @jenny This feature will be available as part of the new set of features in Shaker3.0, which will be out in January. This means that Shaker will take of that. Other thing is if you want to keep the cssinline thing on Mojito.\nClose accordingly.\n. @rwaldura Could you assing proprely priority? Shaker2.0 should not ship until you guys can fix me this issue.\nI would like to fix it but I think it may brake other things since is a change on the store... So drew to the rescue! ;)\n. @drewfish nop, but is the same thing in other place, the command has the wrong action again, and the action you need is within command.instance. I dont know exactly why. Maybe the fix should be more deeper in the code... this fix it so far...\n. the action is there on \"command\" object,\nbut for some reason command.action = 'index' always\nand then the real one is in command.instance.action\ndont know why...\n. and again we will remove this since we have another way to do it.\n. Thanks for track the new shaker need/feature! :)\n. Seth is right, but if youre installing Shaker 2.x the api changed. Still on process of documenting... Let me know...\n. Sounds good to me so far! xDD\n. First of all this PR is out to date since was before the @drewfish refactor of the store couple of weeks ago.\nAdd css urls on the fly using combo load is not a path I want to take for css. \nSo I dont envision a better place than expand instance to be able to populate assets (because this will work no matter client or server).\nAt the end of the day, Shaker needs the context, the Type of the mojit and the action. As far as I have another place to take it and it will work on the client or the server, its fine for me.\n. Again, the context is not enough. I need to have the action of the mojit being executed. This is a requirement for many teams, so Shaker cannot work properly without knowing which action-rollup to serve.\nTake a look at the metadata ans she how rollups are distributed.\n. I guess we dont need this anymore since we are attaching the css into the views\n. ok too much space xD\n. https://github.com/yahoo/mojito/pull/593\n. But still, whatever calculation we do, the langs are not dependencies of the binder but the controller right? We should only need to ship those when the controller gets deployed.\n. Ok, anyway with the Caridy changes that may be refactored somewhere else. So just to raise the error!\n. This is a Ric and I fix for avoid the overhead of copying the params. It seems that is working fine..\nIt was never there in the first place... \n. This is input to the composite addon, and in the docs seems that we dont need the config at all. It only mention params: \ncfg = {\n    children: {\n        slot-1: {\n            type: \"default\",\n            action: \"index\"\n        },\n        slot-2: {\n            type: \"default\",\n            action: \"index\",\n            params: {\n                route: {},\n                url: {},\n                body: {},\n                file: {}\n            }\n        }\n    },\n    assets: {}\n}\n. I just added the config to the PR :)\n. +1\n. I think manhattan don't use mojito  at all, and screwdriver uses the compilers in order to execute for example Shaker.\n. +1 to \"this sounds like a big hack\" xDD\n. ",
    "travisbot": "This pull request passes (merged 3ba2beba into bb31661c).\n. This pull request passes (merged b5781342 into c2a0ad9d).\n. This pull request passes (merged 9e7590a4 into 32db8b5e).\n. This pull request passes (merged 870fa711 into 5b15bb95).\n. This pull request fails (merged a7b71da5 into 0492d298).\n. This pull request passes (merged fd2cc8e5 into fec9e0cb).\n. This pull request passes (merged 1a8ca4b4 into b69222d0).\n. This pull request passes (merged a48045d7 into 2ac5f84d).\n. This pull request passes (merged 593b4fe3 into 2ac5f84d).\n. This pull request passes (merged 157b16e9 into 2ac5f84d).\n. This pull request passes (merged aafbe863 into 2999eb2f).\n. This pull request passes (merged e68dc444 into c43de630).\n. This pull request passes (merged 0c0af1b8 into c43de630).\n. This pull request fails (merged 2c91e61c into bb31661c).\n. This pull request passes (merged 9dc35d48 into bb31661c).\n. This pull request fails (merged f5f48eff into b3e96635).\n. This pull request passes (merged 461d4c7a into b3e96635).\n. This pull request passes (merged 405d4d5c into 2b1915b4).\n. This pull request passes (merged 95988340 into 77888629).\n. This pull request passes (merged cbf9379e into 77888629).\n. This pull request passes (merged 442ae482 into 05dbfa64).\n. This pull request passes (merged 91354ea9 into fa3f2ce6).\n. This pull request passes (merged 0e1df520 into eb064eaf).\n. This pull request fails (merged a3692700 into 94c4e795).\n. This pull request passes (merged a6f7fdf7 into 94c4e795).\n. This pull request passes (merged ebdb9813 into 0492d298).\n. This pull request passes (merged 81c0e69a into 0492d298).\n. This pull request passes (merged 2b55479a into 0492d298).\n. This pull request passes (merged 6f06c577 into 0492d298).\n. This pull request fails (merged 358ffd15 into b39ba678).\n. This pull request passes (merged c1d5338d into d3df9426).\n. This pull request passes (merged 79f38d86 into 75580656).\n. This pull request fails (merged 5d667412 into 0492d298).\n. This pull request passes (merged 8d95e549 into 0492d298).\n. This pull request passes (merged 4bdcb6ad into 0492d298).\n. This pull request passes (merged 66d5a77f into 0492d298).\n. This pull request passes (merged 9b77578d into 0492d298).\n. This pull request passes (merged 873d5d89 into b39ba678).\n. This pull request passes (merged 1666833c into b39ba678).\n. This pull request passes (merged 88da6137 into 75580656).\n. This pull request fails (merged 1f492c0a into cb608e8a).\n. This pull request passes (merged 8b8a5760 into 0492d298).\n. This pull request fails (merged 3844cf78 into 0492d298).\n. This pull request fails (merged 20c9f6a7 into 8edd91e8).\n. This pull request passes (merged 797fc8f3 into 8edd91e8).\n. This pull request passes (merged 138de5fe into d9efac25).\n. This pull request passes (merged 37005fd4 into d9efac25).\n. This pull request passes (merged c9a78e21 into d9efac25).\n. This pull request fails (merged 8159dfe4 into fd42de18).\n. This pull request passes (merged cfea17ee into db213182).\n. This pull request passes (merged fb8070eb into f66c7582).\n. This pull request passes (merged d4773c9b into 0485e662).\n. This pull request passes (merged ca191c08 into 0485e662).\n. This pull request fails (merged 787374eb into f2c29cf3).\n. This pull request passes (merged da624ce6 into 0ec33de3).\n. This pull request fails (merged 681b90c8 into f5818a5f).\n. This pull request fails (merged 5a2e0a82 into 0808a9d2).\n. This pull request passes (merged 4a6416cb into 0808a9d2).\n. This pull request fails (merged 32db8b5e into cdde2edb).\n. This pull request fails (merged cc8fc222 into f5818a5f).\n. This pull request fails (merged 4161ba07 into f5818a5f).\n. This pull request fails (merged 1bf02d45 into f5818a5f).\n. This pull request fails (merged 02313581 into f5818a5f).\n. This pull request fails (merged 904f9bea into f5818a5f).\n. This pull request fails (merged 66e0f07f into f5818a5f).\n. This pull request fails (merged 66e0f07f into f5818a5f).\n. This pull request fails (merged b37483c7 into f5818a5f).\n. This pull request fails (merged b37483c7 into f5818a5f).\n. This pull request passes (merged c9cfcf16 into 8ec51316).\n. This pull request fails (merged 12092224 into 8ec51316).\n. This pull request passes (merged 12092224 into 8ec51316).\n. This pull request passes (merged 313cf448 into 8ec51316).\n. This pull request passes (merged f5f6d7db into 30fe061c).\n. This pull request passes (merged d0277527 into 30fe061c).\n. This pull request passes (merged e6d32404 into 30fe061c).\n. This pull request passes (merged 081c02a1 into 30fe061c).\n. This pull request fails (merged 2b721d01 into 6cfcffbe).\n. This pull request passes (merged 93cc8b80 into a87298c5).\n. This pull request fails (merged 93cc8b80 into a87298c5).\n. This pull request fails (merged 56041b30 into a87298c5).\n. This pull request passes (merged 8944ca88 into a87298c5).\n. This pull request passes (merged 4fd03510 into 75580656).\n. This pull request fails (merged 7a1b21ce into 75580656).\n. ",
    "lzhan": "0.5 is out. I will try to merge this pr.\n. As Ren suggested, will revisit this after post 0.5 work is done.\n. Great. Thanks Caridy.\n. I will find a window machine to test and merge this pr.\n. lgtm\n. @isao: There is no set up for example app tests. We only run functional tests on those example apps.\n. @jlecomte is it ok to remove the \"todo:true\"? I don't see js error from \"mojito jslint\" command after it is removed.\n. Just tested \"prefer yaml to json\": it is true for defaults, definition, routes config files, but not for application. When both application.json application.yaml exist, application.json is used. \n. @caridy Thanks for point it out. I am trying to fix bug 5532859 which requires our default dimensions.json to meet an ycb doc. I am not aware of the \"the manhattan workflow\". Would you please give me a pointer?\n. I am closing this pr and will send another pr with 1) keep current dimension.json for open source user. 2) An new dimension.json for yahoo internal user-- when internal user create mojito app, the dimension.json for internal user will be used.\n. \"./run.js test -u\" is changed to \"./run.js test -u --path unit\", and \"./run.js test -f\" is changed to \"./run.js test -f --path func\".\n. Will merge. Manually run the failed functional tests with nodejs08, the test passed.\n. +1\n. @isao you are right. I will update run.js\n. +1\n. +1\n. Thanks Drew and Isao. I will update run.js.\n. +1. \n. Thanks Isao. It is good to know. But in this case, only yui 3.4.1 can be used for func tests to avoid a extra insertion caused by later version yui.\n. +1\n. +1\n. Added cliOption back. The listener part is causing problem when there is any app failed to start. (For our case, there is an example app is failed to start now.) When there is an app failed to start, run.js should continue to start the rest of the apps and run all the tests. The approach is right. The code needs to be modified and checked in later. \n. Passed on travis with node08. Failed/Exit at very early stage(git checkout) with node06.\n. Agree. Thanks for the suggestion.\n. Mojito now supports yaml format which allows comments in the config files. Please see pr 670 for detail.\n. Need to convert the json file to yaml file(not only file name change, but also format change), and add comments.\nMojito 0.4.9 should have the support: https://github.com/yahoo/mojito/wiki/ReleaseNotes0_4_9\n. lib/tests is for testRunner to find tests to run.(It is not for Report. Report is written under: artifacts/test/coverage). The tests were the old unit tests which don't exist anymore. If my understanding is correct, this part is the old way to run unit test coverage for mojito src.\n. +1\n. +1\n. There are some functional test failures in travis. But I don't think they are caused by this change. Let's fix html5app first then debug the rest of them if they failed on CI.\n+1\n. Travis build on node06 is done. All func tests passed. Travis build on node08 seems very slow. Merge now.\n. I see. Thanks Isao. I will update.\n. Yes, I will remove it. \n. controller.server.js does not get right mojito version: 'Powered by Mojito ' + Y.mojito.version;  Y.mojito.version gives undefined.\n. I see. I was wondering if it is used anywhere :). I will check if RS can populate Y.mojito.version.\n. +1\n. +1\n. The default type is \"mojito\" if it is not specified. \n. +1\n. I am not sure what is our plan about those two APIs. Will remove it for now. We can add them back when there is a customer request.\n. +1\n. Thanks Drew. Will update as you suggested.\n. Isao: would you please update run.js--remove any cli related? Thanks.\nOther than this. +1.\n. Thanks Drew. I will rethink what is the best way to test \"mojito start\".\n. +1\n. Thanks. +1.\n. +1\n. Good job Steve. Thank you.\n+1.\n. +1\n. +1\n. +1\n. +1\n. +1\n. @caridy Any suggestion? I got the idea from the unit test of store.server.js\n. @caridy I see your point. Let me try. Thanks.\n. A.throwsError() can be used for test case expecting error. I will update test \"expandInstanceForEnv3\"\nA.throwsError() can not be used for the other three cases which are not expecting error(the tests will fail if there is an error/exception).\n. Yes, I am trying to solve a conflict and will merge this pr.\n. Thanks. The header format on phantomjs is a little different. So searching for a string is a little different too.\n. Thanks Caridy. Updated.\n. +1\n. That is the issue Drew and I mentioned in yesterday's standard up meeting.\nDrew will check to see if we can turn off the warning.\nThanks,\n-lichun\nFrom: Isao Yagi notifications@github.com<mailto:notifications@github.com>\nReply-To: yahoo/mojito reply@reply.github.com<mailto:reply@reply.github.com>\nDate: Wednesday, May 15, 2013 10:00 AM\nTo: yahoo/mojito mojito@noreply.github.com<mailto:mojito@noreply.github.com>\nSubject: Re: [mojito] revert arrow, descriptor upgrade commit (#1114)\nBTW func tests on travis fail with:\nThe log length has exceeded the limit of 4 Megabytes\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/yahoo/mojito/pull/1114#issuecomment-17951711.\n. Thanks. +1\n. sure. I will make the changes.\n. +1\n. Thanks. \n. Thanks. I will correct it.\n. Agree. Need to think about it for all apps with YQL calls.\n. Just found that arrow 0.0.77 reporting is changed. Everytime when new report is generated, old report file/dir is removed. There is a new option --keepTestReport, I am testing it to see if it works fine.\n. --keepTestReport option works fine. Run.js need to be updated.\n. +1\n. +1\n. Good catch. Thanks. Updated. Will monitor travis result.\n. Thanks Caridy. I will more test scenarios accordingly.\n. Thanks Caridy.\n. @caridy I am working on it now. Jenny asked me to create a new card. So I moved this pr to the new card.\n. +1\n. It should work fine for both npm and ynpm env. It tries npm install first, if it is not successful, then tries ynpm.\n. travis failed, but it is not related to the pr.\n. travis is fixed. \n. +1\n. +1\n. It is related. I am checking.\n. I can still reproduce this issue.\n. Thanks Caridy. I will update the application.json with the setting under environment:development. I am not sure how to passing --context enviroment:development with the new way starting mojito app(\"node app\"). Is the development env the default?\n. I see some unit tests. Do we want to run and/or maintain them?\n. Talked to Joe. The functional tests are for demo. Unit tests will be maintained.\n+1\n. @imalberto I don't think symlink works as usual on git. \n. +1\n. @drewfish just fixed the line up issue. Would you please try again.\n. +1\n. @caridy  LGTM too. Failed functional tests are due to existing YQL/flickr issue. I have run this pr with the branch with fixed functional app/tests, everything is fine. \n@jarnoux would you please provide a unit or functional test for this pr?\n. @caridy Got it. Thanks. I will update HISTORY file and merge this pr. \n. +1\n. @caridy Thanks for the reminder. I am adding a card now.\n. I like the idea adding customized contextualizer. \nI think the default context: environment:development, should be used for non-mocked data, so that there is no change for people who run these examples and there is no doc change needed for this update/pr.\n. @zhouyaoji I don't see middleware/mojito-contextualizer.js files. Maybe you forgot to add them?\n. +1\n. +1\n. @zhouyaoji  This file should be removed:  examples/developer-guide/configure_routing/server.js \nTravis test failed on this app. \n. +1\n. All server.js files should be removed(they have been removed for next branch).\n. @gomezd @caridy I am checking why travis build failed on node8. There are three tests on dashboard example failed.\n. Added a trello card in to do list.\n. This is fixed in ycb release 1.1.0: https://github.com/yahoo/ycb/\n. Related change is also made in mojito 0.8.1. \n. +1\n. The last travis run is with ycb 1.1.0. The unit test is fine. Func tests failed on node10 with dashboard app. I don't think it is related to this pr.\n. Card is added in the todo list.\n. This happens on Windows. Card is added in todo list.\n. Sure. Let me try it.\n. Card is created: https://trello.com/c/dxxyVWTZ/806-investigate-how-to-deal-with-multiple-calls-to-execute-while-the-callbacks-will-be-executed-in-random-order\n. @ItsAsbreuk Thanks for reporting this issue. A card is added to our todo list.\n. @ItsAsbreuk : when Mojito 0.8.0 was released, mojito-cli-create was updated too. You might need to update mojito-cli by \"npm install --global mojito-cli\". Please let me know if you still see the same issue after that.\n. @ItsAsbreuk No problem. Thanks.\n. According to Mojito API: http://developer.yahoo.com/cocktails/mojito/api/classes/Partial.common.html#method_render, only putting partial view file directly under views dir is supported. I checked ac.partial.render(newData, 'task', ...) works fine.  ac.partial.render(newData, './partials/task', ...) is not supported currently.\n. Just verified: ac.partial.render(newData, 'partials/task', ...)   should works (don't use './partials/task'). Plz try. \n. @jithin1987 @caridy : I just checked. partials/ doesn't work. I will check what is going on there. \n. Fix is available in mojito 0.8.3.\n. Not really. But I just noticed that I need to fix the travis failure. About the issue with \"partials\" as dir name, if we don't want to make any change, we might need to document it.\n. @caridy @ItsAsbreuk I will work on it. \n. @ItsAsbreuk @caridy I can reproduce this with our existing test app.\n. The pull request with solution is closed. Long term solution needs to be discussed. \n. Ok. Will do. Thanks.\n. Looks like travis is having issue currently. Failures are not due to this change.\n. The test passed locally with node10. The failure is not related to the changes.\n. +1\n. +1\n. Ok. I will update it.\n. Good catch. Blame copy and paste.\n. Thanks for the suggestion. I will add other commands.\nAbout coverage: I know it is a little awkward that only one command has it. Currently we can only generate cc data for unit tests. And unit test execute is not that long. I thought it is good to see the coverage when dev add feature/unit tests. \n. I don't think so.\n. Thanks Drew. Will update the name.\n. The original implementation treats every thing under mojits dir as a mojit(dir), it tries to read files under the dir. When README.md file is put under mojits dir, parsing err is thrown. The fix check if it is dir, if it is not, just return, skip the loading process for mojit.\n. Are these tests functional tests? If so, please move them to the test dir.\n. That will not cover symlink file.\n. Got it. Thanks everyone. \n. @caridy I don't see there is an issue here if foo is processed after lang. The logic is \n1. the first \"for (m in resolvedMods)\" will go though all the modules and if a module starts with lang/, then the name of the mojit is saved in an array.\n2. the second \"for (m in resolvedMods)\" will go though all the module and if the mojit name is found in the array add lang info to the module.\nSo I don't think the order of processing the modules matters.\nI don't like the second for loop, but looks like there is no good way to get those mojits directly just by name.\n. Minor: do you mean \"--baseUrl=http://localhost:8666\"?\n. The element id for this test should be #my_header.\nThis will fix the travis failure on the serveronly app test.\n. ",
    "bitlyfied": "still no fix? I just started playing with Mojito, and breaking a HelloWorld app makes it look pretty bad...\n. ",
    "jshirley": "Thanks very much guys, this is great to hear. I'm really excited about seeing what's coming down the pipe.\nThanks for the additional insight into shaker, @caridy -- that was basically how my understanding was. I built a sort of stop gap before seeing shaker for my YAF application. It works to at least reduce the requests down.\n. ",
    "realistschuckle": "Is this issue closed? I see that mojito has gone past version 0.6.\n. How about un-officially? :) Do they live in a branch at which I could look and maintain their usage on my own?\n. I think that @aljimenez wants the configuration object. I figured out a way to do just that using Yahoo! Configuration Bundle that requires using a \"private\" property. It would be nice if we could have that information without that hack.\nIf we look at ~/mojito/lib/mojito.js in the MojitoServer.prototype._useMiddleware function, we can see that user-supplied middleware gets included with app.use(require(midPath));. However, mojito-specific middleware gets loaded with app.use(require(midPath)(midConfig));. Can we provide a way to have the Configuration Object (as midConfig) to be passed to the user-supplied middleware just as we do with the mojito-specific middleware? We'd need a way to specify that the user-specified middleware contains a \"middleware factory\" that will accept the Configuration Object as opposed to a plain, Jane middleware object that only exports function(req, res, next)...\nAny thoughts? If we come up with a sane scheme to support this, I would like the opportunity to implement it and submit the pull request. I find it a germane issue for the application that I have under construction...\nOr, should I just package my earlier get-config-in-middleware logic as a middleware component, attach the config to the req as proposed by @caridy, and just put it somewhere that shared mojito things go? Is there some gallery-ish thing? Like YUI Library - Gallery? :)\n. @caridy I see that mechanism and have tried to use it. I found that the method that makes the list, MojitoServer.prototype._makeMiddewareList, gets in the way. If I write a \"special\" middleware named mojito-is-loved-by-realistschuckle-middleware, then I have to make sure that I configure the entire middleware stack correctly because of the logic branch if (hasMojito) that builds the list. Now, I have to know all of the expectations of the Mojito stack to get it \"configured correctly\" to include the order in which they should occur.\nIt may turn out that it does not matter; however, when I tried it for my current application, I found that stuff just didn't work anymore. Instead of spending the time that it would take to discover the correct configuration, presumably what I find in MojitoServer.MOJITO_MIDDLEWARE, I just decided to hack around this issue as a stopgap. I'd like a \"right\" solution. Because this feels as if I need to know too much about the internal workings...\nSo, I want to target that specific mechanism. However, I think that MojitoServer.prototype._makeMiddewareList should be a little smarter so I can specify my \"mojito\"-prefixed middleware names for \"middleware factory\" stuff and, yet, still get all that Mojito goodness?\nEDIT: Also, thanks for responding so quickly. I appreciate that you take the time to comment though you have so much to do on the project. If I'm taking too much time, just tell me to shut it. :D\n. @caridy I don't know why I didn't check mojito-next to check out the future direction. That is completely my fault! To the point of your comment, though, what you write makes sense (and I agree it could be easier for developers to use custom middleware:).\nJust as a point of clarification, will the Mojito team release mojito-next with a new major revision number to imply incompatible changes with the existing Mojito stack? Or should mojito-next fully support existing Mojito applications and provide new features?\n. +1 - I like this solution because it makes middleware configuration more deliberate. Thank you, everyone, for participating in this discussion.\n. ",
    "gotwarlost": "agree with @mojit0 - currently we are unable to move forward with our mojito dependency and have to pin ourselves to v0.3.26\nThis particular fix should be a one-line change (i.e. add a clause for PUT in addition to POST) - the effort is more on writing a unit test for this.\n. already incorporated :)\n. Note how it thinks that README.md is a directory. If this is common code, this bug may have other subtler manifestations.\n. ",
    "yukinying": "I am the teammate who works with Dmitry. It looks like the api_key has already expired (when debug in YQL). Would that be a useful feature if Mojito could tolerant JS error, e.g. having the try catch block in the main function instead of letting arbitrary random error halting the whole server?\n. Just taking some time digging out what is fixed. The use of meta with serialize:json is still not appearing in documentation. Maybe I have overlooking something? \n. ",
    "bthaeler": "I think Ric wants to meet and discuss this some more. From talking to him, it sounds like we haven\u2019t totally decided which way to go yet.\n-Bret\nFrom: Caridy Patino [mailto:notifications@github.com]\nSent: Tuesday, October 23, 2012 8:34 AM\nTo: yahoo/mojito\nCc: Bret Thaeler\nSubject: Re: [mojito] Sweetandsour (#568)\n@rwaldurahttps://github.com/rwaldura we discussed the details, and @bthaelerhttps://github.com/bthaeler will be working with @drewfishhttps://github.com/drewfish and myself to get the whole infrastructure as a NPM pkg rather than part of mojito itself, and using hooks within mojito core to be able to control the flow. I'm closing this one.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/yahoo/mojito/pull/568#issuecomment-9706449.\n. The intent is to eventual make this api work on both the client and server side. We should be able to get the Debug UI to merge both server side and client side results together. This is a feature we plan to work on next quarter.\nTo use the debugger in a model, one would need to pass down debugger to the getData methods in the model.\nThe code does work woth the current perf api. If you enable perf marks, prof.PerfMark will be an available debug flag. The results will appear in a water fall display.\n. The existing perf markers are re-implemented using the hook system. So they should continue to work just fine.\nIt wasn't very clear to me how to run the unit tests. So I didn't. Looking at the Travis build output on github, it looks like some of the tests do complain. I can try and fix those. Is there a good current document explaining how to setup a test system for running the unit tests?\n. I added some missing mojito-hooks dependency to places, and I added a stuff for the hook system to the test base. I think the unit tests are fine now.\n. Any idea when you will do the merge for this pull request?\n. From my, and your performance tests, it is more efficient to test if a field is null vs undefined. IE 'if (x.y)' is more efficient if x.y = null vs x.y is just undefined.\nI am just trying to make the hook system as low impact as possible.\n. Originally this was for the clients. But this also works for people who want to enable a hook global, without associating this with a request. So how about 'global_hooks'.\nEach callback will have its own unique this state per tool. This is stored in this object. So do we want 'global_hooks' or 'global_hooks_ctx'?\n. Not sure what your concern is here. Hooks are statically defined. Groups of hooks are enabled on a per request basis. What hooks people are interested in is static.\n. If I rename this to 'global_hooks' I think this resolved this.\n. No, i will fix.\n. yes, I added a stub function.\nenableHookGroup: function () {}\n. Sounds like you are proposing two options. One is to create a script that runs at build time to generate this list, and the second one is using some kind of YUI event to do this? I don't now what would be better. Is this something we want to solve now or latter? If you feel strongly about this, I can try and figure something out. \n. Yes, the idea is that if you are not using any code that needs a hook, the hook system defaults to an empty function.\n. Comment added. Also fixed lint issue.\n. ",
    "shiweiwei97": "More info: this issue occurs when model's YUI module name is not the same as its file name.\nAnother workaround for this issue is to rename foo.server.js to myMojitModelFoo.server.js.\nRelated code:\nAt this line, models['foo'] is set to true.\nhttps://github.com/yahoo/mojito/blob/develop/lib/store.server.js#L687\nWhile this line, the code is looking for models['myMojitModelFoo']. As a result the foo model was not initialized when shareYUIInstance is true.\nhttps://github.com/yahoo/mojito/blob/develop/lib/app/autoload/controller-context.common.js#L93\n. @caridy thanks for the reply. My understanding is that this issue will be fixed in 0.5.x and code changes are required to migrate from 0.4.x and below.\nBut for now, I think the documentation of shareYUIInstance should be updated to let users be aware of the assumptions. Currently even the examples under https://github.com/yahoo/mojito/tree/develop/examples will break if shareYUIInstance is turned on. I myself spent hours debugging into mojito code to find out the root cause but not all users will be patient enough to do the same.\n. ",
    "ajchen-yahoo": "Looks good to me. Thanks!\n. ",
    "ItsAsbreuk": "Hi Caridy,\nWell, it's getting even better now (or actually worse..)\nFirst: I'm glad to know this. I had other failures where missing libraries were the issue. So, these problems are solved (Yes!). But notice that in those cases firebug gave me an error of instances that were not available.\nSecond: When I include \"dependencyCalculations\": \"precomputed+ondemand\", the problem described above remains AND also occurs when the code is declared inside the handlebarview. So now it doesn't render well neither in the binder, nor in the view.\nThis is what is rendered:\n\nSo you see: Y.DataTable gets started rendering. But no content...\nI thought I finally understood YUI well, but I'm totally lost now...\nMarco.\n. Caridy,\nI've stripped it down to a simple project. Problem still remains.\nYou can see it at: https://github.com/ItsAsbreuk/test-mojito-datatable\nThese scenario's are tested by myself:\n1) dependencyCalculations not defined:\n--> binder: Y.DataTable does render, but no innercontent. No errormessages\n--> view: Y.DataTable renders OK\n2) \"dependencyCalculations\": \"precomputed+ondemand\"\n--> binder: Y.DataTable does render, but no innercontent. No errormessages\n--> view: Y.DataTable does render, but no innercontent. No errormessages\n3) \"dependencyCalculations\": \"ondemand\"\n--> binder: Y.DataTable does render, but no innercontent. No errormessages\n--> view: Y.DataTable does render, but no innercontent. No errormessages\n4) \"dependencyCalculations\": \"precomputed\"\n--> binder: Y.DataTable does not render. No errormessages\n--> view: Y.DataTable renders OK\nHow can I upgrade to Mojito 0.5.0pr2 ??\nWhen I do \"npm update mojito -g\" it won't go higher then 0.4.7 (that's where I suffered this issue)\nMarco.\n. Well, I found out how to install Mojito 0.5.0pr2 (remember it being installed with speciific version during the YUI Open Hours :))\nAnyway: Mojito 0.5.0pr2 doesn't start on my system:\n/usr/lib/node_modules/mojito/lib/mojito.js:282\nsingleton_dispatcher = Y.mojito.Dispatcher.init(\nTypeError: Cannot call method 'init' of undefined\nSo I had to reinstall 0.4.7. agian.\n. I'm out now (it's 11:55 pm over here)...\n. Caridy,\nWell, that are a bunch of changes I have to make to my projects ;(\nBut even this small project doesn't start: same error occurs.\nI've search out and found out that application.json causes my startup error in 0.5.0pr2:\nStartup fails within application.json:\n\"yui\": {\n    \"config\": {\n        ...\n        \"combine\": false,\n        \"base\": \"http://yui.yahooapis.com/3.7.3/build/\",\n        ...\n    }\n},\nOR\n\"yui\": {\n    \"config\": {\n        ...\n        \"combine\": true,\n        \"comboBase\": \"http://yui.yahooapis.com/combo?\",\n        \"root\": \"3.7.3/build/\",\n        ...\n    }\n},\nRemoving the base ref. and use combine=false --> Mojito will start.\nRemoving the comboBase ref. and use combine=true --> Mojito will start.\nHowever: my declared YUI-instances won't work in those cases.\nI quess it's another bug in 0.5.0pr2\nMarco.\n. Caridy,\nbase doesn't only specify the version, but also the location. I hope there will be a way to specify the location, for I'm serving yui-modules through ssl from my own server. BTW, because its a parameter within the yui-object, it sounds weird to me to give it another meaning.\nMojito has great posibilities, but I feel a bit blinded getting it to master ;)\nAs soon as I get more experienced, I'll dive into the source. Perhaps I can make my contributions one day.\n. I would like to visit the YUIConf some day, but at the moment cannot afford to cross the ocean... I'm eager to look at the recordings. Perhaps you're in to organize a hangout were Mojito developers can discuss any questions they have. Just like Dav does next Friday.\nAbout the ticket: did you find time to take look at the problem?\nMarco.\n. Caridy, thanks for your response.\nBut I'm really sorry...\nJust doesn't work here. I don't understand what's different in your situation.\nYou changed the controller.server.js to work with Mojito0.5.0pr2, so I installed that version.\nNow, on the client, no YUI is loaded --> the code fails right away when calling Y.one('body').\nSo, I downgraded Mojoto0.4.8 with your new code (had to make changes to controller.server.js, to call the Model without .get()) --> now YUI is loaded, but I suffer the bug as mentioned before. The errorcode is:\nY.Intl.get('datatable-message')));  <-- Y.Intl.get is not a function.\nSeems to mee Y.Intl is not loaded.\nWhat am I doing different? In you fork you see it work you say. Is that on the client side? Or are you running it on a machines that already has some modules loaded (don't know if that is possible)?\nMarco.\n. Well, a small correction: I did make it work, but still there is something not right.\nI made it work when the datatable is declared in the Binder. This is what I needed, so I'm happy with this. Only when using Mojito0.4.8\nOn the other hand: there are strange still issues:\nMojito0.4.8, datatable declared in binder --> works\nMojito0.4.8, datatable declared in view (using YUI().use(datatable')--> fails: Y.Intl.get('datatable-message'))); <-- Y.Intl.get is not a function.\nMojito0.5.0pr2: nothing works for there is nu YUI on the client\nThis all using your last configuration (with only adjustments to controller.server.js -calling Model- and switching file where datatable is declared)\nSo, I can get along, but some bugs remain.\nMarco.\n. Caridy,\nI found out his (version 0.5.0pr2):\nWithin application.json, if I define a section \"settings\": [ \"runtime:client\"] with a yui-object, than the base-location will be used by yui on the client in the html-definition YUI.applyConfig(). BUT on the client, the same config is used within the definition of window.YMojito(). This does not work, because all mojito stuff and assets should be downloaded from the server were Mojito is running. Now it tries to load http://yui.yahooapis.com/3.7.3/build/mojito-client/mojito-client-min.js. So all gets stuck.\nThere should be a distinguish between the yui-config of YUI.applyConfig() and window.YMojito()\nPlease help me out, I really would like to get it work on 0.5.0pr2\nRegards,\nMarco.\n. Yeah, I'm sorry.\nI should more respect it rather then pushing...\nYou advised me using 0.5.0pr2 though ;)\nI'm glad you are aware and working on it. Will try pr3 in the mean time.\nThx,\nMarco.\n. By the way, I'm learning more and more features of Mojito and I'm really impressed!\nIt offers huge possibilities. I'm thankful I can make use of it.\nMarco.\n. Caridy, just to let you know:\nI can't get it work with 0.5.0pr3 either.\nSo, the only configuration that works is the one you provided me. But it will throw me back to YUI3.5.1 (which is too bad when you want to use most of DataTable and Scrollviews new features)\nSo please take care of the possibility for using different YUI-versions on both client and server YUI before releasing 0.5GA, will you? But thats for later: first good luck at the YUI-conf!\nKind regards,\nMarco.\n. Yeah, sorry.\nclosed!\n. Caridy,\nAgreed, the problem is solved.\nClosing the ticket. Thx!\n. Hey Caridy,\nAll right, I see I need some adjustments to restart Mojito if it shuts down...\nI know its my responsibility. to control the flow.\nFact is that in the Model, I execute MySql. When an error occurs, it is catched and the Model will return an error to the controller, which calls ac.error. Everything fine here.\nBut, I experienced the situation that during reading mysql in the model, all crashed. That seems strange to me. Taking a deeper look, I found that Mojito does handle functioncalls that don't excists. Say client.abcd(); will result in a red lines in the console like this:\nError executing child mojit at 'firmselection':\nERROR mojito-composite-addon: Object # has no method 'abcd'\nERROR mojito-composite-addon: TypeError: Object # has no method 'abcd'\n    at Object.getData (/var/www/mojito-sites/heidata_nl/mojits/FirmSelection/models/foundationfactories.server.js:44:8)\n    at Object.index (/var/www/mojito-sites/heidata_nl/mojits/FirmSelection/controller.server.js:28:61)\n    at new ActionContext (/usr/lib/node_modules/mojito/lib/app/autoload/action-context.common.js:323:34)\n    at Object.invoke (/usr/lib/node_modules/mojito/lib/app/autoload/controller-context.common.js:141:22)\n    at /usr/lib/node_modules/mojito/lib/app/autoload/dispatch.common.js:192:28\n    at [object Object]._notify (/usr/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:836:17)\n    at /usr/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:817:19\n    at [object Object]._notify (/usr/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:836:17)\n    at [object Object]. (/usr/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:971:27)\n    at Object._finish (/usr/lib/node_modules/mojito/node_modules/yui/yui-nodejs/yui-nodejs.js:6432:19)\nBut Mojito stays alive nevertheless.\nNow, calling this.end(); leads to:\nthis.end();\n     ^\nTypeError: Object # has no method 'end'\n    at selectCb (/var/www/mojito-sites/heidata_nl/mojits/FirmSelection/models/foundationfactories.server.js:51:6)\n    at Query. (/usr/lib/node_modules/mysql/lib/client.js:95:9)\n    at Query.emit (events.js:67:17)\n    at Query._handlePacket (/usr/lib/node_modules/mysql/lib/query.js:33:12)\n    at Client._handlePacket (/usr/lib/node_modules/mysql/lib/client.js:319:14)\n    at Parser. (native)\n    at Parser.emit (events.js:67:17)\n    at /usr/lib/node_modules/mysql/lib/parser.js:71:14\n    at Parser.write (/usr/lib/node_modules/mysql/lib/parser.js:576:7)\n    at Socket. (native)\nAnd Mojito stops.\nOf coarse you can say it's my fault: I shouldn't call this.end(); But I rather have seen a red lines..\nIt's not that I think you need to change this no matter what. I just mention it helping you guys making Mojito better.\nMarco.\n. I ran into it again, but in a different situation now: using an own YUI-module.\nSo, let me explain it better:\nSituation 1 goes all right:\nIf I make a functioncall that refers to a mojio-object with a undefined function (for instance  ac.models.MyModelFoo.undefinedFunc()) then Mojito nicely returns a http status 500\nSituation 2 goes wrong:\nIf I make a functioncall that refers to an external module (for instance an own designed YUI-Module) where the module does exists, but I call an undefined function (for instance Y.MyCorrectWidget.undefinedFunc()) then Mojito crashes without further calling ac.error() (and thus without response).\nMarco.\n. Caridy, rethinking this issue, made me realize very unpleasant things might happen.\nIn my situation I was lucky because Mojito just stopped. You -on the other hand- run on your own hosting infrastructure  (Manhattan?) that will restart after such a situation.\nSo, what happens if you make a typo on an external module? Your Mojito-service might have multiple threads waiting for their callback. But at the time the typo tries to execute, the service stops, all callbacks are never being returned and the Mojito service will restart.\nSo: you wander why you missed your specific callback that actually has no error itself. You probably reload the page, which will succeed, because Mojito is restarted. You retry to execute your valid functioncall (not the one with the typo) and this time you get your callback. Try to debug/profile this... You will be looking at the wrong place.\nI don't have all the insight in Mojito, so I hope It's not that bad as i think.\nRegards,\nMarco.\n. The same with this situation:\nSituation 1:\nIn the regular Mojito-code:\nvar item = myArray[i]  // <-- where i is undefined\nMojito throws error 500 and continues running\nSituation 2:\nWithin a callback of an external module:\nvar item = myArray[i]  // <-- where i is undefined\nMojito-service stops completely:\nitem = myArray[i];\n                       ^\nReferenceError: i is not defined\n    at selectCb (/var/www/mojito-sites/heidata_nl/mojits/ProjectData/models/project.server.js:53:41)\n    at Query. (/usr/lib/node_modules/mysql/lib/client.js:108:11)\n    at Query.emit (events.js:64:17)\n    at Query._handlePacket (/usr/lib/node_modules/mysql/lib/query.js:51:14)\n    at Client._handlePacket (/usr/lib/node_modules/mysql/lib/client.js:319:14)\n    at Parser. (native)\n    at Parser.emit (events.js:67:17)\n    at /usr/lib/node_modules/mysql/lib/parser.js:71:14\n    at Parser.write (/usr/lib/node_modules/mysql/lib/parser.js:576:7)\n    at Socket. (native)\nSo it seems there has to be made a sort of try/catch system when calling external references.\nMarco.\n. All right, nice to know.\nBut still, even it's impossible to catch these, does Mojito really needs to crash then?\nI mean, ac.models.MyModelFoo.undefinedFunc() returns nicely a 500-error, while still running.\nWhy cannot this be done when Y.MyCorrectWidget.undefinedFunc() is called?\nLike said: one fault-routine can stop running-callbacks of correct working routines. When working in teams I can imagine someone who makes a programming-mistake drives others crazy when they start missing their callback on occasion.\nVery unsatisfied situation here...\n. I hope this also involves custom base location at the client side other than used on the client side.\nBecause situations may exist where clientside loads from a custom comboloader through ssl. The serverside doesn't need to (preferably not).\nMarco.\n. Caridy, you are great!\nI haven;t seen your presentation yet. I've started looking at your sheets (http://www.slideshare.net/caridy/yuiconf2012-mojito-for-yui-developers) right now :)\nRegards,\nMarco.\n. All right then. Sorry for mentioning. Just trying to help.\nMarco.\n. Hi Drew, all right, I'll do so. Thx for your response.\nMarco.\n. @Bill, Thanks.\nThat would be issue #1 I quess.\nI'm not the one to suggest about the right structure to follow, but can't the node's Id being kept the same after a refreshView()?\nI found issue #2 has to do with intermojit-communication: I broadcast an event at the masterMojit to the receiverMojit. Now, when the receiverMojit gets refreshed, the masterMojit is broadcasting to the wrong target.\nMarco.\n. Sorry, its not an issue,\nI should have post in on the Mojito-forum.\nHave done so.\nMarco.\n. @lzhan just updated mojito-cli and indeed that solved the problem.\nStrange, if I remembered right, i did update the mojito-cli when i updated mojito to version 8. I must have been wrong...\nThe problem is solved then.\nI'll close the ticket.\nThanks,\nMarco.\n. well, I'm not a principal developer, but here are my pennies:\n1) I sounds logical mojito-cli's version is bound to mojito's version. I should have upgraded -i thought i had- but it makes more sence when mojito-cli follows the same major-release-nr as mojito. Thus: mojito-cli version 0.8.x\n2) It sounds reasonable that the archetypes are within mojito-cli because you don't have duplicated archetypes in all projects. However, i am running multiple mojito-projects on my server. They are not all mojito-version 0.8.x. This makes mojio-cli quite unusable for my previous mojito-projects. So, what about having mojito-cli archetypes for all major mojito-releases? So it can get the right archetypes for every specific mojito-project.\n3) Because (i think) mojito-cli ought to be updated on every major mojito-release, why not let mojito-cli throw an error when it tries to interact with a higher mojito-version? Just throw an error like: \"you need mojito-cli version 0.8.x if you want to perform this action on this mojito-project\". It helps if mojito-cli follows the same version-pattern as mojito does.\njust the way i see it.\nKind regards,\nMarco.\n. @caridy, @isao, \nmy thoughts were having one mojito-cli (of coarse). and make it sniffing inside the mojito-project for the version it is using. this way mojito create always 'creates' archetypes of the mojito-version it was meant to. And, if the mojito-project resides at a higher level than mojito-cli (which is theoretical possible when cli is downgraded or a 'higher-version' project is copied manually to the server), than mojito-cli throwing an error.\ndon't know if this is the way to go or posible, but maybe something to think about.\n. @isao ok, great!\nthx.\n. Yeah i agree that promises are difficult to start with. But that also accounts for Mojito itself. I see mojito as the leading edge framework of today/tomorow. So it wouldn't hurt to gentle push users into this direction. btw, personally i think the promise-code is easier to read than when using callbacks - but that is once you are familiair with them.\nGiving users the choice is a good solution as well.\n. It is not that i'm asking for it because it is 'just possible'.\nThe thing with promises is that they make it easy to chain or batch.\nTo illustrate this: i am using a custom module promise-based using node-mysql. Now I create mojito's models like this:\n``` js\nvar dbConnection = new Y.DatabaseConnection({\n    database: 'mydb',\n    user: 'myusername',\n    password: 'mypassword'\n});\ngetUserId: function(username, password) {\n    return dbConnection.queryPromise('select userid from users where (username=?) && (password=?)', [username, password]);\n},\ngetOrders: function(userid) {\n    return dbConnection.queryPromise('select * from orders where userid=?', userid);\n},\ngetOrderDetails: function(orderid) {\n    return dbConnection.queryPromise('select * from orderdetails where orderid=?', orderid);\n}\n```\nimagine how easy this is to use when calling chained and batched data from within the controller. Previously I had to do this with callbacks which was a nightmare.\nCreating another archetypes is an option, but to be honest: i didn't know they existed until now. so new users will still stick using callbacks. Just to reconsider.\n. for readers who are interested in the code-details:\nhttps://gist.github.com/ItsAsbreuk/6778206\nhttps://gist.github.com/ItsAsbreuk/7699934\n. All right, \nbut just to let you know: inside almost every binder, i use this code:\njs\n        invokePromise: function(action, options) {\n            var instance = this;\n            return new Y.Promise(function (resolve, reject) {\n                instance.mojitProxy.invoke(\n                    action,\n                    options,\n                    function(err, data) {\n                        err && reject(err);\n                        resolve(data);\n                    }\n                );\n            });\n        },\nwhich enables batching invoke-calls.\nMarco\n. where fetchCSS=false not applies to the childmojits that haven't been loaded yet - of coarse..\n. i agree. just keep in mind that we can do a refreshView with param-options where the param-options make the controller to serve different assets. so the logic should track css-files instead of mojits-actions.\n. @caridy no not for these current projects\n(i will activate shaker in a couple of week though)\n. Here is a screenshot of my system: \nhttp://projects.itsasbreuk.nl/screenshot.jpg\nIn the jpg-image you see in the inspector that index.css is loaded twice.\n(which i can confirm when inspecting the actual html)\n. Yeah sure\nI can build a repo this weekend.\nLet you know.\n. ",
    "rodnic": "it's just another way to set up where to load middlewares. If options.midDir was not specified, mojito will assume the folder  'middleware' as default. But you can still set up application.json.\n. @ooskapenaar hmm... It would be better to let application.json handle all of this.\n. ",
    "ghost": "Hi,\nI was referring to the following link:\nhttp://developer.yahoo.com/cocktails/mojito/docs/.\nGetting Startedhttp://developer.yahoo.com/cocktails/mojito/docs/#getting-started\nReady to start creating apps? You\u2019ll start with a quickstart that will show\nyou how to install Mojito and then get up an running with your first Mojito\napp. Once you have Mojito installed and are familiar with the basic steps\nof creating an app, you can walk through the\n`http://developer.yahoo.com/cocktails/mojito/docs/#id1\nCreating\nRight before \"Creating\" is a tick that I don't believe you mean to be there.\n-Joshua Price\nOn Sat, Nov 10, 2012 at 9:24 PM, Joe Catera notifications@github.comwrote:\n\nHI oshiwoshy,\nAre you referring to the Getting Started section in the YDN docs (\nhttp://developer.yahoo.com/cocktails/mojito/docs/getting_started/) or the\ngetting-started-guide directory in\nthe Mojito GitHub repo (\nhttps://github.com/yahoo/mojito/tree/develop/docs/getting-started-guide)?\nI didn't see the error in the YDN docs, but maybe I'm missing something.\nThanks.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/yahoo/mojito/issues/736#issuecomment-10262814.\n. No problem. Glad I could help!\n\nOn Mon, Nov 12, 2012 at 1:47 AM, Joe Catera notifications@github.comwrote:\n\nThanks, Joshua. I've corrected the issue in the source file for the\ndocumentation. YDN has just revamped their site, so I'm unable to update\nthe docs right now. I've contacted the YDN team and hope to resolve the\nerror as soon as possible. Thanks for catching that and filing this GH\nissue.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/yahoo/mojito/issues/736#issuecomment-10279315.\n. Thanks!\nOn Dec 7, 2012 6:53 PM, \"Ren Waldura\" notifications@github.com wrote:\nOshi: yes, but it's more involved, as we now depend on Arrow to run the\ntests.\nhttps://github.com/yahoo/arrow\nWe'll have to expand the documentation to include how to do this.\nFor now, I'd proceed assuming the installation succeeded.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/yahoo/mojito/issues/846#issuecomment-11152666.\n. Created a demo of the issue. You can access \"/\" to reproduce it. https://git.corp.yahoo.com/yiwu/demo-908\nMy mojito version is 0.5.1. \n. \n",
    "rolandoyahoo": "The most basic issue we see is that the page title is wrong when using HTMLFrameMojit. In our config \"specs.frame\" is an HTMLFrameMojit so we are trying to override \"specs.frame.config.title\" for each site we serve with this app. There are other config problems but we would have to go into our code detail to explain.\nIn response to \"By only creating the customizations that are actually used by the app greatly increases app start time\" I have to say we are actually using config for each site even if we don't have site specific files in our app. I think your assumption that not having files for a given selector should not mean that you can not have configuration for it.\n. ",
    "davesbatyahoo": "\"npm install\" is dying immediately on:\nTypeError: Cannot read property 'latest' of undefined at next (/usr/local/lib/node_modules/npm/lib/cache.js:524:35)\n\"ynpm install --registry [url]\" finishes installing but dies when starting mojito in:\nmojito-shaker/addons/rs/shaker.server.js:41\nthis.meta = this.rs.config.readConfigJSON\nTypeError: Object undefined[config] has no method 'readConfigJSON'\n. ",
    "jianlin": "I did another commit.  Would you like to give it a try?\n. It still gives me an error even if I use the code above verbatim...\nCan I just use YAML for application.yml and use routes.json still?\nAnother thing that is strange is that, in the code above, isn't hello just a string, and type just a string, then why doesn't hello need to be in double quotes but HelloWorldMojit has to be?\n. what is more is, if I\ngit clone https://github.com/imalberto/appyamlexample.git\nand cd into it, and start a server using mojito start, it won't work if I go to http://localhost:8666/\nSo I tried again using\nsudo npm install yaml -g\nand started the server again, and it won't work.\nThis is all done on a Mac.\n. My mojito is 0.5.1 and was installed by sudo npm install mojito -g.\n1) So you mean, cd into that folder after git clone, and do a npm install, and then use node_modules/mojito/bin/mojito start to start the server?\n2) If I do (1), the website can be accessed... But another question is, then why 0.5.1 cannot handle the simple YAML file application.yaml for my own project?  (it is a project pretty much the same as on  http://developer.yahoo.com/cocktails/mojito/docs/getting_started/mojito_getting_started_tutorial.html  up to the middle part of the page for \"starting the server\" -- without modifying anything else).\n. You mean add an issue on GitHub?  I thought that's what I did at the beginning of this post, including the error message.\nSo what I can do is just git push my project to GitHub, but it is pretty simple, just the sample app as on http://developer.yahoo.com/cocktails/mojito/docs/getting_started/mojito_getting_started_tutorial.html\nI might add that the example works fine as long as it is application.json and not work as soon as it is application.yml or .yaml\n. yes, I just reintalled Mojito and it is 0.5.2 and it seems to solve the issue... so I asked the question on Friday or Saturday and it just happened to be solved on Monday?  How lucky!\n. I see some application programmers asking the same questions else where what is about EADDRINUSE... but as of other things in life, maybe it is not about how clear things are.  It is about how unclear things are, and then there can be power over the other people.  Just like lawyers will publish some forms that they know have some loopholes.  So if the landlord use that form, he will run into issues and not know how to handle.  It is not until the landlord pays $160 / hour, then the landlord can get the \"professional service\".\n. Later on, I found out when there is any search result, the result is shown, but if there is no result, there is not message on the page.  It simply stay the same as it was, giving the impression that nothing is happening.  Try entering foobar and do a search and it will show.\n. ",
    "aljimenez": "We need to be able to modify the tunnel path and add parameters every time that mojitProxy.invoke is called. This is important to us specifically because we append tokens to the path for tracking purposes and need to distinguish between bucket tests using parameters. And so if we could modify /tunnel to something like /mytunnel;trackId=123?bucket=abc, we would be able to track the request and make sure the right bucket responds.\n. Is there a reason why routes are no longer contextualized? Currently all routes in routes.json are getting exposed to the client.\n. I just noticed that Drew had mentioned this issue before me. Pull request #1378 addresses this, although the request's context takes precedence. I think the req's context should take precedence because I see it as a more specific context than the static context. This allows the static context to serve as the default set of dimension values which can be overwritten by a request.\n. The contextualizer middleware doesn't set the req's environment based on a query parameter: https://github.com/yahoo/mojito/blob/develop/lib/app/middleware/mojito-contextualizer.js#L148. It only does so for dimensions such as lang, site, device, and region. If we make the req's context take precedence we can, for example, have a default value for \"site\", set at start up, which can be overwritten by a request. If we make the start up context take precedence, then a developer might, for example, set a device value at startup and then the request wont be able to overwrite it.\n. From what I remember, my solution was not to use relative paths for assets in static configuration. But there is a problem since ac.done merges meta.assets with config.assets and then it calls ac.assets' mergeMetaInto method, which also merges assets contained in config.assets. So config.assets end up getting added twice. This becomes a problem when an asset is specified with a relative path, because ac.done simply does a metaMerge of config.assets without expanding the relative path.\n. I guess there is a design flaw, since config.assets only need to be added in one place.\n. Take mojito-jscheck middleware as an example; we have some logic in order to determine whether we want this middleware, based on the appConfig. But now that the midConfig is not passed, we would have to execute this logic during request time, using req.app.mojito.store.getAppConfig.\n. The common pattern that I see in a couple of our middlewares is that when it is added, we use the appConfig to determine whether this middleware should be executed per request. If not we return:\njs\nfunction (req, res, next) {\n    next();\n}\nSo maybe there should be a way for us to specify that we don't need this middleware by returning null instead of a function when it is created. If this happens then middleware.js should not append the middleware to the handlers array.\n. Hello. Which version of mojito is your application using? Mojito 0.9 starts differently from previous versions (see https://github.com/yahoo/mojito/wiki#mojito-v09).\n. @caridy, thanks for looking into the pull request; I thought you all had moved on to other projects, but I definitely appreciate feedback, so I'll make sure to give everyone a chance to comment.\n. Seems like _writeHeaders is getting called after the res object has been closed:  (https://github.com/yahoo/mojito/blob/0d36bf1bbe9b851f34eaca1490886a52ec1f9818/lib/output-handler.server.js#L125)\n. Thanks for looking into this. Can you give me an example where this would cause a problem. By the time we want to capture the YUI details, we assume the file is a YUI module, if it is not, then the user made a mistake. In that case the resource would not have any yui metadata and nothing would be added since YUI.add was never called. I see more potential problems the way things were done before since the code is executed twice. What if the user wants to call YUI.applyConfig before calling YUI.add, or what if the user does some other computation outside of YUI.add? Previously it would either crash or the computation would be done twice.\n. I am ready to merge this to the develop branch. By the way, these series of pure start up optimizations since mojito@0.9.0 reduce the startup time of the dashboard example by over 60% and the Search application by over 40% (without any lazy loading).\n. @caridy thanks for the explanation.\nWhen I mentioned YUI.applyConfig, what I meant was that the yui module may have other statements in addition to YUI.add. Before, YUI was mocked so if the module called YUI.applyConfig, it would crash since the mocked object didn't have that function. Now the user can put any code in the module, without worrying whether it is being executed by mojito to get YUI details or by YUI to add the module, the code just runs once.\nRegarding capturing YUI details, the pull request does the same as before: if YUI.add is not called or there is some syntax error, then res.yui remains undefined. Only now when there are syntax/runtime errors, we get the callstack. Also previously if a module under yui_modules had a syntax error then the entire start up would crash, I fixed this issue.\n. Ok, I can fix it; it should be an easy fix. Just wanted to make sure this wasn't by design.\n. Pull request  #1378 \n. Thanks for pointing this out. The OutputBuffer's undefined id is definitely something we should fix; there are a couple of places where error messages can be more clear. I am not sure what is going on exactly, but I will try to setup a test case where there is a tunnel call that ends up calling ac.error. Mojito should be able to handle passing an object to ac.error. The best way to debug what is going on is to go through the call stack within ac.error and see where the response is getting malformed resulting it what seems to be a JSON parse error.\n. See this pull request\n. Great. I'll fix the tests, they are just expecting the previous error messages.\n. Hi,\nThanks for reporting this. To my understanding this is the expected behavior; ac.cookie.get gets the cookies from the request, whereas ac.cookie.set sets new cookies for the response. So when you call ac.cookie.set the client will get the new cookie, but when you call ac.cookie.get right after, the cookies returned should be the original set of cookies that the client sent, not the new cookies that will be sent back. This is slightly different from what you would expect when using Y.Cookie on the client side. Let me know if you have any questions.\nThanks,\nAlbert\n. Based on the history of cookie.server.js, the implementation has been the same since 2012. I am not familiar with mojito-session, but if you end up creating your own solution, you may consider open sourcing it so others can benefit from it.\n. This pull request does not change the execution flow for any existing application. It only adds a new feature, which is to allow a mojit controller to be specified as a function with a prototype. This has no performance impact, since the execution flow remains the same. The only thing that changes is that instead of mojito using Y.mojito.util.heir to create the controller object (see heir), the controller object is created directly from the controller function. This means that we don't have to create a new function every time, which obviously wouldn't degrade performance or memory usage. Specifying the dependency somehow is necessary only if using lazyMojits, there is no way around this, and shouldn't be a huge issue for users since extending the modules of another mojit should be rare. In fact without the pull request mojits extending another mojit's modules would have to specify the dependency through YUI().applyConfig (see ShakerPipelineFrame), in case lazyMojits is on. Specifying the dependencies in default.json is probably the cleanest most intuitive way (and probably good practice anyways since in general mojits are self contained, so its a good idea to mention that it depends on another mojit in its configuration).\n. Thats right, you can extend any YUI module of another mojit, including controllers, binders, models... This pull request enhances 3 things:\n1. When you require a controller, you also get the addons of that controller. Before if you required an external controller you would also need to copy the list of addons required by that controller. (See this example)\n2. The pull request allows you to use the Y.extend directly on the controller, since now controllers can be defined as functions. This is important in order to maintain the prototype chain regardless of how deep the level of extending. For example mojit c's controller can extend mojit's b, which extends mojit's a's controller. Previously you would have to use Y.merge since Y.extend only works on functions not object literals. And if you used Y.merge you would lose the prototype chain and mojit c's controller would not properly inherit mojit's a controller methods.\n3. When using lazyMojits, mojits are loaded as they are needed, however if a mojit depends on the YUI module of another mojit, then those YUI modules would not be available. This is currently solved by having a Y.applyConfig statement before doing YUI.add (see ShakerPipelineFrame). Defining the mojit's external dependencies in defaults.json, is a cleaner solution since it doesn't require the applyConfig statement and is also an easy way to see if this mojit depends on another mojit.\n. In the latest commit, Y.mojito.util.heir accepts functions in addition to object literals. This allows controllers/binders/models to be defined as functions, which can be useful when extending other YUI modules. The commit also adds Y.mojito.util.extend, a wrapper around Y.extend, in order to accept either functions or object literals as arguments.\n. Thanks Caridy, let me know if I should clarify anything.\n. @caridy can you review this when you get a chance; we have some application code that depend on this pull request. Thanks.\n. @caridy sounds good. The pull request did get a bit complicated due to some refactoring and some other fixes that I slipped in, somewhat unrelated to the original pull request. I'll make sure to separate the distinct features in different branches in the future, thanks.\n. Thanks @caridy I will merge this soon, and I'll keep in mind your suggestions.\n. I will merge this pull request soon, if there aren't any concerns.\n. Hello, the error is occurring at \"dynamic/mojits/header/controller.server.js:25:23\". Looks like its calling a method 'get' on an object that is undefined. I can't tell what is going on without seeing the header mojit controller; but perhaps a module that that controller is expecting was not properly loaded. There might be some YUI \"module not loaded\" messages on your console.\n. I renamed it to be consistent with the mojit name, which is capitalized. When using the lazyLangs option, langs are processed through their filenames, which saves a lot of time since we don't have to read and compile each lang file at startup; but it also means that conventions need to be strictly followed. I'll keep in mind the CDN issue.\n. Great, I will implement a less hacky solution soon. But this does fix a very important issue, before if a requests sets the language to, for example Chinese, and then another unrelated requests tries to set it to Spanish but there is no Spanish lang, then the last language would be used, so the user would see Chinese instead of the default lang. This was a big problem because that means that requests and mojits could interfere with each other.\n. Good tip :)\n. Since file uploads are no longer handled by this middleware, this change can be considered non-backward compatible, and I assume we should increment the mojito version to 0.10.0\n. I've been thinking about this pull request, and I now think that I should revert the merge and instead start making these sorts of changes once Mojito starts supporting express 4. It seems like with express 4 we can no longer use its middlewares directly for mojito-parser-body and mojito-parser-cookies (see migrating from express 3 to 4). So I rather make all the express 4 changes for one release, and keep the next release backward compatible.\n. Here we keep track of all the ac addons and controllers, which we use below in order to populate a details.acAddons which includes all ac addons specified in its requirement tree.\n. Here we recursively get mojit details of the dependencies, which ensures that we have all the resources available for this mojit before we call resolveVersion. There we determine details.acAddons, so its important to know all the ac addons that might have been specified by the mojit's dependencies.\n. Here we populate details.modules with all the YUI modules belonging to this module including the modules of its dependencies. This code is only executed when the mojit is required on the client side, in which case if lazyMojits/lazyLangs is on, the current loader may not have all the YUI modules listed so we populate details.modules so that the client side knows the location any YUI module this mojit might refer to.\n. The new Y.mojito.util.extend method is a wrapper around Y.extend, which allows the r/s arguments to be either functions or the usual object literal used for controllers/mojits/binders.\n. This allows mojits to be specified as functions. Often while extending a module it is useful to have a constructor for hooking into the methods (see this example). This is also necessary if Y.mojito.util.extend is used because it returns a function.\n. We only expose client specific routes to the client.\n. Here we filter routes by those that have the client annotation set to true (which is the default).\n. Here we set a default annotations.client to true and use app.annotate to pass any all annotations, including any specified by the user in routes.json.\n. When there is a tunnel request and mojits/langs are loaded lazily, then the loader meta data on the client becomes out of date and so here we update the loader on the server and add the loader to meta.assets such that the client loads the new loader meta.\n. It is a bit confusing, I'll add a comment. It just means that the client value is always considered true unless its set to specifically false.\n. ",
    "akshar100": "Thanks. My objective behind this patch was to get familiar with the whole process. Now that I have understood it I will start contributing more. :)\n. ",
    "lexander": "d'oh, I thought that the link to \"Report an issue on this page\" would include the location from which I came as a parameter. \nHere's the page where I'd expect to find documentation on default log locations and how to configure those locations - http://developer.yahoo.com/cocktails/mojito/docs/topics/mojito_logging.html\n. Ah, well then perhaps the documentation (this bug wasn't about what Mojito does or does-not do) should call that out. Here's a pull request with the change https://github.com/yahoo/mojito/pull/1045\n. Looks good.\n. ",
    "kevinhasslinger": "mojito shows 'b' in access log (=\"thinks\" from original post) is requested and delivers 'b'. Which means this is either a bug in firefox, or deep down in mojito/express?\nMaybe a tool like wireshark can tell me what url firefox is really requesting, or is there a more pleasant way to do that? \nmojito current version 0.5.6 by the way.\n. I know this report is a month old, but until today I didn't got this weird behavior again.\nIt's definitely a problem with Firefox: in Wireshark I can see that Firefox is requesting /b and mojito delivers that correctly. Even if I call localhost:8666/a directly in FF from Adress bar, FF still asks for localhost:8666/b.\nSorry for bothering mojito as the reason for this.\n. ",
    "Yujun-Qian": "The configuration of mojito keeps evolving, accordingly these schemas will change with each version of mojito. I think it makes sense for the shemas to be part of mojito, and the validate command to be part of mojito-cli, so that the user can use a single \"mojito validate\" command to validate all his mojito applications.\n. ",
    "dormfood": "Instead of replacing Cocktails logo, mojito logo is used at the top as title.\nPlease see http://y.ahoo.it/mqsg\nThanks.\n. Done. Please visit http://y.ahoo.it/mqsg\nPR issued, waiting for merge.\nThanks.\n. ",
    "nccuMis": "very responsive.\n2013/4/10 Joe Catera notifications@github.com\n\nThanks, I've updated the link!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/yahoo/mojito/issues/1070#issuecomment-16131787\n.\n. Good.\n\n2013/12/6 Joe Catera notifications@github.com\n\nClosed #1246 https://github.com/yahoo/mojito/issues/1246.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/yahoo/mojito/issues/1246\n.\n. \n",
    "lazybean": "Thanks for the fast feedback.\nI was actually wondering what was this init method, since I haven't used in any controller.\nThen, should we update the description to fit the code? The 'init' method is mentioned in the text and in another code example (the 3rd).\nAt least should we  add an ac.done() in the index method?\n. Looks great now, thanks a lot!\n. Thanks a lot!\n. Thanks \u00e0 lot @zhouyaoji ! Updated version looks good.\n. Thanks \u00e0 lot for the explanation. \nI understand the limitation and will deal with it as you advise.\nI agree it would be worth to mention this in the documentation.\n. right, thanks for the review!\n. ",
    "urgentMilkMan": "https://npmjs.org/package/mojito-dot\nWell that was easy! Thanks for the tip didn't know about the npm publishing stuff very slick and simple. As I have come to expect from the mojito crew. Great work! Thanks for the advice. Try out doT templates they are very fun.\n. @caridy YaY, thanks a lot!\nI didn't have to save the package. I just added it to my package.json dependencies and ran npm install, like I would for anything. And mojito loaded it up just fine. I will flesh out the docs and tests, probably this weekend.\nI am going to remove mojito as one of it's dependencies since it's not really required and ends up installing a whole extra version of mojito that is ignored. I'll make it a dev dependency when I write some tests.\nThanks for all the help!\n. ",
    "houyhnhnm": "It is working fine for me now Caridy:) thanks I should have closed this issue myself. I must become a better community member of github: But I am growing. \n. thanks Albert. I already updated to mojito 0.9:) but the link was excellent to covering the changes. I had become too accustomed to the way things were. \n. ",
    "oyving": "That may be, but then the \"Get Started\" link at http://developer.yahoo.com/cocktails/mojito/ is pointing to the wrong resource.\n. ",
    "jarnoux": "I see, did you try stringifying the mojitRVs like you do for the cache?\n. also how much slower?\n. yes, this is true. there are other limitations as well, like if you add a new module in a separate file, or if you add a require that is not already loaded, the require will fail, or if it's attached to the startup YUI instance (like the resource store itself). but I think the functionality still encompasses most of the useful, most frequent cases.\nJ.\nOn Fri, Jul 19, 2013 at 4:33 PM, Caridy Patino notifications@github.com\nwrote:\n\nThere is a fundamental flaw with this approach, it is the fact that YUI uses a namespace, which means you can hold references around, and those references will not be updated whenever you re-attach a module. E.g:\ncontroller-foo requires bar, if controller-foo is updated, it can be re-use thru loader, and it will be able to resolve the references to the bar namespace, and everything will work just fine. Now, if you update bar, and re-use it, the references that controller-foo is holding will be preserved, which means that controller-foo will be using the old bar, not the new one.\nThere is a little that we can do about this. I think it is not a blocker.\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/pull/1200#issuecomment-21283524\n. I'm investigating a way to plug into the yui plugin but it proves tricky as afterHostMethod cannot be used on methods that are already used to wrap around a host method: https://github.com/yui/yui3/issues/1297\n. addResourceVersion solves my problem\n\nJ.\nOn Thu, Oct 10, 2013 at 2:14 PM, Drew Folta notifications@github.com\nwrote:\n\n@jarnoux You can solve your problem by doing after('addResourceVersion') yes? If so that lowers the priority of this issue, though we should still look at why addons/rs/yui is doing a Do.Halt.\nReply to this email directly or view it on GitHub:\nhttps://github.com/yahoo/mojito/issues/1261#issuecomment-26092353\n. I do because the cached engine contains the template caching configuration and since I can't programmatically change that config inside the renderer, it's not going to rerender the view with the new content\n\nJ.\n. I believe it does, there is a conditional fs.readFile(Sync) based on that option\nJ.\nOn Fri, Jul 19, 2013 at 3:49 PM, Caridy Patino notifications@github.com\nwrote:\n\n\n\nthis._cachedTemplates = true;\n}\n},\nparseResourceVersion: function (source, type, subtype, mojitType) {\nvar self = this,\nhost = self.config.host,\nres = Y.Do.currentRetVal;\n  +\n// if the modified resource is a script, reload it from the filesystem\n// in the runtime YUI instance\nif ('.js' === source.fs.ext) {\nfs.watch(source.fs.fullPath, { persistent: false }, function (event) {\ntry {\nif (fs.readFileSync(source.fs.fullPath, 'utf8')) {\n// load\nhost.runtimeYUI.applyConfig({ useSync: true });\n  useSync does not apply to get if I remember correctly.\n\n\nReply to this email directly or view it on GitHub:\n  https://github.com/yahoo/mojito/pull/1200/files#r5304529\n. I think Get needs it, see: https://github.com/yui/yui3/blob/master/src/get/js/get-nodejs.js#L107\n. hotswap is essencially a convenience for devs, so it has to be explicitely turned on for YUI modules anyways. The addon automatically sets that viewEngine.cacheTemplates: true option so you only have only one option: resourceStore.hotswap to set instread of two. Now why the watch? it allows to keep the caching on if the dev is not modifying any view.\n. that is correct. would enumerating the different resource types of yui modules be a better solution?\n. here, please let me know if there is anything else that's a blocker to merge this pull request\n. I use the \"crt\" prefix to denote it's an iterator in a loop and points to the \"current\" resource\n. that's correct\n. we made shaker a plugin.base and we want to be able to have addons for it\n. fixed with sorting, see: https://github.com/gomezd/mojito/commit/145ebaa8178bbfed3120411162e1aa58322544a6\n. yup\n. dead code\n. yup: https://github.com/gomezd/mojito/commit/448fcd2e52a0a0403fd8e6b2bc593592228c46b2\n. semantically, it is environment: a request has an environment and goes there to look for resources which have affinities, but are indexed by environment.\n. nothing, dead code\n. \n\n",
    "clarle": "Issue resolved in #1300, and released in 0.8.2. \nThanks for the report @aljimenez!\n. I also haven't seen any package.json dependencies we have with mkdirp@'>=4.0-0'.\nWindows_NT 6.1.7601 is Windows 7 SP1, so don't know. :/\n. If you're not using YQL, we should recommend using the Mojito REST Library to make calls to RESTful APIs:\nhttp://developer.yahoo.com/cocktails/mojito/docs/api_overview/mojito_rest_lib.html\nThis would also work on both client and server, so it lets you do the same thing as YQL if you'd rather work with more standardized RESTful API routes.\n. ",
    "juandopazo": "Hi. I tested the last 3 releases and I could install and run them all on Windows 7 64-bits. There are some dependencies of Mojito that depend on mkdirp. Could it be that you had any of those installed globally? Can you still reproduce the issue? If so, can you create a gist with the whole log for the install?\n. Closing this issue until we can get a reproducible test case.\n. ",
    "jianglibo": "thank you for amazing mojito framework\n. ",
    "yahoocla": "CLA is valid!\n. CLA is valid!\n. CLA is valid!\n. CLA is valid!\n. CLA is valid!\n. CLA is valid!\n. CLA is valid!\n. CLA is valid!\n. CLA is valid!\n. CLA is valid!\n. CLA is valid!. ",
    "moeinnb76": "1377\n. ",
    "d-adamkiewicz": "Hi,\nThank you for the anwser. What I try to do is to make sure whether cookie was set (and its value) or not in single execution of server controller code where app logic needs this confimation because I want link some server stored data with it - ie implement sessions.btw. implementation ac.cookie.get() changed recently? Mojito sessions https://github.com/akshar100/mojito-session addon which was starting point for me uses it \"wrong way\".\n. ",
    "muhilvarnan": "Version which i am using :- mojito-cli v0.2.0\nif its in lastest version means, could u show how to do the above functionality with a small code snippet(controller file part alone),\nThanks for the reply ......\n. I have gone through the mojto docs and i finally came up this solution. It works fine for me: \nac.composite.execute(cfg,function(data, meta)\n        {\n         template ={ \"name\": \"login\" };\n         meta['view']=template\n          ac.done(data,meta);\n     });\n. ",
    "funkytaco": "This project seems to be abandoned. Yahoo's probably too busy to work on it, and haven't found any open source community members willing to contribute.\n. ",
    "tenzan": "Yeah, it seems so...\n. Thanks for the heads up.\n. ",
    "jamesalley": "Hi guys. Sorry to say, but you're right, Mojito has effectively been abandoned. The team working on it was dissolved. The Mojito owner left the company. YUI, which Mojito is based on, has been deprecated and is no longer supported. It was pretty awesome stuff though!\nWe're now focused on building component-based apps with React.\n. "
}