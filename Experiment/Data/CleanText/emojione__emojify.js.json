{
    "qq99": "I'm not sure what could really be done here, aside from providing a script to resize all emoji to various smaller sizes with a nice algo vs. relying on browser rescaling\n. I made some more changes, but I'm not sure how you'll feel about them.  The tests illustrate the kinds of things I'm checking for (and emojification I thought made sense), but it might not be in line with your expected behaviours\nAs for keeping the tests in JavaScript, I can understand wanting to remain simple, but let me just paste a diff for visual comparison & readability:\njavascript\ndescribe('emojify on DOM nodes', function() {\n  beforeEach(function() {\n    return this.el = document.createElement(\"DIV\");\n  });\n  describe('with variations of spacing around 2char smileys', function() {\n    it('works with no spacing around :)', function() {\n      var result;\n      this.el.innerHTML = \":)\";\n      result = emojify.run(this.el);\n      return assert.equal('<img title=\":blush:\" class=\"emoji\" src=\"images/emoji/blush.png\" align=\"absmiddle\"></img>', this.el.innerHTML);\n    });\n    it('works with spacing before :)', function() {\n      var result;\n      this.el.innerHTML = \" :)\";\n      result = emojify.run(this.el);\n      return assert.equal(' <img title=\":blush:\" class=\"emoji\" src=\"images/emoji/blush.png\" align=\"absmiddle\"></img>', this.el.innerHTML);\n    });\n    it('works with spacing after :)', function() {\n      var result;\n      this.el.innerHTML = \":) \";\n      result = emojify.run(this.el);\n      return assert.equal('<img title=\":blush:\" class=\"emoji\" src=\"images/emoji/blush.png\" align=\"absmiddle\"></img> ', this.el.innerHTML);\n    });\n    return it('works with spacing before and after :)', function() {\n      var result;\n      this.el.innerHTML = \" :) \";\n      result = emojify.run(this.el);\n      return assert.equal(' <img title=\":blush:\" class=\"emoji\" src=\"images/emoji/blush.png\" align=\"absmiddle\"></img> ', this.el.innerHTML);\n    });\n  });\nvs. \n``` coffeescript\ndescribe 'emojify on DOM nodes', ->\n  beforeEach ->\n    @el = document.createElement(\"DIV\")\ndescribe 'with variations of spacing around 2char smileys', ->\n    it 'works with no spacing around :)', ->\n      @el.innerHTML = \":)\"\n      result = emojify.run(@el)\n      assert.equal '', @el.innerHTML\nit 'works with spacing before :)', ->\n  @el.innerHTML = \" :)\"\n  result = emojify.run(@el)\n  assert.equal ' <img title=\":blush:\" class=\"emoji\" src=\"images/emoji/blush.png\" align=\"absmiddle\"></img>', @el.innerHTML\n\nit 'works with spacing after :)', ->\n  @el.innerHTML = \":) \"\n  result = emojify.run(@el)\n  assert.equal '<img title=\":blush:\" class=\"emoji\" src=\"images/emoji/blush.png\" align=\"absmiddle\"></img> ', @el.innerHTML\n\nit 'works with spacing before and after :)', ->\n  @el.innerHTML = \" :) \"\n  result = emojify.run(@el)\n  assert.equal ' <img title=\":blush:\" class=\"emoji\" src=\"images/emoji/blush.png\" align=\"absmiddle\"></img> ', @el.innerHTML\n\n```\nMight just be personal preference, but I find the lower much easier to read\n. imo I wouldn't merge yet lol, still working out some kinks using my branch live\n. Cool, as I get near the end, I can convert & save them as JS\n. Using emojify on possibly html-entity encoded strings -- what do you think we should do in this case?  Unescape, then run the standard algorithm?  I started adding some regex to match HTML entities but that feels a bit dirty\n. Well, it seems like there's only really 3 emoji that would be effected by html escaping -- <3, </3, and :'(\nRather than add a bunch of code to escape/unescape and complicate things, since there's only a few, I think I would opt to just add those special cases to the regex \n. How do you feel about the rest of the changes, namely the parsing behaviour?  I changed it so strings like hi there:) wouldn't get converted, but hi there :) would\n. The tests are still in coffeescript, but once we're ready to merge we can just compile them & save the compiled output as JS.  Is it cool to leave them in the repo? \nRight now, you can run them with testem which will do multiple browsers, but I'm not sure how it goes with IE at all.  I think by default testem ci will run against all browsers it detects on your machine\n. Though, simply compiling the tests to JS and then using them feels kinda wrong -- like editing the raw CSS after SASS compile\nPersonally, I'd opt to have the coffee stuff only as a dev dependency (since they're only used in tests)\n. I'd love to see it as an option, but I wouldn't like to see the src way of doing it go away\n. I could see data-uri being a good use-case here, perhaps easier to manipulate in terms of adding new emoji than a spritesheet\nWhen generated as part of the build, it'd also be really easy to choose which to use as a consumer of the lib\n. This looks awesome!\nYeah, I fell into a weird area where I'd have all kinds of issues trying to emojify HTML-escaped content (since I also take untrusted user input).  The tree walker works much better on DOM nodes than the string parser does.  I had a lot of issues with weirdness where things like :'P would not work because ' was HTML escaped to &apost; and the like, so mine contained a few hacks\nI mainly added the string handling code because I was concerned about performance > string > node > insert into DOM > modify & re-insert into DOM\nPerhaps I might look at trying to emojify the node representation before the initial insert, perhaps my string motivation was a bit of an early optimization\n. Oh, it looks like you kept the HTML entities @suprememoocow ?\n. yep :+1: @hassankhan \n. @scripting my PR here https://github.com/hassankhan/emojify.js/pull/35 suggests that your issue should be fixed, are you sure you're using a more recent version of emojifyjs?\n. I've found out why my issue is occuring, and am working on a PR to prevent it.\nBasically, I was trying to emojify the string I&#x27;d (the HTML escaped version of I'd), and it's matching the ;d\n. Yep :) Linked at top\n. No problem :)\n. Do the tests test both codepaths?\n. LGTM :+1: \n. I like the sounds of blacklist for specific emoji :+1: \n. Looks good to me :+1: \n. LGTM\n. Can you still use the string version of emojify?\n. Is that line really necessary?  Won't referencing document automatically look at window.document?\nIf it must be there, I'd probably just wrap it in an if (window) { ... } block\n. I'd be OK with it being a documented note: \"If you are running this on the server, you can only use _____\" type thing in the README.  As a user, I wouldn't expect the DOM related manipulations to work on the server, so I think it's really up to @hassankhan's preference\n. One possibility I can see is separating out the string functions from the DOM functions into two files, and building them into:\n- a string-only .min.js\n- a DOM-only .min.js\n- a string and DOM concat'd .min.js\nMore options for consumption, and perhaps a bit easier to test string-only and dom-only by themselves, and just don't run the DOM tests in node\n. I'm not sure what could really be done here, aside from providing a script to resize all emoji to various smaller sizes with a nice algo vs. relying on browser rescaling\n. I made some more changes, but I'm not sure how you'll feel about them.  The tests illustrate the kinds of things I'm checking for (and emojification I thought made sense), but it might not be in line with your expected behaviours\nAs for keeping the tests in JavaScript, I can understand wanting to remain simple, but let me just paste a diff for visual comparison & readability:\njavascript\ndescribe('emojify on DOM nodes', function() {\n  beforeEach(function() {\n    return this.el = document.createElement(\"DIV\");\n  });\n  describe('with variations of spacing around 2char smileys', function() {\n    it('works with no spacing around :)', function() {\n      var result;\n      this.el.innerHTML = \":)\";\n      result = emojify.run(this.el);\n      return assert.equal('<img title=\":blush:\" class=\"emoji\" src=\"images/emoji/blush.png\" align=\"absmiddle\"></img>', this.el.innerHTML);\n    });\n    it('works with spacing before :)', function() {\n      var result;\n      this.el.innerHTML = \" :)\";\n      result = emojify.run(this.el);\n      return assert.equal(' <img title=\":blush:\" class=\"emoji\" src=\"images/emoji/blush.png\" align=\"absmiddle\"></img>', this.el.innerHTML);\n    });\n    it('works with spacing after :)', function() {\n      var result;\n      this.el.innerHTML = \":) \";\n      result = emojify.run(this.el);\n      return assert.equal('<img title=\":blush:\" class=\"emoji\" src=\"images/emoji/blush.png\" align=\"absmiddle\"></img> ', this.el.innerHTML);\n    });\n    return it('works with spacing before and after :)', function() {\n      var result;\n      this.el.innerHTML = \" :) \";\n      result = emojify.run(this.el);\n      return assert.equal(' <img title=\":blush:\" class=\"emoji\" src=\"images/emoji/blush.png\" align=\"absmiddle\"></img> ', this.el.innerHTML);\n    });\n  });\nvs. \n``` coffeescript\ndescribe 'emojify on DOM nodes', ->\n  beforeEach ->\n    @el = document.createElement(\"DIV\")\ndescribe 'with variations of spacing around 2char smileys', ->\n    it 'works with no spacing around :)', ->\n      @el.innerHTML = \":)\"\n      result = emojify.run(@el)\n      assert.equal '', @el.innerHTML\nit 'works with spacing before :)', ->\n  @el.innerHTML = \" :)\"\n  result = emojify.run(@el)\n  assert.equal ' <img title=\":blush:\" class=\"emoji\" src=\"images/emoji/blush.png\" align=\"absmiddle\"></img>', @el.innerHTML\n\nit 'works with spacing after :)', ->\n  @el.innerHTML = \":) \"\n  result = emojify.run(@el)\n  assert.equal '<img title=\":blush:\" class=\"emoji\" src=\"images/emoji/blush.png\" align=\"absmiddle\"></img> ', @el.innerHTML\n\nit 'works with spacing before and after :)', ->\n  @el.innerHTML = \" :) \"\n  result = emojify.run(@el)\n  assert.equal ' <img title=\":blush:\" class=\"emoji\" src=\"images/emoji/blush.png\" align=\"absmiddle\"></img> ', @el.innerHTML\n\n```\nMight just be personal preference, but I find the lower much easier to read\n. imo I wouldn't merge yet lol, still working out some kinks using my branch live\n. Cool, as I get near the end, I can convert & save them as JS\n. Using emojify on possibly html-entity encoded strings -- what do you think we should do in this case?  Unescape, then run the standard algorithm?  I started adding some regex to match HTML entities but that feels a bit dirty\n. Well, it seems like there's only really 3 emoji that would be effected by html escaping -- <3, </3, and :'(\nRather than add a bunch of code to escape/unescape and complicate things, since there's only a few, I think I would opt to just add those special cases to the regex \n. How do you feel about the rest of the changes, namely the parsing behaviour?  I changed it so strings like hi there:) wouldn't get converted, but hi there :) would\n. The tests are still in coffeescript, but once we're ready to merge we can just compile them & save the compiled output as JS.  Is it cool to leave them in the repo? \nRight now, you can run them with testem which will do multiple browsers, but I'm not sure how it goes with IE at all.  I think by default testem ci will run against all browsers it detects on your machine\n. Though, simply compiling the tests to JS and then using them feels kinda wrong -- like editing the raw CSS after SASS compile\nPersonally, I'd opt to have the coffee stuff only as a dev dependency (since they're only used in tests)\n. I'd love to see it as an option, but I wouldn't like to see the src way of doing it go away\n. I could see data-uri being a good use-case here, perhaps easier to manipulate in terms of adding new emoji than a spritesheet\nWhen generated as part of the build, it'd also be really easy to choose which to use as a consumer of the lib\n. This looks awesome!\nYeah, I fell into a weird area where I'd have all kinds of issues trying to emojify HTML-escaped content (since I also take untrusted user input).  The tree walker works much better on DOM nodes than the string parser does.  I had a lot of issues with weirdness where things like :'P would not work because ' was HTML escaped to &apost; and the like, so mine contained a few hacks\nI mainly added the string handling code because I was concerned about performance > string > node > insert into DOM > modify & re-insert into DOM\nPerhaps I might look at trying to emojify the node representation before the initial insert, perhaps my string motivation was a bit of an early optimization\n. Oh, it looks like you kept the HTML entities @suprememoocow ?\n. yep :+1: @hassankhan \n. @scripting my PR here https://github.com/hassankhan/emojify.js/pull/35 suggests that your issue should be fixed, are you sure you're using a more recent version of emojifyjs?\n. I've found out why my issue is occuring, and am working on a PR to prevent it.\nBasically, I was trying to emojify the string I&#x27;d (the HTML escaped version of I'd), and it's matching the ;d\n. Yep :) Linked at top\n. No problem :)\n. Do the tests test both codepaths?\n. LGTM :+1: \n. I like the sounds of blacklist for specific emoji :+1: \n. Looks good to me :+1: \n. LGTM\n. Can you still use the string version of emojify?\n. Is that line really necessary?  Won't referencing document automatically look at window.document?\nIf it must be there, I'd probably just wrap it in an if (window) { ... } block\n. I'd be OK with it being a documented note: \"If you are running this on the server, you can only use _____\" type thing in the README.  As a user, I wouldn't expect the DOM related manipulations to work on the server, so I think it's really up to @hassankhan's preference\n. One possibility I can see is separating out the string functions from the DOM functions into two files, and building them into:\n- a string-only .min.js\n- a DOM-only .min.js\n- a string and DOM concat'd .min.js\nMore options for consumption, and perhaps a bit easier to test string-only and dom-only by themselves, and just don't run the DOM tests in node\n. ",
    "hassankhan": "Me neither, that's kind of why this issue's never been closed. Perhaps one day someone smarter than us will come up with a solution :smile: \n. Not sure if its completely applicable, but I think I might add some more CSS:\n``` css\n.emoji {\n  ...\n  text-rendering: auto; // optimizelegibility throws things off #1094\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  transform: translate(0, 0); // ensures no half-pixel rendering in firefox\n}\n``\n. The fix was actually simpler than I thought, changed@emoji-sizeto 1.5em as a constant, seems to fit well within the text I tested.\n. Fixed the issue for Chrome and Safari at least. Internet Explorer fails on theappendChild()function on line 680.\n. Fixed by not giving a shit. Sayonara, IE9!\n. Added sane defaults, fixed in [commit 9c2361f](https://github.com/hassankhan/emojify.js/commit/9c2361fc264a9efc40984cfdc0c1ae6abc915578)\n. Its better this way.\n. Thank you for using it and making this pull request, you've made my day!\n. Yep done that :)\n. Yeah, thought I'd leave it out, in case someone wanted to strip unnecessary ones out\n. Well I thought if you didn't need specific sets, then you could just remove the LESS for them? Do you know how to dynamically load in stylesheets as needed? This should be definitely be an enhancement.\n. Just thought of a crude way, should work though. Using jQuery, add in a new` tag pointing to the stylesheet. Only thing is, you'd probably still need a way of knowing where each emoji icon is. \n. Yeah the point of emojify.js was explicitly NOT have to have separate images, I suppose one could separate the emojis into stylesheets by category, but that's probably the closest this can get to a better solution.\n. Sorry for the late reply, thank you very much for your detailed response. \nSince its more than overdue for a refactor, I will be taking your suggestions into account. Thank you.\n. Cool, thanks. but that's only for one emoji if I'm not mistaken (correct me if I'm wrong). Would rather have a solution that works for all, could probably throw in an exclude words array and join that with the emoji code.\n. Errr yeah you can, its not perfect but just add class='no-emojify' to your <pre> tags.\n. Hmmmm ... well you can mix normal HTML and Markdown, which IS valid Markdown. If you don't want to do that, then you could probably specify (by id) which elements you want to emojify:\nemojify.setConfig({\n    only_crawl_id: 'messages_container'  #only do this when you want to restrict where emojify.js applies.\n});\nOther than that though, I'm not sure what else you could do. I don't have time right now, maybe I could look into updating it over the weekend (and possibly turning into a jQuery plugin). \n. Go to less\\emojify.less and comment out whichever emojis you don't want. Hope that helps?\n. AMD as in Javascript? Any specific benefit it would bring?\n. Errrr shouldn't be that way, no. I'll have to double check it.\n. A JSfiddle example would've been more helpful, still haven't had time to look at it.\n. http://jsfiddle.net/hassankhan/99JRb/\n. I'm not sure where exactly its going wrong, and its been so long since I've looked at it that its not quite clear to me any more.\nSince its pretty crap, might throw in the towel and do a rewrite :)\n. Hi there, you need to compile the LESS to CSS yourself. You can do it online, or by downloading and using a LESS compiler.\n. Oh sorry, overlooked that, I'll fix the readme. Thanks :smile:\n. Sweet, looks good to me, does it work correctly?\n. Cheers, thanks :smiley: \n. Ah that's alright, I was kind of in the middle of some work on it myself so I'll sort it out myself. Thanks anyway.\n. Yeah sounds awesome! Please do :+1: \n. I think this is probably unnecessary thanks to the awesome work by GitterHQ :smile:\n. Ah, sorry dude, I just saw this. :disappointed: \n. I thought it'd be better to keep it there, any specific reason you think it should be removed?\n. Oh. My. God.\nI think I'm in love with you guys, thank you so so so much! Definitely accepting the PR, didn't realise that this would ever be that useful to anyone so I'm quite shocked (in a good way)\n. Yeah I'll be sure to, just browsed through the code and it's a pleasure to read. I was wondering if you'd grabbed the latest version of the emoji-cheat-sheet repo when you rewrote it?\n. Haha yeah, that's been something that I've been meaning to do for ages to. To be honest with you, when I first wrote it, I did it manually :persevere: but a build script would be awesome.\n. Also, would you mind terribly if I added \"Used by Gitter\" in the readme file?\n. @jimmybrancaccio Hopefully will update soon with latest source from emoji-cheat-sheet\n@mydigitalself I most certainly will :smile: \n. Hiya, thanks for the awesome PR! Looks good to me, but I would personally prefer the tests to be in Javascript, if possible :smile: \nThanks a lot for taking the time to write the tests though\n. Haha thanks for the heads up, ummm, to be completely honest with you, I do prefer the Javascript syntax :blush: if only for the fact it keeps the project somewhat uniform\n. That's a good point, actually, I'm not sure. I think it should, but I agree with you about feeling dirty about it.\nActually, yes, I think unescaping and then matching them would probably be the best bet, unless you have another better-er idea :smile: \n. Yep, if anything I believe that was how it used to work (or at least was how it was intended to work)\nAlso, a massive thank-you for doing all of this.\n. Also including @suprememoocow in the conversation, since Gitter's using it on their site, might be worth making sure it doesn't break anything for them, too.\n. Mate, every time you comment I learn something, never heard of Testling before but it looks awesome. I think @qq99 is happy with Javascript tests as well, so if everything's good I'll go ahead and merge (personally haven't checked the tests yet, so let me know)\n. Closed in favour of #27 \n. Haha thanks for checking, but are all the emojis on the website working for emojify.js? I'm pretty sure (but don't quote me on this) that they've added a fair few new ones :smile: \n. Yep, forgot to close it. By way of interest, would you like to be added as a collaborator to the repo?\n. I think I might make this at the least, some sort of an option. While I personally appreciate the advantages that spriting brings, I think that's best left to the actual web developers themselves. \nSome people might only want a handful of emojis, and would rather not download the whole sprite. I remember a few issues people opened saying they didn't want to download a CSS file full of data-URI images. I thought I'd made it pretty easy with the LESS file, but some didn't agree.\nWhat can be done, however, is using the emoji name as a class name. You would create your spritesheet, and it would automatically add emoji <emoji name> to the class attribute of the tag. It's a fairly simple change, maybe @suprememoocow could share his views?\n. I'm personally not sure, I'd rather leave it up to the user. We provide all the images, it should be up to the end user to turn them into sprites if they so wish.\nThat said, if we DO add this, I'd prefer it to be a Grunt task. Thanks all :+1: \n. That sounds about right, I think there are some other things we might want to do, for example, we might want to prefix the classes with something, probably emoji i.e. emoji-wink, emoji-smile etc. Then add an option as you mentioned to tell emojify.js to use a stylesheet.\nLook forward to seeing your PR :+1:\n. Closed in #98\n. Sweet, thanks for catching this one :smile: \n. Fucking aces, man, nice work! :kissing_heart: \n. If it's alright with you @qq99 then shall I merge this PR and close your one?\n. Thanks again guys, really appreciate the effort you've put into this :smile: Can't seem to get Testling CI working, but that's probably due to my own incompetence.\n. Good catch, nice job with the tests too. I've added you as a collaborator on the repo, so if you push directly to the repo, it should work, unless you'd rather do a PR?\n. Awesome, all done :+1: \n. I'll leave this open until the documentation is accurate.\n. Fixed the README, closing the issue now.\n. Hiya, thanks for the PR :smile: could you add a test case or two as well?\n. I've tried writing tests, and it failed for me.\n. We have the ignore_emoticons option, anyway\n. Thanks @dunckr, I believe it used to do this before the recent rewrite, but I may be mistaken. In any case, thanks for the PR!\n. Yep, looks brilliant to me. Thanks!\n. Can you provide some more context? What were you trying to do?\n. Ah, nice catch. The old version used to have the same bug as well. Thanks!\n. That's weird, I'll try and have a look later this week.\n. Ahhh perfect, thanks so much.\nAs a sidenote, does this resolve #36?\n. Thank you for your amazing work again, @qq99!!\n. Sorry, I haven't had time to look into the PR yet, hopefully one of the other contributors might be able to help.\nI'm not quite sure I understand what the new option does, or if it's named correctly, perhaps? \nIf it is set to true (default), then hello:( would render an emoji, otherwise not? If that's the case, then maybe instead of adding an option, we could do some sort of check to see if it's the end of the text and render based on that.\n. I don't know if this is the case, but do you run the Markdown parser first and then emojify.js? If all the markdown is converted to HTML, then it wouldn't happen at all surely?\n. Perhaps it would be best to not emojify the text if you're trying to display raw Markdown? You could add an id attribute to the diff view and have Emojify.js exclude it? This is all armchair conjecture, I haven't seen your project at all.\nThanks\n. Hi @tessi, I think it might be better to limit where Emojify works instead. Currently it works on everything unless you restrict it to an id, perhaps we can add an ID for exclusion as well. I'll close this issue, and maybe we could try another PR adding exclusion support?\n. Yep, I will do shortly, just made an account on npmjs.org\n. Sorry, been busy flying between countries, now I'm back at work, will have to look at it on the weekend :smile: \n. All done: https://www.npmjs.org/package/emojify.js\n. Sorry it took so long, I think I might've found a bug in npmjs.org.\n. Other than what I mentioned above, it looks sound to me. Obviously as you said, you'll add the tests, so I'm happy :+1: \n. +1 from me, maybe @qq99 and @suprememoocow could share their thoughts, too?\n. Awesome, I'm happy to wait for a second set of eyes to look through the PR.\n. +1 from me I think, looks pretty complete to me.\n. Thanks all for your input!\n. ### ~~Use shim for IE8 and co.~~\nRelevant issue\n~~Spritesheets~~\nRelevant issue\n. ### ~~Cleanup project root~~\nRelevant issue\n. ### ~~Automate version bumping~~\nRelevant issue\n. ### ~~Add emojify.js to a CDN~~\nRelevant issue\n. ### Remove images directory\nNow part of this issue\n. ### ~~Support Node environment properly~~\n~~Relevant issue~~\nRelevant issue\n. ### Add code coverage results\nRelevant issue\n. Have you perchance got ZenHub installed on Chrome? I installed it yesterday, has a pretty good board (or at least I thought so)\n. Yep, I agree. Last thing I wanted to do was integrate the failing test PRs (#62 and #57) and see if those've been fixed. If that's all good, I think it's time to release 1.0!!\n. Oh, actually there was one more thing I wanted to do: tidy up config options. I'll try and find some time this weekend to land that, then I'm happy for you to release.\nBTW, can you even submit to npm for me? I thought I had to update my npm packages myself :confused: \n. There's an open issue (#87) for the config options. I'll run the npm owner command when I get home later tonight, hopefully :smile: Might also be worth adding npm publish to the gulp release command\n. Hiya, sorry it's been mental at work launching a few campaigns, will probably do the release over the Xmas break\n. I'd prefer a 0.10 release first, before I get some time to redo the options.\n. v1.0 is finally out, thanks everyone!\n. Hi there, not quite sure what this PR is trying to achieve, why do you need those specific emoji and not the rest?\n. I think I understand what you're talking about, however I don't think hardcoding specific emoji keywords is the solution. Perhaps a more programmatic way of defining the emoji you want to convert would be better.\n. Hmm, ok, I misunderstood what the named key did. @qq99 @suprememoocow any thoughts?\n. Thanks for the PR!\n. Pretty sure I added Emojify.js to the NPM registry a while ago, if I merge this PR, will it update automatically?\n. Ok, I'll double-check when I'm at home :+1: \n. Any issues I might not have seen @qq99 @suprememoocow ?\n. @leoasis Do you think you could remove the whitespace and commit again? Happy to merge after that.\n. Thanks for the PR! Also, while we're here, correct me if I'm wrong, but if I run npm publish on the folder, shouldn't it update by itself? I seem to be getting errors :frowning: \n. Haha thanks, I figured that out a second ago and fixed it. It's all good now :+1: \n. Do they have a repo or anything anywhere? Can't seem to find one...\n. Ahh this is pretty awesome news! I'm sure we could tweak the update.sh script to be able to modify where it updates from, and Emoji One provide PNGs anyway.\n. Not as easy as I initially thought, the PNG's are named by their unicode points BUT on the plus side, they also have SVG formats too!\nEDIT: Found emoji.json which lists them all along with their unicode codepoint\n. I think it'd be great if we turned this into a gulp task.\n. Doubtful, Internet Explorer is this library's weak point.\n. I think we should ask @suprememoocow, he spent a lot of time rewriting it to make it performant, so I'd hate to lay waste to his work.\n. Oooh, that'd actually be quite cool. \n. @JustBlackBird Well, we already have a Testling banner that shows support across different browsers. Is that what you meant?\nIn general, I'm :+1: on this, if it isn't too much work.\n. Hmm ok, but how would we automate testing it if it actually works using the shim i.e. using Testling? \n. I'll be honest with you, I'm not sure where to start with respect to making tests work like that. Do you think it would be possible to make a quick proof-of-concept PR just so I can see how it would work? Once we know for sure that it works with the shims, then I'll update the documentation, too, thanks :smile: \n. Ah bollocks to it, if someone wants to run it on IE8, they can do it at their own risk. I'll add a disclaimer.\n. Sorry, been really busy at work and not had any time over the weekend. Apparently there's a merge conflict, so I'll resolve that tomorrow hopefully and merge the PR. Thanks!!\n. There were some line ending issues, apparently I hadn't set core.autocrlf=true on my laptop :confused: Anyway all done now, thanks!\n. Could you add a failing test please? \n. Will follow up here\n. I believe they are listed on the GitHub pages. Thanks for pointing this out!\n. How so? I don't understand :confused: \nEDIT: Ahhh, as it stands, some don't work, and some don't work because they're lowercase/uppercase.\n. Yes, that was always the plan, I just got lazy and haven't updated the GH Pages in a while\n. I've updated README.md. Is it better now?\n. This little snippet?:\ncss\n.emoji {\n    width: 1.5em;\n    height: 1.5em;\n    display: inline-block;\n    margin-bottom: -0.25em;\n}\n. I think it might be better to add that as a LESS file, like I used to originally. I'm going to make a separate issue for it and close this one now. Thanks!\n. Well, not exactly. It's just sample styling ... no-one has to use it. Once it's there I'll remove it from gh-pages.\nAlso, all these files need to be organised, and that's something I wanted to do as part of moving to Gulp. I've made a feature branch on my machine, but having trouble putting all the pieces together.\n. I remember some discussion before about people not wanting to use them, which is probably why they were removed :frowning: \nEDIT: Okay, maybe I'm making that up ... can't seem to find anything in the issues :confused: \n. That makes sense, as in the distributed versions would have the default styling in them. In that case though, wouldn't it be better to have a styles.less in the src/less folder? That and the result of the css-sprite task get compiled, minified and put in the dist folder as emojify.min.css\n. Excellent, let's move the conversation over to #70 \n. Yep thanks for creating the issue, I recently noticed the same myself actually.\n. This is sort of one of the reasons I never really thought about Node when I wrote this, I'm not quite sure how it would work. I was sort of hoping that it would just work by itself, but it does not unfortunately. Maybe other contributors might have better ideas/solutions? @qq99 @suprememoocow \n. I never really quite got the use-case of running it on the server, and as such it was never a priority IMO. However, I'm looking at moving emojify.js to 1.0 and continually want to make it useful, so I'm not ruling it out. \nFor now, I'm in agreement with @qq99, using .replace() would be the way to go on the server. Let's just get it working on Node for now. In a future release, we can definitely improve on it. \n@adam-lynch: If you'd kindly make a PR, I'll merge.\n. Closing in favour of #67 \n. Thanks for the fix!\n. I really like that, thanks for sharing the link!\n. I'd like to make one addition to that, actually\n[*]\nend_of_line = lf\ninsert_final_newline = true\nIf you would be so kind :smile: \n. https://github.com/hassankhan/emojify.js/blob/gh-pages/stylesheets/emojify.min.css should be the only CSS stylesheet you require to display emoji. But not even really that.\nAnd thanks for the link to main-bower-files btw, but I don't understand how that would work with this project.\n. The idea was always to provide the end-user with the tools required to generate their own - you should always create your own, the default CSS is provided for testing purposes more than anything.\n. Could you possibly add another test to the same branch highlighting that too?\n. Cheers mate :smile: \n. I think the tests are still failing:\n```\n\u001b[0K$ npm test\n\nemojify.js@0.9.4 test /home/travis/build/hassankhan/emojify.js\ngrunt test-node && phantomjs phantom.js\n\n\u001b[4mRunning \"mochaTest:test\" (mochaTest) task\u001b[24m\n\u001b[0m\u001b[0m\n\u001b[0m  emojify in a Node environment\u001b[0m\n\u001b[0m    .replace\u001b[0m\n\u001b[2K\u001b[0G    \u001b[31m  1) \"before each\" hook\u001b[0m\n\u001b[92m \u001b[0m\u001b[32m 0 passing\u001b[0m\u001b[90m (6ms)\u001b[0m\n\u001b[31m  1 failing\u001b[0m\n\u001b[0m  1) emojify in a Node environment \"before each\" hook:\n\u001b[0m\u001b[31m     ReferenceError: window is not defined\u001b[0m\u001b[90m\n      at /home/travis/build/hassankhan/emojify.js/emojify.js:19:28\n      at /home/travis/build/hassankhan/emojify.js/emojify.js:302:11\n      at document (/home/travis/build/hassankhan/emojify.js/emojify.js:9:26)\n      at Object. (/home/travis/build/hassankhan/emojify.js/emojify.js:14:2)\n      at Module._compile (module.js:456:26)\n      at Object.Module._extensions..js (module.js:474:10)\n      at Module.load (module.js:356:32)\n      at Function.Module._load (module.js:312:12)\n      at Module.require (module.js:364:17)\n      at require (module.js:380:17)\n\u001b[0m\n\u001b[33mWarning: Task \"mochaTest:test\" failed.\u0007 Use --force to continue.\u001b[39m\n\u001b[31mAborted due to warnings.\u001b[39m\n\u001b[37m\u001b[40mnpm\u001b[0m \u001b[0m\u001b[31m\u001b[40mERR!\u001b[0m\u001b[35m\u001b[0m Test failed.  See above for more details.\n\u001b[0m\u001b[37m\u001b[40mnpm\u001b[0m \u001b[0m\u001b[31m\u001b[40mERR!\u001b[0m \u001b[0m\u001b[35mnot ok\u001b[0m code 0\n\u001b[0mtravis_time:end:10161195:start=1411419501247976292,finish=1411419502519079284,duration=1271102992\n\u001b[0K\n\u001b[31;1mThe command \"npm test\" exited with 1.\u001b[0m\nDone. Your build exited with 1.\n``\n. I would've thought the pull request branch on Travis-CI would run againstmasteron the repo, not your fork. Oh well, thanks for sorting that out :+1: \n. It's an interesting idea, but I'm not quite sure if there's that much of a need for it. You said you needed it for emails, maybe you could use a style inliner instead? I know of at least [one](https://github.com/dwightjack/grunt-premailer)\n. I always thought [Premailer](https://github.com/premailer/premailer) was quite good, it's what I use at work, sure it doesn't suit your needs?\n. Actually .... I've just remembered, you can usereplace(htmlString, replacer), wherereplaceris a callback function (seedefaultReplacer[in the source](https://github.com/hassankhan/emojify.js/blob/master/emojify.js#L152)).\n. I know, you're totally right, the readme is in dire need of a good rewrite. Hope that helps with your use case now, though :smile: \n. Leaving it open so I remember to update the readme\n. Well, it currently uses theimg_dir` value passed in the config object. Is that what you're referring to?\n. I don't think it needs to be, necessarily. Any specific reason why, other than good practice?\n. Yeah that was one of my concerns.\n. I don't agree with the need for all three to be passed (i.e. the emoji found, the name and the emoji). Right now you get the emoji/emoticon pattern that was matched, and the corresponding image name. \nHaving the image directory passed through can/maybe should be done, but as it currently stands you can retrieve it from defaultConfig anyway, right?\n. I've updated README.md, mind having a quick read, see if I've missed anything out?\n. js\nfunction newReplacer(emoji, name) {\n    return emojify.defaultConfig.emojify_tag_type; // Will be whatever you set it to with `emojify.setConfig()`\n}\nThanks, I'll update README.md again\n. If you don't pass an image base URL, the default is 'images/emoji', just like it says on the readme. I do agree, though, defaultConfig is misleading. defaultConfig should be the defaults, and there should probably be a config object that is a copy of it, which gets overwritten by emojify.setConfig()\n. Updated readme in 81573459441ed0d417ccb50823695083d76ec445. Better? I haven't gotten around to the GitHub Pages yet, I'm going to just leave it as a live sample, and make it point to the repo for everything else.\n. Nice!! Looks much better :smile: \n. Pushed another update, mind have a look, please? :smile: \n. Ok, pushed again. \n\nI so wish I could do this in Node! :smile:\n\nHaha, well I'm planning to remove that in favour of a blacklist option which would have that as a default instead.\n. Guess this can safely be closed now :+1: \n. Haha the test name is really funny\n. Do you think you could maybe give it a go @trevorah?\n. Awesome, thanks! :smile: \n. Merged into develop. Thanks!\n. Merged into develop. Thanks!\n. Merged into develop. Thanks!\n. Merged into develop. Thanks!\n. Personally I'd prefer the same API on both, wherever possible.\n. @4ver has made a PR (#99) that seems to check all the boxes, marking this as a duplicate and continuing discussion at #94. \n. Merged into develop. Thanks!\n. Thanks, let me know if this fixes the problem. I've been having issues with line-endings lately, so that may have been the reason.\n. I don't think anyone's really used the replacer callback before, at least, not to my knowledge. Also, since we're aiming to get to 1.0 soon, I'm not too worried.\n. Yeah I know, in general I try to, just that I've already tagged the release and it'll be getting changed soon enough anyway.\n. HI, could you make the change on the develop branch please?\n. Also, can you update the readme as well? Thanks :smile: \n. Cheers :+1: \n. There may have been a specific reason @suprememoocow didn't use it, I'd like to run some tests before I merge, thanks!\n. Merged into develop. Thanks!\n. Hmmm that's odd, I'll try and remember to do this tonight :+1: \n. Just pushed 0.9.5 in c9568789ee1602b3beccca9f4e43b5c4b2b9a882, let me know if you have any issues :smile: \n. Could you branch from develop and resend?\n. I must've accidentally gotten rid of it when I rewrote the readme. Thanks for pointing it out! :+1: \n. I'll just use what they are then:\n```\noctocat, squirrel, shipit\nCopyright (c) 2012 GitHub Inc. All rights reserved.\nbowtie, neckbeard\nCopyright (c) 2012 37signals, LLC. All rights reserved.\nfeelsgood, finnadie, goberserk, godmode, hurtrealbad, rage 1-4, suspect\nCopyright (c) 2012 id Software. All rights reserved.\ntrollface\nCopyright (c) 2012 whynne@deviantart. All rights reserved.\nAll other images\nCopyright (c) 2012 Apple Inc. All rights reserved.\n```\nShould I put it in a separate file?\n. Fixed in b53a3115dde94bd61b661a078ba0fb8aa01a16f0. Thanks! :smile:\n. You haven't set ignore_emoticons to true by any chance?\n. Actually, yes, emoticons (like :) for example) shouldn't be surrounded by ::. \n. On the develop branch please? :smile: \n. It shouldn't be too problematic; any new branch should be branched from develop too, you don't want to work from master :wink: \n. Any reason why? Usually providing a version like ~1.0 gets you the latest tagged version. Also, this is based off master again.\n. Ah right, I confused myself. Will merge tonight :+1: \n. I was watching your commit history (I have your repo added as a remote) and I'm so glad you got rid of the event-stream stuff :grinning: \n. Mind if we speak in the Gitter room?\n. :+1: thank heavens you did\n. Got a reply on Twitter, apparently they're broken for a few more months.\n. Rationale for getting rid of only_crawl_id: Because right now, if you don't pass emojify.run() any parameter, then it checks only_crawl_id, and if that's not specified it does the whole document body.\nI propose changing it so you can do emojify.run('#content') and internally use document.querySelector() to do the magic. If you don't pass a parameter, it processes the rest of the body as usual.\n. Hi, little update, I think it might also be a good idea to remove ignored_tags and make both the blacklist and whitelist options be an array of valid selectors.\n. Update 2: The whitelist and blacklist options are now objects, rather than arrays:\njson\nblacklist: {\n  \"elements\": [\"body\", \"code\", \"script\"],\n  \"classes\": [\"no-emojify\"],\n  \"ids\": [\"special\"]\n}\n. Quick update, I've added the blacklist option and renamed emojify_tag_type. I'll leave any other improvements till later so v1.0 can be released.\n. Also would be good if we got rid of all of those images, and seeing as different emoji sets may be a new feature, it doesn't make sense to keep them in the repo. Because people (probably) rely on the generated goods, we can just use the data-uri images to output a CSS file.\n. Awesome job by @adam-lynch!\n. Nice one @adam-lynch :wink: \n. Well, I hope I'm wrong but I can't seem to find a way to get code coverage from jstest.\n. Well, you can get some sort of coverage information, but no way of converting it to LCOV :frowning: Looks like we might have to switch back to Mocha (+ Chai)\n. Thanks for the link! I'm checking them out now\n. @PeterDaveHello added it to cdnjs in #106, so I think I'll close this issue.\n. Does this have any appreciable effect performance-wise? I would think not, but it would be nice to know? I'll admit, I was a bit against it to begin with but I'm slowly warming to the idea.\n. Alrighty then, I think it's the right thing to do, looking forward to seeing some more commits :smile: \n. I agree, passing a DomElement would be ideal\n. I think @4ver's PR satisfies the two checkboxes in the first post, anyone else care to share their thoughts?\n. I believe this issue's ready to be closed, since I've merged #99 \n. Could you also put the source files in a src directory too?\n. Thanks!\n. Overall I quite like it, thanks for all your work! \nI had a few nitpicks, but after going through it all again it seems I only have one:\n~~I'm not quite sure that run() needs the replacer function at all, but I'm sure you have a use-case in mind, could I maybe get an example?~~\nI just realised the whole point of this is to get it running on node as well /facepalm\n. Actually, #94 raises a good point here, if we send in a DomElement anyway, then does run() really require a replacer parameter?\n. But what if there's a mode parameter, like you suggested? In that case, we could just switch the replacer internally, right?\n. Thanks man! :smile: \n. Not quite sure if we should have to make changes because jsDom doesn't support what we need. There is an open issue on their repo, maybe we should pester them to get it working.\nThe only reason I'm hesitant to get rid of TreeWalker is performance-related, last I checked it beats other methods of traversal, but I did check a long time ago :smile: \n. Yep, I'd be happy with that, the other thing, I'd rather it didn't have to pass a window object in run(), am I missing something?\n. Thanks @4ver!\n. I'll take care of this one ;)\n. Closed in 35a2cc12c6c20c058ab0cb505154319dbf226c3a\n. I'm thinking a simple test setup, we give it a mock blog post HTML page, and get it to run emojify.js on it (x100 times) through both node and browser tests. Time those results, average them, and create a data point which we can use in a graph.\nNeed to find:\n- ~~Timing tests libraries~~\n- Graphing libraries\n- Mock HTML\n. Cheers for that!\n. Hi, please make a PR on the develop branch. Thanks!\n. Thanks very much for doing this! Quick question, will this update automatically or does it need to be manually updated?\n. This might be useful\n. Let me know when this is okay to merge and I'll do it. Thanks!\n. Thanks a bunch for all your hard work!\n. Yeah that sounds cool, although if it runs on node isn't it guaranteed to run on any platform where node is installed?\n. Oh right, just thought I'd ask, I was sure you had a good reason :+1: \n. FYI I'll make you a collaborator on this repo later tonight hopefully\n. Done\n. Seems to be working but failing hard thanks to css-sprite.\n. Because the idea is we provide the bare essentials, and you are free to do whatever you like to it in your own project :smile: \n. Hopefully this'll be covered in a future update :+1: \n. Done\n. I can't seem to reproduce the problem...\n. This is still a bug in master\n. Not too sure, we discussed this before didn't we? It's clear from the README that we only support IE9+, if you want to use anything below you should use the shim.\nI'm not opposed to adding the shim as part of the package, but I'd love to hear from other contributors. @adam-lynch, @4ver, @qq99 thoughts?\n. Yeah I think we do have some aliases (based on emoji-cheat-sheet.com), so it shouldn't be a massive problem adding those in.\n. I would say you should add no-emojify to your icon classes, but try updating and let me know if it's still an issue\n. If you update, you should be able to provide a blacklist.classes array of classnames you don't want emojified.\n. Any luck?\n. In the source, blacklist is an object, like so:\njs\nvar defaultConfig = {\n    blacklist: {\n        'ids': [],\n        'classes': ['no-emojify'],\n        'elements': ['script', 'textarea', 'a', 'pre', 'code']\n    },\n    tag_type: null,\n    only_crawl_id: null,\n    img_dir: 'images/emoji',\n    ignore_emoticons: false,\n    mode: 'img'\n};\nSorry, I'm unable to test right now because I'm at work :smile:\n. Yeah I remember this, any ideas on how to get around it? Call it plus1 instead?\n. Would you mind checking again on the latest version? Thanks\n. Thanks for reporting back!\n. You should really thank @adam-lynch and @4ver, this was all their work :smile: \nPS: I don't understand why Bower isn't updating, everything seems to be in order :confounded: \n. Thanks for pointing that out, clearly something's gone wrong with package.json, I'll do another release when I get home\n. https://github.com/hassankhan/emojify.js/blob/master/.npmignore#L1\n. I've published a new version on NPM, could you try it out and let me know? It seems to work for me\n. This is pretty awesome, should definitely be added.\n. Yeah this has kind of been on hold lately, it would be nice to see a PR :wink: \nThe only thing is I don't think it'd be great to limit ourselves to just the GitHub emoji, in an ideal world, we'd be able to use different sets (EmojiOne, Twitter etc.)\n. Yeah there are a few aliases in there, it's not a bug, it's a feature (cringes)\n. You can go to emoji-cheat-sheet.com, that's where we pull all our emojis from :smile: \n. Thanks! Could you also add a test case?\n. I thought this got fixed in #57 :disappointed: \n. Ahhhh righty, I thought the issue got fixed somewhere along then\n. We pull all emojis from emoji-cheat-sheet.com, if the icons are incorrect could you please create an issue on their tracker? Thanks! :smile: \n. Ahhh okay, I'll update and do a new release. Thanks!!\n. Can you send me the source HTML?\n. If you could send me a reproducible test case on JSFiddle or similar, it would be really helpful. Thanks :)\n. As a workaround, apply the no-emojify class to your <a> tags\n. You could either remove the http:// prefix, or wrap the link with any tag (<span>, <a>, <p>) and give it the no-emojify class. I can't think of any other way right now :(\n. I'd leave it open for now, it's a bug that needs to be fixed. Thanks for reporting the issue!\n. Can you do this on develop instead of master please? Thanks :smile: \n. Yeah I don't see any reason why not, definitely add it to the PR! \n. Hi Adam, I asked the EmojiOne folk to take ownership of the project, we'll all stay on as contributors but I think it's a better home for the project :)\n. The repo will be moved to the Ranks org, I believe, this is just temporary. \nEmojiOne won't be changing much in terms of code, they don't have enough time to do it themselves. Any issues/features/bugfixes can still go ahead :smile: \n. It's all done now! \n. Hi guys, any update on this? Would it be possible to get write access so we can merge PRs and such? :smile: \n. Thanks, got it this time :smile: \n. I've recently transferred the repo to Ranks and lost my write access in the process. I'll ping them and try and get this merged :)\n. Thanks for the PR! :+1: \n. Hi, since we currently depend on emoji-cheat-sheet for emoji, we will have to wait till they add them :)\n. Hi there, not quite sure what's happened. Anyone got any ideas?\n. I'll try running npm publish again\n. I've tried doing another release, nothing worked. I really have zero ideas on what's causing this ... to my knowledge the .npmignore hasn't changed, nor has anything else. Any help from anyone else would be highly appreciated\n. No build errors or anything, no. Seems like an issue with NPM or an *ignore file.\n. I believe it's all working now, really really sorry for the inconvenience\n. My pleasure, sorry it took so long\n. +1 will need to check this out, I didn't think it worked that way\n. Hi sorry, hadn't had a chance to review. Thanks! :+1: \n. Yeah definitely go for it! :smile: \n. Have you tried removing the node_modules folder and running npm install again?\n. Weird, I had the same error a while ago. Looks like css-sprite has been deprecated in favour of sprity, I think - that'll need to updated at some point too I imagine :/\n. Is this on the latest tagged release?\n. Bower automatically updates to the latest tagged release on Github.\n. Hi, could you do a PR on the develop branch? Thanks :+1: \n. Thanks very much :smile: !\n. I'm really sorry guys, if anyone can come up with a PR that'd be mighty helpful - I'm not sure any of the contributors have much spare time at the moment.\n. Could you make this PR target the develop branch, please? Thanks\n. I wrote this library back when browsers didn't - as such this library is outdated and in urgent need of some love.\n. It's not mine - its here, seems to have most of the options this has and then some.\nI just don't do a lot of frontend any more, haven't had the chance to give this the attention it needs and doubt I will be able to in the foreseeable future. It's had a nice long run, and I'm glad it's helped so many people, but I just don't have time any more to maintain this :(\n. No problem :)\n. Sorry that you had to deal with it, unfortunately I'm not really maintaining this library any more \ud83d\ude1e . I'm sorry the project isn't maintained any more, feel free to fork this repo and make any changes to it. Sorry \ud83d\ude2c . Me neither, that's kind of why this issue's never been closed. Perhaps one day someone smarter than us will come up with a solution :smile: \n. Not sure if its completely applicable, but I think I might add some more CSS:\n``` css\n.emoji {\n  ...\n  text-rendering: auto; // optimizelegibility throws things off #1094\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  transform: translate(0, 0); // ensures no half-pixel rendering in firefox\n}\n``\n. The fix was actually simpler than I thought, changed@emoji-sizeto 1.5em as a constant, seems to fit well within the text I tested.\n. Fixed the issue for Chrome and Safari at least. Internet Explorer fails on theappendChild()function on line 680.\n. Fixed by not giving a shit. Sayonara, IE9!\n. Added sane defaults, fixed in [commit 9c2361f](https://github.com/hassankhan/emojify.js/commit/9c2361fc264a9efc40984cfdc0c1ae6abc915578)\n. Its better this way.\n. Thank you for using it and making this pull request, you've made my day!\n. Yep done that :)\n. Yeah, thought I'd leave it out, in case someone wanted to strip unnecessary ones out\n. Well I thought if you didn't need specific sets, then you could just remove the LESS for them? Do you know how to dynamically load in stylesheets as needed? This should be definitely be an enhancement.\n. Just thought of a crude way, should work though. Using jQuery, add in a new` tag pointing to the stylesheet. Only thing is, you'd probably still need a way of knowing where each emoji icon is. \n. Yeah the point of emojify.js was explicitly NOT have to have separate images, I suppose one could separate the emojis into stylesheets by category, but that's probably the closest this can get to a better solution.\n. Sorry for the late reply, thank you very much for your detailed response. \nSince its more than overdue for a refactor, I will be taking your suggestions into account. Thank you.\n. Cool, thanks. but that's only for one emoji if I'm not mistaken (correct me if I'm wrong). Would rather have a solution that works for all, could probably throw in an exclude words array and join that with the emoji code.\n. Errr yeah you can, its not perfect but just add class='no-emojify' to your <pre> tags.\n. Hmmmm ... well you can mix normal HTML and Markdown, which IS valid Markdown. If you don't want to do that, then you could probably specify (by id) which elements you want to emojify:\nemojify.setConfig({\n    only_crawl_id: 'messages_container'  #only do this when you want to restrict where emojify.js applies.\n});\nOther than that though, I'm not sure what else you could do. I don't have time right now, maybe I could look into updating it over the weekend (and possibly turning into a jQuery plugin). \n. Go to less\\emojify.less and comment out whichever emojis you don't want. Hope that helps?\n. AMD as in Javascript? Any specific benefit it would bring?\n. Errrr shouldn't be that way, no. I'll have to double check it.\n. A JSfiddle example would've been more helpful, still haven't had time to look at it.\n. http://jsfiddle.net/hassankhan/99JRb/\n. I'm not sure where exactly its going wrong, and its been so long since I've looked at it that its not quite clear to me any more.\nSince its pretty crap, might throw in the towel and do a rewrite :)\n. Hi there, you need to compile the LESS to CSS yourself. You can do it online, or by downloading and using a LESS compiler.\n. Oh sorry, overlooked that, I'll fix the readme. Thanks :smile:\n. Sweet, looks good to me, does it work correctly?\n. Cheers, thanks :smiley: \n. Ah that's alright, I was kind of in the middle of some work on it myself so I'll sort it out myself. Thanks anyway.\n. Yeah sounds awesome! Please do :+1: \n. I think this is probably unnecessary thanks to the awesome work by GitterHQ :smile:\n. Ah, sorry dude, I just saw this. :disappointed: \n. I thought it'd be better to keep it there, any specific reason you think it should be removed?\n. Oh. My. God.\nI think I'm in love with you guys, thank you so so so much! Definitely accepting the PR, didn't realise that this would ever be that useful to anyone so I'm quite shocked (in a good way)\n. Yeah I'll be sure to, just browsed through the code and it's a pleasure to read. I was wondering if you'd grabbed the latest version of the emoji-cheat-sheet repo when you rewrote it?\n. Haha yeah, that's been something that I've been meaning to do for ages to. To be honest with you, when I first wrote it, I did it manually :persevere: but a build script would be awesome.\n. Also, would you mind terribly if I added \"Used by Gitter\" in the readme file?\n. @jimmybrancaccio Hopefully will update soon with latest source from emoji-cheat-sheet\n@mydigitalself I most certainly will :smile: \n. Hiya, thanks for the awesome PR! Looks good to me, but I would personally prefer the tests to be in Javascript, if possible :smile: \nThanks a lot for taking the time to write the tests though\n. Haha thanks for the heads up, ummm, to be completely honest with you, I do prefer the Javascript syntax :blush: if only for the fact it keeps the project somewhat uniform\n. That's a good point, actually, I'm not sure. I think it should, but I agree with you about feeling dirty about it.\nActually, yes, I think unescaping and then matching them would probably be the best bet, unless you have another better-er idea :smile: \n. Yep, if anything I believe that was how it used to work (or at least was how it was intended to work)\nAlso, a massive thank-you for doing all of this.\n. Also including @suprememoocow in the conversation, since Gitter's using it on their site, might be worth making sure it doesn't break anything for them, too.\n. Mate, every time you comment I learn something, never heard of Testling before but it looks awesome. I think @qq99 is happy with Javascript tests as well, so if everything's good I'll go ahead and merge (personally haven't checked the tests yet, so let me know)\n. Closed in favour of #27 \n. Haha thanks for checking, but are all the emojis on the website working for emojify.js? I'm pretty sure (but don't quote me on this) that they've added a fair few new ones :smile: \n. Yep, forgot to close it. By way of interest, would you like to be added as a collaborator to the repo?\n. I think I might make this at the least, some sort of an option. While I personally appreciate the advantages that spriting brings, I think that's best left to the actual web developers themselves. \nSome people might only want a handful of emojis, and would rather not download the whole sprite. I remember a few issues people opened saying they didn't want to download a CSS file full of data-URI images. I thought I'd made it pretty easy with the LESS file, but some didn't agree.\nWhat can be done, however, is using the emoji name as a class name. You would create your spritesheet, and it would automatically add emoji <emoji name> to the class attribute of the tag. It's a fairly simple change, maybe @suprememoocow could share his views?\n. I'm personally not sure, I'd rather leave it up to the user. We provide all the images, it should be up to the end user to turn them into sprites if they so wish.\nThat said, if we DO add this, I'd prefer it to be a Grunt task. Thanks all :+1: \n. That sounds about right, I think there are some other things we might want to do, for example, we might want to prefix the classes with something, probably emoji i.e. emoji-wink, emoji-smile etc. Then add an option as you mentioned to tell emojify.js to use a stylesheet.\nLook forward to seeing your PR :+1:\n. Closed in #98\n. Sweet, thanks for catching this one :smile: \n. Fucking aces, man, nice work! :kissing_heart: \n. If it's alright with you @qq99 then shall I merge this PR and close your one?\n. Thanks again guys, really appreciate the effort you've put into this :smile: Can't seem to get Testling CI working, but that's probably due to my own incompetence.\n. Good catch, nice job with the tests too. I've added you as a collaborator on the repo, so if you push directly to the repo, it should work, unless you'd rather do a PR?\n. Awesome, all done :+1: \n. I'll leave this open until the documentation is accurate.\n. Fixed the README, closing the issue now.\n. Hiya, thanks for the PR :smile: could you add a test case or two as well?\n. I've tried writing tests, and it failed for me.\n. We have the ignore_emoticons option, anyway\n. Thanks @dunckr, I believe it used to do this before the recent rewrite, but I may be mistaken. In any case, thanks for the PR!\n. Yep, looks brilliant to me. Thanks!\n. Can you provide some more context? What were you trying to do?\n. Ah, nice catch. The old version used to have the same bug as well. Thanks!\n. That's weird, I'll try and have a look later this week.\n. Ahhh perfect, thanks so much.\nAs a sidenote, does this resolve #36?\n. Thank you for your amazing work again, @qq99!!\n. Sorry, I haven't had time to look into the PR yet, hopefully one of the other contributors might be able to help.\nI'm not quite sure I understand what the new option does, or if it's named correctly, perhaps? \nIf it is set to true (default), then hello:( would render an emoji, otherwise not? If that's the case, then maybe instead of adding an option, we could do some sort of check to see if it's the end of the text and render based on that.\n. I don't know if this is the case, but do you run the Markdown parser first and then emojify.js? If all the markdown is converted to HTML, then it wouldn't happen at all surely?\n. Perhaps it would be best to not emojify the text if you're trying to display raw Markdown? You could add an id attribute to the diff view and have Emojify.js exclude it? This is all armchair conjecture, I haven't seen your project at all.\nThanks\n. Hi @tessi, I think it might be better to limit where Emojify works instead. Currently it works on everything unless you restrict it to an id, perhaps we can add an ID for exclusion as well. I'll close this issue, and maybe we could try another PR adding exclusion support?\n. Yep, I will do shortly, just made an account on npmjs.org\n. Sorry, been busy flying between countries, now I'm back at work, will have to look at it on the weekend :smile: \n. All done: https://www.npmjs.org/package/emojify.js\n. Sorry it took so long, I think I might've found a bug in npmjs.org.\n. Other than what I mentioned above, it looks sound to me. Obviously as you said, you'll add the tests, so I'm happy :+1: \n. +1 from me, maybe @qq99 and @suprememoocow could share their thoughts, too?\n. Awesome, I'm happy to wait for a second set of eyes to look through the PR.\n. +1 from me I think, looks pretty complete to me.\n. Thanks all for your input!\n. ### ~~Use shim for IE8 and co.~~\nRelevant issue\n~~Spritesheets~~\nRelevant issue\n. ### ~~Cleanup project root~~\nRelevant issue\n. ### ~~Automate version bumping~~\nRelevant issue\n. ### ~~Add emojify.js to a CDN~~\nRelevant issue\n. ### Remove images directory\nNow part of this issue\n. ### ~~Support Node environment properly~~\n~~Relevant issue~~\nRelevant issue\n. ### Add code coverage results\nRelevant issue\n. Have you perchance got ZenHub installed on Chrome? I installed it yesterday, has a pretty good board (or at least I thought so)\n. Yep, I agree. Last thing I wanted to do was integrate the failing test PRs (#62 and #57) and see if those've been fixed. If that's all good, I think it's time to release 1.0!!\n. Oh, actually there was one more thing I wanted to do: tidy up config options. I'll try and find some time this weekend to land that, then I'm happy for you to release.\nBTW, can you even submit to npm for me? I thought I had to update my npm packages myself :confused: \n. There's an open issue (#87) for the config options. I'll run the npm owner command when I get home later tonight, hopefully :smile: Might also be worth adding npm publish to the gulp release command\n. Hiya, sorry it's been mental at work launching a few campaigns, will probably do the release over the Xmas break\n. I'd prefer a 0.10 release first, before I get some time to redo the options.\n. v1.0 is finally out, thanks everyone!\n. Hi there, not quite sure what this PR is trying to achieve, why do you need those specific emoji and not the rest?\n. I think I understand what you're talking about, however I don't think hardcoding specific emoji keywords is the solution. Perhaps a more programmatic way of defining the emoji you want to convert would be better.\n. Hmm, ok, I misunderstood what the named key did. @qq99 @suprememoocow any thoughts?\n. Thanks for the PR!\n. Pretty sure I added Emojify.js to the NPM registry a while ago, if I merge this PR, will it update automatically?\n. Ok, I'll double-check when I'm at home :+1: \n. Any issues I might not have seen @qq99 @suprememoocow ?\n. @leoasis Do you think you could remove the whitespace and commit again? Happy to merge after that.\n. Thanks for the PR! Also, while we're here, correct me if I'm wrong, but if I run npm publish on the folder, shouldn't it update by itself? I seem to be getting errors :frowning: \n. Haha thanks, I figured that out a second ago and fixed it. It's all good now :+1: \n. Do they have a repo or anything anywhere? Can't seem to find one...\n. Ahh this is pretty awesome news! I'm sure we could tweak the update.sh script to be able to modify where it updates from, and Emoji One provide PNGs anyway.\n. Not as easy as I initially thought, the PNG's are named by their unicode points BUT on the plus side, they also have SVG formats too!\nEDIT: Found emoji.json which lists them all along with their unicode codepoint\n. I think it'd be great if we turned this into a gulp task.\n. Doubtful, Internet Explorer is this library's weak point.\n. I think we should ask @suprememoocow, he spent a lot of time rewriting it to make it performant, so I'd hate to lay waste to his work.\n. Oooh, that'd actually be quite cool. \n. @JustBlackBird Well, we already have a Testling banner that shows support across different browsers. Is that what you meant?\nIn general, I'm :+1: on this, if it isn't too much work.\n. Hmm ok, but how would we automate testing it if it actually works using the shim i.e. using Testling? \n. I'll be honest with you, I'm not sure where to start with respect to making tests work like that. Do you think it would be possible to make a quick proof-of-concept PR just so I can see how it would work? Once we know for sure that it works with the shims, then I'll update the documentation, too, thanks :smile: \n. Ah bollocks to it, if someone wants to run it on IE8, they can do it at their own risk. I'll add a disclaimer.\n. Sorry, been really busy at work and not had any time over the weekend. Apparently there's a merge conflict, so I'll resolve that tomorrow hopefully and merge the PR. Thanks!!\n. There were some line ending issues, apparently I hadn't set core.autocrlf=true on my laptop :confused: Anyway all done now, thanks!\n. Could you add a failing test please? \n. Will follow up here\n. I believe they are listed on the GitHub pages. Thanks for pointing this out!\n. How so? I don't understand :confused: \nEDIT: Ahhh, as it stands, some don't work, and some don't work because they're lowercase/uppercase.\n. Yes, that was always the plan, I just got lazy and haven't updated the GH Pages in a while\n. I've updated README.md. Is it better now?\n. This little snippet?:\ncss\n.emoji {\n    width: 1.5em;\n    height: 1.5em;\n    display: inline-block;\n    margin-bottom: -0.25em;\n}\n. I think it might be better to add that as a LESS file, like I used to originally. I'm going to make a separate issue for it and close this one now. Thanks!\n. Well, not exactly. It's just sample styling ... no-one has to use it. Once it's there I'll remove it from gh-pages.\nAlso, all these files need to be organised, and that's something I wanted to do as part of moving to Gulp. I've made a feature branch on my machine, but having trouble putting all the pieces together.\n. I remember some discussion before about people not wanting to use them, which is probably why they were removed :frowning: \nEDIT: Okay, maybe I'm making that up ... can't seem to find anything in the issues :confused: \n. That makes sense, as in the distributed versions would have the default styling in them. In that case though, wouldn't it be better to have a styles.less in the src/less folder? That and the result of the css-sprite task get compiled, minified and put in the dist folder as emojify.min.css\n. Excellent, let's move the conversation over to #70 \n. Yep thanks for creating the issue, I recently noticed the same myself actually.\n. This is sort of one of the reasons I never really thought about Node when I wrote this, I'm not quite sure how it would work. I was sort of hoping that it would just work by itself, but it does not unfortunately. Maybe other contributors might have better ideas/solutions? @qq99 @suprememoocow \n. I never really quite got the use-case of running it on the server, and as such it was never a priority IMO. However, I'm looking at moving emojify.js to 1.0 and continually want to make it useful, so I'm not ruling it out. \nFor now, I'm in agreement with @qq99, using .replace() would be the way to go on the server. Let's just get it working on Node for now. In a future release, we can definitely improve on it. \n@adam-lynch: If you'd kindly make a PR, I'll merge.\n. Closing in favour of #67 \n. Thanks for the fix!\n. I really like that, thanks for sharing the link!\n. I'd like to make one addition to that, actually\n[*]\nend_of_line = lf\ninsert_final_newline = true\nIf you would be so kind :smile: \n. https://github.com/hassankhan/emojify.js/blob/gh-pages/stylesheets/emojify.min.css should be the only CSS stylesheet you require to display emoji. But not even really that.\nAnd thanks for the link to main-bower-files btw, but I don't understand how that would work with this project.\n. The idea was always to provide the end-user with the tools required to generate their own - you should always create your own, the default CSS is provided for testing purposes more than anything.\n. Could you possibly add another test to the same branch highlighting that too?\n. Cheers mate :smile: \n. I think the tests are still failing:\n```\n\u001b[0K$ npm test\n\nemojify.js@0.9.4 test /home/travis/build/hassankhan/emojify.js\ngrunt test-node && phantomjs phantom.js\n\n\u001b[4mRunning \"mochaTest:test\" (mochaTest) task\u001b[24m\n\u001b[0m\u001b[0m\n\u001b[0m  emojify in a Node environment\u001b[0m\n\u001b[0m    .replace\u001b[0m\n\u001b[2K\u001b[0G    \u001b[31m  1) \"before each\" hook\u001b[0m\n\u001b[92m \u001b[0m\u001b[32m 0 passing\u001b[0m\u001b[90m (6ms)\u001b[0m\n\u001b[31m  1 failing\u001b[0m\n\u001b[0m  1) emojify in a Node environment \"before each\" hook:\n\u001b[0m\u001b[31m     ReferenceError: window is not defined\u001b[0m\u001b[90m\n      at /home/travis/build/hassankhan/emojify.js/emojify.js:19:28\n      at /home/travis/build/hassankhan/emojify.js/emojify.js:302:11\n      at document (/home/travis/build/hassankhan/emojify.js/emojify.js:9:26)\n      at Object. (/home/travis/build/hassankhan/emojify.js/emojify.js:14:2)\n      at Module._compile (module.js:456:26)\n      at Object.Module._extensions..js (module.js:474:10)\n      at Module.load (module.js:356:32)\n      at Function.Module._load (module.js:312:12)\n      at Module.require (module.js:364:17)\n      at require (module.js:380:17)\n\u001b[0m\n\u001b[33mWarning: Task \"mochaTest:test\" failed.\u0007 Use --force to continue.\u001b[39m\n\u001b[31mAborted due to warnings.\u001b[39m\n\u001b[37m\u001b[40mnpm\u001b[0m \u001b[0m\u001b[31m\u001b[40mERR!\u001b[0m\u001b[35m\u001b[0m Test failed.  See above for more details.\n\u001b[0m\u001b[37m\u001b[40mnpm\u001b[0m \u001b[0m\u001b[31m\u001b[40mERR!\u001b[0m \u001b[0m\u001b[35mnot ok\u001b[0m code 0\n\u001b[0mtravis_time:end:10161195:start=1411419501247976292,finish=1411419502519079284,duration=1271102992\n\u001b[0K\n\u001b[31;1mThe command \"npm test\" exited with 1.\u001b[0m\nDone. Your build exited with 1.\n``\n. I would've thought the pull request branch on Travis-CI would run againstmasteron the repo, not your fork. Oh well, thanks for sorting that out :+1: \n. It's an interesting idea, but I'm not quite sure if there's that much of a need for it. You said you needed it for emails, maybe you could use a style inliner instead? I know of at least [one](https://github.com/dwightjack/grunt-premailer)\n. I always thought [Premailer](https://github.com/premailer/premailer) was quite good, it's what I use at work, sure it doesn't suit your needs?\n. Actually .... I've just remembered, you can usereplace(htmlString, replacer), wherereplaceris a callback function (seedefaultReplacer[in the source](https://github.com/hassankhan/emojify.js/blob/master/emojify.js#L152)).\n. I know, you're totally right, the readme is in dire need of a good rewrite. Hope that helps with your use case now, though :smile: \n. Leaving it open so I remember to update the readme\n. Well, it currently uses theimg_dir` value passed in the config object. Is that what you're referring to?\n. I don't think it needs to be, necessarily. Any specific reason why, other than good practice?\n. Yeah that was one of my concerns.\n. I don't agree with the need for all three to be passed (i.e. the emoji found, the name and the emoji). Right now you get the emoji/emoticon pattern that was matched, and the corresponding image name. \nHaving the image directory passed through can/maybe should be done, but as it currently stands you can retrieve it from defaultConfig anyway, right?\n. I've updated README.md, mind having a quick read, see if I've missed anything out?\n. js\nfunction newReplacer(emoji, name) {\n    return emojify.defaultConfig.emojify_tag_type; // Will be whatever you set it to with `emojify.setConfig()`\n}\nThanks, I'll update README.md again\n. If you don't pass an image base URL, the default is 'images/emoji', just like it says on the readme. I do agree, though, defaultConfig is misleading. defaultConfig should be the defaults, and there should probably be a config object that is a copy of it, which gets overwritten by emojify.setConfig()\n. Updated readme in 81573459441ed0d417ccb50823695083d76ec445. Better? I haven't gotten around to the GitHub Pages yet, I'm going to just leave it as a live sample, and make it point to the repo for everything else.\n. Nice!! Looks much better :smile: \n. Pushed another update, mind have a look, please? :smile: \n. Ok, pushed again. \n\nI so wish I could do this in Node! :smile:\n\nHaha, well I'm planning to remove that in favour of a blacklist option which would have that as a default instead.\n. Guess this can safely be closed now :+1: \n. Haha the test name is really funny\n. Do you think you could maybe give it a go @trevorah?\n. Awesome, thanks! :smile: \n. Merged into develop. Thanks!\n. Merged into develop. Thanks!\n. Merged into develop. Thanks!\n. Merged into develop. Thanks!\n. Personally I'd prefer the same API on both, wherever possible.\n. @4ver has made a PR (#99) that seems to check all the boxes, marking this as a duplicate and continuing discussion at #94. \n. Merged into develop. Thanks!\n. Thanks, let me know if this fixes the problem. I've been having issues with line-endings lately, so that may have been the reason.\n. I don't think anyone's really used the replacer callback before, at least, not to my knowledge. Also, since we're aiming to get to 1.0 soon, I'm not too worried.\n. Yeah I know, in general I try to, just that I've already tagged the release and it'll be getting changed soon enough anyway.\n. HI, could you make the change on the develop branch please?\n. Also, can you update the readme as well? Thanks :smile: \n. Cheers :+1: \n. There may have been a specific reason @suprememoocow didn't use it, I'd like to run some tests before I merge, thanks!\n. Merged into develop. Thanks!\n. Hmmm that's odd, I'll try and remember to do this tonight :+1: \n. Just pushed 0.9.5 in c9568789ee1602b3beccca9f4e43b5c4b2b9a882, let me know if you have any issues :smile: \n. Could you branch from develop and resend?\n. I must've accidentally gotten rid of it when I rewrote the readme. Thanks for pointing it out! :+1: \n. I'll just use what they are then:\n```\noctocat, squirrel, shipit\nCopyright (c) 2012 GitHub Inc. All rights reserved.\nbowtie, neckbeard\nCopyright (c) 2012 37signals, LLC. All rights reserved.\nfeelsgood, finnadie, goberserk, godmode, hurtrealbad, rage 1-4, suspect\nCopyright (c) 2012 id Software. All rights reserved.\ntrollface\nCopyright (c) 2012 whynne@deviantart. All rights reserved.\nAll other images\nCopyright (c) 2012 Apple Inc. All rights reserved.\n```\nShould I put it in a separate file?\n. Fixed in b53a3115dde94bd61b661a078ba0fb8aa01a16f0. Thanks! :smile:\n. You haven't set ignore_emoticons to true by any chance?\n. Actually, yes, emoticons (like :) for example) shouldn't be surrounded by ::. \n. On the develop branch please? :smile: \n. It shouldn't be too problematic; any new branch should be branched from develop too, you don't want to work from master :wink: \n. Any reason why? Usually providing a version like ~1.0 gets you the latest tagged version. Also, this is based off master again.\n. Ah right, I confused myself. Will merge tonight :+1: \n. I was watching your commit history (I have your repo added as a remote) and I'm so glad you got rid of the event-stream stuff :grinning: \n. Mind if we speak in the Gitter room?\n. :+1: thank heavens you did\n. Got a reply on Twitter, apparently they're broken for a few more months.\n. Rationale for getting rid of only_crawl_id: Because right now, if you don't pass emojify.run() any parameter, then it checks only_crawl_id, and if that's not specified it does the whole document body.\nI propose changing it so you can do emojify.run('#content') and internally use document.querySelector() to do the magic. If you don't pass a parameter, it processes the rest of the body as usual.\n. Hi, little update, I think it might also be a good idea to remove ignored_tags and make both the blacklist and whitelist options be an array of valid selectors.\n. Update 2: The whitelist and blacklist options are now objects, rather than arrays:\njson\nblacklist: {\n  \"elements\": [\"body\", \"code\", \"script\"],\n  \"classes\": [\"no-emojify\"],\n  \"ids\": [\"special\"]\n}\n. Quick update, I've added the blacklist option and renamed emojify_tag_type. I'll leave any other improvements till later so v1.0 can be released.\n. Also would be good if we got rid of all of those images, and seeing as different emoji sets may be a new feature, it doesn't make sense to keep them in the repo. Because people (probably) rely on the generated goods, we can just use the data-uri images to output a CSS file.\n. Awesome job by @adam-lynch!\n. Nice one @adam-lynch :wink: \n. Well, I hope I'm wrong but I can't seem to find a way to get code coverage from jstest.\n. Well, you can get some sort of coverage information, but no way of converting it to LCOV :frowning: Looks like we might have to switch back to Mocha (+ Chai)\n. Thanks for the link! I'm checking them out now\n. @PeterDaveHello added it to cdnjs in #106, so I think I'll close this issue.\n. Does this have any appreciable effect performance-wise? I would think not, but it would be nice to know? I'll admit, I was a bit against it to begin with but I'm slowly warming to the idea.\n. Alrighty then, I think it's the right thing to do, looking forward to seeing some more commits :smile: \n. I agree, passing a DomElement would be ideal\n. I think @4ver's PR satisfies the two checkboxes in the first post, anyone else care to share their thoughts?\n. I believe this issue's ready to be closed, since I've merged #99 \n. Could you also put the source files in a src directory too?\n. Thanks!\n. Overall I quite like it, thanks for all your work! \nI had a few nitpicks, but after going through it all again it seems I only have one:\n~~I'm not quite sure that run() needs the replacer function at all, but I'm sure you have a use-case in mind, could I maybe get an example?~~\nI just realised the whole point of this is to get it running on node as well /facepalm\n. Actually, #94 raises a good point here, if we send in a DomElement anyway, then does run() really require a replacer parameter?\n. But what if there's a mode parameter, like you suggested? In that case, we could just switch the replacer internally, right?\n. Thanks man! :smile: \n. Not quite sure if we should have to make changes because jsDom doesn't support what we need. There is an open issue on their repo, maybe we should pester them to get it working.\nThe only reason I'm hesitant to get rid of TreeWalker is performance-related, last I checked it beats other methods of traversal, but I did check a long time ago :smile: \n. Yep, I'd be happy with that, the other thing, I'd rather it didn't have to pass a window object in run(), am I missing something?\n. Thanks @4ver!\n. I'll take care of this one ;)\n. Closed in 35a2cc12c6c20c058ab0cb505154319dbf226c3a\n. I'm thinking a simple test setup, we give it a mock blog post HTML page, and get it to run emojify.js on it (x100 times) through both node and browser tests. Time those results, average them, and create a data point which we can use in a graph.\nNeed to find:\n- ~~Timing tests libraries~~\n- Graphing libraries\n- Mock HTML\n. Cheers for that!\n. Hi, please make a PR on the develop branch. Thanks!\n. Thanks very much for doing this! Quick question, will this update automatically or does it need to be manually updated?\n. This might be useful\n. Let me know when this is okay to merge and I'll do it. Thanks!\n. Thanks a bunch for all your hard work!\n. Yeah that sounds cool, although if it runs on node isn't it guaranteed to run on any platform where node is installed?\n. Oh right, just thought I'd ask, I was sure you had a good reason :+1: \n. FYI I'll make you a collaborator on this repo later tonight hopefully\n. Done\n. Seems to be working but failing hard thanks to css-sprite.\n. Because the idea is we provide the bare essentials, and you are free to do whatever you like to it in your own project :smile: \n. Hopefully this'll be covered in a future update :+1: \n. Done\n. I can't seem to reproduce the problem...\n. This is still a bug in master\n. Not too sure, we discussed this before didn't we? It's clear from the README that we only support IE9+, if you want to use anything below you should use the shim.\nI'm not opposed to adding the shim as part of the package, but I'd love to hear from other contributors. @adam-lynch, @4ver, @qq99 thoughts?\n. Yeah I think we do have some aliases (based on emoji-cheat-sheet.com), so it shouldn't be a massive problem adding those in.\n. I would say you should add no-emojify to your icon classes, but try updating and let me know if it's still an issue\n. If you update, you should be able to provide a blacklist.classes array of classnames you don't want emojified.\n. Any luck?\n. In the source, blacklist is an object, like so:\njs\nvar defaultConfig = {\n    blacklist: {\n        'ids': [],\n        'classes': ['no-emojify'],\n        'elements': ['script', 'textarea', 'a', 'pre', 'code']\n    },\n    tag_type: null,\n    only_crawl_id: null,\n    img_dir: 'images/emoji',\n    ignore_emoticons: false,\n    mode: 'img'\n};\nSorry, I'm unable to test right now because I'm at work :smile:\n. Yeah I remember this, any ideas on how to get around it? Call it plus1 instead?\n. Would you mind checking again on the latest version? Thanks\n. Thanks for reporting back!\n. You should really thank @adam-lynch and @4ver, this was all their work :smile: \nPS: I don't understand why Bower isn't updating, everything seems to be in order :confounded: \n. Thanks for pointing that out, clearly something's gone wrong with package.json, I'll do another release when I get home\n. https://github.com/hassankhan/emojify.js/blob/master/.npmignore#L1\n. I've published a new version on NPM, could you try it out and let me know? It seems to work for me\n. This is pretty awesome, should definitely be added.\n. Yeah this has kind of been on hold lately, it would be nice to see a PR :wink: \nThe only thing is I don't think it'd be great to limit ourselves to just the GitHub emoji, in an ideal world, we'd be able to use different sets (EmojiOne, Twitter etc.)\n. Yeah there are a few aliases in there, it's not a bug, it's a feature (cringes)\n. You can go to emoji-cheat-sheet.com, that's where we pull all our emojis from :smile: \n. Thanks! Could you also add a test case?\n. I thought this got fixed in #57 :disappointed: \n. Ahhhh righty, I thought the issue got fixed somewhere along then\n. We pull all emojis from emoji-cheat-sheet.com, if the icons are incorrect could you please create an issue on their tracker? Thanks! :smile: \n. Ahhh okay, I'll update and do a new release. Thanks!!\n. Can you send me the source HTML?\n. If you could send me a reproducible test case on JSFiddle or similar, it would be really helpful. Thanks :)\n. As a workaround, apply the no-emojify class to your <a> tags\n. You could either remove the http:// prefix, or wrap the link with any tag (<span>, <a>, <p>) and give it the no-emojify class. I can't think of any other way right now :(\n. I'd leave it open for now, it's a bug that needs to be fixed. Thanks for reporting the issue!\n. Can you do this on develop instead of master please? Thanks :smile: \n. Yeah I don't see any reason why not, definitely add it to the PR! \n. Hi Adam, I asked the EmojiOne folk to take ownership of the project, we'll all stay on as contributors but I think it's a better home for the project :)\n. The repo will be moved to the Ranks org, I believe, this is just temporary. \nEmojiOne won't be changing much in terms of code, they don't have enough time to do it themselves. Any issues/features/bugfixes can still go ahead :smile: \n. It's all done now! \n. Hi guys, any update on this? Would it be possible to get write access so we can merge PRs and such? :smile: \n. Thanks, got it this time :smile: \n. I've recently transferred the repo to Ranks and lost my write access in the process. I'll ping them and try and get this merged :)\n. Thanks for the PR! :+1: \n. Hi, since we currently depend on emoji-cheat-sheet for emoji, we will have to wait till they add them :)\n. Hi there, not quite sure what's happened. Anyone got any ideas?\n. I'll try running npm publish again\n. I've tried doing another release, nothing worked. I really have zero ideas on what's causing this ... to my knowledge the .npmignore hasn't changed, nor has anything else. Any help from anyone else would be highly appreciated\n. No build errors or anything, no. Seems like an issue with NPM or an *ignore file.\n. I believe it's all working now, really really sorry for the inconvenience\n. My pleasure, sorry it took so long\n. +1 will need to check this out, I didn't think it worked that way\n. Hi sorry, hadn't had a chance to review. Thanks! :+1: \n. Yeah definitely go for it! :smile: \n. Have you tried removing the node_modules folder and running npm install again?\n. Weird, I had the same error a while ago. Looks like css-sprite has been deprecated in favour of sprity, I think - that'll need to updated at some point too I imagine :/\n. Is this on the latest tagged release?\n. Bower automatically updates to the latest tagged release on Github.\n. Hi, could you do a PR on the develop branch? Thanks :+1: \n. Thanks very much :smile: !\n. I'm really sorry guys, if anyone can come up with a PR that'd be mighty helpful - I'm not sure any of the contributors have much spare time at the moment.\n. Could you make this PR target the develop branch, please? Thanks\n. I wrote this library back when browsers didn't - as such this library is outdated and in urgent need of some love.\n. It's not mine - its here, seems to have most of the options this has and then some.\nI just don't do a lot of frontend any more, haven't had the chance to give this the attention it needs and doubt I will be able to in the foreseeable future. It's had a nice long run, and I'm glad it's helped so many people, but I just don't have time any more to maintain this :(\n. No problem :)\n. Sorry that you had to deal with it, unfortunately I'm not really maintaining this library any more \ud83d\ude1e . I'm sorry the project isn't maintained any more, feel free to fork this repo and make any changes to it. Sorry \ud83d\ude2c . ",
    "prettynatty": "@hassankhan hello, we are having this issue.\nUnfortunately now we can't use @emoji-size because there in no more less in the project. Is there any work-around?\n. :+1: \n. I also tried to declare dependency like git://github.com/Ranks/emojify.js#1.0.2, and it led to an empty module too.\n. @hassankhan hello, we are having this issue.\nUnfortunately now we can't use @emoji-size because there in no more less in the project. Is there any work-around?\n. :+1: \n. I also tried to declare dependency like git://github.com/Ranks/emojify.js#1.0.2, and it led to an empty module too.\n. ",
    "rjcoelho": "Apparently fails in IE 9.0.14 but works in IE 9.0.19. Can anyone confirm this ?\n. Looks very good Adam!!\n. hassankhan tell me if you need help on resolving the merge. Is it in the .min files ? they should be treated as \"binary\" files IMO. Just merge the Gruntfile.js and rebuild the .min files I say :)\n. Apparently fails in IE 9.0.14 but works in IE 9.0.19. Can anyone confirm this ?\n. Looks very good Adam!!\n. hassankhan tell me if you need help on resolving the merge. Is it in the .min files ? they should be treated as \"binary\" files IMO. Just merge the Gruntfile.js and rebuild the .min files I say :)\n. ",
    "jimmybrancaccio": "Thanks @evereq :+1: \n. I did see that, but unfortunately the pre tags are rendered by Markdown so I can't add them too easily unless if I can manually put in the pre tags and skip the Markdown. Sort of defeats the purpose of Markdown though.\n. Yeah I guess for now I can manually do pre tags for now. Optimally it would be nice to exclude tags, who really wants emoji in their code blocks? :stuck_out_tongue_closed_eyes:\n. I think I need to look into switching over. Downloading this large CSS file on page load is not cool.\n. :+1: I think a lot of people will be looking forward to this. Great work @island205.\n. Oh wow, this is great, my pages load almost instantly now :stuck_out_tongue_closed_eyes: :+1: \n. This is really awesome work. Thank you both @hassankhan and @suprememoocow. I've updated my site to use this and it loads much much quicker. Thank you thank you thank!! :+1: \nThere is one emoji missing, :8ball: - 8ball I just grabbed it from a quick Google search for my site but you may want to add it to the images/emoji folder. It does 404 on the example index.html file.\n. Awesome! :+1: \n. Thanks @evereq :+1: \n. I did see that, but unfortunately the pre tags are rendered by Markdown so I can't add them too easily unless if I can manually put in the pre tags and skip the Markdown. Sort of defeats the purpose of Markdown though.\n. Yeah I guess for now I can manually do pre tags for now. Optimally it would be nice to exclude tags, who really wants emoji in their code blocks? :stuck_out_tongue_closed_eyes:\n. I think I need to look into switching over. Downloading this large CSS file on page load is not cool.\n. :+1: I think a lot of people will be looking forward to this. Great work @island205.\n. Oh wow, this is great, my pages load almost instantly now :stuck_out_tongue_closed_eyes: :+1: \n. This is really awesome work. Thank you both @hassankhan and @suprememoocow. I've updated my site to use this and it loads much much quicker. Thank you thank you thank!! :+1: \nThere is one emoji missing, :8ball: - 8ball I just grabbed it from a quick Google search for my site but you may want to add it to the images/emoji folder. It does 404 on the example index.html file.\n. Awesome! :+1: \n. ",
    "dylanjha": "@hassankhan should probably minify it for the source...\n. makes sense.\n. +1\n. @hassankhan should probably minify it for the source...\n. makes sense.\n. +1\n. ",
    "HenrikJoreteg": "https://github.com/henrikjoreteg/emoji-images.js \n. Unfortunately, by embedding the images as data uris in stylesheets, you're always going to send a bunch of images that may or may not ever be used instead of sending image data for the ones that are actually used. \nI'd rather embed  tags with src attributes pointing to images hosted elsewhere. Which is why I ended up writing this: https://github.com/henrikjoreteg/emoji-images.js for our app instead of using emojify.js\n. I'm sorry, I'm just a bit confused about the reasoning here. You have to send the image data to the browser at some point. Emojify is opting to do it up front by including all that data in css files. The alternative is to only pull down the ones you need. If the concern is total load time for the page or the app, only pulling the images you need when you need them should be quite a bit faster than what amounts to downloading all of the images for a given category to potentially only show one of them. \nEven if you selectively load the stylesheets by category the \"symbols\" file alone is ~1mb. \nThe problem is, if I have one match in the symbols set I have to download 1mb of data to show a 3.5k image.\nIf you serve those image files with proper cache headers the next time you load that page, your browser won't even download the data at all and it would instantly show that image.\nIf you really don't want to see even a \"blink\" the very first time you could even go as far as pre-loading the matched images before you replaced the text.\nAs another optimization, rather than putting all the text in the page through 600 regexes it's more efficient to do just one to look for stuff that matches the \"colon something colon\" pattern and then matching only the matched texts against a list of available emojis.\nThe total unminified size of https://github.com/henrikjoreteg/emoji-images.js is 13kb plus whatever image data for each matched emoji (each of which should only be served once, then pulled from cache). Just including all the regexes and their string match puts emojify.js at 36k minified just for the JS, that's without the CSS with all the image data.\nI completely agree that having them as data-uris is nice and avoiding doing an HTTP GET for each unique image is a nice thought. I totally get why you went this route, but I personally don't think the trade-offs are worth it. \nI hope I'm not coming across as rude, that's not my goal at all. I'm just explaining why I didn't use this for our app and opted for another solution.\n. https://github.com/henrikjoreteg/emoji-images.js \n. Unfortunately, by embedding the images as data uris in stylesheets, you're always going to send a bunch of images that may or may not ever be used instead of sending image data for the ones that are actually used. \nI'd rather embed  tags with src attributes pointing to images hosted elsewhere. Which is why I ended up writing this: https://github.com/henrikjoreteg/emoji-images.js for our app instead of using emojify.js\n. I'm sorry, I'm just a bit confused about the reasoning here. You have to send the image data to the browser at some point. Emojify is opting to do it up front by including all that data in css files. The alternative is to only pull down the ones you need. If the concern is total load time for the page or the app, only pulling the images you need when you need them should be quite a bit faster than what amounts to downloading all of the images for a given category to potentially only show one of them. \nEven if you selectively load the stylesheets by category the \"symbols\" file alone is ~1mb. \nThe problem is, if I have one match in the symbols set I have to download 1mb of data to show a 3.5k image.\nIf you serve those image files with proper cache headers the next time you load that page, your browser won't even download the data at all and it would instantly show that image.\nIf you really don't want to see even a \"blink\" the very first time you could even go as far as pre-loading the matched images before you replaced the text.\nAs another optimization, rather than putting all the text in the page through 600 regexes it's more efficient to do just one to look for stuff that matches the \"colon something colon\" pattern and then matching only the matched texts against a list of available emojis.\nThe total unminified size of https://github.com/henrikjoreteg/emoji-images.js is 13kb plus whatever image data for each matched emoji (each of which should only be served once, then pulled from cache). Just including all the regexes and their string match puts emojify.js at 36k minified just for the JS, that's without the CSS with all the image data.\nI completely agree that having them as data-uris is nice and avoiding doing an HTTP GET for each unique image is a nice thought. I totally get why you went this route, but I personally don't think the trade-offs are worth it. \nI hope I'm not coming across as rude, that's not my goal at all. I'm just explaining why I didn't use this for our app and opted for another solution.\n. ",
    "speg": "Yeah, you can do document.createElement to create a new style sheet.  @HenrikJoreteg is right about fetching the icons a la carte,  but then you've got to deal with a small delay while the image is fetched.\n. Yeah, you can do document.createElement to create a new style sheet.  @HenrikJoreteg is right about fetching the icons a la carte,  but then you've got to deal with a small delay while the image is fetched.\n. ",
    "gr2m": "https://github.com/HenrikJoreteg/emoji-images.js does what I want, cheers!\n. https://github.com/HenrikJoreteg/emoji-images.js does what I want, cheers!\n. ",
    "KraigWalker": "Hows about an AMD solution?\nOn 19 Aug 2013, at 21:50, \"Jimmy B.\" notifications@github.com wrote:\n\nI think I need to look into switching over. Downloading this large CSS file on page load is not cool.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hows about an AMD solution?\n\nOn 19 Aug 2013, at 21:50, \"Jimmy B.\" notifications@github.com wrote:\n\nI think I need to look into switching over. Downloading this large CSS file on page load is not cool.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "knuhol": "Hi, so what about it?\n. Hi, so what about it?\n. ",
    "tlongren": "I did end up compiling the LESS, but the readme specifically references emojify.css, not emojify.less.\nIt could be confusing to new potential users or users who are just not familiar with LESS.\nI'd probably just remove the reference to emojify.css, but it's your baby, so I'll agree with whatever you think is best. :smile: \n. I did end up compiling the LESS, but the readme specifically references emojify.css, not emojify.less.\nIt could be confusing to new potential users or users who are just not familiar with LESS.\nI'd probably just remove the reference to emojify.css, but it's your baby, so I'll agree with whatever you think is best. :smile: \n. ",
    "fauria": "Yes, i made this patch because im using emojify on a Backbone \"endless pagination\" message list.\nWhenever a user clicks \"Show more\", i need to run emojify on the loaded messages.\nFor performance reasons, im using emojify.run(message.render().el) instead of just re-running the whole list with emojify.run().\n. Please, note that i did not minified emojify.js, because im not sure what minifier was used in this project.\n. Yes, i made this patch because im using emojify on a Backbone \"endless pagination\" message list.\nWhenever a user clicks \"Show more\", i need to run emojify on the loaded messages.\nFor performance reasons, im using emojify.run(message.render().el) instead of just re-running the whole list with emojify.run().\n. Please, note that i did not minified emojify.js, because im not sure what minifier was used in this project.\n. ",
    "island205": "yes, so do i.\n. Never mind\n. yes, so do i.\n. Never mind\n. ",
    "suprememoocow": "Ah cool! Glad you like it.. We've tested it a lot for our particular use-case (that being https://gitter.im) but obviously you'll want to make sure that it's still working for other cases \nThanks for the quick response, and thanks for a great library\n. Hmm, no I just used the emoji from the version of the project that we\u2019ve been using.\nI\u2019ll take look. It might be worthwhile make a build-script to automatically update from the source.\nOn 3 Feb 2014, at 22:44, Hassan Khan notifications@github.com wrote:\n\nYeah I'll be sure to, just browsed through the code and it's a pleasure to read. I was wondering if you'd grabbed the latest version of the emoji-cheat-sheet repo when you rewrote it?\n\u2014\nReply to this email directly or view it on GitHub.\n. No, of course not :)\n\nOn 3 Feb 2014, at 22:52, Hassan Khan notifications@github.com wrote:\n\nAlso, would you mind if I add \"Used by Gitter\" in the readme file?\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi all, wow, tests are a fantastic addition to this library. That is awesome!\n\nOn Gitter I'm seeing quite a few JS errors in IE11 and I think they're related to emojify.js and the treewalker changes I put in. Once we've got the tests in, perhaps we should hook this library up to Testling to test in multiple browsers?\n(As a minor side-node, personally I prefer Javascript tests as the library itself is Javascript not Coffeescript, but thats just my two cents!)\n. Hi, this is in the project now, as of #26 \n. Thanks for the quick response @hassankhan and @qq99!\nThe html entities need to come out @qq99 - thanks for pointing that out.\nWith regards to Testling CI, all you need to do is setup a webhook from https://github.com/hassankhan/emojify.js/settings/hooks to http://git.testling.com. Leave all the other defaults as they are. \nAfter you've done a push, Testling CI will start running the tests. The results will be at\nhttps://ci.testling.com/hassankhan/emojify.js\nHope this helps.\n. Thanks for adding me as a collaborator Hassan, but for the moment I'm happy\nto so PRs as it means I get somebody to review my code. Really appreciate\nthe thought though!\nOn Friday, February 21, 2014, Hassan Khan notifications@github.com wrote:\n\nGood catch, nice job with the tests too. I've added you as a collaborator\non the repo, so if you push directly to the repo, it should work, unless\nyou'd rather do a PR?\n\nReply to this email directly or view it on GitHubhttps://github.com/hassankhan/emojify.js/pull/29#issuecomment-35772841\n.\n\n\nSent from Gmail Mobile\n. Thanks for this, it's a good update!\n. Hi all, I'm moving house at the moment and don't have internet yet (and the 3G is bad) I can add my 2c early next week if that's okay?\nSent from my iPhone\n\nOn 8 Aug 2014, at 10:13, Hassan Khan notifications@github.com wrote:\n+1 from me, maybe @qq99 and @suprememoocow could share their thoughts, too?\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi, I'm not sure if it's just a result of the indentation changes, but there seem to be a lot of code changes in this PR not related to AMD. Other than adding a wrapper, what else has changed?\n. Oh didn\u2019t know about the ?w=1 parameter. That\u2019s a great little trick. \n\n@hassankhan, looks good to me.\nOn 3 Sep 2014, at 13:13, Leonardo Garcia Crespo notifications@github.com wrote:\n\nYou can see the diff ignoring whitespace adding ?w=1 to the url:\nTry this: https://github.com/hassankhan/emojify.js/pull/44/files?w=1\n\u2014\nReply to this email directly or view it on GitHub.\n. These guys have also expressed interest (via Twitter) for emojify.js to support their emoticons as an alternative to the default set: http://emojione.com/\n\nhttps://twitter.com/emojione/status/510227806316679168\n. Hey folks,\nSorry I've been so quiet. Been really busy. es5-shim is a great idea. If we wanted to reduce the dependencies, it would also be really simple to build our own shims, for example:\n```\nfunction arrayReduce(array, reductionFunction, initialValue) {\n  if(Array.prototype.reduce) return array.reduce(reductionFunction, initialValue);\nvar t = Object(this), len = t.length >>> 0, k = 0, value = initialValue;\n  for (; k < len; k++) {\n    value = callback(value, t[k], k, t);\n  }\n  return value;\n}\n```\nI guess it depends on how many people require IE8 support - if it's only a few, then perhaps using es5-shim would be the best option.\n. Ah cool! Glad you like it.. We've tested it a lot for our particular use-case (that being https://gitter.im) but obviously you'll want to make sure that it's still working for other cases \nThanks for the quick response, and thanks for a great library\n. Hmm, no I just used the emoji from the version of the project that we\u2019ve been using.\nI\u2019ll take look. It might be worthwhile make a build-script to automatically update from the source.\nOn 3 Feb 2014, at 22:44, Hassan Khan notifications@github.com wrote:\n\nYeah I'll be sure to, just browsed through the code and it's a pleasure to read. I was wondering if you'd grabbed the latest version of the emoji-cheat-sheet repo when you rewrote it?\n\u2014\nReply to this email directly or view it on GitHub.\n. No, of course not :)\n\nOn 3 Feb 2014, at 22:52, Hassan Khan notifications@github.com wrote:\n\nAlso, would you mind if I add \"Used by Gitter\" in the readme file?\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi all, wow, tests are a fantastic addition to this library. That is awesome!\n\nOn Gitter I'm seeing quite a few JS errors in IE11 and I think they're related to emojify.js and the treewalker changes I put in. Once we've got the tests in, perhaps we should hook this library up to Testling to test in multiple browsers?\n(As a minor side-node, personally I prefer Javascript tests as the library itself is Javascript not Coffeescript, but thats just my two cents!)\n. Hi, this is in the project now, as of #26 \n. Thanks for the quick response @hassankhan and @qq99!\nThe html entities need to come out @qq99 - thanks for pointing that out.\nWith regards to Testling CI, all you need to do is setup a webhook from https://github.com/hassankhan/emojify.js/settings/hooks to http://git.testling.com. Leave all the other defaults as they are. \nAfter you've done a push, Testling CI will start running the tests. The results will be at\nhttps://ci.testling.com/hassankhan/emojify.js\nHope this helps.\n. Thanks for adding me as a collaborator Hassan, but for the moment I'm happy\nto so PRs as it means I get somebody to review my code. Really appreciate\nthe thought though!\nOn Friday, February 21, 2014, Hassan Khan notifications@github.com wrote:\n\nGood catch, nice job with the tests too. I've added you as a collaborator\non the repo, so if you push directly to the repo, it should work, unless\nyou'd rather do a PR?\n\nReply to this email directly or view it on GitHubhttps://github.com/hassankhan/emojify.js/pull/29#issuecomment-35772841\n.\n\n\nSent from Gmail Mobile\n. Thanks for this, it's a good update!\n. Hi all, I'm moving house at the moment and don't have internet yet (and the 3G is bad) I can add my 2c early next week if that's okay?\nSent from my iPhone\n\nOn 8 Aug 2014, at 10:13, Hassan Khan notifications@github.com wrote:\n+1 from me, maybe @qq99 and @suprememoocow could share their thoughts, too?\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi, I'm not sure if it's just a result of the indentation changes, but there seem to be a lot of code changes in this PR not related to AMD. Other than adding a wrapper, what else has changed?\n. Oh didn\u2019t know about the ?w=1 parameter. That\u2019s a great little trick. \n\n@hassankhan, looks good to me.\nOn 3 Sep 2014, at 13:13, Leonardo Garcia Crespo notifications@github.com wrote:\n\nYou can see the diff ignoring whitespace adding ?w=1 to the url:\nTry this: https://github.com/hassankhan/emojify.js/pull/44/files?w=1\n\u2014\nReply to this email directly or view it on GitHub.\n. These guys have also expressed interest (via Twitter) for emojify.js to support their emoticons as an alternative to the default set: http://emojione.com/\n\nhttps://twitter.com/emojione/status/510227806316679168\n. Hey folks,\nSorry I've been so quiet. Been really busy. es5-shim is a great idea. If we wanted to reduce the dependencies, it would also be really simple to build our own shims, for example:\n```\nfunction arrayReduce(array, reductionFunction, initialValue) {\n  if(Array.prototype.reduce) return array.reduce(reductionFunction, initialValue);\nvar t = Object(this), len = t.length >>> 0, k = 0, value = initialValue;\n  for (; k < len; k++) {\n    value = callback(value, t[k], k, t);\n  }\n  return value;\n}\n```\nI guess it depends on how many people require IE8 support - if it's only a few, then perhaps using es5-shim would be the best option.\n. ",
    "mydigitalself": "Glad you like it @hassankhan.\nIf you like, why not create a Gitter room (https://gitter.im/hassankhan/emojify.js) and we'd be happy to lurk in there and answer questions. You can also add a badge on your README like this: http://blog.gitter.im/badgers/\n. Glad you like it @hassankhan.\nIf you like, why not create a Gitter room (https://gitter.im/hassankhan/emojify.js) and we'd be happy to lurk in there and answer questions. You can also add a badge on your README like this: http://blog.gitter.im/badgers/\n. ",
    "hoxoa": "Hey, \nI have found a working way. Just tested it locally and its working for me.\nYou have to change the img_dir  in emojify.js from img_dir: 'images/emoji', to\n img_dir: 'http://www.emoji-cheat-sheet.com/graphics/emojis',. \n. Hey, \nI have found a working way. Just tested it locally and its working for me.\nYou have to change the img_dir  in emojify.js from img_dir: 'images/emoji', to\n img_dir: 'http://www.emoji-cheat-sheet.com/graphics/emojis',. \n. ",
    "Sean-Der": "@hassankhan \nFirst off, great work on emojify.js it is an awesome library! The learning curve for setup+code was pretty much nil.\nI am now working on a SPA that can only fetch assets on initial load, after that it shouldn't be making network requests. How would like to see a PR to implement this?\nWould you be ok with me having the update.sh process have two flows?\nOne would create the array of strings (as you have right now) and maybe the other one could create emoji+base64 encoded png? I know the payload will be very large, but I am fitting into pre-existing requirements.\nIf you have a better idea I would love to hear it! I will wait a day or two before I start so other people can provide input. thanks!\n. @qq99 Totally agree, I would make sure to keep both as an option. I am planning on implementing this as a switch that allows you to inline things via a switch to update.sh \nI think that is the best option?\n. @hassankhan \nGrunt task works for me! I will create a grunt task that walks the img directory and creates a stylesheet,  and then I will add an option to setConfig that is a bool Something like useStyleSheet. If you use that it will create spans with the appropriate style instead.\nDoes that sounds like the direction you would take it?\n. Hey @hassankhan thanks for the review! I fixed the shortened variable name. Next time I am gonna use one char variables names, and use differing cases :smile: \nI also added the tests and fixed an issue it found. One more review please!\n. @qq99 \nI don't have a test to test the insertEmojicon codepath, I will work on that tomorrow\nI will also add a commit to the branch updating the copy with the comment you have on README.md:34\nthanks\n. @hassankhan @qq99 \nI updated the README.md and added more tests with bfffd72 3d11235\n. @hassankhan @qq99 @suprememoocow \nAny thoughts on this PR? Anything I should be fixing?\n. @hassankhan \nFirst off, great work on emojify.js it is an awesome library! The learning curve for setup+code was pretty much nil.\nI am now working on a SPA that can only fetch assets on initial load, after that it shouldn't be making network requests. How would like to see a PR to implement this?\nWould you be ok with me having the update.sh process have two flows?\nOne would create the array of strings (as you have right now) and maybe the other one could create emoji+base64 encoded png? I know the payload will be very large, but I am fitting into pre-existing requirements.\nIf you have a better idea I would love to hear it! I will wait a day or two before I start so other people can provide input. thanks!\n. @qq99 Totally agree, I would make sure to keep both as an option. I am planning on implementing this as a switch that allows you to inline things via a switch to update.sh \nI think that is the best option?\n. @hassankhan \nGrunt task works for me! I will create a grunt task that walks the img directory and creates a stylesheet,  and then I will add an option to setConfig that is a bool Something like useStyleSheet. If you use that it will create spans with the appropriate style instead.\nDoes that sounds like the direction you would take it?\n. Hey @hassankhan thanks for the review! I fixed the shortened variable name. Next time I am gonna use one char variables names, and use differing cases :smile: \nI also added the tests and fixed an issue it found. One more review please!\n. @qq99 \nI don't have a test to test the insertEmojicon codepath, I will work on that tomorrow\nI will also add a commit to the branch updating the copy with the comment you have on README.md:34\nthanks\n. @hassankhan @qq99 \nI updated the README.md and added more tests with bfffd72 3d11235\n. @hassankhan @qq99 @suprememoocow \nAny thoughts on this PR? Anything I should be fixing?\n. ",
    "adam-lynch": "FYI I'm doing this\n. See #98\n. I can do the Grunt -> Gulp conversion. \n@hassankhan FYI, the links in your second comment there are broken.\n. Moving to Gulp needs to wait til #47 is merged I guess.\n. An even better table of emoji: http://emoji.codes/family\n. Grunt -> Gulp done; #85.\n@hassankhan would you be open to creating a Trello / waffle.io board for this repo? It would make it easier to complete all these tasks.\n. @hassankhan this looks good. Do you have a project for emojify.js on it? How do I access?\n. We should make a new release now. We have added some major features; full Node support, sprites, etc. There are no real outstanding or ongoing PRs so it'll be a long time before we get all of these features done for version 1.0. \n@hassankhan give me the go ahead and I'll publish to npm :smile: (and of course merge develop into master)\n. #57 is less important since everything is supported in Node now. It's less likely that someone will pass a HTML string to replace. I created it and I won't be using replace anymore probably. It should be fixed but not urgently.\nFor tidying up the config options, can you create an issue clearly defining what the config should be?\n\nBTW, can you even submit to npm for me? I thought I had to update my npm packages myself :confused:\n\nYeah. See node-webkit-builder (I'm listed as a maintainer) for example. I think you need to run npm owner add adam-lynch emojify.js, see npm-owner.\n. How about a version 1.0 now? It's a shame those changes aren't out there.\nP.S. Did you add me as an owner to the npm package? :smiley: \n. ping\n. @hassankhan if you add me as an owner to the npm package then I can make the release.\n. :frowning: Ok, we think we will have to fork this and maintain it ourselves. This project moves far too slowly. It's very frustrating. We added big features as far back as October (which we need) which still aren't released. \nWe've been trying to work using the develop branch and it's not working out (one related issue: #114). We need versions to be published to npm. \nAlso, we want Emoji One support so we think we'd have that done and released faster if we maintained our own project.\n. Wow, this is great news! Also, would be handy since the Android's emoji are licensed with the Apache 2 license. (Also see http://apps.timwhitlock.info/emoji/tables/unicode)\n. Ok, let's talk about this. I think another emoji set should be supported by way of another module. A different module for each set.\nThis way, each module is as lightweight as possible, has its own single bower.json, package.json, etc. to maintain. So if someone was to download it via bower for example, they'd only get the files needed for that set, the bower.json's main property would only point to the images for that set, and so on.\nWe could make an \"emojify-core\" module containing the main logic. All of these set-specific modules could then depend on this module and contain only set-specific code on top. \nBrowser builds could then be made with browserify / webpack (to mash everything into a single JS file). We might even be able to stick the build stuff into a common emojify-core-dev module to be shared.\nI personally want exactly everything that's there right now, but the result we'd get is emoji-one's emoji displayed on the screen.\n. Yeah I noticed afterwards. Maybe they should be more consistent.\n. I'm talking about stuff like :). Maybe the readme and gh-pages should both contain all the features.\n. Looks good but I just noticed you don't have the suggested CSS that gh-pages has.\n. Yeah\n. Why LESS? I use LESS but I don't see why it should be LESS?\nPlus it's still in gh-pages and not the readme then. Also, won't it be confusing that there's a .css, .min.css and .less but they don't all do the same thing?\n. > Well, not exactly. It's just sample styling ... no-one has to use it. Once it's there I'll remove it from gh-pages.\nOk, maybe we just disagree on this. I think most users should use the content of this file and it should be as clear as possible.\n. It's ok if people don't want to use them, but for the typical use case (most people), they'd need it. Let's make it easy for them. Instead of making it easy for the 1% and having a hidden dependency for the 99%.\n. Definitely\n. I don't mind helping, but I'm not sure what way you want to go with it. I wonder could you use something like cheerio so then you could even support things like ignoring certain element tag names, etc. even when using with node.\n. @qq99 No, see my first comment here. If I change that line, then yes I can use .replace.\n. That's basically what my line does. That would be fine and maybe should be done as a quick fix, but it might be worth considering providing all features to Node users via cheerio or something.\n. @hassankhan no prob\n. Ok, see above. I wonder is there a need for a separate set of tests for Node, since the existing tests are ran in the browser.\n. Done :smile: \n. Yeah, I won't be using data URIs. If you're not using them, then you definitely need to set the size to 1.5em like the CSS on gh-pages does. Otherwise they're huge.\nIf someone is using main-bower-files like I am, then it just means they never manually have to figure out what files to use and reference x.js or y.css. Instead, main-bower-files just takes the \"main\" files from the package's bower.json. In this case, if you only use this package's main file, then the emoji aren't really usable (they're huge).\n. Ok cool then. The only thing is that the data-URI one being named emofiy[.min].css makes it seem like you need it.\n. This not just short emoji, it is all emoji. Just discovered that.\n. Also, in case it's not obvious, this is a massive problem for markdown users; hello is converted to <p>hello</p> first.\n. Sure, I'll do that sometime today.\n. @hassankhan done\n. Don't merge yet. Gotta get npm test to reach into node_modules & call Grunt, instead of requiring grunt-cli to be installed.\n. Ok, this is ready for merging (still will fail unless #58 is merged though). \nNote: now grunt-cli needs to be installed globally to run the tests. There's no way to reach into node_modules like I said (which will work on all platforms). The Travis build will now install grunt-cli before running the tests.\n. That's because you merged the fix but I haven't pull that change down onto my fork's branch. Will do there in a minute. \n. Tada ^\n. Maybe it would if there wasn't merge conflict\n. The inliners out there are really not up to scratch. 99% of them depend on Juice which has fatal bugs on Windows. \nA lot of libraries that do stuff like this allow callbacks, etc. to modify the element / add classes, etc. See https://github.com/ichord/At.js/wiki/Callbacks, especially the last three. I don't have a use case for adding a class right now, but I think it's very likely that someone might one to add classes / other attributes.\n. I carried on reading through my notifications and already, I've found someone asking for a similar thing with another project; twitter/twitter-text-js#134. This library parses mentions (ie. @someones-name) and sticks them in anchor, etc.\n. I think we didn't go with that just because it's not Node. Also see https://github.com/Automattic/juice/pull/35#issuecomment-47364321 (and there are more issues with other ones). Even if the swig mailer one fixed it, then swig itself doesn't support Windows properly IMO. \nI think it comes down to this, any plugin that puts HTML on a page should allow users some control over those HTML elements. Usually it's done with callback hooks or something like that. I've needed to do it with almost every library I've used which injected HTML, for example: validators that inject validation messages, datepickers, etc. Sure my use case is for a style attribute, but another person might need a class, another a data attribute, etc. I don't see any good reason not to be support it. \nAs of right now, after the replacing, I use regex to grab the image's with the emoji class and stick on the style attribute but that isn't nice at all.\n. Oh @hassankhan, this is great if correct. These kind of things really need to be added to the readme & gh-pages though.\n. Good practice definitely. If I pass dir/dir/ for example, you have logic that handlings that trailing slash, then I have to duplicate that logic in my replacer function and always make sure it's in sync with yours because I might only want to pass the custom replacer in some cases and reply on the default in others.\n. Also, maybe it should be passed an object as a parameter instead. There are already two parameters and we're saying it should have the base URL there now too. It's normally said not to go past three paramters. If it was an object, you could easily add more in the future without actually having to add an actual parameter to the method signature / API.\n. Ok, this is now much cleaner for my use case :smile:;\n``` coffeescript\n    renderEmoji: (text) =>\n        emojiReplacerArgs = [text]\n        emojiReplacerArgs.push @customEmojiReplacer if @inlineEmojiStyle\n    return emoji.replace.apply this, emojiReplacerArgs\n\ncustomEmojiReplacer: (emoji, name) =>\n    return \"<img title='#{emoji}' alt='#{emoji}' class='emoji' src='#{@emojiBaseUrl}/#{name}.png' align='absmiddle' style='width:1.5em;height:1.5em;display:inline-block;margin-bottom:-0.25em;'/>\"\n\n```\n(CoffeeScript)\n. Don't forget to document that when a short emoji is matched (e.g. :)), that the arguments will be :) and smile, instead of :smile: and smile. \nBut really all three should be passed; the emoji found (:)), the name (smile) and the emoji (:smile:). Because of the inconsistency here, the replacer above now doesn't work; it needs to ignore the emoji parameter;\ncoffeescript\ncustomEmojiReplacer: (emoji, name) =>\n        return \"<img title=':#{name}:' alt=':#{name}:' class='emoji' src='#{@emojiBaseUrl}/#{name}.png' align='absmiddle' style='width:1.5em;height:1.5em;display:inline-block;margin-bottom:-0.25em;'/>\"\n. @4ver \n\nThe config would need to be a property of this though.\n\nIgnore those kind of details which are just specific to my example implementation. Like, my example also depends on @inlineEmojiStyle which is defined elsewhere.\n. > Having the image directory passed through can/maybe should be done, but as it currently stands you can retrieve it from defaultConfig anyway, right?\nCan you give an example?\nThe README looks good except you should probably mention that run can't be used in Node / only replace can be.\n. Maybe .replace deserves it's own proper section in the readme.\n. > ```\n\nreturn emojify.defaultConfig.emojify_tag_type; // Will be whatever you set it to with emojify.setConfig()\n```\n\ndefaultConfig is a misleading name then :/. \nAlso what if I don't pass an image base URL, will the default be in that property?\n. > If you don't pass an image base URL, the default is 'images/emoji', just like it says on the readme. \nYeah but it's not accessible via defaultConfig like anyone would assume, plus if it ever changed then any user's code assuming it's images/emoji would break. As @4ver said, \"I'd expect to be passed all of the variables needed to reproduce what the default replacer returns.\" That is just common practice. I feel like a lot of people would be confused using this library, things aren't obvious / as expected / like other libraries. \n\nThe readme could still be better I think. It would help a lot in this respect.\n\nNow type in an emoji keyword in your HTML, for example :smile: Now run emojify using emojify.run(). To exclude tags from being emojified, add no-emojify to their class attributes.\nYou can optionally pass an object to emojify.run() to restrict the emojification to that object only: emojify.run(document.getElementById('my-element'))\nYou can also use emojify.replace() method to emojify a string directly\n\nDocumenting methods in this way means someone has to read through big blocks of text to see what they need to do / use. Why not have a sections (with their own big headings) for:\n- How to add it to your project; script tag, bower, node\n- .setConfig\n- .run\n- .replace\n- Full usage example\nIt's important to clearly document each method's parameters and return values. What some projects do is generate some of their readme from code comments. I also think it's very important that the readme and gh-pages are very consistent; then if you change one, you should update the other too. Or, really simplify one (let's say gh-pages) to a small description (maybe with a live textarea example) and then link to the \"documentation\" (the readme).\n(Plus, clearly label what works on Node and what doesn't)\n. Better. How about something like this for parameters:\nrun([element])\nThis only works in the browser\nParameters\n\nelement - Optional HTML element to restrict the emojification to.\n. The difference between ### and #### isn't very obvious (like the method name & \"Parameters\") so maybe change that to one of the following:\n### and ##### /\n### and **heading** \nput a horizontal line (---) between each method.\n\nChange the first \"Usage\" heading to \"API\". Makes more sense to me, plus it's confusing since you have a \"usage\" section inside each method too anyway.\nSmall thing: npm should be lowercase. I saw they said it one of their docs once.\n\nI just saw this now:\n\nTo exclude tags from being emojified, add no-emojify to their class attributes.\n\nI so wish I could do this in Node! :smile: \n. @hassankhan? This should fix a lot of problems.\n. The beginning of node tests: #59 \nI don't think we can have tests that cover both Node & browser at once. Someone correct me if I'm wrong.\n. Actually, no, maybe there's a way to have the same set of tests ran in phantom & in node. But then we'd need symmetric features.\n. @qq99 good idea. But you could not bother with the concatenated one and just make both the node (string) and browser files support the exact same API. Although, if you managed to get the same API working in node, then you could use that in the web too (with browserify or something like that). I've experience with that if it helps.\n. This probably should have resulted in a minor version bump; i.e. to 0.10.0, because of #74\n. Ok, although there's no downside to following semver.\n. For anyone else, a temporary workaround is to install from GitHub instead of npm; npm install hassankhan/emojify.js\n. Sure this isn't because of #57\n. Why? This is such a general change. I would've thought this should be done on master and pulled from master onto develop. Otherwise now, it'll be awhile before master is updated with changes from develop?\n. There is no version >= 1 and this throws error. At least with npm, ~1.0 means get the highest version >= 1 but less than 2.0. This is based off master because the README users see when they come to the repo is the one in master. \n. @hassankhan I was just testing a performance problem :+1: \n. FYI for everyone else, I created adam-lynch/gulp-image-data-uri to do this. There was no good existing plugin out there.\n. So is emoji-parser the same code that was in emojify.js previously? And what about stuff like emojify.replace?\n. I just read over the jsdom README and this again. \n\nYoure right about emojify.replace, I should probably switch to constructing the html with strings rather than depending on document.createElement\n\nWhat's wrong with that if options.document is being passed?\n. But we'd have it anyway right? We'd require it for traversing so why not use it? So it could be safer? Maybe I'm missing something. \n. Ha sorry :stuck_out_tongue_closed_eyes::hammer:. I was thrown off by thinking of my own use case; I'm only using .replace because the other features aren't supported in Node so I wouldn't be using .replace once this is finished.\n. In my case, we're using browserify for our project so we're working in Node effectively but it'll be used in Node and most importantly the browser.\n\nI think that the easiest way for us to support both, is to not include jsdom / cheerio / jquery as a dependency, and instead have clear instructions showing that you have to pass in a DomElement, and for node that means that the user has to use something like jsdom to create a DomElement. We have to use a DomElement for the browser anyway because of the points you mentioned (not destroying existing bound events etc).\n\nI think the closer the implementation (& API) for both environments, the better. So are you saying the implementation would be the same? In Node, the user would just pass a DomElement created from jsdom and it would treated the same? \nFor use cases like mine where something could be used in Node or the browser, I guess the API should be the exact same so I could check which environment I'm in and choose whether to pass a real DomElement or one created via jsdom.\n. Don't have time to check but I bet @4ver knows what he's doing and if the tests pass in Node, then who can argue :smile:\n. Closes #88\n. Sure, I'll put emojify.dev.js in there (I'll rename it back to emojify.js) and I'll put the images in there too. I'll also put those images in /dist too. I'm going to then do the spritesheets task and put the spritesheets in /dist as well.\n. Done\n. On second thought, both .run and .replacer should accept a replacer as the second param (like .replacer) because .replace's replacer will be returning a string and .run's will be returning a node.\n. Getting there... this PR will now have to wait for https://github.com/aslansky/css-sprite/pull/29 and https://github.com/aslansky/css-sprite/pull/30\n. Well, an example would be using sprites or using different classnames, inner elements, etc.\n. Yes, that's the next step. But there's always the option that the user could override the replacer no matter what to do their own custom thing. We might have the sprites outputted as something like <span class=\"emoji emoji-smile\"></span> but they might want something custom. Options like this are a good bet because they're flexible. If a user wants something custom, then they can completely override stuff. Istead of using building in options for every little use case.\n. Ok, this is basically done. I've just to merge in changes, squash & rebase. Have a look at my fork's README\n. Ok, I just did the massive merge. I also fixed a big problem that if you used a custom replacer and added the emoji name as text of the new emoji element, then emojify would traverse that node too. So infinite loop. Luckily @4ver was in my office at the time :smile:.\n. \nReady for merge \n. @hassankhan Merge?\n. Should the node-only tests be gone now? Maybe we could just have all the tests in the tests directory, with browser.html and rename browser.js to node.js?\n. Also, you probably need to update CONTRIBUTING.md\n. Test structure looks good to me\n. Actually, this issue is wrong... those failing tests are specific to my PR. It's to do with config changes bleeding over into other tests.\n\nWould it be best to make a new pr fixing those tests?\n\nYeah, probably.\n. @hassankhan see #108\n. Ready\n. :grinning: \n. Yes but a dependency could broken on Windows or our logic could be broken. \nFor example: https://github.com/aslansky/css-sprite/pull/29. They used path.join to join the base URL to the image filename but path.join uses the system's path separator so it was broken on Windows because the resultant path was images\\spritesheet.png or something like that.\n. It's very little work anyway to have our tests run in four more test environments; on Node 0.10 & 0.11, both on Windows 32-bit & 64-bit. So that's good :smile: \n. Cool thanks\n. :smile: \n. One thing to note here is that the tests ran with phantomjs don't show any output when they all pass, but they do when something goes wrong so that's ok. (Look at the end of the logs at those links)\nAlso, a dependency of css-sprite uses node-gyp (ugh) which breaks the builds on Node 0.11 for some reason but that's ok because failures are allowed for the latest versions; see https://github.com/hassankhan/emojify.js/blob/develop/appveyor.yml#L7.\n. Related: #51 #57 \n. #57 was just a test. That PR was closed. I'm not sure if a test and fix was added in a different commit, or if nothing was done.\n. Wouldn't it be better to have an organization account then? :smile: \nWhat does this mean for the roadmap though? For example, the plan to support multiple emoji sets. I'm happy if only EmojiOne was supported because we planned to move to it anyway, but it would be good to know what the plan is.\n. I didn't\n. @kevinranks yep, thanks\n. @hassankhan Is it ok to make a new release?\n. Yep\n. I had the latest on develop\n. Looks good to me\n. @RRorg as far as I know, you're correct.\n. (But a lot of apps use them, they're not protecting them. If they were to start, I'm sure they'd start with the big companies first \ud83d\ude04 )\n. I still use this in production. Eventually I / my team will put some effort to help unite these projects. I mean we'd eventually like our users to be able to switch between emoji sets (based on the same set of emoji keywords), etc.\n. FYI I'm doing this\n. See #98\n. I can do the Grunt -> Gulp conversion. \n@hassankhan FYI, the links in your second comment there are broken.\n. Moving to Gulp needs to wait til #47 is merged I guess.\n. An even better table of emoji: http://emoji.codes/family\n. Grunt -> Gulp done; #85.\n@hassankhan would you be open to creating a Trello / waffle.io board for this repo? It would make it easier to complete all these tasks.\n. @hassankhan this looks good. Do you have a project for emojify.js on it? How do I access?\n. We should make a new release now. We have added some major features; full Node support, sprites, etc. There are no real outstanding or ongoing PRs so it'll be a long time before we get all of these features done for version 1.0. \n@hassankhan give me the go ahead and I'll publish to npm :smile: (and of course merge develop into master)\n. #57 is less important since everything is supported in Node now. It's less likely that someone will pass a HTML string to replace. I created it and I won't be using replace anymore probably. It should be fixed but not urgently.\nFor tidying up the config options, can you create an issue clearly defining what the config should be?\n\nBTW, can you even submit to npm for me? I thought I had to update my npm packages myself :confused:\n\nYeah. See node-webkit-builder (I'm listed as a maintainer) for example. I think you need to run npm owner add adam-lynch emojify.js, see npm-owner.\n. How about a version 1.0 now? It's a shame those changes aren't out there.\nP.S. Did you add me as an owner to the npm package? :smiley: \n. ping\n. @hassankhan if you add me as an owner to the npm package then I can make the release.\n. :frowning: Ok, we think we will have to fork this and maintain it ourselves. This project moves far too slowly. It's very frustrating. We added big features as far back as October (which we need) which still aren't released. \nWe've been trying to work using the develop branch and it's not working out (one related issue: #114). We need versions to be published to npm. \nAlso, we want Emoji One support so we think we'd have that done and released faster if we maintained our own project.\n. Wow, this is great news! Also, would be handy since the Android's emoji are licensed with the Apache 2 license. (Also see http://apps.timwhitlock.info/emoji/tables/unicode)\n. Ok, let's talk about this. I think another emoji set should be supported by way of another module. A different module for each set.\nThis way, each module is as lightweight as possible, has its own single bower.json, package.json, etc. to maintain. So if someone was to download it via bower for example, they'd only get the files needed for that set, the bower.json's main property would only point to the images for that set, and so on.\nWe could make an \"emojify-core\" module containing the main logic. All of these set-specific modules could then depend on this module and contain only set-specific code on top. \nBrowser builds could then be made with browserify / webpack (to mash everything into a single JS file). We might even be able to stick the build stuff into a common emojify-core-dev module to be shared.\nI personally want exactly everything that's there right now, but the result we'd get is emoji-one's emoji displayed on the screen.\n. Yeah I noticed afterwards. Maybe they should be more consistent.\n. I'm talking about stuff like :). Maybe the readme and gh-pages should both contain all the features.\n. Looks good but I just noticed you don't have the suggested CSS that gh-pages has.\n. Yeah\n. Why LESS? I use LESS but I don't see why it should be LESS?\nPlus it's still in gh-pages and not the readme then. Also, won't it be confusing that there's a .css, .min.css and .less but they don't all do the same thing?\n. > Well, not exactly. It's just sample styling ... no-one has to use it. Once it's there I'll remove it from gh-pages.\nOk, maybe we just disagree on this. I think most users should use the content of this file and it should be as clear as possible.\n. It's ok if people don't want to use them, but for the typical use case (most people), they'd need it. Let's make it easy for them. Instead of making it easy for the 1% and having a hidden dependency for the 99%.\n. Definitely\n. I don't mind helping, but I'm not sure what way you want to go with it. I wonder could you use something like cheerio so then you could even support things like ignoring certain element tag names, etc. even when using with node.\n. @qq99 No, see my first comment here. If I change that line, then yes I can use .replace.\n. That's basically what my line does. That would be fine and maybe should be done as a quick fix, but it might be worth considering providing all features to Node users via cheerio or something.\n. @hassankhan no prob\n. Ok, see above. I wonder is there a need for a separate set of tests for Node, since the existing tests are ran in the browser.\n. Done :smile: \n. Yeah, I won't be using data URIs. If you're not using them, then you definitely need to set the size to 1.5em like the CSS on gh-pages does. Otherwise they're huge.\nIf someone is using main-bower-files like I am, then it just means they never manually have to figure out what files to use and reference x.js or y.css. Instead, main-bower-files just takes the \"main\" files from the package's bower.json. In this case, if you only use this package's main file, then the emoji aren't really usable (they're huge).\n. Ok cool then. The only thing is that the data-URI one being named emofiy[.min].css makes it seem like you need it.\n. This not just short emoji, it is all emoji. Just discovered that.\n. Also, in case it's not obvious, this is a massive problem for markdown users; hello is converted to <p>hello</p> first.\n. Sure, I'll do that sometime today.\n. @hassankhan done\n. Don't merge yet. Gotta get npm test to reach into node_modules & call Grunt, instead of requiring grunt-cli to be installed.\n. Ok, this is ready for merging (still will fail unless #58 is merged though). \nNote: now grunt-cli needs to be installed globally to run the tests. There's no way to reach into node_modules like I said (which will work on all platforms). The Travis build will now install grunt-cli before running the tests.\n. That's because you merged the fix but I haven't pull that change down onto my fork's branch. Will do there in a minute. \n. Tada ^\n. Maybe it would if there wasn't merge conflict\n. The inliners out there are really not up to scratch. 99% of them depend on Juice which has fatal bugs on Windows. \nA lot of libraries that do stuff like this allow callbacks, etc. to modify the element / add classes, etc. See https://github.com/ichord/At.js/wiki/Callbacks, especially the last three. I don't have a use case for adding a class right now, but I think it's very likely that someone might one to add classes / other attributes.\n. I carried on reading through my notifications and already, I've found someone asking for a similar thing with another project; twitter/twitter-text-js#134. This library parses mentions (ie. @someones-name) and sticks them in anchor, etc.\n. I think we didn't go with that just because it's not Node. Also see https://github.com/Automattic/juice/pull/35#issuecomment-47364321 (and there are more issues with other ones). Even if the swig mailer one fixed it, then swig itself doesn't support Windows properly IMO. \nI think it comes down to this, any plugin that puts HTML on a page should allow users some control over those HTML elements. Usually it's done with callback hooks or something like that. I've needed to do it with almost every library I've used which injected HTML, for example: validators that inject validation messages, datepickers, etc. Sure my use case is for a style attribute, but another person might need a class, another a data attribute, etc. I don't see any good reason not to be support it. \nAs of right now, after the replacing, I use regex to grab the image's with the emoji class and stick on the style attribute but that isn't nice at all.\n. Oh @hassankhan, this is great if correct. These kind of things really need to be added to the readme & gh-pages though.\n. Good practice definitely. If I pass dir/dir/ for example, you have logic that handlings that trailing slash, then I have to duplicate that logic in my replacer function and always make sure it's in sync with yours because I might only want to pass the custom replacer in some cases and reply on the default in others.\n. Also, maybe it should be passed an object as a parameter instead. There are already two parameters and we're saying it should have the base URL there now too. It's normally said not to go past three paramters. If it was an object, you could easily add more in the future without actually having to add an actual parameter to the method signature / API.\n. Ok, this is now much cleaner for my use case :smile:;\n``` coffeescript\n    renderEmoji: (text) =>\n        emojiReplacerArgs = [text]\n        emojiReplacerArgs.push @customEmojiReplacer if @inlineEmojiStyle\n    return emoji.replace.apply this, emojiReplacerArgs\n\ncustomEmojiReplacer: (emoji, name) =>\n    return \"<img title='#{emoji}' alt='#{emoji}' class='emoji' src='#{@emojiBaseUrl}/#{name}.png' align='absmiddle' style='width:1.5em;height:1.5em;display:inline-block;margin-bottom:-0.25em;'/>\"\n\n```\n(CoffeeScript)\n. Don't forget to document that when a short emoji is matched (e.g. :)), that the arguments will be :) and smile, instead of :smile: and smile. \nBut really all three should be passed; the emoji found (:)), the name (smile) and the emoji (:smile:). Because of the inconsistency here, the replacer above now doesn't work; it needs to ignore the emoji parameter;\ncoffeescript\ncustomEmojiReplacer: (emoji, name) =>\n        return \"<img title=':#{name}:' alt=':#{name}:' class='emoji' src='#{@emojiBaseUrl}/#{name}.png' align='absmiddle' style='width:1.5em;height:1.5em;display:inline-block;margin-bottom:-0.25em;'/>\"\n. @4ver \n\nThe config would need to be a property of this though.\n\nIgnore those kind of details which are just specific to my example implementation. Like, my example also depends on @inlineEmojiStyle which is defined elsewhere.\n. > Having the image directory passed through can/maybe should be done, but as it currently stands you can retrieve it from defaultConfig anyway, right?\nCan you give an example?\nThe README looks good except you should probably mention that run can't be used in Node / only replace can be.\n. Maybe .replace deserves it's own proper section in the readme.\n. > ```\n\nreturn emojify.defaultConfig.emojify_tag_type; // Will be whatever you set it to with emojify.setConfig()\n```\n\ndefaultConfig is a misleading name then :/. \nAlso what if I don't pass an image base URL, will the default be in that property?\n. > If you don't pass an image base URL, the default is 'images/emoji', just like it says on the readme. \nYeah but it's not accessible via defaultConfig like anyone would assume, plus if it ever changed then any user's code assuming it's images/emoji would break. As @4ver said, \"I'd expect to be passed all of the variables needed to reproduce what the default replacer returns.\" That is just common practice. I feel like a lot of people would be confused using this library, things aren't obvious / as expected / like other libraries. \n\nThe readme could still be better I think. It would help a lot in this respect.\n\nNow type in an emoji keyword in your HTML, for example :smile: Now run emojify using emojify.run(). To exclude tags from being emojified, add no-emojify to their class attributes.\nYou can optionally pass an object to emojify.run() to restrict the emojification to that object only: emojify.run(document.getElementById('my-element'))\nYou can also use emojify.replace() method to emojify a string directly\n\nDocumenting methods in this way means someone has to read through big blocks of text to see what they need to do / use. Why not have a sections (with their own big headings) for:\n- How to add it to your project; script tag, bower, node\n- .setConfig\n- .run\n- .replace\n- Full usage example\nIt's important to clearly document each method's parameters and return values. What some projects do is generate some of their readme from code comments. I also think it's very important that the readme and gh-pages are very consistent; then if you change one, you should update the other too. Or, really simplify one (let's say gh-pages) to a small description (maybe with a live textarea example) and then link to the \"documentation\" (the readme).\n(Plus, clearly label what works on Node and what doesn't)\n. Better. How about something like this for parameters:\nrun([element])\nThis only works in the browser\nParameters\n\nelement - Optional HTML element to restrict the emojification to.\n. The difference between ### and #### isn't very obvious (like the method name & \"Parameters\") so maybe change that to one of the following:\n### and ##### /\n### and **heading** \nput a horizontal line (---) between each method.\n\nChange the first \"Usage\" heading to \"API\". Makes more sense to me, plus it's confusing since you have a \"usage\" section inside each method too anyway.\nSmall thing: npm should be lowercase. I saw they said it one of their docs once.\n\nI just saw this now:\n\nTo exclude tags from being emojified, add no-emojify to their class attributes.\n\nI so wish I could do this in Node! :smile: \n. @hassankhan? This should fix a lot of problems.\n. The beginning of node tests: #59 \nI don't think we can have tests that cover both Node & browser at once. Someone correct me if I'm wrong.\n. Actually, no, maybe there's a way to have the same set of tests ran in phantom & in node. But then we'd need symmetric features.\n. @qq99 good idea. But you could not bother with the concatenated one and just make both the node (string) and browser files support the exact same API. Although, if you managed to get the same API working in node, then you could use that in the web too (with browserify or something like that). I've experience with that if it helps.\n. This probably should have resulted in a minor version bump; i.e. to 0.10.0, because of #74\n. Ok, although there's no downside to following semver.\n. For anyone else, a temporary workaround is to install from GitHub instead of npm; npm install hassankhan/emojify.js\n. Sure this isn't because of #57\n. Why? This is such a general change. I would've thought this should be done on master and pulled from master onto develop. Otherwise now, it'll be awhile before master is updated with changes from develop?\n. There is no version >= 1 and this throws error. At least with npm, ~1.0 means get the highest version >= 1 but less than 2.0. This is based off master because the README users see when they come to the repo is the one in master. \n. @hassankhan I was just testing a performance problem :+1: \n. FYI for everyone else, I created adam-lynch/gulp-image-data-uri to do this. There was no good existing plugin out there.\n. So is emoji-parser the same code that was in emojify.js previously? And what about stuff like emojify.replace?\n. I just read over the jsdom README and this again. \n\nYoure right about emojify.replace, I should probably switch to constructing the html with strings rather than depending on document.createElement\n\nWhat's wrong with that if options.document is being passed?\n. But we'd have it anyway right? We'd require it for traversing so why not use it? So it could be safer? Maybe I'm missing something. \n. Ha sorry :stuck_out_tongue_closed_eyes::hammer:. I was thrown off by thinking of my own use case; I'm only using .replace because the other features aren't supported in Node so I wouldn't be using .replace once this is finished.\n. In my case, we're using browserify for our project so we're working in Node effectively but it'll be used in Node and most importantly the browser.\n\nI think that the easiest way for us to support both, is to not include jsdom / cheerio / jquery as a dependency, and instead have clear instructions showing that you have to pass in a DomElement, and for node that means that the user has to use something like jsdom to create a DomElement. We have to use a DomElement for the browser anyway because of the points you mentioned (not destroying existing bound events etc).\n\nI think the closer the implementation (& API) for both environments, the better. So are you saying the implementation would be the same? In Node, the user would just pass a DomElement created from jsdom and it would treated the same? \nFor use cases like mine where something could be used in Node or the browser, I guess the API should be the exact same so I could check which environment I'm in and choose whether to pass a real DomElement or one created via jsdom.\n. Don't have time to check but I bet @4ver knows what he's doing and if the tests pass in Node, then who can argue :smile:\n. Closes #88\n. Sure, I'll put emojify.dev.js in there (I'll rename it back to emojify.js) and I'll put the images in there too. I'll also put those images in /dist too. I'm going to then do the spritesheets task and put the spritesheets in /dist as well.\n. Done\n. On second thought, both .run and .replacer should accept a replacer as the second param (like .replacer) because .replace's replacer will be returning a string and .run's will be returning a node.\n. Getting there... this PR will now have to wait for https://github.com/aslansky/css-sprite/pull/29 and https://github.com/aslansky/css-sprite/pull/30\n. Well, an example would be using sprites or using different classnames, inner elements, etc.\n. Yes, that's the next step. But there's always the option that the user could override the replacer no matter what to do their own custom thing. We might have the sprites outputted as something like <span class=\"emoji emoji-smile\"></span> but they might want something custom. Options like this are a good bet because they're flexible. If a user wants something custom, then they can completely override stuff. Istead of using building in options for every little use case.\n. Ok, this is basically done. I've just to merge in changes, squash & rebase. Have a look at my fork's README\n. Ok, I just did the massive merge. I also fixed a big problem that if you used a custom replacer and added the emoji name as text of the new emoji element, then emojify would traverse that node too. So infinite loop. Luckily @4ver was in my office at the time :smile:.\n. \nReady for merge \n. @hassankhan Merge?\n. Should the node-only tests be gone now? Maybe we could just have all the tests in the tests directory, with browser.html and rename browser.js to node.js?\n. Also, you probably need to update CONTRIBUTING.md\n. Test structure looks good to me\n. Actually, this issue is wrong... those failing tests are specific to my PR. It's to do with config changes bleeding over into other tests.\n\nWould it be best to make a new pr fixing those tests?\n\nYeah, probably.\n. @hassankhan see #108\n. Ready\n. :grinning: \n. Yes but a dependency could broken on Windows or our logic could be broken. \nFor example: https://github.com/aslansky/css-sprite/pull/29. They used path.join to join the base URL to the image filename but path.join uses the system's path separator so it was broken on Windows because the resultant path was images\\spritesheet.png or something like that.\n. It's very little work anyway to have our tests run in four more test environments; on Node 0.10 & 0.11, both on Windows 32-bit & 64-bit. So that's good :smile: \n. Cool thanks\n. :smile: \n. One thing to note here is that the tests ran with phantomjs don't show any output when they all pass, but they do when something goes wrong so that's ok. (Look at the end of the logs at those links)\nAlso, a dependency of css-sprite uses node-gyp (ugh) which breaks the builds on Node 0.11 for some reason but that's ok because failures are allowed for the latest versions; see https://github.com/hassankhan/emojify.js/blob/develop/appveyor.yml#L7.\n. Related: #51 #57 \n. #57 was just a test. That PR was closed. I'm not sure if a test and fix was added in a different commit, or if nothing was done.\n. Wouldn't it be better to have an organization account then? :smile: \nWhat does this mean for the roadmap though? For example, the plan to support multiple emoji sets. I'm happy if only EmojiOne was supported because we planned to move to it anyway, but it would be good to know what the plan is.\n. I didn't\n. @kevinranks yep, thanks\n. @hassankhan Is it ok to make a new release?\n. Yep\n. I had the latest on develop\n. Looks good to me\n. @RRorg as far as I know, you're correct.\n. (But a lot of apps use them, they're not protecting them. If they were to start, I'm sure they'd start with the big companies first \ud83d\ude04 )\n. I still use this in production. Eventually I / my team will put some effort to help unite these projects. I mean we'd eventually like our users to be able to switch between emoji sets (based on the same set of emoji keywords), etc.\n. ",
    "ibrahimyu": "Nevermind. Turns out I can use replace() function. Should update the docs.\n. Nevermind. Turns out I can use replace() function. Should update the docs.\n. ",
    "dunckr": "Thanks for the library! It was really useful for my project emojiart\n. Thanks for the library! It was really useful for my project emojiart\n. ",
    "bradens": ":+1: Thanks for your hard work\n. :+1: Thanks for your hard work\n. ",
    "srikanthjeeva": "Sorry I got this error when emojify.js was not loaded properly in the page. Now its working fine. \n. Sorry I got this error when emojify.js was not loaded properly in the page. Now its working fine. \n. ",
    "scripting": "We're also having x-d rendered as an Emoji. \nSee this blog post for details.\nhttp://virgin.smallpict.com/2014/07/01/sixdigit.html\nWe're using Emojify in Fargo.\nDave\n. We're also having x-d rendered as an Emoji. \nSee this blog post for details.\nhttp://virgin.smallpict.com/2014/07/01/sixdigit.html\nWe're using Emojify in Fargo.\nDave\n. ",
    "tessi": "My description might be a little bit off, sorry for being confusing. I try to explain things better:\nI use emojify.js to add emojis to openproject (a project management tool). It works great - thanks for developing emojify.js :)\nThe issue I have is that the following text shall be displayed (without showing an emoticon):\n\n* *Example:*\n> [Work package tracking] Translation missing for closed work packages in Roadmap_\n\nUnfortunately, the :* at the first line is replaced with a kissing face:\n\n* *Example\n> [Work package tracking] Translation missing for closed work packages in Roadmap_\n\nI found out that there is a line in emojify.js that handles emoticons at line ends which was introduced in this commit and is tested here. It specifically allows emoticons at line ends, even when there is no whitespace in front of that emoticon.\nBecause there is code in emojify.js specifically handling this case, I assumed it is an important use case for you. That's why I though I'd better add an option to allow emoticons at line ends (even if there is no whitespace in front of the emoticon). So that I can turn this option off.\nIf you think we can handle this in a different way (or just rename the option, so that it makes more sense for you), I'm happy with that.\n. And I forgot to answer your question.\n\nI'm not quite sure I understand what the new option does, or if it's named correctly, perhaps?\nIf it is set to true (default), then hello:( would render an emoji, otherwise not?\n\nIf the option is set to true (which is the default), emoticons will be rendered at line ends (even if there is no whitespace in front of them).\nIf the option is turned off, emoticons are only rendered at line ends if they follow some sort of whitespace.\nIt should not change the behaviour at any other places except at the end of lines.\n. That works (and actually that is what I am doing right now) for most pages.\nHowever, I want to show a diff view where the actual markdown is displayed.\nThat page needs to display the unparsed markdown - best without kissing faces :)\n. I can certainly do that - and that would probably solve my problem.\nIf you don't find the proposed changes useful, you are welcome to close and forget this PR.\nOtherwise, I'd still be interested to refactor my changes so that they fit your preferred style. :)\nThanks @hassankhan\n. My description might be a little bit off, sorry for being confusing. I try to explain things better:\nI use emojify.js to add emojis to openproject (a project management tool). It works great - thanks for developing emojify.js :)\nThe issue I have is that the following text shall be displayed (without showing an emoticon):\n\n* *Example:*\n> [Work package tracking] Translation missing for closed work packages in Roadmap_\n\nUnfortunately, the :* at the first line is replaced with a kissing face:\n\n* *Example\n> [Work package tracking] Translation missing for closed work packages in Roadmap_\n\nI found out that there is a line in emojify.js that handles emoticons at line ends which was introduced in this commit and is tested here. It specifically allows emoticons at line ends, even when there is no whitespace in front of that emoticon.\nBecause there is code in emojify.js specifically handling this case, I assumed it is an important use case for you. That's why I though I'd better add an option to allow emoticons at line ends (even if there is no whitespace in front of the emoticon). So that I can turn this option off.\nIf you think we can handle this in a different way (or just rename the option, so that it makes more sense for you), I'm happy with that.\n. And I forgot to answer your question.\n\nI'm not quite sure I understand what the new option does, or if it's named correctly, perhaps?\nIf it is set to true (default), then hello:( would render an emoji, otherwise not?\n\nIf the option is set to true (which is the default), emoticons will be rendered at line ends (even if there is no whitespace in front of them).\nIf the option is turned off, emoticons are only rendered at line ends if they follow some sort of whitespace.\nIt should not change the behaviour at any other places except at the end of lines.\n. That works (and actually that is what I am doing right now) for most pages.\nHowever, I want to show a diff view where the actual markdown is displayed.\nThat page needs to display the unparsed markdown - best without kissing faces :)\n. I can certainly do that - and that would probably solve my problem.\nIf you don't find the proposed changes useful, you are welcome to close and forget this PR.\nOtherwise, I'd still be interested to refactor my changes so that they fit your preferred style. :)\nThanks @hassankhan\n. ",
    "Andersos": "Anything I can help with?\n. Is there anything I can do to help with this?\n. Sweet dude! Thanks. I'll test it out first thing monday morning =)\n. No wurries =) \nI'm going to try and get it working on Finn.no.\n. Anything I can help with?\n. Is there anything I can do to help with this?\n. Sweet dude! Thanks. I'll test it out first thing monday morning =)\n. No wurries =) \nI'm going to try and get it working on Finn.no.\n. ",
    "BenMQ": "I'm interested in helping out with the Config options enhancement, I find it useful in my own usage :smiley: \n. I'm interested in helping out with the Config options enhancement, I find it useful in my own usage :smiley: \n. ",
    "4ver": "@hassankhan @adam-lynch Ye could make a 0.10.0 release and wait for the api change to release 1.0 ?\n. +1 for this. An api like marked (https://github.com/chjj/marked#renderer) would be great. They let you provide a custom renderer which contains optional functions that are called for each type of element. You're given the text (and other relevant arguments) and return a string of the html that will be output.\njavascript\nrenderer = function (emojiName, imagePath) {\n    return '<img src=\"' + imagePath + '\" alt=\"' + emojiName + '\" data-whatever=\"something\"/>'\n}\n. Excellent. Would be good to have the path or config passed as well. Thanks!\n. That the img_dir variable should be passed through to the replacer function.\n. Good practice I guess. I'd expect to be passed all of the variables needed to reproduce what the default replacer returns. Otherwise, as a user you'd have to keep track of the config outside of the module. Is not a big deal though.\n. Joob! The config would need to be a property of this though.\n. Roger that!\n. Sure thing.\n. Oops. Copy paste job.\n. @hassankhan  My pr (https://github.com/hassankhan/emojify.js/pull/99) should resolve this. :smile: \nAll browser based tests are also run in node on my fork. Here's an example of how you use it in node: https://github.com/4ver/emojify.js/tree/develop#nodejs\n. The fact that the issue has been open for three years isn't all that encouraging. I don't think the change would affect the performance majorly (could even be faster). \n. I could make it so my tree traversal function is used instead of TreeWalker when it's not available. It would only be an extra 20 or so lines.\n. Great! The window object is needed to call functions like document.getElementById, document.createElement and createTreeWalker if it was available. You only need to pass it when it's not available (in node).\n. This is ready to be merged now.\n. Moved the tests around there. Not sure where to put the actual tests. Wouldn't be all that nice having a tests/tests directory :stuck_out_tongue:. Can leave the html file and runner.js in the browser directory though. \n. I fixed the ones using run using using your suggestion https://github.com/4ver/emojify.js/commit/4b2e73e9114cfa306b4b0321daca6254ea1be74b#diff-8c82ee69d20d7e0d883f52d820fb2715R61\nWould it be best to make a new pr fixing those tests?\n. https://www.npmjs.org/package/gulp-bench\n. That's outside the scope of this project. I recommend At.js\nOn Tue, 2 Dec 2014 07:57 raxan notifications@github.com wrote:\n\nHi\nhow to add a select menu for end user to choice emoji?\nright now user should know the shortcode of emoji...\nmaybe an autocomplete like here on github?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/hassankhan/emojify.js/issues/111.\n. You can use emojione to convert emoji unicode characters to emoji short codes.\n. :+1: \n. @hassankhan @adam-lynch Ye could make a 0.10.0 release and wait for the api change to release 1.0 ?\n. +1 for this. An api like marked (https://github.com/chjj/marked#renderer) would be great. They let you provide a custom renderer which contains optional functions that are called for each type of element. You're given the text (and other relevant arguments) and return a string of the html that will be output.\n\njavascript\nrenderer = function (emojiName, imagePath) {\n    return '<img src=\"' + imagePath + '\" alt=\"' + emojiName + '\" data-whatever=\"something\"/>'\n}\n. Excellent. Would be good to have the path or config passed as well. Thanks!\n. That the img_dir variable should be passed through to the replacer function.\n. Good practice I guess. I'd expect to be passed all of the variables needed to reproduce what the default replacer returns. Otherwise, as a user you'd have to keep track of the config outside of the module. Is not a big deal though.\n. Joob! The config would need to be a property of this though.\n. Roger that!\n. Sure thing.\n. Oops. Copy paste job.\n. @hassankhan  My pr (https://github.com/hassankhan/emojify.js/pull/99) should resolve this. :smile: \nAll browser based tests are also run in node on my fork. Here's an example of how you use it in node: https://github.com/4ver/emojify.js/tree/develop#nodejs\n. The fact that the issue has been open for three years isn't all that encouraging. I don't think the change would affect the performance majorly (could even be faster). \n. I could make it so my tree traversal function is used instead of TreeWalker when it's not available. It would only be an extra 20 or so lines.\n. Great! The window object is needed to call functions like document.getElementById, document.createElement and createTreeWalker if it was available. You only need to pass it when it's not available (in node).\n. This is ready to be merged now.\n. Moved the tests around there. Not sure where to put the actual tests. Wouldn't be all that nice having a tests/tests directory :stuck_out_tongue:. Can leave the html file and runner.js in the browser directory though. \n. I fixed the ones using run using using your suggestion https://github.com/4ver/emojify.js/commit/4b2e73e9114cfa306b4b0321daca6254ea1be74b#diff-8c82ee69d20d7e0d883f52d820fb2715R61\nWould it be best to make a new pr fixing those tests?\n. https://www.npmjs.org/package/gulp-bench\n. That's outside the scope of this project. I recommend At.js\nOn Tue, 2 Dec 2014 07:57 raxan notifications@github.com wrote:\n\nHi\nhow to add a select menu for end user to choice emoji?\nright now user should know the shortcode of emoji...\nmaybe an autocomplete like here on github?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/hassankhan/emojify.js/issues/111.\n. You can use emojione to convert emoji unicode characters to emoji short codes.\n. :+1: \n. \n",
    "andrewchilds": "Hi Hassan! Converting a bunch of emoticons like :) :-D is a bit aggressive for the application I'm working on, as I only want to convert :emoji:. You could also make the case that emoji-only is the more expected behavior. For example, Github and Trello don't convert emoticons in comments, only emoji, and Slack provides an option to disable emoticon parsing. That's why I made this behavior optional. Does that make sense?\n. My PR description was maybe too literal. :named: is simply the property name in the emoticons object. As you can see in the code change, this converts any emoji (/:([a-z0-9A-Z_-]+):/), in addition to +1 and -1.\n. Hi Hassan! Converting a bunch of emoticons like :) :-D is a bit aggressive for the application I'm working on, as I only want to convert :emoji:. You could also make the case that emoji-only is the more expected behavior. For example, Github and Trello don't convert emoticons in comments, only emoji, and Slack provides an option to disable emoticon parsing. That's why I made this behavior optional. Does that make sense?\n. My PR description was maybe too literal. :named: is simply the property name in the emoticons object. As you can see in the code change, this converts any emoji (/:([a-z0-9A-Z_-]+):/), in addition to +1 and -1.\n. ",
    "roundrobin": "+1\n. +1\n. ",
    "leoasis": "I'm using my fork with these changes as a dependency in my package.json for a browserify lib I'm working on, and it works. If you merge this, you'll still need to publish a new version to npm before being able to use it. Is that what you asked?\n. Any updates on this one? Is there anything missing to merge?\n. You can see the diff ignoring whitespace adding ?w=1 to the url:\nTry this: https://github.com/hassankhan/emojify.js/pull/44/files?w=1\n. There! Added 4 more spaces :P\n. From what I'm seeing in the tag you created, you forgot to bump the version in package.json. Perhaps that's the problem?\n. Great! Thanks! Now let's use the package from npm :D\n. You can use something like this to make it work https://github.com/es-shims/es5-shim\n. Yeah, the idea is that the shims are used by the developer using this, not a decision to be made inside the library. There may be other libraries which also rely on es5 features that can be shimmed, but you don't want those shims to be duplicated in every lib\n. Then the shim must exist in the tests, it should be included before the library in the html page, or required before the library if using browserify or similar\n. I'm using my fork with these changes as a dependency in my package.json for a browserify lib I'm working on, and it works. If you merge this, you'll still need to publish a new version to npm before being able to use it. Is that what you asked?\n. Any updates on this one? Is there anything missing to merge?\n. You can see the diff ignoring whitespace adding ?w=1 to the url:\nTry this: https://github.com/hassankhan/emojify.js/pull/44/files?w=1\n. There! Added 4 more spaces :P\n. From what I'm seeing in the tag you created, you forgot to bump the version in package.json. Perhaps that's the problem?\n. Great! Thanks! Now let's use the package from npm :D\n. You can use something like this to make it work https://github.com/es-shims/es5-shim\n. Yeah, the idea is that the shims are used by the developer using this, not a decision to be made inside the library. There may be other libraries which also rely on es5 features that can be shimmed, but you don't want those shims to be duplicated in every lib\n. Then the shim must exist in the tests, it should be included before the library in the html page, or required before the library if using browserify or similar\n. ",
    "waqasy": "@hassankhan Can you use the list I just uploaded at pastebin to parse icon names, so that we'll be able to use default names of twitter icons from their cdn instead of iOS.\n. +1\n. Same here, emoji between two words not working.\n\n. @hassankhan Can you use the list I just uploaded at pastebin to parse icon names, so that we'll be able to use default names of twitter icons from their cdn instead of iOS.\n. +1\n. Same here, emoji between two words not working.\n\n. ",
    "JustBlackBird": "As I can see the problems are in Array.prototype.forEach, Array.prototype.map, Object.keys and Array.prototype.reduce methods. If I replace these methods with non ES5 would you merge the pull request?\n. It seems that es5-shim is the simplest way to go. It is better than update the library.\n@hassankhan, may be something about es5-shim and IE compatibility should be noticed in the readme?\n. @hassankhan I mean a hint in the readme with notice about es5-shim. For example it can be something like the following:\nCare about old browsers compatibility? Use https://github.com/es-shims/es5-shim\nI'm not sure if it's needed but it can save time for developers who care about old browser compatibility.\n. As I can see the problems are in Array.prototype.forEach, Array.prototype.map, Object.keys and Array.prototype.reduce methods. If I replace these methods with non ES5 would you merge the pull request?\n. It seems that es5-shim is the simplest way to go. It is better than update the library.\n@hassankhan, may be something about es5-shim and IE compatibility should be noticed in the readme?\n. @hassankhan I mean a hint in the readme with notice about es5-shim. For example it can be something like the following:\nCare about old browsers compatibility? Use https://github.com/es-shims/es5-shim\nI'm not sure if it's needed but it can save time for developers who care about old browser compatibility.\n. ",
    "trevorah": "Looks like @leoasis is right, we should be able to fix this by making sure we match :D etc before :([a-z0-9A-Z_-]+):, which will swallow up everything.\n. Yep, it just requires a little bit of time as npm test doesnt give the best output if things error out.\n. Not quite, the previous code uses a regular expression to replace the :emoji: with the matching image tag. By separating out the emoji parser from the part that replaces/inserts the image tag, we can test the individual parts and have something a lot less buggy. Its kind of like separating out the parts of a compiler.\nYoure right about emojify.replace, I should probably switch to constructing the html with strings rather than depending on document.createElement. We could also reuse emojify.replace internally as long as we only use it on nodes where the type is TEXT_NODE, that way we can guarantee that there will be no html in the string that we are calling emojify.replace with.\n. I guess its just overkill to require a dom to concatenate strings if youre using emojify.replace. Especially when running in node.\n. would you traverse for emojify.replace?\n. haha, no worries.\n. I cant see it having a massive effect. Tree traversal would cause the biggest change in performance, but thats already happened in #99.\n. The use cases ive seen for node is that you either want to emojify a string as part of a template, or emojify a something like a blog post. The blog post is tricky as you would have to parse html without a dom.\nThe use cases ive seen for the browser are pretty similar, except that you have a dom for html parsing but you need to keep the size of the library small.\nThe \"emojfy a string\" use case is simple to solve for both node and browser, but the \"blog post\" use case (which requires html parsing) is difficult. We have to 1) have a dom parser for node and 2) keep the library small for browsers.\nI think that the easiest way for us to support both, is to not include jsdom / cheerio / jquery as a dependency, and instead have clear instructions showing that you have to pass in a DomElement, and for node that means that the user has to use something like jsdom to create a DomElement. We have to use a DomElement for the browser anyway because of the points you mentioned (not destroying existing bound events etc).\n. Yep, if the implementation is the same for both node and browser, then we have less to test/break.\n. Looks like @leoasis is right, we should be able to fix this by making sure we match :D etc before :([a-z0-9A-Z_-]+):, which will swallow up everything.\n. Yep, it just requires a little bit of time as npm test doesnt give the best output if things error out.\n. Not quite, the previous code uses a regular expression to replace the :emoji: with the matching image tag. By separating out the emoji parser from the part that replaces/inserts the image tag, we can test the individual parts and have something a lot less buggy. Its kind of like separating out the parts of a compiler.\nYoure right about emojify.replace, I should probably switch to constructing the html with strings rather than depending on document.createElement. We could also reuse emojify.replace internally as long as we only use it on nodes where the type is TEXT_NODE, that way we can guarantee that there will be no html in the string that we are calling emojify.replace with.\n. I guess its just overkill to require a dom to concatenate strings if youre using emojify.replace. Especially when running in node.\n. would you traverse for emojify.replace?\n. haha, no worries.\n. I cant see it having a massive effect. Tree traversal would cause the biggest change in performance, but thats already happened in #99.\n. The use cases ive seen for node is that you either want to emojify a string as part of a template, or emojify a something like a blog post. The blog post is tricky as you would have to parse html without a dom.\nThe use cases ive seen for the browser are pretty similar, except that you have a dom for html parsing but you need to keep the size of the library small.\nThe \"emojfy a string\" use case is simple to solve for both node and browser, but the \"blog post\" use case (which requires html parsing) is difficult. We have to 1) have a dom parser for node and 2) keep the library small for browsers.\nI think that the easiest way for us to support both, is to not include jsdom / cheerio / jquery as a dependency, and instead have clear instructions showing that you have to pass in a DomElement, and for node that means that the user has to use something like jsdom to create a DomElement. We have to use a DomElement for the browser anyway because of the points you mentioned (not destroying existing bound events etc).\n. Yep, if the implementation is the same for both node and browser, then we have less to test/break.\n. ",
    "ralphbean": "More information in arvida/emoji-cheat-sheet.com#48\n. > Should I put it in a separate file?\nHm, yeah.  Maybe something like LICENSE-IMAGES or something.\n. More information in arvida/emoji-cheat-sheet.com#48\n. > Should I put it in a separate file?\nHm, yeah.  Maybe something like LICENSE-IMAGES or something.\n. ",
    "hughanderson4": "on line 276 of emojify.js this is failing\nemojiMegaRe.exec(node.data)\nwhen node.data contains, for example :<3: or :</3:\ni was having the same problems with :+1: and :-1: but they have been fixed in the 0.9.5 release (i was on 0.9.1 when i had those issues)\n. yes, because i see only this in node.data\n\nActually now emojiMegaRe.exec(node.data) succeeds, it is validator.validate(match, match.index, match.input) that fails when node.data is just :<3:.\nAll of the special cases seem to be not working, except +1 and -1\n. here is my config directive:\nemojify.setConfig({emoticons_enabled : false, img_dir : '/emoji/0.9.5'});\n. on line 276 of emojify.js this is failing\nemojiMegaRe.exec(node.data)\nwhen node.data contains, for example :<3: or :</3:\ni was having the same problems with :+1: and :-1: but they have been fixed in the 0.9.5 release (i was on 0.9.1 when i had those issues)\n. yes, because i see only this in node.data\n\nActually now emojiMegaRe.exec(node.data) succeeds, it is validator.validate(match, match.index, match.input) that fails when node.data is just :<3:.\nAll of the special cases seem to be not working, except +1 and -1\n. here is my config directive:\nemojify.setConfig({emoticons_enabled : false, img_dir : '/emoji/0.9.5'});\n. ",
    "mshenfield": ":<3: and :</3: both work if you remove the : delimiters.  Are these meant to be supported within a : pair and by themselves (<3, </3)?  Other emoticons like :) or :-o also don't work if you place them within : tags (::): and ::-o: ) but can be emotified when you place them on their own.\n. Github hosts a lot (presumably all) of them for use for its emoji API. See https://developer.github.com/v3/emojis/. Here's an example: https://github.global.ssl.fastly.net/images/icons/emoji/smiley.png.\nEDIT: Spelling\n. Hey @hassankhan, are there any issues I can repair on the pull request?  Its a small fix, but it would be nice to see it merged.\n. Thanks @hassankhan!\n. :<3: and :</3: both work if you remove the : delimiters.  Are these meant to be supported within a : pair and by themselves (<3, </3)?  Other emoticons like :) or :-o also don't work if you place them within : tags (::): and ::-o: ) but can be emotified when you place them on their own.\n. Github hosts a lot (presumably all) of them for use for its emoji API. See https://developer.github.com/v3/emojis/. Here's an example: https://github.global.ssl.fastly.net/images/icons/emoji/smiley.png.\nEDIT: Spelling\n. Hey @hassankhan, are there any issues I can repair on the pull request?  Its a small fix, but it would be nice to see it merged.\n. Thanks @hassankhan!\n. ",
    "jimaek": "How about https://github.com/jsdelivr/jsdelivr ? More info https://hacks.mozilla.org/2014/03/jsdelivr-the-advanced-open-source-public-cdn/\n. How about https://github.com/jsdelivr/jsdelivr ? More info https://hacks.mozilla.org/2014/03/jsdelivr-the-advanced-open-source-public-cdn/\n. ",
    "PeterDaveHello": "Sorry.\n. Yep, automatically!\n. Sorry.\n. Yep, automatically!\n. ",
    "raxan": "I found this: https://github.com/yuku-t/jquery-textcomplete\nwork fine with your...\nWhy you don't integrate something? Because its important for integration....\n. I found this: https://github.com/yuku-t/jquery-textcomplete\nwork fine with your...\nWhy you don't integrate something? Because its important for integration....\n. ",
    "octoberzhu": "oh, github auto transformed. i will attach a image.\n\n. oh, github auto transformed. i will attach a image.\n\n. ",
    "Cederman": "Hi, sorry for the delay. I tried to add blacklist.classes and provide an array like this: ['fa'] but it complains about the dot (\".\") in blacklist.classes. Am I interpreting it wrong?\n. Like this:\nif($('#comments').length) {\n        emojify.setConfig({\n            blacklist.classes : ['fa'],\n            only_crawl_id    : 'comments',\n            img_dir          : '/bower_components/emojify.js/images/emoji',  // Directory for emoji images\n        });\n        emojify.run();\n    }\n. Ah, I see. I added it now, thanks for the help. I won't be able to test this right away but I'll close this issue. :+1: \n. Hi, sorry for the delay. I tried to add blacklist.classes and provide an array like this: ['fa'] but it complains about the dot (\".\") in blacklist.classes. Am I interpreting it wrong?\n. Like this:\nif($('#comments').length) {\n        emojify.setConfig({\n            blacklist.classes : ['fa'],\n            only_crawl_id    : 'comments',\n            img_dir          : '/bower_components/emojify.js/images/emoji',  // Directory for emoji images\n        });\n        emojify.run();\n    }\n. Ah, I see. I added it now, thanks for the help. I won't be able to test this right away but I'll close this issue. :+1: \n. ",
    "akdotcom": "I'd maybe designate an special character, say _, to indicate that this is a special case and keep it out of the normal namespace? So _plus1 indicates that this is an emoji name requiring special handling. Not sure if it's worth codifying that _plus means + or if it's better to look for the _ prefix and branch accordingly\n. :+1: working!\n. Thanks for taking a crack at it so quickly! BTW, we're using the library via bower, so eagerly waiting for 1.0.0 to land there =)\n. Thanks @adam-lynch & @4ver !!\n. Also, speaking of which, what happened to background-size: contain in basic/emojfy.css?\n. I'd maybe designate an special character, say _, to indicate that this is a special case and keep it out of the normal namespace? So _plus1 indicates that this is an emoji name requiring special handling. Not sure if it's worth codifying that _plus means + or if it's better to look for the _ prefix and branch accordingly\n. :+1: working!\n. Thanks for taking a crack at it so quickly! BTW, we're using the library via bower, so eagerly waiting for 1.0.0 to land there =)\n. Thanks @adam-lynch & @4ver !!\n. Also, speaking of which, what happened to background-size: contain in basic/emojfy.css?\n. ",
    "jiyinyiyong": "@hassankhan Confirmed :)\n. @hassankhan Is there any other aliases? How can I tell them without going through all of them?\n. thanks anyway\n. @hassankhan ping\n. Any log from Travis?\n. Confirmed on my side Thanks.\n. @hassankhan Confirmed :)\n. @hassankhan Is there any other aliases? How can I tell them without going through all of them?\n. thanks anyway\n. @hassankhan ping\n. Any log from Travis?\n. Confirmed on my side Thanks.\n. ",
    "kambayashia": ":+1: \n. :ok_hand: \n. i want to add 'background-size: cover(or contain)' to basic/emojify.css.\nWhat do you think?\n. updated basic/emojify.css\n. why do you not merge this?\n. thank you :bow: \n. :joy_cat: \n. :+1: \n. :ok_hand: \n. i want to add 'background-size: cover(or contain)' to basic/emojify.css.\nWhat do you think?\n. updated basic/emojify.css\n. why do you not merge this?\n. thank you :bow: \n. :joy_cat: \n. ",
    "jcblw": "just to let everyone know this can already be done using the img_dir config.\njavascript\nemojify.setConfig({\n  // use githubs CDN\n  img_dir: 'https://github.global.ssl.fastly.net/images/icons/emoji/'\n})\n. just to let everyone know this can already be done using the img_dir config.\njavascript\nemojify.setConfig({\n  // use githubs CDN\n  img_dir: 'https://github.global.ssl.fastly.net/images/icons/emoji/'\n})\n. ",
    "camrongodbout": "Any progress?\n. Any progress?\n. ",
    "Glavin001": "If you can manually edit the package.json you could remove that previous key and then run:\nbash\nnpm install --save emojify.js\nHopefully that fixes it. Let me know if that works.\n. If you can manually edit the package.json you could remove that previous key and then run:\nbash\nnpm install --save emojify.js\nHopefully that fixes it. Let me know if that works.\n. ",
    "wesleycoder-zz": "Thanks @Glavin001 it worked, could you change the dependency to \"emojify.js\": \"^1.0.1\", please?\nI've made a pull request for you.\nhttps://github.com/Glavin001/atom-gitter/pull/33\n. Thanks @Glavin001 it worked, could you change the dependency to \"emojify.js\": \"^1.0.1\", please?\nI've made a pull request for you.\nhttps://github.com/Glavin001/atom-gitter/pull/33\n. ",
    "vagusX": "you can check it below\nhttps://github.com/arvida/emoji-cheat-sheet.com/blob/master/public/graphics/emojis/relieved.png\nhttps://github.com/arvida/emoji-cheat-sheet.com/blob/master/public/graphics/emojis/satisfied.png\n. you can check it below\nhttps://github.com/arvida/emoji-cheat-sheet.com/blob/master/public/graphics/emojis/relieved.png\nhttps://github.com/arvida/emoji-cheat-sheet.com/blob/master/public/graphics/emojis/satisfied.png\n. ",
    "azharuniverse": "you have to again run emojify after new li insertion. using emojify.run({config});\n. It is not an issue at all. I implemented it in a dynamically generated list and it is working as expected. It is obvious that either we have to use emojify.replace() during insertion or emojify.run() after insertion. This issue can be safely closed.\n. Please fix this issue soon if possible. I am using it in my Chat Application. and without emojis chat is dry, tasteless. Also I don't want my users to be concerned about this space thing. I found your library very easy to integrate and useful. Please fix it if it can be fixed.\n. Yes. I use this in my project. Emojione emojis's graphics looks not as good\nas this one. Emojify gives native feeling like that of WhatsApp and other\nchatting platforms.\nOn Mar 10, 2016 11:47 PM, \"Hassan Khan\" notifications@github.com wrote:\n\nEmojiOne seems to support pretty much everything - does anyone even use\nthis anymore?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Ranks/emojify.js/issues/163.\n. you have to again run emojify after new li insertion. using emojify.run({config});\n. It is not an issue at all. I implemented it in a dynamically generated list and it is working as expected. It is obvious that either we have to use emojify.replace() during insertion or emojify.run() after insertion. This issue can be safely closed.\n. Please fix this issue soon if possible. I am using it in my Chat Application. and without emojis chat is dry, tasteless. Also I don't want my users to be concerned about this space thing. I found your library very easy to integrate and useful. Please fix it if it can be fixed.\n. Yes. I use this in my project. Emojione emojis's graphics looks not as good\nas this one. Emojify gives native feeling like that of WhatsApp and other\nchatting platforms.\nOn Mar 10, 2016 11:47 PM, \"Hassan Khan\" notifications@github.com wrote:\nEmojiOne seems to support pretty much everything - does anyone even use\nthis anymore?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Ranks/emojify.js/issues/163.\n. \n",
    "Khrystyna": "The problem is, I don't have anchor tag at that point. I have simple text. \n. Thanks for quick reply, I will wrap it with 'no-emojify' class at some point, that's definitely the only one solution. \n. The problem is, I don't have anchor tag at that point. I have simple text. \n. Thanks for quick reply, I will wrap it with 'no-emojify' class at some point, that's definitely the only one solution. \n. ",
    "kevinranks": "Hey @adam-lynch, we have no plans to change anything about emojify.js. I agree it would be nice to add support for Emojione (when/if we have time) but besides that we plan to let the contributors decide the best direction for it.  :smile: \n. The invitations are pending...should I remove them and try again?\n. @adam-lynch What about now?\n. Hey @adam-lynch, we have no plans to change anything about emojify.js. I agree it would be nice to add support for Emojione (when/if we have time) but besides that we plan to let the contributors decide the best direction for it.  :smile: \n. The invitations are pending...should I remove them and try again?\n. @adam-lynch What about now?\n. ",
    "grigoryvp": "Same for me. Archive only contains metadata, no code:\n\ncurl http://registry.npmjs.org/emojify.js\ncurl -O http://registry.npmjs.org/emojify.js/-/emojify.js-1.0.2.tgz\n\n. No ideas, it should be automatic on npm publish. I can think of some permission problems with source code files/dirs that prevent them from being packed. But this is pure imagination.\n. Same for me. Archive only contains metadata, no code:\n\ncurl http://registry.npmjs.org/emojify.js\ncurl -O http://registry.npmjs.org/emojify.js/-/emojify.js-1.0.2.tgz\n\n. No ideas, it should be automatic on npm publish. I can think of some permission problems with source code files/dirs that prevent them from being packed. But this is pure imagination.\n. ",
    "gothy": "Please try to add '/' here https://github.com/Ranks/emojify.js/blob/master/.npmignore#L2\nOr maybe change to '!dist//' on the third line?\n. Thanks!\n. Please try to add '/' here https://github.com/Ranks/emojify.js/blob/master/.npmignore#L2\nOr maybe change to '!dist//' on the third line?\n. Thanks!\n. ",
    "henrypoydar": "Bump\n. Bump\n. ",
    "leotm": "+1\n. Created a pull request on this #152 \n. +1\n. Created a pull request on this #152 \n. ",
    "laurent-le-graverend": "+1\n. +1\n. ",
    "jackycute": "+1\n. +1\n. ",
    "lorensr": "Sorry! #149 \n. Sorry! #149 \n. ",
    "Dodelkin": "I have the same problem, please fix it.\nRegards\n. I have the same problem, please fix it.\nRegards\n. ",
    "aviau": "Any news on this?\n. Any news on this?\n. ",
    "Menelion": ":+1: Implementing it on my blogging system, ran into the same issue: works in entry but not in comments laid out as a table.\nAny solution or help would be greatly appreciated.\nThanks.\n. Interesting. We've removed the table and now it works. But if a comment (consisting of two divs) is wrapped into one article (for the sake of ARIA accessibility), it immediately stops working.\n. Oh well, I even don't know about EmojiOne :(. Is it your new project?\n. :+1: Implementing it on my blogging system, ran into the same issue: works in entry but not in comments laid out as a table.\nAny solution or help would be greatly appreciated.\nThanks.\n. Interesting. We've removed the table and now it works. But if a comment (consisting of two divs) is wrapped into one article (for the sake of ARIA accessibility), it immediately stops working.\n. Oh well, I even don't know about EmojiOne :(. Is it your new project?\n. ",
    "danieltigse": "I have this issue too, any solution?\n. I have this issue too, any solution?\n. ",
    "Lazerbeak12345": "It should work using this code (found on http://hassankhan.me/emojify.js/):\nemojify.setConfig({\n   emojify_tag_type : 'div',           // Only run emojify.js on this element\n    only_crawl_id    : null,            // Use to restrict where emojify.js applies\n    img_dir          : 'images/emoji',  // Directory for emoji images\n    ignored_tags     : {                // Ignore the following tags\n        'SCRIPT'  : 1,\n        'TEXTAREA': 1,\n        'A'       : 1,\n        'PRE'     : 1,\n        'CODE'    : 1\n    }\n});\nemojify.run();\n. I noticed that if I get the 1.1.0 from the cdnjs link in the README.md file it works just fine.\n. Another idea :1: = :one: = :one: (for each number 0-10)\n. perhaps even something with :}\n. It should work using this code (found on http://hassankhan.me/emojify.js/):\nemojify.setConfig({\n   emojify_tag_type : 'div',           // Only run emojify.js on this element\n    only_crawl_id    : null,            // Use to restrict where emojify.js applies\n    img_dir          : 'images/emoji',  // Directory for emoji images\n    ignored_tags     : {                // Ignore the following tags\n        'SCRIPT'  : 1,\n        'TEXTAREA': 1,\n        'A'       : 1,\n        'PRE'     : 1,\n        'CODE'    : 1\n    }\n});\nemojify.run();\n. I noticed that if I get the 1.1.0 from the cdnjs link in the README.md file it works just fine.\n. Another idea :1: = :one: = :one: (for each number 0-10)\n. perhaps even something with :}\n. ",
    "bezner": "This setup still doesn't work to me with the latest version. Someone has solved the issue and can prompt us please?\n. This setup still doesn't work to me with the latest version. Someone has solved the issue and can prompt us please?\n. ",
    "schmunk42": "Ran into the same issue, the open PR #165 would fix this.. This should be merged, especially the current blacklist matches any tag with an A, for example TABLE, see also https://github.com/Ranks/emojify.js/issues/154. Ran into the same issue, the open PR #165 would fix this.. This should be merged, especially the current blacklist matches any tag with an A, for example TABLE, see also https://github.com/Ranks/emojify.js/issues/154. ",
    "nicklaros": "nice. it's too big for me as well\n. nice. it's too big for me as well\n. ",
    "mschinis": ":+1: on making a smaller sprite\n. :+1: on making a smaller sprite\n. ",
    "spencerthayer": "+1\n. Also can someone please provide a working example of the usage of the replacer behaviour with a fully written callback function? I can't for the life of me understand what he means. It's likely that since I am using 0.0.8 this functionality doesn't work.\n. +1\n. Also can someone please provide a working example of the usage of the replacer behaviour with a fully written callback function? I can't for the life of me understand what he means. It's likely that since I am using 0.0.8 this functionality doesn't work.\n. ",
    "andresmafra": "+1\n. +1\n. ",
    "DPeled": "How it suppose to look like in the web?\nIs the user has a scrollbar?\n. How it suppose to look like in the web?\nIs the user has a scrollbar?\n. ",
    "williamweckl": "+1. +1. ",
    "eremzeit": "I had a chance to do some more research on this.  For others I should mention that not all modern browsers support unicode emojis.  In particular, Chrome on Windows still doesn't offer native support.  Thanks for open sourcing this.\n. I had a chance to do some more research on this.  For others I should mention that not all modern browsers support unicode emojis.  In particular, Chrome on Windows still doesn't offer native support.  Thanks for open sourcing this.\n. ",
    "kevzettler": "Might be a good idea I just found this project through google searches and tried it out before seeing this issue and learning about emojione which covered my needs\n. Might be a good idea I just found this project through google searches and tried it out before seeing this issue and learning about emojione which covered my needs\n. ",
    "jlsjonas": "hmm... looks like you're not the only one @kevzettler \n(and after a quick comparison I was opting for emojify)\nbut, ye, since it would need a good \"spring cleaning\" at least (mostly related to cdn/guides, probably) and you've ( @hassankhan ) indicated that you don't have enough time to maintain this repo (and neither do I, sadly enough) I'd also vote to put a deprecation/abandoned/looking for maintainer notice in the readme\n. @azharuniverse that was my opinion about emojione 2,\nI'm currently using twemoji as alternative, although I'm not 100% convinced either\n. hmm... looks like you're not the only one @kevzettler \n(and after a quick comparison I was opting for emojify)\nbut, ye, since it would need a good \"spring cleaning\" at least (mostly related to cdn/guides, probably) and you've ( @hassankhan ) indicated that you don't have enough time to maintain this repo (and neither do I, sadly enough) I'd also vote to put a deprecation/abandoned/looking for maintainer notice in the readme\n. @azharuniverse that was my opinion about emojione 2,\nI'm currently using twemoji as alternative, although I'm not 100% convinced either\n. ",
    "fiznool": "EmojiOne's minified JS file is 222kB. emojify.js by contrast is 13kB.\nSome folk don't need complex unicode conversion, they just need a way of converting :smile: text into :smile:. For this reason I think emojify.js needs to live!. EmojiOne's minified JS file is 222kB. emojify.js by contrast is 13kB.\nSome folk don't need complex unicode conversion, they just need a way of converting :smile: text into :smile:. For this reason I think emojify.js needs to live!. ",
    "DT27": "Sorry, my fault.  I just found out that it could be set by setConfig... \n. Sorry, my fault.  I just found out that it could be set by setConfig... \n. ",
    "Maddoc42": ":+1: for the PR, I just stumbled across the same issue. Excluding anchor a elements per default is fine, however I didn't expect to also have that match to article.. :+1: for the PR, I just stumbled across the same issue. Excluding anchor a elements per default is fine, however I didn't expect to also have that match to article.. ",
    "MylesIsCool": "Definitely one I would love to see fixed :+1: \n. Definitely one I would love to see fixed :+1: \n. ",
    "sgdc3": "Yeah!\n. Yeah!\n. ",
    "SijmenSchoon": "How about changing :) to \ud83d\ude42?\n. How about changing :) to \ud83d\ude42?\n. ",
    "MadLittleMods": "@SijmenSchoon Emojify doesn't have a simple smile yet and was added to emoji cheat sheet only a little bit ago, https://github.com/arvida/emoji-cheat-sheet.com/pull/361\n. @SijmenSchoon Emojify doesn't have a simple smile yet and was added to emoji cheat sheet only a little bit ago, https://github.com/arvida/emoji-cheat-sheet.com/pull/361\n. ",
    "iacchus": "Same here, but your solution works for me as well, thank you..\nAlso, if you have various elements you can use:\n$(\".post-content\").each(function(){\n        $(this).html(emojify.replace($(this).html()))\n});\nChange  .post-element to your elements' class.. Same here, but your solution works for me as well, thank you..\nAlso, if you have various elements you can use:\n$(\".post-content\").each(function(){\n        $(this).html(emojify.replace($(this).html()))\n});\nChange  .post-element to your elements' class.. ",
    "thundergolfer": "I've just had the same problem. For example, with the following input string: \n:helicopter: :school: :smile: \nIf I use the data-uri css I get only :smile:. If I use the sprites css I get \ud83d\ude81  \ud83c\udfeb  but not \ud83d\ude04. \nEdit: Trying to use both doesn't work either.. @hassankhan Can you please put a prominent \"No longer maintained. Refer to Issues for existing problems\" message in the README.md?\nThis repo still shows up in Google searches, and finding the project's status upfront on the README.md would be helpful. . Does it convert the :face: string at all? I have gotten this library to convert it to a <div> but the <div> is empty because the image linking doesn't work.. I've just had the same problem. For example, with the following input string: \n:helicopter: :school: :smile: \nIf I use the data-uri css I get only :smile:. If I use the sprites css I get \ud83d\ude81  \ud83c\udfeb  but not \ud83d\ude04. \nEdit: Trying to use both doesn't work either.. @hassankhan Can you please put a prominent \"No longer maintained. Refer to Issues for existing problems\" message in the README.md?\nThis repo still shows up in Google searches, and finding the project's status upfront on the README.md would be helpful. . Does it convert the :face: string at all? I have gotten this library to convert it to a <div> but the <div> is empty because the image linking doesn't work.. ",
    "PowerP": "Someone found a solution for this?. Someone found a solution for this?. ",
    "edindino": "@hassankhan @island205 @juanpastas. @hassankhan @island205 @juanpastas. "
}