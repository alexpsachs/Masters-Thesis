{
    "rstacruz": "i got better use cases for you:\n1. keep the store in ~/.pnpm/node-4/store/ so that Babel doesn't take up 100MB for every project I have\n2. since the 'global' store is prepended by the node major version, I can switch node versions and switch my compiled modules out by symlinks\nthis is actually the very reason I put pnpm together! I'm still contemplating on how to best do this, whether it's to symlink ~/.pnpm/node-4/store/lodash@4.0.0 -> ~/project/node_modules/.store/lodash@4.0.0 -> ~/project/node_modules/lodash, or to skip the 2nd symlink entirely. Both have their pros and cons and I'm waiting to use pnpm for a while to get a feel of which would be the better approach. :+1:\n. jkroso: easier to account for what packages may (or may not) be in use. what if you stop using a dependency in one of your projects... how do we keep track that no project needs it anymore?\n. okay there's a super secret flag that lets you do this:\nsh\nnpm config set pnpm_store_path node_modules/.store  # <- default\nnot documenting it though, it's easy to screw this up if you don't know what you're doing\n. seems like an interesting idea, but i'm wondering: what would be the practical use case of separating dev and prod dependencies apart from .dockerignore?\n. Interesting, but this is a lot more nuanced than it seems on the surface. What if both your prod and dev dependencies use is-array@1.0.1, shouldn't it be present in both layers? which one gets precedence over the other?\nI'd wait to see what npm comes up with to solve that solution. As they mentioned in https://github.com/npm/npm/issues/9674, they're looking into it. I'm sure they're more knowledgeable about the ins and outs of this problem and the possible corner cases there can be.\nThanks for the report!\n. > i prefer the tarballs to be stored/cached globally, but i'd always want the actual packages to be unzipped and compiled within the current module. otherwise, if something fucks up, i'd have to clear the global cache.\nit seems this is the only way to go right now: https://github.com/rstacruz/pnpm/issues/19#issuecomment-177007860\n. absolutely.\n. thanks for the heads up!\n. actually i'm hoping to get a global .store at some point :) it will answer that concern too\n. > And babel-runtime does require('babel-runtime'). haha\nThis is accounted for, actually. babel-runtime@5.8.12/node_modules/babel-runtime is a symlink to babel-runtime@5.8.12. I don't know why they'd bother doing that though, it seems only babel-runtime@^5 has this issue... but yeah, I'm able to get babel to work with pnpm through this. ied does the same.\n\nThese packages should declare these dependencies in \"peerDependencies\" but they don't because with npm they can get away without it.\n\npeerDependencies isn't \"supported\" by npm, btw. Modern npm2 and npm3 versions won't install any peerDependencies for you. With pg-then + pg, you're expected to add both to your project. This is the same with other similar setups (some of these examples declare others as peerDependencies, some don't):\n- eslint + eslint-config-standard\n- jsdom + jsdom-global\n- pg + knex\n- babel-preset-es2015 + babel-runtime (or babel-register, babelify, babel-core)\n- browserify + babelify\n- etc...\npnpm more or less mirrors npm@2's behavior.\n. does it always happen?\nsadly i'm a little clueless with windows, sorry :(\n. This symlinking strategy is crucial to how pnpm works. Sadly, I may just have to disable windows support altogether.\n. that makes sense! junctions work differently than symlinks though (symlinks are relative, eg, you can ln .. parent and move parent around and it'll always refer to the .. of where it's placed to), so it isn't simply about replacing symlink() with junction().\nUnless I'm mistaken in how junctions work, of course... haven't touched windows in a long while.\n. npm link defaults to junctions on windows.\nhttps://github.com/npm/npm/blob/master/lib/utils/link.js#L41-L47\n. Try it out again. v0.14.0 is out with support for Windows.\n. exact same error?\n. I thought I enabled junctions... Let's see.\nOn Saturday, February 6, 2016, Stefan Penner notifications@github.com\nwrote:\n\nsome instructions for getting symlinks working (that seems to work for all\nusers, unless some strange admin stuff)\nhttp://ember-cli.com/user-guide/#symlinks-on-windows\nUltimately though, this project is (or should) use junctions, as it merely\nneeds to link dir, not dir + files.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/6#issuecomment-180418566.\n. yeah this happens to me too. i assume at some point it gets exhausted with connecting too many times at the same time. i assume some sort of throttling mechanism + retrying would help.\n. if anyone wants to take a stab at it, lib/got.js offers got() and got.stream() which is where it should be throttled. i can use throat for got(), but the stream one needs a bit more research.\n. thanks for the support guys. would definitely want this ironed out before we get into 1.0.0 and out of 'proof-of-concept' stage.\n. that sucks, but until #24 is out, you can just run pnpm install again (v0.8.0). it should pick up where it left off.\n. some changes (#24, #34) now made pnpm more reliable. upgrade to v0.11.0!\n. oh gosh this may or may not be that simple, haha. normal package resolutions are done this way: (lib/resolve.js):\n\n```\npnpm install lodash@^4.0.0\n\nGET https://registry.npmjs.org/lodash/^4.0.0\nget dist.tarball and dist.shasum from its response\n```\n\nbut scoped resolutions must be done this way:\n```\npnpm install @rstacruz/tap-spec@^4.0.0\n\nGET https://registry.npmjs.org/@rstacruz%40tap-spec\nget versions from its response\nfind the version that matches ^4.0.0 using semver.maxSatisfies()\nget versions.{version}.dist.tarball and versions.{version}.dist.shasum from it\n```\n\nthey should also be stored in the store without a / to maintain the \"flatness\" of .store. This is because symlinks in node_modules inside it assume the store is at ../../. So that'd be:\nsh\nnode_modules/.store/@rstacruz--tap-spec@4.0.0  # \u2713 ok\nnode_modules/.store/@rstacruz/tap-spec@4.0.0   # \u2717 bad\nApart from this, there might be some symlinking voodoo that may come out of symlinking node_modules/.store/@rstacruz--tap-spec@4.0.0 -> @rstacruz/tap-spec, but I haven't given that part enough thought just yet.\n. YAY lets  do that\n. btw there's pnpm install @rstacruz/tap-spec --debug\n. ```\npnpm:http https://registry.npmjs.org/@rstacruz%2Ftap-spec/latest +4ms\nResponse code 401 (Unauthorized)\nGET registry.npmjs.org/@rstacruz%2Ftap-spec/latest\n```\n:(\n. pnpm install @rstacruz/tap-spec@'*' --debug works though. the only thing stopping it is the need to mkdir node_modules/@rstacruz.\nError: Error: ENOENT: no such file or directory, rename '/xxx/node_modules/.tmp/5d54904e-5ef9-4acf-bd99-8781b3e53f0b' -> '/xxx/node_modules/.store/@rstacruz/tap-spec@4.1.1'\n. edit:\n\nthey should also be stored in the store without a / to maintain the \"flatness\" of .store. This is because symlinks in node_modules inside it assume the store is at ../../. So that'd be:\nnode_modules/.store/@rstacruz--tap-spec@4.0.0  # \u2713 ok\nnode_modules/.store/@rstacruz/tap-spec@4.0.0   # \u2717 bad\n\ndon't listen to me on this. i just tested it and it's fine.\nmkdir -p node_modules/@rstacruz\npnpm install @rstacruz/tap-spec@'*' --debug\nthe only thing missing is a way to resolve latest in a scoped package.\n. Okay, we now have this. this works:\npnpm install @rstacruz/tap-spec@*\nbut this doesn't:\npnpm install @rstacruz/tap-spec\n. As a workaround for now, pnpm install @rstacruz/deku is now an alias for  pnpm install @rstacruz/deku@* (which should actually be ...@latest). It achieves more or less the same effect.\n. So am I, good work!\nOn Saturday, January 30, 2016, Charlie Robbins notifications@github.com\nwrote:\n\n@rstacruz https://github.com/rstacruz I'm satisfied with the support of\nscoped modules. Going to close this.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/9#issuecomment-177076918.\n. Oh there's something that doesn't quite work yet that's important... Exact\nversions.\n\npnpm i @rstacruz/tap-spec@4.1.1\nOn Saturday, January 30, 2016, Rico Notifications \nnotifications@ricostacruz.com wrote:\n\nSo am I, good work!\nOn Saturday, January 30, 2016, Charlie Robbins notifications@github.com\n<javascript:_e(%7B%7D,'cvml','notifications@github.com');> wrote:\n\n@rstacruz https://github.com/rstacruz I'm satisfied with the support\nof scoped modules. Going to close this.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/9#issuecomment-177076918.\n. ah yes, like #13 says, this will also allow you to specify npm registries via npm config set registry https://my.registry.com.\n. yes that'd be great! mostly i've been too lazy haha, the integration tests work really fast and covers most everything\n. there's a whole bunch of new features btw, just did a spike for a few hours. we now have compiled modules support (yay!) and improved reliability (you can cancel and resume pnpm i any time).\n. using registry-url will get you this for free:\n\n\nsh\nenv npm_registry=http://my.regsitry.com pnpm install\n. okay, lemme do it now :P\n. out in v0.11.1. upgrade!\n. saw this already, good show :)\n. v0.4.0 now has this, thanks a ton.\n. #45 covers this case\u2014though it doesn't do so for scoped modules, it has the correct code to make this work. Thanks for your help!\n. dupe of #10, thanks!\n. issues, #10 is easy! and the todo list at https://github.com/rstacruz/pnpm#preview-release \u2014 keep in mind at this point pnpm is still to early though, many things are likely to change.\nthere's also https://github.com/alexanderGugel/ied which can also appreciate some contributor love.\n. Okay, I added a help wanted tag, let's do this\n. Also, the install() state is now all neatly tucked around paths and pkg:\nhttps://github.com/rstacruz/pnpm/blob/lifecycle/lib/install.js#L42-L73\nIt used to be all over the place. Now it'll be easy to pass the state of the current build around since they're all accessible through those.\n. damn... not that easy. just realized there's some painful edge cases here...\n. Okay, let me try to explain. imagine pg-then requires pg, and they're not bundled together. They'll be set up like this:\n- /project/node_modules/.store/pg-then@2.4.1\n- /project/node_modules/.store/pg@1.5.0\n- /project/node_modules/pg-then (symlink)\n- /project/node_modules/pg (symlink)\nIf, within /project, you do require('pg-then'), Node.js will read ./node_modules/pg-then, which resolves to the one in the store.\nKeep in mind require.resolve('pg-then') actually gives you the \"real\" path of /project/node_modules/.store/pg-then@2.4.1/index.js.\npg-then will now use require('pg') within itself, and this will work. The reason why this will work is because Node.js will search these paths:\n- /project/node_modules/.store/pg-then@2.4.1/node_modules/pg\n- /project/node_modules/.store/node_modules/pg\n- /project/node_modules/node_modules/pg\n- /project/node_modules/pg (found in here)\n- /node_modules/pg\nIf we move .store into, say, home/me/.pnpm/store, this lookup path now becomes:\n- /home/me/.pnpm/store/pg-then@2.4.1/node_modules/pg\n- /home/me/.pnpm/store/node_modules/pg\n- /home/me/.pnpm/node_modules/pg\n- /home/me/node_modules/pg\n- /home/node_modules/pg\n- /node_modules/pg\nAs you can see, the project (/project) is no longer in the search path. Bummer.\nThis only affects packages that are meant to be used together, but are not included linked as dependencies. This is a very common pattern:\n- babel-core and babel-preset-es2015\n- eslint and eslint-plugin-react\n- browserify and babelify\n- webpack and style-loader\n- and so on...\nSo in short, a global store turns out not to be feasible. Any thoughts and discussion on possible workarounds would be appreciated.\n. In that case, require('lodash') won't work then--it needs to be\nrequire('lodash@4.0.0'). It'd also be weird to be able to require packages\nnot in your project.\nOn Saturday, January 30, 2016, Chris McVittie notifications@github.com\nwrote:\n\nwhat about the path to the store being ~/.pnpm/store/node_modules?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/19#issuecomment-177167111.\n. Considering it seems impossible, I'm closing this for now.\n. Good try, but that's not entirely workable. For instance, if you want to store babel globally and have it used on your projects, it won't be able to see your projects's babel-preset-es2015 package because that resides in a different node_modules path.\n. Assuming your global store is in ~/.store (for simplicity's sake), you'll have these directories:\n- ~/.store/babel-core\n- /projects/xyz/node_modules/babel-preset-es2015\n- /projects/xyz/node_modules/babel-core (symlink to ~/.store/babel-core)\n\nNow imagine babel-core's index.js performs this call:\njs\n/* from babel-core/index.js */\nrequire('babel-preset-es2015')\nThe way this resolves for modules is it will start from the canonical path of babel-core, that is, ~/.store/babel-core, and find the node_modules paths that are valid for that path. That is:\n- ~/.store/babel-core/node_modules/babel-preset-es2015\n- ~/.store/node_modules/babel-preset-es2015\n- ~/node_modules/babel-preset-es2015\n- (and so on)\nSince it resolves from the canonical path of babel-core, symlinking (or npm linking, which is merely symlinking) your babel-core around your system won't let it see the node_modules in those symlinked paths.\n. Related: https://github.com/npm/npm/issues/5875\n. I'd be very interested to see if it's possible in Node.js :)\nOn Monday, April 25, 2016, Dmitri Zaitsev notifications@github.com wrote:\n\nI see. Thanks for the explanation!\nAnother idea:\nInstead of direct symlinks, create \"shell wrappers\" that would change the\ncontext for the resolver. So in the local user directory I have the shell\nwrappers:\n/projects/xyz/node_modules/babel-preset-es2015\n/projects/xyz/node_modules/babel-core\nSo now I run locally babel-core, which is just the shell that in turn\nruns the actual symlink to the global babel-core but with additional\ncontext to tell the Node resolver to look under the local /node_modules.\nThis way it would go again through the local shell-symlink-chain and would\ndo the trick.\nI understand that changing resolver context like that is possible in\nWebpack, so perhaps also in Node?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/19#issuecomment-214282476\n. Also, github modules should not be stored in the modulename@version format. they should have their own id's based on the unambiguous reference, eg:\n\nnode_modules/.store/git!!!github.com!rstacruz!scour.git#dff12e44b155613e000f1200f5069bfead7d459d\nalso keep note that some modules have a different github name than the module name. (eg, pnpm.js is in rstacruz/pnpm instead of rstacruz/pnpm.js), so that'd have to be accounted for, too:\nnode_modules/pnpm.js ->\nnode_modules/.store/git!!!github.com!rstacruz!pnpm.git#fc20f75c9e6e7e551dd00018f27eea1b17b3c3bf\n. It's complicated but try!\nOn Monday, February 1, 2016, Hal Henke notifications@github.com wrote:\n\nI might take a shot at this. Was taking a look at how npm does git repos\nearlier. Things seem to be progressing super quickly though so half expect\nto see a PR from someone by the time I get started [image: :smiley:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/20#issuecomment-177950105.\n. btw, have a look at lib/resolve/tarball.js to see how its handled for http://site.com/foo.tgz tarballs. it saves to the format of:\n\nnode_modules/.store/in-array-1.0.1#fc20f75c9e6e7e551dd00018f27\nwhere the hex number is a hash of the URL it was fetched from. I'm guessing git urls should be handled similarly, ie:\nnode_modules/.store/halhenke-jade-react-loader#fc20f75c9e6e7e551dd00018f27\nwhere the hex number is a hash of the git URL.\n. and bitbucket:a/b! btw, npm-package-arg will take care of these for you\n. Is it possible? Last I checked you can't download a tar ball of a commit Id\nOn Tuesday, February 23, 2016, Khoa Nguyen notifications@github.com wrote:\n\nI suggest we resolve the commit hash via Github API and download tarball.\nThis would be better, involving with git is complicated.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/20#issuecomment-187394541.\n. It seems the way to do this is to use npm pack on that file path first.\n. relevant: https://www.npmjs.com/package/realize-package-specifier\n. let's not do --global. use npm for that :-)\n. Updated the store format so that we can use the native npm ls (and friends). Out in v0.12.0.\n. As a side effect, when doing the final linking to node_modules:\n\nnode_modules/lodash --> node_modules/.store/lodash@4.0.0\n...the name is now derived from package.json. this will be necessary, again, for github/tarball fetches.\n. I am not sure. I'd love for it to happen sometime but it's pretty difficult\nto do with the current store setup (but not impossible!). Can't commit to a\ntimeline for that one, sorry.\nOn Saturday, January 30, 2016, Damian Kaczmarek notifications@github.com\nwrote:\n\nI was pretty excited to hear about this project. I can see that shrinkwrap\nis not supported at the moment but do you plan to support it at later\npoint? And if so, what's the schedule?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/30.\n. I'll have to rescind that... with #38, we now have compatibility with npm shrinkwrap. For now, because of npm/npm#11354, you'll need to do:\n\nnpm shrinkwrap --dev\nIt will land in v0.12.0 which should be out soon.\n. Okay, I'm happy with this now. This is a HUGE step up from pnpm because with this, we now have compatibility with the following npm commands:\n- npm ls\n- npm dedupe\n- npm prune\n- npm shrinkwrap\n- npm rebuild\n- ...many others, I bet\n\\o/\n. neat, why not!\n. wait, what's --userconfig?\nfrom how I understand what you said, it means we can use pnpm install --config custom_npmrc, and is probably worth noting somehow. Did I understand you correctly?\n. > Was just wondering if this manager aims to be sort of 1:1\nNot really, but maybe 95% there. With the store model pnpm is doing, there are likely some things that we can't do.\nI'm happy with not supporting --userconfig when --config does just fine \u2014 there are more important npm flags to implement, really.\nOne way we can do that is simply to pass process.argv with --userconfig swapped out for --config (rc('npm', {}, argv))\n. closing this for now... it seems it's not really that important.\nif anyone disagrees and needs this option, just voice it out and let's consider it again by then.\n. looks good, what's missing from this one?\n. oh, this has merge conflicts... but i rebased your branch for you (pr-41-rebased). You can pick it up like so:\nsh\ngit remote add upstream https://github.com/rstacruz/pnpm.git\ngit fetch upstream master\ngit reset --hard upstream/pr-41-rebased\n. by the way, huge thanks! really appreciate the help.\n. neat! resting now but ill look at this tomorrow.\nbtw, how's the code base so far? did you have trouble finding your way through?\n. everything looks ok so far, havent tested it though.\n. > I would even consider dropping --global support to be honest.\ngood point, maybe --global can just be a passthru to vanilla npm install. there may be scary voodoo involved in making a pnpm install --global work interoperably with non-pnpm global modules... would rather not think about it if it doesn't really matter.\n. > instead of trying to reimplement all of npm\nI'm also planning to reimplement whatever in npm that isn't compatible with pnpm... at the moment the only other thing (afaik) is npm uninstall.\n. ah hell, merging this now and trusting CI, haha. thanks for your help!\n. Oops!\n. btw, -O/--save-optional also exists, forgot about that\n. oh we definitely don't want to do that. using lib/require_json.js might be in order.\n. a new pr would probably be better.\n. fixed by #46 in v0.13.\n. okay, i know why this might be, we're using the not-so-documented https://registry.npmjs.org/lodash/>=4.0.0 endpoint when we should be using https://registry.npmjs.org/lodash.\nedit: I see you're way ahead of me on that one, hah\n. hey there! \n\nAre you sending the version range verbatim from package.json\n\nYes, they're being sent out as either semver versions (like 4.0.0), ranges (like ^4.0.0, or even > 4.0.0 < 4.1.0), or dist-tags (like latest). They're expected to be handled by npm semver.\n. very closely related to #12, but i do like how this uses it as a fallback. there's also 401 that should be retried in this case:\n```\n curl -v http://registry.npmjs.org/@rstacruz%2Ftap-spec/latest\n   Trying 103.245.222.162...\n Connected to registry.npmjs.org (103.245.222.162) port 80 (#0)\n\nGET /@rstacruz%2Ftap-spec/latest HTTP/1.1\nHost: registry.npmjs.org\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 401 Unauthorized\n``\n. i've gotta head out today, but i do love this, and i'll try to put in some time tomorrow to iron out any remaining issues.\n. Oh wait. This is actually incorrect... \"Pnpm install\" will read package.json and install whatever's on there. Except in your case, package.json is absent so it can't read \"dependencies\" from it (hence the error). It was actually correct behavior, albeit with an unhelpful message. \n. (For \"pnpm install\" anyway)\n. But yeah, \"pnpm\" with no args should default to something, and not give an error, which it probably does right now\n. Thanks!\n. try it now... v0.13.0 is out. be sure torm -rf node_modules/` first so you get the new updates.\n. Ohhh. Forgot that one. Nice catch.\n\nOn Sunday, January 31, 2016, Adam Byrne notifications@github.com wrote:\n\nWhen the package.json in the current directory contains a postinstall\nscript pnpm does not run it, but npm does.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/50.\n. Yeah, it doesn't verify installed versions, haha. Not yet anyway. Something\nto fix before declaring 1.0.0 for sure.\n\nAs a workaround, \"rm\" the symlink in node_modules/ember-cli first.\nOn Sunday, January 31, 2016, Adam Byrne notifications@github.com wrote:\n\nIn a new directory enter pnpm install ember-cli@1.13.13\nWhen it's finished, enter pnpm install ember-cli@1.13.15\nNothing happens - the previous version remains.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/51.\n. thanks for the reports, btw! feedback at this point really helps in prioritizing what's important to folks and finding edge cases i may not be finding myself.\n. thanks!\n. \u2716 /test/index.js:133:2: More than 1 blank line not allowed. (no-multiple-empty-lines)\n\neh, easy fix, lemme do it\n. thanks! already updated it.\nbtw, the usage of the normalized package.json data is no bueno:\n\nshould be easy to fix though; lemme get on that and release the next version then.\n. Oh, I added --save-optional in as well... was pretty much easy with your code :)\n. yes, we definitely need a way to do isolated unit tests (rather than the \"real-world\" integration tests we have now)!\n. >  I'm guessing that the performance might differ greatly based upon the VM \nI'm sure of that too, but having a benchmarking suite is a good step forward nonetheless.\n. By the way: pnpm recently supported npm3's flat tree as of v0.12. An emulation of it, anyway: the deep dependencies don't litter node_modules (like npm3); they're neatly tucked into node_modules/.store/node_modules.\n. Aye. Settled then!\n. How'd you do it?\nYeah it'd take a little longer now... But not by so much. Is it really\nnoticable?\nOn Monday, February 1, 2016, Adam Byrne notifications@github.com wrote:\n\nTo see whether it's worth exploring to achieve performance improvements, I\nquickly implemented something which would use the tarball from the .npm\ncache if present (and fall back to fetching from the server if not). It\nonly improved the install time by about 7% image: :disappointed:\nHowever, I then tried (something a little hackier) to force the package\nresolver to use npm's cached metadata if present (falling back to making a\nrequest to the registry if not). This improved the speed significantly:\nCurrent master - no cache:\n35.86s user 17.93s system 83% cpu 1:04.81 total\n...cache\n24.04s user 11.90s system 94% cpu 38.115 total\n(BTW there does appear to be a slight performance regression in today's\nrelease - at the very end it's taking longer than before)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/59.\n. been wondering about this as well, and also wondering if it can share caches with npm.\n. > (BTW there does appear to be a slight performance regression in today's release - at the very end it's taking longer than before)\n\nTo explain:\n1. We now throttle connections to a max of 16 at a time. You can get the old behavior with the (undocumented) switch of --concurrency=9999.\n2. There is now some extra steps done after installing: specifically, modules will be linked into node_modules/.store/node_modules. This should take just a second or so.\n. > metadata requests to the registry\nwould love to have this cached as well!\n. Curious: do people actually care about version badges?\n. Thanks!\n. okay i've no idea why travis is broken, i swear it was fxed when i went to sleep haha\n. Fixed by #71, a pretty much identical PR. thank you!\n. yeah, this is bit of a deviation that should probably be corrected. at the moment, it looks for the existence of package.json, not node_modules (that i later found out to be the case).\nIn the mean time, you can work around this behavior by adding a package.json to your project.\n. Yess!\n. ahh... i think i found a bug on Promise.all that bluebird fixed, hence the need for bluebird. i'll have to investigate a little more on that.\nI'd still like to keep bluebird as a devdependency though. its stack traces are super useful.\n. the object-assign makes sense!\nactually, i've been thinking on whether it should support legacy node.js versions too... not sure on that. being able to use arrow functions really cleans up the source considerably.\n. actually i can probably do something like this:\njs\n{\n  \"prepublish\": /* convert lib/ to babel-ified versions */\n  \"postpublish\": /* reset lib/ */\n}\nin which case it makes sense to keep bluebird/object-assign.\n. > Babel can polyfill Promises and Object.assign too by the way\nusing require('babel-polyfill'), afaik. I'd rather keep that out :)\n. okay, that's quite handy.\n. > I'd prefer to keep the node 0.x version as a fork.\nwouldn't a hard fork present a problem?\nhow about publishing a babelified version as \"pnpm-legacy\"?\n. oh there's also --retain-lines, how aboout that one?\n. also, there's an idea of something like\njs\ninstall = isNodeVersion4orAbove\n  ? require('lib/cmd/install')\n  : require('lib.es5/cmd/install')\n. yeah. my only concern with publishing a pnpm-legacy module is that it isn't putting the users ahead first: it's essentially pushing the burden on the user.\n. > I'd prefer to just use sourcemaps over --retain-lines, if it was between the two.\nDoes (modern) node.js support source maps?\n. #73 now adds inline source maps as part of the babel experiment. No idea if it works, haha.\n. on the other hand it'd cause fragmentation. keep in mind the CLI isn't the only way to consume pnpm\u2014say, if ember-cli were to add pnpm support, they'd likely opt to use pnpm-legacy instead.\n. I couldnt get the object-assign transform to work, btw. bummer\n. yes please!\nhi @crcn!\n. this literally just came into my inbox 5 seconds after i published 0.15.0. haha. thanks @crcn!\ncurious: what was the old pnpm for?\n. published now as 0.16.0. I've added a deprecation on the old package as well.\nIt seems npmjs.com (the website) is taking a while to update though... https://www.npmjs.com/package/pnpm\n. I also did npm owner remove architectd pnpm (it was on your other username).\n. thanks!\n. cc @stefanpenner, who's interested in trying to tinker around with integrating pnpm to ember-cli.\nthere's currently no way to pass in your own stdout/stderr stream yet, though.\n. this isn't really documented yet, i'd imagine there's a need for more options to make this developer-friendly.\nFor now, be sure to try passing { quiet: true } or use the simple logger (ref):\njs\nprocess.env.pnpm_logger = 'simple'\n. Related: #69\n. this is more or less ready, but i'm really interested to see how publishing to pnpm-legacy can be automated here. @davej\n. Ouch, that's even more complicated, but I guess that gets around the restriction of certain deps not being compatible with node0.10 (eg, got@6). Also that's probably better as postpublish.\n. Okay, I think I'll make a call on this and have pnpm publish a transpiled legacy-compatible version.\n- maintaining another babel-legacy/package.json will be more maintenance burden. it means every time a package is added or updated, it'll have to be updated manually alongside the primary package.json.\n- this also makes greenkeeper.io a bit useless for us, as a side effect of the above.\n- another babel-legacy/package.json to maintain will mean another npm install to do for developers... hilariously and ironically making it slower for us to get started in development.\n- I wouldn't even want to think about what a mess travis testing will be in that case.\n- having a pnpm-legacy npm module would mean fragmentation. those who will choose to programatically use pnpm will likely opt for pnpm-legacy while CLI users will use pnpm... I wouldn't want to deal with problems only appearing in one package but not the other.\n- a downgraded got@5 isn't so bad, really. it has a happy side effect of making ENOTFOUND (can't find registry.npmjs.org) retriable, which can happen in some cases with pnpm's high concurrency model.\n. thanks for the inputs @davej, sorry I'd have to go against your preferences here but ultimately, a separate package means burden on both the developers AND the users. had it not been for your input, i'd probably have neglected some edge cases, so thank you for all your help :+1:\n. thanks for the detailed stacktrace!\n. i'm guessing this is the problem:\n`` js\n/* fetch.js */\n//stream` is a tarball coming from http://registry.npmjs.org/\nstream\n  .on('response', start)\n  .on('data', _ => { actualShasum.update(_) })\n  .on('error', reject)\n  .pipe(gunzip()).on('error', reject)\n  .pipe(tar.extract(dir, { strip: 1 })).on('error', reject)\n  .on('finish', finish)\n\n```\nNotice the on('finish') \u2014 it's waiting for the end of the HTTP stream data, not the end of extracting (which can happen asynchronously).\nanyway, just a hypothesis\n. if anyone can help debug, that'd be appreciated! still can't pinpoint exactly what's \u00e7ausing this.\n. aw man, this is a side effect of the store layout, sadly. i guess it can be worked around but it won't be pretty\n. that project also fails to build electron-prebuilt under pnpm, still unsure why.\n. Aw man... that's true\n. also a shame the registry isn't gzipping that. maybe we can add a check to only do the \"optimized\" route only for registry.npmjs.org and non-scoped packages...\n. wouldn't it be better if it was automatically inferred for you? it's only supported for registry.npmjs.org and for non-scoped packages; 3rd-party registries are likely to not support it.\n. hm, fair i guess, maybe even an npm-style //gemfury.io/:resolution-mode config setting to whitelist certain registries.\n. How'd you get that? Can I see your package.json?\nOn Wednesday, February 3, 2016, Francis Torda notifications@github.com\nwrote:\n\npnpm is awesome but I'm having issue on installing please help\nIssue:\nbindingchown(pathModule_makeLong(path), uid, gid, req);\n^\nTypeError: uid must be an unsigned int\nat TypeError (native)\nat fschown (fsjs:1082:11)\nat /usr/local/lib/node_modules/pnpmjs/node_modules/tar-fs/indexjs:215:7\nat FSReqWraponcomplete (fsjs:83:15)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/83.\n. And what's your os and npm/node versions?\n\n$ npm version\nOn Wednesday, February 3, 2016, Rico Notifications \nnotifications@ricostacruz.com wrote:\n\nHow'd you get that? Can I see your package.json?\nOn Wednesday, February 3, 2016, Francis Torda notifications@github.com\n<javascript:_e(%7B%7D,'cvml','notifications@github.com');> wrote:\n\npnpm is awesome but I'm having issue on installing please help\nIssue:\nbindingchown(pathModule_makeLong(path), uid, gid, req);\n^\nTypeError: uid must be an unsigned int\nat TypeError (native)\nat fschown (fsjs:1082:11)\nat /usr/local/lib/node_modules/pnpmjs/node_modules/tar-fs/indexjs:215:7\nat FSReqWraponcomplete (fsjs:83:15)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/83.\n. shudder... let's see.\n. also, super clever with that docker one-liner, kudos!\n. Nice work @brotchie!\n. Yaaaaayyy!\n\n\nOn Wednesday, February 3, 2016, fengmk2 notifications@github.com wrote:\n\nAvoid getaddrinfo ENOTFOUND error.\n[image: image]\nhttps://cloud.githubusercontent.com/assets/156269/12785149/090addf0-cac6-11e5-8da4-05536bfa48b2.png\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/rstacruz/pnpm/pull/86\nCommit Summary\n- Enable http(s) keepalive\nFile Changes\n- M lib/got.js\n  https://github.com/rstacruz/pnpm/pull/86/files#diff-0 (21)\nPatch Links:\n- https://github.com/rstacruz/pnpm/pull/86.patch\n- https://github.com/rstacruz/pnpm/pull/86.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/pull/86.\n. #86, the patch for this, will be out on 0.18. in the mean time, you can try --concurrency 8 to reduce the concurrency, or just retry the pnpm install command where pnpm will happily pick up where it left off.\n. That'd be interesting. We're currently using got, but not by much, so it might be easy to switch to http2 with possible http fallback.\n\nIf there's a package that already handles this, lemme know (I don't know of any!). PR's are also welcome.\n. haha, thanks Robbie!\n. thanks, i have to warn you though, setting this to an absolute path will not necessarily net you the result you would think it does. packages not be able to find peer dependencies, which is what you would need for, eg, browserify + babelify, stylus + nib, jsdom + jsdom-global, webpack + babel-loader, and so on.\n. thank you!\n. This was discussed on #58. does it break your workflow?\n. there are many npm3 things that would be difficult to support that it's easier for pnpm to achieve npm2-like-ness.\n. What os/node versions?\nOn Monday, February 8, 2016, Joe Palala notifications@github.com wrote:\n\nAnyone know how to fix this:\nfs.js:984\nbinding.chown(pathModule._makeLong(path), uid, gid, req);\n^\nTypeError: uid must be an unsigned int\nat TypeError (native)\nat fs.chown (fs.js:984:11)\nat /usr/local/lib/node_modules/pnpm/node_modules/tar-fs/index.js:215:7\nat FSReqWrap.oncomplete (fs.js:95:15)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/103.\n. indeed, hosted packages aren't supported.\n. > do you have any idea why scoped modules can not work? separate $ npm i -D @rstacruz/tap-spec works fine\n\nit should, actually. did you ever figure it out?\n. thanks!\n. how about pnpm-install ramda inherits?\n. shame, I can't believe I missed this.\n. thanks!\n. Did you install less as well?\n. This might be a little different than #78. \nflow-bin@0.21.0! $ node lib/install.js\n  flow-bin@0.21.0! module.js:328\n  flow-bin@0.21.0!     throw err;\n  flow-bin@0.21.0!     ^\n  flow-bin@0.21.0! Error: Cannot find module 'deep-extend'\nThis seems to be a case where flow-bin was attempted to be built (npm run postinstall), but it's dependencies aren't ready yet.\n. ah, neat! I don't think making a separate pnpm/api is the way to go here... i think it's best we make install() take the things you need\u2014less code paths to maintain.\n. woot!\n. npm install -g pnpm? can you do which pnpm?\n. also are you using something like n or nvm or asdf or...?\n. Neat! Let's do it\nOn Tuesday, March 22, 2016, Kostya Esmukov notifications@github.com wrote:\n\nI'm constantly getting ! ENOENT: no such file or directory ... errors on\nmy setup with the latest pnpm 0.18.0, and this change you've made fixes\nthe problem for me: just tried to pnpm install for 5 times in a row and\nnever faced this error again.\nI think this quick fix should be merged and published ASAP, because ENOENT\nproblem makes pnpm practically unusable (at least for me). And then it\nmight be expedient to think how to make this fix even better: get rid of\nsync, etc.\n@rstacruz https://github.com/rstacruz , what do you think of this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/pull/138#issuecomment-199386529\n. 0.19.0 is out. Thanks! sorry i didnt see this earlier.\n. ohh i know what might cause that   \n. Nice one guys! Yes this is precisely why ctx.log is exposed.\n\nOn Saturday, March 26, 2016, Dave Jeffery notifications@github.com wrote:\n\n@patrickheeney https://github.com/patrickheeney something like this:\nimport install from 'pnpm/lib/install';import save from 'pnpm/lib/save';\nconst ctx = {\n   root: PROJECT_DIR,\n   store: join(PROJECT_DIR, 'node_modules/.store'),\n   // Provide your own log function to track progress\n   log: (a, b) => (c, d) => console.log(a, b, c, d)\n };\ninstall(ctx, 'some-package', join(PROJECT_DIR, 'node_modules'))\n   .then(dep =>\n     save({ path: PROJECT_DIR + 'package.json' }, [dep], 'dependencies')\n       .then(() => {\n         // 'some-package' installed and saved as dep in package.json\n       })\n   );\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/139#issuecomment-201376752\n. sorry for the late reply! this looks like it breaks the workflow of running pnpm install lodash on any directory without package.json. the only thing that should be caught is when runnng pnpm install (without arguments).\n. i guess it's an npm feature, i don't recall making provisions for this.\n\nhttps://docs.npmjs.com/files/package.json#directoriesbin\nthanks for the heads up, i never knew this was a thing. cordova-icon@0.7.0 is the package in question.\n. This looks interesting. Can anyone familiar with private npm registries vouch for this? @abhishekisnot\n. I'd love to merge this now, but I'd really like to clarify the always-auth point first. Thanks for the contribution.\n. There's already --debug, you can try that one.\n. Yeh, it seems like something only pnpm developers would be interested in so\nit wasn't documented :-)\nOn Monday, April 18, 2016, Peter Dave Hello notifications@github.com\nwrote:\n\nThanks, seems it's not in the help message, will try now.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/179#issuecomment-211199694\n. Great work. Reviewed and merged. Thank you for your contribution! \ud83d\udc9a\n. Sadly, with how node_modules are resolved... no that can't be done, unfortunately! #19\n. \ud83d\udc4c  Great work. Reviewed and merged. Thank you for your contribution.\n. Thanks! That's reasonable.\n. still need to add it to --help though\n. Thanks for the contribution! I've left comments on some problems with this.\n. Great work. Reviewed and merged. Thank you for your contribution. \ud83d\udc9a\n. Great work. Reviewed and merged. Thank you for your contribution. \ud83d\udc9a\n. Thanks, that's pretty interesting. Just to note, this won't work on all packages; mocha is one example that works a little differently :)\n. How would this affect non-JS binstubs? eg, http://github.com/rstacruz/git-update-ghpages?\n. okay, let's release it asap then!\n. Looks good! Great work. Thank you for your contribution. \ud83d\udc9a\n. Lemme add you to the collaborators. Thanks for all your help. https://github.com/rstacruz/collaborative-etiquette#for-collaborators\n. neat!\n. Oh dear Lord I didn't think of that. I would hope that would be a character\nthat's not valid in an npm name but valid in a directory name.\n\nOn Thu, Aug 4, 2016, 6:06 PM Andrey Popp notifications@github.com wrote:\n\nWebpack uses ! as delimiter between loaders and resources. That means\nthat loading packages from store messes with that. It would be great if\npnpm changes ! to ___ for example. What do you think?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/276, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAEikfRLS8wgDrpiXNHs1UlzPyMAlHzaks5qcbmVgaJpZM4Jcir5\n.\n. Im with @zkochan on his suggestions.\n\nOn Wed, Aug 24, 2016, 8:57 PM Zoltan Kochan notifications@github.com\nwrote:\n\nI vote for +\nThis will be a breaking change. Stores created by previous versions of\npnpm will not be compatible with the new one. Hence, I suggest to add the\npnpm version number to store.json and at least print a warning\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/276#issuecomment-242053462, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAEikXbtdLfC1AZqyVZiHOrYivJ_YAIMks5qjD_EgaJpZM4Jcir5\n.\n. Thanks for the help Lukas!\n\nOn Thu, Aug 4, 2016, 11:13 PM Lukas Eipert notifications@github.com wrote:\n\nDo not upgrade, as it will break authorization in the current form. I am\nworking on a PR\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/pull/277#issuecomment-237581704, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAEikfbTezLitAvWcKvwVSFoN-XxkmyNks5qcf-pgaJpZM4JcvzY\n.\n. that CI failure was because i merged it prematurely, no worries :)\n. Updating to node 4 gets you a few nice things:\n- new versions of caw and got will finally be supported\n- no need for babel (!)\n\nNow that 0.12 is considered legacy, we should probably finally make the\nmove.\nOn Wed, Aug 10, 2016, 5:53 AM Zoltan Kochan notifications@github.com\nwrote:\n\nThere's not enough test coverage, so I've added more and found out some\nissues.\nThere was an issue with preserve symlinks not working correctly on\nWindows. Fixed and covered with unit test.\nThere was also an issue with usage of sync cross-spawn. It doesn't support\nNodeJS 0.10. It was missed because the CLI\nhttps://github.com/rstacruz/pnpm/blob/more-tests/bin/pnpm.js#L55 is not\ncovered with tests and the prepublish execution of the main package\nhttps://github.com/rstacruz/pnpm/blob/more-tests/lib/cmd/install.js#L74-L87.\nWill cover them later.\nIMHO, support of Node 0.10 can be dropped as it is maintained only till\nOctober, this year.\nHowever, if it is important to support Node 0.10, syncSpawn usages can be\nsubstituted with async.\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/rstacruz/pnpm/pull/286\nCommit Summary\n- Covering preserved symlinks with tests\n- Test executables\n- Run tests on NodeJS 0.12 instead of 0.10\nFile Changes\n- M .travis.yml\n  https://github.com/rstacruz/pnpm/pull/286/files#diff-0 (2)\n- M appveyor.yml\n  https://github.com/rstacruz/pnpm/pull/286/files#diff-1 (2)\n- M lib/install/link_bins.js\n  https://github.com/rstacruz/pnpm/pull/286/files#diff-2 (22)\n- M package.json\n  https://github.com/rstacruz/pnpm/pull/286/files#diff-3 (2)\n- M test/index.js\n  https://github.com/rstacruz/pnpm/pull/286/files#diff-4 (53)\n- A test/packages/hello-world-js-bin/index.js\n  https://github.com/rstacruz/pnpm/pull/286/files#diff-5 (2)\n- A test/packages/hello-world-js-bin/package.json\n  https://github.com/rstacruz/pnpm/pull/286/files#diff-6 (15)\n- R test/packages/local-pkg/index.js\n  https://github.com/rstacruz/pnpm/pull/286/files#diff-7 (0)\n- R test/packages/local-pkg/package.json\n  https://github.com/rstacruz/pnpm/pull/286/files#diff-8 (0)\n- A test/packages/pkg-that-uses-plugins/index.js\n  https://github.com/rstacruz/pnpm/pull/286/files#diff-9 (3)\n- A test/packages/pkg-that-uses-plugins/package.json\n  https://github.com/rstacruz/pnpm/pull/286/files#diff-10 (11)\n- A test/packages/plugin-example/package.json\n  https://github.com/rstacruz/pnpm/pull/286/files#diff-11 (10)\nPatch Links:\n- https://github.com/rstacruz/pnpm/pull/286.patch\n- https://github.com/rstacruz/pnpm/pull/286.diff\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/pull/286, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAEikeCSTWbGM1QVAD-eat3QFwTh-xatks5qePbKgaJpZM4Jgj-M\n.\n. is it time to make a new pnpm release? :-)\n. v0.25 is out by the way!\n\nhttps://github.com/rstacruz/pnpm/blob/master/HISTORY.md\n. Oh and @zkochan, send me your npm username so I can add you there as well.\n. re: npm access: done!\nalso, totally agree on those points.\n. Man GitHub really needs a chat of sorts\n. enabled for push, pull request and status.\n. Wow!\nOn Fri, Aug 19, 2016, 11:33 PM Zoltan Kochan notifications@github.com\nwrote:\n\nMerged #302 https://github.com/rstacruz/pnpm/pull/302.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/pull/302#event-761423830, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAEikeK1DWeF8an83DQgVUatQ0IfKkEGks5qhczkgaJpZM4Jnyst\n.\n. Not my personal style (I always preferred writing changelogs manually), but I understand the need so I'm happy to go ahead with it.\n\nCare to document how it works? Maybe in CONTRIBUTING.md?\n. Yep, that's good! I don't wanna impose the underscore thing though, I'm not sure how I feel about it myself haha. \n. Haha, this is so hilariously meta it's amazing! I wanted to do this before but couldn't, because pnpm needed it's dependencies to work... Kind of a chicken and egg problem. Didn't realize you can do it this way. :\u2665 \n. Have you looked at the bundleDependencies field of package.json? You can\nprobably do the same without a hack script.\nOn Mon, Aug 22, 2016, 8:17 AM Andrey Popp notifications@github.com wrote:\n\nThis is super cool. (I played a bit with the similar schema for a Node.js\nCLI app I've been working on, it's unfortunate npm doesn't support such use\ncase natively).\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/pull/310#issuecomment-241291559, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAEikVp1R5MyDvNChgTBVgHAaNPY6-cnks5qiOqGgaJpZM4JpbQl\n.\n. Hmm. Have you also tried it publishing node_modules (instead of cached_node_modules) by adding it to package.json's files? This removes the need for scripts.preinstall.\n. Sure, let's merge this now and figure out a way to refine it later. I'm not particularly a fan of the postinstall scripts at the moment :\\ Good job @zkochan! \n. I'm trying to do a bundleDependencies implementation now. It seems to work, even for transitive dependencies. What problems did you have with that?\n. hmm, i take that back, you need to list transitive dependencies in the bundleDependencies as well.\n\nsh\nrm -rf node_modules\nnpm install --production\nls node_modules  # use this to build bundleDependencies\n. you need npm3 to publish it, but it should work for npm2/npm3... i think.\n. okay yeah thats right, npm tries to find newer dependencies even if it's already in the package :o\n. I think npm pack (what npm publish uses) already accounts from transient dependencies. The problem is sometimes your top-level dependencies request for version ranges (eg \"retry\": \"^0.8.8\") so npm tries to find a newer version for those :\\\n. Maybe just don't cache to begin with? It doesn't help speed up builds much.\n. Also, Travis caching is simply uploading node_modules to Amazon S3 (?), and downloading it later. It essence, that's very much like downloading from npm's registry.\n. Just sent them a support ticket, we'll see if there's any movement on there in the next few days.\n. We're in luck, here we go!\nI added you both to the new org, you should probably accept that invite before we actually move there\n. To do:\n- [x] Create organization (done!)\n- [ ] Actually move the repo an organization\n- [ ] Move http://ricostacruz.com/pnpm/ to pnpm.github.io (actually, does anyone even care about this site?)\n- [ ] Update docs (eg, vs-npm.md has a reference to rstacruz/pnpm)\n- [ ] Update package.json with new URL\nAdded by @zkochan:\n- [ ] reconfigure the Travis/AppVeyor integrations (they may not automatically adjust)\n- [ ] update the Travis/AppVeyor badges in the README\n. > What will be the organization image?\n\u00af_(\u30c4)_/\u00af thanks ionicons\n\n. Feel free to make one, I don't have time to man it :P  \nRico Sta. Cruz  \u00b7  @rstacruz  \u00b7  ricostacruz.com\nOn Aug 30 2016, at 4:57 pm, Zoltan Kochan notifications@github.com wrote:  \n\nWhat about a twitter account for pnpm?\n\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the\nthread.\n. Oops!\n\nOn Tue, Aug 30, 2016, 10:47 PM Zoltan Kochan notifications@github.com\nwrote:\n\nI merged it, just used a different commit message docs(README): remove\nname change notice\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/pull/330#issuecomment-243464771, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAEikSU3ke8tSJ8fSrxCVkVbnQ_cg7Ixks5qlEKDgaJpZM4Jv5zn\n.\n. > if (err || srcPath === linkString) return cb(err)\n\nNormally I write if (x || y) to mean: if x, or if it's not x but y...\nIn this case, it's like:\n\nIf it's an error...\n...or if it's not an error, but srcPath === linkString...\n\nOr more like:\n\nConsider srcPath === linkString an error\n\nBut I can't actually remember what went on here, sorry :P\n. Oh alright, that wasn't entirely true, I think what happened here is:\njs\n    fs.readlink(dstPath, (err, linkString) => {\n      if (err || srcPath === linkString) return cb(err)\npseudo code translation:\n- check out dstPath\n- if we get an error, throw an error\n- if it's a symlink to the correct path already (srcPath), it's a success\nmore verbosely:\njs\n    fs.readlink(dstPath, (err, linkString) => {\n      if (err) return cb(err)\n      if (srcPath === linkString) return cb()\nI think I lifted this code off somewhere, haha\n. Yarn is indeed impressive! If anything I'm happy that pnpm's taken a spot\nin history at the npm -> ied -> pnpm -> yarn evolution.\nIn that case, perhaps pnpm can shift focus to what yarn can't do, such as\nspeed up your CI test suites.\nOn Wed, Oct 12, 2016, 12:58 AM Zoltan Kochan notifications@github.com\nwrote:\n\nSeems like Facebook open sourced its npm alternative and it already has\nmore stars than pnpm.... will we be able to compete with it?\nMy 1st impression was that it has roughly the same speed that pnpm/ied\nhas... and it seems to not have some of the issues that we have due to\nsymlinks usage.\nIn that case the only thing in which pnpm is better is disk usage. We can\nsave gigabytes of data with a shared storage.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/415, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAEikSX3dvinNS1MIN5gxMPcnITa8khWks5qy8AxgaJpZM4KT3QN\n.\n. Pnpm works more eagerly than yarn.\n\nYarn has a step for fetching all package specs, and another step for\nactually downloading them. In contrast, pnpm proceeds with downloading as\nsoon as it can. This is faster.\nHowever: yarn saves resolution data into yarn.lock, so the next time you\nrun it, it skips the resolution step.\nTldr: yarn is faster when there's yarn.lock. pnpm is faster otherwise.\nOn Wed, Oct 12, 2016, 2:11 PM Jamen Marz notifications@github.com wrote:\n\nHmm, this could be an error on my end, but isn't pnpm way faster?\nI'm using a global store, like yarn does I believe, and yarn takes roughly\n8-10s in one of my projects, while pnpm takes less than a second. (both\nafter caching).\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/415#issuecomment-253128067, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAEikXvK6L4UvKMuwEJvstp_sLmDJzS_ks5qzHoTgaJpZM4KT3QN\n.\n. Go for it!\n\nOn Fri, Nov 25, 2016, 6:04 PM Vladimir Starkov notifications@github.com\nwrote:\n\nshall we switch to github greenkeeper integration from just bot?\nhttps://github.com/integration/greenkeeper\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/pull/490#issuecomment-262922007, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAEikeJH7Tv5XXviYEOKcD6ovj9lhCSVks5rBrK1gaJpZM4K7Bm6\n.\n. Not merging?. Unfortunately it drops support for node 0.12 (though it should really dropped since it's out of LTS range). Dropping support for 0.12 means having to upgrade more modules than this though.. > Maybe we'll have to make the dependency trees flat as npm and yarn.\n\nYeah... in hindsight this seems like a good idea now.. oops, there's a bug here, you now can't install more than 1 module from the same scope.\npnpm install \"@rstacruz/tap-spec@*\" \"@rstacruz/deku@*\"\n. changing fs.mkdir to mkdirp to fix this.\n. add this into test/index.js too!\n. i mean, require('./latest') at least\n. .then(function () { ... }, t.end) to catch errors\n. use require('npm-package-arg') here... it figures that out exactly for you.\n. hmm, the npm behavior is to do:\nnpm install --save rimraf\nand it'll pick up rimraf@^2.5.1 for you based on what it resolves. Might simply need to make installMultiple() throw data of the top-level packages it installed.\n. I think a neater way to do this is to make installMultiple() work like this:\njs\ninstallMultiple(...)\n  .then(packages => {\n    // sift through `packages` for ones that match `cli.input`, and save those\n  })\nto do this, install() should simply resolve to the necessary package data at the end:\n`` js\nfunction install (...) {\n  // these stuff are already available ininstall()`.\n  var pkg = {\n    name: 'lodash',\n    fulldata: / package.json here /,\n    ...\n  }\nreturn / snip /\n    .then(_ => pkg) // <-- resolve the Promise to that stuff so that it can be picked up later\n}\n``\n.semver.maxSatisfies()will help\n. this can be one level higher (outsideresolveNpm()).\n. there's also typeversion(eg,lodash@4.0.0) andrange(eg,lodash@^4`) by the way.  this is looking good!\n. or:\njs\nrequire('mz/fs').writeFile\n. this should probably eventually show a help screen like npm --help... but for another time; for now this is gold\n. test.only\naha! (no worries, easy enough to fix)\n. ouch. had to downgrade this.\n. aww yeah, i know using promises for pnpm wasn't a mistake, really makes things like this easier :D\n. lmao, i'm going to add grep -v test.only test/*.js to this repo's travis.\n. Sorry, we can't update got because it's not going to work with Node 0.12. (or was it 0.10?) Same with caw. \n. eslint 3 is too recent for us; the eslint configs need 2. We have to wait until they update to eslint 3.\n. ohh, of course\n. why is camelcaseKeys needed here?\n. hahah\n. I'd be pretty concerned about using a preinstall script. npm help scripts has this to say:\no Don't  use  install. Use a .gyp file for compilation, and prepublish for anything\n         else. You should almost never have to explicitly  set  a  preinstall  or  install\n         script.  If  you  are doing this, please consider if there is another option. The\n         only valid use of install or preinstall scripts is for compilation which must  be\n         done on the target architecture.\nI'd also be afraid of using the node binary, which is some systems is nodejs. See my comment about publishing node_modules :)\n. why not ~/.pnpm/store or ~/.pnpm-store?. hmm, I think usual custom conventions are more like GLOBAL_PATH = '~/.pnpm' but thats just a preference for me :). ",
    "gtramontina": "Ooh! I like where this is going! :beers: \n. ",
    "jkroso": "@rstacruz what's the potential benefit of the extra symlink?\nPS: the symlink approach is great in general since It saves tons of rm -rf node_modules && npm i though you will run into problems with babel and plugin-ish modules since people rely on the implementation details of npm occasionally. So expect to do a bit of hackery.\n. ",
    "kevinverelst": "Setting this flag does not seem to work for me, the packages are still stored in node_modules/.store.\nIdeas are welcome\n. Nvm, the flag is renamed to store_path it seems\n. Great! Thanks \n. ",
    "zkochan": "hey, I documented the usage of a shared store: https://github.com/rstacruz/pnpm/blob/master/docs/recipes/shared-store.md\n. @mhart, we are currently working together with ied on some shared store specs. You can review the specs and add your suggestions. https://github.com/alexanderGugel/ied/blob/spec/spec/STORE.md. @Meroje I tried that new --preserve-symlinks option in node v6.3.0. I've changed the shebang of eslint in a shared pnpm store to #!/usr/bin/node --preserve-symlinks. However, the deps were being resolved to the original location as before. Maybe it works only when executed directly via the node command?\n. I've managed to make it work on node v6.3.0!!! :sunglasses: \nSteps (on Linux):\n1. create a monorepo with subpackages\n2. create a shared store for the subpackages\n3. install eslint and some plugins to one of the packages\n4. replace the eslint symlink in /node_modules/.bin with a real file that has this content:\n``` js\n   #!/usr/bin/node --preserve-symlinks\nrequire('../eslint/bin/eslint')\n   ``\n5. make the file an executable with this commandchmod 755 node_modules/.bin/eslint`\nAfter these steps eslint finds its plugins without any problems even though the storage is in a different place!\n. I think this issue can be reopened now that https://github.com/rstacruz/pnpm/issues/244 has been merged and it works on new NodeJS\nThe one thing that has to be implemented for a global store is the deletion of packages that are not used anymore.\n. @vjpr please create an issue for this because now I can't look into it and I will most probably forget about this message :smile: \n. @dbkaplun are the packages you need not on GitHub? For GitHub-hosted packages pnpm install was implemented.\nIt is a pretty tough task to make it work in all the possible scenarios. npm's code for installing packages from git has almost 500 lines https://github.com/npm/npm/blob/9e03561547ec5830c5f61caa4e6221d4d3b813aa/lib/cache/add-remote-git.js\n. @dbkaplun you can try to install the latest pnpm. Native GIT support was added in v0.35.0\n(NOTE: currently your package has to be in the root of the GIT repo that you require)\n. @geekguy are you sure the commit hash that you used exists?\nI've tried with \"applyq\": \"git://github.com/zkochan/applyq#ff931e\" and it worked fine\n. @reubano I created an issue for it to not forget\nhttps://github.com/rstacruz/pnpm/issues/495. We cannot support npm's shrinkwrap unfortunately, because pnpm's node_modules structure differs from the one used by npm. However, pnpm has now its own shrinkwrap.yaml format created automatically on each installation. We're going to have something like this when we implement Side-Effects Caching, see #568. I'll try to implement it this weekend\n. I suggest to support the npm parameter to avoid confusion.. prepublish should be executed as well.\nfrom the npm site\n\nprepublish: Run BEFORE the package is published. (Also run on local npm install without any arguments.)\n\nhttps://docs.npmjs.com/misc/scripts\nI need this feature now, so I'll probably work on a pull request today\n. This one was fixed\n. Currently pnpm does have a meaningful error message in this situation. It says: ERROR No package.json found. you probably mean that the tarballs are downloaded anyway. If there is no shrinkwrap.yaml file then it will happen because to create the shrinkwrap.yaml file the real manifests are needed from inside the tarballs. . sorry. Reproducible. I think I'll implement it using sinopia instead.\n. This is going to have a huge impact! If nobody started to work on it, probably this will be the next I will do after implementing update. Or even before it\n. yes, the cache will have lifetime and it can be short.\nI currently use pnpm for installing dependencies in a monorepo, so it is executed many times. The packages have almost the same set of dependencies. Even though I use a shared storage, pnpm requests the package document for every installation.\n. I added caching of HTTP requests. Caching of tarballs not done yet\n. Caching of tarballs not needed anymore, because pnpm uses a global (machine) store. Every package@version is installed only once on a machine. This was covered by #433\n. I think this should work from Node v6.3.0 if running node with the --preserve-symlinks flag\n. I doesn't seem to be the initial problem, by I have this error in the specified project:\n```\n\nelectron-react-boilerplate@0.10.0 build /home/zkochan/src/test/electron-react-boilerplate\nnpm run build-main && npm run build-renderer\nelectron-react-boilerplate@0.10.0 build-main /home/zkochan/src/test/electron-react-boilerplate\ncross-env NODE_ENV=production node --preserve-symlinks -r babel-register ./node_modules/webpack/bin/webpack --config webpack.config.electron.js --progress --profile --colors\n\n/home/zkochan/src/test/electron-react-boilerplate/node_modules/babel-register/node_modules/babel-core/lib/transformation/file/index.js:600\n      throw err;\n      ^\nSyntaxError: /home/zkochan/.pnpm/.store/flat/webpack@1.13.3/_/bin/webpack.js: 'return' outside of function (12:2)\n  10 |  var localWebpack = require.resolve(path.join(process.cwd(), \"node_modules\", \"webpack\", \"bin\", \"webpack.js\"));\n  11 |  if(__filename !== localWebpack) {\n\n12 |      return require(localWebpack);\n     |      ^\n  13 |  }\n  14 | } catch(e) {}\n  15 | var optimist = require(\"optimist\")\n    at Parser.pp$5.raise (/home/zkochan/src/test/electron-react-boilerplate/node_modules/babel-register/node_modules/babel-core/node_modules/babylon/lib/index.js:4215:13)\n    at Parser.pp$1.parseReturnStatement (/home/zkochan/src/test/electron-react-boilerplate/node_modules/babel-register/node_modules/babel-core/node_modules/babylon/lib/index.js:1905:10)\n    at Parser.pp$1.parseStatement (/home/zkochan/src/test/electron-react-boilerplate/node_modules/babel-register/node_modules/babel-core/node_modules/babylon/lib/index.js:1688:19)\n    at Parser.pp$1.parseBlockBody (/home/zkochan/src/test/electron-react-boilerplate/node_modules/babel-register/node_modules/babel-core/node_modules/babylon/lib/index.js:2105:21)\n    at Parser.pp$1.parseBlock (/home/zkochan/src/test/electron-react-boilerplate/node_modules/babel-register/node_modules/babel-core/node_modules/babylon/lib/index.js:2086:8)\n    at Parser.pp$1.parseStatement (/home/zkochan/src/test/electron-react-boilerplate/node_modules/babel-register/node_modules/babel-core/node_modules/babylon/lib/index.js:1708:19)\n    at Parser.pp$1.parseIfStatement (/home/zkochan/src/test/electron-react-boilerplate/node_modules/babel-register/node_modules/babel-core/node_modules/babylon/lib/index.js:1898:26)\n    at Parser.pp$1.parseStatement (/home/zkochan/src/test/electron-react-boilerplate/node_modules/babel-register/node_modules/babel-core/node_modules/babylon/lib/index.js:1686:19)\n    at Parser.pp$1.parseBlockBody (/home/zkochan/src/test/electron-react-boilerplate/node_modules/babel-register/node_modules/babel-core/node_modules/babylon/lib/index.js:2105:21)\n    at Parser.pp$1.parseBlock (/home/zkochan/src/test/electron-react-boilerplate/node_modules/babel-register/node_modules/babel-core/node_modules/babylon/lib/index.js:2086:8)\n\n```\nIt is probebly babel-register related\n. In scripts, I added the --preserve-symlinks option to usages of node and I changed the address of webpack from ./node_modules/webpack/bin/webpack to ./node_modules/.bin/webpack. The resulting script section is this: \njson\n  \"scripts\": {\n    \"test\": \"cross-env NODE_ENV=test BABEL_DISABLE_CACHE=1 mocha --retries 2 --compilers js:babel-register --recursive --require ./test/setup.js test/**/*.spec.js\",\n    \"test-watch\": \"npm test -- --watch\",\n    \"test-e2e\": \"cross-env NODE_ENV=test BABEL_DISABLE_CACHE=1 mocha --retries 2 --compilers js:babel-register --require ./test/setup.js ./test/e2e.js\",\n    \"lint\": \"eslint --ignore-path .gitignore --format=node_modules/eslint-formatter-pretty app test *.js\",\n    \"hot-server\": \"cross-env NODE_ENV=development node --preserve-symlinks --max_old_space_size=2096 -r babel-register server.js\",\n    \"build-main\": \"cross-env NODE_ENV=production node --preserve-symlinks -r babel-register ./node_modules/.bin/webpack --config webpack.config.electron.js --progress --profile --colors\",\n    \"build-renderer\": \"cross-env NODE_ENV=production node --preserve-symlinks -r babel-register ./node_modules/.bin/webpack --config webpack.config.production.js --progress --profile --colors\",\n    \"build\": \"npm run build-main && npm run build-renderer\",\n    \"start\": \"cross-env NODE_ENV=production electron ./app/\",\n    \"start-hot\": \"cross-env HOT=1 NODE_ENV=development electron -r babel-register -r babel-polyfill ./app/main.development\",\n    \"postinstall\": \"concurrently \\\"install-app-deps\\\" \\\"node --preserve-symlinks node_modules/fbjs-scripts/node/check-dev-engines.js package.json\\\"\",\n    \"dev\": \"npm run hot-server -- --start-hot\",\n    \"package\": \"npm run build && build --publish never\",\n    \"package-win\": \"npm run build && build --win --x64\",\n    \"package-linux\": \"npm run build && build --linux\",\n    \"package-all\": \"npm run build && build -mwl\",\n    \"cleanup\": \"mop -v\"\n  }\nNow the error is different: https://gist.github.com/zkochan/12e441a550e9cbeeff163e8846209a4c\nThe fix for this issue might be in #463\n. With the latest pnpm@0.48 it works with no issues at all. There are two dev deps missing from electron-react-boilerplate, even thought they are used, so I created an issue there. I think the lockfile should lock the store rather then the node_modules because the store can be shared between several packages. Also it should lock during uninstall as well\n. I guess this one was fixed with the pull request\n. ok\n. maybe the keepalive duration has to be configurable. npm probably has something like that and we can use the same value\n. I mean this https://github.com/rstacruz/pnpm/blob/master/lib/got.js#L21\n. I think it should finally be solved since v0.27.0 which added support for the npm fetch-* configs.\n. This hopefully has to be fixed from v0.36.0\n. Closing this as pnpm uses the same code and configs npm does for fetching packages from the registry, (since v0.36.0)\n. @gunta we now use the same package that npm uses to make http requests (https://github.com/npm/npm-registry-client). Do you think this issue is still relevant? \n. I see. We can try to make a pull request to npm-registry-client. If they won't accept it, we can fork it and use the fork.\n. Indeed npm-check seems to work. @iamstarkov do you think we can just use npm-check under the hood in pnpm?\nRelated to #457\n. I don't think pnpm can create a node_modules that will work with npm outdated. pnpm has to use symlinks and npm thinks they are the result of npm link.\n. First thought is no. How could they differentiate between a npm link and a symlink to a store? I have doubts they would add some custom code for dealing with pnpm\n. wow! npm-check even has the possibility to use ied or pnpm for updates! https://github.com/dylang/npm-check#update-using-ied-or-pnpm\n. that would work for us for sure, if npm would accept such a PR\n. Published with version 1.14.2. currently this seems like we wont fix, but I added a special label for it in case we'll want to reconsider it in the future\n. Hey @leipert, has your pull request resolved this one as well? I am not sure what always_auth=true means\n. Awesome! Thanks!\n. @patrickheeney pnpm will soon support aliases. Here's the PR: https://github.com/pnpm/supi/pull/16. Published in v1.23.0. @niftylettuce ping\n. @HenryTheHamster I published the flat tree emulation under the next dist-tag. Try npm i -g pnpm@next. Then try to use it with the --flat-tree option.\n. In that case I assume the problem isn't connected with the flat tree structure. I assume it is related to peerDependencies https://github.com/rstacruz/pnpm/issues/433.\n. This issue appeared in one of my projects as well. Seems like accord is searching for the dependencies ignoring symlinks. We'll probably have to file an issue there\n. I looked into accorn and resolve and both seem to work fine.\nI see two possible issues here:\n1. you might run the task with a gulp that was installed not via pnpm. You have to install the global gulp with pnpm in order to make this work because gulp has to be executed with the --preserve-symlinks option\n2. if you run it directly. Like node index.js, then you'll have to run it with the --preserve-symlinks parameter. An important note: the parameter should be at the beginning. So you have to run node --preserve-symlinks index.js\n. Fixed in pnpm@0.52.0. Release under the next dist-tag for now. FYI, accord has been published with a fix, but it was published as a breaking change, so I created a PR to gulp-less: https://github.com/stevelacy/gulp-less/pull/281\nonce gulp-less will be published with the new accord, this issue will be fixed.. @stevelacy thanks!\nThis issue is now solved finally :tada:. These packages should not fail anymore because they are supported\n. @patrickheeney is it reproducible as of pnpm v0.26.1?\nThere were a lot of bug fixes since you posted this issue and I cannot reproduce it currently.\n. Shouldn't be hard to do it. Here that info is being written to the store.json. So we can get it from storeJson.dependencies[installedPkgName]\n. not sure in which version it was implemented but it works as of v0.31.0\n. No, npm-shrinkwrap.json is ignored. But we do have now something similar to yarn's lockfile. It is created on every pnpm install - a file called shrinkwrap.yaml. It might be nice to have if it won't add too much complexity. in 2.15.0 there is now a command pnpm import that converts a package-lock.json or npm-shrinkwrap.json into a shrinkwrap.yaml. I think I know how to do it.\nThe only gotcha is to remember that stores can be shared between several packages. The symlink in the package's node_modules can be deleted immediately but from the .store only if no other packages inside or outside of the store are dependent on it.\nA store.json in the root of the store folder could contain a dictionary with information about which packages depend on which packages. E.g.\n{\n  \"foo@1.2.3\": [\n    \"bar@0.3.0\"\n  ]\n}\nThis means that bar@0.3.0 is dependent on foo@1.2.3. foo@1.2.3 cannot be deleted till it has dependents.\nI think I'll try to implement this\n. Landed in v0.57.0. @jrnail23, it should work the same way as the regular npm cli. Try to log in via https://docs.npmjs.com/cli/adduser and then install some of your private packages.\nThe scoped packages issue described above was fixed as well\n. I am sorry guys. I might have broken it because it was not covered with tests and we have rewritten pnpm to use npm-registry-client.\nThe good news are that now we test pnpm using sinopia and we can cover this with tests I think. So I'll create an issue for that and if it is broken we'll fix it\n. I am not sure when I'll be able to look into it (probably tomorrow or maybe tonight). But if someone wants to fix it ASAP the code that needs to be revisited is here and check how authorization works on npm-registry-client\n. @vjpr I just published a fix. Install the latest pnpm and private packages should work\n. I've tried to recreate your package.json from the tree:\njson\n{\n  \"name\": \"foo\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"phantomjs-prebuilt\": \"2.1.7\",\n    \"request\": \"2.69.0\",\n    \"watchify\": \"3.7.0\",\n    \"webhdfs\": \"0.1.12\"\n  }\n}\nRunning pnpm install from this package wasn't successful at first but the error was different. The error was caused by the missing npm_config_tmp environment variable (I think this might be related to https://github.com/rstacruz/pnpm/issues/166). After setting that environment variable manually, the installation was successful.\nI think the old issue might have been fixed by one of my pull requests related to running the postinstall scripts... You can try to update to the latest version of pnpm, set the environment variable (e.g. to export npm_config_tmp=~/tmp) and try again.\n. Seems like this one was merged and published, so I am closing this issue.\n. @niftylettuce is it still reproducible with the latest pnpm? A lot of code was rewritten since April.\n. I close it for now because almost everything has been rewritten in pnpm, since the issue was created. But if someone will have the same issues, we can reopen it. You probably used npm on the project previously and it created the binary-parser folder. Try to remove node_modules and try again with pnpm install. Cool, I'll add a more meaningful error message for this issue. Seems like the files that you copy are pasted to /node_modules/.tmp/\n. I see what is the problem. In your code you assume the package is installed into node_modules/<package-name>/. However, pnpm downloads the deps into a temp subfolder and runs the postinstall scripts in a subfolder, not on the node_modules level.\nI am not sure this is something that should be fixed in pnpm.\nYour package can search up for the directory that contains the package.json file and paste the files there. This package can help\n. We can't fix this with the current node_modules structure and I don't think it's worth copy/pasting the packages just to solve this issue\n. Support for git hosted packages was added in v0.35.0.\n. I think this is now possible that NodeJS v6.3.0 introduced the --preserve-symlinks option. However, at least this should be implemented first: Preserve symlinks on Node.js >=v6.3.0\n. oh, I am sorry, I've broken it when making pnpm use the npmrc configs. However, this is not release yet. I can fix it this evening.\nAlso I think the config key should be renamed to store-path to match the npm config conventions.\n. Either globally, in the npm folder, or in the root folder of your package, or in any parent directory\n. More about shared store here: https://github.com/rstacruz/pnpm/blob/master/docs/recipes/shared-store.md\n. I have an issue when installing dependencies in this package: mos-plugin-example\nIt has a dependency on independent which has a dependency on this scoped package @zkochan/async-replace\nThe error I'm getting is \n! ENOENT: no such file or directory, symlink '../_' -> '/home/zoltan/src/mos/packages/mos-plugin-example/node_modules/.tmp/f448d627-ae48-48f9-be69-aa3cc4eb9b4/node_modules/@zkochan/async-replace'\n. I've made it easier to reproduce. Try pnpm i -S test-pnpm-issue219\n. @nielsvermaut what OS were you using? Was it a Windows?\n. @nielsvermaut are you still able to reproduce this issue?\n. @nielsvermaut I think this might be fixed by the flat tree feature. Try to install pnpm@next and run pnpm install --flat-tree. pnpm will emulate a npm@3 flat tree\n. Not reproducible on pnpm@0.47.0. This works great on Linux.\nFor Windows .cmd files have to be used. I'll use the same template that is used by npm but with the --preserve-symlinks option added\n. oh, I've never seen non-js binstubs in npm packages before.\nI'll have to check it. It might be that for them the old logic should be used (just symlinking).\n. This has to be merged ASAP because it fixes an infinite loop issue on Windows. pnpm is not usable on Windows with registry-auth-token@2.0.0\n. oops, I should've read the thread there.\n. Awesome! Thanks!\n. Could you please either create your own appveyor project for pnpm or add this webhook to the repo's settings? https://ci.appveyor.com/api/github/webhook?id=i30tealekiaesltb\nCurrently it doesn't start a build automatically in my appveyor project. I started it manually.\n. Merged to https://github.com/rstacruz/pnpm/pull/259\n. Merged to https://github.com/rstacruz/pnpm/pull/259\n. Almost ready. I have to fix bins for Windows and the pnpm -v command\n. @rstacruz, I think this one is ready to be merged. Could you please review it? The main idea is to store the internal/external dependencies in a store.json file. This allows the uninstall to work on shared stores.\nI also added locking. The tests that check the locking sometimes fail. If this will be too frequent, I'll try to make them more stable in a later pull request\n. Going to merge it as this seems to be very straightforward\n. Hey @leipert,\nI think you have to make a pull request to registry-auth-token and then update the dependency here. I believe @rexxars will be happy to merge this enhancement if you implement it.\n. I think the same change can be done in appveyor.yml\n. Thanks!\nI'll make the tests pass on Node v6 and then it'll be good to merge\n. Merged manually\n. Andrey, two underscores can be part of a valid npm package name. That would probably cause similar edge cases to what the exclamation mark caused.\nLike Alexey said, the options are: space, +, =, ~\nand also: &, $, #, ^, ;, comma\n. I vote for +\nThis will be a breaking change. Stores created by previous versions of pnpm will not be compatible with the new one. Hence, I suggest to add the pnpm version number to store.json during installation and at least print a warning in case of such breaking changes\n. :+1: Great work! Thanks for the contribution.\n. Does it mean you use this file from a third party app by accessing it via require('pnpm/lib/fs/require_json')?\n. I see, but where do you call emptyCache? I would expect it to be called at the beginning of lib/install_multiple\nThis is an interesting problem. Maybe lib/save should read the current package.json file, extend it and then save it. That way it won't override. Or maybe it should compare the version that was cached and throw an exception if the current file in the file system doesn't match with the cached one\n. Well, currently it doesn't fail and just rewrites, so I guess the extend solution can be used. However, it probably needs to be implemented in a separate package and then that package can be used by pnpm.\nI think extending can successfully pass in most of the cases. The only problem might be when the same dependency was changed to different versions, or removed.\n. yeah, I think this can be used instead of read/write json in lib/save and your problem will be solved\n. or you can just read the json not from the cache there. Maybe a third party package is not needed for this simple operation.\n. Just in case, I think a better solution would be to extend requireJson with an option to skip cache. Like requireJson('foo/package.json', {skipCache: true}) would always read the file.\n. @thalesmello I published ssh support to @zkochan/pnpm\nCould you please check if it works for you? If yes, I'll merge and publish to pnpm.\n@yunasc private modules can be accessed via https? Where are the tokens taken from?\n. @thalesmello I used the same solution that ied uses :smile: \nLanded in v0.35.0\n@yunasc, for the https one lets create a new issue\n. Awesome! In that case I'll change 0.10 to v4 instead, drop babel and update eslint (which dropped support for older versions of node)\n. What pnpm version do you use?\nCould you try the unreleased one? I added improved Windows support. For instance, no need to run it with admin permissions anymore. Install it via npm i -g rstacruz/pnpm\n. Could you post the set of your dependencies here, so that I can reproduce it on my PC?\n. In my case nothing gets stuck but I do get an ! Invalid Version: undefined at the end.\nI'll try to figure this out\n. Seems like the error is happening when checking the peer dependencies. I mean the first error, after installation\n. You can install pnpm from the git-fix branch. It should solve your issue.\nBut that's not the final fix because the issue is deeper and affects several features of pnpm.\nThanks for reporting this.\n. OK, at least the installation issue is gone.\nWhen using this steps I cannot reproduce your issue. Maybe you have some custom server setup code?\n. What was your version of NodeJS when the issue was happening?\n. By the way, the initial issue was fixed in v0.29.0.\nThe other one that happens on ember serve I could not repro yet\n. @BryanCrotaz could you retry this with v0.38.0? It has a fix for https://github.com/rstacruz/pnpm/issues/380 which might be related to this one, as I see the same problematic package in your deps\n. The last issue in this thread is going to be fixed by #403\n. @BryanCrotaz we released the possibility to install dependencies flat in v0.42.0 (under the next dist-tag for now). Run pnpm install with the --flat-tree option and the issue will dissappear\n. This might be a temporal workaround until #433 is done\n. ok, created a new issue to figure this out #436\n. yes, it was. I thought it would figure it out after an amend. But anyway, with this commit it was added 46bcdac831903b365c98f5311aac9955e3c59c0e\nFor some reason though, the API page did not appear on the gh pages documentation site :confused:\nedit: I've figured out the problem\n. I think so :-)\n. So electron installs its own instance of Node and that version has to be used during post-install?\n. How does npm install behave in this situation? Does it use the node instance which you need or the system node like pnpm?\n. These we can do I believe. Everything that npm install does pnpm install should do as well.\nCurrently this postinstall scripts are executed in two places. In post_install.js and in install.js. That code has to be refactored and these environment variables can be passed to the child processes. (by refactored I mean deduplicated. I think the code in post_install is the better one and has to be used in both places)\n. sure, if you have time, do it.\nI have currently a few other open issues that I am working on\n. Great! My username on npm is the same as on github - zkochan.\n. I am not sure v1,0 is ready. git-hosted packages installation is not ready yet.\nAlso I think npm link/unlink/prune/update has to be implemented as well.\n. Out of topic, but could you please add this webhook to the project settings? https://ci.appveyor.com/api/github/webhook?id=i30tealekiaesltb\nI don't have access to that. This will trigger the appveyor build. Currently I am triggering it manually.\n. true story.\nthanks\nWe can create a gitter chat by the way, It is pretty good.\n. that should already work since v0.24.0 https://github.com/rstacruz/pnpm/pull/256\n. Maybe lets update to version 1 indeed? Currently pnpm is marked as unstable or experimental just because it is pre-1. And it has less points on npms.io as a consequence.\n. yeah, I agree on what you're saying, lets move to an org first and fix those issues\n. Guys, I have to tell you, I am really happy with v0.48! It is a huge improvement! This is the first version that I can use at work! Previously I always had some small issues. This one works great!\nAnd also I had some fears regarding --preserve-symlinks and the fact that it will probably be deprecated, but with the new design it is not even needed anymore! It is used by defaulf, for now, but you can turn it off with npm config set preserve-symlinks false\nI am very-very satisfied! I hope more people will discover the project and enjoy it :-). yes, there is a lockfile already. It is called shrinkwrap.yaml. It is created automatically.\nThey are in beta I would say. I did not even check how they behave when deleting something. Feels like v1 is really close now. I added some points to the breaking changes issue #458.\nI wonder if we need to make the breaking changes that npm5 introduced. Like linking file: dependencies and the prepare/prepublish lifecycle events. I plan to release v1 on 28th of June. I'll try to finish any last breaking changes till this Sunday. oh, this is already done. pnpm unlink is just an alias of uninstall\n. I don't think so. This should be easier with pnpm than with npm because we have strore.json\n. Landed in v0.37.0\n. I'll try to implement it this weekend\n. Seems like in order to test this feature we'll have to use a local registry like sinopia. Because we'll have to change the latest tag of packages\nEdit: the latest tag cannot be used in testing because sinopia doesn't allow to rewrite it (\"latest tag always returns highest available version, because current magic is just stupid\"). Luckily the tag name used during installation has to be customizable by the tag option\n. yes, I'll add a CONTRIBUTING.md\n. Haha, yes. From my point of view we can get rid of them.\nAlso would be great if those release notes were populated automatically. I know semantic-release does that automatically and we use now the same conventional changelog\n. Yes, I tried bundledDependencies but I had issues with it.\nIt seems to work on Node 4 but I have errors on Node 6/npm 3 during installation\n$ npm install -g @zkochan/pnpm@0.26.31\n/home/travis/.nvm/versions/node/v6.4.0/lib\n\u2514\u2500\u2500 (empty)\nnpm ERR! Linux 3.13.0-40-generic\nnpm ERR! argv \"/home/travis/.nvm/versions/node/v6.4.0/bin/node\" \"/home/travis/.nvm/versions/node/v6.4.0/bin/npm\" \"install\" \"-g\" \"@zkochan/pnpm@0.26.31\"\nnpm ERR! node v6.4.0\nnpm ERR! npm  v3.10.3\nnpm ERR! path /home/travis/.nvm/versions/node/v6.4.0/lib/node_modules/.staging/abbrev-10e8637a\nnpm ERR! code ENOENT\nnpm ERR! errno -2\nnpm ERR! syscall rename\nnpm ERR! enoent ENOENT: no such file or directory, rename '/home/travis/.nvm/versions/node/v6.4.0/lib/node_modules/.staging/abbrev-10e8637a' -> '/home/travis/.nvm/versions/node/v6.4.0/lib/node_modules/@zkochan/pnpm/node_modules/abbrev'\nnpm ERR! enoent ENOENT: no such file or directory, rename '/home/travis/.nvm/versions/node/v6.4.0/lib/node_modules/.staging/abbrev-10e8637a' -> '/home/travis/.nvm/versions/node/v6.4.0/lib/node_modules/@zkochan/pnpm/node_modules/abbrev'\nnpm ERR! enoent This is most likely not a problem with npm itself\nnpm ERR! enoent and is related to npm not being able to find a file.\nnpm ERR! enoent \nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/travis/build/rstacruz/pnpm/npm-debug.log\nnpm ERR! code 1\nThe command \"npm install -g @zkochan/pnpm@0.26.31\" failed and exited with 1 during .\n. Added the possibility to release with a specified tag. E.g., npm run release -- next\n. This is ready to be merged if @rstacruz is OK with this solution.\n. Yes, I tried to add node_modules to files but it is not getting published.\n. I have an alternative solution if you think this is too risky. Have a look at https://github.com/rstacruz/pnpm/pull/311\n. @rstacruz, after @andreypopp's comment do you think we can merge this one?\n. It seemed to me that it bundled only the top deps and the subdeps were downloaded as usually. Also I had some errors on Node6/npm3\n. this solution will only work with npm2, right?\n. ok... I'll try this on my scoped pnpm, if it'll work we can revert the copy/paste solution\n. in that case seems like the copy/paste solution is easier. @andreypopp has suggested to use a shrinkwrap to avoid additional requests for version resolutions.\nbut it adds more complexity. You have to gather all the deps + only publish on npm3 + have a shrinkwrap\nvs\ncopy/paste, which will work even if npm deprecates the badly documented bundleDependencies feature\n. I dunno what I am doing wrong but it doesn't want to work on npm3. Even though I publish via npm3 and it works with npm2. Here I test it https://travis-ci.org/rstacruz/pnpm/builds/156501247\nand here is the code https://github.com/rstacruz/pnpm/tree/bundled-deps-2\nI published it to @zkochan/pnpm@next\n. ok, I think I'll merge the other solution, which publishes the bundled deps package as a different package called pnpm-rocket. For the normal solution using bundledDependencies I'll create an issue\n. I added this as a 3rd option.\n. Seems like node_modules in subdirs are not published as well... it worked when I published via npm3 because the node_modules structure was almost flat.\n. I'd prefer to merge the #310\n. the other one was merged, so closing this\n. @andreypopp for now you can use pnpm-rocket (if you want fast pnpm installation). I published v0.29.0 and next versions will be published to both pnpm and pnpm-rocket.\n. Seems like I did not fix it yet :-(\nThe build failed again\nEdit: I just realized, appveyor is using pnpm that is published, so the build will be green once the fix is published\n. Published the fix on my scoped pnpm (@zkochan/pnpm) and ran the appveyor build twice. The fix works.\n. Thanks!\n. Yes, that was my conclusion as well.\n- [ ] document that it is not efficient to use travis cache with pnpm\n- [ ] maybe even read travis/appveyor yaml and throw an error if caching is used for node_modules\n. Has to be rechecked with v0.51.1. From v0.51 pnpm doesn't create circular symlinks.. fixed. Implementing Benchmark suite might help with covering this with unit tests. I think.\n. Actually got retries 5 times by default\nProbably we have to use retry which is used by npm and support the set of configs that is passed to it: fetch-retries, fetch-retry-factor, fetch-retry-mintimeout, fetch-retry-maxtimeout\n. I think this package can be used instead of got - got-retry\nIt combines got with retry. Exactly what we need\n. According to the commit messages convention Fixes should go to the footer and be in imperative form. \n```\nfix(post-install): prefer current node interpreter in child scripts\nfix #296\n```\n. Published in v0.28.0\n. merged\n. Well, poor diffing can be fixed by using some other TAP reporter instead of the default one.\nAbout the slow startup you might be right. However, with AVA it is also possible to run tests inside one file concurrently. That might give a boost to the performance, but we'd have to rewrite our tests. Currently they'd work only serially.\nDisclaimer. I've never actually used AVA before. All I know about it is from its documentation.\n. It also can't run with --preserve-symlinks and pnpm currently uses that option when installing binstabs, so I'll just close this issue now :-)\n. I've merged it manually, just changed the commit message to adhere the conventions.\nThanks for the contribution!\n. This is fine but there's an easier solution\nYou can grab the output of the npm pack. It will print the file name\n. This seems pretty straightforward, so I merged it.\nGood job!\n. Maybe it would be better to just use the library that npm uses for communicating to the registry: npm-registry-client\nBut seems like this solution works as well\n. pnpmjs is also available. Many projects use org names like this: gulpjs, gruntjs, etc.\n. Awesome! I've accepted the invite.\nI kinda like the site-documentation. But I would probably create a bigger README, with Table of Contents. Most of the people will just open the README and won't click on any links.\nWhat will be the organization image?\n. What about a twitter account for pnpm?\n. ok, I've created pnpmjs. I'll send you the credentials via gitter.\nI'll be posting notifications about new releases and retweeting mentions about pnpm, maybe some articles about pnpm if there will be any.\n. @rstacruz could you move us to the org please? :smile: \nWe almost have all the features for v1\n. > Move http://ricostacruz.com/pnpm/ to pnpm.github.io (actually, does anyone even care about this site?)\nI think we can live without the website at least for now. It doesn't seem to have SEO value anyway\n. @rstacruz could you please make me admin in the pnpm organization? I'd like to transfer some of my packages related to pnpm there. Also I'd like to create a custom website for pnpm. Without admin role, I can't configure stuff properly.. I merged it, just used a different commit message docs(README): remove name change notice\n. @piscisaureus this is what you were waiting for\n. merged\n. I suggest to continue investigating this once we merge and publish Create pnpm-debug.log file on fail\n. Here's the debug info: https://gist.githubusercontent.com/zkochan/e42a33e54192b38d9184575c5d1e4aee/raw/8870d135902473eb4fd1dcbfe8b3dfce83e2691e/ppm-debug.yaml\nSeems like archive-type is not installed yet, when the postinstall script is being executed.\nI also noticed that npm doesn't have these errors and it runs postinstalls after all the deps were downloaded... pnpm seems to be more greedy, it runs postinstall as soon as possible.\n. Indeed, after moving the postinstall scripts execution after installation, the package created by @iamstarkov always installs with no issues. You can try the fix on branch issue337. (NOTE: my fast dirty fix has broken the skipping of optional dependencies, but that'll be easy to fix, if this is really the solution)\n. @Grawl I have published what I think is the fix\nPlease install pnpm from the github branch and try if it works\nnpm i -g rstacruz/pnpm#issue337\n. Seems like bower is doing this as well. I will look into how they do it\n. I don't know currently a fast, easy way to cover this with tests, but the issue is real. It was sometimes causing errors during pnpm install on pnpm. I started noticing them when we started to use pnpm to install its dependencies.\nSo I guess it is sometimes causing fails for packages with many dependencies. Better to publish it ASAP.\nI tested it manually by running pnpm install many-many times on pnpm.\nI'll create a separate issue for covering this with tests.\n. As far as I know, by default update notifier inserts the update suggestion message immediately it has got a response from the npm registry... pnpm's console output is very dynamic and I think users might just not notice the message.\nI think the notification should be displayed once the command has finished executing\n. I think it might already be muted on CI, but we have to look in the package. If not, pnpm has a dependency called is-ci, which can be leveraged.\n. We already have the isCI, so we can just put this whole new code with the new requires inside an if statement checking that the CLI is executed not on CI server. This will probably be more performant as well\n. Merged\nThanks for the contribution!\n. Not needed anymore because of 60921e63c92c63239bc7e632d175432b81d3837a\n. I like that etiquette. I think the reference can be in the first paragraph of CONTRIBUTING.md:\nCollaborative Etiquette\n\nThis project follows collaborative etiquette guidelines.\n. I am merging it because I have to create a new pull request based on these changes.\nBut I'll be more then happy to make updates if someone will have comments.\n. We don't log progress events. They are not useful.\n. I mean the progress events that log download percentage\n. Works on Linux\nCould you please set the env variable DEBUG_PROMISE to true, run again and post the output?\n. What does this return? npm get unsafe-perm\n. hey @cprecioso, I published a change to v0.31.0 that I think might fix your error.\nPlease update your pnpm and try again. If it won't work create a gist from your pnpm-debug.log and post the link here. (pnpm-debug.log generation was also added in v0.31.0)\n. maybe because cross-spawn is used instead of child_process. This was a change made maybe 1 or 2 month ago\n. @cprecioso could you please retry with the latest pnpm?\nif it still fails check what will this return npm get node-gyp\n. Great, this change allows to fix another issue as well.\n. And I believe the number of filesystem operations can be decreased now, but I won't do that refactoring in scope of this pull request. This is ready to be published, I believe\n. It seems to me like a misuse of an npm3 feature not intended to be used. If a package is required, why not include it in the package's dependencies? In that case it would be in the root of node_modules.\nCan you provide a code example? What do you mean by requiring gulp from a module?\n. Lets see what the other maintainers will say. my-app clearly has to depend on gulp if it uses it in code... and seems like you agree on that. It just happens to be that it works on npm3.\nFrom the other side, this shouldn't be hard to \"fix\" on the pnpm side...\n@rstacruz, @iamstarkov, @andreypopp what do you think?\n. yes, https://github.com/rstacruz/pnpm/blob/master/docs/api.md\n. I am not really familiar with flow, but I was under the impression that it has the same syntax as TypeScript but not as good tooling.\nIt will not change anything for the raw-js users but it would make the life of pnpm maintainers easier. \n. We can even look at it as a smarter eslint... For instance, like a month ago I changed a method called linkBins to accept only 1 argument. And only recently I noticed that in 1 place I did not update the code which was using it 7ffb692b24650b4da9a2d78258351306c0dc710b. It wasn't a bug, because the additional args were just ignored, but the code looked weird. TypeScript would've caught that\n. Well, personally I like TypeScript 2 more, but it is in beta yet and it is easier to convert an existing project to Flow. So if @andreypopp wants Flow, I don't resist.\nAnd we can switch to TypeScript later, in case it will become superior.\n. But seems like I don't understand something correctly because these changes are making installation longer when packages are already cached in the store\n. I returned make. It checks whether the package is already in the store and does not refetch it in case it is there already.\n. Landed in v0.34.0\n. oh... I know what is the problem. When uninstall modifies the store.json, it doesn't add the pnpm version.\nhttps://github.com/rstacruz/pnpm/blob/master/lib/api/uninstall.js#L33\nit should add the pnpm version or at least don't remove the version that is already there \ninstall adds the version\nhttps://github.com/rstacruz/pnpm/blob/master/lib/api/install.js#L82\n. By the way, this would have been caught by static typing!\n. Fix published in v0.31.1\n. I have noticed this issue as well today. I think there is an uncatched promise error during installation... I am looking into it now\n. no, I don't see not catched promise errors. Seems like it was broken in v0.31.0. v0.30.0 creates the binstubs\n. this commit caused the issue https://github.com/rstacruz/pnpm/commit/1c92146e424164afdec57f9d483ebe69470fcf90\n. I really don't know, but when I revert that commit, it works...\n. When I return that line, it works https://github.com/rstacruz/pnpm/commit/1c92146e424164afdec57f9d483ebe69470fcf90#diff-f6618e1cc731d58106a806b7679a7616L106\n. I've found the issue.... Not in the commit I was thinking... reverting that commit was just fixing one of the issues caused by tarball dependencies not working. The fix is easy, I think I will create a PR soon\n. Fixed in v0.31.2\n. \u043d\u0435\u043c\u0430 \u0437\u0430 \u0449\u043e :-)\nyou're welcome\n. The core of the issue is inside of throat... I did a workaround in pnpm and created an issue on throat.\n. Try pnpm i --logger=simple, is that one better?\n. For me even a spinner like ora would be enough. The progress bar won't be accurate anyway.\n. you can do npm config set logger simple or use an env variable already\n. I am thinking maybe we just have to use npm's logging lib - npmlog. The output format is not what makes pnpm valuable. If we show the same output that npm does, no questions will be raised.\n. Yep, I know. I'll work on it\nOn Fri, Feb 24, 2017, 13:09 Vaughan Rouesnel notifications@github.com\nwrote:\n\nJust a small thing, my install finishes without every dependency being\nticked (see how some say queued):\n\u279c  live-redux git:(master) \u2717 pnpm i\n  babel-register ^6.14.0                                           6.23.1 \u2713\n  babel-runtime ^6.11.6                                            queued \u2193\n  detect-node 2.0.3                                                queued \u2193\n  history ^3.2.1                                                   queued \u2193\n  is-node ^1.0.1                                                    1.0.1 \u2713\n  live-redux-helpers 0.0.6                                          0.0.6 \u2713\n  lodash ^4.15.0                                                   queued \u2193\n  prettyjson ^1.2.1                                                 1.6.0 \u2713\n  query-string ^4.3.2                                              queued \u2193\n  react-redux ^5.0.2                                                5.0.3 \u2713\n  react-router ^3.0.2                                               3.3.1 \u2713\n  react-router-redux ^4.0.8                                         4.0.8 \u2713\n  redux ^3.6.0                                                      3.6.0 \u2713\n  redux-devtools ^3.3.2                                             3.3.2 \u2713\n  redux-devtools-dock-monitor ^1.1.1                                1.3.1 \u2713\n  redux-devtools-filterable-log-monitor ^0.6.6                      0.6.6 \u2713\n  redux-logger ^2.8.1                                               2.8.1 \u2713\n  redux-promise ^0.5.3                                              0.5.3 \u2713\n  redux-thunk ^2.2.0                                                2.2.0 \u2713\n  zog ^0.1.2                                                        0.1.2 \u2713\n  babel-preset-live                                                0.2.22 \u2713\n  gulp4 ^4.0.1                                                      4.0.1 \u2713\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/354#issuecomment-282266478, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm8lF5pwHntAwekYrXL4pq6lxhwTVks5rfrpsgaJpZM4J20cK\n.\n-- \n\nZoltan\n. @vjpr fixed in v0.57.2. Wow, this line of code was so hard for me to understand:\njs\nif (err || srcPath === linkString) return cb(err)\n\nfrom here\n\nIt can be both an error or a success!\n. In the end I've figured out the logic. Here's the outcome after the rewrite:\n`` ts\nexport default async function forceSymlink (srcPath: string, dstPath: string, type: SymlinkType) {\n  debug(${srcPath} -> ${dstPath}`)\n  try {\n    fs.symlinkSync(srcPath, dstPath, type)\n    return\n  } catch (err) {\n    if ((err).code !== 'EEXIST') throw err\nconst linkString = await fs.readlink(dstPath)\nif (srcPath === linkString) {\n  return\n}\nawait fs.unlink(dstPath)\nawait forceSymlink(srcPath, dstPath, type)\n\n}\n}\n``\n. The thing that confused me was that even on success,errwas passed tocb. But the err is not defined on success. It was just visually confusing :smile: \n. By the way, this is not ready for merge yet. I have broken some logic with the last commit.\nTill therefactor(*.ts): use async/awaitcommit it is fine. The last commit I will fix in the evening. And I guess I'll work on even stricter rules in a separate pull request. To turn on TypeScript'sstrictNullChecks`\n. I've added, the breaking change notification, just in case...\nThe fix seems to work. The Github related tests are not failing anymore with rate limit exceptions.\n. I just see that we have sometimes errors like this getaddrinfo ENOTFOUND registry.npmjs.org. npm seems to not have these issues. Maybe there is something in npm-registry-client that we don't have? Currently I see the difference only in the user agent that we use. We send pnpm and npm-registry-client sends node/<version>\n. Landed in v0.36.0\n. Landed in v0.36.0\n. I noticed this issue during developing the prune feature and that is ready as well, so I am merging this and creating a separate PR for pnpm prune\n. @iamstarkov ready\n. I suggest to not block this PR because the arguments order question is not resolved.\nI'll rewrite it into two functions for now because this design is already used in install.\nWe can create an issue to discuss what conventions should our API follow.\n. This should be easy to fix. We use npm-registry-client. We just need to set the ssl.strict option for it\n. The RegClient is created here. You just have to pass the option there. The option should be added also to PublicInstallationOptions as sslStrict and to all the places where TypeScript will tell you \n. I suggest to set not just ssl.strict but all the other options that npm passes to npm-registry-client as well. Here's a map of npm configs to npm-registry-client options\n. Landed in v0.37.0\n. This one is very straightforward. I am going to merge it and publish with the prune feature\n. @iamstarkov what do you think?\n. Such a big luck that we recently switched to npm-registry-client from got+retry.\n. I've setup sinopia locally, published some packages there and tried to install them. Everything worked. I tried a normal package and a scoped one. Also I tried to install packages from npm and it worked. Could you localize on what package type the error happens?\nIs it a semver dependency, a scoped dep? Is it hosted on your local sinopia or on npm?\n. And why does it need authorization for installing from sinopia? I thought sinopia requires authorization only for publishing\n. @carmelone this is fixed in the latest pnpm. The fix landed in v0.41.2\n. This was done, will be released probably in next version. I'll fix this today. This is because pnpm does not interpret semver versions and ranges loosely and npm does. \n. Landed in v0.38.0\n. Do you mean these commands - npm config?\nThey will pass through to npm. pnpm uses and sets the same configs that npm would\nIf you mean whether the programmatic API has a function for setting the configs then - no, it does not.\n. I have some different errors but there's an issue for sure.\nCode to repro https://github.com/zkochan/pnpm-issue394\n. It would be awesome if you'd be able to fix this.\nThe code is here. Line 49, I guess\n. I have tried your suggested fix, @aecz (branch issue394). Now the error is different - https://gist.github.com/zkochan/82201d5f69918b9525ed54f9aa0af174\n. wow, you are right! good catch!\n. My yesterday's error was because of this bug - https://github.com/rstacruz/pnpm/pull/399. After building native addons were fixed, there's a new error: \nzkochan@zkochan:~/src/test/issue394$ ng build\nCould not start watchman; falling back to NodeWatcher for file system events.\nVisit http://ember-cli.com/user-guide/#watchman for more info.\n4849ms building modules                                                                  \n28ms sealing\n0ms optimizing \n0ms basic module optimization \n77ms module optimization\n0ms advanced module optimization \n10ms basic chunk optimization       \n0ms chunk optimization \n4ms advanced chunk optimization \n0ms module and chunk tree optimization \n109ms module reviving\n4ms module order optimization \n2ms module id optimization \n2ms chunk reviving \n1ms chunk order optimization \n10ms chunk id optimization\n61ms hashing\n0ms module assets processing \n131ms chunk assets processing\n2ms additional chunk assets processing \n0ms recording \n0ms additional asset processing \n1660ms chunk asset optimization\n 94% asset optimizationError in bail mode: [default] /home/zkochan/src/test/issue394/src/app/app.component.ts:5:12 \nCannot find name 'require'.\n. Please create a separate issue for this idea of yours.\nBut I am afraid this won't work even with a flat structure. Currently TypeScript can't work with symlinked type declaration files. That's why I couldn't use them in pnpm... Hopefully they will fix it in TypeScript 2.1\n. Here are the improvements I see in Travis, when running npm -g pnpm:\nusing npm2\n- before: 31.38s\n- after: 8.76s\nusing npm3:\n- before: 15.37s\n- after: 8.42s\nsometimes it is even less than 8 seconds\n. To be honest, it still feels too slow to me:smile:\nI think we can make it even faster if we won't use npm for installation, but that's a smaller priority for now than getting to v1.\nEdit: some other tool for the 1st time and then pnpm to install pnpm\n. I think this might be related to the pnpm install doesn't get the job done when node_modules is cached by Travis CI. Seems like pnpm has some circular linking...\n. @AilisObrian could you please create a sample repo? Seems like I don't know how to use newrelic.  I always get this error \n```\n/home/zkochan/src/test/node-newrelic/node_modules/.store/newrelic@1.30.5/_/lib/config.js:231\n  throw new Error(\n  ^\nError: Unable to find New Relic module configuration. A default\nconfiguration file can be copied from /home/zkochan/src/test/node-newrelic/node_modules/.store/newrelic@1.30.5//lib/config.default.js\nand put at /home/zkochan/src/test/node-newrelic/examples/http/simple/newrelic.js.\n    at _failHard (/home/zkochan/src/test/node-newrelic/node_modules/.store/newrelic@1.30.5//lib/config.js:231:9)\n    at Function.initialize (/home/zkochan/src/test/node-newrelic/node_modules/.store/newrelic@1.30.5//lib/config.js:1099:25)\n    at Object. (/home/zkochan/src/test/node-newrelic/node_modules/.store/newrelic@1.30.5//lib/logger.js:18:37)\n    at Module._compile (module.js:556:32)\n    at Object.Module._extensions..js (module.js:565:10)\n    at Module.load (module.js:473:32)\n    at tryModuleLoad (module.js:432:12)\n    at Function.Module._load (module.js:424:3)\n    at Module.require (module.js:483:17)\n    at require (internal/module.js:20:19)\n```\neven when using the examples from the newrelic repo\n. @AilisObrian good news, I can fix it. However, only for Node.js >= 6.3.0. And you'll have to run Node with the --preserve-symlinks option. (if you will be running the application via npm run, the option will be added automatically to the binstub files)\n. after looking into it deeper, I realized that it is impossible to avoid circular symlinks in pnpm.\nWe can cut the circle because the other packages can require any package from the circular dependency. Whereas if we break the circle only one entry point to it will work...\nThis can be fixed only in newrelic\n. This will have to be rechecked with pnpm v0.46. I think I have removed all circular deps. They are not needed anymore with the new store design. Seems like circles can still appear in dependencies with peer dependencies. Thanks for rechecking, @AilisObrian. @AilisObrian this is solved in v0.51.1. It has a structural change in node_modules that completely avoids circular symlinks.. I've looked into it and seems like it is inevitable to use circular deps unless we'll use a flat tree like npm 3.\n. Solved in v0.51.1. Maybe, but I am not sure. Is your private package used by another dependency?\n. Could you please post the content of the pnpm-debug.log file to gist?\n. It should encode the package name when it requests a package from the registry, so this is different. You can create a separate issue, but try to provide more details, please.\n. If someone would like to fix this. Here is where the fix should be https://github.com/rstacruz/pnpm/blob/master/src/bin/pnpm.ts#L86-L89\nAnd a new unit test. Probably a new unit test file can be created called cli.ts\n. To be honest, I think it is bad to design an application/package in a way that it will rely on the flat structure created by npm3\nHowever, seems like some people do rely on it. We had #96 and #346\n. We can add an option to make pnpm create a flat tree. I was thinking about an option called flat but yarn seems to have the same option and it has a different meaning. So maybe we can use an option called --flat-tree to avoid confusion\nEdit: that was suggested in the first message in the thread \ud83d\ude06 \n. Furthermore we can have a more sophisticated solution as well, which will not need the flag. For instance, if a package needs a dependency from the flat tree, it can require it as inherit\njson\n\"dependencies\": {\n  \"watchman\": \"inherit\"\n}\n. oh right, if we put the inherit property into dependencies, it will cause problems with npm. But if we make a separate property, it will not do any harm to npm. Like \njson\n\"inherit\": [\"watchmen\", \"less\"]\nbut this is just an additional solution, the property and/or engine check has to be supported for sure.\nI don't know what is the estimate on this because I did not research how the flat tree works yet. But this is next in my todo list after completing caching, which has an open pull request already and after closing a small issue about making global store usage the default behavior.\n. This will work only on Node.js >= 6.3.0 because it has the --preserve-symlinks option. For older versions of Node we would have to copy the packages.\n. I have to make a different store for flat installations.\nThere will be two subfolders in store: nested/ and flat/. The flat store will be used for flat installations\n. The issue is on Node >= v6.3.0 because we preserve symlinks there. Hence, the hack from #46 is ignored.\n. Also #46 flattens only peerDependencies, so it doesn't achieve a real npm3 flatness\n. @aecz landed in v0.42.0, I installed it under the next tag for now. Use the --flat-tree argument to have flat dependencies structure\n. This might be a temporal fix before this is done #433\n. > Also, i noticed that instead of keeping the modules in node_modules/.store like before it is now ~.pnpm.store\\flat. Is it the new folder structure ?\nIt was a bug on windows. I published a fix with v0.42.1\n. @aecz don't use the global angular-cli installed by npm because it won't run with the --preserve-symlinks option. You have two options: either install it with pnpm or use the one installed with the package\nyou can add a scripts task for that:\njson\n\"scripts\": {\n  \"build\": \"ng build\"\n}\n. Maybe it is something specific to Windows. I'll check later. On linux installation finishes successfully\n. I was able to reproduce this on Windows. I'll try to fix it\n. @aecz I published a fix under the next dist-tag. The installation will now successfully complete.\n. > @angular/compiler-cli needs @angular/compiler 2.0.0 but is getting 2.1.1 :(\nbut in the dependencies of @angular/compiler-cli there is \"@angular/compiler\": \"^2.0.0\". 2.1.1 should be fine\n. ok, I see that @angular/compiler-cli 0.6.4 has a peerDependency for \"@angular/compiler\": \"2.0.2\" and it is getting 2.1.1 as you noted.\nI'll try to fix this in scope of https://github.com/rstacruz/pnpm/issues/433\n. I fixed it on branch peers, but now I have this new issue\nCan it be connected with webpack?\n```\n\nissue394@0.0.0 build /home/zkochan/src/test/issue394\nng build\n\nCould not start watchman; falling back to NodeWatcher for file system events.\nVisit http://ember-cli.com/user-guide/#watchman for more info.\n7191ms building modules                                                                \n85ms sealing\n8ms optimizing \n1ms basic module optimization \n111ms module optimization\n1ms advanced module optimization \n7ms basic chunk optimization      \n0ms chunk optimization \n0ms advanced chunk optimization \n0ms module and chunk tree optimization \n135ms module reviving\n9ms module order optimization \n12ms module id optimization\n4ms chunk reviving \n0ms chunk order optimization \n24ms chunk id optimization\n68ms hashing\n0ms module assets processing \n159ms chunk assets processing\n3ms additional chunk assets processing \n0ms recording \n0ms additional asset processing \n1855ms chunk asset optimization\n 94% asset optimizationError in bail mode: [default] /home/zkochan/src/test/issue394/node_modules/.store/@angular+platform-browser@2.0.0/_/src/private_import_core.d.ts:12:55 \nProperty 'VIEW_ENCAPSULATION_VALUES' does not exist on type '{ isDefaultChangeDetectionStrategy: (changeDetectionStrategy: ChangeDetectionStrategy) => boolean...'.\nnpm ERR! Linux 4.4.0-43-generic\nnpm ERR! argv \"/home/zkochan/.nvm/versions/node/v6.9.0/bin/node\" \"/home/zkochan/.nvm/versions/node/v6.9.0/bin/npm\" \"run\" \"build\"\nnpm ERR! node v6.9.0\nnpm ERR! npm  v2.15.11\nnpm ERR! code ELIFECYCLE\nnpm ERR! issue394@0.0.0 build: ng build\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the issue394@0.0.0 build script 'ng build'.\nnpm ERR! This is most likely a problem with the issue394 package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     ng build\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs issue394\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR! \nnpm ERR!     npm owner ls issue394\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/zkochan/src/test/issue394/npm-debug.log\n```\n. you mentioned this before:\n\n13 items in node_modules/angular-cli/node_modules for npm vs 950 for pnpm\n\nI have implemented the flat tree structure a little bit differently than in npm3 to make it work in shared stores. I had to reference all subdeps on all level, so that each dependencies can be reused in other packages.\nBut this difference does not change how node resolves the dependencies.\nI published the peers solution under my scope @zkochan/pnpm\nThe latest issue might be related to webpack. I am going to try this solution\n. Sorry for that, seems like I published it badly. I'll publish to the main package once #446 gets merged\n. During installation of the example package I also noticed that pnpm installs some packages that npm skips because they don't satisfy the engine requirements. Create an issue for it: #448\n. We can't imitate a flat dependency tree because pnpm doesn't use preserve-symlinks anymore and we would need to copy packages like npm or yarn.. I really hope this will be fixed on the TypeScript side... It would look really weird to have such hacks in the pnpm codebase\n. Maybe we can fall back to npm for some \"blacklist\" of popular packages...\n. I understand, I am talking about the implementation. Seems like it will be the same that npm does, so we can just run npm install inside pnpm for those dependencies\n. Maybe hard links would solve this issue.\n. This is going to be fixed in TypeScript 2.1.0. If you use typescript@next, it will work already. I am closing this because the latest TypeScript is 2.1.0 now and it has all the symlink issues solved. So this will work with the latest TypeScript. I don't really see any value in this flag. Instead, I'll add a command that adds dependencies to package.json, updates shrinkwrap.yaml but does neither downloads packages nor changes node_modules. See #981. This was needed because we need the possibility of changing dist-tags of packages from tests in order to write test for pnpm update\n. A workaround is to run the command from the package: node node_modules/npm-run-all/bin/npm-run-all\n. it is nothing critical but it is because of a difference that pnpm has compared to npm.\nI checked the source code of npm-run-all. They check if the entry point of the command was bin/npm-run-all/index.js. pnpm creates a proxy file to preserve symlinks, so that file is not the entry point..\nby proxy I mean this file in the .bin folder\n``` js\n!/bin/sh\n\":\" //# comment; exec /usr/bin/env node --preserve-symlinks \"$0\" \"$@\"\nrequire('../npm-run-all/bin/npm-run-all/index.js')\n``\n. Maybe we could use an sh file instead of a proxy js file. \n. This has been fixed onnpm-run-all` side.. To be honest, I think with Use caching to minimise bandwidth usage / improve performance, the speed would be the same as with yarn... and as for me, disk usage is important as well.\n. > how does pnpm work for ava? https://twitter.com/ava__js/status/785902327492333568\nif I understand it correctly cold is when no cache is used. In that case pnpm took 10 seconds on my machine to do pnpm install ava. But yarn was faster than in the tweet. It was 12 on my machine. But maybe some packages were already in cache.\n. They have a nicer CLI for sure... someone might want to create a package that will use pnpm's programmatic API and give it a CLI similar to yarn's\n. by the way, you can skip setting silent now. It is true by default\n. Seems like they already tried it and it didn't work for them,\n\nWe actually went down the symlink road before we found out about ied.\nhttps://github.com/yarnpkg/yarn/pull/797#issuecomment-253132317\n\nSo I think we should keep pnpm alive as an alternative concept. I hope they will not come up in a few months with another secret project that uses symlink dependency trees.\nThis bothers me, people are sacrificing their personal time to work on OSS and then their work can become obsolete in a second because a big company was secretly developing the same. Although in this case I don't regret my contributions to this great project because I think pnpm solves the problem more elegantly than yarn\n. @alexanderGugel I am totally for joining forces!\n. Hey, I am open for a talk. Via gitter or anything else\n. @thejameskyle we can use this https://gitter.im/ied-pnpm-yarn/Lobby.\nor if you prefer email, mine is zoltan.kochan@gmail.com. Video chat is fine by me as well.\nand please lets include @iamstarkov and @andreypopp. They are very valuable and active members of pnpm!\n. Track this issue https://github.com/rstacruz/pnpm/issues/403\nI am finishing the pull request so the fix will be ready soon\n. This has to work now with the --flat-tree option. The feature is for now published under the next dist-tag\n. @aecz sorry that we've forgotten to reply you. Seems like this issue is gone with latest pnpm/angular. If no and you'd be still interested in pnpm, please create a new issue and we'll investigate.. is this like a private gitlab instance? gitlab.domain.tld\nbecause I tried a similar URL pointing to gitlab.com and it worked\n. does it work with npm? (I don't mean we won't fix it if does not work there but it'll help to narrow down where is the issue happening)\n. Could you please look into the end of the pnpm-debug.log file and post the exact place where the error happens. In case it does not contain any private info you can just post the whole log file.\n. Here we normalize the repo URL: https://github.com/pnpm/pnpm/blob/master/src/resolve/git.ts#L76-L80\nThe fix might have to be done in this package: https://github.com/zkochan/hosted-git-info\nI might be able to fix it tonight, if someone would like to work on the fix, please leave a notice. landed in v0.55.3. Without colons it should work as well, I believe\nssh://git@gitlab.domain.tld/myproject/myrepo.git. Probably it will work, see: http://stackoverflow.com/questions/5279624/whats-the-purpose-of-the-colon-in-this-git-repository-url. parse-url seems to be the only npm package that can correctly parse your type of ssh URLs.\nhttps://runkit.com/58a20862fe14c40014e86901/58acc41dce91f10014a9ca96\nI'll probably fix this tommorow. will the ssh work if the default port will be specified - :22/?. Landed in v0.57.0. You're welcome. I expected a bigger performance boost but still. Tests are passing around 20% faster locally\n. > as far as i understood from tests, you effectively set cache to 0 in tests, dont you?\nI set 0 only in the test that tests update\n. > dont we need some $ pnpm cache clean to fix cache in case of fuck up\ntotally. Lets add it\n. > btw, what is the flow of install process has been interrupted either by user, or by any kind of error?\nyou think the cache can get corrupted?\n. we probably also have to lock the cache folder.\n. yes, but won't the two installs try to write the same cache files?\n. Regarding the corrupted cache files... I'll add a try/catch and will make the request if reading from cache fails\n. > thats good, but i was thinking about another negative case. take a look yarnpkg/yarn#627\nwe don't have that issue.\n1. we use npm-registry-clinet which handles retries on errors\n2. we check the shasum of the tarball after download finished and if they don't match, we throw an error\n. > oh, do you want to prevent from writing to the same cache/pkg folder in particular or to a whole cache/ folder?\nI was thinking about the whole cache/ folder\n. OK, I am not sure about content-length, because that one is in the stream. But we can easily add that check as we already count the size here\n. I created a separate issue for the content length checking #423\n. OK, now I think it is ready.\n. I merge it to work on the shared storage by default on Node > 6. If you notice something critical, please comment\n. Something like this\nFirst results were\nnpm install babel-cli --force --ignore-scripts: 40597.818ms\nyarn add babel-cli --force --ignore-scripts: 7737.555ms\npnpm install babel-cli --force --ignore-scripts: 6809.358ms\n. Only one test for now, the results are automatically written to the readme in this project: dependency-managers-benchmark. Measuring speed and disk usage.\nThe test might have to be run many times to have an average for speed.\n. Seems like pnpm is pretty good compared even to yarn!\nIt installs the dependencies of a react-app 4 times faster\n| command | time in ms | size in bytes |\n| --- | --- | --- |\n| npm install | 65479 | 96825002 |\n| yarn | 32558 | 175712562 |\n| pnpm install | 8324 | 91086578 |\nI'll add more fixtures for comparison. Probably an angular app, ember app, an express app, a hapi app.\n. Published with pnpm@1.13.1. merged\n. This is a breaking change, so I also included another breaking change. I changed store.json to store.yaml. yarn uses the yaml format in yarn.lock and I believe we will support the lock file as well in the future, so lets have consistency. yaml is more readable anyway\n. Currently it is either in ~/.pnpm/.store/ if global store is used\nor in node_modules/.store if a local store is used.\nAfter the change there will be two subfolders. One for packages installed using flat tree and another one for packages installed using nested dependencies structure\n. every package will use either the flat store or the nested store\nthese two types won't be mixed\n. When the store is inside node_modules, creating an additional subdirectory is redundant because node_modules will be either flat or nested. Hence, I will remove the additional nesting in dedicated stores and will add an additional property to store.yaml to identify the store type: nested or flat.\n. > if in the future we want to use .store.yaml the same way as .yarn.lock then we might want to move it out from node_modules now\nstore.yaml is for the store. yarn.lock is for the package. Also store.yaml does not influence what is installed, so it has different purposes.\nA lockfile we'll have to implement from scratch, probably.\n. hm, makes sense, it can be used as a lock!\nbut it contains all the deps of all the packages that use the store. It would work with a dedicated store but a shared store's store.yaml would have a lot of redundant stuff..\n. you are right. But 1 store can be used by several packages and all these graphs will be in one store.yaml\nso currently we can't just move this file to one of the packages\n. > So i guess we should have two stores: one global and one for each project\nI think we have to use some other naming for the one which is in the project\n. >  and i think local stores can to not have whole graph, but just upper graph points as kind of entry points to global store's whole graph\nso this graph will be both in the global store and locally in the project?\n. I think we have to create a separate issue for this because there's a lot to discuss\n. I think I did got you. You suggest to save entry points in the lock file. But what is the value of such a file if it is not usable without the store.yaml. On the other hand, the same can be achieved without using the lock file. We already have the single entry point, which is the path to the package.\n. I think this will be a separate library if our store structure will be the same as the one used by ied and potentially some other package managers.\nUpdate June 2017: seems like ied is not active anymore. Not needed anymore. Shared stores work fine without --preserve-symlinks starting from pnpm@0.47.0. The last version where private packages currently work is v0.35.0\n. Fixed in the latest version but still has to be covered with tests\n. Cover this as well https://github.com/pnpm/pnpm/issues/718#issuecomment-296620376. npm@2 just installed the peerDependencies like the regular dependencies. Maybe we can do the same?\n. OMG, is this because I have published the 0.42.3 from Windows? insane... I can republish later today from linux.\n. Unbelievable that this is still an issue in npm https://github.com/npm/npm/issues/12371\n. I republished from Linux so the line ending issue should be fixed in v0.42.4\n. it is running npm install concurrently.\n. Implemented as a separate package - pnpmr. It searches for all packages inside the cwd and runs pnpm install for each of the packages.. I think ready for now.\nI will further optimize it though. I want to make the code in installMultiple.ts and install/index.ts more straightforward. I don't know yet how. Maybe rxjs would help but I don't have experience with it.\nAlso I wonder whether it will be more contributor friendly with reactive programming. People are probably more used to promises... so maybe we have to use some of Sindre Sorhus's new promise libraries\n. The most complex part to solve is in installMultiple currently. It has different conditions when to install subdeps of a package and when not to, and everything is async.\n. I did not have your first issue on Linux, so it is probably macOS specific.\nI did have the second issue though, and I think I have something similar in an angular app (here).\nFrom this webpack issue it seems as if it can work with the --preserve-symlinks option https://github.com/webpack/webpack/issues/2937\nMaybe some program spawn's webpack without the --preserve-symlinks option?\n. @vjpr I just published v0.42.6 as latest and I can't reproduce this issue there. Although I was able to reproduce it on earlier versions of pnpm.\n. This should work on pnpm 0.42.6 - 0.50. Now there's a new issue #581. I tried the \"normal\" solution here but in your angular app example the \"@angular/compiler\": \"2.0.2\" is in one of the peer deps and it seems to not be installed by any package. Hence I don't understand how npm3 gets it\n. ok, I'll recheck tonight.\n. so I did it as @aecz suggested, the npm@3 way.\nReady for CR\n. Merged with the less-code PR #442\n. I am going to use the initial solution that just installed the dependencies because I can't configure it to work exactly as npm@3.\nIn the angular example, npm@3 cannot resolve the correct peer dependency which is @angular/compiler@2.0.2. It finds @angular/compiler@2.0.0 in the root as a consequence of flat dependency tree. The flat dependency tree of pnpm is a little bit different to work with the store.\n. Hey,\nWe have to document it somewhere, but here's how you can do it:\nyaml\nbefore_install:\n  - npm install -g pnpm\ninstall:\n  - pnpm install\nNote: The npm install -g pnpm part will be fast because we bundle all the dependencies of pnpm.\nWe actually use pnpm to install pnpm dependencies: https://github.com/rstacruz/pnpm/blob/master/.travis.yml\nCurrently it won't work with a cached store because of circular symlinks: pnpm install doesn't get the job done when node_modules is cached by Travis CI\nBut the good news is, it is fast enough without caching.\n. I suggest to also skip cache when doing update\n. So far it improved performance only by ~3.5%. I will try to make it faster. Maybe I am missing something.\n. Thanks, changed everything as you proposed\n. Also another thing to think about: the default location of the global store, global package and cache folder on different systems.\nCurrently they are ~/.pnpm/.store, ~/.pnpm and ~/.pnpm/cache\n. I don't think we'll have any serious new breaking changes before v1. Since this issue was created, the store/node_modules structure was changed several times and this last one seems to be the optimal.\nOf course, I can reopen it till v1 actually gets released . 1. rename the store-path config to store\n2. ? rename shrinkwrap.yaml to something else. Maybe node_modules_state.yaml.\n3. remove the redundant subfolder in the store. Currently the store has a subfolder called 1.\n4. rename the files which contain the shasums of the original, unmodified packages to <version>.integrity. Also use the same integrity format used by the shrinkwrap file (Subresource integrity). Maybe... there was a long discussion about this on twitter: https://twitter.com/ZoltanKochan/status/872168064267284482.\nSeems like most package managers use the term \"lock\". One uses \"snapshot\". But that creates such a mess TBH. We use the word \"lock\" a lot in code for the mutex files. Keeping the shrinkwrap.yaml filename.\nThe other breaking changes were done.. This might be not needed as this flag exists in npm only because some systems don't support symlinks/junctions. However, pnpm would not work on those anyway.. Landed in v1.19.0. There will be a better solution once this gets released: https://github.com/nodejs/node/issues/8509 (Configuration option to permanently turn on --preserve-symlinks)\n. in the 7th for sure. The 6th is under question for now. \n. Here they say they will discuss it. If they decide not to include it, we can implement the hack solution for v6\n. I think we don't need --preserve-symlinks anymore. As of v0.47.0, pnpm should work fine on Node.js 4 without preserve-symlinks. It is used on Node 6 and newer but can be turned off via the preserve-symlinks config.. no problem\n. This should work from pnpm@0.46 as files are hardlinked from the store. Even if the store will be removed, the files will stay in the node_modules. Related to #354.\nThe reporter is now a separate package: https://github.com/pnpm/pnpm-default-reporter\nAnd there is possibility of creating custom reporters because pnpm uses the ndjson format as output. Is it better with latest pnpm? It has less output now. Logs only the status of the top-level dependencies. This shouldn't be an issue anymore with the latest, really minimalistic pnpm output.\nIf it is, please reopen the issue or open a new one. yes, it fixed the issue on my Windows. A test was failing and after the fix the test passes.\nit is weird though that the test was passing on AppVeyor all the time\n. @rstacruz, we don't have access to install it on pnpm. Could you do it please?. Awesome that you fixed the symlink issues!\n\nAnd \"The Fundamental Flaw\": That it always converts \"main.js\" to its real path\n\nI know about this issue! We use a \"proxy file\" as a workaround in pnpm (but only for binstubs).\n\nBackward compatibly enhancing node so modules can be stored separately from the directory structures that dictate their dependency version resolutions, while keeping those version-specifying structures coupled to a given top-level '/node_modules' root. This seamlessly enables:\n\nI am not sure why this is needed. When running projects with the --preserve-symlinks option, there are almost no issues. We already use a global store for packages (shared-store).. > Regarding pnpm's use of a global store, it was my understanding that once a package is installed there, the versions of dependencies it uses don't change, because they're symlinks under the package's '/node_modules' to specific versions also in the global store. This is not a bad thing in-and-of-itself, but assuming my understanding is correct, it can result in multiple versions of shared, common modules being created in memory, when a single version would have sufficed.\nyes, this is correct. The dependencies will only change when doing a pnpm update.\n\nA larger potential concern, again assuming my understanding is correct, is it would also mean that the dependency versions for a package in a global store might change from machine-to-machine, which might not be ideal as it could result in subtle differences in behavior from machine-to-machine. Given those differences would exist in a transitive dependency, they might be a little harder to track down, and would then require changing the versions on one machine so they're inline with another, which could adversely affect some other project on the machine symlinked to the global package. This can be a problem when there are teams of developers, where's there desire to ensure everyone is using all the same versions of all dependencies, transitive or otherwise, for a given root '/node_modules'\n\nI agree, this is a problem. We wanted to fix it the same way yarn fixed it - using a dependencies lockfile (https://github.com/alexanderGugel/ied/issues/188)\n. Oh, indeed! You are completely right about machine-level lockfiles!\nBy the way, we have some issues caused by circular symlinks (https://github.com/rstacruz/pnpm/issues/400), so this is great news that with your changes they will not be needed anymore.\nI will try to read your documentation and look into the testing tool tonight. This is all very exciting!\n. @phestermcs I did a draft on the sjw branch. Probably tomorrow I will try it out with your fork of Node. Sounds good. Unfortunately, I wasn't able to work on it today (I had a long flight recently and I still have jet lag, \ud83d\ude04), but I am reading all the threads and I am very excited with what you did!\nDon't be bummed, I know that there are a lot of people that are excited with your proposals! I am sure all the pnpm, ied collaborators/users are totally on your side. You are saving our concept of shared stores! \ud83c\udf86 . > How close in functional parity is pnpm with npm regarding execution of lifecycle scripts, bin symlinking (npm's \"build\" step), etc.? How hard, or easy (hope hope) do you think it would be for us to get pnpm working with citgm?\nIt is very close. pnpm tries to do everything the same way npm does. All differences are only there to make it work with symlinked packages in node_modules.\n\nAnyways, I'm curious if you're still working on a branch of pnpm that works with anm?\n\nWhat I did so far is on a branch called sjw. I did not run it with your fork of Node yet. I just checked that the directory structure is using your anm approach.\nI'll try to test it on Saturday (European time) or maybe earlier if I'll have time after work.. I understand your frustration but don't give up! I really believe that it will work! Especially once we have a proof of concept with pnpm :smile: \nIf this change will fix the remaining issues of pnpm, then I will certainly use your branch of Node till it gets merged. Fast dependency installs are making my life so much easier!\n. Sure!\nYou said you wanted to change dots to pluses in all places? Is your fork ready for experimenting?. yes, you can try it yourself. I did not use any special options just changed the logic to use anm's instead of node_modules.\nhttps://github.com/rstacruz/pnpm/compare/sjw. My solution was to make a .node_modules folder (bad naming I guess) in the root of node_modules and store all the adjacent.node_modules there. I link around those adjacent.node_modules then to where they are needed.\nSomething like this:\nproject\n+-- node_modules\n     +-- .node_modules\n     |    +-- foo@1.0.0 (this is the adjacent node modules)\n     +-- foo (~/.store/foo@1.0.0)\n     +-- foo.node_modules (./.node_modules/foo@1.0.0). oh, yeah, I should update the suffixes. I'll do it in a minute. I pushed the fix. @phestermcs I just tried it with your fork of node. All tests passed except these two: \"shrinkwrap compatibility\" and \"building native addons\". The first one is obvious why. The second, I have to investigate the reason.\nNow to answer some of your concerns\n\nThe 'install' lifecycle events; you may already be doing something about this, but I think they should only run when a module is 'installed' to the store, and not necessarily everytime it's referenced from a root /node_modules. npm's \"build\" step, that creates the bin and man stuff, should though. The challenge is that the install lifecyle scripts can depend on other modules.\n\nYes, we currently run the lifecycle events once per installation... and you are right, this might be bad in some cases, but I haven't heard about issues yet.\n\nDetecting and then handling circular dependencies without symdir cycles in a flat structure.\n\nI'll probably try this tomorrow, and also I'll try different scenarios when using the store with several projects. once to put in store. Hence, once per installation per machine. I know that you worked on it for months, but I am really surprised that almost all the pnpm tests passed from the first launch! Amazing!. > So, that's not a necessarily a big problem, but I think ultimately, if/when you and ied maybe work together, and modules are keyed by the hash of their content, then any variance that might exist in a lock file because the install was a little different between two machines would be addressed... does that make sense?\nActually I thought the checksum of a package would be calculated before the lifecycle events, but what you are saying might be a good point. We work on some specs in the ied repo, you can post your concerns here at the lockfile spec PR: https://github.com/alexanderGugel/ied/pull/191\n. Seems like the node-gyp thing helped.\nNow there's another issue. I have to update pnpm to make it create the adjacent node_modules for packages already available in the store. There was no such need while the node_modules folder was inside the package.\nShouldn't be hard to implement. Probably tomorrow will do it. Seems like the new store design implemented in this PR #524 works pretty well. Even without --preserve-symlinks, so I am going to close this issue. I suggest to store the tarballs separately from the store. In a directory structure similar to the one used by sinopia/verdaccio. That way we can even distribute it somehow. Or use it by a local registry. There is 2.5.1 opened already: https://github.com/rstacruz/pnpm/pull/515\nBy the way, could you please update greenkeeper? The newer version does not open redundant PRs, just updates the existing ones. I managed to make it v4 compatible by using hard links to link from global(machine) store to local store. Seems like not. I removed node_modules and everything stayed in the global store. I am on Linux. I used only file links (I did not know hard link on directories exist).. According to this post we should be safe with hard links.\n\nIn Unix all normal files are Hardlinks. Hardlinks in a Unix (and most (all?) ) filesystems are references to an to what's called an inode. The inode has a reference counter, when you have one \"link\" to the file (which is the normal modus operandi) the counter is 1. When you create a second, third, fourth, etc link, the counter is incremented (increased ) each time by one. When you delete (rm) a link the counter is decremented ( reduced ) by one. If the link counter reaches 0 the filesystem removes the inode and marks the space as available for use.\nIn short, as long as you do not delete the last link the file will remain.. cherry-picked. But support for 0.12 was already dropped by pnpm@0.25 in the summer:\nhttps://github.com/rstacruz/pnpm/blob/master/package.json#L127. >> Maybe we'll have to make the dependency trees flat as npm and yarn.\nYeah... in hindsight this seems like a good idea now.\n\nI thought there would be problems with long directory names but I came up with this idea of \"node_modules/.resolutions\" folder which is kinda the old store with the node_modules included. So flat trees can be avoided in this PR.\n. After thinking about it a little bit more... I think we can create custom bin files that will add the needed node_modules folders to the search path. (Using the NODE_PATH env variable). Seems to work with eslint.. The solution should work for packages that use require.resolve to find their plugins. There is one exception for packages that are used both globally and locally (like gulp). I suggest to always use packages locally, but I'll open a separate issue for that problem.\nPublished with pnpm@0.47.0. This will probably not solve the issue for when the global installation of tools is executed.\nFor instance, if the global installation of standard is executed, it searches for the local installation and starts it on its own via a require.resolve, not via the binstub.\nCode like this is frequently used in such tools:\n```js\n!/usr/bin/env node\n'use strict'\nvar loudRejection = require('loud-rejection')\nloudRejection()\nvar resolve = require('resolve')\nvar cwd = process.cwd()\nvar localCLI\ntry {\n  localCLI = resolve.sync('mos/bin/mos', { basedir: cwd })\n} catch (err) {\n  localCLI = __filename\n}\nif (localCLI && localCLI !== __filename) {\n  console.log('Using local install of mos')\n  require(localCLI)\n} else {\n  require('../dist/cli')\n}\n```. Thanks for reporting, I'll try to fix it ASAP. Fix landed in v0.47.1. Are you on Windows? There was an error I fixed in v0.47.1 that caused issues in packages like eslint.\nAnd thanks!. Cool! I'll look into it after fixing the webpack issue\nAlso we use links currently, so there will be some confusion around disk usage. It will look like the packages are using space both in the global store and locally in the project's node_modules folder. However, they use the same space. \nThe disk space savings will grow exponentially! The packages of 10 react apps will use roughly the same space as the packages of 1 react app. hey @birchb, I am sorry for not reacting to your problem. I somehow missed your post.\nI created a separate issue for this https://github.com/pnpm/pnpm/issues/831. You can read about workarounds for Angular here: https://github.com/pnpm/pnpm/issues/1260\nFor Vuejs you may try the shamefully-flatten config as well. Sorry, not good yet. Funny, this is not needed, the webpack repo uses a hack to make it work https://github.com/webpack/webpack/blob/master/ci/travis-install.sh. I don't think we'll be able to make it work in pnpm.\nAlso the correct solution would be to include the dependency in peerDependencies. If we implement #651 and #837 then we'll probably be able to just substitute some dependency in the dependency tree. Which should be fine, I guess. We'll be able to publish a fixed version of popsicle-retry that will be used instead of the original one by pnpm. I don't think we have anything about \"fixing package.json's\" currently.\nThese kinds of \"hacks\" should be well thought through because people might decide pnpm is doing malicious things in their dependencies.. Maybe. lockDependencies seems to be a useful feature overall, so lets' see how it will work out.\nI hope pnpm will eventually become more popular and people/projects won't say \"no\" to us. So we won't need the hacks.. I know about this issue. TBH it happens quite often in the pnpm tests. And I even reverted the GitHub API usage a few releases ago. However, with the new global store, we have to know the commit sha in order to create a unique id for the dependency. Using GitHub's API was the easiest way to achieve this. In long term we'll have to rewrite it to work without the API usage. Npm uses the git CLI. Shouldn't be hard to implement this, it is just that we currently use codeload.github.com to download the tarball instead of using git commands. Using GitHub API + codeload is probably faster than using Git. I'll try to do this tonight using this feature of git to resolve tags/branches + cloning a single commit. Published as not latest for now to version v0.49.1. You can install pnpm@next. I wan to review the solution today because it seems a lot slower with git operations. Published a faster fix to v0.49.2. With the next dist-tag for now. This looks really good. Anyone will be able to create custom reporters. Like for TAP. I think we'll even move the current reporters to separate packages.. I think npm installs already note that. Or what do you mean?. You were faster, I wanted to suggest this:\nCould you please also check how it works without preserve-symlinks?\n\nrun npm config set preserve-symlinks false\nremove node_modules and reinstall (the store shouldn't be removed, from pnpm@0.46 the store is immutable. Seems like it is going to be deprecated by Node... But pnpm works fine without --preserve-symlinks since 0.47.0. I was actually waiting for a reason to remove preserve-symlinks, so here it is :smile: . We can make preserve-symlinks false by default once #571 gets merged.. This is a regression. The way this issue was solved in the past, packages were refetched to the store if they were not in store.yaml. There is even a test for that, but seems like the tests stopped working correctly after the big rewrite\n\nstore.yaml was written only when installation was successful.. But I think your solution is better because on an installation failure, part of the packages might be fetched correctly. With my solution all the packages would be considered invalid. The problem should be solved differently. I'll try another solution. @iamstarkov, my intention with #571 was to solve an issue. Here's how to reproduce the issue:\n\nusing the latest pnpm, set preserve-symlinks to false: npm config set preserve-symlinks false\ninstall eslint globally, using pnpm: pnpm i -g eslint\ncreate a package with an index.js\nin the package run eslint --init and configure linting\nrun eslint index.js in the root of the package\n\nSomething like this will be written to the console:\n```\nOops! Something went wrong! :(\nESLint couldn't find the plugin \"eslint-plugin-standard\". This can happen for a couple different reasons:\n\n\nIf ESLint is installed globally, then make sure eslint-plugin-standard is also installed globally. A globally-installed ESLint cannot find a locally-installed plugin.\n\n\nIf ESLint is installed locally, then it's likely that the plugin isn't installed correctly. Try reinstalling by running the following:\nnpm i eslint-plugin-standard@latest --save-dev\n\n\nIf you still can't figure out the problem, please stop by https://gitter.im/eslint/eslint to chat with the team.\n```\nWhereas if eslint index.js will be specified in scripts.test then npm t will pass without issues.\n. What if the solution proposed in #571 would be applied only for globally installed packages that don't have  preferGlobal: true in their package.json?\nI have checked some of the popular pluggable packages: eslint, babel, typescript, gulp. They don't have prefereGlobal true. Packages intended specifically for global usage have it: npmrc, forever. Although seems like not all of them: grunt and nodemon don't have preferGlobal specified. So this might be not a reliable solution.. Maybe I'll do this as a separate package in the future. I won't add this to pnpm, to avoid confusion. Also I fixed the test written for this use case. I'll add the fix to this PR. I like this solution more and more. It is such a simple and clever solution. Probably all the directory manipulations should be done this way. Especially this one, which can potentially leave a broken hardlinked package on a fatal crash. Unfortunately that test was working only with the old solution, so I just removed it. I was thinking about it just today. One of the possibilities to make pnpm better maintained - hypermodularization. A pluggable package manager. I like the idea!\nEdit: that is why I've added the possibility to create custom reporters for pnpm (see PR #540). > if we are installing react we need to fetch all meta about all\nreact versions and for each dep in each version we should fetch meta too,\nrecursively. So the resolution algorithm changes dramatically. That's a\ndownside.\nI am afraid that this would terribly slow down pnpm. Especially non-npm hosted packages. From npm we can request just the meta info. From other sources we should download everything. What if the registry document would be hosted with the package. In case of a git-hosted package, the registry document would be committed to the repo. It would be enough to get the latest version of that document and it would contain all the package.json info of all the package versions.. This looks very interesting!\nI am now uniting github resolve and git resolve to solve #536, so you'll have to apply your changes there. I'll push the changes in a moment. yep, I agree, lets discuss this in the issue that I created #559. Git resolver moved to separate package.\nThis change should be done there.\nhttps://github.com/pnpm/git-resolver. :ship: 1.36.0. @andreypopp, use this branch to build your changes upon. > Installation of packages without package.json\nI think this will be easy to do\n\nI think this can be solved by allowing configuring custom resolvers \n\nWe can move out the current resolvers to separate packages to see what API we can support for the custom ones.\nThe other points are harder to solve and probably will require a redesign of pnpm, which might be OK, but lets start with the easy stuff. Well, I don't insist on moving out the code. It has its advantages and disadvantages.\nTo see how resolvers are currently applied, you can check out this file. To get the spec object, we use the npm-package-arg package.\nI think resolvers and fetchers should be different plugins, because there are more types of resolvers that use the same fetchers. Like many resolve to tarball URLs.\n\nBut CUDF is the most fruitful feature, I think.\n\nOk, let's maybe discuss this one in the CUDF issue. Sure, good idea\nOn Thu, Jan 19, 2017, 18:04 Andrey Popp notifications@github.com wrote:\n\nI think resolvers and fetchers should be different plugins, because there\nare more types of resolvers that use the same fetchers. Like many resolve\nto tarball URLs.\nTotally agree, do you think we should refactor code to remove custom fetch\nfunction from ResolveResult? Also there's src/resolve/fetch which should\nprobably be moved out of src/resolve dir, maybe into fetchResolution.\nThoughts?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/559#issuecomment-273816902, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pmxkE4qTa66GGos0IvOUZyluxjnnqks5rT4l-gaJpZM4LmN0I\n.\n-- \n\nZoltan\n. As you may have noticed, I moved the installation engine of pnpm to supi. I think supi should just have one resolver, the default one that works with semver dependencies from an npm-compatible registry. Other resolvers, like github-hosted ones or tarball resolvers, should be in separate repos.\npnpm will then just combine supi and a set of resolvers.\nOf course, this change should not worsen pnpm's performance. I am almost ready with this. All the current resolvers/fetchers are moved to separate packages.\nThe default resolver/fetcher will be a combination of a predefined set of resolvers/fetchers. The default resolver/fetcher can be overridden.\nA PR is opened in supi but it doesn't have the configurational part yet: https://github.com/pnpm/supi/pull/24. All resolvers/fetchers were moved to separate packages.\nThey are composed by @pnpm/package-requester.\nThe API does not yet support passing in a custom resolver or fetcher but that is pretty easy to add. \n. pnpm's engine - supi, now expects a store controller to be passed in. The store controller can be composed of custom resolvers/fetchers. The travis job is running 10 minutes instead of 3. So it is pretty drastic.. When I've read lifecycle my first thought was the script tasks, like install, postinstall, prepublish, etc.\nI think stage would be better naming for this, or something else. onSomething sounds to me somewhat passive, like you can't change the behavior, just inspect. pre/post Something or your first choice might be better.. So your idea is to re-purpuse even the standard specs, because your hook is executed before all the standard resolvers... @opam/lwt@^2.5.0 is a standard spec. Do you think it is a good idea to rewrite the standard behavior? Maybe hooks should be for unhandled situations and nonstandard specs. Like @opam/lwt@sometype:^2.5.0. So you want to use pnpm as a package manager for ocaml. But ocaml doesn't need the node_modules dependency structure. So you'll override the install as well?. @rstacruz could you please create a chatroom for the pnpm org? You are the only admin currently.. done.  A good place to discuss shrinkwrap is this issue at ied. Note: I used a different format from the one specified in the specs there, I'll make a PR to suggest the format I for pnpm.\nRegarding this PR, if the tests pass and you don't want to make additional changes, I am ready to merge. Seems like the only breaking change is the addition of type to Resolution, right? If type gets removed then it is not a breaking change. Thanks, very nice refactoring!. > Side-Effects Caching \u2014 let say cache postinstall results in node version aware way\nMy only idea how to do this is to build the package in the node_modules folder into which it is installed. Then cache the created files in some build cache. The build cache has to be node version specific and dependency set specific (the package can be potentially installed with different sets of packages and the result of postinstall might depend on that).. I'm doing part 1. no, not yet, just a smarter cache that won't request a new package meta document if the spec is exact version, like foo@1.0.0. oh, right, #580 is what I do, but not all the cache yet, just the registry cache for the meta info. I never developed native deps, is it possible that the build results will be different for the same package/version with different dependencies in node_modules?. I really love the idea, but I'd prefer to postpone the development till pnpm v1 is out.\nI imagine we'll have lots of issues and breaking changes till everything will work as expected. It might be a good milestone for v2. What if we:\n\nunpack the package in the store (as we do now). Lets' say to /foo/1.0.0/node_modules/foo/.\nwe check if it should be compiled. If yes, then we check if there is already a precompiled version in the store at /foo/1.0.0/node_4/node_modules/foo/. If there is no precompiled version, we copy the unpacked resources to the target project's node_modules.\nwe compile the package in scope of the project (so in case of glitch, inside the docker)\nwe copy/link/reflink the package from the project's node_modules to the store (to /foo/1.0.0/node_4/node_modules/foo/)\n\n. 1. I'd probably add one config for both operations.\n\nnpm has commands for adding thing to the cache: npm cache add <name>@<version>. We can have a pnpm store add <name>@<version> command. The same config would work for this command as well.. I see, so you need something like side-effects-cache-read-only. We can have such configuration but for most users, 1 config will be enough.. You can try to make it if you want. You can start a PR early and I'll help along the way. @etamponi just to provide you some tips.\n\nAll store operations are currently done by the storeController. pnpm's default storeController is here. I guess a new function should be added to storeController, which will \"upload\" the compiled version of the package. The uploading will be probably called from supi postinstall\nBut what about getting the cached compiled resources? storeController has a function for getting packages from the store. It also resolves and fetches them if they are not in the store yet. The function is called requestPackage() and its implementation is in @pnpm/package-requester. The requestPackage() function returns the location of the package in the store via packageResponse.body.inStoreLocation. What we probably want to do here, is to also add the locations of the precompiled resources. Something like packageResponse.body.sideEffectCache: node version => directory\nI think this design makes the system pretty flexible. The engine will be able to decide whether to use the cached stuff or to re-compile it or whatnot.. This feature will be experimental at least till #1001 gets implemented\nbut it is available now in v1.31.0\nrelated configs are --side-effects-cache and --side-effects-cache-readonly. What if we save the process id to the lockfile? In that case we can check whether the process that created the lockfile is running or not. Well, in that case I vote for proper-lockfile. I think this is the only solution to avoid bad DX. We have some hacks to make CLIs work without --preserve-symlinks. However, if we allow CLIs to execute the local instances of themselves, they will escape our hacks (which is setting the NODE_PATH env variable).\nIMHO this solution also allows to add a pretty exciting feature to pnpm. We can make local CLIs available in the command line, when inside the package folder. I don't mean to install pnpm locally.\nThis PR is about changing the global package bin files. If a global package is executed, it checks first, whether there is a local installation of that package, if there is, the local installation is used.. This test demonstrates what I mean. yes. Because pnpm creates a special kind of cmd-shims that set the NODE_PATH env variable. Setting the NODE_PATH env variable is a workaround to allow tools like eslint find their plugins.\nHowever, when tools like eslint execute the local instances of themselves, they omit the cmd-shims created in .bin and as a consequence, they won't work correctly.\nIMHO, this solution is fine, as ied doesn't even support global packages and this solution allows to use them with our symlinked node_modules structure.. Security is not the strong side of npm, I guess. But I added a console message that the local CLI is used.\nAlso, it overrides only commands from the same package.\n. I see 3 types of packages:\n\npackages used only globally. Nothing will be changed for them\npackages used both globally and locally. They are mostly intended to be used this way anyway (like eslint, gulp, etc.)\npackages that are used locally only. Nothing will be change for them.\n\nSo this makes even a better DX for packages from the 2nd group and changes nothing for the 1st and 3rd type of CLI packages.. thanks. I don't take it personally. I just want to solve the problem. If you think this assumption might be not true for all the use cases, I can't prove that you are not right, so I should agree.\nI think I can rewrite it so that the global CLI will be used with node_modules folders added from the local CLI's lookup. That should work as well. yeah, right, I agree.. ok, this should be easy. We just have to export pnpm-logger. oh, you are right. @vjpr we can expose the logs stream via the API. Here's a test where the reporter log are checked https://github.com/pnpm/pnpm/blob/master/test/install/peerDependencies.ts#L27\nBut seems like you want a custom reporter. You can write one like this and then just run pnpm with your reporter: pnpm --reporter ndjson | custom-reporter. So you managed to make it work?. The pnpm installation engine was moved to a separate package called supi and it will be able to receive a logs listener via the options.reporter argument.\nThe programmatic API is experimental for now, but the different log types and names will be standardized till v1 of the pnpm programmatic API (or engine, whatever we call it). merged. badge added. Does it work with npm? Currently pnpm just checks if there's a package in node_modules and doesn't check if all files are there. Maybe this issue will help with this one. I noticed today a new issue with preserve-syminks, when used with karma. So I believe it makes sense to deliver this one even without solution to this issue. Weird, I downloaded that version of pnpm and node_modules seems to be correct. Also there are no any files outside of the lib folder.\nI use node 6 and npm 3 to cache the node_modules folder and publish pnpm. I don't know why lib/node_modules would cause issues. bower uses the same approach.\n@Akkuma, I published as @zkochan/pnpm the 0.48.1 with regular node_modules in the root of the package, so you can try it and see if it helps.. @Akkuma is it still happening with pnpm v1?\nWe had issues once because there was a dev dependency used in production code. To make it impossible for production code to access dev dependencies, pnpm now installs dependencies for tests to test/node_modules.\n. Please open a new issue if this happens again.. I see GITHUB_TOKEN only, Why do you ask? You wanna add some?. Interesting article. We currently don't have npm token on Travis, so we\nshould be safe. Should we integrate nodesecurity?\nOn Fri, Jan 27, 2017, 13:27 Vladimir Starkov notifications@github.com\nwrote:\n\n@zkochan https://github.com/zkochan @andreypopp\nhttps://github.com/andreypopp what do you think?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/578#issuecomment-275645407, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm6kyd0Dv4QDrn9-ZoArc5mF4sq4Jks5rWdS_gaJpZM4LtTTO\n.\n-- \n\nZoltan\n. I wonder whether we need a cache dir at all. We use it for caching HTTP requests. Most of the HTTP requests are for resolution, for getting the package registry document. I think we can save that document in the store, in the same directory where the different versions of the package are.\nis-positive/\n\u251c\u2500 1.0.0/\n\u251c\u2500 1.1.0/\n\u2514\u2500 meta.json\nI think this would also allow to implement what @iamstarkov suggested in #568\n\nSemver Aware Caching \u2014 invalidate cache in semver aware way\n\nEdit: of course we'll have to re-download the document from time to time\n. Related: #508\nNot sure about making it the default behavior but I like the idea a lot. TBH, hacking with deps is a pretty dangerous idea with the shared store. You'll change the package for other projects that use it on that PC. I think we have to add some pnpm verify command, that will re-check the checksums of packages in the store.. I might know what the issue is. Because of the node_module structure change, the .bin location has changed. Now it is ../node_modules/.bin instead of node_modules/.bin. I think we can move the bin files back to their old location. They won't cause circular symlinks. Let me know you will start to work on it, otherwise I'll try to fix it later today.. Seems like fixing the .bin position did not solve this issue. This is solved with the latest pnpm and CRA.\nI just tried it and it works!. I agree, the logs are bad. You can try pnpm i -g --force foo. It should remove the old node_modules and install your global package. done. Sorry, this is probably a bad idea because creating a node_modules folder outside might cause unintentional consequences. On the other hand, doing the symlink inside the project folder would make a circular symlink :disappointed: . I think we'll have to make the shinkwrap format more like what the npm-shrinkwrap looks like, where the same spec can be resolved to different versions\n```yaml\nversion: 1\ndependencies:\n  '@types/chalk': registry.npmjs.org/@types/chalk/0.4.31\npackages:\n  registry.npmjs.org/@types/chalk/0.4.31:\n    resolution:\n      shasum: a31d74241a6b1edbb973cf36d97a2896834a51f9\n      tarball: 'https://registry.npmjs.org/@types/chalk/-/chalk-0.4.31.tgz'\n    dependencies:\n      '@types/node': registry.npmjs.org/@types/node/0.4.31\nregistry.npmjs.org/@types/node/0.4.31:\n    resolution:\n      shasum: a31d74241a6b1edbb973cf36d97a2896834a51f9\n      tarball: 'https://registry.npmjs.org/@types/node/-/node-0.4.31.tgz'\n``. I just realized that the shrinkwrap format depends on the node_modules structure.. Hence, we won't be able to do #30 and #134. pnpm's node_modules structure differs from npm's. A package+version is always once in a node_modules and has one set of deps. I'll also fix in scope of this the #495 . Did the changes suggested and merged. 1. We have this issue: [Recursive installation](https://github.com/pnpm/pnpm/issues/440). I think it can be implemented in a separate package. Something like global+pnpm\n2. There is thelink-local` config that makes pnpm link local dependencies and converts them to semver deps before publish: https://github.com/pnpm/pnpm/tree/master/examples/monorepo\n. I am afraid to convert currently. Things are configured pretty well now.\nBut I would like to separate the engine of pnpm to a separate package, so I'll make a copy of this repo with the history of changes preserved and convert it to the engine. This repo will use the pnpm programmatic API.. Interesting concept. I don't really plan to move to monorepo anymore but that concept seems interesting.\nI think I like it more than lerna. I even have a tool created that can solve the issue describe in cheap alternative to find/define dependencies. The tool is called package-preview and it is used in all pnpm repos to verify that all used packages are correctly declared in package.json. I converted this repo to a multi-package repository.\nFor now, it contains only the cli app and supi. Next, I will move here the pnpm-default-reporter, @pnpm/config, @pnpm/server and @pnpm/headless. These are the most frequently changed packages of pnpm.. OMG, this was super fast, immediately after I published it. I think the solution for #600 will solve your issues as well. I believe this is fixed in 0.52.1. I cannot reproduce this anymore. As a temporary fix, we can\n\nmake the timeout configurable\nadd a --no-lock option. OK, let me add a --no-lock option for now, and then we'll try to solve it better.\n\nPlus an error message as you suggested. --no-lock released with v0.67.0. @vjpr published a fix in 1.0.1. As next for now because I did a lot of refactoring. I don't understand why proper-lockfile has so many issues. Maybe we just need to save the process.id in a file, in the root of the store and check whether the process still runs.\n. yes, but two locks are created. One for the store and one for the project. @nickpape-msft sounds great, maybe you could move that logic to a separate package and then we'll be able to substitute proper-lockfile in @pnpm/fs-locker. To my knowledge, all operations that are done by pnpm, are done atomically, so it should be safe to run pnpm without locks.\nI suggest to turn off locks by default.. I wonder whether we need locks at all if they are so buggy. Merged. Are you sure the problem is with the lock. I have some issues on Windows as well, when I install on really big projects. It seems like pnpm tries to do too much too quickly. I think we have to limit concurency using throat.. Thanks, I will try to fix this because I have issues as well. Also if you have some quick questions/requests, feel free to use the gitter chat https://gitter.im/pnpm/pnpm. @aecz, please retry with pnpm@0.52.0. It is released under the next dist-tag. lets reopen in that case. landed in v0.55.3. This was done. Yep, I have this as well. Maybe limiting unpack concurrency would help?!\nThis seems to happen only on projects with a lot of deps\nOn Fri, Feb 3, 2017, 13:13 Vaughan Rouesnel notifications@github.com\nwrote:\n\nWhen I ran pnpm i I got this error. Then I re-ran it and i didn't get the\nerror. Just looking to know if this could be a pnpm error?\nReproducing would be very difficult.\npnpm version:\n0.51.1\nCode to reproduce the issue: Actual behavior:\n/registry.npmjs.org/lodash/4.11.2/stage/package/fp\"\n  30338 error pnpm:\n    err:\n      name: \"Error\"\n      message: \"unexpected end of file\"\n      code: \"Z_BUF_ERROR\"\n      stack: \"Error: unexpected end of file\\n    at Zlib._handle.onerror (zlib.js:370:17)\\n\"\nAdditional information:\n\nnode -v prints: 6.5.0\nWindows, OS X, or Linux?: macOS\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/600, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pmzYAe9qw_1GU_No-erbFXCKfin3xks5rYwvlgaJpZM4L2Nfh\n.\n\n\n. Seems like this is because too many packages are being unpacked simultaneously. I added a limit fetch concurrency and it doesn't happen anymore. A PR will be ready today. I believe this is fixed in 0.52.1. I cannot reproduce this anymore. Currently hardcoded to 16 https://github.com/pnpm/pnpm/blob/master/src/api/install.ts#L213. ok, I'll make it configurable. Concurrency is a real big issue.. I reduced the concurrency to 4 in version 0.54.0 and you can set the value via the fetching-concurrency config. Fixed in v0.58.0.. > Is this the line where the extraction happens: https://github.com/zkochan/unpack-stream/blob/master/src/index.ts#L96\nyes\nas far as I remember our initial idea was that it was caused by concurrency. I think --fetching-concurrency doesn't currently cover all the cases when unpacking happens. Unpacking from a local tarball is not limited (here's the function that unpacks local tars: https://github.com/pnpm/package-store/blob/master/src/fetchResolution.ts#L113). @mnzaki thanks for this thorough investigation!\nAs far as I understand, the tarball is downloaded correctly. Otherwise, integrity check would fail and pnpm re-downloads the package in that case. If that is the case, we can put the unpack logic into a try/catch and retry unpacking on this error.\n. Here's where we unpack the tarballs https://github.com/zkochan/unpack-stream/blob/master/src/index.ts#L88. This sounds good. I would additionally log a warning if the error is not ENOENT.\nDoes this error only happen with warm cache? Because the usecase you describe uses a tarball from cache. Would you like to contribute this fix? Otherwise, I can probably fix it today or tomorrow. The fix was published with v1.30.1. @prakhar241 \n\nI'm getting this again and again while npm install on home network.\n\nnpm? This pnpm's repo. If you have issues with npm, look here: https://npm.community/. As a temp solution, you can use the --force flag to reinstall packages.\nA crazy idea, what if we make a git repo from global store?\nOn Fri, Feb 3, 2017, 13:33 Vaughan Rouesnel notifications@github.com\nwrote:\n\nI was just bitten by the biggest caveat of using (hard) linked modules. I\nmodified something directly in node_modules, then updated the real repo,\nforgot to undo the modifications in node_modules, and forgot to bump my\npackage.json to the new package I just changed.\nAfter clearing node_modules and reinstalling everying using pnpm i,\neverything appeared to work and I pushed my changes. Then it broke on a\nco-workers machine.\nI know this is pretty bad practice, but I think this happens a lot.\nIs there some way to verify that a global module has not been tampered\nwith?\nOptions:\n\nThe nuclear approach: Wipe out the global store and reinstall from\n   scratch.\nA flag to force re-downloading each package.\nA command to compare shasum for all a projects dependencies, and\n   indicate which are different. Perhaps show a diff of what has changed.\nA watcher daemon to track all changes to global store. Probably way\n   to expensive and complex to manage.\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/601, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm5m7AjvutQwAXJNtt2nZ_Yqo8L-xks5rYxB0gaJpZM4L2OkS\n.\n-- \n\nZoltan\n. I think we have to store all the package tars in the global store. Along with the unpacked files. Also we have to store the shasums. We can have some command to verify that packages in the global store are untouched (#585). We can also have a command to \"fix\" modified packages.\nOnce we have these implemented, we can run this pnpm verify command before each publish (and maybe before each npm test).\nAlso the benefits of storing the tar files are that in this form, the global store can be used by verdaccio (former sinopia) as a storage.. pnpm verify is published in v0.53.0. Because of the many issues, I am going to publish this as latest.\nIn the future we can make it more configurable. Seems like the only solution for your problem is hardlinking instead of symlinking. Actions are required anyway in that case.\nYou have to relaunch the app. There can be some watcher to relink the files. hot reloading reloads on changes in the node_modules folder?. The change that you are suggesting would have to be on a config, because it would create circular symlinks. And does it worth the additional complexity?. >> it would create circular symlinks\n\nSo it seems I was using 0.51.1 and now (0.53) the package folder is gone.\nSo now it would be node_modules/foo/node_modules -> ../node_modules which is the cycle as you suggested.\nBut if we revert back to symlinking to a separate package folder, there would be no cycles.\n\nI don't understand this. If you'll run the app with preserve symlinks, it won't make any difference in what structure the real path is saved. Only the symlinks will be taken into account. So you'll need the node_modules to be inside the package folder.\nI don't see any possibility to avoid circular symlinks with pnpm, when node_modules is inside the package folder.. I think we might support it. This is about having \"singletons\" in monorepos. We basically have to have a shared \"resolutions store\". The idea is similar to independent-leaves but for all packages, not only those that are w/o dependencies. Closing this in favor of #1001. With these changes I am getting ERROR EMFILE: too many open files, open on Windows Server. Not sure why. located the issue, It is because dirsum uses fs, not graceful-fs. Related https://github.com/pnpm/pnpm/issues/594. Closing in favour of #594. I think for this one I have a fix https://github.com/pnpm/pnpm/commit/7b703ec638f3104524aef18c40c39b01cdde0a31. I've broken bins linking in 0.53. I think this still happens sometimes. Concurrency will have to be refactored. Wow, probably we have to create some fs wrapper to limit fs operations\ndirectly\nOn Sat, Feb 11, 2017, 16:58 Vaughan Rouesnel notifications@github.com\nwrote:\n\nI tried it out on Windows and still got errors with the new default\nfetching concurrency of 4. I had to change it to --fetching-concurrency=1\nfor it to work.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/609#issuecomment-279149459, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm1n_LGLjDqSyZXyplKbGPWmHbYeQks5rbcykgaJpZM4L5zto\n.\n-- \n\nZoltan\n. There was a lot of supporting code for preserve-symlinks. For instance, command shims should be different and they should be proxied... Lifecycle scripts should be executed with the preserve-symlinks flag. \nIt would be easier just to maintain v0.50.0 instead, where preserve-symlinks is still the default behavior. Closing this in favor of #1001. Message regarding what linked where added here 9bab64199e7e832d65a3f132b8f933728f9de3c5\nDoes npm print messages about peer deps in this situation?. We use the same package for downloading the packages that npm uses.\nSo probably it is an authentication issue.\nWe use this package for getting the tokens: https://github.com/rexxars/registry-auth-token\n@rexxars, @leipert maybe you have some ideas what the issue could be here?. @Alexgalinier seems like using the _auth=base64AuthKey is a legacy way of specifying the auth token.\nYou can try this configuration: //domain/artifactory/api/npm/npm-repo:_authToken=base64AuthKey\nBut I guess we can support the legacy way as well. It should be implemented in https://github.com/rexxars/registry-auth-token though. Created a package to achive what the link-local option was trying to achieve - link packages in a monorepo - link-local-packages. Weirdly neither npm@5 nor yarn print deprecation warnings when a lockfile is present. The reason why is because they don't make a separate request to the registry for the package metadata. The package metadata (e.g. https://registry.npmjs.org/jade) contains info whether the package is deprecated or not.\nI think this is bad. Maybe the deprecation messages should be added to the lockfile in order to have them reported during every installation. Released in v1.4.0. What if the logs will be written into the OS temp folder? In that case it will be cleared automatically.. @vjpr is it still reproducible in v0.62.2?\nI tried pnpm i webpackerator and I didn't get the error with the extract-text-webpack-plugin peer dep.. you can use pnpm i --reporter ndjson\nyou can also use some ndjson formatters to get nicer output. why should it satisfy the parent deps package.json? it should satisfy only the package.json which requires the dependency.\n\nI encountered an issue where lodash@3 was saved in the shrinkwrap.yaml for a module that required lodash@4. I had to remove the shrinkwrap.yaml file to fix it.\n\nsteps to reproduce would be helpful. If it happens, it is a bug for sure. Thanks for the steps\nshrinkwrap is reused. It is not just for a record.. oh, right, so currently pnpm always tries to update the top dependencies, when doing pnpm install w/o additional arguments. So for the top deps shrinkwrap is ignored, but the shasum is respected, if no newer version was found.\nFor the lower deps shrinkwrap is respected though, unless the depth config is specified with a value other then 0. > currently pnpm always tries to update the top dependencies, when doing pnpm install w/o additional arguments. So for the top deps shrinkwrap is ignored, but the shasum is respected, if no newer version was found.\nThis behavior is confusing, I'll change it so that shrinkwrap will be respected for the top level dependencies as well. Well, you can also update all the top-level deps using pnpm update. And you can set the --depth option to specify the level to which dependencies are updated (0 means the top level). This is the same way it works at with npm \n\nAs of npm@2.6.1, the npm update will only inspect top-level packages. Prior versions of npm would also recursively inspect all dependencies. To get the old behavior, use npm --depth Infinity update, but be warned that simultaneous asynchronous update of all packages, including npm itself and packages that npm depends on, often causes problems up to and including the uninstallation of npm itself.\n\nI would personally make it infinity by default..\nOf course, I agree that this should be documented.. Fix landed in v0.60.0. > Due to that, the developed module doesn't find some required dependencies and crashes.\nIn that case that package has to be fixed. If a package uses some other package, it should depend on it. It shouldn't expect a flattened dependency tree. pnpm doesn't need a flattened dependency tree as npm and yarn.\nFlattened dependency trees is not a feature, it is a workaround. pnpm doesn't need this workaround. Are you running Node.js with --preserve-symlinks?. Node resolves dependencies relatively to the realpath.\nThis is the structure pnpm creates:\n\u2514\u2500 node_modules/\n   \u251c\u2500 .registry.npmjs.org/\n   |   \u251c\u2500 chalk/1.1.1/node_modules/\n   |   |  \u251c\u2500 chalk\n   |   |  |  \u251c\u2500 index.js     => ~/.pnpm-store/registry.npmjs.org/chalk/1.1.1/index.js\n   |   |  |  \u2514\u2500 package.json => ~/.pnpm-store/registry.npmjs.org/chalk/1.1.1/package.json\n   |   |  \u251c\u2500 ansi-styles/    -> ../../ansi-styles/2.1.0/node_modules/ansi-styles\n   |   |  \u2514\u2500 has-ansi/       -> ../../has-ansi/2.0.0/node_modules/has-ansi\n   |   |\n   |   \u251c\u2500 has-ansi/2.0.0/node_modules/\n   |   |  \u2514\u2500 has-ansi\n   |   |     \u251c\u2500 index.js     => ~/.pnpm-store/registry.npmjs.org/has-ansi/2.0.0/index.js\n   |   |     \u2514\u2500 package.js   => ~/.pnpm-store/registry.npmjs.org/has-ansi/2.0.0/package.json\n   |   |\n   |   \u2514\u2500 ansi-styles/2.1.0/node_modules/\n   |      \u2514\u2500 ansi-styles\n   |         \u251c\u2500 index.js     => ~/.pnpm-store/registry.npmjs.org/ansi-styles/2.1.0/index.js\n   |         \u2514\u2500 package.js   => ~/.pnpm-store/registry.npmjs.org/ansi-styles/2.1.0/package.json\n   |\n   \u2514\u2500 chalk/                 -> ./.registry.npmjs.org/chalk/1.1.1/node_modules/chalk\nChalk will find ansi-styles, because the realpath of chalk is in node_modules/.registry.npmjs.org/chalk/1.1.1/node_modules/chalk, not in node_modules/chalk (this is just a symlink).. However, pnpm's structure won'd work when node.js preserves symlinks. Which happens only when Node.js is executed with the --preserve-symlinks option. Great! I'll try to add more documentation about these things.. One thing we can do is to make the error message more user friendly when running pnpm install after a npm install.. I have written a package that can detect what package manager has installed the node_modules folder - which-pm.\nAlso I have written another package that can detect what package manager runs the process - which-pm-runs.\nnpm, pnpm and yarn are detected properly.\nI don't know yet how to prevent npm/yarn from running on packages maintained by pnpm. Of course, we can add one of these packages to pnpm, but that will solve only half of the problems.\nI am open to ideas. I'd probably implement it as a third party tool\nOn Thu, Dec 7, 2017 at 2:16 AM Tiago Nobrega notifications@github.com\nwrote:\n\n@zkochan https://github.com/zkochan Do You think it's reasonable to\ncreate a script that throws an error when not runned by pnpm and hook that\nin preinstall script? It could be something like \"pnpm checkpm\" or even a\nseparate package for that. It seems kinda hacky, but since it would be\noptional, maybe it's not all bad.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/637#issuecomment-349818542, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm-QLpxPOcHlY6X2yu1upEEBU6kczks5s9y5CgaJpZM4MLB8L\n.\n\n\n. TBH, I have never heard about this project. But it seems like it is only for archives, not a npm-compatible registry. Created an issue at verdaccio, maybe someone will be interested in this concept.\nhttps://github.com/verdaccio/verdaccio/issues/128. My vision is some sort of a smart cache that will contain the tarballs you need before you even executed pnpm install.. About the way it will work. I see these solutions:\n\nthe smart cache can contain the whole registry. But that might consume a lot of disk space, I don't know.\nit can have a fresh cache only for the packages that were ever downloaded on the machine. So if you do a pnpm update, it will be really fast\nit can have all the packages from npm that have more than some number of downloads per day.. If you look into this package https://github.com/nice-registry/download-counts you'll see that only a small percentage of packages in the npm registry have more than 100 downloads a day. So I think the 3rd solution might be the best one.. Also similar idea: https://github.com/mixu/npm_lazy. We might be able to do this if we make pnpm run with the store server by default. The issue with the store server is currently that it is pretty slow. Installations are up to 20% slower with the store server than w/o it.. @staltz I can start working on it not soon. Currently, I am invested into making pnpm the best package manager for multi-package repositories. This can be the next big thing though.\n\nWe can start with writing specs.\nWe have a separate repo for specs here.. a broken version of cb2promise was released. I'll substitute some of the deps that rely on it and update this dependency manually. Currently git-repo, directory. You can see the types in resolve/index.ts\nOn Fri, Mar 3, 2017, 13:00 Vladimir Starkov notifications@github.com\nwrote:\n\nMost of the resolutions are tarball files.\nwhat are other types?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/647#issuecomment-283926445, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm28fHpJ35p35nmsklp6pmL9Qn1oBks5rh_LjgaJpZM4MRhm8\n.\n-- \n\nZoltan\n. This will be a little bit simplified as there is no need for backward compatibility. The fix for #634 will require a breaking change in the file's format. Merged this to #649. Landed in v0.60.0. If you just do pnpm i lodash, it should not be saved in shrinkwrap.yaml. If you do pnpm i -S lodash then this is a valid case.\nThe pnpm i -S lodash case will be fixed by #649. > Just tested, when I run pnpm i lodash, it is saved in the shrinkwrap as of 0.58.0.\nyep, I am fixing this as well in #649. ok, thanks, I'll create a test for this one. Fix landed in v0.60.0. Landed in v0.60.0. I like this idea a lot!\nWhy rewriting by dependency path? Why not just by spec?\n{\n  \"lockedDependencies\": {\n    \"foo@*\": \"1.0.0\",\n    \"bar@2\": \"zkochan/bar\"\n  }\n}. personaly I would always override all but we can support scoping. Something like\njson\n{\n  \"lockedDependencies\": {\n    \"qar@1\": {\n      \"foo@*\": \"1.0.0\"\n    },\n    \"bar@2\": \"zkochan/bar\"\n  }\n}\nlooks pretty ugly, I don't know what the format should look like yet \ud83d\ude04 . what if I want to rewrite qar@1 as well?. I'd suggest just using spaces. > means direct dependency. I think it'd be nicer to not limit ourselves with direct paths, so it'd be\njson\n{\n  \"lockedDependencies\": {\n    \"qar@1 foo@1\": \"1.0.0\",\n    \"bar@2\": \"zkochan/bar\"\n  }\n}. I wonder if \"locked\" is the correct word here. Locked would probably be fine if we would only allow specifying a version that satisfies the original range. But we will allow anything, so maybe forcedDependencies or overridenDependencies.\nOr even overridenSubDependencies\nOr subDependencies?. Had a conversation about this in a npm channel at discord:\nWere you thinking about adding the feature of overriding subdepencies to npm? There is an issue at pnpm about this and I really like the idea: https://github.com/pnpm/pnpm/issues/651\nIn a nutshell, it would allow to force a different version in a subdependency? \nIf you'd be interested in this, we could try to use the same syntax/configuration(edited)\nkat - Today at 7:40 PM\nI wouldn't want to do this in package.json\nI think this is the sort of thing that should only happen in lockfiles\nzkochan - Today at 7:40 PM\nbut they are autogenerated, no?\nkat - Today at 7:41 PM\nIt should also not allow users to violate semver requirements\nYes, but lockfiles are the ones that can do this kind of manipulation.\nFwiw, npm can already do this. Like, now.\nzkochan - Today at 7:43 PM\n\nIt should also not allow users to violate semver requirements\n\nso it would not allow to specify a version from a github branch, for instance?(edited)\nkat - Today at 7:43 PM\nYou can easily write a third party tool that just edits your package lock if you're just using a slightly different version. The thing you'd want npm itself for is to reshape the tree if needed\nThat one's tricky: we have already decided and reasserted that we're never gonna allow replacing dependencies entirely like this, or having aliases.\nThe git version of the \"same\" package is still questionable\nzkochan - Today at 7:46 PM\nseems pretty useful though. If you fixed an issue but you have to wait a lot for it to get merged\nlike once I had to publish a whole set of packages with different names just because the maintainers were not responding\nkat - Today at 7:47 PM\nRight\nzkochan - Today at 7:48 PM\nand also with pnpm we have the issue that sometimes maintainers refuse to make changes \"because it works with npm/Yarn\"\nkat - Today at 7:48 PM\nSo the only time I'd consider this is if the package has an identical name as well as a compatible version field\nAnd imo the edit should be to the lockfile. (Please use \"she\" when mentioning Kat. The two lead developers of npm are females)\nI wasn't saying we're not doing it, I just quoted what npm thinks about it.\nI was also leaning towards not having the property in the shrinkwrap file but I don't see so big issue in (Penny 5).\nIs your suggestion to ignore this issue and just implement #861?. In pnpm this will be most probably supported in some minor version of version 2. Probably in September or October.. I am closing this one as we now have the readPackage hook published with pnpm@1.12.0. There is already the pnpm verify command to check whether dependencies were mutated. Maybe it can be extended to make more checks.. Also instead of node_modules/.graph.yaml we can probably have just a copy of shrinkwrap.yaml in node_modules. It would simplify a lot of things.\n.graph.yaml has dependents though, which is pretty useful for uninstalling. Maybe the dependents info can be saved somewhere else. And what to do when a dependency is installed w/o any --save option. In that case it will be in node_modules but neither in the project's package.json nor in the its shrinkwrap.yaml.\nWe should make installations with --save the default behavior, like yarn did. So even if someone does pnpm install the dependency will be saved in package.json. I am a little bit confused with the naming. pnpm verify seems to be good naming for a githook. husky, for instance, uses this naming. However, now we use this command for verifying that dependencies were not edited or otherwise mutated...\nSo should we use the verify command? If yes, to what should we rename the current verify command? If no, what should be the name.\npnpm ok sounds like a good name as well... but the difference between pnpm verify and pnpm ok doesn't sound obvious to me. Maybe the current pnpm verify command should be renamed to something more obvious, like pnpm untouched?. hm, there is also git status... which is kinda what pnpm untouched would do. So maybe pnpm status. Or pnpm store status. @vjpr you can use yarnhook, it will run pnpm install after git operations if the node_modules needs updates.\nDo you think there is still need for a command that just informs? Maybe a flag could be added to yarnhook\nBut I have no objection to have it as a builtin pnpm feature. Rebased and merged. Are you sure? I just tried npm install is-negative with npm@3.10.9 and it did not update my package.json. Maybe you have some config changes?. Seems like this command should be separate as @vjpr suggested, or verify should have some arguments to exclude checksums verification....\nOn a huge project, comparing of the private/publish shrinkwrap files takes less than 2 seconds. But with verification that dependencies were not modified, it requires ~10 seconds. Too slow to include in git hooks.. In the evening I will try to make it faster, maybe just comparing the raw files, w/o parsing them. I'll merge everything but the last commit and then will create a separate PR for the new command. Seems like most of the time is consumed by reading the files, because they are pretty big. I'll create an issue to make the shrinkwrap files smaller. I wonder whether the shasums are needed when packages are installed from npmjs.org. Packages are immutable on npmjs.. Demonstration of improvements done so far https://github.com/pnpm/sample-project/commit/df2162591c2e35ee1c95ccedc83a38747b36e3c7#diff-4948fe43eb1fbc2623e70c58a15bab69. I am thinking about some more minifiation\nyaml\n  /has-ansi/2.0.0:\n    dependencies:\n      ansi-regex: 2.1.1\n    resolution:\n      shasum: 34f5049ce1ecdf2b0649af3ef24e45ed35416d91\nto\nyaml\n  /has-ansi/2.0.0:\n    dependencies:\n      ansi-regex: 2.1.1\n    resolution: 34f5049ce1ecdf2b0649af3ef24e45ed35416d91\nand\nyaml\n  /ansi-regex/2.1.1:\n    resolution:\n      shasum: c3b33ab5ee360d86e0e628f0468ae7ef27d654df\nto\nyaml\n  /ansi-regex/2.1.1: c3b33ab5ee360d86e0e628f0468ae7ef27d654df. I know a solution for this. I'll make a PR to husky that will use process.env.INIT_CWD to determine whether husky is installed in the root.\nBut currently process.env.INIT_CWD is not set correctly by pnpm. Issue #892 has to be solved before making the PR to husky. PR opened at husky https://github.com/typicode/husky/pull/185. This is fixed in the beta version of husky.. - [x] We can make pnpm i -f keep the symlinked dependencies and remove everything else\n- [x] We can force to run pnpm i w/o parameters when the node_modules structure has to be recreated. In that case it would have to be pnpm i -f && pnpm i dedent\nBy the way, you can skip the -S parameter. Packages are added to dependencies by default (unlike with npm). Oh, sorry, I didn't look into the global installation issue. This was discussed in the npm package-lock PR and npm's team convinced me that there's no need to include configs in the lockfile. done . not reproducible. This is fantastic! Thanks @iarna! We'll be using it for sure!. Which version of pnpm? I can't repro it.\nHere's the code that returns the version: https://github.com/pnpm/pnpm/blob/master/src/fs/shrinkwrap.ts#L200-L213\nI can't imagine how it can return something with the v prefix. Landed in v0.67.3. maybe this is the reason\nhttps://github.com/pnpm/pnpm/commit/e43aa6e8ae69aeb0c5261f94cf5d5279536a3887\nbut weird, because we have tests with circular deps and they pass. Does it work without the force parameter?. This was an issue in a third-party package. Is fixed now\nhttps://github.com/rexxars/registry-auth-token/pull/11. yes, perfect. Good explanation. Lets add it somewhere to the repo docs.. > I see that pnpm uses the global-bin-path package, but I don't think this is very reliable; The code, unless you're on Windows, is literally just path.dirname(process.execPath), which I guess results in /usr/local/Cellar/node/7.8.0\u2026\nI'm note sure if putting each package's actual bin files (not links to them) in there is correct, or whether they should be in their respective package.json.bin folders like regular npm. But regardless, they should then be symlinked into npm bin -g (/usr/local/bin usaully) just like npm does, so that global commands are immediately available on the PATH as you would expect.\nThe description of global-bin-path says that: \"Return absolute path for global module executables, likes npm bin -g\". So I think we can suggest a PR there if they don't return what npm bin -g returns on some systems.\n\nAlso pnpm uninstall/unlink/rm --global doesn't remove globally installed things\u2026 stuff just remains in /usr/local/Cellar/node/7.8.0! :/\n\nIf so then we should fix it for sure.\n\npnpm seems to pay no attention to $NPM_CONFIG_USERCONFIG like npm does\u2026 a workaround is to pass --config $NPM_CONFIG_USERCONFIG to pnpm but again this obviously isn't ideal, and the flag doesn't even match npm's [--userconfig] (see #40)\n\nLets have separate issues for these. I agree that we have to have the same API as npm\n\nOnce you do get pnpm to read an npmrc, the ${ENVIRONMENT_VARIABLES} within arent expanded as you would expect (for example local-registry/store-path/global-path etc\u2026) meaning more hard-coded paths! :/ Although at least tildes ~ do work\n\nWhat do you mean? The default configs for local-registry, etc. are bad and you cannot override them?. > So pnpm --global uninstall/unlink/rm should additionally remove the symlink from wherever npm bin -g actually is that should have been put there on --global install right?\nCorrect. All of these should now work in v0.65.1. Please track issue #1210 if you have problems with globally installed packages. or no, that on is different. Lets create a new issue for this. Seems like it is possible to use npm's API to load npm configs. I am not sure about the performance yet.\nBut it can be done like this\n```js\nconst npm = require('npm')\nnpm.load()\nnpm.config.get('config-key')\n//> config-value\n``. @danielbayley, I published the fix with [v0.65.0](https://github.com/pnpm/pnpm/releases/tag/v0.65.0). With thenext` dist-tag for now. Please test it when you'll have time. When was it that you tried pnpm on different projects? There indeed were issues with pnpm and pluggable frameworks but we have fixed most of them. If you'll have specific problems, feel free to create issues for them.\nIf there are packages that depend on the flat dependency tree, they are incorrectly written. If a package uses another package, it has to have it in some dependencies or peerDependencies property.\nWhat I plan to do to solve this issue, is some tooling to analyze the dependency tree for any possible usages of unreferenced packages. That will allow us to find issues really quick. Also tools like publish-please can be extended to check for missing packages before publish.\nP.S. Supporting such an option would add a lot more complexity to pnpm. And running pnpm with this option would make it a lot slower, probably even slower than yarn or even npm. It might still use less disk space, but that's not such a big deal. I just recommend using npm/yarn in such cases. @gajus pnpm@1.34.0 has now an option to create a flat node_modules.. @wintercounter could you please recheck with latest pnpm. This might have been fixed by #717. If not, add the error stack trace that will be at the end of the pnpm-debug.log file. @FalloutPL uses some different format. I'll look into that one later. I won't have time to fix it in the near future (maybe in two weeks I can look into it but cannot guarantee).\nIf someone has time, I think the fix will have to go to https://github.com/pnpm/pnpm/blob/master/src/resolve/git.ts\nAlso, I think this issue is a regression. I think it used to work till we updated npm-package-arg to version 5. So pnpm@0.46.6 and earlier versions of pnpm might not have this issue.\n. Here: https://github.com/pnpm/pnpm/blob/master/test/install/fromRepo.ts. Seems like this was an issue in npm5 as well and they have fixed it here\nYou can try pnpm@next to see if the issue is gone. If so, I can also update the latest version of pnpm.. @moos could you check whether this is fixed in the current latest pnpm@0.69.1. Great!. Same as #618 \nShould be fixed probably in https://github.com/rexxars/registry-auth-token. I see, you probably have the same issue as this. Partially fixed. Lets track this issue in #718. @kopach I looked through the logs that you attached and it seems the issue was that pnpm did not pass through the always-auth config value to npm-registry-client. I fixed it in #728.\nYou can try the latest pnpm.\nLets keep the issue open till we cover it with unit tests. Not so easy to cover it because we have to create a new registry mock.. Sorry, I did not publish it yet. I'll post a message when it is published. Landed in v0.66.3. Does the error happen as well if you remove the shrinkwrap.yaml first?. ok, thanks, will look into it again. I know what is the issue with this. I'll fix it this week. @kopach please try with the latest pnpm v0.73.0\nit should work now. pnpm now uses npm's code directly to get the auth headers. this is weird. What does npm c get registry return for you?\nThis? https://artifactory.finantix.com/. your registry config is probably set to //artifactory.finantix.com/artifactory/api/npm/, which is correct... I know what the issue is. When getting the metadata here, the registry URL should be passed to getCredentialsByURI.\nI returned 0.72.0 to be latest. Probably tomorrow I'll do the fix. Actually, it was easier to change than I thought, so I have a new version with the fix already.\n@kopach could you please try again with pnpm@0.73.1. It is not published as latest. It is published with the next dist-tag.. @kopach, you can try to set it to https://artifactory.finantix.com/artifactory/api/npm/npm-release/ and retry (a / is added to the end).\nSeems to me that pnpm should add the slash to the end before passing it to getCredentialsByURI. But this workaround should fix the issue as well. Mystery solved! I'll make the final fix tonight.. Was there a node_modules directory already created by another package manager? If yes, remove it and retry.\nCurrently pnpm fails when executed inside a package with a node_modules folder created by npm or yarn. \nWe have to give a correct/informative error message. Seems like neither npm nor nodejs is in your PATH environment variable.\nThe error happens because this returns undefined https://github.com/QingWei-Li/global-bin-path/blob/master/index.js\nI'll fix it in scope of #695\nIn the meanwhile you can add either npm or nodejs to PATH. I see.\nIf you want, you can just manually go to that file where the exception happens and pass in a value instead of undefined. In that case pnpm i will work for you. pnpm i -g won't work till the fix.\nI'll fix this probably tonight or this weekend. Seems like this package can help us implement this https://www.npmjs.com/package/drivelist. Yes. You are right. This seems easy to fix on Windows.\nI am not so sure how to distinguish different partitions/disks on Linux and\nMacOS\nOn Mon, Apr 24, 2017, 13:37 Plamen Stoev notifications@github.com wrote:\n\n@zkochan https://github.com/zkochan how do you think that check would\nwork? Checking against only physical drives? I think the issue is\nreproducible on logical drives as well...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/712#issuecomment-296613475, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm3VYFBBQcCucslKzVAbuL0Q2c73Zks5rzHuAgaJpZM4NEsZs\n.\n\n\n. @noformnocontent could you please check on your environment whether path.parse correctly detects the root on your different disks?. thanks, I hoped it would return /media/dym as root. In this case we'll have to use the drivelist package. I haven't found anything else. I guess if it has one filesystem then it should be fine. OK, so on Windows it will be <disk letter>:\\\non Linux /media/<user>/<mounted_volume>\non OSX /Volumes/<mounted_volume>\nSeems easy.. We should also come up with a way to configure the path to the store on file systems. I think we can use a similar format to the one that is used for storing registries and auth info.\nini\nstore = D:\\data\\pnpm-store\nD:\\subdir:store = D:\\subdir\\foo\\pnpm-store\nD:\\:store = D:\\store. No. Cross device linking using hard links is impossible. The store will be\nalways on the device on which you run install\nOn Sat, Apr 29, 2017, 00:32 Charlike Mike Reagent notifications@github.com\nwrote:\n\nActually, does fixing that issue means that it will be allowed\ncross-device linking? If yes, ping me, because don't want to work and store\non same device ;d I just have totally separated partition for caches,\nbackups and such things.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/712#issuecomment-298111591, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm7jdBl1wEjCtscr1RL4xzHhNt8uNks5r0lrQgaJpZM4NEsZs\n.\n. I don't understand what is the issue. It will still use not more space per partition than npm or yarn.\n\nAlso I don't see in your workflow where you leverage the flattened node_modules structure. It seems you just use global packages. Should we rename \"global store\" to something else to reflect that it is per filesystem/partition?\nMaybe \"partition store\", or \"disk store\"... any ideas?. Well yarn does not use hard links pointing outside of the node_modules folder, so they don't have this issue. I suggest a quick fix before the smart, harder one.\nIf there is a \"cross-device link not permitted\" error when creating the hard link from the global store to the project's node_modules then pnpm prints a warning and falls back to copying.. A temporary fix published with v0.69.0-beta.3.  It can be installed via npm i -g pnpm@next\nThe fix is: if linking from store fails, the package is copied.\nTested on Linux, let me know if there are issues on other systems. Mentioned these issues in the README. Published in v1.15.0. Each disk has a dedicated store now.. @dandv the second time, if you specified store to be on the same disk, you did not get the EXDEV: cross-device link not permitted warning, right? In that case files in node_modules/.registry.npmjs.org are hard links and symlinks. They are not copies of files from the store. Same as #712. Also see that issue for a temporary fix.. Closing this. Please track #712.\nAlso a temporary fix published in v0.69.0-beta.3. You can install it via npm i -g pnpm@next. Fix published in v1.15.0. Each disk has a dedicated store now.. This was a regression. I added a test for it and fixed in v0.65.2. I think I know the reason.\nWill it work if you put a slash to the end of your registry URL?\nregistry = \"http://ourhost/tfs/OurCollection/_packaging/npm-registry-name/npm/registry/\". no, pnpm does not create .npmrc files.\nRegarding the 401. In what format do you specify authorization tokens?. Have you added the slash there as well?. We use this package for getting the tokens from configs. I assume it cannot find the token for some reason. > [server_address]:_authToken=[very_long_token]\nDo you specify the protocol here or just start with //\nSeems like it works when the protocol is relative but fails in other case.. Could you then post exactly how the [server_address]:_authToken= part looks like and the registry = [registry url]\nBecause I cannot reproduce with //. Good investigation!\nSeems like npm solves it by using the always-auth config\n\nThis will ensure that all requests to that registry (including for tarballs) include an authorization header. This setting may be necessary for use with private registries where metadata and package tarballs are stored on hosts with different hostnames.\n\nWe can probably do the same. Sounds right, if there cannot be situation where the 2nd endpoint should have a different auth token. We can check the auth token of the 2nd endpoint first and if there is not token for it, just use the 1st endpoint's auth token.\nAlso we need to be sure that this tokens are not logged in pnpm-debug.log. Partially fixed. When the tarball path is in shrinkwrap.yaml already and there is no need for a request for the package meta information. It doesn't work\n. Excuse me for the redundant noise. This is fixed now. Added additional tests to confirm all cases. Awesome!\nRegarding disk space. I don't know how it works via Ubuntu on Windows, I assume the same way just the store is in a different location, not where on Windows. However, the 100MB space that you see is used in the project's node_modules is the same 100MB that you see is used by the store. This is how hard links look like. It seems they use space in several places on the disk but indeed they use the same disk space. If you look at the total disk space though, it should count 100MB only once, the 100MB that is in the store. More details about this: Why do hard links seem to take the same space as the originals?. A file is removed only when all hard links pointing to it are removed\nAnd it is impossible that not hard links are created. If hard link cannot be created, pnpm fails. See issue #712. For this I currently don't know the answer. I personally had issues with Ubuntu on Windows even when using npm, so I don't use it. You can create a separate issue for this. Do you know about some popular packages doing this?\nI think it is possible to fix. It will require a breaking change in our node_modules structure.\nCurrently we place the dependent and dependencies in 1 node_modules folder.\nnode_modules\n+- foo\n+- bar\nWe'll have to move the dependent one level up and use a symlink to link either itself or a depency named foo into node_modules\npackage (foo v1.0.0)\nnode_modules\n+- foo  <- ../package\n+- bar\nor\npackage (foo v1.0.0)\nnode_modules\n+- foo  <- ../../../foo/1.1.0/package\n+- bar. With dev deps we don't have issues.\nOn Mon, Apr 24, 2017, 13:33 Donald Pipowitch notifications@github.com\nwrote:\n\nDo you know about some popular packages doing this?\nOnly for devDependencies, if they behave in the same way? TypeScript is\nbuild with itself\nhttps://github.com/Microsoft/TypeScript/blob/master/package.json#L79\nfor example.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/719#issuecomment-296611788, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pmzfcOL2ZTrlzyew3YYBMxBXltxHMks5rzHpsgaJpZM4NFyP5\n.\n\n\n. I am not saying it shouldn't be fixed. It is a weird scenario but it might\nbe used somewhere.\nOn Mon, Apr 24, 2017, 14:31 Donald Pipowitch notifications@github.com\nwrote:\n\nClosed #719 https://github.com/pnpm/pnpm/issues/719.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/719#event-1054570733, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm788YjFuwbSX7lZCUakub0tMyuqtks5rzIf6gaJpZM4NFyP5\n.\n\n\n. I see. But it is a good issue anyway. I'll create a tool for analyzing the dependency tree for existence of such packages that use themselves. We have an issue with CRA and I wonder if this is related (#581). @vjpr maybe it is the same as #1193?. Seems like you have some configuration. Like karma.conf.js, tests, etc. Could you please create a repo to reproduce the issue?. Just pass in the plugins to karma. Works for me this way. https://github.com/smialy/sjs-metadata/pull/1. Yes, you can update to 0.65.7 and single module installation should be fast as it was.\nI did a lot of changes to make peer dependencies resolution correct. My changes have made named installations slower but I fixed it in #726.\nSo named installations should be fast again but we'll have to also make repeat installations fast.. In the current latest version (v0.66.1) repeat installation takes between 1 and 2 seconds. There is no output though, when everything in node_modules is up to date.\nI believe it can be even faster, so keeping this issues open. There are several open issues about performance improvements, so no reason to keep this open.. Please use the pnpm link command to link in modules that are not on npm yet.\nTo avoid data loss, I suggest to rename these folders instead of deleting. So there'll be a warning that says: WARN Renaming <package> to .ignored/<package> that was installed by a different package manager\n\nupdates other dependencies, (why? I wanted to install something, not update stuff)\n\nI agree. I'll look into how this can be fixed. Basically it works like this currently because I wasn't sure peer dependencies resolution would work correctly w/o having information about the whole dependency tree. I don't know, for now I did the quick fix that I described above. But I am keeping this issue open to discuss it more in the future. @minecrawler I fixed this issue:\n\nupdates other dependencies, (why? I wanted to install something, not update stuff)\n\nyou can try the latest pnpm. Released in v0.69.4. Good idea. There is currently a package-lock.json spec at npm and they also plan to have a created-with property.. Published with v0.68.0.. What I don't like about this is that adding a new command would always be a breaking change in this case.\nBut it would be probably fine to add shortcuts to pnpm. Something like pr deploy would mean pnpm run deploy\nThere's also a recipe how to do this w/o changes to pnpm: https://github.com/sindresorhus/awesome-npm#shell-aliases. Just use pnpx. This is good point. I'd also suggest to add some stats. Count of installed/uninstalled packages, time. Published with 1.20.0. Fixed. I'll have to recheck but it might be that we don't need the workaround with shell scripts anymore, so bin files will be just symlinks to js files on non-windows.\nthe custom shell scripts were needed because pluggable packages could not find their peer deps when executed as CLI. But I believe I have fixed the issue in #694, which was released with pnpm@0.64. Unfortunately, we cannot avoid the command shims for now. I added a \"Limitations\" section to the readme. yes, ok. @types/fs-extra should be a regular dependency in the fs-promise package.json, not a dev dependency. See https://github.com/Microsoft/types-publisher/issues/81. Thanks, I'll check next week when I'll be back from vacation\nOn Tue, May 2, 2017, 20:14 Wei Wang notifications@github.com wrote:\n\npnpm version:\n0.66.2\nCode to reproduce the issue:\nhttps://github.com/onlywei/pnpm-eslint-import-order\nPlease see the repo I made above to reproduce this issue. The README.md\nfile in that repo has instructions.\n\nnode -v prints: 6.9.1 (also tried 7.4.0)\nWindows, OS X, or Linux?: OS X\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/739, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm-V9gcIC796q_trH9GCE2Ue57GTzks5r12RogaJpZM4NObX0\n.\n\n\n. Maybe we should create an issue at eslint-plugin-import in that case. @dandv it is a short form of --save but right now dependencies are saved by default (both in pnpm and npm). So pnpm i eslint-import-resolver-node will do the same as pnpm i -S eslint-import-resolver-node. The repo specified in the issue works with pnpm@1.32.0 if react, react-dom and react-scripts are updated to their latest versions. Fix published in v1.15.0. Each disk has a dedicated store now.. We did this one. But we have typescript in dev deps and tsc is a bin of typescript https://github.com/Microsoft/TypeScript/blob/master/bin/tsc. Published with v0.68.0.. You're welcome:). Also related to this one is #841. I don't think this is an issue anymore (as of v2.8.0). Thanks. This is a regression. It was broken when we started using nopt. Easy to fix.. Landed in v0.66.3. @SteveALee, published pnpm help in v1.7.0. @vjpr what do you mean?. Do you maybe know some libs that compose these helps? \nI know commander can do it but connecting huge commander just for the help command doesn't seem to be a good idea\n\nif there's non. I guess we can create such lib. We have to use nopt because it parses the options in a format that is passed to npm's programmatic API. We use npm to get the configs.. @SteveALee, the pnpm list -g works since v1.5.2.\npnpm list was implemented only recently in v1.5. Fix published in v1.10.0. But we already have that, don't we? We use npmrc, the same configs as npm.\nI don't see how pnpm and npm can use the same shrinkwrap/lockfile because of the huge differences in their node_modules structure.\nOne thing is possible, to divide the lockfile into two parts:\n\nthe integrity and resolutions part\nthe layout part.\n\nIn that case we'd be able to use the same file 1, lets call it package-integrity.json. It would look something like:\njson\n{\n  \"foo@1.0.0\": {\n    \"integrity\": \"sha384-Li9vy3DqF8tnTXuiaAJuML3ky+er10rcgNR/VqsVpcw+ThHmYcwiB1pbOxEbzJr7\",\n    \"resolved\": \"https://registry.npmjs.org/z-schema/-/z-schema-2.4.10.tgz\"\n  }\n}. One issue in this format is that npm can have different sets of dependencies for foo@1.0.0 in one project.\npnpm will always have foo@1.0.0 only once in a project, with one set of resolved dependencies (unless foo has peer deps)\nI think this is a great feature of pnpm, as it makes Node run faster. @wmhilton can tell a lot about how slow is Node with resolving requires.. Released with v0.67.0. In case someone would like to work on this. It is now a lot easier because the git resolver code was moved to @pnpm/git-resolver and the git fetcher to @pnpm/git-fetcher. I just did not move all the git-related tests there yet. Changes from https://github.com/pnpm/git-resolver/pull/12 published in pnpm v2.10.0.\n. I have no private repositories, so I cannot verify that it works.\nIf someone verified it with the latest pnpm, lets close this issue. @mvayngrib thanks\nif it costs you money to keep the private repo, create it later.\nI don't know when will I have time to look into it because I work on some big changes currently. Published in v1.16.0. I believe the issues are happening because the package is removed from the store if it does not support the current engine. See code: https://github.com/pnpm/pnpm/blob/v0.69.0-beta.2/src/install/fetch.ts#L103-L109. This is not correct behavior. The package should be installed, optional means only that the failure of lifecycle script should be ignored.. This should not happen again from v0.69.1. Do you think it is valuable information to show for subdeps or we can show it only for top deps?. > and maybe display the chain of dependencies for that module like yarn does.\nthis part done in v1.19.6. Closing this in favor of #1140. @vjpr, I tried to document here the way peer deps are treated by pnpm. >> One of the very great features of pnpm is that in one project, a specific version of a package will always have one set of dependencies.\n\nI think including a figure comparing to npm structure would help.\n\nThis one probably needs a separate doc page. Landed in v0.67.3. What do you mean? Is it the same as #759?. I see. This is a duplicate of #727. Currently only by removing the generated node_modules folder and re-running installation with pnpm.\nI don't think rewriting the npm command would be fair.. I know one tool that allows changing the package manager via an env variable: https://github.com/dylang/npm-check#update-using-ied-or-pnpm\nI think that is the right way to do it. Would angular/ionic make it configurable? I don't know, maybe they already allow yarn? Maybe they would add pnpm in that case... Or maybe we have to become more popular.\nIn worst case someone can fork angular and substitute npm with pnpm, I would add a link to such a fork to the pnpm README.. As of now, pnpm@1.32.0 works with Angular. Does it work with Ionic?. Do you have a sample repo?\nYou can try rm -rf node_modules && pnpm i --shamefully-flatten. Seems like an issue with license-webpack-plugin. It might have a broken resolver. Not really. license-webpack-plugin has to fix its resolver. If it would resolve dependencies correctly (not preserving symlinks) then it would work with pnpm's node_modules structure. Feel free to create an issue there and reference me. I think this issue is similar to the one that happens with CRA https://github.com/pnpm/pnpm/issues/581.. They should use resolve-from to have the same resolution that Node.js uses. pnpm's node_modules structure is Node.js-compatible.. @max-devjs seems like this is an issue with webpack@1 and it works fine with the latest webpack. I just tried Angular2 using @angular/cli and it works like a charm!. Have these been solved by the PRs created by @aecz for #863?. As far as I understand this was fixed on Angular side. \n. This package should help: pnpmr. I created it for using in a monorepo. But it should work also if you just run it from the root of your disk. One note about it though. Because of this issue pnpm currently does not remove stuff from node_modules, just moves it to a .ignored subfolder. So pnpmr won't reduce disk usage. You'll have to manually remove node_modules :disappointed: . There is an issue for this https://github.com/pnpm/pnpm/issues/712\nAs temporary workaround, you can explicitly specify a store-path that is on the current volume. A temporary fix published with v0.69.0-beta.3.  It can be installed via npm i -g pnpm@next\nAlso, if this is only about the cross-device linking error, maybe you don't need the flag? Fixing #712 would fix this issue, right?. package-import-method config was published in pnpm@1.25.0.. npm5 currently symlinks packages specified via file:.. (see https://github.com/npm/npm/pull/15900). We'll have to do probably the same. I think currently the easiest way to solve this is running pnpm link for the file: dependencies. So pnpm will skip those dependencies during installation and just run pnpm link ../whatever afterward.\nThis might be not the fastest solution from performance point of view, but it would introduce less complexity to the system which is currently complex as hell already :-D. @donaldpipowitch first part of your issue is going to be fixed by the PR #807.\nFor the second part about the rewritten spec in package.json I created a separate issue: #809\n. This issue is closed by 0.71.0\n@donaldpipowitch yes. This is a bigger problem. I was thinking about this as well. Maybe the project can be structured in a way that would allow avoiding usage of .npmignore.\n. false fail. I am sorry for the late response, I was at a conference last week.\npnpm supports scoped packages. pnpm can install analytics-node with no issues (I tried).\nMaybe @onlywei has issues because uses some npm-proxy. I know for a fact that sinopia does not support scoped packages. @onlywei, have you tried to install the package using the default npm registry?. Done in v1.9.0.. Hi, it would be awesome if you could help.\nCurrently, I concentrate on issues that have to be done to release pnpm v1. actually we already bundle all the deps with pnpm. So the package can be downloaded directly from the npm registry and unpacked. node_modules will be in lib/node_modules already.. It is not an alpine package but there is now a standalone script that allows installing pnpm w/o npm:\ncurl -L https://unpkg.com/@pnpm/self-installer | node. that would be great to have. Caused by ts-node 3.0.5. Caused by ts-node 3.0.5. This already works\nWe have a store.yaml file in the root of the store with info about all dependent projects: https://github.com/pnpm/sample-project/blob/master/.pnpm-store/1/store.yaml\nand we remove packages if they are not used anywhere in the system. This piece of code does it: https://github.com/pnpm/pnpm/blob/master/src/api/removeOrphanPkgs.ts#L33-L39. Did you delete the global store? In that case, you just lose the references to the projects that use the store. Packages will remain in the projects and after you run pnpm install in one of those projects, packages will relink from the global store. no, currently there is only pnpm uninstall ...pkgs. So you have to specify each package that you want to uninstall. @inDream, in v1.8.0 there's a new command now: pnpm store prune. So if you remove a project's node_modules manually (rm -rf node_modules), you can run pnpm store prune and all the unreferenced packages will be removed from the store.. @iamstarkov and @vjpr please check this. I think it is worse it but I am not sure, I need more people to consider this.. This also requires changing the global store structure so that packages can require themselves. So foo should be in .../node_modules/foo. Merged with #793. Why don't they use the value of require.main.filename to find the config? https://nodejs.org/api/modules.html#modules_accessing_the_main_module\nWhy should a package care where it is located?. you mean a flat that will say: \"keep leafs under node_modules?\". I'm fine with such flag if it will be false by default. yes, that is what I've meant. Unlikely will people add properties to their package.json because of pnpm. And I am not yet convinced that this is good practice to rely on location.\n. This location of the global package is weird '/usr/pnpm-global/node_modules/truffle/cli.js'\nWhat does npm c get prefix return on you environment?. Could you please retry with the latest pnpm?. If your store is on a different partition then the packages are copied. This is a temporary fix for #712\nIf the store is on the same partition then what you see are hard links. Hard links look like different files but they are pointing to the same files that are in the central store.\nSee explanation in FAQ: https://github.com/pnpm/pnpm#why-does-my-node_modules-folder-use-disk-space-if-packages-are-stored-in-a-global-store\nOr read the explanation I did in Gitter for a similar question: https://gitter.im/pnpm/pnpm?at=593fa6fd6549436c7d41f4c9. > if I have 100 hard-links all pointing to the same file, the actual disk usage is just 1 MB\nif you have a 200MB disk when you check the total disk usage, you'll see you have 199MB free disk space. But if you check separately all 100 folders, each will show 1MB used.\nIf you edit the file in one place, it will be edited in all 100 places. Do you think the system copy/pastes your change? Hard links can be confusing sometimes but they do use the same space on disk. > Would additional file storage be possible in such cases? If not, since the OS thinks the disk is full, then space savings is not really a benefit of pnpm, is it?\nyes, the system is smart to understand that. It actually shows the correct disk space statistics when looking at the total disc stats. That might be different. When you remove one hard link, all others continue to be there. Let's say you have central store and two projects A and B. You used pnpm to install deps in project A. You have same files in central store and project A. Now if you remove the central store files will stay in project A. If after that you run pnpm install on project B, you'll get a new store that shares files with project B. But the files will be duplicated in project A.\nSo removing should be fine unless you remove the central store. This seems like an issue with the way browserify resolves dependencies. loose-envify should be resolved from the realpath of fbjs, which is D:\\Dev\\sample-pnpm\\node_modules\\.registry.npmjs.org\\fbjs\\0.8.12\\fbjs\\. This is how Node resolves dependencies and this is how browserify/webpack should do it as well.\nI could really use some help in these issues, there are a couple open for webpack as well.. Hey @kjholla, I have found the issue and created a PR at module-deps. As a temporary solution, you can use an installation hook to install module-deps from my fork.\nYou can creat pnpmfile.js in the root of your project with this content:\njs\n'use strict'\nmodule.exports = {\n  hooks: {\n    readPackage (pkg) {\n      if (pkg.dependencies && pkg.dependencies['module-deps']) {\n        pkg.dependencies['module-deps'] = 'zkochan/module-deps'\n      }\n      return pkg\n    }\n  }\n}\nOnce the fix gets merged and published, there will be no need in the hook. You'll need pnpm version 1.12.0 or newer for hooks to work. I used Node.js 6. Your version is also fine if it works.. @kiranjholla browserify@16 should now work with pnpm with no issues :tada:. I confirm that the issue described here is fixed with browserify@16 but grunt-browserify should update browserify in its package.json.. while the fix is not merged, you can use grunt-browserify from my fork:\npnpm i zkochan/grunt-browserify. They merged my PR. This will be fixed with the next release of grunt-browserify\n. I cannot reproduce it for some reason. Is it the only dependency in the package or does it happen with some specific set of dependencies?. This is happening because argumentless forced installation fails... I will publish a fix shortly. This is the same issue as #870, fixed in pnpm@1.14.7 via https://github.com/pnpm/supi/commit/bc800a86920f743ea2d7dd70dbe3814ab2f6e873. pnpm list implemented in v1.5.1.\nFor the why command I suggest a separate issue. @TigersWay I created an issue for this #862. @TigersWay published fix with v1.10.1. /Users/Vaughan/nvm/versions/node/v7.10.0/pnpm-global/node_modules/webpackerator - this is a folder?\nyou installed webpackerator globally and then linked?\n. I think this is the same issue as #843 and it was fixed in v1.5.3. if it wasn't fixed, then feel free to reopen it. If you use mocha in your typescript project, your project has to depend on @types/mocha as well I believe. And in that case it will be in node_modules/@types/mocha. hm, I just tried CRA with the latest pnpm and it works! I don't know if something in pnpm was fixed or in CRA but like a month ago it did not work. @jbergstroem what version of webpack? It seems like with the latest webpack (2.6.1) react apps and angular apps work fine. Although they did not work a week or so ago. @jbergstroem does the workaround from this issue solve your problem? https://github.com/pnpm/pnpm/issues/720. @jbergstroem you have to register it via passing it to plugins. And then you can just pass the name to frameworks\njs\nframeworks: ['tap'],\nplugins: [require('karma-tap')],. so it worked, right?. It seems to work fine with latest webpack. So the react stack and Angular2 work fine. (they did not a week or so ago).\nSo the eslint #739 issue and the browserify one #795 are next in priority.. I added jest to the list. As far as I remember jest does not resolve modules to their real path, which is not how node resolves dependencies. That is why it doesn't currently work with pnpm. An update on this. I did a PR to resolve to add a preserveSymlinks: false option to it. We can now create PRs to any tools that use resolve and pass the preserveSymlinks: false option to make it work with pnpm. Also, this option will be false by default in resolve@2.. A new feature was added to pnpm in v1.12 that allows us to hook into the installation process and substitute some of the packages. This is very handy if framework/tools are unwilling to fix their project for pnpm or the PRs are on hold for a long time period.\nI wrote an article about it: Why package managers need hook systems. I just created an issue at Node.js to ask for a public API of the module resolution algorithm.\nhttps://github.com/nodejs/node/issues/16389\n. Packages should never require dependencies that are not declared in package.json. pnpm will not implement hacks to support buggy behavior. See pnpm\u2019s strictness helps to avoid silly bugs.\n\nAlso, latest comment/question, why pnpm doesn't use hard links into .registry.npmjs.org folder?\n\npnpm uses hardlinks to import packages from the global store to the project's node_modules. Inside the project's node_modules, it uses symlinks. Otherwise, it would not work with Node's resolution algorithm. See Symlinked node_modules structure. @etamponi has implemented a new flag called --shamefully-flatten which has been released with pnpm@1.34.0. This flag can be used as a temporary fix to make pnpm work with toolings that rely on flat node_modules. > Looking more deeply on that, I can consider that it definitely feels like some problem with Pnpm.\nNo, it is a problem in eslint. Here's the related issue. Seems like @ishitatsuyuki created a PR to resolve it!\nW/o the fix in eslint, there are 2 workarounds:\n\nUse shamefully-flatten=true\nInstall as direct dependencies the packages that eslint-plugin-import cannot find. Angular 8 supports pnpm\nhttps://twitter.com/mgechev/status/1098449036351221761. verify-store-integrity config published with v1.8.0. Not turned on by default for CI servers yet. pnpm is not faster even though actions with store are faster. Peers resolution is slowing things down, maybe the shrinkwrap file format will have to be changed to allow skipping peers resolution. This makes sense only for downloads of metadata because they have the dependencies that are downloaded next. Tried on the benchmarks project but it doesn't seem to make things faster/slower. It is nice to have though, I believe it will have impact on really big projects or slow connections. Published with v1.8.0. Was the esformatter installed with pnpm pre 0.70?. Fixed in v0.72.0. Because one package can have different sets of dependencies on one machine.\n\nSo in project A foo@1.0.0 can have a dependency bar@1.0.0 and in project B foo@1.0.0 can have the same dependency resolved to bar@1.1.0. I don't know about yarn but npm/pnpm start is the same.\nIt is actually in the readme\n\nUse pnpm in place of npm. It overrides pnpm i, pnpm install and some other command, the rest will pass through to npm.. Although this is not how npm unlink works, it seems logical to me. So I agree.\n\nBut we'll probably have to print some warnings or notice to inform people that it works not the way it does with npm.. but this would be a breaking change and I would wait a while with a new major version, so, for now, we can use a new command. Maybe pnpm dislink (which appears to be a valid word and synonym of unlink https://en.wiktionary.org/wiki/dislink). pnpm dislink published with v1.6.0.\nWhen called w/o arguments, all external links are removed. If the linked package is in package.json, it is reinstalled after the link is removed. It is a complex problem. I would also like a separate config but that would\nmean additional fs operations. We should read npm configs in any case\nbecause pnpm tends to be a drop-in replacement that works with existing\nconfigs.\nOn Fri, Mar 30, 2018, 13:03 Wout Mertens notifications@github.com wrote:\n\nI wonder though if it is ok for pnpm-specific options to live in .npmrc\n(it's not called .pnpmprc after all). Other projects simply use\npackage.json.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/820#issuecomment-377493487, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm0BpjW2zdksmhZChHwmXb5zlnfNaks5tjgLZgaJpZM4OBiEy\n.\n. @vjpr is this similar to the one you had?. ok, if this causes so many issues then I'll make the flag turned off by default. And v1 of pnpm will not symlink leaf dependencies from the global store by default. not really, that optimization was introduced only in version 0.70.\nThe point of pnpm is global store + sane node_modules structure + speed. Check my blog. Why should we use pnpm? That one has a good explanation.\nThere's a link to it in the readme\n\nOn Thu, Jun 22, 2017, 18:01 Vaughan Rouesnel notifications@github.com\nwrote:\n\n@stereokai https://github.com/stereokai Haha, its really hard to\ndescribe in few words. I'll see if I can find the docs explaining it.\n@zkochan https://github.com/zkochan Do we have some docs on how pnpm\nworks - it seems the docs dir is a bit out of date. The peer deps is nice\nand detailed but, we need something similar for normal resolution.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/821#issuecomment-310406881, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pmzJsRnc5ltnDlj6_6xAUjwsKchj9ks5sGoGsgaJpZM4OCOfA\n.\n-- \n\nZoltan\n. not published yet. Published in v0.74.3. @stereokai I also added a documentation page about the node_modules layout that pnpm creates: https://github.com/pnpm/pnpm/blob/master/docs/symlinked-node-modules-structure.md. If you remove the node_modules, nothing bad will happen but the packages will stay in the global store anyway.\nThere are two shrinkwrap.yaml files. One in the root of the project, one in node_modules/.shrinkwrap.yaml. When you remove, the outer shrinkwrap is pruned, and it is compared with the inner shrinkwrap file. Packages that are in the inner but are not in the outer shrinkwrap are removed. Here's the code: https://github.com/pnpm/pnpm/blob/master/src/api/removeOrphanPkgs.ts. This happens not only during uninstall but also after installations and updates. Many packages can become unused. It has a store.json with info which packages in the store are used by which projects. Unused packages are removed from the store. yes. Some of these we can add. The ones that are implemented in npm. The more complex ones I would rather implement as separate packages. Maybe it can be added to pnpmr.\nI also have this link-local-packages that can be used.\npnpm's codebase is pretty complex, so I'd rather try to hypermodularize it first. Maybe convert it to a monorepo?! I am not sure yet.\nBut I do understand the importance of these features and I'd love them as well, so even if in scope of a separate package, it can be in our org and maintained by us. That's great, I just created the awesome-pnpm, so your package can be added there. Instead of pnpm unlink I suggest for now a new command called pnpm dislink.\nAlso, if called w/o paramaters, it will unlink the symlinked packages and install them, as you suggested with  pnpm unlink-all. Maybe in v2 we'll make unlink behave this way. pnpm dislink published with v1.6.0.\nWhen called w/o arguments, all external links are removed. If the linked package is in package.json, it is reinstalled after the link is removed\nLet's keep this issue open for now. I think maybe we can implement something like pnpm link-all. I am not 100% sure what it should do yet. Maybe search for packages up in the filesystem. @paulpflug, recently a new feature was added to pnpm@next - concurrent installs (#969). Maybe we can add linking to it. By default or via some flag. Something like pnpm recursive --link install. I think we should just ignore the global packages during linking.\npnpm recursive link should be a good name for the command.. :ship: v1.32.0. Here are the linking tests https://github.com/pnpm/pnpm/blob/master/test/link.ts. Use Promise<void>.\nThere are also CLI tests here https://github.com/pnpm/pnpm/blob/master/test/cli.ts. I'll finish this and merge. Published in v0.74.3. Peer dependencies are not installed because\n\nThe behavior in npms 1 & 2 was frequently confusing and could easily put you into dependency hell, a situation that npm is designed to avoid as much as possible.\nsrc: https://docs.npmjs.com/files/package.json#peerdependencies\n\nPeer dependencies are intended to be used by pluggable packages and are resolved from higher in the dependency tree. They are not supposed to be resolved from down the dependency tree. If they are resolved that way accidentally because of flattened node_modules we shouldn't try to emulate other package manager's bad design.\nP.S. this article of mine - pnpm's strictness helps to avoid silly bugs, even started a discussion in a npm chat about making --global-style the default node_modules layout. The global-style layout reduces issues like that, issues when flat node_modules allow accessing not referenced dependencies. I think the way people do it is they have their peerDependencies as devDependencies as well. That is kinda what you are asking for (installing it only on top level). Including them as devDependencies is not good?\n\nWebpack doesn't resolve packages exactly as node.\n\nAre you sure? We'll have to file an issue at webpack in that case. We had issues with CRA and with latest webpack they are gone, so I assumed they have fixed it. I know they have an option to turn off resolve symlink, but it is on by default. A package symlink is resolved to its real location and pnpm does create a node_modules folder one directory up the package's real location. Have you tried with webpack@2.6?\n\nPluggable packages don't exist (at least I have never seen one).\n\nMaybe I named it incorrectly but babel, eslint use peer dependencies to work with their plugins. And they work with pnpm. (Except one issue with eslint #739). By the way, we have this issue at webpack https://github.com/webpack/webpack/issues/5087. @vjpr lets create a pnpm-manifesto repo with listings of all the things pnpm is meant to be\nAnd of course I am always happy to extend the FAQ section\n. pnpm's philosophy is simple. A package is accessible only when it is a dependency. So B will only be accessible from C, if it will be some kind of a dependency of B.\npeerDependency is not the same as optionalDependency. Peer dependencies are not even looked into during the resolving and downloading stages. Once all dependencies (prod, dev, optional) are resolved, pnpm analyzes the dependency tree and tries to find and assign peer dependencies.. no, but if vue uses the resolve package, the hook described here can be used.\n. As a temporary fix, you can now use the --shamefully-flatten flag to create a flat node_modules with pnpm. Added in pnpm@1.34.0.\nFixes the issues with vue. @vjpr, @etamponi, I suggest moving the discussion here.\nSo the way I was thinking about this. There would be a separate application (a pnpm service)\nthat would run in the background. pnpm would then check if there's this service running\nand if it's there, then the requests for getting the packages would be done by the service.\nAlso, all the store-manipulation things would be done by the service.\nOne service would be able to control one store.. I there some cross-platform library that can start a Node process in the background and keep it running?. This one seems good: https://github.com/IonicaBizau/diable. haha, relax. I am from Eastern Europe, not America;-) That wasn't aggressive at all, you can express yourself the way you like.\nRegarding the solution, I am totally fine having the dedicated command. Easier is always better in my opinion. Lets' do the background flag in a future version if this will become successful.. Clearly from DX perspective, running it automatically and in the background is much preferred than running in the foreground. Lets' have a separate issue created for the background option, so that we can concentrate on one issue at a time. Issue for backgroud service: #960\nIs communicating via IPC faster than via HTTP? We can start with HTTP but if IPC is faster, we'll have to make it configurable and IPC as default.. I think the interface should be a bit different. If a server runs for a specific store, then it is locked by it. So pnpm can check the lock and the lock can contain the server's port. If it finds the lock with the port number, then it can communicate to the server.. I might be ready with a PoC this weekend. This is still in progress. Not as easy as I thought, but doable.\nFor detecting whether a service runs for a store I'll use a server.json file. If a service runs for the store, the file will exist, with the connection info of the server: hostname/port. There is no reason to move that part to storeController. postInstall is and will be running on the client, not in the store. The client.\nOn Fri, Dec 15, 2017, 02:07 Emanuele Tamponi notifications@github.com\nwrote:\n\nOk cool :) just to know, the links from the store to the project\nnode_modules will be made by the store controller or by the client?\n\u2014\nYou are receiving this because you were assigned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-351874285, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm_etcThAyM4rCZlJaI-U3-DC0OH-ks5tAbgxgaJpZM4OJEUt\n.\n-- \n\nZoltan\n. I published an experimental version with 1.24.0-0. The command is called pnpm server. (A better name might be pnpm store server, as we currently scope the store commands under pnpm store.)\nSo you just need to run pnpm server and then while it runs, the pnpm commands will access the store via this service.. yes, it supports concurrent installs.. It is buggy and in beta, so I might publish a few fixes till Monday. Just install the next version of pnpm (pnpm i -g pnpm@next). I have issues locally, seems like messages are broken when installing on\nbig projects. I don't know how that's possible\nOn Sun, Dec 17, 2017, 13:39 Emanuele Tamponi notifications@github.com\nwrote:\n\nNevermind, I've just started the server as the same user that then uses\nthe client :) I'll play with it for a while!\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-352249568, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm472Z6ZULzNFVsLCFlhYcjVIOFajks5tBP1hgaJpZM4OJEUt\n.\n-- \n\nZoltan\n. I used json-socket for communication via IPC and the sent messages are\nsometimes broken json\nOn Sun, Dec 17, 2017, 14:19 Zoltan Kochan zoltankochan@gmail.com wrote:\n\nI have issues locally, seems like messages are broken when installing on\nbig projects. I don't know how that's possible\nOn Sun, Dec 17, 2017, 13:39 Emanuele Tamponi notifications@github.com\nwrote:\n\nNevermind, I've just started the server as the same user that then uses\nthe client :) I'll play with it for a while!\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-352249568, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm472Z6ZULzNFVsLCFlhYcjVIOFajks5tBP1hgaJpZM4OJEUt\n.\n--\n\nZoltan\n-- \n\nZoltan\n. It fails when installing dependencies of supi and pnpm. I'd like to keep IPC because it is faster than http (IPC doesn't go through the network card). I will try to add some retry logic. I don't see any message limit or timeout in json-socket. Retrying seems to help. The retry logic should probably go to the json-socket lib, or a layer between json-socket and @pnpm/server. Also, I wonder if protobuf is faster than JSON.stringify => string encoder. @etamponi, do the rewrite if you want. I will switch to some other issues in the meanwhile.\nThe code that works with the json-socket is in the @pnpm/server repo.\nI hope you are right and it avoids the network card because in the node-ipc repo it says that only the Unix/Windows Socket avoids the network card. if you want a high-level framework, better use fastify instead of express, as fastify is faster. I think you only need to change @pnpm/server. I did all the necessary changes in other repos.\nI did not do the error handling, so I guess try/catch and sending some message with the error info.\nI was thinking about changing the packageResponse format as it currently contains 3 promises and other fields. We have to respond with those other fields, so maybe they have to be namespaced into body.\nhttps://github.com/pnpm/package-requester/blob/master/src/packageRequester.ts#L43-L62. @pgonzal, @nickpape-msft I know this is a long thread but you might be interested in this feature. This will make pnpm really fast for monorepos, so rush with pnpm will be a lot more performant.. ok, I'll merge and publish it today. Yes! And the rewrite allowed to implement even installation in several projects simultaneously by a single process: https://github.com/pnpm/pnpm/pull/969. @etamponi, your improvements were published in 1.24.0-1 (dist-tag alpha). The issue is in the vscode-rigrep package. Its postinstall script uses devDepdendencies. Obviously the dev deps are not installed.\nIt fails with npm as well, when installing only vscode-ripgrep https://gist.github.com/zkochan/9adfc3529a480d16fe39f66763ef820c. @corbinu. I created an issue at vscode-ripgrep. The author agreed that it has to be fixed in vscode-ripgrep. Did you try the latest one? It has a summary that lists all the added/removed top deps\n\nit also marks the deprecated top deps\n\nReporting is hard, I am still trying to normalize the different log types and formats but once they are not experimental, you'll be able to use even custom reporters because pnpm uses bole and ndjson. If possible, I'd implement it as an installation hook.. What about the bins? I just tried the following with Yarn: yarn add eslint3@npm:eslint@3 eslint4@npm:eslint@4 and it created one bin file only - eslint. This seems not right, I'd expect two: eslint3 and eslint4. Published in v1.23.0. Landed in v1.22.0. From v1.24 pnpm has a command for concurrently installing dependencies in many projects (pnpm recursive install).\nWe can extend that command with the ability to link packages. I don't know whether we should use Yarn's \"workspaces\" field for that. We search for folders that have package.json files anyway. So currently pnpm finds all the workspaces in subfolders w/o the \"workspaces\" field.\n. I just published pnpm@1.32.0 which has a new command called pnpm recursive link. This new command links packages in the monorepo and concurrently installs rest of the dependencies.\n. So we have this. You can track the issues related to multi-package repo functionality via the multi-package repo label.. I currently work on pnpm list. If you want this one fixed faster (seems easy), you can try to fix it in supi (the installation engine was moved there recently, part of an effort to divide pnpm into smaller, simpler parts).\nhttps://github.com/pnpm/supi/blob/master/src/api/link.ts\nHm, probably the linking logic should be moved into a separate package as well.. I wonder, what creates the empty folder? I think the empty folder should not be created. In that case, this line will fail https://github.com/pnpm/supi/blob/master/src/api/link.ts#L44. I figured out what causes this... locking. Projects are locked during installation, and when there is no project folder, the lock creates one. Landed in v1.5.3. pnpm just skips the bundled dependencies, so it does not install packages that are listed in bundledDependencies. I am not entirely sure how npm@3 handles this. It skips the top dependencies but installs the dependencies of bundled dependencies?. oh, so the problem is with a package published by pnpm.\nCurrently pnpm does not support publishing of packages that have bundled dependencies at all (see \"Limitations\" section in README). Even though we don't print any warnings about it. We should.\nIt should work though with packages that have bundled deps but are published via npm. A weird situation I guess...\nI think if we want bundled deps in pnpm, we should do it the pnpm way, which is, we need them in a symlinked node_modules. Unfortunately, that means the pnpm bundledDependencies would be incompatible with npm and Yarn. We'd have to use a new property name and npm/Yarn would then just fallback to installing the \"pnpm bundeledDependencies\" as regular dependencies. In any case, as a first step, pnpm should fail if someone wants to publish a package with bundedDependencies. We support peerDependencies. If you have some specific issue, please write more details.. There is an issue with an eslint package described here: https://github.com/pnpm/pnpm/issues/739\nBut the error is in the package, not in pnpm. Also related: https://github.com/pnpm/pnpm/issues/827.\npnpm does correctly resolve peer dependencies. pnpm is never silent when a peer dep is correctly declared in package.json. We have a test that checks whether peer warnings are reported:\nhttps://github.com/pnpm/supi/blob/master/test/install/peerDependencies.ts#L54-L67\nUnlikely caused by the scope.\nAs far as I remember, the issue with #739 is not because a peer is not resolved but because eslint-plugin-import does not resolve dependencies the way node does.. I just checked this on @angular/core which has two peer dependencies.\nI did pnpm i @angular/core. And I did get the warnings:\n```\nCreating dependency tree\nWARN registry.npmjs.org/@angular/core/4.3.0 requires a peer of rxjs@^5.0.1 but none was installed.\nWARN registry.npmjs.org/@angular/core/4.3.0 requires a peer of zone.js@^0.8.4 but none was installed.\nAdding 2 packages to node_modules\nResolving: total 2, reused 1, downloaded 1, done\n\n@angular/core 4.3.0\n```. > Only thing to note that might affect this is that our package also has the peerDependencies in it's dependency list\n\nyou mean they are prod dependencies (dependencies) not `devDependencies?\n\neven though they aren't in the direct dependency tree\n\nwhat do you mean?. @jlsjonas check if you still have issues with latest pnpm.\nif you have issues with angular, maybe try to run pnpm install --shamefully-flatten. If anyone will be able to repro this with pnpm v2.17.7 or newer, please create a new issue. Happy New Year!\nSure, take it.\nOn Sun, Dec 31, 2017, 23:47 Rohit Katyal notifications@github.com wrote:\n\ncan i pick this up @zkochan https://github.com/zkochan\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/847#issuecomment-354625102, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm4l5fmOx03sW8-Reb-d0SXT3goVcks5tGADvgaJpZM4OZrbT\n.\n. Let's make the error messages more descriptive then. You should run pnpm install --force to rewrite the node_modules. pnpm install something --force won't work (although we can change that). That is useful information, thanks. Before version 1.5.3 the lock would have been created in /var/www/.lock.lock. In version 1.5.3 it was changed to create the lock in the /var/ directory. Seems like on your system pnpm does not have permission to create a folder in the directory.\n\nWhat should be the fix? We can either revert and think about a different solution to #843. Or we can use a central location for all the lockfiles. I think that is how npm does it. I like the second solution more.. Published fix in v1.6.1. Published with v1.10.1. you can remove /pnpm-global/package.json and pnpm-global/node_modules/\nmodules from /pnpm-global/1 are used by pnpm@1. Closing in favor of #1131. Published in v1.9.0. Documentation of npm says that prepack should be executed when installing git dependencies. Not a word about prepare, postpack and second execution of install. It shouldn't be too hard to do for a first-time contributor. I will probably take it not earlier than 5th of May. @huochunpeng thanks. Our usage of TypeScript is not very complex. We use really simple code. Just functions, no classes. No nesting. So you should be fine if you know just how to declare a type or interface in TypeScript. On the other hand, it gives you autocompletion and other nice things (especially if you use VS Code).\nThis particular issue seems a bit more complex now. I didn't know that dev dependencies should be installed for git-hosted dependencies. If so, then we'll also need to save those dev deps to shrinkwrap.yaml\n. Recently the shrinkwrap.yaml format has been updated. Now package that should be built have a requiresBuild: true property. For instance,\nhttps://github.com/pnpm/pnpm/blob/fa98b4eae401cc0fca43c7e2e524b3d9bc4fcdc6/shrinkwrap.yaml#L907-L917\nbut now we also have to know if the package's prepare script has to be executed. Currently, there is no way to tell whether a package is a git-hosted package (from info in the shrinkwrap.yaml).\nI suggest adding a new boolean called prepare. So for a git dep the shrinkwrap.yaml entry would look like this:\nyaml\n  github.com/pnpm/supi/6f64f8d2248e84a6c642eeb9b5546006e040898e:\n    dependencies:\n      '@pnpm/check-package': 1.0.0\n      '@pnpm/fs-locker': 1.0.1\n      '@pnpm/headless': 0.2.6\n      '@pnpm/lifecycle': 2.1.0\n    engines:\n      node: '>=4'\n    name: supi\n    peerDependencies:\n      '@pnpm/logger': ^1.0.0\n    prepare: true\n    requiresBuild: true\n    resolution:\n      tarball: 'https://codeload.github.com/pnpm/supi/tar.gz/6f64f8d2248e84a6c642eeb9b5546006e040898e'\n    version: 0.16.8. Not always. registry-hosted packages also have the whole URL if they are\nfrom the non-default registry.\nOn Thu, Apr 26, 2018 at 1:13 AM huochunpeng notifications@github.com\nwrote:\n\nCurrently, there is no way to tell whether a package is a git-hosted\npackage (from info in the shrinkwrap.yaml).\n@zkochan https://github.com/zkochan the version are in url format, not\nsemver for any git-hosted package, isn't it?\ndevDependencies:\n  aurelia-cli: github.com/huochunpeng/cli/10edaef0ca222ab61efcaf141b28c8f8df268967\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/855#issuecomment-384450675, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm5KtQkRA9iyDPABXg3Wt_3XDDr3iks5tsPT0gaJpZM4Ogepx\n.\n. > Also, it might be useful to be able to know this in the pnpmfile#addPackage hook. If you know its a git dep, you can tweak the install scripts if necessary. This is probably already possible right?\n\nnot possible currently, here's an issue to allow it: https://github.com/pnpm/supi/issues/55\n\nWhy not add an entry explicitly stating its from git?\n\nI suppose it will be more efficient to have the prepare: true entry. When doing pnpm rebuild for instance, there would be no need to read the package.json files of the git dependencies. A simple filter by x.prepare && x.requiresBuild would return everything that should be built.\n. @huochunpeng running \"prepare\" in git-hosted deps landed in pnpm@1.43.0. That is correct. devDependencies are not installed. This is how prepare of subdeps work with Yarn as well. Just install the dependencies that are needed for building the package as dev dependencies of the main app. Seems like yarn uses a temp folder or the cache folder, where it installs the package with its dev deps, builds it and then puts the result to the target node_modules. I am personally lazy to implement such complicated logic. Maybe for these packages we could just convert the prod deps to dev deps? As a temporary solution, you can do it with a pnpmfile.js (a readPackage hook). oh, indeed, thanks. I'll fix it soon. Fix published in v1.8.1. I don't know, seems like resolve does resolve route-recognizer fine. I tried this way: \nzkochan@zkochan:~/src/pnpm-test/node_modules/.registry.npmjs.org/ember-cli-pretender/1.0.1/node_modules/pretender$ node -e \"console.log(require('resolve').sync('route-recognizer'))\"\n/home/zkochan/src/pnpm-test/node_modules/.registry.npmjs.org/pretender/1.5.1/node_modules/route-recognizer/dist/route-recognizer.js\nhow did you modify resolve?. I was wrong, neither resolve nor resolve-from resolve the package correctly. Maybe I'll work on pull requests to those packages.\nSo this does not resolve route-recognizer because pretender is not resolved to real path first\nnode -e \"require('resolve').sync('route-recognizer', {basedir: '/home/zkochan/src/pnpm-test/node_modules/.registry.npmjs.org/ember-cli-pretender/1.0.1/node_modules/pretender'})\". I created to PRs that should fix the issues with ember:\nhttps://github.com/stefanpenner/hash-for-dep/pull/37 - merged, released in v1.2.0\nhttps://github.com/rwjblue/ember-cli-pretender/pull/60. Unfortunately, it is very hard to get the PRs merged/published. Some maintainers are unresponsive...\nSo I added installation hooks to pnpm. They are available from version 1.12. Here's an article about this new feature: Why package managers need hook systems\nTo fix issues with resolve for ember, this pnpmfile.js can be created in the root of the project:\n```js\n'use strict'\nmodule.exports = {\n  hooks: {\n    readPackage\n  }\n}\nfunction readPackage (pkg) {\n  if (!pkg.dependencies) return pkg\nif (pkg.dependencies.resolve) {\n    pkg.dependencies.resolve = 'zkochan/node-resolve'\n  }\n  if (pkg.dependencies['resolve-from']) {\n    pkg.dependencies['resolve-from'] = 'zkochan/resolve-from'\n  }\n  return pkg\n}\n```\nThis solves most issues but I see now some new errors with babel. We'll have to look into that. Seems like it has some custom resolver as well... :cry: . What is this ember-cli-pretender? I just tried the latest ember, it doesn't contain ember-cli-pretender and seem to work with pnpm. Until the issues are fixed, you can create a .npmrc file in the root of your project with this content:\nshamefully-flatten = true\nOr run installation with the --shamefully-flatten flag: pnpm install --shamefully-flatten. We have an issue about this: https://github.com/pnpm/pnpm/issues/739\nAlso at eslint-plugin-import. npm reads .npmrc from the project's directory only,\npnpm uses npm for getting the configs. Unlikely will we support --no-save flag. Yarn does not support it and my guess is that npm will probably not support it in the future https://twitter.com/maybekatz/status/889543274892894208\n. You misunderstood me. \nSee configuration section of our readme: https://github.com/pnpm/pnpm#configuring\n\npnpm uses npm's programmatic API to read configs. Hence, you should set configs for pnpm the same way you would for npm.\nFurthermore, pnpm uses the same configs that npm uses for doing installations. If you have a private registry and npm is configured to work with it, pnpm should be able to authorize requests as well, with no additional configuration.\n\nWhat I said was, npm does not read config files up from the parent directories. If it would, pnpm would as well. As you can see here, we use npm to read all the configs. FYI, this is how npm behaves as well. Although might be good to have strict validation. I mean, if there is an unknown flag, pnpm could fail with an error. Though this would be a breaking change, so for now, we could maybe just print warnings.\nParsing of flags is done by nopt here: https://github.com/pnpm/pnpm/blob/master/src/main.ts#L145\nPrinting the warning should be done via @pnpm/logger. logger.warn('....'). You can find examples of warnings in code\n@etamponi this is the issue I mentioned today when you mistyped --side-effects-cache.. @andreypopp could you check this out, please? I think you wanted some of these features (or something similar) in pnpm. First thoughts about this.\n\nIteration 1 I would skip\nCallback is too general. I would rather call it \"installation hooks\" and the file can be called maybe pnpmfile.js or some other more general name.\n\n\nSince this creates an alternate version of e.g. @scoped/qux@1.2.5 pnpm could save this as @scoped/qux@1.2.5-pnpm-patch- and hardlink to that.\n\n\n\nthis would add too much complexity to the system. All we want to do currently is patching the package.json. We can leave the files in the global store as they are and save the patches in separate files. (It is important not to modify any files of the package). Then we will read package.json + package-patch.json and merge them. Or maybe we will just always run the hook. I don't know yet\n\nWe don't know yet what it will be but we should start with something really simple but of course with extensibility in mind. For reference.\n\nA hook was added to override package.json's of dependencies (read more)\nNext thing I plan to add is aliases.. Aliases added as well in v1.23.0.\nreadPackage + aliases is now really powerful. If you want new hooks, please create new issues.. Published with v1.10.1. I'll check tonight but I have a feeling that this is caused by the same issue as #857. I contributed a fix to resolve which was published yesterday. It is turned off by default for now (see https://github.com/substack/node-resolve/pull/131) but will be turned on in next major version. That should solve a lot of issues that pnpm has in the ecosystem. this issue is happening because @angular/cli tries to resolve source-map-support even though source-map-support is not in its dependencies.\nIt works with npm because it flattens dependencies and source-map-support is hoisted from karma-source-map-support.\nWe'll have to make a small PR to @angular/cli in order to fix this.. Thanks for making the PR!\nThere is no such option in pnpm currently but I've been working on a tool that should do that: node-modules-check. I'll have to check if it works and publish it. As you wish. I created a separate label for grouping these issues.. @aecz do you have twitter? I want to mention you in an article (to say thank you). Otherwise I'll just drop a link to your github page. I would also\n\nthrow error on pnpm add (with noarg)\nrun pnpm install on pnpm (that would make it possible to use it like the yarn cli). ok, I agree about argumentless pnpm. Better to add a shortcut, like pi.\n\n\nwhy do you want also an error? don't you want either an error, or an alias ?\n\nSeems logical to throw an error when someone runs pnpm add. Yarn throws an error on yarn add.. This is an interesting case. semver calculator says that * does not match any of the available versions of inquirer-path.\n\nnpm@5.3.0 installs inquirer-path and Yarn suggests selecting the needed version.\n? Please choose a version from this list: \n  1.0.0-beta3 \n\u276f 1.0.0-beta2 \n  1.0.0-alpha5 \n  1.0.0-alpha4 \n  1.0.0-alpha3 \n  1.0.0-alpha2 \n  1.0.0-alpha1\nI guess npm treats * as a latest tag and that is the easiest solution, so lets' do the same in pnpm (and maybe print a warning?). Fix published in v1.10.0. This is most likely happening during creating the hard links from the store to the project node_modules. We use mkdirp, see https://github.com/pnpm/supi/blob/master/src/fs/linkIndexedDir.ts#L26\nIs it happening consistently or from time to time?. I tried with this project but could not reproduce: https://github.com/zkochan/pnpm-issue-866\nDo you maybe have some configs that I didn't add?. Although we use gracefulify to override fs with graceful-fs everywhere, we can pass in graceful-fs to mkdirp via opts.fs. From mdkirp docs:\n\nYou can optionally pass in an alternate fs implementation by passing in opts.fs. Your implementation should have opts.fs.mkdir(path, mode, cb) and opts.fs.stat(path, cb).. OK, I'll do that\n\nOn Fri, Dec 8, 2017, 01:09 Andrei Neculau notifications@github.com wrote:\n\nIf it's not too much to ask, instead of me forking pnpm, etc, etc trying\nit out - since it looks like a reasonable change, would you be open to\npassing graceful-fs to mkdirp ? \ud83d\ude1e\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/866#issuecomment-350122908, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pmwQrZQe0Wh1sM4w0n2EeA590IOtqks5s-HAzgaJpZM4OsOQt\n.\n. This might've been fixed by https://github.com/pnpm/supi/pull/32\n\nPublished in pnpm@1.25. @andreineculau or @jlsjonas can you confirm that the issue is gone with the latest pnpm?. I am going to close it because pnpm is now really heavily used by a big team and seems like they don't have these issues. thanks for the detailed investigation!\nthe way it should work is when the tarball URL has a standard form <registry>/<package-name>/-... then it is not saved in the shrinkwrap file (I mean the tarball URL).\nI'll try to investigate it tonight.. I did reproduce.\nDo you mind if pnpm would use npm-registry.compass.com in a test to cover this issue for the future?. Fix published in v1.10.2. @scott-cornwell have you tried to specify a custom store location via the store config. If you set a location that is on the same disk/device then pnpm should be able to create the hard links.\nAlso probably related to this issue: https://github.com/pnpm/pnpm/issues/712. This was fixed in scope of #712. Did it happen during a pnpm install? I am able to repro it during a pnpm dislink. Should foo be unlinked first?. So if you run pnpm link foo then it should add it as a dependency but what spec should be used? The version that is specified in the foo's package.json? But that might be anything, even something that is not in the registry yet. We'd have to add some additional validation for pnpm publish to check that the specs are correct. > Then it would make sense that pnpm i -S foo should unlink foo first.\nThis was implemented in 546f42657e0c18ccc8c7f12b1d1a992ee6bad5c0. . :ship: 2.15.2. The error is thrown from here. The invalid package can be used to write a test. @jbergstroem do you think we need to redownload the package if this error occurs?. There is an old issue about Content-Length: https://github.com/pnpm/pnpm/issues/423. If we solve this, we can close that one. This is the solution npm will apply but they won't add it to npm-registry-client (they are deprecating it slowly), so we'll have to add the retry logic to our package-store package.\nThe hardest part for me is to write an integration test for it. Published with pnpm@1.13.1. Related: https://github.com/pnpm/pnpm/issues/572#issuecomment-297551737. Probably. Here's the code that should be changed: https://github.com/pnpm/pnpm-default-reporter/blob/master/src/terminalWriter.ts. > Instead of using log-update to do non-fixed writes, could we not just use console.log?\nthis part will be fixed by https://github.com/sindresorhus/log-update/pull/27. Doing an append-only reporter today. It will be used on CI servers by default. Currently, pnpm is silent by default on CI servers.\nSo it will be possible to use something like pnpm install --reporter append-only and the output will be only appended with console.log. \nMaybe someone knows how to feature-detect when it is possible to rewrite the output. In that case, we can prefer this reporter not only on CI servers.. thanks @etamponi, I used your suggestion\n@vjpr this is fixed in pnpm@1.29.1. This is impossible to do with pnpm. pnpm is verry aggressive and will be even more aggressive once we finish this PR: https://github.com/pnpm/supi/pull/8.\nDifferent parts of the dependency tree can be on completely different installation stages. pnpm doesn't have shared installation stages like Yarn. Yarn downloads all the meta first, then all the tarballs, then creates the node_modules folders. pnpm does it all as early as possible for each package. Because we can do it, we can start writing the node_modules very early, everything in our symlinked node_modules is very deterministic. I think it is fine to discuss all pnpm-related things in this repo. Yes, probably we can do some precalculations if there is an up-to-date shrinkwrap.yaml file. Is it still reproducible in 1.41.3?. I know this one. It happens when running install with --force. We use npm's programmatic API for reading the configs and for some reason it starts to print its output when --force is used.\nWe might need to fix this in npm.. This one is caused by the same issues as #877. I don't know. I did not file any issue about this at npm. @jbergstroem I chatted with Kat from npm and she suggests to spawn npm in a child process to get the configs. They use this technic in cipm: https://github.com/zkat/cipm/blob/latest/lib/config.js\nHopefully, this won't make pnpm slower.\nAlso, they plan to move the config reading logic to a separate package, but that is a huge effort. It is unknown when it will be done. I think it is easier to kick-off tracking for the bigger files. Maybe for the ones that are larger than 1MB. Published with pnpm@1.13.0. Download progress of tarballs that are bigger than 10 MB is shown.\nAlso covered reporting with unit tests.. pnpm help store prints:\n```\nReturns a 0 exit code if packages in the store are not modified, i.e. the content of the package is the\nsame as it was at the time of unpacking.\npnpm store prune\nRemoves unreferenced (extraneous, orphan) packages from the store. Unreferenced packages are packages that are not used by\nany projects on the system. Packages can become unreferenced after most installation operations. For instance, package\nfoo@1.0.0 is updated to foo@1.0.1. If package foo@1.0.0 is not used by any other project on the system, it becomes unreferenced.\nIt is good to keep unreferenced packages in the store for a while because frequently unreferenced packages are again needed\nvery soon. For instance, after changing branch on a project and installing from an older shrinkwrap file.\nPrunning the store makes no harm. It only makes installation a bit slower in case the unreferenced files will be needed again.\n``. Maybepnpm storeshould print the path to the store... Likepnpm binprints the pass to the bins folder. OK,pnpm storecan print the help. Andpnpm store --helpbecause that is the interface used by npm.npm install helpdoes not print help, onlynpm install --help. Help onpnpm store` done in pnpm@1.13.1\npnpm store --help not done yet.. Will do pnpm store --help in scope of #909. false fail. Related: #871. As of version 2.15.0 it works as you expected\n\nI think the link shouldn't get removed in the first place. > No node_modules directory in node_modules/babel-preset-vue-app.\n\nnode_modules/babel-preset-vue-app is just a symlink to node_modules/.registry.npmjs.org/babel-preset-vue-app/1.3.0/node_modules/babel-preset-vue-app. Node.js uses the real location to resolve requires. Dependencies of babel-preset-vue-app are in node_modules/.registry.npmjs.org/babel-preset-vue-app/1.3.0/node_modules/.\nThis weird structure works and is done to avoid circular symlinks.\nYou can read more about the node_modules layout that pnpm creates here: Symlinked node_modules structure. if you have resolve in your deps, then you can try this hook. > devDependencies should not appear in dependencies\nI fixed this in pnpm@1.13.2. now's bin file is not correctly linked into .bin. This is reproducible during both global and local installation.\nThe reason might be because now's bin file is created during postinstall and pnpm links bins before running lifecycle events. Fix published in v1.14.8. pinned to 8.0.26. This is fixed in pnpm@1.14.4. We can do it the same way depjs does it. See https://github.com/depjs/dep#installation\nUnfortunately, we have to commit the entire node_modules folder in this case.. The committing node_modules solution won't work right now because we have npm as dependency and npm is published with bundledDependencies. As a result, on Windows we have the Filename too long errors :cry: \nI am asking the npm team whether they have a version of npm published, w/o bundled deps. If there's no maybe we can publish one.... @sshyran, you can now install pnpm with this command:\n~curl -L https://github.com/pnpm/scripts/raw/master/install.js | node~\nEdit:\nThe script was changed to \ncurl -L https://unpkg.com/@pnpm/self-installer | node. Now there is a standalone script to install pnpm, see installation section. With pnpm you can make it work as well by using hooks. Yes. But I think we can implement a pnpm dedupe command which would try to use less packages. So if a lesser version matches the range and is already required, it will be re-used for others\n\nbut it can work only as a separate command. We can't do it when doing pnpm install. Yes. If you create the hook, please post it here, for reference. Seems like the latest versions of pnpm/react/react-dom/next work together. The only issue is that next uses webpack-sources but doesn't have it declared in package.json\n. Probably. Recently the npm team has moved the lifecycle logic to a separate package called npm-lifecycle, so we can just use that instead of re-implementing everything.. @indiescripter try with the latest pnpm (version 1.14.5). It should be fixed now. ok, thanks. That may happen in the future. It is not hard to manage yet.. I see, so the issue is that npm-apply runs npm run postinstall in subprojects but it should run npm install. I'll try to fix it this week. @indiescripter fix published with pnpm@1.14.6.. I like this idea. But only if it won't require additional operations that would slow down installation.\nCurrently, we have the info about each file's size in the package's integrity.json. Also, it will show only the minimal amount of saved disk space. Sometimes npm/yarn copy/paste one package more than 1 time.\nAnother good idea might be if the saved space is more than some amount (500 MB or so), we can add a twitter link that suggests users tweet something like: @pnpmjs just saved 945 MB on my hard drive!. This is where we print errors: https://github.com/pnpm/pnpm-default-reporter/blob/master/src/reportError.ts#L26\nMaybe if there is no err.message we have to try err.toString()\nIs there a more helpful error in the pnpm-debug.log file?. Cool!\nI can look into the issue later. I work on some of the other issues currently.. @deadcoder0904 I tried and installation of native react app worked with pnpm on my Linux.\nI wonder if this is because you install on a non-primary volume. Try to run pnpm with a custom store location. The store location should be on the same disk where you do the installation. \npnpm install --store \"/Volumes/Coding/.pnpm-store\". @deadcoder0904, If you do installation always on the same disk, you can just override the store location globally\nnpm c set store /Volumes/Coding/.pnpm-store\nOr you can override the location for a project, by creating a .npmrc file in the same folder where the project's package.json is. .npmrc content:\nini\nstore=/Volumes/Coding/.pnpm-store\nWhen we fix #712, config manipulations will not be needed anymore.. Why should it be in the project? pnpm uses a shared store, so it can live in one place on the disk. If you'll have a store per project, you won't win from the benefits of shared store. With a shared store you save gigabytes of disk space!. I think the original issue was fixed. Errors are more detailed now. This is a duplicate of https://github.com/pnpm/pnpm/issues/875.\nWe can only show a progress bar if there is a shrinkwrap.yaml. Otherwise, pnpm doesn't know how much is left because we don't divide installation into 4 stages, like Yarn. We do installation more aggressively.\n. False fail. Thanks for reporting and for the detailed steps-to-repro. It is not a burden, when possible, pnpm should work as npm.. @indiescripter I looked into it. This is not a bug in pnpm. It works as designed.\nThe problem is that for-each-project is a dependency of buildverse. Only bins of top dependencies are linked into the root node_modules/.bin. It works with npm/Yarn because they create a flat node_modules structure.\nIn order to make it work with pnpm, you have to have the for-each-project bin in buildverse. One package can have several bins, so it is not an issue, you can create something like a proxy to the dependency's bin.\nRelated: #96. Yep, it doesn't make sense for pnpm to replicate flat node_modules. It is used by npm/Yarn because they don't use symlinks currently.. Seems to work with pnpm v2.8.0 (tested on Linux). I think making drivelist an optionalDependency should fix this issue. @kurtextrem could you try doing npm i -g pnpm --ignore-scripts?. @kurtextrem you can try to reinstall pnpm. drivelist is an option dependency now, so it should be ignored if it fails during installation. Hm, I thought I fixed this in scope of the fix for #901. I've made zkochan-drivelist and optional dep in drive-by-path version 0.1.1. Could you check if drive-by-path 0.1.1 is installed?. Weird. I'll try to republish it. Seems like this is the way it works https://github.com/npm/npm/issues/3502.\noptionalDependencies has precedence. @onlywei I published pnpm@1.14.11 which should not have the issue.\nAlso, I believe pnpm@1.15 will be installed successfully if installed with the --ignore-scripts flag (npm i -g pnpm --ignore-scripts)\nMaybe this is an issue with npm as it should skip failed optional deps. I tried it today on a Windows and even though the dep failed, installation completed successfully (I used npm@4 to install pnpm). What is the version of npm on your Linux?. I don't think reverting drivelist usage is an option because it is there to solve a pretty painful issue that users have when installing on different drives.\nAs of now I think it is a npm issue.\nBut we can solve it also by introducing alternative installation methods that avoid npm\n. @onlywei, you can now install pnpm with this command in your jenkins job:\n~curl -L https://github.com/pnpm/scripts/raw/master/install.js | node~\nEdit:\nthe script was changed to:\ncurl -L https://unpkg.com/@pnpm/self-installer | node. @onlywei in your environment, can you run npx?\nI can add a bin to @pnpm/self-installer and that would allow to install pnpm via the command:\nnpx @pnpm/self-installer. I think we can add a param to @pnpm/self-installer to support non-global installation of pnpm.\nand another one to use a custom registry for downloading pnpm.\nSo you'd be able to do something like \ncurl -L https://unpkg.com/@pnpm/self-installer | node --dist /home/src/node_modules --registry https://registry.example.com/. Cool, I created an issue for this #922. Fix published with v1.16.3. @xpl, thanks for help. For some the latest version of stacktreacey did not print detaied syntax error, so I used console.error(err). ~what would be the package.json field name? I guess pnpmConfig?~. actually, my suggestion would be to use npm's config-system instead of the field in package.json.\nIf this will be a npm config, it will be a lot more powerful. It will allow specifying globally one pnpmfile.js for every project on the computer.. sure, but you can have a .npmrc file in the root of the project. Like we have for pnpm: https://github.com/pnpm/pnpm/blob/master/.npmrc. Regarding configs in package.json, @wmertens has requested it as well in #820. 1. only via npmrc. The config can be called pnpmfile\n2. for backwad compatibility, if there is a pnpmfile.js in the root of the project, the config is ignored\n3. I would also update reporting. It should print the location of the pnpmfile.js at the beginning of installation\nSo it will be possible to do npm set pnpmfile ~/pnpmfile.js. Only one pnpmfile.js will be loaded. At least for now. It is a js file after all, so you can load other pnpmfiles from it.. :ship: 1.39.0. You want to see all the output? It is not wrapped when the output is sent via stderr.\nAlso, I created an issue about flickering at log-update (https://github.com/sindresorhus/log-update/issues/25) but seems like it cannot be fixed there.. \ud83d\udea2 1.32.0. yes, this is by design. This will have to be fixed in npx: https://github.com/zkat/npx/blob/latest/auto-fallback.js. @mauron85 fix is published in v1.19.4. I wonder if the last described issue is the same as #1305. This doesn't work as of v2.19.2 yet\nHowever, if this is inside a monorepo, you many use the recursive commands and it will work as you expected\nYou can run pnpm m i in the root of your monorepo. Yep, it is described here. @onlywei you can now use env variables to install pnpm where you want, even via a custom registry. See https://github.com/pnpm/self-installer#readme. This doesn't work because to move lodash to prod dependencies, you have to use the -P/--save-prod flag.\nI am not against a warning though.\nAlso, I noticed that summary is not printed when dependency is moved from one type to other. It should print something like this:\n```\ndevDependencies:\n- lodash 1.0.0\ndependencies\n+ lodash 1.0.0\n``. non-global installations fail as well?. It depends, if your homedir is on diskD:`, the store will be in the homedir.\nAlso, you can check the location of the store in the node_modules/.modules.yaml file. Homedir is C:\\Users\\Ben in your case. pnpm uses drivelist to detect drives. But it is a native, optional dependency. It might have failed on your system.\nYou can use the store config to specify the location of your store on disk D:. So you can create a .npmrc in your project's root with this content:\nini\nstore=D:\\.pnpm-store\nAlso, I will create an issue to solve disk-detection w/o drivelist.. I think I figured it out, global packages should be installed to ${APPDATA}\\npm but I am not sure about other systems. \nPR #1244. :ship: 2.9.0. drivelist is an optional dependency of pnpm. Even if it fails to be installed, pnpm will work fine. You might have problems if you have several disks on your computer but you always can use the store config to specify the store location manually.. @nikoladev, we have an experimental homebrew package to install pnpm on osx\nhttps://github.com/pnpm/pnpm/issues/959\nYou can try that but I think it has not the latest version of pnpm. You can\ndo then pnpm i -g pnpm.\nCc @ran-dall\nOn Tue, Jan 16, 2018, 12:38 nikoladev notifications@github.com wrote:\n\nI have the exact same issue while installing. The problem is that pnpm\ncan't be used at all:\n\u279c pnpm -h\nzsh: command not found: pnpm\nI'm using Zsh https://www.zsh.org/ and Oh My Zsh http://ohmyz.sh/, as\nwell as:\n\nnpm v5.6.0\nnode v8.9.4\nmacOS 10.13.2\n\n\u279c npm i -g pnpm\n/Users/nikola/.npm-global/bin/pnpx -> /Users/nikola/.npm-global/lib/node_modules/pnpm/lib/bin/pnpx.js\n/Users/nikola/.npm-global/bin/pnpm -> /Users/nikola/.npm-global/lib/node_modules/pnpm/lib/bin/pnpm.js\n\ndrivelist@5.2.12 install /Users/nikola/.npm-global/lib/node_modules/pnpm/node_modules/drivelist> prebuild-install || node-gyp rebuild\n\nprebuild-install info begin Prebuild-install version 2.4.1\nprebuild-install info looking for local prebuild @ prebuilds/drivelist-v5.2.12-node-v57-darwin-x64.tar.gz\nprebuild-install info looking for cached prebuild @ /Users/nikola/.npm/_prebuilds/https-github.com-resin-io-modules-drivelist-releases-download-v5.2.12-drivelist-v5.2.12-node-v57-darwin-x64.tar.gz\nprebuild-install info found cached prebuild\nprebuild-install info unpacking @ /Users/nikola/.npm/_prebuilds/https-github.com-resin-io-modules-drivelist-releases-download-v5.2.12-drivelist-v5.2.12-node-v57-darwin-x64.tar.gz\nprebuild-install info unpack resolved to /Users/nikola/.npm-global/lib/node_modules/pnpm/node_modules/drivelist/build/Release/drivelist.node\nprebuild-install WARN install Module did not self-register.\n  CXX(target) Release/obj.target/drivelist/src/code.o\n  CXX(target) Release/obj.target/drivelist/src/log.o\n  SOLINK_MODULE(target) Release/drivelist.node\n+ pnpm@1.29.1\nadded 645 packages in 48.305s\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/933#issuecomment-357920492, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pmxWQkzevUBpDyZ1v_6KKtAqPp9Mkks5tLHwOgaJpZM4QSZOK\n.\n. I don't think this will ever work. You should choose one pm and use it on a project. pnpm's node_modules structure is different, the difference is not only in using hard links. pnpm uses symlinks to create a nested npm2-like structure. More about it here: https://github.com/pnpm/pnpm/blob/master/docs/symlinked-node-modules-structure.md. The pnpm website has now a \"Used by\" page: https://pnpm.js.org/en/users.html. FYI, pnpm works on Node.js 9. Tests are running and passing on Travis/Appveyor.\n\nWe just need to get rid of the warning. Do you have this error with other package managers? (npm or Yarn). Do you use the standard registry (registry.npmjs.org/) for installation?. Does the registry you use support corgi? It is something that registry.npmjs.org added this year. They return not all the meta info but only what is needed for installation.\nI think pnpm currently stores in memory all the manifest/package.json info of each package. Although only some of the fields are used during installation. So probably if we won't save all the fields, RAM memory usage will be reduced.\nI can check this after I implement the \"aliases\" feature. Probably some time next week. These: https://github.com/pnpm/supi/blob/master/src/types.ts#L144-L164\nMaybe this line of code can be rewritten to only include the neede fields: https://github.com/pnpm/supi/blob/master/src/install/installMultiple.ts#L379. Published in v1.23.0. Maybe unpacking tarballs consumes a lot of memory. Try changing the value of the network-concurrency config https://github.com/pnpm/pnpm#network-concurrency. the tree building is not really introducing a lot of new data. Unless the Node IDs are really long. If your solution doesn't help maybe we could somehow make the node ids smaller. Seems like the benchmarks are a little bit worse in some cases. This change optimized memory usage but added additional cpu load. So I am not sure yet whether it is a good idea to publish it or not.\nAs I mentioned, the only new data in buildTree is the NodeID + a number + a boolean. Only nodeID can be big. But I think it can be substituted with a number because the Node ID should only be needed during building the tree, to detect circular dependencies. In worst case, a new number can be added to reference the parent node. But two numbers should be a lot smaller than the long Node ID\n\nafter the previous change (removing the redundant fields from package manifests) benchmarks actually improved.. I use this repo: https://github.com/pnpm/node-package-manager-benchmark\nI remove the last results of Yarn and run all the cases for yarn and pnpm. Then I check if differences between yarn/pnpm are the same as before. . Sometimes results are random, so they have to run 3 times. The benchmarks are really time-consuming.. yes, but first I remove the last folder from /results/yarn\nAnd I link pnpm from my local repo.. I did not inspect it. It was my assumption because pnpm slowed down a bit, according to the results. The peers resolution part of pnpm is actually one of the slowest parts of the application and children are accessed several times there https://github.com/pnpm/supi/blob/master/src/link/resolvePeers.ts. ctx.tree can be rewritten to an array and nodeId can be just a number that will reference the element in the array. nodeId is currently a really long piece of string, a concatenation of package ids. But it is needed only inside buildTree: https://github.com/pnpm/supi/blob/master/src/api/install.ts#L652. Yes, something that references them. Not the long node ID\nThe long node id is used for logging purposes here: https://github.com/pnpm/supi/blob/master/src/link/resolvePeers.ts#L284-L289\nThat code can be removed for now. Logging of peer warnings won't be so nice, but performance is more important. @valotas I merged your fix, not published yet.\nCould you create a sample project that would replicate the issue? If this is a private project, could you choose the open source dependencies from it? Maybe that will be enough. I'd use that project to test pnpm in the future. Published with version 1.23.1. @deadcoder0904 would you like to work on it? I agree that the current website is lame but I have to concentrate on the pnpm issues for now.. The docs look pretty nice.. yeah, I will, I just want to reuse the current homepage because it has more info and internationalization. I'll combine the homepage with the docs part. you can port the docs from the https://github.com/deadcoder0904/pnpm-site\nto this repo https://github.com/pnpm/pnpm.github.io, keeping the current homepage and adding a link to the docs to it.. it is mobile friendly already. if you have ideas how to improve the homepage, go ahead. I think the testimonials look not too well on wide screens, maybe they should be in one row.. I mean keeping this page: https://pnpm.js.org/\nand adding a link to the docs, which will be moved to the pnpm.github.io repo, as you mentioned.\nThere is a link to GitHub on the https://pnpm.js.org/, I believe the link to docs can be placed next to the github link. Also, it might be a good idea to scope the docs per language, so to have subfolders for different translations.\nWe have the homepage translated to multiple languages, we might want to translate the docs as well in the future. It looks better now. I used gitbook because it was easier for me to configure.\nhttps://pnpm.js.org/docs/\nplease file issues in the website repo if you want improvements. In this particular case probably the cause of the error should be identified. Why babel-plugin-transform-flow-strip-types cannot be found. Maybe it is not declared in package.json of the dependency that requires it.\nIn general, if you want to help, you can start with issues marked as easy, help wanted, good first issue. Or just read the titles... there's not that match. Both npm and yarn create a flat node_modules structure and the package can access many dependencies that are not declared in package.json. I'd say in 95% of cases (and the value is getting closer to 100% as we fix more and more issues) the issues are that packages require dependencies that are not declared in package.json.. oh, or the other issue might be this: #801\nsome of the most popular resolvers don't adhere Node's resolution algorithms. They preserve symlinks when resolving. pnpm creates lots of symlinks and it works with Node because it does not preserve them. @deadcoder0904 I just checked. It is an issue with metro-bundler. It uses a bunch of packages that are not declared in its package.json. They should fix it.\nWith a pnpm hook, I added the missing dependencies to its manifest and it worked.\npnpmfile.js:\n```js\n'use strict'\nmodule.exports = {\n  hooks: {\n    readPackage\n  }\n}\nfunction readPackage (pkg) {\n  if (pkg.name === 'metro-bundler') {\n    Object.assign(pkg.dependencies, {\n      'babel-plugin-transform-flow-strip-types': '6',\n      'babel-plugin-transform-object-rest-spread': '6',\n      'babel-plugin-transform-class-properties': '6',\n      'babel-plugin-transform-async-to-generator': '6',\n      'babel-plugin-syntax-trailing-function-commas': '6',\n      'xtend': '',\n      'errno': '',\n    })\n  }\n  return pkg\n}\n``. In most cases, there is aCannot find moduleerror with a stacktrace. The stacktrace points to the package that is missing the dependency. Concurrent installs is one thing, locking is another. There will be no issues with locking if one pnpm process will be installing in multiple projects. Locking is only needed because pnpm doesn't know which packages are already being downloaded (which is the case when several separate processes runpnpm install`).\n. So implementing concurrent installs would solve your issue?\nI like the feature, I can concentrate on it after implementing #559, which is a big rewrite, so might be smarter not doing it in parallel.. I don't mind at all. I appreciate the help! The code is far from pretty and part of it are hard to understand, so if you need help with anything, just reach out via gitter or twitter direct messages. Regarding the rewrite that I mentioned. If all goes well, maybe I'll finish the rewrite this weekend.. That is awesome! We'd be honored to add glitch to a \"used by\" section! So I really hope we'll manage to make this work.\n. when you remove shrinkwrap.yaml then options.pkgId will always be undefined. So that might be the reason. Every package is downloaded to a folder suffixed with _stage. After the download completes, the folder is renamed. This is done so because rename is an atomic operation. Others are not. This way the store has the package only what it was correctly downloaded/unpacked. @etamponi, your statements are correct.. Regarding concurrent installations. Last weekend I have rewritten pnpm to use a combination of resolvers/fetchers instead of a monolith resolver+fetcher.\nIt will be possible to set custom resolver/fetcher for pnpm.\nNow for concurrent installation, I think the solution would be to move out the \"store driver\" out from the installation function. In that case, it will be possible to run several installations with one \"store driver\". One store driver would lock the store once for several installations.\nHere's the high-level PR of the changes I talk about: https://github.com/pnpm/supi/pull/24/files\nThe important part: https://github.com/pnpm/supi/pull/24/files#diff-00bbfdf41ace3dcecf895fc2866cae88L364. I don't know whether it should be a different process or not. We can start with one process as that seems easier and faster to implement.\n\nMy original plan would have been to change the fetch function in package-store to not use storeIndex to check if a package didn't exist\n\nI would prefer a solution that would use less fs operations. fs operations are expensive. Using many locks also involves a lot of additional fs operations.\nI'd try this decoupled store driver approach and see how it works out. The same process. You'd just run something like pnpm i -r and one pnpm\nprocess would find all projects in subdirs and run all the installs\nconcurrently.\nOn Mon, Dec 4, 2017, 16:04 Emanuele Tamponi notifications@github.com\nwrote:\n\nSorry, I am not sure I understand: when you say \"start with one process\",\ndo you mean a separate process for the store driver, which all the pnpm\nprocesses talk to, or do you mean that the store driver runs in the same\npnpm processes? I understand the \"separate process\" solution, but not the\nother one.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/941#issuecomment-348971030, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm7v3O8PonVKsNknzFa2OFY_fRpKcks5s8_wAgaJpZM4QiSYi\n.\n-- \n\nZoltan\n. I see, well making the fetching logic configurable might be step 1.\nAlso, I had an idea that might be similar to what you need: #832. So I have successfully moved out the store controller logic in scope of #832. Now we can use a shared store controller to install in multiple projects simultaneously!\nI think there should be a new command for recursive installation and only the install and update commands should be supported. So one can run pnpm recursive install and pnpm will find all folders with a package.json file and run the installation simultaneously.. yes, it ignores packages inside node_modules and bower_components. Published in 1.24.0-2. The new commands are documented in pnpm help. Not documenting them in README for now.. what command were you using to install dependencies?. might be related to #1305. Does it happen all the time or from time to time?\nHave you tried to wait for a minute or two? Does it eventually finish the installation?. > Is there an option to make the output more verbose? The only thing I came up with was adding a readPackage hook to log packages.\nyou can run pnpm i --reporter ndjson\n\nAlso, does it work for you, were you able to reproduce it on your end?\n\nyes, it works on my linux. It does hang sometimes (when I run this benchmarks: https://github.com/pnpm/node-package-manager-benchmark) but not forever. @adamciolkowski is it still reproducible with the latest pnpm? We had a few big updates in pnpm since pnpm@1.23.1. We removed usages of request (#953) which might have caused something like this issue. @lotri1 are the packages that hang big? See #1131. What OS did you use?\nOn Sun, Jun 24, 2018, 08:43 lotri1 notifications@github.com wrote:\n\nIt looked to me like a deadlock between threads that handling the packages.\nAnyway, I couldn't find a solution so I moved to npm ci.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/946#issuecomment-399731270, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm-h3Wb2i9riNoWNHpwI-k5lY2Vsyks5t_ycHgaJpZM4QqZwn\n.\n. I have a found a place where pnpm can silently hang: \n\nhttps://github.com/pnpm/package-store/blob/359fe907a5d67ecb59da86249470013e121a180f/src/storeController/index.ts#L45-L48\nWhen pnpm waits for a store lock, nothing is printed to the console.. I fixed the store reporting and some locking issues in pnpm v2.13.1\nLet me know if this will repeat in v2.13.1 or newer. Also, include the output (and the pnpm-debug.log, if present). Let's create a new issue in case it will happen again with latest pnpm. @patricksile file an issue with more details\nos, node version, etc. @vjpr what do you think about the config naming? is it straightforward?. @andreineculau could you elaborate? You mean listing in the readme everything that 'unsafe' ignores?. More straightforward option naming might be --unpack all|important|just-enough.\n. Makes sense, but I wouldn't like to spend a lot more time on this. A compromise, for now, can be: --unpack all|code-and-license|code-only. hm, alright. But then we need some more powerful pnpmfile format.\nI was thinking about changing it to a function. The input parameters would be the supi options. You can modify the options and return. In that case you'd be able even to provide custom resolvers/fetchers soon.\nSomething like:\njs\nmodule.exports = (opts) => {\n  return {\n    ...opts,\n    hooks: {\n      ...opts.hooks,\n      readPackage,\n    },\n    createResolver: require('my-custom-resolver')\n  }\n}\n. ok, let me re-phrase. It will return pnpm configs, not supi options. They currently match but that might change in the future.. There is a way, you can use installation hooks. With an installation hook you can basically override jest's manifest and add the missing dependency.\nThis use case was one of the reasons hooks were added to pnpm. You can read more about it in: Why package managers need hook systems\nIn your case the pnpmfile.js with the hook will look something like this:\n```js\nmodule.exports = {\n  hooks: {\n    readPackage\n  }\n}\nfunction readPackage (pkg) {\n  if (pkg.name === 'jest-runtime') {\n    pkg.dependencies = {\n      slash: '^1.0.0'\n    }\n  }\n  return pkg\n}\n```. We actually planned to implement this as a config (see #651) but then we decided that a js file is a more powerful solution (see #861).\nWith the pnpmfile.js you can create a hook and publish it as a package, then just require it in your pnpmfile.js. The only question is how should the hook-dependency be installed. It cannot be a dev dependency, because pnpmfile.js is called before installation has started.\n@vjpr and @andreineculau, do you have any suggestion regarding this?. Well, I wouldn't like to deprecate pnpmfile.js because it can do a lot more\nthan yarn's resolutions.\nWe can add a plugin that will convert yarn's resolutions to pnpm's\nreadPackage() hook. The plugin would have to be required in the\npnpmfile.js.\nThis solution would keep pnpmfile.js the \"the single place of truth\".\nOn Tue, Dec 5, 2017, 12:17 Vaughan Rouesnel notifications@github.com\nwrote:\n\nWith the pnpmfile.js you can create a hook and publish it as a package\nDefinitely good to have, but I agree that a config option would be easier.\nStatic pjson config is easier to modify with scripts.\nUse case: Say you have multiple projects (Lerna monorepo for example) that\neach need a custom dep. The easiest thing would be to write a script to go\nthrough and add to resolutions key in pjson of each package. Now, the\ncurrent pnpmfile.js approach of creating and publishing a package\nprovides flexibility, but there is so much more friction involved in\npublishing a package, than changing a config setting. Also, its not easy to\nadd this config setting to multiple packages with a script.\nI'm all for config.\nWe should support Yarn's resolutions:\n-\n   https://github.com/yarnpkg/rfcs/blob/master/implemented/0000-selective-versions-resolutions.md#resolutions\n   - https://yarnpkg.com/en/docs/package-json#toc-resolutions\nI'm not sure if it handles \"missing\" deps, but if not, we could also add\nadditionalResolutions.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/949#issuecomment-349259345, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm-UliDEwRnZFYjHT4JthOlBUbFjqks5s9Rg_gaJpZM4QxQEP\n.\n. > Maybe I am misunderstanding something about how pnpm plugins work. How do they get installed after you do \"git clone\"?\n\nI don't know yet, we don't have this plugins yet. The simplest solution might be to have the plugin in pnpm. In that case the pnpmfile.js would look like:\n```js\nconst createResolutionsHook = require('pnpm').createResolutionsHook\nconst resolutions = require('package').resolutions\nconst readPackage = createResolutionsHook(resolutions)\nmodule.exports = { hooks: { readPackage } }\n```\n\nI understand that this is not scalable. Maybe the compromise would be that: if there is no pnpmfile.js in the root of the package, then this hook that uses resolutions from package.json is used by default.\nIf there is a pnpmfile.js then devs may use the plugin or may implement their own logic, or combine the plugin with their own logic.. what can you use pnpmfile.js for?\n\nyou can rename the package's bins\nyou can substitute packages from your fork\nyou can force all dependencies to be non-exact\nyou can add validation. For instance, when you don't want some package to be used at all, because it is insecure or malware.\n.... not right now. I think adding them to the readme would be good. Or a separate page, with examples. +1 for global pnpmfile.js. As I mentioned in issue #910, we can have a config that would specify the location of the pnpmfile.js. A config can be set globally. So there would be no need to configure 20+ Git repos as @pgonzal mentioned. Funny thing is, I am not even sure the resolutions field would work with pnpm. It is related to the way pnpm installs, it doesn't really care about the path of the package (unless it has peer dependencies) see my comment in another issue: https://github.com/pnpm/pnpm/issues/952#issuecomment-349413621.\n\nThe global pnpmfile might be not a good idea but it can be powerful. Like it can be a function that gets all the pnpm configs and returns a modified set. In that case you'd be able to apply the hooks only in some directories. Something like:\njs\nmodule.exports = (opts) => {\n  if (!opts.prefix.startsWith('/home/src/') {\n    return opts;\n  }\n  // doing some stuff\n}\nSo the global pnpmfile would be used only when pnpm install is done in projects inside /home/src.. It doesn't necessarily have to be global. It can be shared. As far as I understand you use one npm cache by monorepo. Whichever way you specify the cache location, you can use the same way to specify the pnpmfile location. It can be in the root of the monorepo, not the \"/home\" dir. . We are giving a powerful feature to our users. They can create their own wrappers around it. If you want it to work with json files, go ahead and create a hook that will work with it. As I mentioned above, the pnpmfile should not necessarily be per project or global. It can be per repo, for instance.\nIf someone will come up with a super-intuitive solution, maybe we'll merge it to pnpm. But I would definitely start with the existing stack. Deprecating things is not easy.. related: #1082 \nI just read the specs of the \"resolutions\" field at https://github.com/yarnpkg/rfcs/blob/master/implemented/0000-selective-versions-resolutions.md\nIssues I see:\n\nWhen a nested dependency is being resolved by yarn, if the resolutions field contains a specification for this package, then it will be used instead.\n\nIt is currently impossible to implement with pnpm. pnpm always uses one dependency set for a version of a package in one node_modules. So if there is foo@1.0.0 already resolved in a project, and it has bar@1.0.0 as dependency, then pnpm will not create a new dependency set for any foo@1.0.0, even if some of its parent packages have the \"resolutions\" field.\nAlso, \"resolutions\" allow to override dependencies of packages that are located at specific locations. So it allows to override just \"a/**/b\": \"1.0.0\". pnpm would be able to correctly handle only resolutions like \"**/b\": \"1.0.0\" (Unless we do a huge rewrite)\n\nFor pnpm, something like this would work:\njson\n\"pnpmResolution\": {\n  \"foo@^3.0.0\": {\n    \"bar\": \"1.0.0\"\n  }\n}. I would rather not add additional complexity just to support dynamic installations of imports in pnpmfile. If someone really needs it, they can preinstall the needed dependencies and commit them to the repo. Or bundle them into pnpmfile.js. yes, we can support something like that but a lot of people asked for a non-executable way of declaring resolutions, so it will have to be something like a pnpmResolutions field in package.json, see #1082. Does it work with npm or is the issue with pnpm only?. seems like it is created in pnpm repo by mistake. Related  #939 \nI agree. The website does need a lot of work to get better. As a temporary solution, we can remove the link to the website from the repo and npm pages. It looks better now. I used gitbook because it was easier for me to configure.\nhttps://pnpm.js.org/docs/\nplease file issues in the website repo if you want improvements. https://github.com/pnpm/pnpm.github.io. Related #890 \ncc @donaldpipowitch.\n. This is hard or even impossible to do with pnpm w/o huge performance penalties.\nOne version of one package has always only one set of resolved dependencies in a node_modules created by pnpm. Lets' assume a@1.0.0 has two dependencies: b@2 and c@2. a@1.0.0 can be in two different places in node_modules: foo > a and bar > a. During installation, pnpm will walk down the dependency graph to a, but it will resolve its dependencies only once. Either under foo or under bar. It will depend on which package's meta will be downloaded faster from the registry.\nNow lets' assume bar also depends on b@<2.5 and foo depends on c@<2.5.\nLets' assume the latest versions of both b and c is 2.6.0.\nNow if we'll add this dedupe logic, a will get installed either \nb@2.6.0 + c@2.4.0\nor\nb@2.4.0 + c@2.6.0\n\nAn alternative solution might be to keep all the already resolved packages in some global state and prefer the resolved versions that are already there. So if foo@2.5.0 is already used somewhere than use it for resolving foo@^2.0.0, even if 2.6.0 is available in the registry.\nThis solution would not slow down pnpm.\n\nWhat are the real-world scenarios for this feature though? I understand the bundle filesize issue. However, packages should never be required using exact versioning or using some weird ranges like >=2.0.0,<=2.6.0. Why would a package break after a non-breaking change? If a package has specs like that, we can probably print a warning or something. That should not be considered normal\n. I see.\nIn this case, even Yarn works like pnpm. They have a special flag called --flat for the dedupe that you described. If we can't agree on a solution that keeps the current performance of pnpm, then the change will have to be under a flag. @nickpape-msft what about this case?\nBoth B and D have E as dependency. B relies on the bad F and D relies on the good one, which F will be used for B@1? \napp\n                              |\n                +-------------+----+----+--------+\n                |             |         |        |          \n               B@1            Q         D        F\n            +---+---+         |      +--+----+\n            |       |         |      |       |   \n           F(bad)   E      F(bad)    F(good) E\n                    |                        |\n                   B@1                      B@1\n                    |                        |\n                    F(good or bad?)          F(good or bad?). We can try this approach if this is so crucial to you. If it won't be too heavy from performance point of view, then we can have it as the default behavior.\nI may have time to do it this week but I cannot guarantee. If you'd like to do it, I think this part should be changed: https://github.com/pnpm/supi/blob/master/src/install/installMultiple.ts. So I was looking into it today and I really don't see how it can be made deterministic w/o changes that would affect performance.\nThe only deterministic solution is to prefer packages that are the project's dependencies. I will implement this approach for now.. During a clean install. We have to wait till all dependencies are resolved on one level and only after that we can start resolving on the next level. Right now, pnpm can resolve concurrently, in any order, on different depths.. We talk about everything. Delaying the package manifest fetch delays all the other things as well.. As far as I understood from the initial post, in Rush you have the possibility to pin some versions of indirect dependencies. The way you do it, you add those dependencies as direct dependencies. With the change that I am making, your pinned dependencies will work with pnpm, same as they work with npm.\nWe can even support a more sophisticated approach. We can have a field that will contain \"preferredVersions\". Something like:\njson\n\"preferredVersions\": {\n    \"library-a\": \"~1.0.0\",\n}\nlibrary-a will not be installed as a direct dependency but the specified range will influence the resolution of indirect dependencies.. Please see my post above.\nWe can try it out but it will need a serious refactoring of installMultiple.ts first.\nIt is hard to imagine though, that it won't slow pnpm down. The simplest example would be a package with a really deep branch of dependencies. All the short branches would be resolved really fast, with good concurrency, then the long branch would be the last one, installing its dependencies with little concurrency. Currently, the speed of installation is always maximally fast, it doesn't depend on the structure of the dependency graph. Maybe that is why pnpm is sometimes 3 times faster than Yarn.\nI do understand that sometimes speed is not the most important factor but in this case, I think the proposed solution is a good compromise. If in this case, pnpm would choose de-duplication over speed, there would be no need in pnpm, because it would become a shameless npm clone.. I may sound too pessimistic and strict but pnpm's speed is indeed really fragile and on the edge. In August I've spent a whole month trying to refactor pnpm's installation engine. I used reactive programming and it allowed me basically to manipulate the order of different operations pnpm does during installation. (Here's the PR: https://github.com/pnpm/supi/pull/8).\nAfter a whole month of experimenting, I was unable to come up with a rewrite that would be as performant as the current version. \nFor context, ied uses reactive programming and is faster than pnpm. But ied does not support peer dependencies and it makes things a lot easier.. Published pnpm@1.24, which has now partial deduplication. The version specs of the direct dependencies are taken into consideration when resolving the indirect dependencies. When possible, the versions from the root are reused.. We are definitely moving away from npm-registry-client. I am in a middle of a big rewrite of the package requesting logic (the last related PR https://github.com/pnpm/supi/pull/24, related issue: https://github.com/pnpm/pnpm/issues/559).\nAfter the rewrite, npm-registry-client is used by @pnpm/npm-resolver and @pnpm/tarball-fetcher. We can use make-fetch-happen instead (with turned off cache).\n. Yes, it will. make-fetch-happen doesn't have request anywhere in its deps. Published with pnpm@1.23.2\nrequest is still used in node-gyp but that one is not called too frequently, so the error should be gone. can be done. (here's the code that runs the hook: https://github.com/pnpm/supi/blob/master/src/install/installMultiple.ts#L330)\nwhy would you call the registry though? To get metafile of one of the dependencies? Seems counterproductive as the call will be done by pnpm anyway. This use case seems to me would be better to solve with a custom resolver. I recently moved out all the resolving/fetching logic from supi and we can now make them pluggable. See #559. I think throwing an exception will work\nOn Thu, Dec 7, 2017, 17:22 Vaughan Rouesnel notifications@github.com\nwrote:\n\nHow do you deny from the readPackage hook? process.exit()? Would this\ncleanup properly - or would we be left with the lock files hanging around.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/956#issuecomment-349999098, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pmxjzHiQKvL0a48IFtDeU68spAxxoks5s-AK_gaJpZM4Q4yOY\n.\n\n\n. The complex logic described in this issue doesn't make sense to me. \nFor instance, this one:\n\neither allow multiple pnpmfile.js in a repo e.g. all pnpmfile..js or all pnpmdir/.js would be executed in alphabetical order, so that one would have pnpmdir/01.deny-gpl-licenses.js and pnpmdir/02.fix-foo.js\n\nWhy would that be needed? Only one pnpmfile.js should be used. OK, we can check not only the one in the current dir. We can look up in parent dirs, but we should use only the first one that is found. This is a js file, it can require and compose other js files if needed.. From v1.39.0, global-pnpmfile is supported. This is fixed in pnpm@1.25.0\nIt was fixed in scope of https://github.com/pnpm/supi/pull/32. Big thanks to @etamponi!. Easy, info should be added to this set: https://github.com/pnpm/pnpm/blob/master/src/bin/pnpm.ts#L54. Published with pnpm@1.23.2. So I tried the diable by Ionica Bizau and it works like a charm!\nThe only issue is that once the server runs in the background, there is no easy way to stop it.\nThere will be a new command: pnpm server stop for stopping the store server.\npnpm server will be renamed to pnpm server start.\npnpm server will print help for the server commands.. I think pnpm server start will still run it in the foreground by default. There will be a flag to run a background server on pnpm install. And another flag for pnpm server, something like pnpm server start --background. Interesting, maybe we can have something like pnpm server start --unstoppable. I think pnpm server status can print some info about the server. Like whether it runs or not, what port it uses, etc.\npnpm server attach can bring the server to the foreground (similarly as docker attach). :ship: published with pnpm@1.30.0. Created follow-up issues: #997, #998. please do, I have a few other things in priority.. Wasn't published yet. Published with pnpm@1.24. oh wait, why do you use version 0.69 of pnpm? The latest is 1.23.2. Try it with the latest version. Try to install it using the methods described here: https://github.com/pnpm/pnpm#install\nI did not know about that aur-hosted pnpm. @bgaleotti would you like to automate the process of publishing to aur and add it to out installation section?. I think it will update pnpm.. Why would you do this? It is such a weird scenario. Can't you just run npx pnpm install pnpm? And then run ./node_modules/.bin/pnpm install. Also, would you use the standalone script for installing pnpm, if it would support custom location? https://github.com/pnpm/pnpm/issues/922. @secretgspot I could not reproduce it. If this is still an issue with the latest version pnpm, please provide more details. On what OS did it fail?\nAlso, a sample repo might help, \n. Maybe Angular depends on typescript? I installed typescript globally and then it worked fine. yeah, they do it all the time. If you see it is used in code and not declared in package.json then ask them to add it as a dependency. It is a bug on their end in that case.. @vjpr, have a look. This is at least 3 times faster than running pnpm in sequence. Tested on the cyclejs monorepo: https://github.com/cyclejs/cyclejs. how is it related to pnpm? Did you use pnpm for installing the dependencies? If so, provide steps to reproduce.. Fixed in pnpm@1.24.0-3. False alarm. I assume this happens because the directory name is very long. We can probably use a hash to name that directory when the user-friendly name is longer than 100 or so characters. A fix was published in pnpm@1.25.0. Lets' not change the --ignore-scripts behavior now. That would be a breaking change. It might make sense to make this change in pnpm@2.\nI'd call the flag --ignore-pnpmfile because we might add other things to it in the future, not just hooks.\nYou also need:\n a test\n add the option to the pnpm help and to the README\n add it to pnpmTypes\n once it will be in pnpmTypes, you'll be able to access it via opts, no need for opts.rawNpmConfig\n. ok, that's funny.\nthis fails because {PnpmOptions} is imported from supi. Just import it from @pnpm/types and it'll work. oh, sorry... probably pnpm up --depth 100 should fix this. Anyway, this might be confusing to you. It is indeed. I can take it over from here, if you want. yeah, a deep update helped.\nok, I'll just add one test and merge it.\nThanks for the contribution!. Seems like there are some big problems with the npm registry today. I don't\nknow the details myself...\nSee https://github.com/npm/registry/issues/255\nCurrently, I cannot install eslint with any of the Node.js package\nmanagers: pnpm, npm, yarn. It is a problem with the registry, not with pnpm\nOn Sat, Jan 6, 2018 at 6:29 PM jpagarcia notifications@github.com wrote:\n\nTried to install eslint globally, encountered the following error:\nERROR request to https://registry.npmjs.org/eslint failed, reason:\ngetaddr info EAI_AGAIN registry.npmjs.org:443 at err\n\u2026_modules/node-fetch-npm/src/index.js:68 reject(n ew FetchError(request\nto ${request.url} failed, reason: ${err.message}\u2026\nat emitOne events.js:116\nat emit events.js:211\nat socketErrorListener _http_client.js:387\nat emitOne events.js:116\nat emit events.js:211\nat emitErrorNT internal/streams/destroy.js:64\nat _combinedTickCallback internal/process/next_tick.js:138\nat _tickCallback internal/process/next_tick.js:180`\nIs there anything I can do?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/985, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm7a0pKh-ypuOalN_gGLPwL0A5PXbks5tH59mgaJpZM4RVXBW\n.\n. This issue was solved\n\nhttps://github.com/npm/registry/issues/255#issuecomment-355780293. This is where it fails: https://github.com/pnpm/supi/blob/07543200d3d0939fbd7cc569b934025504863fc0/src/link/resolvePeers.ts#L276\nIt fails when it is trying to print the next warning about peer dependencies. I don't know how to reproduce it but that code is used only for logging. With big probability, commenting out that code will fix the error.\nIf you need a quick fix, we can do something like\njs\n.map(nodeId => tree[nodeId] && tree[nodeId].pkg.name || '...'). My assumption why this happens is that one of the package IDs contains colon or colons.\nA dependency nodeId is a concatenation of package IDs and a colon is used to glue them. In resolvePeers.ts we split those node IDs. If one of the package IDs has colons, the split will create two invalid package IDs.. If my assumption was right, this should work now with pnpm@1.27.0.. @etamponi, please review. I think it is a bit confusing to use --port for setting the protocol. However, I agree that it is a good feature to be able to set the port.\nHow about this:\n\nI leave --protocol as it is now\nif --port is passed but no --protocol then tcp is used with the specified port.\nsetting protocol to unix and specifying the port throws an error\n  . Published in 1.27.0. Seems like the error happens inside dint (when calling dint.from()).. @andreineculau I don't really see where's the issue. Maybe you could try to generate an integrity file for the repo from the logs. It's easy, you just pass the location of the directory to dint.from(): https://github.com/zkochan/dint/blob/master/example.js. This is most probably fixed in v1.30.1. ok, I know where the error is :man_facepalming: \n\nWe rename the folder before the integrity is generated.\nhttps://github.com/pnpm/package-requester/blob/master/src/packageRequester.ts#L402-L432\nThe fix is easy. I don't think it will make performance worse, either\nEDIT:\nas a temporary fix, you can disable store integrity calculation with the verify-store-integrity config. oh, indeed. That option won't help because integrity.json is created anyway, only without the checksums.\nanyway, fix will be ready today. @andreineculau this should be fixed in v1.30.2. I think this is solved by the fix for #928. maybe try to remove node_modules and shrinkwrap.yaml after changes to pnpmfile.js\nto get the output of console.log try to run pnpm install --reporter append-only. I guess an issue should be created at Gatsby and additional investigation done.\nWith this hook gatsby makes it to the bundling step:\njs\nmodule.exports = {\n  hooks: {\n    readPackage (pkg) {\n      switch (pkg.name) {\n        case 'gatsby-cli':\n          Object.assign(pkg.dependencies, {\n            'regenerator-runtime': \"^0.11.1\",\n          })\n          break\n        case 'gatsby':\n          Object.assign(pkg.dependencies, {\n            address: '^1.0.3',\n            'request': \"^2.83.0\",\n          })\n          break\n      }\n      return pkg\n    }\n  }\n}\nHowever, there it fails. Seems like because webpack searches for dependencies in project/node_modules instead of in the node_modules of gatsby. This is happening because when shrinkwrap.yaml is available, pnpm downloads the package tarballs to the store. It is a bug. fixed in pnpm@1.32.1. Tests will pass when https://github.com/pnpm/server/pull/11 gets merged and published. --unstoppable doesn't seem like a good flag name :thinking: \nmaybe --no-stop or --ignore-stop-requests. @etamponi, do you like the naming? I think --use-store-server is fine but I think we might want to add some other options in the future. Some possible flags might be:\n\ndisallow installation using a store server\nallow installation only using a server but disallow creating one. That might be something Glitch would use\n\nSo maybe in this context, a different name would be better?\n. yes, you are correct, it will wait for the newly created server to startup\nand yes, all configs can be used via .npmrc.. :ship: published with pnpm@1.30.0. This is done as of v2.8.0. > I'd say that the old, \"pure\" store should be kept. This new store might be a \"second layer\" store (I think you named it this way somewhere else). Am I understanding correctly?\nI think it may be inside the store but it should be configurable. For Glitch it should stay in project/node_modules or at some other location inside the docker image.\n\nSpecial care should be taken when calculating the hash for dependencies retrieved from GitHub: in this case the \"version\" has to be the commit hash at the moment of retrieving. Otherwise whatever#master will always be marked with the same hash.\n\nThis won't be an issue because we always resolve git-deps to commits. The package ID of a git dep always has the commit hash\n\nOnce this new second layer store is in place, are we going to use symlinking to node_modules by default? I am not yet sure if this would break things, I saw comments about --preserve-symlinks but I never fully understood them. If we could symlink everything, things are going to be a lot faster! On the other hand it would break the Glitch usecase, so I would still like to have a fallback to reflinks (let's remember that Glitch projects don't see the store, so I can't symlink to it).\n\nFor Glitch this new store will have to be inside the docker.\n\nLast but not least, what's the ETA for shipping this?\n\nIt doesn't sound super complex to me. Without bottlenecks I'd assume it would be under 4 days of work.\nThe one thing I don't know yet is whether the current lockfile format will be good for this new structure.. yes, you are correct.. Seems like to have this, the shrinkwrap.yaml format will have to change. The dependency paths will have to contain the \"dependency set hash\". Something like this:\nyaml\n  /@commitlint/config-angular/4.3.0/88009856b64a2f1eb7d8bb0179418424ae0452cb:\n    dev: true\n    resolution:\n      integrity: sha512-GLvwZVxCUMT92VGU0pTKi0RAbJDnm0BGZPEOL+dduKiJCgYH72ZRabgJrYwwRX/4Q+xZytp9TCG+oH6BnFFOwA==\n  /@commitlint/core/4.3.0/3d4f2bf07dc1be38b20cd6e46949a1071f9d0e3d:\n    dependencies:\n      '@marionebl/conventional-commits-parser': 3.0.0/356a192b7913b04c54574d18c28d46e6395428ab\n      '@marionebl/git-raw-commits': 1.2.0/17ba0791499db908433b80f37c5fbc89b870084b\n      '@marionebl/sander': 0.6.1/6216f8a75fd5bb3d5f22b6f9958cdede3fc086c2\n      babel-runtime: 6.26.0/011c945f30ce2cbafc452f39840f025693339c42\n      chalk: 2.3.0/7b21848ac9af35be0ddb2d6b9fc3851934db8420\n~EDIT:~\n~After a lot of thinking, I realized that not all the dependencies can be moved to this \"package snapshots\" layer.~\n~### Issue 1. Circular peer dependencies~\n~Packages that have peer dependencies can cause issues when calculating the dependency set hash. To calculate the dependency set hash, all the dependencies of the package should be resolved. If a package has a peer dependency, we are not in control when the peer dependency's hash will be generated. But that is not the biggest issue. The peer dependencies can have peer dependencies as well. And they may form a circle.~\n~For instance, package a has a peer dependency b and b has a as a peer dependency. Both packages can have regular dependencies as well. How to calculate the dependency hashes of these packages?~\n~### Issue 2. Packages that resolve their peer dependencies from the top dependencies of the project~\n~Currently, when a peer dependency of subpendency is resolved from the root, pnpm does not symlink the peer dependency to the subdepency's node_modules folder.~\n~### Solution~\n~We can do this \"package snapshots\" layer for packages that don't have any dependencies with peer dependencies. In other words, packages with a unidirectional dependency graph.~\n~This packages will be the majority, so we can mark packages that have bidirectional dependency graph in the shrinkwrap.yaml.~\nyaml\n  /a/0.3.11:\n    bidirectional: true\n    dependencies:\n      b: 2.3.0/88009856b64a2f1eb7d8bb0179418424ae0452cb\n    dev: true\n    engines:\n      node: '>=4'\n    peerDependencies:\n      b: ^1.0.0\n    resolution:\n      integrity: sha512-v3Flq4l1/1L+BuazvsxwwcQvd0QqnJjfY81qo69IQognSvhPIz+/ZBUrkvWNYk9e7tyvzvFYfnFkgMKGadIvaw==. @nickpape-msft, @pgonzal this might be of interest to you.. Specs are here:\nhttps://github.com/pnpm/spec/tree/master/shrinkwrap\nAnd there is a lib for manipulations: https://github.com/pnpm/pnpm-shrinkwrap. done. fixed in v1.31.0. @nigelzor thanks for your contribution!\nwe'll have to cover it with some tests in the future. :ship: v1.31.0. The reason it is so slow currently is because we use npm's programmatic API to read all the npm configs. We should probably implement our own config reader but that is not easy. npm allows really complex configurations.\nMaybe for simple commands like this one, we can skip reading the configs. A node_modules created by pnpm won't work with Node ran with --preserve-symlinks (https://github.com/pnpm/pnpm#limitations). It is a limitation of pnpm because we use symlinks. Though this flag will most probably be deprecated. Cool!. Strictness is just a nice bonus of pnpm's design. This strictness + the unique node_modules structure are the secrets of pnpm's speed.\nFlat node_modules is not a feature of npm/yarn, it is a side effect of their installation algorithm. We are not going to introduce complexity to pnpm to fix bugs that should be fixed by the ecosystem.. We can consider this after/if we implement #1001\nThat would be not earlier than pnpm@2. Please add a description of the new flag to pnpm help server. This was partially reverted.\nOnly a warning is printed.. Actually, I created a PR to npm-check: https://github.com/dylang/npm-check/pull/294\nI would love this feature but I won't be able to work on it in the near future. I currently concentrate my work on making pnpm the best pm for monorepos.. Sometimes fetching fails and the package is re-downloaded. It confuses the reporter because the fetching_started event is logged twice for the same package. :ship: 1.35.8. fixed in v1.31.0. This code is used to rename the unpacked folder: https://github.com/zkochan/rename-overwrite/blob/master/index.js. So now it waits only one time for 200ms. We can make it smarter. @vaaski seems like you have the same issue, so lets' see if the fix will help in your case as well. It is weird because rename-overwrite uses rimraf and graceful-fs both of which retry on EPERM. . I am changing to 8 retries during 7.2 seconds. Or should the delay be longer?. pnpm@1.31.2 will now retry renaming. Lets' see if the errors will stop happening. The retry that was added, only retries EPERM errors https://github.com/zkochan/rename-overwrite/blob/master/index.js#L37\nThere were lots of other changes as well since 1.30 but I haven't noticed such errors yet. > I think there must be a regression in this code somewhere. As soon as we upgraded to 1.31.2, I began seeing other errors, such as:\n\nWARN\u2009 There's a directory in node_modules without package.json: R:\\sp-client\\common\\temp\\node_modules.onedrive.pkgs.visualstudio.com\\request\\2.79 .0\\node_modules\\caseless\nIt looks like the particular version of caseless this symlink is pointing to doesn't exist. I wonder if we somehow swallowed an error while doing the rename?\n\n@nickpape-msft is it possible that a previous installation to the same project was interrupted? or that another installation is running in the same directory at the same time?\nI looked at the code that creates the node_modules folder for the dependencies, it is currently not an atomic operation, so it can get corrupted https://github.com/pnpm/supi/blob/master/src/link/index.ts#L258-L262\nWe have to link dependencies to a _stage folder and then rename the folder. It will prevent corruption of R:\\sp-client\\common\\temp\\node_modules\\.onedrive.pkgs.visualstudio.com\\request\\2.79.0\\node_modules\\. hm, maybe the issue is caused by a lock on the stage folder, not the target folder.\nThis part of tarball-fetcher makes me think that\n when a tarball is bad, pnpm doesn't stop unpacking the bad tarball\n pnpm retries the download before the bad tarball has finished unpacking\n* also, during the retry, pnpm unpacks to the same stage folder again, not even cleaning it up first. Unfortunately, I could not reproduce the issue (I tried with this package.json). However, your logs confirm my assumption, so I'm going to try and update the fetchers to use a new random stage folder every time during unpack. @nickpape-msft I published pnpm@1.31.5. @pnpm/tarball-fetcher will unpack to a stage folder and if the unpacking fails, it will unpack to a different stage folder. I believe in this case there should be no process hanging on the stage folder. This should work now in pnpm@1.31.6\nalso, I reverted the initial fix in rename-overwrite, which did not help. Cool, I'll have to optimize the code though because I added some redundant renamings. It was the fastest way to fix it. as far as I understand, the fix worked. With pnpm@1.32.1 I optimized the fetchers. I removed the redundant file operations that were added during the \"fast fix\". I think this is the only place where this type of error could happen:\nhttps://github.com/pnpm/package-requester/blob/master/src/packageRequester.ts#L440\nI don't know how would that be possible though.. renameOverwrite renames the folder not files inside the folder.\nThe reason I assume that that line of code fails is because it is the only operation that happens in the _stage folder before rename happens.. The copying issue that you remember was fixed by @etamponi and released in 1.25.1. This might be fixed in pnpm@1.31.6. We can use throttle to make fewer updates in the terminal.\nAlso, we can use my fork to log-update for reducing flickering. I reduced flickering in pnpm@1.31.4. It can be improved even more but it will require more work. You can also try a different reporter: append-only or silent.. \ud83d\udea2 1.32.0. :ship:  --use-running-store-server in v2.5.0. @rstacruz came up with the name. It means \"performant npm\". The description used to be \"performant npm install\". However, when Yarn came out, it wasn't enough to be performant anymore. We added the global store feature and changed the description. I wonder if it makes sense to print the time if it was faster than 2-3\nseconds?\nOn Mon, Jul 2, 2018 at 10:27 AM Daniel Ruf notifications@github.com wrote:\n\nWould like to see this too.\nAs I often let them run in different tabs and need to know how long they\ntake even if we have the local caches to know if I have to optimize a few\nthings.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1021#issuecomment-401695863, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm4SO2j1nt4nItbRv0WISdGX1aRRRks5uCctigaJpZM4RxaWO\n.\n. ok then. If it is more than 1 second, it will be printed out. Seems like it will take less than a second only when everything is up-to-date (https://github.com/pnpm/node-package-manager-benchmark). If someone wants to document it, I have no objections. So basically what you ask for is, some know-hows about how to investigate issues when something does not work with pnpm. Maybe also examples of workarounds.\n\nI can do that.. @deadcoder0904 in pnpm@1.34.0 a new flag was added to pnpm called --shamefully-flatten. When used, pnpm will create a flat node_modules. there is no way, as of now.\nI was thinking also about adding some mapping or caching the location of packages. On a big monorepo, the lookup of all the packages takes some time. We should support something like that but I don't know what would be the best way to support it. A new config file?. sounds good to me. It is a bug in own-or-env. It uses own-or but it has not own-or in its dependencies\nhttps://github.com/isaacs/own-or-env/blob/master/package.json. That config is for directory locking. There is no config for not generating\nshrinkwrap.yaml. just gitignore them if you don't want them in the repo\nOn Thu, Feb 1, 2018, 16:23 James Sumners notifications@github.com wrote:\n\npnpm version: 1.13.3 Code to reproduce the issue:\n\necho \"lock=false\" >> ~/.npmrc\npnpm install in a project without node_modules or shrinkwrap.yaml\n\nExpected behavior:\nNo shrinkwrap.yaml is created within the project directory.\nActual behavior:\nA shrinkwrap.yaml file is created in the project directory.\nAdditional information:\n\nnode -v prints: v8.9.4\nWindows, OS X, or Linux?: macOS\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1025, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm_Ak4MAERUKLLa0epcWHASJiLYFJks5tQcjagaJpZM4R1r9m\n.\n. We can have such config but the name should be different. lock is currently used for store/project directory locking (https://pnpm.js.org/docs/usage/configuring.html#lock)\n\nyarn has --no-lockfile, npm has --no-package-lock/--no-shrinkwrap\nwe can have --no-shrinkwrap as well. \ud83d\udea2 1.32.0. I mean, if there is a multi-package repo like this:\npackages\n+- foo\n+- bar\nand you cd to packages/foo then when you do pnpm install bar inside foo, bar will be downloaded from the registry. The expected result would be to link bar from packages/bar to packages/foo/node_modules/bar\nactual result\npackages\n+- foo\n    +- node_modules/.registry.npmjs.org/bar/1.0.0/node_modules/bar\n    +- node_modules/bar -> .registry.npmjs.org/bar/1.0.0/node_modules/bar\n+- bar\nexpected result\npackages\n+- foo\n    +- node_modules/bar -> ../../bar\n+- bar. but in a multi-package repo you always want to use the package from the repo, right? Currently, to do it, you'd need to manually edit the package.json of foo and then run pnpm recursive link in the root of the repo.. I agree it should be explicit.\nSo maybe it can be a new option. Like pnpm install bar --prefer-local\nadditionally, if you run install in a monorepo w/o this flag, a warning can be printed. Something like:\nWARN: foo is being installed from the registry although it is available locally at packages/foo\nTo link the local version, run install with the --prefer-local flag. After thinking about it more. It seems like the link command would be a better place to implement this.\nTwo things should be done:\n\npnpm link foo should look for foo inside the monorepo, before searching it in the global packages\npnpm link foo -S should add foo to package.json as a semver dependency (ref #871). Maybe it should work only if the package is from the same monorepo.. > I really would like to set some prefer-local true flag in some pnpmfile.js/.pnpmrc/whatever per project to use pnpm recursive install instead of pnpm recursive link to link local packages, but install everything else.\n\nSounds good\n\nOne could think pnpm recursive link will link every local package to the global folder.\n\nGood point. Somehow I did not think about it in the past. Maybe we'll have to change this.\n\nWhile writing this I wonder, if prefer-recursive would make sense as well thinkingSo pnpm install would be recursive in the monorepo root, but not in a leaf package. But this is as different topic.\n\nI think I like this idea. A config like prefer-recursive could be specified in an .npmrc in the root of the repo.\n. prefer-local might be a bit too vague. Maybe a more specific config should be used. Like ~prefer-packages-from-workspace~link-workspace-packages. > While writing this I wonder, if prefer-recursive would make sense as well thinkingSo pnpm install would be recursive in the monorepo root, but not in a leaf package. But this is as different topic.\nafter thinking about it more. I don't know if this would work. We have many recursive commands and it might cause confusion.\nFor instance, if you have a package.json in the root of your monorepo, you may want to list all of its dependencies. Currently, you can run pnpm list to do that. But with this option, pnpm list will behave like pnpm recursive list, so pnpm list will list dependencies of every package in the monorepo.. :ship: 2.11.0. Check it here https://pnpm.js.org/docs/en/workspace.html\nOn Sun, Jul 8, 2018, 19:12 Donald Pipowitch notifications@github.com\nwrote:\n\nCan you explain how this works now? Was it solved via a command now\ninstead of a preference in some config file? Thank you and have a nice day\n\ud83d\ude0a\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1027#issuecomment-403298259, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm_BzrsAV5Ph6l5SwoIjB-6AXfLfmks5uEi9ggaJpZM4R4y7P\n.\n. :ship: 1.32.1\n\nthe progress is printed every second. Though I noticed that the last message is repeated several times \ud83d\ude1e I'll have to fix that\nResolving: total 47, reused 28, downloaded 0\nResolving: total 127, reused 89, downloaded 0\nResolving: total 200, reused 174, downloaded 0\nResolving: total 310, reused 266, downloaded 0\nResolving: total 393, reused 353, downloaded 0\nResolving: total 489, reused 446, downloaded 0\nResolving: total 539, reused 484, downloaded 0\nResolving: total 617, reused 571, downloaded 0\nResolving: total 709, reused 678, downloaded 0\nResolving: total 842, reused 786, downloaded 0\nResolving: total 958, reused 951, downloaded 0\nResolving: total 958, reused 958, downloaded 0, done\nResolving: total 958, reused 958, downloaded 0, done\nResolving: total 958, reused 958, downloaded 0, done\nResolving: total 958, reused 958, downloaded 0, done\nResolving: total 958, reused 958, downloaded 0, done\nResolving: total 958, reused 958, downloaded 0, done. :ship: 1.35.8. This bug will happen only when shrinkwrap=false and it happens because pnpm compares the wanted shrinkwrap with the current one when removing orphan packages from node_modules. The solutions will be to use the current shrinkwrap as the wanted one, when shrinkwrap is false. the \"current\" shrinkwrap is in node_modules\\.shrinkwrap.yaml and it contains valuable information about the structure of node_modules. Without it, the number of required filesystem operations would grow significantly. fixed in pnpm@1.32.1. yes, but it is published with the next dist-tag, so try ... install pnpm@next. A workaround might be to run sudo npm install -g pnpm --ignore-scripts\nThe only issue is that in this case, pnpm won't be able to detect the disks on the machine. So it won't be able to automatically select a store location that is on the same disk. Of course, you can always manually specify the store location.. Isn't this a duplicate of #1034? anyway, this should be fixed from pnpm v1.33.0 as it has not native deps anymore. LGTM but you should use our commit message conventions: https://github.com/pnpm/pnpm/blob/master/CONTRIBUTING.md#commit-message-guidelines\nSo it can be docs(readme): add configuring example. I don't understand why npm tries to rename something inside node_modules. Everything in node_modules is bundled, so npm should not touch it.\nWe used to have a different approach. We moved node_modules to lib/node_modules and renamed the dependencies field in package.json. During publish npm ignores only the node_modules in the root of the package. So a node_modules in a subfolder gets published. That solution stopped working for some reason but I think if we want it to work reliably with npm, we should revisit it. By the way, that's how bower is published as well.\nYarn has a different approach. It bundles its sources with webpack. That might be a good solution as well\nThe one thing that makes it a bit harder is that pnpm has a native dependency: drivelist. Fixed in pnpm@1.33.2. pnpm is now bundled with its dependencies using publish-packed. We can add such command to @pnpm/self-installer but as of now you can uninstall pnpm only manually\nHere's the destination where it is unpacked:\nhttps://github.com/pnpm/self-installer/blob/93903e8bfa0e5b2cad5ab90ab517d0400285288e/src/install.js#L7. Maybe we should ask prebuild-install to make its cache location configurable? Currently, the npm cache is used\nhttps://github.com/prebuild/prebuild-install/blob/db38ad8979d0da439a1180e71979bd84a61a95aa/util.js#L68. From version 1.33.0, pnpm doesn't have drivelist in its dependencies, so this issue should be gone. I think you mixed up the actual with the expected. Does the github api\nreturn the integrity of the tarball. In that case this would be a really\nnice improvement. Our tarball fetcher retries fetching of tarballs if their\nintegrity doesn't match the expected one.\n:+1: from my side\nOn Thu, Feb 8, 2018, 12:38 adisbladis notifications@github.com wrote:\n\nIt would be useful to include integrity hashes in shrinkwrap.yaml.\nNot only can this provide tamper evidence in case of upstream tarballs\nchanging it's also useful for other things.\nI need this in my project pnpm2nix\nhttps://github.com/adisbladis/pnpm2nix/ (nix requires all sources to\nhave known checksums).\nExpected behavior:\ngithub.com/debris/bignumber.js/94d7146671b9719e00a09c29b01a691bc85048c2:\n  dev: false\n  name: bignumber.js\n  resolution:\n    tarball: 'https://codeload.github.com/debris/bignumber.js/tar.gz/94d7146671b9719e00a09c29b01a691bc85048c2'\n  version: 2.0.7\nActual behavior:\ngithub.com/debris/bignumber.js/94d7146671b9719e00a09c29b01a691bc85048c2:\n  dev: false\n  name: bignumber.js\n  resolution:\n    tarball: 'https://codeload.github.com/debris/bignumber.js/tar.gz/94d7146671b9719e00a09c29b01a691bc85048c2'\n    integrity: sha256-0s25j91rlba07i2y6bkhg9fgjmgy77lmaj9szp0nin7mzqgigdy1\n  version: 2.0.7\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1035, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm6EZyenUeTwwiII7Okqg3G9Zvkbtks5tSs6ygaJpZM4R-IjE\n.\n. See related issue #712. Do you have package-lock=false or shrinkwrap=false? This might be the same issue as #1029. no-lock is not the same as no-package-lock/no-shrinkwrap. #1029 had a bad title. The issue there is because of no-shrinkwrap not because of no-lock.\n\nCould you check the value of those two configs in your project?\nnpm get shrinkwrap\nand\nnpm get package-lock. :ship: 1.35.0. :ship: 1.38.2. This may cause issues with packages that use optional peer dependencies. We should support #1486\n. Here's the related issue at eslint-plugin-import: https://github.com/benmosher/eslint-plugin-import/issues/828\nThey admit that it is an issue on their end and they'd accept a PR. @olstenlarck in v1.34.0 there is now a flag called --shamefully-flatten. @olstenlarck you can create a .npmrc in the package that requires eslint with this content:\nshamefully-flatten=true\nif it is a monorepo and all packages need eslint, you may create that .npmrc file in the root of the monorepo.\nYou can also set shamefully-flatten globally by running: pnpm config set shamefully-flatten true. I don't know how to use webpack dashboard. Do you have a repo that will help to reproduce the issue?. this hook seems to help:\njs\nmodule.exports = {\n  hooks: {\n    readPackage (pkg) {\n      if (pkg.name === 'inspectpack') {\n        pkg.dependencies['babel-traverse'] = '^6.26.0'\n      }\n      return pkg\n    }\n  }\n}. inspectpack should add babel-traverse to its package.json because it is used here \nhttps://github.com/FormidableLabs/inspectpack/blob/1fa1c0f7052e28e61d4ac8448234e9d34516124a/lib/actions/parse.js#L6. > So you basically traverse all the code or is there a script that finds packages that are not in package.json ?\nthere is no such script. I wanted to make one but didn't finish it yet. Here's the code: https://github.com/pnpm/node-modules-check\nit is not hard to find these errors when code fails. Basically there was an error message like this:\nError: Cannot find module 'babel-traverse'\n  at /node_modules/.registry.npmjs.org/inspectpack/2.2.3/node_modules/inspectpack/lib/actions/parse. @vjpr this was done, right?. This won't happen anymore. From version 1.33.2, we don't use npm during pnpm's installation anymore and we don't have the native dep anymore. I'd suggest adding a new config called prefer-ignore-scripts. In future major releases, we might make this config true by default.\nHow should this config work? That is really hard to decide because scripts can be used for all kinds of stuff. Some scripts might depend on the package's content, not only its dependencies...\nI suggest this behavior:\n run scripts when anything in node_modules has changed\n run a specific script when its commands have changed. For instance \"postinstall\": \"tsc\" was changed to \"postinstall\": \"tsc --pretty\"\n* there should be a way to force the run of scripts. Maybe a new flag --run-scripts. I will probably try to implement this soon because the changes I did in #1089 are causing too many builds. I like the way Yarn does it. We can do the same in pnpm. Creating a package.json file and a shrinkwrap.yaml file. :ship: 1.35.3. Have you tried the standalone script?\ncurl -L https://unpkg.com/@pnpm/self-installer | node. can you check what location pnpm is currently executed from? I mean, the 1.31.6 version. Then you could either manually remove it from there or specify PNPM_BIN_DEST for @pnpm/self-installer.\ncurl -L https://unpkg.com/@pnpm/self-installer | PNPM_BIN_DEST=/current-pnpm-bin-location node. We don't need a new command. We already have pnpm i -g pnpm. It should just be fixed.\nInitially, do you remember how you installed the previous version of pnpm?\nEDIT:\nI guess we could use which to find where pnpm is linked to and then install it there. @deadcoder0904 which node on your machine returns /usr/local/bin/node, right?\nWe currently use process.execPath as the target of the pnpm bin. As far as I understand, from the npm repo, they rewrite process.execPath with the location of Node.\nhttps://github.com/npm/npm/blob/5e426a78ca02d0044f8dd26e0c5f881217081cbd/lib/npm.js#L252\nThat is probably what we have to do as well. the standalone script should work now\npnpm i -g pnpm not fixed yet. The fix has been published with pnpm@1.35.6. So when you'll have a version >=1.35.6 you should be able to update pnpm to the next version. I guess you could test it earlier by downgrading pnpm from v1.35.6 . what does which pnpm return?. and what is the content of /usr/local/bin/pnpm?. yes, and it should contain a reference to the globally installed pnpm. What is the content of the executable?. I see, so it is a symlink executable. Thanks, it helped. I'll look into it. Thanks, @pgonzal, now it makes sense to me.\nSo seems like pnpm does not check whether the tarball has been modified and so does not try to update its dependency graph.\nThe solution should be probably to add the tarball's integrity to shrinkwrap.yaml and verify it on each install/update. If the shasum has changed, the dependency graph has to be updated.. Yes, here. Lets' keep both though. The format in the shrinkwrap will be similar but the implementations will be different. The implementation is a bit confusing to me but maybe its fine.\nWe store the integrity checksums in resolution.integrity, so for the local tarballs, I want to put the checksum there. However, the expected behavior for a checksum mismatch is currently an error.\nFor instance, if foo v1.0.0 was installed with integrity X and during installation it has integrity Y, installation fails.\nFor a local tarball though, an integrity mismatch will mean that the tarball should be re-installed and updated in the shrinkwrap.yaml. A repacked tarball with the same content would have a different integrity? I don't know how to solve that issue on pnpm side.. yeah, I think this solution should be fine\nwe can also add a --frozen-shrinkwrap flag in the future that will fail installation if an update will be needed to shrinkwrap.yaml (similar to Yarn's --frozen-lockfile). It is harder than I initially thought but maybe it will be ready this week.. yes, lets' make a separate one for --frozen-shrinkwrap.\nThe solution for this issue is the same as what we discussed above. It just required a little bit more changes than I expected. But it might be ready today :tada: . :ship: 1.35.2. also, husky@next works fine with pnpm. They even added a test to maintain compatibility with our node_modules structure :heart:.. The current format of shrinkwrap.yaml has nothing extra, only the things that are needed to create node_modules w/o the resolution stage. So I don't think it can be minimized further.\nI think what you need is a custom git merge driver for shrinkwrap.yaml. npm is now able to automatically resolve conflicts in package-lock.json and npm-shrinkwrap.json. We can as well implement a merge driver for shrinkwrap.yaml.. > So theoretically the variables we need to lock down are the matching versions in the NPM registry.\nas it is right now, one version spec can be resolved differently for different packages in node_modules.\nSo if there is foo and bar, both of which have \"qar\": \"^1.0.0\", then qar can be resolved differently for foo and bar, that's why shrinkwrap.yaml has to map the resolved dependencies for each package:\nyaml\n/foo/1.0.0:\n  dependencies:\n    qar: 1.0.0\n  ...\n/bar/1.0.0:\n  dependencies:\n    qar: 1.1.0\n\nThis seems like it would complicate the setup for people who want to enlist in our monorepo.\n\na postinstall script can configure the merge driver. I published a \"beta\" version of the merge driver: @pnpm/merge-driver. In order to install it, install the driver globally: pnpm i -g @pnpm/merge-driver (or `npm i -g @pnpm/merge-driver)\nThen run this command in the repo which gets the conflicts on merge:\npnpx npm-merge-driver install --driver-name pnpm-merge-driver --driver \"pnpm-merge-driver %A %O %B %P\" --files shrinkwrap.yaml\nP.S. The installation steps will be easier but I wanted to give it sooner as it seems to be a big problem for you. \nThe auto-merger will only fail if the same fields were modified in package.json. So it should solve all the issues. @rarkins I noticed that @renovate-bot can solve the conflicts in shrinkwrap.yaml files. \nAnd I don't think that a custom git merge driver is used.\nCould you please share how renovate resolves conflicts in the lockfiles?\n\nEDIT:\nI guess I understand, the bot realizes that there is a conflict, it removes the shrinkwrap, creates a new one and resubmits the shrinkwrap.\n. > @zkochan what would be involved for the other approach? Today is there a way to tell \"pnpm install\" to \"ignore any version from the registry that was published after timestamp X?\" If not, would it be a nontrivial work item?\nI think that would be possible to do with npm-hosted dependencies.. First I was not planning to add a new config file (packages.yaml). @vjpr suggested using pnpmfile.js. However, pnpmfile.js is ignored when --ignore-pnpmfile is used (we plan to ignore it on --ignore-scripts as well).\nThis property works in a similar fashion as the packages field in lerna.json or the workspaces field in package.json (used by Yarn). TBH, I am not sure recursive is a good command name. But maybe pnpm-recursive.yaml in that case.\nOr if the field name makes confusion, maybe it can be renamed to dirs.\nI also like the term \"workspace\". vs code uses it to call a bunch of packages grouped together. Unfortunately, Yarn used the same term to describe a package in a multi-package repo. I think workspace.yaml or pnpm-workspace.yaml would be good naming but it might introduce confusion.\n. According to Wikipedia:\n\nA workspace is (often) a file or directory that allows a user to gather various source code files and resources and work with them as a cohesive unit.\n...\nGood examples of environments that allow users to create and use workspaces are Microsoft Visual Studio and Eclipse.\nhttps://en.wikipedia.org/wiki/Workspace\n\nSo pnpm-workspace.yaml should be a valid name for this case. The pnpm- prefix should avoid confusion, nobody will mix it up with Yarn workspace.. I'd also mention the new config: shamefully-flatten. If it is hard to fix the issue with hooks, it is faster to use flattening . So link: should be a synonym of file: but for directories only.\nFor path: I would just throw a meaningful error. Both npm@5 and Yarn throw an error for it. Here's what I got from npm:\nconsole\nnpm ERR! code EUNSUPPORTEDPROTOCOL\nnpm ERR! Unsupported URL Type \"path:\": path:../foofoo. :ship: v1.35.4. Did you use the latest npm?. Do you need it to work inside a multi-package repository?. Weird because according to this issue npm migrated to using the link: protocol as well. yes, I can reproduce it. We can create a new issue. Seems like at the end of RFC they chose to keep file: \ud83d\ude22 . Throw an exception if strictSSL is true and post the stack trace here. I wonder if this happens during resolution or fetching. Seems like it is passed to both the resolvers and fetchers properly:\nhttps://github.com/pnpm/pnpm/blob/1b86b3294aa8e58376c9c0336fd928b50c1e2a7e/src/createStore.ts#L37-L38. I've found the issue.. :ship: 1.35.3. :ship: 1.35.6. Can you publish such package to the npm registry?. Seems to work as of v2.25.2. We currently give SIGINT and SIGTERM exit code 1 in order to remove locks\nhttps://github.com/pnpm/pnpm/blob/eb65d73c54990ed9f1afb1c973c1cf553d046b87/src/main.ts#L1-L5\nif we remove that code, pnpm-debug.log will not be created. I will unlikely work on this. If someone would like to implement it, it should be done in @pnpm/git-resolver.\nalso, @andreypopp already tried to do it a while ago\nhttps://github.com/pnpm/pnpm/pull/557. :ship: 1.36.0. :ship: 1.35.9. maybe, but as a temp workaround, you should be able to use --reporter append-only. @vjpr my suggestion would be to allow returning a function from pnpmfile. That function can receive an object with the working dir where pnpm does installation and the log function\npnpmfile.js:\njs\nmodule.export = (pnpm) => {\n  pnpm.log(`Hello world from ${pnpm.wd}`)\n  return {\n    hooks: {}\n  }\n}. I guess we could make those files executable during installation.\npnpm doesn't really need them to be executable because pnpm always creates shell scripts in .bin folders (related: #1282)\nAs a workaround, you can use spawn('node', [bin, ...args])\n\nyou'd need to do that anyway because even npm/yarn don't make the bin files executable on Windows. It might.\nI think that would be an edge case but if you have it, you may use the shamefully-flatten flag.. :ship: 2.25.3. Could you please try with the latest pnpm? I fixed something related in pnpm@1.35.9. have you recreated the shrinkwrap.yaml with pnpm@1.35.10? The issue really seems like what I fixed in pnpm@1.35.9. The fix was to add the tarball URL to the resolution field of the scoped package but you have to recreate the shrinwrap.yaml. It is possible to configure pnpm recursive install to do installation in project/pnpmfile/ then in project/. It should be faster than the preinstall script.\nBut project should depend on project/pnpmfile. Otherwise, pnpm will do installation in both projects concurrently. So you can create a package.json like this:\njson\n{\n  \"name\": \"pnpmfile\",\n  \"version\": \"1.0.0\"\n  ...\n}\nand then in project/package.json, add pnpmfile as a dep:\njson\n{\n  ...\n  \"pnpmfile\": \"^1.0.0\",\n  ...\n}\n. A dependency can influence the installation of the dependent package if it is used in a lifecycle script.\nI believe lerna installs this way as well. oh, the right command will probably be pnpm recursive link because pnpm recursive install will try to install pnpmfile project/ from the npm registry. First of all, Yarn uses a different registry by default (https://registry.yarnpkg.com/). So that might influence the results. Both pnpm and Yarn should use the same registries.\nAlso, for the comparison to be fair, both pnpm and Yarn should run with cold cache.\nNo shrinkwrap.yaml and yarn.lock files should be present.\nYou can use code from https://github.com/pnpm/node-package-manager-benchmark to do proper benchmark tests.\nAs of now, pnpm is faster than Yarn, on most of the projects, when doing clean install with cold cache. And a lot faster with hot cache, no lockfile. However, Yarn is faster when a lockfile is present. I am working on making pnpm faster when a lockfile is in place.\n. It seems like you try to convince that Yarn is currently faster and it is impossible to make a js package manager that is faster than Yarn. Even npm@5 is faster than Yarn on many projects. Especially npm ci.\nIf you can make and share a reproducible example where pnpm is slower than Yarn, we will try to optimize pnpm for that use case.\n\nI watched pnpm, but it was serial.\n\nWhat do you mean? pnpm downloads multiple tarballs at a time, same as Yarn and npm@5\n(I speak Hungarian by the way). ha:) I just noticed you're from Hungary and I am Hungarian as well. But yeah, I also speak Ukrainian and Russian.\nIf you need to do installation in many projects at the same time, you can use pnpm recursive install or pnpm recursive link and it will be much faster. (https://pnpm.js.org/docs/usage/pnpm-cli.html#recursive-install)\nAlso, you can run a service for the store. pnpm service start, in that case, all interactions with the store will be done by a separate process.\nIf you want just to discuss something or have a quick question, you can always write to our gitter chatroom: https://gitter.im/pnpm/pnpm. I guess I am OK with it but then let's make it a non-executable file. The reason for that is because some toolings (like renovateapp) run pnpm with --ignore-scripts, --ignore-pnpmfile flags and so the hooks in pnpmfile.js are ignored.\n. Not just renovate. @etamponi also wanted to avoid an uncontrolled executable to be run by pnpm. That's why he implemented --ignore-pnpmfile.\nI think YAML would be good because that's the format we mostly use. And I think it would be enough just to specify the overrides like this:\nyaml\nreact-native@0.52.0:\n  metro: npm:metro-pnpm@0.24.7-vjpr.1\n  # 'metro-resolver': '~/dev-live/metro/.dev/metro-resolver-0.28.0.tgz'\n  uuid: * # Libraries/Blob/Blob.js\nreact-native-scripts:\n  expo: *\nYou can override optional dependencies but I don't think anyone would like to add new optional dependencies. Why would that be needed?\nPossible name: pnpm-subdependencies.yaml. Could you please create a repo to reproduce the issue? I don't really know what is laravel and how to use it. You should install webpack as a dependency.\nThat fixes the first issue but then this happens:\n```\n\nuikit@1.0.0 watch /home/zkochan/src/test/lar\ncross-env NODE_ENV=development webpack --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\n\ninternal/modules/cjs/loader.js:573\n    throw err;\n    ^\nError: Cannot find module '/home/zkochan/src/test/lar/node_modules/.registry.npmjs.org/laravel-mix/2.1.11/webpack.mix'\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:571:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:497:25)\n    at Module.require (internal/modules/cjs/loader.js:626:17)\n    at require (internal/modules/cjs/helpers.js:20:18)\n    at Object. (/home/zkochan/src/test/lar/node_modules/.registry.npmjs.org/laravel-mix/2.1.11/node_modules/laravel-mix/setup/webpack.config.js:12:1)\n    at Module._compile (internal/modules/cjs/loader.js:678:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:689:10)\n    at Module.load (internal/modules/cjs/loader.js:589:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:528:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:520:3)\n```\n. Seems to work with latest laravel-mix v4\nif pnpm creates a flat node_modules (there seem to be some issue with babel with non-flat node_modules)\nTo create a flat node_modules, you can have a .npmrc in the root of your project, with the following content: shamefully-flatten=true. See my proposed solution here. :ship: 1.43.0. I'd suggest implementing some helper-package that would do it. We try to do as few fs operations as possible.. Why not just a postinstall script? The node_modules/.shrinkwrap.yaml file can be used to get the structure of folders in node_modules. but would you always need those folders? You only need them when you debug something.\nFor an idea how to read shrinkwrap.yaml:\nhttps://github.com/pnpm/headless/blob/7eb1bae025169ce47abfd9a40a95f478a3ed1f3a/src/index.ts#L210-L265. :ship: 1.36.2. @vjpr why does the afterReadPackages have a pkg argument?\nI think I'd call the hook: postResolution.. to reduce ambiguity, I'll call it afterAllResolved. I assume it would make sense if we would bootstrap the packages in random order. However, we install them concurrently in chunks and each chunk has all of its dependencies bootstrapped before.\nThe only issue of the way pnpm does it currently: the output is messy. This is a good idea because we'll be able to run installation in every package concurrently. Currently, we can run installation concurrently in independent groups (chunks). One group at a time. @ExE-Boss seem to have this issue as well.\nThere were many reasons for these issues. I think in pnpm v2.8.0 the chances are greatly reduced to see them again.\nBut I noticed that they still happen sometimes with the --shamefully-flatten flag.\n@vjpr, @ExE-Boss when you had these errors, did you use --shamefully-flatten?. does this still happen with latest pnpm?. Do you mean that each log object should have the package dir?. > version 5.64.4 of office-ui-fabric-react is installed\nthis I will fix\n\nShrinkwrap file is unchanged \n\nOnly the integrity of file:projects/newtestpnpm.tgz and file:projects/oldtestpnpm.tgz will be updated in the shrinkwrap file. I don't have a solution for that currently. That is actually the expected behavior. :ship: 1.37.2. Regarding npmrc. We can update pnpm recursive to make it read the .npmrc file of each package. And it will work with shamefully-flatten=true. Some configs will be ignored though. We initialize the store controller once for pnpm recursive, so any store-related configs will be ignore in subpackages.\nRegarding pnpmfile.js. As of now, package-specific pnpmfile.js are used. However, I assume that in a monorepo, most of the hooks would be shared. So I think it would make more sense to read one pnpmfile in the root of the monorepo. We can update the pnpmfile format. It can return a function that accepts the package location. In that case the pnpmfile can return different configurations for different subpackages\njs\nmodules.exports = (projectDir) => {\n  if (projectDir === 'packages/foo') {\n    return {\n      // some hooks\n    }\n  }\n  return {\n    // some default hooks for all the other projects\n  }\n}. What would be the expected behavior if one runs pnpm recursive install --no-shamefully-flatten? Currently, configs passed via the CLI args have priority over configs in .npmrc. But I am not sure that would be expected in a monorepo, if one of the packages has a custom configuration.. Will be merged once we drop Node 4 support in pnpm v2\nOn Wed, Mar 28, 2018, 14:11 renovate[bot] notifications@github.com wrote:\n\n@renovate https://github.com/renovate[bot] requested your review on:\npnpm/pnpm#1095 https://github.com/pnpm/pnpm/pull/1095 fix(deps): update\ndependency camelcase to ^5.0.0 as a code owner.\n\u2014\nYou are receiving this because your review was requested.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/1095#event-1545327067, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm4QffJOmuUC4Mekgts6l7l4A4HEJks5ti2_AgaJpZM4S-czw\n.\n. @pierreozoux we communicate closely with the npm team but they would not use our approaches.\n\nThere are several reasons for that: \n\npnpm uses a non-flat node_modules. Some packages rely on the flat node_modules. Even though pnpm's strictness is superior (https://medium.com/pnpm/pnpms-strictness-helps-to-avoid-silly-bugs-9a15fb306308) the switch would cause too much trouble for npm\npnpm uses hard links. The npm CLI team believes that disk space is cheap and it is better to copy dependencies instead of linking them from one place.\npnpm uses symlinks, so node_modules created with pnpm won't work with the --preserve-symlinks flag of Node\n. Configs should be in .npmrc. So you can just created a .npmrc with shamefully-flatten=true in the root of the problematic project.\n\nMaybe we could create the config file automatically in such cases? There is this idea: #820. what would be the best strategy for publishing? lerna seems to be the most popular publishing tool for monorepos. There is also oao with a similar approach to lerna's. And there is also rush which forces to describe every change in a json file if I understand it correctly.. This sounds good to me. More complex logic can potentially be implemented in something like pnpm recursive version.. @ericclemmons try with workspace concurrency 1\npnpm m run release --workspace-concurrency 1. As of v2.15.0 I recommend using pnpm recursive install with the link-workspace-packages set to true. In a future version of pnpm, we'll probably reimplement pnpm recursive link into something else.\nThis is what pnpm recursive install would do in this case:\nOn step 4 it would unlink bar and install bar 1.0.0 from the registry. IMO this is expected behavior.\nTo update bar in foo, you can now just run pnpm update bar@latest inside foo. It will update the specs correctly and link bar from the repo. Alternatively, you can run pnpm recursive update bar@latest -- foo from anywhere in the repo.\nNote: you need to have a pnpm-workspace.yaml in the root.. I like the yaml format. I'd be OK with this feature. However, we currently don't implement the publish command and publish would have to convert package.yaml to package.json. The requiresBuild: true field is added to packages that have install lifecycle hooks. Seems like that is enough information.. @etamponi can answer this question with details (if that is public information) but physically the node_modules are linked from the same store.. @deadcoder0904 I'll try to explain how I understand it but I cannot be 100% because I did not work on it. I only helped with pnpm features that glitch needed to make it work.\nEach remix in glitch is a container. The pnpm store server runs outside of the container but on the same physical disk. The application does not have access to the store location but the store server can create hard links or ref links from the global store to the container.\nSo yes, many projects on glitch share one store. That is what causes the disk space savings.\nAnd the beauty of it is that apps cannot corrupt the shared store. They don't have access to it.. :ship: 1.40.2. ~Seems like to optimize this, we have to add some of the lifecycle hooks to shrinkwrap.yaml as described in #1101~\n\nTo have a quick fix for the performance issue, I recommend adding a new boolean property to the package snapshots in shrinkwrap.yaml. The new property can be called requiresBuild. requiresBuild is true in this cases:\n\nthe package has lifecycle hooks in package.json\nthe package has a .hooks folder\nthe package has native addon modules\n\nshrinkwrap.yaml example:\nyaml\n...\npackages:\n...\n  /node-sass/4.8.3:\n    dependencies:\n      async-foreach: 0.1.3\n      chalk: 1.1.3\n      ...\n    requiresBuild: true\n    dev: false\n    engines:\n      node: '>=0.10.0'\n    resolution:\n      integrity: sha512-tfFWhUsCk/Y19zarDcPo5xpj+IW3qCfOjVdHtYeG6S1CKbQOh1zqylnQK6cV3z9k80yxAnFX9Y+a9+XysDhhfg==\n.... yes, correct. as a fast solution, I am now requesting the full metadata from the registry, which contains the scripts field.\nLater we can switch back to non-full metadata and read the package.json from the unpacked tarball.. :ship: 1.40.0. @sleeparrow I think the issue is that pnpm did not successfully update itself. Check pnpm -v. We have this issue: #1052\n. > I wonder if it could be avoided by symlinking all files instead of hardlinking them: make all the directories where they would be expected, and where you would normally hardlink, make a symlink to .registry, which symlinks or hardlinks to the cache.\nI don't understand what you mean. That is what we currently do, symlink the folder from node_modules/.registry.npmjs.org/.... I would love to symlink directly to the store, here's an issue about it: #1001\nHowever, some packages rely on their location and they expect to be in a subfolder of project/node_modules/..., so I think we should increase adoption of pnpm before symlinking from store. It is already hard with the strict node_modules :-(. :ship: 1.41.0. :ship: 2.2.0. I am thinking about calling the hook a bit later in code (after the peer dependencies resolution step). That would allow passing in the shrinkwrap object\njs\nmodule.exports = {\n  hooks: {\n    afterAllResolved (shr, context) {\n      context.log(`Resolved ${Object.keys(shr.packages).length} packages`)\n      return shr\n    }\n  }\n}. The shrinkwrap object would not be read-only. As for the use case, the original use case is described in #1088. The shrinkwrap rewrite use case I don't really know.. which pkg? afterAllResolved is called once, after all the packages in node_modules were resolved. oh, that was an error in the issue: https://github.com/pnpm/pnpm/issues/1088#issuecomment-381478408. :ship: 1.41.0. It should work now in v1.41.0. Actually, the shrinkwrap.yaml format seems correct. You are right, in most cases, the value is a version. It is a version when:\n\nthe package is from the default registry (the one that is in the registry field of shrinkwrap.yaml)\nthe dependency is not installed with an alias name\nthe package has no peer dependencies.\n\nthough pnpm install should not fail. There is this https://github.com/pnpm/spec/blob/master/shrinkwrap/3.4.md. And here are some utils for manipulations with shrinkwrap: https://github.com/pnpm/pnpm-shrinkwrap. :rocket: . :ship: 1.41.0. Until we have such feature, you can use pnpmfile.js to avoid warnings about not satisfied ranges (not missing peer deps). Something like this: \njs\nmodule.exports = {\n  hooks: {\n    readPackages (pkg) {\n      if (pkg.name === 'deck.gl') {\n        pkg.peerDependencies['luma.gl'] = '*'\n      }\n      return pkg\n    }\n  }\n}. @pgonzal, you could run pnpm with the --no-update-notifier flag as @vjpr discovered in this issue: #1122. As far as I understand, this is only about peer dependencies currently. So maybe it can be a config called --strict-peer (or --strict-peer-resolutions). As there are already similar flags: --strict-ssl and --engine-strict. > WARN\u2009 using --no-lock I sure hope you know what you are doing\nThis warning I have removed. Maybe we even have to make --no-lock the default behavior because it is really buggy #594\n\nWARN\u2009 webpack > watchpack > chokidar: Skipping failed optional dependency fsevents@1.2.0\n\nI think there is no need to print anything about skipped non-direct optional dependencies. And we can print info messages about skipped direct optional dependencies.\n\nWARN\u2009 deprecated gulp-util@3.0.8: gulp-util is deprecated - replace it, following the guidelines at https://medium.com/gulpjs/gulp-util-ca3b1f9f9ac5\n\nI would keep it a warning but I don't think the app should fail on this. @vjpr I created #1142. So you'd want the installation to be finished, the node_modules created but the process to return a non-zero exit code? And an error to be printed?\nIt would be easier to implement just an exception throw.\nAlso, what about optional dependencies? I guess in case of optional dependencies, an unsatisfied peer dep should mean that the optional dependency should be skipped, right?. > Ideally the shrinkwrap should not change after it has been installed on multiple platforms. That is, if an optional dep installs on Linux, it should not be removed when pnpm i is ran on macOS.\nCorrect, pnpm will generate the same shrinkwrap.yaml regardless of the system. Even if some dependencies are not installed on Windows, they will be resolved and added to the shrinkwrap.yaml. It is how it currently works.. >>  Also, what about optional dependencies? I guess in case of optional dependencies, an unsatisfied peer dep should mean that the optional dependency should be skipped, right?\n\nSorry, I don't follow what you mean.\n\nI mean if we implement a flag like --strict-peer and an optional dependency has unresolved peer dependency, then the optional dependency should skipped during installation.\n\nWhat if your the error is at the end of your build...and then there is another error right after it. Then you have to wait ~2 hrs to see all the errors.\nWe should have a flag to --fail-on-first-error. This would not be default behavior IMHO.\n\nOne bad apple spoils the whole bunch. If there is one error, how do you know that the subsequent errors are not caused by the first one? I would suggest to terminate the installation on the first error.. We can implement the strict-peer config first. Seems like that's what you need. @qlonik  you use the wrong flag. Try --silent. @KSXGitHub I think it happens because you cache node_module. Try removing https://github.com/ksxnodemodules/nodemonorepo/blob/02426132ebe5c153235e77c14c2968f48f836d95/.travis.yml#L21-L22. @solsson This is probably an issue with jest-runner. They use jest-environment-jsdom but it is not in its package.json.\nYou can create a pnpmfile.js with this content in the root of your package to hack the manifest of jest-runner:\njs\nmodule.exports = {\n  hooks: {\n    readPackage (pkg) {\n      if (pkg.name === 'jest-runner') {\n        pkg.peerDependencies = pkg.peerDependencies || {}\n        pkg.peerDependencies['jest-environment-jsdom'] = '*'\n      }\n      return pkg\n    }\n  }\n}\nNote: you'll have to remove node_modules and shrinkwrap.yaml and rerun pnpm install.\nIf there are other issues, you could also create a flat node_modules\npnpm install --shamefully-flatten\nAlso, I'd create a PR to jest-runner to add jest-environment-jsdom to its package.json. @pgonzal yes, I did notice this as well. It worked like this always. I think it is a Node.js thing. Try to install with --network-concurrency=1. If that helps, maybe we could download large files in a separate process?. I think what we could try out is: limit the total size of packages that could be downloaded simultaneously.\nFor instance, if the limit (bandwidth) is 1MB then only 2 tarballs 0.5MB each could be downloaded simultaneously or 1 tarball with a size bigger than 1MB.. Related #852. I tried the following: when a tarball is bigger than 5 MB, don't download multiple tarballs (the open connections are finished but new ones are started only when the big one finishes downloading). This change has solved the issue of slow download of big files. However, it seems like it also slowed down the overall installation speed.. Closing this as the initial issue was fixed and #1126 was created to make strict warnings. At first sight, it seems like it is related to peer dependencies resolution. But in that case, I am not sure why removing of node_modules does not solve the issue.. I think I've found the issue. Pruning of node_modules removes too much. I will work on it. @pgonzal please try pnpm@1.41.3. No problem, I've been seeing this issue myself. The steps and the shrinkwrap files you provided helped to figure out the cause.. Why didn't you use pnpm uninstall next?. I am working on it but it will work only when shared-workspace-shrinkwrap is false.. :ship: 2.24.0-0. shrinkwrap.yaml locks down the dependency graph if the shrinkwrap file is up-to-date with the package.json file.\nIf someone edits the package.json manually and runs pnpm install, then pnpm will update the shrinkwrap.yaml. But then it is locked down. If you use the --frozen-shrinkwrap flag then pnpm will fail on out-of-date shrinkwrap.yaml. It is an option that you could use on a CI server.\nThe biggest proof that shrinkwrap.yaml does lock down the dependency graph is that we implemented a separate installation algorithm (@pnpm/headless) which is used when shrinkwrap.yaml satisfies the package.json. Headless installation doesn't even contain the resolution algorithms, all it can do is fetch the dependencies and create the node_modules folder using info from the shrinkwrap.yaml file. Installation will also fail if the integrity of the fetched package does not equal the integrity that is present in shrinkwrap.yaml (see: https://github.com/pnpm/pnpm/blob/d2321eb757a79d2bef82e8c1919a469ae6b70da2/shrinkwrap.yaml#L139). Your use case seems non-trivial. Usually using pnpm link is a temporary thing to check some changes before publishing. In that case, one would link a dependency from a local directory and once all the checks are done, pnpm dislink would restore the package from the registry.\nIf packages are linked to each other all the time, during development, I would suggest using a multi-package repo. pnpm has a special command called pnpm recursive link, which links packages in a monorepo and installs their deps. In this case you could commit the shrinkwrap.yaml files.\nBut returning to your initial question, in your situation ignoring the shrinkwrap.yaml files is the only solution as of now.. Actually, you could still use pnpm recursive link in your environment. You can run pnpm recursive link in your src/ folder and it will link-up everything.. I would suggest making it a config in pnpm-workspace.yaml. In that case it won't be a breaking change and it will be less redundant fs operations.. @etamponi I called the directory connection-info but maybe it would be better to call it public?. :ship: 1.42.0. You mean not printing an info message even for the skipped root optional deps? I think that's too match. There could be different reasons for a failing optional deps. Maybe it just requires Node.js 10. I would like to see that printed and maybe I'd just switch to Node.js 10 to satisfy the dependency.. Thoughts.\nIf the warning is about a resolved peer dependency that does not satisfy the wanted range and the peer is resolved not from a root dependency. Should installation fail in that case? The user project does not control the peer resolution in this case.\nI think it should only fail if the peer is resolved from the root dependencies or the peer is not resolved at all.\nThis fails:\nnode_modules/\n  a@1.0.0\n  b@1.0.0 (peerDependencies: a@^2.0.0)\nThis does not fail:\nnode_modules/\n  some-dep\n    node_modules\n      a@1.0.0\n      b@1.0.0 (peerDependencies: a@^2.0.0)\nThis also fails:\nnode_modules/\n  some-dep\n    node_modules\n      b@1.0.0 (peerDependencies: a@^2.0.0)\nAnd this fails as well because even though b is a subdependency, its peer is resolved from a root dependency:\nnode_modules/\n  a@1.0.0\n  some-dep\n    node_modules\n      b@1.0.0 (peerDependencies: a@^2.0.0)\ncc @etamponi, @vjpr, @pgonzal. OK, I'll have to fix the example, let's just say that it will fail only\nwhen the peer dependency is badly resolved from a root dependency (or not\nresolved at all). Otherwise, a fail would be really counter productive as\nthe user doesn't have control over subdepencies.\nOn Sat, May 19, 2018, 17:47 Emanuele Tamponi notifications@github.com\nwrote:\n\nOk I got through them again and finally understood that \"peer dependency\"\nis just a silly way of saying \"forced dependency version range\"... Anyway!\nIf my understanding of peer dependencies is correct, then the only example\nthat you mark as \"should not fail\" is wrong (which might mean that I didn't\nunderstand peer dependencies well enough). If b peer-depends on a@^2,\ntheb a@^1 can't be installed at all by the same sub-dependency, so the\nprocess fails but not because of strict-peer, just because of peer!\nOn the other hand, perhaps your example means that a@1 is installed by\nsome other sub-dependency. In this case, b still peer-depends on a@^2, so\nstrict-peer should make the installation fail.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1142#issuecomment-390409870, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm6Y7juEDBgZHG_wQxf-wAqor6CWjks5t0DBtgaJpZM4T0Fut\n.\n. @pgonzal alright, I understand why this option would be useful to have an effect on the whole dep graph. But I think we would not make it the default behavior as too many packages are broken this way in the ecosystem.\n\nFailing only on the root dependencies would be less frustrating and I think it would be fine to have that by default.\nSo we should probably have two configs or one config that can have a depth. Something like --strict-peer-depth. Or --strict-peer-in-root-only and --strict-peer\n\nor these configs:\nallow-missing-peers, allow-bad-root-peers - true by default. Might get false in the future\nallow-bad-peers - true be default\n. So two options: --strict-peer and --strict-direct-peer\n. AppVeyor is very slow, so we test only the oldest supported version of Node.js there.. The first time it will most likely pass but after getting node_modules from the cache, it will probably fail. I tried it in the past, Travis breaks the symlinks inside node_modules when archiving.\nA possible solution would be to cache the store folder but I did not see a performance improvement from that. Also, we'd have to prune the store after each installation. Otherwise a lot of garbage would be in the cache over time. This is not valid anymore because we migrated to a monorepo.\nAlso, currently we dogfood the next version of pnpm, when installing dependencies on CI, so it is good that dependencies are not cached. It is an additional e2e test for pnpm. pnpm will drop Node.js 4 support in v2. Related issue #840. Yes, sorry, I could keep the PR open indeed.\nI know, many packages drop Node 4 support, we don't update those. We'll probably ship pnpm@2 in a month or so. done via #1160. Do you know how Yarn solves this?. related #1364. I didn't know about this issue. I thought this would prevent it\nhttps://github.com/pnpm/pnpm/blob/master/src/createStoreController.ts#L45-L50\nBut that is not an atomic operation, so maybe that is the issue.\nI'll look into it in the evening. It is OK but the tests on CI should pass. I see two fails. One where it cannot remove server.json that does not exist. https://travis-ci.org/pnpm/pnpm/jobs/377189729\nAnd a test of recursive installation. https://travis-ci.org/pnpm/pnpm/jobs/377189730. Please submit removal of t.end() as separate PR. I'll merge it earlier. Also, you'll have to make a rebase of this PR. I rebased but seems like badly. You can force push your branch\nI will retry in the evening. no, seems ok. @jbrekelmans thanks for your contribution!\nThe fix landed in 1.43.1. @vjpr seems like a workaround, for now, is to run pnpm up next --depth 100. :ship: 2.1.0. no, 2.1.0. I don't have objections against the declarative format.\nAlso, I have an idea how to make this work with pnpmfile as well. pnpmfile may return a field (something like id or integrity). This field will be added to the shrinkwrap.yaml. Every time the values mismatch, the lockfile is recreated with the pnpmfile.\nSo you can either bump the value of this id field every time you make modifications or you can implement some smarter logic.. :ship: v2.0.0. @jiripospisil there is no such command yet but we'll have to implement it. yes, it does save space but it is slower.\nDid you know that you could create a .npmrc file in the root of your project and set shamefully-flatten = true in it. In that case you won't need to run pnpm install with the flag.. ok, I am closing it because there is no good available shortcut. -f is for --force. Weird because it fails on missing babel-polyfill but this package is not in subdependencies. So it would fail with flat node_modules as well. Are you sure that haul is the only dependency in your project?\nWhen I added babel-polyfill, another error was thrown on pnpx haul: \n```\n/home/zkochan/src/test/test-dir/node_modules/.registry.npmjs.org/haul/1.0.0-rc.0/node_modules/haul/src/cliEntry.js:7\nimport type { Command } from './types';\n^^^^^^\nSyntaxError: Unexpected token import\n    at new Script (vm.js:51:7)\n    at createScript (vm.js:136:10)\n    at Object.runInThisContext (vm.js:197:10)\n    at Module._compile (module.js:613:28)\n    at Module._extensions..js (module.js:660:10)\n    at Object.require.extensions.(anonymous function) [as .js] (/home/zkochan/src/test/test-dir/node_modules/.registry.npmjs.org/babel-register/6.26.0/node_modules/babel-register/lib/node.js:152:7)\n    at Module.load (module.js:561:32)\n    at tryModuleLoad (module.js:501:12)\n    at Function.Module._load (module.js:493:3)\n    at Module.require (module.js:593:17)\n``. @tachtevrenidis seems like it has been fixed by @chaseholland in https://github.com/callstack/haul/pull/443 . I cannot reproduce it. I tried withpnpm@2. Maybe it is fixed? v2 usesssri@6` which differs from v5 by this change: https://github.com/zkat/ssri/commit/04b3ef7d539b37dd1543d5957e3b82dbde8de546\nTry to reproduce with pnpm v2, please. This is fixed in v2.13.4\nRelated: #1230. or no, actually this is different because it failed on the 3rd attempt. I have found one place where pnpm uses not the latest ssri, so it might be the reason. @pnpm/check-package > dint@2 > ssri@5 (ssri@6 is latest). feel free to reopen if this happens in v2.13.5 or newer. :ship: v2.14.0-1. I am not sure. I wanted to refactor the global pnpm package but there are too many things to consider, so probably it won't be done in v3. :ship: 3.0.0. You should cache the store, that is at ~/.pnpm-store by default. You could use a different location by using the store config.\nHowever, if you cache the store, then it will grow over time. So I suggest pruning the store before caching it, using the pnpm store prune command.\nTo make installation faster, also turn off store integrity verification by running npm set verify-store-integrity false at the beginning of the build\n. when the store config is not set, the location should be ~/.pnpm-store unless the homedir is not on the same disk on which installation is performed. Try a custom store location in that case by using the store config.. Related: #928. @pgonzal this change makes pnpm use corgi\n@rarkins unfortunately after this change pnpm will download package tarballs even when --shrinkwrap-only is used. According to the npm team, the only reliable way to tell whether a package has to be built is to check the real package.json from the tarball.. > When you say \"download the tarball\" do you mean it would get downloaded even if it's already present in the PNPM store?\nNo, it would not be re-downloaded in that case\n\nIs the NPM team saying that the huge dump of package.json returned from their REST endpoint may NOT accurately represent the actual contents of the package.json file? How would that happen?\n\nCorrect, they say there are packages that submit one particular package.json to the registry and pack another version into the tarball. I don't know how they do it.\n\nI understood that --shrinkwrap-only is intended to be a fast way to update shrinkwrap.yaml, in cases where you don't care about the node_modules folder (e.g. because you're going to push to a PR branch without building locally). Is that true?\n\nCorrect. That is one of the usecase. @rarkins uses it in renovateapp, which is like greenkeeper but better.\n\nOr was this feature intended to be usable without any network connection at all?\n\nno\n. > @rarkins We found that in many cases, the tarball is actually smaller than the non-corgi protocol response. This is because it always includes a full copy of package.json for every single version of the package since its initial release. Might be useful to compare install times for the two approaches. The new version might actually be faster. :-)\nThis might be true but maybe you'll have to prune the store from time to time with the pnpm store prune command, to remove the old tarballs. Maybe we can fine-tune that command for renovate's needs.. > I imagine it will make the normal install faster.\nYes, it will\n\nI'll probably leave it for a while unless the disk/cache use becomes unbearable\n\n@rarkins I will ping you when we will implement a hook for filtering out the files that are unpacked: #804\nIt will be possible to tell pnpm to unpack just the package.json, the binding.gyp and the .hooks folder. Only those files are needed to detect if the package needs to be built. @nickpape-msft yes, it is still faster than w/o --shrinkwrap-only. Packages are not hardlinked into the project's node_modules. No node_modules is created at all.\nUsing non-corgi won't help because I've been informed by a member of the npm team that the metafile in the tarball may differ from the metafile that is returned by the registry separately. thanks @paulpflug . seems like we have that fixed version of fs-extra already in pnpm, so the warning is printed by mz https://github.com/normalize/mz/issues/63. #1259 needs to be done to allow renovate to use the recursive commands. > The package @types/react-dom@16 gets @types/react@16, since the parent dependency (react-dom-16-bundle used 16, and react-dom has a * dependency).\nin the repo that you linked, @types/react@15.6.6 is specified in the root, so this is the expected behavior\nhttps://github.com/nickpape-msft/react-pnpm-repro/blob/72953ebb1cd92592a4e04e74dfbeaba81abce724/package.json#L3. no, it was the only way to do it w/o performance regression https://github.com/pnpm/pnpm/issues/952#issuecomment-353732533. ok, I think we can make it work but it will have to be on a config. This deduping will be either nondeterministic or will cause a slowdown. During resolution stage, pnpm will have to wait until all direct dependencies of a package are resolved. Only after all dependencies on one level are resolved, pnpm will be able to proceed to the next level, passing the \"preferred versions\".\nThis will have to be changed in https://github.com/pnpm/pnpm/blob/master/packages/supi/src/resolveDependencies.ts\nPreferring versions is implemented currently in @pnpm/npm-resolver but only for the root deps and maybe it'll have to be optimized https://github.com/pnpm/npm-resolver/blob/3f57f9e2d0782c8b9e9dc07ce3607b63b974927f/src/pickPackageFromMeta.ts#L39-L73. I just realized that it is possible to do with any additional changes in pnpm, with what in #952 was implemented. Just add \"@types/react\": \"15.6.6 || 16.3.14\" as a direct dependency. See https://github.com/nickpape-msft/react-pnpm-repro/pull/2. > @zkochan what's your current thinking regarding this issue? Seems like people are still encountering it regularly.\nI agree with Yarn's maintainer completely in that thread. I don't think there's anything wrong with how pnpm or Yarn currently resolve the dependencies. If peerDependencies solve this issue, then peerDependencies should be used. If it is possible to come up with some other declarative way of solving this issue, I'd support that as well.\nIf someone thinks pnpm should support an alternative resolution strategy that sacrifices speed for less duplication, I don't have objections. We can have it but only as opt-in.. ok, if this is so important, I'll work on a flag. Yeah, sorry. It is not easy currently. Run pnpm recursive link. Run npm\nrun tsc in each then you can run tests in the packages that you changed.\nOn Sun, May 27, 2018, 19:15 Emanuele Tamponi notifications@github.com\nwrote:\n\n@etamponi https://github.com/etamponi requested your review on:\npnpm/pnpm#1189 https://github.com/pnpm/pnpm/pull/1189 fix:\nupdateShrinkwrap should use peripheralLocation as a code owner.\n\u2014\nYou are receiving this because your review was requested.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/1189#event-1648289242, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AB1pmyGzIUg4ZpdFTsA_PZ42rGxPUBMWks5t2tEkgaJpZM4UPVhM\n.\n. This solution won't work with --shrinkwrap-only :-( \nSeems like the store server should also return the full metadata. So there will be 3 responses from the store:\nfetchingManifest, fetchingFiles and fetchingFullManifest. @etamponi, this solution seems to work.\n\nI'll just have to rename the returned field from fetchingFullManifest to a better name. It is a misleading name currently. Probably a better name would be fetchingBundledManifest or fetchingPackageJson. @zaaack if this is still an issue with the latest pnpm, could you please create a sample repository and steps to reproduce the issue? I tried to reproduce it with webpack-blocks and @webpack-blocks/typescript but it did not fail. The second issue that you described happens here.. @xtuc I believe we fixed the issue with webassemblyjs. If there are still issues, feel free to file a new issue. @xbtsw did you run pnpm with the --shamefully-flatten flag or do you have it set to true? (You can check via pnpm get shamefully-flatten). This happens on a clean install or when a node_modules already exists?\nCan you attach the pnpm-debug.log file?. yeah, try updating pnpm. There were lots of fixes since 2.0.0. :ship: 2.17.5. I agree, for known error codes pnpm does not print the stacktrace (https://github.com/pnpm/pnpm/blob/master/packages/default-reporter/src/reportError.ts#L15)\nThis error shouldn't print a stacktrace as well. :ship: v2.5.0. I don't guarantee that all known errors were fixed but now if the error has a code prefixed with ERR_PNPM_ stacktrace won't be printed.. there should be pnpm-debug.log file with the stacktrace. Probably in the global folder, when you install globally. I think it is a really great idea to print only the dist-tags. All those versions are just noise because in most cases only the last major versions are important. correct. 17, ^17.0.0 and ^17 are the same. :ship: v2.5.0. :ship: v2.5.0. I was refactoring update in v2.14 and seems like these issues are not reproducible anymore.\nTry to update to v2.14.4 of pnpm.\n(I'll add some tests to cover these). the initial issue with removing shrinkwrap.yaml is still reproducible in v2.14.5\nthe issues described by @jiripospisil are fixed in the latest version (2.14.5). :ship: 2.17.5. I think I know why this happens. I will try to fix it this weekend. :ship: 2.2.2. related #928 (similar issue on Windows). yes, I think pnpm should write to a folder where it has access already. There should not be any additional steps from users.. @quinton-ashley I need your help because I don't have a macOS\nwhat does this print? npm root -g and this npm prefix -g?\nalso, check the content of the npmrc file installed in the root of the globally installed npm. It should contain prefix=<some path>. if NVM creates some env variable that contains the global prefix, we can read that variable and install pnpm to that location. You can also set the pnpm-prefix config to change the location of global pnpm\npnpm install -g foo --pnpm-prefix $HOME. Does installing via curl -L https://unpkg.com/@pnpm/self-installer | node work correctly?. @vjpr where is npm installed? I think pnpm should use the same location. @NetOperatorWibby I could not reproduce your issue.\nI created a project with this .env in the root:\nFOO=foo1\nBAR=bar1\nBAZ=1\nQUX=\nand this index.js:\n```js\nconst env = require(\"vne\")\nconsole.log(env);\n```\nI executed node index.js and everything worked:\n{ FOO: 'foo1', BAR: 'bar1', BAZ: '1', QUX: '' }. it prints:\n{ FOO: { BAR: 'foo1' }, BAR: { FOO: 'bar1' }, BAZ: { ZAB: '1' } }. pnpm recursive link is deprecated. If there are similar issues with pnpm recursive install + link-workspace-packages then we'll fix it. there are some commands that are currently passed through to npm. These are the commands that currently have implementations in pnpm: https://github.com/pnpm/pnpm/blob/1a9dbf87f2d62e4a404d97d7c74c79a387521188/packages/pnpm/src/main.ts#L32-L49\nAlso, you can check/use this project to compare performance: https://github.com/pnpm/node-package-manager-benchmark. Except for run, it is also passed through to npm https://github.com/pnpm/pnpm/blob/1a9dbf87f2d62e4a404d97d7c74c79a387521188/packages/pnpm/src/cmd/run.ts#L1-L11\nCurrently we mostly concentrate on install/update speed. I think only the 1st change is needed. The other two should not be a problem if this will be fixed:\n\nThere also seems to be a bug that during pnpm recursive link, symlinkDir is called twice for the same package from two different locations/stages(?).\n. Currently, I have a few other issues in priority, so if you could create a PR, it would be great. I did some performance comparisons and pnpm with the store server is slower than without it (up to 20% slower). The reason might be because too much data is passed between the server and client.\n\nThis is blocked until the performance issues are solved. Lerna has a flag called --scope <pkg>. With --include-filtered-dependencies it will include the dependencies. Maybe we could have a similar flag but I think we should include dependencies by default.. IMHO, it wouldn't make sense for the pnpm recursive link command to scope packages w/o their dependencies.\nMaybe we could have some other flag that would work on other commands, like\npnpm recursive rebuild --only-package foo. :ship: 2.6.0. ok, sounds good to me. So you'd like pnpm to create junctions when running inside WSL?\n@etamponi you also use WSL, do you have issues with symlinks?\nI think what we could do is adding a config for choosing between symlinks and junctions. I am not sure junctions are available on non-windows filesystems. Do they work inside WSL?. Source code should be fixed. I thought @pnpm/config would normalize these flags https://github.com/pnpm/pnpm/tree/master/packages/config. :ship: 2.6.0. Thanks for sending the project for repro. I was able to reproduce with a smaller package.json:\n```json\n{\n  \"dependencies\": {\n    \"@microsoft/gulp-core-build-webpack\": \"3.4.5\",\n    \"webpack\": \"~3.11.0\"\n  }\n}\n```. The crash fixed in 2.6.0. @vjpr I published your fix with 2.17.7. :ship: 2.12.0. ok, I can add more tests.\nIn the case that you described, no packages will be selected on step two.. @pgonzal please review. Review updated. I managed to find the core of the issue and fixed it.\n\nBTW do you expect this to also fix the issue where 2.4.0 was installing two copies of everything?\n\nThat seems like only a reporting issue. I'll check that later, separately.. This is currently possible to achieve with pnpm, using hooks\n```js\nmodule.exports = {\n  hooks: {\n    readPackage\n  }\n}\nfunction readPackage (pkg) {\n  if (pkg.dependencies && pkg.dependencies.foo) {\n    pkg.dependencies.foo = '2'\n  }\n  return pkg\n}\n```. You can write a hook that will use Yarn's resolutions, I guess.\nBut pnpm cannot adhere all the resolutions that are possible to declare by Yarn's resolution syntax.\nFor instance, you can set:\njson\n  \"resolutions\": {\n    \"d2/left-pad\": \"1.1.1\",\n    \"c/**/d2/left-pad\": \"1.1.2\"\n  }\nHowever, pnpm only allows one dependency set for a package/version inside node_modules. So in one project/node_modules there cannot be d2@1.0.0 with left-pad@1.1.1 and left-pad@1.1.2. There is actually a way to do it in a declarative way already. Though it won't throw an error.\nWhen resolving dependencies, pnpm will prefer a version that satisfies the range declared in the root package.json. So if you would like pnpm to prefer installing version 1.0.0 or 2.1.0 in node_modules, you can add foo to the dependencies with this spec:\njson\n\"foo\": \"1.0.0 || 2.1.0\". @vjpr I wonder if it would be better if worked as pnpx.\nThen you could do something like pnpm multi exec rimraf. :ship: 2.9.0. I think it would be good to have this as the default behavior. So link would only link packages that are dependencies and something like add-link would add a new dependency as link. That will be a breaking change though, so for now, maybe a new command would be fine. Maybe link-dep. Are you sure the packages were not republished under the same version? The npm registry used to allow that and I believe the admins still have that ability.\nAlso, if you use sinopia/verdaccio, they allow overriding already published versions of packages.. Integrity verification happens here\nhttps://github.com/pnpm/tarball-fetcher/blob/a7dc4725d41b0130c9a3cceb778672d10a79ea57/src/createDownloader.ts#L161\nThe integrity checksum is returned by the registry, with the package metafile. Do you use verdaccio? I've seen such issue with verdaccio. What package did it fail on?. yes, commenting that line should solve the issue. But removing shrinkwrap.yaml should solve it as well. I think, as a temporary fix, we can add a verify-tarball-integrity config.\nSounds good?. The whole log file might help, I think it might also be a network issue.\n\nMaybe a better hack would be to say \"if the hashes cannot be compared because they are different algorithms, then ignore them and don't fail the install.\"\n\nno, the algorithm is fine, there are two integrities: sha1 and sha256. When only sha1 is available then it will be used. > So this would temporarily disable the checks entirely?\nyes, but I just recalled that this check is also used for retrying. Sometimes due to some network issues, not the whole tarball is returned. Checking the integrity helps to catch that issue and redownload. @pulse14 could you attach the tarball and the metafile of material-design-icons from your verdaccio's storage?. I couldn't reproduce it.\nwhat are your Node.js, pnpm and verdaccio versions?\noh, I see node is 8.9.3. ok, reproduced, I had to install more packages to make some load on verdaccio. ok, I have found it, this is a regression. The fetch retry options have no default values. :ship: 2.13.4\nI'll try to mock the registry and cover it with tests later. no problem\nthanks for reporting. @wmertens please create a separate issue\nI thought we only rename the tarball if the integrity was correct but looking at the code I am not sure\nThere might be an edge case there\nhttps://github.com/pnpm/tarball-fetcher/blob/80f978e584b007cae73b7d98c19ff2c460dc4bbd/src/createDownloader.ts#L151. We can try something like the following:\nIf a tarball download fails, we retry the download (as we currently do, we retry it up to 2 times by default) and we automatically reduce network-concurrency to 1. If my proposed solution sounds good, we can create an issue for it. but as I reread the issue, initially it was due to fetch-retries having a bad default number. Setting it to 2 solved most of the issues, so maybe setting a bigger number of retries is the solution. Users may set any number they want.\nWe can add more details to the error message, something like: Download failed after 2 attempts. You may change the maximum number of retries by changing the fetch-retries config. I have a fix but let's keep it open till I add a test. :ship: 2.6.2. There are a couple of possible scenarios and we should print different messages:\n\nfetch-retries is set to 1 (it is 2 by default). In this case, we should print something like: \n\n\nSeems like there are network connectivity issues. Try setting the \"fetch-retries\" config a value bigger than 2 (E.g. \"pnpm set fetch-retries 2\") or rerunning the command.\n\n\nfetch-retries is set to 2 or more:\n\nthe actual checksum was the same on every fail. In this case, someone force-pushed a new tarbal to the registry. We should print the error that is printed currently but we can add more details:\n\n... integrity checksum failed when using sha1 ...\nSeems like \\ was force-pushed to the registry. If you are OK to accept the new content, remove your lockfile and run installation again\n   2.  the actual checksum is different on every fail. In this case it is a network failure.\n    > Package download failed. Try rerunning the command. If you have network connectivity issues, setting a lower network-concurrency may help (\"pnpm install --network-concurrency 1\" or \"pnpm set network-concurrency 1 && pnpm install\"). Unfortunately, sometimes the server tells us that all went well, the tarball was downloaded successfully but in reality, the tarball is corrupted. I don't know the reasons but it may happen. Maybe some bad proxies are the reason. oh, indeed, the content-length mismatch should tell us if the connection was dropped. We already check it\n\n\n\nhttps://github.com/pnpm/tarball-fetcher/blob/8c474b644c3a115ac59f82c03c4a17a1c763127e/src/createDownloader.ts#L207-L212\nProbably the verification fails earlier. I'll rewrite that code a bit. pnpm will wait for the size check before throwing the error. :ship: 2.25.1. I guess we could have such option. However, pnpm compares the public shrinkwrap.yaml with the private one (in node_modules/.shrinkwrap.yaml) and removes all packages that are not present in the public shrinkwrap.yaml. So if grpc won't be saved into package.json then next time you run pnpm install, it will be removed from node_modules.\n@jsumners you were interested in this option as well.. So just use \"optionalDependencies\" in that case. Or if you need to run something one time, use pnpx.. another way would be to install those packages globally. That doesn't work currently though #1210.. Maybe a better name for the field (instead of hasBin: true) would be cli: true (or hasCLI: true). What do you think @etamponi, @vjpr?\nI have minor concerns with hasBin:\n1. sounds like \"has been\"\n2. it is always singular but packages may have several declared bins. ok, lets keep hasBin then. \ud83d\udea2 v2.10.0. The issue is here:\nhttps://github.com/hoodiehq/hoodie/blob/10a32ccea297dfb42fc8043206b3d3e0f25cba7b/bin/setup.js#L11\nthe real location of hoodie, when installed with pnpm, is not in node_modules/hoodie but in node_modules/.registry.npmjs.org/hoodie/28.2.6/node_modules/hoodie.\n(here's some more details about this node_modules structure)\nIt is easy to fix this issue in hoodie. They need to use process.env.INIT_CWD instead of path.resolve('..', '..'). When do you need it? It will be merged till Monday for sure but I wanted to\nimprove reporting for it. If you want I can publish  a prerelease version\nsooner\nOn Fri, Jul 6, 2018, 19:53 Vaughan Rouesnel notifications@github.com\nwrote:\n\nI just realized I really need this. I was using lerna add foo as a\nworkaround, but it was not updating the shrinkwrap.yaml which I am\nrelying on.\nCan we get it merged soon?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/1250#issuecomment-403089532, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm2sqqnyL24kEo1aVHS-3QSYdlgOPks5uD5YLgaJpZM4U-cQR\n.\n. ref #1021\n\nWhat activity indicator you mean?\nDon't you get output like this:\n\nThe numbers in the stats are changing during install. And the stats of added/removed packages are printed. When big tarballs are downloaded (>=5MB), their download progress is reported:\n\nThere is this idea by @vjpr for logging packages that are being downloaded for X seconds. However, the packages that are slow to download are those that are big (related #1131). So probably we'll end up with an additional logging for big tarballs.\nI think what we can do is log the HTTP issues that happen during installation. pnpm will retry downloading of packages if a timeout happens or an invalid tarball is returned or a 500 is responded, etc.\nSo it would look like\nResolving: total 62, reused 14, downloaded 0\n   attempt #1. request to registry/foo/1.0.0 timed out\n   attempt #2. registry/bar/1.0.0 responded 500\nAlso, I suggest to keep only the last 3 issues because with bad internet connection the output will get messy.. It is currently hardcoded here: https://github.com/pnpm/pnpm/blob/master/packages/default-reporter/src/reporterForClient.ts#L31\nI don't have objection making it configurable but be aware that too much logging also causes slow down.. TBH I have no experience with React Native but I remember @vjpr mentioning that it has issues with symlinks (I think @pgonzal also mentioned it).\nCan we start communication with the React Native team about these issues? I am almost sure that we can't do anything on our (pnpm) end.. I fixed the issue (not published yet)\nYou'll have to run pnpm recursive link though. pnpm recursive install tries to install everything from the registry. And it fails with \"not found\" errors because the packages in that monorepo are not in the registry.\nEdit:\n:ship: 2.10.4. @timfish if your monorepo also contains private packages in dependencies of other private packages, then you should probably use pnpm recursive link.\npnpm recursive link works kind of like lerna bootstrap, so that is the command you probably needed anyway.. @donaldpipowitch directory dependencies (so the ones with link:..) work the same with pnpm recursive link and pnpm recursive install.\nThe issues that you experience are because \"example-node-ts-2\" depends on \"example-node-ts\" via a range\nhttps://github.com/Mercateo/ws/blob/f58e3742a0b870c39a9d8b5e491aaf290bc82948/packages/example-node-ts-2/package.json#L16\nWhen you use ranges, pnpm recursive install will install the dependency from the registry.\npnpm recursive link on the other hand, will check if a package is available locally. If it is and it satisfies the range, then it will link it from the local directory.\nSo you either have to use instead of \n\"example-node-ts\": \"*\"\nthis\n\"example-node-ts\": \"link:../example-node-ts\"\nor run pnpm recursive link. Probably related: #1027\nI would keep pnpm recursive install as is. Seems like in some monorepos it is the desired behavior. Like cyclejs is migrating to pnpm and they want pnpm recursive install to work as it works now.\nA property, maybe. Or even a new command? Feel free to create a new issue or start a discussion in the chatroom. There is an issue about it https://github.com/pnpm/pnpm/issues/1332. I like the part of np that allows to interactively select the next version\nBy the way, they rejected to support pnpm and suggested to fork np https://github.com/sindresorhus/np/issues/251). @vjpr what if they have dependencies that are in other folders of the repo? Should they be included? I assume - yes, because that is how --scope works at the moment.. So if they should be so isolated, why not just cd app1 && pnpm m link?. issue number 1: something tries to run webpack-dev-server in node_modules/.bin/webpack-dev-server but webpack-dev-server is not a direct dependency of the package, so it cannot be linked in node_modules/.bin. @etamponi this seems like a bug in --shamefully-flatten. bins should also be flattened.\nafter installing webpack-dev-server as a dev dependency, it failed on another issue: Error: Cannot find module '@babel/preset-env'\nSeems like another flat node_modules issue.\nBut if you install webpack-dev-server as a dev dependency and reinstall dependencies with --shamefully-flatten then it works. steps:\nmkdir my-project && cd my-project\ncurl -fsSL https://github.com/electron-userland/electron-webpack-quick-start/archive/master.tar.gz | tar -xz --strip-components 1\npnpm i\npnpm run dev. The fix to the shamefully-flatten issue published in v2.10.5. It is a bug in ms-rest-azure. It uses request\nhttps://github.com/Azure/azure-sdk-for-node/blob/d82264c00bf00447547ba452495a56bda3400ff9/runtime/ms-rest-azure/lib/credentials/msiVmTokenCredentials.js#L12\nBut doesn't have it in the package.json as a dependency\nhttps://github.com/Azure/azure-sdk-for-node/blob/d82264c00bf00447547ba452495a56bda3400ff9/runtime/ms-rest-azure/package.json. yes, there will be a CLI flag.\nAlso, this config will alter the behavior of pnpm install pkg when executed inside a multi-package repository. pkg will be first searched inside the repository. If a local pkg that satisfies the wanted range is found in the repository, it is linked. If not, it is installed from the registry.. This will be possible to implement after #1313 is done. I was thinking a lot about how to implement this change. Seems like the smartest way would be to implement a new resolver called \"workspace-resolver\" (resolvers are functions that accept \"package-name@version\" and return a resolution object with information about the location of the package).\nBut this resolver will have to be used only on root dependencies. Resolving subdependencies from the workspace would add too much complexity at the moment.. :ship: 2.14.0-0. A more stable version is out with some fixes: 2.14.0. Sorry that I am not digging into it but after maintaining pnpm for more than 2 years I am sure pnpm works correctly in all cases. Some version of Angular worked with pnpm but then, unfortunately, things went south.\nThese are the issues that may happen:\n\npackages require other packages that are not declared in their package.json. This works with flat node_modules but does not with pnpm's non-flat node_modules (https://medium.com/pnpm/pnpms-strictness-helps-to-avoid-silly-bugs-9a15fb306308)\ntoolings try to reimplement Node's module resolution algorithm but do it incorrectly by preserving symlinks (Node does not preserve symlinks, that is why it works with pnpm's symlinked node_modules)\n\nIn most cases these issues are solved when installing a flat node_modules. You can do that with pnpm by setting shamefully-flatten=true in an .npmrc file in the root of your project.\nif Angular still doesn't work with shamefully-flatten=true, let me know.. Angular 8 supports pnpm\nhttps://twitter.com/mgechev/status/1098449036351221761. Try remove node_modules and run pnpm install --shamefully-flatten. we can add it as one of the solutions here. Try to remove node_modules and run pnpm install --shamefully-flatten. The only way I see it can be fixed for you, if we add two new configs: global-bin and global-prefix. You'll be able then to set pnpm config set global-bin C:\\NodeJS\\ && pnpm config set global-prefix C:\\NodeJS\\. as @TigersWay noted, the way npm currently resolves this, it allows to set the value of prefix. So with npm, you can basically do npm set prefix something and it will change the location of global packages.\n(Well, kind of, they will be installed into <prefix>/lib/node_modules)\nI wanted to use npm's prefix but there is currently no way to get npm's prefix via a programmatic api. \nSo I see two options:\n\ncall npm prefix -g to get the correct global prefix. It would be slow but it would be used only during global operations\ncreate a new config called pnpm-prefix that would be used instead of prefix, when present. I like the second one as well but for new users, the first solution will provide a better experience. yes, I fixed that one issue but there are other open issues related to the default value of prefix. The easiest way would be to use npm prefix -g.. :ship: 2.10.5. It is a complex change and not high priority for me, so I won't work on it soon. If someone else wants to do it, I'll help. I just realized we can implement this feature with minimal efforts.\n\npnpm has \"partial deduplication\" feature, which was implemented for #952. This partial deduplication uses a map that is passed to npm-resolver: preferredVersions\nWe can basically read the package-lock.json file and create a mapping. Package name, to all the versions of the package that are found in the package-lock.json file. So if there is foo@1.0.0 and foo@1.2.0 in package-lock.json, we add this to the map: \"foo\": \"1.0.0 || 1.2.0\".\nThen we need to call the same code that is called by pnpm install --shrinkwrap-only and pass in the preferredVersions dictionary populated using package-lock.json.\ncc @pgonzal . :ship: 2.15.0. I meant that requestPackage would add the empty array in all cases. I think it would make sense because the package is in the store but it does not have any connections yet. :ship: 2.12.0-0. What does this return npm get fetch-retries?\nDoes this error happen all the time or from time-to-time? Do you know on which tarball it failed? (Seems like we have to improve logging inside @pnpm/tarball-fetcher because it did not report the tarball that failed). 1. More informative error message\n2. Maybe it happened because the cached tarball was corrupted. pnpm has to download it from the registry in that case. I believe this was fixed in scope of #1476. why not keeping it as is and adding a new config/flag called --include-dependencies? If you prefer, you may set it to false in your .npmrc.. So every command will have its own defaults? It is not that straightforward to me what should be the default for which command. As I mentioned in gitter, in my use case I need --include-dependencies with pnpm recursive run tsc.\nI would prefer the users to decide what they want but I understand that it is inconvenient to do with lots of flags that you should always use. What if there is another way?\nLike this would mean including dependencies: --scope ..foo\nThis would mean including dependents: --scope foo..\nAnd this would mean just the foo: --scope foo\nOr even every transitive dependency between bar and foo: --scope bar..foo\n(inspired by git diff). Yes, it takes globs but parsing of dots would happen first ..@scope/**\n\nI think link is a special case. \n\nI would rather make it the default behavior for link as well.\n\nI have a few scripts that generate the --scope options and this would add lots of complexity.\n\nWhy would it add more complexity? It will work the way you wanted it to work. When you set --scope=foo only foo will be included. If you need all dependencies, adding .. before foo is not harder then adding a new flag. Or another alternative. --scope-to includes dependencies. --scope-from includes dependents. --scope includes only what has been matched. --filter flag implemented in v2.13.0. nopt actually supports this.\nYou'll be able to use --filter multiple times. See #1309. :ship: 2.13.0. I don't know what is the issue yet but this was the last significant change in that area: https://github.com/pnpm/package-requester/pull/25. should be fixed in v2.10.6. but the warning seems confusing. Related: #1276. in v2.11 linked package are marked in the installation summary\n\nWe can highlight packages linked from outside the workspace with red.\nSo in summary \n+ foo 1.0.0 **red**<-- ../../../foo**red**. I thought I knew where the error was but I need more details.\nAfter installation fails, can you check if the package.json exists?\nDoes the directory that contain the package.json exist?\nIf it exists, what does it contain?\nWhat other files are in .../body-parser/1.17.0/?\nAlso, it would be helpful if you would post your pnpm-debug.log which is created automatically when pnpm fails. Also, please specify your Node.js version. I have noticed that different versions of Node.js behave differently when unpacking tarballs. You may get a more meaningful error with Node.js 8. This happens when the shrinkwrap version is updated https://github.com/pnpm/spec/tree/master/shrinkwrap\nSo, for instance, you used pnpm v2.7.0 and updated it to pnpm v2.10.0. In that case pnpm updates the shrinkwrap.yaml format. Related #736\nFirst of all, even in npm/yarn these scripts are shell scripts on Windows. So this is a more consistent behavior: shell scripts on all systems.\nHowever, consistency is not the reason we have to use shells. We have to override NODE_PATH and as far as I remember, your proposed solution did not work. Of course, we can try it. We have tests that cover pluggable tools that need NODE_PATH to be rewritten. This is a pretty complex problem because it involves changing the order in which dependencies are installed for all packages... but these warnings are getting even worse in v2.12.0\nA temporary solution may be to try to require graphql with node's importing mechanism. Node will search for graphql in all the parent directory node_modules folders. So pnpm will basically do a require('graphql/package.json').version. :ship: 2.12.2. @vjpr I used the flag name --no-bail (like in lerna) but I don't know if that is a good name. Is there some standard name for such flags?\nnpm-run-all uses --continue-on-error which I like more as it is more explicit.\nAlso, I did it so that all tasks will finish but if at least one failed, pnpm will exit with a non-zero exit code, which seems like expected to me.. Probably it would be useful to print a summary of failed packages in the end. Something like:\n```\nSummary: 2 failed, 6 completed\nx /packages/foo:\n  ERROR ....\nx /packages/bar:\n  ERROR ...\n``. I've seen also somewhere the flag--fast-failit would be--no-fast-failthen. @vjpr seems like--bailis also used by jest and mocha, so it is more widely used. I would stick with it. merged. :ship: [2.13.0](https://github.com/pnpm/pnpm/releases/tag/v2.13.0). merged. Seems like a bug. :ship: 2.13.1. If the workspace will not contain apnpm-workspace.yamlin the root, how will we know that commands are executed inside a workspace? We have different behavior ofpnpm link, when it is executed inside a workspace.. I think there should be only one way to define the root of the workspace. Ifpnpm-workspace.yaml` is not OK, we can change it in a major update but this is something that will be searched up on most pnpm commands executions. Adding many possibilities will cause a slowdown of all commands. I see. At the moment there is only a \"packages\" field and you'll be able to filter by fs path if we implement the specs (https://github.com/pnpm/spec/pull/1).\nYou want to rewrite that field because filtering only allows to narrow down the set. Is your intention to add packages that are not matched by the globs of pnpm-workspace.yaml?. maybe we could support it in the specs\npnpm multi install -- !./**/apps-templates/mobile-crna/**. Maybe we could create some groups?\nyaml\npackages:\n  - '.'\n  - 'packages/**'\n  - '!**/babel7-test/**'\n  # This was breaking. Want to leave in repo, but ignore for now.\n  #- '!**/react-leaflet-draw/**'\n  # We disable this because it can be slow and is not needed all the time unless modifying the framework.\n  - '!**/apps-templates/mobile-crna/**'\n  - '!**/apps-templates/docz/**'\n  - '!**/apps-templates/gatsby/**'\n  # Potentially slow apps.\npackages:slow:\n  - '!**/pages/map-mapbox/**'\n  - '!**/apps/playground/**'\nI don't know yet how it would work\nOf course, rewriting the workspace file would be the easiest solution\nI am not sure it would be a better DX though. Maybe you could do some tooling of your own. You'd have several pnpm-workspace.yaml files. A command like change-workspace slow and it would symlink the pnpm-workspace.yaml with the needed globs. Like this package for npmrc: https://www.npmjs.com/package/npmrc. If it has only 2 peer deps then why are there 4 entries in shinkwrap.yaml?\nCan you create a small repo for reproducing the issue?. There is no spec for tarball pkg id because in this case the tarball should be converted to a regular dependency, so to \"react-onclickoutside\": \"6.7.1\"\nMaybe this is some edge case that we did not test yet. Is registry.npmjs.org the default registry?. Yes, I think you can find the code that does it in @pnpm/tarball-resolver\nOn Thu, Aug 9, 2018, 11:42 Vaughan Rouesnel notifications@github.com\nwrote:\n\nTo clarify, this is what kepler.gl's package.json#dependencies looks like:\n\"react-onclickoutside\": \"https://registry.npmjs.org/react-onclickoutside/-/react-onclickoutside-6.7.1.tgz\",\n\"react-palm\": \"^0.8.1\",\n\"react-redux\": \"^4.0.0\",\n\"react-tooltip\": \"https://registry.npmjs.org/react-tooltip/-/react-tooltip-3.3.0.tgz\",\n\"react-vis\": \"^1.8.0\",\n\"redux\": \"^3.0.4\",\n\"redux-actions\": \"^2.2.1\",\n\"reselect\": \"^3.0.1\",\n\"styled-components\": \"^2.2.4\",\n\"supercluster\": \"^3.0.0\",\n\"type-analyzer\": \"https://registry.npmjs.org/type-analyzer/-/type-analyzer-0.1.4.tgz\",\n\nNote that they are using urls. I'm not sure why though.\nSo you are saying that these urls should be converted to regular deps?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1292#issuecomment-411700622, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm9Q0Abpu4tab_PZ1UCFCg5na2xfaks5uPAQUgaJpZM4VTACn\n.\n. I see, so in the tarball resolver repo http://registry.npmjs.org is\nhardcoded. It should be easy to make it protocol agnostic\n\nOn Thu, Aug 9, 2018, 14:34 Zoltan Kochan zoltankochan@gmail.com wrote:\n\nYes, I think you can find the code that does it in @pnpm/tarball-resolver\nOn Thu, Aug 9, 2018, 11:42 Vaughan Rouesnel notifications@github.com\nwrote:\n\nTo clarify, this is what kepler.gl's package.json#dependencies looks\nlike:\n\"react-onclickoutside\": \"https://registry.npmjs.org/react-onclickoutside/-/react-onclickoutside-6.7.1.tgz\",\n\"react-palm\": \"^0.8.1\",\n\"react-redux\": \"^4.0.0\",\n\"react-tooltip\": \"https://registry.npmjs.org/react-tooltip/-/react-tooltip-3.3.0.tgz\",\n\"react-vis\": \"^1.8.0\",\n\"redux\": \"^3.0.4\",\n\"redux-actions\": \"^2.2.1\",\n\"reselect\": \"^3.0.1\",\n\"styled-components\": \"^2.2.4\",\n\"supercluster\": \"^3.0.0\",\n\"type-analyzer\": \"https://registry.npmjs.org/type-analyzer/-/type-analyzer-0.1.4.tgz\",\n\nNote that they are using urls. I'm not sure why though.\nSo you are saying that these urls should be converted to regular deps?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1292#issuecomment-411700622, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm9Q0Abpu4tab_PZ1UCFCg5na2xfaks5uPAQUgaJpZM4VTACn\n.\n\n\n. Thanks for the detailed investigation. I am ready with a fix. :ship: 2.13.3. Maybe related to #1273?. On second look doesn't seem related. Seems like an edge case in packages\nrequested. See line 423-427 in packageRequester.ts of\n@pnpm/package-requester.\n\nOn Wed, Jul 18, 2018, 12:26 Vaughan Rouesnel notifications@github.com\nwrote:\n\nMaybe related to #1273 https://github.com/pnpm/pnpm/issues/1273?\nYeh looks like it.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1293#issuecomment-405869267, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm3aHkHknUKYmDsm6Yq2x5L_H8slsks5uHv89gaJpZM4VUNCe\n.\n. I cannot check till evening but I think it can try to read the manifest\nbefore it gets unpacked\n\nOn Wed, Jul 18, 2018, 12:51 Vaughan Rouesnel notifications@github.com\nwrote:\n\nI don't understand what is going on there...\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1293#issuecomment-405876351, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm_-pl7hFrrSEdrbn8ZNSH5mxoDLaks5uHwUWgaJpZM4VUNCe\n.\n. :ship: 2.11.3 and 2.12.1. how to reproduce this?. so you want the pkg object normalized before it is passed to readPackage?. oh, right\nok. Does workspace-concurrency sound better?. :ship: 2.13.0. Seems complicated. What if the recursive commands would support streaming in the list of packages?\n\ncat list-of-packages | pnpm recursive install. I did look into the logs. I could not figure out what the issue is.\nIf you email me the shrinkwrap.yaml file, maybe it'll help.\nIf this is consistently reproducible, maybe you could debug it yourself and find the cause (also, does it happen on Linux or OSX as well?)\nThis is the piece of code that links to node_modules:\nhttps://github.com/pnpm/pnpm/blob/0b71b3d1be753c67994056f7535409397043860e/packages/supi/src/link/index.ts#L441-L472\nso maybe you could debug it or we could add more logs but I don't know yet what logs would help to locate this issue.\nMaking a small repro would also help a lot. You could try to remove dependencies one-by-one, till the issue goes aways and try to find the set of dependencies that make the issue. I know this is time consuming but it would make it a lot easier to find the issue. @pgonzal I have a guess. In the logs I see that the wanted shrinkwrap.yaml does not match the current one. The only way it may happen in your case is if you run pnpm install with --no-optional.\nCan you try if this is reproducible without --no-optional?\nIf it is not reproducible when optional deps are not skipped then send me the shrinkwrap.yaml and node_modules/.shrinkwrap.yaml files.. There were some fixes in v2.14.0-0, so you might try it.\nIf that doesn't help, I'll try to look into it this or next week.. Also, this would help to localize the issue:\n\nMaking a small repro would also help a lot. You could try to remove dependencies one-by-one, till the issue goes aways and try to find the set of dependencies that make the issue. I know this is time consuming but it would make it a lot easier to find the issue\n\nThis can also help\n\nCan you try if this is reproducible without --no-optional?\nIf it is not reproducible when optional deps are not skipped then send me the shrinkwrap.yaml and node_modules/.shrinkwrap.yaml files.. please retry with pnpm ~v2.14.1~v2.14.2 and attach the logs\n\nI added additional logging. Excuse me, the publish didn't go well. Use v2.14.2. I located the issue. I don't know what causes it yet but I know the line code that causes it.\nThe issue is caused because pnpm thinks for some reason that is-extglob is not installable, so it is not linked.\nhttps://github.com/pnpm/pnpm/blob/b685487358eb2465bf62e3a988b4484115992171/packages/supi/src/install/link.ts#L504\n(a similar issue might be in the @pnpm/headless package as well). fixed in v2.16.3. We could validate every package name with validate-npm-package-name in @pnpm/npm-resolver. However, validate-npm-package-name uses lots of regex matching, so it might cause a performance regression. We can either rewrite that lib or just check for the presence of / and throw a meaningful error if the name doesn't start with @. What about something like pnpm update *@latest?. What would be the shorthand?. -l is already a shorthand of --long.\nThis seems like a very rarely used command. I personally wouldn't ever use it as every breaking change might need additional changes in code. So I don't think it needs a shorthand. Not at the moment. It should be implemented. > Will sub-package .npmrc override the root one?\nYes. > So if I set pnpmfile=./pnpmfile.js, sub-packages will look from their root. Its unexpected.\nI don't think we should have expectations for this case because .npmrc was always allowed only in the project folder.\n\nOr add an env var to .npmrc? pnpmfile = ${PNPM_WORKSPACE_ROOT}/pnpmfile.js\n\nI like this solution. It is very clear. But I'd call it PNPM_WORKSPACE_PREFIX\nIt might be good to have a spec for pnpmfile to discuss all the different scenarios.. :ship: 2.13.0. Sounds good to me. default-resolver was moved to the monorepo.\nnpm-resolver not yet.. You cannot run two servers for the same store. You can either stop the server and run a new daemon from your local pnpm or you can use a different store (a store in a different directory, you can use the store config for that).. pnpm m link is deprecated. Use pnpm m i + link-workspace-packages=true.. We cannot do this. This syntax is borrowed from jspm. It is also supported by yarn.. Yarn doesn't require the version to be specified, so I don't think we have to be more restrictive in this case.\nBut if there is an error like this, pnpm may check if the package name ends with a valid semver version or range and print something like: @vjpr/geojson-utils0.1.0 not found, did you mean @vjpr/geojson-utils?. :ship: 2.13.5. Try to run rm -rf node_modules && pnpm install --shamefully-flatten. At the moment I see only one way to optimize it: skip unpacking the tarball.\nWe cannot avoid downloading the tarball because:\n\nwe need to get the real package.json from the tarball (the packed package.json may differ from the package.json returned in the metafile \ud83d\ude1e)\nwe need to check if there is a .hook folder in the package\n\nMaybe skipping tarball downloads would be possible if we'd change the shrinkwrap format and remove fields like requiresBuild. However, I don't think we should spend time on that.\nAn alternative solution might be to create a smart proxy (maybe contributing to verdaccio), that would return all the necessary information to create the shrinkwrap.yaml w/o downloading the tarballs. > Maybe skipping tarball downloads would be possible if we'd change the shrinkwrap format and remove fields like requiresBuild. \nAs far as I remember they were added to fix some performance issues but it might be possible that it would be enough to store that additional info in node_modules/.modules.yaml.\nIn any case, this change would require a lot of work (and investigation). @anantoghosh thanks for reporting. This is fixed in v2.14.4. :ship: 2.14.0. ok, I think I figured it out. I'll push a fix and I'll use your test. I think pnpm should look only for one file. Additional filesystem operations are not good because we really fight for performance.\nI don't have objections renaming the default name of the pnpmfile if most of the pnpm users will vote for it. I know @vjpr and @andreineculau thought that pnpmfile was a bad name and wanted something like pnpmconfig instead. but I was also thinking about not looking for a pnpmfile at all if there is no config. That would save one filesystem operation and make the pnpmfile naming up to the user. > ...and then I find a commit where (for some reason) a person has bumped gulp to 3.9.1, without updating the package.json file that ends up in this tarball. We're still trying to determine why people do this, but it's apparently something people do occasionally.\nI would like to know the reason for this before we make a decision.\nIntegrities of local tarballs are useful because pnpm uses them to detect changes inside the tarballs. So if the gulp version inside the tarball is bumped, the integrity changes and pnpm unpacks it and reinstalls. I think it might be an issue with headless installation.\nCurrently, when the shrinkwrap.yaml satisfies the package.json in the root, a simpler, faster algorithm is used for installation and it uses a frozen shrinkwrap, so it doesn't check whether the tarball matches the integrity checksum.\nAs a temporary solution, you can set prefer-frozen-shrinkwrap to false.\nIf my assumption is correct, the fix should be easy: pnpm should never run headless installation if there are local tarball dependencies. If Rush always uses local tarballs, then I think you can use --no-prefer-frozen-shrinkwrap because that is what pnpm will use anyway after the fix. What version of pnpm do you use?\na similar error was recently fixed in v2.13.4. if you use the latest pnpm, check what this returns npm get fetch-retries\nit should be either not set or a value 2 or bigger. alright, if this is npm, you have seek for help here: https://npm.community/. I think I will just change it to an info message. Info messages are not printed during recursive installation.. @KSXGitHub please review. They don't work differently. They are reported differently by pnpm-default-reporter. Warnings are reported for every package during a recursive install because they are important to notice.\nI think flat node_modules is a valid option when there is no other choice for the user, so it is OK to just notify users instead of warning them. LGTM but the text needs to be updated in the tests as well. I'll update it for you because I want to publish a new version today. tsc is typescript's bin. Typescript is in dev deps. I'll check commit in the meanwhile you can manually commit, just adhere the commit message conventions: https://github.com/pnpm/pnpm/blob/master/CONTRIBUTING.md#commit-message-guidelines. You're welcome. Seems like some of the subdependencies use modules that are not declared in their package.json\nTry to run pnpm install --force --shamefully-flatten. \nWith flat node_modules I've got a different error: RangeError: \"port\" argument must be >= 0 and < 65536. I get the same error with npm, so I can confirm that the pnpm install --force --shamefully-flatten workaround works.. ok, thanks for looking into it!. cc @iclanton. Both of the possible solutions are breaking changes.\nThe second solution may be implemented as a non-breaking change by creating a new config. Something like ignore-shrinkwrap-registry\n\nAs of shrinkwrap v3.9, when some packages are from other registries, their full path is saved in shrinkwrap.yaml. This should be changed. Packages from the registry should never be save with absolute path (or maybe only when they are specified via URL spec). This is definitely in my priority list but I want to finish the shared shrinkwrap feature first, which is a huge change #1373. It is partially done in v2.17.0-5\nThe registry field is ignored.\nThe registry field is not added to shrinkwrap.yaml v4 (currently used when the shared-workspace-shrinkwrap config is true in a monorepo)\nNeeds to be done:\n- dedicated registries for scopes should be ignored as well. I think this is the last big thing that I want to do before bumping pnpm to v3. :ship: pnpm@3.0.0-alpha.0. I think it would be better to go with a new command. pnpm exec seems like a good name. We already have a command called pnpm recursive exec that does a similar thing but without modifying PATH.\nI suggest to make it just for running bins and ignore scripts. There is already pnpm run for running scripts.. Regarding the root of the monorepo. pnpm does not require a private package.json file in the root of the repo. pnpm searches for a pnpm-workspace.yaml to find the root of the repo.\nTBH, I don't like the way monorepos are designed at the moment. I understand that it is convenient to install tooling in the root. However, installing things in the root of the repo means that every single package in the repo may have access to dependencies that are not declared in their package.json. It can result in bugs that will be detected only after publishing the packages. > No, you can't ignore scripts. Because the whole thing is that we can't run does scripts (CLI bins defined in those scripts), because the bins are actually installed in the monorepo root. So both pnpm run and pnpm recursive run don't work well.\nThat is not what I meant. I am OK to extend the PATH for scripts. So it is fine that you run pnpm run lint in a package and the script will find eslint in the root of the repo.\nWhat I meant was, I think it would be smarter to keep using pnpm run for running scripts and the new command would only execute commands. So to run a script you would be able to run pnpm run lint but would not be able to run pnpm exec lint. pnpm exec eslint would work though (or pnpm exec pnpm run lint). > But in same time, installing tooling as devDependencies in the monorepo root, is one of the main things of monorepo features - others are management, installation and managing versions (synced or independent). But also, I think that this isn't so big and common problem. The common case is that every package is only using its depedencies and in its test its devDependencies. There is eslint rules/plugins, best practices and such things that will signal you if you are using something that isn't in the dependencies. And it should be that way and that's the correct way.\nYou can install all the toolings in a subfolder and then use a custom bin location.\nSo you can have a package.json in monorepo/tooling/package.json. It would contain eslint and everything you need.\nThen you can have a .npmrc there which sets the bin location to ../node_modules/.bin. So dependencies will be installed inside monorepo/tooling/node_modules but all the bins will be linked into monorepo/node_modules/.bin.\nThat's a win-win:\n\nScripts have access to all the commands.\nApp code has no access to tooling modules.. ok, if they are all private, that might make sense\n\nbut why not just scoping them? It would reduce complexity that needs to be supported by pnpm. wait, if they are private, why don't you just install them as link dependencies?\nYou can just add foo to bar as \"foo\": \"link:../foo\". There is no reason to use semver at all if they are never published. yes, link: works with yarn\nbut doesn't work with npm. There's an issue about it #1332. you can use file: instead of link: it will work the same way (and will work on npm as well). closing in favor of #1360. you can set pnpm-prefix (it was added in this PR https://github.com/pnpm/pnpm/pull/1334). @ExE-Boss did pnpm-prefix solve the issue in your case?. There's a fix from @SkReD in pnpm@3.0.0-beta.0.. This seems like not a regression. It was working this way from the beginning. But it should be easy to fix.\nWhen there is a shrinkwrap.yaml file, pnpm compares the integrity of the tarball to the integrity that was saved in the lockfile. If they don't match, pnpm reunpacks the tarball to the store.\nHowever, when there is no shrinkwrap.yaml file (in your steps you remove it), pnpm only checks if there is an unpacked version of the tarball in the store. pnpm is not checking whether the unpacked files were from a tarball with the same integrity as the current tarball. (Also, the path to the unpacked tarball is the encoded path of the tarball)\nI think the right solution would be to use the tarball's integrity as package id of local tarball dependencies. That way, if the tarball's integrity changes, the location of the unpacked tarball changes in the store. :ship: 2.15.1. :ship: 2.15.2. yep, we don't make new versions latest immediately. If you need updates earlier, install with the next or rc tag. > Could you provide a small example of the shared shrinkwrap file format that illustrates what's new?\nHere is what would the cyclejs multi-package repo get: https://gist.github.com/zkochan/e2d7e6e7e2a805872f8dbe152672ba1e. > What happens when a package.json is changed, but it can be solved without talking to the NPM registry? (E.g. project-a adds a dependency+SemVer that's the same as project-b in the repo.) In this situation, Rush tries to automatically fix up the shrinkwrap file without requiring this update to be tracked by Git, because the install behavior is still fully deterministic. This reduces churn/merge conflicts for the shrinkwrap file, which can be very expensive. Should PNPM have such a feature? If not, would it be possible to implement it on top of PNPM?\nThis is not something new. It was implemented in pnpm v2.14.0: https://pnpm.js.org/docs/en/workspace.html#linking-packages-inside-a-workspace\nIn the case that you described, the installed package will be added to package.json.\nFor instance, if the version of project-b in the repo is 1.0.0, then: \"project-b\": \"^1.0.0\".\nTo shrinkwrap.yaml only something like this will be added:\nproject-b: link:packages/project-b\nSo shrinkwrap.yaml will have minimal changes. > Maybe the name \"mono shrinkwrap\" or \"monorepo shrinkwrap\" would be more clear? \"Shared\" sounds a little like sharing with an external consumer. (I don't have a strong opinion here.)\nI think it can be decided later. At the moment, I would be more interested about your opinion about the config keys that I use in the PR #1373\nshrinkwrap-directory: path and shared-workspace-shrinkwrap: boolean. The second config contains the word \"shared\". I guess it may be changed to single-workspace-shrinkwrap. But maybe \"shrinkwrap\" is not good for these configs. shrinkwrap-directory may be also called something like real-node-modules because that is the directory to which deps are hard linked. Because they import (symlink) packages from the shared node_modules.. > I noticed that your shared shrinkwrap file is still called shrinkwrap.yaml. Long term, is your plan to use a unified schema for both the single-project and the multi-project (workspace) scenario? If so that seems like a good idea.\nAt the moment, pnpm can recognize a \"dedicated\" shrinkwrap.yaml from a shared one. A shared one contains an \"importers\" field, a dedicated does not. We can unify them by using the \"importers\" field in the dedicated shrinkwrap as well. I don't know if that is a good idea or not. > Is this technically necessary? It would mean that the PNPM shrinkwrap file would be invalidated whenever a project is moved to a different folder.\nI like everything that you described but I think from performance perspective it makes sense. pnpm knows the exact location of the workspace packages, so it can avoid redundant filesystem operations. > Just curious, why did you start tracking the specifiers field in shrinkwrap.yaml?\nThis field is compared to the specifiers in the package.json. If they match, it means that the shrinkwrap.yaml is up-to-date and there is no need to reanalyze it. If you don't use the --frozen-shrinkwrap flag/config then it will succeed.. This is happening! I decided to ship it only once the performance is optimized. The changes in #1401 are making pnpm recursive install at least twice faster when a single shrinkwrap.yaml is used.. Published with pnpm@2.17.0-0 (dist-tag: next). I have experienced some issues on a big project. Some subdeps were not linked correctly.. It turns out that the issue that I experienced was the same as #1305, so now I have steps to repro that annoying error.. one thing to think about. This new shrinkwrap format is not backward compatible (the shared shrinkwrap with importers field), so it might be a good idea to bump the shrinkwrapVersion of it to 4. The non-shared shrinkwrap files can stay v3\nbut if we do that, I would also like to remove the registry field from it. Related issue: #1353. 2.17.0-2 released. It has many improvements. I suggest trying it out.. This repo now uses a single shrinkwrap.yaml file.. Version 2.17.0-5 was published. It is an RC version. If no regressions will be found, I will publish it as latest (2.17.0) in a few days.. In 2.17.4 this new config works well with all commands. https://pnpm.js.org/docs/en/pnpm-recursive.html#shared-workspace-shrinkwrap. Thanks for reporting, we'll probably fix it this week. Wow, cool! I did not know that GitHub now allows several templates for issues :+1:  . :ship: 2.15.3. cc @etamponi, @pgonzal, @vjpr \nI know it is too much to review these changes but I would like to know your opinion about the namings I used. IMO, naming the new field in shrinkwrap.yaml importers is OK. I am not sure that the config name shrinkwrap-directory is clear.\nshrinkwrap-directory is not only the directory that contains shrinkwrap.yaml but it also contains all the hard links of the dependencies inside a node_modules folder. Maybe dependencies-directory then?\n\nUpdate:\nalso added a new config called shared-workspace-shrinkwrap. When true, a shared shrinkwrap.yaml is used by all packages in a multi-package repository. This version will be functioning but not very useful because it has a very bad performance. The next step will be a bigger refactoring that will make it A LOT faster.. In the end, this will be as fast as in Rush but it requires more changes.\nThe installation function in supi currently supports one entry package.json at a time.. Calling the git resolver before the tarball resolver might solve this issue\nhttps://github.com/pnpm/pnpm/blob/7d65704e6502fb59b58cac4dd9a0b7dc41470c7b/packages/default-resolver/src/index.ts#L45-L46. Yeah, we have the correct version in our sources\nI don't know what breaks the svg. Maybe docusaurus?. It is an issue in docusaurus. Their svg compressor breaks our images. Even though they have a --skip-image-compression flag, it didn't work, so I created a PR to fix it.\nIn any case, I already republished the site with my fork of docusaurus, so now the glitch logo is correct.. :ship: 2.17.6. We decided to rename shrinkwrap.yaml to pnpm-lock.yml, so we'll also update the extensions to .yml in pnpm v3.\nBy the way, yarn is also switching to the YAML format but they'll keep the old file name (yarn.lock). the only other file is pnpm-workspace.yaml\nso you'd recommend to name the file pnpm-lock.yaml?. Due to lack of activity, I am closing this issue. We keep the .yaml extension in pnpm v3. This is a good idea. \nI have even a bigger idea. We can have a config that says what version of pnpm is needed (or use this engines field) and pnpm can self-install and run the needed version.. yes, that is what I mean. There will be any number of installed pnpm versions globally and pnpm will select the needed one. I don't know the implementation details yet. I mean that if version 2.10.0 was installed once then next time pnpm won't install it again, it will just immediately switch to v2.10.0 and run the installation.. The problem actually might be with the current shrinkwrap, which is in node_modules/.shrinkwrap.yaml. if you believe 2.25.2 solves the issue, we can close it. So the issue is that when you don't set the command name of your bin (in your case tools/typescript has \"bin\": \"bin.js\") then the package's name is used as the bin name.\nSo you have to either add a name field (as you noticed) or you have to use \"bin\": { \"typescript\": \"bin.js\" }\nHowever, pnpm should also print a more meaningful error... For instance, npm throws this error if somene tries to link a package w/o name: \"Package must have a name field to be linked\". I recently fixed a bug that fixes something similar (not published yet): https://github.com/pnpm/pnpm/commit/0263e38f6cfab60dff786d1ce8d7d716388e712c. yes, it is. That is what I was fixing in https://github.com/pnpm/pnpm/commit/0263e38f6cfab60dff786d1ce8d7d716388e712c\nmaybe this is another edge case. I'll check a bit later. You mean the fix didn't help?. Thanks! I'll publish it today. :ship: 2.16.1. Thanks for reaching out. \nTo bootstrap the repo, run:\nbash\nnpm i -g pnpm\npnpm recursive install # or \"pnpm m i\"\npnpm run build\nTo use it locally, I usually just run it directly.\nSo in your case it would be something like\nnode /Users/pomek/Projects/ckeditor/pnpm/packages/pnpm/lib/bin/pnpm.js recursive install\n\nbut I can publish the change tonight.\nAlso, if you post the repository and branch on which you want to test pnpm, I can check it tonight and see if there are any issues.\nThanks for trying out pnpm! We'll help to solve any issues that may happen. oh, in the meantime, you can also check rush. It can be used with pnpm. It creates a centralized node_modules and it also handles publishing.\ncc @pgonzal . yes, you are correct with the path. I fixed the path in my message. @pomek if you want to use the new shared shrinkwrap feature, don't forget to add this to the .npmrc in the root: shared-workspace-shrinkwrap = true. Indeed, but I would like to configure test coverage reporting because it feels like we can do better. This is what I was talking about.\nI am not sure shrNModulesDir is a good name but I cannot come up with a better alternative than variations of shrinkwrap... shrinkwrapNModulesDir, shwrapNModulesDir\nmaybe storeProjectionDir. I will rename shrNModulesDir to virtualStoreDir\nI would like to keep importerNModulesDir to differentiate it from the node_modules folders that will be in subdirectories of the virtual store (.registry.npmjs.org/foo/1.0.0/node_modules). I never heard of that service but you can use unpkg at the moment\nhttps://unpkg.com/pnpm/package.json. Failed with error:\nERROR: /home/travis/build/pnpm/pnpm/packages/supi/src/link.ts[39, 1]: Import sources within a group must be alphabetized.. also, commit message format should follow these guidelines: https://github.com/pnpm/pnpm/blob/master/CONTRIBUTING.md#commit-message-format. ok. seems like this change is breaking a few tests though. Wouldn't the solution be, if the dir does not exist, just pass it to symlink-dir. If it does not exist yet then no need to get the real location of it. I'd suggest to cover this change with a test. oh, it fails on windows\n```# relative link uses realpath when contained in a symlinked dir\nok 687 create temp folder 193\nnot ok 688 Error: ENOENT: no such file or directory, uv_chdir\n\noperator: error\nexpected: |-\n  undefined\nactual: |-\n  { [Error: ENOENT: no such file or directory, uv_chdir] errno: -4058, code: 'ENOENT', syscall: 'uv_chdir' }\nat: bound (C:\\projects\\pnpm-17nv8\\packages\\supi\\node_modules\\.registry.npmjs.org\\onetime\\2.0.1\\node_modules\\onetime\\index.js:30:12)\nstack: |-\n  Error: ENOENT: no such file or directory, uv_chdir\n      at Error (native)\n      at process.chdir (C:\\projects\\pnpm-17nv8\\packages\\supi\\node_modules\\.registry.npmjs.org\\graceful-fs\\4.1.11\\node_modules\\graceful-fs\\polyfills.js:21:9)\n      at process.chdir (C:\\projects\\pnpm-17nv8\\packages\\headless\\node_modules\\.registry.npmjs.org\\graceful-fs\\4.1.11\\node_modules\\graceful-fs\\polyfills.js:21:9)\n      at process.chdir (C:\\projects\\pnpm-17nv8\\packages\\modules-cleaner\\node_modules\\.registry.npmjs.org\\graceful-fs\\4.1.11\\node_modules\\graceful-fs\\polyfills.js:21:9)\n      at process.chdir (C:\\projects\\pnpm-17nv8\\packages\\utils\\node_modules\\.registry.npmjs.org\\graceful-fs\\4.1.11\\node_modules\\graceful-fs\\polyfills.js:21:9)\n      at process.chdir (C:\\projects\\pnpm-17nv8\\packages\\modules-yaml\\node_modules\\.registry.npmjs.org\\graceful-fs\\4.1.11\\node_modules\\graceful-fs\\polyfills.js:21:9)\n      at process.chdir (C:\\projects\\pnpm-17nv8\\packages\\package-requester\\node_modules\\.registry.npmjs.org\\graceful-fs\\4.1.11\\node_modules\\graceful-fs\\polyfills.js:21:9)\n      at process.chdir (C:\\projects\\pnpm-17nv8\\packages\\shrinkwrap\\node_modules\\.registry.npmjs.org\\graceful-fs\\4.1.11\\node_modules\\graceful-fs\\polyfills.js:21:9)\n      at process.chdir (C:\\projects\\pnpm-17nv8\\privatePackages\\assert-project\\node_modules\\.registry.npmjs.org\\graceful-fs\\4.1.11\\node_modules\\graceful-fs\\polyfills.js:21:9)\n      at process.chdir (C:\\projects\\pnpm-17nv8\\packages\\default-fetcher\\node_modules\\.registry.npmjs.org\\graceful-fs\\4.1.11\\node_modules\\graceful-fs\\polyfills.js:21:9)\n\n...\n```. I see, that might be the issues indeed. we're almost there.\nNow it fails with this:\n```\nrelative link uses realpath when contained in a symlinked dir\nok 687 create temp folder 193\nnot ok 688 should be equal\n\noperator: equal\nexpected: |-\n  '../../bar'\nactual: |-\n  'C:\\\\projects\\\\.tmp\\\\193\\\\symlink-workspace\\\\app1\\\\packages\\\\public\\\\bar\\\\'\nat: Object.<anonymous> (C:\\projects\\pnpm-17nv8\\packages\\supi\\test\\link.ts:235:5)\nstack: |-\n  Error: should be equal\n      at Test.assert [as _assert] (C:\\projects\\pnpm-17nv8\\packages\\supi\\node_modules\\.registry.npmjs.org\\tape\\4.9.1\\node_modules\\tape\\lib\\test.js:224:54)\n      at Test.bound [as _assert] (C:\\projects\\pnpm-17nv8\\packages\\supi\\node_modules\\.registry.npmjs.org\\tape\\4.9.1\\node_modules\\tape\\lib\\test.js:76:32)\n      at Test.equal (C:\\projects\\pnpm-17nv8\\packages\\supi\\node_modules\\.registry.npmjs.org\\tape\\4.9.1\\node_modules\\tape\\lib\\test.js:384:10)\n      at Test.bound (C:\\projects\\pnpm-17nv8\\packages\\supi\\node_modules\\.registry.npmjs.org\\tape\\4.9.1\\node_modules\\tape\\lib\\test.js:76:32)\n      at Object.<anonymous> (C:\\projects\\pnpm-17nv8\\packages\\supi\\test\\link.ts:235:5)\n      at next (native)\n      at fulfilled (C:\\projects\\pnpm-17nv8\\packages\\supi\\test\\link.ts:4:58)\n\n...\n``. I can look into it after I finish a PR that I am working on. Seems like the readPackage hook works unreliably on the directpackage.json`\nWhy don't you just add those additional dependencies to package.json?. looks ok but a test needs to be added\nI think the sequence of building packages is covered here https://github.com/pnpm/pnpm/tree/master/packages/pnpm/test/monorepo or here https://github.com/pnpm/pnpm/tree/master/packages/pnpm/test/recursive. perfect! Thanks for your contribution!. > So fast-glob uses micromatch. After fiddling around it appears I can get the behavior I want using !packages/(foo). Adding the brackets seemed to work. Its strange. Maybe its a bug in micromatch...\n\nIts strange. Maybe its a bug in micromatch...\n\nIf something works with glob but does not with fast-glob, we should file an issue in fast-glob. seems like the new test fails. I will make 2.16 latest for now. The location of bins was changed and @pnpm/self-installer uses the old location\nhttps://github.com/pnpm/self-installer/blob/master/src/installTo.js#L38-L39. it should work now. I will fix @pnpm/self-installer tonight and make 2.17.0 latest again. fixed in latest @pnpm/self-installer. No need to do any actions just rebuilding the job next time will work. ...or install babel-runtime as a dependency\nThe issue is that dataframe-js requires babel-runtime but babel-runtime is not in prod dependencies of dataframe-js, so seems like a bug in dataframe-js.\nIt works with flat node_modules because babel-runtime is a dependency of babel-polyfill which is a prod dependency, so it is hoisted to the top of node_modules. yes, we can close it, we cannot really solve issues in other projects. It happens probably because node_modules was cached.. no problem. yeah, so if you want to use the new shared-workspace-shrinkwrap=true config in your multi-package repo, then you have to remove the shrinkwrap.yaml file that was created by an installation without the config.\nI know, the error message might be confusing... When you use this new config, the shrinkwrap.yaml format is v4 with a new field called importers.\n\nYou can find more details about this change in #1366. There is not even a node_modules folder? There is a shrinkwrap also in node_modules/.shrinkwrap.yaml. ok thanks. I'll try to reproduce. No, I was able to reproduce it.\nUnrelated to the issue but you should use the - 'packages/**' pattern instead of - 'packages/*'. As a temporary workaround you can run pnpm recursive install (or pnpm multi install/pnpm m i).. ~:ship: 2.17.1~. oops, not fixed yet.. it is a fairly easy fix. I just forgot to update one field in shrinkwrap.yaml. I'll publish 2.17.2 in an hour or so. fixed in 2.17.2. seems ok. Though the status on success is redundant because it is always 0. ok, let's try to do it using your lib.\nHowever, I think during installation we just need to hide the output if it is successful. It is how Yarn does it and npm plans to do it the same way.\nWe can use it for pnpm m run, pnpm m t, pnpm m exec, etc.. :ship: 2.23.0-0. I looked into it and I did not find any problems on pnpm's side. Though I did notice that sometimes the npm registry does not update the latest for a long time. That might be the issue, though in this case he was published a whole month ago. So unlikely would the registry still not return the new version in meta . What about pnpm install foo? Currently pnpm recursive install foo means  that foo is installed into every package in the repo.. but that would not be very intuitive if there was a package.json in the root.. Maybe it is a good idea but I am not sure. I think users should get what they'd expect to get. I am not 100% sure everyone would expect pnpm install to behave as pnpm recursive install.\nI was also thinking about how this can be made easier to type. One of my ideas was to use an -r flag for running commands recursively, so pnpm i -r would do pnpm recursive install. A poll I did on Twitter has shown that people like it https://twitter.com/pnpmjs/status/1011360303941148673\nAlso, we can use recursive when filtering is used, so pnpm i -- foo... == pnpm recursive i -- foo.... but pnpm install works fine in a monorepo. For instance, if you run pnpm install inside a package of the monorepo, it will link all the dependencies to that package and also run install inside them.\nCurrently pnpm install inside foo is same as pnpm recursive install -- foo.... cc @vjpr @pgonzal @jvanbruegge\nwhat are your thoughts about this?\nthe idea is basically changing the behavior of pnpm install to make it work as pnpm recursive install\nit might be a good idea. Though I don't think pnpm install foo shoud work as pnpm recursive install foo. Thanks, @zenmumbler, any feedback is important.\nI will create an RFC with my personal vision. It will be easier to discuss the aspects in a PR. Here is my suggestion: https://github.com/pnpm/spec/pull/3. ok, so seems like most developers expect that pnpm install === pnpm multi install\nIn that case I agree with the majority.\nMy only suggestion would be to keep pnpm install something to work with the current package.json only. Otherwise, pnpm install something would add something to every package in the repository.\nI will update the specs today. @pgonzal filtering is described on the website https://pnpm.js.org/docs/en/pnpm-recursive.html#lt-package-selector-filter-lt-package-selector (also, we had an RFC for the filtering syntax https://github.com/pnpm/spec/pull/1)\nand it is also described in help of the recursive command: pnpm recursive -h\nI personally use filtering frequently and I think it is a useful feature. It allows to do complex tasks on a subset of packages. On a big repo (with hundreds of packages), I don't want to do everything on everything because that would be slow. With filtering you can do things like pnpm test --filter ...foo that will run tests of foo and tests of dependents of foo.. You can list any number of filters after --. With --filter you should put a --filter before each one\npnpm m i --filter foo --filter bar... === pnpm m i -- foo bar.... In this case, I think we have a consensus on:\n\nany command + filtering should work (pnpm i -- foo == pnpm m i -- foo)\nfiltering options should be shown on pnpm i -h\ninfo messages should tell the user about the scope of the commands\n\nWe can come back to what should be the scope of pnpm install later\n\nI'd also love some fun shortcuts like:\npnpm ii == pnpm multi install\nor\npnpm I === pnpm multi install. I created a PR for one thing that seems like nobody was against.\nIf filters are used, the command is automatically recursive. So pnpm i -- foo === pnpm m i -- foo. From v2.18, it is enough to specify a filter and the command will be recursive. So you can do things like pnpm install -- foo or pnpm test --filter bar. I think we can create a config that will make pnpm install === pnpm recursive install.\nSomething like prefer-recursive-commands=true. I'll look into it. Please provide a repro\nI could not reproduce it. :ship: 2.17.6. it is probably this package that you'd need to change https://github.com/pnpm/link-bins\nhowever, we cannot have js files on Windows. On windows only cmd/sh files work. :ship: 2.17.8. I don't know what could cause the hanging (works for me on Windows)\nYou can try running pnpm install --reporter ndjson to see more logs in the console\nThe changes in 2.17.8 were only these:\n4ad43d8480b2da9c7345a6479fefb4850eb73472\nfabc5410dcdb8f7663b03de54c4a5d29c6a53221. I did not check this yet but it will be my next priority. So there is a symlink in the repo that points to another repo. Seems to me like it should be treated as a regular linked dependency (a dependency linked via pnpm link ../foo).. I guess my question is:\nDo you want those packages from repo2 to appear in the shrinkwrap.yaml files in repo1? Or would it be better to just have a link notation like baz: link:../repo2/some-packages/baz. Similarly to what you get when you do pnpm link ../repo2/some-packages/baz. TBH, I don't think this hack is the correct solution.\npnpm will resolve and fetch all the dependencies for the packages of repo2 but won't symlink them.\nSo there are a lot of redundant operations. The correct solution would be to just symlink those external packages in without trying to install their dependencies.\nSo pnpm should link these packages (probably by passing them via the opts.localPackages to supi) but should not install dependencies for them (so not including them in the opts.importers array). could you add a test that covers this? And it should also verify that the shrinkwrap.yaml file has the format that you'd expect. I'll try to see how it works because I never used pnpm in such scenarios. ok, I think now I understand this.\nSo the right way to do it is to remove from the pkgPaths array here all the packages that are not from the current shrinkwrapDir\nAlso, I suggest using is-subdir for checking if the directories are subdirs of shrinkwrapDir (for better Windows support). it would be nice to cover this with test. I am not 100% sure this is the right solution because it seems like requires build will be not set for a dependency in shrinkwrap file.\nI guess this happens when a direct dependency has a resolved dep and needs to be built and shared-workspace-shrinkwrap is true. I will try to find the cause of this issue and cover it with a test.\nI think this happens when prune removes the node that has a pending build\nprune happens here:\nhttps://github.com/pnpm/pnpm/blob/c204ff727a5adff721f14780d1b25795c7ab2d4b/packages/supi/src/install/updateShrinkwrap.ts#L47. I think your solution is correct.\nUnfortunately, I could not create a test for this yesterday. It would be great if you could reproduce it with some open-source packages or create some mocks in https://github.com/pnpm/pnpm-registry-mock\nIf no, I will merge it tonight as is, with some comments added.. You might not understand the node_modules structure that pnpm creates.\nDependencies of @arcanis/trash-react15 are in node_modules/.registry.npmjs.org/@arcanis/trash-react15/1.0.0/node_modules\nnode_modules/@arcanis/trash-react15 is a symlink to node_modules/.registry.npmjs.org/@arcanis/trash-react15/1.0.0/node_modules/@arcanis/trash-react15\nMore about the node_modules created by pnpm in this article. > Will the tree generated by pnpm be able to properly give E@1.0.0 to the version of D used by the B branch, and E@2.0.0 to the version of D used by the C branch?\nyes, it will be as you described.\npnpm solves peer dependencies correctly. The way these peers are saved in the filesystem is described here. :ship: 2.19.0-0\nNow when the shared workspace will be up-to-date with all the package.json files, a \"Performing headless installation\" info message will be printed and installation will be faster. Seems like I have to work on this a bit more. should work fine with v2.19.0-1. Seems like gatsby has both coffeescript and coffee-script in its dependencies and both of them have a binstub called cake. But there can be only one binstub called cake in one node_modules/.bin, hence the warning. reposting my proposed solution from Gitter:\nit may happen more frequently with flat node_modules but it is not related to that config\nit will happen more frequently because with flat node_modules there are a lot more binstubs\none thing we could do\nI am not sure how hard it would be\nsilently take the binstub of the dependency that is closer to the root\nonly print the warning when packages are from the same depth. @vjpr still needs a test + the fs operation should be async but this is the solution you were seeking for. try running with --reporter ndjson\nmaybe just reporting doesn't work. Running just pnpm link should work. I'll try to look into it tonight. :ship: 2.18.2. You can use hooks. :ship: 2.18.2. I am surprised that you have this error.\nFirst of all, pnpm uses this package to select a place for the store from which hard links can be created.\nSecondly, if a hard link cannot be created, pnpm just copies the package from the store.\nSo in my opinion, this only happens because\n\na custom store location is set\npackage-import-method config is set to hardlink (it is auto by default). What are the steps to repro? realNodeModulesDirs cannot fail on shrinkwrap.yaml that does not exist.. :ship: 2.19.0-2. There is an invalid shrinkwrap.yaml in the root\n/@babel/preset-env/7.0.0/@babel!core@7.1.0 doesn't have all the deps. I wonder what are the steps to get a shrinkwrap.yaml like that. I could not reproduce it yet.. It makes sense because there were some serious peer dependency fixes and refactorings in the patches of 2.17.x.\n\nMaybe you started with an earlier version. Unfortunately, I reproduced it.\nSteps are:\n1. remove @babel/core from packages/foo/package.json\n1. run pnpm m i\n1. add @babel/core to packages/foo/package.json\n1. run pnpm m i\n. :ship: 2.19.2. You are looking at the wrong place for the dependencies of @microsoft/sp-tslint-rules.\nnode_modules/@microsoft/sp-tslint-rules is just a symlink to node_modules/.registry.npmjs.org/@microsoft/sp-tslint-rules/1.7.0/node_modules/@microsoft/sp-tslint-rules/\ndependencies of @microsoft/sp-tslint-rules are in node_modules/.registry.npmjs.org/@microsoft/sp-tslint-rules/1.7.0/node_modules/\nSeems like tslint preserves symlinks when searching for custom rules, which is incorrect. Symlinks should not be preserved when resolving dependencies.\nThere is nothing we can do on pnpm side. pnpm works correctly in this case.. no problem. We probably have to come up with some declarative way to configure this. Optional peers are introducing a new field, \"*Meta\". Maybe we can use something like this:\njson\n\"devDependencies\": {\n  \"webpack\": \"^4.28.2\",\n  \"webpack-command\": \"^0.4.2\"\n},\n\"devDependenciesMeta\": {\n  \"webpack\": {\n    \"bin\": false\n  }\n}\ncc @arcanis. That's how it works with npm as well.. In projects that need it, you can just set shamefully-flatten=true in a .npmrc file. You won't need to run pnpm install --shamefully-flatten all the time. :ship: 2.19.0-2. There is some issue not related to pnpm but seems like it works with flat node_modules, so you can add a .npmrc in the root of the repo with the following content:\nshamefully-flatten=true\nand once you reinstall node_modules, it will work. you lose the strictness that pnpm provides by default: https://medium.com/pnpm/pnpms-strictness-helps-to-avoid-silly-bugs-9a15fb306308\nand it might make pnpm slightly slower.. either that or some tooling tries to resolve a dependency preserving symlinks.\nNode's resolution algorithm does not preserve symlinks. That is why pnpm's symlinked node_modules works. it is supporter: https://pnpm.js.org/docs/en/pnpm-install.html#package-import-method\nrun pnpm set package-import-method reflink. I don't have objections to support this. I don't know what would be the best way. Maybe a new config that uses reflink on Linux and AFPS on Mac?\nthe change would need to be done mostly here\ncc @etamponi . In the long term, I believe peer dependencies should be only resolved from dependencies of the direct parent package (as Ma\u00ebl describes it here) but as of now, I think implementing this might solve some of the cases where we use shamefully-flatten.\nAlso, the reason this came up to me is that I need to somehow track down all the resolved peer dependencies, using a shrinkwrap file, to solve #1506.. > But it would seem that the package manager can infer this relationship relatively easily. Why is it important to make the developer to specify it explicitly?\nBecause we want packages to have access only to those packages that are declared as prod/optional or peer dependencies.. ok, sounds good to me.\nI think we should add some additional warnings for this case. If our project has a direct dependency that relies on a peer dependency and:\n1. our project does not have that peer dependency as a prod dependency\n2. our project does not have the peer dependency declared as a peer dependency of its own\nthen\n\npnpm should print a warning about it. \npnpm should not allow publishing such projects to the registry.. I don't have objections\n\nhere's the website source https://github.com/pnpm/pnpm.github.io. there is pnpm recursive list (or pnpm m ls). We can update it to allow printing only the workspace packages (currently it also prints their dependencies).. :ship: 2.20.0. @morganfree pnpm m ls --depth -1 --porcelain will do what you asked for in #1519, sounds good?. Do you use a shared shrinkwrap.yaml? I mean, do you use the shared-workspace-shrinkwrap=true config?. I cannot reproduce it. Could you create a sample repo?. :ship: 2.21.0. > Could you take a look at the failing AppVeyor build? I'm not entirely sure what that error means, I don't think I touched that part of the project.\nAppVeyor was failing on master as well. I fixed it\n(For some reason tslint catches more issues on Windows. I don't know why). @etamponi is it OK for Glitch to have this new command or do you need a config to disable it?\nLike the ignore-stop-requests, ignore-upload-requests configs. I was too fast to merge it. I will fix some things myself because I don't want to revert now. you can see in this PR the changes I've made.\nusing parseWantedDependencies() for parsing the package specs seemed unreliable to me. For instance, that method would parse a spec like foo@npm:bar@1.0.0 and return foo as alias. Though the real name of the package is bar. It is better to not support that syntax at all to avoid confusion. \nAnd I somewhat simplified the search function in the store controller\nAnyway, next time I will spend more time on review\nThanks for the contribution!. good idea. Probably it may be used in assert-project as well, as it implements storeHas, storeHasNot for specific projects. > I can make a different PR for that once this module is published on npm.\nI don't have objections to merge this but the utils libs are not published to npm anyway\nsee\nhttps://github.com/pnpm/pnpm/blob/master/packages/pnpm/package.json#L86\n. Thanks for your contribution! :tada: . :ship: 2.25.6\n:ship: 3.0.0-alpha.2 (dist-tag: next-major). how do lerna/yarn handle this?\n\nLooks like its only an issue with exec. run has its cwd set to logical still.\n\nyou mean npm run/pnpm run?. :ship: 2.22.0. Lerna names this env variable LERNA_PACKAGE_NAME, I think we should use the same convention, so PNPM_PACKAGE_NAME. :ship: 2.22.0-0. @etamponi in the scope of this PR I will also make side-effects-cache work with independent-leaves.\nI think I will refactor a bit the API and make two properties: sidefEffectsCacheWrite and sideEffectsCacheRead. Instead of sideEffectsCache and sideEffectsCacheReadOnly. yes, but I won't change the config names. At least not now. It would be a breaking change.. @etamponi v2.22.0 will have a breaking change in the store server API\nso both the pnpm server and client will have to be >= 2.22. Wasn't it solved by #1476?. How would you cache it? The store server is always on the same machine on which you run the pnpm commands. I don't see any benefits from caching it\ncc @etamponi . pnpm is an alternative package manager. I encourage you to try it out.\nIf you want an npm proxy, try verdaccio. Decreasing network concurrency might be a bad idea for pnpm server, so network concurrency should be reset after 60 seconds to the original value.\ncc @etamponi . It is great that you've found the reason. I thought it was just a reporting\nissue\nOn Wed, Dec 26, 2018, 19:23 Adrian Barkus <notifications@github.com wrote:\n\nIt looks like the problem is that npm-lifecycle only allows one command\nto run at a time\nhttps://github.com/npm/npm-lifecycle/blob/latest/index.js#L216. How did\nthis ever work?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1578#issuecomment-449996933, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm_xWFyXZ5ug0rf7tm1lRc88rAYENks5u87B6gaJpZM4Zh6S_\n.\n. :ship: 2.23.1. Seems like you need to declare axios and node-fetche as optional peer dependencies.\nbut we did not implement it yet #1486\n\nRegular peer dependencies will also solve your issue but then you'll get warnings if axios or node-fetch are not present.\nOnce we implement optional peers, you'll be able to add this to the package.json of @joe-sh/pnpm-api-adapters:\njson\n\"peerDependencies\": {\n  \"axios\": \"^0.18.0\",\n  \"node-fetch\": \"^2.3.0\"\n},\n\"peerDependenciesMeta\": {\n  \"axios\": {\n    \"optional\": true\n  },\n  \"node-fetch\": {\n    \"optional\": true\n  }\n}. Closing it in favor of #1486\nAlso, see an alternative solution described here. When link-workspace-packages is true, packages are symlinked from the\nworkspace when available. So if there is a foo@1.0.0 in the workspace and a\nworkspace package has foo@1.0.0 in dependencies then foo@1.0.0 is symlinked\nfrom the workspace not fetched from the registry and hardlinked from the\nstore\nOn Wed, Jan 2, 2019, 07:09 Dan Dascalescu <notifications@github.com wrote:\n\nIf I'm reading https://pnpm.js.org/docs/en/pnpm-recursive.html correctly,\nlink-workspace-packages and shared-workspace-shrinkwrap are both false by\ndefault. The apparent bug I'm seeing is that after setting link-workspace-packages\n= true in .npmrc and running pnpm recursive install in this monorepo\nhttps://github.com/dandv/webstorm-pnpm-eslint-jest, each of the two\nworkspaces has a full node_modules directory, instead of hard links. If I\nonly echo \"shared-workspace-shrinkwrap = true\" > .npmrc and reinstall,\nI get node_modules directories with hard links.\nIt appears that \"shared-workspace-shrinkwrap = true\" does what link-workspace-packages\n= true should do, and link-workspace-packages = true alone does nothing\ndifferent from npm.\nI'm on Ubuntu 18.04, node 11.6.0.\npnpm version:\n2.23.1\nCode to reproduce the issue:\nPlease see https://github.com/dandv/webstorm-pnpm-eslint-jest:\n$ git clone https://github.com/dandv/webstorm-pnpm-eslint-jest.git\n$ cd webstorm-pnpm-eslint-jest\n$ echo \"\" > .npmrc\n$ rm -rf /node_modules node_modules /shrinkwrap.yaml shrinkwrap.yaml && pnpm recursive install && du -sh a/node_modules\nScope: all 2 workspace packages\nb                                        | +522 ++++++++++++++++++++++++++++++++++++++++++++++++++++\na                                        | +522 ++++++++++++++++++++++++++++++++++++++++++++++++++++\nb/node_modules/.registry.npmjs.org/fsevents/1.2.4/node_modules/fsevents: Running install script, done in 80ms\nResolving: total 1044, reused 1044, downloaded 0, done\n93M   a/node_modules# As expected\n$ echo \"link-workspace-packages = true\" > .npmrc\n$ rm -rf /node_modules node_modules /shrinkwrap.yaml shrinkwrap.yaml && pnpm recursive install && du -sh a/node_modules\nScope: all 2 workspace packages\nb                                        | +522 ++++++++++++++++++++++++++++++++++++++++++++++++++++\na                                        | +522 ++++++++++++++++++++++++++++++++++++++++++++++++++++\nb/node_modules/.registry.npmjs.org/fsevents/1.2.4/node_modules/fsevents: Running install script, done in 58ms\nResolving: total 1044, reused 1044, downloaded 0, done\n93M   a/node_modules# Not expected\n$ echo \"shared-workspace-shrinkwrap = true\" > .npmrc\n$ rm -rf /node_modules node_modules /shrinkwrap.yaml shrinkwrap.yaml && pnpm recursive install && du -sh a/node_modules\nScope: all 2 workspace packages.                                        | +522 ++++++++++++++++++++++++++++++++++++++++++++++++++++\nnode_modules/.registry.npmjs.org/fsevents/1.2.4/node_modules/fsevents: Running install script, done in 60ms\nResolving: total 522, reused 522, downloaded 0\n32K   a/node_modules# Hard links in node_modules were expected from link-workspace-packages = true\nExpected behavior:\nlink-workspace-packages = true should cause node_modules to contain hard\nlinks.\nActual behavior:\nI get full copies with only link-workspace-packages = true in .npmrc and\nhard links with only shared-workspace-shrinkwrap = true in .npmrc.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1585, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm3p2RFdnJJneYaeSgSx1Ixm2qAssks5u_D7zgaJpZM4ZmNqB\n.\n. it is not true that shared-workspace-shrinkwrap = true leads to less disk space usage.\n\nEven when shared-workspace-shrinkwrap is not true, and every workspace package has all its dependencies in a dedicated node_modules, those dependencies are just hard links to packages in the store. So in your repo you'd have eslint hard linked both into the node_modules of a and b but the hardlink in both a and b would point to the same physical files in the same store.\nI explained on our FAQ page why it seems as if dependencies consume more space:\nhttps://pnpm.js.org/docs/en/faq.html#why-does-my-node-modules-folder-use-disk-space-if-packages-are-stored-in-a-global-store. > Do I understand correctly that link-workspace-packages only makes a difference if packages within the workspace depend on other packages within the workspace and those depended-on packages are also published to the registry? \nyes and no. It is not a requirment that those packages should be in the registry. The packages may be private or not yet published. maybe this package could do the package.json validation\nbut I am not sure the validation should happen on all package.json files. :ship: 2.24.0. What command did you run to get the \"Unresolved dependencies\" warning?\nI tried pnpm install but didn't see such warnings. Related: #1486. We should encourage users to declare their optional peer dependencies via the new \"peerDependenciesMeta\" field. We don't support it yet but we will.. Have you tried the same with npm? I'd be surprised if this fails only with pnpm as we use the same library for building dependencies as npm: https://www.npmjs.com/package/npm-lifecycle. :ship: 2.25.2. ok, I guess it would be fine to use + in both cases. But this seems like a breaking change. we'll have to publish this change on a config. Something like 'scope-escape-char' that defaults to '!' until pnpm v3. :ship: pnpm@3.0.0-alpha.0. pnpm v3 is now latest. at first glance it seems like when they require eslint, it is resolved to eslint in the root/node_modules\nso eslint will search for plugins in root/node_modules instead of root/a/node_modules. Maybe there's a way to pass the directory in which the plugins are to eslint's programmatic API\nAlternatively, you could try to install the plugin (eslint-plugin-jest) in the root of the repo. If we implement (#1355, you'll be able to move even eslint to the root). :ship: 2.25.1. pnpm links the bin files before running lifecycle hooks.\nin this case, node runs a preinstall hook to create the bin.\nseems like we should change the sequence of operation in pnpm. Run the preinstall script before linking the bins. or the reason might be that npm and yarn create the symlinks to bin files w/o checking whether the target exists. I was thinking about zero configuration setup for monorepos.\nIn pnpm v3, shared-workspace-shrinkwrap and link-workspace-packages are going to be true by default. But users still need the pnpm-workspace.yaml.\nMaybe we could make pnpm-workspace.yaml optional. When pnpm m i is run inside a git repo, we can find the root of the workspace by searching for the .git dir.. the problem is that the recursive commands may be used for several scenarios. Using them in a workspace is only one of the use cases.\nFor instance, you may have a dir with many repos and you can run pnpm m i in that dir. In this case, no warning should be printed. Unless you run pnpm m i --shared-workspace-shrinkwrap, I guess. But a global configuration of shared-workspace-shrinkwrap should not trigger a warning. It is kind of what Yarn Plug'n'Play does. Maybe we'll support it in the future. Or something similar. :ship: 3.0.0-alpha.1. Weird, it should've been printed. This case is even covered with a unit test\nhttps://github.com/pnpm/pnpm/blob/4a15b725e3f67fe6922e3b6437b683204f2a2bda/packages/default-reporter/test/reportingLifecycleScripts.ts#L501-L512. Could you attach the pnpm-debug.log file?. The current behavior was copied from npm. I agree that it would make more sense to preserve the specs.. @vjpr you were asking about this as well. :ship: 3.0.0-alpha.2 (dist-tag: next-major). shrinkwrap might be dated but I like that it does not overlap with file locks. We use file locks to lock the store and node_modules during installation.\nOther possible names could be\n\npnpm-shrinkwrap.yaml\npnpm-snapshot.yaml\npnpm-resolutions.yaml\npnpm-versions.yaml\npnpm-dependencies.yaml\npnpm-index.yaml\n\nIn any case, I am fine with the proposed rename if most people will vote for it. It is a yaml file, so we need to keep the appropriate extension. pnpm-lock.yaml or pnpm-lock.yml. @KSXGitHub recommends keeping the .yaml extension for better backward compatibility, so naming the file pnpm-lock.yaml.\nAny objections?. :ship: 3.0.0-alpha.3. I can make it configurable. We call it the \"virtual store\".\nOn Thu, Jan 31, 2019, 03:07 Vaughan Rouesnel <notifications@github.com\nwrote:\n\nE.g. node_modules/.pnpm/.registry.npmjs.org, node_modules/.pnpm/.\ngithub.com\n\nThis makes a clear separation between the root package's node_modules\n   and the monorepo registry.\nFor monorepo with multiple Docker images, node_modules/.pnpm could\n   be mounted as a data volume and shared across all Docker builds.\nI've written some logic at some point (I think a workaround for a\n   tool) that reference's .registry. If there are other registries, then\n   its hard to write a function that will return all pnpm registry folders.\n   But if all the folders inside node_modules/.pnpm were registries, then\n   this logic is easier.\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1636, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm4gejp7lYgY0L2SzbDNX1x__CAtgks5vIkG9gaJpZM4abYEm\n.\n. If the virtual store is inside the node_modules dir, it should have a leading dot because otherwise, Node will think it is a module dir. But it may be a sibling dir in the same directory where node_modules is, without the dot. > Could --use-store-server speed up multiple Docker installs? Can a server be shared outside of a Docker container?\n\nIf you mean, when preparing the servers to be dockerized, then no. Just running pnpm recursive install will be faster. Recursive install can do installation in several independent node_modules concurrently (if they use the same store).\n\nHow can I programmatically get the dependent tree of all local workspace packages? Does pnpm have an api for this?\n\nNo way to do it programmatically at the moment but we can move this logic to a separate package\nRegarding the virtual-store/store, I had an idea that might be related. I'd like to move the tarball files out from the store. That would give us several benefits, some of which:\n\nwe may store the tarballs as a verdaccio storage. In that case, pnpm's registry mirror could be used as a storage for a local verdaccio. You could browse your registry mirror via the nice verdaccio web interface.\nwe should have one store per disk but we may have 1 registry mirror per system\n\nAnother thing I was thinking about, pnpm could have a feature that would pack all the needed tarballs by a repo into a local repo-specific registry mirror. That registry mirror could be commited with the repo. As a result, the git repo become completly independent.\ncc @octogonz, @etamponi \n. shrinkwrap.yaml v4.0 is used in a monorepo, when shared-workspace-shrinkwrap is true. If you moved a subset of your deps into some temp folder, you need to also move pnpm-workspace.yaml and you need to set the shared-workspace-shrinkwrap to true. Otherwise, pnpm will want a shrinkwrap v3.9. > Also, is it possible to ignore things that are in the shrinkwrap, but are missing in the tree?\nthis I don't understand, maybe describe it in more details or give me a sample repo. yep, @pnpm/logger is a peer dependency of most of the pnpm packages \nhttps://github.com/pnpm/pnpm/blob/52046a31b9fb57e8c17f43551e6d507b960c6029/packages/shrinkwrap-file/package.json#L35-L37. Seems like this works: \"x\": \"pnpm recursive exec -- pnpm run x\". Here's the piece of code that exits the run for some reason\nhttps://github.com/zkochan/lifecycle/blob/ec87afa663a6f281a9a5850c2801bfb05aaff3eb/index.js#L72-L76\nUsing --unsafe-perm seem to help\npnpm recursive run x --unsafe-perm. OK, so the issue is that unsafePerm should be always true when running pnpm run. That's easy to fix. :ship: 2.25.6\n:ship: 3.0.0-alpha.2 (dist-tag: next-major). yes, pnpm should fail on invalid flags.\nlet's make it in v3. I use it all the time with pnpm.\nI think it will cause no harm as -- is rarely used with pnpm test/run and I don't even know what flags are supported by test/run.\nAlso, exec looks nicer w/o the --.. Only advanced users of npm know about the -- in run commands. On the other hand, with this change, -- would behave the same on all pnpm commands. I think it is a good idea but that's my personal opinion.\ncc @DanielRuf @etamponi @KSXGitHub @aleclarson . Sure. https://pnpm.js.org/docs/en/pnpm-recursive.html#lt-package-selector-filter-lt-package-selector. filtering works with and without shared-workspace-shrinkwrap. Do you mean the pnpm ls command?\n--porcelain doesn't really do anything with the pnpm i command. Filtering for dependencies/dependents is only possible by package name at the moment. So foo..., ...foo.\nnew syntax suggestion for filtering by path may be proposed here: https://github.com/pnpm/spec/blob/master/workspace/filtering.md. depth should be always 0 by default for the pnpm ls command. Seems like a bug. Does this happen while there is no node_modules yet? That's weird. pnpm update does not update package.json, it only updates packages to the latest versions that satisfy the ranges in the current package.json.\nTo update package.json with new ranges, currently you have to run something like pnpm update foo@latest.. Seems like the second issue is pnpm issue as well. We talked about it here: #855. You probably need to look in https://github.com/pnpm/local-resolver. I noticed 1 issue, the @vue/cli-service runs webpack with some plugins (babel-loader and eslint-loader). babel-loader is a dep of @vue/cli-plugin-babel and eslint-loader is a dep of @vue/cli-plugin-eslint. When node_modules is flat, webpack can resolve these plugins from the root of the node_modules dir. But pnpm creates a non-flat node_modules, so these plugins should be probably resolved by @vue/cli-service and passed to webpack. I think that is not necessary. pnpm v3 will be the latest soon.. So pnpm v3 is now latest. But you say shamefully-flatten is still needed? It would be great to fix the toolings to make them work without flat node_modules. Sounds like Yarn Plug'n'Play which overrides Node's module resolution algorithm. Reproducible only on Windows. I'll try to fix this.\nThis happens because there are two files: pageBreak.js and pagebreak.js. Windows does not allow two files with the same name in one folder (it ignores cases).\nBoth npm and Yarn only unpack pagebreak.js and don't print any warnings.. :ship: 2.25.7. @HGZwebdesign\nI did this fix only for Windows. I can make it for Mac as well.. @wmertens \n\nPerhaps the fix should be to first try writing\n\nthis is too late as we need to create an index file that will not contain the file duplicates. If the index file will contain files that are not written to the filesystem, then pnpm will always refetch the package from registry, on every installation.. After a bit more investigation I've found out that file systems may be case insensitive on any OS. Also, on Windows, some folders may be case sensitive, others no. So the store may be case sensitive while the project's node_modules  may be case insensitive.\n\nWe can do feature detection in the store directory. If ~/.pnpm-store/STORE.JSON exists, then the store directory is case sensitive. This will solve most of the problems.\nHowever, there will be an edge case when the store is case sensitive and the project/node_modules is not. For that case, we may fall back to the solution suggested by @wmertens. Try creating hard links. If hard link exists, skip it (but print a warning). This has a downside though, that the package will always be relinked from the store, as it will miss a file.. :ship: 3.0.1. pnpm uses this lib to unpack tarballs https://github.com/zkochan/unpack-stream\nIt uses tar-fs under the hood.. Is there a way to cover this with tests?\nWe can make unpack-stream pass the option.\nWould you like to contribute this?. Seems like a design flaw in babel. The compiled files in new_folder/.next are requiring packages that are not in the package.json of the project. This works with the flat node_modules of npm/Yarn because dependencies of @babel/runtime-corejs2 are hoisted to the root of node_modules.\nThere are two solutions:\n\ninstall regenerator-runtime@0.12 and core-js@2 as direct dependencies of your project\ncreate .npmrc in the root of the project with this content: shamefully-flatten=true. All the configs on this page, for instance, may be specified as flags or configs in .npmrc. I don't think a separate page should be created. Maybe it should just be noted somewhere. how do I get the tns cli? What package should I Install globally?\n\nthe chalk in the root of node_modules is just a symlink to node_modules/.registry.npmjs.org/chalk/2.4.2/node_modules/chalk. So it will resolve ansi-styles from node_modules/.registry.npmjs.org/chalk/2.4.2/node_modules/ansi-styles, not from node_modules/ansi-styles. This is a bit explained in this article. Could you explain how nix installs pnpm?\nDoes it download the pnpm package from this repo and run npm inside the pnpm/packages/pnpm dir?\nWhy doesn't download just the pnpm tarball from the npm registry? pnpm is bundled with all its dependencies, so it is enough just to download a single tarball from the registry and unpack it. That's how the pnpm standalone installer works. ok,  I suggest an alternative solution. We'll remove the whole \"devDependencies\" field from pnpm, before publishing it to the registry.. try 3.0.1. cool, I did it manually though, before publishing, so I'll have to automate it.. This will be a change in https://github.com/zkochan/publish-packed\nwhich is used to publish pnpm. This is a bug in one of apollo's packages: https://github.com/apollographql/apollo-server/issues/2151\nAs a workaround, you may set shamefully-flatten=true in .npmrc.. Here is the issue. Also, there were many discussions in chats and even on twitter. Basically, most of our users wanted to call the file \"pnpm-lock\".\nI personally don't like this name. I preferred shrinkwrap, though I think there could be better names.\nHistorically, we introduced shrinkwrap.yaml after Yarn came out. It was very disappointing when npm adopted the term \"lock\" as well (package-lock.json). That decision of npm made us the minority and users of pnpm were getting confused. So we really had no choice rather than switching renaming shrinkwrap to lockfile.. because the config keys are-named-like-this in npmrc. meow converts the flags to camel case, we convert the rc configs and then we merge the two sources of options together\n. This if statement won't work after your update.\nI think this should help\nif [[ $TRAVIS_NODE_VERSION == \"4\" ]]; then ./node_modules/.bin/docpress build; fi\n. Are you sure about using the node binary is a bad thing? Node might be installed in a folder named nodejs on some old systems but it will be accessible via node in the command line nevertheless, won't it?\n. I guess the docs say it is a bad idea because it can cause problems during installation but we skip the whole installation step, so I think we should be fine\n. I had to update it, otherwise the tests wouldn't pass\n. good idea, I'll do that\n. I think that's why ctx.fetches exists.\n. Indeed, thanks\n. But opts seems more natural as a last parameter. Maybe lets create two separate functions? Or lets move input to a property in opts?\nIf we decide to change the order of args, I guess we have to move opts to the beginning in all the API functions for consistency\n. Just a note, for the install there are two separate functions: pnpm.install(pkgsToInstall, [options]) and pnpm.installPkgDeps([options])\nSo we have to decide between changing the order of arguments or creating a dedicated function.\n. Changed to async\n. I am not sure this was necessary because it is used only in tests but done\n. thanks, changed to arr-flatten\n. Or maybe I can put the code in here from release.sh. I'll try.\n. Seems like I can't modify the package.json from a prepublish script, so this implementation is the only way\n. it is in lib/. I move the current node_modules temporarily to .tmp/ and install a fresh bundle. After publishing the initial node_modules is moved back to the root\n. thanks! done\n. good idea\n. probably less because that would be 1024^3. Probably shouldn't be so big\n. @iamstarkov look. One of the stores will be used. They won't get mixed\n. oops, no need in that... that was for debug purposes because the test was failing\n. tests on appveyor seem to work... probably path.join is smart enough\n. I think an error is better. It is a new property not available in npm anyway\n. I'll change it to async\n. I'll revert it. I thought there was a mutation problem but there was not\n. well, it should show only the part of the raw tap output that describes fails. But I checked and it strips out too much, doesn't show the expected/actual text and the row where the error happened. So I'll try some other alternative\nI want this because there are too many tap logs and when something fails it is very hard to find the error message. Especially in AppVeyor\n. tap-dot seems to be good\n. Because hopefully we will use the same store structure as ied. Though maybe .pnpm-store is a good idea till the specs are not finished. This is a valid version name. There might be an error when installing 1.0.0. Later someone might try to install 1.0.0-stage. The broken 1.0.0 fetch will be considered to be 1.0.0-stage. That might do it. The target folder will either be a version or a commit sha for git dependencies.. yes, thanks. maybe this logic could go to the safeLink function? It has safe in its name so I guess it would be logical. if this is an error, maybe we should log a warning? You can import logger from 'pnpm-logger' and use the logger.warn function. This can be combined with the 3rd statement, right? stat.isSymbolicLink() || stat.isFile(). not used anymore, can be removed. LGTM. Why do we need a type here? the git-repo type can fetch from tarball as well. If only for caching, maybe it can be moved out of the Resolution object at all?!. I think it is a good idea. I wonder if tarball should be in this type. Maybe git resolver can return either a GitRepositoryResolution or a TarballResolution. I think it should be redesigned somehow in a way that everything that is returned by the resolution function is saved to the shrinkwrap object. So that this switch wouldn't be needed at all. yes, probably. This would also solve the other issue that I commented under shrinkwrap. Seems like this if statement is totally redundant after moving out the fetch. The logic is the same\nI suggest:\n\nthis if statement can be removed\nthe link boolean can be removed from the DirectoryResolution type\nthe linkLocal option can be used in the fetch function to decide how to connect the dependency to the project. But it is an npm config. You can create an .npmrc file with link-local = true in the root of the repo.. You might be right, maybe some of the npm configs should go to shrinkwrap. But in that case not only link-local but also things like no-optional, no-bin-links. he/she should. Warnings are printed. Here is the related code https://github.com/pnpm/pnpm-reporter-default/blob/master/src/index.ts#L45-L48. It is better to name booleans without negation. So firstTime: boolean = true in this case. I prefer when nesting is avoided, but I don't want to start a holy war, so I don't insist.. Also seems like Node 4 tests don't pass. Probably because of the default argument value. that is expected. bole is used for logging and it should be configured to print output to the console. I intentionally did it silent to have less noise in tests. I'll remove that option. I have doubts this will work because we lock the global store. So you'll have to do this sequentially, wait for the previous link to finish. I know it currently means more code but it will better to add if statements outside, instead of passing in options to requireHook(). \n\njs\nif (!opts.ignorePnpmfile) {\n  opts.hooks = requireHooks(prefix)\n}. no, it is undefined when I import it via import from.. the spread syntax might fail on Node 4. Hard to answer. I think it would be a breaking change. Someone created a pnpmfile in the root of their package and expected it to be picked up. Someone else sets the pnpmfile globally and the pnpmfile.js in the root of the projects gets ignored now?\nI think in pnpm v2 we should only read the pnpmfile if there is this config. Otherwise, it gets too complex.. I would not want to add additional filesystem operations for searching the global pnpmfile. However, we can have an additional config, global-pnpmfile. In that case, we can read both the global pnpmfile and the local one and compose them. Sounds good?. I don't remember any reason, so I'll change it. Install mz as a prod dependency and require mz/fs. We already use it in other pnpm packages. Log an info message in this case with logger from @pnpm/logger. If there is no try/catch anymore then declare serverJson on this line. let serverJson = ...\n. just use mz/fs. You can use delay. It is already in dependencies.. instead of the handleErrors boolean, just create a new function that closes the file and call it from the \"ignore errors\" close function. You have to functions. closeServerJson() and silentCloseServerJson(). shouldn't serverJson be removed in this case?. use an options object to set {shouldRetryOnNoent: true} because otherwise it is unclear what the bool means when tryLoadServerJson is called. This should be an error. The process should exit with a non-zero exit code because starting the server failed.\nSo just throw an error with that or similar message. Is this type not available via @types/node?. you use it before it was declared in code. I guess destructuring will fail on Node.js 4. We still support Node.js 4. kill is an async function. Shouldn't you wait for completion?. why don't you start the timer at the end of the function? Also, you could just use await delay(.... You can use t.fail('There are still multiple server processes running after 10 seconds')\nbut I think the right assert is\nt.equal(serverProcessList.length, 1, 'one server is running after 10 seconds'). use t.pass here and specify a t.plan at the start of the test. In that case, if t.pass will be executed less than planned, the test will fail.. It is not good to use console.log in tests because we use the tap format to output results of tests. And outputting via console might make the format incompatible with different test reporters. You could use t.comment(...). CI fails because the plan should be 5.\n4 process exit checks + 1 server.json exists check at line 339. I think this should be an error as well because the process failed. The task was to start a server and the task could not be accomplished.\njs\nthrow new Error(`Canceling startup of server (pid ${process.pid}) because another process got exclusive access to server.json`)\nAlso, the comment at line 46 does not provide any additional info, so it is redundant. If you think this is how it should be done, please file an issue instead of the comment.. is this try/catch needed? server.json is always removed in onExit() anyway, right?. Like in other tests, add prepare(t) to the beginning of the test case. It will create a temp folder for the test and chdir to it.. You can use the spawn function from the test utils. If you use that function and you call the prepare function in the beginning of the test case, then you can skip setting the store location too\njs\nspawn(['server', 'start']). This might be the reason why the test fails on AppVeyor sometimes. If you check the other tests, you'll see that we use await execPnpm('server', 'stop') to stop the server.\nYou could either\n1. fix the issue on Windows, if you know how\n2. ignore the server.json check when running the test on Windows\n3. use server stop instead of killing the process. This should never happen, so an error should be probably thrown. this is not used. I think you can run them all simultaneously because that is how it works during regular installation (there is a network concurrency limit inside package-requester).\ntypescript\nconst pkgIds = await Promise.all(deps.map(.... you could pass in the tag config from pnpm. It is a config that is \"latest\" by default.. As far as I remember, this is not the desired behavior because you don't want this prefix to be added to store.json\nI think what we can do is, make package requester add the new fields to storeIndex right after downloading the packages to the store.\nThen calling updateConnections won't be needed. As you can see, storeIndex is passed in to package-requester\nhttps://github.com/pnpm/package-store/blob/master/src/storeController/index.ts#L55\nso you can just add the field in package-requester like it is done in package-store currently (but just add an empty array)\nhttps://github.com/pnpm/package-store/blob/master/src/storeController/index.ts#L91. might be good to also test the content of store.json. with the implementation you did, an entry like this well be added to store.json:\n\"registry.npmjs.com/foo/1.0.0\": [\"/home/usr\"],\nbut what you need is:\n\"registry.npmjs.com/foo/1.0.0\": [],. the default should be 'latest'. I think there should be an info message printed about the added tarballs.\nWhen you run pnpm store add typescript@1 it would be useful to see which version of typescript was added. So maybe just print the pkgId?\n$ pnpm store add typescript@1\n+ registry.npmjs.org/typescript/1.2.1\npnpm store prune provides a similar output at the moment.\nAlso, I think it is important to print failures. So don't just ignore if fetchingFiles fails. Maybe the process should exit with a non-zero exit code. Fetching the package is the intention of the operation after all, so if it fails, the operation was not successful.. You can make a deepEqual of the whole file because it should be empty\ntypescript\nt.deepEqual(storeIndex, {\n  'localhost+4873/express/4.16.3': [],\n}). pnpm store add [pkg...] would be more straightforward. oh, I see. But that's an issue, isn't it? I think pnpm store add should be able to create a new store. are you sure? When you run it manually, it probably uses your global store that already exists at ~/.pnpm-store but tests use a new store in every test case. So to test it manually, you'd need something like rm -rf store && pnpm store add typescript@1 --store store. please add an additional test for checking this behavior. You can just add a non-existent package to the store pnpm store add @pnpm/this-does-not-exist. should it work with local tarballs? If you pass in the prefix, it will work with pnpm store add ../some.tgz. it should be passed in by pnpm. prefix is basically the current working directory in most cases. this code is incorrect because when you set pnpm-prefix,  APPDATA will be used. You should use round brackets\nts\n  const npmGlobalPrefix: string = pnpmConfig.rawNpmConfig['pnpm-prefix'] || (process.env.APPDATA. This is how argIndex should be found: \nts\nconst argIndex = cliConf.argv.cooked.indexOf('--') - 1\nAlso, I would give the variable some more meaningful name. dashDashIndex or doubleDashIndex or paramsSeparatorIndex. Typo. It should be \"successful\" with a single \"l\" at the end\nyou can even omit the message in this case as it is the only assertion in the test case, which has a description. actually, my proposed solution is also bad because it will return a bad index in case like pnpm run test --foo -- --flag=true. Seems like the right solution is to pass the raw argv to npm when the commands are passed through to npm. Name the variable relDepPath.. \"as various\" => \"has various\". Add a comment above the test\nts\n// Covers https://github.com/pnpm/pnpm/issues/1386. and maybe a\nts\n// TODO: use smaller packages to cover the test case. use import fs = require('mz/fs')\nand the async version await fs.realpath(.... no need to put Regression at the beginning.\nyou may put recursive:, I guess. to get the root of the repo, check shrinkwrapDirectory.. I think returning this is misleading. I think maybe the check should happen not inside this function. Maybe this function shouldn't even be called. we don't use semicolons. tslint should've failed on this. I guess we could save it with / on Windows as well. I think it is ok. yes. This will have to be updated once I merge #1528\nI did a big refactoring in supi.. you can run pnpm run lint -- --fix in every project. indeed, there was an issue with the tslint rules. I pushed a fix to master. I think it would be fine to call the type PackageUsage instead of FindPackageUsagesResponse . as far as I understand, with this change, the function will only check if the store exists, not if the package/version exists in the store. this function is completely unrelated to project if the store is not the project's store.\nSo I think it should be a different util function. Maybe just storeHas(storePath, pkgName, pkgVersion)\nOr something like assertStore() (similarly to assertProject). And then you can use it as await store.has().... I don't think getEncodedRegistryName () and getStorePath() are needed. I don't like this check. If err is not HTTPError, the test will pass.\nit can be something like \nts\nt.equal((err as HTTPError).statusCode, expectedCode, `response code should be a ${expectedCode}`). you don't necessarily need to refactor in tests.\nIt is ok if you just copy-paste some code into each testcase.. you can simplify it to\nts\nt.ok(JSON.parse(err.response.body).error, 'error field should be set in response body')\nif parsing the JSON will fail then the test will fail, so that's ok. use t.comment() instead of console.log. A space is required after '{' and before '}'. I would add a comment\nts\n      res.statusCode = 405 // Method Not Allowed. add comment about why it is needed. publish dir-is-case-sensitive 1. log a warning. assert the index file. publish v5. ",
    "dandv": "The link to the pnpm shared store is now dead. Pointing to that other issue for SEO.. Where the current documentation about a shared store? https://pnpm.js.org/docs/en/about-package-store.html doesn't mention anything about it. My use case is that I want to share the same store across two volumes in Linux (details here - does that situation qualify as a \"different disk\"?).. apollo-server doesn't work either.. Admittedly I haven't fully read each comment on this issue, but \"Each disk has a dedicated store now.\" doesn't seem to be the case with TC drives mounted on Linux.\nI've just installed pnpm and haven't configured a store. The README states\n\nIf there is no homedir on the disk, then the store is created in the root. For example, if installation is happening on disk D then the store will be created in D:\\.pnpm-store.\n\nI have some packages on a TC drive mounted at /t/, and if I run pnpm install there, I get the EXDEV: cross-device link not permitted warning, and a node_modules/.registry.npmjs.org directory is created in each package directory, containing directories and files (not links) for each package. I don't have a home directory on that disk, but /t/.pnpm-store was not created in the root of the TC disk. Instead, ~/.pnpm-store was created.\nPresumably can't tell that the /t/ path is not the same disk as /home/dandv?\nI tried as a workaround to set npm config set store /t/.pnpm-store and delete /home/dandv/.pnpm-store, but that didn't help - node_modules/.registry.npmjs.org was still created in each package directory, and it contained directories and files (no symlinks), not saving any space.. Thanks @zkochan. indeed, I didn't get any warnings the second time. \nAs an experiment, I installed the dependencies from the same package.json twice, in two different directories on the TC drive. Still, 9MB of space were consumed. This is much better than yarn, but I'm curious why 9 extra MB.\n```\n/t/prg $ pnpm config get store\n/t/.pnpm-store\n/t/prg $ rm -rf $(pnpm config get store)\n/t/prg $ df -h\nFilesystem              Size  Used Avail Use% Mounted on\n[...]\n/dev/mapper/truecrypt1  1.5G  368M  986M  28% /t\n[...]\n/t/prg $ (cd monitors ; pnpm install)\nPackages: +372\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nResolving: total 372, reused 0, downloaded 372, done\nRunning install for registry.npmjs.org/utf-8-validate/4.0.0, done\n/t/prg/monitors/node_modules/influx-utils -> ../influx-utils\n[...]\n/t/prg/monitors/node_modules/utils -> ../utils\ndependencies:\n+ big.js 5.0.3\n[...]\n+ simple-xmpp 1.3.0\ndevDependencies:\n+ eslint 4.17.0\n+ eslint-config-airbnb-base 12.1.0\n+ eslint-plugin-import 2.8.0\n/t/prg $ df -h\nFilesystem              Size  Used Avail Use% Mounted on\n[...]\n/dev/mapper/truecrypt1  1.5G  475M  880M  36% /z\n[...]\nAt this point, /t/.pnpm-store is ~65MB and monitors/node_modules is ~47MB.\n/t/prg $ mkdir monitors2\n/t/prg $ cp monitors/package.json monitors2/\n/t/prg $ cd monitors2; pnpm install ; df -h\nPackages: +372\nRunning install for registry.npmjs.org/utf-8-validate/4.0.0, done\n/t/prg/monitors2/node_modules/influx-utils -> ../influx-utils\n[...]\n/t/prg/monitors2/node_modules/utils -> ../utils\ndependencies:\n+ big.js 5.0.3\n[...]\n+ simple-xmpp 1.3.0\ndevDependencies:\n+ eslint 4.17.0\n+ eslint-config-airbnb-base 12.1.0\n+ eslint-plugin-import 2.8.0\nFilesystem              Size  Used Avail Use% Mounted on\n[...]\n/dev/mapper/truecrypt1  1.5G  484M  871M  36% /z\n[...]\nOnly 9MB extra were consumed.\n``\n. > Workaround:pnpm i -S eslint-import-resolver-node`\nThat worked, but out of curiosity, what does -S (capital S) do? I can't find that switch at https://pnpm.js.org/docs/usage/pnpm-cli.html or https://docs.npmjs.com/cli/install or via pnpm i --help.. Shouldn't that be --save-dev rather?. For those who land here from a web search, the FAQ link has moved to:\nhttps://pnpm.js.org/docs/en/faq.html#why-does-my-node-modules-folder-use-disk-space-if-packages-are-stored-in-a-global-store. Worth adding this WebStorm issue with eslint-plugin-jest?. Same issue with 2.23.1 on Linux. To reproduce, run pnpm multi install and press Ctrl+S to pause the process. Wait a few minutes, then press Ctrl+Q to resume.\n```\n$ pnpm multi install\nScope: all 3 workspace packages\nResolving: total 33, reused 0, downloaded 24\n/usr/lib/node_modules/pnpm/lib/node_modules/proper-lockfile/index.js:186\n    compromised = compromised || function (err) { throw err; };\n                                                  ^\nError: Unable to update lock within the stale threshold\n    at options.fs.utimes (/usr/lib/node_modules/pnpm/lib/node_modules/proper-lockfile/index.js:108:66)\n    at FSReqCallback.args [as oncomplete] (fs.js:147:20)\n$ pnpm multi install\nScope: all 3 workspace packages\n.                                        | \u2009WARN\u2009 waiting for another installation to complete...\n```\n^ never finishes, even though no installation is in progress. Had to delete the directory in ${PNPM_STORE}/2/_locks.. Jest doesn't work for me either, but the error is SyntaxError: Unexpected token import on the line that imports my module (import { MyModule } from '..'). If I run npm install; npm run test instead of pnpm install; pnpm run test, Jest works. I'm using the latest Jest, 22.3.0.\n@KSXGitHub's workaround didn't work (same error). My .babelrc is { \"plugins\": [\"transform-es2015-modules-commonjs\"] } because Jest doesn't support native ES6 modules.. Thanks for clarifying.\n\n\nDo I understand correctly that link-workspace-packages only makes a difference if packages within the workspace depend on other packages within the workspace and those depended-on packages are also published to the registry? In my monorepo, the two packages are completely independent from each other, but have the same npm dependencies. Would link-workspace-packages make any difference in this situation?\n\n\nI've updated my OP after reading #794 and understanding hard links better. If I understand #1 correctly, the issue turns out to be really about why shared-workspace-shrinkwrap = true leads to ~half the disk space consumption, and I've left a related question on Gitter.. PS: I've edited my comment on GitHub and I saw that you replied via email, so you might have seen an older version of it.. Turns out the culprit is this require line:\njs\nreturn new (require(adapters[adapter]))(opts);\n\n\nWhat could be added to the \"Does not work with X\" FAQ entry to help module authors ensure compatibility with pnpm in cases like these?. I can reproduce the problem without WebStorm. When calling node_modules/eslint/bin/eslint.js *.js from the a directory, eslint can't find the plugin:\n```\n$ git clone git@github.com:dandv/webstorm-pnpm-eslint-jest.git\nCloning into 'webstorm-pnpm-eslint-jest'...\nremote: Enumerating objects: 19, done.\nremote: Counting objects: 100% (19/19), done.\nremote: Compressing objects: 100% (13/13), done.\nReceiving objects: 100% (19/19), 36.86 KiB | 1.02 MiB/s, done.\nResolving deltas: 100% (4/4), done.\nremote: Total 19 (delta 4), reused 17 (delta 2), pack-reused 0\n~/prg$ cd webstorm-pnpm-eslint-jest\n~/prg/webstorm-pnpm-eslint-jest$ pnpm multi install\nScope: all 2 workspace packages\nPerforming headless installation\n.                                        | +522 ++++++++++++++++++++++++++++++++++++++++++++++++++++\nResolving: total 522, reused 503, downloaded 19, done\nnode_modules/.registry.npmjs.org/fsevents/1.2.4/node_modules/fsevents: Running install script, done in 55ms\n~/prg/webstorm-pnpm-eslint-jest$ cd a\n~/prg/webstorm-pnpm-eslint-jest/a$ node_modules/eslint/bin/eslint.js *.js\nOops! Something went wrong! :(\nESLint: 5.11.1.\nESLint couldn't find the plugin \"eslint-plugin-jest\". This can happen for a couple different reasons:\n\n\nIf ESLint is installed globally, [...]\n\n\nIf ESLint is installed locally, then it's likely that the plugin isn't installed correctly. Try reinstalling by running the following:\nnpm i eslint-plugin-jest@latest --save-dev\n\n\nPath to ESLint package: /home/dandv/prg/webstorm-pnpm-eslint-jest/node_modules/.registry.npmjs.org/eslint/5.11.1/node_modules/eslint\nIf you still can't figure out the problem, please stop by https://gitter.im/eslint/eslint to chat with the team.\n```\npnpm 2.25.2.. Still an issue in v3, wondering if there's an easy workaround. --shamefully_fatten generated this warning, and the problem remains unsolved:\n\nCannot link bin \"jest\" of \"jest-cli\" to \"/home/dandv/monorepo/myapp/node_modules/.bin\". A package called \"jest\" already has its bin linked.\n\nI'm not sure how jest was already linked. I deleted each node_modules directory from the monorepo before running pnpm recursive install --shamefully-flatten:\nbash\nrm -rf pnpm-lock.yaml node_modules/ **/node_modules\nI've also tried npm install-ing eslint-plugin-jest in the monorepo directory. That was some progress, but in the end I ran into this from eslint-config-airbnb:\n\nError: Cannot find module 'eslint/lib/util/source-code'\n\nAnyway, hope there's some solution, and thanks for keeping making pnpm better!. ",
    "mhart": ".gitignore as well \u2013 for when you want to check your prod dependencies in to git, but not your dev dependencies. I'm sure there are other \".ignore\" files that could benefit from this too.\nAny time you want to tar up / archive your project to transfer or deploy it anywhere else, basically.\nThere's an argument to be made that it makes it easier to navigate from a filesystem perspective \u2013 when you want to debug your modules, etc \u2013 you know you just need to worry about what's in the prod dir.\n. @rstacruz prod would always take precedence over dev in that case\nAgreed though, probably better to wait to see how npm's plan pans out.\n@jonathanong I'm not sure what you're referring to?\n. ",
    "jonathanong": "i prefer the tarballs to be stored/cached globally, but i'd always want the actual packages to be unzipped and compiled within the current module. otherwise, if something fucks up, i'd have to clear the global cache.\n. ",
    "DTrejo": "pnpm, downloading from the network (and maybe also pulling from npm cache?) is faster than urn, doing \"cp r\". Awesome :) Closing this cause you have better things to do! pnpm doesn't yet work offline, but if I am ever on an airplane, programming, and get annoyed at slow installs, expect a PR :)\n. ",
    "zhoufenfens": "@rstacruz yes,it always happens,never succeed once time.\n. ",
    "stefanpenner": "Let me recommend the use of junctions as an alternative to symlinks on directories for Windows. \n. Although symlinks are technically possible in newer Windows, the permission model results in fatally horrible UX. Avoid if possible \nIf not possible to avoid I can share more, having dealt with this\n. some instructions for getting symlinks working (that seems to work for all users, unless some strange admin stuff) http://ember-cli.com/user-guide/#symlinks-on-windows\nUltimately though, this project is (or should) use junctions, as it merely needs to link dir, not dir + files.\n. Nice\n. :+1: will give it a whirl this week.\n. I may have some time sunday, if I remember I'll give it a whirl since ember-cli somewhat consistently has this problem. I would also recommend giving that repo a try \\w pnpm, as  it may serve as a good reproduction as it seems to hapen often\n. Also, it appears sometimes it also works first try.. (or maybe some cache is primed)\n. Seems to be resolved, will reopen if I see it again.\n. :+1: \n. ",
    "pnorman": "I ran across this elsewhere (openstreetmap/iD#2574) for symlinks and git on Windows.\nhttp://stackoverflow.com/questions/5917249/git-symlinks-in-windows says that NTFS junctions can be used and unlike NTFS symlinks, do not require elevated UAC permissions.\n. ",
    "louy2": "That's probably a UAC problem. Creating symlink in Windows always requires Admin.\n. I am also  experiencing this when installing truffle and ethereumjs-testrpc on Alpine Linux during linking. . /usr. I don't have the system with me anymore, so I am closing it as irrelevant now.  . ",
    "richardneililagan": "Confirmed that it works in an elevated sh-enabled prompt in Windows.\n\n. ",
    "iamstarkov": "I think original problem is more related to permissions issue than symlink one\n. Maybe its basic permissions issue and doesn't relate to symlinking. That said can you try to grant access to your user to whole C:\\Users\\peterd\\.babun\\cygwin\\home\\peterd\\tmp folder?\n. @reubano message is not that bad, but its not that good either. @zkochan might can help. i would like to get it as well, ava --watch is not running out of the box, so i have to install optional chokidar everytime\n. regarding caching, pnpm still needs to verify there are no newer versions out there\n. at least its working solution\n. im not sure how to change pnpm to make npm outdated to work as intended\n. is it possible to fix npm behaviour?\n. i think of pr to make npm cli respect symlinks for outdated method\n. it's because hosted packages are not supported \n. but they are in roadmap https://github.com/rstacruz/pnpm/blob/master/docs/roadmap.md\n. it turned out that CI tests are failing only on saveDev scoped module to package.json (@rstacruz/tap-spec) and unfortunately all scoped related are not passing on my machine because of timeout error\n. it seems like test cases are not isolated\n. do you have any idea why scoped modules can not work? separate $ npm i -D @rstacruz/tap-spec works fine\n. except problems with testing scoped modules, tests are green and feature is working\n. > it should, actually. did you ever figure it out?\nnope, but pnpm itself is working fine with scoped modules, also on another laptop tests are fine, will investigate on problem machine with hanging tests\n. unrelated to pr itself, but related to hanging tests:\n1) installCmd doesn't play well without flags, but i fixed it for debugging\n2) everything is well with cli, as i said before\n3) regarding tests, first error entry point is buildToStoreCached, dunno what to do to reproduce the problem\n. anyway original pr seems to be good now\n. nope:\n$ pnpm-install ramda inherits\n  ramda                                                             2.0.1 \u2713\ni looked into that cli switch and its not the problem, installMultiple gets both packages and logger with getTask get both packages to act on as well .\n. its fine, i just didn't find yesterday exact lines where this missing happens, so i decided to share this problem\n. @niftylettuce can you try with latest pnpm?\n. @rtorino can you try to run your gulp from npm script? or directly from ./node_modules/.bin/gulp?\n. tried just now to install pnpm install flow-bin and have no errors. can you try again?\nif it still fails, can you provide nodejs and pnpm versions with OS info?\n. some package which are failing often:\n- lodash._reinterpolate@3.0.0\n- is-primitive@2.0.0\n- lodash.isarray@3.0.4\n- lodash._arrayeach@3.0.0\n- detect-conflict@1.0.0\n- sorted-object@1.0.0\n- object-assign@4.0.1\n- is-number@2.1.0\n. did you install it globally?\n. @NetiTrinR can you close an issue?\n. is there any reason not to merge it?\n. okay, thats good\n. hallelujah \ud83d\udcab\n. what are the ignore-scripts?\n. @nielsvermaut what kind of node scripts do you have?\n. That's not off topic, 'cause I didn't have issues with this and pnpm. Thank you \n. awesome\n. looks good\n. is original issue gone?\n. can we get support for optionalDeps in 1.0-beta?\n. it used to be a problem with ava, back then when chokidar was in optionalDependencies and after pnpm install you couldnt use watch mode for tdd\n. thats so cool, @zkochan you are doing awsm job here\n. There are several v1 issues open left\n. Like #298, #299 and #300\n. Also #95 bothers me\n. And let me check if it works in my office, last time pnpm didn't work with our local nexus, while npm works as expected \n. I hope that npm-registry packet from #367 can solve a problem\n. Also, what do you think about finishing moving to org before v1?\n. @zkochan yay. \ud83d\udc4d\n. this will be hard\n. Is there 3rd option? we probably can use bundler like rollup to achieve that\n. @zkochan you are cool\n. > maybe even read travis/appveyor yaml and throw an error if caching is used for node_modules\nthats good idea\n. can you ask @github to let you use @pnpm org? from my point of view, its squatted dead and empty org right now\n. btw, i think i have benchmarking part of the site completed. thats definitely a good idea\n. jpegtran-bin is fine, though smth wrong with archive-type\n. and smth wrong with globby\n\nglobby ^5.0.0 ERROR \u2717 /wp-content/themes/crossbar/node_modules/.tmp/1472653081896_bin-build@^2.0.0/_/index.js:3:19)\n\npath for this module seems wrong\n. though i cant see, how you gulp build is runned after npm install\n. do you have this project as oss project on github?\n. it will be hard to actually reproduce your gulp build failure\n. at least i will try to reproduce missing packages here https://github.com/iamstarkov/pnpm-issue-337\n. found failing dep:\n\"devDependencies\": {\n    \"gulp-imagemin\": \"^3.0.1\"\n  }\n. 1. everytime fail begins with problems on postinstall step\n2. issue is not permanent, its kind of floating around binaries being not able to compiled\n. though, all failing deps are optional, so pnpm is fine with them not being compiled\n. i was not able to pipe pnpm install log to the file =(\n. @andreypopp @zkochan @rstacruz feel free to investigate further from here\ngit clone https://github.com/iamstarkov/pnpm-issue-337\ncd pnpm-issue-337\npnpm i\nor\nmkdir pnpm-issue-337\ncd pnpm-issue-337\nnpm init -y\npnpm i -S gulp-imagemin@^3.0.1\n. I think its good idea\n. Looks good\n. Just one question: why do we log only progress events?\n. ok, got it. thanks\n. seems like permissions related problem\n. can verify it https://gist.github.com/iamstarkov/9ec39a9bdf66d5bc20bb55e29f580f87\n. and this is strange, because i didnt have permissions problems neither with npm, nor with pnpm for years\n. ```\n\u279c  mapbox-gl-js git:(master) DEBUG_PROMISE=true pnpm i runas\n  runas                                                             3.1.1 \u2713  \n  nan 2.x                                                           2.4.0 \u2713    \n! spawn EACCES\nError: spawn EACCES\n    at exports.errnoException (util.js:1012:11)\n    at ChildProcess.spawn (internal/child_process.js:302:11)\n    at Object.exports.spawn (child_process.js:372:9)\n    at spawn (/usr/local/lib/node_modules/pnpm/node_modules/cross-spawn/index.js:17:18)\n    at Promise (/usr/local/lib/node_modules/pnpm/lib/run_script.js:15:18)\n    at runScript (/usr/local/lib/node_modules/pnpm/lib/run_script.js:14:10)\n    at fs.stat.then. (/usr/local/lib/node_modules/pnpm/lib/install/post_install.js:35:14)\n``\n. also the reason behind not reproducing on linux can be in runas's nan's bindings https://github.com/atom/node-runas/blob/master/binding.gyp\n. but i dont have any experience with nan or bindings(\n. Lgtm \n. I don't think this issue need to be fixed on pnpm side. if you need to reuse local packages, there isp/npm link` for that\n. @idanh great to hear that you solved your problem\n. Does pnpm have programmatic API to use?\n. than, typescript will not help raw-js consumers to validate their code anyway. and there is not run-time check as far as i know it\n. also, a lot of people will complain about implementing it in flow instead\n. > make the life of pnpm maintainers easier\nthats a good point\n. I will be able to read and edit static-typed js as well, i guess.\nSo @zkochan, @andreypopp pick a side and go ahead =)\n. i love this change, though i concerned with topic i commented above\n. lgtm\n. can verify it\n. related #96 and reasoning in #58 \n. not sure what to do\n. @zkochan but why? linkBins just moved from one place to another\n. > +4,518 \u22121,386\nhuge job \u2728\n. what are the pros/cons?\n. Let's try\n. ping me, when will be ready for code review\n. looks good, really love that you previously refactored tests to make them decoupled from each other\n. a bit concerned about sync operations\n. and suggest to change arguments order\n. @zkochan \nagreed with you\n. im fine with current args order, just raised minor concern\n. @zkochan approved \ud83d\udc4d\n. i would like to get rid off magic as much as possible too\n. \ud83d\udc4d\n. agreed\n. thats unbelievable indeed\n. though npm explicitly says it blocks root node_modules, so i think any other node_modules are fine\n. I believe actual behavior is correct, and the same as npm has. https://github.com/npm/npm/issues/10074\n. @julien-f you are right, i was wrong\n. hi @AilisObrian, thank you for issue. can you clarify it a bit?\nbecause on my machine pnpm i newrelic seems to be working:\n```\n\u279c  compose-function git:(master) pnpm i newrelic      \n  newrelic                                                         1.30.4 \u2713 \n  concat-stream ^1.5.0                                              1.5.2 \u2713 \n  https-proxy-agent ^0.3.5                                          0.3.6 \u2713 \n  json-stringify-safe ^5.0.0                                        5.0.1 \u2713 \n  readable-stream ^1.1.13                                          1.1.14 \u2713 \n  semver ^4.2.0                                                     4.3.6 \u2713 \n  yakaa ^1.0.1                                                      1.0.1 \u2713 \n\ncompose-function@3.0.3 prepublish /Users/vlasta/projects/compose-function\nnpm run --silent clean && npm run transpile\n\nSaved working directory and index state On master: npm run clean trash can\nHEAD is now at 35e9f86 fix test\nRemoving index.js\nRemoving npm-debug.log\nRemoving pnpm-debug.log\nHEAD is now at 35e9f86 fix test\nclean: Uncommitted and ignored files have been moved to git\u00e2s stash. To restore them run git stash pop --quiet; git checkout .gitignore.\n\ncompose-function@3.0.3 transpile /Users/vlasta/projects/compose-function\nbabel module --out-dir .\n\nmodule/index.js -> index.js\n\u279c  compose-function git:(master) \n```\nmaybe smth else is not working for you?\n. wait, circular deps are fixed in nodejs land, arent they?\nhttps://nodejs.org/api/modules.html#modules_cycles\n. @AilisObrian can you reproduce this issue with latest pnpm?. thank you for fixing it\n. Can you show such projects? Also I will be glad if someone will explain me need in flat tree\n. will review tomorrow in the morning\n. have this issue with projects at work, was not sure if it have anything to do with pnpm\n. can we fix that in pnpm, or can we suggest pr to npm-run-all?\n. this package is somewhat important for decent cross-platform dx for packages with complicated npm scripts\n. awesome. how does pnpm work for ava? https://twitter.com/ava__js/status/785902327492333568\n. > disk usage is important as well\noh yeah, prev week i removed 17Gb of node_modules in a folder with old projects\n. i would say, lets see how yarn will be doing in several months, 'cause ied looked promising at start too\n. @TheLarkInn if they are happy to use linking approach pnpm uses, then its a good idea\n. though, if pnpm will land check-integrity and .pnpm.lock features, we will be very good competitor\n. im for cooperation\n. npm is not just cli, its more about infrastructure\n. npm cli team consists of only three devs, the same amount devs started yarn, if header of blog post is correct https://code.facebook.com/posts/1840075619545360\n. @thejameskyle\nim not an actual pnpm developer, though i was helping out with code reviews and general issues triaging/investigating, so i care a lot about pnpm.\ncan i join email thread to continue be aware about pnpm future? @andreypopp might be interested as well\n. @aecz can you help me to find dependency chain from angular-cli to reflect-metadata? because angular-cli doesnt depend on this package directly and angular-cli\\node_modules\\@ngtools\\webpack\\src\\index.js kind of obscure to deal with\n. dont we need some $ pnpm cache clean to fix cache in case of fuck up\n. btw, what is the flow of install process has been interrupted either by user, or by any kind of error?\n. > I expected a bigger performance boost but still. Tests are passing around 20% faster locally\nas far as i understood from tests, you effectively set cache to 0 in tests, dont you?\n. > you think the cache can get corrupted?\nyes\n. > we probably also have to lock the cache folder.\nwhy? one can run pnpm i in two different projects at the same time\n. > Regarding the corrupted cache files... I'll add a try/catch and will make the request if reading from cache fails\nthats good, but i was thinking about another negative case. take a look yarnpkg/yarn#627\n. > yes, but won't the two installs try to write the same cache files?\noh, do you want to prevent from writing to the same cache/pkg folder in particular or to a whole cache/ folder?\n. > we use npm-registry-clinet which handles retries on errors\ndoes it? im mostly interested in content-length verifying\n. > we check the shasum of the tarball after download finished and if they don't match, we throw an error\nawesome\n. noticed nothing, good job!\n. \ud83d\udc4d \n. what are the metrics?\n. im sure there is pure node js analogue to unix time ($ time npm i), travis supports cron jobs. so we good to go\n. > Store divided into flat/ and nested/\nwhich one is default? i mean how do i access binaries or node_modules installed by pnpm?\n. wont it break everything? 'cause no one package expect node_modules to be separated in two folders\n. if in the future we want to use .store.yaml the same way as .yarn.lock then we might want to move it out from node_modules now\n. > When the store is inside node_modules, creating an additional subdirectory is redundant because node_modules will be either flat or nested. Hence, I will remove the additional nesting in dedicated stores and will add an additional property to store.yaml to identify the store type: nested or flat.\nBefore this i was confused and couldnt get how it would work, now im fine about this part\n. > store.yaml is for the store. yarn.lock is for the package\nstore is list of deps with exact versions, lock is kinda the same. You sort of oppose one to another, but i think they are interrelated with each other.\n\nAlso store.yaml does not influence what is installed, so it has different purposes\n\nright now its correct, but move it out and consumer would need to run pnpm i first time to get all modules` into shared store via network and to get them linked into node_modules, second time its just to link them again (wo/ network overhead)\n. > but it contains all the deps of all the packages that use the store. It would work with a dedicated store but a shared store's store.yaml would have a lot of redundant staff..\nI believe it includes all deps as a graph of dependents and dependencies, without any redundant things, because all of that you need to perform install/remove --save-* safely\n. > you are right. But 1 store can be used by several packages and all these graphs will be in one store.yaml\n\nso currently we can't just move this file to one of the packages\n\nyou are right about it, i was thinking about \"personal\" store for each project ${project}/node_modules/.store.yaml. So i guess we should have two stores: one global and one for each project\n. and i think local stores can to not have whole graph, but just upper graph points as kind of entry points to global store's whole graph\n. minor suggestion .pnpm.lock, so it and .yarn.lock can be ignored by .*.lock in ignore files\n. > so this graph will be both in the global store and locally in the project?\nnej, i see global store's graph as graph from exact versions to another exact versions. and local store's as a list of exact versions of project's direct deps, which can be used to define whole graph with help of global store. got it?\n. lets discuss it later\n. @vjpr did you have any problems with installing pnpm? it seems like your pnpm lack loud-rejection, though it is included in dependencies https://github.com/rstacruz/pnpm/blob/master/package.json#L40\n. linefeed incompatibility is still a problem though\n. does lerna handle dependencies installing? if so, how?\n. not ready for CR?\n. awesome news\n. oh gosh, i love new github's code review ui\n. why did you close it?. > ? rename shrinkwrap.yaml to something else. Maybe node_modules_state.yaml.\nmaybe pnpm-lock.yaml. good catch\n. seems fragile\n. but the only way, i think\n. so it will be in next node release?\n. 6 is LTS now, so i doubt it\n. sorry, was away. couldnt review\n. does npm ask and wait for user to answer the prompt?\n. oh gosh\n. is it working on windows?\n. happy appveyor is weird situation\n. shall we switch to github greenkeeper integration from just bot?\nhttps://github.com/integration/greenkeeper. i would say it was a problem with npm or network. wow, its a long thread. oh, shi~ thats a huge pr. good job, @zkochan!. wtf is popsicle, and why is it relying on undeclared deps. its broken contract of shared dependency environment (everything you need is specified in pkg).\nits bad as hell, and we shouldnt allow it, and tbh, if dep didnt specify its own deps, we have no way around this problem. except for flat dep tree. @zkochan how does npm do it?. shall we add npm compatible?. u r right. is it #580?. does it make sense npm pnpm?. > IMHO this solution also allows to add a pretty exciting feature to pnpm. We can make local CLIs available in the command line, when inside the package folder\nit does make sense for babel and eslint, but what is the pnpm use case?. in order to use local package, you have to install it and global package is required for this. still dont get it. do you mean if i have global and local {cliPkg} both installed by pnpm, so when i run global {cliPkg}, pnpm will make it to run local one somehow?. I though it is{cliPkg}s' responsibility to choose a way to handle this. eslint, babel, ava, gulp, etc are doing this and its explicitly stated in their documentation. Why do you want to implicitly force this choice on all cli tools?. > So this makes even a better DX for packages from the 2nd group and changes nothing for the 1st and 3rd type of CLI packages.\nas i said, what if i want my {cli}'s global and local instances to work separately? No OSS developer deserves to get issues because of pnpm implicitness in this case. i think pnpm is great and you are doing great job developing it, so i dont want pnpm to get bad reputation just because incorrect assumption. i mean global to local linking should be on the package's shoulder as it is now. pnpm should just not breake it. do we have pnpm-debug.log?. do we have private env variables in CI?. nej, i want to raise some concern https://webcache.googleusercontent.com/search?q=cache:FcN_CVoWrWwJ:https://medium.com/%40gajus/distributing-a-self-replicating-malicious-code-using-npm-89cb3f5c6937+&cd=1&hl=en&ct=clnk&gl=us. @zkochan @andreypopp what do you think?. i though nsp & nodesecurity are just trying to find matches between their database of security issues and node modules you use. cant see how it would help. im with you. while concerning about plans on special monorepo tool. can you tell me more about it?. what kind of artifact storage solution do you use?. what did you change in pkg to trigger vs code to run npm install?. uh, thats bad. disable it. there are two cases for changes in pkg:\n1) changing scripts/desc and other stuff \u2014 manual, doesnt require npm install to run\n2) deps management \u2014 npm install --save{-dev,-prod} \u2014 manual changes are discouraged in this case.\nanyway. you dont need VS2015 to run npm install for you. that was interesting case. thansk. dat project?. @zkochan what is your vision on how it will work?. > Most of the resolutions are tarball files. \nwhat are other types?. > cannot insall a dependency w/o saving\nnothing new, the same thing with ordinary npm . oh, misread. i initially thought you meant that i can install things, though it wont be saved in pkg. nice investigation. @LinusU fixed \ud83d\ude0a\n. @rstacruz good idea =)\n. \ud83d\udc4f\n. wont it cause problems with two simultaneous pnpm i?\n. cool\n. i think there is no more user agent extension here anymore\n. what do you think about swapping input and opts? then we dont need to support arguments juggling in prune\n. why did you choose sync fs operation over async one?\n. why sync over async?\n. i think that if you arent concerned about opts, it doesnt hurt to pass {}. it will be just more conscious usage for us or consumers.\n. > But opts seems more natural as a last parameter\nin fp it is not.\n\nMaybe lets create two separate functions?\n\ni dont know\n\nOr lets move input to a property in opts?\n\nseems like bad idea, two separate responsibilities merged in one object\n. > If we decide to change the order of args, I guess we have to move opts to the beginning in all the API functions for consistency\nmaybe, though i dont wanna be a hippo here aiming to change everything all over the place, so lets not do this until everybody agreed that this change leads to better dx\n. @rstacruz @andreypopp what do you think about arguments order?\n. i am suggesting to use more perfed flatit by @floatdrop\n. thats cool\n. awsm\n. if node_modules are in .tmp/, not in lib/, then this line might be incorrect\n. looks more cleaner now\n. \"test\": \"npm-run-all lint -p -r sinopia test:e2e\",\nregarding docs https://github.com/mysticatea/npm-run-all/blob/master/docs/npm-run-all.md#run-a-mix-of-sequential-and-parallel-scripts\n. maybe one day?\n. 1Gb, right?\n. my reasoning is that, if you run pnpm install few times every day, 1hr cache will not help that much\n. on the other side, 1day cache will help pnpm to cache deps for a whole day and user to enjoy fast install process\n. lets add 1Gb to a comment as you did with timeout\n. if expression is little relevant to thrown error, thus it makes it and solution to it a bit obscure. maybe:\n`--preserve-symlinks` and so 'Flat tree' are not supported on your system, make sure you are running on Node \u227d 6.3.0\n. and i think its not TypeError\n. Though, do we want to scream and stop work or warn and continue with non-flat tree?\n. are you sure about sync?\n. cool stuff. though what is stdio: inherit for?\n. i believe all these tests will stop to work on windows\n. wont returning null instead of actual err make it hard to debug?\n. can you add a comment about this if expression?\n. what are trying to achieve with Object.assign?\n. okay, because anyway it will not help to prevent mutation in nested fields\n. quite long line\n. maybe? its already arrow function\njs\nfetchingFiles.then(() => requireJson(path.join(pkgPath, 'package.json')))\n. how does it look?\n. \ud83d\udc4f\n. why do you keep it?. i mean if everything should work fine with normal nodejs, why do we need this line of code?. ",
    "nmiljkovic": "ied has the same problem: https://github.com/alexanderGugel/ied/issues/35#issuecomment-160570170.\n. ",
    "davidshift": "Still seeing this in 0.17.0\n. I'm seeing this:\n! EPERM: operation not permitted, symlink 'C:\\Users\\peterd\\.babun\\cygwin\\home\\peterd\\tmp\\web-interface\\node_modules\\.tmp\\308d0950-0416-473c-a52d-63854ee00f55' -> 'C:\\Users\\peterd\\.babun\\cygwin\\home\\peterd\\tmp\\web-interface\\node_modules\\.store\\grunt-babel@5.0.3'\nMight be an issue with cygwin, npm install works fine\n. This was a permission error and is resolved now! Thank you!\n. ",
    "gunta": "Getting this 100% with a project that has around 100 deps.\n. Also trying to use a mirror when it fails can be a good solution,\nsomething like\nhttps://strongloop.com/strongblog/node-js-registry-mirror-rackspace/\n. Thank you!\n. Currently it even fails with --concurrency 2. \n. Unfortunately there is no package that wraps this.\nI've created an Issue for GOT here:\nhttps://github.com/sindresorhus/got/issues/167\nOtherwise, we would have to use is-http2 along with node-http2.\nhttps://github.com/stefanjudis/is-http2\nOr create a new package.\n. Ok seems that its gonna be easier to fix on the GOT side.\nHowever we might add here the spdy module as a dependency in pnpm to have HTTP2 support enabled by default.\n. @zkochan Still relevant. They use request which doesn't support http2 neither.\nSince it doesn't looks too difficult, we could hack something like this in the meantime: http://stackoverflow.com/questions/37653110/is-there-a-request-like-package-using-http2\n. ",
    "gillstrom": "Related with #7.\n. ",
    "indexzero": "The registry part of this should be relatively straight forward. Let me take a stab at that and see how I feel :smile: \n. Got started on this, but some early debugging revealed that the semver ranges from the registry actually work.\n$ curl https://registry.npmjs.org/@rstacruz%2Ftap-spec/%5E4.0.0 -s | json\n{\n  \"name\": \"@rstacruz/tap-spec\",\n  \"version\": \"4.1.1\",\n  \"description\": \"Formatted TAP output like Mocha's spec reporter\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo 'Tests are out of date. Not running until fixed.'\"\n  },\nSo then there would be no need to add extra logic to resolve.js. \n. @rstacruz I'm satisfied with the support of scoped modules. Going to close this.\n. @rstacruz interesting. What are your thoughts on unit testing? I was thinking about doing a spike on coverage and unit test coverage before doing too many more new features.\n. +1\n. Just FYI the problem with this change is that you're going to be downloading an order of magnitude more JSON. e.g. for express\n```\ncurl -s https://registry.npmjs.org/express -vvvv | grep \"Content-Length\"\n...\n< Content-Length: 533185\n```\nvs. \n```\ncurl -s https://registry.npmjs.org/express/^3.0.0 -vvvv | grep \"Content-Length\"\n...\n< Content-Length: 2783\n```\nHave you done benchmarks against this change? I suspect this will slow pnpm down a lot.\n. @rstacruz how hard would it be to make the resolution-alg a setting? e.g. \n```\npnpm c set resolution-alg semver\nSets to use URLs like\nhttps://registry.npmjs.org/express/^3.0.0\n```\n```\npnpm c set resolution-alg npm\nSets to use URLs like\nhttps://registry.npmjs.org/express\n```\n. Well it's hard to say which registries support it and which don't. e.g. if GemFury starts implementing it, how do I tell the client to start using it?\n. That would be rad. Anything to fallback to the faster downloads.\n. ",
    "onbjerg": "Still doesn't work.\npnpm i --save-dev @kadira/storybook fails with some symlink stuff\n. ",
    "fengmk2": "Can add support for pnpm install --registry=http://registry.my.com too? I want to help impl this feature.\n. Great!\n. ",
    "forabi": "Great! :+1: \n. ",
    "chrismcv": "what about the path to the store being ~/.pnpm/store/node_modules?\n. ",
    "dmitriz": "What about using npm's native linking?\nIf pg and pg-then are both installed into home/.store and \nnpm link ../pg is run inside the pg-then-directory, then pg becomes accessible.\nThe only annoying downside is the pollution of the global installation space but maybe there is a way to customise away that global directory with some prefix magic?\n. I don't quite understand. If I have a directory babel-core with exact copy of the original package and another one for babel-preset-es2015, wouldn't that npm link ... command make one module accessible from the other? It works for my local modules. Is babel-core different?\n. I see. Thanks for the explanation!\nAnother idea: \nInstead of direct symlinks, create \"shell wrappers\" that would change the context for the resolver. So in the local user directory I have the shell wrappers:\nsh\n/projects/xyz/node_modules/babel-preset-es2015\n/projects/xyz/node_modules/babel-core\nSo now I run locally babel-core, which is just the shell that in turn runs the actual symlink to the global babel-core but with additional context to tell the Node resolver to look under the local /node_modules. This way it would go again through the local shell-symlink-chain and would do the trick.\nI understand that changing resolver context like that is possible in Webpack, so perhaps also in Node?\n. ",
    "alexeyten": "@dmitriz there will be problems with including inner files. Probably most common example would be require('react-dom/server') that will not be resolved properly.\n. space? plus? equal-sign? tilde?\n. ",
    "Meroje": "The issue you mentioned earlier is getting a fix on node 6 https://github.com/nodejs/node/pull/5950\n. Symlinks from a network mount to a local store (shared with all projects using the same node major version) is a big win for my team, disk savings on the network mount are exponentially bigger when you account backups.\nNow if only webpack could work with said symlinks..\n. ",
    "vjpr": "@zkochan I am having an issue the preserve-symlink proxy file.\nWhen using create-react-app:\nError: Cannot find module '../react-scripts/bin/react-scripts.js'\nnode_modules/react-scripts/bin/react-scripts.js\n```\n!/bin/sh\n\":\" //# comment; exec /usr/bin/env node --preserve-symlinks \"$0\" \"$@\"\nrequire('../react-scripts/bin/react-scripts.js')\n```\nIt should be: https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/bin/react-scripts.js\nThis looks like a bug. The bin dir shouldn't be touched, only the top-level .bin.\n. This is not working for me.\nI am getting a module not found message.\nThis is my ./npmrc. Can someone confirm that private modules are working?\n@foo:registry = \"https://registry.npmjs.org\"\nalways-auth = true\nregistry = \"http://registry.npmjs.org/\"\nsave = false\nsave-exact = false\nsave-prefix = \"^\"\nstrict-ssl = false\n. Just a small thing, my install finishes without every dependency being ticked (note how some say queued):\n\u279c  live-redux git:(master) \u2717 pnpm i\n  babel-register ^6.14.0                                           6.23.1 \u2713\n  babel-runtime ^6.11.6                                            queued \u2193\n  detect-node 2.0.3                                                queued \u2193\n  history ^3.2.1                                                   queued \u2193\n  is-node ^1.0.1                                                    1.0.1 \u2713\n  live-redux-helpers 0.0.6                                          0.0.6 \u2713\n  lodash ^4.15.0                                                   queued \u2193\n  prettyjson ^1.2.1                                                 1.6.0 \u2713\n  query-string ^4.3.2                                              queued \u2193\n  react-redux ^5.0.2                                                5.0.3 \u2713\n  react-router ^3.0.2                                               3.3.1 \u2713\n  react-router-redux ^4.0.8                                         4.0.8 \u2713\n  redux ^3.6.0                                                      3.6.0 \u2713\n  redux-devtools ^3.3.2                                             3.3.2 \u2713\n  redux-devtools-dock-monitor ^1.1.1                                1.3.1 \u2713\n  redux-devtools-filterable-log-monitor ^0.6.6                      0.6.6 \u2713\n  redux-logger ^2.8.1                                               2.8.1 \u2713\n  redux-promise ^0.5.3                                              0.5.3 \u2713\n  redux-thunk ^2.2.0                                                2.2.0 \u2713\n  zog ^0.1.2                                                        0.1.2 \u2713\n  babel-preset-live                                                0.2.22 \u2713\n  gulp4 ^4.0.1                                                      4.0.1 \u2713. Seems the issue is that there is a Windows linefeed at the end of the hash bang in the cli entry point.\nvim /usr/bin/pnpm\n``` bash\n!/usr/bin/env node^M\n\"use strict\";^M\n...\n``\n. After fixing withsed -i 's/\\r//g' /usr/bin/pnpmI am getting a message sayingloud-rejectionis missing.\n. Re:loud-rejectionerror. Mysed -i 's/\\r//g' /usr/bin/pnpm` command was modifying in-place and removing the symlink.\nThis is the correct command to use: sed --in-place --follow-symlinks 's/\\r//g' /usr/bin/pnpm and provides a workaround until the fix is pushed.\n. When I run node --preserve-symlinks node_modules/react-scripts/bin/react-scripts.js start it doesn't give me that error. But webpack returns other errors about not being able to find react\n```\nError in /Users/Vaughan/.pnpm/.store/nested/react-dom@15.3.2//index.js\nModule not found: 'react/lib/ReactDOM' in /Users/Vaughan/.pnpm/.store/nested/react-dom@15.3.2/\n@ /Users/Vaughan/.pnpm/.store/nested/react-dom@15.3.2/_/index.js 3:17-46\n```\nWould pnpm global store cause problems here?\nIt seems that --preserve-symlinks behaviour has to be supported manually with a webpack custom resolver.\n. I just tried in a fresh project and I did not have the issue so I will close for now. The 2nd issue I will open a separate issue if it persists.\n. I have requested a backport of the functionality in enhanced-resolve.\n. A simple fix for create-react-app is to add the following to react-scripts/config/webpack.config.dev.js:\nresolve: {\n  root: path.join(process.cwd(), 'node_modules'),\n}\nThey already have the fallback in there set to node_modules - not sure why it doesn't work...\n. Just want to know what is the status of side-effects caching and confirm what the current behaviour is.\nSay I want to test my package with a native-dep on 3+ different node versions, how well does pnpm handle this use case?\nIs it better if I use separate node_modules directories for each run?\nnvm use 4\npnpm i\npnpm test\nnvm use 5\npnpm i\npnpm test\nnvm use 6\npnpm i\npnpm test\nI see the following options:\n\nAdd NODE_MODULE_VERSION to the cache key. Or separate store for NODE_MODULE_VERSION.\nCON: Changing major node version would invalidate every package including ones that don't have native-deps.\nIDEA: Is there a way to detect modules that have native deps?\nBuild native deps per project in .registry.npmjs.org/bcrypt/0.8.6/node_modules/bcrypt. (I am assuming this is how it works now?)\nCON: Cannot share compiled native deps between packages. Slower installs.\nIDEA: How is it possible to cache the build output (as mentioned in earlier comment)? Could we diff the before vs. after native dep install...store this as a patch....then next time we install the same package@semver+NODE_MODULE_VERSION we could apply the patch?\n\n. > I never developed native deps\nNiether. \nSo you mean if the native build process uses sources from dependencies declared in the package's package.json?\nI think its technically possible, but probably very rare. If a native module depended on another native module it would be easier to compile them separately and just require it when needed. Otherwise you end up using npm as a c/cpp dependency manager tool.\nAlso, with npm3 flattening, it would make it hard to reference the correct sources I would think. They could either be in ./node_modules/foo or ../a-top-level-module, which feels hacky. You'd have to implement the require resolver in make.\n. > I'd prefer to postpone the development till pnpm v1 is out.\nAgree.. Is there a way to get plain text logging output? I only see three reporter types (ndjson, default, silent).\nI am streaming the logs over ssh and the terminal formatting messes up. ndjson is too verbose for me though. I could parse ndjson I guess, but I think there should be something simpler and human-readable that doesn't use fancy logging that can be selected as cli switch.. When I spawn pnpm from child-process and pipe to process.stdout I'm seeing the output like this:\naNA  waNA  waNA  w  zog 0.0.1\naNA  zaNA  zaNA  z  fsevents 1.0.6\naNA  faNA  faNA  faNA  baNA  baNA  caNA  caNA  caNA  baNA  eaNA  eaNA  gaNA  gaNA  saNA  naNA  naNA  naNA  saNA  saNA  saNA  waNA  saNA  @aNA  aaNA  aaNA  aaNA  aaNA  aaNA  baNA  baNA  baNA  baNA  baNA  baNA  baNA  baNA  baNA  caNA  baNA  baNA  caNA  caNA  caNA  caNA  caNA  caNA  caNA  caNA  caNA  caNA  caNA  caNA  caNA  caNA  caNA  caNA  caNA  caNA  daNA  daNA  daNA  daNA  daNA  daNA  daNA  daNA  daNA  eaNA  eaNA  eaNA  eaNA  eaNA  faNA  faNA  faNA  faNA  faNA  faNA  faNA  gaNA  gaNA  gaNA  gaNA  gaNA  haNA  haNA  haNA  haNA  iaNA  iaNA  iaNA  iaNA  iaNA  iaNA  iaNA  jaNA  iaNA  iaNA  jaNA  jaNA  jaNA  kaNA  kaNA  kaNA  kaNA  kaNA  kaNA  kaNA  kaNA  kaNA  kaNA  kaNA  kaNA  kaNA  kaNA  kaNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  laNA  maNA  maNA  laNA  laNA  maNA  maNA  maNA  naNA  naNA  naNA  naNA  naNA  naNA  naNA  naNA  oaNA  oaNA  paNA  paNA  paNA  paNA  paNA  paNA  paNA  paNA  paNA  paNA  paNA  qaNA  qaNA  paNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  saNA  saNA  saNA  saNA  saNA  saNA  saNA  saNA  saNA  saNA  saNA  saNA  saNA  saNA  saNA  saNA  taNA  taNA  taNA  taNA  taNA  taNA  taNA  taNA  taNA  taNA  uaNA  uaNA  uaNA  vaNA  vaNA  waNA  zaNA  faNA  saNA  @aNA  caNA  caNA  baNA  caNA  daNA  faNA  daNA  iaNA  kaNA  caNA  eaNA  laNA  laNA  kaNA  kaNA  naNA  paNA  raNA  raNA  raNA  raNA  saNA  eaNA  eaNA  uaNA  taNA  jaNA  jaNA  faNA  raNA  raNA  raNA  gaNA  daNA  iaNA  kaNA  @aNA  eaNA  caNA  eaNA  faNA  eaNA  laNA  raNA  naNA  paNA  raNA  raNA  raNA  saNA  zaNA  uaNA  daNA  gaNA  @aNA  laNA  naNA  paNA  naNA  raNA  raNA  baNA  baNA  baNA  baNA  baNA  baNA  baNA  baNA  baNA  baNA  baNA  taNA  gaNA  maNA  daNA  caNA  kaNA  laNA  paNA  raNA  caNA  daNA  caNA  iaNA  paNA  gaNA  daNA  iaNA  paNA  daNA  saNA  paNA  daNA  faNA  naNA  baNA  raNA  daNA  naNA  baNA  raNA  waNA  waNA  laNA  daNA  daNA  caNA  daNA  raNA  saNA  maNA  maNA  maNA  maNA  maNA  maNA  maNA  maNA  maNA  maNA  daNA  paNA  daNA  daNA  eaNA  daNA  daNA  iaNA  daNA  kaNA  caNA  caNA  kaNA  daNA  caNA  caNA  saNA  kaNA  kaNA  laNA  kaNA  kaNA  kaNA  raNA  maNA  laNA  naNA  eaNA  maNA  faNA  paNA  kaNA  paNA  raNA  paNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  raNA  saNA  saNA  uaNA  taNA  saNA  taNA  saNA  faNA  raNA  raNA  raNA  daNA  daNA  aaNA  kaNA  saNA  aaNA  zaNA  taNA  jaNA  raNA  raNA  baNA  saNA  saNA  paNA  maNA  daNA  maNA  raNA  gaNA  @aNA  baNA  caNA  jaNA  caNA  caNA  gaNA  gaNA  kaNA  saNA  laNA  kaNA  kaNA  kaNA  paNA  daNA  paNA  raNA  paNA  raNA  raNA  iaNA  saNA  taNA  waNA  taNA  caNA  laNA  gaNA  taNA  baNA  caNA  aaNA  laNA  laNA  gaNA  laNA  laNA  maNA  @aNA  maNA  baNA  gaNA  paNA  naNA  raNA  taNA  naNA  waNA  maNA  baNA  waNA  raNA  caNA  baNA  saNA  live-frontend 0.0.3                                       linking 0.0.3 \u2193 aNB\nAny ideas?. Ok so the problem here is that you lose tty support when using spawn with {stdio: 'pipe'}, instead of inherit.\nSee https://github.com/sindresorhus/execa/issues/25. If you are reading/piping the logging output from pnpm, such as in CI logging, configuration management tool (ansible/chef), then you will see the output I posted which is quite ugly.\nThe alternatives are to use ndjson which is way too verbose, or silent which shows no progress.\nI think we should ship something that works with CI tools / provisioning tools / docker builds which does not use terminal control codes. Name it --reporter plain/simple/ci/etc., and which shows the same information as the default reporter does.\nIt might also be useful to control the verbosity of the ndjson logger to just show info - as this is easy to parse.\n. Seems fixed in 0.51.1.. I'm still seeing this error in 0.66.2 on Ubuntu 16.04.\n--lock-stale-duration=0 seems to prevent it.\nI think instructions to enable this flag should printed when this error occurs. But it would be better to try avoid it.... Seeing it on macOS Sierra too.. I'm still seeing this with pnpm i --no-lock --lock-stale-duration=0...\n```\n/usr/local/lib/node_modules/pnpm/lib/node_modules/proper-lockfile/index.js:186\n    compromised = compromised || function (err) { throw err; };\n                                                  ^\nError: Unable to update lock within the stale threshold\n    at options.fs.utimes (/usr/local/lib/node_modules/pnpm/lib/node_modules/proper-lockfile/index.js:108:66)\n    at FSReqWrap.oncomplete (fs.js:135:15)\n```. @zkochan I just got the error again on Ubuntu 16 with a completely warm store.\n```\nResolving: total 2040, reused 1672, downloaded 0\n/usr/local/lib/node_modules/pnpm/node_modules/proper-lockfile/index.js:186\n    compromised = compromised || function (err) { throw err; };\n                                                  ^\nError: Unable to update lock within the stale threshold\n    at options.fs.utimes (/usr/local/lib/node_modules/pnpm/node_modules/proper-lockfile/index.js:108:66)\n    at FSReqWrap.oncomplete (fs.js:135:15)\n```\nHappens at random package installs.\nResolving: total 2040, reused 1672, downloaded 0\npnpm i --lock-stale-duration=0\nResolving: total 2040, reused 1972, downloaded 0\nResolving: total 2040, reused 1991, downloaded 0\nAt then end the reused counter starts to slow down and stall, and then the error comes.\n\n--no-lock seems to have allowed it to finish. It becomes really slow at the end though. Maybe there is a memory leak or some inefficient code.... Is this the only place proper-lockfile is used:\nhttps://github.com/pnpm/fs-locker/blob/ddbf32e276b10e4e02f1289801874f9632b67d22/src/index.ts#L21\n\nMaybe some inefficiency is causing the lock to timeout.... I also saw this recently in Ubuntu 14.\nOn Thu 1. Mar 2018 at 08:00, Mangala Sadhu Sangeet Singh Khalsa \nnotifications@github.com wrote:\n\nI'm seeing this with 1.35.1 (Windows 10, Node 8.9.0)\nD:\\dev\\src\\abc>pnpm i\nResolving: total 766, reused 0, downloaded 0\nD:\\dev\\nodejs\\pnpm-global\\1\\node_modules.registry.npmjs.org\\pnpm\\1.35.1\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:186\n    compromised = compromised || function (err) { throw err; };\n                                                  ^\nError: Unable to update lock within the stale threshold\n    at options.fs.utimes (D:\\dev\\nodejs\\pnpm-global\\1\\node_modules.registry.npmjs.org\\pnpm\\1.35.1\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:108:66)\n    at FSReqWrap.oncomplete (fs.js:135:15)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/594#issuecomment-369495528, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AARLRREZ9lcyyx1U2MioS19MgbVvrNHmks5tZ5yrgaJpZM4Lzv2y\n.\n. Looks like it doesn't actually.... It appears that it will keep the link if the linked module has the same version as in the package.json, but override otherwise. If the version in package.json doesn't exist it will throw an error.. A good approach might be to show a log message after a pnpm i to say which npm linked modules were changed and the potential issues.\n\nE.g.\nYou have lodash symlinked to ~/dev/lodash.\nYou have react symlinked to ~/dev/react.\nRedux was symlinked to ~/dev/redux, but the linked package.json version did not match this module's required version from the package.json. Therefore it was overridden.\n  To relink, type 'pnpm link redux'.\n  To disable this overriding functionality, pass in 'pnpm i --dont-replace-links'.\nAside: How does pnpm deal with peer dependencies with npm linked modules?\nI think there should be an FAQ with this information.. Also for fetch failed with status code 503 would be useful too, to have the package that failed. I had this happen to a private submodule.. Yep this is a project with 200+ deps.. I experienced this again with 0.53.0 on Windows. Re-running once worked. Is there a configuration option for this. --limit-fetch?. Okay, I think it should be configurable if its still causing issues. I will see if I can reliably reproduce it and which value fixes it.. I just saw this error again in pnpm@1.10.2 and node@8.1.2.\nThere is also no indication of the package that caused it...\n25328 error pnpm:\n    message:\n      errno: -5\n      code: \"Z_BUF_ERROR\"\n    err:\n      name: \"Error\"\n      message: \"unexpected end of file\"\n      code: \"Z_BUF_ERROR\"\n      stack: \"Error: unexpected end of file\\n    at Gunzip.zlibOnError (zlib.js:152:15)\"\nAlso tried with: pnpm i --fetching-concurrency=1\nIs this the line where the extraction happens: https://github.com/zkochan/unpack-stream/blob/master/src/index.ts#L96. So it seems the package that was failing was material-design-icons, same that was causing EINTEGRITY errors in #872.\n25226 error pnpm:\n    message:\n      e:\n        errno: -5\n        code: \"Z_BUF_ERROR\"\n      dest: \"/home/vagrant/.pnpm-store/2/registry.npmjs.org/material-design-icons/3.0.1_stage\"\n      opts: {}\n    e:\n      errno: -5\n      code: \"Z_BUF_ERROR\"\n    dest: \"/home/vagrant/.pnpm-store/2/registry.npmjs.org/material-design-icons/3.0.1_stage\"\n    opts: {}\nSo it seems the tar for material-design-icons that was published to npm is corrupt...\n\n```\nvagrant@intranav-app-vm:~/.pnpm-store/2/registry.npmjs.org/material-design-icons/3.0.1$ tar xzf packed.tgz\ngzip: stdin: unexpected end of file\ntar: Unexpected EOF in archive\ntar: Unexpected EOF in archive\ntar: Error is not recoverable: exiting now\n```\nI think the only thing we need to do is show the file the failed to unzip, and tell the user to file a bug with the module.\n\nActually, it works fine if I download the tar manually...\nwget https://registry.npmjs.org/material-design-icons/-/material-design-icons-3.0.1.tgz\ntar xzf material-design-icons-3.0.1.tgz\n// no problem\n\nCopy packed.tgz to macOS from Ubuntu 16...\n```\nscp -P2222 vagrant@localhost:/home/vagrant/.pnpm-store/2/registry.npmjs.org/material-design-icons/3.0.1/packed.tgz .\ntar xzf packed.tgz\ntar: (Empty error message)\ntar: Error exit delayed from previous errors.\ngunzip packed.tgz\ngunzip: packed.tgz: unexpected end of file\ngunzip: packed.tgz: uncompress failed\n````\n\nThe corruption must happen in package-store/src/network/got.ts#download. But the strange thing is that it happened to other people not using pnpm.\n\nAh so the downloader is configurable here: pnpm/src/network/got.ts#download.\nOkay so it must be a bug in npm-registry-client then. At least I got to know the codebase a bit better.\n\nLooks like the sizes are different:\n```\n// macOS\n-rw-r--r--  1 Vaughan  staff  32990579 15 Aug 23:40 packed.tgz\n// Ubuntu 16 / pnpm\n-rw-rw-r--  1 vagrant vagrant 18497161 Aug 14 18:34 packed.tgz\n```\nSo on Ubuntu 16 there is a partial download happening. I started getting EMFILE too many files open errors too sporadically. Maybe related.. I'm still seeing this error. Do you know if there was any progress on this being fixed. I think I remember that we need retry logic for packages that don't match their content length.. > As a temp solution, you can use the --force flag to reinstall packages.\nCool. This should work. Developer just has to remember if they change something in node_modules. I see that an IDE or text editor plugin could warn about changes and make a note somewhere that the --force flag should be used to be safe.\nAnother idea: what about making the files read-only permissions? Then have a pnpm command to run to unlock folders for modification and record this somewhere. Then when running pnpm again, it could warn the user. But maybe some crazy module needs write permissions to modify itself...\n\nA crazy idea, what if we make a git repo from global store?\n\nHmm, the git diff would be slow wouldn't it? I'm not too sure how git implements that.\nIf you kept 2 global stores (one which hard links point to, the other for reference), you could do this - which I think would be equivalent to using git.\nIt would be slower because you are making a copy everytime you install a new module...but it would work.. @zkochan You are a coding machine! :1st_place_medal: . Tested. Works perfectly.\nWhen upgrading from 0.51.1 -> 0.53.0, it displayed a warning that it was refetching every module. But this is hardly an issue.. Another issue is that if a module is npm linked and it uses a lot of the same dependencies as its parent module, they will be require.cached separately as their dependency cache keys will point to their respective .resolution folders.\nThis means that simply running npm link on a single module can dramatically slow down startup time due to the need to eval multiple copies of the same module@version.\n. This is impractical. If a file or folder is added/removed then it needs to be relinked if using hardlinks.. > Actions are required anyway in that case. You have to relaunch the app. \nSay you are working on a React component that needs to use the same version of react. You would typically be using hot reloading.\n\nThere can be some watcher to relink the files\n\nHaving a watcher to relink the files would be cumbersome. If you have several projects running at once that are linked, you would need several watchers.\n. Idea. Could we support --preserve-symlinks by creating a symlink to node_modules:\nnode_modules/\npackage/node_modules -> ../node_modules\n\nWith --preserve-symlinks the search paths would be:\nfoo/node_modules/.resolutions/registry.npmjs.org/peer/4.11.2/package/node_modules <-- would exist\napp/node_modules\nWithout --preserve-symlinks the search paths would be:\nfoo/node_modules/.resolutions/registry.npmjs.org/peer/4.11.2/package/node_modules <-- symlink to node_modules\nfoo/node_modules/.resolutions/registry.npmjs.org/peer/4.11.2/node_modules <-- same as previous\nfoo/node_modules/.resolutions/registry.npmjs.org/peer/node_modules\nfoo/node_modules/.resolutions/registry.npmjs.org/node_modules\nfoo/node_modules/.resolutions/node_modules\nfoo/node_modules/node_modules\nfoo/node_modules/. > hot reloading reloads on changes in the node_modules folder?\nYou can configure it to by modifying some webpack settings.\nThere are many instances where you can hot reload stuff. E.g. if you delete a key in the require.cache you can hae hot reloading anything.\nBut even if you had to restart the app, we are talking about running another command instead of ctrl-c, up-arrow, enter. There are lots of threads on github about the peer dependency issue.. > The change that you are suggesting would have to be on a config, because it would create circular symlinks.\nAgree. Or maybe only activated when a module has been pnpm linked.\n\nAnd does it worth the additional complexity?\n\nI strongly agree! \n\n\nPnpm would be perfect if it could handle the peer deps use case smoothly, and you will find a lot of people rejoicing at such a solution.\n\n\nThis is are very common use case that pnpm makes impossible at present. Pnpm diverges from the traditional node_modules structure which breaks --preserve-symlinks behaviour. In 7.1 there is an environment variable added which makes me think there is momentum in this direction. Its been 5+ years having this issue with plugin development, and the preserve-symlinks is the best we have right now and it works - so I think it will stick around for a while.\n\n\nAs pnpm controls what files and folders to hardlink, it would also help workaround the case where a project's peer dep won't be used if it is installed in the plugin's local node_modules (for running unit tests for example). See below.\n\n\nE.g.\nSearch paths when --preserve-symlinks is enabled:\n```bash\nthis is used when actually we want the project's dep\nfoo/node_modules/.resolutions/registry.npmjs.org/peer/4.11.2/package/node_modules/webpack\nwe actually want this one\napp/node_modules/webpack\n```\nDir foo/node_modules/.resolutions/registry.npmjs.org/peer/4.11.2:\n```bash\ndelete this hardlink\nfoo/node_modules/.resolutions/registry.npmjs.org/peer/4.11.2/node_modules/webpack\nfoo/node_modules/.resolutions/registry.npmjs.org/peer/4.11.2/package\n```\nPnpm could look at a foo's package.json file for peerDependencies and delete the peers so the project's dep is used.. > it would create circular symlinks\nSo it seems I was using 0.51.1 and now (0.53) the package folder is gone.\nSo now it would be node_modules/foo/node_modules -> ../node_modules which is the cycle as you suggested.\nBut if we revert back to symlinking to a separate package folder, there would be no cycles.\n. So I tried it out by adding the following to installMultiple.ts#169:\n``js\n  async function symlinkNodeModules() {\n    // console.log({dependency})\n    // Add a symlink to node_modules for--preserve-symlink` compatibility.\n    const symlink = path.join(dependency.hardlinkedLocation, 'node_modules')\n    // Must point to closest node_modules because of @scoped modules.\n    const findUp = require('find-up')\n    let symlinkTarget = findUp.sync('node_modules', {cwd:\n      path.resolve(dependency.hardlinkedLocation, '..')\n    })\n    // const symlinkTarget = '../../node_modules'\n    // console.log({symlinkTarget, hl: dependency.hardlinkedLocation})\n    symlinkTarget = path.relative(symlink, symlinkTarget)\n    symlinkTarget = path.join(symlinkTarget, 'node_modules')\n    // console.log({symlinkTarget})\n    // console.log('linking %s to %s', symlink, symlinkTarget)\n    try {\n      // await rimraf(symlink)\n      await fs.symlink(symlinkTarget, symlink, 'dir')\n    } catch (err) {\n      if (err.code === 'EEXIST') {\n        // TODO(vjpr): We need to delete it and override it.\n        return\n      }\n    }\n  }\nawait symlinkNodeModules()\n```\nsrc/install/linkBins.ts:\nlinkBins#linkPkgBins mkdirp step will override our node_modules symlink.\njs\nexport async function linkPkgBins (target: string, binPath: string) {\n  //  ...\n  // await mkdirp(binPath) <- removed this line\n  // ...\n}\nIt works fine, the only issue is that when using --preserve-symlinks, the require.cache path is the symlink path which results in a huge number of duplicate package evals.\n```\nE.g.\nThe following path is what is in require.cache. What we would like is the realpath instead.\n$ realpath /Users/Vaughan/dev-zzz/zzz-app/node_modules/babel-preset-live/node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-function-name/node_modules/babel-helper-function-name/node_modules/babel-template/node_modules/babel-types/node_modules/babel-runtime/node_modules/core-js/library/modules/core.get-iterator.js\n/Users/Vaughan/dev-zzz/zzz-app/node_modules/.registry.npmjs.org/core-js/2.4.1/node_modules/core-js/library/modules/core.get-iterator.js\n```\nThis issue has been raised in https://github.com/nodejs/node/issues/10107 where the proposed solution was a modification to the caching key:\n\nFor all other require()d modules, always using the preserved path of its directory location as its __dirname, but always using its realpath as the module cache key. This resolves the memory bloat and add-on crashing problems while still letting resolution happen within the symbolic path space.\n\n\nTo avoid this issue the following require hack can be used:\n```js\n// Resolve all paths to real paths.\nvar builtinModules = require('builtin-modules');\nfunction isBuiltinModule(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError('Expected a string');\n    }\n    return builtinModules.indexOf(str) !== -1;\n}\nconst Module = require('module')\nconst fs = require('fs')\nconst oldResolveFilename = Module._resolveFilename\nModule._resolveFilename = function(request, parent, isMain) {\n  if (!request.startsWith('.') && !isBuiltinModule(request)) {\n    const filename = oldResolveFilename.call(this, request, parent, isMain)\n    return fs.realpathSync(filename)\n  } else {\n    return oldResolveFilename.call(this, request, parent, isMain)\n  }\n}\n```\nIt appears that symlinks are preserved when doing this too.\nSome more discussion about the npm link + deduping problem here: https://github.com/npm/npm/issues/7742#issuecomment-278143920\nSummary\n\nHard links are the right default choice, because they ensure no uneccessary duplication of modules loaded into memory, because of a shortcoming of preserve-symlinks (caching symlinked paths instead of realpaths).\nSymlinking node_modules in a module's \"local module store\" allows preserve-symlinks to work, which allows peer dependencies to work, however, this causes a lot of duplicate loading, which can be avoided by a small require hack if startup speed and memory usage is an issue.\nDependencies of npm linked dependencies will always have their cache key point to their project's store (except peer deps when preserve-symlinks is on) resulting in duplicate modules loaded into memory which could otherwise be shared with the parent project. Would be quite tricky to work around.\n\nIMHO Recommendation\n\nAdd a flag to allow installing with symlink support which symlinks node_modules dirs.\nYou would also have to ensure that your plugin was pnpm installed with our new symlinking flag set. Maybe some logic to warn the user about that.\nPossibly look at reverting back to having package as well as node_modules for each module version and symlinking to package instead of node_modules/foo to avoid the circular symlink issue - although it didn't cause me any problems so far - but have to think more on it.. > I don't see any possibility to avoid circular symlinks with pnpm, when node_modules is inside the package folder.\n\nI meant that there would be a path: node_modules/foo/node_modules/foo pointing to itself.\nRather than:\nnode_modules\n  foo <- not needed anymore as a module should be able to point to itself\npackage\n  node_modules -> ../node_modules\n  index.js\nBut maybe you are referring to another situation of circular deps?\n\nWhen I said: \n\nfoo <- not needed anymore as a module should be able to point to itself\n\n...this would break other modules if we didn't keep it.\nThere are some modules that will reference themeselves - I think babel does this thanks, and some modules assume npm3 flat structure and assume modules to be there when they should be explictly defined as peerDeps. This is discussed in https://github.com/pnpm/pnpm/issues/5.\n. I tried it out on Windows and still got errors with the new default fetching concurrency of 4. I had to change it to --fetching-concurrency=1 for it to work.. > It would be easier just to maintain v0.50.0 instead, where preserve-symlinks is still the default behavior\nAs I mention in https://github.com/pnpm/pnpm/issues/604#issuecomment-278042477 symlinks cause too many duplicate module loads. I would like to use hardlinks in production, but symlinks only when I am developing a module with lots of npm linking.\nIts just that developing plugins with peer deps with pnpm is simply not possible right now without jumping through hoops, and the introduction of this flag would make it possible.. npm@2\n\u279c  foo npm link\nnpm WARN peerDependencies The peer dependency bar included from foo will no\nnpm WARN peerDependencies longer be automatically installed to fulfill the peerDependency\nnpm WARN peerDependencies in npm 3+. Your application will need to depend on it explicitly.\n/Users/Vaughan/nvm/versions/node/v6.5.0/lib/node_modules/foo -> /Users/Vaughan/dev-scratch/foo\nnpm@4\n\u279c  foo npm link\nnpm WARN foo@1.0.0 No description\nnpm WARN foo@1.0.0 No repository field.\n/Users/Vaughan/nvm/versions/node/v7.5.0/lib/node_modules/foo -> /Users/Vaughan/dev-scratch/foo\n{\n  \"name\": \"foo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"peerDependencies\": {\n    \"bar\": \"*\"\n  }\n}. So npm doesn't, but I think we should show a message because with npm you can use --preserve-symlinks to ensure the same cached module is used for a npm linked peer dependency, but with pnpm it is impossible to use the same cached module of a npm linked peer dep, amongst dependencies.. Thes message should be something like this:\npnpm link foo\nPrints:\n\nThe package foo, which you have just pnpm linked has the following peerDependencies specified in its package.json: \n\nbar@*\n\nWarning: Whilst foo is linked, when a peer dependency is required inside package foo, this peer dependency will refer to foo's local version, not your project's version. This can cause issues if there should be only one instance of the peer dependency during runtime (e.g. react). It may also increase your project's startup time because you would have multiple versions of a package and all its dependencies being evaulated.\nTo workaround this issue, in Node.js you can modify the internal require resolver by monkey-patching Module._resolveFilename. Or when using webpack you can use resolve.alias or resolve.modules config settings to acheive the same behaviour. See .\n\nIts a long message, but pnpm link X is not used that often, and if users don't understand this limitation they will encounter crazy bugs.\nIf we can create a good FAQ article about this, and maybe a blessed require-hack module to ensure the correct peer dep is resolved (I have already written a POC), then there would be no one who can say that pnpm's non-standard hardlinking breaks framework development.. This is still present in 1.10.2.. Just tested, looks like it was resolved. Closing.. > why should it satisfy the parent deps package.json? it should satisfy only the package.json which requires the dependency.\nThat's what I meant.\nI will try to reproduce it in a small project.. Reproduced.\npnpm v0.58.0\n```\nnpm init -y\npnpm i -S react-datetime@^2\nNote that react-datetime depends on react-onclickoutside@5.9.0.\npnpm i -S react-datetime@^1\nNote that react-onclickoutside is still 5.9.0, but in its package.json it depends on react-onclickoutside@^0.3.4.\nDelete the shrinkwrap.yaml file.\npnpm i -S react-datetime@^1\nCorrect dependency is installed.\n```\nAside: Is shrinkwrap used during installation at present, or is it just written to as a record?. So to confirm, when there is a shrinkwrap file present, when I pnpm install it should install the tree defined in the shrinkwrap?\nIs it possible to update a single package's dependencies without nuking the shrinkwrap file?\n. Just tested - when I modify the version of a dep of a dep in shrinkwrap.yaml, when I pnpm install it will update the dep to the latest, instead of respecting the shrinkwrap.yaml.. So to clarify the proposed behaviour:\nWhen I pnpm install, the shrinkwrap will be used for all deps.\nIf I want to update all my deps, I must delete the shrinkwrap file.\nIf I want to update a single dep and its deps, I can run pnpm i -S foo\nThe only case that seems to be not possible is: updating deps of deps but not the dep itself. But I don't think this is a common case tbh.\n\nMaybe a FAQ of this functionality would be useful. Something like:\nHow do I ensure that the same dependency tree is used every time pnpm install is run?\npnpm will install the dep tree in shrinkwrap.yaml by default. The shrinkwrap.yaml will be generated if it does not exist the first time pnpm install is run.\nHow do I update a single dependency?\nYou must run pnpm install -S your-dep. This will install the latest version that satisfies the version range specified in the package.json file, and will update all its sub-dependencies.\nNOTE: When pnpm install is run, it will install the dependency tree from shrinkwrap.yaml as mentioned above, which may not install the latest version satisfying the version range in the package.json file. Packages must be updated explicitly. This is good practice as it ensures that nothing will break unexpectedly when you install from an empty node_modules folder.\nHow do I update all my project's dependencies and their dependencies?\nYou must delete the shrinkwrap.yaml file, and run pnpm install. This will ensure that the latest version possible of all dependencies and their dependencies are installed.\n\n@zkochan Will this work if node_modules is not deleted?\n\nHow do I update a single dependency's dependencies, but not the dependency itself?\nThis is currently not possible.\nAs a workaround, you can lock your dependency specified in your package.json to an exact version using pnpm i -S my-dep@x.x.x, which will ensure that version x.x.x is installed with its latest dependencies.\n. > If you just do pnpm i lodash, it should not be saved in shrinkwrap.yaml.\nJust tested, when I run pnpm i lodash, it is saved in the shrinkwrap as of 0.58.0.\n\nOk, for uninstalling, if I use pnpm uninstall -S lodash it removes it from shrinkwrap too - this was my mistake for not adding the -S.. The second case I mentioned is still broken.\n```\npnpm i -S lodash\nmanually remove lodash from package.json\nrm -rf node_modules/lodash\npnpm i\ncat shrinkwrap.yaml\n```\nlodash is still in the shrinkwrap. It should have been removed by pnpm install as it is no longer present in node_modules or package.json dependencies. This means over time dependencies that are installed (and saved) then removed will still be in the shrinkwrap.\nI think that the shrinkwrap should reflect only what is in the package.json dependencies. It should clean out package specs that were removed.. The bug may only apply to a single dep. If you override by version, other deps would update. \nThe use case for using it would most usually be for a single dep breaking.\nTherefore I think both is important. \nnote: cannot use dot as separator because it is valid in package name. . @zkochan I like that already.. Hmm, I guess something like this but its a bit ugly - this is why flat might be nicer if we can figure out a way to delimit sub-deps...\n\"qar@1\": {\n  \"root\": \"zkochan/qar\",\n  \"bar@2\": \"zkochan/bar\"\n}\nSome options for flat:\nqar@1 > bar@2 <- This is how yarn prints its dep chains. Borrows familiar \"direct descendant\" css syntax.\nqar@1..bar@2\nqar@1|bar@2\nqar@1$bar@2. Yeh not needing to specify a direct dep chain would probably make life easier I think.. FYI yarn has implemented it: https://github.com/yarnpkg/yarn/pull/4105. I think the closest analogy is a dirty git working directory. Git has git reset and git clean to remedy this situation. But I think these could be confusing.\nMaybe it could be associated with the \"store administration commands\" from https://github.com/pnpm/pnpm/issues/430. verify-store or something.\nBut I do like pnpm untouched.\n. > On a huge project, comparing of the private/publish shrinkwrap files takes less than 2 seconds.\nYou mean a simple diff of shrinkwrap.yml and node_modules/shrinkwrap.yaml right?\nShouldn't this be near-instant? We could also hash dep trees to optimize if necessary.. Also, it will delete any npm linked symlinks which is bad because if you can't remember what you had linked, it could take ages to work out which ones were linked.\nThis happens when the shrinkwrap version changes.. ```\n ERROR The current version of pnpm is not compatible with the available node_modules structure\nnode_modules path: /Users/Vaughan/nvm/versions/node/v6.5.0/bin/pnpm-global/node_modules\nTry running the same command with the --force parameter.\nInformation about the node_modules structure is stored in a node_modules/.shrinkwrap.yaml file instead of a node_modules/.graph.yaml file\nRelated PR: https://github.com/pnpm/pnpm/pull/660\n```\nAlso, when running pnpm link -g, it will trash your global node_modules which could cause a lot of problems. It would be better to warn the user more.. 0.60.0 seems to work.... Ok I think I understand now.\n```\n- a\n  - bar@1.0\n  - baz@1.0\n  - foo@1\n    - peer: bar@^1\n    - peer: baz@^1\nwhen requiring a, foo should resolve bar to 1.0\n\nb\nbar@1.1\nbaz@1.0\nfoo@1\npeer: bar@^1\npeer: baz@^1\n\n\n\nwhen requiring b, foo should resolve bar to 1.1\n```\nSo we have a situation where the same module@version (foo@1), will resolve the same dependency (bar) to two different versions (bar@1.0 and bar@1.1), depending on the dependencies of the module that required it.\nBecause we symlink each module to a hardlinked module@version in node_modules/.regsitry.npmjs.org (or another registry/git), we need to symlink in such a way that the Node.js module resolver algorithm will find the correct peers.\n```\n.registry.npmjs.org/node_modules/foo/1.0.0/\n\n\nnode_modules/\n\n\nbar@1.0.0+baz@1.0.0/node_modules/\n\nbar (1.0.0)\nfoo\n\n\n\nbar@1.1.0+baz@1.0.0/node_modules/\n\nbar (1.1.0)\nfoo\n```\n\n\n\npnpm will symlink to one of the two paths to foo@1.0.0 (bar@1.0.0+baz@1.0.0/~/foo or bar@1.1.0+baz@1.0.0/~/foo), depending on which peer deps are to be used, which depends on the dependencies of the module that required foo(a or b in our example above, but there could be ancestors further up that satisfy the peer dep - which is why we use the concatenation of peer deps instead of the requiring module@version).. I'm still seeing this in 2.2.2.\n\nActually, its just the ERROR EINVAL: invalid argument, readlink... part. Not the self-dependency I don't think.. I upgraded from 0.60.0 to 0.65.5 and installing a single module now takes forever on my big monolith. I don't remember it taking so long. I reinstalled node_modules using pnpm i --force.\nIt seems it is checking every module and linking every module each run.\nBut now it is almost as slow as npm and pretty unusable for me. 1m05s to install a single dependency.\nDid something change to cause such a big regression?. Phew! 2.3s single module installs now. . Please provide a sample project repo so we can reproduce the error.. You cannot import a module that you do not include in your package.json file.\nI assume you have a file like this:\nindex.ts\nimport mz from 'mz'\nIf you want to use mz directly, add it to your package.json dependencies (pnpm i -S mz).. This shouldn't work in npm or yarn either should it? devDependencies should only be installed for the top-level dep.\n\nJust tried with npm3 and yarn. Same issue. You must have something else in your package.json file that has a regular dependency of @types/fs-extra. It would be accessible because npm3 flattens the node_modules - but technically it shouldn't be accessible.\nIt is exactly this reason that pnpm is superior (not flattening), because if you removed the module that declared it as a regular dependency at some later point or the module removed it as a regular dependecy and you auto-updated, this error would arise out of the blue and be tricky to figure out.. The error comes from eslint-plugin-import > eslint-module-utils > resolve.js.\nThis is the lookup algorithm to find the node resolver:\n```\nfunction requireResolver(name, sourceFile) {\nconsole.log(arguments)\n  console.log(__dirname)\n// Try to resolve package with conventional name\n  try {\n    return require(eslint-import-resolver-${name})\n  } catch (err) { / continue / }\n// Try to resolve package with custom name (@myorg/resolver-name)\n  try {\n    return require(name)\n  } catch (err) { / continue / }\n// Try to resolve package with path, relative to closest package.json\n  // or current working directory\n  try {\n    const baseDir = pkgDir.sync(sourceFile) || process.cwd()\n    // absolute paths ignore base, so this covers both\n    console.log(baseDir, name)\n    return require(path.resolve(baseDir, name))\n  } catch (err) { / continue / }\n// all else failed\n  throw new Error(unable to load resolver \"${name}\".)\n}\n```\nSo eslint-module-utils tries to require eslint-import-resolver-node, which is not listed in its dependencies.\nThe only reason this works is because of npm3s flattening (a terrible idea).\neslint-import-resolver-node should be listed as a peerDependency in eslint-module-utils.\nHowever, because of the dynamic nature of the resolver code, the only real coverall solution is for the developer to print a message telling the user they need to add the missing resolver to their project's package.json.. Workaround: pnpm i -S eslint-import-resolver-node.\nPlease close if this resolves your issue.. >  Again, listing eslint-import-resolver-node as any kind of dependency of eslint-module-utils is more or less a non-starter.\nA module cannot expect to resolve a dependency using a plain require(dep) it doesn't explicitly depend on in its package.json.\neslint-plugin-import should pass its __dirname to eslint-module-utils, and it should resolve from that dir. The resolve-from package might help.\n. By modifying node_modules/react-scripts/scripts/build.js#71 to include console.log(err, stats), we can see the real error in the console. (react-scripts seems to be hiding errors which is super bad).\nmissing:\n   [ '/Users/Vaughan/dev-scratch/waveblock/node_modules/.registry.npmjs.org/react-scripts/0.9.5/node_modules/react-scripts/node_modules/babel-loader',\n     '/Users/Vaughan/dev-scratch/waveblock/node_modules/.registry.npmjs.org/react-scripts/0.9.5/node_modules/react-scripts/node_modules/babel-loader',\n     '/Users/Vaughan/dev-scratch/waveblock/node_modules/.registry.npmjs.org/react-scripts/0.9.5/node_modules/react-scripts/node_modules/babel-loader.webpack-loader.js',\n     '/Users/Vaughan/dev-scratch/waveblock/node_modules/.registry.npmjs.org/react-scripts/0.9.5/node_modules/react-scripts/node_modules/babel-loader.loader.js',\n     '/Users/Vaughan/dev-scratch/waveblock/node_modules/.registry.npmjs.org/react-scripts/0.9.5/node_modules/react-scripts/node_modules/babel-loader.js',\n     '/Users/Vaughan/dev-scratch/waveblock/node_modules/.registry.npmjs.org/react-scripts/0.9.5/node_modules/react-scripts/node_modules/babel-loader.web-loader.js',\n     '/Users/Vaughan/dev-scratch/waveblock/node_modules/babel-loader',\n     '/Users/Vaughan/dev-scratch/waveblock/node_modules/babel-loader',\n     '/Users/Vaughan/dev-scratch/waveblock/node_modules/babel-loader.webpack-loader.js',\n     '/Users/Vaughan/dev-scratch/waveblock/node_modules/babel-loader.web-loader.js',\n     '/Users/Vaughan/dev-scratch/waveblock/node_modules/babel-loader.loader.js',\n     '/Users/Vaughan/dev-scratch/waveblock/node_modules/babel-loader.js',\n     '/Users/Vaughan/dev-scratch/node_modules/babel-loader',\n     '/Users/Vaughan/dev-scratch/node_modules/babel-loader',\n     '/Users/Vaughan/dev-scratch/node_modules/babel-loader.webpack-loader.js',\n     '/Users/Vaughan/dev-scratch/node_modules/babel-loader.web-loader.js',\n     '/Users/Vaughan/dev-scratch/node_modules/babel-loader.loader.js',\n     '/Users/Vaughan/dev-scratch/node_modules/babel-loader.js' ],\nThe issue is the webpack module resolver is not adhering to the Node.js module resolver algorithm, that is, it should look for the babel-loader in all node_modules dirs up the heirarchy. Instead it is jumping to waveblock/node_modules.\nThe babel-loader plugin can be found here which is not being searched:\n/Users/Vaughan/dev-scratch/waveblock/node_modules/.registry.npmjs.org/react-scripts/0.9.5/node_modules\nIn react-scripts/config/paths.js there is this:\n``\n// Note that unlike in Node, only *relative* paths fromNODE_PATH` are honored.\n// Otherwise, we risk importing Node.js core modules into an app instead of Webpack shims.\n// https://github.com/facebookincubator/create-react-app/issues/1023#issuecomment-265344421\nvar nodePaths = (process.env.NODE_PATH || '')\n  .split(process.platform === 'win32' ? ';' : ':')\n  .filter(Boolean)\n  .filter(folder => !path.isAbsolute(folder))\n  .map(resolveApp);\n```\n\n\nnodePaths is null because the paths are absolute. This looks like an issue that should be raised with create-react-app.\n\n\nnodePaths are added to resolve.fallback, and need to be added to resolveLoader.fallback.. This works on other package managers because they are violating the node resolver algorithm by flattening the node_modules which is bad.. See https://github.com/pnpm/pnpm/issues/712. After adding some logging to the code, it looks like resolving peers that is taking most of the time.\n\n\nawait installMultiple = 9s\n\nawait linkPackages = 37s\nresolvePeers: 25449.123ms\nlinkAllPkgs: 9327.027ms\n. node --inspect $(which pnpm)\n\n\ncreateTree method is taking all the time.\n\n. \nI'm not a fan of functional for this reason...very hard to performance debug without diving into the complex code of the functional lib in use.. So merge seems to be the issue. Using reduce with merge, ends up copying ~40K properties from one object and ~2 from another object into a new object. The merge command in ramda is as follows:\nmodule.exports = _curry2(function merge(l, r) {\n  return _assign({}, l, r);\n  //return _assign(l, r); <- much faster\n});\nBy being mutable, we save a heap of time.\nJust this change makes resolvePeers go from 25s to 10s.\nWhen I look further into the flamecharts, Ramda seems very inefficient, maybe its worth removing it completely?\n\ngetNonCircularDependencies also seems to be slow with ramda internal methods keys and type taking up a lot of time cumulatively.. Ah okay, no problem.. @zkochan Needs some descriptions.. Currently shows:\n```\npnpm help\nUsage: pnpm [command] [flags]\nCommands:\n\ninstall\nupdate\nuninstall\nlink\ndislink\nlist\nprune\ninstall-test\nstore status\nstore prune\nroot\n\nOther commands are passed through to npm\n```\nThe commands should have a brief description. And there should be a note about how to get more info on each command...\ne.g. pnpm store help. yargs is what I normally use..... Tested locally, works fine.. Reproduced.\npnpm i git+https://MYPRIVATETOKENREMOVED:x-oauth-basic@github.com/private/repo.git --reporter=ndjson --no-lock\n{\"time\":1494450808877,\"hostname\":\"Vaughan-MacBook-Pro.local\",\"pid\":29163,\"level\":\"warn\",\"name\":\"pnpm\",\"message\":\"using --no-lock I sure hope you know what you are doing\"}\n{\"time\":1494450809053,\"hostname\":\"Vaughan-MacBook-Pro.local\",\"pid\":29163,\"level\":\"debug\",\"name\":\"pnpm:progress\",\"status\":\"installing\",\"pkg\":{\"rawSpec\":\"git+https://MYPRIVATETOKENREMOVED:x-oauth-basic@github.com/private/repo.git\"}}\n{\"time\":1494450809058,\"hostname\":\"Vaughan-MacBook-Pro.local\",\"pid\":29163,\"level\":\"debug\",\"name\":\"pnpm:registry\",\"message\":\"http request uri https://api.github.com/repos/private/repo/commits/HEAD\"}\n{\"time\":1494450809059,\"hostname\":\"Vaughan-MacBook-Pro.local\",\"pid\":29163,\"level\":\"debug\",\"name\":\"pnpm:registry\",\"message\":\"http request no auth needed\"}\n{\"time\":1494450809062,\"hostname\":\"Vaughan-MacBook-Pro.local\",\"pid\":29163,\"level\":\"info\",\"name\":\"pnpm:registry\",\"message\":\"attempt registry request try #1 at 11:13:29 PM\"}\n{\"time\":1494450809063,\"hostname\":\"Vaughan-MacBook-Pro.local\",\"pid\":29163,\"level\":\"debug\",\"name\":\"pnpm:registry\",\"message\":\"http request id 391683d41a458c0c\"}\n{\"time\":1494450809064,\"hostname\":\"Vaughan-MacBook-Pro.local\",\"pid\":29163,\"level\":\"debug\",\"name\":\"pnpm:registry\",\"message\":\"http request GET https://api.github.com/repos/private/repo/commits/HEAD\"}\n{\"time\":1494450809676,\"hostname\":\"Vaughan-MacBook-Pro.local\",\"pid\":29163,\"level\":\"debug\",\"name\":\"pnpm:registry\",\"message\":\"http 404 https://api.github.com/repos/private/repo/commits/HEAD\"}\n{\"time\":1494450809688,\"hostname\":\"Vaughan-MacBook-Pro.local\",\"pid\":29163,\"level\":\"debug\",\"name\":\"pnpm:registry\",\"message\":\"http headers { server: 'GitHub.com',\\n  date: 'Wed, 10 May 2017 21:13:30 GMT',\\n  'content-type': 'application/json; charset=utf-8',\\n  'transfer-encoding': 'chunked',\\n  status: '404 Not Found',\\n  'x-ratelimit-limit': '60',\\n  'x-ratelimit-remaining': '52',\\n  'x-ratelimit-reset': '1494453734',\\n  'x-github-media-type': 'github.v3; format=json',\\n  'access-control-expose-headers': 'ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval',\\n  'access-control-allow-origin': '*',\\n  'content-security-policy': 'default-src \\\\'none\\\\'',\\n  'strict-transport-security': 'max-age=31536000; includeSubdomains; preload',\\n  'x-content-type-options': 'nosniff',\\n  'x-frame-options': 'deny',\\n  'x-xss-protection': '1; mode=block',\\n  'content-encoding': 'gzip',\\n  'x-github-request-id': 'REQUESTID' }\"}\n{\"time\":1494450809689,\"hostname\":\"Vaughan-MacBook-Pro.local\",\"pid\":29163,\"level\":\"warn\",\"name\":\"pnpm:git-logger\",\"message\":\"Error while trying to resolve https://MYPRIVATETOKENREMOVED:x-oauth-basic@github.com/private/repo.git via GitHub API\",\"err\":{\"pkgid\":\"repos\",\"statusCode\":404,\"code\":\"E404\"}}\n{\"time\":1494450810572,\"hostname\":\"Vaughan-MacBook-Pro.local\",\"pid\":29163,\"level\":\"debug\",\"name\":\"pnpm:progress\",\"status\":\"resolved\",\"pkgId\":\"github.com/private/repo/HEAD\",\"pkg\":{\"rawSpec\":\"git+https://MYPRIVATETOKENREMOVED:x-oauth-basic@github.com/private/repo.git\"}}\n{\"time\":1494450810580,\"hostname\":\"Vaughan-MacBook-Pro.local\",\"pid\":29163,\"level\":\"info\",\"name\":\"pnpm:registry\",\"message\":\"attempt registry request try #1 at 11:13:30 PM\"}\n{\"time\":1494450810580,\"hostname\":\"Vaughan-MacBook-Pro.local\",\"pid\":29163,\"level\":\"debug\",\"name\":\"pnpm:registry\",\"message\":\"http fetch GET https://codeload.github.com/private/repo/tar.gz/HEAD\"}\n{\"time\":1494450811179,\"hostname\":\"Vaughan-MacBook-Pro.local\",\"pid\":29163,\"level\":\"debug\",\"name\":\"pnpm:registry\",\"message\":\"http fetch 404 https://codeload.github.com/private/repo/tar.gz/HEAD\"}\n{\"time\":1494450811182,\"hostname\":\"Vaughan-MacBook-Pro.local\",\"pid\":29163,\"level\":\"error\",\"name\":\"pnpm\",\"message\":{},\"err\":{\"name\":\"Error\",\"message\":\"fetch failed with status code 404\",\"stack\":\"Error: fetch failed with status code 404\\n    at Request.<anonymous> (/Users/Vaughan/nvm/versions/node/v6.5.0/lib/node_modules/pnpm/lib/node_modules/npm-registry-client/lib/fetch.js:58:14)\\n    at emitOne (events.js:96:13)\\n    at Request.emit (events.js:188:7)\\n    at Request.onRequestResponse (/Users/Vaughan/nvm/versions/node/v6.5.0/lib/node_modules/pnpm/lib/node_modules/request/request.js:1074:10)\\n    at emitOne (events.js:96:13)\\n    at ClientRequest.emit (events.js:188:7)\\n    at HTTPParser.parserOnIncomingClient (_http_client.js:472:21)\\n    at HTTPParser.parserOnHeadersComplete (_http_common.js:105:23)\\n    at TLSSocket.socketOnData (_http_client.js:361:20)\\n    at emitOne (events.js:96:13)\"}}\nToken is simply not being used.. Or perhaps it is the bin wrapper.\n```\n\u279c  .bin git:(master) \u2717 pwd\n/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/bcrypt/node_modules/.bin\n\u279c  .bin git:(master) \u2717 cat node-pre-gyp\n!/bin/sh\nbasedir=$(dirname \"$(echo \"$0\" | sed -e 's,\\,/,g')\")\ncase uname in\n    CYGWIN) basedir=cygpath -w \"$basedir\";;\nesac\nif [ -x \"$basedir/node\" ]; then\n  NODE_PATH=\"/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/.registry.npmjs.org/node-pre-gyp/0.6.32/node_modules/node-pre-gyp/node_modules:/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/.registry.npmjs.org/node-pre-gyp/0.6.32/node_modules:/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/.registry.npmjs.org/node-pre-gyp/node_modules:/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/.registry.npmjs.org/node_modules:/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules:/Users/Vaughan/dev-xxx/node_modules:/Users/Vaughan/node_modules:/Users/node_modules:/node_modules:/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/.registry.npmjs.org/bcrypt/1.0.2/node_modules/node-pre-gyp/node_modules:/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/.registry.npmjs.org/bcrypt/1.0.2/node_modules:/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/.registry.npmjs.org/bcrypt/node_modules\" \"$basedir/node\"  \"$basedir/../../../node-pre-gyp/bin/node-pre-gyp\" \"$@\"\n  ret=$?\nelse\n  NODE_PATH=\"/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/.registry.npmjs.org/node-pre-gyp/0.6.32/node_modules/node-pre-gyp/node_modules:/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/.registry.npmjs.org/node-pre-gyp/0.6.32/node_modules:/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/.registry.npmjs.org/node-pre-gyp/node_modules:/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/.registry.npmjs.org/node_modules:/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules:/Users/Vaughan/dev-xxx/node_modules:/Users/Vaughan/node_modules:/Users/node_modules:/node_modules:/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/.registry.npmjs.org/bcrypt/1.0.2/node_modules/node-pre-gyp/node_modules:/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/.registry.npmjs.org/bcrypt/1.0.2/node_modules:/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/.registry.npmjs.org/bcrypt/node_modules\" node  \"$basedir/../../../node-pre-gyp/bin/node-pre-gyp\" \"$@\"\n  ret=$?\nfi\nexit $ret\n``\n. So I get the same error when running the bin wrapper from the project root which must be whatnpm rebuild` is doing.\n```\n\u279c  xxx-app--worktree--master git:(master) \u2717 node_modules/bcrypt/node_modules/.bin/node-pre-gyp install\nmodule.js:457\n    throw err;\n    ^\nError: Cannot find module '/Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/node-pre-gyp/bin/node-pre-gyp'\n    at Function.Module._resolveFilename (module.js:455:15)\n    at Function.Module._load (module.js:403:25)\n    at Module.runMain (module.js:590:10)\n    at run (bootstrap_node.js:394:7)\n    at startup (bootstrap_node.js:149:9)\n    at bootstrap_node.js:509:3\n```\nIt looks like the pnpm bin wrappers assume they will be run with cwd as the package root.\n. Actually looks like it is the realpath issue I first mentioned:\npnpm install:\nregistry.npmjs.org/bcrypt/1.0.2  > bcrypt@1.0.2 install /Users/Vaughan/dev-xxx/xxx-app--worktree--master/node_modules/.registry.npmjs.org/bcrypt/1.0.2/node_modules/bcrypt\npnpm rebuild:\n```\n\nbcrypt@1.0.2 install /Users/Vaughan/foo/app--worktree--master/node_modules/bcrypt\n``\n. Ok looks like pnpm does it own native package building usinginstall/postInstall.ts`.\n\nWe should add pnpm rebuild as a supported command and run postInstall.. Here is npm's rebuild: https://github.com/npm/npm/blob/master/lib/rebuild.js\nand build: https://github.com/npm/npm/blob/master/lib/build.js\nDocs: https://docs.npmjs.com/cli/build\nI think we can scan all the deps in the shrinkwrap and pass them to postInstall can't we?. R.values looks like the culprit.\nR.uniqBy(linkedPkg => linkedPkg.hardlinkedLocation, R.values(linkedPkgsMap).filter(pkg => pkg.id === pkgId)). Looks like api/install#311 is suppose to handle it...\n\nYep, the following guard is resolving to false for registry.npmjs.org/fsevents/1.1.1.\nif (installCtx.installs[pkgId].optional) { ... }\n\nI think the error is here. optional is not set if isInstallable causes an early return.\nfunction addInstalledPkg (installs: InstalledPackages, newPkg: InstalledPackage) {\n  if (!newPkg.isInstallable) return\n  if (!installs[newPkg.id]) {\n    installs[newPkg.id] = newPkg\n    return\n  }\n  installs[newPkg.id].optional = installs[newPkg.id].optional && newPkg.optional\n  if (!installs[newPkg.id].dependencies.length) {\n    installs[newPkg.id].dependencies = newPkg.dependencies\n  }\n}\n\n@zkochan Could you check the logic here to ensure it makes sense. I think the second return statement might be causing the issues...\n\nLooks like one of my dependencies depended directly on fsevents. It still should not crash I don't think...\n\nSo the case is:\n\nYour project has an optionalDependency of fsevents.\nYou depend on a module that has a dependency of fsevents.\n\nThe installation of fsevents will fail if not on macOS.\nBut when postinstall hooks are run, if it throws (which it would because it will fail if not on macOS), there is code to show a warning if the dep is optional, but throw the error if its a regular dep.\nTechnically this should throw an error as a dependency is not being installed correctly. But it can be confusing so maybe we should keep a record of an installed modules dependents and how they depend on the package (regular dep, devDep, peerDep, optDep). This would allow a better error message.\nBut also, the 1.1.1_sha dir is being created which is an issue.\n\nMaking fsevents in my dependency an optional dep solved the issue. But we should still handle it.. Just for a refresher: \n\noptionalDependencies: If a dependency can be used, but you would like npm to proceed if it cannot be found or fails to install, then you may put it in the optionalDependencies object. This is a map of package name to version or url, just like the dependencies object. The difference is that build failures do not cause installation to fail.\nhttp://npm.github.io/using-pkgs-docs/package-json/types/optionaldependencies.html\n\nHmm...I think it would be good for subdeps but can't think of many examples apart from chokidar and fsevents.\nIt may create unnecessary noise if there is a bunch of optional deps being used for platform-specific stuff. E.g. You would always see fsevents fail on Windows for any module that uses it.\nOne argument might be that: a lot of optional deps depend on the platform (win/mac) being used, not whether the package is used as a subdep or a topdep. So they shouldn't be treated differently.\nMaybe being able to mute the errors for subdeps would be good, because when people see failed they think something is wrong.. > Peer dependencies are resolved from dependencies installed higher in the dependency tree. That means if foo@1.0.0 has two peers (bar@^1 and baz@^1) then it might have different sets of dependencies in the same project. To make it possible, pnpm has to hard link foo@1.0.0 as many times as many different dependency sets it has.\nI found this difficult to wrap my head around. I think its best to use figures (trees) at every step to explain what is meant.\n\nOne of the very great features of pnpm is that in one project, a specific version of a package will always have one set of dependencies. \n\nI think including a figure comparing to npm structure would help.\n. The comments in the code blocks add too much noise. Maybe we can use raw <pre> instead of code fences and use superscript to comment parts of the tree? (I didn't know this would work but it does)\n\n- .registry.npmjs.org / foo / 1.0.0 / node_modules\n   hard link to the specific foo package in the store, for instance foo@1.0.0\n  - foo\n    dependencies of foo, symlinks to folders where these deps are resolved with their deps\n  - qux\n  - plugh\n\n. Or using line<sub><sup>subtext</sup></sub> to vertically center next to the line...\n\n- .registry.npmjs.org / foo / 1.0.0 / node_modules (-> ~/.pnpm-store/1/registry.npmjs.org/foo/1.0.0)\n   hard link to the specific foo package in the store\n  - foo\n    dependencies of foo, symlinks to folders where these deps are resolved with their deps\n  - qux\n  - plugh\n\n\n- .registry.npmjs.org / foo / 1.0.0 / node_modules (sup sub)\n- .registry.npmjs.org / foo / 1.0.0 / node_modules (sub sup) ~/.pnpm-store/1/registry.npmjs.org/foo/1.0.0)\n\n. Try adding less@^2.1.1 as a top-level dep to your package.json file.\nWhat is inside: C:\\BuildAgent_work\\Web\\App\\node_modules.registry.npmjs.org\\gulp-less\\3.3.0\\node_modules\\\nless should be inside this folder...\nHere is where it is failing in https://github.com/jescalan/accord/blob/master/lib/index.coffee:\n```\nresolve_engine_path = (name, custom_path) ->\n  filepath = if custom_path?\n    resolve.sync(name_to_adapter(name), basedir: custom_path)\n  else\n    require.resolve(name_to_adapter(name)) // <--- THIS IS FAILING.\nloop\n    if filepath is '/'\n      throw new Error(\"cannot resolve root of node module #{name}\")\n    filepath = path.dirname(filepath) # cut off the last part of the path\n    if fs.existsSync(path.join filepath, 'package.json')\n      # if there's a package.json directly under it, we've found the root of\n      # the module\n      return filepath\n```\nTry running pnpm install --reporter=ndjson in your workingDir and post logging output.. Great, lets close this issue.. I have reproduced locally. Investigating now.. Probably the module resolution. There are more dirs to traverse upwards with webpack.\n\n\n. It might be related to the requring time for webpack. There is a different require tree used for each.\nyarn\n```\ntotal: 789.025ms\n284ms node_modules/webpack/lib/webpack.js\n  104ms node_modules/webpack/lib/WebpackOptionsApply.js\n    27ms node_modules/enhanced-resolve/lib/node.js\n      20ms node_modules/enhanced-resolve/lib/ResolverFactory.js\n        3ms node_modules/enhanced-resolve/lib/Resolver.js\n          1ms node_modules/memory-fs/lib/join.js\n            1ms node_modules/memory-fs/lib/normalize.js\n        2ms node_modules/enhanced-resolve/lib/ConcordExtensionsPlugin.js\n          2ms node_modules/enhanced-resolve/lib/concord.js\n            1ms node_modules/enhanced-resolve/lib/globToRegExp.js\n        2ms node_modules/enhanced-resolve/lib/DescriptionFilePlugin.js\n          1ms node_modules/enhanced-resolve/lib/DescriptionFileUtils.js\n            1ms node_modules/enhanced-resolve/lib/forEachBail.js\n        1ms node_modules/enhanced-resolve/lib/UnsafeCachePlugin.js\n        1ms node_modules/enhanced-resolve/lib/FileKindPlugin.js\n        1ms node_modules/enhanced-resolve/lib/ModulesInHierachicDirectoriesPlugin.js\n        1ms node_modules/enhanced-resolve/lib/ModulesInRootPlugin.js\n        1ms node_modules/enhanced-resolve/lib/AliasFieldPlugin.js\n          1ms node_modules/enhanced-resolve/lib/getInnerRequest.js\n        1ms node_modules/enhanced-resolve/lib/ConcordModulesPlugin.js\n        1ms node_modules/enhanced-resolve/lib/SymlinkPlugin.js\n        1ms node_modules/enhanced-resolve/lib/UseFilePlugin.js\n        1ms node_modules/enhanced-resolve/lib/ResultPlugin.js\n    11ms node_modules/webpack/lib/node/NodeSourcePlugin.js\n      9ms node_modules/node-libs-browser/index.js\n    11ms node_modules/webpack/lib/dependencies/CommonJsPlugin.js\n      3ms node_modules/webpack/lib/dependencies/CommonJsRequireContextDependency.js\n        1ms node_modules/webpack/lib/dependencies/ContextDependencyTemplateAsRequireCall.js\n      2ms node_modules/webpack/lib/dependencies/CommonJsRequireDependencyParserPlugin.js\n        1ms node_modules/webpack/lib/dependencies/LocalModulesHelpers.js\n      1ms node_modules/webpack/lib/dependencies/CommonJsRequireDependency.js\n      1ms node_modules/webpack/lib/dependencies/RequireResolveContextDependency.js\n      1ms node_modules/webpack/lib/dependencies/RequireResolveHeaderDependency.js\n      1ms node_modules/webpack/lib/dependencies/RequireResolveDependencyParserPlugin.js\n        1ms node_modules/webpack/lib/dependencies/ContextDependencyHelpers.js\n    11ms node_modules/webpack/lib/dependencies/HarmonyModulesPlugin.js\n      1ms node_modules/webpack/lib/dependencies/HarmonyExportImportedSpecifierDependency.js\n      1ms node_modules/webpack/lib/dependencies/HarmonyExportDependencyParserPlugin.js\n      1ms node_modules/webpack/lib/dependencies/HarmonyCompatibilityDependency.js\n      1ms node_modules/webpack/lib/dependencies/HarmonyImportDependencyParserPlugin.js\n      1ms node_modules/webpack/lib/dependencies/HarmonyExportExpressionDependency.js\n      1ms node_modules/webpack/lib/dependencies/HarmonyExportSpecifierDependency.js\n        1ms node_modules/webpack/lib/dependencies/HarmonyModulesHelpers.js\n      1ms node_modules/webpack/lib/dependencies/HarmonyAcceptImportDependency.js\n    9ms node_modules/webpack/lib/dependencies/AMDPlugin.js\n      2ms node_modules/webpack/lib/dependencies/AMDRequireDependenciesBlockParserPlugin.js\n        1ms node_modules/webpack/lib/dependencies/AMDRequireDependenciesBlock.js\n      1ms node_modules/webpack/lib/dependencies/AMDRequireDependency.js\n      1ms node_modules/webpack/lib/dependencies/AMDRequireItemDependency.js\n      1ms node_modules/webpack/lib/dependencies/AMDDefineDependency.js\n      1ms node_modules/webpack/lib/dependencies/AMDDefineDependencyParserPlugin.js\n      1ms node_modules/enhanced-resolve/lib/AliasPlugin.js\n    6ms node_modules/webpack/lib/dependencies/ImportPlugin.js\n      2ms node_modules/webpack/lib/dependencies/ImportDependency.js\n        1ms node_modules/webpack/lib/dependencies/WebpackMissingModule.js\n      2ms node_modules/webpack/lib/dependencies/ImportParserPlugin.js\n      1ms node_modules/webpack/lib/dependencies/ImportContextDependency.js\n    5ms node_modules/webpack/lib/EntryOptionPlugin.js\n      2ms node_modules/webpack/lib/MultiEntryPlugin.js\n        1ms node_modules/webpack/lib/dependencies/MultiEntryDependency.js\n        1ms node_modules/webpack/lib/MultiModuleFactory.js\n      1ms node_modules/webpack/lib/SingleEntryPlugin.js\n        1ms node_modules/webpack/lib/dependencies/SingleEntryDependency.js\n      1ms node_modules/webpack/lib/DynamicEntryPlugin.js\n    4ms node_modules/webpack/lib/APIPlugin.js\n      1ms node_modules/webpack/lib/dependencies/ConstDependency.js\n        1ms node_modules/webpack/lib/dependencies/NullDependency.js\n      1ms node_modules/webpack/lib/ParserHelpers.js\n    4ms node_modules/webpack/lib/JsonpTemplatePlugin.js\n      1ms node_modules/webpack/lib/JsonpMainTemplatePlugin.js\n      1ms node_modules/webpack/lib/JsonpHotUpdateChunkTemplatePlugin.js\n    3ms node_modules/webpack/lib/dependencies/RequireEnsurePlugin.js\n      1ms node_modules/webpack/lib/dependencies/RequireEnsureDependency.js\n      1ms node_modules/webpack/lib/dependencies/RequireEnsureDependenciesBlockParserPlugin.js\n        1ms node_modules/webpack/lib/dependencies/RequireEnsureDependenciesBlock.js\n    2ms node_modules/webpack/lib/dependencies/RequireContextPlugin.js\n    2ms node_modules/webpack/lib/SourceMapDevToolPlugin.js\n      1ms node_modules/webpack/lib/SourceMapDevToolModuleOptionsPlugin.js\n    2ms node_modules/webpack/lib/performance/SizeLimitsPlugin.js\n      1ms node_modules/webpack/lib/performance/AssetsOverSizeLimitWarning.js\n    2ms node_modules/webpack/lib/LibraryTemplatePlugin.js\n      1ms node_modules/webpack/lib/SetVarMainTemplatePlugin.js\n    1ms node_modules/webpack/lib/dependencies/SystemPlugin.js\n    1ms node_modules/webpack/lib/UseStrictPlugin.js\n    1ms node_modules/webpack/lib/dependencies/LoaderPlugin.js\n      1ms node_modules/webpack/lib/dependencies/LoaderDependency.js\n    1ms node_modules/webpack/lib/EvalSourceMapDevToolPlugin.js\n      1ms node_modules/webpack/lib/EvalSourceMapDevToolModuleTemplatePlugin.js\n    1ms node_modules/webpack/lib/FunctionModulePlugin.js\n    1ms node_modules/webpack/lib/RecordIdsPlugin.js\n    1ms node_modules/webpack/lib/EvalDevToolModulePlugin.js\n      1ms node_modules/webpack/lib/EvalDevToolModuleTemplatePlugin.js\n    1ms node_modules/webpack/lib/OptionsApply.js\n    1ms node_modules/webpack/lib/RequireJsStuffPlugin.js\n    1ms node_modules/webpack/lib/NodeStuffPlugin.js\n    1ms node_modules/webpack/lib/dependencies/RequireIncludePlugin.js\n      1ms node_modules/webpack/lib/dependencies/RequireIncludeDependency.js\n    1ms node_modules/webpack/lib/optimize/EnsureChunkConditionsPlugin.js\n    1ms node_modules/webpack/lib/CompatibilityPlugin.js\n    1ms node_modules/webpack/lib/TemplatedPathPlugin.js\n    1ms node_modules/webpack/lib/WarnCaseSensitiveModulesPlugin.js\n      1ms node_modules/webpack/lib/CaseSensitiveModulesWarning.js\n    1ms node_modules/webpack/lib/FlagDependencyExportsPlugin.js\n    1ms node_modules/webpack/lib/optimize/OccurrenceOrderPlugin.js\n    1ms node_modules/webpack/lib/CachePlugin.js\n  89ms node_modules/webpack/lib/Compiler.js\n    58ms node_modules/webpack/lib/Compilation.js\n      29ms node_modules/webpack/lib/Module.js\n        27ms node_modules/webpack/lib/DependenciesBlock.js\n          26ms node_modules/webpack/lib/DependenciesBlockVariable.js\n            25ms node_modules/webpack-sources/lib/index.js\n              10ms node_modules/webpack-sources/lib/Source.js\n                9ms node_modules/source-map/source-map.js\n                  5ms node_modules/source-map/lib/source-map-generator.js\n                    1ms node_modules/source-map/lib/base64-vlq.js\n                    1ms node_modules/source-map/lib/array-set.js\n                    1ms node_modules/source-map/lib/mapping-list.js\n                  2ms node_modules/source-map/lib/source-map-consumer.js\n                  1ms node_modules/source-map/lib/source-node.js\n              9ms node_modules/webpack-sources/lib/RawSource.js\n                7ms node_modules/source-list-map/lib/index.js\n                  6ms node_modules/source-list-map/lib/SourceListMap.js\n                    3ms node_modules/source-list-map/lib/CodeNode.js\n                    2ms node_modules/source-list-map/lib/SourceNode.js\n                      1ms node_modules/source-list-map/lib/base64-vlq.js\n                    1ms node_modules/source-list-map/lib/MappingsContext.js\n              1ms node_modules/webpack-sources/lib/OriginalSource.js\n                1ms node_modules/webpack-sources/lib/SourceAndMapMixin.js\n              1ms node_modules/webpack-sources/lib/SourceMapSource.js\n              1ms node_modules/webpack-sources/lib/ConcatSource.js\n              1ms node_modules/webpack-sources/lib/ReplaceSource.js\n              1ms node_modules/webpack-sources/lib/PrefixSource.js\n        1ms node_modules/webpack/lib/Template.js\n      6ms node_modules/async/dist/async.js\n      3ms node_modules/webpack/lib/ChunkTemplate.js\n      3ms node_modules/webpack/lib/Stats.js\n        1ms node_modules/webpack/lib/SizeFormatHelpers.js\n      1ms node_modules/webpack/lib/ModuleNotFoundError.js\n      1ms node_modules/webpack/lib/Chunk.js\n      1ms node_modules/webpack/lib/EntryModuleNotFoundError.js\n      1ms node_modules/webpack/lib/MainTemplate.js\n      1ms node_modules/webpack/lib/ModuleDependencyWarning.js\n        1ms node_modules/webpack/lib/formatLocation.js\n      1ms node_modules/webpack/lib/HotUpdateChunkTemplate.js\n      1ms node_modules/webpack/lib/ChunkRenderError.js\n    23ms node_modules/webpack/lib/NormalModuleFactory.js\n      14ms node_modules/webpack/lib/Parser.js\n        9ms node_modules/acorn-dynamic-import/lib/index.js\n          8ms node_modules/acorn-dynamic-import/node_modules/acorn/dist/acorn.js\n          1ms node_modules/acorn-dynamic-import/lib/inject.js\n        2ms node_modules/json5/lib/json5.js\n      6ms node_modules/webpack/lib/NormalModule.js\n        1ms node_modules/webpack/lib/ModuleParseError.js\n        1ms node_modules/webpack/lib/ModuleBuildError.js\n          1ms node_modules/webpack/lib/ErrorHelpers.js\n        1ms node_modules/loader-runner/lib/LoaderRunner.js\n      1ms node_modules/webpack/lib/RawModule.js\n    4ms node_modules/webpack/lib/ContextModuleFactory.js\n      3ms node_modules/webpack/lib/ContextModule.js\n        1ms node_modules/webpack/lib/AsyncDependenciesBlock.js\n      1ms node_modules/webpack/lib/dependencies/ContextElementDependency.js\n    1ms node_modules/tapable/lib/Tapable.js\n  69ms node_modules/webpack/lib/validateSchema.js\n    30ms node_modules/ajv/lib/ajv.js\n      14ms node_modules/ajv/lib/compile/rules.js\n        13ms node_modules/ajv/lib/compile/_rules.js\n          1ms node_modules/ajv/lib/dotjs/uniqueItems.js\n          1ms node_modules/ajv/lib/dotjs/dependencies.js\n          1ms node_modules/ajv/lib/dotjs/enum.js\n          1ms node_modules/ajv/lib/dotjs/items.js\n          1ms node_modules/ajv/lib/dotjs/_limit.js\n          1ms node_modules/ajv/lib/dotjs/allOf.js\n          1ms node_modules/ajv/lib/dotjs/_limitProperties.js\n          1ms node_modules/ajv/lib/dotjs/not.js\n          1ms node_modules/ajv/lib/dotjs/properties.js\n          1ms node_modules/ajv/lib/dotjs/required.js\n      12ms node_modules/ajv/lib/compile/index.js\n        7ms node_modules/ajv/lib/compile/resolve.js\n          2ms node_modules/ajv/lib/compile/util.js\n          1ms node_modules/ajv/lib/compile/equal.js\n        1ms node_modules/ajv/lib/async.js\n        1ms node_modules/ajv/lib/dotjs/validate.js\n        1ms node_modules/co/index.js\n        1ms node_modules/ajv/lib/compile/validation_error.js\n      1ms node_modules/ajv/lib/compile/formats.js\n      1ms node_modules/ajv/lib/keyword.js\n        1ms node_modules/ajv/lib/dotjs/custom.js\n    6ms node_modules/ajv-keywords/index.js\n      6ms node_modules/ajv-keywords/keywords/index.js\n        1ms node_modules/ajv-keywords/keywords/propertyNames.js\n        1ms node_modules/ajv-keywords/keywords/if.js\n        1ms node_modules/ajv-keywords/keywords/deepProperties.js\n  11ms node_modules/webpack/lib/node/NodeEnvironmentPlugin.js\n    6ms node_modules/enhanced-resolve/lib/NodeJsInputFileSystem.js\n      5ms node_modules/graceful-fs/graceful-fs.js\n        1ms node_modules/graceful-fs/polyfills.js\n          1ms node_modules/graceful-fs/fs.js\n        1ms node_modules/graceful-fs/legacy-streams.js\n    2ms node_modules/webpack/lib/node/NodeWatchFileSystem.js\n      1ms node_modules/watchpack/lib/watchpack.js\n    2ms node_modules/webpack/lib/node/NodeOutputFileSystem.js\n      1ms node_modules/mkdirp/index.js\n    1ms node_modules/enhanced-resolve/lib/CachedInputFileSystem.js\n  4ms node_modules/webpack/lib/DllPlugin.js\n    3ms node_modules/webpack/lib/DllEntryPlugin.js\n      2ms node_modules/webpack/lib/DllModuleFactory.js\n        1ms node_modules/webpack/lib/DllModule.js\n    1ms node_modules/webpack/lib/FlagInitialModulesAsUsedPlugin.js\n  3ms node_modules/webpack/lib/WebpackOptionsValidationError.js\n  2ms node_modules/webpack/lib/MultiCompiler.js\n    1ms node_modules/webpack/lib/MultiWatching.js\n  1ms node_modules/webpack/lib/WebpackOptionsDefaulter.js\n    1ms node_modules/webpack/lib/OptionsDefaulter.js\n5ms webpack.config.js\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\nTop-down time spent requiring (> 20ms).\nYellow shows time spent running self (vs. requiring child modules).\n\n| 285ms webpack\n     | 89ms ./Compiler\n       | 58ms ./Compilation\n         | 29ms ./Module\n           | 27ms ./DependenciesBlock\n             | 26ms ./DependenciesBlockVariable\n               | 26ms webpack-sources\n       | 24ms ./NormalModuleFactory\n     | 104ms ./WebpackOptionsApply\n       | 28ms enhanced-resolve\n         | 20ms ./ResolverFactory\n     | 70ms ./validateSchema self=29ms\n       | 31ms ajv\n```\npnpm\n```\ntotal: 889.986ms\n321ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/webpack.js\n  126ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/WebpackOptionsApply.js\n    31ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/node.js\n      24ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/ResolverFactory.js\n        3ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/Resolver.js\n          1ms node_modules/.registry.npmjs.org/memory-fs/0.4.1/node_modules/memory-fs/lib/join.js\n            1ms node_modules/.registry.npmjs.org/memory-fs/0.4.1/node_modules/memory-fs/lib/normalize.js\n        2ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/ConcordExtensionsPlugin.js\n          2ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/concord.js\n            1ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/globToRegExp.js\n        2ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/DescriptionFilePlugin.js\n          1ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/DescriptionFileUtils.js\n        1ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/SyncAsyncFileSystemDecorator.js\n        1ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/ConcordMainPlugin.js\n        1ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/JoinRequestPlugin.js\n        1ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/ModulesInHierachicDirectoriesPlugin.js\n        1ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/ModulesInRootPlugin.js\n        1ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/AliasFieldPlugin.js\n        1ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/TryNextPlugin.js\n        1ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/DirectoryExistsPlugin.js\n        1ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/FileExistsPlugin.js\n        1ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/MainFieldPlugin.js\n        1ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/UseFilePlugin.js\n        1ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/ResultPlugin.js\n    17ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/node/NodeSourcePlugin.js\n      15ms node_modules/.registry.npmjs.org/node-libs-browser/2.0.0/node_modules/node-libs-browser/index.js\n    12ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/CommonJsPlugin.js\n      3ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/CommonJsRequireContextDependency.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/CriticalDependencyWarning.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/ContextDependencyTemplateAsRequireCall.js\n      2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/CommonJsRequireDependencyParserPlugin.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/LocalModuleDependency.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/LocalModulesHelpers.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/CommonJsRequireDependency.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/RequireResolveContextDependency.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/ContextDependencyTemplateAsId.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/RequireHeaderDependency.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/RequireResolveDependencyParserPlugin.js\n    12ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/AMDPlugin.js\n      2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/AMDRequireItemDependency.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/ModuleDependencyTemplateAsRequireId.js\n      2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/AMDRequireDependenciesBlockParserPlugin.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/getFunctionExpression.js\n      2ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/AliasPlugin.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/AMDRequireContextDependency.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/AMDDefineDependencyParserPlugin.js\n    11ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/HarmonyModulesPlugin.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/HarmonyExportImportedSpecifierDependency.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/HarmonyImportDependency.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/HarmonyImportDependencyParserPlugin.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/HarmonyAcceptDependency.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/HarmonyExportExpressionDependency.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/HarmonyExportSpecifierDependency.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/HarmonyImportSpecifierDependency.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/HarmonyExportDependencyParserPlugin.js\n    10ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/ImportPlugin.js\n      5ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/ImportParserPlugin.js\n        2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/ImportDependenciesBlock.js\n      2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/ImportDependency.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/WebpackMissingModule.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/ImportContextDependency.js\n    7ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/EntryOptionPlugin.js\n      2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/SingleEntryPlugin.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/SingleEntryDependency.js\n      2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/MultiEntryPlugin.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/MultiEntryDependency.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/MultiModuleFactory.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/DynamicEntryPlugin.js\n    4ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/JsonpTemplatePlugin.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/JsonpMainTemplatePlugin.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/JsonpHotUpdateChunkTemplatePlugin.js\n    3ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/APIPlugin.js\n      2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/ParserHelpers.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/UnsupportedFeatureWarning.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/ConstDependency.js\n    3ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/RequireEnsurePlugin.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/RequireEnsureDependency.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/RequireEnsureDependenciesBlockParserPlugin.js\n    3ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/performance/SizeLimitsPlugin.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/performance/EntrypointsOverSizeLimitWarning.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/performance/AssetsOverSizeLimitWarning.js\n    2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/FunctionModulePlugin.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/FunctionModuleTemplatePlugin.js\n    2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/RequireContextPlugin.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/RequireContextDependency.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/RequireContextDependencyParserPlugin.js\n    2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/LibraryTemplatePlugin.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/SetVarMainTemplatePlugin.js\n    2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/SourceMapDevToolPlugin.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/SourceMapDevToolModuleOptionsPlugin.js\n    2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/EvalDevToolModulePlugin.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/EvalDevToolModuleTemplatePlugin.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/ModuleFilenameHelpers.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/SystemPlugin.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/RecordIdsPlugin.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/EvalSourceMapDevToolPlugin.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/ConstPlugin.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/OptionsApply.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/NodeStuffPlugin.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/CompatibilityPlugin.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/TemplatedPathPlugin.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/RequireIncludePlugin.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/RequireIncludeDependency.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/WarnCaseSensitiveModulesPlugin.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/optimize/RemoveParentModulesPlugin.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/UseStrictPlugin.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/LoaderPlugin.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/optimize/FlagIncludedChunksPlugin.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/optimize/OccurrenceOrderPlugin.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/FlagDependencyExportsPlugin.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/CachePlugin.js\n  95ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/Compiler.js\n    62ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/Compilation.js\n      31ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/Module.js\n        28ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/DependenciesBlock.js\n          27ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/DependenciesBlockVariable.js\n            26ms node_modules/.registry.npmjs.org/webpack-sources/0.2.3/node_modules/webpack-sources/lib/index.js\n              10ms node_modules/.registry.npmjs.org/webpack-sources/0.2.3/node_modules/webpack-sources/lib/Source.js\n                9ms node_modules/.registry.npmjs.org/source-map/0.5.6/node_modules/source-map/source-map.js\n                  5ms node_modules/.registry.npmjs.org/source-map/0.5.6/node_modules/source-map/lib/source-map-generator.js\n                    1ms node_modules/.registry.npmjs.org/source-map/0.5.6/node_modules/source-map/lib/base64-vlq.js\n                    1ms node_modules/.registry.npmjs.org/source-map/0.5.6/node_modules/source-map/lib/util.js\n                    1ms node_modules/.registry.npmjs.org/source-map/0.5.6/node_modules/source-map/lib/array-set.js\n                    1ms node_modules/.registry.npmjs.org/source-map/0.5.6/node_modules/source-map/lib/mapping-list.js\n                  3ms node_modules/.registry.npmjs.org/source-map/0.5.6/node_modules/source-map/lib/source-map-consumer.js\n                    1ms node_modules/.registry.npmjs.org/source-map/0.5.6/node_modules/source-map/lib/binary-search.js\n                    1ms node_modules/.registry.npmjs.org/source-map/0.5.6/node_modules/source-map/lib/quick-sort.js\n                  1ms node_modules/.registry.npmjs.org/source-map/0.5.6/node_modules/source-map/lib/source-node.js\n              8ms node_modules/.registry.npmjs.org/webpack-sources/0.2.3/node_modules/webpack-sources/lib/RawSource.js\n                7ms node_modules/.registry.npmjs.org/source-list-map/1.1.2/node_modules/source-list-map/lib/index.js\n                  5ms node_modules/.registry.npmjs.org/source-list-map/1.1.2/node_modules/source-list-map/lib/SourceListMap.js\n                    3ms node_modules/.registry.npmjs.org/source-list-map/1.1.2/node_modules/source-list-map/lib/SourceNode.js\n                      2ms node_modules/.registry.npmjs.org/source-list-map/1.1.2/node_modules/source-list-map/lib/base64-vlq.js\n                    1ms node_modules/.registry.npmjs.org/source-list-map/1.1.2/node_modules/source-list-map/lib/CodeNode.js\n                      1ms node_modules/.registry.npmjs.org/source-list-map/1.1.2/node_modules/source-list-map/lib/helpers.js\n                  1ms node_modules/.registry.npmjs.org/source-list-map/1.1.2/node_modules/source-list-map/lib/fromStringWithSourceMap.js\n              2ms node_modules/.registry.npmjs.org/webpack-sources/0.2.3/node_modules/webpack-sources/lib/OriginalSource.js\n                1ms node_modules/.registry.npmjs.org/webpack-sources/0.2.3/node_modules/webpack-sources/lib/SourceAndMapMixin.js\n              1ms node_modules/.registry.npmjs.org/webpack-sources/0.2.3/node_modules/webpack-sources/lib/SourceMapSource.js\n              1ms node_modules/.registry.npmjs.org/webpack-sources/0.2.3/node_modules/webpack-sources/lib/ConcatSource.js\n              1ms node_modules/.registry.npmjs.org/webpack-sources/0.2.3/node_modules/webpack-sources/lib/ReplaceSource.js\n              1ms node_modules/.registry.npmjs.org/webpack-sources/0.2.3/node_modules/webpack-sources/lib/PrefixSource.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/ModuleReason.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/Template.js\n      5ms node_modules/.registry.npmjs.org/async/2.4.0/node_modules/async/dist/async.js\n      3ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/ChunkTemplate.js\n      3ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/Stats.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/RequestShortener.js\n      2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/MainTemplate.js\n      2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/ModuleDependencyWarning.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/formatLocation.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/ModuleNotFoundError.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/EntryModuleNotFoundError.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/Entrypoint.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/Chunk.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/HotUpdateChunkTemplate.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/ChunkRenderError.js\n    26ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/NormalModuleFactory.js\n      16ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/Parser.js\n        9ms node_modules/.registry.npmjs.org/acorn-dynamic-import/2.0.2/node_modules/acorn-dynamic-import/lib/index.js\n          7ms node_modules/.registry.npmjs.org/acorn/4.0.11/node_modules/acorn/dist/acorn.js\n        1ms node_modules/.registry.npmjs.org/json5/0.5.1/node_modules/json5/lib/json5.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/BasicEvaluatedExpression.js\n      7ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/NormalModule.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/ModuleBuildError.js\n          1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/ErrorHelpers.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/ModuleWarning.js\n        1ms node_modules/.registry.npmjs.org/loader-runner/2.3.0/node_modules/loader-runner/lib/LoaderRunner.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/RawModule.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/RuleSet.js\n    4ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/ContextModuleFactory.js\n      2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/ContextModule.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/AsyncDependenciesBlock.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/ContextElementDependency.js\n        1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/ModuleDependency.js\n  78ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/validateSchema.js\n    35ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/ajv.js\n      15ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/compile/rules.js\n        14ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/compile/_rules.js\n          1ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/dotjs/_limitLength.js\n          1ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/dotjs/ref.js\n          1ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/dotjs/properties.js\n          1ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/dotjs/not.js\n          1ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/dotjs/allOf.js\n          1ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/dotjs/format.js\n          1ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/dotjs/items.js\n          1ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/dotjs/uniqueItems.js\n      12ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/compile/index.js\n        7ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/compile/resolve.js\n          3ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/compile/util.js\n            1ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/compile/ucs2length.js\n        1ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/async.js\n        1ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/dotjs/validate.js\n        1ms node_modules/.registry.npmjs.org/co/4.6.0/node_modules/co/index.js\n      2ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/keyword.js\n        1ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/dotjs/custom.js\n      1ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/compile/formats.js\n      1ms node_modules/.registry.npmjs.org/ajv/4.11.8/node_modules/ajv/lib/v5.js\n    7ms node_modules/.registry.npmjs.org/ajv-keywords/1.5.1/ajv@4.11.8/node_modules/ajv-keywords/index.js\n      7ms node_modules/.registry.npmjs.org/ajv-keywords/1.5.1/ajv@4.11.8/node_modules/ajv-keywords/keywords/index.js\n        1ms node_modules/.registry.npmjs.org/ajv-keywords/1.5.1/ajv@4.11.8/node_modules/ajv-keywords/keywords/range.js\n        1ms node_modules/.registry.npmjs.org/ajv-keywords/1.5.1/ajv@4.11.8/node_modules/ajv-keywords/keywords/dynamicDefaults.js\n        1ms node_modules/.registry.npmjs.org/ajv-keywords/1.5.1/ajv@4.11.8/node_modules/ajv-keywords/keywords/deepProperties.js\n  14ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/node/NodeEnvironmentPlugin.js\n    8ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/NodeJsInputFileSystem.js\n      7ms node_modules/.registry.npmjs.org/graceful-fs/4.1.11/node_modules/graceful-fs/graceful-fs.js\n        3ms node_modules/.registry.npmjs.org/graceful-fs/4.1.11/node_modules/graceful-fs/polyfills.js\n          1ms node_modules/.registry.npmjs.org/graceful-fs/4.1.11/node_modules/graceful-fs/fs.js\n        1ms node_modules/.registry.npmjs.org/graceful-fs/4.1.11/node_modules/graceful-fs/legacy-streams.js\n    2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/node/NodeWatchFileSystem.js\n      1ms node_modules/.registry.npmjs.org/watchpack/1.3.1/node_modules/watchpack/lib/watchpack.js\n        1ms node_modules/.registry.npmjs.org/watchpack/1.3.1/node_modules/watchpack/lib/watcherManager.js\n    2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/node/NodeOutputFileSystem.js\n      1ms node_modules/.registry.npmjs.org/mkdirp/0.5.1/node_modules/mkdirp/index.js\n    1ms node_modules/.registry.npmjs.org/enhanced-resolve/3.1.0/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js\n  4ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/DllPlugin.js\n    2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/DllEntryPlugin.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/dependencies/DllEntryDependency.js\n      1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/DllModuleFactory.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/LibManifestPlugin.js\n  3ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/MultiCompiler.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/MultiWatching.js\n    1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/MultiStats.js\n  2ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/WebpackOptionsValidationError.js\n  1ms node_modules/.registry.npmjs.org/webpack/2.5.1/node_modules/webpack/lib/WebpackOptionsDefaulter.js\n6ms webpack.config.js\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\nTop-down time spent requiring (> 20ms).\nYellow shows time spent running self (vs. requiring child modules).\n\n| 323ms webpack\n     | 96ms ./Compiler\n       | 63ms ./Compilation\n         | 30ms ./Module\n           | 28ms ./DependenciesBlock\n             | 27ms ./DependenciesBlockVariable\n               | 27ms webpack-sources\n       | 26ms ./NormalModuleFactory\n     | 126ms ./WebpackOptionsApply\n       | 32ms enhanced-resolve\n         | 24ms ./ResolverFactory\n     | 77ms ./validateSchema self=32ms\n       | 35ms ajv\n``. If I runpnpm i fseventsit will be added todependencies, because it is essentially runningpnpm i -S fsevents...even if its already listed inoptionalDependencies`.\nThe pnpm i save by default is problematic.. Actually, maybe I can just symlink node_modules in the volume container, then I only have to cp -R /volume-container/node_modules app/node_modules.. I upgraded to Docker for Mac (Edge) which uses the overlay2 driver, instead of aufs which seems to have sped up the cp -R considerably. Without the hard-linking overhead it would probably be faster, but this seems okay for now.. > This might break some packages if they use real path for doing some manipulations with the dependent package. I don't know how likely that is.\nThis seems risky. I will keep an eye on it.... @zkochan \nI think I just got stung by this in webpack usage.\nModule build failed: Error: No PostCSS Config found in: /Users/Vaughan/.pnpm-store/2/registry.npmjs.org/bootstrap-sass/3.3.6/node_modules/bootstrap-sass/assets/stylesheets/bootstrap\npostcss-loader searches up to find postcss.config.js. But because bootstrap-sass has no deps, its symlinked into the store. But this makes it impossible for any kind of findup operation from __dirname to work. Normally a findup from __dirname would expect to eventually find the process.cwd() (except when using linked modules).\n...I need to confirm all this though, currently its not 100% sure.\nThe only way around it becomes a require hack...\nI love perf improvements, but I am thinking this will break too much going forwards. I'd love to figure out a way to keep it though - maybe just behind a flag.\n\nAlternatives:\n\npackage.json pnpm option to allow specifying modules to not symlink to global store.\nA \"blessed\" require hack such as pnpm-compat or something, that overrides Module._resolveFilename.. They are using the popular cosmiconfig module to do the search here.\n\nThey are resolving the closest config from the css file that is being parsed (same as how babel does it).\n\nA configurable config file location solves this particular issue: https://github.com/michael-ciniawsky/postcss-load-config/issues/55\nFor most modules that rely on having the project root in their ancestry, I will open a bug because this breaks when the module is npm linked.\n. But I still think we need a flag or config option as an escape hatch for this particular optimization. It was lucky someone else asked for the configurable config location - otherwise it means forking a module to get it to run until a PR is merged.. @zkochan Exactly. Sounds good. Can we add an option to the pnpm config too?. Seems to only happen when using --force.. It happens when running a pnpm link --force. Somehow the param dependency is undefined. Should be able to find the issue from static types...https://github.com/pnpm/pnpm/blob/master/src/link/index.ts#L203. Still occurs in 0.69.6.. It happens around the time when I'm moving between versions of node with nvm. I'm not exactly sure of the cause, but its happened quite often.\nMaybe its to do with nvm copying across the old global node_modules or something like that.... Yeh it might have been.. I just removed them completely and installed again, same issue. With 0.70.0 and .1.. @zkochan I tried:\n{\n  \"name\": \"test-module-git\",\n  \"dependencies\": {\n    \"test-package-json-scripts\": \"git+https://github.com/AlexanderOMara/test-package-json-scripts.git\"\n  }\n}\nand got:\npnpm i\n```\n pnpm i\nPackages: +1\n+\nResolving: total 1, reused 0, downloaded 1, done\nRunning preinstall for github.com/AlexanderOMara/test-package-json-scripts/125ea74d0db34a2d55456bc7f3c590ed21d82e95, done\nRunning install for github.com/AlexanderOMara/test-package-json-scripts/125ea74d0db34a2d55456bc7f3c590ed21d82e95, done\nRunning postinstall for github.com/AlexanderOMara/test-package-json-scripts/125ea74d0db34a2d55456bc7f3c590ed21d82e95, done\ndependencies:\n+ test-package-json-scripts 2.0.0\n```\nprepare was not run for git dep install.\n\npnpm i -S test-package-json-scripts@latest\n```\npnpm i -S test-package-json-scripts@latest\nPackages: -1 +1\n-+\nResolving: total 1, reused 0, downloaded 1, done\nRunning preinstall for registry.npmjs.org/test-package-json-scripts/2.0.0, done\nRunning install for registry.npmjs.org/test-package-json-scripts/2.0.0, done\nRunning postinstall for registry.npmjs.org/test-package-json-scripts/2.0.0, done\ndependencies:\n- test-package-json-scripts 2.0.0\n+ test-package-json-scripts 2.0.0\n```\nyarn install\n```\nyarn install\nyarn install v1.3.2\ninfo No lockfile found.\n[1/4] \ud83d\udd0d  Resolving packages...\n[2/4] \ud83d\ude9a  Fetching packages...\ninfo No lockfile found.\n$ node log.js 'preinstall'\n[1/4] \ud83d\udd0d  Resolving packages...\n[2/4] \ud83d\ude9a  Fetching packages...\n[3/4] \ud83d\udd17  Linking dependencies...\n[4/4] \ud83d\udcc3  Building fresh packages...\ninfo Lockfile not saved, no dependencies.\n$ node log.js 'install'\n$ node log.js 'postinstall'\n$ node log.js 'prepare'\n[3/4] \ud83d\udd17  Linking dependencies...\n[4/4] \ud83d\udcc3  Building fresh packages...\nsuccess Saved lockfi\n```\nyarn add test-package-json-scripts@latest\ncat node_modules/test-package-json-scripts/log.txt\n2018-03-18T16:36:36.934Z: preinstall\n2018-03-18T16:36:37.018Z: install\n2018-03-18T16:36:37.099Z: postinstall\n\nnpm i -S https://github.com/AlexanderOMara/test-package-json-scripts.git\nnpm@5.6.0\n```\nnpm i -S https://github.com/AlexanderOMara/test-package-json-scripts.git\n\ntest-package-json-scripts@2.0.0 prepack /Users/Vaughan/.npm/_cacache/tmp/git-clone-253f504e\nnode log.js 'prepack'\ntest-package-json-scripts@2.0.0 postpack /Users/Vaughan/.npm/_cacache/tmp/git-clone-253f504e\nnode log.js 'postpack'\ntest-package-json-scripts@2.0.0 preuninstall /Users/Vaughan/dev-scratch/ffff/node_modules/test-package-json-scripts\nnode log.js 'preuninstall'\ntest-package-json-scripts@2.0.0 uninstall /Users/Vaughan/dev-scratch/ffff/node_modules/test-package-json-scripts\nnode log.js 'uninstall'\ntest-package-json-scripts@2.0.0 postuninstall /Users/Vaughan/dev-scratch/ffff/node_modules/test-package-json-scripts\nnode log.js 'postuninstall'\ntest-package-json-scripts@2.0.0 preinstall /Users/Vaughan/dev-scratch/ffff/node_modules/test-package-json-scripts\nnode log.js 'preinstall'\ntest-package-json-scripts@2.0.0 install /Users/Vaughan/dev-scratch/ffff/node_modules/test-package-json-scripts\nnode log.js 'install'\ntest-package-json-scripts@2.0.0 postinstall /Users/Vaughan/dev-scratch/ffff/node_modules/test-package-json-scripts\nnode log.js 'postinstall'\n\nnpm WARN ffff@1.0.0 No description\nnpm WARN ffff@1.0.0 No repository field.\n\ntest-package-json-scripts@2.0.0\nupdated 1 package in 3.477s\n```\n\n\nnpm i\n```\nnpm i\n\ntest-package-json-scripts@2.0.0 prepack /Users/Vaughan/.npm/_cacache/tmp/git-clone-1df34ed8\nnode log.js 'prepack'\ntest-package-json-scripts@2.0.0 postpack /Users/Vaughan/.npm/_cacache/tmp/git-clone-1df34ed8\nnode log.js 'postpack'\ntest-package-json-scripts@2.0.0 preinstall /Users/Vaughan/dev-scratch/ffff/node_modules/test-package-json-scripts\nnode log.js 'preinstall'\ntest-package-json-scripts@2.0.0 install /Users/Vaughan/dev-scratch/ffff/node_modules/test-package-json-scripts\nnode log.js 'install'\ntest-package-json-scripts@2.0.0 postinstall /Users/Vaughan/dev-scratch/ffff/node_modules/test-package-json-scripts\nnode log.js 'postinstall'\n```\n\n\npnpm install --store .store --force\n```\npnpm install --store .store --force\n\u2009WARN\u2009 using --force I sure hope you know what you are doing\nRecreating /Users/Vaughan/dev-scratch/ffff/node_modules\nPackages: +1\n+\nResolving: total 1, reused 0, downloaded 1, done\nRunning preinstall for github.com/AlexanderOMara/test-package-json-scripts/125ea74d0db34a2d55456bc7f3c590ed21d82e95, done\nRunning install for github.com/AlexanderOMara/test-package-json-scripts/125ea74d0db34a2d55456bc7f3c590ed21d82e95, done\nRunning postinstall for github.com/AlexanderOMara/test-package-json-scripts/125ea74d0db34a2d55456bc7f3c590ed21d82e95, done\ndependencies:\n+ test-package-json-scripts 2.0.0\n```. @zkochan Looks similar.\n@stereokai Can you post your webpack config?. Maybe try to use require.resolve for your loader as mentioned here: https://webpack.js.org/guides/migrating/#loaders-in-configuration-resolve-relative-to-context\n@stereokai There is a flag coming to pnpm soon that should fix this. Are you using webpack 1 or 2?\n@zkochan That config we discussed would resolve this. @stereokai . @stereokai pnpm symlinks from node_modules/foo to node_modules/.registry.npmjs.org/foo/x.x.x to give each module a unique ancestry of modules so that transitive deps are perfectly met depending on semver, and then hard links to a central store. \nThis was just a minor optimisation.. @stereokai Haha, its really hard to describe in few words. I'll see if I can find the docs explaining it.\n@zkochan Do we have some docs on how pnpm works - it seems the docs dir is a bit out of date. The peer deps is nice and detailed but, we need something similar for normal resolution.\n. @stereokai https://www.kochan.io/nodejs/why-should-we-use-pnpm.html\npnpm is usually faster than yarn, and the more deps you have, it becomes much much faster than yarn.. @paulpflug \n\nI want a package which automatically provides a number of loaders for webpack.\nWith npm I can define them as normal deps and look them up either in node_modules of the package or its parent.\nWith pnpm it is not possible. The normal deps are not showing up in node_modules of the parent (strict - good design), but also not in node_modules of the package, so webpack has no way of finding them.\n\nI have tackled this issue extensively. Its very tricky in general - lots of edge cases, especially when npm linking during development.\nYou can just use webpack's resolve.modules: https://webpack.js.org/configuration/resolve/#resolve-modules to get most of the way there though.. In package A you should refer to package B using require.resolve, or you\ncan add package A's node modules dir to require.modules\nDo you have a sample project I can look at?\nOn Wed 28. Jun 2017 at 6:20 PM, Paul Pflugradt notifications@github.com\nwrote:\n\nI have tested it with webpack@3.\nThere is no way I can ship package A somehow connected to B so that\nwebpack can resolve B\nThis worked with peerDep at npm@1-2 and with normal dep with npm@3-5 and\nyarn\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/827#issuecomment-311712148, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AARLRa1XLns8OpxqYH4NdMTXhCESXs0Xks5sIn1jgaJpZM4OFG7M\n.\n. With webpack everything is possible! I'm not 100% on what your trying to do\nbut if you can show me a sample project I'm pretty sure I can resolve it.\nRelying on flat node modules will be problematic if there are multiple\nversions of the dep in the tree too. But I'd have to see code.\nOn Wed 28. Jun 2017 at 6:59 PM, Paul Pflugradt notifications@github.com\nwrote:\nIn package A you should refer to package B using require.resolve\nThis won't work for other dependencies than js. Stylesheets for example.\nor you can add package A's node modules dir to require.modules\nThis will work, but then the installation instructions of A get very ugly,\nI really want to prevent that.\nI also could order the user to also install B, also ugly in my eyes.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/827#issuecomment-311722937, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AARLRZ2k5-MwO6G-OSY8irkSAo0K4IGEks5sIoaGgaJpZM4OFG7M\n.\n. Okay reproduced:\n\nERROR in ./node_modules/.registry.npmjs.org/css-loader/0.28.4/node_modules/css-loader!./node_modules/.registry.npmjs.org/sass-loader/6.0.6/node_modules/sass-loader/lib/loader.js!./dev/materialize.config.scss\nModule build failed:\n@import \"~materialize-css/sass/components/mixins\";\n^\n      File to import not found or unreadable: ~materialize-css/sass/components/mixins.\nParent style sheet: stdin\n      in /Users/Vaughan/dev-live/ceri-tooltip/dev/materialize.config.scss (line 3, column 1)\n @ ./dev/materialize.config.scss 4:14-232 18:2-22:4 19:20-238\n @ ./dev/materialize.coffee\n @ ./node_modules/.registry.npmjs.org/ceri-dev-server/1.0.6/node_modules/ceri-dev-server/lib/ceri-dev-client.js\n @ multi ./node_modules/.registry.npmjs.org/koa-hot-dev-webpack/0.1.10/webpack@3.0.0/node_modules/koa-hot-dev-webpack/hot-reload.js ./node_modules/.registry.npmjs.org/ceri-dev-server/1.0.6/node_modules/ceri-dev-server/lib/ceri-dev-client.js. So in ceri-tooltip/dev/materialize.coffe.scss you are referencing materialize-css. This is non-standard and should be avoided - there are many things that could go wrong and break.\nYou should depend directly on materialize-css or you should access materialize-css via the ceri-materialize module.\npnpm will never support accessing a module from a module that doesn't depend on it.\nHowever, you can configure webpack with a custom loader resolver. Modify ceri-dev-server/lib/webpack.config.js to include node_modules/ceri-materialize/node_modules.. If there is ever another version of materialize-css used in your code base by your library users, then this will cause issues. pnpm is much safer, and not relying on the flat module structure is always best.\n@zkochan We should have a tag we use for all the issues relating to flat modules. And we should have a standard FAQ page to point people to explaining why relying on flat modules is bad.. @paulpflug But if C doesn't depend on B, then C should not be able to access B.\nIf A has a peer dep on B, then C must still explicitly require B if it wants to access it.\nIn your ceri-materialize you have:\n\"peerDependencies\": {\n    \"materialize-css\": \"^0.99.0\"\n  },\n  \"dependencies\": {\n    \"materialize-css\": \"^0.99.0\"\n  },\nYou should use webpack alias or something to target the correct version of materialize-css from your app if using a dep, or just use a peer dep.\nPeer deps should be used when its important that the same instance of the dep is used - e.g. when using webpack.ExtractTextPlugin you need to use the same webpack instance. So webpack should always be a peer dep in libraries.. > There would be a separate application (a pnpm service) that would run in the background.\nI think the Flowtype cli is a good example of a similar daemonised tool that we can learn from.\nI would prefer it to be seamlessly built into pnpm. So you could pass a flag to use it and it will create a service if it doesn't exist. I really don't want to have to manage a separate service.\n\nSome discussion points on the usage (inspired by flowtype):\nHow to use the daemon?\n// Starts the deamon if not started.\npnpm install --use-daemon/daemon\n// Doesn't start a daemon if not already running. Throws error.\npnpm install --daemon --no-daemon-auto-start\n// Namespaced for pnpm to avoid conflicts with npm.\npnpm config set pnpm-use-daemon\nHow to control the daemon?\nRunning in background:\npnpm daemon/server start/stop/restart/status --background\nRunning in foreground:\npnpm daemon/server foreground/fg. @etamponi @zkochan The daemon/service should be entirely controlled by pnpm. Just like flow. The user should never deal with systemd, etc. I always find linux services painful to deal with. (E.g. Why didn't it start, where are the logs, permissions issues, hard-wired init.d flags in some apt packages, etc, etc.)\nAlso, pnpm version changes a lot, I would like the service to automatically know when it needs to restart after a pnpm install -g pnpm.\nI would also use pnpm server rather than pnpm daemon. Daemon makes me think of linux services, and having something running all the time.. @zkochan How would you communicate between processes? https://www.npmjs.com/package/node-ipc?. >  I would run pnpm install inside docker, and it has to\ncommunicate to the server that has to run on the host.\n@zkochan Does @etamponi's docker use case work or would it involve unsupported cross-device hard linking?. > I've already managed to get rid of the cross-device hard linking errors :)\nHow? You fallback to copying?. Re: Docker\npnpm server running on host, pnpm i running in container could end up with two daemons operating on same store. Need to check for this. E.g. print the hostname and process id of the daemon pnpm is using each run, and when there is already one running, do the same.. > if we avoid running the daemon automatically when running pnpm install, this issue will never happen.\nBy default, pnpm should not run the daemon. It should only run it when its enabled in config or flag.\npnpm install --use-server\nThen you can also pass in an option pnpm --use-server install --no-auto-start, to prevent it autostarting.\nGiven that the docker case with host-based server won't be the most common.. Same thing happens with npm, so seems its a gulp4@4.0.2 issue...closing for now.. https://github.com/npm/npm/issues/9131#issuecomment-126942802:\n\nif a package is marked as a bundledDependency, that tells npm to copy everything logically under that package in the dependency tree into the tarball at npm pack time.\nThis is also why npm@3 figures out what to bundle from the logical (not filesystem) tree \u2013 to keep this behavior consistent and usable across all versions of npm that support bundling.\n\nSeems like it was simply not implemented in pnpm?. From this comment...\n\nThis is also why npm@3 figures out what to bundle from the logical (not filesystem) tree \u2013 to keep this behavior consistent and usable across all versions of npm that support bundling.\n\n...it looks like they will create a traditional nested node_modules structure for that dep when packing.\nWe should do similar.\n. But this would mean that pnpm would need to be used for pnpm pack and pnpm publish would need to be used.\nOr we could include a function that should be added as a pre-publish step, to ensure bundled deps are bundled properly before publishing a package with bundledDeps.. > oh, so the problem is with a package published by pnpm.\nThere are 2 cases:\n\n\nWhere it is published by pnpm - I am fine to avoid bundledDeps so I don't really care about this one much - and I think its fine to leave it as a limitation.\n\n\nWhere it is published by npm - This needs to be supported because having just 1 module with bundled deps in a tree would break the whole app mysteriously.. > In any case, as a first step, pnpm should fail if someone wants to publish a package with bundedDependencies\n\n\nAgree. But often I will use npm publish to publish anyway and a lot of publish-helper tools would do the same. So it should be a recommendation to use a pre-publish script which shows the error.. Also confusing when running pnpm store status after using pnpm i --store-path=.pnpm-store-temp.\n```\npnpm store status\nERROR Unexpected store used for installation\nexpected: /Users/Vaughan/.pnpm-store-temp/2\nactual: /Users/Vaughan/.pnpm-store/2\nIf you want to use the new store, run the same command with the --force parameter.\n``. When Ipnpm linka module it seems to go into/Users/Vaughan/nvm/versions/node/v8.1.2/pnpm-global/node_modules.. And after I deletepnpm-global/node_modules`...\npnpm link -g\nERROR ENOENT: no such file or directory, open '/Users/Vaughan/nvm/versions/node/v8.1.2/pnpm-global/package.json'\npnpm list -g --depth=0\nError: ERROR ENOENT: no such file or directory, open '/Users/Vaughan/nvm/versions/node/\nv8.1.2/pnpm-global/package.json'. This seems to fix it:\ncd /Users/Vaughan/nvm/versions/node/v8.1.2/pnpm-global\nnpm init -y\nBut seems like a bug.\n. Re: binstubs\nIt should follow a chain of symlinks (like this module https://github.com/mklement0/rreadlink) to show exactly which binary will be used, and also whether there is a globally installed copy too. (Maybe it would be cool later to check the PATH to see if there are other places that this exe would resolve to show if anything is being overridden...but thats another issue.)\nE.g.\nprettier:\n  - (binstub) /Users/Vaughan/nvm/versions/node/v8.1.2/pnpm-global/node_modules/prettier/bin/prettier.js\n    - (via. pnpm link) /Users/Vaughan/nvm/versions/node/v8.1.2/pnpm-global/node_modules/prettier\n      - /Users/Vaughan/dev/prettier\n        - bin/prettier.js\n    - (via. pnpm i -g) /Users/Vaughan/nvm/versions/node/v8.1.2/pnpm-global/1/node_modules/prettier\n      - /Users/Vaughan/nvm/versions/node/v8.1.2/pnpm-global/1/node_modules/.registry.npmjs.org/prettier/1.5.3/node_modules/prettier\n        - bin/prettier.js\nThis is important: \n\nwhen you are developing a cli module and want to check whether you have your local one linked or a whether a globally installed one from registry.npmjs.org is.\nwhen you switch versions of your node or pnpm and want to see what is what.. > I suggest adding a new boolean called prepare. So for a git dep the shrinkwrap.yaml entry would look like this:\n\nWhy not add an entry explicitly stating its from git?\nAlso, it might be useful to be able to know this in the pnpmfile#addPackage hook. If you know its a git dep, you can tweak the install scripts if necessary. This is probably already possible right?. > not possible currently, here's an issue to allow it: pnpm/supi#55\nExcellent, I had this same need.. Maybe we need a pnpm link -S foo?\nThen it would make sense that pnpm i -S foo should unlink foo first.\nUse cases\n\nI want to patch a package because I found a bug - It will already be in the pjson.\nI want to link a new package I just made - it won't be in the pjson.\nI want to include the package in my pjson for testing after I have published it.\nCurrently: I must manually add it to pjson.\nExpected: Most people would prob try pnpm i -S foo first as the most obvious solution.. pnpm link foo should not add to pjson. \n\n\n\nYou are right, with pnpm link -S foo there is the problem of picking a version, maybe best not to have the -S option.. So I just had to look in the shrinkwrap.yaml.\nFor me the module was:\n/material-design-icons/3.0.1:\n    resolution:\n      integrity: sha1-mnHEh0chjrylHlGmbaaCA4zct78=\nCould this integrity fail between OS's?\nCould it be that it is reusing a package from the store that is broken?\n\nDoesn't seem to be the case. I cleaned everything and it fails every time even without a shrinkwrap.yaml.. Same issue reported with npm and material-design-icons here: https://github.com/npm/npm/issues/16861#issuecomment-321486637. I don't think it is about this package in particular. I am thinking its about a partial tar download occurring in npm-package-client.. See more detail here: https://github.com/npm/npm/issues/16861#issuecomment-322603643\n\nI think its an issue with npm-registry-client.\nRe-download might be a good workaround for now though. Should definitely have message letting user know what is going on though and have a retry limit.. I was just downloading a module on a patchy connection and got this error:\n$ pnpm i -S react-vis\nCreating dependency tree\nAdding 32 packages to node_modules\nERROR sha1-L8eZlME0N9+o/a8iztjNFGj4GiQ= integrity checksum failed when using sha1: wanted sha1-L8eZlME0N9+o/a8iztjNFGj4Gi\nQ= but got sha1-zx2Bd3m2OUeRHPqbJSs5zzDlb+M=. (2195456 bytes)\nResolving: total 77, reused 54, downloaded 22\nRunning pnpm i react-vis again showed a successful install, but I cannot see it in node_modules. This seems like a bug.. I just hit this again...\nbash\n$ lsl ~/.pnpm-store/2/registry.npmjs.org/warning/3.0.0\ntotal 24\ndrwxr-xr-x  6 Vaughan  staff   204B 21 Aug 11:35 .\ndrwxr-xr-x  4 Vaughan  staff   136B 21 Aug 11:35 ..\n-rw-r--r--  1 Vaughan  staff   1.1K 21 Aug 11:35 integrity.json\ndrwxr-xr-x  3 Vaughan  staff   102B 21 Aug 11:35 node_modules\nlrwxr-xr-x  1 Vaughan  staff    20B 21 Aug 11:35 package -> node_modules/warning\n-rw-r--r--  1 Vaughan  staff   2.9K 21 Aug 11:35 packed.tgz\n$ lsl ~/.pnpm-store/2/registry.npmjs.org/material-design-icons/\ntotal 0\ndrwxr-xr-x     4 Vaughan  staff   136B 21 Aug 11:35 .\ndrwxr-xr-x  1834 Vaughan  staff    61K 21 Aug 11:36 ..\ndrwxr-xr-x     3 Vaughan  staff   102B 21 Aug 11:35 3.0.1\ndrwxr-xr-x    19 Vaughan  staff   646B 21 Aug 11:37 3.0.1_stage\n$ lsl ~/.pnpm-store/2/registry.npmjs.org/material-design-icons/3.0.1\ntotal 26224\ndrwxr-xr-x  3 Vaughan  staff   102B 21 Aug 11:35 .\ndrwxr-xr-x  4 Vaughan  staff   136B 21 Aug 11:35 ..\n-rw-r--r--  1 Vaughan  staff    13M 21 Aug 11:37 packed.tgz.3627129203\n$ lsl ~/.pnpm-store/2/registry.npmjs.org/material-design-icons/3.0.1_stage\ntotal 72\ndrwxr-xr-x  19 Vaughan  staff   646B 21 Aug 11:37 .\ndrwxr-xr-x   4 Vaughan  staff   136B 21 Aug 11:35 ..\n-rwxr-xr-x   1 Vaughan  staff    13B  2 Sep  2016 .npmignore\n-rw-r--r--   1 Vaughan  staff    11K  2 Sep  2016 LICENSE\n-rw-r--r--   1 Vaughan  staff   1.9K  2 Sep  2016 README.md\ndrwxr-xr-x  12 Vaughan  staff   408B 21 Aug 11:35 alert\ndrwxr-xr-x  12 Vaughan  staff   408B 21 Aug 11:36 av\n-rw-r--r--   1 Vaughan  staff   289B  2 Sep  2016 bower.json\ndrwxr-xr-x  12 Vaughan  staff   408B 21 Aug 11:36 communication\ndrwxr-xr-x  17 Vaughan  staff   578B 21 Aug 11:36 content\ndrwxr-xr-x  12 Vaughan  staff   408B 21 Aug 11:36 device\ndrwxr-xr-x  12 Vaughan  staff   408B 21 Aug 11:37 editor\ndrwxr-xr-x  12 Vaughan  staff   408B 21 Aug 11:37 file\n-rwxr-xr-x   1 Vaughan  staff   3.8K  2 Sep  2016 gulpfile.babel.js\ndrwxr-xr-x  12 Vaughan  staff   408B 21 Aug 11:37 hardware\ndrwxr-xr-x  11 Vaughan  staff   374B 21 Aug 11:37 iconfont\ndrwxr-xr-x   6 Vaughan  staff   204B 21 Aug 11:37 image\n-rw-r--r--   1 Vaughan  staff    48B  2 Sep  2016 index.js\n-rw-r--r--   1 Vaughan  staff   872B  2 Sep  2016 package.json\nSo it seems like the 3.0.1_stage folder is present in material-design-icons but not in a package that successfully installed like warning.\npacked.tgz.3627129203 is a temp file created by npm-registry-client > https://github.com/npm/fs-write-stream-atomic.\nSo the issue here first of all is that there should be an error when npm-registry-client fails to download, instead of waiting for it to be caught in pnpm-registry.\n~Also, ~/pnpm-registry was not created after a failed install (when it did not already exist).~. So I think what is happening is that the npm registry is occasionally prematurely closing its socket for large file downloads, which is not being reported as an error by request http client, although I'm not even sure if it can be.\nWe need to add re-download logic if the integrity fails.\nAnd is the partially unpacked tar cleaned up on integrity failure?. Ok I feel like I have got to the bottom of this issue now. Details here: https://github.com/npm/registry/issues/202\nFor pnpm, we need to check the Content-Length of the response, and then retry the download.. Yep. pnpm/package-store is what needs changing I think.\nOn Mon 21. Aug 2017 at 2:27 PM, Zoltan Kochan notifications@github.com\nwrote:\n\nThere is an old issue about Content-Length: #423\nhttps://github.com/pnpm/pnpm/issues/423. If we solve this, we can close\nthat one\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/872#issuecomment-323731298, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AARLRT1dPVdKHa1M3P9dwUZ6oXQQZn7_ks5saXeagaJpZM4O2t5J\n.\n. Looks like the issue in is pnpm-default-reporter > log-update.\n\nhttps://github.com/pnpm/pnpm-default-reporter/blob/master/src/terminalWriter.ts#L6\nMentioned here: https://github.com/sindresorhus/log-update/pull/21.. Instead of using log-update to do non-fixed writes, could we not just use console.log?. So I guess pulling the metadata upfront would introduce a delay. \nMaybe it would be cool to have a separate package that could take a shrinkwrap.yaml and package.json and return the count of the packages. Then these could be chained together if necessary. But out of scope for this repo.... Will re-open if I see it again.. I think pnpm store should show the help for the store commands. At least pnpm store help should. . The fix for CRNA is here: https://github.com/pnpm/pnpm/issues/940#issuecomment-373437830. > It will allow specifying one pnpmfile.js for every project on the computer.\nI prefer a package.json key because when you clone the project from github and run pnpm i you want things to work without having to setup additional configuration.. Ah, didn't know about .npmrc. This feels like the right way to do it then.. @andreineculau\n\nSecondly\n\nWhy use folders to organize your source code...why not keep everything flat file ;)\nMonorepos. Cleaner github.com/foo/bar homepage. Less vertical space in tree view in IDE/text editor. Many reasons.\n\nThirdly\n\nI create tons of packages in monorepos so I prefer having as few files as possible per package. I would rather have all config in one file, but am forced not to because of every tool maker defining a different naming standard and hard-coded location.\n\npackage.json reduces the number of files, but doesn't support .js config.\ntools is a good compromise because everything is in one place.\n\nIf you were creating config for your project, you would not use 10 different file naming standards, and keep everything in the root folder. But you are forced to atm.. Maybe after the install phase, we can use console.log instead of log-update.. Ah wait a second. I was running npx ls accidentally, which was instant.\nnpx shx ls and pnpx shx ls both install deps on every run.. This is what it should be (I missed a couple things before and went into an infinite loop - note the which change):\nbash\ncommand_not_found_handler() {\n  # Do not run within a pipe\n  if test ! -t 1; then\n    >&2 echo \"command not found: $1\"\n    return 127\n  fi\n  if which pnpx > /dev/null; then\n    echo \"$1 not found. Trying with pnpx...\" >&2\n  else\n    return 127\n  fi\n  if ! [[ $1 =~ @ ]]; then\n    pnpx --no-install \"$@\"\n  else\n    pnpx \"$@\"\n  fi\n  return $?\n}. I ran into this again. I had a dependency that would not install after deleting shrinkwrap.yaml and node_modules.\nIt was showing up as modified in pnpm store status, but would never be re-installed.\nIt was schema-utils and was missing the ajv dependency which would never be installed. schema-utils may have been a leaf dependency...it did not seem to be symlinked to the store.. Updated pnpmfile.js that works for me.\n```js\n'use strict'\nmodule.exports = {\n  hooks: {\n    readPackage,\n  },\n}\nfunction readPackage(pkg) {\n  if (pkg.name === 'metro-core') {\n    Object.assign(pkg.dependencies, {\n      wordwrap: '',\n    })\n  }\n  if (pkg.name === 'metro') {\n    Object.assign(pkg.dependencies, {\n      'babel-plugin-transform-flow-strip-types': '6',\n      'babel-plugin-transform-object-rest-spread': '6',\n      'babel-plugin-transform-class-properties': '6',\n      'babel-plugin-transform-async-to-generator': '6',\n      'babel-plugin-syntax-trailing-function-commas': '6',\n      xtend: '',\n      errno: '*',\n    })\n  }\n  return pkg\n}\n```\n\nI still couldn't get it to work. There are some more issues related to react-native not supporting symlinks. See https://github.com/facebook/react-native/issues/18156. So I got react-native working with pnpm. https://github.com/pnpm/pnpm/issues/1051#issuecomment-372753512\nI will take a look at getting it working for CRNA soon.. Got CRNA working with pnpmfile.js. Was a bit tricky because expo hides errors from the react-native packager and it uses an older version of react-native which I had to create a custom patch of metro.\nWill tidy this up later.\n```js\n'use strict'\nmodule.exports = {\n  hooks: {\n    readPackage,\n  },\n}\n// NOTE: To see crna packager errors you must add console.log(JSON.stringify(msg, null, 2)) to this._handlePackagerEvent here:\n//   photo-booth-ios-crna/node_modules/.registry.npmjs.org/xdl/48.0.2/node_modules/xdl/build/logs/PackagerLogsStream.js\n// NOTE: Test changes with pnpm up.\n// NOTE: For console.log to appear correctly use: pnpm up --reporter=append-only.\nfunction readPackage(pkg) {\n  require('pnpmfile-check').default(pkg)\n// metro pnpm support.\n  // TODO(vjpr): Use semver instead to test metro version.\n  if (pkg.name === 'react-native' && pkg.version === '0.52.0') {\n    Object.assign(pkg.dependencies, {\n      'metro': 'npm:metro-pnpm@0.24.7-vjpr.1',\n      //'metro-resolver': '~/dev-live/metro/.dev/metro-resolver-0.28.0.tgz',\n      'uuid': '', // Libraries/Blob/Blob.js\n    })\n  }\n  if (pkg.name === 'react-native-scripts') {\n    Object.assign(pkg.dependencies, {\n      expo: '',\n    })\n  }\nif (pkg.name === 'metro-core') {\n    console.log('adding wordwrap to metro-core')\n    Object.assign(pkg.dependencies, {\n      wordwrap: '',\n    })\n  }\n  // expo/src/Notifications.js\n  if (pkg.name === 'expo') {\n    Object.assign(pkg.dependencies, {\n      fbjs: '^0.8.16',\n      lodash: '',\n      'json-schema-traverse': '*',\n    })\n  }\n// 1.0.0-alpha.39\n  if (pkg.name === 'react-native-gesture-handler') {\n    Object.assign(pkg.dependencies, {\n      fbjs: '^0.8.16',\n    })\n  }\n// @expo/vector-icons@6.3.1\n  if (pkg.name === '@expo/vector-icons') {\n    Object.assign(pkg.dependencies, {\n      'prop-types': '*',\n    })\n  }\nif (pkg.name === 'metro-pnpm') {\n    Object.assign(pkg.dependencies, {\n      'babel-plugin-transform-flow-strip-types': '6',\n      'babel-plugin-transform-object-rest-spread': '6',\n      'babel-plugin-transform-class-properties': '6',\n      'babel-plugin-transform-async-to-generator': '6',\n      'babel-plugin-syntax-trailing-function-commas': '6',\n      'babel-template': '6',\n      resolve: '',\n      xtend: '',\n      errno: '*',\n    })\n  }\n/*\n  pnpm ls babel-preset-expo\n\u251c\u2500\u252c expo@25.0.0\n  \u2502 \u2514\u2500\u2500 babel-preset-expo@4.0.0\n  \u2514\u2500\u252c react-native-scripts@1.11.1\n    \u2514\u2500\u252c expo@25.0.0\n      \u2514\u2500\u2500 babel-preset-expo@4.0.0\n  */\n  const pjson = require('./package.json')\n  if (pkg.name === pjson.name) {\n    Object.assign(pkg.dependencies, {\n      'babel-preset-expo': '^4',\n      'babel-plugin-transform-react-jsx-source': '6',\n    })\n  }\n  return pkg\n}\n``. @deadcoder0904--shamefully-flattenwould help with the missing deps, yes, but this is easy and safer to fix in thepnpmfile`.\nBut the main challenge was patching metro. And patching it in multiple versions because Expo uses an older version of react-native.. Here is a more automated way to work with CRNA.\nI will be removing the babel-register dependency tomorrow.\npnpmfile.js\njs\nrequire('babel-register')\nmodule.exports = require('./pnpmfile/index')\npnpmfile/package.json\njs\n{\n  \"name\": \"pnpmfile\",\n  \"version\": \"0.0.1\",\n  \"devDependencies\": {\n    \"@pnpmfile/create-react-native-app\": \"^0.0.2-0\"\n  },\n  \"dependencies\": {\n    \"babel-preset-env\": \"^1.6.1\"\n  }\n}\npnpmfile/index.js\n```js\nexport default {\n  hooks: {\n    readPackage,\n  },\n}\nfunction readPackage(pkg) {\n  //require('pnpmfile-check').default(pkg)\n  console.log({pkg})\n  require('@pnpmfile/create-react-native-app').default(pkg)\n  if (pkg.name === 'photo-booth-ios-crna') {\n    console.log(pkg.dependencies)\n  }\n  return pkg\n}\n```\npackage.json\nhjson\n{ \n  dependencies: {\n    'pnpmfile': '*',\n    'babel-register: '^6'\n  }\n}\nYou must run the following to ensure that pnpmfile deps are installed first.\npnpm recursive install. @HarshulSharma000 \n\nIn short now all the upcoming release are supposed to work correctly.\n\nNope. I can only guarantee this works for react-native@<=0.54.2, because I manually patch a react-native dep.\nThere was a re-org done from 0.52 -> 0.54, but the functions I patched did not change.\nUntil a PR in react-native is merged each new version will need a new patch. I will try do this soon.\nFor CRNA + EXPO versioning see: https://github.com/react-community/create-react-native-app/blob/master/VERSIONS.md\n\n\nI hope this fixes the wordwrap not found and other babel missing package errors also.\n\nThis is fixed, and will not be problematic between versions.\n\nAlso, patches will take me <5mins for each new version because I have automated it. So unless something big changes in react-native then it should be easy to keep it up to date.\nI am maintaining the pnpmfile hook here: https://github.com/vjpr/pnpmfile/blob/master/packages/create-react-native-app/def.js. Will update it today. They recently released babel 7 support.\nOn Sun 18. Nov 2018 at 15:41, Benjamin Kniffler notifications@github.com\nwrote:\n\nIs the package still maintained @vjpr https://github.com/vjpr ? I've\nnot been able to get things working, getting expo/CRNA to work with pnpm\nist a pain (I know this is mostly due to path resolving of expo).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/940#issuecomment-439697877, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AARLRXfddKIWqeTkRynUhYGZz_bepi9nks5uwXGMgaJpZM4Qh6sw\n.\n. Part 1 - Getting expo-cli working with pnpm: https://github.com/expo/expo-cli/issues/183\n\nWill track progress here: https://github.com/pnpm/pnpm/issues/1501. So some people are having problems with Lerna:\nWhy we dropped Lerna from PouchDB\nI have felt similar issues with the installation being much slower and flakier with multiple install processes running.\nI feel like running pnpm across multiple packages in the same process would be a big speed up and great selling point for pnpm in this new monorepo world.. @etamponi Great that others are interested in this feature!\nI feel like this will be a huge sell to all monorepo users. I'm very excited about it.\nAlso, another use case: sometimes projects have a big examples dir like next.js/examples, which is like a monorepo, but not managed.\n\nLocking is only needed because pnpm doesn't know which packages are already being downloaded (which is the case when several separate processes run pnpm install).\n\nCouldn't we just store a lock file next to the partially downloaded file along with the process id that started the download. If a second installer process sees that the download has not finished, then check whether the originator process exists, if not, then prune it and retry the download.\nCLI\nThoughts on:\npnpm i --root {~/dev/foo, ~/dev/bar} baz qux\n~It might actually would make sense to adopt yarn's approach and use yarn add foo and yarn install not allow package args because with multiple roots defined, it becomes ambiguous.~\nAlternatively, pnpm i -root {foo, bar} baz qux could have similar behavior as lerna add baz qux --scope={foo, bar}.\nTerminology\nroot seems good, npm uses it:\n\nLocal install (default): puts stuff in ./node_modules of the current package root.\nhttps://docs.npmjs.com/files/folders#tldr. @etamponi What does your lock function look like?. > Each project is owned by a different Glitch user\n\nI have a similar use case. We have a staging server running multiple branches of the app. Each user should be able to rsync code, pnpm install, and run. So running independent commands is important to me.\n\nAlso, I had an idea that might be similar to what you need: #832\n\nThis seems like the most performant solution - so I like it. Also, it would easily drop-in to existing workflows, and with Lerna.\nHowever the lifecycle and error handling must be perfect, otherwise it will be super painful.. Feels like this would be better as a pnpmfile.js plugin.\nIt requires the package author not doing unexpected things. Like fs.readFileSync('LICENSE'). If its one deep transitive dep, it has the potential to break everything.\nAnd if it breaks something - how can I opt-out for a single module? Feels like I would end up wanting some kind of glob or transitive package matcher similar to resolutions to adjust the ignores. Could I add this config, then run pnpm i and the problem would be fixed?. Just ran into this again.\n```\npnpx protobufjs\nnpx: command not found: protobufjs\nnpx protobufjs\nusage: pbjs [options] file1.proto file2.json ...  (or pipe)  other | pbjs [options] -\n```. > With the pnpmfile.js you can create a hook and publish it as a package\nDefinitely good to have, but I agree that a config option would be easier. Static pjson config is easier to modify with scripts.\nUse case: Say you have multiple projects (Lerna monorepo for example) that each use a dep that has a missing dep. The easiest thing would be to write a script to go through and add to resolutions key in pjson of each package. Now, the current pnpmfile.js approach of creating and publishing a package provides flexibility, but there is so much more friction involved in publishing a package, than changing a config setting. Also, its not easy to add this config setting to multiple packages with a script.\nI'm all for config.\nWe should support Yarn's resolutions: \n\nhttps://github.com/yarnpkg/rfcs/blob/master/implemented/0000-selective-versions-resolutions.md#resolutions\nhttps://yarnpkg.com/en/docs/package-json#toc-resolutions\n\nI'm not sure if it handles \"missing\" deps, but if not, we could also add additionalResolutions.. > We can add a plugin that will convert yarn's resolutions to pnpm's\nreadPackage() hook. The plugin would have to be required in the\npnpmfile.js.\n@zkochan I like it.. I tend to agree with @pgonzal regarding config over plugins. The \"bad\" package issue is something I run into daily, and it will be like this for the foreseeable future I expect - which is why we should support resolutions as a first-class config option.\nI've been trying to think of what plugins I would use in the pnpmfile.js, but I can't really think of any. I would never use anything that would make my codebase incompatible with yarn/npm, so it would only be to fix \"bad\" packages. Can you think of others?\nFor anything else I would use a separate tool, say like monkey-patching a module to fix its webpack resolving code (https://github.com/ds300/patch-package).. @zkochan Are there examples of these anywhere in the docs/codebase? Would be cool to have some \"pnpmfile.js recipes\" if not.. @andreineculau\n\nAnd I do not follow what does publishing packages have to do with it.\n\nI was commenting on the idea of using npm published packages for commonly broken deps.\nE.g. Having a module called pnpm-fix-foo which would fix a missing dep in package foo, which would be used from pnpmfile.js using require('pnpm-fix-foo').\nThis sounds nice, but I'd prefer adding to package.json#resolutions manually. This package would go out of date, its hard to see what it does, etc, etc.. -1 for global pnpmfile.js. What if it a fix works for one project and not in another project. There is so much craziness involved in resolving that anything is possible with breakages. And it is easy to forget about a global pnpmfile.js. Anything I add to it, I would have to check everytime something goes wrong with resolving.\nIMHO the obvious solution is a resolutions field in the package.json for the common-case of hoisted deps that are missing from package.json.\nWhy can't we just have both working side-by-side? So anything added to resolutions would be as if you added a hook.. I think the way forward with this unwieldy thread is the need for concrete use cases and code examples.\nExample: Dep has missing dep\nI open missing dep issues on a weekly basis with 3rd party repos. E.g. The latest was https://github.com/graphile/graphile-build/issues/119. Usually they are fixed quickly (within 7 days if the repo is active).\nNow when this happens, what can I do to fix it?\n\nFor me the easiest fix is to simply add this to my package.json:\n\n'resolutions': {\n  'graphile-build-pg/postgres-interval': 'latest'\n}\nThis was install the missing dep postgres-interval.\n\nIf its a tool that I depend on for a bunch of packages in a monorepo:\n\nlerna exec -- json --in-place -f package.json -e \"'this.resolutions['graphile-build-pg/postgres-interval'] = 'latest'\"\n\nWhen it is fixed, I simply remove the line, and test.\n\n\nThe alternative with the pnpmfile.js means:\n\n\nCreating a new file, looking up the API (I cannot remember it off the top of my head).\n\n\nIf there are multiple packages, I must check if there is already a pnpmfile.js. If it exists, I must use a codemod which is way too much effort for something like this. Or I must update manually.\n\n\nRemoving is also difficult. I must check that there is nothing else inside this pnpmfile.js before removing it. Pretty much means that I wiill be left with pnpmfile.js files in every package.. @hulkish Here is my idea for a single list of known packages: https://github.com/pnpm/pnpm/issues/1079. @pgonzal I did a long investigation of this same issue. Was happening sporadically on the same 20MB package. I thought it was related to a proxy npm uses but they check it and apparently it wasn't. See https://github.com/npm/registry/issues/202\n\n\n\n8 different experts from various teams (including Azure and Visual Studio Team Services) all worked together on this investigation.\nhttps://github.com/request/request/issues/2807\n\nNice work and glad its getting the attention it needs! . How do you deny from the readPackage hook? process.exit()? Would this cleanup properly - or would we be left with the lock files hanging around.. PS. If we must include the global pnpmfile.js, please make it opt-in through .npmrc.. Running pnpm server while an existing server is running shows this:\n```\npnpm server\n\u2009WARN\u2009 The store server is an experimental feature. Breaking changes may happen in non-major versions.\nevents.js:183\n      throw er; // Unhandled 'error' event\n      ^\nError: listen EADDRINUSE /Users/Vaughan/.pnpm-store/2/socket\n    at Object._errnoException (util.js:1024:11)\n    at _exceptionWithHostPort (util.js:1046:20)\n    at Server.setupListenHandle [as _listen2] (net.js:1334:19)\n    at listenInCluster (net.js:1392:12)\n    at Server.listen (net.js:1487:5)\n    at Object.default_1 [as createServer] (/Users/Vaughan/nvm/versions/node/v8.9.0/pnpm-global/1/node_modules/.registry.npmjs.org/@pnpm/server/0.6.2/@pnpm!logger@1.0.0/node_modules/@pnpm/server/lib/createServer.js:109:27)\n    at Object. (/Users/Vaughan/nvm/versions/node/v8.9.0/pnpm-global/1/node_modules/.registry.npmjs.org/pnpm/1.29.1/node_modules/pnpm/lib/cmd/server.js:42:29)\n    at Generator.next ()\n    at fulfilled (/Users/Vaughan/nvm/versions/node/v8.9.0/pnpm-global/1/node_modules/.registry.npmjs.org/pnpm/1.29.1/node_modules/pnpm/lib/cmd/server.js:4:58)\n    at \n```\nA more helpful error would be better.. Also, is there anyway to see that the server is being used? Some kind of log messages?\nMy expectation would be that running pnpm server status would bring stdout to foreground, and it would show me a message when the server is running an install.. https://github.com/gatsbyjs/gatsby/blob/v1.6.3/packages/gatsby/src/utils/webpack.config.js#L316-L333\n`js\n  function resolve() {\n    const { program } = store.getState()\n    return {\n      // Use the program's extension list (generated via the\n      // 'resolvableExtensions' API hook).\n      extensions: [, ...program.extensions],\n      // Default to using the site's node_modules directory to look for\n      // modules. But also make it possible to install modules within the src\n      // directory if you need to install a specific version of a module for a\n      // part of your site.\n      modulesDirectories: [\n        node_modules,\n        directoryPath(node_modules),\n        directoryPath(node_modules, gatsby/node_modules),\n      ],\n    }\n  }\n```\nWierd resolver. Fails to find lodash in node_modules/gatsby/node_modules/lodash from .cache.\n```\nModule not found: Error: Cannot resolve module 'lodash' in /Users/Vaughan/dev-live/gatsby-site-1/.cache\nresolve module lodash in /Users/Vaughan/dev-live/gatsby-site-1/.cache\n// Searches in:\n[/Users/Vaughan/dev-live/gatsby-site-1/node_modules/lodash]\n[/Users/Vaughan/dev-live/gatsby-site-1/node_modules/gatsby/node_modules/lodash]\n```\n@KyleAMathews Could you shed some light on how this webpack resolver works? Does it rely on a flattened node_modules?\nResolving modules from .cache looks very non-standard...\n. The only way to workaround this seems to be to use: pnpm i --shamefully-flatten.\n\nMy pnpmfile resolutions are:\n```\n  // https://github.com/gatsbyjs/gatsby/issues/4656\n  'gatsby': {\n    dependencies: {\n      'request': '^2',\n      'address': '^1',\n      'lodash': '^4',\n    }\n  },\n'gatsby-cli': {\n    dependencies: {\n      'regenerator-runtime': \"^0.11.1\",\n    }\n  },\n// https://github.com/geowarin/friendly-errors-webpack-plugin/issues/64\n  'friendly-errors-webpack-plugin': {\n    peerDependencies: {\n      webpack: '*'\n    }\n  },\n```\nThere were also some silent errors in gatsby which needed these top-level deps:\n\nbabel-core\nbabel-loader\nreact\nreact-dom\n\nIn pnpmfile should check for root pkg, and if gatsby is in deps there, add these automatically.. I'm going to take a crack at getting pnpm working with gatsby v2.\nI think the fix is a custom webpack externals config that resolves all node requires to project root relative paths.\nI faced a similar problem with next.js which uses webpack to compile server side code.. Got it working.\nAll you need is the resolve.modules webpack config at the bottom.\n\nGatsby copies all files inside the cache-dir package to .cache.\nIt relies on yarn/npm hoisting all packages to top-level node_modules.\nWe use a webpack resolver plugin to resolve commonjs requires to their correct location.\ngatsby-node.js\n```js\nrequire('@babel/register')({\n  presets: ['@babel/preset-env'],\n  babelrc: false,\n  configFile: false,\n  ignore: [/node_modules/],\n})\nconst GatsbyPnpmWebpackResolverPlugin = require('./pnpm/gatsby-pnpm-webpack-resolver-plugin')\n  .default\nexports.onCreateWebpackConfig = ({\n  stage,\n  rules,\n  loaders,\n  plugins,\n  actions,\n}) => {\n  actions.setWebpackConfig({\n    resolve: { \n    plugins: [new GatsbyPnpmWebpackResolverPlugin()] \n  },\n  })\n}\n```\n./pnpm/gatsby-pnpm-webpack-resolver-plugin\n```js\nconst resolveFrom = require('resolve-from')\nconst path = require('path')\nexport default class GatsbyPnpmWebpackResolverPlugin {\n  constructor(source, options, target) {}\napply(resolver) {\n    resolver\n      .getHook('module')\n      .tapAsync('GatsbyPnpmWebpackResolverPlugin', function(\n        request,\n        resolveContext,\n        callback\n      ) {\n        // E.g. import 'react' => 'react'.\n        // The word inner is used because webpack wraps a request.\n        const innerRequest = request.request || request.path\n        if (!innerRequest) return callback()\n        const cacheDirPkgPath = path.resolve('gatsby/cache-dir')\n        const resolvedPath = resolveFrom.silent(cacheDirPkgPath, innerRequest)\n        if (resolvedPath) request.path = resolvedPath\n        return callback()\n      })\n  }\n}\n```\n\nBut now that I think about it, we could also just use a resolve.modules = [require.resolve('gatsby')].\nThis is not so simple though because pnpm doesn't allow us to easily locate gatsby's node_modules folder.\nThis should do the trick:\n```js\nlet gatsbyNodeModules = require('fs').realpathSync('node_modules/gatsby')\ngatsbyNodeModules = require('path').resolve(gatsbyNodeModules, '..')\nexports.onCreateWebpackConfig = ({ stage, actions }) => {\nactions.setWebpackConfig({\n    resolve: {\n      modules: [gatsbyNodeModules, 'node_modules'],\n    },\n  })\n}\n```. ## Workaround\n```js\nlet gatsbyNodeModules = require('fs').realpathSync('node_modules/gatsby')\ngatsbyNodeModules = require('path').resolve(gatsbyNodeModules, '..')\nexports.onCreateWebpackConfig = ({ stage, actions }) => {\nactions.setWebpackConfig({\n    resolve: {\n      modules: [gatsbyNodeModules, 'node_modules'],\n    },\n  })\n}\n``. Use the pnpmfile to fill in the missing deps.. https://pnpm.js.org/docs/en/hooks.html. Could it also happen in therenameOverwrite`?\nhttps://github.com/pnpm/package-requester/blob/master/src/packageRequester.ts#L449\nEDIT: Ah no, it can't, because its reading package.json.... doFetchToStore() is an async function and is not called with await...although maybe this is by design.. I think I remember seeing a copy command fail once with the same error.. @zkochan Is there a way to ignore packages from being linked. \nI had some 3rd party packages I extracted and it tired to run the post-install scripts which are broken.. What about using a config setting with a glob, just like lerna.json#packages?. What about in the pnpmfile.js?. > However, when doing installation in one of the packages of the monorepo, dependencies will be installed from the registry, not linked from the monorepo.\nTo clarify, you mean a sub-package will have its own node_modules/.registry.npmjs.org, instead of re-using the project's root?. > The expected result would be to link bar from packages/bar to packages/foo/node_modules/bar\nNot so sure I would expect this, without explicitly using a flag such as --link. This is what the lerna bootstrap command takes care of when run at the project root. \nyarn I think might do this automatically if workspaces config is present.. At present with lerna, I have to run lerna add bar --scope=foo. This is not such an issue.\nIt should be explicit. And a pnpm install doesn't override existing links already.. > Good point. Somehow I did not think about it in the past. Maybe we'll have to change this.\nTricky to find a good command name. pnpm multi link-local is more accurate and unambiguous.. One caveat though is that when following symlinks, no packages should be linked back to the project containing the symlink, only forwards.\nok\n- project-a\n  - foo -> framework/foo\nnot ok\n- framework/foo\n  - bar -> project-a/bar\n\nAlthough perhaps this is going to come back to the same resolving problems with pnpm linking...\n\nI guess an alternative might be to include the framework repo directly inside both project-a and project-b and use git subtree or git worktree with some scripts.\nI am intending to keep a separate branch in the framework repo for each project to allow both to quickly make changes and deploy (merge later) without worrying about immediately breaking the other project. But there should also be the possibility of updating the framework, and testing out the change instantly in both projects - hence the need for symlinking.. @HarshulSharma000 react-native doesn't support symlinks. --shamefully-flatten still uses symlinks so it doesn't solve the problem.\nIts a long outstanding request that react-native support symlinks, but it doesn't look like they will for a while.\nThis is why I suggested having a --no-symlink pnpm option on Gitter.\nYou can get symlinks to work for npm linking, but the way pnpm uses them seems not possible or very complicated.. @etamponi See https://github.com/facebook/react-native/issues/18156\nThere are some links to issues in react-native there. . @etamponi Did you make any progress on this. I was thinking of taking another stab at it soon.. I traced the point at which it fails to locate modules to metro-resolver > resolveSourceFileForExt\nhttps://github.com/facebook/metro/blob/cf5a431388bded8f47d560528175a43dd89fba13/packages/metro-resolver/src/resolve.js#L449\njs\nconst filePath = `${context.filePathPrefix}${extension}`;\nconsole.log({filePath, exists: require('fs').existsSync(filePath)})\nif (context.doesFileExist(filePath)) { // Returns false for files which exist on disk.\n  return filePath;\n}\ncontext.doesFileExist.toString()\njs\nfilePath => {\n  return this._hasteFS.exists(filePath);\n}\nSo this._hasteFS isn't aware of symlinked files.\nThe question is how difficult it is to make it aware. Feels like it can't be easy or someone would have already done it.\nI will try briefly...\n\nSo there are two crawler implementations in jest-haste-map. Watchman and Node. Watchman is used by default. And Watchman doesn't support symlinks.\n\nSo say I get an error fbjs/lib/invariant can't be found.\nWatchman finds it at /Users/Vaughan/dev-live/photo-booth-rncli-pnpm/node_modules/.registry.npmjs.org/fbjs/0.8.16/node_modules/fbjs/lib/invariant.js and adds it to the haste map.\nThe dir paths to be searched by metro-resolver are:\njs\n{ dirPaths:\n   [ '/Users/Vaughan/dev-live/photo-booth-rncli-pnpm/node_modules/.registry.npmjs.org/react-native/0.54.2/node_modules/react-native/Libraries/react-native/node_modules/fbjs/lib/invariant',\n     '/Users/Vaughan/dev-live/photo-booth-rncli-pnpm/node_modules/.registry.npmjs.org/react-native/0.54.2/node_modules/react-native/Libraries/node_modules/fbjs/lib/invariant',\n     '/Users/Vaughan/dev-live/photo-booth-rncli-pnpm/node_modules/.registry.npmjs.org/react-native/0.54.2/node_modules/react-native/node_modules/fbjs/lib/invariant',\n     '/Users/Vaughan/dev-live/photo-booth-rncli-pnpm/node_modules/.registry.npmjs.org/react-native/0.54.2/node_modules/node_modules/fbjs/lib/invariant',\n     // This exists on disk but is inside a symlink, so haste/watchman don't know about it.\n     '/Users/Vaughan/dev-live/photo-booth-rncli-pnpm/node_modules/.registry.npmjs.org/react-native/0.54.2/node_modules/fbjs/lib/invariant',\n     '/Users/Vaughan/dev-live/photo-booth-rncli-pnpm/node_modules/.registry.npmjs.org/react-native/node_modules/fbjs/lib/invariant',\n     '/Users/Vaughan/dev-live/photo-booth-rncli-pnpm/node_modules/.registry.npmjs.org/node_modules/fbjs/lib/invariant',\n     '/Users/Vaughan/dev-live/photo-booth-rncli-pnpm/node_modules/node_modules/fbjs/lib/invariant',\n     // This also exists on disk but is also a symlink.\n     '/Users/Vaughan/dev-live/photo-booth-rncli-pnpm/node_modules/fbjs/lib/invariant',\n     '/Users/Vaughan/dev-live/node_modules/fbjs/lib/invariant',\n     '/Users/Vaughan/node_modules/fbjs/lib/invariant',\n     '/Users/node_modules/fbjs/lib/invariant' ] }\nTrying to think if there is some kind of clever workaround to get this to work...\n\nSuccess!\nAll it requires is patching two functions in metro-resolver/src/resolve.js.\n``js\nfunction resolveSourceFileForExt(\ncontext,\nextension)\n{\n  const filePath =${context.filePathPrefix}${extension}`;\n// patch start\n  const fs = require('fs')\n  if (!context.doesFileExist(filePath) && fs.existsSync(filePath)) {\n    const isFile = fs.lstatSync(filePath).isFile()\n    if (isFile) {\n      const realPath = fs.realpathSync(filePath)\n      return realPath\n    }\n  }\n  // patch end\nif (context.doesFileExist(filePath)) {\n    return filePath;\n  }\n  context.candidateExts.push(extension);\n  return null;\n}\n```\n```js\nfunction resolveDir(\ncontext,\npotentialDirPath,\nplatform)\n{\n  const packageJsonPath = path.join(potentialDirPath, 'package.json');\n// patch start\n  const fs = require('fs')\n  if (!context.doesFileExist(filePath) && fs.existsSync(packageJsonPath)) {\n    const resolution = resolvePackage(context, packageJsonPath, platform);\n    return { resolution, type: 'resolved' };\n  }\n  // patch end\nif (context.doesFileExist(packageJsonPath)) {\n    const resolution = resolvePackage(context, packageJsonPath, platform);\n    return { resolution, type: 'resolved' };\n  }\n  return resolveFile(context, potentialDirPath, 'index', platform);\n}\n```\nWhen a file exists on disk and not in the haste map, resolve it to its realpath.\nThis also needs to be done for package.json files needed for resolving from the main key.\n. Bump. Seems like yarn supports it.\nhttps://github.com/yarnpkg/yarn/issues/5287\nRelated: https://github.com/npm/npm/issues/11213. I think this is a bad idea. A package manager requiring installing packages to run is not going to work.\nCopy and paste feels like the only approach that could work.\n\nAnother solution would be to use webpack to compile any helpers to a minified file that you can copy-paste in your app.\nBut I think I would prefer to just keep the pnpmfile simple.\nHaving access to the semver library would be helpful though. But requiring it could slow down pnpm installs.... @zkochan Do you think it would be possible to have a hook to install dependencies before pnpmfile.js is run? Or would you prefer to keep pnpmfile.js dependency-free?\nWithout this, it doesn't seem like its easy to extend pnpmfile.js. E.g. Say you want to use the semver package, you would have to include to source code in your project via copy-paste.\n\nOr, we could use preinstall to install into a subdirectory called e.g. pnpmfile? But this might slow things down...\n\nOr we could run twice pnpm install --ignore-pnpmfile, then pnpm install.. Unfortunately a preinstall script adds ~1s to pnpm install.\nWithout preinstall:\npnpm install  1.99s user 0.36s system 108% cpu 2.172 total\nWith \"preinstall\": \"pnpm install --prefix=pnpmfile --no-verify-store-integrity\":\npnpm install  2.89s user 0.54s system 102% cpu 3.344 total\n\nChecking for existence of pnpmfile/node_modules speeds things up but is not as safe.\n```\n\"preinstall\": \"ls pnpmfile/node_modules || pnpm install --prefix=pnpmfile --no-verify-store-integrity\"\npnpm i  2.02s user 0.38s system 108% cpu 2.220 total\n```\npnpm i  1.93s user 0.34s system 106% cpu 2.127 total\n\nStill very clunky. But the best I can think of at the moment for reusing pnpmfile hooks.\nSay I have 5 apps that use CRNA, manually updating the pnpmfile in all 5 projects would be annoying. But also setting up preinstall scripts for all projects, plus seeing the preinstall message every time.. @zkochan Awesome. Didn't think of that!\nBut why do recursive installs need to rely on ordering? Shouldn't they all be done concurrently?. > I believe lerna installs this way as well\nHopefully. I will test this tomorrow. If so, its the perfect solution.. I think it might even be a good idea to have this functionality built into pnpm, primarily because you don't want to have to rely on a preinstall script to install dependencies for a dependency manager to work.\nWe could have a central github repo with a json file that pnpm could optionally query.\nThen when you install it could check if there are custom resolutions available for packages, and ask you if you want to merge them in to your existing resolutions.\nMaybe we could have a separate file called pnpm-resolutions.json to save the resolutions. Related https://github.com/pnpm/pnpm/issues/1082.\nCould also support a notes field that provides additional info about how to get it working with pnpm that could show as an info log, such as, \"you must use --shamelessly-flatten\".\nIt would be good too, to make a list of the major and most popular packages/frameworks people use and make sure we support them. E.g. create-react-app, create-react-native-app, gatsby, angular, react, etc.. Maybe a funny name and shame website of broken packages to raise awareness of this issue.. > let's make it a non-executable file\nYou mean like .json file?\nIf so, I would prefer hjson to support comments. YAML is an option too I guess.\n\nand so the hooks in pnpmfile.js are ignored\n\nI don't understand. This is to get around renovate not running pnpmfile?. I prefer having json option. Its easier to reuse if you want to add it to pnpmfile.js at some point, say if you want to publish as a package. Otherwise you need to pull in yaml parser lib.. BTW:\nThe version should be a semver version range: react-native@0.52.0 or react-native@^0.52.0\nAnd we need to support project root. E.g. <root>.. > Possible name: pnpm-subdependencies.yaml\nThis name doesn't fit because you can override root dependencies.\nYarn uses a resolutions field in package.json.\nWe should call it pnpm-resolutions.yaml|json|js.\n\nAlso, I want to be able to use packages in the config, so I think having a js option would be good, or some kind of mechanism to declaratively specify packages to be used.. Yarn supports Selective dependency resolutions which allow:\n\"resolutions\": {\n    \"c/**/left-pad\": \"1.1.2\"\n  }\nDo we need to handle this?. Just want to add an issue with .js pnpmfile. When using Docker, if you want to cache the node_modules layer which is a common practice, you copy package.json and shrinkwrap.yaml and then run pnpm i. But when using pnpmfile.js, you need to make sure you copy that too, and any files it depends on. If pnpmfiles are complex, this approach becomes complex.. Related: https://github.com/pnpm/pnpm/issues/855. @zkochan What about a hook in pnpmfile?. @zkochan Okay I will try it.\nBut for a monorepo I have 100s of packages, and I would rather not add a \"preinstall\" to all of them. But I guess its the same with pnpmfiles. Unless a pnpmfile could be shared when doing a recursive install.\nI guess I could make them all link to an install-scripts package that every package would add as a script.. > but would you always need those folders? You only need them when you debug something.\nI'd like to have them always during development, just not in production I guess. So this would run every time.\nFeels like it would be a lot less ceremony if it were a pnpm flag.\nAlso without it, it makes pnpm confusing to newcomers as it looks like their dependencies weren't installed.. Maybe it could be\n- node_modules/foo/node_modules/\n  - .linked -> points to parent in .registry\n  - .bin\nCan node_modules/foo/node_modules ever contain dependencies? Like leaf deps? Or is that in registry?. @zkochan I think we should provide a flag to add these folders. Otherwise, if it were a postinstall script, because of monorepos we would need a pnpm recursive exec like lerna has. And it would probably be slower.. > @vjpr why does the afterReadPackages have a pkg argument?\nMistake.\n\nI think I'd call the hook: postResolution.\n\nSounds good.. The second time I ran it, it happened on a different package.\n\nlerna bootstrap --concurrency=1 seems to work.. Didn\u2019t use it.\nMaybe we should add some code to the catch to print more diagnostic info. Like the permission bits and whether the file exists. \nThis would help track down these sporadic bugs. . Yep.. Maybe require appending -all or -recursively or -each to any cli options that should be applied when using pnpm recursive X?\nE.g.\npnpm recursive install --shamefully-flatten-recursively\nOverrides local package configs.\npnpm recursive install --shamefully-flatten\nShows warning that option will not take effect unless appending -recursively.\n\nOr require an additional option such as --apply-options-recursively=shamefully-flatten,no-shrinkwrap.. Oops same as #1093. Is there a way to disable the update checker?\nEDIT: Seems --no-update-notifier works.. > So you'd want the installation to be finished, the node_modules created but the process to return a non-zero exit code? And an error to be printed?\nYep.\n\nIt would be easier to implement just an exception throw.\n\nYou mean not waiting until the end? Or throwing an exception at the end?\n\nAlso, what about optional dependencies? I guess in case of optional dependencies, an unsatisfied peer dep should mean that the optional dependency should be skipped, right?\n\nSorry, I don't follow what you mean.. > Also, if they are truly optional then why should there be a \"warning\" when they don't get installed -- the system is behaving as intended.\nWhat if installation of an OS specific package fails that should be installed? User needs to know. \nOptional can mean several things:\n\nPackage should be installed only for a specific environment.\nUser can opt-in for some functionality.\n\nI think it's best that these warning can be silenced explicitly per package.. > For us that wouldn't be very helpful because our full build is an hour long, and nobody wants to wait for that when they know the result will be unusable.\nWhat if your the error is at the end of your build...and then there is another error right after it. Then you have to wait ~2 hrs to see all the errors.\nWe should have a flag to --fail-on-first-error. This would not be default behavior IMHO.. > optional dependencies...don't make sense when developers are using different operating systems...This whole model seems incompatible with the premise of a shrinkwrap file.\nIdeally the shrinkwrap should not change after it has been installed on multiple platforms. That is, if an optional dep installs on Linux, it should not be removed when pnpm i is ran on macOS.\nMaybe this is already how it is?. The real issue was a sub-dependency that somehow didn't install its dependencies properly (I am tracking down this as a separate issue).\nI came across this while searching for the root cause.. So when running pnpm i in a sub-package, it will search up to find a pnpm-workspace.yaml file and check for a config that says to run the pnpmfile.js#readPackage hook. If its true, it runs the file. (Maybe the filename can be configurable)\nThen it will also run it own pnpmfile.js#readPackage.\n. Also, if we use this api:\njs\nmodules.exports = (projectDir) => {\n  if (projectDir === 'packages/foo') {\n    return {\n      // some hooks\n    }\n  }\n  return {\n    // some default hooks for all the other projects\n  }\n}\nI'd like to be able to reference the root project (i.e. the folder containing pnpm-workspace.yaml.) without specifying its name. For an app, generally the root package name is insignificant because it will never be published to npm.. When using shared-workspace-shrinkwrap, only one root shrinkwrap is created, and pnpmfile.js is used per shrinkwrap - therefore only once.\nRun pnpm up --depth=100 in the root to re-run the readPackage hooks.. This should be able to be silenced completely. The user should verify that a failing optional dependency is acceptable but specifying the dep in a config file.. pnpm link @vjpr/next does add it to node_modules, so perhaps I could point next there manually like so:\nln -sf @vjpr/next node_modules/next\nThen when I want to revert back I think I can run pnpm dislink next.. Couldn't find it from searching the issues. Would have to test it out.. In terms of a solution, pnpm link next should show a warning that it is being aliased, and it should try to link the alias. There should be a flag that allows you to link to the original too in order to allow switching between linking your fork and the official repo.. pnpm i | pnpm update next\n\n. Do you mean 2.0.1?. > changing the way packages are installed globally. Their node_modules should be separated. Like when they are installed with npm\nCan you explain this one again?. I ran into this again. I was returning pkg, but I was using another package to modify the pkg which broke, and would return null unexpectedly, like so:\nfunction readPackage(pkg) {\n  const rootPkgName = require('./package.json').name\n  pnpmfileReadPackageJson(def)(pkg, rootPkgName) // <- there was a bug in here\n  return pkg\n}. This happened after upgrading. I deleted the shrinkwrap.yaml and it works now.. Think I found it. I am using sudo pnpm, so which pnpm was showing the wrong version.\n```\nsudo which pnpm\n/usr/local/bin/pnpm\nsudo rm /usr/local/bin/pnpm\nsudo which pnpm\n/usr/bin/pnpm\nsudo rm /usr/bin/pnpm\n```\nBut then, sudo pnpm doesn't work.\nWhat is the correct way of installing pnpm so that the same version is shared with sudo.\n\nsudo npm i -g pnpm works.. ~A workaround is to relatively symlink packages/public instead of using an absolute symlink.~\n- /app2\n  - packages\n    - public (symlink to `../../../app1/packages/public` instead of `/app1/packages/public`)\nEDIT: Nope, this doesn't help.. The fix is to use realpaths for symlinks.\nhttps://github.com/pnpm/pnpm/blob/b546581dd385d8032bc9680c0714d89a51e28fb0/packages/supi/src/api/link.ts#L154-L158\nchanges to:\n```js\nasync function linkToModules (pkgName: string, linkFrom: string, modules: string) {\nmodules = require('fs').realpathSync(modules)\n  linkFrom = require('fs').realpathSync(linkFrom)\nconst dest = path.join(modules, pkgName)\n  linkLogger.info(${dest} -> ${linkFrom})\n  await symlinkDir(linkFrom, dest)\n}\n```\nhttps://github.com/pnpm/pnpm/blob/b546581dd385d8032bc9680c0714d89a51e28fb0/packages/headless/src/index.ts#L520-L523\nchanges to:\njs\nfunction symlinkDependencyTo(alias, peripheralLocation, dest) {\n    dest = path.join(dest, alias);\n    peripheralLocation = require('fs').realpathSync(peripheralLocation)\n    return symlinkDir(peripheralLocation, dest);\n}\n\nThere also seems to be a bug that during pnpm recursive link, symlinkDir is called twice for the same package from two different locations/stages(?).\n\nThis symlinkDir usage didn't effect my use case, but maybe it should be changed to...\nhttps://github.com/pnpm/pnpm/blob/b546581dd385d8032bc9680c0714d89a51e28fb0/packages/supi/src/link/index.ts#L452-L455. @zkochan Can we get this implemented? Do you need me to put together a PR?. @zkochan This seems to have broken after shared-workspace-packages.\nI see that supi/src/link.ts is gone, and there is linkToModules.ts and link/index.ts. \nHas anything changed that may affect the workspace linking?. The issue was caused by having an old node_modules dir. node_modules/.bin/pnpm was being used by npm run.\nrm -rf node_modules fixed it.. @zkochan Just encountered this bug again (2.17.5):\nERROR\u2009 Cannot set property 'requiresBuild' of undefined\nat <anonymous>  /Users/Vaughan/nvm/versions/node/v8.9.0/pnpm-global/1/node_modules/.registry.npmjs.org/pnpm/2.17.5/node_modules/pnpm/lib/node_modules/supi/lib/install/link.js:241\nat next\nat fulfilled    /Users/Vaughan/nvm/versions/node/v8.9.0/pnpm-global/1/node_modules/.registry.npmjs.org/pnpm/2.17.5/node_modules/pnpm/lib/node_modules/supi/lib/install/link.js:4\nSource:\nnewShrinkwrap.packages![pendingRequiresBuild.relativeDepPath].requiresBuild = true\n. What happens if you:\n\nrun pnpm recursive link with a pnpm-workspace.yaml file excluding a certain folder.\nrun pnpm recursive link --scope excluded-packaged\nthen run pnpm recursive link again.\n\nMaybe we need a few more tests.. Was caused by a bug in pnpmfile-read-package-json in the logic that detected the project root. This is why it worked for pnpm install and not pnpm recursive link/install.. Maybe we could use pnpx multi rimraf for that?\nI'd prefer to keep them separate. pnpx relies on connectivity to registry, whereas exec does not. Could be problematic in some offline deploys.. @zkochan Can we add concurrency setting to this command? I need to run script in series.. I just realized I really need this. I was using lerna add foo as a workaround, but it was not updating the shrinkwrap.yaml with link:../foo fields, which I am relying on.\nCan we get it merged soon?. Next week is fine. I can always pull into my private fork.\nOn Fri 6. Jul 2018 at 19:42, Zoltan Kochan notifications@github.com wrote:\n\nWhen do you need it? It will be merged till Monday for sure but I wanted to\nimprove reporting for it. If you want I can publish a prerelease version\nsooner\nOn Fri, Jul 6, 2018, 19:53 Vaughan Rouesnel notifications@github.com\nwrote:\n\nI just realized I really need this. I was using lerna add foo as a\nworkaround, but it was not updating the shrinkwrap.yaml which I am\nrelying on.\nCan we get it merged soon?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/1250#issuecomment-403089532, or mute\nthe thread\n<\nhttps://github.com/notifications/unsubscribe-auth/AB1pm2sqqnyL24kEo1aVHS-3QSYdlgOPks5uD5YLgaJpZM4U-cQR\n.\n\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/1250#issuecomment-403101866, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AARLRfrdB3lZ-ZUiBwv7clZEipTtELcqks5uD6GJgaJpZM4U-cQR\n.\n. This should be a separate package that should be decoupled entirely from pnpm. Something like @pnpm/version.\n\nI'm not sure its even a good idea to include it in pnpm cli because there are already many tools that handle this such as np, that provide a lot more.\n\nThat being said, I wrote some code a while back for an npm publish tool, with a prompt for the new version that provides a more helpful prompt that informing you about how semver works and helping you to choose the right version. I'd be happy to make this into a package that you can use for the prompt if you like, as I haven't seen anyone doing something like it.\n. Here are some relevant snippets:\n```js\n  const isMajorZeroMinorZero = semver.satisfies(localNPMVersion, '0.0.x')\n  const isMajorZeroMinorNotZero = semver.satisfies(localNPMVersion, '>=0.1.0 <1.0.0')\n//const incompatibleStr = 'incompatible API changes'\n  //const backwardsCompatibleStr = 'add functionality in a backwards-compatible manner'\n  const bugFixesStr = 'backwards-compatible bug-fixes'\n  const additiveStr = 'backwards-compatible additive changes'\n  const breakingStr = 'breaking changes'\n  const bugFixesOrAdditiveStr = 'backwards-compatible bug-fixes or additive changes'\n  const stableStr = 'start using proper (non magic-zero) semver versioning'\nlet patchHelp\n  let minorHelp\n  let majorHelp\nconst prereleaseHelp = 'increments the latest prerelease version or starts a new prepatch version'\nif (isMajorZeroMinorZero) {\n    patchHelp = 'early development (will be treated as exact version when using ^0.0.x)'\n    minorHelp = 'start allowing backwards-compatible changes (patch can be used for bug-fixes/additive features)'\n    majorHelp = stableStr\n  } else if (isMajorZeroMinorNotZero) {\n    patchHelp = bugFixesOrAdditiveStr\n    minorHelp = breakingStr\n    majorHelp = stableStr\n  } else {\n    patchHelp = bugFixesStr\n    minorHelp = additiveStr\n    majorHelp = breakingStr\n  }\n// \"release types\"\n  let choices = [\n    {type: 'patch', help: patchHelp},\n    {type: 'minor', help: minorHelp},\n    {type: 'major', help: majorHelp},\n    {type: 'prerelease', help: prereleaseHelp},\n    {type: 'prepatch'},\n    {type: 'preminor'},\n    {type: 'premajor'},\n  ]\n```\n``js\nasync function summarizeVersion({npm, moduleName, newVersion, distTag}) {\n  let str = ''\n  str += '\\n'\n  const b = c.bold\n  const currentVersion = await getDistTagVersion({npm, distTag})\n  if (currentVersion) {\n    str += c.green(dedent\n      You will be bumping ${b(moduleName)}@${b(distTag)} from ${b(currentVersion)} to ${b(newVersion)}.\n  )\n  } else {\n    str += c.green(dedent\n      You will be publishing ${b(moduleName)}@${b(distTag)} with first version ${b(newVersion)}.\n  `)\n  }\n  str += '\\n\\n'\n  str += 'Users will install this version using: ' + printNpmInstallInstructionForDistTag({moduleName, distTag})\n  str += '\\n'\n  str += '\\n'\nif (isPrerelease(newVersion)) {\nstr += 'For pre-release versions semver versions must match exactly.'\nstr += '\\n'\nstr += 'NOTE: Pre-release versions do not satisfy the \"*\" semver range.'\nstr += '\\n'\n\n} else if (currentVersion) {\nstr += 'The following semver ranges will use the new version when running `npm update`:'\n\nconst diff = semver.diff(currentVersion, newVersion)\nconst major = semver.major(newVersion)\nconst minor = semver.minor(newVersion)\nconst patch = semver.patch(newVersion)\n\nstr += '\\n'\nstr += '\\n'\n\nif (major > 0) {\n  // x.x.x\n  str += `^${major}.x.y\\n`\n  str += `~${major}.${minor}.x\\n`\n} else if (minor > 0) {\n  // 0.x.x\n  str += `^0.${minor}.x\\n`\n  str += `~0.${minor}.x\\n`\n} else {\n  // 0.0.x\n  str += '~0.0.x\\n'\n  //str += `^0.0.${patch} (NOTE: ^ ranges will not be updated when v0.0.x.)\\n`\n  str += `NOTE: ^ (hat) ranges will not be updated when version is 0.0.x, but ~ (tilde) ranges will.\\n`\n  str += `Yes, this seems wrong, but its just the way it is.\\n`\n}\n\n}\nconsole.log(str)\n}\n```. My specific use-case is having two folders containing the same packages. In my case one is symlinked to another app in dev.\nI want to be able to run pnpm m link against either of them. I would use one during development, and then switch to the other for testing before deploying.\nBut since they contain the same packages, I want to completely ignore the other. E.g. If something in private depends on public/foo, I want to use either public/foo or public-symlink/foo, but never both.\n```\n- app1\n  - packages\n    - private\n    - public (git subtree)\n      - foo\n      - bar\n    - public-symlink -> /app2/packages/public\n\napp2\npackages\nprivate\npublic (git subtree)\nfoo\nbar\n``. Just to clarify, I need to linkpackages/publicorpackages/public-symlinkinsideapp1`.\n\n\n\napp1 and app2 are completely separate already.. Also good idea to have a cli flag to override the config behavior.\npnpm install foo --link-workspace-packages=false\n\nSo this is already possible for all config options: --no-link-workspace-packages. > why not keeping it as is\nThe existing behavior is confusing and is different to learn and bolt.\nrun and exec should definitely not include-dependencies by default. And you may want a different value for --include-dependencies depending on which command you are running so .npmrc is not good.\nlink --scope is a special case and should default to --include-deps=true. npmrc maybe should have multi-link-scope-include-dependencies option (defaults to true).. > So every command will have its own defaults?\nI don't think so. I think link is a special case. When running link --scope=foo or link --prefix=packages/foo, it doesn't make sense not to include deps...because that is the whole point of link. They might as well run install if they don't want to local link anything.\n\nin my use case I need --include-dependencies with pnpm recursive run tsc.\n\nIt should be run with --include-dependencies, because I don't think its as common and the default shouldn't produce unexpected things.\nSay someone wants to delete node_modules for a package. pnpm multi exec --scope=foo -- rm -rf node_modules. This would unexpectedly wipe our more node_modules dirs than they were expecting. \nIt should be opt-in for run and exec, and default for link only because link doesn't make sense without it.\n\nLike this would mean...\n\nI would prefer --scope-with-deps. I have a few scripts that generate the --scope options and this would add lots of complexity.\nAnd what about glob support? This would interfere with that. I think it already takes a glob.. Make sure to checkout boltpkg/bolt for some command inspiration. From creators of lerna.\nI'd like to scope by package name glob and also file path glob.\n--scope-to is confusing. Someone might say that you \"scope a command TO a single package\". I think be verbose.. I think it would be fine to separate the flags --scope=foo --include-dependencies --include-dependents. Looks like I didn't have it linked up properly. Had to run pnpm multi link.. Would probably have to move to another option parsing library (instead of trying to get it landed in nopt). yargs is good.. Quick hack:\nmain.js\n```js\n  //////////////////////////////////////////////////////////////////////////////\n  // vjpr: Multiple scope workaround.\n  // See: https://github.com/pnpm/pnpm/issues/1272\n// TODO(vjpr): Only works with --scope=foo, prob not --scope foo.\n  function parseMultipleScopes() {\n    const scopes = process.argv.map(v => {\n      if (v.startsWith('--scope=')) {\n        return v.replace('--scope=', '')\n      }\n      return null\n    }).filter(Boolean)\n    return scopes\n  }\nopts.scope = parseMultipleScopes()\n////////////////////////////////////////////////////////////////////////////////\n```\npackages/pnpm/src/cmd/recursive/index.ts\n```js\nfunction filterGraph (\n  graph: PackageGraph,\n  scope: Array,\n): PackageGraph {\n  const root = R.keys(graph).filter((id) => {\n    if (!graph[id].manifest.name) return\n    return scope.some(s =>\n      minimatch(graph[id].manifest.name, s)\n    )\n  })\n  if (!root.length) return {}\nconst subgraphNodeIds = new Set()\nconst useSubgraph = false\n  if (useSubgraph) {\n    return R.pick(Array.from(subgraphNodeIds), graph)\n  } else {\n    return R.pick(Array.from(root), graph)\n  }\n}\n``. False alarm,pnpm i -S npm:@vjpr/next@^6.1.0-vjpr.1was actually installing@vjpr/nextseparately, no aliased.. So today, after deleting theshrinkwrap.yaml` it seems to be working, and consecutive installs are not generating diffs anymore.. Maybe it was something to do with the fact that:\nuglifyjs-webpack-plugin@1.1.6 > schema-utils > webpack > uglifyjs-webpack-plugin@0.4.6 > webpack.\n$ pnpm ls webpack --depth=100\nxxx@1.0.0 /xxx/\n\u251c\u2500\u252c next@/@vjpr/next/6.1.0-vjpr.1\n\u2502 \u251c\u2500\u252c babel-loader@/babel-loader/8.0.0-beta.2/a8087b32cff507dc17351df4b403e915\n\u2502 \u2502 \u2514\u2500\u252c webpack@/webpack/3.10.0/webpack@3.10.0\n\u2502 \u2502   \u2514\u2500\u252c uglifyjs-webpack-plugin@/uglifyjs-webpack-plugin/0.4.6/webpack@3.10.0\n\u2502 \u2502     \u2514\u2500\u2500 webpack@/webpack/3.10.0/webpack@3.10.0\n\u2502 \u251c\u2500\u252c uglifyjs-webpack-plugin@/uglifyjs-webpack-plugin/1.1.6/webpack@3.10.0\n\u2502 \u2502 \u251c\u2500\u252c schema-utils@/schema-utils/0.4.5/webpack@3.10.0\n\u2502 \u2502 \u2502 \u2514\u2500\u252c webpack@/webpack/3.10.0/webpack@3.10.0\n\u2502 \u2502 \u2502   \u2514\u2500\u252c uglifyjs-webpack-plugin@/uglifyjs-webpack-plugin/0.4.6/webpack@3.10.0\n\u2502 \u2502 \u2502     \u2514\u2500\u2500 webpack@/webpack/3.10.0/webpack@3.10.0\n\u2502 \u2502 \u2514\u2500\u252c webpack@/webpack/3.10.0/webpack@3.10.0\n\u2502 \u2502   \u2514\u2500\u252c uglifyjs-webpack-plugin@/uglifyjs-webpack-plugin/0.4.6/webpack@3.10.0\n\u2502 \u2502     \u2514\u2500\u2500 webpack@/webpack/3.10.0/webpack@3.10.0\n\u2502 \u251c\u2500\u252c webpack@/webpack/3.10.0/webpack@3.10.0\n\u2502 \u2502 \u2514\u2500\u252c uglifyjs-webpack-plugin@/uglifyjs-webpack-plugin/0.4.6/webpack@3.10.0\n\u2502 \u2502   \u2514\u2500\u2500 webpack@/webpack/3.10.0/webpack@3.10.0\n\u2502 \u2514\u2500\u252c webpack-dev-middleware@/webpack-dev-middleware/1.12.0/webpack@3.10.0\n\u2502   \u2514\u2500\u252c webpack@/webpack/3.10.0/webpack@3.10.0\n\u2502     \u2514\u2500\u252c uglifyjs-webpack-plugin@/uglifyjs-webpack-plugin/0.4.6/webpack@3.10.0\n\u2502       \u2514\u2500\u2500 webpack@/webpack/3.10.0/webpack@3.10.0\n\u2514\u2500\u2500 webpack@3.12.0. Issue came back again. After running pnpm i foo, then running pnpm i.. I'm seeing a lot of this recently: \n```\npnpm i -S stringify-object\nAlready up-to-date\ndependencies:\n- stringify-object ^3.2.2\n```\nDeps being removed on install...and they are not properly installed either. Their dependencies are missing.. I think the cause is something like:\n\ninstall\ndelete shrinkwrap (but leave node_modules intact)\ninstall again. Or maybe I should be setting graphql as a peerDep of my sub-package?. The warning messages should make a special mention if the peers are being resolved outside of the install root.\n\nWARN\u2009 apollo-server-koa: apollo-upload-server@5.0.0 requires a peer of graphql@^0.13.1 but version 0.12.3 was installed.\nFrom the message above: newbie user sees warning, checks package.json, and is confused that they can't see 0.12.3 there. Then they run pnpm i -S graphql@0.13, which will resolve the warning, but will break the app, because the monorepo relied upon graphql being a singleton installed once at the monorepo root.\nASIDE: Perhaps we need a way to specify packages that are monorepo singletons...https://github.com/pnpm/pnpm/issues/1299\nSolution\nWARN\u2009 apollo-server-koa: apollo-upload-server@5.0.0 requires a peer of graphql@^0.13.1 but version 0.12.3 is installed in ~/dev/my-project/package.json.\n\n\nNode will search for graphql in all the parent directory node_modules folders. \n\na. We should stop the search at monorepo root (dir containing pnpm-workspace.yaml).\nIf its resolved outside this dir, a bigger warning should show because this is bad. If a collaborator checks out the monorepo, the app is not guaranteed to work.\nb. Also pnpm linking is to be considered. A warning detecting that the package is being resolved outside of the tree that npm i was run in...because this would break singletons too. --error-on-bad-peer config would be useful for this...I think we already added it too.\n\nCases\nIts actually really complicated to get it right. There are many cases.\n```\nWARN\u2009 apollo-server-koa: apollo-upload-server@5.0.0 requires a peer of graphql@^0.13.1 but version 0.12.3 is installed in the monorepo root ~/dev/my-project.\nWARN\u2009 apollo-server-koa: apollo-upload-server@5.0.0 requires a peer of graphql@^0.13.1 but version 0.12.3 is installed outside of the monorepo root (~/dev/my-project) in ~/dev/package.json. \nTHIS IS BAD PRACTICE. If a user checks out your code, they will have to manually install the peer.\nWARN\u2009 apollo-server-koa (required by a package from a symlinked dir at ~/dev-libs/foo): apollo-upload-server@5.0.0 requires a peer of graphql@^0.13.1 but version 0.12.3 is installed in ~/dev-libs.\nTHIS IS NOT RELIABLE. Because your package is in a symlinked dir, it will resolve its peer dep differently to the rest of your package, which will mean it cannot function as a singleton across all your package's (or monorepo packages's) dependencies.\n``. I like--continue-on-error`.\n\nPS. gcc uses -Wfatal-errors to fail on first error, but this is ugly. They also have fmax-errors=n, to fail after X number of errors.. Oops. Naming the file pnpmfile/pnpmfile.js was the problem. It was trying to use it while installing itself!. Cypress does it like this: https://docs.cypress.io/guides/references/configuration.html#Plugins\ncypress run --config integrationFolder=tests,fixturesFolder=false. So pnpm-workspace.yaml would always be in the root. Alternatively we could use .npmrc#pnpm-workspace or package.json#pnpm-workspace.\nThis issue talks about the actual config info being defined elsewhere, or being able to be supplied via cli args.\n. > I think there should be only one way to define the root of the workspace.\nAgree with \"define the root\".\nBut the actual workspace config should be able to be overridden.. > Is your intention to add packages that are not matched by the globs of pnpm-workspace.yaml?\nHere is my current file:\nyaml\npackages:\n  - '.'\n  - 'packages/**'\n  - '!**/babel7-test/**'\n  # This was breaking. Want to leave in repo, but ignore for now.\n  #- '!**/react-leaflet-draw/**'\n  # We disable this because it can be slow and is not needed all the time unless modifying the framework.\n  - '!**/apps-templates/mobile-crna/**'\n  - '!**/apps-templates/docz/**'\n  - '!**/apps-templates/gatsby/**'\n  # Potentially slow apps.\n  #- '!**/pages/map-mapbox/**'\n  #- '!**/apps/playground/**'\n  # ---\nSee how I exclude some dirs using !**/...? My monorepo contains multiple apps. I don't need to install all of them all the time.\nBasically I want to unexclude some dirs sometimes. And I would also like to exclude/unexclude by package name too.\n. But what about the use case where I want to use everything from pnpm-shrinkwrap.yaml#packages but unignore one glob.. > Maybe we could create some groups?\nWouldn't work for my use case.\nThe gatsby package is an app template. I don't want this to install normally, but say I want to update the template, I would want to enable it as a one-off.\n\nrewriting the workspace file\n\nI want to do this at the cli though as opposed to on disk:\npnpm multi --workspace-config='{packages: [a,b,c]}'. > it would symlink the pnpm-workspace.yaml with the needed globs.\nToo hacky for my liking.\nEven something like this might work:\n--packages={glob1,glob2,glob3}\n\n\nLike this package for npmrc: npmjs.com/package/npmrc\n\nInteresting package. I will resort to this as a workaround for now.. Deleting rm shrinkrwap.yaml doesn't solve it. I had to rm -rf node_modules too. But then it doesn't work on another PC.... > If it has only 2 peer deps then why are there 4 entries in shinkwrap.yaml?\nIt was just a snippet from a larger shrinkwrap.\n. Just saw the same thing again: \n/type-analyzer/-/type-analyzer-0.1.4:\n    dev: false\n    resolution:\n      tarball: 'https://registry.npmjs.org/type-analyzer/-/type-analyzer-0.1.4.tgz'\nreact-onclickoutside: 6.7.1\n      react-palm: 0.8.1\n      react-redux: /react-redux/4.4.9/redux@3.7.2\n      react-tooltip: 3.6.1\n      react-vis: 1.10.4\n      redux: 3.7.2\n      redux-actions: 2.4.0\n      reselect: 3.0.1\n      styled-components: 2.4.1\n      supercluster: 3.0.3\n      type-analyzer: /type-analyzer/-/type-analyzer-0.1.4\n      uber-licence: 3.1.1. With type-analyzer, on this page: https://www.npmjs.com/package/type-analyzer I am seeing this error:\nUnexpected token u in JSON at position 0\nid: wubwub-8-west:e5081c44-1e5d-4b55-9cd2-e5827da00013\nEDIT: This looks like a general npmjs.org issue.\n\n```\n{\n  \"name\": \"type-analyzer\",\n  \"description\": \"Infer types from columns in JSON\",\n  \"version\": \"0.1.4\",\n  \"main\": \"index.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:uber-web/type-analyzer.git\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint src test\",\n    \"test\": \"tape test\"\n  },\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"eslint\": \"^4.4.1\",\n    \"eslint-config-uber-es5\": \"^2.0.3\",\n    \"tape\": \"^4.6.3\",\n    \"tape-run\": \"^2.1.4\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"eslint-config-uber-es5\"\n    ]\n  },\n  \"contributors\": [\n    {\n      \"name\": \"Andrew McNutt\",\n      \"email\": \"mcnutt@uber.com\"\n    },\n    {\n      \"name\": \"Chris Chua\",\n      \"email\": \"chua@uber.com\"\n    }\n  ],\n  \"license\": \"MIT\"\n}\n```\nIt is being installed by kepler.gl as a tar dep:\n\"type-analyzer\": \"https://registry.npmjs.org/type-analyzer/-/type-analyzer-0.1.4.tgz\",\n\nIt appears that the other deps that were failing were also tar deps from npmjs.org:\n\"react-onclickoutside\": \"https://registry.npmjs.org/react-onclickoutside/-/react-onclickoutside-6.7.1.tgz\",\n    \"react-palm\": \"^0.8.1\",\n    \"react-redux\": \"^4.0.0\",\n    \"react-tooltip\": \"https://registry.npmjs.org/react-tooltip/-/react-tooltip-3.3.0.tgz\",\n    \"react-vis\": \"^1.8.0\",\n    \"redux\": \"^3.0.4\",\n    \"redux-actions\": \"^2.2.1\",\n    \"reselect\": \"^3.0.1\",\n    \"styled-components\": \"^2.2.4\",\n    \"supercluster\": \"^3.0.0\",\n    \"type-analyzer\": \"https://registry.npmjs.org/type-analyzer/-/type-analyzer-0.1.4.tgz\",. In dependency-path#parse it reads - as the version, which is causing the error.\nThere is now tar spec in https://github.com/pnpm/spec/blob/master/package-id.md\nAdding this to parse is quick workaround:\nif (version === '-') {\n        return {name}\n    }. To clarify, this is what kepler.gl's package.json#dependencies looks like:\n\"react-onclickoutside\": \"https://registry.npmjs.org/react-onclickoutside/-/react-onclickoutside-6.7.1.tgz\",\n    \"react-palm\": \"^0.8.1\",\n    \"react-redux\": \"^4.0.0\",\n    \"react-tooltip\": \"https://registry.npmjs.org/react-tooltip/-/react-tooltip-3.3.0.tgz\",\n    \"react-vis\": \"^1.8.0\",\n    \"redux\": \"^3.0.4\",\n    \"redux-actions\": \"^2.2.1\",\n    \"reselect\": \"^3.0.1\",\n    \"styled-components\": \"^2.2.4\",\n    \"supercluster\": \"^3.0.0\",\n    \"type-analyzer\": \"https://registry.npmjs.org/type-analyzer/-/type-analyzer-0.1.4.tgz\",\nNote that they are using urls. I'm not sure why though.\nSo you are saying that these urls should be converted to regular deps by pnpm? I assumed they would just be downloaded as tgz manually - regardless of whether they are in a registry or not.\n. > Maybe related to #1273?\nYeh looks like it.. I don't understand what is going on there.... ```\nmodule.exports = {\n  hooks: {readPackage}\n}\nfunction readPackage(pkg) {\n  pkg.dependencies = '@oclif/errors'\n  return pkg\n}\n```\nIts a silly mistake, but I made it..... Just a check if pkg.dependencies is an object after the hook runs, and a error with a hint.. On first take its not clear what a \"task\" is.\nAnd task-concurrency feels more grammatically correct.. Will sub-package .npmrc override the root one?\nWhat if I use a custom pnpmfile in the root, but don't want it to be used for sub-packages? https://github.com/pnpm/pnpm/issues/1137\nAlthough a lot of the time I would want to use the same pnpmfile for all packages.... @zkochan Can you publish this?. Just tried it out.\nSo if I set pnpmfile=./pnpmfile.js, sub-packages will look from their root. Its unexpected.\nCan we have a root pnpmfile like in https://github.com/pnpm/pnpm/issues/1137?\nOr add an env var to .npmrc? pnpmfile = ${PNPM_WORKSPACE_ROOT}/pnpmfile.js\n\nThis would tie the .npmrc file to pnpm though which we prob don't want, and how would we set the default? But only pnpm uses this setting so i guess its cool.\nThis will prob be a mess, because what if someone sets a pnpmfile in a sub package - then they must also set an .npmrc with pnpmfile - and they may be wondering why its not working.\n\nAlso, I need the workspace root in my pnpmfile.js. Can we add another readPackage argument that provides this? readPackage(pkg, {log, config: {workspacePrefix}})?\nWorkaround\n.npmrc\npnpmfile = ${PNPM_WORKSPACE_ROOT}/pnpmfile.js\nPNPM_WORKSPACE_ROOT=/full/path/to/workspace pnpm i. A fix might be to create a node_modules/.bin-symlinks dir that would look like an npm/yarn .bin dir, and the binstubs would call these instead, so that process.argv binaries have same names.. Ah so there were two error lines printed to pnpm-debug.log. At the bottom of the second one there was a prefix line.\nThis prefix should be printed with the error message.. I couldn't find No matching version found for in the codebase...\nFound it here: https://github.com/pnpm/npm-resolver/blob/master/src/index.ts. So I just realized I was depending on babel-loader@^8.0.0 somewhere. v8 is only in beta, so it was correct that it did not find the version.\nHowever, the error message is misleading, because it rewrites the version that was actually used.\nTo solve it I tried to search my codebase for the modified range, but could not find it.\nSo fixes:\n\nshow actual version used in package.json (ctx.raw in resolveNpm)\nShow prefix in error message.. Silly me. I missed out the @ sign in the alias.\n\nMaybe it should be mandatory, as a specific version is always required for a normal dep.\nThis would have avoided my silly mistake. . https://stackoverflow.com/questions/48654781/npm-cannot-read-property-algorithm-of-undefined. Why is it called importers?. Awesome work! Really keen to try this out.. @zkochan How do I enable this?. @zkochan PR merges are squashed right? So you don't need me to rewrite the commits? I will use correct format going forward though.. 11 test failures in supi. Will investigate.. The issue is opts.destModulesDir (some node_modules dir) sometimes doesn't exist in the tests, which then throws an error.\nconst destModulesDirReal = fs.realpathSync(opts.destModulesDir)\nHowever, symlinkDir works when the dir doesn't exist.\nI think I need a realpath wrapper that works for non-existent dirs. I think its needs to find the closest dir which exists, run realpath on that, then attach the non-existent path to the end.\n\nAh, symlinkDir does a mkdirp. Maybe I could move that earlier...\ntry {\n            return yield forceSymlink(src, dest);\n        }\n        catch (err) {\n            if (err.code === 'ENOENT') {\n                yield mkdirp(path.dirname(dest));\n                return yield forceSymlink(src, dest);\n            }\n            throw err;\n        }. > If it does not exist yet then no need to get the real location of it\nBut a parent dir may be a symlink, so we need to get the realpath of the parent dir. I'm not sure if this will happen.\nI'm doing this:\nlet destModulesDirReal\n  try {\n    destModulesDirReal = await fs.realpath(opts.destModulesDir)\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      await mkdirp(opts.destModulesDir)\n      destModulesDirReal = await fs.realpath(opts.destModulesDir)\n    } else {\n      throw err\n    }\n  }. I've added a test. I added a fixture of the workspace from my original issue to the test/packages dir.. @zkochan Looks like AppVeyor failed during network issue. How do we restart the check?\nOnce tests pass, can we merge and publish a new version? Is master stable?. @zkochan Maybe something to do with symlinks.\nI added symlinks inside the fixture - I'm guessing they don't work cross platform.\nI have to programmatically create the symlinks I assume.. I have put through a commit which avoids running the tests on Windows for now to get master passing again.\nIt could be that this change broke pnpm for Windows users.\nreadlink seems to print the absolute path of a symlink.)\nexpected: |-\n      '../../bar'\n    actual: |-\n      'C:\\\\projects\\\\.tmp\\\\193\\\\symlink-workspace\\\\app1\\\\packages\\\\public\\\\bar\\\\'\n    at: Object.<anonymous> (C:\\projects\\pnpm-17nv8\\packages\\supi\\test\\link.ts:235:5)\n    stack: |-\nCauses could be:\n\nOur usage of fs.symlink in the tests.\nOur usage of fs.readlink in the tests.\nOur usage of fs.realpath in the link method code.\n\n. I don't have easy access to Windows machine, so I would have to setup a dev env there to fix this.\n@zkochan If you have access, I first need to know if fs.readlink prints relative symlinks paths on Windows.. Was a bad symlink on my part.. Actually no, it seems like its still an issue.\nMaybe --filter uses real paths from pnpm-workspace.yaml#packages...this would break my use case.. So the packages are not being found by find-packages.\n\nFound the issue. The patterns that find-packages match against use the file real paths.\nSo using !packages/foo in /app-2 will ignore /app-1/packages/foo even though it is being symlinked using /app-2/packages/foo-local.\n\nSeems like a fast-glob issue.. So fast-glob uses micromatch. After fiddling around it appears I can get the behavior I want using !packages/(foo). Adding the brackets seemed to work.\nIts strange. Maybe its a bug in micromatch.... > 1. Running pnpm install in the root will only create node_modules for the root package.json.\n\n\nRunning pnpm install -r (or pnpm install -- .) in the root will install dependencies of all workspace packages.\nRunning pnpm install -r (or pnpm install -- .) in libs/ directory will only install dependencies of lib-a and lib-b.\n\n\n@zkochan I am very used to pnpm m i. pnpm i -r is not nice to type.\npnpm i foo installs/workspace-link + saves package into closest package.json.\nIt is very rare that I want to install a package in multiple repos, so filters are good for that.\n\nok, so seems like most developers expect that pnpm install === pnpm multi install\n\nYeh I agree with this. But pnpm install foo should install to closest package.json.. > ok, so seems like most developers expect that pnpm install === pnpm multi install\nIs this still the consensus?\nI am opposed to this. Most devs are used to working with single packages where they expect pnpm i to just install for that package.\nIf I run pnpm i in the root, I only want the root to install (say after I add a dep to the root package.json).. I think its actually related to the linking of packages to the root .registry dir.\nsymlinkDependencyTo.ts looks like the source of the problem.\nAll deps are being linked to the cwd root.\nBut if the dep is in another repo (symlinked), I don't want to symlink outside the root of the other repo, because it will break the other repo\nFor deps residing outside the current root, I want to leave them alone.\n\nHere is my idea:\n```js\nexport default function symlinkDependencyTo (alias: string, peripheralLocation: string, dest: string) {\n  const linkPath = path.join(dest, alias)\n// Don't symlink deps from packages that are outside of the monorepo root.\n  //   These may be symlinks from another project, and we don't want to break the other project.\n  // TODO(vjpr): Is process.cwd() a reliable way to get the monorepo root?\n  if (!linkPath.startsWith(process.cwd())) {\n    // TODO(vjpr): Should print some kind of warning maybe?\n    return {reused: true} // TODO(vjpr): Not sure we should misuse reused like this.\n  }\nlinkLogger.debug({ target: peripheralLocation, link: linkPath })\n  return symlinkDir(peripheralLocation, linkPath)\n}\n```. @tomcon What do you mean by hanging? At what stage? What command are you running?\nCan you post your pnpm-debug.log if one is created.. @zkochan I have left todos questions in the code. Please review.. Failing at:\n```\nfail if installing different types of dependencies in a project that uses an external shrinkwrap\nok 414 create testing dir 123\nnot ok 415 Error: Cannot find module 'wrappy'\n\noperator: error\nexpected: |-\n  undefined\nactual: |-\n  { [Error: Cannot find module 'wrappy'] code: 'MODULE_NOT_FOUND' }\nat: bound (/home/travis/build/pnpm/pnpm/node_modules/.registry.npmjs.org/onetime/2.0.1/node_modules/onetime/index.js:30:12)\nstack: |-\n  Error: Cannot find module 'wrappy'\n      at Function.Module._resolveFilename (module.js:476:15)\n      at Function.Module._load (module.js:424:25)\n      at Module.require (module.js:504:17)\n      at require (internal/module.js:20:19)\n      at Object.<anonymous> (/home/travis/build/pnpm/.tmp/123/node_modules/.localhost+4873/inflight/1.0.6/node_modules/inflight/inflight.js:1:14)\n      at Module._compile (module.js:577:32)\n      at Object.Module._extensions..js (module.js:586:10)\n      at Module.load (module.js:494:32)\n      at tryModuleLoad (module.js:453:12)\n      at Function.Module._load (module.js:445:3)\n\n...\n```\n@zkochan You know what could be causing this? Could my change have caused it?. > Seems to me like it should be treated as a regular linked dependency...\nBut the repo doesn't have a package.json. Its another repo which contains many packages.\n```\n/repo1/packages/\n  - foo\n  - bar\n/repo1/some-packages -> /repo2/some-packages\n/repo2/some-packages\n  - baz\n  - bat\n```\nI'm pretty sure my fix would solve this issue.\n. \"/repo2\" should not appear in the shrinkwrap.\n\"some-packages\" either symlinks to repo2 or it is a git subtree in repo1 -\nand regardless of whether it is symlinked, the shrinkwrap should be the\nsame.\nThis allows you to symlink to a dir of shared packages during local\ndevelopment (like a framework). Then when sharing your code, you use git\nsubtree to keep the framework code in the git tree.\nOn Mon 5. Nov 2018 at 22:05, Zoltan Kochan notifications@github.com wrote:\n\nI guess my question is:\nDo you want those packages from repo2 to appear in the shrinkwrap.yaml\nfiles in repo1? Or would it be better to just have a link notation like baz:\nlink:../repo2/some-packages/baz. Similarly to what you get when you do pnpm\nlink ../repo2/some-packages/baz\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/1452#issuecomment-436034501, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AARLRcUQOduqd1Rln6GNpi2unl23oKviks5usKgTgaJpZM4YEk2G\n.\n. I just did a force-push, think I overwrote the changes you suggested.\n\nCan you think of any instance where this would break? It seems to pass all tests. Let me know what I need to do to get it merged.. > The correct solution would be to just symlink those external packages in without trying to install their dependencies.\nThis wouldn't work for me.\nThere are two cases. One when developing locally, and the other when sharing the repo remotely.\nCase 1: Sharing another local repos packages (/repo1's) during development\n- /repo1\n  - packages-subtree\n  - packages-symlink -> ./packages-subtree\n- /repo2\n  - packages-subtree\n  - packages-symlink -> /repo1/packages-a\nCase 2: Prepare repo to git push to others\n- /repo1\n  - packages-subtree\n  - packages-symlink -> ./packages-subtree\n- /repo2\n  - packages-subtree\n  - packages-symlink -> ./packages-subtree\nNotice how /repo2/packages-symlink now points to its local subtree version of the symlink. This is synced with repo1/packages-subtree using git subrepo.\nAnd I want to switch between each case by simply changing where /repo2/packages-symlink points to.\n\nSo in /repo2, whenever I run pnpm m i, if packages-symlink is symlinked or not, shrinkwrap won't change.. So it would just ignore the symlinked dir during install but still make links to it. It would be great if it would find the pnpm-workspace.yaml of repo1/ and install that, but I think that is another issue.. This is blocking me from rolling out shared-workspace-shrinkwrap to my team. Would it be okay to merge as a workaround?. Doesn't seem to work in the readPackage hook + pnpm m up --depth 100:\n```js\n  if (pkg.name === 'coffee-script') {\n    pkg.bin = {}\n  }\nif (pkg.name === 'coffeescript') {\n    pkg.bin = {}\n  }\n. @zkochan Can you take a look at this?.\n{\"time\":1542124317843,\"hostname\":\"xxx\",\"pid\":56783,\"level\":\"debug\",\"name\":\"pnpm:package-json\",\"initial\":{\"name\":\"pnpm-global\",\"version\":\"1.0.0\",\"description\":\"\",\"main\":\"pnpmfile.js\",\"dependencies\":{\"ava\":\"^0.23.0\",\"aws-security-group-updater\":\"^0.0.1\",\"babel-plugin-flow-runtime\":\"^0.17.0-vjpr.1\",\"babel-register-module\":\"^0.1.0\",\"event-kit-decorator\":\"^0.0.1\",\"flow-runtime\":\"^0.17.0-vjpr.1\",\"flow-watcher\":\"^0.0.4\",\"jetbrains-project\":\"^0.0.5-dev\",\"json5-to-json\":\"^0.0.1\",\"lerna-add-from-dir\":\"^0.0.1\",\"linked-foo\":\"^1.0.0\",\"linkydink\":\"^1.0.0\",\"next\":\"^6.1.0-vjpr.1\",\"objection-graphql\":\"^0.2.4\",\"package-with-bin\":\"^1.0.0\",\"pnpm-global-pkg\":\"^1.0.0\",\"pnpm-vjpr\":\"^2.12.1\",\"pnpmfile-check\":\"^0.1.3\",\"pnpmfile-read-package-json\":\"^0.2.0\",\"shipmate\":\"^0.0.1\",\"supi\":\"^0.13.2\"},\"scripts\":{\"test\":\"echo \\\"Error: no test specified\\\" && exit 1\"},\"keywords\":[],\"author\":\"\",\"license\":\"ISC\",\"readme\":\"ERROR: No README data found!\",\"_id\":\"pnpm-global@1.0.0\"},\"prefix\":\"/Users/Vaughan/nvm/versions/node/v8.9.0/pnpm-global\"}\n{\"time\":1542124317855,\"hostname\":\"xxx\",\"pid\":56783,\"level\":\"debug\",\"name\":\"pnpm:stats\",\"prefix\":\"/Users/Vaughan/nvm/versions/node/v8.9.0/pnpm-global\",\"removed\":0}\n{\"time\":1542124318362,\"hostname\":\"xxx\",\"pid\":56783,\"level\":\"debug\",\"name\":\"pnpm:package-json\",\"prefix\":\"/Users/Vaughan/nvm/versions/node/v8.9.0/pnpm-global\",\"updated\":{\"name\":\"pnpm-global\",\"version\":\"1.0.0\",\"description\":\"\",\"main\":\"pnpmfile.js\",\"dependencies\":{\"ava\":\"^0.23.0\",\"aws-security-group-updater\":\"^0.0.1\",\"babel-plugin-flow-runtime\":\"^0.17.0-vjpr.1\",\"babel-register-module\":\"^0.1.0\",\"event-kit-decorator\":\"^0.0.1\",\"flow-runtime\":\"^0.17.0-vjpr.1\",\"flow-watcher\":\"^0.0.4\",\"jetbrains-project\":\"^0.0.5-dev\",\"json5-to-json\":\"^0.0.1\",\"lerna-add-from-dir\":\"^0.0.1\",\"linked-foo\":\"^1.0.0\",\"linkydink\":\"^1.0.0\",\"next\":\"^6.1.0-vjpr.1\",\"objection-graphql\":\"^0.2.4\",\"package-with-bin\":\"^1.0.0\",\"pnpm-global-pkg\":\"^1.0.0\",\"pnpm-vjpr\":\"^2.12.1\",\"pnpmfile-check\":\"^0.1.3\",\"pnpmfile-read-package-json\":\"^0.2.0\",\"shipmate\":\"^0.0.1\",\"supi\":\"^0.13.2\"},\"scripts\":{\"test\":\"echo \\\"Error: no test specified\\\" && exit 1\"},\"keywords\":[],\"author\":\"\",\"license\":\"ISC\"}}\n{\"time\":1542124318367,\"hostname\":\"xxx\",\"pid\":56783,\"level\":\"debug\",\"name\":\"pnpm:shrinkwrap\",\"message\":\"shrinkwrap.yaml differs from node_modules/.shrinkwrap.yaml\",\"prefix\":\"/Users/Vaughan/nvm/versions/node/v8.9.0/pnpm-global\"}\n{\"time\":1542124318378,\"hostname\":\"xxx\",\"pid\":56783,\"level\":\"debug\",\"name\":\"pnpm:summary\",\"prefix\":\"/Users/Vaughan/nvm/versions/node/v8.9.0/pnpm-global\"}\n{\"time\":1542124318378,\"hostname\":\"xxx\",\"pid\":56783,\"level\":\"debug\",\"name\":\"pnpm:cli\",\"message\":\"command_done\"}\n``. Still broken. And the install never works. This is after removingpnpm-global` too.\n```\n$ pnpm link --reporter=ndjson -g\n{\"time\":1542275180525,\"hostname\":\"xxx.local\",\"pid\":60237,\"level\":\"debug\",\"name\":\"pnpm:package-json\",\"initial\":{\"dependencies\":{\"1\":\"^1.0.0\"},\"name\":\"\",\"version\":\"\",\"readme\":\"ERROR: No README data found!\",\"_id\":\"@\"},\"prefix\":\"/usr/local/Cellar/node@8/8.12.0/pnpm-global\"}\n{\"time\":1542275181898,\"hostname\":\"xxx.local\",\"pid\":60237,\"level\":\"debug\",\"name\":\"pnpm:stats\",\"prefix\":\"/Users/gpazinich/Documents/Job/Quantitec/intranav-vwp\",\"removed\":0}\n{\"time\":1542275182131,\"hostname\":\"xxx.local\",\"pid\":60237,\"level\":\"debug\",\"name\":\"pnpm:shrinkwrap\",\"message\":\"shrinkwrap.yaml differs from node_modules/.shrinkwrap.yaml\",\"prefix\":\"/Users/gpazinich/Documents/Job/Quantitec/intranav-vwp\"}\n{\"time\":1542275182282,\"hostname\":\"xxx.local\",\"pid\":60237,\"level\":\"debug\",\"name\":\"pnpm:summary\",\"prefix\":\"/usr/local/Cellar/node@8/8.12.0/pnpm-global\"}\n{\"time\":1542275182282,\"hostname\":\"xxx.local\",\"pid\":60237,\"level\":\"debug\",\"name\":\"pnpm:cli\",\"message\":\"command_done\"}\n```\n$ pnpm link --reporter=ndjson\n{\"time\":1542275145775,\"hostname\":\"xxx.local\",\"pid\":60146,\"level\":\"debug\",\"name\":\"pnpm:package-json\",\"initial\":{},\"prefix\":\"/usr/local/Cellar/node@8/8.12.0/pnpm-global\"}\n{\"time\":1542275145781,\"hostname\":\"xxx.local\",\"pid\":60146,\"level\":\"debug\",\"name\":\"pnpm:stats\",\"prefix\":\"/usr/local/Cellar/node@8/8.12.0/pnpm-global\",\"removed\":0}\n{\"time\":1542275145820,\"hostname\":\"xxx.local\",\"pid\":60146,\"level\":\"debug\",\"name\":\"pnpm:root\",\"added\":{\"dependencyType\":\"prod\",\"linkedFrom\":\"/usr/local/Cellar/node@8/8.12.0/pnpm-global/1\",\"name\":\"1\",\"realName\":\"1\",\"version\":\"1.0.0\"},\"prefix\":\"/usr/local/Cellar/node@8/8.12.0/pnpm-global\"}\n{\"time\":1542275145835,\"hostname\":\"xxx.local\",\"pid\":60146,\"level\":\"debug\",\"name\":\"pnpm:package-json\",\"prefix\":\"/usr/local/Cellar/node@8/8.12.0/pnpm-global\",\"updated\":{\"dependencies\":{\"1\":\"^1.0.0\"}}}\n{\"time\":1542275145840,\"hostname\":\"xxx.local\",\"pid\":60146,\"level\":\"debug\",\"name\":\"pnpm:shrinkwrap\",\"message\":\"`shrinkwrap.yaml` differs from `node_modules/.shrinkwrap.yaml`\",\"prefix\":\"/usr/local/Cellar/node@8/8.12.0/pnpm-global\"}\n{\"time\":1542275145863,\"hostname\":\"xxx.local\",\"pid\":60146,\"level\":\"debug\",\"name\":\"pnpm:summary\",\"prefix\":\"/usr/local/Cellar/node@8/8.12.0/pnpm-global\"}\n{\"time\":1542275145863,\"hostname\":\"xxx.local\",\"pid\":60146,\"level\":\"debug\",\"name\":\"pnpm:cli\",\"message\":\"command_done\"}. Also I saw:\n```\n$ pnpm link -g\nERROR\u2009 Path must be a string. Received undefined\nat assertPath     path.js:28                                                                                                                                                            \nat join           path.js:1236                                                                                                                                                          \nat     /Users/xxx/.nvm/versions/node/v8.12.0/pnpm-global/1/node_modules/.registry.npmjs.org/pnpm/2.18.2/node_modules/pnpm/lib/node_modules/supi/lib/linkToModules.js:47\nat next                                                                                                                                                                                 \nat fulfilled      /Users/xxx/.nvm/versions/node/v8.12.0/pnpm-global/1/node_modules/.registry.npmjs.org/pnpm/2.18.2/node_modules/pnpm/lib/node_modules/supi/lib/linkToModules.js:4 \nat _tickCallback  internal/process/next_tick.js:189\n``. Workaround is to usenvminstead of Homebrew version of node.. Nopnpm-shrinkwrap.yaml,.npmrcset withlink-workspace-packages, andpnpm m i`. I can't remember full repro.\nI think it was while I was preparing the repro for the other issue I submitted.\n. Repro:\nhttps://github.com/vjpr/pnpm-issue-1482-realNodeModulesDirs\nRun pnpm m i. Try clearing node_modules and shrinkwrap.yaml and .npmrc then run pnpm m i. Then add .npmrc with:\nshared-workspace-shrinkwrap = true\nlink-workspace-packages = true. It was something like as follows:\n```\nnpm init -y\npnis @babel/core@7.0.0\npnis @babel/preset-env@7.1.0 --save-exact\nmkdir packages\ncd packages\nmkdir foo\ncd foo\nnpm init -y\npnis @babel/preset-env@7.0.0 --save-exact\npnis @babel/core@7.0.0 --save-exact\nThen add .npmrc with with 2 options mentioned above.\n```\npnis = pnpm i -S\nA sub-package with a different version of an already installed package, with a different peer dep.\n. @zkochan Can you take a look at this? It's one of those issues that causes strange sporadic failures.. Ok, I will try find the steps to reproduce it in my repro.. Can't reproduce it anymore.. Cool. I played around with many different orderings of commands and couldn't get it to break.. Expo project structure changes:\n\nexpo/xdl has moved into expo-cli/packages/xdl.\nreact-community/create-react-native-app has merged with expo-cli.\n\nbabel-preset-expo\nDoesn't use require for presets/plugins, which means it attempts to resolve them from the root. In a flat node_modules they are there, but in pnpm they are not.\nSolution\nA. Patch babel-preset-expo.\nmodule.exports = function() {\n  return {\n    presets: ['module:metro-react-native-babel-preset'],\n    plugins: [\n      [\n        require('babel-plugin-module-resolver'),\n        {\n          alias: {\n            'react-native-vector-icons': '@expo/vector-icons',\n          },\n        },\n      ],\n      [require('@babel/plugin-proposal-decorators'), { legacy: true }],\n    ],\n  };\n};\nB. Install babel-preset-expo dependencies in the root.\npnpm i @babel/core@^7.1.6 @babel/plugin-proposal-decorators@7.1.6 babel-plugin-module-resolver@^3.1.1 metro-react-native-babel-preset@^0.49.2\nreact-native\nSeems to be missing these deps:\n\nmetro-config@0.45.6\nmetro@0.45.6\n@babel/runtime\n\n\nError: Cannot find module '@babel/runtime/helpers/interopRequireDefault'\n\n```\n[18:14:10] Error: Cannot find module '@babel/runtime/helpers/interopRequireDefault'\n[18:14:10]     at Function.Module._resolveFilename (module.js:536:15)\n[18:14:10]     at Function.Module._load (module.js:466:25)\n[18:14:10]     at Module.require (module.js:579:17)\n[18:14:10]     at require (internal/module.js:11:18)\n[18:14:10]     at Object. (/Users/Vaughan/dev-live/expo-v2-test-pnpm/node_modules/.github.com/expo/react-native/archive/sdk-31.0.0.tar.gz/node_modules/react-native/local-cli/cliEntry.js:11:41)\n[18:14:10]     at Module._compile (module.js:635:30)\n[18:14:10]     at Module._compile (/Users/Vaughan/dev-live/expo-v2-test-pnpm/node_modules/.registry.npmjs.org/pirates/4.0.0/node_modules/pirates/lib/index.js:83:24)\n[18:14:10]     at Module._extensions..js (module.js:646:10)\n[18:14:10]     at Object.newLoader [as .js] (/Users/Vaughan/dev-live/expo-v2-test-pnpm/node_modules/.registry.npmjs.org/pirates/4.0.0/node_modules/pirates/lib/index.js:88:7)\n[18:14:10]     at Module.load (module.js:554:32)\n[18:14:10] Metro Bundler process exited with code 1\n```\n\nmetro\n\nThe resource `/Users/Vaughan/dev-live/expo-v2-test-pnpm/node_modules/.github.com/expo/react-native/archive/sdk-31.0.0.tar.gz/node_modules/expo/AppEntry.js` was not found\n\n```\n[19:13:21] Trace\n[19:13:21]     at new ResourceNotFoundError (/Users/Vaughan/dev-live/expo-v2-test-pnpm/node_modules/.registry.npmjs.org/metro/0.45.6/node_modules/metro/src/DeltaBundler/ResourceNotFoundError.js:18:13)\n[19:13:21]     at /Users/Vaughan/dev-live/expo-v2-test-pnpm/node_modules/.registry.npmjs.org/metro/0.45.6/node_modules/metro/src/Server.js:572:58\n[19:13:21]     at Generator.next ()\n[19:13:21]     at step (/Users/Vaughan/dev-live/expo-v2-test-pnpm/node_modules/.registry.npmjs.org/metro/0.45.6/node_modules/metro/src/Server.js:11:1077)\n[19:13:21]     at /Users/Vaughan/dev-live/expo-v2-test-pnpm/node_modules/.registry.npmjs.org/metro/0.45.6/node_modules/metro/src/Server.js:11:1307\n[19:13:21]     at new Promise ()\n[19:13:21]     at /Users/Vaughan/dev-live/expo-v2-test-pnpm/node_modules/.registry.npmjs.org/metro/0.45.6/node_modules/metro/src/Server.js:11:988\n[19:13:21]     at Server._buildGraph (/Users/Vaughan/dev-live/expo-v2-test-pnpm/node_modules/.registry.npmjs.org/metro/0.45.6/node_modules/metro/src/Server.js:572:991)\n[19:13:21]     at /Users/Vaughan/dev-live/expo-v2-test-pnpm/node_modules/.registry.npmjs.org/metro/0.45.6/node_modules/metro/src/Server.js:572:1274\n[19:13:21]     at Generator.next ()\n[19:13:22] The resource `/Users/Vaughan/dev-live/expo-v2-test-pnpm/node_modules/.github.com/expo/react-native/archive/sdk-31.0.0.tar.gz/node_modules/expo/AppEntry.js` was not found.\n```\n\n\n\n\nNeeded to add `rn-cli.config.js`\n\n```\nmodule.exports = {\n  getProjectRoots() {\n    return [\n      path.resolve(__dirname),\n    ]\n  },\n}\n```\n\n## Could not find `DeltaWorker/Worker`.\n\nWrong `metro-config` version. Using latest instead of expo's required version.\n\n## SHA-1 for file...is not computed\n\n```\n[20:03:39] SHA-1 for file /Users/Vaughan/dev-live/expo-v2-test-pnpm/node_modules/expo/AppEntry.js is not computed\n```\n\nChange main in package.json to point to a custom entry point.\n\nYou need to restart the iphone app after you change this.\n\n## Unable to resolve\n\n```\n[20:22:43] Unable to resolve \"@babel/runtime/helpers/interopRequireDefault\" from \"crna-entry.js\"\n```\n\nThe full error is not shown here. You need to look on the mobile app error page.\n\n\"does not exist in the Haste module map.\"\n\nThis is the symlink issue.\n\nNeeded to patch `metro-resolver#resolveSourceFileForExt`\n\n## Missing deps during runtime\n\nhttps://github.com/expo/expo/issues/2882. ## Tip: Debugging Metro\n\n### a. Prettify compiled sources\n\nFor local metro development, the easiest way is to just use the compiled sources and prettify the code in intellij.\n\nNOTE: Its minified so hard to trace back from stack traces.\n\n### b. Symlink\n\n`yarn run build && node ./scripts/watch.js`\n\nMake sure you `mv metro metro-bak` dir first.\n\n`ln -sfn /Users/Vaughan/dev-live/metro/packages/metro node_modules/metro`\n\n`ln -sfn /Users/Vaughan/dev-live/metro/packages/metro /Users/Vaughan/dev-live/expo-v2-test-pnpm/node_modules/.registry.npmjs.org/metro/0.45.6/node_modules/metro`. ## Missing deps during runtime\n\nhttps://github.com/expo/expo/issues/2882. There is a new config option for RN that allows you to setup a custom resolver for Metro. This should be able to resolve all our resolution issues without patching :)\n\n_rn-cli.config.js_\n\n```\n// See: https://facebook.github.io/metro/docs/en/configuration#resolver-options\nresolver: {\n  resolveRequest(context, moduleName, platform) { ... }\n}\n```\n\nThere are a lot of edge cases to workaround in the resolver (e.g `.ios` `.native` resolving). I might use `enhanced-require` from webpack because it is configurable.\n\nHere is where yarn's pnpm resolver was recently added a few weeks ago: https://github.com/facebook/metro/commit/60bad942f6f32d2ac1af7dc58e3e768a9aee1752. @aleclarson I am wondering if you would recommend using your metro patch (https://github.com/facebook/metro/issues/1#issuecomment-422513102) to get expo/RN+pnpm working?\n\nI have managed to get it to work with pnpm by using `resolveRequest` in `rn-cli.config.js`. The only issue I couldn't fix was the `SHA-1 for file ${filename} is not computed`, which required me to manually patch the `getSha1` function in `metro`.\n\nDo you think it will be easy to keep your patch up to date?. Not using it at the moment. I would prefer not to maintain a patch. Expo uses older versions of react-native too which means it would be hard to maintain.\n\nI'm using webpack's enhanced-require to take care of all resolution where haste fails. This is done using config option, not a patch.\n\nJust having an issue with sha1.as mentioned earlier in the thread, which unfortunately would mean I would need a small patched metro. I would publish a custom fork and use pnpmfile. But this becomes annoying to maintain :(. Using the `pnpmfile.js` and git commit dependencies might be the way to go.. Finished and optimized for speed too. See minimal repo here: https://github.com/vjpr/expo-v2-test-pnpm\n\nLater I will extract the custom stuff into a package.\n\n## How it works\n\nIt uses a `enhanced-resolve` from webpack to handle resolution using the `resolver.resolveRequest` config hook. \n\n**Why use `enhanced-resolve`?**\n\n`enhanced-resolve` has caching and file extension handling built-in which is why I chose to use it.\n\n**Other stuff**\n\n- I moved all source code into `src`.\n- Metro caches are now located in `node_modules/.cache`.. # Monorepo sub-package usage\n\nWhen used as a sub-package in a monorepo, there were more errors that I found and had to fix.\n\n## Could not find the \"expo\" package in your project when configuring the packager\n\nSee https://github.com/expo/expo-cli/issues/255\n\n```\nCould not find the \"expo\" package in your project when configuring the packager {caller: [getCliConfig$ (/xxx/node_modules/.github.com/expo/react-native/archive/sdk-31.0.0.tar.gz/react@16.5.0/node_modules/react-native/local-cli/core/index.js:141:9)]}\n```\n\n```js\nasync function getCliConfig(): Promise {\n  const cliArgs = minimist(process.argv.slice(2));\n  const config = await Config.load(\n    cliArgs.config != null ? path.resolve(__dirname, cliArgs.config) : null,\n  );\n\n  config.transformer.assetRegistryPath = ASSET_REGISTRY_PATH;\n\n  // NOTE(expo): include the Expo asset plugin to support static resources\n  try {\n    let expoAssetPluginPath = require.resolve('expo/tools/hashAssetFiles');\n    config.transformer.assetPlugins = [expoAssetPluginPath];\n  } catch (e) {\n    console.warn('Could not find the \"expo\" package in your project when configuring the packager');\n  }\n\n  config.resolver.hasteImplModulePath =\n    config.resolver.hasteImplModulePath || defaultConfig.hasteImplModulePath;\n  config.resolver.platforms = config.resolver.platforms\n    ? config.resolver.platforms.concat(defaultConfig.getPlatforms())\n    : defaultConfig.getPlatforms();\n  config.resolver.providesModuleNodeModules = config.resolver\n    .providesModuleNodeModules\n    ? config.resolver.providesModuleNodeModules.concat(\n        defaultConfig.getProvidesModuleNodeModules(),\n      )\n    : defaultConfig.getProvidesModuleNodeModules();\n\n  return {...defaultRNConfig, ...config};\n}\n```\n\n**Workaround**\n\n`expo` must be installed at the monorepo root if you want this assetPlugin to load.\n\nAlthough I think we can set it manually...\n\nIs this perhaps in the Expo's forked `react-native` only?\n\n## `getProjectRoot` does not work properly when using pnpm package manager\n\nhttps://github.com/facebook/react-native/issues/22623\nhttps://github.com/expo/expo-cli/issues/254\n\n**Fix**\n\nAdd `app.json#packagerOpts = {config: 'rn-cli.config.js'}`, and set `projectRoot` in `rn-cli-config.js`.\n\n## Can't resolve `react-native` from `expo-asset` etc.\n\nA bunch of expo packages like expo-asset, expo-location, expo-ads-admob, expo-core, etc. depend on `react-native` but don't specify it as a peer dep or dep.\n\nThe fix was to add `resolve.modules` to my webpack resolver.\n\n## XXX not found in Metro root folder\n\nBecause every package resolves to `REPO_ROOT/node_modules/.registry...`, Metro complains that it doesn't know about them because they are not in one of the roots.\n\nI simply added to `rn-cli.config.js#watchFolders`.\n\n## Duplicate package names\n\n`react-native` / metro complains about duplicated package names. Says something about `@provideModule` blah blah.. I ran `pnpm i` and a native dep failed to compile. Then running `pnpm ls sqlite3` resulting in the same message.. Still getting this error in 2.25.1. Killing `node_modules` fixed it. Started occurring after a native dep failed to install.. Occurred again.\n\nI ran `pnpm i`, then after 1 second ctrl+c'd it because I wanted to make another change.\n\nThen I modified my pnpmfile.\n\nRan `pnpm m ls foo` and got error.\n\nRunning `pnpm i`, then re-run `pnpm m ls foo` fixed it.\n\n## Workaround\n\nRun `pnpm i` again if message occurs.. Very useful!. So the issue I am having is related to symlinked package groups.\n\nMaybe its related to https://github.com/pnpm/pnpm/issues/1407#issuecomment-427995998\n\n_pnpm-workspace.yaml_\n\n```\npackages:\n  - '.'\n  - 'packages/**'\n  - '!packages/(public)/**'\n```\n\nDir structure:\n\n```\n- /public\n  - package-group\n    - foo\n- /public-symlink -> /public\n```\n\n```\ncd /public\npnpm m exec pwd --filter .\n# SHOWS foo\n\ncd /public-symlink/package-group\npnpm m exec pwd --filter .\n# DOESN'T SHOW foo\n\npnpm m exec pwd --filter my-foo \n# SHOWS foo\n```\n\nSo the package name filter works, but the path filter doesn't.\n\n. Just want to bump this, its a pretty frustrating bug. \n\nWorkaround is to inspect the `pnpm-debug.log` or run with `--reporter ndjson`.. So it turns out that peer deps in linked workspace packages are not considered at all. They will just resolve normally. In #1618 I have a small repro of this.\n\nAm I correct that peer deps are only taken into account if they are not symlinks (i.e. from npm or git)...\n\nNOTE: This issue is still relevant to non-linked packages.. ## Workaround\n\n**Symlinked `/node_modules/.registry.npmjs.org./node_modules/`**\n\nA hacky workaround I thought of would be to create a `/node_modules/[.registry.npmjs.org|github.com|etc.]/node_modules` dir to put all the peer deps. It could be symlinked like `/node_modules/.registry.npmjs.org/node_modules` -> `/peer_modules/node_modules`. But its super hacky.\n\n```\n     paths:\n      [ '/Users/Vaughan/dev-scratch/pnpm-issue-1616-nested-peer-deps/node_modules/.registry.npmjs.org/react-apollo/2.4.0/node_modules/react-apollo/node_modules',\n        '/Users/Vaughan/dev-scratch/pnpm-issue-1616-nested-peer-deps/node_modules/.registry.npmjs.org/react-apollo/2.4.0/node_modules',\n        '/Users/Vaughan/dev-scratch/pnpm-issue-1616-nested-peer-deps/node_modules/.registry.npmjs.org/react-apollo/node_modules',\n        '/Users/Vaughan/dev-scratch/pnpm-issue-1616-nested-peer-deps/node_modules/.registry.npmjs.org/node_modules',\n        '/Users/Vaughan/dev-scratch/pnpm-issue-1616-nested-peer-deps/node_modules',\n        '/Users/Vaughan/dev-scratch/node_modules',\n        '/Users/Vaughan/node_modules',\n        '/Users/node_modules',\n        '/node_modules' ] } }\n```\n\nTested it - this works!\n\n~However, this would only work for npm/git deps. Not linked workspace deps - they would still only search up to find `/node_modules`. Say if your package has a peer dep on `graphql`, and includes a dependency that has a peer dep on graphql, then your package wouldn't resolve `graphql` if it was inside `/peers/node_modules`.~ Another approach would be `node_modules/.registry.npmjs.org/node_modules -> packages/node_modules`. Then peer deps can be defined in `packages/package.json`. The monorepo root would then only contain stuff needed by the monorepo root.\n\n**Custom resolve and webpack config**\n\nAn alternative would be to add a custom node_modules dir to webpack config and a NODE_PATH - then all the peer could be put there. But I think this would break a lot of tooling.\n\nThe benefit of this is that the root would be clean of any peer deps.. > searching for the .git dir.\n\nI sometimes use `npm init -y` and work on a repo before I `git init`.. `--strict-peer-dependencies` is not working either.... My bad, I didn't use this deps with peers in a package.json.. This repo reproduces the problem: https://github.com/vjpr/pnpm-issue-1616-nested-peer-deps/commit/684a8fe3eab881db3e1f276fca40450a88e8fc55\n\nSeems like peer deps are not touched if they are workspace symlinks.. ~Even with `strict-peer-dependencies=true` it still doesn't show error/warnings.~ Actually it does but you have to `rm -rf node_modules shrinkwrap.yaml` (`pnpm i --force` doesn't work).. Was in my pnpmfile.js.. This works:\n\n```\ncp -R ~/nvm/versions/node/v11.4.0/pnpm-global ~/nvm/versions/node/v11.7.0/pnpm-global\ncd ~/nvm/versions/node/v11.4.0/pnpm-global/1 && pnpm i --force\n# You need to install one global package, and it will install all the existing ones for you.\npnpm i -g nodemon\n```\n\n---\n\nIt would be useful to have a `pnpm --reinstall-global-packages` command which would relink or globally install packages.. Yarn PnP is integrating with a bunch of module-resolving projects. Maybe there is a way we can plug into these integrations if we implement it in pnpm.\n\nI actually implemented something like Yarn PnP a few years ago. A require hook that would do the resolving in real time.\n\nThe biggest issue is debugging I would say. Its easier to poke around a real directory structure, make small patches or add `console.log` to 3rd party modules.\n\nI found it to be slow as well. There are a lot of fs operations involved to find every require's `package.json` file and read them. Caching is tricky to get right too.. Good to see this happening!. @zkochan When I run `pnpm i` on a filtered repo (removing unneeded deps), I get  `SHRINKWRAP_BREAKING_CHANGE` / `Shrinkwrap file...not compatible with current pnpm`.\n\nWhat would be causing this?\n\nEDIT: \n\nopts.wantedVersion = 3.9, shrinkwrapVersion = 4.0\nMy pnpm is v2.25.6\n\nThis is wierd, for my root dir, it is 4 and 4.\n\nFor my global installs its is 3.9 and 3.9.\n\nWhere is `opts.wantedVersion` set?\n\n---\n\nAlso, is it possible to ignore things that are in the shrinkwrap, but are missing in the tree?\n\nI need to run `time pnpm i --offline --frozen-shrinkwrap --filter=foo` on a dir, but I have removed a bunch of packages from it.\n\n- If I use `--filter`, will it ignore things that shrinkwrap can't find on disk?\n- Otherwise, is it feasible to trim down the shrinkwrap so that it will work?\n. > you need to also move pnpm-workspace.yamland you need to set the\nshared-workspace-shrinkwrap to true. Otherwise, pnpm will want a shrinkwrap\nv3.9\n\nAh. So I was using globby and it doesn't select dot files unless u pass an\noption in. So '.npmrc' with shared shrinkwrap was not beinf copied. Problem\nsolved!\n\nRe: ignoring the shrinkwrap\n\nI will see if it works using the fix above first. But basically I am\ndeleting some packages from the filesystem, which will be in the\nshrinkwrap. Wondering if it will complain. Hopefully not. Will test\ntomorrow.\n\nOn Mon 4. Feb 2019 at 21:27, Zoltan Kochan  wrote:\n\n> Also, is it possible to ignore things that are in the shrinkwrap, but are\n> missing in the tree?\n>\n> this I don't understand, maybe describe it in more details or give me a\n> sample repo\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> , or mute\n> the thread\n> \n> .\n>\n. **EDIT**\n\nI figured it out. You just need to have the complete dep graph for the packages that are included.\n\nI was copying over some directories, and they contained package.json files, but I didn't have their deps.\n\n---\n\n>> Also, is it possible to ignore things that are in the shrinkwrap, but are missing in the tree?\n\n> this I don't understand, maybe describe it in more details or give me a sample repo\n\n```\n- /\n  - shrinkwrap.yaml\n  - pnpm-workspace.yaml\n  - package.json\n  - foo (depends on bar)\n  - bar\n  - baz\n```\n\nI copy this tree to a new dir, without anything that `foo` doesn't depend on...this means `baz` is not present. (`pnpm m ls --porcelain --depth=-1 --filter=foo...`)\n\nThen I want to run `pnpm i --offline --frozen-shrinkwrap --filter=foo` and have it not complain about the missing `baz`.\n\nWhen I have tried this, I get \"no such file or directory\" errors.\n\n~Is there a way around this?~. **EDIT:** Moved this to separate issue: https://github.com/pnpm/pnpm/issues/1651\n\n---\n\n@zkochan Also, if I want to get the dependencies of the root package...\n\nIs something like this possible:\n\n```\npnpm m ls --filter=. ...\n```\n\nI want to be able to \"get dependencies of the package located at a path\".\n\nI looking in `pnpm i --help` and it doesn't seem to have the option.\n\nMaybe we need something like `--filter-by-pkg-at-path-with-dependencies=.` and `--filter-by-pkg-at-path-with-dependants=.`?. I wrote a command runner recently and I went for the approach you\nmentioned. Anything after the exec is passed to the command.\n\nHowever i think filters would be best used with the --filter syntax in such\na scenario.\n\nI think the --  is less commonly used and known. I very rarely use\nit with git for example.\n\nOn Mon 4. Feb 2019 at 22:32, Zoltan Kochan  wrote:\n\n> There are two ways to filter workspace packages:\n>\n>    1. via the --filter flag\n>    2. via --\n>\n> However, as of pnpm v2 filtering via -- is not supported in the following\n> commands: test/run/exec. Those three commands use -- to separate args of\n> the command from args that are passed down to the child processes.\n>\n> Suggested solution: consider every argument that is after the command name\n> (if the command name is test/run/exec) to be arguments of child processes.\n>\n> pnpm  run  -- \n>\n> So the next command from pnpm v2:\n>\n> pnpm recursive exec --workspace-concurrency 1 --filter foo... -- rm -rf node_modules\n>\n> Would look like this in pnpm v3:\n>\n> pnpm recursive --workspace-concurrency 1 exec rm -rf node_modules -- foo...\n>\n> cc @vjpr \n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> , or mute the thread\n> \n> .\n>\n. It's slightly confusing/non-standard for je community though because of the\n'npm run foo -- bar' convention.\n\nOn Tue 5. Feb 2019 at 00:33, Zoltan Kochan  wrote:\n\n> I use it all the time with pnpm.\n>\n> I think it will cause no harm as -- is rarely used with pnpm test/run and\n> I don't even know what flags are supported by test/run.\n>\n> Also, exec looks nicer w/o the --.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> , or mute\n> the thread\n> \n> .\n>\n. We should put a link from the `pnpm install` page because of `shared-workspace-shrinkwrap`. It allows `pnpm i --filter=` right?. So `symlinkDependencyTo` is used in three places.\n\n![screen shot 2018-11-01 at 10 48 20 am](https://user-images.githubusercontent.com/281413/47844895-d2cfe000-ddc3-11e8-84b9-5438109dcfad.png)\n\nYou would suggest moving the code to these three locations?. > reused\n\n`reused` it only used by 1 usage:\n\n```\nif (\n  !opts.dryRun &&\n  (await symlinkDependencyTo(rootAlias, depGraphNode.peripheralLocation, modulesDir)).reused\n) return\n```\n\nIt seems to be only used to prevent a log message printed if link was reused.\n\nMaking `symlinkDependencyTo` return `linkCreated` instead of `reused` (forwarded from `symlinkDir`) would be better.\n. But I think for now, `reused` can be used for this purpose...but the name may cause misuse later.... Is there a singleton package I can use to get it, or I have to pass it into `symlinkDepTo()`?. Also, if its a `dryRun`, shouldn't we still check for `reused`, and inside `symlinkDepTo` we should conditionally run `symlinkDir` if dryRun is false?\n\nSo that the logs printed during dryrun are correct.. Pushed commit using shrinkwrapDirectory.. @zkochan Can you review this thread..",
    "foisonocean": "@rstacruz @zkochan \nHi guys, I'm using Node v10.9.0 and pnpm 2.13.5 on mac OS X 10.11, and I try to install create-react-app by pnpm install -g create-react-app, then when I run which create-react-app I still get nothing.\nAny suggestions for me?. @danielbayley @zkochan \nHi guys, I'm using Node v10.9.0 and pnpm v2.13.5 on mac OS X 10.11, and I try to install create-react-app by pnpm install -g create-react-app, but then when I run which create-react-app I still got nothing.\nAny suggestions for me?. Any updates?. Any updates? I really want to switch to pnpm but the global install issue block me. I first meet this issue one year ago, now one year passed but it seems we haven't make any progress on this.. ",
    "halhenke": "I might take a shot at this. Was taking a look at how npm does git repos earlier. Things seem to be progressing super quickly though so half expect to see a PR from someone by the time I get started :smiley: \n. Heh :-) \nOK - I'm committed now. Will work on it over next couple of days.\n. OK. I was thinking of doing a bare/mirror clone - just getting the git repository first - and then doing one or more clones from that local version of the repository to get the actual code - mostly in case there were dependencies on different tags/commits from the same repository. However since there are no longer plans to link everything from a global node_modules folder this seems a lot less likely.\n. Hey, sorry for the lateness in getting back to you on this - had to take a bit of a break on other stuff. \nI was reluctant to do anything that relied on GitHub's API because that wouldnt cover other valid npm cases that involve non-Github git repos. Tarballs would be nice because they fit into the existing design which, from memory. is based around streaming files whereas, from what I've seen, git clone involves a fair bit of handshake logic etc that would suck to reproduce (and I haven't seen in any library).\nSo where this is at, at the moment was using the shell version of git and trying to extract progress information (doable but a bit ugly) and hopefully slot it into the rest of the workflow as seamlessly as I could. Not sure if that sounds sensible or not.\nAt any rate will try to finish this week though am happy to hand over to anyone who might have a better handle on the issues.\n. ",
    "defunctzombie": "Just wanted to add the lesser known syntax(es) also supported by npm:\nnpm install github:user/repo\nnpm install github:user/repo#30a8274b\n. ",
    "thangngoc89": "I suggest we resolve the commit hash via Github API and download tarball. This would be better, involving with git is complicated.\n. Your master branch \nhttps://github.com/rstacruz/pnpm/archive/21e71acf598bdf78eaf9d5915e0f5d2fceb8acb8.tar.gz\nWe can replace commit hash with brach name\n. Related to this. https://github.com/rstacruz/pnpm/issues/122\nHappens all the time, randomly\n. ",
    "dbkaplun": "Just ran into this issue. It seems I can't use pnpm to install these dependencies so I think this is a blocker. Should pass through to npm, at least until native git support is added.\n. ",
    "geekguy": "@zkochan If we point to some to some github commit hash, pnpm doesn't work properly.\nExample:\njson\n{\n\"somepackage\": \"git://github.com/geekguy/somepackage.git#133a02\",\n}\nWhen we do pnpm install, it throws following error.\n! failed to clone repository from git+ssh://git://github.com/geekguy/somepackage.git\n        Cloning into '/tmp/deploy/test/node_modules/.store/git+ssh:..\nwarning: Could not find remote branch 133a02 to clone.\nfatal: Remote branch 133a02 not found in upstream origin\nIs there any workaround for this?\n. @zkochan : Interestingly it worked after I removed .git from the link. It's not happening any more (even with .git). I ll update if I am able to reproduce it.\nThanks.\n. ",
    "shouze": "@rstacruz I have a use case that would lead pnpm to manage global installs anyway.\nIf you use docker containers, the only way ATM to have node_modules located outside of your project/app source code is global install (not a big problem as you're running a dedicated container for you app). This trick permit to mount a shared volume of your source code during your local development process without the pain & slowness of shared volumes during node modules installs.\nSo, if I can help in any way to make global installs into pnpm a reality tell me what to do. There's also a ---prefix option related to this feature I guess, no?\n. ",
    "reubano": "Any way you can provide a better error message? I just pnpm install -g coffeelint today and got this:\n! The package's modules are from store at /Users/reubano/.pnpm/node_modules/.store and you are trying to use store at /Users/reubano/.pnpm/.store/nested\nNot very useful IMHO. . Thanks @zkochan!. Just tried it again for the 3rd or 4th time and now its working... go figure.. ",
    "patrickheeney": "I think a better solution would be drop a .node_version file when initially installed. If the current node version is a mismatch, attempt to instruct the user to re-install the modules as a convenience. I don't know that you have to do anything at all here though. \nUpgrading from npm2 to npm3 would require re-installing them as well. The node-sass error is pretty self explanatory as to what happened. Adding @node4 makes it so you already will have to re-download the packages anyway, but adds more complexity to the system and symlinks. \n. What is needed for this?\nI am not sure if this right spot, could be as simple as:\n// recurse down to dependencies\n    .then(_ => log('optional dependencies'))\n    .then(_ => installAll(ctx,\n      fulldata.optionalDependencies,\n      join(paths.tmp, '_', 'node_modules'),\n      { keypath: pkg.keypath.concat([ pkg.fullname ]) }))\n. @rstacruz Can you chime in here? Will the code above work?\n. +1. I was just going to attempt implementing this myself and noticed this issue. I have an app made up of a ton of decoupled modules that I was looking for a better way to manage. A vast majority of them share the same dependencies. A cache is critical to avoid network requests, keep it fast, offline installs, and keeping developers happy. \nIs there anything preventing @misterbyrne commit from merging?\n. It looks like fsevents is an optional dependency https://github.com/paulmillr/chokidar/blob/master/package.json#L42 so you would have to install that into your project for it to be used. pnpm install fsevents --save-dev. \n. pnpm doesn't flatten the directory in node_modules, but rather in node_modules/.store so the folders will definitely look different. I don't believe react-native packager supports symlinks yet so you will most likely need to explore the workarounds in facebook/react-native/issues/637.\n. Same thing for hosted packages:\n```\n  bootstrap git@github.com:twbs/bootstrap.git#v4.0.0-alpha.2        ERROR \u2717\n! git@github.com:twbs/bootstrap.git#v4.0.0-alpha.2: hosted packages not supported\n```\nI can manually install it into the .store and symlink if pnpm does not fail hard and instead just warns.\n. I don't know if this is related to the first one, but this is a different app and some errors:\n```\n ! ENOENT: no such file or directory, open 'node_modules/.store/lodash.tostring@4.1.1/_/package.json'\n! ENOENT: no such file or directory, open 'node_modules/.store/is-callable@1.1.2/_/package.json'\n! ENOENT: no such file or directory, open node_modules/.store/inherits@2.0.1/_/package.json'\n```\nWith the following:\n\"dependencies\": {},\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.5.1\",\n    \"babel-core\": \"^6.5.2\",\n    \"babel-eslint\": \"^5.0.0-beta8\",\n    \"babel-plugin-transform-runtime\": \"^6.5.2\",\n    \"babel-polyfill\": \"^6.5.0\",\n    \"babel-preset-es2015\": \"^6.5.0\",\n    \"babel-preset-stage-0\": \"^6.5.0\",\n    \"babel-register\": \"^6.5.2\",\n    \"babel-runtime\": \"^6.5.0\",\n    \"eslint\": \"^2.0.0\",\n    \"eslint-config-standard\": \"^5.1.0\",\n    \"expect\": \"^1.14.0\",\n    \"fs-promise\": \"^0.4.1\",\n    \"glob\": \"^7.0.0\",\n    \"graceful-fs\": \"^4.1.3\",\n    \"isparta\": \"4.0.0\",\n    \"istanbul\": \"^0.4.2\",\n    \"mocha\": \"^2.4.5\",\n    \"npm-registry-client\": \"^7.0.9\",\n    \"pnpm\": \"^0.18.0\",\n    \"rimraf\": \"^2.5.1\",\n    \"semver\": \"^5.1.0\",\n    \"shelljs\": \"^0.6.0\",\n    \"yargs\": \"^3.32.0\"\n  },\nOnce it fails, I have to delete node_modules in order to try again. I assume because the .tmp file exists... it assumes it was installed correctly, and attempts to apply it again. However since it failed it results in cannot find module errors and I can't try again.\n. I still have the same problem(s), but flow-bin didn't error for me. Try the first package.json I supplied in the original post and it is very likely to fail on one of the dependencies. \n```\n$ npm -v\n2.14.12\n$ node -v\nv4.2.6\n```\nInstalled it via nvm on osx 10.11.3. \nErrors:\n```\n ! ENOENT: no such file or directory, open 'node_modules/.store/inflight@1.0.4/_/package.json'\n! ENOENT: no such file or directory, open 'node_modules/.store/repeat-string@1.5.2/_/package.json'\n``\n. @zkochan Working for me onv0.26.1`. Will close this and re-open if I run into it again. Nice work!\n. Related to #125 . I would be interested to see how you are using it and would love your input on the API to support this. \n. ",
    "andreypopp": "That would be rad. I constantly forget to install fsevents and my battery drains fast.\n. Still getting this sometimes (but super rarely) on 0.25.0.\n. I'll add tests if proposed impl is ok.\n. > IMHO it should handle git packages https://docs.npmjs.com/files/package.json#git-urls-as-dependencies\nIt doesn't do that, it is specific to packages hosted on github.\n. @mdreizin any progress with you take on implementing the feature? I'd like this feature to be present in pnpm (either mine or other impl, doesn't really matter).\n. Awesome! Thank you.\n. What do you mean by hosted packages, @PeterDaveHello?\n. GitHub hosted packages are supported. What's pnpm version are you using?\nOn Tue, 30 Aug 2016 at 13:40, Peter Dave Hello notifications@github.com\nwrote:\n\non GitHub? It's the wording from pnpm's output, I'm not sure the precise\nwording.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/210#issuecomment-243401043, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAB3gmWH1jmQrjodf8NMlfpYzY52zw00ks5qlAivgaJpZM4IpB7I\n.\n. Can't repro, I used your package.json and this is what I got:\n\narray-difference\nbabel-core\nbabel-polyfill\nbabel-preset-es2015\nbabel-preset-es2015-ie\nbabel-preset-react\nbabelify\nbower\nbrowserify\nbrowserify-global-shim\ncaret-position\nchunk-array\nclassnames\ncompose-dataset-shim\ncustom-event-polyfill\nelasticlunr\nemail-validator\nfuse.js\nfy-shuffle\ngulp\ngulp-babel\ngulp-bower\ngulp-browserify\ngulp-chown\ngulp-concat\ngulp-concat-css\ngulp-debug\ngulp-hologram\ngulp-livereload\ngulp-notify\ngulp-rename\ngulp-sass\ngulp-sourcemaps\ngulp-svgmin\ngulp-svgstore\ngulp-uglify\ngulp-uglifycss\ngulp-util\nhe\nknuth-shuffle\nmoment\nnode-sass\nobject-array-converter\nobject-to-array\nqwery\nreact\nreact-addons\nreact-dom\nreact-spawner\nreactify\nreqwest\nrun-sequence\nscriptjs\nsplit-array\nvinyl-source-stream\npnpm as of 0.21.0\n. Roadmap says git hosted while #199 is about github hosted packages.\n. It could be multiple characters, right?\n. Awesome! Will there be a lockfile before 1.0?. This is super cool. (I played a bit with the similar schema for a Node.js CLI app I've been working on, it's unfortunate npm doesn't support such use case natively).\n. There's another issue with bundledDependencies: it seems it only works for direct dependencies, transitive dependencies (dependencies of dependencies) will still be installed as usual.\nAnother way it to publish shrinkwrap info so npm don't have to resolve packages but just download tar balls.\nI really want to test the approach taken in this PR first though as it seems like the most efficient.\n. Awesome, thanks @pnpm team!\n. Will this be updated to 0.29.0 or #310 published? I'm very interested in fast bootstraps.\n. What's the ETA for this fix? Can I help somehow?\n. Tested it on a project which has deps hosted on a github: webpack failures gone.\n. Thanks!\n. ava from my limited experience with it:\n- cons: poor string diff, almost totally unreadable\n- cons: slow startup (parallel election pays off only for really large test suites)\n. I can have a look into it a little bit later.\n. It's green now!\n. Ha! Interesting. I'll do that\n. @zkochan ok, now it looks much cleaner, thanks!\n. Nice logo!\nSuper stoked to see pnpm evolving with such pace!\n. Probably needs an option to disable that. Not needed on CI for example or when pnpm is installed and used via programmatic API.\n. > used via programmatic API\nIt's in bin/pnpm.js so this case is irrelevant, sorry\n. I think what npm v3 does is wrong: it makes it safer to rely on\ndependencies of dependencies which is never a good thing (consider the case\nwhen such dependency changes \u2014 because you don't specify the exact version\nit might break your app). pnpm does the right thing, I believe.\nOn Sun, 4 Sep 2016 at 14:09, Zoltan Kochan notifications@github.com wrote:\n\nLets see what the other maintainers will say. my-app clearly has to\ndepend on gulp if it uses it in code... and seems like you agree on that.\nIt just happens to be that it works on npm3.\nFrom the other side, this shouldn't be hard to \"fix\" on the pnpm side...\n@rstacruz https://github.com/rstacruz, @iamstarkov\nhttps://github.com/iamstarkov, @andreypopp\nhttps://github.com/andreypopp what do you think?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/346#issuecomment-244596932, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAB3grkY1vlJQ9clDQrrPvR5PzsLDaMVks5qmqbKgaJpZM4J0ejf\n.\n. I'm all for static typing, but I'd rather go with Flow as it has more powerful type system and thus much better chances to catch an error.\n\nAs a con for both TypeScript and Flow is that build process becomes necessary: you can't run code before transpiring it (well, you can with flow-node for example and I think something like this exists for TypeScript).\nI could make a PR with such build process incorporated and some of the modules annotated with Flow to see how it feels.\n. @Grawl please follow the guidelines provided in the error message. If you don't use custom store-path setting then just do rm -rf node_modules/.\n. @Grawl no\nIt wasn't clear to me if node_modules/ were populated with the same version of pnpm.\nNow it looks like pnpm uninstall corrupts the store (by writing in the old format?). I can confirm this behaviour.\n. @zkochan this is awesome! Going to steal this approach for my own Node CLI tools. pnpm now installs super fast.\n. @Meroje webpack supports it https://github.com/webpack/webpack/issues/2937\n. Does it mean that if you remove local store (or some part of it) then corresponding packages from global store are also removed?. Interesting, are you on macOS? Also I'm not sure hardlinks to directories are allowed on Linux.. @zkochan ah, ok then, I misunderstood. Tried pnpm 0.47.0 with CRA and got a few failures first related to eslint plugins and then webpack wasn't able to find react, react-dom.. Nope, macOS. Let me try 0.47.1.. Still no luck with eslint related packages. Also second run of pnpm produces some weird output with undefined instead of packages' versions:\n\nRepro:\n% create-react-app myapp\n% cd myapp\n% rm -rf node_modules\n% pnpm install\n% npm start\n After I install eslint related packages manually it starts working! And btw node_modules weights just 132MB (!!!) \u2014 that's very good (see stats for npm/yarn).. Solely my opinion: packages should specify in dependencies (dependencies or peerDependencies) what they use in code. But we need to see if the case popsicle-retry is repeating across the ecosystem.. OT: If we get plugin API in we could say that pnpm is about programmable npm installs also. :-). Looks like the issue manifests itself only with --preserve-symlinks activated. Do we require it for recent Node versions? Looks like it works without it also.\nThat's how flamechart looks for compiling a single file with Babel, Node's algo with the presence of --preserve-symlinks looks suboptimal:\n\n. Yes, much faster that way. What's the story with --preserve-symlinks? Is it required for pnpm to work correctly? Is it going to be deprecated by Node?\nHm... I still see Jest's runtime suffer (make test).. @zkochan yes, ideally all code which manipulates store should be written that way.\n\nAlso I fixed the test written for this use case. I'll add the fix to this PR\n\nThanks!. Awesome! Thanks!. Yes, this is unfortunately true, but package resolution happens not so often \u2014 only when you add/remove/upgrade dependencies. Otherwise you just install from the shrinkwrap, right? Also we won't make CUDF the default probably.. Alright, added a test as well.. Funny that docpress now fails because of that broken symlink. I'll remove it and leave it only in the tarbal.. To be honest, I don't know if I want this to be in pnpm \"core\" \u2014 that's a deviation from npm and while it is useful it is an additional code to maintain. What if we design an API for plugging in resolvers and then publish this as a pnpm \"plugin\"?. Closing this. Will open a new one against recent codebase when we finish #559 discussion.. What I like about this is that this PR removes code.. Alright, let me describe some features I want to see in a package manager of my\ndream. To be honest, pnpm looks like it is so close!\nInstallation of git hosted by packages using version range\nThis is what #557 is about.\nBasically I want to install packages using a version range from git repos:\npnpm install facebook/react#^15.0.0 rstacruz/pnpm#>=1.0.0\n\nNot just github, any git repo:\npnpm install https://gitlab.camlcity.org/gerd/lib-findlib#^1.7.1\n\nThis is useful because I can easily use a git hosting as my own package registry\nwithout deploying additional software like sinopia. Right now the only way to\nuse git hosted packages is to specify exact versions (as git refs).\nI think this can be solved by allowing configuring custom resolvers (see below\nfor another use case).\nInstallation of git hosted packages placed within a directory\nIn monorepos there are multiple packages per repository \u2014 in different\ndirectories. I want to be able to install them directly from a repository. For\nexample:\npnpm install babel/babel/babel-generator\n\nAs far as I know yarn is planning ship the similar functionality soon.\nI think this can be solved by allowing configuring custom resolvers (see below\nfor another use case).\nCustom resolvers\nI want to be able to override resolution algorithm.\nRight now I'm building a package manager for esy which is a meta build\nsystem for compiled languages. The first iteration focuses on OCaml. OCaml\nalready has its own package manager called opam. The motivation of esy vs. opam\nis another topic but shortly \u2014 we want the sandoxed nature of npm workflow to be\napplicable to OCaml development \u2014 opam is more like Python's virtualenv.\nWhat I did in my fork of pnpm is I overrided the resolution for @opam/* scope\nwhich fetches packages directly from opam registry and generates package.json\non the fly. It works fanstastic! This is due to great pnpm architecture. Ideally\nI'd want to get rid of the need to maintain pnpm fork and just plug in a\nresolver which intercepts @opam/* installation requests.\nPluggable package constaints solvers\nThis is not about custom resolvers, a bit more complex. See #552.\nAs I described in #552 pnpm needs to fetch metadata (think package.json) for\nall versions of all packages which are found during installations.\nFor example if we are installing react we need to fetch all meta about all\nreact versions and for each dep in each version we should fetch meta too,\nrecursively. So the resolution algorithm changes dramatically. That's a\ndownside.\nThe upside is that with CUDF we can express quiet complex predicates and ask\nsolver to find a solution, for example:\n\n\nfind a set of packages for such and such versions which compile on windows\n\n\nfind a set of packages for such and such versions, do not allow multiple\n    versions of the same package\n\n\nfind a set of packages for such and such versions, allow installing beta\n    versions\n\n\nfind a set of packages for such and such versions which have the lowest\n    number of bugs (if only we had the number of bugs available per versions!),\n    the highest number of github stars, so on...\n\n\nInstallation of packages without package.json\nI'd like to use npm workflow to manage Vim plugins. Right now the standard way\nto manage Vim plugins is to use one of the numerous package managers like\nvim-plug or neobundle which install plugins from github repos. The problem is\nthat there's no way to specify dependencies between such plugins \u2014 plugin A\ncan't say that it depends on plugin B \u2014 user should install both A and B\nmanually even if she only uses A explicitly.\npnpm already supports installing from github repos but most of the plugins has\nno package.json available and this is where it fails.\n. Yep, custom resolvers API is the closest thing we can get. But CUDF is the most fruitful feature, I think.\n\nWe can move out the current resolvers to separate packages to see what API we can support for the custom ones.\n\nNot sure about moving them to separate packages, should they be maintained separately? How hard would it be?\n. Yeah, I already have a working implementation of resolver for opam scope. Now moving it out of there and adding a plugin interface.. > I think resolvers and fetchers should be different plugins, because there are more types of resolvers that use the same fetchers. Like many resolve to tarball URLs.\nTotally agree, do you think we should refactor code to remove custom fetch function from ResolveResult? Also there's src/resolve/fetch which should probably be moved out of src/resolve dir, maybe into fetchResolution. Thoughts?. How bad is the slowdown? Just wondering if it's worth complicating the resolver.. > When I've read lifecycle my first thought was the script tasks, like install, postinstall, prepublish, etc.\nGood point. What do you think of names of hooks: packageDid*/packageWill*. The alternative would be onBefore*/on*, for example: onBeforeResolve, onResolveComplete.. > Do you think it is a good idea to rewrite the standard behavior? \nGiven that I want to extend installation in a non-standard ways \u2014 yes, in my case I want to assume that some scope is a built-in \u2014 @opam/* which fetches tarballs from OPAM registry and generates package.json on the fly. I think the same technique can be used to bridge any other package registry.. > When I've read lifecycle my first thought was the script tasks, like install, postinstall, prepublish, etc.\nOn a second thought \u2014 hooks introduced in this PR are similar to what declared in package.json. The difference are:\n\nthey are declared not by package itself but by installer which extends pnpm\nthey are more pnpm specific \n\nI even think we can add more hooks which are defined around hooks declared in package.json.. > So you want to use pnpm as a package manager for ocaml. But ocaml doesn't need the node_modules dependency structure. So you'll override the install as well?\nWe already have a build system for OCaml (Esy) which processes dependencies from node_modules/. It works well with npm and I'm looking into pnpm as a more faster installer and also for an ability to bridge another registry of OCaml packages directly with npm workflow.. Rebased on the current master, also add new hooks.. Closing this as I don't think this worth pursuing. The better way would be to have a way to re-create installation algo using high-level ops.. I've done requested changes.. I think I'm good with it.\nOn Fri, 20 Jan 2017 at 00:10 Zoltan Kochan notifications@github.com wrote:\n\nA good place to discuss shrinkwrap is this issue\nhttps://github.com/alexanderGugel/ied/issues/188 at ied. Note: I used a\ndifferent format from the one specified in the specs there, I'll make a PR\nto suggest the format I for pnpm.\nRegarding this PR, if the tests pass and you don't want to make additional\nchanges, I am ready to merge\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/pull/563#issuecomment-273899637, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAB3gtyHpJlbHR7F9p0rCn6B7wt-IPg-ks5rT9FagaJpZM4LoWno\n.\n. Hm... actually we might break current shrinkwrap format with this pull\nrequest\nOn Fri, 20 Jan 2017 at 00:12 Andrey Popp 8mayday@gmail.com wrote:\nI think I'm good with it.\nOn Fri, 20 Jan 2017 at 00:10 Zoltan Kochan notifications@github.com\nwrote:\nA good place to discuss shrinkwrap is this issue\nhttps://github.com/alexanderGugel/ied/issues/188 at ied. Note: I used a\ndifferent format from the one specified in the specs there, I'll make a PR\nto suggest the format I for pnpm.\nRegarding this PR, if the tests pass and you don't want to make additional\nchanges, I am ready to merge\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/pull/563#issuecomment-273899637, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAB3gtyHpJlbHR7F9p0rCn6B7wt-IPg-ks5rT9FagaJpZM4LoWno\n.\n. Ok, provided a backward compat for shrinkwrap. I still want to keep type in Resolution type as TS can't really differentiate different types in union without it and now resolution types are more untangled than before, I think.. Sorry for that, I thought typescript compiles it away\nOn Fri, 20 Jan 2017 at 03:26 Zoltan Kochan notifications@github.com wrote:\nMerged #565 https://github.com/rstacruz/pnpm/pull/565.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rstacruz/pnpm/pull/565#event-930016872, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAB3gtEY_AdKcpnroOMGSqEHNp9wxUMSks5rT_8cgaJpZM4Lowux\n.\n. > There is some issue with tap-diff, it seems to pass a 0 exit code when ts-node fails\n\nFWIW it's a common issue with shell, you need to run shell with -o pipefail so errors in pipes don't get swallowed:\nset -o pipefail; ts-node tap | tap-diff. Yeah, good idea too. Or we can use proper-lockfile which is being used by yarn \u2014 I didn't see such failures with yarn.. Closing this as we use proper-lockfile now.. Addressed the feedback. There're also security considerations we should take into account \u2014 the fact that a globally installed executable can be overriden by the one installed locally.. Is this enough for configuring logging output? I think we might need to expose bole, no?. >  I think we can save that document in the store, in the same directory where the different versions of the package are\nAgree \ud83d\udc4d . > Edit: of course we'll have to re-download the document from time to time\nAlso It would be good to have an \"offline\" mode where pnpm does't try to do network connectivity at all or only when meta/packages aren't available in the store. I wonder if it should be the default mode and we should do a complete re-resolve when we run pnpm upgrade?. Also I see that node_modules disappeared from the package directories in node_modules. For example node_modules/react-scripts won't have its own node_modules dir. That makes hacking on dep's sources less convenient \u2014 to change some lines of code I need to reach to .resolutions directory.. Likely will be solved by https://github.com/facebookincubator/create-react-app/pull/1291. That case is interesting \u2014 installing the package without version range:\n% pnpm install package\nThere are two cases.\n1. Shrinkwrap has no info on that package\nBasically in that case we need to generate the version range automatically for saving in package.json and shrinkwrap.yaml: for a resolution to some version x.y.z we should generate ^x.y.z automatically \u2014 that's what I believe npm and yarn do.\n2. Shrinkwrap has some info on that package but from a resolution saved not from the root current package\nIn that case it makes sense either\n\nA. to always resolve the package. But that means we can accidentally update another shrinkwrap record \u2014 not sure if it's good or bad.\nB. Try to reuse a shrinkwrapped resolution by picking the one with the \"latest\" version.. +1 for a monorepo. I think locks are needed \u2014 you do want two concurrent installations race to install the same package with postinstall hook for example \u2014 chances you end up with some broken state are big, I think.. Might be worth a separate utility function.\n. in scripts npm sets various environment variables, npm_node_execpath is pointing to the node executable.\n. You can see it by adding a dummy script:\n\n\"scripts\": {\n  \"env\": \"env\"\n}\nand then running:\nnpm run env\n. Hm... right. I'll change -target suffix to _target which doesn't pass semver validator.\nAlso I don't understand the failure on node v4, rimraf is used to remove the dir but it still complains dir isn't empty.. Sorry, messed up this PR, will open another.. I removed the ; here, can bring it back but that seems more consistent w/o it.. fs.lstat instead of fs.stat here so we don't fail on broken symlinks.. Ok, will do. Added a warning.. Yeah, sorry, I was going to bed back then already.\nI usually prefer not to dedup unrelated branches of code. In this case this is of course arguable.. This is so custom resolvers can override fetch and still specify tarball and repo.. Not sure if InstallContext is right place for this, suggestions?. packageDidFetch(spec: PackageSpec, target: string) probably can be used to check if package.json is exists and generate one if needed.. Actually I'm not sure we need a separate type for packages from npm, probably this could be just TarballResoluton. We could move pkg attr to ResolutionBase \u2014 as I understand it is there only for caching purposes.. Probably we can merge LocalTarballResolution and TarballResolution together and differentiate by URL \u2014 if it starts with file: \u2014 it's a local one.. Sorry for those changes but tsc complained for some reason.. I think we should add excludeFromShrinkwrap: boolean attribute to Resolution which controls if any particular resolution should participate in shrinkwrapping or not. Thoughts? pkg should be stripped for each resolution as it is just for caching purposes.\nThis will allow custom resolvers to store any info in shrinkwrap as needed.. I like Resolution more that ResolveResult but I can revert the naming, thoughts?. Right, good idea.. That way resolvers should return something like {resolution: Resolution, package: Package}, right?. Do you think even linked directories should be saved to shrinkwrap? . In that case we won't preserve the info in a shrinkwrap if the package should be linked or not. The question is if it's useful? I can see it being useful in a monorepo \u2014 you setup a workflow, run few pnpm link and then commit shrinkwrap \u2014 on a fresh clone you'll get everything linked for you automatically.. Ok, didn't know that.. Let's do what you suggested and then decide on further actions in a separate PR/issue.. Shrinkwrap might not be the right place for this, at least in the form it is now \u2014 mapping from version requests to exact and stable identifiers. Because if we have two A packages resolved to the same version but only want to set link-local/no-optional/no-bin-links to the one of them then we won't be able to store such info in shrinkwrap because it sees them as the same record.\nActually I thought of that before \u2014 what if shrinkwrap is not a mapping from versions requests to ids but a tree which describes/mirrors the layout of packages in a filesystems? That way we could attach options to any of the package in the dep graph. This is actually super useful for Esy as Esy would need to store info such CPU architecture for cross compilation support.. Fixed this.. I'm sure I didn't get it right \u2014 user don't see a message.... Yep, seen this but during tests they are not printed for some reason.. nit: *Options suffix is overly general and while it is used across the codebase already I think it can be dropped. Just a nitpick though.. nit: Actually could those types be declared inline in TS?. ",
    "brianreavis": "Yeah, --userconfig is just NPM's flag for explicitly setting a specific path to a npmrc file. I've been using it because I don't store it in a home directory. And right: pnpm install --config custom_npmrc should work the same way :) Haven't tested it... but yea! Should work. Was just wondering if this manager aims to be sort of 1:1, or if it's just best to note that --config is the way to do it with pnpm and move on.\nThe alternative is we open a PR on rc to support some some way of reading process.argv['user-config'] vs process.argv.config\n. ",
    "danielbayley": "As mentioned in #695, pnpm should also respect $NPM_CONFIG_USERCONFIG as npm does.. @zkochan Yeah ok, as you can see I filed an issue there.\nSo pnpm --global uninstall/unlink/rm should additionally remove the symlink from wherever npm bin -g actually is that should have been put there on --global install right?\nOk cool, so #40 is the separate issue for --userconfig and $NPM_CONFIG_USERCONFIG\u2026 and so I think keep this one for the above problem\u2026\n\nI agree that we have to have the same API as npm\n\nYeah, pnpm should just be a drop-in replacement for npm as far as configuration is concerned!\n\nWhat do you mean? The default configs for local-registry, etc. are bad and you cannot override them?\n\nIv'e created a separate issue (#696) for this, and elaborated on what the problem is there.. ",
    "davej": "I think all that's missing is support for other install types:\n- @scoped packages (npm i @rstacruz/tap-spec)\n- tarball release packages (npm i http://foo.com/tar.tgz)\n. Hey @rstacruz, could you take another look at this now. By the way, tests will break if the @rstacruz/tap-spec module is updated to a new version.\n. @rstacruz, yeah codebase is very good, didn't take me too long to ramp up. Makes sense to limit the scope to npm install too instead of trying to reimplement all of npm. I would even consider dropping --global support to be honest.\nWould be good to get some CI performance benchmarks in there to make sure that we're keeping track of performance as the codebase evolves.\n. Yeah, unless there's a simple way to do it that is 100% compatible with npm then I'd drop it. Day-to-day I don't do a whole lot of npm install -g so it's performance doesn't stress me out like local install does.\n. Woah, hold up, I just noticed that I overwrote some existing tests with this pr :)\n. I guess we can manually add them back in. I think what happened is that I was editing the file in my text editor when I updated to your rebased branch.\n. Yup. One other thing that I noticed, read-pkg-up does a lot of normalization, I'm not sure that we want all of it?\nFor example optionalDependencies get added to dependencies: https://github.com/npm/normalize-package-data#what-normalization-currently-entails\n. Do you want me to fix this pr, add the overwritten tests and squash it or will I let you fix it?\n. ok\n. Ha, oops. Copy/paste fail.\n. Working on this.\n. Yes, I agree, don't support it. I actually much prefer pnpm's way of deduping compared to npm3.\n1. It makes for a neater node_modules folder. This becomes annoying for doing quick hacks and debugging, I actually made a module to help with this but pnpm's approach is nicer again.\n2. npm3 allows easy direct access to all nth-depth dependencies through the project root. For example, you can do require('lodash') without specifying it as a dependency in package.json and it will probably work because some deep dependency is using lodash. I think it's more desirable that this should fail.\n. My $0.02 is to keep the source clean for the moment and use the ES6 features that are available. Could always do a babelified mirror for older versions of node if there's a demand for it.\n. Yup, I prefer the idea of doing this for a node 0.x fork though, and keeping the main lib unbabelified.\n. Babel can polyfill Promises and Object.assign too by the way. Although perhaps it's best to keep bluebird for the reasons you mentioned.\n. > using require('babel-polyfill'), afaik. I'd rather keep that out :)\nWith Babel6, you selectively choose the polyfills so it's not much different than the object-assign polyfill currently being used. https://babeljs.io/docs/plugins/transform-object-assign/\n. Just going to lodge a :-1: on babelifying the main lib. :-)\nI'd prefer to keep the node 0.x version as a fork. Babel adds a layer of abstraction (albeit lightweight) to debugging and stacktraces.\n. I suppose sourcemaps negate that a little bit but I still prefer the idea of keeping the main lib without it.\n. > how about publishing a babelified version as \"pnpm-legacy\"?\nYup, that's what I meant. Fork was probably a confusing word to use. :-)\n. > oh there's also --retain-lines, how aboout that one?\nI'd prefer to just use sourcemaps over --retain-lines, if it was between the two.\n\njs\ninstall = isNodeVersion4orAbove\n  ? require('lib/cmd/install')\n  : require('lib.es5/cmd/install')\n\nAre you bundling two versions of the lib in that case (es5 and es6)? My preference would still be to have a separate pnpm-legacy module.\n. > Does (modern) node.js support source maps?\nYup\n. > yeah. my only concern with publishing a pnpm-legacy module is that it isn't putting the users ahead first: it's essentially pushing the burden on the user.\nYeah, I look at it another way. You would be treating node >= 4 as a first class citizen, while still providing a path for Node 0.x users. The marketshare for 0.x will only continue to diminish over time. You can always decide to move the legacy version into core in the future if there's a demand... but it's much more difficult to move the other way because there will probably be people relying on 0.x support.\nJust my 2 cents, obviously it's your module and your call though :-)\n. Also, you can always console.log a descriptive error message telling users to install pnpm-legacy when run on node 0.x. It's not much of a roadblock really.\n. Yeah, but the nice thing is that pnpm-legacy would be phased out over time. There may be a demand for it now but perhaps not so much in a couple of years time. And when demand goes away then you're not left in a position where you still need to transpile to support 1% of the user-base who are still using node 0.x.\nAnyway, I see pros and cons both ways and my opinion is more of a personal preference really :-)\n. @rstacruz: Haven't tried it but my guess is that you could add something like this to your prepublish script\njs\n{\n  \"name\": \"pnpm\",\n  \"scripts\": {\n    \"prepublish\": \"node_modules/babel-cli/bin/babel.js . --out-dir babel && cd babel && npm publish\"\n  },\n  \"babel\": {\n    \"presets\": [\"es2015\"] // or whatever\n  }\n}\nThe idea is that the babel dir would have a package.json file for pnpm-legacy. The babel dir would also be ignored when publishing npmn (because it's not part of the files array).\nYou may need to nest the dirs if babel overwrites the package.json in the babel directory but I think it should basically work.\n. Another thought...\nAdd the devDeps and the babel presets to ./babel/package.json instead. Would be a lot cleaner. Your postpublish would be something like \"cd babel && npm install && npm publish\" then. You could do all the babel stuff in pnpm-legacy instead.\n. Cool, no problem. \nBy the way, the only reason that you would need to maintain a second version of package.json is because of the issue with the got dependency. That makes everything less straight-forward.\nOtherwise you could just add pnpm as the only dependency to pnpm-legacy and use babel to transpile node_module/pnpm but not the sub-deps (it's a one-liner). Your index.js would just reference the babelified node_modules/pnpm dir.\nI guess you could also transpile the got module to get around maintaining separate package.json files... Anyhow, sounds like decision is made. :-)\n. Just a final thing, it's best to use external source maps instead of inlining if possible. It's minimal but there is a small performance hit. AFAIK, *.map files are usually not read unless there is a stack trace so it's more efficient to have separate files.\n. @patrickheeney looks good, only thing I would add is that it would be nice if it exposed an EventEmitter to track progress rather than logging to console. Perhaps even better might be a generator but that could be more difficult to implement.\n. @zkochan: Finally got around to using this API. Works nicely! Only thing that is missing (IMO) is to return the installed package's info. So, for example, I could find out which version was actually installed.\n. Actually I'm not sure this is necessary as I can just provide a custom log function from the ctx object when using lib/install. Feel free to close this.\n. @patrickheeney something like this:\n``` js\nimport install from 'pnpm/lib/install';\nimport save from 'pnpm/lib/save';\nconst ctx = {\n   root: PROJECT_DIR,\n   store: join(PROJECT_DIR, 'node_modules/.store'),\n   // Provide your own log function to track progress\n   log: (a, b) => (c, d) => console.log(a, b, c, d)\n };\ninstall(ctx, 'some-package', join(PROJECT_DIR, 'node_modules'))\n   .then(dep =>\n     save({ path: PROJECT_DIR + 'package.json' }, [dep], 'dependencies')\n       .then(() => {\n         // 'some-package' installed and saved as dep in package.json\n       })\n   );\n``\n. @zkochan awesome!\n. This is awesome. This was the last feature that was holding me back from making pnpm my default!\n. No, it means that I'm editing thepackage.json` from a different app and pnpm reverts the change because of the cache.\nFor example:\n1. Install a module using pnpm/lib/install and save it with pnpm/lib/save.\n2. Then use a third-party app or manually edit the package.json in some way.\n3. Install another module using pnpm/lib/install and save it with pnpm/lib/save.\n4. The manual change to the package.json that I made in (2) is reverted because of the cache being used during the save operation in (3).\n. > I see, but where do you call emptyCache?\nI would call emptyCache after my app changes the package.json file.\n\nMaybe lib/save should read the current package.json file, extend it and then save it.\n\nYes, that sounds like a cleaner solution to me. \ud83d\udc4d\n\nOr maybe it should compare the version that was cached and throw an exception if the current file in the file system doesn't match with the cached one\n\nThis is probably fine when using the cli but if pnpm is used programmatically in a long running process it's unrealistic to expect the package.json to not have changed. Then again, maybe this is not a use-case that pnpm wants to support?\n. Would something like this work: https://github.com/jonschlinkert/extend-file\n``` js\nvar file = require('extend-file');\nfile(pathToPkgJson, { dependencies: { 'babel-core': '^6.10.4' }});\n```\n. I'm not sure how often the cache is read. Perhaps it's just as easy to removing all caching from pkgJson, if it's only going to be read a couple of times anyway?\n. \ud83d\udc4d If you want a PR or anything then let me know. :)\n. Any particular reason why this wasn't merged or was it just out of scope?\nedit: oh, looks like it was merged from a separate commit.\n. Sort of, I wouldn't use the word 'installs' though. An Electron app is just a binary, it's basically Chromium + Node + a few other things. But yes, Electron provides it own context for Node and doesn't have anything to do with the system-installed Node.\n. I haven't tested it but it seems like npm prefers to use the current node interpreter in child scripts:\njs\npathArr.push(path.dirname(process.execPath))\nIt also sets the env.NODE var for child processes.\n. Cool. Do you want me to see if I can put a PR together?\n. Amended.\n. Also seeing this (albeit, I'm starting @pnpm/server programmatically). Running pnpm server stop does not free up the address.. Yeah, you're correct. Have a better grasp of what I'm trying to do now. I'll pick this up tomorrow, I have to head out the door now.\n. ",
    "rykov": "Michael from Gemfury here.  Can you talk a bit about how this would work if we support it on our end?  Are you sending the version range verbatim from package.json's dependencies map such that we need to support all cases here: https://docs.npmjs.com/files/package.json#dependencies?\n. ",
    "misterbyrne": "Closing since this is working now\n. :+1: very impressive work by the way! :beers: \n. I've made some changes related to your comments :smile: \n. Great stuff! No complaints from Ember now! :raised_hands:\n. No probs - I'm very excited about this project! \ud83d\ude04 Awesome work!\n. :+1: I'm not a fan of having sub-dependencies so prominent anyway.\n. I didn't push the branch :grimacing: \nIt's hacky, but I'll push it when I get home from work so you can have a look.\nI'll get timings on the regression too.\n. Good news! The performance regression isn't bad at all, around 3 secs - I don't know what happened before.\nAlso, it turns out that upping the concurrency had roughly the same effect as using locally cached meta-data. However, using locally cached tarballs does help quite a bit. Here are some timings.\n- Normal v0.13.0 with concurrency 9999: around 28s - although varies wildly because we use a few large packages and the npm registry's transfer rate can change quite a lot  (2110 requests to the registry, 1696 unique URLs)\n- Read everything from the cache: around 19s (no requests to the registry)\n- Only use cached tarballs: around 22s (1344 metadata requests to the registry - 931 unique URLs for 631 packages)\nThere commit is here if you want to see what I did: https://github.com/misterbyrne/pnpm/commit/dc1ec97934cd48b1da99d2688fc9143107f6edc9\n. I haven't had a chance to look at this until today. I did try using the finish event on the tar.extract stream instead - and the problem still happened. I tried adding a load of logging by monkey patching the emit function on file streams in tar-fs, the http response stream and instrumenting pnpm a bit more, e.g.\nJavaScript\nfunction logEmits(emitter, name) {\n  var oldEmit = emitter.emit;\n  var debug = require('debug')('emit')\n  emitter.emit = function() {\n    debug('%s %o', name, arguments[0])\n    oldEmit.apply(emitter, arguments);\n  }\n  return emitter;\n}\n...and then managed to get it to fail (using a high concurrency value). grepping for the interesting events...\npnpm:install installing parseurl@~1.3.1 +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_ 'pipe' +0ms\n  emit http://registry.npmjs.org/parseurl/-/parseurl-1.3.1.tgz 'entry' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_ 'entry' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/package.json 'pipe' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/package.json 'open' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/package.json 'prefinish' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/package.json 'finish' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/package.json 'unpipe' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/package.json 'close' +0ms\n  emit http://registry.npmjs.org/parseurl/-/parseurl-1.3.1.tgz 'entry' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_ 'entry' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/README.md 'pipe' +1ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/README.md 'open' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/README.md 'prefinish' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/README.md 'finish' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/README.md 'unpipe' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/README.md 'close' +0ms\n  emit http://registry.npmjs.org/parseurl/-/parseurl-1.3.1.tgz 'entry' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_ 'entry' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/LICENSE 'pipe' +8ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/LICENSE 'open' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/LICENSE 'prefinish' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/LICENSE 'finish' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/LICENSE 'unpipe' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/LICENSE 'close' +0ms\n  emit http://registry.npmjs.org/parseurl/-/parseurl-1.3.1.tgz 'entry' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_ 'entry' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/index.js 'pipe' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/index.js 'open' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/index.js 'prefinish' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/index.js 'finish' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/index.js 'unpipe' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/index.js 'close' +0ms\n  emit http://registry.npmjs.org/parseurl/-/parseurl-1.3.1.tgz 'entry' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_ 'entry' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/HISTORY.md 'pipe' +1ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/HISTORY.md 'open' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/HISTORY.md 'prefinish' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/HISTORY.md 'finish' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/HISTORY.md 'unpipe' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_/HISTORY.md 'close' +0ms\n  emit http://registry.npmjs.org/parseurl/-/parseurl-1.3.1.tgz 'prefinish' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_ 'prefinish' +0ms\n  emit http://registry.npmjs.org/parseurl/-/parseurl-1.3.1.tgz 'finish' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_ 'finish' +0ms\n  emit http://registry.npmjs.org/parseurl/-/parseurl-1.3.1.tgz 'unpipe' +0ms\n  emit /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002/_ 'unpipe' +0ms\n  pnpm:install symlinkSelf parseurl +0ms\n  pnpm:install installing parseurl@~1.3.1 +0ms\n  pnpm:install /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002 => /Users/adam/src/blog/node_modules/.store/parseurl@1.3.1 +1ms\n  pnpm:install /Users/adam/src/blog/node_modules/.tmp/c4d53b58-6565-4451-b3d0-b75994670002 => /Users/adam/src/blog/node_modules/.store/parseurl@1.3.1 DONE +0ms\n ! ENOENT: no such file or directory, open '/Users/adam/src/blog/node_modules/.store/parseurl@1.3.1/_/package.json'\nSo we can see that the file's stream has been closed (well, has emitted close). Out of interest I tried changing the rename to renameSync and I could still get the error.\nIs anyone able to reproduce at will?\n. The thing is that gem fury supports the undocumented requests (by proxy) for anything public. The ratio of private/public packages is pretty low in most cases so allowing gem fury to 404 and failing over to the npm style request then seems perfectly okay to me - faster even because of the reduced payload size for most responses (public packages).\nMaybe it would be better to always use the npm style resolution for dist tags (to avoid scope workarounds etc). And use the faster undocumented requests for everything else - allowing a 404 to result in a fallback to the npm style resolution. Sounds like a win-win to me :)\nAlso if bandwidth is an issue, registries do etags properly so you could cache on disk like npm does and include the relevant etag in any subsequent requests - the resulting 304 will have no body!\n. Possibly related to #78 \n. Awesome! \ud83d\ude04\nOn Tue 22 Mar 2016 at 05:47 Kostya Esmukov notifications@github.com wrote:\n\nIt rocks! Drastically reduced my npm install times.\nNo problems with the new version by far, everything is smooth.\nThank you fellows!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/pull/138#issuecomment-199647343\n. \n",
    "PeterDaveHello": "Sorry, I am so careless that I forgot it, just updated, thanks.\n. Anything I need to change now?\n. Thanks, seems it's not in the help message, will try now.\n. I try to add it in #180, is it acceptable? I'll be good to have it in the help message :)\n. on GitHub? It's the wording from pnpm's output, I'm not sure the precise wording.\n. It's a \"28 May\" opened issue, I'm using the latest pnpm now and didn't install a hosted package recently, I'll try it later, thanks!\n. Thanks @zkochan \n. ",
    "jsumners": "I routinely do an npm install foo in an empty directory to try out a package. This is functionality I expect to work in any package manager.. I vote for npmrc. Additionally, it would be great if resolution worked in the same method as traditional Unix configuration files: local > user > system (see https://www.npmjs.com/package/nixconfig).\nConsider this situation as a reason for supporting the feature:\n\npre-commit is not working correctly when installed into a fresh project via pnpm -- https://github.com/observing/pre-commit/issues/121\nA PR to fix the situation is lying dormant -- https://github.com/observing/pre-commit/pull/122\nI have the fix published to @jsumners/pre-commit\nI need this fork installed in any project that uses pre-commit (of which I have numerous) until such time as upstream fixes the issue\n\nIn this situation it is:\n\nToo much work to add a pnpmfile.js to every project dependent upon pre-commit\nToo much to ask collaborators to put up with just to satisfy my desire to use pnpm instead of npm\n\nHaving a global file will alleviate the whole situation.. That will be fantastic, but are you saying this will not be supported:\n\n<project>/pnpmfile.js\n~/pnpmfile.js\n~/pnpmfile.js is loaded and then <project>/pnpmfile.js is loaded, potentially overriding settings from ~/pnpmfile.js. https://github.com/isaacs/own-or-env/pull/2. I don't want the file at all.. Just went to look at the code to investigate fixing this myself. Unfortunately I'm not a TS person.. In my ~/.npmrc I have package-lock=false that disables npm from looking for, or creating, a lock file.\n\nEdit: I think that's not entirely true. I also have save=false.. Excellent. Thank you for implementing this.. I'm seeing this bug show up in non-global installs even when the npmrc lines are commented out. For example, if I have a project with dependencies already installed, but I run NPM_CHECK_INSTALLER=pnpm npm-check -u to update dependencies then all currently installed dependencies are removed and the newly updated ones are installed.. Why wouldn't the solution be to ignore the shrinkwrap completely?. Thank you.. Has 1.32.1 been published to npmjs.com? I'm still getting 1.32.0 from them.. That's working.. Until this issue is fixed upstream, you can use the feature introduced in #1106 to solve this.\n\nnpm set pnpmfile ~/.pnpmfile.js\nAdd the following to ~/.pnpmfile.js\n\n```js\n'use strict'\nmodule.exports = {\n  hooks: {readPackage}\n}\nfunction readPackage (pkg, context) {\n  if (pkg.name === 'pre-commit') {\n    delete pkg.dependencies['pre-commit']\n    pkg.dependencies['@jsumners/pre-commit'] = '1.2.2-fork.1'\n    context.log('pre-commit => @jsumners/pre-commit')\n  }\n  return pkg\n}\n```\nIt could be tweaked to check for a maximum (hopefully the currently published) pre-commit package. But given the lack of movement around the issue upstream, I don't think it's worth it.. I find myself working in some monorepos now and pre-commit does not work with them. I think husky would, so it's on my todo list to evaluate. It's good to hear it will support pnpm.. Awesome. Thank you.. FYI: this works great.. I understand the idea behind removing modules that are not referenced in package.json, but there situations where it is very frustrating. Consider an application that is itself a platform that accepts modules as plugins to provide functionality. These plugins are not necessarily required for the application to provide baseline functionality, so they don't belong in package.json; they merely need to be added by the user of the application such that the application can find them.\nI think a package manager should not assert \"the right way\" to do things. It should merely be a tool for the developer to manage packages and stay out of the way.. Except you have to explicitly disable optionalDependencies; so they are not very optional. Also, the scenario described isn't a pnpx type of scenario. An example is https://github.com/jscas/jscas-server . If someone decides to run it by cloning the repo, instead of following the \"as a dependency\" guide, then they will end up doing something like pnpm install jscas-ad-auth to install a plugin. If the package.json gets updated when they do this, then they cannot do a git pull to update to the latest version of the core software because the repo will have changed. And pnpx won't help because jscas-ad-auth is meant to be loaded by the jscas-server software via configuration.. @bugs181 no. Peer dependencies are a list of known modules that may be installed to enable extra functionality simply by being installed. The situation I described 1) the primary module author has no way of knowing all plugins that will ever exist and 2) each new plugin requires extra configuration and is not simply an \"install and done\" situation.. I really think merging the result of the different files in a well defined order would be best.. Seems a fair compromise.. ",
    "etamponi": "Running:\nNODE_ENV=production pnpm install\nhas no effect, devDependencies are installed anyway.. So, pnpm is awesome in providing a central store: in Glitch, it allows us to save tons of disk space, and makes things generally faster. BUT unfortunately it does not cache the compilation step, making pnpm a slower option in some cases (because with npm, we were able to also cache the compilation step, on a per project basis -- at the cost of far less available space for dependencies).\nIf zeit's approach is valid, caching compiled packages should only depend on the package version and the NODE_MODULE_VERSION (https://nodejs.org/en/download/releases/). The only issue I see is security: we should compile each package in a sandbox, so that the compilation step does not damage the store or other packages, otherwise a single evil dependency would be able to corrupt the entire store.\nThis is broadly what I would like to do to implement \"Side-effects caching\". First of all, only enable it if an option is set, like --cache-side-effects. Then, for each requested package:\n\nif there is already a side-effects cache for it, use it, otherwise:\nspin up a sandbox (it can be a docker container) which installs the dependencies of the current packages and runs the various install hooks for it, generating the side-effects cache and putting it in a directory like: ${NODE_MODULE_VERSION}/${package_name}-${package-version}.\n\nSpinning the sandbox might be optional, since in general one can trust the dependencies it is downloading, but the Glitch use case needs it.\n. The only heuristic that works to check if it has to be compiled or not would be to check if it has preinstall/install/postinstall hooks; this is fine I guess.\nThe main issue I see with the approach you're suggesting (btw, this is something I thought about), is that the user has full access on its own container, so an evil user can modify the compilation step of, say, express, and compromise it for everyone else. But it would work if this kind of caching would only be done when a given option is provided to pnpm. In this case, I might only do the caching on projects I trust (for example a project I own).\nSo yeah, it might work :)\n. One important thing: copying back the compiled package has to be done by the pnpm server if present, because the container does not have access to the store.. Ok just to clarify more, what about this:\n\n\nTwo options: --use-side-effects-cache: to actually use the side effects cache if present; and --create-side-effects-cache, to also enable creating the side effects cache after the install step.\n\n\n(EDIT: you can ignore this one I think, it would be effectively equal to pnpm install --create-side-effects-cache <package>@<version>): I would also add a new command, pnpm side-effects-cache <package>@<version> which only creates the side effects cache, without installing it (this is very helpful in the Glitch use case, and I think in general in scenarios like CI boxes and other shared systems).. What do you mean one config for both operations? That will not be possible\nto only use the cache without also creating it? Or that adding things to\nthe cache will only be done using pnpm store add?\n\n\nI wouldn't be able to use this cache in Glitch in the first case... This is\nwhy I asked for two separate options... If it is possible...\nIl 12 gen 2018 00:36, \"Zoltan Kochan\" notifications@github.com ha scritto:\n\n1.\nI'd probably add one config for both operations.\n   2.\nnpm has commands for adding thing to the cache: npm cache add\n   @. We can have a pnpm store add @\n   command. The same config would work for this command as well.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/568#issuecomment-357096845, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNPwb2lAPf3OBfJ1Df_mWrUfIY_OWks5tJpr-gaJpZM4LpLRr\n.\n. Thanks :)\n\nIl 12 gen 2018 10:47, \"Zoltan Kochan\" notifications@github.com ha scritto:\n\nI see, so you need something like side-effects-cache-read-only. We can\nhave such configuration but for most users, 1 config will be enough.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/568#issuecomment-357191993, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNGiI_06eBHP6Vi8KDsImoiOXLPZxks5tJyo0gaJpZM4LpLRr\n.\n. Do you need some help? Can I start doing something to support this?. I can't reproduce this anymore @zkochan @vjpr . I feel that, for simplicity sake, having an option to start pnpm in \"daemon\nmode\" and then other pnpm just connect to that one daemon is a better\nsolution, at least initially. I say this because we have tons of ways of\nmanaging services: pm, systemd, runit, you name it! Why adding yet another\nway of starting a daemon? And in a way that is really difficult to control:\nif a pnpm install process also starts a daemon that then other pnpm\ninstall processes can connect to, the burden of handling lifetime, error\nhandling, restarting, message passing, is left to pnpm! But why, I say?\nIt's just one systemd unit away, or if you don't like systemd, you just\nstart pnpm in daemon mode in the background using 3 lines of bash.\n\nI feel that if we take the path of supporting a self-spawning daemon as an\noption, it would only give pnpm problems and weird side conditions to\nhandle.\nMy solution: let's keep it simple, at least at first:\n1) pnpm install keeps working normally, eventually connecting to an\nalready running daemon, but it won't start its own daemon\n2) pnpm daemon would start the store-managing daemon, and only this (in\nthe foreground, and with an eventual (and in my opinion redundant)\n--background switch.\nSorry if I sound aggressive: I'm trying to be as clear as possible, it's\nnot my intention to attack anyone! :)\nIl 08 dic 2017 23:10, \"Zoltan Kochan\" notifications@github.com ha scritto:\n\nThis one seems good: https://github.com/IonicaBizau/diable\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-350384822, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNIHIcT7DvQTMsO51ji5JKxihlAVNks5s-bPRgaJpZM4OJEUt\n.\n. http is better I think. Please, if possible, don't use ipc because it would\nbreak my usecase... I would run pnpm install inside docker, and it has to\ncommunicate to the server that has to run on the host. So ipc won't work\nfor me.\n\nHttp is also easier to understand.\nAs for the daemon/server debate: I think you're underestimating the amount\nof complexity that you're asking to add. Spawning a background job and\nmaintaining it running is not an easy task, that's why linux daemons are so\ncomplex.\nAs for pnpm daemon vs pnpm server, I don't care... It's just a name\nchange, right? The working flow wouldn't change\nIl 09 dic 2017 09:31, \"Vaughan Rouesnel\" notifications@github.com ha\nscritto:\n\n@zkochan https://github.com/zkochan How would you communicate between\nprocesses? https://www.npmjs.com/package/node-ipc?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-350432767, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNKlKTk0U_0_X_NVu9PBAVsC2e7Bpks5s-kVkgaJpZM4OJEUt\n.\n. I can already run pnpm inside my containers and it works flawlessly.\n\nIl 09 dic 2017 09:41, \"Vaughan Rouesnel\" notifications@github.com ha\nscritto:\n\nI would run pnpm install inside docker, and it has to\ncommunicate to the server that has to run on the host.\n@zkochan https://github.com/zkochan Does @etamponi\nhttps://github.com/etamponi's docker use work or would it involve\nunsupported cross-device hard linking?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-350433147, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNCe1sQbIl55dH2zGOWVj_eA-lg5Oks5s-ke4gaJpZM4OJEUt\n.\n. Of course I mean that I can run it with a shared pnpm store, and I've\nalready managed to get rid of the cross-device hard linking errors :)\n\nIl 09 dic 2017 09:42, \"Emanuele Tamponi\" emanuele.tamponi@gmail.com ha\nscritto:\nI can already run pnpm inside my containers and it works flawlessly.\nIl 09 dic 2017 09:41, \"Vaughan Rouesnel\" notifications@github.com ha\nscritto:\n\nI would run pnpm install inside docker, and it has to\ncommunicate to the server that has to run on the host.\n@zkochan https://github.com/zkochan Does @etamponi\nhttps://github.com/etamponi's docker use work or would it involve\nunsupported cross-device hard linking?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-350433147, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNCe1sQbIl55dH2zGOWVj_eA-lg5Oks5s-ke4gaJpZM4OJEUt\n.\n. @vjpr falling back to copying would of course remove all the space and speed benefits of using pnpm and the shared store, so no, I don't fallback to copying. It works the way it's intended to :) I just bind-mount the store and override the store config variable to point there.\n\n@zkochan http might be slower than memory-shared ipc for intense communication between processes. As far as I can see, in this case the client and server will need to send just a few very small messages, making the tradeoff between http and ipc hard to evaluate. Let's consider that the main latency will be outside of the communication channel. On the other hand, localhost-to-localhost http communication is in the sub-millisecond speed order: if we assume an average of 10 to 100 messages exchanged between the client and the server, the communication channel always adds less than 100ms to the installation time.\nEDIT: I also agree that from DX prospective, running the server automatically and in the background is better -- I am just worried that it adds complexity, so I completely support splitting that, I am not against implementing it in the future :)\n. @zkochan just checked out node-ipc, it looks like it uses tcp/udp/unix socket connections. All of them can be used to communicate between a Docker container and a process running outside of it, so you can also use node-ipc directly, as far as I am concerned :) I was worried they'd use some kind of OS-specific connection.\n. Yet another suggestion regarding inter-process communication: I'd say that using a very well-known dependency is better than using a more specific but less well known one. While I was developing a custom Docker volume plugin in Node, I found that the builtin http server + express + unix socket was a perfect match, I could set it up without any problems (you just specify the path to the unix socket instead of the ip/port on which to listen).\nnode-ipc suggests unix sockets as the fastest mean of communication between local processes, but as you can use unix sockets using a plain node module + express, perhaps it would be good to consider using them instead of node-ipc.. This is one of the side cases I was mentioning earlier, but if we avoid\nrunning the daemon automatically when running pnpm install, this issue\nwill never happen. If I am understanding correctly, we are considering\nmoving the part that starts the daemon automatically with pnpm install to\na separate issue #960\nIl 09 dic 2017 10:51, \"Vaughan Rouesnel\" notifications@github.com ha\nscritto:\n\nRe: Docker\npnpm server running on host, pnpm i running in container could end up\nwith two daemons operating on same store. Need to check for this. E.g.\nprint the hostname and process id of the daemon pnpm is using each run, and\nwhen there is already one running, do the same.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-350441184, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNL4qCruAQV-Ld-yYjLnSy2EXpokuks5s-lgagaJpZM4OJEUt\n.\n. You're right!\n\nI guess that as long as I can also start the pnpm server independently\nand in daemon mode, so that then other pnpm install processes can talk to\nit, I am fine with everything else :+1:\nIl 09 dic 2017 14:02, \"Vaughan Rouesnel\" notifications@github.com ha\nscritto:\n\nif we avoid running the daemon automatically when running pnpm install,\nthis issue will never happen.\nBy default, pnpm should not run the daemon. It should only run it when its\nenabled in config or flag.\npnpm install --use-server\nThen you can also pass in an option pnpm --use-server install\n--no-auto-start, to prevent it autostarting.\nGiven that the docker case with host-based server is an edge case.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-350462467, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNE0rXO09KEXJNEamPFKduBrqW1eqks5s-oTPgaJpZM4OJEUt\n.\n. I am ok, but please also include the ip over which pnpm should communicate\nwith the server, as pnpm inside the container can't talk over localhost, it\nhad to use a bridge interface.\n\nIl 09 dic 2017 14:16, \"Zoltan Kochan\" notifications@github.com ha scritto:\n\nI think the interface should be a bit different. If a server runs for a\nspecific store, then it is locked by it. So pnpm can check the lock and the\nlock can contain the server's port. If it finds the lock with the port\nnumber, then it can communicate to the server.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-350465291, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNPoolfMKzs55ALEV0HXLYmdwCk39ks5s-ohJgaJpZM4OJEUt\n.\n. I know I am asking a very specific thing which might not be possible to do, but...\n\nsince install hooks are run in the node_modules directory of projects, it should be possible for them to be run by the \"client\" in the client/server mode of pnpm. Specifically, I would really like that postInstall, defined in pnpm/supi:/src/install/postInstall.ts, would run on the client and not in the store-controller (that is, the server).\nI am asking this because of my usecase. On Glitch, the client would run inside a container, so if I can run the install hooks from the client, I've all the security guarantees provided by Docker, and no rogue scripts can mess with the store.\nIt would save me tons of work, so if it is easy enough for you to do, please do! :). Ok cool :) just to know, the links from the store to the project node_modules will be made by the store controller or by the client?. Great!!! Thank you :) I'll try it tomorrow or Monday! Does it already\nsupport concurrent installs, or they'll still happen sequentially?\nIl 16 dic 2017 22:04, \"Zoltan Kochan\" notifications@github.com ha scritto:\n\nI published an experimental version with 1.24.0-0. The command is called pnpm\nserver. (A better name might be pnpm store server. As we currently scope\nthe store commands under pnpm store.)\nSo you just need to run pnpm server and then while it runs, the pnpm\ncommands will access the store via this service.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-352211727, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNLPhwaF1dlHBnOryGtX6rof8DqZXks5tBDB2gaJpZM4OJEUt\n.\n. Hooray! Thanks again :)\n\nIl 16 dic 2017 22:11, \"Zoltan Kochan\" notifications@github.com ha scritto:\n\nyes, it supports concurrent installs.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-352212137, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNEoOlK4i-A88K7UD6NtT9xhqouCeks5tBDIbgaJpZM4OJEUt\n.\n. Just tested it... it works great!!! I've a minor request: since I'd like to run pnpm as a different user from the one that runs the store controller, can you add an option to set the permissions on the unix socket and on the _locks directory? Otherwise, setting them to 777 would work too.\n. Nevermind, I've just started the server as the same user that then uses the client :) I'll play with it for a while!. If you tell me on which packages it happens I can help. First things to\ncheck would be if json-socket has default timeouts and message size limits.\nSwitching to a native http server over the same unix socket would probably\nimprove reliability too.\n\nIl 17 dic 2017 13:25, \"Zoltan Kochan\" notifications@github.com ha scritto:\n\nI used json-socket for communication via IPC and the sent messages are\nsometimes broken json\nOn Sun, Dec 17, 2017, 14:19 Zoltan Kochan zoltankochan@gmail.com wrote:\n\nI have issues locally, seems like messages are broken when installing on\nbig projects. I don't know how that's possible\nOn Sun, Dec 17, 2017, 13:39 Emanuele Tamponi notifications@github.com\nwrote:\n\nNevermind, I've just started the server as the same user that then uses\nthe client :) I'll play with it for a while!\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-352249568, or\nmute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/\nAB1pm472Z6ZULzNFVsLCFlhYcjVIOFajks5tBP1hgaJpZM4OJEUt\n.\n--\n\nZoltan\n--\n\nZoltan\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-352252169, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNK5J5_jahHgbg7Tmv9vo9L_OOaCGks5tBQgwgaJpZM4OJEUt\n.\n. I meant the built-in node http server\n\nIl 17 dic 2017 13:32, \"Emanuele Tamponi\" emanuele.tamponi@gmail.com ha\nscritto:\n\nIf you tell me on which packages it happens I can help. First things to\ncheck would be if json-socket has default timeouts and message size limits.\nSwitching to a native http server over the same unix socket would probably\nimprove reliability too.\nIl 17 dic 2017 13:25, \"Zoltan Kochan\" notifications@github.com ha\nscritto:\n\nI used json-socket for communication via IPC and the sent messages are\nsometimes broken json\nOn Sun, Dec 17, 2017, 14:19 Zoltan Kochan zoltankochan@gmail.com wrote:\n\nI have issues locally, seems like messages are broken when installing on\nbig projects. I don't know how that's possible\nOn Sun, Dec 17, 2017, 13:39 Emanuele Tamponi notifications@github.com\nwrote:\n\nNevermind, I've just started the server as the same user that then uses\nthe client :) I'll play with it for a while!\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-352249568, or\nmute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB1pm472Z\n6ZULzNFVsLCFlhYcjVIOFajks5tBP1hgaJpZM4OJEUt\n.\n--\n\nZoltan\n--\n\nZoltan\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-352252169, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNK5J5_jahHgbg7Tmv9vo9L_OOaCGks5tBQgwgaJpZM4OJEUt\n.\n\n\n. http can go through an unix socket\n\nIl 17 dic 2017 14:31, \"Zoltan Kochan\" notifications@github.com ha scritto:\n\nRetying seems to help. The retry logic should probably go to the\njson-socket lib, or a layer between json-socket and @pnpm/server. Also, I\nwonder if protobuf is faster than JSON.stringify => string encoder\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/832#issuecomment-352255876, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNPSqm0o0K3BWq4KGOXECP0B8lp2jks5tBReygaJpZM4OJEUt\n.\n. I was out so I couldn't elaborate more on http, let's try now. I agree with you that using an unix socket is better than going through the network, but let's consider a couple things:\n\n\nlocalhost \"network\" traffic doesn't go through the network card, it's basically IPC through a tcp-like interface.\nanyway, http can go through an unix socket just fine. This is what, for example, Docker does.\n\nAdvantages of using the built-in node http server (require(\"http\")), or a library like express:\n\nIt is way more battle tested than a random library like jsonsocket\nIt supports protobuf, e.g.: https://www.npmjs.com/package/express-protobuf\nIt is not an unknown library, meaning that it's easier to debug and contribute to\nI can guarantee you that if you go through an unix socket or localhost, you won't see any significant slowdown vs jsonsocket\n\nAnyway, I am willing to take on this part and create a PR that replaces jsonsocket with, for example, express. You can then make any performance test you want, then you can pick the one you prefer :)\n. Ok, found an interesting issue: if I specify an invalid/unexisting version in package.json, the store server blocks forever, I've to manually restart it.\nMy feeling is -- you might say: again? -- that this is probably tied to the complexity of the server code caused by using json-socket. Single routes through an http server would have way less complexity, can handle error states meaningfully, and wouldn't depend on a long-running state. If you don't like single http requests, you can always switch to a websocket and use libraries like socket.io, which handle the socket state for you and have plenty of error handling code built in.\n. Alright, I'll play around :) Should I only change @pnpm/server? Isn't there any other repo that needs to be changed?\nTo make sure it uses IPC, I'll use fastify through an unix socket :) any idea about how to solve that error with invalid dependencies in package.json? Should it be enough if I wrap this into a try-catch?\nconst packageResponse = await ctx.store.requestPackage(wantedDependency, options) // TODO: If this fails, also return the error. https://github.com/pnpm/server/pull/3 makes @pnpm/server use an http server instead of json-socket, and now I can run pnpm install fine on both supi and pnpm :) I found that the issue that json-socket had is probably fixable by adding a backoff path, just as I did with this PR.. https://github.com/etamponi/pnpm/commit/53bfe88b5f2c163549eeb42daf19dc115e1c87d4#diff-20bf08ec319bd88f8fc9a35b3e0ca98e\nThis commit contains the changes needed to support the new initOpts format for @pnpm/server.. Thank you :). I'd say you can check if stdout is not a tty, in that case you want an\nappend-only log.\nhttps://stackoverflow.com/questions/20585729/how-to-detect-if-nodes-process-stdout-is-being-piped\nIl 14 gen 2018 10:43, \"Zoltan Kochan\" notifications@github.com ha scritto:\n\nDoing an append-only reporter today. It will be used on CI servers by\ndefault. Currently, pnpm is silent by default on CI servers.\nSo it will be possible to use something like pnpm install --reporter\nappend-only and the output will be only appended with console.log.\nMaybe someone knows how to feature-detect when it is possible to rewrite\nthe output. In that case, we can prefer this reporter not only on CI\nservers.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/873#issuecomment-357499664, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNK0x-qISU_UbiHQl7G10Dq4qAUMyks5tKcw9gaJpZM4O40xk\n.\n. I would be very interested in a per-package download lock, and I am willing to contribute with a PR if needed :). That's exactly the case I have :) I need to be able to run up to one\nhundred installs at a time. A per download lock would be very helpful\n\nIl 01 dic 2017 21:15, \"Zoltan Kochan\" notifications@github.com ha scritto:\n\nConcurrent installs is one thing, locking is another. There will be no\nissues with locking if one pnpm process will be installing for separate\npackages. Locking is only needed because pnpm doesn't know which packages\nare already being downloaded (which is the case when several separate\nprocesses run pnpm install).\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/941#issuecomment-348603490, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNA-4A8FCXzpyDqiCbCKISC9phsi5ks5s8F5lgaJpZM4QiSYi\n.\n. Cool :) what's the time estimate for finishing the rewrite? We would really\nconsider pnpm for our system, so having concurrent installs available\nsooner rather than later would be a great bonus. Do you mind if I try to\ndig into the code a bit and try to open a minimal PR for this? If it gets\ninto your way too much you can also ignore it, or merge it later :)\n\nIl 01 dic 2017 21:29, \"Zoltan Kochan\" notifications@github.com ha scritto:\n\nSo implementing concurrent installs would solve your issue?\nI like the feature, I can concentrate on it after implementing #559\nhttps://github.com/pnpm/pnpm/issues/559, which is a big rewrite, so\nmight be smarter not doing it in parallel.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/941#issuecomment-348606549, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNJJnm73ZKTAJ0APXOjJBnGymj--Uks5s8GHFgaJpZM4QiSYi\n.\n. Thank you :) btw, you might have heard of https://glitch.com: we'd like to consider replacing npm with pnpm as our default package manager, as it would provide us with huge speed boost and very large disk space saving :)\n\nwe run more than 1000 node projects at the same time, so we need to be able to guarantee concurrent installs.\nOh, if the rewrite is over by this weekend, then even better :) :) :)\nThanks! I'll start looking around now. If I understood correctly after a quick skim through the code (so I might be wrong), the main reason to have a global lock currently is that pnpm first gets a \"context\", that contains the current state of the store, so if there are other processes that are changing the store in the meantime, it will get confused, thinking that some packages are already there when they're not.. Ok, this is where I got so far:\n1) I added a lock around the fetch call in installMultiple.ts, so now it looks like this:\n```\nfunction _fetch() {\n    return fetch(wantedDependency, {\n      loggedPkg,\n      update: options.update,\n      fetchingLocker: ctx.fetchingLocker,\n      registry,\n      prefix: ctx.prefix,\n      storePath: ctx.storePath,\n      metaCache: ctx.metaCache,\n      got: ctx.got,\n      shrinkwrapResolution: options.shrinkwrapResolution,\n      pkgId: options.pkgId,\n      offline: ctx.offline,\n      storeIndex: ctx.storeIndex,\n      verifyStoreIntegrity: ctx.verifyStoreInegrity,\n      downloadPriority: -options.currentDepth,\n      ignore: options.ignoreFile,\n    })\n  }\nconst fetchedPkg = await lock(options.pkgId || '', _fetch, { stale: ctx.stale, locks: ctx.locks })\n```\n(I've also added the stale and locks properties to the InstallContext type).\nIt works! BUT... only if there is no shrinkwrap.yaml file in the project. In that case, conflicts happen.\nIdeas on where to look at are welcome :)\nEDIT: This is how I am testing it\n1) I created two identical projects, in ~/code/test1 and ~/code/test2\n2) I clear the store and node_modules and shrinkwrap.yaml:\ncd ~/code\n(cd test1 && rm -rf node_modules shrinkwrap.yaml) && (cd test2 && rm -rf node_modules shrinkwrap.yaml ~/.pnpm-store)\n3) I run pnpm simultaneusly:\n(cd test1 && node ../pnpm/lib/bin/pnpm.js install --no-lock) & (cd test2 && node ../pnpm/lib/bin/pnpm.js install --no-lock)\n--no-lock guarantees that only my additional lock is in place.\nIf I don't remove shrinkwrap.yaml, I get something like this:\nENOENT: no such file or directory, rename '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/array-flatten/1.1.1_stage' -> '/Users/etamponi/.pnpm-store/2/registry.npmjs.org. EDIT: I increased the concurrency level to 4 projects, now the errors happen also without shrinkwrap.yaml. The thing I think is interesting is that all of the errors contain a _stage suffix in the package part of the path... I think that's a clue...\nError: ENOENT: no such file or directory, rename '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/array-flatten/1.1.1_stage' -> '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/array-flatten/1.1.1/node_modules/array-flatten'\n    at Error (native)\nError: ENOENT: no such file or directory, rename '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/accepts/1.3.4_stage' -> '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/accepts/1.3.4/node_modules/accepts'\n    at Error (native)\nError: ENOENT: no such file or directory, rename '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/mime-types/2.1.17_stage' -> '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/mime-types/2.1.17/node_modules/mime-types'\n    at Error (native)\nError: ENOENT: no such file or directory, rename '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/content-disposition/0.5.2_stage' -> '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/content-disposition/0.5.2/node_modules/content-disposition'\n    at Error (native)\nError: ENOENT: no such file or directory, rename '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/mime-db/1.30.0_stage' -> '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/mime-db/1.30.0/node_modules/mime-db'\n    at Error (native)\nError: ENOENT: no such file or directory, rename '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/negotiator/0.6.1_stage' -> '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/negotiator/0.6.1/node_modules/negotiator'\n    at Error (native)\nError: ENOENT: no such file or directory, rename '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/escape-html/1.0.3_stage' -> '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/escape-html/1.0.3/node_modules/escape-html'\n    at Error (native)\nError: Failed to parse json\nUnexpected end of JSON input while parsing near ''\n    at parseError (/Users/etamponi/code/supi/node_modules/read-package-json/read-json.js:436:11)\n    at parseJson (/Users/etamponi/code/supi/node_modules/read-package-json/read-json.js:104:26)\n    at /Users/etamponi/code/supi/node_modules/read-package-json/read-json.js:51:5\n    at /Users/etamponi/code/supi/node_modules/graceful-fs/graceful-fs.js:78:16\n    at /Users/etamponi/code/pnpm/node_modules/graceful-fs/graceful-fs.js:78:16\n    at /Users/etamponi/code/pnpm/node_modules/graceful-fs/graceful-fs.js:78:16\n    at tryToString (fs.js:457:3)\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:444:12)\nError: Failed to parse json\nUnexpected end of JSON input while parsing near ''\n    at parseError (/Users/etamponi/code/supi/node_modules/read-package-json/read-json.js:436:11)\n    at parseJson (/Users/etamponi/code/supi/node_modules/read-package-json/read-json.js:104:26)\n    at /Users/etamponi/code/supi/node_modules/read-package-json/read-json.js:51:5\n    at /Users/etamponi/code/supi/node_modules/graceful-fs/graceful-fs.js:78:16\n    at /Users/etamponi/code/pnpm/node_modules/graceful-fs/graceful-fs.js:78:16\n    at /Users/etamponi/code/pnpm/node_modules/graceful-fs/graceful-fs.js:78:16\n    at tryToString (fs.js:457:3)\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:444:12)\nError: ENOENT: no such file or directory, open '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/media-typer/0.3.0_stage/package.json'\n    at Error (native)\nError: ENOENT: no such file or directory, open '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/media-typer/0.3.0_stage/package.json'\n    at Error (native)\nError: ENOENT: no such file or directory, open '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/type-is/1.6.15_stage/package.json'\n    at Error (native)\nError: ENOENT: no such file or directory, open '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/type-is/1.6.15_stage/package.json'\n    at Error (native)\nError: ENOENT: no such file or directory, rename '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/methods/1.1.2_stage' -> '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/methods/1.1.2/node_modules/methods'\n    at Error (native)\nError: ENOENT: no such file or directory, open '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/serve-static/1.13.1_stage/package.json'\n    at Error (native)\nError: ENOENT: no such file or directory, open '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/serve-static/1.13.1_stage/package.json'\n    at Error (native)\nError: ENOENT: no such file or directory, rename '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/express/4.16.2_stage' -> '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/express/4.16.2/node_modules/express'\n    at Error (native)\nError: ENOENT: no such file or directory, rename '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/debug/2.6.9_stage' -> '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/debug/2.6.9/node_modules/debug'\n    at Error (native)\nError: ENOENT: no such file or directory, rename '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/forwarded/0.1.2_stage' -> '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/forwarded/0.1.2/node_modules/forwarded'\n    at Error (native)\nError: ENOENT: no such file or directory, rename '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/range-parser/1.2.0_stage' -> '/Users/etamponi/.pnpm-store/2/registry.npmjs.org/range-parser/1.2.0/node_modules/range-parser'\n    at Error (native)\n. @vjpr it's the lock function defined in supi:src/api/lock.ts\nOk, so, let's see if if I've got everything correctly so far:\n1) a \"context\" is obtained using getContext: one of the step is to \"load the store\", that is, read the content of ${STORE_PATH}/store.json; this is important: the store is read only once, before we fetch the dependencies\n2) the install step fetches the dependencies recursively starting from the \"top level\" ones, that is, the ones defined in package.json\n3) only when all the dependencies are fetched, the install step links them to the local node_modules, and saves the new state of the store to store.json; this is important too: the store is saved only once, after we fetch all of the dependencies.\nThis is why pnpm currently needs a global lock: because store.json will not have the updated information until we save the store again, at the end of the install step (and I assume that the uninstall step behaves in the same way).\nAm I right?. Awesome, this is exactly what I was planning to do :) My original plan would have been to change the fetch function in package-store to not use storeIndex to check if a package didn't exist, and to use per-package locking to download each package only once :)\nIf I got it correctly, this PR makes it easier as I can write a completely separate store driver instead of tweaking various part of supi and package-store\nMoreover, the store driver can be the piece responsible for storing the current state of storeIndex and to load/save store.json when persistence is needed.\nI've only one question: this store driver has to be a separate process running on the machine, with which the pnpm processes communicate through an API, am I right?\nEDIT: alternatively, the store driver can just be a wrapper around loading/saving storeIndex and the fetch function, with locking in place so that concurrent installs are possible.\n. Sorry, I am not sure I understand: when you say \"start with one process\", do you mean a separate process for the store driver, which all the pnpm processes talk to, or do you mean that the store driver runs in the same pnpm processes? I understand the \"separate process\" solution, but not the other one.\n. This wouldn't be a solution for us, because each project is independent of the others, and runs the install step at separate times. Each project is owned by a different Glitch user, they would only share the store.. Yes, #832 is exactly what I was thinking :)\nOnce you make the fetching logic configurable though, we still need to make the load/save store logic configurable too, right? Because otherwise we would get conflicts when we save the store.\nI would say that the service approach is good because it abstracts away all the interactions with the store (and the storeIndex). Instead of having ctx.storeIndex as an in-memory JSON object, it can be an interface to the \"pnpm service\", along with the fetching logic.\nLet me know if you need any help with all of these things :)\n. One thing to consider is that inside node_modules there are package.json files: pnpm recursive install shouldn't recurse inside node_modules. Will there be a way to still run the server on the foreground?\nIl 15 gen 2018 01:20, \"Zoltan Kochan\" notifications@github.com ha scritto:\n\nSo I tried the diable by Ionica Bizau and it works like a charm!\nThe only issue is that once the server runs in the background, there is no\neasy way to stop it.\nThere will be a new command: pnpm server stop for stopping the store\nserver.\npnpm server will be renamed to pnpm server start.\npnpm server will print help for the server commands.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/960#issuecomment-357555516, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNOVe-AFLGWRtQ-uXX0zSbKYKJK-9ks5tKpnRgaJpZM4Q8BI7\n.\n. Cool. Another important thing: if the server is running in the foreground, pnpm server stop should not do anything, or at least I need a flag to disable it. Otherwise, in Glitch, any user can stop the pnpm server globally for everyone \ud83d\ude28 . It's really important for me that this bug gets fixed, do you have any ETA on it? Otherwise I can look into it in the following days. I just opened two PRs, one in supi and one in npm-lifecycle. Together they fix this issue for me. Putting it in pnpmTypes doesn't work:\n\nsrc/requireHooks.ts(7,12): error TS2339: Property 'ignorePnpmfile' does not exist on type 'PnpmOptions'.\n. Only the test is remaining, but the code doesn't work until @pnpm/types gets updated too.. Tried: it still fails. It kept failing even with the updated dependency.\nThe only way to make the compiler happy is to also link supi. This is\nprobably because it gets the definitions from supi before.\nSo before getting this out we've to close the PR in supi...\nIl 30 dic 2017 21:38, \"Zoltan Kochan\" notifications@github.com ha scritto:\n\nok, that's funny.\nthis fails because {PnpmOptions} is imported from supi. Just import it\nfrom @pnpm/types and it'll work\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/979#issuecomment-354567077, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNC0PQXip1BKEteOEzOezubixKWksks5tFp9QgaJpZM4RPkXx\n.\n. As you prefer :+1: I'm adding the copy test to the supi PR\n\nIl 30 dic 2017 21:41, \"Zoltan Kochan\" notifications@github.com ha scritto:\n\noh, sorry... probably pnpm up --depth 100 should fix this. Anyway, this\nmight be confusing to you. It is indeed. I can take it over from here, if\nyou want\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/979#issuecomment-354567212, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNKMwbeJmL9E-Eyqb5RrcZLK1MjDxks5tFqAEgaJpZM4RPkXx\n.\n. Thanks to you :)\n\nIl 30 dic 2017 21:49, \"Zoltan Kochan\" notifications@github.com ha scritto:\n\nyeah, a deep update helped.\nok, I'll just add one test and merge it.\nThanks for the contribution!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/979#issuecomment-354567551, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNFIPpSKQc9jotM1Omsxw2rczjsL4ks5tFqHIgaJpZM4RPkXx\n.\n. I think this is good enough for my specific use case; what I would have done though, to make it even more configurable, is providing a --port option instead, with the following possible values:\n\n\nauto: same as --protocol auto\nunix: same as --protocol ipc\nN: same as --protocol tcp, but it also allows you to pick any port you want. This way you're not constrained to use port 5813 (which is also good for security), and you can even have multiple servers running.\n\nIn general being able to specify the listening port would be good.\nBut all these things aren't fundamental for me, you can also ship it as it is \ud83d\udc4d \nThanks!. I like your idea \ud83d\udc4d . I agree, --ignore-stop-requests sounds better. The code looks good to me \ud83d\udc4d . Sorry, today I was super busy at work. The PR looks good :) I only have a couple question:\n\n\nwhen using --use-store-server, does pnpm install waits for it to be up and running? Otherwise I'd expect it to fail if the server takes more than expect to start up. I see that there is a retry operation somewhere, so I assume it is doing what I am describing.\n\n\nI'd definitely like having an option to only allow installation with an already running server. Are all these options only accessible through the CLI, or also through .npmrc?. I think this is a great idea, I totally support it. I have a few comments:\n\n\nI'd say that the old, \"pure\" store should be kept. This new store might be a \"second layer\" store (I think you named it this way somewhere else). Am I understanding correctly?\n\n\nAt first sight, one might think that this second layer store might \"explode\", as the <dependency set hash> will be different for each specific version of the dependencies of a given <package ID>. But this is actually not true, we are saving space, because for every <dependency set hash>, we would anyway have all the same structure in node_modules. So the space taken is no worse than the old approach, and actually better every time the same <package set hash> is reused for a given package ID.\n\n\nSpecial care should be taken when calculating the hash for dependencies retrieved from GitHub: in this case the \"version\" has to be the commit hash at the moment of retrieving. Otherwise whatever#master will always be marked with the same hash.\n\n\nOnce this new second layer store is in place, are we going to use symlinking to node_modules by default? I am not yet sure if this would break things, I saw comments about --preserve-symlinks but I never fully understood them. If we could symlink everything, things are going to be a lot faster! On the other hand it would break the Glitch usecase, so I would still like to have a fallback to reflinks (let's remember that Glitch projects don't see the store, so I can't symlink to it).\n\n\nLast but not least, what's the ETA for shipping this? I would also know from @vjpr if this would definitely solve his issue #604, just to be sure we don't waste time on a \"almost definitive\" solution.. Just to clarify:\n\nI think it may be inside the store but it should be configurable. For Glitch it should stay in project/node_modules or at some other location inside the docker image.\nFor Glitch this new store will have to be inside the docker.\n\nThese two sentences just mean that this \"second layer\" shared store can be optional, and that one can always use the current layout (or put the second layer somewhere else entirely: the point is that it will also have a <dep set hash> directory in the path).\n. I would rather implement faster startup for all the use cases. I observed that if we can make pnpm startup faster, most of pnpm invocations would be basically instantaneous.. I am pretty sure this is a problem with the default logger, the package is not actually downloaded twice. To double check, can you try installing with --reporter append-only? You should only see one message per package (perhaps split into started/downloading/done).\n. Hi! pnpm 1.34.0 has a new experimental flag --shamefully-flatten, which emulates what npm and yarn do with dependencies, that might solve your issue.\nSo try to update to 1.34.0 and run pnpm install --shamefully-flatten.\n. @vjpr can you show me some issue or relevant documentation on why react-native doesn't support symlinks? I would like to investigate a bit! Thanks!. Unfortunately I didn't have the time to dig into it, so feel free to go :)\nIl mar 13 mar 2018, 15:47 Vaughan Rouesnel notifications@github.com ha\nscritto:\n\n@etamponi https://github.com/etamponi Did you make any progress on\nthis. I was thinking of taking another stab at it soon.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1051#issuecomment-372691206, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNOugAvcSflh3XW0rjK8hUDc1MFcWks5td9v7gaJpZM4SMYFH\n.\n. Thanks for reporting! I've checked the source code of pre-commit, and it expects the \"root\" to be two directories above the directory in which pre-commit is installed. Unfortunately, in the case of pnpm, this does not happen, because pnpm has a different node_modules structure.\n\nI'll open an issue in the pre-commit repo to see if they can fix it.\nEDIT: opened https://github.com/observing/pre-commit. The error is https://github.com/pnpm/store-path/blob/4adf87bc35dcd0223a7caeda163e7ab62a5ac8ea/src/index.ts#L35\n. This issue is also worse if you happen to have a pnpm server running:\n1) pnpm server start on an empty store\n2) with a shrinkwrap.yaml present, run pnpm install: it will fail\n3) now removing shrinkwrap.yaml does not solve the issue anymore.\n. I would need a clarification on Point 3, the package has native addon modules: what does it mean? npm checks for binding.gyp, is it that?. Can you tell me a possible use case for this new hook? I think that having the shrinkwrap object in the hook might be good, but would it be readonly? How can/should it be used?. Shouldn't afterAllResolved receive a pkg argument then?\nIl mer 18 apr 2018, 15:14 Zoltan Kochan notifications@github.com ha\nscritto:\n\nThe shrinkwrap object would not be read-only. As for the use case, the\noriginal use case is described in #1088\nhttps://github.com/pnpm/pnpm/issues/1088. The shrinkwrap rewrite use\ncase I don't really know.\n\u2014\nYou are receiving this because your review was requested.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/1119#issuecomment-382381918, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNKL3N4wPBG-EP9BS-v7FD8reWlSBks5tpzw4gaJpZM4TZjNH\n.\n. I think it's the content of package.json, as described in the issue you\nlinked\n\nIl mer 18 apr 2018, 15:53 Zoltan Kochan notifications@github.com ha\nscritto:\n\nwhich pkg? afterAllResolved is called once, after all the packages in\nnode_modules were resolved\n\u2014\nYou are receiving this because your review was requested.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/1119#issuecomment-382394025, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNDxRFW9P6RnOtHkVSd-v3KiNDZNpks5tp0U-gaJpZM4TZjNH\n.\n. I guess I am fine then :) if it doesn't take too long to also have a\nshrinkwrap argument, it might be good\n\nOn Wed, Apr 18, 2018 at 3:57 PM, Zoltan Kochan notifications@github.com\nwrote:\n\noh, that was an error in the issue: #1088 (comment)\nhttps://github.com/pnpm/pnpm/issues/1088#issuecomment-381478408\n\u2014\nYou are receiving this because your review was requested.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/1119#issuecomment-382395630, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNGKS_qtQ2Mb5mm654-HznVbTLfsmks5tp0ZggaJpZM4TZjNH\n.\n\n\n-- \nEmanuele Tamponi\nPhD in Electronic and Computer Engineering\nPostdoc at IASC Group, DIEE.\nUniversity of Cagliari, Italy.\nSoftware Engineer at Fog Creek Software.\n55th Broadway, New York City, US.\n. fixed!. connection-info is fine, or even just server. I don't like public a lot since it does not carry information about the content of the directory.. As I never understood peer dependencies, I am not really sure if this makes\nsense or not.\nIl sab 19 mag 2018, 15:12 Zoltan Kochan notifications@github.com ha\nscritto:\n\nThoughts.\nIf the warning is about a resolved peer dependency that does not satisfy\nthe wanted range and the peer is resolved not from a root dependency.\nShould installation fail in that case? The user project does not control\nthe peer resolution in this case.\nI think it should only fail if the peer is resolved from the root\ndependencies or the peer is not resolved at all.\nThis fails:\nnode_modules/\n  a@1.0.0\n  b@1.0.0 (peerDependencies: a@^2.0.0)\nThis does not fail:\nnode_modules/\n  some-dep\n    node_modules\n      a@1.0.0\n      b@1.0.0 (peerDependencies: a@^2.0.0)\nThis also fails:\nnode_modules/\n  some-dep\n    node_modules\n      b@1.0.0 (peerDependencies: a@^2.0.0)\nAnd this fails as well because even though b is a subdependency, its peer\nis resolved from a root dependency:\nnode_modules/\n  a@1.0.0\n  some-dep\n    node_modules\n      b@1.0.0 (peerDependencies: a@^2.0.0)\ncc @etamponi https://github.com/etamponi, @vjpr\nhttps://github.com/vjpr, @pgonzal https://github.com/pgonzal\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1142#issuecomment-390404041, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNLwF3nuTkI-Ewonff5UDB0WJnwxVks5t0BorgaJpZM4T0Fut\n.\n. Ok I got through them again and finally understood that \"peer dependency\" is just a silly way of saying \"forced dependency version range\"... Anyway!\n\nIf my understanding of peer dependencies is correct, then the only example that you mark as \"should not fail\" is wrong (which might mean that I didn't understand peer dependencies well enough). If b peer-depends on a@^2, theb a@^1 can't be installed at all by the same sub-dependency, so the process fails but not because of strict-peer, just because of peer!\nOn the other hand, perhaps your example means that a@1 is installed by some other sub-dependency. In this case, b still peer-depends on a@^2, so strict-peer should make the installation fail.\n. I agree: if the peer-dependency is resolved in another part of the tree with a different version range, it won't affect the peer-requiring package, so it is ok.\n. To make things even more precise:\nfail (wrong version):\nnode_modules/\n  a@1.0.0\n  b@1.0.0 (peerDependencies: a@^2.0.0)\nfail (wrong version):\nnode_modules/\n  a@1.0.0\n  some-dep\n    node_modules\n      b@1.0.0 (peerDependencies: a@^2.0.0)\nfail (missing peer-dependency):\nnode_modules/\n  some-dep\n    node_modules\n      b@1.0.0 (peerDependencies: a@^2.0.0)\nno fail (wrong version required by a different sub-tree, it is not affecting b@1.0.0):\nnode_modules/\n  a@2.0.0\n  some-dep\n    node_modules\n      b@1.0.0 (peerDependencies: a@^2.0.0)\n  another-dep\n    node_modules\n      a@1.0.0\nfail (not because of the other sub-tree, but because the peer dependency is not visible for b@1.0.0):\nnode_modules/\n  some-dep\n    node_modules\n      b@1.0.0 (peerDependencies: a@^2.0.0)\n  another-dep\n    node_modules\n      a@1.0.0\n. I would add that this shouldn't fail either:\nnode_modules/\n  some-dep\n    node_modules\n      a@2.0.0\n      some-subdep\n        node_modules\n          b@1.0.0 (peerDependencies: a@^2.0.0)\n. @pgonzal, so you think this should fail, even if another-dep uses a@1.0.0 in a different subtree?\nnode_modules/\n  a@2.0.0\n  some-dep\n    node_modules\n      b@1.0.0 (peerDependencies: a@^2.0.0)\n  another-dep\n    node_modules\n      a@1.0.0\n. I agree that the case I showed above shouldn't fail \ud83d\udc4d I also share your frustration with the current state of the npm ecosystem abusing the ~flaws~ features of npm/node dependency resolution.. Since this option is a no-op without --use-store-server, I would consider replacing it with something like --use-running-store-server, which has the same effect of the pair --no-allow-start-store-server --use-store-server. I think that on WSL we should behave exactly as if we were on Linux, using\nUnix links. It might be annoying in certain cases, but I don't think we\nshould change this.\nIl sab 7 lug 2018, 16:38 Frank Schmid notifications@github.com ha scritto:\n\n@Conduitry https://github.com/Conduitry One workaround (not a solution)\nis, to use linux tools instead of windows ones. E.g. I use VSCode in WSL\n(together with VcXsrv) which works perfectly.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1215#issuecomment-403220024, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNFp88K7gzc2t7pKLW0HA2UOf7yGmks5uEMfPgaJpZM4UlIJs\n.\n. I like hasBin more. It maps well with the field in package json, bins. Perhaps hasBins?. --shamefully-flatten already flattens bins.\n\nPerhaps this has to do with devDependencies. Can you give me the exact steps to reproduce the issue?. Ok, I can reproduce. It's strange that the bin is not added. I think I even have a test for this. I'll try to look into it!\n. Interesting: running pnpm install another-package --shamefully-flatten added all the missing bins!. Ok, this is a regression.\nIf you run\npnpm install --shamefully-flatten\ntwice, the bins get installed correctly. But if you run it just one time, they don't get installed.\n. That's the part I understood. The part I didn't understand is if I have to\nadd an entry everytime I call requestPackage, or only in this specific\ncase, that is, when used inside the store add command. In both cases, I am\nnot entirely sure this makes sense.\nI would rather add a way for updateConnections to add an empty array. For\nexample if prefix is null or empty, it adds an empty array.\nIl mar 10 lug 2018, 09:22 Zoltan Kochan notifications@github.com ha\nscritto:\n\n@zkochan commented on this pull request.\nIn packages/supi/src/api/storeAdd.ts\nhttps://github.com/pnpm/pnpm/pull/1268#discussion_r201240494:\n\n\nconst pkgIds = []\nfor (const dep of deps) {\nconst ret = await opts.storeController.requestPackage(dep, {\ndownloadPriority: 1,\nloggedPkg: {\nrawSpec: dep.raw,\n},\npreferredVersions: {},\nprefix: opts.prefix,\nregistry: normalizeRegistryUrl(opts.registry || 'https://registry.npmjs.org/'),\nverifyStoreIntegrity: opts.verifyStoreIntegrity,\n})\npkgIds.push(ret.body.id)\n}\n+\nawait opts.storeController.updateConnections(opts.prefix, {\n\n\nwith the implementation you did, an entry like this well be added to\nstore.json:\n\"registry.npmjs.com/foo/1.0.0\": [\"/home/usr\"],\nbut what you need is:\n\"registry.npmjs.com/foo/1.0.0\": [],\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/1268#discussion_r201240494, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNHax4tLIvnLpVp09Rr1fWkc8ahjcks5uFFZNgaJpZM4VIFKI\n.\n. Oh, ok\n\nIl mar 10 lug 2018, 09:34 Zoltan Kochan notifications@github.com ha\nscritto:\n\nI meant that requestPackage would add the empty array in all cases. I\nthink it would make sense because the package is in the store but it does\nnot have any connections yet\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/1268#issuecomment-403729131, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNHvvov-lhfTgP2rLK3b2x1um4t4Nks5uFFjzgaJpZM4VIFKI\n.\n. I'll add the test that checks store.json after you release the new version of package-requester. More information: if I install stream-shift before firebase-tools, that goes fine, but then I get exactly the same problem with negotiator.. I hope that might fix this too :) is this fix in latest master? So that I can try it out. I confirm that I can install stream-shift (and firebase-tools now works!) using latest master :) Thank you!. Can we keep this bug open? Because I think there is another thing to fix.\n\nWhen installing firebase-tools and nothing else, stream-shift is listed in shrinkwrap.yaml, but it doesn't get installed.. This is the output of:\npnpm install --shamefully-flatten --reporter ndjson firebase-tools\nstream-shift is reported as installed, but it's not.\npnpm-debug.txt\n. Ok, so the bug is the following:\n1) an optional dependency, X, is not installable. It, and all of its dependencies, (X, A, B, C) are marked as skipped.\n2) a non optional dependency, Y, has a dependency (B) that was previously marked as skipped.\nExpected:\nB gets installed anyway\nActual:\nB does not get installed (can only be installed manually, in master)\n. That commit fixes the problem for subsequent installs. If the two steps I mentioned above happen during the same install, the skipped set is not updated correctly :/. This does not work because the optional flag is not passed through to children of optional dependencies.. It works, but it also installs the dependencies of optional packages. That's why the tests are failing. Thank you :)\nIl sab 22 set 2018, 19:41 Zoltan Kochan notifications@github.com ha\nscritto:\n\nThanks! I'll publish it today\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/1387#issuecomment-423760976, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAjUNKpprhADyvozzgej5n1HNAXKTNBuks5udnZCgaJpZM4W1Q5-\n.\n. I am ok with the change as long as we still use --reflink on Linux. Unfortunately the --reflink path is not well tested because it needs a reflink-capable filesystem (btrfs, basically).. If it is just informative, it's okay... I would still be happier with a config option to disable it but it's not super urgent :) thanks!. Is the semantic of the new two properties the same as before?. one question here: why not using path.join instead of + path.sep +?. I am not sure what you mean with this. storeHas already checks the content of store.json. it also contains another package, I needed to install it to initialize the store in the test. It only happens in this test, if I run it from the command line it creates the store correctly. That's exactly how I tested it. I have no idea what the prefix is. \n",
    "piranna": "I'm interested in this feature, if all the needed packages are in the npm cache, then there would be possible to do installs offline without needing of external tools like local proxies and similar things :-)\n. Is there any update on this? It would be a killer-app feature... :-D\n. ",
    "furqanZafar": "easier to track progress with npm badge i guess, the day it says 1.0.0, everyone would switch to it :) \n. ",
    "crcn": "Yep, I'd be happy to transfer over the name. Want me to go ahead and run npm owner add rstacruz pnpm?\n. Done! Feel free to run npm owner remove crcn pnpm. \n. Looks like it's updated for me @rstacruz. pnpm hasn't been used in a few years - it was originally built to help setup private npm servers, but that problem is a whole can of worms, so I decided not to pursue the project. \n. ",
    "srgpqt": "Running into this issue a lot\n. ",
    "jhen0409": "\nthat project also fails to build electron-prebuilt under pnpm, still unsure why.\n\nI have also had electron-prebuilt problem, but I cannot be reproduce it. :\\\n. ",
    "freeman29": "OS: Linux Mint\nNode: v5.2.0\nnpm: 3.3.12\npackage.json: i'm using react-slingshot starter kit\n{\n  \"name\": \"react-slingshot\",\n  \"version\": \"1.1.1\",\n  \"description\": \"Starter kit for creating apps with React and Redux\",\n  \"scripts\": {\n    \"prestart\": \"npm run remove-dist\",\n    \"start\": \"parallelshell \\\"npm run lint:tools\\\" \\\"npm run test:watch\\\" \\\"npm run open:src\\\"\",\n    \"open:src\": \"node tools/srcServer.js\",\n    \"open:dist\": \"node tools/distServer.js\",\n    \"lint:tools\": \"eslint webpack.config.js tools\",\n    \"clean-dist\": \"npm run remove-dist && mkdir dist\",\n    \"remove-dist\": \"node_modules/.bin/rimraf ./dist\",\n    \"build:html\": \"node tools/buildHtml.js\",\n    \"prebuild\": \"npm run clean-dist && npm run build:html\",\n    \"build\": \"npm run test && node tools/build.js && npm run open:dist\",\n    \"test\": \"cross-env NODE_ENV=test mocha --reporter progress --compilers js:babel/register --recursive \\\"./src/*/.spec.js\\\"\",\n    \"test:watch\": \"npm run test -- --watch\"\n  },\n  \"author\": \"Cory House\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"object-assign\": \"4.0.1\",\n    \"react\": \"0.14.6\",\n    \"react-dom\": \"0.14.6\",\n    \"react-redux\": \"4.0.6\",\n    \"redux\": \"3.0.5\"\n  },\n  \"devDependencies\": {\n    \"babel\": \"5.8.23\",\n    \"babel-eslint\": \"4.1.7\",\n    \"babel-loader\": \"5.1.4\",\n    \"babel-plugin-react-display-name\": \"2.0.0\",\n    \"babel-plugin-react-transform\": \"1.1.1\",\n    \"browser-sync\": \"2.11.1\",\n    \"chai\": \"3.4.1\",\n    \"cheerio\": \"0.19.0\",\n    \"colors\": \"1.1.2\",\n    \"cross-env\": \"1.0.7\",\n    \"css-loader\": \"0.23.1\",\n    \"eslint\": \"1.10.3\",\n    \"eslint-loader\": \"1.2.0\",\n    \"eslint-plugin-react\": \"3.15.0\",\n    \"extract-text-webpack-plugin\": \"1.0.1\",\n    \"file-loader\": \"0.8.5\",\n    \"mocha\": \"2.3.4\",\n    \"node-sass\": \"3.4.2\",\n    \"parallelshell\": \"2.0.0\",\n    \"react-transform-catch-errors\": \"1.0.1\",\n    \"react-transform-hmr\": \"1.0.1\",\n    \"redbox-react\": \"1.2.0\",\n    \"rimraf\": \"2.5.0\",\n    \"sass-loader\": \"3.1.2\",\n    \"style-loader\": \"0.13.0\",\n    \"watch\": \"0.17.1\",\n    \"webpack\": \"1.12.11\",\n    \"webpack-dev-middleware\": \"1.4.0\",\n    \"webpack-hot-middleware\": \"2.6.0\",\n    \"yargs\": \"3.32.0\"\n  },\n  \"keywords:\": [\n    \"react\",\n    \"reactjs\",\n    \"hot\",\n    \"reload\",\n    \"hmr\",\n    \"live\",\n    \"edit\",\n    \"webpack\",\n    \"redux\",\n    \"flux\",\n    \"boilerplate\",\n    \"starter\"\n  ]\n}\n. Good job James..\nOn 18 February 2016 at 01:29, Rico Sta. Cruz notifications@github.com\nwrote:\n\nNice work @brotchie https://github.com/brotchie!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/83#issuecomment-185314200.\n. \n",
    "Ingramz": "Also possible to reproduce using following docker one-liner:\ndocker run --rm  node:latest /bin/bash -c \"npm install -g pnpm; pnpm install laravel-elixir@^4.0.0\"\nnpm info using npm@3.3.12\nnpm info using node@v5.5.0\n. The change in tar-stream has been merged and and a release has been made, which has automatically propagated to pnpm, so I believe this issue can be closed.\n. ",
    "brotchie": "Turns out this was an issue with the tar-stream package required by pnpm's tar-fs dependency. tar-stream didn't support parsing large uids and gids, instead returning NaN values. \nI've submitted a pull request https://github.com/mafintosh/tar-stream/pull/47 and this issue should be fixed once it's merged and published to npm.\nThis command now succeeds when you force npm to use my patched version of tar-stream:\ndocker run --rm node:latest /bin/bash -c \"npm install -g brotchie/tar-stream pnpm; pnpm install laravel-elixir@^4.0.0\"\n. ",
    "DanielRuf": "Is this still relevant? Node 10 (and probably earlier releases) supports http2 internally (at least \"experimental\").\nhttps://nodejs.org/api/http2.html#http2_http_2. Would like to see this too.\nAs I often let them run in different tabs and need to know how long they take even if we have the local caches to know if I have to optimize a few things.. > I wonder if it makes sense to print the time if it was faster than 2-3\nFor me it is always useful and any information about this is crucial to know if there are too many packages or any issues and I just see it after switching to the tab. So I can also compare the results with and without filled cache.. > I think you should show if its more than a second so as to not deter UX but also people care about seconds now\n\nYou see all those Twitter threads where people complaining VSCode opens up slow (it only takes 3-5 seconds) \ud83d\ude02 so you get the point, people care if anything greater than a second. Still it wouldn't hurt if you show in decimal point like 3.5s or 0.7s\n\nEspecially WPO. Everything above 1s, especially 2-5 seconds feels like there is something happening (perceived performance and so on).\nDefinitely useful if more than 1 second.. https://travis-ci.org/pnpm/pnpm/builds/375577178\nhttps://travis-ci.org/pnpm/pnpm/builds/375358472\nWill be probably faster with the cache.. Currently running this to see if we will have any issues on 8 and 10 (current LTS and stable).\nWill close the PR afterwards if it takes too long for the normal builds.. Not sure, I did not see any related issues in the past weeks. Also I have to trigger a new build after the first build has properly finished and the cache is filled with the first snapshot.. If there are issues with Travis and the cache we can contact them (it's also a german company so there are direct contacts if needed and some of the Travis team are in the Gitter and Slack channels too).. > we dogfood the next version of pnpm\nGreat =). Hm, but why not keep the PR open until then? Thanks for the info. Currently many packages switch to Node.js 6+ as they are starting to break now with Node.js 4.. Ok. If you want and there is not yet a PR you can reopen this one (just if you want). I've restored the branch.. > We'll probably ship pnpm@2 in a month or so\n\ud83d\udc4d . I mean stats like added x packages in y seconds like npm and yarn do.\nAlso I see no activity during binary downloads or other backend tasks (no activity spinner).. Sounds very good and helpful.\nIs the progress only for tarballs > 5MB available and can this threshold be set?. > I don't have objection making it configurable but be aware that too much logging also causes slow down.\nRight, I totally agree with you regarding this.. As info, this is the output in mingw64 on Windows (the Git bash).\nNo progress bar =/\n```\n$ pnpm i pa11y\nPackages: +66\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nResolving: total 66, reused 25, downloaded 41, done\nlocalhost+4873/puppeteer/1.5.0           |     install$ node install.js\n```. I agree with @vjpr and @KSXGitHub.\nThis would make it a bit harder for my team to understand how it works as -- to pass arguments to the underlying process is often used but would not be used for filtering. Yarn also filters packages like yarn list --pattern.. ",
    "tomxtobin": "npm-check seems to do the trick.\n. ",
    "deepsweet": "well, it's more a minor inconvenience than a real problem in my workflow. I just wanted to make sure that relying on flatten node_modules/.bin/ was not a good idea. feel free to close this if supporting this behavior is not in your plans, looks like I'll change my workflow in anyway.\n. ",
    "jpalala": "I couldn't reproduce it. The steps I remember taking a repo folder, moving it, then copying it back to a dir. \nSomething like this:\nhttps://www.dropbox.com/s/iazbdx0ilmnz09k/Screen%20Shot%202016-02-09%20at%204.30.20%20PM.png?dl=0\nAnyway thanks!\nClosing this issue, anyway, i'll reopen if ever i find a way to reproduce it. \n. Ok gotcha\n. ",
    "adriantoine": "+1\n. ",
    "leipert": "Yeah, it should work.\nIf your using the public npm registry, you do not need auth for GET requests.\nBut pnpm actually sets the token on each request which goes to a https:// registries, so always_auth is per se true when using pnpm and having saved credentials.\nEDIT: So actually it was already closed with #161 \n. store_path should be changed to storePath.\npnpm camelcases all the keys from the .rc files, so it is not possible to set the storepath in an .npmrc or .pnpmrc\nSteps to reproduce: \n1. Set store_path in the .npmrc, \nstore_path=node_modules/.pnpm-store\n2. See how pnpm ignores the parameter \ud83d\ude05 \n. no problemo \ud83d\udc4d \nthanks for the good work\n. @zkochan Even if registry-auth-token extracts the token, it also has to give a token type. So this line has to read \"Basic\" instead of \"Bearer\" if a user uses the config from above \n. Do not upgrade, as it will break authorization in the current form. I am working on a PR\n. no problem. unfortunately I found a bug in registry-auth-token:\nhttps://github.com/rexxars/registry-auth-token/pull/6\nOnce that is merged and released, i will send you the MR\n. ",
    "pra85": "No problems :+1: \n. ",
    "niftylettuce": "I got the same error here.\n. Both less and gulp-less are installed\n. Looks to me like gulp-less requires less through the accord package:\n\n. Umm I could try, I was going to try using yarn since it's all the rage, but I ran into this issue https://github.com/yarnpkg/yarn/issues/872 haha.  I don't think this happens with pnpm though \ud83d\udc4d \ud83d\udce6 \ud83d\udea2 :shipit: \n. ",
    "haggholm": "I just encountered this problem today with the latest version of pnpm (0.39.0).\n. ",
    "HenryTheHamster": "Also encountered this problem on 0.40.0. Possibly related to https://github.com/rstacruz/pnpm/issues/403?\n. Just to update our findings on this:\nversion == 0.40.0\nSubsequent to a pnpm i, if we install gulp and gulp-less locally using pnpm, the less: None found error goes away, but we get hit by a different gulp error, namely missing babel transforms (also included by a dep), which suggests, at least for our purposes, that we really do need a flat NPM 3 structure for this to be a viable replacement to NPM.\nnpm i continues to work fine (albeit very slowly)\nKeep up the great work guys!\n. We're still getting a Error: 'tried to require: less'. None found. Make sure one has been installed! when installing using --flat-tree and version 0.42.4. I'd like to test this a bit more thoroughly, but I'm currently on a very shaky network, so will have to wait till tonight.\n. Confirmed the above - this is still a bug :(\n. ",
    "TigersWay": "Still get the original error as of today! \npnpm -v\n1.24.3\ngulp & gulp-less installed with npm: ok\ngulp & gulp-less installed with pnpm (with the simpliest silly test files)\n```\nmodule.js:557\n    throw err;\n    ^\nError: Cannot find module 'less'\n    at Function.Module._resolveFilename (module.js:555:15)\n    at Function.resolve (internal/module.js:18:19)\n    at resolve_engine_path (/home/ben/TigersWay/projects/tryGulp/node_modules/.registry.npmjs.org/accord/0.27.3/node_modules/accord/lib/index.js:65:18)\n    at Object.exports.load (/home/ben/TigersWay/projects/tryGulp/node_modules/.registry.npmjs.org/accord/0.27.3/node_modules/accord/lib/index.js:25:19)\n    at Object. (/home/ben/TigersWay/projects/tryGulp/node_modules/.registry.npmjs.org/gulp-less/3.4.0/node_modules/gulp-less/index.js:9:29)\n    at Module._compile (module.js:660:30)\n    at Object.Module._extensions..js (module.js:671:10)\n    at Module.load (module.js:573:32)\n    at tryModuleLoad (module.js:513:12)\n    at Function.Module._load (module.js:505:3)\nI can then add less which **should not be needed as already added by gulp-less** and it's working. As this does not seem to be fixable quickly, the \"fix\" should be added and explained in the first page. Quite a lot of dev. already gave up and it's a pity!. but \n`pnpm -g ls`\ngives\n`ERROR ENOENT: no such file or directory, open 'C:\\Program Files\\nodejs\\pnpm-global\\package.json'`\nunder Windows (10) as you may have guessed with pnpm v1.8.1.\nD:\\TigersWay\\Projects\\Learning\\justTry>pnpm install gulp --save-dev\nAdding 181 packages to node_modules\n\u2009WARN\u2009 EXDEV: cross-device link not permitted, link 'C:\\Users\\Ben.pnpm-store\\2\\registry.npmjs.org\\chalk\\1.1.3\\node_modules\\chalk\\license' -> 'D:\\TigersWay\\Projects\\Learning\\justTry\\node_modules.registry.npmjs.org\\chalk\\1.1.3\\node_modules\\chalk+stage\\license'\nFalling back to copying packages from store\nRelinking D:\\TigersWay\\Projects\\Learning\\justTry\\node_modules.registry.npmjs.org\\core-util-is\\1.0.2\\node_modules\\core-util-is from\nthe store\nResolving: total 181, reused 5, downloaded 176, done\nRelinking D:\\TigersWay\\Projects\\Learning\\justTry\\node_modules.registry.npmjs.org\\safe-buffer\\5.1.1\\node_modules\\safe-buffer from the store\nRelinking D:\\TigersWay\\Projects\\Learning\\justTry\\node_modules.registry.npmjs.org\\extend\\3.0.1\\node_modules\\extend from the store\nRelinking D:\\TigersWay\\Projects\\Learning\\justTry\\node_modules.registry.npmjs.org\\mkdirp\\0.5.1\\node_modules\\mkdirp from the store\nRelinking D:\\TigersWay\\Projects\\Learning\\justTry\\node_modules.registry.npmjs.org\\minimist\\0.0.8\\node_modules\\minimist from the store\ndevDependencies:\n+ gulp 3.9.1\n``\nIt seems to be working... But I thought I would find a.pnpm-storefolder in D:`, but there is nothing.\nI haven't been working with pnpm for a few weeks...  Did I miss something? ;-). node_modules/.modules.yaml gives store: 'C:\\Users\\Ben\\.pnpm-store\\2' !\nWell, let's try again :-) sorry.\nnodejs & npm are one the system drive C:, all projects are somewhere in D:\\TigersWay\\, and I am not sure what you call a \"homedir\".\nHow should I proceed to re-install and get the \"junctions/hard links\" benefits?\n. I think I understand the .npmrc file in the project root. But I am not sure what I should do for the global part.\nAnyway in case it is interesting for you, here is the detail - and some drivelist errors - of my last try a few minutes ago :-)\n```\nD:>node -v\nv9.0.0\nD:>npm -v\n5.5.1\nD:>npm -g ls -depth=0\nC:\\Users\\Ben\\AppData\\Roaming\\npm\n`-- (empty)\nD:>npm -g config set store D:.pnpm-store\nD:>npm -g install pnpm\nC:\\Users\\Ben\\AppData\\Roaming\\npm\\pnpx -> C:\\Users\\Ben\\AppData\\Roaming\\npm\\node_modules\\pnpm\\lib\\bin\\pnpx.js\nC:\\Users\\Ben\\AppData\\Roaming\\npm\\pnpm -> C:\\Users\\Ben\\AppData\\Roaming\\npm\\node_modules\\pnpm\\lib\\bin\\pnpm.js\n\ndrivelist@5.2.6 install C:\\Users\\Ben\\AppData\\Roaming\\npm\\node_modules\\pnpm\\node_modules\\drivelist\nprebuild-install || node-gyp rebuild\n\nprebuild-install info begin Prebuild-install version 2.3.0\nprebuild-install info looking for local prebuild @ prebuilds\\drivelist-v5.2.6-node-v59-win32-x64.tar.gz\nprebuild-install info looking for cached prebuild @ C:\\Users\\Ben\\AppData\\Roaming\\npm-cache_prebuilds\\https-github.com-resin-io-modules-drivelist-releases-download-v5.2.6-drivelist-v5.2.6-node-v59-win32-x64.tar.gz\nprebuild-install http request GET https://github.com/resin-io-modules/drivelist/releases/download/v5.2.6/drivelist-v5.2.6-node-v59-win32-x64.tar.gz\nprebuild-install http 404 https://github.com/resin-io-modules/drivelist/releases/download/v5.2.6/drivelist-v5.2.6-node-v59-win32-x64.tar.gz\nprebuild-install WARN install No prebuilt binaries found (target=9.0.0 runtime=node arch=x64 platform=win32)\nC:\\Users\\Ben\\AppData\\Roaming\\npm\\node_modules\\pnpm\\node_modules\\drivelist>if not defined npm_config_node_gyp (node \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\node-gyp-bin\\....\\node_modules\\node-gyp\\bin\\node-gyp.js\" rebuild )  else (node \"\" rebuild )\ngyp ERR! configure error\ngyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON env variable.\ngyp ERR! stack     at PythonFinder.failNoPython (C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\lib\\configure.js:483:19)\ngyp ERR! stack     at PythonFinder. (C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\lib\\configure.js:508:16)\ngyp ERR! stack     at C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\graceful-fs\\polyfills.js:284:29\ngyp ERR! stack     at FSReqWrap.oncomplete (fs.js:166:21)\ngyp ERR! System Windows_NT 10.0.15063\ngyp ERR! command \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js\" \"rebuild\"\ngyp ERR! cwd C:\\Users\\Ben\\AppData\\Roaming\\npm\\node_modules\\pnpm\\node_modules\\drivelist\ngyp ERR! node -v v9.0.0\ngyp ERR! node-gyp -v v3.6.2\ngyp ERR! not ok\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: drivelist@5.2.6 (node_modules\\pnpm\\node_modules\\drivelist):\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: drivelist@5.2.6 install: prebuild-install || node-gyp rebuild\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: Exit status 1\n``\n. @zkochan Just checking back again (and more than willing to test anything)...  But it seems we did not make any progress on this line.\nAnyone? Anyone succeeded to have everything normally installed on one disk and projects on another?. Stubborn :-) and I had other troubles, I found/choose another path:nvm (https://github.com/coreybutler/nvm-windows) &npm install -g pnpm --ignore-scripts`\nI now have my , hardlinks and junctions, all working!. Global packages should be installed to the  folder (https://docs.npmjs.com/files/folders#prefix-configuration)\n1264 . If I'm not wrong......\nnvm-windows leads to the same kind of troubles: global packages installed under %AppData%\\Roaming\\npm when they should be (by default) C:\\Program Files\\nodejs or wherever we decided to install nodejs exe.\nBut why create 2 new parameters/configs?? Why not use prefix?\nEdited: prefix WITHOUT \"bin\". ",
    "stevelacy": "@zkochan gulp-less published to 3.5.0. ",
    "istarkov": "You are right, thank you!!!\n. ",
    "yujiangshui": "@patrickheeney Thanks for your reply.\n. ",
    "neemzy": "I'm interested in this as well\n. ",
    "markerikson": "I'd be interested in knowing if this will successfully handle installing from a shrinkwrap file that has updated file paths, namely, the modified shrinkwrap files created by https://github.com/JamieMason/shrinkpack .\n. ",
    "aletandilero": "As someone who likes pnpm, and wants to vouch for it to my fellow npm-using colleagues, the lack of this option is a no-go for me.\nHaving two different lock files turns into two different sets of version resolutions. I can't (and shouldn't) force pnpm adoption, but pnpm would have a lot more \"appeal\" if it were compatible with npm lock files.\nThanks in advance, excellent tool!! \ud83d\ude04 . ",
    "manning390": "I did. Checking npm's directory I can see it installed.\nOn Tue, Mar 1, 2016, 11:01 AM Vladimir Starkov notifications@github.com\nwrote:\n\ndid you install it globally?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/137#issuecomment-190834459.\n. Not sure what happened (Again I could see that it was installed). But I ran\nnpm install -g pnpm again and now it works. Probably something on my system\njust messed up.\n\nThanks for all the support!\nOn Tue, Mar 1, 2016 at 1:00 PM Rico Sta. Cruz notifications@github.com\nwrote:\n\nalso are you using something like n or nvm or asdf or...?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rstacruz/pnpm/issues/137#issuecomment-190879061.\n. \n",
    "KostyaEsmukov": "I'm constantly getting ! ENOENT: no such file or directory ... errors on my setup with the latest pnpm 0.18.0, and this change you've made fixes the problem for me: just tried to pnpm install for 5 times in a row and never faced this error again.\nI think this quick fix should be merged and published ASAP, because ENOENT problem makes pnpm practically unusable (at least for me). And then it might be expedient to think how to make this fix even better: get rid of sync, etc. \n@rstacruz , what do you think of this?\n. It rocks! Drastically reduced my npm install times. \nNo problems with the new version by far, everything is smooth.\nThank you fellows!\n. +1 on this.\nExperiencing failures due to random 500s (it's --quiet mode):\nResponse code 500 (Internal Server Error)\nGET registry.npmjs.org/@angular%2Fcommon\n. OK, I found out what's going on here.\n1. caw() was always assuming that we're going to make plain http connections, while we could also do https (that's why https:// link couldn't work via proxy) \n2. tunnel-agent always issues CONNECT even for plain http connections, making squid expectedly confused (it acts like a mitm in my setup, thus it expects that a client will do ssl/tls stuff to him). Well, not using plain http is the simplest solution out there. It's not pnpm's issue anyway.\n3. cafile config setting is ignored, so I had to set the NODE_TLS_REJECT_UNAUTHORIZED=0 env var to work around this for now.\nJust to note, the tunnel-agent doesn't support keep alive, so pnpm is actually two times slower with caching http proxy than without it.\n. ",
    "rexxars": "Still getting this error for scoped modules (unsure, but think there might need to be two modules within the same scope for this to happen):\n! ENOENT: no such file or directory, symlink '../_' -> '/home/espenh/webdev/foo/node_modules/.tmp/93e7e12b-0eda-42f1-b1a9-4b8f16bd60e6/node_modules/@sanity/resolver'\n. I think this one might solve #105, but not 100% sure because I still can't make out exactly how always-auth works.\n. It seems like there is a bug in relation to scoped modules and creation of symlinks - are you aware of this @rstacruz? This PR works fine if there is a single scoped module, but often (always?) fails if there is multiple scoped modules within the same scope.\nShould I try to reproduce this issue, or is this a known issue?\n. Any ideas?\n. I think there has been a regression lately - I've experienced the same issue. Don't have time to investigate right now, but maybe @zkochan knows what has changed since this was merged?\n. Since the latest release, installing a single scoped package works fine. It seems to have problems with multiple files from the same scope, however, getting errors such as:\n! ENOENT: no such file or directory, symlink '../_' -> '<project-dir>/node_modules/.tmp/8a8f44c3-5f1d-4054-b30c-a6ab22dc94c3/node_modules/@sanity/router'\nAny ideas, @rstacruz? I guess I could try to set up a few public scoped packages if you want to try to reproduce/fix?\n. Seems like it works fine even for two dependencies, as long as they are defined in the same project. The problem seems to be when package a depends on b, which in turn depends on c. At least that's my working theory so far.\n. :clap: Great work!\nSuper keen on seeing this merged.\n. The module only prints if it detects a TTY. Also, the defer option is true by default, which means:\n\nDefer showing the notification to after the process has exited.\n. We could explicitly set NO_UPDATE_NOTIFIER when running on CI, if needed, but it shouldn't really ever find any updates since it's running the latest version... Right?\n. I'd need some more debug info to figure it out. How does the npm config look? Is the authorization info sent to Artifactory at all? Is always-auth set to true or false in npmrc?. \n",
    "osdevisnot": "We use few private packages which need auth. If this is merged I can probably contribute towards testing this feature.\n. Closing in favor of #161\n. ",
    "jrnail23": "Is this issue resolved?\nIs it possible to use pnpm to install private modules?  If so, how do I do it?\nthanks in advance!\n. ",
    "BrianAdams": "Ran in to this today:\n\nERROR EINVAL: invalid argument, readlink '/Users/brian/project/node_modules/binary-parser'\n\npnpm --version\n\n0.58.0\n\nJust to note, npm clear cache did not help.. Removing node_modules after a prior npm install appears to have fixed the above error. Thanks!. ",
    "mdreizin": "@andreypopp Before start my implementation I would like to review existing PRs.\nI would be nice to have some tests to understand how it should work in case of pnpm install https://docs.npmjs.com/files/package.json#github-urls\nIMHO it should handle git packages https://docs.npmjs.com/files/package.json#git-urls-as-dependencies\n@rstacruz have you had a chance to look at it?\n. @andreypopp Yes, It doesn't do that in this PR.\n. ",
    "helsont": "does this feature also work with private github repos?\n. ",
    "ratson": "From https://github.com/npm/npm/blob/master/doc/cli/npm-install.md\n\nThe --ignore-scripts argument will cause npm to not execute any scripts defined in the package.json. See npm-scripts(7).\n. \n",
    "martinsik": "Do you mean packages fetched from git? For example:\n\"dependencies\": {\n    \"my-package\": \"git+ssh://git@bitbucket.org/company/my-package.git\"\n}\nThis will be rejected with:\n```\n$ ./node_modules/.bin/pnpm i\n  company/my-package git+ssh://git@bitbucket.org/company/my-package.git      ERROR \u2717 \n! git+ssh://git@bitbucket.org/company/my-package.git: hosted packages not supported\n```\nI guess this is mentioned in https://github.com/rstacruz/pnpm/blob/master/docs/roadmap.md under git-hosted packages which is still unchecked.\nBtw, pnpm version:\n$ ./node_modules/.bin/pnpm -v\n0.31.1\n. ",
    "tomitrescak": "Where is the .npmrc located?\n. You seem to download packages just fine, but they get stuck in the .tmp folder.\n. @zkochan fair enough! I wrote a blog post about pnpm several years ago and it's my most visited post on Medium ;) I haven't been using it for many years though, just got back to ity and found out it came a long way. What everyone else makes so complex this makes it easy. I just wish I did not have to write --shamfully-flatten all the time. Unfortunately packages I work with attract a lot of unresolved peer dependencies. Thanks again.. Now my life is complete ;) Thanks for the great work. ",
    "nielsvermaut": "@iamstarkov kind of off topic, but it fails in my gulp file with gulp-util.\n. @iamstarkov I didn't want to come accros as rude, apologies if I did. I just can't see why my packages would be specific to this problem.\n. It was on a Linux build server. I'll try to provide some more details tomorrow, because I cannot access it right now.\n. ",
    "amilajack": "The tests that pass are local tests. Not sure why travis ci tests are failing\n. ",
    "yunasc": "Can agree. Same issue with git+https:// protocol.\n. ",
    "thalesmello": "@zkochan Worked perfectly! Great implementation, by the way \ud83d\udc4d \n. \ud83d\udc4d  Nice work!\n. ",
    "BryanCrotaz": "callstack:\nError: ENOENT: no such file or directory, symlink 'C:\\projects\\ember-dds\\node_modules\\.tmp\\b29ed689-6a38-46f7-8d2d-c8aed1c19253\\_\\node_modules\\npm\\bin\\npm-cli.js' -> 'C:\\projects\\ember-dds\\node_modules\\.tmp\\b29ed689-6a38-46f7-8d2d-c8aed1c19253\\_\\node_modules\\.bin\\npm'\n    at Error (native)\n    at Object.fs.symlinkSync (fs.js:897:18)\n    at forceSymlink (C:\\npm\\global\\node_modules\\pnpm\\lib\\fs\\force_symlink.js:17:8)\n    at C:\\npm\\global\\node_modules\\pnpm\\lib\\fs\\force_symlink.js:27:9\n    at FSReqWrap.oncomplete (fs.js:82:15)\n. Also seeing this error on a minority of the failed packages:\nError: EBUSY: resource busy or locked, unlink 'C:\\projects\\ember-dds\\node_modules\\.tmp\\1e078abd-86e9-439d-990e-baea8d0c22a4\\_\\node_modules\\.bin\\nopt'\n    at Error (native)\n. Better - this error is gone but it still fails\n. See issue #292 \n. package.json\n{\n  \"name\": \"ember-dds\",\n  \"version\": \"0.0.0\",\n  \"description\": \"The default blueprint for ember-cli addons.\",\n  \"directories\": {\n    \"doc\": \"doc\",\n    \"test\": \"tests\"\n  },\n  \"scripts\": {\n    \"build\": \"ember build\",\n    \"start\": \"ember server\",\n    \"test\": \"ember try:testall\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+ssh://git@bitbucket.org/silvercurve/ember-dds.git\"\n  },\n  \"engines\": {\n    \"node\": \">= 0.10.0\"\n  },\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"broccoli-asset-rev\": \"^2.4.2\",\n    \"broccoli-clext\": \"^0.5.2\",\n    \"ember-ajax\": \"0.7.1\",\n    \"ember-cli\": \"2.5.0\",\n    \"ember-cli-app-version\": \"^1.0.0\",\n    \"ember-cli-code-coverage\": \"^0.2.2\",\n    \"ember-cli-dependency-checker\": \"^1.2.0\",\n    \"ember-cli-htmlbars-inline-precompile\": \"^0.3.1\",\n    \"ember-cli-inject-live-reload\": \"^1.4.0\",\n    \"ember-cli-jshint\": \"^1.0.0\",\n    \"ember-cli-qunit\": \"^1.4.0\",\n    \"ember-cli-release\": \"0.2.8\",\n    \"ember-cli-sri\": \"^2.1.0\",\n    \"ember-cli-uglify\": \"^1.2.0\",\n    \"ember-data\": \"^2.5.0\",\n    \"ember-disable-prototype-extensions\": \"^1.1.0\",\n    \"ember-export-application-global\": \"^1.0.5\",\n    \"ember-load-initializers\": \"^0.5.1\",\n    \"ember-resolver\": \"^2.0.3\",\n    \"ember-try\": \"^0.2.2\",\n    \"ember-websockets\": \"3.0.0\",\n    \"loader.js\": \"^4.0.1\"\n  },\n  \"keywords\": [\n    \"ember-addon\"\n  ],\n  \"dependencies\": {\n    \"ember-cli-babel\": \"^5.1.6\",\n    \"ember-cli-htmlbars\": \"^1.0.3\"\n  },\n  \"ember-addon\": {\n    \"configPath\": \"tests/dummy/config\"\n  }\n}\n. It may just be a console issue - if I run pnpm install again it completes in about a second with\nC:\\projects\\ember-dds>pnpm install\n  broccoli-asset-rev ^2.4.2                                            OK \u2713\n  ember-cli-babel ^5.1.6                                               OK \u2713\n  ember-cli-htmlbars ^1.0.3                                            OK \u2713\n  ember-cli-code-coverage ^0.2.2                                       OK \u2713\n  ember-cli-app-version ^1.0.0                                         OK \u2713\n  ember-cli 2.5.0                                                      OK \u2713\n  ember-ajax 0.7.1                                                     OK \u2713\n  broccoli-clext ^0.5.2                                                OK \u2713\n  ember-cli-dependency-checker ^1.2.0                                  OK \u2713\n  ember-cli-htmlbars-inline-precompile ^0.3.1                          OK \u2713\n  ember-cli-inject-live-reload ^1.4.0                                  OK \u2713\n  ember-cli-sri ^2.1.0                                                 OK \u2713\n  ember-cli-release 0.2.8                                              OK \u2713\n  ember-disable-prototype-extensions ^1.1.0                            OK \u2713\n  ember-data ^2.5.0                                                    OK \u2713\n  ember-export-application-global ^1.0.5                               OK \u2713\n  ember-resolver ^2.0.3                                                OK \u2713\n  ember-load-initializers ^0.5.1                                       OK \u2713\n  ember-websockets 3.0.0                                               OK \u2713\n  loader.js ^4.0.1                                                     OK \u2713\n. However the install didn't work correctly:\nC:\\projects\\ember-dds>ember serve\nDEPRECATION: ember-try is now included with ember-cli. Including it in your package.json is unnecessary.\nCannot find module 'glob'\nError: Cannot find module 'glob'\n    at Function.Module._resolveFilename (module.js:325:15)\n    at Function.Module._load (module.js:276:25)\n    at Module.require (module.js:353:17)\n    at require (internal/module.js:12:17)\n    at module.exports (C:\\projects\\ember-dds\\server\\index.js:13:20)\n    at Class.module.exports.Task.extend.processAppMiddlewares (C:\\projects\\ember-dds\\node_modules\\.store\\ember-cli@2.5.0\\_\\lib\\tasks\\server\\express-server.js:126:14)\n    at Class.<anonymous> (C:\\projects\\ember-dds\\node_modules\\.store\\ember-cli@2.5.0\\_\\lib\\tasks\\server\\express-server.js:220:21)\n    at lib$rsvp$$internal$$tryCatch (C:\\projects\\ember-dds\\node_modules\\.store\\rsvp@3.2.1\\_\\dist\\rsvp.js:1036:16)\n    at lib$rsvp$$internal$$invokeCallback (C:\\projects\\ember-dds\\node_modules\\.store\\rsvp@3.2.1\\_\\dist\\rsvp.js:1048:17)\n    at C:\\projects\\ember-dds\\node_modules\\.store\\rsvp@3.2.1\\_\\dist\\rsvp.js:331:11\n. To run the full process yourself:\nnpm install -g ember-cli\nnpm install -g bower\nember new myapp\ncd myapp\npnpm install\nbower install\nember serve\nThen browse to //localhost:4200 and you should see an hello world web page\n. results from git-fix branch\n```\n  debug ^2.1.3                                                    finding \u00b7\n  make-array ^0.1.2                                               finding \u00b7\n  deep-is ~0.1.3                                                    0.1.3 \u2713\n  type-check ~0.3.2                                                 0.3.2 \u2713\n  heimdalljs ^0.2.1                                               finding \u00b7\n  git-repo-info ^1.0.4                                            finding \u00b7\n  inherits 2.0.1                                                    2.0.1 \u2713\n  setprototypeof 1.0.1                                              1.0.1 \u2713\n  statuses >= 1.3.0 < 2                                             1.3.0 \u2713\n  ember-resolver ^2.0.3                                           finding \u00b7\n  source-map ~0.5.1                                                 0.5.6 \u2713\n  ember-cli-app-version ^1.0.0                                    finding \u00b7\n  mime-types ~2.1.11                                               2.1.11 \u2713\n  escape-html ~1.0.3                                                1.0.3 \u2713\n  heimdalljs ^0.2.1                                               finding \u00b7\n  debug ^2.1.1                                                      2.2.0 \u2713\n  matcher-collection ^1.0.1                                       finding \u00b7\n  fs-extra ^0.26.0                                                 0.26.7 \u2713\n  rimraf ^2.3.2                                                     2.5.4 \u2713\n  semver ^5.1.0                                                   finding \u00b7\n  walk-sync ^0.2.6                                                finding \u00b7\n  babel-core ^5.8.38                                              finding \u00b7\n  babel-plugin-htmlbars-inline-precompile ^0.1.0                  finding \u00b7\n  setprototypeof 1.0.1                                            finding \u00b7\n  ember-cli-app-version ^1.0.0                                    finding \u00b7\n  mime-db ~1.23.0                                                  1.23.0 \u2713\n  mkdirp ^0.5.0                                                   finding \u00b7\n  sane ^1.1.1                                                       1.1.5 \u00b7\n  is-utf8 ^0.2.0                                                    0.2.3 \u2713\n  ember-load-initializers ^0.5.1                                  finding \u00b7\n  ember-cli-app-version ^1.0.0                                    finding \u00b7\n  minimatch 2 || 3                                                  3.0.3 \u2713\n  ember-cli-app-version ^1.0.0                                      1.0.0 \u2713\n  ember-cli-app-version ^1.0.0                                      1.0.0 \u00b7\n  matcher-collection ^1.0.1                                         1.0.1 \u2713\n  cli 0.6.x                                                         0.6.6 \u2713\n  console-browserify 1.1.x                                          1.1.0 \u2713\n  broccoli-concat ^2.2.0                                          finding \u00b7\n  ember-cli-app-version ^1.0.0                                      1.0.0 \u2713\n  minimatch 2.0.x                                                  2.0.10 \u2713\n  shelljs 0.3.x                                                     0.3.0 \u2713\n  ember-cli-htmlbars-inline-precompile ^0.3.1                     finding \u00b7\n  async 1.x                                                         1.5.2 \u2713\n  loader.js ^4.0.1                                      downloading 4.0.1 \u2193\n  ember-cli-app-version ^1.0.0                                      1.0.1 \u00b7\n  fileset 0.2.x                                                     0.2.1 \u2713\n  js-yaml 3.x                                                       3.6.1 \u2713\n  git-tools ^0.1.4                                                finding \u00b7\n  uglify-js ^2.6.0                                                finding \u00b7\n  git-repo-info ^1.0.4                                              1.0.6 \u2713\n  ember-cli-sri ^2.1.0                                            finding \u00b7 nal command,\n  utf-8-validate@1.2.1! operable program or batch file.\n  bufferutil@1.2.1! 'node-gyp' is not recognized as an internal or external command,\n  ember-cli-app-version ^1.0.0                                      1.0.0 \u2713\n  ember-disable-prototype-extensions ^1.1.0                         1.1.0 \u00b7\n  mime-types ~2.1.11                                              finding \u00b7\n  has-ansi ^2.0.0                                                 finding \u00b7\n  babel-plugin-htmlbars-inline-precompile ^0.1.0                  finding \u00b7\n  setprototypeof 1.0.1                                              1.0.1 \u00b7\n  depd ~1.1.0                                                     finding \u00b7\n  exit 0.1.2                                                        0.1.2 \u2713\n  iconv-lite ~0.4.13                                               0.4.13 \u2713\n  argparse ^1.0.7                                                   1.0.7 \u2713\n  content-type ~1.0.2                                             finding \u00b7\n  domhandler 2.3                                                    2.3.0 \u2713\n  escape-html ~1.0.3                                              finding \u00b7\n  readable-stream 1.1                                              1.1.14 \u2713\n  parseurl ~1.3.1                                                 finding \u00b7\n  qs 6.2.0                                                        finding \u00b7\n  ember-inflector ^1.9.4                                            1.9.6 \u2713\n  uglify-js ^2.6                                                    2.7.0 \u2713\n  setprototypeof 1.0.1                                              1.0.1 \u2713\n  ember-cli-app-version ^1.0.0                                      1.1.1 \u00b7\n  broccoli-concat ^2.2.0                                          finding \u00b7\n  domelementtype ~1.1.1                                             1.1.1 \u2713\n  ember-cli-app-version ^1.0.0                                    finding \u00b7\n  ember-cli-app-version ^1.0.0                                    finding \u00b7\n  sane ^1.1.1                                                     finding \u00b7\n  depd ~1.1.0                                                     finding \u00b7\n  git-repo-version 0.3.0                                          finding \u00b7\n  matcher-collection ^1.0.1                                         1.0.3 \u2713\n  rimraf ^2.2.8                                                   finding \u00b7\n  on-finished ~2.3.0                                              finding \u00b7\n  cpr 0.4.2                                                         0.4.2 \u2713\n  diff ^2.2.2                                                       2.2.3 \u2713\n  semver ^4.3.1                                                   finding \u00b7\n  graceful-fs ^4.1.2                                              finding \u00b7\n  minimist ^1.1.2                                                 finding \u00b7\n  ember-export-application-global ^1.0.5                            1.0.5 \u2713\n  has-ansi ^2.0.0                                                   2.0.1 \u2713\n  prelude-ls ~1.1.2                                               finding \u00b7\n  walker ~1.0.5                                                   finding \u00b7\n  inquirer ^0.12.0                                                 0.12.0 \u00b7\n  leek 0.0.21                                                      0.0.21 \u00b7\n  markdown-it 4.3.0                                     downloading 4.3.0 \u2193\n  nopt ^3.0.1                                                       3.0.6 \u2713\n  ansi-styles ~1.0.0                                              finding \u00b7\n  npm 2.14.21                                         downloading 2.14.21 \u2193\n  raw-body ~2.1.7                                                 finding \u00b7\n  rimraf ^2.4.4                                                     2.5.4 \u2713\n  temp 0.8.3                                                        0.8.3 \u2713\n  testem ^1.6.0                                        downloading 1.10.3 \u2193\n  on-finished ~2.3.0                                              finding \u00b7\n  minimist ^1.1.2                                                   1.1.2 \u2713\n  ee-first 1.1.1                                                    1.1.1 \u00b7\n  ember-cli-app-version ^1.0.0                                      1.2.1 \u00b7\n  mkdirp ^0.5.0                                                     0.5.0 \u00b7\n  broccoli-plugin ^1.2.1                                            1.4.1 \u00b7\n  ember-export-application-global ^1.0.5                          finding \u00b7\n  is-utf8 ^0.2.0                                                    0.2.0 \u00b7\n  bower-endpoint-parser 0.2.2                                     finding \u00b7\n  is-utf8 ^0.2.0                                                    0.2.0 \u2713\n  bower-endpoint-parser 0.2.2                                queued 0.2.2 \u2193\n  quick-temp ^0.1.5                                                 0.1.5 \u2713\n  mute-stream 0.0.4                                                 0.0.4 \u2713\n  graceful-fs ^4.1.4                                                4.1.5 \u2713\n  minimist ^1.1.2                                                 finding \u00b7\n  uglify-js ^2.6.0                                                finding \u00b7\n  accepts ~1.3.3                                                    1.3.3 \u2713\n  bytes 2.3.0                                                       2.3.0 \u2713\n  compressible ~2.0.8                                               2.0.8 \u2713\n  fs-extra ^0.24.0                                                 0.24.0 \u2713\n  eventemitter3 1.x.x                                               1.0.0 \u2713\n  colors ~0.6.0-1                                                   0.6.2 \u2713\n  rimraf ^2.4.4                                                   finding \u00b7\n  merge ^1.1.3                                                    finding \u00b7\n  domelementtype ~1.1.1                                             1.1.1 \u2713\n  ansi-styles ~1.0.0                                              finding \u00b7\n  depd ~1.1.0                                                     finding \u00b7\n  mkdirp ~0.5.0                                                     0.5.6 \u2713\n  markdown-it 4.3.0                                                 4.3.0 \u2713\n  mkdirp ~0.5.0                                                     0.5.0 \u00b7\n  ember-cli-app-version ^1.0.0                                      1.0.0 \u00b7\n  loader.js ^4.0.1                                                finding \u00b7\n  prelude-ls ~1.1.2                                                 1.1.2 \u2713\n  minimatch ^2.0.1                                                  2.0.1 \u2713\n  matcher-collection ^1.0.1                                       finding \u00b7\n  concat-map 0.0.1                                      downloading 0.0.1 \u2193\n  glob ^6.0.1                                                       6.0.4 \u2713\n  negotiator 0.6.1                                                  0.6.1 \u2713\n  figures ^1.3.5                                                    1.7.0 \u2713\n  ember-cli-app-version ^1.0.0                                    finding \u00b7\n  has-color ~0.1.0                                                finding \u00b7\n  broccoli-writer ~0.1.1                                          finding \u00b7\n  ember-cli-app-version ^1.0.0                                    finding \u00b7\n  strip-ansi ^3.0.0                                                 3.9.1 \u2713\n  through ~2.3.8                                                    2.3.8 \u2713\n  cookie-signature 1.0.6                                            1.0.6 \u2713\n  loader.js ^4.0.1                                                  4.0.1 \u2713\n  etag ~1.7.0                                                       1.7.0 \u2713\n  has-ansi ^2.0.0                                                   2.0.1 \u00b7\n  utils-merge 1.0.0                                               finding \u00b7\n  mute-stream 0.0.4                                               finding \u00b7\n  ember-disable-prototype-extensions ^1.1.0                       finding \u00b7\n  has-color ~0.1.0                                                finding \u00b7\n  broccoli-kitchen-sink-helpers ~0.2.0                            finding \u00b7\n  setprototypeof 1.0.1                                            finding \u00b7\n  parseurl ~1.3.0                                                   1.3.0 \u2713\n  ember-cli-app-version ^1.0.0                                      1.0.2 \u2713\n  source-map 0.1.32                                                0.1.32 \u2713\n  has-ansi ^2.0.0                                                   2.0.0 \u2713\n  xtend ^4.0.0                                                      4.0.0 \u2713\n  utils-merge 1.0.0                                          queued 1.0.0 \u2193\n  setprototypeof 1.0.1                                            finding \u00b7\n  exists-sync 0.0.3                                          queued 0.0.3 \u2193\n  mute-stream 0.0.4                                               finding \u00b7\n  lodash 3.7.x                                                      3.7.0 \u00b7\n  raw-body ~2.1.5                                                   2.1.7 \u2713\n  npm 2.14.21                                                     2.14.21 \u00b7\n  glob ^5.0.15                                                     5.0.15 \u2713\n  os-tmpdir ~1.0.1                                                     OK \u2713\n  recast ^0.10.0                                                  0.10.43 \u2713\n  ast-types 0.8.15                                                 0.8.15 \u2713\n  aws-sign2 ~0.6.0                                                  0.6.0 \u2713\n  ansi-styles ~1.0.0                                                   OK \u2713\n  extend ~3.0.0                                                     3.0.0 \u2713\n  content-type ~1.0.2                                                  OK \u2713\n  form-data ~1.0.0-rc4                                          1.0.0-rc4 \u2713\n  inherits ~2.0.1                                                      OK \u2713\n  hawk ~3.1.3                                                       3.1.3 \u2713\n  isstream ~0.1.2                                                   0.1.2 \u2713\n  source-map ~0.5.1                                                    OK \u2713\n  extend ~3.0.0                                                        OK \u2713\n  oauth-sign ~0.8.1                                                 0.8.2 \u2713\n  content-type ~1.0.2                                                  OK \u2713\n  stringstream ~0.0.4                                               0.0.5 \u2713\n  tunnel-agent ~0.4.1                                               0.4.3 \u2713\n  isstream ~0.1.2                                                      OK \u2713\n  deep-is ~0.1.3                                                       OK \u2713\n  recast ^0.11.3                                                  0.11.11 \u2713\n  ansicolors ~0.2.1                                                 0.2.1 \u2713\n  readable-stream ~2.0.5                                            2.0.6 \u2713\n  mime-types ^2.1.10                                               2.1.11 \u2713\n  qs ~5.1.0                                                            OK \u2713\n  verror 1.3.6                                                      1.3.6 \u2713\n  broccoli-kitchen-sink-helpers ~0.2.0                                 OK \u2713\n  ast-types 0.8.18                                                 0.8.18 \u2713\n  os-tmpdir ~1.0.1                                                     OK \u2713\n  commander ^2.9.0                                                  2.9.0 \u2713\n  ember-cli 2.5.0                                                   2.5.0 \u2713\n  bluebird ^3.4.0                                                   3.4.1 \u2713\n  consolidate ^0.14.0                                              0.14.1 \u2713\n  did_it_work 0.0.6                                                    OK \u2713\n  express ^4.10.7                                                  4.14.0 \u2713\n  fireworm ^0.7.0                                                   0.7.1 \u2713\n  glob ^7.0.4                                                       7.0.5 \u2713\n  http-proxy ^1.13.1                                               1.14.0 \u2713\n  js-yaml ^3.2.5                                                    3.6.1 \u2713\n  socket.io 1.4.7                                                   1.4.7 \u2713\n  xmldom ^0.1.19                                                   0.1.22 \u2713\n  boom 2.x.x                                                       2.10.1 \u2713\n  process-nextick-args ~1.0.6                                       1.0.7 \u2713\n  gauge ~2.6.0                                                      2.6.0 \u2713\n  set-blocking ~2.0.0                                               2.0.0 \u2713\n  bluebird ^3.1.1                                                   3.4.1 \u2713\n  esprima-fb ~12001.1.0-dev-harmony-fb           12001.1.0-dev-harmony-fb \u2713\n  underscore >=1.8.3                                                1.8.3 \u2713\n  which ^1.2.9                                                     1.2.10 \u2713\n  async ~0.2.9                                                     0.2.10 \u2713\n  readable-stream ^2                                                2.1.4 \u2713\n  js-yaml ^3.2.7                                                    3.6.1 \u2713\n  engine.io 1.6.10                                                 1.6.10 \u2713\n  socket.io-parser 2.2.6                                            2.2.6 \u2713\n  socket.io-client 1.4.6                                            1.4.6 \u2713\n  socket.io-adapter 0.4.0                                           0.4.0 \u2713\n  readable-stream ^2.0.0 || ^1.1.13                                 2.1.4 \u2713\n  tweetnacl ~0.13.0                                                0.13.3 \u2713\n  asn1 ~0.2.3                                                       0.2.3 \u2713\n  dashdash ^1.12.0                                                 1.14.0 \u2713\n  commander 2.8.x                                                   2.8.1 \u2713\n  source-map 0.4.x                                                  0.4.4 \u2713\n  socket.io-parser 2.2.2                                            2.2.2 \u2713\n  json3 3.3.2                                                       3.3.2 \u2713\n  component-emitter 1.1.2                                           1.1.2 \u2713\n  engine.io-client 1.6.9                                            1.6.9 \u2713\n  component-emitter 1.2.0                                           1.2.0 \u2713\n  to-array 0.1.4                                                    0.1.4 \u2713\n  jsonpointer 2.0.0                                                 2.0.0 \u2713\n  stringmap ~0.2.2                                                  0.2.2 \u2713\n  yargs ~3.27.0                                                    3.27.0 \u2713\n  engine.io-parser 1.2.4                                            1.2.4 \u2713\n  accepts 1.1.4                                                     1.1.4 \u2713\n  debug 0.7.4                                                       0.7.4 \u2713\n  json3 3.2.6                                                       3.2.6 \u2713\n  negotiator 0.4.9                                                  0.4.9 \u2713\n  mime-types ~2.0.4                                                2.0.14 \u2713\n  mime-db ~1.12.0                                                  1.12.0 \u2713\n  xmlhttprequest-ssl 1.5.1                                          1.5.1 \u2713\n  after 0.8.1                                                       0.8.1 \u2713\n  has-binary 0.1.6                                                  0.1.6 \u2713\n  marked ^0.3.2                                                     0.3.6 \u2713\n  marked-terminal ^1.6.1                                            1.6.1 \u2713\n  abbrev ~1.0.7                                                        OK \u2713\n  ansi ~0.3.1                                                          OK \u2713\n  columnify ~1.5.4                                                     OK \u2713\n  cmd-shim ~2.0.2                                                      OK \u2713\n  config-chain ~1.1.10                                                 OK \u2713\n  fs-vacuum ~1.2.7                                                     OK \u2713\n  fstream ~1.0.8                                                       OK \u2713\n  github-url-from-git ~1.4.0                                           OK \u2713\n  glob ~5.0.15                                                         OK \u2713\n  graceful-fs ~4.1.3                                                   OK \u2713\n  ini ~1.3.4                                                           OK \u2713\n  init-package-json ~1.9.3                                             OK \u2713\n  lru-cache ~3.2.0                                                     OK \u2713\n  hosted-git-info ~2.1.4                                               OK \u2713\n  node-gyp ~3.3.0                                                      OK \u2713\n  normalize-git-url ~3.0.1                                             OK \u2713\n  npm-package-arg ~4.1.0                                               OK \u2713\n  npm-registry-client ~7.0.9                                           OK \u2713\n  normalize-package-data ~2.3.5                                        OK \u2713\n  opener ~1.4.1                                                        OK \u2713\n  readable-stream ~1.1.13                                              OK \u2713\n  read-installed ~4.0.3                                                OK \u2713\n  request ~2.69.0                                                      OK \u2713\n  read-package-json ~2.0.3                                             OK \u2713\n  retry ~0.9.0                                                         OK \u2713\n  rimraf ~2.5.2                                                        OK \u2713\n  slide ~1.1.6                                                         OK \u2713\n  tar ~2.2.1                                                           OK \u2713\n  validate-npm-package-name ~2.2.2                                     OK \u2713\n  which ~1.2.4                                                         OK \u2713\n  write-file-atomic ~1.1.4                                             OK \u2713\nC:\\projects\\ember-dds>ember serve\nDEPRECATION: ember-try is now included with ember-cli. Including it in your package.json is unnecessary.\nCannot find module 'glob'\nError: Cannot find module 'glob'\n    at Function.Module._resolveFilename (module.js:325:15)\n    at Function.Module._load (module.js:276:25)\n    at Module.require (module.js:353:17)\n    at require (internal/module.js:12:17)\n    at module.exports (C:\\projects\\ember-dds\\server\\index.js:13:20)\n    at Class.module.exports.Task.extend.processAppMiddlewares (C:\\projects\\ember-dds\\node_modules.store\\ember-cli@2.5.0_\\lib\\tasks\\server\\express-server.js:126:14)\n    at Class. (C:\\projects\\ember-dds\\node_modules.store\\ember-cli@2.5.0_\\lib\\tasks\\server\\express-server.js:220:21)\n    at lib$rsvp$$internal$$tryCatch (C:\\projects\\ember-dds\\node_modules.store\\rsvp@3.2.1_\\dist\\rsvp.js:1036:16)\n    at lib$rsvp$$internal$$invokeCallback (C:\\projects\\ember-dds\\node_modules.store\\rsvp@3.2.1_\\dist\\rsvp.js:1048:17)\n    at C:\\projects\\ember-dds\\node_modules.store\\rsvp@3.2.1_\\dist\\rsvp.js:331:11\n``\n. Workaround doesn't work on node 4.3 (the standard version on CI servers) - 6.3 not rolled out yet.\n. We find that downloading node modules (gzipped) from S3 takes seconds rather than minutes fornpm i`\nWe use shippable.com - caching node modules took 1-2 minutes off the build time\n. ",
    "connorhartley": "This happens to me as well, even on v0.38.0.\n. Should be able to set the configs at the beginning of a command using the flags --userconfig and --globalconfig so this is fine. Thanks.\n. ",
    "jamen": "Agreed with @andreypopp on the second point.  For the results I use tap-spec with ava -t.\n. Hmm, this could be an error on my end, but isn't pnpm way faster?\nI'm using a global store (like yarn does I believe), and yarn takes roughly 8-10s in one of my projects, while pnpm takes less than a second.  (both done after caching).\n. ",
    "Grawl": "no, I can't share this project. it's not open source. we develop this on own git server.\n. I think we can try to use any gulp generator from Yeoman, like yeogurt, and have the same problems: https://gist.github.com/Grawl/4404df96380856a106fc70787d3e1a6f\n. @iamstarkov \n\ni was not able to pipe pnpm install log to the file =(\n\nI've just copied it right from Terminal with my mouse \ud83d\ude09 \n. @zkochan looks like it fixed now. all modules are installed without errors, gulp works fine.\n. @andreypopp should I install all packages again any time I want to uninstall one?\n. Oh guys seems like I am the first one who tried to uninstall something \ud83d\ude06 \n. ",
    "cprecioso": "Here you go:\n``` sh\n$ export DEBUG_PROMISE=true\n$ pnpm i runas           \n  runas                                                             ERROR \u2717  \n  nan 2.x                                                           2.4.0 \u2713 \n! spawn EACCES\nError: spawn EACCES\n    at exports.errnoException (util.js:1026:11)\n    at ChildProcess.spawn (internal/child_process.js:313:11)\n    at Object.exports.spawn (child_process.js:380:9)\n    at spawn (/Users/carlos/.nvm/versions/node/v6.5.0/lib/node_modules/pnpm/node_modules/cross-spawn/index.js:17:18)\n    at Promise (/Users/carlos/.nvm/versions/node/v6.5.0/lib/node_modules/pnpm/lib/run_script.js:15:18)\n    at runScript (/Users/carlos/.nvm/versions/node/v6.5.0/lib/node_modules/pnpm/lib/run_script.js:14:10)\n    at fs.stat.then. (/Users/carlos/.nvm/versions/node/v6.5.0/lib/node_modules/pnpm/lib/install/post_install.js:34:14)\n``\n.true. https://gist.githubusercontent.com/cprecioso/e08806857465c2ef860458edff123763/raw/d38ba5a105ed5ffed7df9e3b9f55678eff7b66d6/pnpn-debug.yml\n. Yep, it works. Going to close the issue then. Thanks!\n. I had the same issue. If--silentis the correct flag, couldpnpx --helpbe updated to reflect this? Currently it says to use-q`.. ",
    "idanh": "@zkochan, it may as well be a misuse but it is not mine. I cannot supply a sample code right now, but the scenario is as follows:\n1. install gulp-cli globally (npm i gulp-cli -g)\n2. create a module my-gulp-module with package.json as following: \"gulp\": \"^3.9.1\"\n3. create another module my-app with package.json as following: \"my-gulp-module\": \"../my-gulp-module\"\n4. in the second module (my-app) add gulpfile.js with a simple task that echos something.\nDo not add gulp dependency to my-app, it should be implicitly derived from my-gulp-module (as it's explicitly specified in it's package.json)\nIf you're executing 'npm install && gulp my-task' in my-app, everything will work.\nIf you're using 'pnpm install && gulp my-task', the error you are probably going to get is that \"gulp is not found\"\nNow, I'm not saying that it's your bug, I'm only giving a concrete example of a misbehaviour from 2 different setups. \nI also personally think that pnpm should mirror npm in the way it expends the packages so that it can be a drop-in replacement for npm\n. @andreypopp , I've verified that npm3 handles conflicts well (it preserve the transitive relation where there's a conflict).\nSo, in all cases, npm3 behaves well. It won't break the app and it's consistent with earlier implementations.\n@iamstarkov, Reuse of local packages is not the issue, the expansion of modules is the side-effect of compiling my concrete example with pnpm.\nI'll close this issue. It seems there's a consensus with not aligning with npm3. I suggest that you check if there's a bigger effect to this than what I've demonstrated here. As for my problem, I'll create a post-script to flatten those dependencies so I could continue using pnpm.\nThanks!\n. ",
    "mourner": "@iamstarkov yeah, the difference here is that it doesn't create bin stubs for direct dependencies (not deep ones).\n. @zkochan thank you very much for such a quick fix!\n. ",
    "coderaiser": "It is much better, actually, but would be better to leave only progress bar, and hide the updating list.\n. Yes, spinner like ora with percents would be great and something shorter then:\nsh\npnpm i --logger=simple\nMaybe env variable or ~/.pnpmrc  config file.\n. So pnpm compatible with npm in this way, great, thank you.\n. @zkochan It is great idea.\n. ",
    "ghost": "Where can I start to fix this? How can I help?\n. @zkochan Thanks for the hooray :)\nRegarding pnpm's use of a global store, it was my understanding that once a package is installed there, the versions of dependencies it uses don't change, because they're symlinks under the package's '/node_modules' to specific versions also in the global store. This is not a bad thing in-and-of-itself, but assuming my understanding is correct, it can result in multiple versions of shared, common modules being created in memory, when a single version would have sufficed.\nA larger potential concern, again assuming my understanding is correct, is it would also mean that the dependency versions for a package in a global store might change from machine-to-machine, which might not be ideal as it could result in subtle differences in behavior from machine-to-machine. Given those differences would exist in a transitive dependency, they might be a little harder to track down, and would then require changing the versions on one machine so they're inline with another, which could adversely affect some other project on the machine symlinked to the global package. This can be a problem when there are teams of developers, where's there desire to ensure everyone is using all the same versions of all dependencies, transitive or otherwise, for a given root '/node_modules'\nThe adjacent.node_modules approach addresses those issues in a very simple way, that can be used in flat trees, like pnpm and npm create, but also, in what I call 'bubble' trees, that npm and yarn create (where they try to 'bubble' common dependencies up the highest ancestor '/node_modules' directory), even in 'exploded' trees (like the very first ones 'npm' created way back when).\nHowever, I am human. Did I overlook something with how pnpm uses a machine store? I'd be very interested to understand this further.\n. @zkochan Also, not sure of you looked into the testing tool created to verify these things, but these two test cases might be of interest to you\nanm: Same Mod Dif Dep Ver\nanm: Flat Tree. @zkochan Oh, one more thing with adjacent.node_modules, is it also allows being able to represent module dependency cycles without requiring symlink directory cycles.\nFWIW, the yarn lock file can't work with machine level stores, but could with adjacent.node_modules. Having looked at alexanderGugel/ied#188,\nSay three months ago I was working on prjA that used modA@v1, that had a dependency on depB. When I installed prjA's dependencies for the first time, depB came in as depB@v1, and I created a lock file, locking depB@v1 for prjA.\nA week ago another dev started prjB, that also used modA@v1, but when they installed, depB came in at depB@v1.1. They created a lock file.\nToday I need to work on prjB. Assuming modA@v1 was in my machine store, it would sill be using depB@v1, so now what happens? I can update it so it use dep@v1.1, but then prjA's lock file is no longer being honored.\nCan you see the dilemma? adjacent.node_modules fixes all of that so simply... I hope you guys take a look and see the value, then get vocal with nodejs :). Awesome!! You'll be the first. I'm looking forward to your experience. You might want to review the two test cases I referenced a couple of comments ago as well.\nYou can also use the testing tool to quickly laydown test directory structures & modules, that when ran with node will output require() resolutions, that might help inform how you might make minor changes to pnpm\nGood luck!. @wmhilton Take a look here. Its the output showing how this works, using a custom test tool I've built for this whole thing. You may want to spend a couple of minutes reading the tool docs, but it should be fairly straightforward.. Re the test result link on last comment, look at how libC's version is getting resolved.. @zkochan Just FYI, I made a couple of updates to v7.2.0-sjw. First was changing the .node_modules to +node_modules like we'd discussed. I also removed checking the 'execute' bit on the \"main.js\", as @sam-github showed me the error of my ways. Now, if \"main.js\" is a file-symlink, it's resolved target always becomes the main modules __dirname (rather than converting to realpath). This should still work just fine, as someone symlinking a .js file to another .js, then placing the second away from the first, then launching with the second on the command line, and expecting the link to NOT be followed, is like never going to happen (knock on wood); today that senario would still not work, but even worse, as the released version would still convert to its realpath, as I'm sure you're fully aware of.\nI will say, I'm not entirely confident the guys over at nodejs are going to go for all this. I've been working on this for about a year. Not full time, but just thinking about. I spent the last three months actually trying different things, and in my opinion, the only way to have machine stores, remain backwards compatible, be interoperable, prevent directory cycles, and then do it in just three lines of the simplest code ever, that's adjacent+node modules, which currently the key players on nodejs are adamantly viewing as a -1, and no one there has spent even a second looking at all the test cases I created, or the flawless citgm output, which they made me jump through for no reason (and trust me citgm is soooo painful to use)\nI'm actually really bummed... But I have to thank you @zkochan, as over the last 3 months, in my various attempts at engaging people from nodejs, yarn, & npm, you're the only one who actually 'got' it, and your support has been a warm light in cold night.\nI will be curious to see how you get a prototype pnpm working, and I'll always help you in any way I can.. yes. @wmhilton They did a good job of making it super easy to compile node on either win or nix (on win you still need to install VS tool chain). Replied to your issue on the test repo; hope it clarifies things.\nIf we ever get nodejs to make this happen, I'd like to make a service that can run on a team of developers machines in the background, and whenever one of them downloads and installs a module to the machine store, all the others are told to go get the same. So when you go and start working on something another developer was, most the modules should already be on your machine, and then you symlink to them all in 2 seconds. ...nice dream anyways :). @zkochan @wmhilton You'll want to set NODE_SUPPORT_SYMLINKS=1 btw.\nAlso, there is no command line switch. This is to ensure when a node program spawns node for some reason, like if pnpm runs lifecycle scripts that live or depend on symdirs inside /node_modules for example, they both always run with same switch setting.. One other thing, when you do node -v you'll get v7.2.0-sjw so you know which one you're running. But this also means if you try to install an addon, node-gyp will try to download the headers for that version, which don't exist. However, you can tell node-gyp to get the v7.2.0 headers, and then go to, I think ~/.node-gyp, and just copy the v7.2.0 directory to v7.2.0-sjw. Did my response to your issue help?. @zkochan I think isaacs 1st approach really isn't viable, from my tests with hardlinking. His second approach might work, but your point about require('foo/bar') no longer working I think may likely doom it. After looking into it some more, even putting the realpath in the search list wont help, because it would be the path of the module calling require('foo/bar'), and not foo/'s. He will have to add a fair amount of complexity in order to, effectively, convert foo/ into foo/contents, as right now the implementation does everything by simply dealing with the strings of path parts, and to handle mapping foo/ to foo/contents will require additional \"housekeeping\" and keeping maps of paths, not to mention also ensuring all __dirnames descend from \"main.js\"'s symbolic path (which right now I don't think he even sees as an important requirement of any solution). WAY more complicated than the couple of lines that is anm.\nFurther, like anm, it will require tooling like webpack to be altered to resolve modules the same way. To me, the only reason to try so hard to do everything through /node_modules is if it wouldn't require those kinds of changes, and if those kinds are on the table, then anm is a much simpler and comprehensible solution in my opinion.\nI'm a bit frustrated, as not a single member from nodejs has actually acknowledged that the current anm prototype actually works at all, let alone very well, instead, if not just being outright silent and ignoring evidence to that effect, choosing to send out lots of -1's and :-1:'s on the edges of the thing or from dogma. It really takes the wind out of my sails.\nAnyways, I'm curious if you're still working on a branch of pnpm that works with anm? \nI ask because they use a tool called citgm to test versions of node for regressions. It simply has a list of about 60 some modules, and then sequentially uses npm to download, install, and run each one's test script. It is absolutely painful to use, as it takes quite a long time and cant scale (cant even run multiple instances on a multi-core server), and is not deterministic in the results it generates, but I digress. What I was planning to do was tweak a version of npm to use anm, and then run citgm with that version, because if THAT all worked, it would be a huge testament to anms viablity; HUGE.\nSo I'm wondering if we could instead us pnpm with citgm? How close in functional parity is pnpm with npm regarding execution of lifecycle scripts, bin symlinking (npm's \"build\" step), etc.? How hard, or easy (hope hope) do you think it would be for us to get pnpm working with citgm?\n. I like your style :), big TypeScript fan as well (since v0.8!!)\nI installed pnpm then cloned the repo, and when I ran pnpm i, the engine checks failed because the node-sjw -v build outputs v7.2.0-sjw, and the -sjw at the end is a problem. I put it there because during citgm testing (which uses the version of node resolved from PATH), I had to run comparisons between it and the release version, and wanted a quick way to know from the command line which version of node was resolving from PATH.\nI'm going to change the version output to v7.2.100. node-gyps header store will still need to have the v7.2.0 folder copied to v7.2.100.. @zkochan fwiw you should probably pull and rebuild v7.2.0-sjw. when I changed the . to + i didn't change it in all places. However, now knowing a + can't be in a mod name simplified one tiny piece of it. i've also changed the version to from v7.2.0-sjw to v7.2.100 so you can still tell if youre running the version, but it should pass your engine checks.\nas you may discerned, im totally burnt out on this thing right now.. and you probably weren't aware that ive been trying to engage nodejs just in a discussion about this thing for almost 3 months now, and.. just tired of there general bias there.. so.. yeah.. just done with pushing this.\nhowever, i still would like to see pnpm working with it!!! this is the only related issue i haven't unsubscribed from so if there's anything i can help or offer just let me know.. i'll also be playing with pnpm and this as well.\nreally dig your style @zkochan !! keep it up!!. @zkochan I believe I've quite effectively rattled the cage, although unfortunately to my great detriment it would seem. I hope you are still willing to work together on a POC using pnpm?. Yes!\nI've changed the version from v7.2.0-sjw to v7.2.100 which seems to quite most the engine checks, but you'll still be able to know what version is resolving from PATH withnode -v.\nYou'll also need to set NODE_SUPPORT_SYMLINKS=1\nA couple of things I'm curious to look at once there's something working:\n - The 'install' lifecycle events; you may already be doing something about this, but I think they should only run when a module is 'installed' to the store, and not necessarily everytime it's referenced from a root /node_modules. npm's \"build\" step, that creates the bin and man stuff, should though. The challenge is that the install lifecyle scripts can depend on other modules.\n - Detecting and then handling circular dependencies without symdir cycles in a flat structure. \nYou said your sjw branch can already generate with anm? I'm a bit giddy to play with myself. Is there anything special to do to have it work that way?\n. So the link still shows it using .node_modules?. Using .node_modules all by itself is just fine. I thought I saw it was not yet suffixing with +node_modules? . Re addons, node-gyp keeps the headers by version in .node-gyp in your home dir. copy the 7.2.0 directory to 7.2.100, see if that works. Regarding the install lifecycle, you run them once per installation? Not sure if you mean just once to put in store, or everytime they're referenced? . Thats good! I think that's how it should be; just my opinion. Now, here's a possible edge case. The install itself may depend on other modules that would 'normally' exist as a local copy, and knowing those versions might slightly change over time, in theory the install itself could technically end up a little different from install to install.\nSo, that's not a necessarily a big problem, but I think ultimately, if/when you and ied maybe work together, and modules are keyed by the hash of their content, then any variance that might exist in a lock file because the install was a little different between two machines would be addressed... does that make sense?\nAnd.. oh yeah.. IT'S KINDA WORKING!!! Right?? Yeah!!!. @zkochan I think it works so well because it kinda is the same way things already work; just replaced a / with a + :).\nI'm curious if the addon failed simply because of node-gyp trying to find headers for v7.2.100. Let me know if copying ~/.node-gyp/7.2.0 to ~/.node-gyp/7.2.100 solves that problem?. @iamstarkov and you just made it a little longer! :). >I have to update pnpm to make it create the adjacent node_modules for packages already available in the store.\nCan you describe that some more? maybe with a sample structure? just curious what your meaning is.\nAnother thing I'm curious on, is if you can remove your proxy files now that \"main.js\" is being preserved?. Related https://github.com/rexxars/registry-auth-token/pull/17. Related https://github.com/rexxars/registry-auth-token/pull/17. in my case MacOS (X), i'll try it out on Ubuntu later (might work, not sure)\n\nERROR EXDEV: cross-device link not permitted,\nlink '/Users/dym/.pnpm-store/1/registry.npmjs.org/gm/1.23.0/.npmignore'\n-> '/Volumes/Data/work/site/node_modules/.registry.npmjs.org/gm/1.23.0/node_modules/gm+stage/.npmignore'\n. tried on Ubuntu,\nsh\nERROR EXDEV: cross-device link not permitted,\nlink '/home/dym/.pnpm-store/1/registry.npmjs.org/morgan/1.8.1/HISTORY.md' ->\n'/media/dym/Data/work/site/node_modules/.registry.npmjs.org/morgan/1.8.1/node_modules/morgan+stage/HISTORY.md'\n\npath.parse:\n```js\n\npath.parse('/media/dym/Data/work/site/package.json')\n{ root: '/',\n  dir: '/media/dym/Data/work/site',\n  base: 'package.json',\n  ext: '.json',\n  name: 'package' }\n``. pattern is/media//, so in that case/media/dym/Data`\ni'll try the path.parse on mac later today\n\nwhat happens if you run pnpm in a Docker/Kubernetes enviroment -- should be no problem, right?. OK thanks, amazing work by the way!. I just stumbled upon this issue since I noticed in #1175 that npm writes to AppData not like pnpm. Unfortunately neither a soft link, nor a junction C:\\Program Files\\nodejs\\pnpm-global <<==>> C:\\Users\\Near\\pnpm-global helped to alleviate this issue since pnpm cannot be executed anymore.\nFurthermore I am not likely to take the insecure workaround for obvious reasons. I'll give it a try by running global installations (and pnpm link commands) in an elevated cmd. Luckily this doesn't happen too often.\nNevertheless I'd appreciate a change such that global packages are written to AppData similar to npm.. To my surprise though, ~/.pnpm-store was an empty folder as well (at least the Gitlab caching tool did print a warning that there are no files) and the store variable I know from npm was undefined. Hence I have no clue where the files might have ended up.. Once I got some time to try it out, I will report my results.. Alright I am surprised to see that it works all of a sudden. Even though I intended to cache the pnpm store the cached node_modules folder suffices for the time being. Apparently it took Gitlab a few runs of the CI to notice no more changes.. What do other package managers do?\n\nRuby Gemfile.lock\nCocoaPods Podfile.lock\nComposer composer.lock\nCargo Cargo.lock\n\nWhat should pnpm do? pnpm.lock. I'm not a user so I just wanted to throw that out there as Node seems to not follow convention.. ",
    "jdalton": "It looks like you're missing lodash as a dependency.\n. It won't work without it because it generates resolves paths against the lodash you're using.\n. ",
    "julien-f": "@jdalton You're right! Shame on me :p\n. @jdalton I understand this is a bit weird but shouldn't it work anyway if lodash is not used?\nI like to have babel-plugin-lodash set up in all my projects without installing lodash by default.\n. Makes sense, too bad for my template module ^^\n. No it's not, npm runs prepublish on npm install only when there are no arguments (no deps).\n. No problem, thanks for your input :)\n. Nice!\nThanks :)\n. ",
    "aecz": "If you dont have a global store, then another error appear indeed:\nError: Cannot find module '@angular/tsc-wrapped/src/symbols'\n    at Function.Module._resolveFilename (module.js:455:15)\n    at Function.Module._load (module.js:403:25)\n    at Module.require (module.js:483:17)\n    at require (internal/module.js:20:19)\n    at Object.<anonymous> (C:\\Users\\aecz\\pnpm-issue394\\node_modules\\.store\\@angular-cli+ast-tools@1.0.2\\_\\src\\ast-utils.js:4:17)\nAlthough it works fine using npm install :(\nIt seems that a sub dependency does not see its siblings. With npm3 and the flat tree this issue is solved.\n. I think i found some clues. Scoped dependencies in .store/node_modules are as follow @angular%2ftsc-wrapped. If we created the folder \u00b4@angular\u00b4 and put the links in it, solved ;) Ive never looked at the code but i can help if you points me towards the correct direction.\n. Yes, i had this issue too. We need to also check the src of relSymlink. When it comes relative ../ for a scoped package we should set it to ../../. It should works after that. Ive got a working version a pnpm locally. I only modified forceSymlink. Didnt know if escapedName could be removed.\n. Thanks for the PR. The error you are having is because typescript is looking at node_modules/@typings folder and does not find the node folder. With npm 3, the tree is flat so node typings are found at the top level mode_modules. I guess if in the package.json the engine is set to npm>=3 we should have a flat tree. Would that require a lot of effort ?\n. For those who didnt try/check the code, the example is the default project that Angular CLI generates. This project: https://www.npmjs.com/package/angular-cli has 200K downloads in the last month. They dont seem to be willing to fix this issue. Instead they are just asking you to use npm 3 :(\n. inherit property looks nice but it makes us dependent of pnpm and we lose compatibility with npm, or am i missing something ?\nWhats the estimated effort for adding --flat-tree option ? I could help with testing, i have a various projects that fail with pnpm and seem to be due to non flat tree.\n. Actually I just saw that #46 emulates flat tree so the issue example should work. Maybe there is an issue with scoped packages. \n. I just tested the flat tree and the 'require' issue is solved but another appeared :(\nPlease note that i have angular-cli installed globally with npm. Using pnpm didnt work for me, see #418.\nIm also using a local store for pnpm not a global one.\nnpm i -g pnpm@next\nnpm i -g angular-cli\ngit clone https://github.com/zkochan/pnpm-issue394.git\ncd pnpm-issue394\npnpm i --flat-tree\nng build\nIssue is now:\n! ENOENT: no such file or directory, unlink 'C:\\Users\\aecz\\pnpm-issue394\\~\\.pnpm\\.store\\flat\\once@1.4.0\\_\\node_modules\\wrappy'\nThe structure of node_modules has flattened but it seems to be a concurrency problem because the file (it is actually a link) exists.\n```\nC:\\Users\\aecz\\pnpm-issue394\\~.pnpm.store\\flat\\once@1.4.0_\\node_modules>dir\n19/10/2016  20:27              .\n19/10/2016  20:27              ..\n19/10/2016  20:27         wrappy [C:\\Users\\aecz\\pnpm-issue394\\~.pnpm.store\\flat\\wrappy@1.0.2_]\n```\nAlso, i noticed that instead of keeping the modules in node_modules/.store like before it is now ~\\.pnpm\\.store\\flat. Is it the new folder structure ?\nNow if i delete the node_modules folder (the flat store is kept because it is now at the root of the project) and rerun pnpm i --flat-tree, the issue above issue is gone but ng build fails with this error:\nError: Cannot find module 'ms'\n    at Function.Module._resolveFilename (module.js:455:15)\n    at Function.Module._load (module.js:403:25)\n    at Module.require (module.js:483:17)\n    at require (internal/module.js:20:19)\n    at Object.<anonymous> (C:\\Users\\aecz\\pnpm-issue394\\~\\.pnpm\\.store\\flat\\debug@2.2.0\\_\\debug.js:14:20)\nLooking at node_modules, it is flat but now only to the first level it seems. Not all packages have moved to the top like before. We may have two different issues here.\nSorry for the long comment. Hope that helps.\n. I have corrected a few things on my part but still get the same wrappy error.\nnpm i -g pnpm@next (now says 0.42.1)\ngit clone https://github.com/zkochan/pnpm-issue394.git\ncd pnpm-issue394\npnpm i --flat-tree\npnpm cannot finish the install (.bin folder is not created) and fails with the error:\n! ENOENT: no such file or directory, unlink 'C:\\Users\\aecz\\.pnpm\\.store\\flat\\once@1.4.0\\_\\node_modules\\wrappy'\nSo the option --flat-tree seems to use a global store now. Local store in node_modules is gone.\n. Install successful but im having an error with ng build now. I have deleted ~\\.pnpm folder before running the test, just in case.\nnpm un -g pnpm\nnpm i -g pnpm@next (now 0.42.4)\ngit clone https://github.com/zkochan/pnpm-issue394.git\ncd pnpm-issue394\npnpm i --flat-tree\nnode_modules\\.bin\\ng build\nAll fine, except last line that gives this error:\nCannot read property 'AssetUrl' of undefined\nTypeError: Cannot read property 'AssetUrl' of undefined\n    at Object.<anonymous> (C:\\Users\\aecz\\pnpm-issue394\\node_modules\\angular-cli\\node_modules\\@angular\\compiler-cli\\src\\private_import_compiler.js:10:51)\n@angular/compiler-cli needs @angular/compiler 2.0.0 but is getting 2.1.1 :(\nAlso @angular/compiler-cli 0.6.4 is found in two different places node_modules and angular-cli/node_modules. I think it should only be found in node_modules.\nI have compared the flat structure of pnpm 0.42.4 with npm 3.10.9.\nHere are the differences:\n- 983 items in node_modules for npm vs 987 for pnpm => 4 extra items:\n  - .modules.yaml\n  - esprima-fb\n  - fsevents\n  - webdriver-manager\n- 13 items in node_modules/angular-cli/node_modules for npm vs 950 for pnpm\n. Is there a dist-tag for peers branchso i can test it more easily ?\nI still think the flat algorithm needs some fixing because it copies @angular/compiler-cli 0.6.4 in two different places instead of one like npm does.\nAlso with --preserve-symlink, we shouldnt do anything about peerDependencies except showing a warning if it is missing. I believe npm does only that so we should stay compatible with it.\nI think that if the structure differences i mentioned in the previous comment are fixed, ng build should work and this issue could be closed.\nAnother minor point is that empty node_modules folders are created in some sub dependencies. Tell me if its worth a new issue.\nIm also starting to see that if a global store is used, some edge cases will require to copy (not link) some dependencies.\nFor example, angular-cli@1.0.0-beta-17 in .pnpm/.store/flat has 950 links in mode_modules. I would expect it to have none as the structure is flat and those links can change if a new version of a dependency is released.\n. Unfortunately, i get an error with @zkochan/pnpm:\n```\nnpm i -g @zkochan/pnpm (installs 0.42.1)\npnpm i --flat-tree\nmodule.js:457\n    throw err;\n    ^\nError: Cannot find module 'eventemitter2'\n    at Function.Module._resolveFilename (module.js:455:15)\n    at Function.Module._load (module.js:403:25)\n    at Module.require (module.js:483:17)\n    at require (internal/module.js:20:19)\n    at Object. (C:\\Users\\aecz\\AppData\\Roaming\\npm\\node_modules\\@zkochan\\pnpm\\lib\\node_modules\\@zkochan\\logger\\index.js:2:22)\n``\n. What about a flag --copy-typings or --no-link-typings ? Does not affect pnpm users and if Typescript fixes it then no need to set flag :)\n. Not sure what you are asking for ;)reflect-metadatais a dependency of@angular/compiler-cliand in.pnpm/node_modules/.store/node_modules, there is the link toreflect-metadataso@ngtools/webpack` should find it but dont :(\nThis is related to this PR https://github.com/rstacruz/pnpm/pull/46 that is supposed to solve this kind of issues.\nHope that helps.\n. I have a different error now:\nnpm i -g pnpm@next (0.42.4)\npnpm i -g angular-cli@1.0.0-beta.17 --flat-tree\nng -v\nInstallation fails with issue:\nFlattening the dependency tree\n ! ENOENT: no such file or directory, stat 'C:\\Users\\aecz\\.pnpm\\node_modules\\handle-thing'\nLink exists for destination folder not:\n24/10/2016  13:16    <JUNCTION>     handle-thing [C:\\Users\\aecz\\.pnpm\\.store\\flat\\handle-thing@1.2.5\\_]\nI have uninstalled angular-cli, cleared cache but same issue.\nAlso i noticed that in .pnpm/node_modules/.bin folder, pnpm installs all the binaries that it founds instead of just ng bin.\nFurthermore .pnpm/node_modules folder contains all angular-cli modules. I think they should be inside angular-cli folder like npm is doing or we may have conflicts with different global modules using different versions of the same dependencies.\n. Not a fan either of installing peerDependencies automatically simply because npm does not do it but only shows a warning if not found at the end of the install process.\nAlso, lets take an example:\n- package A has a dependency B that has a peerDependency C v1.x\n- package A has also a dependency C v1.1 to meet the requirement of B\n- latest v1.x for dependency C is v1.2\n=> pnpm will install C v1.1 at the top and C v1.2 for dependency B, npm will install only C v1.1 at the top.\n=> if there is a bug in v1.2, package A will fail with pnpm and work with npm\n=> first time users will go back to npm after failure with pnpm :(\n. @angular/compiler-cli has @angular/compiler: 2.0.2 has dependency.\n. Just found this explanation on the proper-lockfile repo.\nhttps://github.com/IndigoUnited/node-proper-lockfile/issues/11\nLooks like we need to set a bigger delay or at least add an option for it.. Error still happening unfortunately even after using next version 0.52.0.\nYou can get the package.json on the linked PR.\nHere is some more info of my last test:\n1st run: 700 packages installed, max memory used (didnt check the first run :( )\nC:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:180\n    compromised = compromised || function (err) { throw err; };\n                                                  ^\nError: Unable to update lock within the stale threshold\n    at options.fs.utimes (C:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:108:66)\n    at FSReqWrap.oncomplete (fs.js:123:15)\n2st run: 14 more packages installed, max memory used 500 MB\nC:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:180\n    compromised = compromised || function (err) { throw err; };\n                                                  ^\nError: Unable to update lock within the stale threshold\n    at options.fs.utimes (C:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:108:66)\n    at FSReqWrap.oncomplete (fs.js:123:15)\n3st run: 70 more packages installed, max memory used 620 MB\nERROR unexpected end of file\nError: unexpected end of file\n    at Zlib._handle.onerror (zlib.js:370:17)\nError: unexpected end of file\n    at Zlib._handle.onerror (zlib.js:370:17)\nError: unexpected end of file\n    at Zlib._handle.onerror (zlib.js:370:17)\nError: unexpected end of file\n    at Zlib._handle.onerror (zlib.js:370:17)\n4th run: 237 more packages installed, max memory used 710 MB\nError: unexpected end of file\n    at Zlib._handle.onerror (zlib.js:370:17)\nError: unexpected end of file\n    at Zlib._handle.onerror (zlib.js:370:17)\nError: unexpected end of file\n    at Zlib._handle.onerror (zlib.js:370:17)\nError: unexpected end of file\n    at Zlib._handle.onerror (zlib.js:370:17)\n5th run: 29 more packages installed, max memory used 730MB\nWARN Skipping failed optional dependency gulp-xslt@2.0.0\nERROR unexpected end of file\nError: unexpected end of file\n    at Zlib._handle.onerror (zlib.js:370:17)\nError: unexpected end of file\n    at Zlib._handle.onerror (zlib.js:370:17)\nError: unexpected end of file\n    at Zlib._handle.onerror (zlib.js:370:17)\nError: unexpected end of file\n    at Zlib._handle.onerror (zlib.js:370:17)\n6th run: 15 more packages installed, max memory used 642MB\nC:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:180\n    compromised = compromised || function (err) { throw err; };\n                                                  ^\nError: Unable to update lock within the stale threshold\n    at options.fs.utimes (C:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:108:66)\n    at FSReqWrap.oncomplete (fs.js:123:15)\n7th run: 16 more packages installed, max memory used 628MB\nC:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:180\n    compromised = compromised || function (err) { throw err; };\n                                                  ^\nError: Unable to update lock within the stale threshold\n    at options.fs.utimes (C:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:108:66)\n    at FSReqWrap.oncomplete (fs.js:123:15)\n8th run: 3 more packages installed (stopped measuring memory, doesnt seem an issue)\n(core-js then karma then webdriverio)\nC:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:180\n    compromised = compromised || function (err) { throw err; };\n                                                  ^\nError: Unable to update lock within the stale threshold\n    at options.fs.utimes (C:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:108:66)\n    at FSReqWrap.oncomplete (fs.js:123:15)\n9th run: 1 more packages installed (pm2)\nC:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:180\n    compromised = compromised || function (err) { throw err; };\n                                                  ^\nError: Unable to update lock within the stale threshold\n    at options.fs.utimes (C:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:108:66)\n    at FSReqWrap.oncomplete (fs.js:123:15)\n10th run: 2 more packages installed (rxjs, ng2-google-place-autocomplete)\nC:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:180\n    compromised = compromised || function (err) { throw err; };\n                                                  ^\nError: Unable to update lock within the stale threshold\n    at options.fs.utimes (C:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:108:66)\n    at FSReqWrap.oncomplete (fs.js:123:15)\n11th run: 2 more packages installed (rxjs, ng2-google-place-autocomplete)\nC:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:180\n    compromised = compromised || function (err) { throw err; };\n                                                  ^\nError: Unable to update lock within the stale threshold\n    at options.fs.utimes (C:\\Users\\aecz\\AppData\\Roaming\\nvm\\v6.9.4\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:108:66)\n    at FSReqWrap.oncomplete (fs.js:123:15)\n12th run: 3 more packages installed (libxmljs-mt, libxslt, gulp-xslt)\n=> No errors and binaries compiled successfully!\nSo it looks like only some packages are problematic. Once installed, no issues so far.\nAnother issue has appeared maybe unrelated about zlib.. Did some more tests and it still fails sometimes with 20s stale. 30s seems better but i agree that it looks like a workaround not a real fix. I dont have problem with Yarn for example which i believe is using locks.. Didnt had time to debug it and dont feel confident i can with this issue :) Im happy to do some test if you post them here. Here is one project which fails with pnpm. Fine with yarn and npm 3/4 but slow :(\npackage.json.txt\n. Thanks. ill reply on the issue page #594 . Error is gone using Angular CLI 1.6.1 and pnpm 1.23.2.\nnpm i -g @angular/cli@1.6.1\nng new test-pnpm --skip-install\ncd test-pnpm\npnpm i\nng serve. PR done. https://github.com/angular/angular-cli/pull/7191\nI fear it can happen with other packages though. I have seen other packages telling you to update to npm 3+ because of the flat tree. Any option to have pnpm detect if a package needs to be flattened?. Solved but now i get another error:\ntest-pnpm$ ng test\nERROR [config]: Error in config file!\n{ Error: Cannot find module 'enhanced-resolve/lib/ModulesInRootPlugin'\n\nShould i close this issue and open a new one?. PR created. https://github.com/angular/angular-cli/pull/7385\n. @zkochan i do not use my Twitter account. Github profile is fine. Thanks for the mention.. Cannot find module 'source-map-support' error solved with Angular CLI 1.3.2.. @schematics/angular does require typescript but its package.json does not list it as a dependency. It still works with npm because @angular-devkit/build-optimizer depends on it too and dependencies are flattened.\nSo not an issue with pnpm after all. ill create a PR for Angular CLI.. Didnt find time for PR, just created the issue:\nhttps://github.com/angular/devkit/issues/365\n. Should be fixed in the next version of @schematics/angular with this merged PR https://github.com/angular/devkit/pull/396. Current version is 0.1.13and is still failing like the above.\n. Solved with @angular/cli v1.6.6.\npnpm i -g @angular/cli@1.6.6\nng new test-pnpm\nWorks with pnpm 1.23.2 and latest 1.31.3 so it was indeed not a pnpm issue.. We have to check if pkg.name contains / (scoped package) and therefore change .. to ../... Or replace .. with target.\n. ",
    "AilisObrian": "It's not pnpm's bug, but I want to share this with you guys and find out better solutions for this.\nThanks all.\n. json\n{\"v\":0,\"level\":30,\"name\":\"newrelic\",\"hostname\":\"OBrians-MacBook-Pro.local\",\"pid\":18457,\"time\":\"2016-10-04T10:34:04.658Z\",\"msg\":\"Could not load /Users/obrian/projects/MintCare/global_server/node_modules/eslint/node_modules/escope/node_modules/es6-map/node_modules/d/node_modules/es5-ext/node_modules/es6-iterator/node_modules/d/node_modules/es5-ext/node_modules/es6-iterator/node_modules/d/node_modules/es5-ext/node_modules/es6-iterator/node_modules/d/node_modules/es5-ext/node_modules/es6-iterator/node_modules/d/node_modules/es5-ext/node_modules/es6-iterator/node_modules/d/node_modules/es5-ext/node_modules/es6-iterator/node_modules/d/node_modules/es5-ext/node_modules/es6-iterator/node_modules/d/node_modules/es5-ext/node_modules/es6-iterator/node_modules/d/node_modules/es5-ext/node_modules/es6-iterator/node_modules/d/node_modules/es5-ext/node_modules/es6-iterator/package.json for environment scan\",\"component\":\"environment\"}\n. @iamstarkov pnpm install newrelic works great!\nBut when I tried to use newrelic package, It HANGED by pnpm's packages symbolic structure.\nYou can see the logs which I attached above.\n. @zkochan Oh! you can just add this newrelic.js at the root of your project directory.\n``` javascript\n'use strict'\nexports.config = {\n  app_name: ['My Application'],\n  license_key: 'license key here',\n  logging: {\n    level: 'info'\n  }\n}\n```\nand retry it.\n. @iamstarkov @zkochan double checked with @0.47.0 but still happened.. ",
    "timdp": "I'm currently getting \"Module @org/pkg@version not found\" on private modules. Is this PR supposed to solve that? I installed pnpm from a Git clone of this branch but the issue seems to persist.\n. No. I'm running pnpm install inside the root of a package that depends directly upon the failing package.\n. I could but I'd have to obfuscate a few package names. It's pretty clear though. It's still replacing slashes with %2F:\n251 http 404: \"https://registry.npmjs.org/@org-name%2Fpackage-name\"\n. Will do!\n. ",
    "doxiaodong": "@types in typescript 2.x with dependencies such as @types/angular-ui-bootstrap will throw duplicate error.\n. ",
    "kenberkeley": "https://github.com/egoist/poi/issues/473. ",
    "queckezz": "My primary use case is to be able to install packages via the API :sparkles:.\njs\nimport { installPkgs } from 'pnpm'\ninstallPkgs({ execa: '0.5.0' }, { cwd: join(tmpdir(), 'pnpm-install'), silent: true })\nNeither npm or yarn has an accessible programmable API. Yarn actually has most of its install algorithm hidden away in bin/commands/install.js. With pnpm you can even set an InstallationRoot which is not possible with the other PMs without doing something like the following:\ncd installation/root && yarn install\n. ",
    "TheLarkInn": "Is there a possibility to merge the features that are lacking from pnpm into yarn and work together to contribute to one project? cc @wycats\n. I'm neither a contributor to either project (yet :smirk: ). However, I see a really awesome potential for collaboration and joining forces.\nSpeaking as a maintainer of webpack, I am hoping to see the same thing for the future with our project as well. \n. ",
    "alexanderGugel": "@zkochan I agree with that. Maybe, now that FB is behind yarn, we should think about merging ied and pnpm to kind of join forces on the \"symlink\" approach? Thoughts? @rstacruz \n. > This bothers me, people are sacrificing their personal time to work on OSS and then their work can become obsolete in a second because a big company was secretly developing the same. Although in this case I don't regret my contributions to this great project because I think pnpm solves the problem more elegantly than yarn\nThings could be worse though. E.g. I really don't want to be the CEO of npm right now \ud83e\udd14 \n. > npm is not just cli, its more about infrastructure\nTrue. Although being reduced to a hosting facility (which is expensive) seems like a step backwards for them.\n. @thejameskyle Sure! Where?\n. ",
    "Daniel15": "\nNeither npm or yarn has an accessible programmable API.\n\nnpm have an API, somewhat. It's not very well documented and doesn't contain everything, but it exists: https://www.npmjs.com/package/npm#using-npm-programmatically\n. ",
    "jamiebuilds": "Hey @zkochan @rstacruz @alexanderGugel, want to talk offline sometime soon about a path forward working together? \n. @albertdb Yarn supports gitlab (https://github.com/yarnpkg/yarn/blob/0f1db96846badbbe3b43c470c05196eb29437fb4/src/resolvers/exotics/gitlab-resolver.js)\n@zkochan @alexanderGugel what gitter? We could also just start an email thread or setup a video chat sometime\n. ",
    "albertdb": "Yarn does not support GitLab repositories. pnpm does, so it's more feature complete.\n. @thejameskyle I mean self-hosted GitLab.\n. @zkochan Yes, it is.\n. @zkochan Yes, it works. The only thing that doesn't work is what I explained. Just in case it makes a difference: I'm talking about a dependency, so the URL is in package.json file.\n. Here it is:\n```\n0 debug pnpm:mkdirp: \"/root/theProject/mycomponent/node_modules/.store\"\n  1 debug pnpm:install: \"installing coffee-script@1.10.0\"\n  2 debug pnpm:install: \"installing level@^1.4.0\"\n  3 debug pnpm:install: \"installing lodash@^3.10.1\"\n  4 debug pnpm:install: \"installing q@^1.4.1\"\n  5 debug pnpm:install: \"installing mymodule@git+ssh://git@gitlab.domain.tld:myproject/myrepo.git#master\"\n  6 debug pnpm:install: \"installing traverse@^0.6.6\"\n  7 debug pnpm:install: \"installing zmq@2.13.0\"\n  8 debug pnpm:install: \"installing chalk@^1.1.1\"\n  9 debug pnpm:install: \"installing coffee-coverage@1.0.1\"\n  10 debug pnpm:install: \"installing coffeelint@^1.12.1\"\n  11 debug pnpm:install: \"installing istanbul@0.4.2\"\n  12 debug pnpm:install: \"installing mocha@^2.2.4\"\n  13 debug pnpm:install: \"installing should@^6.0.1\"\n  14 debug pnpm:install: \"installing tcp-port-used@0.1.2\"\n  15 progress coffee-script@1.10.0: \"resolving\"\n  16 verbose request: \"uri https://registry.npmjs.org/coffee-script\"\n  17 verbose request: \"no auth needed\"\n  18 info attempt: \"registry request try #1 at 12:19:51\"\n  19 verbose request id: \"374143efd47d9213\"\n  20 http request: \"GET https://registry.npmjs.org/coffee-script\"\n  21 progress level@^1.4.0: \"resolving\"\n  22 verbose request: \"uri https://registry.npmjs.org/level\"\n  23 verbose request: \"no auth needed\"\n  24 info attempt: \"registry request try #1 at 12:19:51\"\n  25 http request: \"GET https://registry.npmjs.org/level\"\n  26 progress lodash@^3.10.1: \"resolving\"\n  27 verbose request: \"uri https://registry.npmjs.org/lodash\"\n  28 verbose request: \"no auth needed\"\n  29 info attempt: \"registry request try #1 at 12:19:51\"\n  30 http request: \"GET https://registry.npmjs.org/lodash\"\n  31 progress q@^1.4.1: \"resolving\"\n  32 verbose request: \"uri https://registry.npmjs.org/q\"\n  33 verbose request: \"no auth needed\"\n  34 info attempt: \"registry request try #1 at 12:19:51\"\n  35 http request: \"GET https://registry.npmjs.org/q\"\n  36 progress mymodule@git+ssh://git@gitlab.domain.tld:myproject/myrepo.git#master: \"resolved [object Object]\"\n  37 debug pnpm:mkdirp: \"/root/theProject/mycomponent/node_modules\"\n  38 progress traverse@^0.6.6: \"resolving\"\n  39 verbose request: \"uri https://registry.npmjs.org/traverse\"\n  40 verbose request: \"no auth needed\"\n  41 info attempt: \"registry request try #1 at 12:19:51\"\n  42 http request: \"GET https://registry.npmjs.org/traverse\"\n  43 progress zmq@2.13.0: \"resolving\"\n  44 verbose request: \"uri https://registry.npmjs.org/zmq\"\n  45 verbose request: \"no auth needed\"\n  46 info attempt: \"registry request try #1 at 12:19:51\"\n  47 http request: \"GET https://registry.npmjs.org/zmq\"\n  48 progress chalk@^1.1.1: \"resolving\"\n  49 verbose request: \"uri https://registry.npmjs.org/chalk\"\n  50 verbose request: \"no auth needed\"\n  51 info attempt: \"registry request try #1 at 12:19:51\"\n  52 http request: \"GET https://registry.npmjs.org/chalk\"\n  53 progress coffee-coverage@1.0.1: \"resolving\"\n  54 verbose request: \"uri https://registry.npmjs.org/coffee-coverage\"\n  55 verbose request: \"no auth needed\"\n  56 info attempt: \"registry request try #1 at 12:19:51\"\n  57 http request: \"GET https://registry.npmjs.org/coffee-coverage\"\n  58 progress coffeelint@^1.12.1: \"resolving\"\n  59 verbose request: \"uri https://registry.npmjs.org/coffeelint\"\n  60 verbose request: \"no auth needed\"\n  61 info attempt: \"registry request try #1 at 12:19:51\"\n  62 http request: \"GET https://registry.npmjs.org/coffeelint\"\n  63 progress istanbul@0.4.2: \"resolving\"\n  64 verbose request: \"uri https://registry.npmjs.org/istanbul\"\n  65 verbose request: \"no auth needed\"\n  66 info attempt: \"registry request try #1 at 12:19:51\"\n  67 http request: \"GET https://registry.npmjs.org/istanbul\"\n  68 progress mocha@^2.2.4: \"resolving\"\n  69 verbose request: \"uri https://registry.npmjs.org/mocha\"\n  70 verbose request: \"no auth needed\"\n  71 info attempt: \"registry request try #1 at 12:19:51\"\n  72 http request: \"GET https://registry.npmjs.org/mocha\"\n  73 progress should@^6.0.1: \"resolving\"\n  74 verbose request: \"uri https://registry.npmjs.org/should\"\n  75 verbose request: \"no auth needed\"\n  76 info attempt: \"registry request try #1 at 12:19:51\"\n  77 http request: \"GET https://registry.npmjs.org/should\"\n  78 progress tcp-port-used@0.1.2: \"resolving\"\n  79 verbose request: \"uri https://registry.npmjs.org/tcp-port-used\"\n  80 verbose request: \"no auth needed\"\n  81 info attempt: \"registry request try #1 at 12:19:51\"\n  82 http request: \"GET https://registry.npmjs.org/tcp-port-used\"\n  83 progress mymodule@git+ssh://git@gitlab.domain.tld:myproject/myrepo.git#master: \"download-queued\"\n  84 debug pnpm:git: \"cloning git repository from ssh://git@gitlab.domain.tld:myproject/myrepo.git\"\n  85 debug pnpm:git: \"executing git with args clone,-b,master,ssh://git@gitlab.domain.tld:myproject/myrepo.git,/root/theProject/mycomponent/node_modules/.store/ssh:++git@gitlab.domain.tld:myproject+myrepo.git#master/,--single-branch\"\n  86 debug pnpm:git: \"failed to clone repository from ssh://git@gitlab.domain.tld:myproject/myrepo.git\"\n  87 progress mymodule@git+ssh://git@gitlab.domain.tld:myproject/myrepo.git#master: \"error Error: failed to clone repository from ssh://git@gitlab.domain.tld:myproject/myrepo.git\\n        Cloning into '/root/theProject/mycomponent/node_modules/.store/ssh:++git@gitlab.domain.tld:myproject+myrepo.git#master/'...\\nssh: Could not resolve hostname gitlab.domain.tld:myproject: Name or service not known\\r\\nfatal: Could not read from remote repository.\\n\\nPlease make sure you have the correct access rights\\nand the repository exists.\\n\\nError: failed to clone repository from ssh://git@gitlab.domain.tld:myproject/myrepo.git\\n        Cloning into '/root/theProject/mycomponent/node_modules/.store/ssh:++git@gitlab.domain.tld:myproject+myrepo.git#master/'...\\nssh: Could not resolve hostname gitlab.domain.tld:myproject: Name or service not known\\r\\nfatal: Could not read from remote repository.\\n\\nPlease make sure you have the correct access rights\\nand the repository exists.\\n\\n    at errorHandler (/usr/lib/node_modules/pnpm/lib/resolve/git.js:50:20)\\n    at ChildProcess. (/usr/lib/node_modules/pnpm/lib/resolve/git.js:47:43)\\n    at emitTwo (events.js:87:13)\\n    at ChildProcess.emit (events.js:172:7)\\n    at maybeClose (internal/child_process.js:818:16)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)\"\n  88 error : \"Error: failed to clone repository from ssh://git@gitlab.domain.tld:myproject/myrepo.git\\n        Cloning into '/root/theProject/mycomponent/node_modules/.store/ssh:++git@gitlab.domain.tld:myproject+myrepo.git#master/'...\\nssh: Could not resolve hostname gitlab.domain.tld:myproject: Name or service not known\\r\\nfatal: Could not read from remote repository.\\n\\nPlease make sure you have the correct access rights\\nand the repository exists.\\n\\nError: failed to clone repository from ssh://git@gitlab.domain.tld:myproject/myrepo.git\\n        Cloning into '/root/theProject/mycomponent/node_modules/.store/ssh:++git@gitlab.domain.tld:myproject+myrepo.git#master/_'...\\nssh: Could not resolve hostname gitlab.domain.tld:myproject: Name or service not known\\r\\nfatal: Could not read from remote repository.\\n\\nPlease make sure you have the correct access rights\\nand the repository exists.\\n\\n    at errorHandler (/usr/lib/node_modules/pnpm/lib/resolve/git.js:50:20)\\n    at ChildProcess. (/usr/lib/node_modules/pnpm/lib/resolve/git.js:47:43)\\n    at emitTwo (events.js:87:13)\\n    at ChildProcess.emit (events.js:172:7)\\n    at maybeClose (internal/child_process.js:818:16)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)\"\n``\n. Could you please fix this issue? The only thing needed is checking if there is a colon followed by letters instead of numbers (indication host port) in the URL and adding a/in that case (gitlab.domain.tld:myprojectresulting ingitlab.domain.tld:/myproject`).\nThank you!\n. @zkochan Part of the problem is solved, but now I get the following error:\n```\npnpm install\nmymodule git+ssh://git@gitlab.domain.tld:myproject/myrepo.git#master ERROR \u2717 \nERROR Command failed: git ls-remote --refs ssh://git@gitlab.domain.tld/:myproject/myrepo.git master\nGitLab: The project you were looking for could not be found.\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n```\nThe only way it would work is if the issued command was:\ngit ls-remote --refs sh://git@gitlab.domain.tld:/myproject/myrepo.git master\nPlease note that / should be after :, not before.\nI would greatly appreciate if you could fix it.\nThanks!. @zkochan Let me confirm that tomorrow morning.. @zkochan I've just checked it and it does not work. Only :/ works.. @zkochan Yes it does (the git ls-remote --refs command). Works great! Thank you very much!. Sorry, I didn't explain it well. It's not only that the root node_modules doesn't contain all packages symlinks, but also that all dependecies' node_modules are empty (but .bin directory). From any nodejs module point of view, packages are not installed.. I don't think so. Should I?\nHow that can help if the symlinks are not there? I guess I'm missing something.. Now I understand it. The fact is that the version of nodejs I'm using doesn't support that option (Added in: v6.3.0), so the problem is in a submodule (third-party one u_u) that needs to be fixed, as you initially said.\nThanks for the explanation, it helped me finding the source of the error.. ",
    "cpojer": "Hey everybody,\n@bestander, @kittens and I are committed to contributing to Yarn at Facebook. We'd like this project to be as open as possible and discussions should be in public. We are using Discord for the Yarn community. See https://discordapp.com/invite/yarnpkg \u2013 we have a #development channel and most contributors to Yarn are hanging out there. Can you join us to figure out a path forward? I think competition is great \u2013 it's something Yarn was meant to inspire but collaboration is even better. Let's figure out how we can work together to build the best developer tools we can \u2764\ufe0f.\nThe Yarn team is located at FB London. If anybody is in London, please feel free to get in touch (fb.me/cpojer or cpojer@fb.com) \u2013 I'll be there in early November as well if you'd like to hang out :)\n. ",
    "Akkuma": "I'm seeing pretty much the same issue as well, but for different dependencies.\n. To be fair, this is a lot harder to hit than you'd think, but I took off 10 api hits the first time around and 6 from a pnpm update. If you start trashing node_modules and the like quite a bit you could run into this like I did. I think an acceptable short term solution would be to simply inform the user of what is actually going on here. The long term solution is probably needed if you want to use pnpm on a build server, which might hit this quite quickly.. npm now support semver for git urls as does yarn https://github.com/npm/npm/blob/latest/doc/files/package.json.md#git-urls-as-dependencies. The error is not in pnpm @iamstarkov . The error is with node loading pnpm, specifically resolving the rimraf-then dependency. It is the only package I see that uses rimraf-then after manually using npmjs.com to find dependents on it, since npm ls rimraf-then doesn't work.\n@zkochan So what we are doing is tarring up the node_modules for the CI and downloading it for other steps. I've downloaded it and rimraf-then can be found in it. I was more so saying I believe the lib/node_modules is creating issues, since I cannot even npm ls rimraf-then, which should show.. ",
    "MichaelKapustey": "I would like to work on it\n. ",
    "Swanty": "In the background yes the user input is still being expected which is why if you don't add --silent and you miss the text for the prompt then you might wonder why pnpm install is frozen even though it's just simply expecting user input.\nEDIT: Ooops, I got confused about the question, I though you asked about pnpm.\nWill check and report npm install\n. Just checked, npm install also seems to be bugged. It asks for the user input, but overwrites the prompt text.\nEDIT: With npm progress and spinner disabled it doesn't overwrite the prompt text, but it does output some more things after the prompt text.\n. ",
    "wmhilton": "I love everything I'm hearing, I haven't comprehended how you've solved the single-source-code-location yet multiple-possible-dependency-resolutions-depending-on-the-parent with this new adjacent node_modules directory, but I'm excited to find out!. Ah, alas I haven't had time to read the two links you just gave me @phestermcs , but I've been composing a reply, here it is:\nDo I understand the concept of the parent.node_modules folder?From what I can decifer, it modifies the semantics of require enough that one could essentially create a \"shadow\" dependency tree where the actual dependencies live, separate from the physical location of the package itself? So say I wanted to implement a package installer that placed all packages in a fixed location in versioned subdirectories, like /{version}/{package name}, AND I wanted to implement these two conflicting lockfiles:\nied/yarn.lock - installed Dec 6, 2016\nawesome@1.x.x:\n  version \"1.0.3\"\n  dependencies:\n    mime-types \"^2.1.11\"\nmime-types@^2.1.11:\n  version \"2.1.13\"\npnpm/yarn.lock - installed Dec 8, 2016\nawesome@1.x.x:        <-- `pnpm` uses the exact same package and version as `ied` BUT...\n  version \"1.0.3\"\n  dependencies:\n    mime-types \"^2.1.11\"\nmime-types@~2.1.11:\n  version \"2.9.0\"     <--- The mime types author was super productive on Dec 7th\nThe goal: install pnpm without changing ied in any way, such as upgrading its version of mime-types.\nI could do a directory structure like this:\n/bin/ied -> /modules/ied/3.0.0\n/bin/pnpm -> /modules/pnpm/4.0.0\n/modules/ied/3.0.0/cli.js\n/modules/ied/3.0.0/node_modules/awesome -> /modules/awesome/1.0.3\n/modules/ied/3.0.0/node_modules/awesome.node_modules/mime-types -> /modules/mime-types/2.1.13\n/modules/pnpm/4.0.0/cli.js\n/modules/pnpm/4.0.0/node_modules/awesome -> /modules/1.0.3/awesome\n/modules/pnpm/4.0.0/node_modules/awesome.node_modules/mime-types -> /modules/mime-types/2.9.0\n/modules/awesome/1.0.3\n/modules/mime-types/2.1.13\n/modules/mime-types/2.9.0. I'm downloading your fork now... it's been a year since I've tried to compile node and I've got a lot on my plate, but hopefully I'll be able to test it too!\nI read the documentation and stared at your test code for a while, but don't really understand what's going on. I'm hoping once I compile node and run the tests it will make more sense - in the meantime I opened an issue where I say I'm confused and need help understanding it. . > You are saving our concept of shared stores! \ud83c\udf86\nand static repos! Don't forget them. I want that static store / repo so I can sync the whole thing over webtorrent or scuttlebutt. Mwahahaha!. Still downloading visual studio updates... \ud83d\ude06 . Hi @ghost. Don't burn out. I will make this work if I have to fork Node and write pull requests for every module in npm to make it compatible.\nPersonally, I'm not worried about node-gyp compile steps. In the near future, I think everyone will pre-compile native add-ons. Travis is free for open source projects: all that's needed is to cross-compile for all supported machine architectures before publishing to the registry. Which needs to be done in any case, because how else can you run the unit tests on all supported machine architectures? I've personally despised packages that try to compile themselves on my machine, because they cause a huge amount of trouble, particularly after I uninstalled Python2 so I could do some Python3 work.. Plus the hashing issue. I just can't think of a way to guarantee module security and authenticity if modules are allowed to modify themselves during the install, which is what compiling is doing. (Wait.... Unless the compile environment was a Docker container! Hmmmm I have something fun to think about now). Oh holy fuck. He really deleted his Github? Talk about burn out! I hope that was a dummy account. Um... I've got a module store installer.... check it out? https://github.com/wmhilton/modinst. @zkochan it might not be super relevant to this particular issue, but since you mentioned it...\nThis prints every system call to fs.stat made by running npm. Not \"npm do something\" just, \"npm print help message and exit\":\nstrace -f -e stat npm 2>&1 >/dev/null\n\n2>&1 redirects stderr (which is what strace prints on) to stdout\n>/dev/null redirects stdout (which is where npm prints its help message) to out of the way)\n\nYou'll see some truly fantastically inefficient runtime behavior. Like this, where Node checks 7 disk locations before finding the readable-stream module (and that's only walking up 1 directory):\n[pid  1181] stat(\"/usr/local/bin/node-v6.10.1-linux-x64/lib/node_modules/npm/node_modules/npmlog/node_modules/readable-stream\", 0x7fffc45cd570) = -1 ENOENT (No such file or directory)\n[pid  1181] stat(\"/usr/local/bin/node-v6.10.1-linux-x64/lib/node_modules/npm/node_modules/npmlog/node_modules/readable-stream.js\", 0x7fffc45cd4d0) = -1 ENOENT (No such file or directory)\n[pid  1181] stat(\"/usr/local/bin/node-v6.10.1-linux-x64/lib/node_modules/npm/node_modules/npmlog/node_modules/readable-stream.json\", 0x7fffc45cd4d0) = -1 ENOENT (No such file or directory)\n[pid  1181] stat(\"/usr/local/bin/node-v6.10.1-linux-x64/lib/node_modules/npm/node_modules/npmlog/node_modules/readable-stream.node\", 0x7fffc45cd4d0) = -1 ENOENT (No such file or directory)\n[pid  1181] stat(\"/usr/local/bin/node-v6.10.1-linux-x64/lib/node_modules/npm/node_modules/npmlog/node_modules/readable-stream/index.js\", 0x7fffc45cd4d0) = -1 ENOENT (No such file or directory)\n[pid  1181] stat(\"/usr/local/bin/node-v6.10.1-linux-x64/lib/node_modules/npm/node_modules/npmlog/node_modules/readable-stream/index.json\", 0x7fffc45cd4d0) = -1 ENOENT (No such file or directory)\n[pid  1181] stat(\"/usr/local/bin/node-v6.10.1-linux-x64/lib/node_modules/npm/node_modules/npmlog/node_modules/readable-stream/index.node\", 0x7fffc45cd4d0) = -1 ENOENT (No such file or directory)\n[pid  1181] stat(\"/usr/local/bin/node-v6.10.1-linux-x64/lib/node_modules/npm/node_modules/readable-stream\", {st_mode=S_IFDIR|0775, st_size=0, ...}) = 0\n[pid  1181] stat(\"/usr/local/bin/node-v6.10.1-linux-x64/lib/node_modules/npm/node_modules/readable-stream/readable.js\", {st_mode=S_IFREG|0664, st_size=630, ...}) = 0\nRun that output through wc and you'll get the total number of calls to fs.stat. I get 1534 on my machine. Run the output through grep -c 'No such file or directory' and you'll get how many of those calls were wasted. I get 658 or nearly a third.\nYou can see how many files are actually opened too:\nstrace -f -e open npm 2>&1 >/dev/null | wc -l\nI count 596 open syscalls. All of them are for require()ing modules.\nI'm 90% sure this shocking amount of disk access is why running \"npm\" takes over a second on my machine. I think I did an analysis with perf or something to see what % of time is spent doing file system calls but I cannot remember and may not have gotten that working.\nBy the way, all of my knowledge of strace comes from A zine about strace which is truly magical and I basically think @jvns blog posts have revolutionized the way I debug software.\nEdit:\nI pulled these numbers from my currently available workstation:\nWindows 10 Pro, Version 1607, OS Build 14393.1198\nWindows Subsystem for Linux\nnode@v6.10.1\nnpm@3.10.10\n. And I know this is suboptimal, because I've seen Jonathan Blow compile a 30,000 line program in <1/60 of a second. So over a second just to startup is very slow. And it's not npm, it's node itself and it's require mechanism. I think. I need to confirm that's what's slowing it down... I know izs has said that fs.stat was slow, but I really need to confirm that somehow.. ",
    "papercuptech": "node-sls may be nice compromise . Doesn't require changing node directly.. ",
    "birchb": "Initializing a new vue project using vue-cli:\nvue init webpack pnpm-test\n and running with \npnpm run dev\nresults in the following error:\n```\nThis dependency was not found:\n\nvue-hot-reload-api in ./src/App.vue, ./~/.registry.npmjs.org/vue-loader/11.3.4/~/vue-loader/lib/template-compiler?{\"id\":\"data-v-59778c66\"}!./~/.registry.npmjs.org/vue-loader/11.3.4/~/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue and 2 others\n\nTo install it, you can run: npm install --save vue-hot-reload-api\n```\nAfter running:\npnpm install --save vue-hot-reload-api\nthe dev server complies and loads correct.\nEDIT: Upon further review, vue-style-loader appears to also result in an error.. ",
    "patricksile": "Hi, @zkochan Please VueJS and Angular won't work with pnpm I hope I will find a solution soon, or if someone has one I will be happy to see it. Thanks. Hi, I am having this hanging issue also when running pnpm i -g webpack-dev-server , it happens with large modules actually. I waited for more than 10 mins and nothing happened.. I am using Windows 10 Home October Update with Ubuntu 18.04 LTS in WSL (Windows Subsystem Linex), node v11.3.0 and pnpm 2.19.4. \nAnd the issue is the following:\n- When I run pnpm i -g webpack-dev-server and some other apparently large modules the installation process just hangs.\n. ",
    "andreineculau": "running into the same issue.. popsicle-retry part of typings-core part of typings i.e. not being able to solve this one way or another means pnpm will not be used by anyone running typescript\ni read the popsicle-retry issue and it's unclear to me if the author wants a a PR for adding 3 lines, which then needs a PR in typings core, then typings, or if he's settled on not adding it as a peer dep.\nregardless did anyone consider having pnpm host a list of \"fixes\" for rebel packages? or to start small, provide an API to tell pnpm \"call me when you parse a package.json and maybe i'll return a fixed one\" which would at least allow me, pnpm user, to carry the burden of handling the rebel packages. that opens up another problem, or burden to be exact.\nYou have just forked popsicle-retry, made the peerDependencies fix, you will tell pnpm to use that via lockedDependencies. Meanwhile, popsicle-retry will get upgrades which you will miss out on, up to the point where typings-core want the next minor version, with some added functionality, and then pnpm will fail again, you will have to merge in the upstream, push, publish, etc.\nThat is the reason why I plead for having a callback mechanism. Simpler, safer and more fun.. I'll take pragmatism over hope anytime.. I believe what @vjpr is saying is that he would like to keep whatever works and just handle the errors with precision e.g. dep A has B@* as dependency, B has a major vsn release breaking integration with A, needs locking (although the lock doesn't need to be exact, but just another spec to point to the previous vsn in case it gets patch versions). Dep C has B@1.2.3 as dependency, needs no fixing.. can I throw in my pennies?\nPenny 1. I was also munching through the same thoughts about the lockedDependencies naming and how it's not fully appropriate i.e. maybe a sub-sub-sub dependency with exact spec has a bug, and you want to forcefully upgrade it and use a semver spec instead as well. Can call that a lock.\nPenny 2. with all due respect what kat is saying about only allowing this and that, doesn't make sense (see the example I gave just now; that becomes impossible given kat's constraints of following the original semver spec)\nPenny 3. but I think he is very much spot on about the information not to be hosted in package.json . Why? Well because overriding something requires knowledge, and that knowledge should only be left to the end-end-end-*-user. The same way lockfiles do not play any part in a dependency, but only on the top-most package (npm install with no args). It has the annoyance/disadvantage that if you publish package foo, you have to instruct whoever is using it to override dependency bar to point to some different spec, but that's fine. After all, I don't want this to become a daily workflow like \"yeah, too hard to open up an issue/PR, I'll just have a local package in a folder, with a fix, it will override for whoever installs my package, job done\". No! File an issue, send a PR, try to improve the world one comma at a time, don't just create your own ostrich hole!\nPenny 4. I'm not saying this should be part of lockfiles either. That forces you to have a lockfile, and while I know some think they are awesome and everyone should have one, the main point I want to raise is that lockfiles derive from package.json, plus sometimes you just want to delete and generate a new one, meaning the information about the overriding doesn't exist YET or gets DELETED.\npackage.json -> lockfile -> lockfile with overrides does not make sense.\nOn top of this reason, there's another one: while some lockfiles are nicer, simpler, more readable, git-diff-friendlier, the bottom line is that they are still generated, and a human should not fiddle with it as part of some feature - it is at best a desperate quickfix with top-priority to get a proper fix that will programmatically regenerate the lockfile.\nPenny 5. while the package.json doesn't have a proper standard AFAIK, it is still npm that owns its definitions, so introducing generic top-level properties is plain wrong. For all that I know, npm should have a package.json schema check, and barf if it finds out stuff it doesn't know what to make of (imagine if packages out there already had a prepublishOnly script, now comes a newer npm, and they all have to be updated because the semantics where different rolls eyes ). So if pnpm, or any other tool that plays nice with package.json, wants to allow configuration outside of the npm definitions should do it in its own file, as json, as yaml, as md-config, as whatever the author thinks it's cool/appropriate/etc. Whenever that configuration becomes part of the \"package.json standard\", pnpm may support both, and ideally even deprecate it from its own configuration file specification. The exception to all of this is using package.json's config property i.e. pnpm could grab its own space config.pnpm inside package.json.\nPS: I still believe firmly that a callback system opens up more opportunities and closes/skips many of these discussions. I'm only mentioning it, not because I expect somebody else to do it, but because I want people on this thread too to be aware of such a possibility, in case they have more time/knowledge than me to get their hands dirty or provide feedback. After writing the above, I actually just opened up a github issue on this topic so that you see what I mean in greater detail: #861. > (Please use \"she\" when mentioning Kat. The two lead developers of npm are females)\nmy bad, not aware\n\npenny 5\n\nI'm not in the field of discussing size of the issue, just that it is an issue. yarn might also want lockedDependencies with a different format or semantics. What then? fight? I was first? I'm more popular?\n\n861\n\nyes, or at least prioritize #861 for its simplicity and breadth. this \"lockedDependencies\" feature could be later added as a convenience because we see that \"most times, most people want do just X\", though #861 is probably close to \"lockedDependencies\" in terms of effort and convenience, so it might not be worthwhile. @zkochan @vjpr I'm not sure of the plain-english outcome of this? I am also running after \"where are my global modules installed?\" and currently pnpm and npm return different things:\n```\n$ npm root -g /usr/local/lib/node_modules\n$ pnpm root -g\n/usr/local/Cellar/node/8.4.0/pnpm-global/1/node_modules\n```\nthe path that pnpm returns doesn't even exist actually. FWIW you will notice that npm 5.3.0 also executes preshrinkwrap, shrinkwrap and postshrinkwrap, but that's not relevant for pnpm I guess.. I should note that I didn't expect pnpm to perform so well re:scripts :clap: https://docs.google.com/spreadsheets/d/1XH8iDyOmNf-ZH3A2SMV5YTDcT2YPXmhFcaUPsIyYEu8/edit#gid=0. I should note that I didn't expect pnpm to perform so well re:scripts :clap: https://docs.google.com/spreadsheets/d/1XH8iDyOmNf-ZH3A2SMV5YTDcT2YPXmhFcaUPsIyYEu8/edit#gid=0. We could look at it from multiple angles. One being that documentation is not up-to-date with the code or that it's not clear enough (by all means, that's why I started the package-json-scripts repo, but maybe that's just me). Another is the the docs hide implementation detail i.e. we may run other things, but we tell users to consider only that prepare is run, because that's what we run on npm install (no args). And yet another being that I messed up my test (though I recently double-checked my results).\nWhen looking at pacote though, you find this https://github.com/zkat/pacote/blob/latest/lib/fetchers/git.js#L20\nI didn't look in super in depth, but my take is that the flow is as follows:\n\nif the git dep is already in the local cache, and we're in the cache window, the cache will be used\nif not, the git dep is cloned to a temp folder, where the {pre,,post}install and prepare scripts runs\n-- npm then packs it and puts the tarball in the cache\n-- npm then unpacks it from the cache in the \"expected\" node_modules location\n-- npm runs the {pre,,post}install scripts\n\nThat would simulate a full publishing chain (except for the {pre,,post}publish scripts ofc).. I need to test this myself but setting NODE_ENV to prod is counter intuitive since you need dev deps to run 'npm prepare'. I suggest you create a minimal github repo with a package.json that surfaces the problems you describe with your private repo, including specific npm/pnpm/yarn versions.. confirmed that it works as intended now. Thanks (even for the \"beautiful\" hack)!\nPS: I've opened up an issue with npm on the topic https://github.com/npm/npm/issues/17901. i wrote better=proper test, and now the test passes, so i need to figure out better how to replicate my problem - which is that running eslint fails on eslint-plugin-import because it cannot resolve the module eslint-import-resolver-node...\nI leave this open for a day, in case this rings any bells. > npm reads .npmrc from the project's directory only,\njust want to double-check - by design? like you do things differently than npm on purpose?\nthen what if i want to use another registry on a machine? usually i would have marked that in ~/.npmrc\nor similarly i've always had optional=false and save-exact=true on my dev machine.... indeed I misunderstood you \ud83d\ude1e . a great benefit with code vs configuration is that you have built-in extensibility:\n\ncheck if the package.json actually needs fixing or not i.e. maybe meanwhile popsicle-retry got a new version  published, thus we don't need to \"lock\" it to a fork anymore. Maybe pnpm could even show a WARNING: hey, you told be to call you when i read package.json for this selector, but you returned nothing (i.e. keep the same pkg), maybe you want to clean up your callbacks module\ncheck what pnpm version we're running, node, etc., etc.\ncheck say .npmrc\npnpm maintainers could publish a pnpm-known-rebels package with a callbacks module that can be required=imported or just directly referenced in our own callbacks module\netc etc etc\n\n(by now I guess you've figured out I'm actually Hedwig from Split https://www.youtube.com/watch?v=okAm1fMu2qY ). re 1. I mentioned Iteration1 just so it's out there (didn't want to delete it). Iteration 2 is the suggestion put forward for real.\nre 2. callbacks is not even needed if you think about it. All the exports in such a file are \"callbacks\", so it could be simply exports.postReadPkg.\nre 3. I didn't have enough knowledge of pnpm, I just wanted to raise the point that we want to patch 1 instance, not modify the package for the entire .pnpm-store\nre 4. I'd highlight that until the highlighter gives out smoke :). why do you want also an error? don't you want either an error, or an alias ?\nregarding the second part - no, no, no. then you have silly issues like having exceptions for pnpm -v to still output the version number, not barf \"unknown argument -v to pnpm install\" or similar\n\"KISS\" please. > https://gitter.im/pnpm/pnpm?at=5979d6e81c8697534a651b80\n:+1: for a whitelisting of proxied commands. @zkochan :clap: once again thank you for your invaluable work. @jlsjonas did you get anywhere with this?\nI'm also hitting this. Not on alpine, but on ubuntu 16.04 (in a debootstrap-ed env though). @zkochan the semi-good news is that I successfully cloned zkochan/pnpm-issue-866 and ran pnpm install, but\npnpm install emphasize@1.5.0 lowlight@1.9.1 fails complaining about creating node_modules/.registry.npmjs.org/highlight.js/9.12.0/node_modules/highlight.js\npnpm install highlight.js@9.12.0 works though \ud83e\udd14 . @jlsjonas tried out https://store.docker.com/community/images/mhart/alpine-node images (on top of Docker for Mac 17.06) but all works \ud83d\ude1f \ud83d\ude2d I would gladly dig into this IF I can replicate this.. @zkochan If it's not too much to ask, instead of me forking pnpm, etc, etc trying it out - since it looks like a reasonable change, would you be open to passing graceful-fs to mkdirp ? \ud83d\ude1e . Oh wow #facepalm. Testing next week, and will get back\nOn Sun, Dec 31, 2017 at 1:12 AM, Zoltan Kochan notifications@github.com\nwrote:\n\nThis might've been fixed by pnpm/supi#32\nhttps://github.com/pnpm/supi/pull/32\nPublished in pnpm@1.25\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/866#issuecomment-354576595, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AArOQSmBh6TYVBMSqHU9h0NwZznd5x3Lks5tFtFagaJpZM4OsOQt\n.\n\n\n-- \nandreineculau.com http://www.andreineculau.com\n. sorry for the silence - long winter sickness. I have a vague memory that it\nwas fixed, but I could not confirm properly because of the git-ssh bug\n(which is now fixed) -- and gitter is not that helpful with searches.\nI'll try to double-check and reply in a week's time (before Feb 19), but\nfeel free to close this as fixed from my PoV. Thanks!\nOn Sat, Feb 10, 2018 at 8:14 PM, Zoltan Kochan notifications@github.com\nwrote:\n\n@andreineculau https://github.com/andreineculau or @jlsjonas\nhttps://github.com/jlsjonas can you confirm that the issue is gone with\nthe latest pnpm?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/866#issuecomment-364681826, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AArOQRgA_Nf8zcRCrWn3QHS7lkhWCYuoks5tTeqvgaJpZM4OsOQt\n.\n\n\n-- \nandreineculau.com http://www.andreineculau.com\n. I find this an overkill and a feature creep, at least for the reasons mentioned.\nFirstly, who does that? As in where did you see this pattern?\nSecondly, why is it so much harder to cp .eslintrc.js .babelrc pnpmfile.json new_repo/ then cp tools new_repo/ ?\nThirdly, just like I was mentioning in another pnpm thread that it is a bad idea to pollute package.json with new configuration keys, it si also a bad idea to pollute .npmrc . AFAIC both are owned by npm and npm alone.. FWIW I would defer the safe/unsafe. It is not necessarily a LICENSE file, nor only a LICENSE file that is needed.. No, I meant: since this is at the experimental stage, don't bother with safe/unsafe. Have just true/false (or all/none or similar, if you stick to \"levels\" since boolean switches don't make sense).\n. what's problematic from my pov with the naming is the level namings. what\nis safe? what is important? etc\nsmth like all | pnpm | js is a bit clearer where pnpm is simply some\nvariable-over-time algorithm, pure magic one might say (maybe it should be\nnamed \"magic\" :) ) e.g. today it means js + LICENSE, tmrw it's js +\nLICENSE{,.md,.txt} + LICENCE{,.md,.txt} + NOTICE{,.md,.txt} +\nAUTHORS{,.md,.txt} + UNLICENSE{,.md,.txt}, the day after you add *.d.ts\nfiles\ncome to think about it, it should be an array, a whitelist e.g. --unpack\njs,dts = js-only + .d.ts files\nor --unpack js,legal = js-only + all these license-related files\nOn Thu, Dec 7, 2017 at 9:12 PM, Zoltan Kochan notifications@github.com\nwrote:\n\nMore straightforward option naming might be --unpack\nall|important|just-enough.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/pull/947#issuecomment-350080959, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AArOQaczVweY7v0Kpe36EJ2dxd-Yjr4tks5s-EaqgaJpZM4QqfME\n.\n\n\n-- \nandreineculau.com http://www.andreineculau.com\n. @zkochan I don't understand what is the benefit of that?\nI can see though the risk in it: the \"API\" is now supi's options. Conceptually I'd insist that pnpmfile is defined standalone from any other interface definition. i.e. one day someone may switch supi for something else, and can do so while adhering to the pnpmfile interface, but defining a \"better\" interface to the supi-alternative.. @nickpape-msft \n\navoid solutions to problems which involve writing custom code - there is more room for confusion and bugs, whereas configuration files can be easily documented and validated. \n\nReading this is confusing alone :) Many configuration files have strict syntax which prohibits documentation. With that out of the way, validation may be hard as well, even if the serialization standard is popular e.g. json/yaml because the semantics are not validated. This means that you're just as good validating code. Eslint switched to code. Babel switched to code. And the examples go beyond the javascript ecosystem.\n\n@zkochan \n\nThe only question is how should the hook-dependency be installed. It cannot be a dev dependency, because pnpmfile.js is called before installation has started.\n\nIt doesn't need to be installed to begin with. npm, pnpm, etc are package managers, they are not build tools. And if you don't have build tools e.g. make, then you have to manually specify your dependencies - we require pnpm, we require some-node-module-with-pnpm-hooks installed globally, etc. Same things happens if you want to compile smthing with node-gyp for instance. Npm & co need to be concerned with and handle installation of node modules, nothing more.\nA suggestion would be to have some-node-module-with-pnpm-hooks available as a git submodule, but even then you have a manual specification if you don't have a build tool e.g. use git clone -s or run git submodule update --init --recursive after cloning, etc.\n\n@vjpr \nhttps://github.com/pnpm/pnpm/issues/949#issuecomment-349259345\nI do not follow anything that you wrote. Sorry. I'm being honest, not disrespectful. I stand firmly that pnpmfile.js is both as easy and much more powerful than pnpmfile.json . And I do not follow what does publishing packages have to do with it.\n\n@pgonzal \nI must be missing something. Don't you need to publish a config file then to all your 20 git repositories.\n@pgonzal @vjpr It sounds to me like you're not advocating a config (static) vs hooks-in-a-javascript-file (pnpmfile.js) but advocating for a user level (home folder), maybe even global pnpmfile.js just like .npmrc works. That is something that I think I poked you about @zkochan , right?\n. @vjpr I read stuff like 10 times, and even wrote a full wall of text, until I realized (I think) what you're saying: it is easier to merge some JSON, or add a new line to a file (or n files, because you have n projects that all have a broken dependency) than to modify code in a pnpmfile.js, assuming that some of those n projects do not share the same pnpmfile.js content.\nIf you can confirm that's the case, the technical solution (a raw example, not a UX solution) would be that a variety of pnpmfiles with their own readPackage hook are placed in a folder, and each and every one will be executed. In that case, you'd copy the same file to all n projects. You upgrade all n projects to a version of \"foo\" that is not broken, then you'd just delete the pnpmfile that fixes foo.\nIf it's not clear, I'm not advocating that everyone should implement such a top-level pnpmfile. Maybe the UX solution could be that pnpm looks for a pnpmdir in the root and queue hooks in alphabetical order of the files in that dir, etc. I don't know. I'm not proposing a system, I'm just highlighting that your problem has a solution today, primarily because the functionality is so flexible.\n\n@zkochan would you be so kind and clarify this for me: pnpmfile.js is only read from the folder where pnpm is executed, right? so if a dependency will have a pnpmfile.js of its own, it is ignored? I think we had this discussion before, and I thought it it is not ignored, but you corrected me, and I stand corrected. Just like \".npmrc\", settings like these should only be considered for the \"ultimate\" package.\n\n@vjpr \n\n-1 for global pnpmfile.js\n\nThe reasons you listed are the same for anything. A global/user level gitignore. A global/user level .npmrc . Etc. What we need to remember is that pnpmfile.js is not a dumb mechanism. If you detect that foo@1.2.3 is broken, you can fix only foo@1.2.3 not 1.2.4, not 1.2.2. When foo is upgraded and that version is not broken, then I'd have some leftovers in there that maybe I will always forget to clean, but it doesn't break my development whatsoever. Obviously if I say that I replace foo@* with fixed-foo@1.2.3 then I've got a problem, but that problem is mine alone.\nThe reason for a global and or user level and or a \"shared\" pnpmfile.js is that I or my company could deny installing GPL packages, for example. The \"problem\" is that this would require pnpmfile.js to \"merge\"=add hooks, not override them. But that deserves a discussion on its own.\n\n@pgonzal \n\nThis avoids problems...\n\nThat cannot possible withstand reality. Maybe you minimize problems, yes. But unless you develop in a VM/container=sandbox environment, there's always something global. That said +1000 for you/your team's efforts in this direction.\n\nBut most people prefer a simple restaurant menu with a fixed list of options.\n\nI take the liberty to continue: ..., until they are not happy with the limitation and then they demand an ever-growing selection of simple restaurants with an ever-growing fixed list of options. Examples: https://github.com/eslint/eslint/issues/6460 http://babeljs.io/docs/usage/babelrc/#env-option . I can find more examples, but it's late here. Both of those examples though are non-issues when using the programmatic configuration of eslint and babel.\n\npnpm.json\n\nCare enough to elaborate? You still need to commit changes to this pnpm.json in each of the 20 git repos, don't you?\n\nPS: this thread is hard to keep in check :) @zkochan 's 2nd comment on this thread https://github.com/pnpm/pnpm/issues/949#issuecomment-349225238 hijacked the thread to begin with because AFAICS that does not address @nickpape-msft 's take on code vs static config file. And then others came to pitch in how they would work with a static config file, etc, but the reasonings brought forward are very specific, and what I conclude is that pnpm would benefit a great deal from some pnpmfile.js examples. If in situation A, try smth like this. If in situation A but also doing B, try smth like this. etc. I'm not demanding/expecting someone to write them, just that they could fill a void. Especially in this situation where like @zkochan mentioned nothing stops anyone from having a \"blind\" pnpmfile.js driven by a static config file: you decide the format of that config file, and then your pnpmfile.js is coded to read it and reply to readPackage calls as instructed in the config file. There are a couple of ideas, specific scenarios that should not be forgotten, and if anyone involved on this thread has the energy, I'd welcome them to open up new issues with details about their specific environments, their specific hurdle with pnpmfile.js and how they envision an easier alternative. If not for other reasons, that will be a good platform to create pnpmfile.js examples.\n. it doesn't have to be the same registry e.g. you keep a registry of fixed\npackages, to override the ones in the default=npm registry.\nTheoretically, for simple switch-packages cases, you may not even have to\nwrite a fully specified pnpmfile, just \"check this fixed-pkgs registry, if\nyou find smth there, just return that fixed-pkg\"\nPS: don't you sleep? :)\nOn Thu, Dec 7, 2017 at 12:56 AM, Zoltan Kochan notifications@github.com\nwrote:\n\ncan be done. (here's the code that run the hook:\nhttps://github.com/pnpm/supi/blob/master/src/install/\ninstallMultiple.ts#L330)\nwhy would you call the registry though? To get metafile of one of the\ndependencies? Seems counterproductive as the call will be done by pnpm\nanyway\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/954#issuecomment-349815031, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AArOQZ9q3lVuf66xaRC9SbBthuUTk-V_ks5s9ynBgaJpZM4Q4xkY\n.\n\n\n-- \nandreineculau.com http://www.andreineculau.com\n. Poor examples on my side. Hard to be convincing while I'm holding a milk formula bottle in my hand at midnight :p \nVery nice with the custom resolvers \ud83d\udc4f . > This is a js file, it can require and compose other js files if needed.\nI'm 200% with you @zkochan . I merely listed those options while jumping on the train of @vjpr where he compares with \"how easy it would be if you just add a new line to a file or a file to a dir\".\nAnyone can implement those things even today, but I wrote that \"it's worthwhile to digest the thought of ...\" in the sense that if there are many pnpm users that would like that convenience, it is much more of a reasonable middleground than the argument of static configuration imho.. FWIW tried without npx, and I couldn't get the FAIL: missing node_modules, so even that is not \"consistent\", although in my shell, running pnpm i with 1.25.1 I consistently get no error, exit code 0 and no node_modules folder\nSee 20180110123855.zip. close but not cigar \ud83c\udf89 \nit fails now with Error: ENOENT: no such file or directory, open '/Users/andrei/.pnpm-store/2/git@server.internal+some/path/foo.git/<hash>_stage/lib/atex-api-json/session-v1.js'\nif I rm -rf node/modules/foo and run pnpm i again, I get the ENOENT message basically for all the files in the src and lib folder (there are other folders in that archive, but pnpm doesn't complain about them - dunno if it's timing issue i.e. it exists before reaching them).\nwhen I look in the pnpm store, I can see /Users/andrei/.pnpm-store/2/git@server.internal+some/path/foo.git/<hash>/package/node_modules/lib/atex-api-json/session-v1.js and every other file just fine.\nwhile it seems obvious to me that ENOENT errors are swallowed by dint, I have looked a bit into it, and it looks like all of its readfile calls are all successful. but if not dint, where is the error coming from?. closer but still no cigar :)\nso now (with verify-store-integrity=false in .npmrc) i consistently get all the ENOENT errors for src and lib folder. ohh, i should have checked my email or this thread. I came to confirm the fix (with a monkey-patched package-requester installation in pnpm's node_modules at 1.30.1).\ni confirm also with a clean install of 1.30.2 :tada:. I'm working on it. Smoothening out the PR as we speak.\nI just hope you'll have the time to review.. ",
    "greenkeeper[bot]": "Version 4.4.1 just got published.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.4.1\n\n[bugfix] errant space in recommended ruleset (couldn't find no-misused-new)\n\n\n. ## Version 4.4.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.4.2\n\n[bugfix] whitespace rule caused false positive on EOF (#2131)\n[bugfix] WebStorm fails because json formatter parameter has extra space (#2132)\n\n\n. ## Version 3.8.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits .\n\n9c1894e 3.8.1 released\nb5e9639 Browser files rebuild\n\nSee the full diff.\n\n. ## Version 1.0.10 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits .\n\nde157c0 1.0.10\n2f51136 src: On EPERMs on Windows, let through if dest is actually the same as source\n\nSee the full diff.\n\n. ## Version 8.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 9 commits (ahead by 9, behind by 3).\n\ncdd26ee 8.0.1\nf4bbf16 Document corgi changes\n0d71d89 Accept corgi JSON if available\nc02a5f6 7.5.0\ned0236e ping: response all data even an error exists (#149)\nb6069f9 7.4.6\n361ffaa travis: drop 0.12\n4042ad0 index.js: Remove dependency on synchronous fs operations\nfaacda9 package: Whitelist package files (#141)\n\nSee the full diff.\n\n. ## Version 8.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits .\n\nee2ad6b 8.0.2\n5f27d53 Actually send the corgi accepts header\n\nSee the full diff.\n\n. ## Version 2.1.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 5 commits .\n\nda1a45e 2.1.1\ncf4684f minor docs changes\n03ddea4 refactor tests\ncca681c run update\nc2b42a5 2.1.0\n\nSee the full diff.\n\n. ## Version 0.0.6 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 5.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits .\n\nc85a786 5.0.1\naf9aff4 src: Add toString method\n\nSee the full diff.\n\n. ## Version 3.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits .\n\n76fc2da 3.0.1\ne97f9ae Should sort only dependencies (#6)\n\nSee the full diff.\n\n. ## Version 0.0.9 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 0.0.11 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 5.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv5.0.2\nv5.0.2 (2017-06-02)\nHere's another patch release, soon after the other!\nThis particular release includes a slew of fixes to npm's git support, which was causing some issues for a chunk of people, specially those who were using self-hosted/Enterprise repos.  All of those should be back in working condition now.\nThere's another shiny thing you might wanna know about: npm has a Canary release now!  The npm5 experiment we did during our beta proved to be incredibly successful: users were able to have a tight feedback loop between reports and getting the bugfixes they needed, and the CLI team was able to roll out experimental patches and have the community try them out right away.  So we want to keep doing that.\nFrom now on, you'll be able to install the 'npm canary' with npm i -g npmc.  This release will be a separate binary (npmc.  Because canary.  Get it?), which will update independently of the main CLI.  Most of the time, this will track release-next or something close to it.  We might occasionally toss experimental branches in there to see if our more adventurous users run into anything interesting with it.  For example, the current canary (npmc@5.0.1-canary.6) includes an experimental multiproc branch that parallelizes tarball extraction across multiple processes.\nIf you find any issues while running the canary version, please report them and let us know it came from npmc!  It would be tremendously helpful, and finding things early is a huge reason to have it there.  Happy hacking!\nA NOTE ABOUT THE ISSUE TRACKER\nJust a heads up: We're preparing to do a massive cleanup of the issue tracker.  It's been a long time since it was something we could really keep up with, and we didn't have a process for dealing with it that could actually be sustainable.\nWe're still sussing the details out, and we'll talk about it more when we're about to do it, but the plan is essentially to close old, abandoned issues and start over.  We will also add some automation around issue management so that things that we can't keep up with don't just stay around forever.\nStay tuned!\nGIT YOLO\n\n1f26e9567 pacote@2.7.27: Fixes installing committishes that look like semver, even though they're not using the required #semver: syntax.  (@zkat)\n85ea1e0b9 npm-package-arg@5.1.1: This includes the npa git-parsing patch to make it so non-hosted SCP-style identifiers are correctly handled.  Previously, npa would mangle them (even though hosted-git-info is doing the right thing for them).  (@zkat)\n\nCOOL NEW OUTPUT\nThe new summary output has been really well received!  One downside that reared its head as more people used it, though, is that it doesn't really tell you anything about the toplevel versions it installed.  So, if you did npm i -g foo, it would just say \"added 1 package\".  This patch by @rmg keeps things concise while still telling you what you got!  So now, you'll see something like this:\n$ npm i -g foo bar\n+ foo@1.2.3\n+ bar@3.2.1\nadded 234 packages in .005ms\n\n\n362f9fd5b #16899 For every package that is given as an argument to install, print the name and version that was actually installed.  (@rmg)\n\nOTHER BUGFIXES\n\na47593a98 #16835 Fix a crash while installing with --no-shrinkwrap.  (@jacknagel)\n\nDOC UPATES\n\n89e0cb816 #16818 Fixes a spelling error in the docs.  Because the CLI team has trouble spelling \"package\", I guess.  (@ankon)\nc01fbc46e #16895 Remove --save from npm init instructions, since it's now the default.  (@jhwohlgemuth)\n80c42d218 Guard against cycles when inflating bundles, as symlinks are bundles now.  (@iarna)\n7fe7f8665 #16674 Write the builtin config for npmc, not just npm.  This is hardcoded for npm self-installations and is needed for Canary to work right.  (@zkat)\n\nDEP UPDATES\n\n63df4fcdd #16894 node-gyp@3.6.2: Fixes an issue parsing SDK versions on Windows, among other things.  (@refack)\n5bb15c3c4 read-package-tree@5.1.6: Fixes some racyness while reading the tree.  (@iarna)\na6f7a52e7 aproba@1.1.2: Remove nested function declaration for speed up (@mikesherov)\n\n\n\nCommits\nThe new version differs by 15 commits.\n\nd654a8e 5.0.2\n00878e5 update AUTHORS\n90a25f6 doc: update changelog for npm@5.0.2\na6f7a52 aproba@1.1.2\n37b85db install: bikeshed new package output\n362f9fd install: print spec for each requested package (#16899)\n7fe7f86 build: get npm to write the builtin config even if npm binary name changes\n85ea1e0 npm-package-arg@5.1.1\n5bb15c3 read-package-tree@5.1.6\n80c42d2 inflate-bundled: Guard against cycles, as symlinks are bundles now\n63df4fc node-gyp@3.6.2\nc01fbc4 docs: remove --save from npm init instructions (#16895)\n89e0cb8 docs: fix package typo (#16818)\na47593a inflate-shrinkwrap: fix installing with --no-shrinkwrap (#16835)\n1f26e95 pacote@2.7.27\n\nSee the full diff\n\n. ## Version 7.0.26 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n. ## Version 7.0.27 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n. ## Version 3.0.6 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nCache Fix\nFixed\n\nWhen TypeScript was requesting a file, it was added to the cache - unfortunately a change resulted in it setting a version which lists the files used by TypeScript. TypeScript peruses this list occasionally and blows up when a non-.ts file is in the list\n\n\n\nCommits\nThe new version differs by 2 commits.\n\n125544f 3.0.6\nae4b423 Set cache.contents (no version) on read request (#347)\n\nSee the full diff\n\n. ## Version 0.0.14 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 8.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 8.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 8.0.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 8.0.4 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 8.0.5 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 8.0.6 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 8.0.7 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 0.24.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 0.14.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 12 commits.\n\n70a8784 0.14.1\n673ff19 Update get-hook-script.js\nd17bbf0 0.14.1-2\n6f68ea0 Update\n4dfea08 0.14.1-1\nd1274a2 Update get-hook-script.js\n949d5d3 Update output\ne77ca0d 0.14.1-0\n04064be Update\n772c063 Fix \"can't find .git dir\" on Windows (closes #143) (#145)\nf7423ea Update README.md\nf609a1d Update README.md\n\nSee the full diff\n\n. After pinning to 8.0.26 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 8.0.29 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 8.0.30 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 8.0.31 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 8.0.32 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 8.0.33 just got published. \nUpdate to this version instead \ud83d\ude80 \n. After pinning to 0.24.13 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 2.1.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 0.2.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits.\n\n8bfff77 chore(release): 0.2.2\nb39753d fix: if preview publish fails, the CLI run fails\n24216f0 fix: don't run prepublish scripts twice\n\nSee the full diff\n\n. ## Version 5.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv5.0.1\n\n5.0.1 (2017-11-19)\nBug Fixes\n\ncore: fall back to globally installed config if available (#127) (8612eb3)\n\n\n. ## Version 5.1.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 5.2.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv5.2.0\n\n5.2.0 (2017-11-30)\nBug Fixes\n\nconsider pull requests from forks (4653c2c)\n\nFeatures\n\nbabel-preset-commitlint: add jsx tranform (#163) (5190241)\n\n\n. ## Version 5.2.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 5.2.4 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 5.2.5 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv5.2.5\n\n5.2.5 (2017-12-08)\nBug Fixes\n\ncore: use correct report message #192 (e3a78bc)\n\n\n. ## Version 5.2.6 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv5.2.6\n\n5.2.6 (2017-12-21)\nBug Fixes\n\nignore semver commits with chore type (cdbb085), closes #198\n\n\n. ## Version 5.2.8 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv5.2.8\nBug Fixes\n\nallow [0] shorthand (2210dd9)\ncorrectly resolve parserOpts #115 #95 (7c3d49a)\nsanitize ensure.case #211 (e18dc4c)\n\n\n. ## Version 5.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv5.0.1\n\n5.0.1 (2017-11-19)\nBug Fixes\n\ncore: fall back to globally installed config if available (#127) (8612eb3)\n\n\n. ## Version 5.1.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 5.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv5.0.1\n\n5.0.1 (2017-11-19)\nBug Fixes\n\ncore: fall back to globally installed config if available (#127) (8612eb3)\n\n\n. ## Version 4.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nAdd Missing `register/`\nFixed\n\nAdd missing register/ directory to package\n\n\n\nCommits\nThe new version differs by 2 commits.\n\n1541dfe 4.0.1\nc6a70f9 Include register/ directory in published package\n\nSee the full diff\n\n. After pinning to 1.0.2 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 0.2.1 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 5.2.6 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 1.4.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 1.6.0 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nCommits\nThe new version differs by 2 commits.\n\n2941b36 chore(release): 1.6.0\n08a2766 feat: add dryRun to options\n\nSee the full diff\n\n. After pinning to 1.6.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 0.2.2 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. ## Version 8.5.4 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n. ",
    "gigabo": "\nNot using lerna\n\nFWIW lerna@2.0.0-beta.38 adds support for pluggable npm clients.  Should work with pnpm.. ",
    "donaldpipowitch": "\nAlso I plan to create some tooling for monorepos that use pnpm.\n\nStill looking for a good monorepo solution. Would be nice to see more alternatives to Lerna.. Is there a way to search code via GitHub across all repositories in an organization? I currently try to track down https://github.com/pnpm/pnpm/issues/1062 a little bit, but I need to jump across some repositories to do this. Would be a little bit nicer/easier in a monorepo, if this is still something on your mind? . > Do you know about some popular packages doing this?\nOnly for devDependencies, if they behave in the same way? TypeScript is build with itself for example.. Strange. It looks like it is not possible to install a package as a dependency of itself via npm's CLI \ud83d\ude15 \n13:30:07 in ~/project/foo on master\n$ npm i foo\nnpm ERR! code ENOSELF\nnpm ERR! Refusing to install package with name \"foo\" under a package\nnpm ERR! also called \"foo\". Did you name your project the same\nnpm ERR! as the dependency you're installing?\nnpm ERR!\nnpm ERR! For more information, see:\nnpm ERR!     <https://docs.npmjs.com/cli/install#limitations-of-npms-install-algorithm>\nIt looks like somebody added a package of itself manually by accident in our code base and if you do that neither yarn nor npm shows a warning. But looking at the warning and the docs it shouldn't be intended...?\n(EDIT: Sorry. Closed, before commenting.). Just wanted to write a small test case as a follow up to this Twitter thread, but I get an error. (Don't know why... I used pnpm and file: earlier today without this error in a bigger project.)\n\npnpm version:\n0.70.0\nCode to reproduce the issue:\n./package.json:\n{\n  \"name\": \"foo\",\n  \"version\": \"1.0.0\"\n}\n./examples/package.json:\n{\n  \"name\": \"bar\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"foo\": \"file:../\"\n  }\n}\nbash\n$ cd examples && pnpm install\n  foo file:../                                                      1.0.0 \u2713\n  WARN Cannot find resolution of /foo/file:.. in shrinkwrap file\nHowever it looks like everything is installed correctly.\nExpected behavior:\nNo warning? Or a different warning? Currently I don't know what is the problem.\n\nNow I add a new file ./server.js with the content console.log('foo'); and call $  pnpm install again inside examples/, but no ./examples/node_modules/foo/server.js appears. (Even when I remove ./examples/node_modules and ./examples/shrinkwrap.yaml and try it again.)\nExpected behavior:\n./examples/node_modules/foo/server.js should exist.\n\nLol. I just called $ pnpm install foo inside examples/ and foo was installed and in the ./examples/package.json the line \"foo\": \"file:../\" changed to \"foo\": \"^1.0.0\". \ud83d\ude04 \nExpected behavior:\nJust install ./ (the local foo package) again and don't change the content of ./examples/package.json. (This is the behaviour of $ npm install foo.)\n\nThank you for pnpm! \u2764\ufe0f . This is awesome, thank you. So this basically behaves like npm@5 now, right?\nI probably will comment about this behavior in mom's issue on this, too, because there is one downside about the symlink. They don't behave like a normally published module, because everything is symlink even if you use a .gitignore, .npmignore or \"files\". But I guess this is a bigger problem... . Cool. Thank you!. It looks like there are problems with TypeScript, too:\nWe use Mocha in our TypeScript-based tests which is installed as a dependency of our \"build tool\" (see here). Normally this is installed at ./node_modules/@types/mocha.\nIn our tsconfig.json we say:\n{\n  \"compilerOptions\": {\n    \"types\": [\n      \"mocha\"\n    ]\n  }\n}\nNow we can use describe, it and so on (global variables from Mocha) inside our tests.\nBut with pnpm no ./node_modules/@types/mocha is created. The typings for Mocha are installed at ./node_modules/.registry.npmjs.org/@types/mocha. TypeScript can't find them and I can't change our tsconfig.json in a way that works for yarn/npm users, too.. Hmm... I don't use mocha directly, but through @mercateo/ws. When @mercateo/ws updates mocha to a new major version, I probably would update @types/mocha, too. But now I don't have control over it anymore. I could say it is a peer dependency, but it really is optional. (I don't have to use TypeScript for tests.)\nBut it would solve my problem, yeah.\nTough question \ud83e\udd14 . Closed in favor of https://github.com/pnpm/pnpm/issues/801.. Any chance to have drop-in support for yarn workspaces in pnpm? \ud83e\udd14. Interesting. I'll try that tomorrow. Thanks.. That sounds interesting! Thank you for the update. I hope I can test this soon (I currently have problems with my setup).. So it is like yarn? It works as intended and should be overwritten via hooks, if a different behavior is needed?. I probably wouldn't want a separate command, so I don't need to tell people about it. A solution which I can commit into my projects (like using hooks for pnpm or resolutions for yarn), is probably better.. So this issue can probably be closed...?. Just wanted to say thank you for this in-depth explanation. As far as I can tell that sounds like nice solution.. Follow up from https://github.com/pnpm/pnpm/issues/1253:\nI really would like to set some prefer-local true flag in some pnpmfile.js/.pnpmrc/whatever per project to use pnpm recursive install instead of pnpm recursive link to link local packages, but install everything else.\nGoals:\n- We have several monorepos and non-monorepos and several developers who only occasionally need to run/build one of these projects. I'd like to tell them to only use pnpm recursive install for all projects instead of per project.\n- Ease the migration from yarn (where yarn install already prefers local packages in workspaces).\n- Do not confuse it with yarn/npm/pnpm link where the current package is linked to the global folder. (One could think pnpm recursive link will link every local package to the global folder.)\n(While writing this I wonder, if prefer-recursive would make sense as well \ud83e\udd14So pnpm install would be recursive in the monorepo root, but not in a leaf package. But this is as different topic.). Amazing!\ud83d\ude0d. Can you explain how this works now? Was it solved via a command now instead of a preference in some config file? Thank you and have a nice day \ud83d\ude0a. Maybe this is the problem: https://github.com/pnpm/fetch-from-npm-registry/blob/master/src/index.ts#L46\nThis function seems to be called twice in my case and defaultOpts.strictSSL is true the second time. When I set defaultOpts.strictSSL to false manually here I don't get  unable to verify the first certificate errors.. Cool, Thank you. I'll try this. And sorry for not providing a stack trace. I had no time yesterday.. Ah, I see! Well to complete the list, I saw a stack trace for \"No compatible version found\", \"This node_modules was not installed with the --shamefully-flatten option.\" and \"404\" errors. Thanks for pointing to the correct place in the source code. Maybe I can make a pull request myself then :). Man you work too much. Kudos for you and this project \ud83d\ude0d. Side question: Is it correct that when I ask for 17 it looks like my request is extended to >=17.0.0 <18.0.0? Because there is no leading ^?. Today I learned! Thank you for taking the time to answer this \u2665\ufe0f. Speechless \u2764\ufe0f. Wow \ud83d\ude0d. I do not deserve those bug fixes within 24 hours! \ud83d\ude0dThank you so much.\nSo I just installed 2.10.4 and run pnpm recursive install against https://github.com/Mercateo/ws. I now get ERROR\u2009 404 Not Found: example-node-ts (via https://registry.npmjs.org/example-node-ts) (and thanks to https://github.com/pnpm/pnpm/issues/1196 I really see that it tries to find my package in the registry \ud83d\ude0d).\npnpm recursive link seems to run without problems.\nCould you explain why pnpm recursive install tries to install everything from the registry and using the link: protocol doesn't trigger the pnpm recursive link behavior for this particular package? Is there anything which could lead to undefined behavior or something like that? I thought link: would make it already explicit. \ud83e\udd14I actually liked yarns behavior a lot in this case and it helped with the adoption here at our company as we had not had to explain something like lerna bootstrap. lerna bootstrap always felt like a workaround because npm doesn't support monorepos natively.\nWould you structure https://github.com/Mercateo/ws in a different way? (My goal is to test the local ws package against a couple of standalone private examples which could depend on each other as well.)\nRegarding the initial issue I think everything is solved so I close it. Thank you again. \u2764\ufe0f Looking forward to hear about some background between install/link.. Thank you so much for the explanation. And sorry, because I haven't read the error correctly.  I didn't notice that the error was thrown, because I used \"example-node-ts\": \"*\" even though the error clearly said that. My bad.\nI think I can live with using pnpm recursive link, but I wonder if it was ever discussed if pnpm recursive install could prefer local dependencies (similar to yarn) - maybe configurable in a pnpmfile.js? Like preferLocal: true to ease the adoption and to not explain on a per project basis if link or install should be used. Or could this behavior be achieved with hooks only? \ud83e\udd14. ",
    "valotas": "What about this approach? Pouchdb moved away from lerna to that.. npm v5.5.1-canary.8 and 4.6.1 works just fine. I do not have yarn installed.. No, that I can not do.. Nope, I do not think that is supported.. Is there anything that I can do? which are the fields needed per package.json?. I am still having the problem. It looks like the heap is getting full in the buildTree recursion found in supi's install.js. I tried 5 and got the following\n?ERROR? Expected concurrency to be a number from 1 and up, got 5 (string)\nTo be honest though, I am not sure that a couple of missing fields could resolve the problem. Sooner or later it will strike back, if that is the problem.\nIt looks like the buildTree recursion is for some reson too much...\n. It looks like a getter for children which would lazy load it solves the problem. I can create a pr for that. . It looks like it is enough to bring the vm down before a Maximum call stack size exceeded :). I'll retest tomorrow with a couple of bigger (in terms of dependencies) projects.. How do you run the benchmarks?. How do you run them?\nnpm install\nnpm run benchmark\n?. And how do you see memory consumption vs cpu cycles?. Sorry, I have a hard time going through the code. As I see the generated nodeId is the key of your \"map\" object. I do not know how you can get rid of it, unless you do not care about, but in resolvePeersOfNode you are making use of it. There for I do not see how can it get substituted by a number. Or did I understand something wrong?\nApart from that, if the tree is accessed a lot, it make sense that it needs more cpu, as it is a getter and it will regenerated every time it is accessed. That is the reason I do not like getter. They do not give \"feedback\" to the user of what is going on behind the scenes. Let me fix that...\nFinally, since you care about performance, I do not thing that objects as maps are faster than actual maps. Ok, I see that is also used in https://github.com/pnpm/supi/blob/master/src/link/resolvePeers.ts#L225 but it looks like you just iterate over it, so all you need is a Set. Am I right?. Unfortuantelly I can not share the repo. I will try to replicate the problem though and come back to you.. Never the less, thanks a lot for your help!. pnpm install. ",
    "akomakom": "Still seeing this (intermittently) with 0.52.1.  Had to put a retry loop around it.\n\n00:00:29.814 + pnpm install\n00:00:56.492 /node4/lib/node_modules/pnpm/lib/node_modules/proper-lockfile/index.js:180\n00:00:56.492     compromised = compromised || function (err) { throw err; };\n00:00:56.492                                                   ^\n00:00:56.492 \n00:00:56.492 Error: Unable to update lock within the stale threshold\n00:00:56.492     at /node4/lib/node_modules/pnpm/lib/node_modules/proper-lockfile/index.js:108:66\n00:00:56.492     at FSReqWrap.oncomplete (fs.js:82:15)\n00:00:56.493 \n00:00:56.523 ERROR: script returned exit code 1\n00:00:56.523 Retrying\n00:00:56.601 Running shell script\n00:00:56.870 + pnpm install\n\n(worked the second time)\n. ",
    "nickpape-msft": "@zkochan , we recently implemented a lockfile that we believe does not have any race conditions and runs on Windows, Mac, and Linux. https://github.com/Microsoft/web-build-tools/blob/master/libraries/node-core-library/src/LockFile.ts . For OSX and Linux it relies on a combination of pid & starttime to determine if the process is still holding the lock. We didn't like lockfile or proper-lockfile packages since they relied on weird designs like having the process holding the lock constantly update the modified time.\nWe haven't yet implemented an API for waiting for the LockFile to become available. It would likely be as easy as putting tryAcquire() in a retry loop. (Of course that simple approach would not address issues like starvation).. Can you run pnpm list wordwrap to figure out where it is coming from? You might want to consider searching your node modules for any files with wordwrap in them. This error is probably from a package that forgot to add wordwrap to its package.json. If you figure out which one, you can use the pnpmfile.js to inject the missing dependency.. Thanks @zkochan . Is there any thought of adding a configuration file to handle this? In general, we have been trying to avoid solutions to problems which involve writing custom code - there is more room for confusion and bugs, whereas configuration files can be easily documented and validated. I'd be willing to put together a PR for this if you are interested. For now, I think we add a feature to @microsoft/rush to generate the pnpmfile.js for you.. @deadcoder0904 , we understand that maintaining npm as a single person is definitely a daunting task. I hope @pgonzal 's description didn't come off as being rude. We typically write fairly detailed bugs/work items, and have been filing them not with the intent of having @zkochan fix everything immediately, but rather just to keep track of work that needs to be done. We are definitely happy to contribute to pnpm, as we are attempting to build a tighter collaboration between pnpm and our mono-repo tool, rush.. @zkochan , @pgonzal and I discussed this issue more, and we think that the issue Pete was describing is a much more difficult problem than the one we are immediately trying to solve (which is much similar to the problem I described in the initial e-mail).\nDescription\nWe sketched out a set of rules that the algorithm would follow as it installs dependencies. Assuming that the dependency tree is solved in a breadth-first manner, the rules for the algorithm would be as follows. As for terminology:\n\nThe current package is the one that are currently working.\nThe child is the dependency which we are concerned about selecting a version for.\nThe selector is the semver selector describing which version of the child the current package is compatible with.\nThe parent is the package which listed another package (the current package) in its dependency list.\n\n0) If we have already installed this version of the current package, prefer to use it. E.g., if we have already fully installed colors@1.0.0, then we should not need to solve dependencies for, or create a second colors@1.0.0.\n1) At this point we are picking a version for one of the children/dependencies of the current package. First, we traverse the dependency graph back to the root package, if any parent has a direct dependency on the child, we need to look at that version:\n    * If it satisfies the selector, then we re-use the version that parent has already installed.\n    * If it does not satisfy the selector, then we install the latest compatible version available from the registry.\n    * If we cannot find a parent that has a direct dependency at all, then we install the latest compatible version from the registry.\nThis approach has several advantages:\n It should not be terribly expensive.\n It will reduce the total number of packages that are installed. This will speed installs.\n It will reduce the number of side-by-side packages, improving developer's lives.\n It behaves more similarly to npm. [However, whereas npm uses the current state of the node_modules folder, we will use the dependency graph].\n It allows developers to control indirect dependencies, perhaps to stop from upgrading to a buggy package (people don't always follow semver!).\n It solves our real world scenario of attempting to de-duplicate browser packages.\nExamples\nA trivial example\nImagine a developer is writing an app called console-app. He has a dependency on a console-ui library, which uses colors.\nconsole-app\n         |\n        [*]\n         |\n     console-ui (@1.0.0)\n         |\n     [^1.0.0]\n         |\n      colors (@1.9.0)\nNow imagine this developer wants to develop with colors in his app. He adds a dependency on colors, but he decides to use colors@1.1.0 (for whatever reason - maybe he is more comfortable with the older version, maybe he is already using that version in other apps, maybe the colors people changed \"green\" from dark to light, etc).\nThe current pnpm model will resolve this as follows:\nconsole-app\n         |          \\\n        [*]          \\\n         |            \\ \n         |             \\   \nconsole-ui (@1.0.0) colors (@1.1.0)\n         |\n     [^1.0.0]\n         |\ncolors (@1.9.0)\nThere are some downsides to this. console-ui is using a different version of colors, so now things are being printed out in both light and dark green! We also have to install 2 copies of colors, which slows build times! \nUsing the algorithm above, we would get the following tree:\nconsole-app\n         |          \\\n        [*]          \\\n         |            \\ \n         |             \\   \nconsole-ui (@1.0.0) colors (@1.1.0)\n         |\n     [^1.0.0]\n         |\ncolors (@1.1.0)\nThis is great! Now we are using the same colors. But lo and behold, the maintainer of console-ui has only been testing against the latest version of colors, he doesn't realize that the latest console-ui no longer works with colors@1.1.0. In this case, the console-app developer will realize this, and bump his direct dependency on colors to something that will work for both of them.\n[We have discussed more complex solutions in the future, involving installation \"hints\", which would allow a package.json to say whether itself or a dependency should be de-duplicated, or prefer the latest version. This behavior would allow console-app to let console-ui use the latest colors. It also solves a host of other problems, but we will outline this concept in another issue.]\nExample from my initial comment\nThe initial example I had is very straightforward:\nmy-browser-app\n            /      |      \\\n           /       |       \\\n          /        |        \\     \n        A@*       B@*       C@*\n         |         |         |         \n    >=1.0.0      1.2.3      ~1.2.0         \n         |         |         |         \n      lib        lib        lib\nCurrently, NPM might resolve this as follows:\nmy-browser-app\n            /      |      \\\n           /       |       \\\n          /        |        \\     \n        A@*       B@*       C@*\n         |         |         |         \n    >=1.0.0      1.2.3      ~1.2.0         \n         |         |         |         \n    lib@1.3.4   lib@1.2.3   lib@1.2.9\nNow, when bundling the app, you are getting 3 versions of lib bundled. Sure, you might be able to fix this by writing a hook in your pnpmfile.js, but what if you are a browser library, and not an app, what about anybody who installs you? They will not have your complex pnpmfile.js that describes in detail what overrides are needed.\nIn npm land, you solve this by manually adding a direct dependency. For example, imagine you have a tool which calculates the versions of all libraries (direct and indirect) needed in order to stop any of them from being duplicated [we in fact have such a tool]. If we follow the above algorithm, we would end up in a state much similar to npm. Additionally, we have a single version of the package, speeding up installation dramatically!\nmy-browser-app --------\n            /      |      \\         \\\n           *       *       *         1.2.3\n          /        |        \\         \\\n        A@1       B@1       C@1        lib@1.2.3\n         |         |         |         \n    >=1.0.0      1.2.3      ~1.2.0         \n         |         |         |         \n    lib@1.2.3   lib@1.2.3   lib@1.2.3\nA more complex example that covers every case\nImagine the following tree. [We don't care about version numbers as much in this example, as we are just trying to illustrate how the rules of the algorithm would work].\napp\n                              |\n                +--------+----+----+--------+\n                |        |         |        |          \n               B@1       Q         D        F\n                |        |      +--+----+\n                |        |      |       |   \n                F(bad)   F(bad) F(good) E\n                                        |\n                                       B@1\n                                        |\n                                        F\nIn this case, we would take the following steps:\n\nWe would install the latest versions of [B, Q, D, F]\n\n2.\n    * D's F would resolve to the same version of F that the app is using, because the app is the first parent with a dependency on F, and it is compatible.\n    * Both B and Q would get the latest version of F compatible with their specifiers, because the version the app is using is not compatible.\n    * The latest version of E would be installed.\n\nE depends on B@1. However, we have already solved a B@1, therefore, we will just reuse that installation. This means that this B will be getting the same F (bad) that we installed in step 2.\n\nYou can observe the following things about this tree:\n1) We do not install the same version of a package multiple times with different dependencies.\n2) We utilize the first parent's version of a dependency, but fall back to default behavior of it is not found or is compatible.\n3) The version of F installed in an unrelated part of the tree does not affect other unrelated parts of the tree. E.g. the version that Q installs does not have an affect on anyone else. If this were not the case, we would have weird quantum entanglement and spooky action at a distance like NPM has (where someone somewhere in the tree downgrades a package and sets off a crazy chain reaction across the rest of the dependency graph).\n@zkochan could you weigh in on the performance/usability impacts of a change like this?\n. @zkochan , that is a very good point. I'm not sure how we handle it. I agree with Pete that we need to come up with something deterministic. That is another attractive feature of pnpm for us. . Thanks for fixing this!. @pgonzal. @zkochan, thank you for being such an involved project maintainer! I will try to workaround you have listed to see if the local repro is fixed and get back to you.. Thanks for fixing this @zkochan ! That workaround unblocked us for now.. Looks like it is not occuring anymore. I'll close the issue.. Related PR: https://github.com/pnpm/supi/pull/39. When working on our project, we noticed that jest had a couple problems correctly resolving symlinked paths. First, we had to upgrade Jest to ~21.2.1, where they weren't missing dependencies in their package.json. Then, I noticed an issue with jest-resolve not properly resolving symlinks, so I created a PR  for them, but don't yet have a CLA to fix the issue. We ended up doing a patch  in our tools instead. You might be experiencing similar issues. First, I would definitely advice upgrading Jest, if possible.\nhttps://github.com/facebook/jest/pull/5085\nhttps://github.com/Microsoft/web-build-tools/pull/466\n. Thanks Zoltan!. I think there must be a regression in this code somewhere. As soon as we upgraded to 1.31.2, I began seeing other errors, such as:\nWARN\u2009 There's a directory in node_modules without package.json: R:\\sp-client\\common\\temp\\node_modules\\.onedrive.pkgs.visualstudio.com\\request\\2.79 .0\\node_modules\\caseless\nIt looks like the particular version of caseless this symlink is pointing to doesn't exist. I wonder if we somehow swallowed an error while doing the rename?. Okay, I'll keep testing out to see if I can find any more info.. @zkochan I think that error is really a part of the EPERM issue. Typically, Rush attempts to retry installations up to 5 times and does not clean out the node_modules and pnpm-store in in between retries. When I changed the NUMBER_OF_INSTALL_ATTEMPTS to 1, I almost always saw the EPERM error (probably since we do clean out the node_modules and pnpm-store if rush install fails.\nWe also did more investigation, and do not think that this is a locking issue with Windows defender. In fact, when we looked at which processes were holding locks in that folder, it looked like pnpm was holding locks to random files inside the folder. This makes me think there could be some sort of resource leak in the tarball_fetcher or unpack_stream.\nWe only see this with large packages (>20 or 30 MB, such as ckeditor which are the ones that are hosted on the blob cache). You might want to try spinning up your own Verdaccio server, publishing a couple large packages, and trying to install them with PNPM. . @iclanton @pgonzal  FYI. Another person who is trying to build this branch is also hitting this error (intermittently with the EPERM issue).\nError: sha1-pW3tByoPy08JoASnkf1LYB6+RP8= integrity checksum failed when using sha1: wanted sha1-pW3tByoPy08JoASnkf1LYB6+RP8= but got sha1-wyrIActJY1wfyqaqnDQ5udzsw54=. (1244601 bytes)<br>\n\u00a0 \u00a0 at Transform.on (C:\\Users\\ianc\\.rush\\pnpm-1.30.2\\node_modules\\pnpm\\node_modules\\@pnpm\\tarball-fetcher\\node_modules\\ssri\\index.js:275:19)<br>\n\u00a0 \u00a0 at emitNone (events.js:91:20)<br>\n\u00a0 \u00a0 at Transform.emit (events.js:185:7)<br>\n\u00a0 \u00a0 at endReadableNT (_stream_readable.js:974:12)<br>\n\u00a0 \u00a0 at _combinedTickCallback (internal/process/next_tick.js:80:11)<br>\n\u00a0 \u00a0 at process._tickCallback (internal/process/next_tick.js:104:9)\nWhich is interestingly also part of the tarball-fetcher.. That sounds about right...\n\nHere is an example file. Currently, PNPM is process 44104, but it also failing to rename the staging directory.\n\n\nApologies for the consfusing logging. Essentially, the first picture is the initial call to _renameOverwrite() which runs \"rename\". The second picture is the first .error() handler, which calls rimraf() then rename(). What you notice is that it is not rimraf that is erroring, it is rename. The next \"delay\" logging line says it is now delaying and then recursively calling _renameOverwrite.\nEven when I raised the retry limit to 2,000,000 we still encountered the error.\nWe can also show that the target folder is empty/does not exist.\n\n. Obviously we advise people not to use multiple registries, but it appears some users of Rush already have been. This seems to be blocking their migration from npm to pnpm.. Still appears to be occurring even with 1.35.10.. With this change, is there actually any speed improvement while using --shrinkwrap-only? @pgonzal @zkochan \nWhy is it necessary to download the tarballs when using this flag? Can we work around it, e.g. with @pgonzal's suggestion:\n\nTo handle @rarkins 's issue, couldn't you simply omit the corgi header if the --shrinkwrap-only option was specified?. > yes, it is still faster than w/o --shrinkwrap-only. Packages are not hardlinked into the project's node_modules. No node_modules is created at all.\n\nRight, but this isn't really the expensive part of the operation. From what I can tell pnpm still downloads the tarballs, stores on disk, unzips, etc. If you have an empty cache this takes almost as long as when not using the flag. In the case where you have a perfectly good cache, it still takes almost nearly as long. If it really isn't significantly faster, why have the flag around at all? It will just be bait for more GitHub issues when it doesn't really do what people are thinking (e.g. have a significant speed improvement). Is there anything creative we can do to make the flag work the way it did before, where it WAS significantly faster?\nFor some context, we wanted to add a flag to Rush that would utilize this PNPM flag. The idea was that someone could quickly (i.e. in 30 seconds) merge master into a branch with an outdated shrinkwrap and generate a new valid shrinkwrap that could be pushed to the CI to be built. In one case, we have a branch that a bot creates that we are trying to get merged quickly. Every time someone updates dependencies (often), it creates a merge conflict on this branch. Many times, we simply need to re-generate the shrinkwrap, as the CI would likely pass once this is updated. However, it takes quite a while to do this on a computer that has an empty pnpm cache or has a slow disk (20 minutes). Sometimes a couple people try running it at the same time and waste their time. Sometimes you are trying to do other things on your disk, but having to do the full install puts a lot of load on your disk. In these cases, we were hoping for a quick, \"fix my shrinkwrap in 30 seconds\" solution (which is what we thought --shrinkwrap-only was).. Doesn't that seem strange? I thought in the initial proposal in #952, you implemented the deduping such that we preferred the most recent parent (i.e. we prefer what react-dom-16-bundle is using), and then went backwards up the dependency graph until we got to the root? Was there an issue with that approach?. @zkochan I think I may have encountered another strange issue that is related.\nIt is described here: https://github.com/Microsoft/web-build-tools/issues/750\nThis post describes the shrinkwrap issue: https://github.com/Microsoft/web-build-tools/issues/750#issuecomment-406747137\nAnd here is a link to how to repro the issue: https://github.com/Microsoft/web-build-tools/issues/750#issuecomment-406724770\nWe can probably work around this using pnpmfile.js, but it is very odd.. @iclanton @pgonzal FYI. @pgonzal @iclanton @zkochan @lynamemi FYI. @zkochan any thoughts on this? We may be able to contribute some effort to this, as it would save us a lot of time in our daily workflow (especially when we need to regenerate a shrinkwrap for 2000+ dependencies after a merge).. Thanks @zkochan ! Apologies, this was pnpm outside of Rush (where we have slightly different behaviors and I know to look in different places).\nI'll re-file this issue with tslint.. ",
    "HarshulSharma000": "Still not able to lock within stale threshold. On setting the --no-lock flag it works shouldn't the default timeout increased further? \nOS: Windows 10\nNode: 9.4.0\nYarn: 1.4.0\nnpm: 4.6.1\nWatchman: 4.9.1. @vjpr In short now all the upcoming release are supposed to work correctly. I hope this fixes the wordwrap not found and other babel missing package errors also.. Actually I install with --no-lock flag since I get the error unable to lock within stale threshold.  I remember I have added a comment to previous issue regarding increasing the threshold timeout. Regarding the issue to be same as #1029 I can't check by installing with a lock file so I'm not sure.. Yes both are returning true \nBy the way something weird is occuring getting this error\nError: Cannot find module 'C:\\Program Files\\nodejs\\pnpm-global\\1\\node_modules\\pnpm\\lib\\bin\\pnpm.js'\ntried deleting npm cache, reinstalling pnpm. But folder is not generating.. @etamponi Still no benefit, tried using shamefully-flatten flag, setting shamefully-flatten=true in .npmrc file. Still it is not able to find modules within node_modules. I tried several times and in one install I found several relinking going on but still not benefit.\nOne more thing I use pnpm with --no-lock flag since it is not able to lock within stale threshold so I tried removing it, switching it's position with --shamefully-flatten yet nothing changed. Although what I noticed was --no-lock operation also somewhat broke when used with --shamefully-flatten because it may give unable to lock error at once but then using same command again might fix it.. Update: Upgraded to pnpm: 1.35 got install completing successfully but watchman(facebook's file watcher) is giving strange, permissions and not able to read sort of erros and also. On trying to on project with expo cli it gives entry file not found error. Yarn and npm seem to work fine.\nAlso added package.json file to text install exp npm package and enter 'exp start' within project directory.. ",
    "msssk": "I'm seeing this with 1.35.1 (Windows 10, Node 8.9.0)\n```\nD:\\dev\\src\\abc>pnpm i\nResolving: total 766, reused 0, downloaded 0\nD:\\dev\\nodejs\\pnpm-global\\1\\node_modules.registry.npmjs.org\\pnpm\\1.35.1\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:186\n    compromised = compromised || function (err) { throw err; };\n                                                  ^\nError: Unable to update lock within the stale threshold\n    at options.fs.utimes (D:\\dev\\nodejs\\pnpm-global\\1\\node_modules.registry.npmjs.org\\pnpm\\1.35.1\\node_modules\\pnpm\\lib\\node_modules\\proper-lockfile\\index.js:108:66)\n    at FSReqWrap.oncomplete (fs.js:135:15)\n```. ",
    "imeredith": "I'm having this issue on macOS with node 6.8.1 and 8.9.4. . ",
    "octogonz": "\n@nickpape-msft sounds great, maybe you could move that logic to a separate package and then we'll be able to substitute proper-lockfile in @pnpm/fs-locker\n\n(FWIW we generally avoid creating tiny NodeJS packages with only 300 lines of code in them.  It's bad for performance.  Also, the more individual dependencies you have, the harder it is to avoid side-by-side versions.). >@pgonzal, @nickpape-msft I know this is a long thread but you might be interested in this feature. This will make pnpm really fast for monorepos, so rush with pnpm will be a lot more performant.\nInteresting.  We've discussed many times getting the TypeScript compiler to run as a service (since spinning up the compiler is a significant chunk of our build times).  We didn't consider running the installs as a service however...\nCan this service perform multiple installs concurrently?  For example, our PR builds happen on a lab machine that can be running up to 4 installs in parallel.. Awesome!  I'll open an issue and see if we can get rush to support this feature.. > We can add a plugin that will convert yarn's resolutions to pnpm's\n\nreadPackage() hook. The plugin would have to be required in the\npnpmfile.js.\n\nSo if I manage 20 Git repositories, I would need to add this converter code to pnpmfile.js for each repository, right?  When we fix a bug in the converter, we would need to somehow propagate the fix to all our repositories, to keep them consistent.  When we do this, if we find that someone else has added their own logic to pnpmfile.js, we would need to merge our update with their customizations.\nThe approach is certainly very flexible, but flexibility has a downside that it makes things more fragmented and complex across your ecosystem.  If 95% of people's problems can be solved with a simple, inflexible config file, that can actually be a superior design.  It's still great to provide script hooks for the 5% of advanced problems, but I'm not sure if that flexibility should be imposed on the other 95% of people.  I suspect this might be why Yarn opted for the config file approach.  Just something to think about.. Maybe I am misunderstanding something about how pnpm plugins work.  How do they get installed after you do \"git clone\"?\nMy group manages repos where hundreds of different developers will come and make changes from time to time, often without much familiarity of how the system is set up.  If their machine isn't configured right, or if they encounter an error message that isn't understandable, they open a ticket and we have to spend time helping them.  Often they get very frustrated, because they are in a hurry to get their fix merged. So we have a strong incentive to make everything as intuitive and consistent as possible. . By \"global\", do you mean external to the Git repo folder?  That would not be a very good approach for us.  We have worked very hard to make our developer experience completely deterministic.  This avoids problems where a person complains about a build error, but when I try it on my laptop, everything works fine for me.  Impossible to investigate without access to the person's computer, very annoying!  Deterministic builds also make it easy to build an old branch from months ago, without running into conflicts with upgraded tools or environmental changes.\nCurrently we do the following things (via the Rush tool):\n\n\nCheck the NodeJS version and report an error if it's not in a small range of stable LTS versions\n\n\nLocally install a specific version of NPM (since different NPM versions have bugs or behavioral differences)\n\n\nConfigure NPM to use a local cache/temp folders, to avoid any influences from other simultaneous builds on the same machine\n\n\nThe NPM registry URL is determined by a local .npmrc committed to Git\n\n\nAll dependencies versions are determined by a shrinkwrap file that is committed to Git\n\n\nPerform the build without relying on any globally installed packages; the PATH environment variable finds all tools in the local node_modules folder controlled by the shrinkwrap file\n\n\nThis approach also minimizes the amount of setup a person has to do before they can build. In the past, we had to give detailed instructions (install gulp, make sure your NPM is the right version, etc).  Today pretty much the only setup step is to add your registry credentials to .npmrc.  Everything else is locked down.  Even when people use Mac/Linux/Windows OS's, the results are very consistent.\nFrom this perspective, it wouldn't make sense to see something like \"/home\" in a config file. :-). > Many configuration files have strict syntax which prohibits documentation. With that out of the way, validation may be hard as well, even if the serialization standard is popular e.g. json/yaml because the semantics are not validated. \nOur config files always have an associated JSON schema.  You can use a library like ajv to validate a config file against its schema, and this will print informative error messages without any effort.  If the config file includes a $schema directive, then VS Code will underline errors, provide autocompletion, and display the docs for each field as you are editing it.\nThis is generally a better experience than expecting users to edit a script.  Scripts are \"powerful\" only in the sense that they can do anything imaginable.  It's like if I wanted to eat lunch, and the restaurant told me: \"Here's our kitchen, here's the fridge, go ahead and cook whatever you want!\"  That is a very powerful and flexible option.  A few people might like that.  If I wanted a really unusual lunch, it's a cool offer.  But most people prefer a simple restaurant menu with a fixed list of options.  Too much flexibility is bad for them.  :-)\n\nI must be missing something. Don't you need to publish a config file then to all your 20 git repositories.\n\nNot really.  In practice each Git repository ends up with its own set of versions (i.e. shrinkwrap file).  As long as there aren't tons of \"bad\" packages, it would be fine to manage them independently.  I was envisioning something like a \"pnpm.json\" config file stored in Git.  If I run pnpm update and then my build is broken due to a bad package, I can add it to the badPackages section in \"pnpm.json\".  (Ideally we could have a central registry where people can report every bad package release they encounter, but that seems like overkill to me.)\n. That seems pretty reasonable to me.. Right, I'm excited about PNPM and have been trying to advocate it within my company. I opened this issue to propose two different options for making the marketing materials more effective. I didn't intend this issue as a criticism. Marketing is important. It's people's first impression when they are considering NPM vs PNPM vs Yarn.. > please file issues in the website repo if you want improvements\nWhere is that repo?. Maybe there could be a configuration switch where you chose between (1) favoring latest version of indirect dependencies, versus the above strategy of (2) favoring compatibility with NPM and minimizing bundle size.\nI would argue that (2) should be the default behavior.  It will make adoption easier. People are very likely to give up if \"pnpm install\" produces a bad result the first time they run it.  It has advantages for NodeJS projects, but it's a pretty unworkable algorithm for the browser environment (where bundle size is crucial).\n\nImagine we are trying to figure out which version of colors to use.\n\nWhen choosing which version of a dependency to install, crawl the dependency graph in reverse (i.e. back to the root).\nIf this package has already taken a dependency on colors that satisfies the version we are looking for, then re-use it.\nIf nothing in the dependency graph has used colors, utilize the latest satisfactory version of colors that has already been installed anywhere in the repository.\n\n\n\nConsider this dependency chain (A is the project, D is the most indirect dependency):\n- A asks for L version 1.2.3  --> gets 1.2.3\n  - B asks for L version ^1.0.0   --> gets 1.2.3\n    - C\n      - D asks for L version ^2.0.0 --> gets 2.3.4\n  - E asks for version 2.0.2 --> gets 2.0.2\nSo your basic principle would be that:\n\nB gets 1.2.3 because its parent asked for something compatible\nD gets version 2.0.3 because nobody in its parent chain asked for anything compatible\n\nD does not get 2.0.2 because E is part of a separate chain of dependencies.\nNPM 5 seems to do more global analysis of the tree than before, but I suspect it still basically works in this way.  Unlike pnpm, its intelligence is limited by the node_modules folder design, which greatly limits the version mappings it can do (without massive duplication of folders).  Might be useful to try this with NPM and Yarn to understand precisely how they handle these cases.\nBut pnpm's current strategy is definitely blocking adoption for our browser projects.. Suppose we use React as our view engine, and it has major versions 15 and 16.\nApp1 has upgraded to version 16. App2 is still stuck on 15 for the time being, because migrating is expensive, and sometimes has to wait for an upstream fix.\nBoth App1 and App2 use a library called React-Utils. The latest version of React-Utils is compatible with both versions 15 and 16 of React. It needs React, but it doesn't care which version, so it expresses the dependency as a SemVer pattern like \">=15.1.0 <17.0.0\".\nWith NPM's strategy, this allows App1 and App2 to use the latest version of React-Utils, but bind it to whatever version of React the app needs. Whereas with PNPM, neither App1 nor App2 will get the version that it's using. Instead, PNPM will always bind React-Utils to the highest compatible version of React. Neither the App1 nor the App2 developer wants this. In fact, it's undesirable for multiple versions of React to be loaded on the same web browser page.\nAs I understand it, pnpm's current recommendation is for people to work around this by coding a hook script. This isn't a very realistic approach, given that everything currently \"just works\" if you use NPM.\nWe have hundreds of projects, and we rely on libraries developed by partner teams in separate repos, who don't known the details of our dependencies. The guy who makes a library like React-Utils doesn't work on App1 or App2, or want to know how they work. He just wants to state which versions of React he is compatible with. We have many intermediary libraries in our ecosystem that work like this.. @nickpape-msft It might be useful to set up a minimal repro that demonstrates the problem.  Then we could compare the version bindings chosen by npm vs pnpm vs yarn.  And we could propose how the pnpm symlinks might be changed to solve the problem (without harming performance), or maybe we could find a different approach.  The problem is real, but the solution we're discussing seems a little vague right now.. Whatever we choose, it should probably be deterministic (even if it just goes in alphabetical order). NPM's nondeterminism is annoying, since  if two people have the same package.json file and do their installs at the same time, they expect to end up in the same state.. PNPM could duplicate E and also B@1, the way peer dependencies are handled.  In some situations this might be the best solution.  But it should not be the default behavior, because it reintroduces the performance penalties @zkochan mentioned.  (Also, it can be counterintuitive:  If B@1 contains a class Button that inherits from a base class in F, then in the debugger you could find two different Button classes with the same library version but with different implementations/behavior. I bet most people assume that's impossible.)  When duplication is really needed, it could be explicitly requested via a custom package.json directive which we can invent later.\nSo, assuming we DON'T duplicate B@1, then the question is simply \"which F wins?\"  NPM's answer is \"whoever got installed first,\" which is nondeterministic with incremental installs.  Some possible deterministic answers:\nWhich F wins?\n1. Whichever F appears earliest in a breadth-first alphabetical tree traversal.\n2. Whichever F has largest compatible version number\n@zkochan do you have a preference?  If not, maybe we could just try something and evolve it over time?  These edge cases are interesting, but they aren't crucial for us.  Whereas the basic issue that Nick outlined is preventing us from adopting PNPM at all in our main repo.  We'd like to get that resolved quickly.. What is the perf problem? Is it during an incremental install (e.g. adding a new package to an existing node_modules folder), that you need to scan the entire tree again?\nOr is it during a clean install, that you were trying to process HTTP responses as fast as they arrive, but now you need to wait for alphabetical order, so e.g. if A takes a long time then B, C, and D all get blocked?. But we're only talking about fetching the package manifest, right? (The REST call that retrieves all the versions and their package.json data.) Not fetching or installing the tarball.. Would it be much work to measure the performance cost and see if it is as significant as you assume?\nI understand where you are coming from, however it seems really strange that if my registry is static, and I do two clean installs, that I could end up with two different version mappings due to network timings. I want my installs to be fast, but I don't want them to be a crapshoot. :-) In practice it probably is not very noticeable most of the time, but random algorithms are an absolute pain to diagnose when something goes wrong. (For example, we now use SQL hints to completely disable the query planner in production, because the speed gain wasn't worth the headache of dealing with a small percentage of bad query plans.)\nOr maybe this could be a PNPM option?. Thanks. I will think about it also. I have a suspicion that there may be some clever algorithm that would make it deterministic without slowing down too much, based on the suspicion that the cases where actual differences occur are uncommon. Like maybe you could fetch based on an optimistic assumption and backtrack in the rare case where it is wrong. Something like that.... Thanks a ton! We on vacation this week, but we\"ll definitely give it a try when we get back and let you know the result. Happy holidays!. @nickpape-msft FYI. Awesome!  Will this also eliminate the dependency on request?  I believe the root cause is a design flaw in the request library's handling of HTTP redirects.  It's not specific to npm-registry-client's usage (although race conditions often do require certain circumstantial factors).. Awesome!. Awesome!  Thanks a ton!. Is there a formal spec or manipulation library for your shrinkwrap.yaml file format? We already have code (e.g. PnpmShrinkwrapFile.ts) that parses this file.\nWe are also planning to introduce code that modifies shrinkwrap.yaml.  The idea is that whenever someone needs to commit a change to this file, it's  a potential merge conflict with others.  In trivial cases where someone is adding a dependency on a library that is already widely used within the monorepo, Rush can simply inject the missing entry to shrinkwrap.yaml during installation, since the outcome will still be fully deterministic.. Rush has similar code:\nhttps://github.com/Microsoft/web-build-tools/blob/7930ea56efe8f8d9a91aebf359025432aed44d94/apps/rush-lib/src/utilities/Utilities.ts#L110\nFYI I encountered this issue mostly when trying to delete a file/folder and immediately recreate a new file/folder with the same name.  Whereas if you reuse and existing folder (or overwrite an existing file), the problem did not seem to occur.  This is better because it avoids the delay entirely.\nI wonder if there is an officially documented best practice somewhere for coexisting with virus scanners.. Thanks a ton for the quick fix! \ud83d\ude03 I just tested 1.31.6 and all operations appear to be working fine. We'll have some other people do more in depth testing on Monday, but so far it looks good! I really appreciate all your help investigating these weird edge cases.. Yes, we are good.  We've done over 1,000 installations since then, and so far nobody has reported any problems.  :-)  Thanks again!. @nickpape-msft FYI. Cool, thanks for the quick fix!  We'll give it a try! :-). This is how the log file looks using pnpm 1.32.1:\n2018-02-12T20:34:21.3225214Z Running \"pnpm install\" in C:\\agent\\1\\_work\\47\\s\\common\\temp\n2018-02-12T20:34:21.3225214Z \n2018-02-12T20:34:24.0727045Z readPackage hook is declared. Manifests of dependencies might get overridden\n2018-02-12T20:34:25.2732584Z \u0393\u00c7\u00ebWARN\u0393\u00c7\u00eb using --no-lock I sure hope you know what you are doing\n2018-02-12T20:34:25.7107820Z \u0393\u00c7\u00ebWARN\u0393\u00c7\u00eb deprecated @types/adal@1.0.27: '@types/adal' is now '@types/adal-angular'\n2018-02-12T20:34:25.7107820Z \u0393\u00c7\u00ebWARN\u0393\u00c7\u00eb deprecated es6-collections@0.5.6: not actively maintained anymore\n2018-02-12T20:34:25.7107820Z \u0393\u00c7\u00ebWARN\u0393\u00c7\u00eb deprecated gulp-util@3.0.8: gulp-util is deprecated - replace it, following the guidelines at https://medium.com/gulpjs/gulp-util-ca3b1f9f9ac5\n2018-02-12T20:34:29.5548024Z Resolving: total 2096, reused 0, downloaded 0\n2018-02-12T20:34:29.5548024Z \u0393\u00c7\u00ebWARN\u0393\u00c7\u00eb @microsoft/gulp-core-build-karma > karma > chokidar: Skipping failed optional dependency fsevents@1.1.3\n2018-02-12T20:34:29.5548024Z \u0393\u00c7\u00ebWARN\u0393\u00c7\u00eb @microsoft/gulp-core-build > jest-cli > jest-haste-map > sane: Skipping failed optional dependency fsevents@1.1.3\n2018-02-12T20:34:29.5548024Z Resolving: total 2096, reused 0, downloaded 0\n2018-02-12T20:34:29.5548024Z Resolving: total 2096, reused 0, downloaded 0\n2018-02-12T20:34:29.5548024Z Resolving: total 2096, reused 0, downloaded 0\n2018-02-12T20:34:31.2111448Z Resolving: total 2096, reused 0, downloaded 0\n2018-02-12T20:34:31.2111448Z Resolving: total 2096, reused 0, downloaded 0\n2018-02-12T20:34:31.4455516Z Packages: +2057\n2018-02-12T20:34:31.4455516Z ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n2018-02-12T20:34:32.0711414Z Resolving: total 2096, reused 0, downloaded 0\n2018-02-12T20:34:33.0581686Z Resolving: total 2096, reused 0, downloaded 0\n2018-02-12T20:34:34.0582290Z Resolving: total 2096, reused 0, downloaded 9\n2018-02-12T20:34:35.0582928Z Resolving: total 2096, reused 0, downloaded 15\n2018-02-12T20:34:36.0589403Z Resolving: total 2096, reused 0, downloaded 17\n2018-02-12T20:34:37.0759584Z Resolving: total 2096, reused 0, downloaded 18\n2018-02-12T20:34:38.0608619Z Resolving: total 2096, reused 0, downloaded 19\n2018-02-12T20:34:39.0609330Z Resolving: total 2096, reused 0, downloaded 22\n2018-02-12T20:34:40.0609827Z Resolving: total 2096, reused 0, downloaded 25\n2018-02-12T20:34:41.0777972Z Resolving: total 2096, reused 0, downloaded 25\n2018-02-12T20:34:42.0622465Z Resolving: total 2096, reused 0, downloaded 27\n2018-02-12T20:34:43.0623113Z Resolving: total 2096, reused 0, downloaded 31\n2018-02-12T20:34:44.0722958Z Resolving: total 2096, reused 0, downloaded 31\n2018-02-12T20:34:45.0734421Z Resolving: total 2096, reused 0, downloaded 36\n2018-02-12T20:34:46.0734955Z Resolving: total 2096, reused 0, downloaded 45\n2018-02-12T20:34:47.0778032Z Resolving: total 2096, reused 0, downloaded 52\n2018-02-12T20:34:48.0749203Z Resolving: total 2096, reused 0, downloaded 52\n2018-02-12T20:34:49.0593496Z Resolving: total 2096, reused 0, downloaded 64\n2018-02-12T20:34:50.0594112Z Resolving: total 2096, reused 0, downloaded 69\n2018-02-12T20:34:51.0594761Z Resolving: total 2096, reused 0, downloaded 79\n2018-02-12T20:34:52.0595443Z Resolving: total 2096, reused 0, downloaded 83\n2018-02-12T20:34:53.0752277Z Resolving: total 2096, reused 0, downloaded 89\n2018-02-12T20:34:54.0596749Z Resolving: total 2096, reused 0, downloaded 90\n2018-02-12T20:34:55.0766902Z Resolving: total 2096, reused 0, downloaded 94\n2018-02-12T20:34:56.0611052Z Resolving: total 2096, reused 0, downloaded 98\n2018-02-12T20:34:57.0611683Z Resolving: total 2096, reused 0, downloaded 100\n2018-02-12T20:34:58.0612365Z Resolving: total 2096, reused 0, downloaded 100\n2018-02-12T20:34:59.0613196Z Resolving: total 2096, reused 0, downloaded 108\n2018-02-12T20:35:00.0770180Z Resolving: total 2096, reused 0, downloaded 116\n2018-02-12T20:35:01.0671833Z Resolving: total 2096, reused 0, downloaded 121\n2018-02-12T20:35:02.0672518Z Resolving: total 2096, reused 0, downloaded 125\n2018-02-12T20:35:03.0673139Z Resolving: total 2096, reused 0, downloaded 134\n2018-02-12T20:35:04.0675199Z Resolving: total 2096, reused 0, downloaded 144\n2018-02-12T20:35:05.0674430Z Resolving: total 2096, reused 0, downloaded 152\n2018-02-12T20:35:06.0680705Z Resolving: total 2096, reused 0, downloaded 154\n2018-02-12T20:35:07.0681214Z Resolving: total 2096, reused 0, downloaded 157\n2018-02-12T20:35:08.0682242Z Resolving: total 2096, reused 0, downloaded 160\n2018-02-12T20:35:09.0685572Z Resolving: total 2096, reused 0, downloaded 162\n2018-02-12T20:35:10.0686251Z Resolving: total 2096, reused 0, downloaded 165\n2018-02-12T20:35:11.0687776Z Resolving: total 2096, reused 0, downloaded 166\n2018-02-12T20:35:12.0700095Z Resolving: total 2096, reused 0, downloaded 166\n2018-02-12T20:35:13.0734763Z Resolving: total 2096, reused 0, downloaded 166\n2018-02-12T20:35:14.0778672Z Resolving: total 2096, reused 0, downloaded 166\n2018-02-12T20:35:15.0630589Z Resolving: total 2096, reused 0, downloaded 170\n2018-02-12T20:35:16.0644424Z Resolving: total 2096, reused 0, downloaded 175\n2018-02-12T20:35:17.0677254Z Resolving: total 2096, reused 0, downloaded 182\n2018-02-12T20:35:18.0677961Z Resolving: total 2096, reused 0, downloaded 182\n2018-02-12T20:35:19.0687858Z Resolving: total 2096, reused 0, downloaded 190\n2018-02-12T20:35:20.0697681Z Resolving: total 2096, reused 0, downloaded 195\n2018-02-12T20:35:21.0698283Z Resolving: total 2096, reused 0, downloaded 196\n2018-02-12T20:35:22.0591598Z Resolving: total 2096, reused 0, downloaded 201\n2018-02-12T20:35:23.0592228Z Resolving: total 2096, reused 0, downloaded 204\n2018-02-12T20:35:24.0605378Z Resolving: total 2096, reused 0, downloaded 233\n2018-02-12T20:35:25.0761186Z Resolving: total 2096, reused 0, downloaded 312\n2018-02-12T20:35:26.0640388Z Resolving: total 2096, reused 0, downloaded 319\n2018-02-12T20:35:27.0827824Z Resolving: total 2096, reused 0, downloaded 329\n2018-02-12T20:35:28.0672157Z Resolving: total 2096, reused 0, downloaded 344\n2018-02-12T20:35:29.0672705Z Resolving: total 2096, reused 0, downloaded 348\n2018-02-12T20:35:30.0673455Z Resolving: total 2096, reused 0, downloaded 356\n2018-02-12T20:35:31.0673992Z Resolving: total 2096, reused 0, downloaded 369\n2018-02-12T20:35:32.0687391Z Resolving: total 2096, reused 0, downloaded 372\n2018-02-12T20:35:33.0703125Z Resolving: total 2096, reused 0, downloaded 380\n2018-02-12T20:35:34.0703861Z Resolving: total 2096, reused 0, downloaded 388\n2018-02-12T20:35:35.0723529Z Resolving: total 2096, reused 0, downloaded 393\n2018-02-12T20:35:36.0568214Z Resolving: total 2096, reused 0, downloaded 401\n2018-02-12T20:35:37.0568664Z Resolving: total 2096, reused 0, downloaded 403\n2018-02-12T20:35:38.0725541Z Resolving: total 2096, reused 0, downloaded 409\n2018-02-12T20:35:39.0726085Z Resolving: total 2096, reused 0, downloaded 410\n2018-02-12T20:35:40.0570793Z Resolving: total 2096, reused 0, downloaded 416\n2018-02-12T20:35:41.0571328Z Resolving: total 2096, reused 0, downloaded 423\n2018-02-12T20:35:42.0595537Z Resolving: total 2096, reused 0, downloaded 433\n2018-02-12T20:35:43.0634866Z Resolving: total 2096, reused 0, downloaded 443\n2018-02-12T20:35:44.0635064Z Resolving: total 2096, reused 0, downloaded 455\n2018-02-12T20:35:45.0635552Z Resolving: total 2096, reused 0, downloaded 468\n2018-02-12T20:35:46.0636277Z Resolving: total 2096, reused 0, downloaded 479\n2018-02-12T20:35:47.0636791Z Resolving: total 2096, reused 0, downloaded 490\n2018-02-12T20:35:48.0638566Z Resolving: total 2096, reused 0, downloaded 503\n2018-02-12T20:35:49.0638115Z Resolving: total 2096, reused 0, downloaded 514\n2018-02-12T20:35:50.0640427Z Resolving: total 2096, reused 0, downloaded 533\n2018-02-12T20:35:51.0639442Z Resolving: total 2096, reused 0, downloaded 549\n2018-02-12T20:35:52.0642954Z Resolving: total 2096, reused 0, downloaded 563\n2018-02-12T20:35:53.0651666Z Resolving: total 2096, reused 0, downloaded 581\n2018-02-12T20:35:54.0653324Z Resolving: total 2096, reused 0, downloaded 585\n2018-02-12T20:35:55.0653000Z Resolving: total 2096, reused 0, downloaded 604\n2018-02-12T20:35:56.0653233Z Resolving: total 2096, reused 0, downloaded 626\n2018-02-12T20:35:57.0654107Z Resolving: total 2096, reused 0, downloaded 647\n2018-02-12T20:35:58.0654693Z Resolving: total 2096, reused 0, downloaded 672\n2018-02-12T20:35:59.0663009Z Resolving: total 2096, reused 0, downloaded 681\n2018-02-12T20:36:00.0663559Z Resolving: total 2096, reused 0, downloaded 701\n2018-02-12T20:36:01.0664198Z Resolving: total 2096, reused 0, downloaded 730\n2018-02-12T20:36:02.0664887Z Resolving: total 2096, reused 0, downloaded 754\n2018-02-12T20:36:03.0665492Z Resolving: total 2096, reused 0, downloaded 778\n2018-02-12T20:36:04.0670954Z Resolving: total 2096, reused 0, downloaded 799\n2018-02-12T20:36:05.0671473Z Resolving: total 2096, reused 0, downloaded 814\n2018-02-12T20:36:06.0685758Z Resolving: total 2096, reused 0, downloaded 835\n2018-02-12T20:36:07.0686267Z Resolving: total 2096, reused 0, downloaded 849\n2018-02-12T20:36:08.0687259Z Resolving: total 2096, reused 0, downloaded 865\n2018-02-12T20:36:09.0687581Z Resolving: total 2096, reused 0, downloaded 880\n2018-02-12T20:36:10.0688182Z Resolving: total 2096, reused 0, downloaded 897\n2018-02-12T20:36:11.0736471Z Resolving: total 2096, reused 0, downloaded 906\n2018-02-12T20:36:12.0689501Z Resolving: total 2096, reused 0, downloaded 912\n2018-02-12T20:36:13.0690114Z Resolving: total 2096, reused 0, downloaded 929\n2018-02-12T20:36:14.0690902Z Resolving: total 2096, reused 0, downloaded 944\n2018-02-12T20:36:15.0691612Z Resolving: total 2096, reused 0, downloaded 959\n2018-02-12T20:36:16.0692059Z Resolving: total 2096, reused 0, downloaded 978\n2018-02-12T20:36:17.0692939Z Resolving: total 2096, reused 0, downloaded 997\n2018-02-12T20:36:18.0849555Z Resolving: total 2096, reused 0, downloaded 1015\n2018-02-12T20:36:19.0693958Z Resolving: total 2096, reused 0, downloaded 1037\n2018-02-12T20:36:20.0694644Z Resolving: total 2096, reused 0, downloaded 1055\n2018-02-12T20:36:21.0708911Z Resolving: total 2096, reused 0, downloaded 1067\n2018-02-12T20:36:22.0709665Z Resolving: total 2096, reused 0, downloaded 1077\n2018-02-12T20:36:23.0595738Z Resolving: total 2096, reused 0, downloaded 1089\n2018-02-12T20:36:24.0596162Z Resolving: total 2096, reused 0, downloaded 1105\n2018-02-12T20:36:25.0596991Z Resolving: total 2096, reused 0, downloaded 1123\n2018-02-12T20:36:26.0622582Z Resolving: total 2096, reused 0, downloaded 1124\n2018-02-12T20:36:27.1404474Z Resolving: total 2096, reused 0, downloaded 1147\n2018-02-12T20:36:28.6718003Z Resolving: total 2096, reused 0, downloaded 1148\n2018-02-12T20:36:29.0624502Z Resolving: total 2096, reused 0, downloaded 1148\n2018-02-12T20:36:30.0790677Z Resolving: total 2096, reused 0, downloaded 1148\n2018-02-12T20:36:31.0758039Z Resolving: total 2096, reused 0, downloaded 1148\n2018-02-12T20:36:32.0703612Z Resolving: total 2096, reused 0, downloaded 1148\n2018-02-12T20:36:33.0652088Z Resolving: total 2096, reused 0, downloaded 1148\n2018-02-12T20:36:34.0705534Z Resolving: total 2096, reused 0, downloaded 1159\n2018-02-12T20:36:35.0706226Z Resolving: total 2096, reused 0, downloaded 1186\n2018-02-12T20:36:36.0706870Z Resolving: total 2096, reused 0, downloaded 1208\n2018-02-12T20:36:37.0707411Z Resolving: total 2096, reused 0, downloaded 1218\n2018-02-12T20:36:38.0711227Z Resolving: total 2096, reused 0, downloaded 1244\n2018-02-12T20:36:39.0650791Z Resolving: total 2096, reused 0, downloaded 1259\n2018-02-12T20:36:40.0651421Z Resolving: total 2096, reused 0, downloaded 1262\n2018-02-12T20:36:41.0626986Z Resolving: total 2096, reused 0, downloaded 1276\n2018-02-12T20:36:42.0627852Z Resolving: total 2096, reused 0, downloaded 1297\n2018-02-12T20:36:43.0628176Z Resolving: total 2096, reused 0, downloaded 1320\n2018-02-12T20:36:44.0629165Z Resolving: total 2096, reused 0, downloaded 1344\n2018-02-12T20:36:45.0941967Z Resolving: total 2096, reused 0, downloaded 1366\n2018-02-12T20:36:46.0630430Z Resolving: total 2096, reused 0, downloaded 1395\n2018-02-12T20:36:47.0631341Z Resolving: total 2096, reused 0, downloaded 1418\n2018-02-12T20:36:48.0631494Z Resolving: total 2096, reused 0, downloaded 1443\n2018-02-12T20:36:49.0634065Z Resolving: total 2096, reused 0, downloaded 1472\n2018-02-12T20:36:50.0634614Z Resolving: total 2096, reused 0, downloaded 1502\n2018-02-12T20:36:51.0635277Z Resolving: total 2096, reused 0, downloaded 1532\n2018-02-12T20:36:52.0635996Z Resolving: total 2096, reused 0, downloaded 1559\n2018-02-12T20:36:53.0636870Z Resolving: total 2096, reused 0, downloaded 1590\n2018-02-12T20:36:54.0637198Z Resolving: total 2096, reused 0, downloaded 1617\n2018-02-12T20:36:55.0637833Z Resolving: total 2096, reused 0, downloaded 1641\n2018-02-12T20:36:56.0638521Z Resolving: total 2096, reused 0, downloaded 1671\n2018-02-12T20:36:57.0639074Z Resolving: total 2096, reused 0, downloaded 1694\n2018-02-12T20:36:58.0639738Z Resolving: total 2096, reused 0, downloaded 1723\n2018-02-12T20:36:59.0640370Z Resolving: total 2096, reused 0, downloaded 1751\n2018-02-12T20:37:00.0641016Z Resolving: total 2096, reused 0, downloaded 1782\n2018-02-12T20:37:01.0658188Z Resolving: total 2096, reused 0, downloaded 1807\n2018-02-12T20:37:02.0659177Z Resolving: total 2096, reused 0, downloaded 1836\n2018-02-12T20:37:03.0661485Z Resolving: total 2096, reused 0, downloaded 1863\n2018-02-12T20:37:04.0660485Z Resolving: total 2096, reused 0, downloaded 1892\n2018-02-12T20:37:05.0660785Z Resolving: total 2096, reused 0, downloaded 1923\n2018-02-12T20:37:06.0661328Z Resolving: total 2096, reused 0, downloaded 1953\n2018-02-12T20:37:07.0662398Z Resolving: total 2096, reused 0, downloaded 1987\n2018-02-12T20:37:08.0662933Z Resolving: total 2096, reused 0, downloaded 2006\n2018-02-12T20:37:09.0663285Z Resolving: total 2096, reused 0, downloaded 2025\n2018-02-12T20:37:10.2539116Z Resolving: total 2096, reused 0, downloaded 2034\n2018-02-12T20:37:11.2852299Z Resolving: total 2096, reused 0, downloaded 2034\n2018-02-12T20:37:12.0613312Z Resolving: total 2096, reused 0, downloaded 2034\n2018-02-12T20:37:13.0613964Z Resolving: total 2096, reused 0, downloaded 2034\n2018-02-12T20:37:14.0614258Z Resolving: total 2096, reused 0, downloaded 2034\n2018-02-12T20:37:15.0614890Z Resolving: total 2096, reused 0, downloaded 2034\n2018-02-12T20:37:16.0593856Z Resolving: total 2096, reused 0, downloaded 2051\n2018-02-12T20:37:17.0594270Z Resolving: total 2096, reused 0, downloaded 2075\n2018-02-12T20:37:18.0594791Z Resolving: total 2096, reused 0, downloaded 2092\n2018-02-12T20:37:19.0595472Z Resolving: total 2096, reused 0, downloaded 2095\n2018-02-12T20:37:20.0649358Z Resolving: total 2096, reused 0, downloaded 2095\n2018-02-12T20:37:21.0624980Z Resolving: total 2096, reused 0, downloaded 2095\n2018-02-12T20:37:22.0569804Z Resolving: total 2096, reused 0, downloaded 2095\n2018-02-12T20:37:23.0674977Z Resolving: total 2096, reused 0, downloaded 2095\n2018-02-12T20:37:24.0573041Z Resolving: total 2096, reused 0, downloaded 2095\n2018-02-12T20:37:25.0684943Z Resolving: total 2096, reused 0, downloaded 2095\n2018-02-12T20:37:26.0679106Z Resolving: total 2096, reused 0, downloaded 2095\n2018-02-12T20:37:27.0673622Z Resolving: total 2096, reused 0, downloaded 2095\n2018-02-12T20:37:28.0569590Z Resolving: total 2096, reused 0, downloaded 2095\n2018-02-12T20:37:29.0688232Z Resolving: total 2096, reused 0, downloaded 2095\n2018-02-12T20:37:30.1029179Z Resolving: total 2096, reused 0, downloaded 2096, done\n2018-02-12T20:37:31.0691146Z Resolving: total 2096, reused 0, downloaded 2096, done\n2018-02-12T20:37:32.0608788Z Resolving: total 2096, reused 0, downloaded 2096, done\n2018-02-12T20:37:33.0609267Z Resolving: total 2096, reused 0, downloaded 2096, done\n2018-02-12T20:37:34.0610157Z Resolving: total 2096, reused 0, downloaded 2096, done\n2018-02-12T20:37:35.0610531Z Resolving: total 2096, reused 0, downloaded 2096, done\n2018-02-12T20:37:36.0611134Z Resolving: total 2096, reused 0, downloaded 2096, done\n2018-02-12T20:37:37.0632536Z Resolving: total 2096, reused 0, downloaded 2096, done\n2018-02-12T20:37:38.0632849Z Resolving: total 2096, reused 0, downloaded 2096, done\n2018-02-12T20:37:39.0790118Z Resolving: total 2096, reused 0, downloaded 2096, done\n2018-02-12T20:37:40.0634134Z Resolving: total 2096, reused 0, downloaded 2096, done\n2018-02-12T20:37:41.0791168Z Resolving: total 2096, reused 0, downloaded 2096, done\n2018-02-12T20:37:42.0791794Z Resolving: total 2096, reused 0, downloaded 2096, done\n2018-02-12T20:37:42.4386080Z Resolving: total 2096, reused 0, downloaded 2096, done\n2018-02-12T20:37:45.7356546Z Running postinstall for onedrive.pkgs.visualstudio.com/uglifyjs-webpack-plugin/0.4.6, done\n\nThough I noticed that the last message is repeated several times \ud83d\ude1e I'll have to fix that\n\nSure, that makes sense.  But I'm already pretty happy with the current solution.  Thanks again for implementing this!. @nickpape-msft FYI. I also confirmed that this issue is not specific to a particular release of @pnpm/bundled.  I get the same failure for @pnpm/bundled@1.20.0 and @pnpm/bundled@1.32.0. Maybe you could take a direct dependency on drivelist using a specific version number?. > Yarn has a different approach. It bundles its sources with webpack. That might be a good solution as well\n@iclanton FYI... by coincidence we were were talking about webpacking tools today and wondering if it might be faster.. Just curious -- why does PNPM need to enumerate the disks?. @nickpape-msft @zkochan FYI. If I remember right, @adisbladis was proposing something similar to add integrity checks for tarballs obtained from GitHub. If there is a separate issue for that, maybe they can be combined.. Makes sense to me. I'm not even sure it's necessary to track integrity for local files. For example if we regenerate a tarball with different but equivalent contents, should that really require churning the shrinkwrap file in Git?\nThis is related to my other philosophical question about the goal of shrinkwrap files beyond ensuring that installs produce deterministic outcomes.. What is the problem we are solving? Integrity is for detecting corrupted downloads or a server that returns inconsistent output, which would be a concern for determinism or security. My point was just that these concerns may not apply to a local file, because local build operations usually are trusted and deterministic. (Although I'm not sure how other people are using tarballs - maybe their scenario is different.). Cool, let me know when you publish something, and I'll try it out.  There is a Rush improvement waiting for this fix.. Interesting, so if the package.json file have changed, then pnpm will silently update the shrinkwrap.yaml file?  + @nickpape-msft FYI \nI guess that makes sense, but for Rush we definitely would want this --frozen-shrinkwrap behavior since our shrinkwrap.yaml is a generated copy.  @zkochan should we track that feature as a separate issue?\nFor issue #1054 I would be happy if PNPM simply ignored integrity completely for tarballs, or whatever's easiest to make it notice the changes.. Awesome, thanks! \ud83d\ude04 . Confirmed that it works as expected.  Thanks again!. @nickpape-msft FYI. > The current format of shrinkwrap.yaml has nothing extra, only the things that are needed to create node_modules w/o the resolution stage. So I don't think it can be minimized further.\nI didn't understand this comment.  Aside from a minor bit of avoidable networking nondeterminism, the node_modules folder is basically a function of whatever's in your package.json files, plus whatever's in your NPM registry, right?  The package.json files are already in Git.  So theoretically the variables we need to lock down are the matching versions in the NPM registry.. BTW on this page I saw a note:\n\nNote that, much like git hooks, the .git/config file can't be checked in/shared through the repository. A common way of distributing merge drivers is to check the configuration file in elsewhere and provide a script to copy it to .git/config. In this repository, the merge driver is configured in the .gitconfig file, which is copied to .git/config by the mergetool-setup.sh script.\n\nThis seems like it would complicate the setup for people who want to enlist in our monorepo.. This problem is turning into a significant source of pain for us.  On average our shrinkwrap.yaml file now changes a minimum of 3 times per day.  This doesn't sound like a lot, but if those 3 people are trying to merge their PRs around the same time, it can play out like this:\n\nPerson 1 and 2 create PRs that affect shrinkwrap\nPerson 3 merges a PR that churns shrinkwrap in master\nPerson 1 and 2's build complete (takes 45 minutes), then they see a merge conflict - uh oh!\nBoth people have to redo their shrinkwrap changes, and restart their builds\nPerson 1's build finishes first, so they merge their PR\nNow Person 2's build has another merge conflict, so they redo and restart.  It's 5pm so they go home\nAt 3am Person 4 creates and merges a PR in China timezone that changes shrinkwrap\nPerson 2 comes back in the next morning -- another merge conflict!\nPerson 2 complains loudly to everyone that it sucks to work in our repo\n\nLately this cycle seems to be recurring several times per week.\n\nSo if there is foo and bar, both of which have \"qar\": \"^1.0.0\", then qar can be resolved differently for foo and bar, that's why shrinkwrap.yaml has to map the resolved dependencies for each package:\n\nSure, but as long as that decision is made deterministically, it doesn't need to be stored.  In other words, as long as Person 1 and Person 2 are making unrelated changes, in principle they aren't actually \"conflicting\".  (Whereas if Person 1 tried to upgrade a library, but Person 2 tried to downgrade it, then that's a legitimate merge conflict, and no one would blame the tooling.)\nThe \"qar\" merge conflict arises only because shrinkwrap.yaml is storing the detailed output of the PNPM algorithm, instead of storing a minimal set of inputs.  If I understand right, the reason is that the PNPM version selection algorithm is potentially nondeterministic about certain choices that it makes.  (Even if this nondeterminism provides a 10% speed gain for installs, we'd be willing to forgo it if that's what's needed to make Person 2's life happier.)\nCC @lahuey. Awesome, thanks!  We'll give it a try and provide some feedback.. I read up on Git merge drivers this weekend.  In order to use this, we would need to introduce setup scripts that enable the merge driver for each person's enlistments.  We would also need to configure the lab machines to install and enable the merge driver before they perform the merge (e.g. for a PR build).  This work would have some benefits (e.g. it would also give us a way to use Git hooks, which maybe would be useful), but it's a nontrivial cost.  Currently VSTS does the merge at the start of the build definition, so we would need to setup some command that installs and configures the merge driver beforehand.  Since it's independent of Git, this setup would need to be compatible with any branch for any point in the Git history.\nI'm also wondering about the implementation of the PNPM driver.  If I understand right, if the packages entries differ, the current algorithm just overwrites the value, choosing whichever YAML file has less package entries. (?)  I'm unsure whether this would always give an internally consistent result.  If not, it's unclear what an \"ideal\" algorithm should do (assuming that it cannot query the NPM registry).\nAnyway, I'll see what's involved to give this a try.  If the algorithm doesn't work reliably, we will find out very quickly.  Our current shrinkwrap.yaml is getting a lot of activity throughout the day.  We now have a steady influx of new projects coming into our monorepo every week.  This has caused us to start thinking a lot more deeply about scalability.. BTW a third possible approach occurred to me:  Suppose that we treated shrinkwrap.yaml as a cache file that gets updated periodically by a bot.  The rush install command can already detect whether a shrinkwrap.yaml file is usable or not.  If not, we would ignore the one from Git, and instead use a temporary locally generated one.  (This would be slower because it cannot benefit from --frozen-shrinkwrap, but that would only affect people in PR branches that are changing versions.)\nThe obvious problem with this approach is  nondeterminism.  However, suppose that PNPM had a hook that could say \"when querying the NPM registry, ignore any package versions that were published after timestamp X\".  Rush would determine X by looking at the Git commit times (e.g. the maximum commit timestamp for each of the input package.json files).  Since NPM registries don't allow a version to be republished, and people almost never unpublish a version, the behavior would be pretty deterministic.  (It also assumes that pnpm install is determinstic for a given registry state.)  \nA downside of this approach is that we would lose the integrity checks.  An upside is that our Git history wouldn't be flooded with constant changes to a huge YAML file. . We can't figure out an easy way to enable a merge driver in our lab. Generally people seem to have a negative reaction to this design, because they don't like the idea of tampering with the behavior a foundational and already complex system such as Git.\n@zkochan what would be involved for the other approach? Today is there a way to tell \"pnpm install\" to \"ignore any version from the registry that was published after timestamp X?\" If not, would it be a nontrivial work item?\nI believe that would give Rush the building block it needs to move shrinkwrap changes to be bot-managed operations on the master branch, rather than something people have to deal with on their PR branches.. @nickpape-msft @iclanton. There are several conflicting requirements that this idea has to satisfy:\n\n\nMinimal upgrades - If I upgrade B from ^1.2.3 to ^1.3.0, this should avoid upgrading other libraries that are unrelated to this change.  This is what requires shrinkwrap.yaml to track version data for each branch of the tree.  (This seems obvious, but originally Rush would always upgrade everything at once -- that's why most of the shrinkwrap.yaml file format seemed redundant when I started this thread.)\n\n\nNo merge conflicts - If we can't use a merge driver, then shrinkwrap.yaml could become a painful mutex that allows only one PR to change package.json at a time.\n\n\nDeterminism - When someone installs a given Git hash, they must always get the same install outcome.  This is a fundamental axiom that we can't give up.\n\n\nThinking about this more, a naive timestamp-based would not fully solve requirement 1.  Counterexample:\n\nAt 1pm the bot writes a new shrinkwrap.yaml.\nAt 2pm I create a PR branch and change A from ~1.2.3 to ~1.3.0 which upgrades A from 1.2.4 to 1.3.1 in my local temp/shrinkwrap.yaml (which is not tracked by Git)\nAt 3pm someone publishes a new A 1.3.2.\nAt 4pm another PR branch changes B from ~5.5.0 to ~5.6.0 which upgrades B to 5.6.1 in their local temp/shrinkwrap.yaml.  (A is held back to 1.2.4 by the minimal upgrade, since their branch can't see my change.)\nAt 5pm someone publishes a new A 1.3.3 and B 5.6.2.\nAt 6pm both PRs merge into master.  When someone installs this, their temp/shrinkwrap.yaml will be based on the timestamp from 4pm (the max modification time for all package.json files).  This means they will get A 1.3.2 and B 5.6.1.\nAt 7pm the bot merges this state back into the official shrinkwrap.yaml for everyone.\n\nThis is counterintuitive because the final merge upgrades us to A 1.3.2 which was not tested in either branch.  It could cause a build break in master.  The idea could be refined by remembering multiple timestamps, but it gets a little complicated...\nBut since the PR builds always use a hot merge with the latest master, perhaps these breaks would be very rare in practice.  If it's our best option, it might be a tolerable way to avoid merge conflicts.  The implementation seems fairly straightforward (since Rush is already managing a temp/shrinkwrap.yaml).. That would definitely cause merge conflicts for everyone's PR branches.. @zkochan this is the issue I mentioned on Gitter last week. This is a cosmetic/polish issue.  If it's not a simple 5 minute fix, don't bother.  :-). That should be possible to determine from the syntax of the URL, right?. On this same topic, we recently had reports about this warning:\n\nIn our repo, these instructions don't work because the globally installed pnpm is not used.  Instead the pnpm version is determined by a setting in rush.json.  \nCan this warning be suppressed via pnpmfile.js?\n@sboylems. > @pgonzal, you could run pnpm with the --no-update-notifier flag as @vjpr discovered in this issue: #1122\nGreat, thanks very much!. [adding this to both issues for reference]\nHere are examples of genuine problems that were being ignored by everybody because pnpm treats them as warnings:\n\nWARN @ms/plannerweb-ui: @ms/react-advanced-grid@8.1.5 requires a peer of moment@^2.22.0 but version 2.21.0 was installed.\nWARN @ms/searchux-sphome@36.0.3 requires a peer of react-router@>=2.6.1 but none was installed.\nWARN Cannot find file at C:\\agent\\3_work\\1\\s\\common\\temp\\node_modules\\@rush-temp\\react-bundle although it was listed by readdir\nWARN Cannot find file at C:\\agent\\3_work\\1\\s\\common\\temp\\node_modules\\@rush-temp\\react-dom-bundle although it was listed by readdir\n\nHere are some example warnings about situations that are 100% intentional.  We will have no plans to fix them.  These false alarms lead people to never take any warnings seriously:\n\nWARN\u2009 using --no-lock I sure hope you know what you are doing\nWARN\u2009 webpack > watchpack > chokidar: Skipping failed optional dependency fsevents@1.2.0\nWARN\u2009 deprecated gulp-util@3.0.8: gulp-util is deprecated - replace it, following the guidelines at https://medium.com/gulpjs/gulp-util-ca3b1f9f9ac5\n. BTW I started to implement the workaround suggested here, but I realized we need --warnings-as-errors first (#1126).  Nobody is going to bother to suppress a warning in a situation where nobody has to pay any attention to the warnings.  :-). Seems reasonable.  Generally our position on warnings is either (1) they must break a production build or else (2) we hide them so nobody sees them.  If we show warnings that don't break the build, it always turns into a huge pile of yellow text that everyone ignores, which undermines the whole model of warning people.. Since #1125 has a workaround, --warnings-as-errors seems like a higher priority.. Here are examples of genuine problems that were being ignored by everybody because pnpm treats them as warnings:\nWARN @ms/plannerweb-ui: @ms/react-advanced-grid@8.1.5 requires a peer of moment@^2.22.0 but version 2.21.0 was installed.\nWARN @ms/searchux-sphome@36.0.3 requires a peer of react-router@>=2.6.1 but none was installed.\nWARN Cannot find file at C:\\agent\\3_work\\1\\s\\common\\temp\\node_modules\\@rush-temp\\react-bundle although it was listed by readdir\nWARN Cannot find file at C:\\agent\\3_work\\1\\s\\common\\temp\\node_modules\\@rush-temp\\react-dom-bundle although it was listed by readdir\n\nHere are some example warnings about situations that are 100% intentional.  We will have no plans to fix them.  These false alarms lead people to never take any warnings seriously:\n\nWARN\u2009 using --no-lock I sure hope you know what you are doing\nWARN\u2009 webpack > watchpack > chokidar: Skipping failed optional dependency fsevents@1.2.0\nWARN\u2009 deprecated gulp-util@3.0.8: gulp-util is deprecated - replace it, following the guidelines at https://medium.com/gulpjs/gulp-util-ca3b1f9f9ac5\n. In our scenario, the idea is that for a local developer, the install succeeds and simply prints a warning in yellow. Whereas for a production build or PR build, the install should fail with a nonzero exit code. I think we'd want it to fail as early as possible, so the person can get notified and go fix their branch. I don't even think it's useful to complete the installation, although perhaps some people might want to continue building to collect other errors. For us that wouldn't be very helpful because our full build is an hour long, and nobody wants to wait for that when they know the result will be unusable.. We skip all optional dependencies because they don't make sense when developers are using different operating systems. For example, a shrinkwrap created on Windows would be missing optional dependencies for Mac, but then if a Mac user happens  to generate the shrinkwrap file then those dependencies will get added. This whole model seems incompatible with the premise of a shrinkwrap file. Also, if they are truly optional then why should there be a \"warning\" when they don't get installed -- the system is behaving as intended.. Oh I see your point. I was assuming pnpm needed to complete to see later build errors (which might not be worth it). Yes we definitely would want to see the full list of pnpm errors/warnings. If we have to complete the install operation to get that, then it makes sense.. > What if installation of an OS specific package fails that should be installed? \n\nYou haven't addressed my question above. Suppose \"mac-notifier\" package should be installed for Mac users. If a Windows user makes the shrinkwrap file, my understanding is that Mac users won't get that package installed. In a multi-OS ecosystem, it's a coin toss which OS will be used to make the shrinkwrap file. How is this \"optional package\" model workable at all?\nA sinpler model would be e.g. a \"notifier\" package that has drivers for Mac and Windows and maybe does nothing for Linux if the native support isn't available. That way the installation tree is the same for everyone.. > Correct, pnpm will generate the same shrinkwrap.yaml regardless of the system. Even if some dependencies are not installed on Windows, they will be resolved and added to the shrinkwrap.yaml. It is how it currently works.\nThat's great!  I'm pretty sure NPM did not work that way.. @nickpape-msft FYI\n@zkochan this issue has been around for a while.  It may be a problem with NodeJS or some external system.  However if possible we'd like to investigate it in case it's an issue with the way network requests are being processed.  Let us know if there's any particular logging that would help with that.. A useful next step might be to create a simple NodeJS script that downloads a large tarball URL and saves it to disk.  \nIf the test script takes 1 second, then we know the problem is somewhere in the PNPM code base.\nWhereas if the test script takes a minute to download (but clicking \"Download\" in the web browser takes only 1 second), then we know this is a problem with the NodeJS networking layer.  In that case we should open a NodeJS GitHub issue or try to debug the NodeJS engine itself to figure out what's wrong with its network operations.  Maybe it's something easy like a tiny chunk size when processing streams.. If the --warnings-as-errors feature request #1126 gets implemented, that would solve this problem as well.. I found a deterministic repro for the There's a directory in node_modules without package.json error.  I've opened  issue 1133.. CC @nickpape-msft @iclanton. BTW step 3 does print a warning There's a directory in node_modules without package.json.  So if we can't fix this bug easily, converting that warning to an error would be a fine mitigation.  It will cause Rush to delete everything and start over, which is no big deal for an occasional glitch.. CC @nickpape-msft @iclanton. Yes, this fixes it.  The symlink is no longer broken, and the node_modules without package.json warning is no longer displayed. Thanks very much for the quick turnaround!!!. > Ok I got through them again and finally understood that \"peer dependency\" is just a silly way of saying \"forced dependency version range\"...\nSort of. A peer dependency declares \"I need version 2.x of this package, but I expect someone else to install it for me.\" The original scenario was for a plugin, because installing a plugin should require that you have the thing you're extending, but it shouldn't cause it to get installed (possibly side-by-side). \nPeople also use peer dependencies to avoid side-by-side dependencies in general. For example \"I want React 15, but we only want one copy of it on the page, so I expect the app to provide it for me.\" I find this sloppy because if we really bought into that idea, then every browser dependency would need to be a peer dependency, which seems like a different feature. Also it is complicated by the fact that NPM implemented peers in a broken way such that a second-level package cannot satisfy peers for third-level indirect dependencies. This explodes into a huge mess. Maybe they fixed it by now. (?) When we tested PNPM it didn't seem to have this problem.. > Otherwise, a fail would be really counter productive as the user doesn't have control over subdepencies.\nWe would see it differently: if a library declared \"I need React 15.x\" and PNPM would be giving it React 16, then the install should fail. It doesn't matter whether the package is under our control. We want to know about this problem so that we can either:\n\n\nManually override it with something like Yarn resolutions or pnpmfile (based on a thoughtful investigation that shows it's safe), or\n\n\nGo fix the problem (in many cases it's in another repo somewhere at our company), or\n\n\nIf the package is abandoned or unprofessionally maintained, and is not going to fix the issue, then replace it with something that works\n\n\nWe are shipping production applications that need to be reliable. We really would not want SemVer violations to be silently ignored. (When it happens, a hard error helps put pressure on upstream partners to be more contemplative about their dependencies, and not overuse \"peer\" to push the work onto someone else.)\nFor PNPM this could be an optional switch like \"--strict-peers\" or somesuch. It doesn't need to be the default behavior.. No, package \"b\" is getting what it asked for, and \"another-dep\" is getting what it asked for. \nThere is a side-by-side installation of \"a\", which could be bad if it's a browser library. You could avoid that by converting \"another-dep\" to have a peer dependency. But as I said, I personally see this as an abuse of the peer dependency feature. People find the error messages confusing.\nThe way we prevent side-by-side installs today is via PR build validation that fails when undesirable duplication occurs. We also require a knowledable person to approve any shrinkwrap changes. But this would be hard to do in a small repo.\nIt would be cool if PNPM had a built-in feature for helping with this. But the main point is that it is a consumer of a package that imposes this requirement. I find it bizarre for some control library to say \"and there shall only be one React on the page!\" (How do you know!? You're not the app, you're just a library among 2,300 other libraries in my node_modules folder.). If --strict-peer-depth would have an integer parameter, I'm not sure that would be very practical.  The tree levels don't correspond to anything meaningful.  It might be better to design the modes around usage scenarios:\n\nNew adopter: \"I want PNPM to allow anything that NPM would allow, regardless of whatever flaws that may imply\"\nEarly happy days of a new product: \"I want strict SemVer, but only for the direct dependencies under my control\"\nVeteran who's tired of getting woken up at 3am: \"I want strict SemVer for everything (and will use explicit means such as pnpmfile.js to handle exceptions)\"\n\nIt sounds like you're also considering a rule something like this:\n\"If a library asks for React 16, I'm okay with silently substituting React 15, but the install should fail if there is no React at all.\"\nThat one strikes me as odd, unless it's part of the \"do what NPM does\" concept.  There is a delicate balance between giving people something that's simple and easy, versus setting them up for failure and a potentially difficult debugging problem.. > unfortunately after this change pnpm will download package tarballs even when --shrinkwrap-only is used. According to the npm team, the only reliable way to tell whether a package has to be built is to check the real package.json from the tarball\nA few questions:\nWhen you say \"download the tarball\" do you mean it would get downloaded even if it's already present in the PNPM store?\nIs the NPM team saying that the huge dump of package.json returned from their REST endpoint may NOT accurately represent the actual contents of the package.json file? How would that happen?\nI understood that --shrinkwrap-only is intended to be a fast way to update shrinkwrap.yaml, in cases where you don't care about the node_modules folder (e.g. because you're going to push to a PR branch without building locally).  Is that true?  Or was this feature intended to be usable without any network connection at all?\nTo handle @rarkins 's issue,  couldn't you simply omit the corgi header if the --shrinkwrap-only option was specified?. > I will monitor the performance impact in the app - disk churn when using EBS on AWS can really drag performance. \n@rarkins We found that in many cases, the tarball is actually smaller than the non-corgi protocol response.  This is because it always includes a full copy of package.json for every single version of the package since its initial release.  Might be useful to compare install times for the two approaches. The new version might actually be faster. :-). > Correct, they say there are packages that submit one particular package.json to the registry and pack another version into the tarball. I don't know how they do it.\n\ud83d\ude35 Haha I guess I'm not surprised by that.\nAnyway thanks @zkochan for doing this work!  I imagine it will make the normal install faster.. In this related Yarn discussion, we are proposing that every @types package should specify its dependencies as peerDependencies:\nhttps://github.com/yarnpkg/yarn/issues/6695#issuecomment-470346353\nI wonder if its the same root problem.\nAre you able to work around it using pnpmfile.js? (In particular it would be cool if someone could cook up a pnpmfile.js that generically converts everything to peers and see if the idea works.)\nThat said, I also tend to agree with the above assertions that pnpm could choose the versions correctly during installation. An algorithm seems to exist that would do the right thing,  and nobody in our group cares if it makes installation somewhat slower, since installs are now a relatively small contributor to our build times.. @zkochan what's your current thinking regarding this issue? Seems like people are still encountering it regularly.. > Still, that's just the same as doing a flat install.\nNot exactly, because intermediary libraries are able to satisfy peer dependencies.\nFor example, you can have:\napp/package.json\njson\n{\n  \"name\": \"app\",\n  \"version\": \"1.2.3\",\n  \"dependencies\": {\n    \"platform\": \"1.2.3\"\n  }\n}\nand then:\nplatform/package.json\njson\n{\n  \"name\": \"platform\",\n  \"version\": \"1.2.3\",\n  \"dependencies\": {\n    \"@types/react\": \"1.2.3\",\n    \"@types/prop-types\": \"1.2.3\"\n  }\n}\nand then:\nreact/package.json\njson\n{\n  \"name\": \"@types/react\",\n  \"version\": \"1.2.3\",\n  \"peerDependencies\": {\n    \"@types/prop-types\": \"*\"\n  }\n}\nIn this (somewhat contrived) example:\n\nplatform uses @types/react which needs @types/prop-types\nplatform locks its version of @types/react, and in doing so also takes responsibility for choosing the right version for  @types/prop-types\napp uses platform but does not need to get involved with @types at all, because the app doesn't use React directly\n\nIf app also relies on another library that uses a different version of React (side-by-side), then that library can specify its own choice for  @types/prop-types version, without interfering with platform's installation.\nYou can sort of accomplish the same thing without peer dependencies, except that the NPM specification is fairly vague about how a package manager should solve the *.  It's a gambling crapshoot where you usually get lucky with NPM, sometimes unlucky with PNPM, and always lose with Yarn.  Whereas using peerDependencies forces the package manager to look at the consuming package to find the answer, thus eliminating ambiguity (and making Yarn usable).. @zkochan I emailed you an archive with a repro, in case that helps.. Thanks very much for getting this fixed so quickly! :-). There were apparently two separate bugs here.  The first one is now fixed (thanks!), so to avoid confusion I am closing this GitHub issue. I opened issue #1233 to track the incorrect install statistics.. Thanks!  Tonight I will test this with my project that repros the issue, and see if the problem is fixed.\nBTW do you expect this to also fix the issue where 2.4.0 was installing two copies of everything?. This eliminates the crash, so PNPM does produce a valid shrinkwrap.yaml file.  However the counter is still showing twice the number of packages getting installed.. Thanks very much for getting this fixed so quickly!. But in this repro, the shrinkwrap.yaml file has been completely deleted.  So essentially PNPM is encountering an integrity mismatch with itself, right?  If so that would seem like a PNPM bug, not a registry issue.... Also the error only repros for certain people.  Other people are able to build with exactly the same:\n- Git hash\n- NodeJS version\n- .npmrc settings\nThe only consistent difference seems to be the computer itself.  Some computers have this problem for some weird reason.  (?)  And then eventually the person fiddles with stuff and eventually it stops happening.  We've had 4 different people encounter this in the past couple months.. > Do you use verdaccio?\nThis is a normal install that's failing.\nDo you want us to provide a verbose log?\nAlso, we have at least one person who is blocked by this error.  He can't do any work on his PC.  Would a possible workaround be to comment out the integrity check?\nJavaScript\n            Promise.all([\n              Promise.resolve(), // opts.integrity && ssri.checkStream(res.body, opts.integrity),\n              unpackStream.local(res.body, tempLocation, {\n. This is the callstack FYI:\n```\nERROR\u2009 Fetching .pkgs.visualstudio.com/@ms/odsp-shared-react/40.14.0 failed!\nERROR\u2009 sha1-iPH9Gm3+vKXEGUAhCJubDn/BWkA= integrity checksum failed when using sha1: wanted sha1-iPH9Gm3+vKXEGUAhCJubDn/BWkA= but got sha512-L0FUxzgyBIaJrdc1DigatUZiZ9NbeCYNsW6gG/4ezLc/8Hv0EaHsSWGNRPCKBCkiatd3CUFSb6nWLvEVVc2qdg== sha1-sqnHrJmVkxa8tNfCe8ddecwx9LI=. (6553600 bytes)\nat on                     \u2026pnpm/lib/node_modules/ssri/index.js:310  const err = new Error(`${sri} integrity checksum failed when using ${algorithm}\u2026\nat emitNone               events.js:91\nat emit                   events.js:185\nat endReadableNT          _stream_readable.js:974\nat _combinedTickCallback  internal/process/next_tick.js:74\nat _tickCallback          internal/process/next_tick.js:98\nResolving: total 2430, reused 0, downloaded 2269\nDownloading .pkgs.visualstudio.com/@ms/odsp-shared-react/40.14.0: 6.55 MB/13.3 MB\nDownloading .pkgs.visualstudio.com/office-ui-fabric-react/5.112.0: 3.74 MB/7.26 MB\nDownloading .pkgs.visualstudio.com/office-ui-fabric-react/5.57.0: 5.59 MB/8.51 MB\nDownloading .pkgs.visualstudio.com/office-ui-fabric-react/6.0.0-beta4: 3.9 MB/8 MB\nError: sha1-iPH9Gm3+vKXEGUAhCJubDn/BWkA= integrity checksum failed when using sha1: wanted sha1-iPH9Gm3+vKXEGUAhCJubDn/BWkA= but got sha512-L0FUxzgyBIaJrdc1DigatUZiZ9NbeCYNsW6gG/4ezLc/8Hv0EaHsSWGNRPCKBCkiatd3CUFSb6nWLvEVVc2qdg== sha1-sqnHrJmVkxa8tNfCe8ddecwx9LI=. (6553600 bytes)\n    at Transform.on (C:\\Users\\.rush\\pnpm-2.2.1\\node_modules\\pnpm\\lib\\node_modules\\ssri\\index.js:310:19)\n    at emitNone (events.js:91:20)\n    at Transform.emit (events.js:185:7)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\n    at process._tickCallback (internal/process/next_tick.js:98:9)\nError: sha1-iPH9Gm3+vKXEGUAhCJubDn/BWkA= integrity checksum failed when using sha1: wanted sha1-iPH9Gm3+vKXEGUAhCJubDn/BWkA= but got sha512-L0FUxzgyBIaJrdc1DigatUZiZ9NbeCYNsW6gG/4ezLc/8Hv0EaHsSWGNRPCKBCkiatd3CUFSb6nWLvEVVc2qdg== sha1-sqnHrJmVkxa8tNfCe8ddecwx9LI=. (6553600 bytes)\n    at Transform.on (C:\\Users\\.rush\\pnpm-2.2.1\\node_modules\\pnpm\\lib\\node_modules\\ssri\\index.js:310:19)\n    at emitNone (events.js:91:20)\n    at Transform.emit (events.js:185:7)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\n    at process._tickCallback (internal/process/next_tick.js:98:9)\nThe command failed:\n E:\\work\\sp-client\\common\\temp\\pnpm-local\\node_modules.bin\\pnpm install --no-optional --store E:\\work\\sp-client\\common\\temp\\pnpm-store --no-lock\nERROR: Error: The command failed with exit code 1\n```. > But removing shrinkwrap.yaml should solve it as well\nThis is absolutely NOT the case. PNPM fails with this error even if there is no shrinkwrap file.\n\nI think, as a temporary fix, we can add a verify-tarball-integrity config.\n\nSo this would temporarily disable the checks entirely?\nMaybe a better hack would be to say \"if the hashes cannot be compared because they are different algorithms, then ignore them and don't fail the install.\". After investigating, we found that there are really two bugs here:\n\n\nThe underlying problem has nothing to do with tarball integrity, but PNPM is reporting the errors in a misleading way.  I opened a separate issue #1235 to track this.  It should be pretty easy to fix.\n\n\nThe root cause here is that while downloading the tarball, the socket is getting closed prematurely due to an ECONNRESET issue.  We're still trying to understand what causes this.  On the PC's that reproduce the problem, it was noted that the downloads proceed much slower than usual and seem to stall a lot, then resume again.  So it might be a real network failure (although in some cases the ECONNRESET occurs only 1 second after the download started).  I'll follow up when we have more details.\n. You are using an unstable release of NodeJs. Might want to check that first.\n\n\nAlso are you using PNPM or NPM? It's a little unclear from your log.. @zkochan following up from our previous conversation:  People are still hitting this issue occasionally.  I got a couple people to confirm that --network-concurrency 1 eliminates the error, which supports your earlier theory that it is related to the connection pool.\nAs a workaround (until we finally get this solved), we're thinking about adding a rush command-line option that would set the --network-concurrency limit.  Perhaps we could experiment with different numbers.. AWESOME!. BTW we should also fix the error message so it says something like \"The network connection was reset\" instead of \"integrity checksum failed\".  That would really help the end user perception of the issue:  The \"integrity checksum failed\" sounds like PNPM is corrupting its own data stream, which is not the case.  (https://github.com/pnpm/pnpm/issues/1235). Thanks again for fixing @zkochan !. People have confirmed that this fixes their repros for this issue.  Hurray!. Are you sure it's an actual integrity error?  Based on https://github.com/pnpm/pnpm/issues/1235 it seemed that network failures sometimes get reported as \"integrity checksum failed\" because the original error does not prevent the integrity check from happening and producing a secondary error.. This GitHub issue is now closed.\nShould we open a separate GitHub issue to track this?  People continue to report this issue to us every week or so (admittedly at a very large company with lots of developers).  The --network-concurrency workaround seems to work pretty reliably, so I bet there are also people who encounter the problem but  do NOT report it any more.\nIt would be helpful to automate the workaround.  Long term it would be ideal to add appropriate logging so we can eventually figure out the root cause and fix it.  Currently the real error is obscured by https://github.com/pnpm/pnpm/issues/1235 (which seems like it would be pretty simple fix).. BTW if you wanted to publish a prototype of an idea, it's easy for me to find a person who's encountering the issue and get them to test whether it solves the problem or not.. I tested 2.6.2 in 3 different repos and confirmed that the issue is fixed.  Thanks @zkochan !. @nickpape-msft @iclanton. FYI we still get reports of this issue a couple times per month.  In most cases it can be worked around by telling the person to specify --network-concurrency=1.  However people interpret the error message \"integrity checksum failed when using sha1\" to be a data corruption bug in PNPM itself, versus a network connectivity issue.  It would be great to fix that.. Doesn't the network library already allow you to distinguish these two cases?\n\nThe download completed successfully, but the checksum tells us that the binary contents are corrupted somehow.\nThe download was interrupted due to a network failure, so it doesn't make any sense to calculate a checksum.\n\ni.e. fetch-retries isn't necessary or relevant for distinguishing these two cases.. You mean the registry server returns an incorrect Content-Length header in its response?  Or that the NodeJS network stack ignores the Content-Length header when reading the tarball?\n(I wonder if this might suggest what is the underlying problem that is causing these failures.)\nSince --network-concurrency is really just a workaround, perhaps PNPM could provide a diagnostic option that would help us better understand how this happens.  Rush supports telemetry hooks, e.g. we could configure our internal monorepo to collect logging information whenever this sort of failure occurs, if PNPM could somehow tell us about it.. Awesome! :-D. A while ago someone explained to me that there might be a cultural difference behind this issue: Typical NodeJS developers expect their code to run on any OS, with any package manager, and without installing any other software. Whereas native app developers often must install huge SDKs with multiple prerequisites and special device drivers, for each device that they target. For iOS you even need a specific development machine. In that context, the idea that you must use a certain certain package manager doesn't seem like a big concern. It's just one more \"hoop\" you have to jump through to make an app. The theory was that this is why there is relatively little effort invested in fixing the React Native symlink handling bugs, whereas other NodeJS packages get fixed quickly.\nNot sure if it's true. (I haven't used React Native myself beyond trying the demos. But we hear about this issue occasionally from people who are wanting to enable PNPM for their Rush repositories.). We have this scenario also:\nWe have someone who is trying to convert an old branch from NPM to PNPM.  This is a sustaining branch for a customer release, so the policy there is \"never change anything unless required by an escalation, and any change must minimize risk of regression.\"  Thus, this conversion would need to preserve the npm-shrinkwrap.json version selections as faithfully as possible.\nAnother idea would be someting like pnpm install --max-registry-date=1/23/2018, which could filter the registry responses to ignore versions published after a specified time.  This could allow pnpm install to reproduce what would have been installed at the time when the npm-shrinkwrap.json was originally created.. Cool, that would be really useful!\nCC @nickpape-msft @iclanton. Thanks again @zkochan  for turning this around so quickly.  We're moving the sustaining branch to PNPM!  :-P. Let us know if there's any other info that you need regarding this issue.  Thanks!. Sure, I'll follow up with @nickpape-msft when he gets in today.  I believe he still has a repro.. Maybe there is a console.log statement that Nick could inject into link/index.js file that would help you understand why it's not symlinking that file?. @ThomasMichon FYI. > do you know if there are plans to bump the version to the one noted above?\n@lynamemi which repo are you referring to?. That repo is self-service.  Feel free to create a PR bumping the \"pnpmVersion\" field in rush.json file.. For reference, I've pasted Nick's comment below:\n\n\n@zkochan:\nyes, it is still faster than w/o --shrinkwrap-only. Packages are not hardlinked into the project's node_modules. No node_modules is created at all.\n\n@nickpape-msft:\nRight, but this isn't really the expensive part of the operation. From what I can tell pnpm still downloads the tarballs, stores on disk, unzips, etc. If you have an empty cache this takes almost as long as when not using the flag. In the case where you have a perfectly good cache, it still takes almost nearly as long. If it really isn't significantly faster, why have the flag around at all? It will just be bait for more GitHub issues when it doesn't really do what people are thinking (e.g. have a significant speed improvement). Is there anything creative we can do to make the flag work the way it did before, where it WAS significantly faster?\nFor some context, we wanted to add a flag to Rush that would utilize this PNPM flag. The idea was that someone could quickly (i.e. in 30 seconds) merge master into a branch with an outdated shrinkwrap and generate a new valid shrinkwrap that could be pushed to the CI to be built. In one case, we have a branch that a bot creates that we are trying to get merged quickly. Every time someone updates dependencies (often), it creates a merge conflict on this branch. Many times, we simply need to re-generate the shrinkwrap, as the CI would likely pass once this is updated. However, it takes quite a while to do this on a computer that has an empty pnpm cache or has a slow disk (20 minutes). Sometimes a couple people try running it at the same time and waste their time. Sometimes you are trying to do other things on your disk, but having to do the full install puts a lot of load on your disk. In these cases, we were hoping for a quick, \"fix my shrinkwrap in 30 seconds\" solution (which is what we thought --shrinkwrap-only was).\n. I vote to abandon https://github.com/Microsoft/web-build-tools/pull/766 and forget about this feature:\n\nIn my experience, the primary pain here is due to slowness when downloading multi-megabyte tarballs, and @zkochan is saying --shrinkwrap-only cannot skip these downloads (due to limitations of the NPM protocol).\nIf someone's going to invest in this area, it seems like the better investment would be to make the downloads themselves go faster.  We have a very fast internet connection at work.  Our investigation for https://github.com/pnpm/pnpm/issues/1131 suggests that a massive speed improvement is possible, by fixing whatever NodeJS issue is causing the network operations to be severely throttled.. I investigated this.  We think that people are manually tampering with shrinkwrap.yaml.\nIt starts out like this:\nyaml\n  'file:projects/example.tgz':\n    dependencies:\n      gulp: 3.9.0\n    dev: false\n    name: '@rush-temp/example'\n    resolution:\n      integrity: sha512-A2ac6a6cPfvxyknisFEMpjV9vS3VW8u4cx6Abgdp0Kwel6v+NOfAuB7nXXFQJxZuYelJ1aSBWzZzRexh5A4lbg==\n      tarball: 'file:projects/example.tgz'\n    version: 0.0.0\n...and then I find a commit where (for some reason) a person has bumped gulp to 3.9.1, without updating the package.json file that ends up in this tarball.  We're still trying to determine why people do this, but it's apparently something people do occasionally.\nThen rush install sees that gulp 3.9.0 is missing from shrinkwrap.yaml, and runs pnpm install to fix that, but afterwards the shrinkwrap file is unchanged.  The reason is that PNPM (reasonably) assumes that the shrinkwrap is up to date, because the integrity hash seems to match the tarball.\nA question\nThis problem is admittedly pretty Rush-specific.  But we're thinking the most robust solution would be to delete the integrity field from the shrinkwrap file before we run pnpm install, to force PNPM to reconsider the tarball contents.\n@zkochan a couple questions:\n1. Is it okay to delete the integrity field from shrinkwrap.yaml for certain entries?\n2. Will this force PNPM to read the package.json contents and update the shrinkwrap file?\n3. Will this affect install times significantly?  (e.g. if we have 150 such projects in a repo with ~2500 package dependencies)\n. @nickpape-msft . Following up:  I tracked down the person who committed the changes.  He's pretty sure that nobody manually modified the shrinkwrap.yaml file.  It was part of an incident where a bundle size increased because two different versions of a dependency were getting installed, and during the scuffle they had to roll back their Git branch a couple times, and also resolve merge conflicts with the master branch.\nIt is conceivable that Git incorrectly merged the shrinkwrap file, however our .gitattributes specifically tries to prevent this:\nshrinkwrap.yaml              merge=binary\nnpm-shrinkwrap.json          merge=binary\n@zkochan  Is it possible that PNPM itself can fail to update the integrity hash in certain circumstances?\nRush actually regenerates these tarballs for every installation.  In the past, we had problems where the integrity hash would be different each time, due to timestamps inside the tarball.  We mostly worked around that by using the portable option for tar, however certain people still get diffs occasionally for some reason (maybe NTFS path case differences?).  If it won't significantly affect PNPM performance, deleting the integrity hashes from the shrinkwrap.yaml file might fix both issues.. I still have the repro -- lemme try that.. > As a temporary solution, you can set prefer-frozen-shrinkwrap to false.\nThis fixed the problem!  Should we have Rush always include --prefer-frozen-shrinkwrap false when invoking pnpm install?  That's a pretty easy change to make.. We'll do that, since not everyone will be using the latest PNPM.  Thanks again for helping us investigate this!. @zkochan We can close this issue now also.  Thanks again!. Thanks!  I had trouble getting the project to build on my Windows PC and ran out of time.\nThe main issue is that the NPM scripts rely on commands such as tsc and commit, but these are not listed as devDependencies for the project:\njson\n  \"scripts\": {\n    \"info\": \"npm-scripts-info\",\n    \"start\": \"npm run tsc -- --watch\",\n    \"?commit\": \"echo 'Run Git commit wizard'\",\n    \"commit\": \"commit\",\n    \"commitmsg\": \"commitlint -e\",\n    \"lint\": \"tslint -c tslint.json --project .\",\n    \"pnpm-registry-mock\": \"pnpm-registry-mock\",\n    \"test:tap\": \"ts-node test --type-check\",\n    \"pretest:e2e\": \"rimraf ../../../.tmp/ && rimraf node_modules/.bin/pnpm && pnpm-registry-mock prepare\",\n    \"test:e2e\": \"pnpm link . && npm-run-all -p -r pnpm-registry-mock test:tap\",\n    \"test:e2e-with-preview\": \"preview --skip-prepublishOnly && npm-run-all -p -r pnpm-registry-mock test:tap\",\n    \"test\": \"npm run lint && npm run tsc && npm run test:e2e\",\n    \"tsc\": \"rimraf lib && tsc\",\n    \"release\": \"sh .scripts/release.sh\"\n  },\nI suppose I could install them globally, but then the version would be nondeterministic.. Thanks again for your help!. Thanks for implementing this @zkochan !. Here is an isolated repro:\npnpm-bug.zip\n\nUnzip the pnpm-bug folder.\nCopy projects/sp-application-base-step1.tgz to be projects/sp-application-base.tgz\nRun pnpm install --store pnpm-store --no-prefer-frozen-shrinkwrap\nCopy projects/sp-application-base-step2.tgz to be projects/sp-application-base.tgz\nDelete shrinkwrap.yaml\nRun pnpm install --store pnpm-store --no-prefer-frozen-shrinkwrap\n\nExpected: shrinkwrap.yaml references @uifabric/styling version 5.33.1.\nActual: shrinkwrap.yaml references @uifabric/styling version 5.33.0.\nyaml\n  'file:projects/sp-application-base.tgz':\n    dependencies:\n      '@uifabric/styling': 5.33.0\n    dev: false\n    name: '@rush-temp/sp-application-base'\n    resolution:\n      integrity: sha512-JUmAX2t1eTBU8PkyYNMBE+ltP45sVYHLh8frHp+H8OV7UdBq8r+uokVBhG/NBW7NIoMTGrAQCPZFoTICYU87cA==\n      tarball: 'file:projects/sp-application-base.tgz'\n    version: 0.0.0. This issue does not repro with PNPM 2.6.2 (but it does repro if steps 1-3 were performed using PNPM 2.15.0).  Apparently it is a recent regression.. > This seems like not a regression. It was working this way from the beginning.\nWhy does the issue NOT repro when using PNPM version 2.6.2?. I tried a bunch of different releases, and narrowed it down:\n2.11.0 and all earlier releases work correctly\n2.11.1 and all later releases have the regression. (Fixed in PR https://github.com/pnpm/pnpm/pull/1363). Thank you very much!  I have confirmed that this issue is fixed in 2.15.1.. This is very exciting!  Some thoughts:\n\n\nCould you provide a small example of the shared shrinkwrap file format that illustrates what's new?\n\n\nWhat happens when a package.json is changed, but it can be solved without talking to the NPM registry? (E.g. project-a adds a dependency+SemVer that's the same as project-b in the repo.) In this situation, Rush tries to automatically fix up the shrinkwrap file without requiring this update to be tracked by Git, because the install behavior is still fully deterministic. This reduces churn/merge conflicts for the shrinkwrap file, which can be very expensive. Should PNPM have such a feature?  If not, would it be possible to implement it on top of PNPM?\n\n\nMaybe the name \"mono shrinkwrap\" or \"monorepo shrinkwrap\" would be more clear?  \"Shared\" sounds  a little like sharing with an external consumer.  (I don't have a strong opinion here.)\n\n\n@nickpape-msft @iclanton. I noticed that your shared shrinkwrap file is still called shrinkwrap.yaml.  Long term, is your plan to use a unified schema for both the single-project and the multi-project (workspace) scenario?  If so that seems like a good idea.. In your (example file](https://gist.github.com/zkochan/e2d7e6e7e2a805872f8dbe152672ba1e) I noticed that the new importers section refers to local file paths:\nexamples/advanced/animated-letters:\n  . . .\nexamples/advanced/autocomplete-search:\n  . . .\nexamples/advanced/bmi-nested:\n  . . .\nIs this technically necessary?  It would mean that the PNPM shrinkwrap file would be invalidated whenever a project is moved to a different folder.  In our main monorepo these folder reorganizations happen fairly regularly by design. Our own Rush configuration intentionally restricts the folder depth to exactly 2 levels (i.e. project folders always have exactly one parent called the \"category folder\").  Before instituting this policy, we were finding that people tended to create a folder with their team name, which isolated their team's projects in a silo.  The category folder requirement pushes everyone into a common namespace, so people have to talk with other teams and agree on category names that make sense. This encouraged collaboration and reduced duplication, and overall the resulting organization is more understandable for newcomers.  The NPM package registry is a flat namespace anyway.\nRush already enforces that the NPM package name is unique within a monorepo, which seems like a reasonable requirement.  So you could just use the name from package.json as your key, right?. Just curious, why did you start tracking the specifiers field in shrinkwrap.yaml?. > I like everything that you described but I think from performance perspective it makes sense. pnpm knows the exact location of the workspace packages, so it can avoid redundant filesystem operations\nCould you make it so that pnpm install still succeeds even if the paths are incorrect?  We'd be fine with install being slightly slower until the next update, since our shrinkwrap file will get inevitably get regenerated by another PR within 24 hours. The main point is that PRs that modify Git's shrinkwrap.yaml sometimes have to get in line behind a mutex of Git merge conflicts. In other words, if the shrinkwrap modifications can be limited to common/temp/shrinkwrap.yaml (not tracked by Git) instead of common/config/rush/shrinkwrap.yaml, it makes the PR get merged much more quickly.. Cool!. Very cool! I can take a look on Monday.. > This version will be functioning but not very useful because it has a very bad performance. The next step will be a bigger refactoring that will make it A LOT faster.\nI wonder why Rush's approach does not have this performance issue.  If I understand right Rush would produce a mostly equivalent result to what you're doing here, with the main difference being Rush's indirect dependency heuristic (\"implicitly preferred versions\"), which works like this:\npackage.json for project-a (built/linked in Rush repo)\njson\n{\n  \"name\": \"project-a\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"external-c\": \"1.0.0\"\n  }\n}\npackage.json for project-b (built/linked in Rush repo)\njson\n{\n  \"name\": \"project-b\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"external-d\": \"1.2.3\"\n  }\n}\npackage.json for external-c (consumed from some other repo)\njson\n{\n  \"name\": \"external-c\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"external-d\": \"^1.2.3\"\n  }\n}\nEven though the latest version is external-d\\@1.2.9, Rush's model will choose to install external-d\\@1.2.3 for external-c because of the influence of project-a.  Whereas a conventional install would choose external-d\\@1.2.9.\n. > 1. Running pnpm install in the root will only create node_modules for the root package.json.\n\n\nRunning pnpm install -r (or pnpm install -- .) in the root will install dependencies of all workspace packages.\nRunning pnpm install -r (or pnpm install -- .) in libs/ directory will only install dependencies of lib-a and lib-b\n\n\nIn our monorepos, normally nobody would ever want to install a single project in isolation.  It wouldn't make any sense, because nearly all our projects depend on the current (unpublished) versions of other projects in the repo.\nIn some cases it might be useful to install a subset of projects.  However PNPM doesn't know what the meaningful subsets are, and the person isn't going to want to explain that using the PNPM command-line.  Instead, we would use a wrapper such as rush install --version-policy X which invokes PNPM behind the scenes with the right list of packages to install.\nThere is a scenario where the docker deployment wanted PNPM to locally install a single package (by copying its dependencies), but this is a somewhat special case, and it again would be invoked by an automated script.\n. Agreed, I would suggest for the spec to be organized around realistic problems a developer would encounter, and the list of commands they would run, with the goal to make those commands as simple and intuitive as possible.  This is generally a better approach than organizing it to reflect the implementation details that are happening behind the scenes.\nFor example:\n\n3 . Running pnpm install -r express (or pnpm install express -- .) in the root will install express as dependency in all workspace packages.\n\nThis scenario seems fairly unlikely -- for a small repo, you can just run the PNPM command several times.  For a large repo, you would never want to affect on \"all\" packages, because you probably don't even know what half the packages are.\nThe pnpm install express -- . variant seems a bit awkward.  If I polled random developers familiar with PNPM, and asked them what -- means, they probably would have no idea.  And since it's not a named command-line parameter, it's difficult know how to search for help:  pnpm install -h doesn't explain it.  Googling for \"pnpm --\" won't return any useful results either.\nMonorepos tend to have lots of developers working in them.  Some of them make one or two PRs and move on.  So having a simple \"on the rails\" user experience and very easy learning curve is pretty important.. Is -- simply a synonym for --filter?\n. > Should peer dependencies be linked into every transitive dependency between the peer dependency requester and the dependency that has the peer as regular dependency?\nTechnically bar should probably do something like this:\n{\n  \"name\": \"bar\",\n  \"peerDependencies\": {\n    \"peer\": \"*\"  // actual SemVer specifier is determined by qar\n  }\n}\nBut it would seem that the package manager can infer this relationship relatively easily.  Why is it important to make the developer to specify it explicitly?\nIn the linked thread, @arcanis wrote:\n\nIn contrast, package managers don't currently fail the install if a peer dependency is missing, meaning that it's 100% sure we wouldn't break anything going this way.\n\nWe found this behavior to be very dangerous in a production environment. We now always enable PNPM's --strict-peer-dependencies in all our repos, which causes a hard error if a peer dependency is unsolved.\n. But in your example foo --> bar --> qar ==> peer, the foo package provides peer for qar.  This is a normal and completely reasonable way to satisfy a peer dependency.\nIf bar does not explicitly use peer itself, it might be reasonable for the package manager to omit symlinks so that bar cannot accidentally import peer.  But if I understand right, you are proposing the opposite -- that bar must declare this dependency anyway.. Thanks for looking into this!  FYI we still get occasional error reports about the \"integrity checksum failed when using sha1\"  error (https://github.com/pnpm/pnpm/issues/1235), maybe a couple times per month.  The --network-concurrency=1 workaround generally eliminates the symptoms, but we always have to remind people to do that.. I liked the term \"shrinkwrap\" because it was the original name NPM used, it's a unique name, and it's a good name. \"Lock file\" is not a good name because programs have been using files as mutexes and calling them \"lock files\" since the dawn of modern computing, and that's NOT at all what this file is about.\nBut now Yarn and NPM are both calling it a lock file, and apparently Ruby's GEM system popularized this name earlier. So I can understand why PNPM would want to align.. >'strict-peer' \nFrom our conversation, suggest to call this --strict-peer-dependencies. ",
    "mnzaki": "Can confirm also still seeing this. Hack to overcome issue:\nnode --inspect=0.0.0.0:9229 /usr/bin/pnpm i\nThen open chrome node inspector => Sources tab => Enable Pause on Exceptions\nWait for Z_BUF_ERROR exception. Look at Scope data in debugger, dig down a few closures till you find the pkgname somewhere. Note the pkgname, press F8 (debugger 'continue'), wait for more exceptions and note more packages, until pnpm exits.\nNow go to ~/.pnpm-store/ and rm -rf the package folders you noted. Run pnpm again and rinse and repeat.\n\nMy very first few hours of using pnpm was hunting this down as it made all installations fail. The culprit is that the first time I used it was installing 1.4k packages on a bad WiFi connection. Some downloads failed: a few random packages but also particularly something that was downloading prebuilt binaries.\nI think a fairly simple solution is to at least just log the packages that failed in this run, and more advanced would be prompt the user to retry the failed packages.\nAll in all though, the grey hairs were worth the ~5GB of precious /home space I saved just converting around 10 node_modules to pnpm. Can't wait to get rid of the rest.. I tried to reproduce the error today, and did some more digging across async calls, this seems to be the problematic code: https://github.com/pnpm/tarball-fetcher/blob/master/src/index.ts#L134\njs\nasync function fetchFromRemoteTarball (\n// ...\n) {\n  try {\n    const index = await fetchFromLocalTarball(unpackTo, opts.cachedTarballLocation)\n    return index\n  } catch (err) {\n    if (err.code !== 'ENOENT') throw err\n// ...\n}\nThe problem is execution gets to this point even though the packed.tgz file is clearly corrupted. It tries to fetchFromLocalTarball which throws the Z_BUF_ERROR which gets rethrown in the catch block (since it's not ENOENT)\nTo reproduce:\n1. start installing something that has native bindings, I was testing with the package sodium-native\n   I'm unsure if this is necessary for the bug, but I do know it is sufficient.\n2. Once it downloads a bit interrupt it. There will be a partial download packed.tgz.NNNNNNNNN file in the .pnpm-store. Rename this to packed.tgz (see note below)\n3. Run the installation again, debug it while failing with Z_BUF_ERROR\nNote about corrupt files:\n1. I was unable to get pnpm to the point where it renames a corrupted file to packed.tgz by itself. But that is the condition I saw in my first attempts (I didn't manually rename a partial download of course....). I believe there's some difference because in my first attempts it was failing due to high packet loss/intermittent connection, but in my manual tests I was disabling WiFi. \n2. I have also noticed that corrupting the file using something like echo ha > packed.tgz did not produce the same effect (I assume pnpm correctly recognized corruption and redownloaded??). Something about file headers?\n3. There seem to be cases in which there is no integrity.json file (actually the case for my tests above!) and I'm not sure how that plays into the issue. ### Quick Fix\nChanging\nif (err.code !== 'ENOENT') throw err\nto\nif (err.code !== 'ENOENT' && err.code !== 'Z_BUF_ERROR') throw err\n\"solves\" the issue (it will just redownload the file). Though I suspect it goes deeper than that: why is t even at this point of execution if packed.tgz is corrupt??\nAlso I would highly recommend a higher level exception handler (perhaps in packageRequester) that spits out the package name along with the exception, to mitigate these situations in the future.. Well yes, a warm cache, with corrupted files.. ",
    "arun290636": "@zkochan I am facing same problem with version 2.0.0.\nError:\n{ Error: unexpected end of file at Gunzip.zlibOnError (zlib.js:152:15) errno: -5, code: 'Z_BUF_ERROR' } Error: unexpected end of file at Gunzip.zlibOnError (zlib.js:152:15). ",
    "prakhar241": "This is true -\n5520 silly fetchPackageMetaData error for material-design-icons@^3.0.1 unexpected end of file\n5521 verbose stack Error: unexpected end of file\n5521 verbose stack     at Gunzip.zlibOnError (zlib.js:152:15)\n5523 verbose Darwin 16.7.0\n5524 verbose argv \"/.nvm/versions/node/v8.4.0/bin/node\" \"/.nvm/versions/node/v8.4.0/bin/npm\" \"install\"\n5525 verbose node v8.4.0\n5526 verbose npm  v5.3.0\n5527 error code Z_BUF_ERROR\n5528 error errno -5\n5529 error unexpected end of file\n5530 verbose exit [ -5, true ]\nI'm getting this again and again while npm install on home network.. ",
    "wmertens": "See also #1282 . I wonder though if it is ok for pnpm-specific options to live in .npmrc (it's not called .pnpmprc after all). Other projects simply use package.json.. well, generally, pnpm is already writing to package.json when installing\ndeps\u2026\nas a start, the key \"pnpm\" could be read at least?\nOn Fri, Mar 30, 2018, 12:44 PM Zoltan Kochan, notifications@github.com\nwrote:\n\nIt is a complex problem. I would also like a separate config but that would\nmean additional fs operations. We should read npm configs in any case\nbecause pnpm tends to be a drop-in replacement that works with existing\nconfigs.\nOn Fri, Mar 30, 2018, 13:03 Wout Mertens notifications@github.com wrote:\n\nI wonder though if it is ok for pnpm-specific options to live in .npmrc\n(it's not called .pnpmprc after all). Other projects simply use\npackage.json.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/820#issuecomment-377493487, or\nmute\nthe thread\n<\nhttps://github.com/notifications/unsubscribe-auth/AB1pm0BpjW2zdksmhZChHwmXb5zlnfNaks5tjgLZgaJpZM4OBiEy\n.\n\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/820#issuecomment-377499964, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AADWljPc2DTxUSeuQZ5sQZ_wn5Ldc0cFks5tjgyVgaJpZM4OBiEy\n.\n. I'm still experiencing problems like this. When I update pnpm in my local packages using npm-check -u it's never a problem, but when I deploy the resulting package.json+shrinkwrap.yaml to my server it crashes when running npx pnpm -i --only=prod, with errors like\n\nError: Cannot find module 'agentkeepalive'\n    at Function.Module._resolveFilename (module.js:547:15)\n    at Function.Module._load (module.js:474:25)\n    at Module.require (module.js:596:17)\n    at require (internal/module.js:11:18)\n    at getAgent (/home/cap/www/node_modules/.registry.npmjs.org/pnpm/2.21.1/node_modules/pnpm/lib/node_modules/make-fetch-happen/agent.js:43:18)\n    at remoteFetch (/home/cap/www/node_modules/.registry.npmjs.org/pnpm/2.21.1/node_modules/pnpm/lib/node_modules/make-fetch-happen/index.js:310:17)\n    at cachingFetch (/home/cap/www/node_modules/.registry.npmjs.org/pnpm/2.21.1/node_modules/pnpm/lib/node_modules/make-fetch-happen/index.js:176:10)\n    at defaultedFetch (/home/cap/www/node_modules/.registry.npmjs.org/pnpm/2.21.1/node_modules/pnpm/lib/node_modules/make-fetch-happen/index.js:41:12)\n    at /home/cap/www/node_modules/.registry.npmjs.org/pnpm/2.21.1/node_modules/pnpm/lib/node_modules/fetch-from-npm-registry/lib/index.js:25:16\n    at /home/cap/www/node_modules/.registry.npmjs.org/pnpm/2.21.1/node_modules/pnpm/lib/node_modules/@pnpm/tarball-fetcher/lib/createDownloader.js:54:43\nAfter that I just run the install again and it works.. for me the error is Cannot find module 'jest-environment-jsdom' - v22.4.3.\nThe module is installed as part of the jest-cli deps, but not found by jest, presumably because it does weird things with require.. It does work when doing --shamefully-flatten, which is good news I suppose, but of course Jest should be fixed to work with hierarchical modules.. Jest works now, v23.6.0. @KSXGitHub   Yes! And if you want to use Babel 7 you need to override the dependencies as I explain in #1475. Ah yes, good idea, so this is a duplicate of that. Closing.. Scratch that - I was running pnpm on an existing npm install and it moved dirs to .ignored but it seems to have subtly caused problems so that the pnpm install actually failed:\nPackages: +1651\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nResolving: total 1650, reused 683, downloaded 967, done\n\u2009ERROR\u2009 EINVAL: invalid argument, readlink '/Users/wmertens/Documents/AeroFS/Projects/meatier/node_modules/@babel/code-frame'\nat Error: EINVAL: invalid argume\u2026\nSimply removing the node_modules directory and installing again solved the problem.. pnpm@2.27\nAnother, maybe different, case: I have multiple versions of prop-types installed while I believe I should only be getting one.\n```\n25862 $ pnpm ls prop-types\nproject@0.0.1 /path\n\u251c\u2500\u252c @yaska-eu/strato-db@2.3.3\n\u2502 \u2514\u2500\u2500 prop-types@15.7.2\n\u251c\u2500\u252c eslint-plugin-react@7.12.4\n\u2502 \u2514\u2500\u2500 prop-types@15.6.2\n\u251c\u2500\u2500 prop-types@15.7.2\n\u251c\u2500\u252c react@16.8.4\n\u2502 \u2514\u2500\u2500 prop-types@15.7.2\n\u251c\u2500\u252c react-apollo@2.5.2\n\u2502 \u2514\u2500\u2500 prop-types@15.7.2\n\u251c\u2500\u252c react-autosize-textarea@6.0.0\n\u2502 \u2514\u2500\u2500 prop-types@15.6.2\n\u251c\u2500\u252c react-big-calendar@0.20.3\n\u2502 \u251c\u2500\u2500 prop-types@15.6.2\n\u2502 \u2514\u2500\u252c react-overlays@0.8.3\n\u2502   \u251c\u2500\u2500 prop-types@15.6.2\n\u2502   \u2514\u2500\u252c react-transition-group@2.5.3\n\u2502     \u2514\u2500\u2500 prop-types@15.6.2\n\u251c\u2500\u252c react-cookie-banner@4.0.0\n\u2502 \u2514\u2500\u252c react-cookie@2.2.0\n\u2502   \u2514\u2500\u2500 prop-types@15.6.2\n[...]\n$ grep \\\"prop-types\\\":  node_modules/*/package.json\nnode_modules/eslint-plugin-react/package.json:    \"prop-types\": \"^15.6.2\",\nnode_modules/react-apollo/package.json:    \"prop-types\": \"^15.6.0\",\nnode_modules/react-autosize-textarea/package.json:    \"prop-types\": \"^15.5.6\"\nnode_modules/react-big-calendar/package.json:    \"prop-types\": \"^15.6.2\",\nnode_modules/react-daterange-picker/package.json:    \"prop-types\": \"^15.6.2\",\nnode_modules/react-dom/package.json:    \"prop-types\": \"^15.6.2\",\nnode_modules/react-dropzone/package.json:    \"prop-types\": \"^15.7.2\"\nnode_modules/react-google-login/package.json:    \"prop-types\": \"^15.6.0\"\nnode_modules/react-headroom/package.json:    \"prop-types\": \"^15.5.8\",\nnode_modules/react-helmet/package.json:    \"prop-types\": \"^15.5.4\"\nnode_modules/react-hot-loader/package.json:    \"prop-types\": \"^15.6.1\",\nnode_modules/react-images/package.json:    \"prop-types\": \"^15.6.0\",\nnode_modules/react-imported-component/package.json:    \"prop-types\": \"15.6.2\",\nnode_modules/react-inspector/package.json:    \"prop-types\": \"^15.6.1\"\nnode_modules/react-lazyload/package.json:    \"prop-types\": \"^15.5.6\",\nnode_modules/react-measure/package.json:    \"prop-types\": \"^15.6.2\",\nnode_modules/react-numeric-input/package.json:    \"prop-types\": \"^15.5.8\",\nnode_modules/react-redux/package.json:    \"prop-types\": \"^15.7.2\",\nnode_modules/react-router-dom/package.json:    \"prop-types\": \"^15.6.2\",\nnode_modules/react-router/package.json:    \"prop-types\": \"^15.6.2\",\nnode_modules/react-select/package.json:    \"prop-types\": \"^15.5.8\",\nnode_modules/react-share/package.json:    \"prop-types\": \"^15.5.8\"\nnode_modules/react-sortable-hoc/package.json:    \"prop-types\": \"^15.5.7\"\nnode_modules/react-stripe-checkout/package.json:    \"prop-types\": \"^15.5.8\",\nnode_modules/react-test-renderer/package.json:    \"prop-types\": \"^15.6.2\",\nnode_modules/react-text-mask/package.json:    \"prop-types\": \"^15.5.6\"\nnode_modules/react-tooltip/package.json:    \"prop-types\": \"^15.6.0\"\nnode_modules/react-transition-group/package.json:    \"prop-types\": \"^15.5.6\",\nnode_modules/react/package.json:    \"prop-types\": \"^15.6.2\",\nnode_modules/redbox-react/package.json:    \"prop-types\": \"^15.5.4\",\nnode_modules/redux-form/package.json:    \"prop-types\": \"^15.6.1\",\nnode_modules/searchtabular/package.json:    \"prop-types\": \"^15.6.0\",\nnode_modules/slate-react/package.json:    \"prop-types\": \"^15.5.8\",\nnode_modules/sortabular/package.json:    \"prop-types\": \"^15.6.0\",\nnode_modules/styled-components/package.json:    \"prop-types\": \"^15.5.4\",\nnode_modules/treetabular/package.json:    \"prop-types\": \"^15.6.0\",\n```\nAs you can see, all deps have the version as ^ so I would expect all to get the latest proptypes v15.7.2. Am I wrong?\n. @octogonz Isn't that just\npnpmfile.js\n``js\nconst readPackage = (pkg, context) => {\n    if (/@types/.test(pkg.name)) {\n        pkg.peerDependencies = {...pkg.peerDependencies, ...pkg.dependencies}\n        pkg.dependencies = {}\n        context.log(replacing ${pkg.name}'s deps with peerDeps`\n        )\n    }\n    return pkg\n}\nmodule.exports = {hooks: {readPackage}}\n```\nMaybe it can keep all the dependencies in module scope and then when the main package is visited (how to know this \ud83e\udd14) put all the peerDeps into its deps.\nStill, that's just the same as doing a flat install.. @zkochan I think that pnpm currently does resolution wrong. The Yarn maintainer wrote:\n\nIt's just that, at a basic level, Yarn will only ever resolve one range to one version, regardless of the position of the package in the dependency tree (this is different from npm which might resolve the same range to different versions depending on the package location on the dependency tree, for the better or worse). This mechanism is a cornerstone of our architecture, and unlocks various core optimizations.\n\nBut as I show in my example above, there are no conflicting ranges for prop-types, they can all resolve to the latest 15.7.2 which would be the single version that Yarn talks about, but pnpm instead resolves to both 15.6.2 and 15.7.2.\nI think that behavior is incorrect.. So, is this fixed or not?\nI'm encountering an integrity error too, even with --network-concurrency 1, after I tried to install on a flaky network connection.\nI wish the error included the failing package, so I could remove it from the cache and refetch.\nThere is no shrinkwrap.yml yet, and I removed the package-lock.json to be sure.\nOutput:\nERROR\u2009 sha512-tDMYfVtvpb96msS1lDX9MEdHrW4yOuZ4Kdc4Him9oU796XldPYF/t2+uKoX0BBa0hXXwDlqYQbXY5Rzjzc5hBA== integrity checksum failed when using sha512: wanted sha512-tDMYfVtvpb96msS1lDX9MEdHrW4yOuZ4Kdc4Him9oU796XldPYF/t2+uKoX0BBa0hXXwDlqYQbXY5Rzjzc5hBA== but got sha512-WbRFMvmj/zDA0xqaqJOhK2rwkKrv4I26VZD7Kz6+3uChO7RpDnR+ZNSC+IUzeSXgizVZ2ngFVHG4dDD37AyxvQ==. (1735417 bytes)\nat on                     /Users/wmertens/bin/node_modules/.registry.npmjs.org/pnpm/2.17.7/node_modules/pnpm/lib/node_modules/ssri/index.js:328  const err = new Error(`$\u2026\nat emitNone               events.js:111\nat emit                   events.js:208\nat endReadableNT          _stream_readable.js:1064\nat _combinedTickCallback  internal/process/next_tick.js:138\nat _tickCallback          internal/process/next_tick.js:180\nResolving: total 1722, reused 1719, downloaded 0\nError: sha512-tDMYfVtvpb96msS1lDX9MEdHrW4yOuZ4Kdc4Him9oU796XldPYF/t2+uKoX0BBa0hXXwDlqYQbXY5Rzjzc5hBA== integrity checksum failed when using sha512: wanted sha512-tDMYfVtvpb96msS1lDX9MEdHrW4yOuZ4Kdc4Him9oU796XldPYF/t2+uKoX0BBa0hXXwDlqYQbXY5Rzjzc5hBA== but got sha512-WbRFMvmj/zDA0xqaqJOhK2rwkKrv4I26VZD7Kz6+3uChO7RpDnR+ZNSC+IUzeSXgizVZ2ngFVHG4dDD37AyxvQ==. (1735417 bytes)\n    at Transform.on (/Users/wmertens/bin/node_modules/.registry.npmjs.org/pnpm/2.17.7/node_modules/pnpm/lib/node_modules/ssri/index.js:328:19)\n    at emitNone (events.js:111:20)\n    at Transform.emit (events.js:208:7)\n    at endReadableNT (_stream_readable.js:1064:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\nError: sha512-tDMYfVtvpb96msS1lDX9MEdHrW4yOuZ4Kdc4Him9oU796XldPYF/t2+uKoX0BBa0hXXwDlqYQbXY5Rzjzc5hBA== integrity checksum failed when using sha512: wanted sha512-tDMYfVtvpb96msS1lDX9MEdHrW4yOuZ4Kdc4Him9oU796XldPYF/t2+uKoX0BBa0hXXwDlqYQbXY5Rzjzc5hBA== but got sha512-WbRFMvmj/zDA0xqaqJOhK2rwkKrv4I26VZD7Kz6+3uChO7RpDnR+ZNSC+IUzeSXgizVZ2ngFVHG4dDD37AyxvQ==. (1735417 bytes)\nThe previous run failed here:\nResolving: total 1722, reused 1533, downloaded 188\nDownloading registry.npmjs.org/typescript/3.1.6: 1.74 MB/7.45 MB\nFetchError: request to https://registry.npmjs.org/typescript/-/typescript-3.1.6.tgz failed, reason: getaddrinfo ENOTFOUND registry.npmjs.org registry.npmjs.org:443\n    at ClientRequest.req.on.err (/Users/wmertens/bin/node_modules/.registry.npmjs.org/pnpm/2.17.7/node_modules/pnpm/lib/node_modules/node-fetch-npm/src/index.js:68:14)\n    at emitOne (events.js:116:13)\n    at ClientRequest.emit (events.js:211:7)\n    at TLSSocket.socketErrorListener (_http_client.js:387:9)\n    at emitOne (events.js:116:13)\n    at TLSSocket.emit (events.js:211:7)\n    at emitErrorNT (internal/streams/destroy.js:64:8)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\nBased on that I took a look here:\n$ ls -l ~/.pnpm-store/2/registry.npmjs.org/typescript/3.1.6/\ntotal 2080\ndrwxr-xr-x 10 wmertens staff     320 Nov  8 08:44 _tmp_65635_d5149cc0201e74a543cde88c1efbf35c\ndrwxr-xr-x 10 wmertens staff     320 Nov  8 08:46 _tmp_66032_7ce8ff3da6b0244cae53b34c4bfef3b1\ndrwxr-xr-x  4 wmertens staff     128 Nov  8 09:06 _tmp_69757_dc2216bb306d6fd55c53ca7e905dd61d\ndrwxr-xr-x 10 wmertens staff     320 Nov  8 09:12 _tmp_71228_401d863dbb7aa301404adc6d60aff2cf\n-rw-r--r--  1 wmertens staff 1735417 Nov  8 07:53 packed.tgz\nfilesize matches, so I removed that directory, and pnpm i worked.\nIs this a different bug? Maybe the store should automatically retry fetching? Or at the very least not store intermediate downloads at the final location?. @pgonzal yes, the file was truncated. sorry I dropped the ball on this. My problem was actually badly downloaded files being treated as correct - downloading them multiple times won't fix that underlying problem. I'll make an issue.. I checked the docs and anything can be in these bin scripts, but js is very common.\nSo I propose that if the name matches /\\.m?js/, or the first line of the file matches /^#!.*\\/node\\b/, pnpm makes a JS wrapper as above, otherwise it wraps it as before.\nThe reason is that there are many automated scripts that do things like node ./node_modules/.bin/foo ... and the shell-based wrapper breaks that.. That is so awesome!\nI fixed it with this pnpmfile.js:\n``js\nconst babelCoreVersion = '7.0.0-bridge.0'\nconst readPackage = (pkg, context) => {\n    // Fix Jest dependencies on babel\n    const babel = pkg.dependencies && pkg.dependencies['babel-core']\n    if (/6/.test(babel)) {\n        pkg.dependencies['babel-core'] = babelCoreVersion\n        context.log(replacing ${pkg.name}'s babel-core dep ${babel} with ${babelCoreVersion}`\n        )\n    }\n    return pkg\n}\nmodule.exports = {hooks: {readPackage}}\n``. I see now that I had a typo in my pnpmfile, so I didn't get the changes I wanted, and I also see that to re-evaluate all deps, I need to delete theshrinkwrap.yaml` file, correct?\nMaybe that should be in the documentation?. No, I was wrong, to re-evaluate deps, you need to rm -r shrinkwrap.yaml node_modules/.\nIs that acceptable, or should there be some CLI flag that re-evaluates all dependencies?. Aha! I forgot about that, just noticed that older issue. It's probably fixed, I'll close and reopen if I notice again.. indeed there are 2 changelogs: https://unpkg.com/check-types-mini@5.7.8/. Perhaps the fix should be to first try writing, and if you get EEXIST, stat the destination and see if it has different case, and if it does, overwrite (or not, but I'm thinking npm just overwrites). That fix looks great, thanks!\n\nThis has a downside though, that the package will always be relinked from the store, as it will miss a file.\n\nThose packages will then stand out and hopefully the authors will fix the case sensitivity.. I don't know the code, but shouldn't a custom location take precedence over the standard location?. ",
    "chpio": "there is still no message when linking to packages with a peerDep. It's not even installing a local instance of the peerDep at the moment.. ",
    "Alexgalinier": "It s Artifactory from JFrog, with a simple npm module which acts as a proxy to npm registry. It looks for local modules (cache ans homemade) then remote ones.. Yes it's set to true, here it is:\n_auth=base64AuthKey\nalways-auth=true\nemail=username@company.com\nstrict-ssl=false\nregistry=http://domain/artifactory/api/npm/npm-repo\nprogress=false\nTo be honest i've not checked what is sent to artifactory. As it's done by npm install i hoped for the same behavior with pnpm install. Tell me if you need something else.. Sounds good to me.\nI can't ensure you it works, i had to move on and use an other tool. We have changed our artifactory now so i can't re-produce it. I'll close and hope it will help others if you support this legacy way.\nThx. ",
    "jvanbruegge": "It would also be important that old logs get deleted on a regular basis. E.g. when writing a new log, delete logs older tham two weeks.\nIf not, they will keep filling up your disk space. For me it wouldnt matter, but it might be useful to retain logs in case of crashes etc. Still in newest version and also with -S and no parameter at all. This is for create-cycle-app, the actual project only has it as dependency everything else is transitive. let me check.... ok, yeah I am dumb. Thank you. At the moment I can't really give input on this as we have not yet updated to 2.17 and we do not have a workspace yaml yet. ",
    "samueldjack": "Sorry, should have made it clear: I'm using Visual Studio 2015, not VS Code. Visual Studio automatically runs npm install whenever package.json is changed.. I discovered something else related to this: merely having Visual Studio open seems to cause problems: see #644. . ",
    "arkon": "I don't think just saying \"disable it\" is really solving the issue since Visual Studio does it by default. It'd be unreasonable to expect everyone that starts pnpm (or even unknowingly uses it because of some scripts) to also disable the feature. It ought to be handled in a more graceful manner, like what @zkochan suggested.. ",
    "tiagobnobrega": "@zkochan  Do You think it's reasonable to create a script that throws an error when not runned by pnpm and hook that in preinstall script?  It could be something like \"pnpm checkpm\" or even a separate package for that. It seems kinda hacky, but since it would be optional, maybe it's not all bad.. ",
    "williamli": "I just came up with a \"hack\" around.\nIn your package.json, you can define an \"install\" script that runs after npm install is called.\n\"scripts\": {\n    \"install\": \"echo SOME_WARNING && rm -rf node_modules && pnpm install && echo SOME_THANK_YOU_MESSAGE\",. Just did some Googling and saw a similar question posted here:\nHow can you prevent developers from mistakenly installing a package with npm?. ",
    "staltz": "I really would like to see this happen with Dat. Is the store server installation speed the only hurdle? Could we build it anyway? I would prefer slow decentralized install over fast centralized installs.\nI discussed with mafintosh some months ago that the approx. best way of doing this with Dat is one Dat Archive per author, so essentially installing package foo would be the address dat://7e7432..a4109b/foo and we could also create local aliases for authors, so you could do pnpm dat-alias staltz 7e7432..a4109b. Storage shouldn't be a problem, in fact authors would be incentivized to keep their Dat archive small, because the smaller the archive, the more likely people would easily seed it.\nIf you want guidance/help how to do this, you can count on me to get started.. Thanks!! :). ",
    "waylandc": "Also can confirm what @foisonocean is reporting, pnpm 2.15.0 with node 10.9.0 still has this problem of installing global packages.\n` waylandchan@bctmac  ~/sandbox/orderbook  pnpm list -g --depth=0                          \n/usr/local/Cellar/node/10.9.0/pnpm-global/1\n\u2514\u2500\u2500 pnpm@2.15.0\nwaylandchan@bctmac ~/sandbox/orderbook  which tsc                                       \ntsc not found\n waylandchan@bctmac ~/sandbox/orderbook  pnpm install -g typescript                    \nPackages: +1\n+\nResolving: total 1, reused 1, downloaded 0, done\n/usr/local/Cellar/node/10.9.0/pnpm-global/1:\n+ typescript 3.0.3\nwaylandchan@bctmac  ~/sandbox/orderbook  which tsc                                     \ntsc not found\n waylandchan@bctmac  ~/sandbox/orderbook  pnpm --version                                \n2.15.0\n waylandchan@bctmac  ~/sandbox/orderbook  node --version                                  \nv10.9.0\n waylandchan@bctmac ~/sandbox/orderbook  npm bin -g                                      \n/usr/local/bin\n waylandchan@bctmac ~/sandbox/orderbook  pnpm bin -g                                     \n/usr/local/bin\n waylandchan@bctmac ~/sandbox/orderbook  ls -al /usr/local/Cellar/node/10.9.0/bin/tsc    \n-rwxr-xr-x  1 waylandchan  staff  2857 Sep  4 18:55 /usr/local/Cellar/node/10.9.0/bin/tsc\n waylandchan@bctmac ~/sandbox/orderbook  date                                           \nTue Sep  4 18:56:06 HKT 2018\n `                                     . Created new issue 1360. ",
    "MarcBanc": "$ pnpm -v\n0.65.4\nNot fixed:\nURL from our gitlab: git@site:project/repo.git\npackage: \"git+ssh://git@site:project/repo.git#master\"\nerr: \n      name: \"Error\"\n      message: \"Command failed: git ls-remote --refs ssh://git@site/:project/repo.git master\\nGitLab: The project you were looking for could not be found.\\nfatal: Could not read from remote repository.\\n\\nPlease make sure you have the correct access rights\\nand the repository exists.\\n\"\n      code: 128\nit changes url to:\nssh://git@site/:project/repo.git\nthan \nssh://git@site/project/repo.git\nso\nthere is unwanted : in parsed url\n. ",
    "wintercounter": "Strange, for me it fixes.. ",
    "aaronfrost": "I have the same issue as well. It looks like when you are using an organization, that may be the problem. Also have the same issue as @FalloutPL. Here is a screenshot of my pnpm error log\n\nI am not depending on pnpm yet. But sounds way fast. I would love it. \n. To add some additional info... my package.json has several other git urls in it. This is the only one that it fails on. So... this tells me that it DOES work with some git urls, but not others. And as I looked at all of the git urls, that was the one difference... that this one uses a : before the organization name, where the others don't. So, I think it must be around that specific usage. . I noticed that some of our other internal git urls in the package.json were formatted with the / before the org name instead of the :. So I changed this one, and tried pnpm i again, and it worked. So... \n\nThose who have this same issue, true that. \nFor those who can fix this, it seems to be around that specifically. \n\n\u2764\ufe0f thanks for building this. It's pretty awesome!. ",
    "moos": "Likewise with @FalloutPL.   Similar to yarn#513.  We also have multiple dependencies that use the git:ssh...:user/repo format.  Bummer!\nbash\n$ pnpm -v\n0.68.0. I can take a look -- can you point me to the appropriate test file?. Indeed, it's coming from npm-package-arg.  I've opened #22 on them.  Incidentally, it seems to happen only for non-github.com hosted repos.\nA quick hack would be to use saveSpec rather than fetchSpec in fromRepo.ts and strip the initial 'git+'.  Let's hope that's not necessary if they response quickly.. Seems to be fixed -- i'm not getting the error any longer.. ",
    "kopach": "Problem is still valid for me.\nnow it shows:\nERROR Registry returned 403 for GET on ...\npnpm version command: \n{ npm: '4.1.1',\n  ares: '1.10.1-DEV',\n  http_parser: '2.7.0',\n  icu: '57.1',\n  modules: '48',\n  node: '6.5.0',\n  openssl: '1.0.2h',\n  uv: '1.9.1',\n  v8: '5.1.281.81',\n  zlib: '1.2.8' }\npnpm -v\n0.65.4. Issue still valid.\nThe same error:\nERROR Registry returned 401 for GET on...\npnpm -v\n0.65.6. @zkochan, thanks for fast response. Anyway, this is still not my case :)\nGist is here (I've added one more file to previous gist). Issues is still reproducible :(\npnpm -v\n0.66.2. Now a bit different error, but problem still not solved for my case:\nERROR This request requires auth credentials. Run `npm login` and repeat the request\npnpm -v\n0.66.4. I do not have shrinkwrap.yaml file. I do have npm-shrinkwrap.json, but anyway, even if I remove it - the same error appears. now I'm getting an error: \nERROR This request requires auth credentials. Run `npm login` and repeat the request.\nUpdated gist with new pnpm-debug.log file. unfortunately the same error \ngist updated\npnpm -v\n0.73.1. @zkochan, registry is set to https://artifactory.finantix.com/artifactory/api/npm/npm-release. hooray \ud83c\udf89 , with this workaround it works now, thanks. ",
    "Meeeeow": "@zkochan I'm using nvs(node version switcher), with C:\\Users\\Me\\AppData\\Local\\nvs\\default in user's PATH. For Linux, maybe this? https://www.cyberciti.biz/faq/linux-unix-command-findout-on-which-partition-file-directory-exits/\nI don't know how yarn works. ",
    "pstoev": "@zkochan how do you think that check would work? Checking against only physical drives? I think the issue is reproducible on logical drives as well.... > thanks, I hoped it would return /media/dym as root. In this case we'll have to use the drivelist package. I haven't found anything else\n@zkochan wouldn't it be enough if we \"extract\" (e.g. dir.substring second slash, regex, etc) info from the dir property. I'm talking the path.parse approach?. @minecrawler that's only for linux. path.parse seems more universal to me across different OS's. ",
    "minecrawler": "\non Linux /media//\n\nwhat if I do \n$ sudo mount /somedir && cd /somedir && pnpm install\n\non Linux, with /somedir defined in /etc/fstab? What about\n$ sudo mount /dev/sdc1 /mnt/tmp && cd /mnt/tmp && pnpm install\n\n?\nOn Linux, any directory might be on a different disk! Not everyone uses Ubuntu and its way of handling some things.... Here is a way to get the filesystems on Linux: https://www.cyberciti.biz/faq/linux-command-list-mounted-devices-in-terminal/\ntl;dr: read the file /proc/mounts. On each line, the first bit is the partition (for example /dev/sda3) and the second bit is the mount-point (for example /). You will have to check the given paths against the mount-points and find the closest match (be careful to not only always find the root-fs). @pstoev yeah, true, but you cannot parse a path on linux in order to get the mount point. Any directory could be located on any disk and partition. There is no way to tell just by looking at the path, as is the case for Windows (I don't know about macOS, however it is *NIX at heart, so it might have the same problem). @Meeeeow Don't use commands/3rd party programs from within your source code. You never know if they exist (even though the GNU utils are popular, there are other options available!). Read the source of truth yourself (/proc/mounts). I already posted a guide earlier.. @zkochan  Would it be possible to hard-fail when folders were found, which seem to be installed by \"a different package manager\" and ask the user to use a certain command (similar to pnpm link) to either ignore them and just use the info from package.json or delete them manually? Then the log could be like \nsh\n$ pnpm i commander\nERROR: Found \"some-github-repo-package\" which was installed by a different package manager.\nPlease remove that package from node_modules or add it to the dont-care-list!\n$\nsh\n$ pnpm dont-care some-github-repo-package\nAdded the package \"some-github-repo-package\" to the dont-care list. pnpm will use the version information from `package.json` for dependency resolving, but not update that package any more.\n$\nsh\n$ pnpm i commander\nWARN: Found \"some-github-repo-package\" which was installed by a different package manager.\ncommander                                                       1.2.3 \u00b7\n$\nsh\n$ pnpm update .\nWARN: Found \"some-github-repo-package\" which was installed by a different package manager.\nERROR: \"some-github-repo-package\" does not meet the minimum needed version for \"some-other-package\". Please update \"some-github-repo-package\" manually to meet the required version \"1.2.3\".\n$\n(after updating the package manually)\nsh\n$ pnpm update .\nWARN: Found \"some-github-repo-package\" which was installed by a different package manager.\ncommander                                                       1.2.4 \u00b7\nsome-github-repo-package                              1.2.3 \u00b7\nsome-other-package                                         1.0.1 \u00b7\n$. ",
    "tunnckoCore": "Actually, does fixing that issue means that it will be allowed cross-device linking? If yes, ping me, because don't want to work and store on same device ;d I just have totally separated partition for caches, backups and such things.. @zkochan that's very sad ;/ One more thing why won't use it. Maybe one day when I dont have separate partitions, but.. It's not the only problem. More important kinda problem for me is that non-flat tree, because it messes with my planned package development workflow. Yea, otherwise, it is awesome and super fast exactly because the hardlinks and non-flat architecture.\nI just kinda like the trick that i found using flat mode. Let me explain the plan, it's a bit offtopic, but shows the cases/scenario why some like me won't use it at el.\n\nI'm using StandardJS, Prettier and Atom with Linter-ESLint and Prettier-Atom packages\nI have .eslintrc.json file in my packages\nMy packages just includes standard as dependency\nthe eslintrc file (notice that it isn't even eslintConfig field) is intentional, it gives great IDE feeling\nfirst, because the Linter ESLint recognizes it\nsecond, allows contributors to just use their global eslint, instead forcing them to have standard globally or forcing them to run npm scripts of the package (no matter that i have script that executes standard)\nthird, extensibility - for things like enforcing standard/object-curly-even-spacing: error, always, just because hate to not have parens which is allowed in standard by default\nfourth, it resolves the eslint-config-standard that is installed by the standard package\nMy npm scripts are fantastic, they just not allow even to be commited something that is wrong\nand actually i even don't need them, exactly because that integration that i'm trying to accomplish\neverything is realtime in the Atom.. even don't need to run any scripts, because linting and formating is done on save\n\nSo, hope that clear the situation a bit.. > Also I don't see in your workflow where you leverage the flattened node_modules structure.\nAtom Editor's ESLint resolves eslintrc which in turn will try to resolve eslint-config-standard and if I use Pnpm the Linter-ESLint will throw an error that it can't resolve the StandardJS config because the tree isn't flat. To fix that, one solution is to add eslint-config-standard to my devDeps too, but I don't. If i add it, I'll just add all the eslint-* stuff instead of standard. But I don't want to add them, because the GreenKeeper bumping spam, so i always try to have as low deps as possible.\n\nIt seems you just use global packages\n\nNo. Almost never, just have rollup, mocha (hence, didn't write mocha for years ;d) and standard just for my fast fingers.\n\nIt will still use not more space per partition than npm or yarn.\n\nyea, in any way, in my case it won't be so much, and so i can reconsider using Pnpm one day when i'm tired of yarn.\nIn any way, keep doing the good job! :tada: . I really don't see how one can make both ESLint and PNPM work.\nDon't know why, but I am trying again with PNPM and monorepo approach. Pnpm is freaking fantastic and is totally for me, because I'm on pretty old hardware and both NPM and Yarn are against me. Yea, fetching and requesting is magically fast and this not bother me, it's near instant even with slow connections (I'm with great one, but just to say it). But the linking is awful. Both Yarn and NPM are creating some temp directories and files in the /tmp, which is kinda okey - 1) sometimes if I don't cleanup for a long time and don't restart my PC for days or weeks... it's really starting to be hundreds of folders, and I'm sure that it slow the whole machine dramatically and also eats RAM & Swap. 2) if I cleanup, e.g. rm -rf /tmp/yarn* /tmp/npm* it heals the situation for a while and linking 8-10-20k packages (8k is best cases scenario with just ESLint and your config [airbnb for example]) is okey, but for very short time.\nAnd lets talk about ESLint (and probably other tooling that are using presets and shareable configs). It's just impossible to get it working. Looking more deeply on that, I can consider that it definitely feels like some problem with Pnpm.\nIs there anyone that is using Pnpm and ESLint (both normal and monorepo scenarios)? I thought I will look what is done in this repo, but it uses TypeScript, so.. \n@zkochan what's the current workaround? It's not only a case with the eslint-plugin-import and its resolvers. It's no matter what eslint config you are using, it just not structures the directories correctly (i'll push a repo in a bit to show).. Shamefully flatten doesn't help, for the last couple of hours, I played few dozen variants, with and without it.\nI'll report back when I create a demo repo and explanation.. > @fjorgemota: it's sad to have to enter that argument everytime I want to use pnpm.\nAdd it in .npmrc if I remember correctly. I was adviced that. \nBut still. Even with this flag the things not always work.\n\n@zkochan: Angular 8 supports pnpm\n\nWhat that means?! :laughing: . Yup, currently, installing the resolver where installing the import plugin, it works.\nI pray for new release of eslint-plugin-import as soon as possible, because last is very old (october).. It's not the only issue.\nInstalling and using babel-eslint, it reports that it can't find estraverse module, which is dependency of babel-eslint..\nSo strict isn't good thing. I have great willing to switch to PNPM for moths, but it seems that it does too much headaches and is too strict, obviously.\nIn future there always will be such issues, exactly because of that. That's why i'm suggesting some option.. Cool, will try it. ;]. And yea. After few months, i got to this again. Reminding why i'm not using pnpm.\nShamefully flatten isn't really a good way to go. Can you think for something that fixes this problem with ESLint, specifically?\nI really won't go using shamefully flatten, only because my flow requires ESLint... that's ridiculous?\nI really want to use PNPM, because it features a lot of new things, solves much problems, has monorepo managing out of the box with the recursive command and so much more.. But that problem... it's really the only downside (pretty significant) of this amazing project.. Or at least, is there possibility to add shamefully-flatten option to some config file? global npmrc or local, or some specific pnpm config?\nIt would be shamefully-ridiculous ;d if i should add it to every command or force my contributors to do that.. The problem. It's pretty easy.\nYou have package that has eslint and some config as devDependencies, and eslint just could not find some of the deps which are included in the config (usually some other configs and plugins).. Oookey, that sounds good, i'll try it.\nedit: Yup.. I would propose pnpm exec or such thing.\nSince pnpm follows the npm convention of commands and etc, e.g. you can do pnpm lint as one may do with yarn lint which calls the lint script, OR if there is executable with that name.\nSo with that proposal we will be able to do pnpm exec eslint src --fix for example. In which case it will look for ./node_modules/.bin/eslint if not found then it will assume it is monorepo, so search in the ../../node_modules/.bin.. Lets illustrate with separate cli what should happen, for example called monora.\nConsider the following monorepo structure\nmonorepo/\n- package.json\n- node_modules/\n- packages/\n  + foo\n    - package.json\nso two cases\n\nwe are in the monorepo/packages/foo and call monora lint\nlook at the package.json\nif private !== true then prepend both ./node_modules/.bin and ../../node_modules/.bin to the $PATH variable\ncheck if the lint script exist - execute it\notherwise search for lint executable in both same bin folders and call it\notherwise exit with non-zero code ENOENT\n\n\nwe are in to monorepo/ and call monora lint\nlook at the package.json\nif private === true then we are in the monorepo root, so prepend only the ./node_modules/.bin\ncheck if the lint script exist - execute it\notherwise search for lint executable in ./node_modules/.bin and call it\notherwise exit with non-zero code ENOENT\n\n\n\nIt would be kind of like what pnpx (tried to using it and seems to work great, except that it's not feeling good \"install\" process to be done every time you want to call a task) and npx are, but without the installing.\nI'm thinking to release such package anyway, because it would be useful and would work for all the package managers, cuz that is common problem. It will also have programmatic API and support for the pre and post hooks.  \nSo later if considered pnpm exec could be implemented on top of it.. Implementation is simple.\nthe CLI is working.\n```js\n!/usr/bin/env node\n/*\n * Apache-2.0 License, Charlike Mike Reagent\n /\n'use strict';\nconst path = require('path');\nconst proc = require('process');\nconst execa = require('execa');\nconst argv = proc.argv.slice(2);\nconst cwd = proc.cwd();\nconst pkgPath = path.resolve(path.join(cwd, 'package.json'));\nconst pkg = require(pkgPath); // eslint-disable-line global-require, import/no-dynamic-require\n// TODO: support pre and post scripts hooks\n// TODO: support API\nconst scriptName = argv.shift();\nconst cwdNodeBin = path.resolve(path.join('node_modules', '.bin'));\nconst upNodeBin = path.resolve(path.join('..', '..', 'node_modules', '.bin'));\nproc.env.PATH = ${cwdNodeBin}:${proc.env.PATH};\nconst scriptCommand = pkg.scripts[scriptName];\nconst args = scriptCommand ? scriptCommand.split(' ') : argv;\nconst cmd = scriptCommand ? args.shift() : scriptName;\n// we are in monorepo package cwd\nif (pkg.private !== true) {\n  proc.env.PATH = ${upNodeBin}:${proc.env.PATH};\n}\nexeca(cmd, args, { env: proc.env, stdio: 'inherit' });\n``. \nOr probably to be implemented behind therun`?\n```\nnpm run eslint src --fix\nand in Pnpm\npnpm run eslint src --fix\nand Yarn (already partially possible)\nyarn eslint src --fix\n```\nThe case of Yarn: it already can run executables if they exists in node_modules/.bin, but not work in the monorepo case.\nI'm gonna propose PRs to all th managers. Or would it be better to unify it around new command name e.g. npm exec, yarn exec and pnpm exec?\nThoughts?. Okey, fully working example and API is living at olstenlarck/monora \nTests are still missing, but that's only because it is tricky to implement - will need a bit more things to the api.\nIt does exactly what i explained in above comments with single dependency and 2 cool free bonuses: 1) defining scripts through \"js config file\" (optional), escaping the limitation of json, like (npm|yarn|pnpm).scripts.js which can be CJS or ESM; and 2) shareable presets.\nThe scripts/tasks in this config file are nothing more than just exporting a string const. Everything is exactly the same as in pkg.scripts territory, except it is in js file and ran through execa. \nHow it can be used here to implement pnpm exec command? Pretty straightforward and easy.\njs\n// `manager` option controls what the optional config file name can be\n// in this case `pnpm.scripts.js` or `monora.config.js` (always possible)\nmonora({ manager: 'pnpm' }).catch(() => process.exit(1))\nI'm also discussing the scripts npm package with its owner @jaredhanson, which would be amazing if he donate it :). > pnpm does not require a private package.json file in the root of the repo. pnpm searches for a pnpm-workspace.yaml to find the root of the repo.\nYea, i know. That's cool thing too.\n\nHowever, installing things in the root of the repo means that every single package in the repo may have access to dependencies that are not declared in their package.json.\n\nI understand that, and that's one of the general principles of pnpm - to not have access to other deps other than those defined in package's package.json.\nBut in same time, installing tooling as devDependencies in the monorepo root, is one of the main things of monorepo features - others are management, installation and managing versions (synced or independent). But also, I think that this isn't so big and common problem. The common case is that every package is only using its depedencies and in its test its devDependencies. There is eslint rules/plugins, best practices and such things that will signal you if you are using something that isn't in the dependencies. And it should be that way and that's the correct way.\n\nI suggest to make it just for running bins and ignore scripts.\n\nThe js config file is just a bonus, a result fact from wrapping up the API interface. It's completely optional thing and could be disabled entirely.\nNo, you can't ignore scripts. Because the whole thing is that we can't run does scripts (CLI bins defined in those scripts), because the bins are actually installed in the monorepo root. So both pnpm run and pnpm recursive run don't work well.\nExample for what i'm talking:\nIf you have installed eslint in the root and have\njson\n{\n  \"scripts\": \"eslint src --fix\"\n}\nthen you can run it without problems. If above is in some package then you get error that eslint is not found, because it resides in the monorepo root node_modules/.bin and not in the package/node_modules/.bin folder.\nWhat's currently possible with monora is the following\n```\nif pkg.scripts.cov is 'nyc ava'\nmonora cov --tap\nalready possible with Yarn\nyarn cov --tap\nbut also just running installed CLIs\nmonora ava --tap\nmonora eslint src --fix\nalready possible with Yarn\nyarn ava --tap\nyarn eslint src --fix\nor existing platform commands\n(not possible with yarn)\nmonora ls -al\nmonora echo \"foo bar\"\n```\nWhat i want to propose to all the package managers is to have lets say exec command, which works in the common case (single-package repo project) and also in the monorepo case. It will easier a lot of things.\nIf not command name that is same across the managers, then we are still good, because all that thing is implemented as separate package, so every manager can decide behind what command to be represented:\n\nIn the @npm case it make sense to be behind the npm run\nIn the @yarnpkg it make sense to be behind yarn - since it already works mostly that way \nIn pnpm case make sense to be behind pnpm run too, but pnpm exec would be good too.\n\nAll that said, even if not implemented anywhere, there is one handy cool trick/workaround that can be used - all package mangers has the start command, so you can define pkg.scripts.start and execute/manage everything through that start command. The @deepsweet's Start already takes advantage of this - so whatever the package manger you are using you can yarn start dev, yarn start cov or npm start dev and npm start test. :). ",
    "jiripospisil": "Thanks!. It looks like it doesn't necessarily have to be a recursive install. The following reproduces it as well:\n/tmp/tp-20180511211151 \u2234 pnpm install\nAlready up-to-date\n/private/tmp/tp-20180511211151/node_modules/testing -> vendor/testing\n/tmp/tp-20180511211151 \u2234 pnpm install\nPerforming headless installation\nAlready up-to-date\n/tmp/tp-20180511211151 \u2234 pnpm rebuild\n\u2009ERROR\u2009 Cannot read property 'dependencies' of undefined\nat getSubgraphToBuild  \u2026ode_modules/supi/lib/api/rebuild.js:155\nat                     \u2026ode_modules/supi/lib/api/rebuild.js:186\nat next\nat                     \u2026/node_modules/supi/lib/api/rebuild.js:7\nat new Promise\nat __awaiter           \u2026/node_modules/supi/lib/api/rebuild.js:3\nat _rebuild            \u2026ode_modules/supi/lib/api/rebuild.js:133\nat <anonymous>         \u2026ode_modules/supi/lib/api/rebuild.js:122\nat next\nat fulfilled           \u2026/node_modules/supi/lib/api/rebuild.js:4. @zkochan Thanks!\n\nThe bcrypt package in the vendor directory should get rebuild.\n\nNow that I read it again, it's actually not the correct expectation, right? It would have to be pnpm recursive rebuild for it to do that.. It's not even necessary to remove shrinkwrap.yaml to trigger some kind of weirdness. Consider this:\npnpm init -y\npnpm i lodash underscore\n```\npnpm update lodash\nAlready up-to-date\ndependencies:\n- lodash ^4.17.10\n```\nAt this point lodash is not in package.json but it's still present in shrinkwrap.yaml and in node_modules\n```\ngrep lodash package.json\ngrep lodash shrinkwrap.yaml\n  lodash: 4.17.10\n  /lodash/4.17.10:\n  lodash: ^4.17.10\n```\nThere are variants of the underlying bug. I first encountered this when I tried to upgrade the global PNPM (and a few other packages) and it actually removed itself - as in, the package was gone from my system. I had to install it again with NPM.\nI encountered a similar issue a few minutes ago without giving any arguments to pnpm update (that's why I'm here). I'll try to extract a minimal repro from the project and post it here.\nOS: MacOS\nNode.js: v10.8.0\nPNPM: 2.13.1. Okay, this one actually physically removes the pino package from node_modules:\n{\n  \"name\": \"foo\",\n  \"private\": true,\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n  },\n  \"author\": \"foo\",\n  \"license\": \"UNLICENSED\",\n  \"dependencies\": {\n    \"config\": \"^1.30.0\",\n    \"http-shutdown\": \"^1.2.0\",\n    \"koa\": \"^2.5.0\",\n    \"koa-body\": \"^2.6.0\",\n    \"koa-helmet\": \"^4.0.0\",\n    \"koa-router\": \"^7.4.0\",\n    \"lodash\": \"^4.17.5\",\n    \"pino\": \"^4.13.0\"\n  },\n  \"devDependencies\": {\n    \"@types/koa\": \"^2.0.44\",\n    \"@types/koa-router\": \"^7.0.27\",\n    \"@types/lodash\": \"^4.14.104\",\n    \"@types/node\": \"^10.1.3\",\n    \"@types/pino\": \"^4.7.1\",\n    \"tslint\": \"^5.9.1\",\n    \"typescript\": \"^2.7.2\"\n  }\n}\npnpm i\npnpm update\nAlready up-to-date\n```\npnpm update pino\nAlready up-to-date\ndependencies:\n- pino ^4.13.0\n```\n```\npnpm update\nPackages: -18\n\ndependencies:\n- pino 4.17.6\n```. Might be related to #1200 . ",
    "amiram": "It worked! I had to change the local .npmrc in my project (who put it there? is it pnpm?). Now I have 401 for all package downloads.. [server_address]:_authToken=[very_long_token]. I was there from the beginning, however it was without the \"registry\" word. I added it and it is also not working.. Starts with //. Just found out that this package gives you the right token for requests made to get packages descriptions but not for download. The reason is that the token is for such a url:\nhttp://host/tfs/MyCollection/_packaging/MyNpmRegistry/npm/ (which is good also if you add the \"registry\")\nbut in tfs npm packages are downloaded from:\nhttp://host/tfs/MyCollection/_packaging/[pkgid]/npm/registry/[pkgname]\nso I shortened the token url to end with \"_packaging\" and it worked! However, tfs instructs you to use the token with the full url, so maybe we need to save the token when we get the package description and use it to download,. After little investigation, we can do it if we put the auth data in PackageMeta, then let the resolve module put it in the ResolveResult so we can pass it to the fetchToStore function. From there we can pass it to the Got module so it won't try to find the auth data by itself but use the given one. What do you think?\n. wow! so fast! great work!\nBTW, I tested pnpm on the pnpm code itself. My os is Windows :(. However, I use bash on Ubuntu on Windows as default shell. Looks like it doesn't save space at all. node_modules is 104MB. With regular npm it is 105MB. I see many unrecognized links inside (probably windows can't read them since ubuntu creates them). Most of the space is taken by the folder .registry.npmjs.org (even that I use the private tfs npm).\nThere is a folder just like that in the npm store in my pc (it is a copy). In another angular project which has some public and private packages, the folder in node_modules has our npm address, but still it doesn't save space.. I have a special drive for code and the project is beside the store. Both can be accessed by windows and ubuntu. I'm sure it wasn't a hard link. I deleted it from the store and it was still present in node_modules\n. Oh good to know. BTW, there are files in node_modules that Windows can't read. Is the link created by ubuntu is cross-platform? If not, how windows can use the hard link to the store?. ",
    "NCC1701M": "Still doesn't work with Version 1.12.0\nMy $home/.npmrc files looks like \nregistry=http://myhost:8080/tfs/Projects/_packaging/my-packages/npm/registry\nalways-auth=true\n//myhost:8080/tfs/Projects/_packaging/my-packages/npm/:_authToken=[mytoken]\nWhen I execute npm i my-package I get the following log file:\n```\n\n0 debug pnpm:progress: \n    status: \"installing\"\n    pkg: \n      rawSpec: \"^1.1.2\"\n      name: \"my-package\"\n  1 debug pnpm:progress: \n    status: \"resolving\"\n    pkg: \n      rawSpec: \"^1.1.2\"\n      name: \"my-package\"\n  2 debug pnpm:registry: \"http request uri http://myhost:8080/tfs/Projects/_packaging/my-packages/npm/registry/my-package\"\n  3 debug pnpm:registry: \"http request always-auth set; sending authorization\"\n  4 info pnpm:registry: \"attempt registry request try #1 at 11:18:57\"\n  5 info pnpm:registry: \"retry will retry, error on last attempt: Error: This request requires auth credentials. Run npm login and repeat the request.\"\n  6 info pnpm:registry: \"attempt registry request try #2 at 11:19:07\"\n  7 info pnpm:registry: \"retry will retry, error on last attempt: Error: This request requires auth credentials. Run npm login and repeat the request.\"\n  8 info pnpm:registry: \"attempt registry request try #3 at 11:20:07\"\n  9 debug pnpm:progress: \n    status: \"error\"\n    pkg: \n      rawSpec: \"^1.1.2\"\n      name: \"my-package\"\n  10 error pnpm: \n    message: {}\n    err: \n      name: \"Error\"\n      message: \"This request requires auth credentials. Run npm login and repeat the request.\"\n      stack: \"Error: This request requires auth credentials. Run npm login and repeat the request.\\n\n            at RegClient.authify (C:\\Users\\user123\\AppData\\Roaming\\npm\\node_modules\\pnpm\\lib\\node_modules\\npm-registry-client\\lib\\authify.js:17:14)\\n\n            at RegClient.makeRequest (C:\\Users\\user123\\AppData\\Roaming\\npm\\node_modules\\pnpm\\lib\\node_modules\\npm-registry-client\\lib\\request.js:116:17)\\n\n            at C:\\Users\\user123\\AppData\\Roaming\\npm\\node_modules\\pnpm\\lib\\node_modules\\npm-registry-client\\lib\\request.js:68:17\\n\n            at RetryOperation._fn (C:\\Users\\user123\\AppData\\Roaming\\npm\\node_modules\\pnpm\\lib\\node_modules\\npm-registry-client\\lib\\attempt.js:18:5)\\n\n            at Timeout._onTimeout (C:\\Users\\user123\\AppData\\Roaming\\npm\\node_modules\\pnpm\\lib\\node_modules\\retry\\lib\\retry_operation.js:68:10)\\n\n            at ontimeout (timers.js:469:11)\\n\n            at tryOnTimeout (timers.js:304:5)\\n\n            at Timer.listOnTimeout (timers.js:264:5)\"\n```. ",
    "smialy": "Yes, In my repo: https://github.com/smialy/sjs-metadata I'm using mix karma+rollup+qunit.\nIf I use npm install everything works fine. . Is it possible to fix only pnpm to resolve this problem? . ps. Thanks for quick help :+1: . ",
    "onlywei": "Limitations section looks great to me. Perhaps the example I wrote in the issue can be referenced?. I've already created an issue at eslint-plugin-import: https://github.com/benmosher/eslint-plugin-import/issues/828. I am in fact using NPM Enterprise set to an automatic whitelist policy and not using the default npm registry. I am sure it will work if I used the default NPM registry, perhaps there are some settings I can tweak in my NPM Enterprise instance settings. I will investigate there and report back.. We will try to keep npm-registry.compass.com up for the foreseeable future, but it's totally possible that NPM may release an update that makes the URLs the same for enterprise vs public. So, I can't guarantee that this registry will exist in this state forever. Feel free to use it for now, though.. This is working great now!. drive-by-path 0.1.1 is installed, and I see the optional dependency, but in its package.json I also see:\n\"dependencies\": {\n    \"is-subdir\": \"^1.0.1\",\n    \"once\": \"^1.4.0\",\n    \"ramda\": \"^0.24.1\",\n    \"util.promisify\": \"^1.0.0\",\n    \"zkochan-drivelist\": \"^0.0.0\"\n  },. My npm version is 5.3.0. I just tried pnpm@1.15 with --ignore-scripts flag and it did not work. I am going to try pnpm@1.14.11 now.. pnpm@1.14.11 worked.. OK. We'll stick to 1.14.11 for now, then. Seems to work fine. Can't upgrade until drivelist stops throwing errors, though.. @zkochan thanks for that script, but unfortunately we will not be able to use it in our system. For certain reasons, we need to:\n\nInstall our stuff via our npm enterprise instance (including pnpm).\nInstall pnpm hermetically, meaning non-global.\n\nIs there any way to add some kind of flag to avoid executing any of the drivelist code?. @zkochan I think I can just use npm install pnpm --no-optional and it will work. Testing some scenarios now.... Seems to be working. I'll let you know if it fails again. I will close this issue some time next week once I'm confident.. @zkochan I can run npx in my environment, but I cannot use the self-installer because it installs pnpm globally while I want to install it hermetically. The npm install pnpm --no-optional command is working for me fine now, so I feel comfortable closing this issue.. If the self-installer can specify where to install the pnpm files, I would certainly love to give it a try.. Just to add to this, can we specify what version of pnpm we want with the self-installer?. @zkochan I would absolutely use the standalone script for installing pnpm if it supports both:\n\nCustom location\nDownload from npm enterprise based on .npmrc's registry setting.\n\nLet me try to see if I can get npx working with npm@3.x.. Upon further investigation, I think this is more an issue with esm than pnpm. Related issue here: https://github.com/standard-things/esm/issues/520\nEdit: looks like my issue is a dupe of https://github.com/standard-things/esm/issues/514. @zkochan whoops, we investigated some more and discovered that we were not properly copying the .npmrc file into the Docker container before the pnpm install command. Our fault!. ",
    "cevarief": "I no longer user pnpm. So i close this.. ",
    "19majkel94": "Thank you, captain obvious! \ud83d\ude06 So I will explain with more details:\nThe problem is that when I import fs-promise and want to use something like fs.writeFile() I got an error like Property 'writeFile' does not exist on type .... But it exist that fs-promise extends fs-extra which extends built-in fs. So I looked deep in type declaration and there is export * from \"fs-extra\"; but I got this error on red:\n\nJust because pnpm doesn't install all dependencies of my dependencies as I said \ud83d\ude09 I checked twice, there's no @types/fs-extra in any node_modules folder, while npm and yarn works like a charm.\n(part of fs-promise package.json:)\n```json\n{\n  \"dependencies\": {\n    \"any-promise\": \"^1.3.0\",\n    \"fs-extra\": \"^2.0.0\",\n    \"mz\": \"^2.6.0\",\n    \"thenify-all\": \"^1.6.0\"\n  },\n  \"devDependencies\": {\n    \"@types/fs-extra\": \"0.0.37\",\n    \"@types/mz\": \"0.0.30\",\n    \"mocha\": \"^3.0.0\",\n    \"es6-promise\": \"^4.0.0\",\n    \"rsvp\": \"^3.0.0\",\n    \"bluebird\": \"^3.0.0\",\n    \"when\": \"^3.0.0\",\n    \"q\": \"^1.0.0\"\n  }\n}. > Just tried with npm3 and yarn. Same issue. You must have something else in your package.json file that has a regular dependency of @types/fs-extra. It would be accessible because npm3 flattens the node_modules - but technically it shouldn't be accessible.\nThat makes sense but I searched and only fs-promise requires @types/fs-extra. It worked before because I had the earlier version before the \"fix\": https://github.com/kevinbeaty/fs-promise/commit/90fd3d42d4b48a88fa46c69f03825534e7c791e2\nThe problem should be gone with moving to @types/fs-extra 3.0.0, I will check that later. So closing the issue as it works as intended \ud83d\ude09 . ",
    "benmosher": "eslint-module-utils has no direct relationship with eslint-import-resolver-node. The latter is the default resolver for eslint-plugin-import and as such is listed as a dependency of eslint-plugin-import.\nI'm not sure how to resolve this, short of removing the dependency from eslint-plugin-import and forcing users to manually install a resolver. My impression is that most users use the default resolver only, so this would be a worse user experience.\nAny ideas? Again, listing eslint-import-resolver-node as any kind of dependency of eslint-module-utils is more or less a non-starter. . > eslint-plugin-import should pass its __dirname to eslint-module-utils, and it should resolve from that dir. The resolve-from package might help.\nGreat idea! \nObviously not your bug at this point. Will fix via https://github.com/benmosher/eslint-plugin-import/issues/828.\nReiterating the following for others who show up here:\n\nWorkaround: pnpm i -S eslint-import-resolver-node.\n\nthanks all!. ",
    "lumio": "Thanks for pointing that out to me! I will dive into that as soon as possible!. ",
    "zkat": "So, if the goal is to make sure different people on the same team can pick different package managers with 0 cost to the overall team (much like text editors and .editorconfig!), what would pnpm need to be able to take advantage of its unique features while still being able to play nice in a shared playground?. @zkochan that first file seems like it's already possible by just doing a plain old tree read on the contents of the package-lock.json.\nI think that wouldn't communicate the connections between packages, for you. I assume you need information about which package is required by which others? For example:\njson\n{\n  \"foo\": {\n    \"version\": \"1.0.0\",\n    \"integrity\": \"sha512-....\",\n    \"requires\": [\"bar@1.2.3\", \"baz@3.2.1\"],\n    \"dependencies\": {\n      ...\n    }\n  },\n  \"bar\": {\n    \"version\": \"1.2.3\",\n    ...\n  }\n}\nWould that be sufficient for constructing your own tree with a plain old tree-read? You might not end up with an identical tree, but at least resolution/requirement information would be preserved. Looking at shrinkwrap.yaml seems to suggest that this is a lossless alternative?\n/cc @iarna. ",
    "vcfvct": "Looks like i am having \nERROR fetch failed with status code 406 with version 1.10.0. ",
    "huochunpeng": "I had similar issue on bitbucket private repo.\nFailed on\n\"bcx-ui\": \"bitbucket:buttonwoodcx/bcx-ui.git#v1.9.5\",\nMessage:\n```\nERROR\u2009 Command failed: git ls-remote --refs \nfatal: 'null' does not appear to be a git repository\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n```\nBut works on full url\n\"bcx-ui\": \"https://bitbucket.org/buttonwoodcx/bcx-ui.git#v1.9.5\",\nor\n\"bcx-ui\": \"git+ssh://git@bitbucket.org/buttonwoodcx/bcx-ui.git#v1.9.5\",\n. Hi all, I am working on add support of bitbucket/gitlab (public and private) repos in @pnpm/git-resolver.\nI have question on the usability of using OAuth token in dependencies of package.json. The OAuth token has limited lifespan, it will become invalid very soon. It seems to me it should not be put in package.json.\nFor that reason, I am reluctant to add support of token based full url. But I am not sure about your use case. Let me know your thoughts.\nFor private repos, as long as you have ssh key probably setup on your github/bitbucket/gitlab account, future git-resolver is going to support private repos in either\n1. shortcut form username/repo, bitbucket:username/repo, gitlab:username/repo#ref\n2. or full git url without using OAuth token. @mvayngrib how do you reference the private repo in package.json?. It requires you have ssh public key set probably on github.\nIf you can run git clone git@github... successfully, the pnpm i should work.\nIf it doesn\u2019t work, please share your console error of that pnpm i command.. @mvayngrib I got no problem\n```\n\u22ca> ~/playground pnpm i mvayngrib/pnpmtest\nPackages: +1\n+\nResolving: total 1, reused 0, downloaded 1, done\ndependencies:\n+ pnpmtest 1.0.0\n```\nThe way you do git clone is using https authentication, not ssh + public key.\nThere are two ways to access github repo\n1. git clone https://... you will be asked for login username/passwd for first time, but git can use saved login info if you setup git properly.\n2. git clone git@github.com:mvayngrib/pnpmtest.git this is using ssh protocol where public key can be used. This is the recommended way to access github. https://help.github.com/articles/connecting-to-github-with-ssh/\nThe pnpm git-resolver supports both saved https login and ssh public key. I am guessing something messed up with your saved https login.\nIf every time you were asked to key in username/passwd when you do git clone https://, you DO NOT have a saved login.\nAnyway, recommend you to follow the article to setup ssh public key for your github account. Using ssh is much smoother user experience than using https.\n. @mvayngrib I saw you have special gitconfig that forces changing git:// url to https:// ?\nWhy were you against using ssh protocol?\nFrom your log, it looks like pnpm successfully resolved into a git commit hash github.com/mvayngrib/pnpmtest/401326db4beb9f33eeea9c6dd445abf19e52de9b.\nIt definitely did some reading from your private repo.\n. @mvayngrib I am guessing you prefer https because of some firewall?. @zkochan is there a timeline on improving compatibility on lifecycle scripts calls?\n@andreineculau there is another aspect you could add to your valuable matrix. When npm installs from git repo, it runs all scripts with NODE_ENV=production, but yarn doesn't force NODE_ENV. I don't know whether npm use production env on all cases, I didn't test enough.. @zkochan I considered for few minutes by peeking through source code. But I don\u2019t use typescript, so I hesitated.\nI like typescript but never had strong enough motivation to invest my time on it. I can see pnpm attracted lots of users but not many non-trivial contributors. Nothing against typescript, but it could be barrier of many potential contributors.\nI want to contribute when I had more spare time in future. Some yarn issues start to annoy me, I want to contribute to pnpm because technically pnpm makes more sense to me.\n. @andreineculau I think npm think all build scripts should be executed to make a production build not development (default env) build.\nI was caught by it, wondering why npm failed to install my private bitbucket repo. I use babelrc environment config for development and test env, but not production env. So npm failed but yarn did not.. @andreineculau here you are. yarn currently has bug that bypasses prepare script on github repos, so I created one on bitbucket https://bitbucket.org/huochunpeng/debug-npm.\nIt has a prepare script:\n\"scripts\": {\n  \"prepare\": \"echo NODE_ENV=$NODE_ENV; babel src -d dist\"\n}\nAnd babelrc\njson\n{\n  \"env\": {\n    \"development\": {\n      \"presets\": [\"env\", \"stage-1\"]\n    }\n  }\n}\nTo test against it, create a local package.json then run npm/yarn/pnpm\njson\n{\n  \"dependencies\": {\n    \"debug-npm\": \"https://bitbucket.org/huochunpeng/debug-npm.git\"\n  }\n}\nnpm 5.8.0, note it prints NODE_ENV=production\n``\n\u22ca> ~/p/dt npm i\nnpm ERR! prepareGitDep 1> \nnpm ERR! prepareGitDep > fsevents@1.2.0 install /Users/huocp/.npm/_cacache/tmp/git-clone-83fac8cf/node_modules/fsevents\nnpm ERR! prepareGitDep > node install\nnpm ERR! prepareGitDep \nnpm ERR! prepareGitDep [fsevents] Success: \"/Users/huocp/.npm/_cacache/tmp/git-clone-83fac8cf/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64/fse.node\" already installed\nnpm ERR! prepareGitDep Pass --update-binary to reinstall or --build-from-source to recompile\nnpm ERR! prepareGitDep \nnpm ERR! prepareGitDep > debug-npm@1.0.0 prepare /Users/huocp/.npm/_cacache/tmp/git-clone-83fac8cf\nnpm ERR! prepareGitDep > echo NODE_ENV=$NODE_ENV; babel src -d dist\nnpm ERR! prepareGitDep \nnpm ERR! prepareGitDep NODE_ENV=production\nnpm ERR! prepareGitDep \nnpm ERR! prepareGitDep 2> npm WARN install Usage of the--devoption is deprecated. Use--only=devinstead.\nnpm ERR! prepareGitDep SyntaxError: src/index.js: Unexpected token (2:6)\nnpm ERR! prepareGitDep   1 | export class Debug {\nnpm ERR! prepareGitDep > 2 |   foo = 1;\nnpm ERR! prepareGitDep     |       ^\nnpm ERR! prepareGitDep   3 | }\nnpm ERR! prepareGitDep   4 | \nnpm ERR! prepareGitDep npm ERR! code ELIFECYCLE\nnpm ERR! prepareGitDep npm ERR! errno 1\nnpm ERR! prepareGitDep npm ERR! debug-npm@1.0.0 prepare:echo NODE_ENV=$NODE_ENV; babel src -d dist`\nnpm ERR! prepareGitDep npm ERR! Exit status 1\nnpm ERR! prepareGitDep npm ERR! \nnpm ERR! prepareGitDep npm ERR! Failed at the debug-npm@1.0.0 prepare script.\nnpm ERR! prepareGitDep npm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! prepareGitDep \nnpm ERR! prepareGitDep npm ERR! A complete log of this run can be found in:\nnpm ERR! prepareGitDep npm ERR!     /Users/huocp/.npm/_logs/2018-04-22T01_54_35_515Z-debug.log\nnpm ERR! prepareGitDep \nnpm ERR! code ENOPACKAGEJSON\nnpm ERR! package.json Non-registry package missing package.json: debug-npm@git+https://bitbucket.org/huochunpeng/debug-npm.git.\nnpm ERR! package.json npm can't find a package.json file in your current directory.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/huocp/.npm/_logs/2018-04-22T01_54_35_594Z-debug.log\n```\nyarn 1.5.1, note it prints NODE_ENV=\n\u22ca> ~/p/dt yarn\nyarn install v1.5.1\nwarning package.json: No license field\ninfo No lockfile found.\nwarning No license field\n[1/4] \ud83d\udd0d  Resolving packages...\n[2/4] \ud83d\ude9a  Fetching packages...\ninfo No lockfile found.\n[1/4] \ud83d\udd0d  Resolving packages...\n[2/4] \ud83d\ude9a  Fetching packages...\n[3/4] \ud83d\udd17  Linking dependencies...\n[4/4] \ud83d\udcc3  Building fresh packages...\nsuccess Saved lockfile.\n$ echo NODE_ENV=$NODE_ENV; babel src -d dist\nNODE_ENV=\nsrc/index.js -> dist/index.js\n[3/4] \ud83d\udd17  Linking dependencies...\n[4/4] \ud83d\udcc3  Building fresh packages...\nsuccess Saved lockfile.\n\u2728  Done in 19.41s.\npnpm 1.41.1, of course, no script run.\n\u22ca> ~/p/dt pnpm i\nPackages: +1\n+\nResolving: total 1, reused 0, downloaded 1, done\ndependencies:\n+ debug-npm 1.0.0. > Currently, there is no way to tell whether a package is a git-hosted package (from info in the shrinkwrap.yaml).\n@zkochan the version is in url format, not semver for any git-hosted package, isn't it?\ndevDependencies:\n  aurelia-cli: github.com/huochunpeng/cli/10edaef0ca222ab61efcaf141b28c8f8df268967. @zhochan sorry for late feedback. Could you check how prepare script was executed?\nThe local command babel (installed by debug-npm's devDependencies babel-cli) could not be found.\n```\n\u22ca> ~/p/tp pnpm i git+ssh://git@bitbucket.org/huochunpeng/debug-npm.git#v1.0.0\nPackages: +1\n+\nResolving: total 1, reused 0, downloaded 1, done\nbitbucket.org/huochunpeng/debug-npm/361ff261e60f60a91da09bb259230303ccef8087 |     prepare$ echo NODE_ENV=$NODE_ENV; babel src -d dist\nbitbucket.org/huochunpeng/debug-npm/361ff261e60f60a91da09bb259230303ccef8087 |     prepare: NODE_ENV=\nbitbucket.org/huochunpeng/debug-npm/361ff261e60f60a91da09bb259230303ccef8087 |     prepare: sh: babel: command not found\n\u2009ERROR\u2009 debug-npm@1.0.0 prepare: echo NODE_ENV=$NODE_ENV; babel src -d dist\nspawn ENOENT\nat Error: debug-npm                                                                              \nat        \u2026e_modules/npm-lifecycle/lib/spawn.js:48  const er = new Error('spawn ENOENT')\nat emitTwo           events.js:126                                                               \nat emit              events.js:214                                                               \nat maybeClose        internal/child_process.js:925                                               \nat onexit            internal/child_process.js:209\n```. @zkochan \nhttps://github.com/pnpm/pnpm/issues/855#issuecomment-383200924\nhttps://github.com/pnpm/pnpm/issues/855#issuecomment-383220822\nI am pretty sure devDeps are needed to run prepare script, which you aknowledged before \ud83d\ude04 . That's how people build their package.json scripts section, babel should be in devDeps, not deps.\n. Yarn must be using temp folder. Because when it failed, it doesn\u2019t go into yarn cache, which is correct behavior.\nWhile pnpm still cached (or sould I say store) the failed install, a repeated install command uses the malfunctioned cache, without further complaints.\n. @zkochan\nI was thinking about this, it might not be too bad. What we want is not to run certain npm script, but to do a full npm pack which is dry-run of npm publish.\nInstead of fetching git/tarball directly into pnpm store cache, we need\n\nfetch it to a temp folder.\npnpm i, or maybe npm i for maxium compatibility.\nrun npm pack which reports the generated tar.gz file name.\nnow we can expand the tar.gz file into pnpm store cache.\npurge temp folder.\n\nI suspect this is what npm is doing, because I can see the final installed npm module correctly respected .npmignore or package.json \"files\" sections.\n. ",
    "mvayngrib": "@zkochan didn't work for me! I've given you access to this private repo: https://github.com/mvayngrib/pnpmtest to help you test :) Thanks! I'm looking forward to this feature. @zkochan i'm already paying for a few so I can keep this around for a bit (it doesn't cost me extra)\n@huochunpeng i didn't, i was trying to install it with one of these:\nsh\npnpm i https://github.com/mvayngrib/pnpmtest\npnpm i mvayngrib/pnpmtest. @huochunpeng I can clone it like this:\nbtw, i've given you access to the repo too :)\nsh\n$ git clone https://github.com/mvayngrib/pnpmtest\nCloning into 'pnpmtest'...\nremote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 4 (delta 0), reused 4 (delta 0), pack-reused 0\nUnpacking objects: 100% (4/4), done.. @huochunpeng interesting! I don't put in my username/password, as you can see from what I pasted. Let me see if i can give you more info, maybe it'll help to figure out what's wrong:\nsh\n$ pnpm i mvayngrib/pnpmtest --reporter ndjson\n{\"time\":1539434597968,\"hostname\":\"mark.local\",\"pid\":26503,\"level\":\"debug\",\"name\":\"pnpm:package-json\",\"initial\":{\"name\":\"pnpmtest-proj\",\"version\":\"1.0.0\",\"description\":\"\",\"main\":\"index.js\",\"scripts\":{\"test\":\"echo \\\"Error: no test specified\\\" && exit 1\"},\"keywords\":[],\"author\":\"\",\"license\":\"ISC\",\"dependencies\":{\"pnpmtest\":\"github:mvayngrib/pnpmtest\"},\"readme\":\"ERROR: No README data found!\",\"_id\":\"pnpmtest-proj@1.0.0\"},\"prefix\":\"/Users/tenaciousmv/Code/pnpmtest-proj\"}\n{\"time\":1539434597974,\"hostname\":\"mark.local\",\"pid\":26503,\"level\":\"debug\",\"name\":\"pnpm:stage\",\"message\":\"resolution_started\"}\n{\"time\":1539434597976,\"hostname\":\"mark.local\",\"pid\":26503,\"level\":\"debug\",\"name\":\"pnpm:progress\",\"pkg\":{\"rawSpec\":\"mvayngrib/pnpmtest\"},\"status\":\"installing\"}\n{\"time\":1539434598833,\"hostname\":\"mark.local\",\"pid\":26503,\"level\":\"debug\",\"name\":\"pnpm:progress\",\"status\":\"resolved\",\"pkgId\":\"github.com/mvayngrib/pnpmtest/401326db4beb9f33eeea9c6dd445abf19e52de9b\",\"pkg\":{\"rawSpec\":\"mvayngrib/pnpmtest\"}}\n{\"time\":1539434669308,\"hostname\":\"mark.local\",\"pid\":26503,\"level\":\"warn\",\"name\":\"pnpm:store\",\"message\":\"Fetching github.com/mvayngrib/pnpmtest/401326db4beb9f33eeea9c6dd445abf19e52de9b failed!\"}\n{\"time\":1539434669310,\"hostname\":\"mark.local\",\"pid\":26503,\"level\":\"error\",\"name\":\"pnpm\",\"message\":{\"code\":\"E404\",\"uri\":\"https://codeload.github.com/mvayngrib/pnpmtest/tar.gz/401326db4beb9f33eeea9c6dd445abf19e52de9b\",\"response\":{\"body\":{\"_readableState\":{\"objectMode\":false,\"highWaterMark\":16384,\"buffer\":{\"head\":{\"data\":{\"type\":\"Buffer\",\"data\":[52,48,52,58,32,78,111,116,32,70,111,117,110,100,10]},\"next\":null},\"tail\":{\"data\":{\"type\":\"Buffer\",\"data\":[52,48,52,58,32,78,111,116,32,70,111,117,110,100,10]},\"next\":null},\"length\":1},\"length\":15,\"pipes\":null,\"pipesCount\":0,\"flowing\":null,\"ended\":true,\"endEmitted\":false,\"reading\":false,\"sync\":false,\"needReadable\":false,\"emittedReadable\":true,\"readableListening\":false,\"resumeScheduled\":false,\"destroyed\":false,\"defaultEncoding\":\"utf8\",\"awaitDrain\":0,\"readingMore\":false,\"decoder\":null,\"encoding\":null},\"readable\":true,\"domain\":null,\"_events\":{},\"_eventsCount\":2,\"_writableState\":{\"objectMode\":false,\"highWaterMark\":16384,\"finalCalled\":false,\"needDrain\":false,\"ending\":true,\"ended\":true,\"finished\":true,\"destroyed\":false,\"decodeStrings\":true,\"defaultEncoding\":\"utf8\",\"length\":0,\"writing\":false,\"corked\":0,\"sync\":false,\"bufferProcessing\":false,\"writecb\":null,\"writelen\":0,\"bufferedRequest\":null,\"lastBufferedRequest\":null,\"pendingcb\":0,\"prefinished\":true,\"errorEmitted\":false,\"bufferedRequestCount\":0,\"corkedRequestsFree\":{\"next\":null,\"entry\":null}},\"writable\":false,\"allowHalfOpen\":true,\"_transformState\":{\"needTransform\":false,\"transforming\":false,\"writecb\":null,\"writechunk\":null,\"writeencoding\":\"buffer\"}},\"size\":0,\"timeout\":0,\"url\":\"https://codeload.github.com/mvayngrib/pnpmtest/tar.gz/401326db4beb9f33eeea9c6dd445abf19e52de9b\",\"status\":404,\"statusText\":\"Not Found\",\"headers\":{}},\"attempts\":3,\"resource\":\"https://codeload.github.com/mvayngrib/pnpmtest/tar.gz/401326db4beb9f33eeea9c6dd445abf19e52de9b\"},\"err\":{\"name\":\"Error\",\"message\":\"404 Not Found: https://codeload.github.com/mvayngrib/pnpmtest/tar.gz/401326db4beb9f33eeea9c6dd445abf19e52de9b\",\"code\":\"E404\",\"stack\":\"Error: 404 Not Found: https://codeload.github.com/mvayngrib/pnpmtest/tar.gz/401326db4beb9f33eeea9c6dd445abf19e52de9b\\n    at /usr/local/lib/node_modules/pnpm/lib/node_modules/@pnpm/tarball-fetcher/lib/createDownloader.js:55:41\\n    at Generator.next (<anonymous>)\\n    at fulfilled (/usr/local/lib/node_modules/pnpm/lib/node_modules/@pnpm/tarball-fetcher/lib/createDownloader.js:4:58)\\n    at <anonymous>\\n    at process._tickCallback (internal/process/next_tick.js:188:7)\"}}\nError: 404 Not Found: https://codeload.github.com/mvayngrib/pnpmtest/tar.gz/401326db4beb9f33eeea9c6dd445abf19e52de9b\n    at /usr/local/lib/node_modules/pnpm/lib/node_modules/@pnpm/tarball-fetcher/lib/createDownloader.js:55:41\n    at Generator.next (<anonymous>)\n    at fulfilled (/usr/local/lib/node_modules/pnpm/lib/node_modules/@pnpm/tarball-fetcher/lib/createDownloader.js:4:58)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)\nError: 404 Not Found: https://codeload.github.com/mvayngrib/pnpmtest/tar.gz/401326db4beb9f33eeea9c6dd445abf19e52de9b\n    at /usr/local/lib/node_modules/pnpm/lib/node_modules/@pnpm/tarball-fetcher/lib/createDownloader.js:55:41\n    at Generator.next (<anonymous>)\n    at fulfilled (/usr/local/lib/node_modules/pnpm/lib/node_modules/@pnpm/tarball-fetcher/lib/createDownloader.js:4:58)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)\nmy ~/.gitconfig has:\nsh\n[url \"https://\"]\n    insteadOf = \"git://\"\n[credential]\n    helper = osxkeychain\n[hub]\n    protocol = https. @huochunpeng yea, I don't remember...I think I had some trouble with npm or yarn at some point, with git or private git dependencies, and I took someone's recommendation to add this :). the good news is that if I remove that block in gitconfig, pnpm i works. I need to see what other things stop working :). ",
    "TomasOstlind": "Thanks vjpr! Adding less to-level dep resloved the issue and the build is now working and thanks to pnpm the build time is now 6min not 28min like before.. :). ",
    "o2dazone": "Thanks for looking into that. Makes sense \ud83d\udc4d . Thanks for the indepth look @vjpr - looks like it's safe to assume this might be more of an issue with requiring in Webpack than with how pnpm manages it's packages?. Also wanted to state this possibly affects Webpack's CommonsChunkPlugin . I've seen this happen on other versions of pnpm as well. Looks as though pnpm relies on an older version of update-notifier. A wild guess, but I'm assuming bumping it to the latest could fix it\nhttps://github.com/yeoman/update-notifier/pull/130. ",
    "maxdevjs": "I see.\nThe point is that we could install further packages with such CLIs after removing the generated node_modules folder and re-running installation with pnpm.. Thank you for your help.\nangular-cli offers a -native- configuration alternative for the package manager (currently not working with a couple issues because pnpm is not listed as valid package manager). I do not know yet about Ionic.\nI did open an issue specific to the support for pnpm in angular-cli where I give more details about where I am stuck.\nnpm-check is a great tool, I am checking it.. Once, in my tests, the folder structure created by pnpm has been named as node_modules/`, being .bin renamed as `. Unable to reproduce such behaviour.\nWas CRA #581 actually solved?. @yegor-sytnyk @zkochan thank you both for the replies. So, currently there is not a straightforward solution.... ",
    "nakah": "Hello,\nI'm trying to switch an existing Angular 6 application from npm to pnpm but I'm facing errors.\nI've deleted existing node_modules folder then run \"pnpm install\". The node_modules has been created but when I run \"ng build\" or \"ng serve\" I have the following errors: \nVersions of @angular/compiler-cli and typescript could not be determined.\n\nThe most common reason for this is a broken npm install.\nPlease make sure your package.json contains both @angular/compiler-cli and typescript in\ndevDependencies, then delete node_modules and package-lock.json (if you have one) and\nrun npm install again.\n\nAny idea ?. Thanks! It's a little bit better but still got errors:\n\nError: ENOENT: no such file or directory, open '\\node_modules.registry.npmjs.org\\package.json'\n    at Object.fs.openSync (fs.js:579:3)\n    at Object.fs.readFileSync (fs.js:485:33)\nat LicenseExtractor.readPackageJson (\\node_modules.registry.npmjs.org\\license-webpack-plugin\\1.3.1\\webpack-sources@1.1.0\\node_modules\\license-webpack-plugin\\dist\\LicenseExtractor.js:126:23)\n    at LicenseExtractor.parsePackage (\\node_modules.registry.npmjs.org\\license-webpack-plugin\\1.3.1\\webpack-sources@1.1.0\\node_modules\\license-webpack-plugin\\dist\\LicenseExtractor.js:23:32)\n\nI forgot to mention that I'm on Windows 10.. ",
    "binarious": "Any workarounds? . Also created https://github.com/pnpm/pnpm/issues/1260, because there are other problems without using --shamefully-flatten.. It's defined as a peerDependency in the package.json.. ",
    "yegor-sytnyk": "The problem is that Webpack trying to resolve node modules in local 'node_modules' folder and with pnpm some of the modules are not hoisted there from @angular/cli package (css-loader, raw-loader and others).\nFor other client build systems like create-react-app (for React) or vbuild (for Vue) there is a fallback path for module resolution in Webpack config with ownModules.\nIt uses following code (for react-scripts similar for vbuld):\njs\nfunction resolveOwn(relativePath) {\n  return path.resolve(__dirname, '..', relativePath);\n}\nWhich when used with npm install returns:\n{PROJECT_PATH}\\node_modules\\react-scripts\nAnd with pnpm install:\n{PROJECT_PATH}\\node_modules\\.registry.npmjs.org\\react-scripts\\0.9.5\\node_modules\\react-scripts \n(which is no use as this path does not exist)\nThat is why both create-react-app and vbuild are not working when installed as devDependency via pnpm, but they work when installed as global dependency.\nHowever, angular/cli cannot be used as global dependency and should be installed as devDependency.. ",
    "Polyterative": "so no support is planned?. ",
    "jbergstroem": "To simplify this I think a \"npm-less\" installer would be beneficial. A tarball with all deps/etc.. > @zkochan said: \n\nactually we already bundle all the deps with pnpm. \n\nI need to stop asking things before I actually spend time looking into it. Sorry. I will give it a go on a docker image we use to test our stack with once I've finished all failures related to dependency flatting. If it works out well an alpine package is straightforward.. @zkochan was looking around the other day for a docker image that bakes node/pnpm and is relatively up to date. Perhaps it could make sense to offer such an alternative (officially blessed from pnpm)? We'd essentially automate pushing on new pnpm/node versions and stick to node LTS or similar. Thoughts?. > @zkochan said: that would be great to have\nLet me see what I can do. I'm running into the same issue with karma (just to confirm), webpack and babel (edit).\nKarma:\n```\n\nBABEL_ENV=testing karma start test/unit/karma.conf.js\n\n19 06 2017 17:56:52.471:ERROR [preprocess]: Can not load \"webpack\", it is not registered!\n  Perhaps you are missing some plugin?\n19 06 2017 17:56:52.474:ERROR [preprocess]: Can not load \"sourcemap\", it is not registered!\n  Perhaps you are missing some plugin?\n/Users/jbergstroem/Work/.pnpm-store/2/registry.npmjs.org/di/0.0.1/node_modules/di/lib/injector.js:9\n      throw error('No provider for \"' + name + '\"!');\n      ^\nError: No provider for \"framework:tap\"! (Resolving: framework:tap)\n    at error (/Users/jbergstroem/Work/.pnpm-store/2/registry.npmjs.org/di/0.0.1/node_modules/di/lib/injector.js:22:12)\n    at Object.get (/Users/jbergstroem/Work/.pnpm-store/2/registry.npmjs.org/di/0.0.1/node_modules/di/lib/injector.js:9:13)\n    at Injector.get (/Users/jbergstroem/Work/.pnpm-store/2/registry.npmjs.org/di/0.0.1/node_modules/di/lib/injector.js:54:19)\n    at /Users/jbergstroem/Work/$work/node_modules/.registry.npmjs.org/karma/1.7.0/node_modules/karma/lib/server.js:143:20\n```\nEdit: looks like we should add babel as well?\nERROR in ./src/index.js\nModule build failed: Error: Couldn't find preset \"es2015\" relative to directory \"/Users/jbergstroem/Work/$work\"\n    at /Users/jbergstroem/Work/$work/node_modules/.registry.npmjs.org/babel-core/6.25.0/node_modules/babel-core/lib/transformation/file/options/option-manager.js:293:19\n    at Array.map (native)\n    at OptionManager.resolvePresets (/Users/jbergstroem/Work/pageload/bosque/node_modules/.registry.npmjs.org/babel-core/6.25.0/node_modules/babel-core/lib/transformation/file/options/option-manager.js:275:20)\n    at OptionManager.mergePresets (/Users/jbergstroem/Work/pageload/bosque/node_modules/.registry.npmjs.org/babel-core/6.25.0/node_modules/babel-core/lib/transformation/file/options/option-manager.js:264:10)\n    at OptionManager.mergeOptions (/Users/jbergstroem/Work/pageload/bosque/node_modules/.registry.npmjs.org/babel-core/6.25.0/node_modules/babel-core/lib/transformation/file/options/option-manager.js:249:14)\n    at OptionManager.init (/Users/jbergstroem/Work/pageload/bosque/node_modules/.registry.npmjs.org/babel-core/6.25.0/node_modules/babel-core/lib/transformation/file/options/option-manager.js:368:12). @zkochan it is indeed 2.6.1 so it might be using it with babel that breaks (classic es2015 transpile job). Just popped up on my screen so I might have been a bit to premature coming to conclusions.. @zkochan not really;\njavascript\n    frameworks: [require('karma-tap')],\n```\n19 06 2017 19:32:52.567:ERROR [preprocess]: Can not load \"[object Object]\", it is not registered!\n  Perhaps you are missing some plugin?\n/Users/jbergstroem/Work/.pnpm-store/2/registry.npmjs.org/di/0.0.1/node_modules/di/lib/injector.js:9\n      throw error('No provider for \"' + name + '\"!');\n      ^\nError: No provider for \"framework:[object Object]\"! (Resolving: framework:[object Object])\n```\nEdit: I get your point; sorry -- new to karma. I'll load them as plugins and pass them as usual.\n. @zkochan: yeah, I did -- thanks for taking the time to follow up though. I'm kind of walking through the webpack/babel/karma stack now seeing how they all seem to enjoy the same inclusion pattern.. > @zkochan said:\n\nso it worked, right?\n\nYes, it worked -- sorry should've clarified. . > @vjpr said:\n\nI am thinking its about a partial tar download occurring in npm-package-client.\n\nI  suspect this is the root cause for similar issues I've experienced in poor wifi environments. . > @zkochan said:\n\n@jbergstroem do you think we need to redownload the package if this error occurs?\n\nApologies, didn't see this until now. I'd either bail early or retry. Seeing how pnpm is taking the Just Works approach (successfully so), I think retrying with a configurable amount of attempts makes sense.. Is there an upstream bug for this? (searching the npm issue archives is painful). @zkochan although it doesn't sound like the proper solution I guess we should stick with upstream here. Thanks for looking into it.. ",
    "inDream": "I have faced some bug in windows, install something not success.\nSo I would remove the node_modules folder manually with the hard linked global store files,\nthis might affect the global store.yaml.\nIs there any command to manual check the store status & a way to safely remove all modules inside node_modules?. I delete local store but may be I install without admin permission so it removed global store files. When I run pnpm install it shows Refetching [path] to store, as it was modified.. @zkochan Is there a command for safely remove all installed modules inside current folder?. @zkochan Thanks for the new feature.. For windows, it seems pnpm installed packages in %userprofile%\\.pnpm-store\\2\\registry.npmjs.org but install command want to find them in %appdata%\\npm\\pnpm-global\\1\\node_modules.\nAnd it works in version 2.8.0 but fails after that.. ",
    "kiranjholla": "OK, thanks for that explanation but my knowledge about hard-links is obviously lacking. I was confusing how git-bash reports symlinks with hard-links. Apologies for being a noob here.\nBut can you help me get this straight?? Let's consider a hypothetical:\nIf I have a 100 MB disk and have 100 copies of a 1 MB file, then I would expect my OS to report a full disk --- all 100 MB used with no more file storage possible.\nBut if I have 100 hard-links all pointing to the same file, the actual disk usage is just 1 MB; but my OS would still report 100 MB used up. \nWould additional file storage be possible in such cases? If not, since the OS thinks the disk is full, then space savings is not really a benefit of pnpm, is it?. Thanks for clarifying that. I have learnt something today!\nThe thing is: yesterday I looked total disk usage with npm installed node_modules across ~5 projects all of which make use of the same package.json, deleted those node_modules folders, and then ran pnpm install on them.\nI was expecting to see a net decrease in total disk usage but noticed that the disk usage, as reported by Windows, actually seemed to go up. That's what got me confused.\nI will be playing around a bit more with this to try out various scenarios and check this out.. Ah, good point. Thanks for the explanation. I will play around a little more and get back.. @zkochan Thanks for taking this so far! This is great progress.. @zkochan Does the hook actualy need to be as below? I am getting a parsing error in the code you have provided.\n```js\n'use strict';\nmodule.exports = {\n  hooks: {\n    readPackage: function(pkg) {\n      if (pkg.dependencies && pkg.dependencies['module-deps']) {\n        pkg.dependencies['module-deps'] = 'zkochan/module-deps';\n      }\n      return pkg;\n    }\n  }\n};\n```. I believe your version has some of the new ES6 constructs in it, and I have some tooling that doesn't support ES6 just yet. That's probably why the hook did not work for me.\nI can confirm that with pnpm version 1.13.2, and my version of your hook, I have been able to successfully build the project through grunt and browserify.\nAm now waiting to have your PR merged so that I can do this without any hooks.. ",
    "stereokai": "I just discovered yesterday and I really believe in the idea. I would really like to help with this as obviously it's a major roadblock. Where to start?. @zkochan All we need to do now is wait for all those tools to bump their version of node-resolve?. Thanks.. @zkochan But isn't that the whole point of pnpm?. @vjpr \"unique hierarchy of its transitive deps\" sounds like Greek to me :(. @zkochan That's aweomse of you! Appreciate that.\nI'm going now to upgrade to v1 and update here if it solved the issue. Thanks :). Thanks. That carries a further question: If there are unused modules in the global store, do you need to take of it manually? Alternatively, does pnpm have a command for that?\nCheets\n. When are they removed from the store? Every time the store is updated? I'm just curious, not criticising. Cool. Thanks. ",
    "vkrol": "I also have problems with Jest.. ",
    "nicocevallos": "Hi, yesterday I was dealing with a similar problem and I as could see at least one of the modules that throw the error is trying to find the dependency using require('../node_modules/[dependency]') instead of require('[dependency]'), where [dependency] is the name of the required module, so require could not find the module due it is into node_modules/.registry.npmjs.org folder.\nI think it could be fixed if the secondary dependencies are saved into node_modules folder as npm does.\nOne of the solutions I found is installing the dependency, but there are other modules (one of my rivals was jest) that has a more complex error and really I couldn't fix.\nAlso, latest comment/question, why pnpm doesn't use hard links into .registry.npmjs.org folder?\nThanks in advance for all the support you can give me.. ",
    "ishitatsuyuki": "Rollup has multiple issues:\nhttps://github.com/rollup/rollup-plugin-node-resolve/issues/98\nhttps://github.com/rollup/rollup-plugin-node-resolve/issues/100. ",
    "fjorgemota": "By the way I think the issue in webpack's case isn't with webpack itself, but with the package enhanced-resolve, that Webpack uses underneath to resolve the files asynchronously (according to webpack documentation), right?\nAlso I didn't understood how CRA and Angular resolved the problem between PNPM and Webpack. Is there any plans to create a tutorial or something? --shamefully-flatten works quite well here but it's sad to have to enter that argument everytime I want to use pnpm.. oh, thanks @tunnckoCore. That seems to fix at least that problem, which is already quite good. :D \nThank you! :). ",
    "paulpflug": "regarding link-all I found a few packages:\nnpm-link-up\nzelda\nnpm-link-shared\nnpm-link-up could be compatible with pnpm, I will try this now. after testing, I created my own package for the link-all functionality: linkall. It uses your find-packages and which-pm packages \ud83d\udc4d \nIt is small, slow, written in coffeescript and the output is ugly, but it works with pnpm link, which is great.. Wow, great feature - add linking would definitely add even more value.\nrecursive linking is a 2 phase process.\nThis is in what linkall is doing (without concurrency of course):\nFirst call pnpm link in all sub directories with package.json - which will also install the package, this can be done concurrently.\nSomehow the package names must be collected in this step\nThen in the second step the dependencies of each package must be matched to the collected names and\npnpm link [dep1] [dep..] can be called in each according sub directory - in principle also concurrently.\nthe unsolved problem - but I'm unsure how much of a problem this is - is how you control which globally linked packages get linked and which are not.\nThe approach in the top is the simplest form - all packages within one folder get linked to each other (if they are specified as dependencies)\nBut you could equally go for a register of all globally linked package and link all of them matching a dependency - whether they are in the same containing directory or not.\nIf I can help you anyhow let me know.. Promise.all did work, but not without printing WARN waiting for another installation to complete.... So I changed it to make a Promise chain instead, now it works as expected.\nI'm unsure, what link returns, should I use Promise<null>, as Promise<any> throws an error`?\nThe link test only tests the API not the CLI..\n. very good work \ud83d\udc4d . pnpm's strictness is a big advantage, I agree on that. But to be honest, peerDependencies in its current state are useless.. there is no point in using them neither in npm nor in pnpm. Real pluggable packages, don't exist (at least I have never seen one).\nNow to the problem I want to solve: webpack.\nWebpack doesn't resolve packages exactly as node.\nI want a package which automatically provides a number of loaders for webpack.\nWith npm I can define them as normal deps and look them up either in node_modules of the package or its parent.\nWith pnpm it is not possible. The normal deps are not showing up in node_modules of the parent (strict - good design), but also not in node_modules of the package, so webpack has no way of finding them.\nWhen working with peerDeps, I have to type out all peerDeps, then there is no point in using a dependency collection in the first place.\nThe current (untested) workaround is to manually resolve the package dir link with fs.realpathSync on runtime and add the parent directory to webpacks resolveLoader.\nI think it would be totally sufficient to only auto install peerDeps on top level, after all other packages are installed, and only warn on failure, so they are treated like citizen second class - this would still allow the usage of pluggable packages, as normal dependencies would override them.\nIf you insist on the current way, this issue can be closed.. I have tested it with webpack@3.\nThere is no way I can ship package A somehow connected to B so that webpack can resolve B\nThis worked with peerDep at npm@1-2 and with normal dep with npm@3-5 and yarn. In package A you should refer to package B using require.resolve \nThis won't work for other dependencies than js. Stylesheets for example.\nor you can add package A's node modules dir to require.modules\nThis will work, but then the installation instructions of A get very ugly, I really want to prevent that.\nI also could order the user to also install B, also ugly in my eyes.\n. I have ceri-materialize which is basically a wrapper around materialize-css with a few added stylesheets.\nI want the user to only install ceri-materialize but be able to resolve materialize-css stylesheets in sass:\n```sass\n// sass\n@import \"~ceri-materialize/color\"; //works\n// works in npm due to flattened tree\n// but not in pnpm\n@import \"~materialize-css/sass/components/variables\";\n// no way to resolve the dependency:\n@import \"~ceri-materialize/../materialize-css/sass/components/variables\"; //doesn't work\n@import \"~ceri-materialize/node-modules/materialize-css/sass/components/variables\"; //doesn't work\n```\nfor example code you can clone ceri-tooltip\ngit clone https://github.com/ceri-comps/ceri-tooltip.git \nand run cd ceri-tooltip && pnpm i && npm run dev\nthanks for your time!. I think it all breaks down to my impression, that if a package A has a peerDep B and I install A I should also have access to B. (same problem in #829)\nC\n-A\n-B (peer of A)\nCurrently peerDep really means optionalDep, but with a warning if it isn't installed.. (making that optionality obsolete :expressionless:). I see, thanks for clarification. \ud83d\udc4d . I would add a check if linkedPkgPath exists here\nsomething like:\njs\nfs = require('mz/fs')\nstats = await fs.stat(linkedPkgPath)\nif (!stats.isDirectory()) { throw new Error(pkgName + \" not found in global path\") }\n. I think this is the trace to folder creation:\nhttps://github.com/pnpm/supi/blob/master/src/api/getContext.ts#L80\nhttps://github.com/pnpm/supi/blob/master/src/api/install.ts#L121\nhttps://github.com/pnpm/supi/blob/master/src/api/install.ts#L112\nhttps://github.com/pnpm/supi/blob/master/src/api/link.ts#L26\nhttps://github.com/pnpm/supi/blob/master/src/api/link.ts#L59\nyou could probably move\nhttps://github.com/pnpm/supi/blob/master/src/api/install.ts#L124\nif (!ctx.pkg) throw new Error('No package.json found')\ninto:\nhttps://github.com/pnpm/supi/blob/master/src/api/getContext.ts#L75-L81\njs\nconst files = await Promise.all([\n    (opts.global ? readGlobalPkgJson(opts.prefix) : readPkgFromDir(opts.prefix)),\n    readShrinkwrap(root, shrOpts),\n    readPrivateShrinkwrap(root, shrOpts),\n    readStore(storePath),\n  ]).then((files) => {\n    if (!files[0]) throw new Error('No package.json found')\n    files.push(mkdirp(storePath))\n    return Promise.all(files)\n  })\n. or even better delay everything until package.json is loaded:\njs\nconst files = await (opts.global ? readGlobalPkgJson(opts.prefix) : readPkgFromDir(opts.prefix)).then( pkg => {\n  if (!pkg) throw new Error('No package.json found')\n  return Promise.all([\n    pkg,\n    readShrinkwrap(root, shrOpts),\n    readPrivateShrinkwrap(root, shrOpts),\n    readStore(storePath),\n    mkdirp(storePath),\n  ])\n}). updating fs-extra to 6.0.1 should fix this\nhttps://github.com/jprichardson/node-fs-extra/pull/578. I know.\nI didn't write that info for you, but for @zkochan, so he knows how to resolve this issue without researching for himself.. I pinpointed the problem to a wrong globalPrefix coming from npm-conf\nBut that package didn't change, so I'm not sure why the problem comes now.\nI have a ~/.npmrc with prefix:'~/.npm-global'\nTo test I did the following\nsh\nmkdir tmp && cd tmp\nnpm i npm-conf\nnode\njs\nt = require(\"npm-conf\")()\nt.globalPrefix // {{cwd}}/~/.npm-global\nt.prefix // {{cwd}}\nI tested reverting to node@9 and npm@5, but this didn't change. I'm using n for version management.\n. ",
    "anhnhoktvn": "is there any update for this issue?. ",
    "shanepadgett": "There is still an issue with Vue even using the --shamefully-flatten argument. Create a new Vue app with the latest version of the cli (3.1.1), delete node_modules and run pnpm i --shamefully-flatten. If you then run npm run serve you get the following error.\n```bash\nThis dependency was not found:\n\n-!../../node_modules/.registry.npmjs.org/cache-loader/1.2.5/webpack@4.25.1/node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/.registry.npmjs.org/babel-loader/8.0.2/@babel!core@7.0.1+webpack@4.18.1/node_modules/babel-loader/lib/index.js!../../node_modules/.registry.npmjs.org/ts-loader/5.3.0/node_modules/ts-loader/index.js??ref--13-2!../../node_modules/.registry.npmjs.org/cache-loader/1.2.5/webpack@4.25.1/node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/.registry.npmjs.org/vue-loader/15.4.2/css-loader@1.0.1/node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=ts& in ./src/views/Home.vue?vue&type=script&lang=ts&\n\nTo install it, you can run: npm install --save -!../../node_modules/.registry.npmjs.org/cache-loader/1.2.5/webpack@4.25.1/node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/.registry.npmjs.org/babel-loader/8.0.2/@babel!core@7.0.1+webpack@4.18.1/node_modules/babel-loader/lib/index.js!../../node_modules/.registry.npmjs.org/ts-loader/5.3.0/node_modules/ts-loader/index.js??ref--13-2!../../node_modules/.registry.npmjs.org/cache-loader/1.2.5/webpack@4.25.1/node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/.registry.npmjs.org/vue-loader/15.4.2/css-loader@1.0.1/node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=ts&                           No type errors found\nNo lint errors found\nVersion: typescript 3.1.6, tslint 5.11.0\n```\nI am on Windows 10.\nAlso note that I selected the following options for manual install from the cli.\n- Babel - yes to babel alongside typescript for auto-detected polyfills\n- TypeScript - yes to class style components\n- Router - no to history mode for router\n- Vuex\n- CSS Pre-processors - Sass/SCSS for css preprocessor\n- Linter / Formatter - TSLint and Lint on save for linting\n- Unit Testing - Jest for unit tests\n- E2E Testing - Cypress for E2E. So it appears that the only issue is babel-loader. After the fresh creation from the vue cli, if you run pnpm i babel-loader --shamefully-flatten you can then serve the app.. We are currently using Yarn workspaces and Lerna, however our problem is that Yarn also has issues with updating the lockfile when using the workspaces hoisting option. I was hoping that pnpm would solve this, however it also has an issue. I am hoping we might be able to get this resolved here since yarn is very slow to fix this issue. Its been around a while.\nThe reason shamefully-flatten is needed is because we have a vue application within our monorepo. . Not sure if it is also related, but I added another directory for a monorepo example. Im not using shamefully-flatten in the monorepo, however I am using shared-workspace-shrinkwrap = true. Running pnpm recursive i in the monorepo also updated the shrinkwrap and I do not believe it should because the dependency under package-2 changed which make the package.json out of sync with the root shrinkwrap.. ",
    "corbinu": "Interesting . ",
    "Announcement": "please make this optional i love the current reporter. ",
    "lukescott": "With normal dependencies being stored at node_modules/.registry.npmjs.org/ could bundled dependencies be stored at node_modules/.bundled/ or something similar? The idea is to treat the bundled dependencies like they come from a different registry.\nWith pack the nested node_modules might be somewhat of an issue, and may not be ideal. Perhaps you could add a bundle command. It would behave similarly to pack, but would store bundledDependencies inside node_modules/.bundled/. pnpm would then create the symlinks on install.\nEither way it would also be nice to have it work with workspaces. For example, I have a package within the workspace that represents an app. It uses several utility packages. I would like to bundle that app with the workspace dependencies for a nightly build.. It looks like tar-fs needs to be passed the chown: false option:\nhttps://github.com/mafintosh/tar-fs/blob/0f54a78bcc8735c4257177fd004c2f9e55c588bb/index.js#L180\nlchown is called here if own or chown is true:\nhttps://github.com/mafintosh/tar-fs/blob/0f54a78bcc8735c4257177fd004c2f9e55c588bb/index.js#L234\nvar own is a combination of opts.chown and the environment. So it looks like that is the option that needs to be set.\nWould this mean unpack-stream would need to pass this, or expose it to pnpm?\nLooks like npm may already be doing this (issue about changing (--no-same-owner to -o, the related version of npm mentioned uses exec tar):\nhttps://github.com/npm/npm/issues/1128. ",
    "jlsjonas": "Actually it seems to be the case for us anyway, we have a private package declaring all the required (missing as per #739, which is another issue indeed) dependencies, amongst which eslint-plugin-import itself; I don't get any console output (using pnpm i) which indicates I'm missing those peerDependencies though. maybe it has something to do with the @organisation/package-name format? (just guessing though). I just checked in an empty folder, steps to reproduce:\n\nhave a scoped package containing one/more peerDependencies\ndo an npm init in an empty directory (just for completion)\npnpm install the scoped package\n\nExpected: warning about missing peerDependencies, or installing them automatically\nActual: only the scoped package is installed without any warning, even though they're listed when cat-ing\nPossible cause: scoped packages reside under their own @-directory, the peerDependency checker likely doesn't go through those folders\nP.S.: while double-checking I see them resided under node_modules/.registry.npmjs.org/\nIs this the expected behaviour?. Using @angular/core I indeed get the expected results (removing node_modules & shrinkwrap after every test to be reproducible)\n```\n$ pnpm i\nResolving: total 2, reused 2, downloaded 0, done\nCreating dependency tree\nWARN registry.npmjs.org/@angular/core/4.3.1 requires a peer of rxjs@^5.0.1 but n\none was installed.\nWARN registry.npmjs.org/@angular/core/4.3.1 requires a peer of zone.js@^0.8.4 bu\nt none was installed.\nAdding 2 packages to node_modules\n\n@angular/core 4.3.1\n```\n\nIf we do the same with our custom package (both @angular/core and our package declaring peerDependencies in the same way, except for order of the items in the package.json, which shouldn't matter)\n```\n$ pnpm i\nCreating dependency tree\nResolving: total 185, reused 176, downloaded 9, done\nAdding 185 packages to node_modules\n\n@***/eslint-config 1.1.1\n```\n\nOnly thing to note that might affect this is that our package also has the peerDependencies in it's dependency list; maybe that's what's avoiding the warning? (even though they aren't in the direct dependency tree). > you mean they are prod dependencies (dependencies) not `devDependencies?\nCorrect\n\nwhat do you mean?\n\nthat the peerDependencies/dependencies are not directly under node_modules/ (as would be with the npm flattening). consistently on docker. well we do an apk update & install a few packages more but that shouldn't matter much :s. ",
    "RohitK09": "can i pick this up @zkochan . ",
    "aleclarson": "Is the --force flag not doing anything for anyone else?. @zoltan once said:\n\nThe only question is how should the hook-dependency be installed. It cannot be a dev dependency, because pnpmfile.js is called before installation has started.\n\nThis seems like the biggest annoyance when it comes to pnpmfile.js.\nWhat if PNPM scanned pnpmfile.js for dev dependencies, and installed those before running pnpmfile.js?. I'm strongly in favor of adding resolutions support for the most basic cases.. Okay then let's make pnpmfile.js more dev-friendly (and can we also support pnpm.config.js as an alias?). . We could add a resolutions field to pnpmfile.js exports:\njs\nexports.resolutions = {\n  // Pin the \"foo@^3.0.0\"  dependency to \"^2.0.0\" for every dependent package in the tree.\n  'foo@^3.0.0': '^2.0.0',\n  'foo@^2.0.0': {\n    // Pin the \"bar\" dependency of \"foo@^2.0.0\" only.\n    'bar': '^1.0.0'\n  }\n}. You could use import-scan (< 1 kB) to parse any import statements, require() calls, or import() calls in the pnpmfile.js (to install before the pnpmfile is used).. > If someone really needs it, they can preinstall the needed dependencies and commit them to the repo. Or bundle them into pnpmfile.js\nI think that severely harms the usability of pnpmfile.js, but okay.\nThoughts on this suggestion?. I like the idea of a pnpm namespace in package.json, since that's the standard AFAICT:\njson\n{\n  \"name\": \"foo\",\n  \"version\": \"0.1.0\",\n  \"pnpm\": {\n    \"resolutions\": {}\n  }\n}\nIt's a shame there's no way for pnpm to support Yarn resolutions. \ud83d\ude22 . More workarounds:\n- add testEnvironment to your project's Jest config\n- use --env=node when running the Jest CLI\n- use a global installation of Jest instead\nRelated: https://github.com/facebook/jest/issues/7064. I opened https://github.com/facebook/jest/pull/7476 to get this fixed.. @zkochan Could you add an environment variable that shows all stack traces, please? \ud83d\ude04 \nI'm hitting an error when I do pnpm i -g aleclarson/meta and not sure how to investigate.. I also ran into this.\n```sh\n$ node --version\nv11.1.0\n$ npm --version\n6.4.1\n$ nvm --version\n0.33.11\n$ pnpm --version\n2.17.8\n$ npm prefix -g\n/usr/local\n```\nDoing npm config set prefix $HOME helps, but it also makes NVM stop working.\nSee here for the related NVM issue.. As a workaround, I can do pnpm install -g foo --prefix $HOME so that NVM keeps working.\nI think NVM is the problem here, at least in my case. I should be able to set prefix to whatever I wish, and NVM should not complain.. @zkochan Is that another workaround, or is there some nuance I'm missing?\nedit: Looks like I get an error when trying it:\nsh\n$ pnpm i -g lerna --pnpm-prefix $HOME\nThe \"path\" argument must be of type string. Received type boolean. I ended up patching NVM myself as a workaround (see here).\nedit: Here was my real problem: link. I'm a little confused. Do I need to use hooks to override a sub-dependency? Or am I missing something?. The --no-save flag should not update the public/private shrinkwrap. Pretend like PNPM never installed it.. Does npm support the link: protocol?\n```\nnpm ERR! code EUNSUPPORTEDPROTOCOL\nnpm ERR! Unsupported URL Type \"link:\": link:../../../../plugins/tslint-mango\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     ~/.npm/_logs/2018-12-10T00_06_47_963Z-debug.log\n``\nI'm usingnpm v6.4.1`.\nIf it doesn't support link:, does that make pnpm install incompatible with npm install when it comes to relative paths?. @zkochan What are the drawbacks of shamefully flattening?. So the problem is that a dependency of lint-staged expects a flattened node_modules?. @morganfree I've tried pnpm i rxjs -D to no avail. Have you tried that in the repro I provided?. It's weird. Even though listr imports rxjs, we still get the error from any-observable. Is it possible that two any-observable versions are being loaded? edit: Nope, I've only got any-observable@0.3.0 in my dependency tree.. This is an issue with listr. Closing.\nI will open a PR on that repo shortly. https://github.com/SamVerschueren/listr/pull/127. Looks like the listr maintainer is pretty busy right now. I'll talk to the lint-staged maintainer to see what we should do. Eh, I'll just fork lint-staged and wait out the PR on listr. \ud83d\ude1d \nhttps://github.com/aleclarson/lint-staged/commit/d8cf58262fb8181a8815b4b4ab6a26e8622b6a2c\nsh\npnpm i -g aleclarson/lint-staged#pnpm. @vjpr Are you using it in your own metro fork or as a git patch with something like patch-package? I would recommend trying it and get back to me if it fails.\n\nDo you think it will be easy to keep your patch up to date?\n\nHopefully, it can just be merged soon. :)\nNot sure how you gauge the ease of keeping a patch operational, but I would say it highly correlates with the volatility/activity of whichever files were changed by said patch.. Can you \"pin\" a patch to a Github PR? That would be a nice way to defer maintenance to the PR contributor (me). It would be great if you used it, because I want to know when RN, Metro, or Jest accidentally breaks it. :) I think using patch-package is easier than creating your own fork, especially since patches are required for both metro and jest-haste-map, not just metro.\nedit: Just realized patch-package does not work with pnpm. :). I'm a fan of quotes:\npnpm recursive exec \"rm -rf node_modules\" --workspace-concurrency=1 -- foo...\n..but could live with any of the options here! (thanks for the mention). ",
    "ScottyFillups": "@aleclarson \nIt's not doing anything for me if I try to install something, eg.\n$ pnpm i --save-dev all-contributors-cli --force\nI eventually fixed pnpm by running \n$ pnpm store status --force\nTook me a while to figure that out, hopefully you won't burn as much time as I did :cry: . ",
    "mbrodala": "Seems like version 1.5.3 broke this, reverting to version 1.5.2 resolves the issue for now:\n``\n$ sudo npm i -g pnpm@1.5.3\n/usr/bin/pnpm -> /usr/lib/node_modules/pnpm/lib/bin/pnpm.js\n/usr/lib-- pnpm@1.5.3\n$ pnpm i\nERROR EACCES: permission denied, mkdir '/var/www.lock.lock'\n$ sudo npm i -g pnpm@1.5.2\n/usr/bin/pnpm -> /usr/lib/node_modules/pnpm/lib/bin/pnpm.js\n/usr/lib\n`-- pnpm@1.5.2\n$ pnpm i\nResolving: total 0, reused 0, downloaded 0, done\nCreating dependency tree\n```. @zkochan Thanks, the solution looks good and works like a charm:\n``\n$ sudo npm i -g pnpm\n/usr/bin/pnpm -> /usr/lib/node_modules/pnpm/lib/bin/pnpm.js\n/usr/lib-- pnpm@1.7.0\n$ pnpm i\nResolving: total 0, reused 0, downloaded 0, done\nCreating dependency tree\n```. ",
    "aricalves": "I'd like to look into this issue. @zkochan can you elaborate on what you mean by, 'strict validation'?\n. ",
    "whyboris": "I just tried out pnpm on an Angular project and it gave the error:\nCannot find module 'enhanced-resolve/lib/ModulesInRootPlugin'\nI added \"enhanced-resolve\": \"3.4.1\", to my package.json and the error is gone.\nThank you @aecz for being on top of this -- looks like the Angular team will address the error I had and I'll no longer need to manually add enhanced-resolve to my project \ud83d\udc4d . ",
    "josephschmitt": "Some more info:\n\nDeleting the shrinkwrap file and then trying again seems to get us out of the 406 errors. Confusingly, when we look at the git diff for the shrinkwrap after deleting and re-generating, there is no change.\nWe noticed when we re-created the shrinkwrap from pnpm 0.68.0 with 1.9.0 that the entire URL pointing to the tarball is gone from the shrinkwrap. So the url that is 406'ing is getting generated in code, which could be a place where it's breaking.\n\nI think these two data points are related. Is the code path that leads to point 1 and 2 separate, which could explain why doing point 1 above works yet doesn't generate a new shrinkwrap?. @zkochan awesome, thanks! Also just a note that I was actually able to reproduce this with npm 5.x as well, so it might not be necessary to get the old npm 3.x version installed. However, if you're unable to reproduce the issue in that repo with 5.x, try downgrading and it'll definitely fail then.. @zkochan awesome! @onlywei and I are reviewing now, and yea feel free to use that url in your tests. thanks!. @zkochan you're fast!. @zkochan the optional part would be nice, since you'd only ever really want one and not the other. Without an optional, you'll always get a warning for the one you're not using. . ",
    "apwelsh": "Windows does not support junctions on network drives.    symlinks seem problematic from my experience.. ",
    "anantoghosh": "Looks like the error is with preact-cli https://github.com/developit/preact-cli/issues/214. ",
    "znck": "Cool. It's there but I guess babel cannot resolve it.\nError: Couldn't find preset \"env\" relative to directory \"~/bulma/src/Navbar\"\n    at ~/bulma/node_modules/.registry.npmjs.org/babel-core/6.26.0/node_modules/babel-core/lib/transformation/file/options/option-manager.js:293:19\n    at Array.map (<anonymous>)\n    at OptionManager.resolvePresets (~/bulma/node_modules/.registry.npmjs.org/babel-core/6.26.0/node_modules/babel-core/lib/transformation/file/options/option-manager.js:275:20)\n    at OptionManager.mergePresets (~/bulma/node_modules/.registry.npmjs.org/babel-core/6.26.0/node_modules/babel-core/lib/transformation/file/options/option-manager.js:264:10)\n    at OptionManager.mergeOptions (~/bulma/node_modules/.registry.npmjs.org/babel-core/6.26.0/node_modules/babel-core/lib/transformation/file/options/option-manager.js:249:14)\n    at OptionManager.init (~/bulma/node_modules/.registry.npmjs.org/babel-core/6.26.0/node_modules/babel-core/lib/transformation/file/options/option-manager.js:368:12)\n    at File.initOptions (~/bulma/node_modules/.registry.npmjs.org/babel-core/6.26.0/node_modules/babel-core/lib/transformation/file/index.js:212:65)\n    at new File (~/bulma/node_modules/.registry.npmjs.org/babel-core/6.26.0/node_modules/babel-core/lib/transformation/file/index.js:135:24)\n    at Pipeline.transform (~/bulma/node_modules/.registry.npmjs.org/babel-core/6.26.0/node_modules/babel-core/lib/transformation/pipeline.js:46:16)\n    at Array.module.exports (~/bulma/node_modules/.registry.npmjs.org/require-extension-hooks-babel/0.1.1/node_modules/require-extension-hooks-babel/index.js:25:22)\n    at transpile (~/bulma/node_modules/.registry.npmjs.org/require-extension-hooks/0.3.0/node_modules/require-extension-hooks/src/hook.js:26:26)\n    at hook (~/bulma/node_modules/.registry.npmjs.org/require-extension-hooks/0.3.0/node_modules/require-extension-hooks/src/hook.js:15:22)\n    at Object.require.extensions.(anonymous function) [as .vue] (~/bulma/node_modules/.registry.npmjs.org/ava/0.22.0/node_modules/ava/lib/process-adapter.js:100:4)\n    at Module.load (module.js:507:32)\n    at tryModuleLoad (module.js:470:12)\n    at Function.Module._load (module.js:462:3)\n    at Module.require (module.js:517:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (~/bulma/src/Navbar/NavbarLink.spec.js:4:1)\n    at Module._compile (module.js:573:30)\n    at extensions.(anonymous function) (~/bulma/node_modules/.registry.npmjs.org/require-precompiled/0.1.0/node_modules/require-precompiled/index.js:13:11)\n    at Object.require.extensions.(anonymous function) [as .js] (~/bulma/node_modules/.registry.npmjs.org/ava/0.22.0/node_modules/ava/lib/process-adapter.js:100:4)\n    at Module.load (module.js:507:32)\n    at tryModuleLoad (module.js:470:12)\n    at Function.Module._load (module.js:462:3)\n    at Module.require (module.js:517:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (~/bulma/node_modules/.registry.npmjs.org/ava/0.22.0/node_modules/ava/lib/test-worker.js:61:1)\n    at Module._compile (module.js:573:30)\n    at Object.Module._extensions..js (module.js:584:10)\n    at Module.load (module.js:507:32)\n    at tryModuleLoad (module.js:470:12)\n    at Function.Module._load (module.js:462:3)\n    at Function.Module.runMain (module.js:609:10)\n    at startup (bootstrap_node.js:158:16)\n    at bootstrap_node.js:598:3\nI am using require-extension-hooks with require-extension-hooks-babel &  require-extension-hooks-vue but this for loading .vue files, it should not be affecting here.. Should I add readPackage hook for resolve?\n. I confirm, devDependencies issue fixed.. ",
    "garritfra": "should this be closed?. ",
    "indiescripter": "That would be a really good move & certainly save a lot of unnecessary work.. @zkochan Trying out with\n$ pnpm --version\n1.14.5\nWill advise outcome. Thanks!. @zkochan Sorry to be a let down.\nMy setup works with\nnpm install\nAlso works with\nyarn install\nDoes not work with\npnpm install\nnpm ERR! missing script: postinstall\nnpm ERR! code ELIFECYCLE\n\nI will try to put something together (a bash script) so you can reproduce it yourself.\nPlease give me some time\nCheers. @zkochan \nbtw. To develop pnpm one needs to fork both pnpm and supi. Is that correct? If so, a monorepo setup for these two projects may work well. Your thoughts?. Okay here's a shell script to reproduce the problem.\ntest-buildverse-with-pnpm.sh\n```\nRun in a temporary directory\nrm -rf foobar-develop\nnpx buildverse create-suite foobar-develop\ncd foobar-develop\nnpm run create-project foo\nnpm run create-project bar\ncd foo\nnpm install --save chalk\ncd ..\ncd bar\nnpm install --save chalk\ncd ..\nnpm run add-project foo\nnpm run add-project bar\n\"The following works...\"\nclear\necho \"Testing with npm...\"\nnpm --version\necho\necho\nfind . -type d -name node_modules | xargs rm -rf\nnpm install\n\"The following works...\"\nclear\necho \"Testing with yarn...\"\nyarn --version\necho\necho\nfind . -type d -name node_modules | xargs rm -rf\nyarn install\n\"The following does not work...\"\nclear\necho \"Testing with pnpm...\"\npnpm --version\necho\necho\nfind . -type d -name node_modules | xargs rm -rf\npnpm install\n```\nbuildverse is a monorepo tool that I am developing.\nI would really really like buildverse to work with pnpm as I see a lot of synergy here especially for both tools to amplify the benefits of the other.\n. @zkochan Correct, that is the issue. Will be terrific to support npm+yarn+pnpm!. @zkochan Great! Will test again soon .. just reworking some of my stuff for a few days.. @zkochan Thanks for your efforts; great progress.\nJust tested against the script that I provided above, as no doubt you did also, and all went well.\nSubsequently, though, a test of pnpn version 1.14.8 against a new buildverse version 3.0.0 shows up a separate issue.  Opening up a new issue for this new test case.\n. @zkochan I've just pulled buildverse project into two packages much in the same way that there is pnpm + supi. The new related package is for-each-project.\nNow, I'm not sure if the testing I did tonight with pnpm & the new for-each-project package shows up the same error that is occurring as reported or if it is a different error.\nThis is another \"works with npm & yarn but not pnpm situation\". You can reproduce by unzipping the attached file and running 'pnpm install'.  Test with 'npm install' & 'yarn install' beforehand to verify. Delete node_modules folder and lockfiles prior to testing with each package manager.\nI don't want to burden you with work but nevertheless feel that bringing issue to your attention is best for pnpm.\nfoobar-project.tar.gz\n. @zkochan Just quick touchbase with you. Wondering how this is looking. Cheers.. @zkochan Thanks for the heads up. This sounds like a similar problem I had with npx so I know what to do.\nI'll let you know when I have it sorted as it is quite exciting to say \"works with pnpm\" as well!. @zkochan Been meaning to get back to you. Yes, got it sorted last week; just been waiting for pnpm v1.18 to get back into intensive testing.\nThanks for your help/feedback though remains a caveat that in this case pnpm deviates slightly from npm  so 100.000% drop-in replacement is not possible (or even sought; rather as designed as you say).. I'm happy for you to close this issue if you have no further comments.. Thanks @zkochan  for looking into this so quickly.\nI understand why \"why pnpm\u2019s strictness is a good thing\" and, with your explanation, why this is happening and how it's an easy fix for the hoodie developers.\nJust by way of \"package manager user experience feedback\" though, which I hope you will take as constructive, I would like to offer these thoughts:\nA first time user who finds a module that installs with npm and subsequently tries to give pnpm a go only to find that the module does not install may possibly conclude that pnpm is flakey and simply move on without looking into the issue any further, let alone go to the trouble of submitting an issue like I did.\nI hope you appreciate that works with npm but does not work with pnpm is not exactly ideal given the ubiquity of npm as the defacto package manager for Node.js. \nUnfortunately I cannot see an easy way out of this dilemma short of pnpm becoming so popular that package developers test installation of their package with both pnpm and npm (and yarn for that matter). Nevertheless, I'm happy to open an issue over on hoodie to try and have this rectified on their end.\nDone, the hoodie pnpm issue is here.\n. ",
    "nikoladev": "\nI like this idea. But only if it won't require additional operations that would slow down installation.\n\nAs long as we don't do any measurements during install and only show the result at the end the performance shouldn't be a problem.\n\nAlso, it will show only the minimal amount of saved disk space. Sometimes npm/yarn copy/paste one package more than 1 time.\n\nIs there any way we could measure this? Otherwise we can just say that pnpm saved xx MB (and probably more!) and provide a link to a page where they can read the specifics of how pnpm works.. I have the exact same issue while installing. The problem is that pnpm can't be used at all:\nshell\n\u279c pnpm -h\nzsh: command not found: pnpm\nI'm using Zsh and Oh My Zsh, as well as:\n\nnpm v5.6.0\nnode v8.9.4\nmacOS 10.13.2\n\n```shell\n\u279c npm i -g pnpm\n/Users/nikola/.npm-global/bin/pnpx -> /Users/nikola/.npm-global/lib/node_modules/pnpm/lib/bin/pnpx.js\n/Users/nikola/.npm-global/bin/pnpm -> /Users/nikola/.npm-global/lib/node_modules/pnpm/lib/bin/pnpm.js\n\ndrivelist@5.2.12 install /Users/nikola/.npm-global/lib/node_modules/pnpm/node_modules/drivelist\nprebuild-install || node-gyp rebuild\n\nprebuild-install info begin Prebuild-install version 2.4.1\nprebuild-install info looking for local prebuild @ prebuilds/drivelist-v5.2.12-node-v57-darwin-x64.tar.gz\nprebuild-install info looking for cached prebuild @ /Users/nikola/.npm/_prebuilds/https-github.com-resin-io-modules-drivelist-releases-download-v5.2.12-drivelist-v5.2.12-node-v57-darwin-x64.tar.gz\nprebuild-install info found cached prebuild\nprebuild-install info unpacking @ /Users/nikola/.npm/_prebuilds/https-github.com-resin-io-modules-drivelist-releases-download-v5.2.12-drivelist-v5.2.12-node-v57-darwin-x64.tar.gz\nprebuild-install info unpack resolved to /Users/nikola/.npm-global/lib/node_modules/pnpm/node_modules/drivelist/build/Release/drivelist.node\nprebuild-install WARN install Module did not self-register.\n  CXX(target) Release/obj.target/drivelist/src/code.o\n  CXX(target) Release/obj.target/drivelist/src/log.o\n  SOLINK_MODULE(target) Release/drivelist.node\n+ pnpm@1.29.1\nadded 645 packages in 48.305s\n```. When trying the formula I get an SHA256 mismatch after the bundle is downloaded:\n```shell\n==> Installing pnpm\n==> Downloading https://registry.npmjs.org/@pnpm/bundled/-/bundled-1.23.2.tgz\n################################################################## 100.0%\nError: SHA256 mismatch\nExpected: 5b3a6fbce64f2e1e45e44ddbf0836226794c9a78d114a35a413ca9bb1ee1c41a\nActual: 5440381d6084fa15cba116ddd72666177e5702b9bbacc009db5c39cc860c19f4\n```. The SHA256 mismatched is fixed thanks to @onetom, thanks for that :)\nI can now install pnpm using homebrew but it is stuck at v1.25.1, even after running pnpm i -g pnpm:\n```bash\n\u279c pnpm -g ls --depth=0\npnpm-global-pkg@1.0.0 /Users/nikola/.npm-global/pnpm-global/1\n\u2514\u2500\u2500 pnpm@1.31.0\n\u279c pnpm -v\n1.25.1\n```\nIs there any way to update pnpm without waiting for a new version of the formula? Or to use v1.31.0 that is installed?. Can confirm that it's solved for me! Thanks :). ",
    "deadcoder0904": "This is the main issue \nbash\n\u2009WARN\u2009 EXDEV: cross-device link not permitted, link\n'/Users/deadcoder0904/.pnpm-store/2/registry.npmjs.org/chalk/2.1.0/node_modules/chalk/package.json' ->\n'/Volumes/Coding/Code/Forked/create-react-native-app/pnpm-test/node_modules/.registry.npmjs.org/chalk/2.1.0/node_modules/chalk+stage/package.json'\nFalling back to copying packages from store\nResolving: total 387, reused 385, downloaded 2, done\n\u2009ERROR\u2009 [object Object]\n`pnpm install --save-dev --save-exact react-native-scripts` failed. I'm trying to use react-native by using command create-react-native-app pnpm-test --package-manager pnpm.\nThis isn't available as of now since I just created the pull request. Cool no problem. Its an awesome package manager but needs some work. Thank you for ur work \ud83d\udcaf . Ok I will check later on. Get back to u 2mrrw. Yaa dude this worked like a charm \ud83d\udc4d\nBut I don't want to do this everytime I create a new project like if I have a new machine & I want to install create-react-app then I have to do this again.\nIs there any way we can fix this permanently when we directly install pnpm on new machine.. I have to put the below 2 commands to make pnpm work \ud83d\ude1e \ncreate-react-native-app project --package-manager pnpm\npnpm install --store \"/path/to/project/.pnpm-store\". The problem is that the path must be set to the project directory not on the Volume I'm coding in.\nWhich means I have to go to every project & set the path to each project as mentioned above.\nU didn't read the above comment properly. Check it out. But this project is awesome than both npm & yarn in load times as well as space.\nI'll wait for #712 to be closed. Ping me when its done. Thank you \ud83d\ude04. Yep, it didn't work yesterday so I thought it would've been from the project folder. It works now. But the problem is devDependencies are installed from npm. This is the issue -\n```bash\nUsing package manager as pnpm with pnpm interface.\nInstalling packages. This might take a couple minutes.\nInstalling react-native-scripts...\nResolving: total 387, reused 387, downloaded 0, done\n\u2009WARN\u2009 registry.npmjs.org/react-redux/5.0.6 requires a peer of react@^0.14.0 || ^15.0.0-0 || ^16.0.0-0 but none was installed.\nAdding 387 packages to node_modules\ndevDependencies:\n+ react-native-scripts 1.3.1\nInstalling dependencies using npm...\n```\nIt installs every package from cache using pnpm, then for react-native-scripts it installs using npm. Ok so I'll close this. A quick peek at node_modules/wordwrap gives me 3 different versions of wordwrap used\nVersion 0.0.2 \nVersion 0.0.3 \nVersion 1.0.0 \nTerminal Output\n\u279c  Calculator l node_modules/.registry.npmjs.org/wordwrap\ntotal 0\ndrwxr-xr-x    5 deadcoder0904  admin   170B  9 Oct 13:31 .\ndrwxr-xr-x  604 deadcoder0904  admin    20K  9 Oct 13:31 ..\ndrwxr-xr-x    3 deadcoder0904  admin   102B  9 Oct 13:31 0.0.2\ndrwxr-xr-x    3 deadcoder0904  admin   102B  9 Oct 13:31 0.0.3\ndrwxr-xr-x    3 deadcoder0904  admin   102B  9 Oct 13:31 1.0.0. Yep exactly or maybe --shamefully-flatten might work with it. Unfortunately, I put a halt to some React Native development but I'm getting back at it in some days so I'll check this issue then. I want to sure but I am busy working on my own startup. That's why I have left a bunch of PRs & issues open for now. Sorry but I can't help for 1-2 months to be sure. \nBut if its of any help, take a look at https://datastructures.js.org/#/ \nCode available here -> https://github.com/deadcoder0904/datastructures\nWhatever you have written in the README.md can be ported to docs/README.md of that page which would make it work. Wait, I'll give it a try in 5 minutes. Ok I am giving 30 minutes to it & uploading it to my Github. It wouldn't be that good though.. Fuck it, I'll make the site to test my skills in Web Development again \ud83d\ude02 . So it took me an hour to edit, but it was worth it. Its live.\nJust add your Algolia key if you want search, add/remove Disqus comments if you want & same for Google Analytics. Let me know what you think ?. Then Fork it in the organization so we have central repo & then everyone can send PRs. Its is not optimized yet for Mobile & Tweets part is not added yet. But I think its somewhat usable for now. I'll make it more better later on though.. Cool enough then. If you're gonna use my version, then you should remove Tachyons & just use CSS & rest is taken care with Docute.\nAlso, in 1/2 months I might just rebuild it with Gatsby to learn more about it & it will be Mind Boggling \ud83c\udfa8 \nTill then, if you or anybody is up for the task can do it.. @brechtdedecker Grab it & do what @zkochan said. Also, React Native CLI react-native init. Throws some weird error mentioned above.. Naah. Same thing works with npm & yarn. That's the reason the scope is so narrow. I couldn't understand the problem.. Well thanks @zkochan. I'll file an issue there.. @zkochan How did you find the missing dependencies ? Do you already have any available script or should I just check the source & anyone requireing or importing packages not available in package.json should be added to the hook?\nThis might help me with #991 . Yep got it. Thanks man, appreciate it. @vjpr Doesn't --shamefully-flatten help with this\u2753. @pgonzal Check https://github.com/deadcoder0904/pnpm-site & if you can for now share that link till @zkochan approves a new one. \nI know pnpm is great that's why you want to share it, but the guy behind it is a one man army currently committing to make this project better that's why he doesn't have time to make websites. I hope you understand.\nSo I've made a temporary website, @zkochan fork it into pnpm org & let people send PRs. I think that's the best solution for now.. @nickpape-msft @pgonzal Yep I understand & it wasn't rude at all. I felt the same way when starting to use PNPM. Its unbelievably faster than NPM/YARN.. I tried installing request but it didn't work as told in #940 \n```js\n// pnpmfile.js\n'use strict'\nmodule.exports = {\n  hooks: {\n    readPackage\n  }\n}\nfunction readPackage (pkg) {\n  console.log({ pkg })\n  Object.assign(pkg.dependencies, {\n    'request': '^2.83.0'\n  })\n  return pkg\n}\n```\nAlso, how does hook run ? \nI mean I want to console.log({ pkg }) & it doesn't log anything when I do pnpm i. \nIt only prints\nreadPackage hook is declared. Manifests of dependencies might get overridden\nAlready up-to-date\n& still gives the error in my above comment. Okay there is no need to remove node_modules, removing shrinkwrap.yaml after changes to pnpmfile.js & doing pnpm install --reporter append-only shows all the logs.\nBut it doesn't install request module as such & still shows the error. \n@zkochan it would be really helpful if you can show some steps on how to make some packages work (with missing dependencies in package.json) that only work with npm & yarn as I have read your blog posts & know hooks will resolve most of the issues like this one.. Cool. I think you should show if its more than a second so as to not deter UX but also people care about seconds now\nYou see all those Twitter threads where people complaining VSCode opens up slow (it only takes 3-5 seconds) \ud83d\ude02 so you get the point, people care if anything greater than a second. Still it wouldn't hurt if you show in decimal point like 3.5s or 0.7s. I can't do it myself as I get issues myself when I debug & I think you might be the best person for the job. Idk who else is on the core team though & if they know how to debug. Sorry, if its a lot to ask. But as much as I start adding dependencies to my project using pnpm, there is always this same error which I try to figure it out but then give up because it doesn't work & switch back to yarn again. Yes rather than telling it to everyone everytime, a simple FAQ will do. Literally check my issues, its all the same for different projects. Just teach us how to debug & I think its the final nail in the coffin.. Great job. Hey @x8x did you try adding hooks with pnpmfile.js\u2753\nIt should have a structure like https://github.com/pnpm/pnpm/issues/1043#issuecomment-365409320 & how will you find dependencies is given at https://github.com/pnpm/pnpm/issues/1043#issuecomment-365710275\nSo read the thread https://github.com/pnpm/pnpm/issues/1043 & I think you will find the solution & if not, then create a new issue \ud83d\ude03\nI will send a PR for this question as a FAQ as it gets asked so many times. PR sent at #1059 . Yes I need it too. \nHow do we uninstall pnpm while removing all the packages in the global store \u2753 \nWill npm r -g pnpm && rm -rf ~/.pnpm-store remove all packages \u2753\nEdit:\nI tried npm r -g pnpm && rm -rf ~/.pnpm-store & installed pnpm & ran it through my project but it reused all the modules which means it had packages in my project drive & not home ~/. \nSo how do we clear entire store\u2753Maybe a command like pnpm cache clean can remove everything from the global store.\nEdit 2:\nAs Zoltan earlier told me few months back in some issue that pnpm installs store in the root of every drive. Its a feature released in some version of pnpm. \nSo in my case, it got installed in another drive than my root drive & it was 1.5GB & to clear it I had to do rm -rf /Volumes/<drive-name>/.pnpm-store for MacOS. \nAnyways an option like this would be nice like pnpm cache clean clears all pnpm packages if you want to start fresh. \nAlso, after uninstalling pnpm it should remove all the packages from ~/.pnpm-store.. For now I am using Jarvis which works perfectly fine with pnpm but its in the browser whereas Webpack Dashboard is in the Command Line.. Yep I'll put it on Github. I just made one with the tiniest configuration \ud83d\udc49 https://github.com/deadcoder0904/webpack-pnpm\nAfter installing, just run pnpm start. I think I got it now, how to do debug this I'll send a PR.\nSo you basically traverse all the code or is there a script that finds packages that are not in package.json ?. It works now without pnpmfile.js. Zoltan can you answer the above question. I tried npm r -g pnpm & npm i -g pnpm too but it still installs 1.31.6. Wait I'll try. Yep it downloads new version 1.33.2. So maybe add a command pnpm upgrade & alias it to curl -L https://unpkg.com/@pnpm/self-installer | node.. But it still gives pnpm -v to 1.31.6. Not sure what is the problem\u2753. which pnpm gives /usr/local/bin/pnpm\nThen I tried\ncurl -L https://unpkg.com/@pnpm/self-installer | PNPM_BIN_DEST=/usr/local/bin node\n& it works \ud83c\udf89\npnpm -v now gives 1.33.2. However pnpm upgrade command might be great.. > Initially, do you remember how you installed the previous version of pnpm?\nWell, it depends bcz I have installed pnpm multiple times just for fun \ud83d\ude1c\nSo I have used self-installer & npm i -g pnpm. Nowadays its self-installer.\n\nwhich node on your machine returns /usr/local/bin/node, right?\n\nYes. Confirming yet again it fails for the new 1.35.1 too when I do pnpm -v it gives 1.33.2\nOutput after doing pnpm i -g pnpm\nconsole\n\u279c  ~ pnpm i -g pnpm\nPackages: -1 +1\n-+\nDownloading registry.npmjs.org/pnpm/1.35.1: 6.55 MB/6.55 MB, done\nResolving: total 1, reused 0, downloaded 1, done\n\u2009WARN\u2009 EXDEV: cross-device link not permitted, link '/Volumes/Coding/.pnpm-store/2/registry.npmjs.org/pnpm/1.35.1/node_modules/pnpm/LICENSE' -> '/usr/local/Cellar/node/9.5.0/pnpm-global/1/node_modules/.registry.npmjs.org/pnpm/1.35.1/node_modules/_tmp_4667_9c2156c72072c8d734eaee3f5267abeb/LICENSE'\nFalling back to copying packages from store\ndependencies:\n- pnpm 1.33.2\n+ pnpm 1.35.1. Nope its not working.\nI did the following - \n```console\nnpm r -g pnpm\nnpm i -g pnpm@1.35.6\npnpm -v \n1.35.6\npnpm i -g pnpm@1.35.2\npnpm -v\n1.35.6\n``./usr/local/bin/pnpm`. Its not a directory. Its an executable.\nconsole\n\u279c  ~ ls /usr/local/bin/pnp*\n/usr/local/bin/pnpm     /usr/local/bin/pnpx\n/usr/local/bin/pnpm.cmd /usr/local/bin/pnpx.cmd\n\u279c  ~. console\n\u279c  ~ ls -al /usr/local/bin/pnp*\nlrwxr-xr-x  1 deadcoder0904  admin   40 Mar  8 12:39 /usr/local/bin/pnpm -> ../lib/node_modules/pnpm/lib/bin/pnpm.js\n-rwxr-xr-x  1 deadcoder0904  admin  258 Feb 21 19:23 /usr/local/bin/pnpm.cmd\nlrwxr-xr-x  1 deadcoder0904  admin   40 Mar  8 12:39 /usr/local/bin/pnpx -> ../lib/node_modules/pnpm/lib/bin/pnpx.js\n-rwxr-xr-x  1 deadcoder0904  admin  258 Feb 21 19:23 /usr/local/bin/pnpx.cmd\n\u279c  ~. > What is the content of the executable?\nHow to get that?. Any updates on this? \nThe release cycle of pnpm is so fast that I would prefer this to work. Rather than uninstalling & installing again :). Yo @zkochan I currently uninstall & install everytime I get a notification about new release. But today after I installed new version 2.10.3 then I still got a notification to install a previous version as the latest version like 2.4.* something something so Idk if the update-notifier is working correctly. \nAfter that I didn't get a message like that. But I think this should be high priority as existing users have an issue updating pnpm or Idk if its just me LOL \ud83d\ude02. Also one question - does --shamefully-flatten save space too\u2753\n\nGot the answer \ud83d\ude02 Yes. Didn't know that, thanks\n\nClose it if you want. I think I might've used it for a couple of projects but not sure. Since I often jump between pnpm & yarn when something doesn't work. But, yeah if its a known issue I'll use something else with React Native for now :). ",
    "kurtextrem": "Fixed!. ",
    "xpl": "@zkochan I think this is related to how errors are handled inside the pnpm. Unfortunately, Node.js doesn't allow to extract any meaningful message from SyntaxError instances that are thrown during scripts parsing in require. So any person who implements a custom error reporting should explicitly take care of SyntaxErrors, defaulting output of those to the console.log (which magically is able to display meaningful messages for this kind of errors).\nFor example, this is how this situation is handled in ololog/reporter (a custom reporter for Mocha):\n```javascript\nconst printError = e => {\nlog.newline ()\n\nif (e instanceof SyntaxError) {\n\n    console.log (e) // revert to default console.log because it shows source line where a SyntaxError was occured (something we can't do with Ololog now...)\n\n} else if (('actual' in e) && ('expected' in e)) { // Assertion\n\n    log.bright.red.error ('[AssertionError] ' + e.message)\n    log.newline ()\n    log.red.error.indent (1) ('actual:  ', e.actual)\n    log.newline ()\n    log.green.error.indent (1) ('expected:', e.expected)\n\n    log.newline ()\n    log.bright.red.error.indent (1) (new StackTracey (e).pretty)\n\n} else {\n    log.bright.red.error (e)\n}\n\n}\n```\nHope this helps!. @zkochan FYI, I've recently added a proper SyntaxError parsing to the stacktracey module directly.\nFor example, when trying to require this file (named test_files/syntax_error.js):\njavascript\n// next line contains a syntax error (not a valid JavaScript)\nfoo->bar ()\n...the pretty printed call stack for the error thrown would be:\nat (syntax error)                  test_files/syntax_error.js:2  foo->bar ()\nat createScript                    vm.js:74\nat runInThisContext                vm.js:116\nat _compile                        module.js:588\nat load                            module.js:545\nat tryModuleLoad                   module.js:508\nat _load                           module.js:500\nat require                         module.js:568\nat require                         internal/module.js:11\nat it                              test.js:184                   try { require ('./test_files/syntax_error.js') }\nat runCallback                     timers.js:781\nat tryOnImmediate                  timers.js:743\nat processImmediate [as _immediat  timers.js:714\n...where the first line is generated from parsing the raw output from the util.inspect call in Node.\nBut, still, the default printer is more informative, as it highlights the error cause with the ^ symbol:\n```\n/Users/mac/stacktracey/test_files/syntax_error.js:2\nfoo->bar ()\n    ^\nSyntaxError: Unexpected token >\n    at createScript (vm.js:74:10)\n    at Object.runInThisContext (vm.js:116:10)\n```\nActually, I can add some optional ANSI styling to the pretty printed output, highlighting the erroneous characters with the bold flag or something.\nAlso, this parsing does not work in Node v4, as Node v4 does not provide any meaningful SyntaxError data even with it's default printer. What a shame.... ",
    "mauron85": "Thank you @zkochan.. ",
    "koppor": "Insecure workaround\nProposed workaround. Since pnpm install -g also needs access to \\Program Files\\nodejs, it seems to be most easy to move the nodejs installation.\nSorry for German screenshots - short story: Just give all users write access to the nodejs folder:\n\nSecure workaround - without the ability to add new executables\nUpdate: This does not work, because of https://github.com/pnpm/pnpm/issues/712. I think, the fix does not work \"correctly\" with symlinks.\nAs admin: mkdir d:\\.pnpm-store\\, c:, cd \"\\Program Files\\nodejs\\\", mklink /D pnpm-global d:\\.pnpm-store\\\nWARN\u2009 EXDEV: cross-device link not permitted, link. Error not output in human readable form, but just [object Object].\n$ pnpm install -g github-release-from-changelog\n\u2009WARN\u2009 Refetching C:\\Users\\Oliver\\.pnpm-store\\2\\registry.npmjs.org\\mime\\1.6.0 to store, as it was modified\n\u2009WARN\u2009 Refetching C:\\Users\\Oliver\\.pnpm-store\\2\\registry.npmjs.org\\netrc\\0.1.4 to store, as it was modified\n\u2009WARN\u2009 Refetching C:\\Users\\Oliver\\.pnpm-store\\2\\registry.npmjs.org\\https-proxy-agent\\1.0.0 to store, as it was modified\n\u2009WARN\u2009 Refetching C:\\Users\\Oliver\\.pnpm-store\\2\\registry.npmjs.org\\extend\\3.0.1 to store, as it was modified\nAdding 19 packages to node_modules\n\u2009WARN\u2009 EXDEV: cross-device link not permitted, link 'C:\\Users\\Oliver\\.pnpm-store\\2\\registry.npmjs.org\\github-release-from-changelog\\1.3.0\\node_modules\\github-release-from-changelog\\package.json' -> 'C:\\Program Files\\nodejs\\pnpm-global\\1\\node_modules\\.registry.npmjs.org\\github-release-from-changelog\\1.3.0\\node_ modules\\github-release-from-changelog+stage\\package.json'\nFalling back to copying packages from store\n\u2009ERROR\u2009 [object Object]\nResolving: total 20, reused 11, downloaded 5\n. ",
    "webstractions": "I can confirm that the Insecure Workaround provided by @koppor does work for global packages. Needed that fix just to update pnpm to 1.23.2. \nI am wondering how npm writes to this folder without having to change folder permissions. . @Lodin That might be true. But I am seeing packages that have been written in C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules folder. . @Lodin Okay. That makes sense. Consider my brain \"fully wrapped\" on that point. =). ",
    "Lodin": "@webstractions AFAIK, npm doesn't write anything to C:\\Program Files\\nodejs\\. While it is installed to this folder during nodejs installation, it writes all global packages to C:\\Users\\<username>\\AppData\\Roaming\\npm\\node_modules, that doesn't require any special permissions.. @webstractions I see them too, but since I haven't installed any one of them, I guess they are packages used by npm itself.. ",
    "ivahidmontazer": "You need to change your security options for user in Windows: \nRight Click\nThe Folder > Properties > Security Tab\nClick on\nEdit to change Permissions > Select User. ",
    "hanxue": "Thanks for the explanation @zkochan . ",
    "shelldandy": "Thanks a lot! I went back to Node 8.9.1 in the meantime and I'm happy with the speed bump pnpm brings to the table. Still getting this \ud83d\ude22 \n```sh\nyarn run v1.7.0\n$ gatsby develop\ngatsby.js develop\nStart development server. Watches files, rebuilds, and hot reloads if something changes\nOptions:\n  --verbose        Turn on verbose output                                                                                                                                             [boolean] [default: false]\n  --no-color       Turn off the color in output                                                                                                                                       [boolean] [default: false]\n  -H, --host       Set host. Defaults to localhost                                                                                                                               [string] [default: \"localhost\"]\n  -p, --port       Set port. Defaults to 8000                                                                                                                                         [string] [default: \"8000\"]\n  -o, --open       Open the site in your browser for you.                                                                                                                                              [boolean]\n  -S, --https      Use HTTPS. See https://www.gatsbyjs.org/docs/local-https/ as a guide                                                                                                                [boolean]\n  -c, --cert-file  Custom HTTPS cert file (relative path; also required: --https, --key-file). See https://www.gatsbyjs.org/docs/local-https/                                             [string] [default: \"\"]\n  -k, --key-file   Custom HTTPS key file (relative path; also required: --https, --cert-file). See https://www.gatsbyjs.org/docs/local-https/                                             [string] [default: \"\"]\n  -h, --help       Show help                                                                                                                                                                           [boolean]\n  -v, --version    Show version number                                                                                                                                                                 [boolean]\nerror There was a problem loading the local develop command. Gatsby may not be installed. Perhaps you need to run \"npm install\"?\nError: Cannot find module 'babel-traverse'\n\n\nv8-compile-cache.js:159 require\n    [cratejoy]/[1.1.2]/[v8-compile-cache]/v8-compile-cache.js:159:20\n\n\nresolve-module-exports.js:7 Object.\n    [cratejoy]/[2.0.0-beta.9]/[gatsby]/dist/bootstrap/resolve-module-exports.js:7:18\n\n\nv8-compile-cache.js:178 Module._compile\n    [cratejoy]/[1.1.2]/[v8-compile-cache]/v8-compile-cache.js:178:30\n\n\nv8-compile-cache.js:159 require\n    [cratejoy]/[1.1.2]/[v8-compile-cache]/v8-compile-cache.js:159:20\n\n\nvalidate.js:7 Object.\n    [cratejoy]/[2.0.0-beta.9]/[gatsby]/dist/bootstrap/load-plugins/validate.js:7:30\n\n\nv8-compile-cache.js:178 Module._compile\n    [cratejoy]/[1.1.2]/[v8-compile-cache]/v8-compile-cache.js:178:30\n\n\nerror Command failed with exit code 1.\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\n```. ",
    "brechtdedecker": "Is this issues still open for contribution ? \nThis is my first time contributing to a project, so I'd love to help you guys with that!. So you want me to move the docs file to the website ? should I do anything else like working on the site ? Do some styling ? make it mobile friendly ?  . ",
    "samerela": "Hello guys,\nI would like to contribute & I believe this issue is still open...\nI understand:\n1- You want the docs file from the pnpm-site\nto be in this repo pnpm.github.io\nCould you elaborate more on these two points:\n2- \"keeping the current homepage\" \n3- \"adding a link to the docs to it\" \nSorry for the trouble. This is my first time contributing to an open-source project and I don't want to mess it up!. @zkochan Thanks for the clarification. I will work on it!. ",
    "blacktrident": "Hey I am new to open Source ,can I help in any way?. ",
    "bkniffler": "Is the package still maintained @vjpr ? I've not been able to get things working, getting expo/CRNA to work with pnpm ist a pain (I know this is mostly due to path resolving of expo).. ",
    "adamciolkowski": "I've been able to install several smaller packages with no problem, but it always hangs on packages that have a lot of dependencies themselves. In those cases I've waited up to 15 minutes during which there was no progress at all.\nIs there an option to make the output more verbose? The only thing I came up with was adding a readPackage hook to log packages.\nAlso, does it work for you, were you able to reproduce it on your end?. Sorry for the late response. I've been busy and hadn't had time to check the newer version of pnpm yet. I'll post an update when I do.. ",
    "shayvaturi": "I'm also experiencing hangs when pnpm downloads packages.\nIf packages are reused, it won't hang.\nI'm using pnpm version 2.0.0 on Windows Server 2012R2. It looked to me like a deadlock between threads that handling the packages.\nAnyway, I couldn't find a solution so I moved to npm ci.. ",
    "n4bb12": "I evaluated pnpm for a few days and ran into this issue a couple of times.\n```\n$ pnpm i\n\u2009WARN\u2009 waiting for another installation to complete...\n$ pnpm -v\n2.12.2\n$ uname -a\nMINGW64_NT-10.0 AZEESS 2.9.0(0.318/5/3) 2017-10-05 15:05 x86_64 Msys\n```\nI tried reproducing it but it seems to be random.\nDeleting ~./pnpm-store did not fix it.\nDeleting node_modules did not fix it.\nAfter some time doing nothing, install starts working again.. Okay seems to happen when I hit CTRL+C during an install.\nI searched fs-locker but it doesn't seem to handle signals.\nSo my theory is that pnpm gets interrupted while something is locked and the lock remains until after a while it becomes stale.. ",
    "djalmajr": "Same with me \ud83d\ude1e. Running in git-bash, Win10. In linux works fine.. ",
    "tomByrer": "Same issue, Win10 Home, likely git-bash inside VSCode.\npnpm & npx both work great.. I guess those tags mean you're cool with the idea? :)\n. ",
    "onetom": "Instead of just fixing these missing dependencies in the consuming projects, we should take the effort of submitting a pull request to the project which left out the dependency, so the wider ecosystem can benefit from it.\nI did this for example:\nhttps://github.com/trufflesuite/ganache-core/pull/43\nWhile we were waiting for the PR being reviewed, we just used our fork directly in our package.json files, eg:\n\"ganache-core\": \"git+https://git@github.com/trufflesuite/ganache-core.git\",\ninstead of\n\"ganache-core\": \"^2.1.0-beta.0\"\n(This approach only works for direct dependencies though, I guess, not for transitive ones). https://github.com/ran-dall/homebrew-pnpm/pull/2. ",
    "hulkish": "I feel like it would be helpful to have a single list of known packages that have this problem. . @vjpr I am not opposed to the basic idea described in OP. But, there should definitely be strong emphasis on the real packages having these issues corrected.\nIn the event that one of the real packages fixes their issue - i would hope that the matching @pnpmfile package would be deprecated.\nWe should not lose sight of the fact that these packages actually have legitimate issues that need to be fixed - regardless of the package manager.\nWe wont improve the outcome of this challenge by letting rogue duplicate packages live for long. Not to mention, it becomes a maitainance nightmare for publishing upstream updates.\nWhile I understand why pnpm introduced --shamefully-flatten - I feel like we should eventually arrive at a place where its super rare to be needed at all. It is also a huge blocker to the whole idea of pnpm to have to use this option - just because of one package.. @vjpr After thinking it through a bit more, and a continuation of my previous comment - I actually think we should just maintain a \"broken package list\".\nThis puts the burden where it belongs.. @vjpr Agreed. I think that is a better way to resolve this. Basically we need to tell the truth as it is - \"you are using node incorrectly\". ",
    "ran-dall": "Updated to latest version 1.23.2. I'm going to close this out. I deleted the formula a while ago (when v2 came out) because I stopped installing nodejs via homebrew and have been using asdf. If there's still interest, I can make a new formula when I have some extra time.. ",
    "lookfirst": "Any reason why we can't just have brew install pnpm?. ",
    "calebeby": "Oh, I installed it via the aur package.... https://aur.archlinux.org/packages/nodejs-pnpm/. Will the self installer script be able to update pnpm, or do I update pnpm with pnpm?. Thanks, that worked.. Thank you\nOn Thu, Dec 14, 2017, 10:52 AM Bruno Galeotti notifications@github.com\nwrote:\n\n@calebeby https://github.com/calebeby @zkochan\nhttps://github.com/zkochan Updated AUR\nhttps://aur.archlinux.org/packages/nodejs-pnpm/ package\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/965#issuecomment-351802319, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AMmFoWI8Sre8nXoBL6ej2GpVHiDjOZm3ks5tAW6EgaJpZM4Q_RO9\n.\n. \n",
    "bgaleotti": "@calebeby @zkochan Updated AUR package. ",
    "tehlordvortex": "I seem to be experiencing something similar with parcel\npnpm install -g parcel-bundler\nparcel index.html\nServer running at https://localhost:1234 \n\ud83d\udea8  Cannot find module 'posthtml-parser'\n    at Function.Module._resolveFilename (module.js:489:15)\n    at Function.Module._load (module.js:439:25)\n    at Module.require (module.js:517:17)\n    at require (/home/vortex/.nvm/versions/node/v8.3.0/pnpm-global/1/node_modules/.registry.npmjs.org/v8-compile-cache/1.1.0/node_modules/v8-compile-cache/v8-compile-cache.js:159:20)\n    at Object.<anonymous> (/home/vortex/.nvm/versions/node/v8.3.0/pnpm-global/1/node_modules/.registry.npmjs.org/parcel-bundler/1.4.0/node_modules/parcel-bundler/src/assets/HTMLAsset.js:2:15)\n    at Module._compile (/home/vortex/.nvm/versions/node/v8.3.0/pnpm-global/1/node_modules/.registry.npmjs.org/v8-compile-cache/1.1.0/node_modules/v8-compile-cache/v8-compile-cache.js:178:30)\n    at Object.Module._extensions..js (module.js:584:10)\n    at Module.load (module.js:507:32)\n    at tryModuleLoad (module.js:470:12)\n    at Function.Module._load (module.js:462:3)\nrunning pnpm install -g posthtml-parser fixes that one but another error pops up about posthtml-render. are modules actually depending on the dependency flattening behavior of the other package managers?\nthe list of dependencies of parcel-bundler only has posthtml, but posthtml itself depends on posthtml-parser and posthtml-render. ",
    "Arttse": "Thank you for your prompt work! :+1: . ",
    "cdfa": "This is not working for me. Gatsby's default-html.js requires prop-types, which is not a direct dependency of gatsby. Maybe it's possible to create some recursive search for the packages gatsby needs?. Sorry for the noob question, but is that the 'shrinkwrap.yaml?. I have now figured out thatprop-typesand others are actually dependencies from the starter kit we are using, but for some reason they didn't get included in ourpackage.json. I'll add them back in there. Sorry for the trouble!. Now having trouble withyurnalist(dependecy ofgatsby-cli`). It seems to be missing a dependency. Created this issue. Any progress on this? I've encountered the issue in 2 of my projects now, even though everything still seems to be working fine.. ",
    "0x80": "@cdfa This is now fixed in yurnalist 1.0.5. ",
    "KSXGitHub": "I just discovered a workaround for this yesterday: Replace jest with jest-cli. It worked.\nThis is the repo that I worked on.. I just discovered that the jest will fail if --preserve-symlinks flag is provided\nCreate a jest.js:\njavascript\nrequire('jest-cli/bin/jest')\n\u2713 If I execute node jest.js, it works.\n\u2715 If I execute node --preserve-symlink jest.js, it doesn't work.\n\u2715 If I execute pnpm test with node jest.js being test script, it doesn't work. (No idea why)\n\u2715 If I execute pnpx jest, it doesn't throw an irrelevant error message if I add a test to fail (e.g. expect(0).toBe(1)), but it passes if all tests pass.\n. @zkochan I have no intention of using --preserve-symlinks either, the point that I wanna make here is that pnpm test and pnpx test still fails while node jest.js works.. @wmertens It works even without --shamefully-flatten?. By default, I prefer it to be simple:\n pnpm should only consider packages without \"private\": true.\n pnpm should only consider packages with a name.\n* pnpm should only consider packages whose version is available in registry (i.e. yet to be published).\nUser may tweak behaviour via pnpm-workspace.yaml.. Closing this because I was unable to reproduce this issue right now. It is weird that it happens in my main repo. A possible workaround would be magical /dev/null (since you are using Linux).\n. @zkochan It's solved, thanks.. @paulpflug The problem is that I installed pnpm, not fs-extra, I have no way to \"update\" fs-extra that is used by pnpm, so I think it's better if you guys edit your package.json.. I know little of pnpm inner working so what's there for me to \"review\"?\nBut if I was to give an opinion, I would say this is good enough for a short-term. In a long-term however, I think it's better to create a logger or a logger function that prints warnings once and globally (Why is logger.info and logger.warn work differently, it seems odd to me).. > but why not just scoping them?\nI can, but what if someone else owns that scope in npm registry? e.g. I created @tools/foo to use privately but someone has already published @tools/foo.. Oh, I never knew that! (I should've noticed when I read shrinkwrap.yaml). There's still a thing though: Does link:../foo syntax only works with pnpm? I want my repo to be compatible with yarn also.. Great! I guess this issue is no longer necessary.. Wait, why is pnpm still 2.15.1 in npmjs.com?\n\nNevermind, pnpm@next. Did you install @types/node?. I think you should share your files in form of a repo.. .yml vs .yaml is a bikeshedding problem, it's like tabs vs spaces, everyone can discuss it, but the discussion never end.\nThis would not only break previous pnpm versions, but also break tools that are used to detect pnpm files. Unless there're some big benefits of using .yml over .yaml that outweighs breaking the ecosystem, let's just stick with .yaml.\n\n...\nLet's say that we ignore breaking changes, I would prefer .json over both because these files are generated by machine, not meant to be written by human.\n\n. What about other existing files (such as pnpm-workspace.yaml)? Are you going to break them too?\nIt is common sense to avoid unnecessary breaking changes.\nI don't see \"widespread convention\" as a good enough reason.. > so you'd recommend to name the file pnpm-lock.yaml?\nI do like pnpm-lock.yaml, I also like pnpm.lock, the choice is yours.\nAnyway, I only wish to not change the file extension from .yaml to .yml unless there is a good enough reason.. > I have even a bigger idea. We can have a config that says what version of pnpm is needed (or use this engines field) and pnpm can self-install and run the needed version.\nWhat would happen if one goes back and forth between two repos that require two different pnpm version ranges that don't intersect with each other? (e.g. 5.x.x vs 4.x.x)\nThat leads me to an even bigger idea: pnpm command is merely a proxy that sits between user and actual pnpm packages. When user invokes pnpm, it will choose a version that satisfies engines.pnpm. . > There will be any number of installed pnpm versions globally and pnpm will select the needed one.\nWhat do you mean by \"globally\"? Should they be only visible to pnpm proxy?. Then I have a few suggestion:\n\n\nThe ability to warn user of incompatible pnpm version is enough for now, this issue can be closed when the feature is implemented.\n\n\nThe ability to automatically switch between versions should be in a separate issue. . Why don't you use npm registry directly?\n\n\nurl\nhttp://registry.npmjs.org/pnpm\nhttp://registry.npmjs.org/pnpm/latest\nhttp://registry.npmjs.org/pnpm/<version>. I guess you need to use --shamefully-flatten flag.. BTW, I made a sample image providing more details of what it should look like:\n\n. Agree, it shouldn't print status if it's 0 ~~or 1~~.. Revamped!\n. @zkochan \nHello again, have you touched this issue yet? If not, I have a suggestion for you: I've created a npm package called split-shell-buffer (source | test | monorepo). This package can help you stream data from a child process (stdout + stderr) to the main output (process.stdout) with prefix to each line whilst preserving shell colors (even when these color span multiple lines). You may want to look into this.\nTL;DR It transforms output of a program from this\n(source)\n\nTo this\n\n. > However, I think during installation we just need to hide the output if it is successful. It is how Yarn does it and npm plans to do it the same way.\nThis library only concern with streaming data, hiding output is out of scope. However, one can iterate the returning object as an async iterable and count number of lines printed; upon completion, pnpm should be able to print some sort of special control sequence that erases these lines. It looks something like this:\n```typescript\nconst { lines, fromChildProcess } = await import('split-shell-buffer')\nlet lineCount = 0\nconst splitter = fromChildProcess(cp).withPrefix(() => Buffer.from('  | '))\nconst closeEventPromise = new Promise(rs => cp.on('close', x => rs(x)))\nfor await (const currentLine of lines(splitter)) {\n  process.stdout.write(Buffer.from([...currentLine, 10])) // 10 = '\\n'.charCodeAt(0)\n  lineCount += 1\n}\nconst status = await closeEventPromise\nconst erasePreviousLines = (n: number) => \\x1B[${n}A\nif (status === 0) process.stdout.write(erasePreviousLines(lineCount))\n```\nThere's also a package called blessed that might help you (TBH, I didn't learn how to use it). It does not completely replace split-shell-buffer however, as their main functionalities are different.. BTW, the current implementation of how pnpm displays subprocess data is flawed: It's somehow unable to print the first meaningful line no matter how hard I try (that is, print some leading \\ns as a workaround). So, even if clearing lines is not possible, I would still prefer preserving information to a clean terminal.. It should throw an error and tell user to explicitly specify dependants via pnpm recursive ... command.. How about preventing user from pnpm install in a monorepo?. In my opinion, when people run pnpm install, I think they run it in context of the repo, not their current working directory. In other words, people ask \"in which repo should I run pnpm install\" rather than \"in which directory/subdirectory\".. > My only suggestion would be to keep pnpm install something to work with the current package.json only. Otherwise, pnpm install something would add something to every package in the repository.\nHow about this: When user issues pnpm install <pkg> in a monorepo, pnpm should print an error and a suggestion.. > The pnpm install express -- . variant seems a bit awkward. If I polled random developers familiar with PNPM, and asked them what -- means, they probably would have no idea. And since it's not a named command-line parameter, it's difficult know how to search for help: pnpm install -h doesn't explain it. Googling for \"pnpm --\" won't return any useful results either.\nThe ... -- <args> syntax convention is quite common in posix world. It is often used to pass arguments start with - as normal arguments (instead of options/flags). Git also has this (for instance, git checkout -- <files> will undo changes made to <files>).. > I am opposed to this. Most devs are used to working with single packages where they expect pnpm i to just install for that package.\n\nIf I run pnpm i in the root, I only want the root to install (say after I add a dep to the root package.json).\n\nIt works the same in single package repo.. > but please no distinction between lower and uppercase letters. That is, IMCO, the worst aspect of UNIXness.\nThe other posix tools already have that distinction, it's already a common convention, going against it wouldn't make any sense. Besides, pnpm already has that distinction, because it's computer's default behavior.\n\nhow is pnpm m i too long? I understand I don't have to use the shortcut-shortcuts, but these things tend to create a theme over time.\n\nIt's not about \"too long\", it's about sensible default. And pnpm install is a standard/default command, it should make sense in all situations including single-package repos and monorepos.\nImagine cloning a monorepo without knowing it is a monorepo, run pnpm install, expecting all npm scripts work out-of-the-box but it doesn't because of missing dependencies.\nWe should also consider external tools that work with pnpm. External tools (such as CI, Renovate, etc.) wouldn't have to know if a repository is a monorepo, just run pnpm install and everything will just work.\n. To clarify, when I opened this issue, I only cared about pnpm install, not pnpm install <pkg>. So how pnpm install <pkg> works is irrelevant to me. As long as pnpm install installs all packages recursively, I am happy.. > I think we can create a config that will make pnpm install === pnpm recursive install.\n\nSomething like prefer-recursive-commands=true\n\nIt's more about sensible default, that's the reason I opened this issue. I originally only concern of the default command (that is pnpm install, not pnpm install <pkg>).\nIt is true that I can easily set prefer-recursive-commands=true, but it is also true that I can assign pnpm recursive to a bash alias/command instead, so this flag is unnecessary, it adds no extra benefits but needless complexity.\nAgain, what I want to discuss is about the default pnpm install and only the default pnpm install, no extra arguments, no extra flags, no extra configurations.. Actually, I'm just against .yml extension. I don't really care whether it is pnpm-lock.yaml or pnpm.lock (or even old shrinkwrap.yaml), as long as it does not use .yml extension.. I don't like this:\n  * npm already use -- as a way to pass arguments (and not only advanced npm/pnpm users know that), don't change it unless npm changes it.\n  * This would go against traditional POSIX convention.\nI think --filter alone is enough:\n  * Folder names (subjects of filtering) are rarely (if at all) start with a '-' character, so there're no needs for filtering to support such unusual names.\n  * --filter is already consistent, only advanced pnpm users use -- for filtering.\n\nAlso, exec looks nicer w/o the --.\n\nI agree, in fact, npm/yarn already did that. But this does not mean -- should be used for filtering.\n\nOnly advanced users of npm know about the -- in run commands.\n\nBy \"advanced\" you meant \"used npm for long enough\"? Then that's the majority of users! How many users do you think that know about pnpm and yarn but aren't already \"advanced\" enough with npm? None! That's what I think.. Not all, a few that belong to recursive install don't appear there. It would be convenient to at least create a page for .npmrc and link them to the two commands. . ",
    "mudlabs": "@wmertens I still get error with v23.6.0\nconsole\nCannot find module 'jest-environment-jsdom'\nat node_modules/.registry.npmjs.org/jest-runner/23.6.0/node_modules/jest-runner/build/run_test.js:39:29. ",
    "matt3224": "Any news on this feature, pnpm doesnt seem to gel with npm-check despite my many attempts.\nThis is something that i would use daily too!. If you feel that makes sense then sure! Could have a shorthand too?. pnpm up -l ?. Ok and will pnpm up *@latest work?\n. Im running pnpm i followed by pnpm start, removing node_modules and using npm i, npm start works as expected. It's worth noting that using --shamefully-flatten fixes it. Which is ok i guess but so shameful, i'd much prefer to have a resolution that allows me to use pnpm i only as per usual.\nThanks and any extra info is greatly appreciated. ",
    "vaaski": "This has been happening to me as well, but while trying to install any global package.\nShould I reproduce & give you logs or is it likely the same issue?. ",
    "ExE-Boss": "And it somehow broke again with stream-events:\nERROR\u2009 EPERM: operation not permitted, rename 'C:\\Users\\ExE Boss\\.pnpm-store\\2\\registry.npmjs.org\\stream-events\\1.0.4\\_tmp_27292_610b691e00196398c6949a3351f214d8' -> 'C:\\Users\\ExE Boss\\.pnpm-store\\2\\registry.npmjs.org\\stream-events\\1.0.4\\node_modules\\stream-events'\nSee also #1090.. I didn\u2019t use \u2011\u2011shamefully\u2011flatten.. Well, the file:// protocol can be used with remote hosts (an empty (file://\u2026) or null (file:\u2026) hostname means localhost).. Yes (just put it through a\u00a0URL\u00a0parser to\u00a0determine if it\u2019s local or not).. While I get that pnpm\u2019s hooks are more powerful, the issue is that when using pnpm to install a yarn project, forgetting to convert the resolutions key to pnpm hooks beforehand can potentially lead to\u00a0unexpected behaviour.. > So I see two options:\n\n\ncall npm prefix -g to get the correct global prefix. It would be slow but it would be used only during global operations\ncreate a new config called pnpm-prefix that would be used instead of prefix, when present\n\n\nI\u2019m personally more in favour of 2. I\u2019ll go make the change to #1334.\n. Well, npm defaults to %APPDATA%\\npm on Windows if prefix is unset.. You can do that after #1334 (I don\u2019t really know how to use IPC in Node).. It started happening around the time I opened the issue.. @zkochan I just tested npm get fetch-retries, and it returns 2, also this still happens (even\u00a0in\u00a0pnpm\u00a02.11.1).. Turns out, deleting the packages from ~/.pnpm-store that failed fetching seems to have fixed it for me (the\u00a0directories must have somehow gotten corrupted, as Windows Explorer was also unable to read them for\u00a0whatever reason).\nThat said, the error message should certainly be improved.. It wasn\u2019t just the tarball, I couldn\u2019t even enter the extracted directory with Windows Explorer providing a\u00a0cryptic error message when I tried to do so:\n```ini\n[Window Title]\nLocation is not available\n[Content]\nC:\\Users\\ExE Boss.pnpm-store\\2\\registry.npmjs.org\\boxen\\0.5.1\\package is unavailable.\nIf the location is on this PC, make sure that the device or drive is connected\nor the disc is inserted, then try again. If the location is on a network, make sure that\nyou're connected to the network or Internet, then try again. If the location still can't\nbe found, it might have been moved or deleted.\n[OK]\n```\nSame with the packed.tgz file:\n```\n\n7-Zip\nCan not open file 'C:\\Users\\ExE Boss.pnpm-store\\2\\registry.npmjs.org\\boxen\\0.5.1\\packed.tgz'\nas archive\n\nOK\n```. @mrkishi What version of pnpm are you using?. See\u00a0also:\u00a0https://github.com/pnpm/pnpm/issues/1488. That could probably also work for https://github.com/pnpm/pnpm/issues/1580.. I also encountered this with gulp and gulp\u2011cli.. @arcanis I agree, let\u2019s avoid doing this if we can.\nPeople can always use hooks to work around this.. If they\u2019re inside .pnpm, they could be renamed so that they don\u2019t have the leading . (e.g.:\u00a0node_modules/.pnpm/registry.npmjs.org, node_modules/.pnpm/github.com). I realised that when I tried to run tsc locally.. ",
    "x8x": "git clone https://github.com/MyCryptoHQ/MyCrypto\ncd MyCrypto\npnpm i\nnpm run build\nlast command fails, works fine if install is run with npm i or pnpm --shamefully-flatten i. npm install -g vue-cli\nvue init nuxt-community/starter-template test\ncd test\nnpm run dev\nlast command fails, works fine if install is run with npm i or pnpm --shamefully-flatten i. git clone https://github.com/MyCryptoHQ/mycrypto.com\ncd mycrypto.com\npnpm i\nnpm run build\nlast command fails, works fine if install is run with npm i or pnpm --shamefully-flatten i. ",
    "nionis": "Looking forward to this feature, properly and deterministic managing monorepos using npm / yarn is not possible, with pnpm node_modules structure it makes it possible.. ",
    "natew": "I think related to https://github.com/pnpm/pnpm/issues/733, except this would ideally run if any of the node_modules change, not just if the package.json version changes.. ",
    "rarkins": "@zkochan yeah, you guessed it - no magic on Renovate's side. @zkochan that's certainly a pity! \nWhat is the difference that enables npm itself to generate lock files without downloading tarballs, and can you update to do the same technique soon?\nI will monitor the performance impact in the app - disk churn when using EBS on AWS can really drag performance. I assume that due to pnpm's design, that if I can persist the pnpm cache then that would alleviate most of the network burden, transferring it instead to be a disk burden? I did that previous with yarn but it was ultimately too much disk I/O that it slowed things down almost as much.. @pgonzal @zkochan thanks for the feedback. I'll probably leave it for a while unless the disk/cache use becomes unbearable. ",
    "jayvdb": "https://github.com/pnpm/pnpm/issues/1395 has been raised about merge conflicts specifically.. The problems are in upstream packages implicitly using other packages without mentioning them in their package.json.  They are relying on packages which are implicitly a dependency because one of their explicit dependencies uses the package.\nYou need to create a pnpmfile.js to transparently add explicit dependencies on the packages which are not able to be found, or add them to your package.json , or help the upstream packages explicitly list all of their dependencies.  e.g. https://github.com/8eecf0d2/netlify-local/pull/32. I expect this is related to what I encountered also at https://github.com/pnpm/pnpm/issues/1607 . > ... thought that pnpmfile was a bad name and wanted something like pnpmconfig instead\nAlso wanted it to be a declarative format https://github.com/pnpm/pnpm/issues/1082. I must admit I hadnt seen that file until you mentioned it.\nPerhaps the message could mention the exact file?  It would help to know which file it is referring to.  The user may be able to solve the problem themselves after that.. I've found a repeating instance of something very similar on my (private) CI.\nThis time we have already switched to normal mode, and there is no node_modules/.shrinkwrap.yaml or even any node_modules/.  Only the store is being cached.\nThe commit causing this is updating the shrinkwrap.yaml , and it includes these two chunks, amoung others.\ndiff\n@@ -951,6 +963,8 @@ packages:\n       path-is-absolute: 1.0.1\n       readdirp: 2.2.1\n     dev: false\n+    optionalDependencies:\n+      fsevents: 1.2.4\n     resolution:\n       integrity: sha1-eY5ol3gVHIB2tLNg5e3SjNortGg=\n   /chokidar/2.0.4:\n@@ -2135,6 +2173,18 @@ packages:\n     dev: true\n     resolution:\n       integrity: sha1-invTcYa23d84E/I4WLV+yq9eQdQ=\n+  /fsevents/1.2.4:\n+    bundledDependencies:\n+      - node-pre-gyp\n+    dependencies:\n+      nan: 2.11.1\n+    dev: false\n+    engines:\n+      node: '>=0.8.0'\n+    optional: true\n+    requiresBuild: true\n+    resolution:\n+      integrity: sha512-z8H8/diyk76B7q5wg+Ud0+CqzcAF3mBBI/bA5ne5zrRUUIvNkJY//D3BqyH571KuAC4Nr7Rw7CjWX4r0y9DvNg==\n   /fstream/1.0.11:\n     dependencies:\n       graceful-fs: 4.1.11\nThe log is\nconsole\n$ npm install -g pnpm\n+ pnpm@2.16.2\nadded 1 package from 1 contributor in 1.789s\n...\n$ pnpm install --no-save\nUsing hooks from: /.../pnpmfile.js\nreadPackage hook is declared. Manifests of dependencies might get overridden\nPerforming headless installation\nResolving: total 159, reused 137, downloaded 3\nResolving: total 509, reused 487, downloaded 9\nERROR\u2009 /fsevents/1.2.4 not found in shrinkwrap.yaml\nat at /usr/local/lib/node_m\u2026  pnpm/headless/lib/index.js:315                                                     \nat next                                                                                                          \nat at /usr/local/lib/node_m\u2026  pnpm/headless/lib/index.js:7                                                       \nat new Promise                                                                                                   \nat __awaiter                  /usr/local/lib/node_modules/pnpm/lib/node_modules/@pnpm/headless/lib/index.js:3    \nat getChildrenPaths           /usr/local/lib/node_modules/pnpm/lib/node_modules/@pnpm/headless/lib/index.js:286  \nat at /usr/local/lib/node_m\u2026  pnpm/headless/lib/index.js:277                                                     \nat next                                                                                                          \nat fulfilled                  /usr/local/lib/node_modules/pnpm/lib/node_modules/@pnpm/headless/lib/index.js:4. When I remove fsevents from shrinkwrap.yaml , I then hit the same error with the next optional dependency.  Once all of the optional dependencies (which are not also real dependencies of other packages) are removed, the install is successful.. Simple workaround was to add the following to pnpmfile.js\njs\nfunction readPackage(pkg) {\n  if (pkg.optionalDependencies) {\n    pkg.optionalDependencies = {};\n  }\n}. If it is merge conflicts, the workaround should be to fetch the last master shrinkwrap.yaml and then rerun pnpm install to add anything new in package.json.\nWhat would be great is if pnpm couldnt load the yaml, it detected a merge conflict, internally created two yaml files for each of the conflicted versions, and automatically resolved it by merging them, similar to https://www.npmjs.com/package/npm-merge-driver (and perhaps asking them to support pnpm). Relevant source is\njs\n..\ncompiler = 'typescript/bin/tsc';\n..\nbin = require.resolve( compiler );\n..\nconst tscProcess = spawn(bin, [...args]);\n..\ntscProcess.stdout.on('data', buffer => {\n  ..\n}\nhttps://github.com/gilamran/tsc-watch/blob/master/lib/tsc-watch.js#L145. This appears to be a dup of https://github.com/pnpm/pnpm/issues/1075. I suspect this might be the fix for https://github.com/pnpm/pnpm/issues/1384. Maybe of interest, pnpm includes 718+ LICENSE files, of which 100+ are duplicates.\n```console\n\nrpm -ql pnpm | grep -i LICENSE | wc -l\n718\n```\n\nAnd the tarball has ~15 non-flattened/possible-duplicate @types/node & @types/ramda.\n```console\n\nrpm -ql pnpm | cut -b 45- | grep '@types/.' | grep -v '^@types'\n@pnpm/config/node_modules/@types/node\n@pnpm/config/node_modules/@types/node/LICENSE\n@pnpm/config/node_modules/@types/node/package.json\n@pnpm/filter-shrinkwrap/node_modules/@types/ramda\n@pnpm/filter-shrinkwrap/node_modules/@types/ramda/LICENSE\n@pnpm/filter-shrinkwrap/node_modules/@types/ramda/package.json\n@pnpm/link-bins/node_modules/@types/ramda\n@pnpm/link-bins/node_modules/@types/ramda/LICENSE\n@pnpm/link-bins/node_modules/@types/ramda/package.json\n@pnpm/modules-cleaner/node_modules/@types/ramda\n@pnpm/modules-cleaner/node_modules/@types/ramda/LICENSE\n@pnpm/modules-cleaner/node_modules/@types/ramda/package.json\n@pnpm/package-store/node_modules/@types/ramda\n@pnpm/package-store/node_modules/@types/ramda/LICENSE\n@pnpm/package-store/node_modules/@types/ramda/package.json\n@pnpm/prune-shrinkwrap/node_modules/@types/ramda\n@pnpm/prune-shrinkwrap/node_modules/@types/ramda/LICENSE\n@pnpm/prune-shrinkwrap/node_modules/@types/ramda/package.json\n@pnpm/read-modules-dir/node_modules/@types/node\n@pnpm/read-modules-dir/node_modules/@types/node/LICENSE\n@pnpm/read-modules-dir/node_modules/@types/node/package.json\n@pnpm/resolve-dependencies/node_modules/@types/ramda\n@pnpm/resolve-dependencies/node_modules/@types/ramda/LICENSE\n@pnpm/resolve-dependencies/node_modules/@types/ramda/package.json\n@pnpm/shrinkwrap-file/node_modules/@types/ramda\n@pnpm/shrinkwrap-file/node_modules/@types/ramda/LICENSE\n@pnpm/shrinkwrap-file/node_modules/@types/ramda/package.json\n@pnpm/shrinkwrap-utils/node_modules/@types/ramda\n@pnpm/shrinkwrap-utils/node_modules/@types/ramda/LICENSE\n@pnpm/shrinkwrap-utils/node_modules/@types/ramda/package.json\ndata-uri-to-buffer/node_modules/@types/node\ndata-uri-to-buffer/node_modules/@types/node/LICENSE\ndata-uri-to-buffer/node_modules/@types/node/package.json\nfind-packages/node_modules/@types/node\nfind-packages/node_modules/@types/node/LICENSE\nfind-packages/node_modules/@types/node/package.json\npkgs-graph/node_modules/@types/ramda\npkgs-graph/node_modules/@types/ramda/LICENSE\npkgs-graph/node_modules/@types/ramda/package.json\npnpm-file-reporter/node_modules/@types/node\npnpm-file-reporter/node_modules/@types/node/LICENSE\npnpm-file-reporter/node_modules/@types/node/package.json\npnpm-list/node_modules/@types/ramda\npnpm-list/node_modules/@types/ramda/LICENSE\npnpm-list/node_modules/@types/ramda/package.json\n```. Package has been accepted into the 'devel' repo of openSUSE https://build.opensuse.org/package/show/devel:languages:nodejs/pnpm. \n",
    "irisjae": "Hi! Is link: really a synonym for file:? I installed a local dependency with pnpm, which added a link: to my package.json, but unfortunately when testing the package, it was unable to install on npm with the error\nnpm ERR! code EUNSUPPORTEDPROTOCOL\nnpm ERR! Unsupported URL Type \"link:\": link:X\nI've looked around and have yet been able to find a source elsewhere that says link: really a synonym for file:.. 6.4.0. It didn't work with 5.6.0 either.. No, not really. It really is a very simple package. I can even take the temporary workaround of changing the package.json myself, but I found it strange that what pnpm installs into package.json would be rejected by npm. Is this not an issue for you?. Hmm. Can you reproduce what I'm saying? Should we open a new issue?. npm has spoken. They say link: is not supported, onlly file:. ",
    "langpavel": "I also opened same feature requests on https://github.com/npm/npm/issues/19970 and https://github.com/yarnpkg/yarn/issues/5456. ",
    "Tellan": "It errors even when calling pnpm install in a package directory with an empty license, but here's a package anyway:\nhttps://www.npmjs.com/package/pnpm-license-test. ",
    "martinjlowm": "The culprit is the logic of:\nhttps://github.com/zkochan/lifecycle/blob/ec87afa663a6f281a9a5850c2801bfb05aaff3eb/index.js#L72-L73\nand \nhttps://github.com/zkochan/lifecycle/blob/ec87afa663a6f281a9a5850c2801bfb05aaff3eb/index.js#L99-L101\nIf the directory name doesn't match the name in the package.json file - the function returns silently. Identical names are rarely the case in Docker containers.\nI guess, passing unsafePerm is the only workaround, i.e.: pnpm i --unsafe-perm.. ",
    "renovate[bot]": "PR has been edited\nAs this PR has been edited, Renovate will stop updating it in order to not cause any conflicts or other problems. If you wish to abandon your edits and have Renovate recreate this PR then you should rename this PR and then close it.. ### PR has been edited\nAs this PR has been edited, Renovate will stop updating it in order to not cause any conflicts or other problems. If you wish to abandon your edits and have Renovate recreate this PR then you should rename this PR and then close it.. ### PR has been edited\nAs this PR has been edited, Renovate will stop updating it in order to not cause any conflicts or other problems. If you wish to abandon your edits and have Renovate recreate this PR then you should rename this PR and then close it.. ### PR has been edited\nAs this PR has been edited, Renovate will stop updating it in order to not cause any conflicts or other problems. If you wish to abandon your edits and have Renovate recreate this PR then you should rename this PR and then close it.. ### PR has been edited\n:construction_worker: This PR has received other commits, so Renovate will stop updating it to avoid conflicts or other problems. If you wish to abandon your changes and have Renovate start over then you can add the label rebase to this PR and Renovate will reset/recreate it.. ### :warning: Lock file problem\nRenovate failed to update a lock file. You probably do not want to merge this PR as-is.\n:recycle: Renovate will retry this branch, including lockfile, only when one of the following happens:\n\nany of the package files in this branch needs updating, or \nthe branch becomes conflicted, or\nyou rename this PR's title to start with \"rebase!\" to trigger it manually\n\nThe lock file failure details are included below:\npackages/pnpm/shrinkwrap.yaml\n```\n```\n. ### PR has been edited\n:construction_worker: This PR has received other commits, so Renovate will stop updating it to avoid conflicts or other problems. If you wish to abandon your changes and have Renovate start over then you can add the label rebase to this PR and Renovate will reset/recreate it.. ### :warning: Lock file problem\nRenovate failed to update a lock file. You probably do not want to merge this PR as-is.\n:recycle: Renovate will retry this branch, including lockfile, only when one of the following happens:\n\nany of the package files in this branch needs updating, or \nthe branch becomes conflicted, or\nyou rename this PR's title to start with \"rebase!\" to trigger it manually\n\nThe lock file failure details are included below:\nprivatePackages/prepare/shrinkwrap.yaml\n```\n```\n. ### :warning: Lock file problem\nRenovate failed to update a lock file. You probably do not want to merge this PR as-is.\n:recycle: Renovate will retry this branch, including lockfile, only when one of the following happens:\n\nany of the package files in this branch needs updating, or \nthe branch becomes conflicted, or\nyou rename this PR's title to start with \"rebase!\" to trigger it manually\n\nThe lock file failure details are included below:\npackages/supi/shrinkwrap.yaml\n```\n```\n. ### :warning: Lock file problem\nRenovate failed to update a lock file. You probably do not want to merge this PR as-is.\n:recycle: Renovate will retry this branch, including lockfile, only when one of the following happens:\n\nany of the package files in this branch needs updating, or \nthe branch becomes conflicted, or\nyou rename this PR's title to start with \"rebase!\" to trigger it manually\n\nThe lock file failure details are included below:\npackages/pnpm/shrinkwrap.yaml\n```\n```\n. ### Renovate Ignore Notification\nAs this PR has been closed unmerged, Renovate will ignore this upgrade and you will not receive PRs for any future 5.x releases. However, if you upgrade to 5.x manually then Renovate will then reenable updates for minor and patch updates automatically.\nIf this PR was closed by mistake or you changed your mind, you can simply rename this PR and you will soon get a fresh replacement PR opened.. ### :warning: Lock file problem\nRenovate failed to update a lock file. You probably do not want to merge this PR as-is.\n:recycle: Renovate will retry this branch, including lockfile, only when one of the following happens:\n\nany of the package files in this branch needs updating, or \nthe branch becomes conflicted, or\nyou rename this PR's title to start with \"rebase!\" to trigger it manually\n\nThe lock file failure details are included below:\npackages/supi/shrinkwrap.yaml\n```\n```\n. ### Renovate Ignore Notification\nAs this PR has been closed unmerged, Renovate will now ignore this update (8.3.5). You will still receive a PR once a newer version is released, so if you wish to permanently ignore this dependency, please add it to the ignoreDeps array of your renovate config.\nIf this PR was closed by mistake or you changed your mind, you can simply rename this PR and you will soon get a fresh replacement PR opened.. ### PR has been edited\n:construction_worker: This PR has received other commits, so Renovate will stop updating it to avoid conflicts or other problems. If you wish to abandon your changes and have Renovate start over then you can add the label rebase to this PR and Renovate will reset/recreate it.. ### PR has been edited\n:construction_worker: This PR has received other commits, so Renovate will stop updating it to avoid conflicts or other problems. If you wish to abandon your changes and have Renovate start over then you can add the label rebase to this PR and Renovate will reset/recreate it.. ### PR has been edited\n:construction_worker: This PR has received other commits, so Renovate will stop updating it to avoid conflicts or other problems. If you wish to abandon your changes and have Renovate start over then you can add the label rebase to this PR and Renovate will reset/recreate it.. ### Renovate Ignore Notification\nAs this PR has been closed unmerged, Renovate will now ignore this update (5.12.1). You will still receive a PR once a newer version is released, so if you wish to permanently ignore this dependency, please add it to the ignoreDeps array of your renovate config.\nIf this PR was closed by mistake or you changed your mind, you can simply rename this PR and you will soon get a fresh replacement PR opened.. ### PR has been edited\n:construction_worker: This PR has received other commits, so Renovate will stop updating it to avoid conflicts or other problems. If you wish to abandon your changes and have Renovate start over you may click the \"rebase\" checkbox in the PR body/description.. ",
    "aquark": "I'm curious, since using spawn('node', [bin, ...args]) bypasses the generated wrapper script which sets NODE_PATH, wouldn't this break programs which rely on undeclared peer dependencies (plugins)?. I'm working around this by essentially duplicating the tsc bin with chmod a+x in my package root:\n```\n!/usr/bin/env node\nrequire('typescript/lib/tsc.js')\n``\nand then invokingtsc-watch --compiler \"$(pwd)/tsc\".. Agreed, resolving. It looks like the problem is that [npm-lifecycle only allows one command to run at a time](https://github.com/npm/npm-lifecycle/blob/latest/index.js#L216). How did this ever work?. I'm working around this usinglerna runinstead, but I preferpnpm`'s output and it would be nice to avoid the extra dev dependency.. ",
    "thomabr": "Hey Zoltan,\nThat seems to have fixed the problem. Thanks Nick for starting the conversation!. ",
    "p3x-robot": "Yes, of course, we use multiple registries and yarn.lock. Either way, the 2nd run generates the yarn.lock, why would we care about deleting to make it faster?\nI do not want to say this pnpm package is bad. I think it is awesome, but for ntfs it is awesome, but for every BSD , *nix, the file system is fast.\nFor now, the size is not as important as the speed and there is an edge on the yarn.\nBy the way, this pnpm is awesome! Of course for Windows, I am sure it will be win.\nJust, given the architecture of NodeJs and npm, yarn will always be faster on a new player without using multiple processes installing like yarn does.\nI watched pnpm, but it was serial.. You might be right. I use at once 53 projects installing at once. If I install all at once (every project is a new process, it never works, only the 2nd time, usually, but it coud still fail).\nWhen I use npm, for install everything, yarn is faster.\nWhen I use pnpm for 53 projects yarn is faster.\nI just simply time the install, for all 3 package installer and that's all.\nI guess for our use case, using 4 different registries (yarn, npm, work - verdaccio, home - verdaccio), the result is yarn is faster. But it is all about a use case, I guess, and your stars are showing that lot's of people love it.\nBesides, most people use Windows and for that I think pnpm will win, for sure!\nGiven for us the speed is the most important, I can only use yarn for now, given many projects and that's the fastest. \nBut, I am so sure, this program is awesome!!! :+1:  :100:  :1st_place_medal:  \nI keep on this package, because if it becomes faster than yarn, of course, I will switch, the whole build system we use.\nBut, I do not have too much time to set this, set that flag, we have enough flags, it is either faster or not, that's where it goes down.\nBut I will test it more, it is my first time to use it and shared my experience.\nI hope it is OK.\nSzia!!!!. (by the way, I can only say Russian not beautiful words, because I was young and all my friends were using words that I learn't it is better not to tell you about it ... :)\nI am sure you know beautiful Hungarian. :) Hahahaha.... Los Angeles Russian with my friends lot's of more like of hahahahah.. OK, thanks so much! I will overview this again, because the number of packages we install is so huge, I still have to learn about pnpm.\nThanks you so much!\nI am sure you will win yarn for us as well!!!. ",
    "flihub": "still not working with pnpm 2.0. package.json and webpack.mix.js in attachment\npnpm install\npnpm run watch\nlaravelmix : https://github.com/JeffreyWay/laravel-mix\nlaravelmix.zip\n. not solved...\nand cant install webpack as a dependency...\npnpm install webpack@3\nAlready up-to-date\ndependencies:\n- webpack. Worked with shamefully-flatten=true thank you.. ",
    "puzzle9": "I don't know if you've solved it.. ",
    "reneroth": "Bumping this back up to the top, maybe another kind soul found a solution for this?. Fixed it by completely rm -rfing my global npm packages.. ",
    "ericclemmons": "I was just experimenting with this, and I think the biggest issue is with interactive prompts.\nUsing the excelling np utility:\ndiff\ndiff --git a/packages/hot-module/package.json b/packages/hot-module/package.json\nindex f2f9d97..9696e13 100644\n--- a/packages/my-package/package.json\n+++ b/packages/my-package/package.json\n@@ -2,8 +2,14 @@\n   \"name\": \"my-package\",\n   \"version\": \"1.0.0\",\n   \"main\": \"src/index.js\",\n+  \"scripts\": {\n+    \"release\": \"np\"\n+  },\n   \"dependencies\": {\n     \"is-builtin-module\": \"^3.0.0\",\n     \"node-watch\": \"^0.5.8\"\n+  },\n+  \"devDependencies\": {\n+    \"np\": \"^3.0.4\"\n   }\n}\nIt looks like I could leverage pnpm multi run, since it will skip packages that don't have that script:\n```\npnpm m run release\npackages/my-package                      |     release$ np\npackages/my-package                      |     release: Publish a new version of my-package (current: 1.0.0)\n```\nPerhaps np isn't ready for a monorepo, but it raises an interesting dilemma for anything that requires stdin.\nBut this hangs, since I can't provide input to interactive prompts.. ",
    "lorefnon": "I see. In that case will it be fine if I generate (or idempotently overwrite) the equivalent package.json (if package.yaml exists) whenever cli is run ?\nPerhaps this can be made more safe by inclusion of  an additional entry like { \"pnpm\" : { \"autogenerated\" : true }} in the generated package.json which indicates to users that it is auto generated and also prevents package.json from being overwritten if not present (in which case the cli will abort with an error). . ",
    "sleeparrow": "$ pnpm --version\n1.38.3\ni don't believe it failed to update. i didn't run pnpm i -g pnpm again and it says it's at 1.38.3 . ",
    "ddlbrena": "Thanks Zoltan, I looked more and I think it might be a bug in Rush, since the error comes from there being unable to parse the depRepo1.pkgs.visualstudio.com/@scope1/dependency1/1.0.14 version format. I will follow up there. \nAlso I was trying to find more info regarding the shrinkwrap yaml format, is there any?\nthanks.. Thank you, my bad for missing that. There is no issue here then. I will close the issue. Thank you for the help.. ",
    "iclanton": "What would it take to get this implemented? Our repos are collecting a lot of warnings about pnpm violating semver during install.. We've come up with a simpler repro at https://github.com/nickpape-msft/react-pnpm-repro\nIn this repro, we depend on two tarballs, but we only need to care about the 15 version to see the issue. The 15 version of the tarball (package.json is in the repo as), we depend on @types/react version 15.6.6 and @types/react-dom version 15.5.6. @types/react-dom has a dependency on @types/react with semver selector \"^15\", which causes @types/react version 15.6.16 to get installed alongside 15.6.6\nIt looks like the selection heuristic only cares about the root package.json, and not about dependent packages' package.jsons when solving version heuristics, which in this case is causing the additional version to get installed (and is breaking TS's typechecking). That seems to work around the extra versions issue, but it doesn't solve the issue where packages get a version that ignores their context.\nCan we pursue the option to prefer versions beyond just the root?. We've started seeing this more. This time, while upgrading the TypeScript compiler for just one project in a Rush repo. A package called tslint-microsoft-contrib has a peerDependency on typescript that isn't getting fulfilled when two version of typescript are requested.\n@pgonzal. We do see a warning for this issue during install, so https://github.com/pnpm/pnpm/issues/1126 would be very helpful in this case.\nHere's the warning\nWARN\u2009 tslint-microsoft-contrib@5.2.1 requires a peer of typescript@^2.1.0 || ^3.0.0 but none was installed.. Where do these checksums come from? Is there a REST endpoint on the registry that returns them? How does PNPM decide which algorithm to use when it (presumably) hashes the tarball that it downloaded?. ",
    "5310": "I'm still getting this with PNPM 2.13.5 and A-Frame 0.8.2 \nAny ideas what I could do to get it to install? The breaking dependency and even the hash in question hasn't changed.\nEdit: It seems PNPM doesn't resolve shortened hashes. I was able to manually install the dependency by its full hash pnpm install git://github.com/dmarcos/document-register-element.git#8ccc532b7f3744be954574caf3072a5fd260ca90 but that's not enough to make A-Frame install. \nWill I have to fork to install A-Frame? Can I not alias the dependencies somehow?. The dependency is now expanded to its full hash in A-Frame itself, and the package can be installed directly in PNPM now (from the GitHub repository for now, and perhaps from NPM by 0.8.3)\n:crossed_fingers: for shorthash resolution in pnpm/git-resolver someday!. ",
    "solsson": "The referencing jest issue seems to confirm that pnpm is not at fault here.. ",
    "gilly3": "Ok, that's better than I thought.\nAs far as linking dependencies on devloper machines via npm link or pnpm link, but not doing so for servers, am I correct in assuming it best to list shrinkwrap.yaml in .gitignore and .npmignore?  Or is there some other means whereby differences in paths can be resolved?. Well, that is handy!  I will take a look at npm recursive link.\nThanks for clarifying everything for me.. ",
    "jbrekelmans": "Thanks for your feedback! I should have time to make the changes in the next few hours!. Yes, I agree it was complex. I've simplified it a lot now and reduced it to 1 test instead of 2, since the second test did not add anything. There are some unrelated tests failing on my local, is this expected? \nScreenshot of test output:\n\n. That was a bit trickier than I thought, the CI is solid at least \ud83d\udc4dI'll see if there is any remaining issues later.. Not sure why AppVeyor CI is failing, it appears the t.plan ends in the next test:\n# installation without store server running in the background\nAny ideas?. server.json is not being removed on Windows. It appears signal-exit does not emit an event on Windows when using tree-kill with SIGINT, to be confirmed.... Your third option (using server stop) seems the best. Windows doesn't support signals apparently, so the process being killed should be messaged so it can perform cleanup. Also this way we don't write any Windows specific code (if you don't count not using kill).\n~The test 'recursive using server' now consistently fails (on both Windows and unix).~\nIt's actually the 'parallel server start' test. I was mislead by the tests running in parallel.\nSeems adding prepare added one assert, so the plan count had to be incremented.\nI removed a couple of ends from the 'recursive install' tests, based on 5th paragraph here: https://www.node-tap.org/api/#ttestname-options-function\nIf test callbacks return a Promise then the test will end when the Promise resolves. Not intended for this pull request, I can remove them if you want.. I'm not too familiar with rebase. It seems I am losing my changes as I go through the rebase, if I'm lucky I get a conflict so I can correctly merge. I'm doing something like 'git rebase -i HEAD~20' and then squash almost everything. What's the best strategy here?. @zkochan Awesome! Thanks. Ough! Good catch!. Aah that's how it works, I thought it was only counting t.pass. Agreed, no need to close fd asap because start.ts will only be used from CLI.. ",
    "croqaz": "One quick idea that pops into my mind from this: https://stackoverflow.com/questions/37078968/how-to-specify-the-path-of-package-json-to-npm\nIf the pnpm package would be converted into package.json into a temp file, npm can be launched pointing to that and let it do its thing. Not sure if this is the desired behaviour, or it should be included inside PNPM.. ",
    "dianasaurio": "I have the same issue in OS X. I'm adding a screenshot.\n\n. ",
    "tachtevrenidis": "yeap tried that. Since this error is not thrown when installing with npm, I figured it must be something in how it is installed via pnpm.. also my repro steps start out with an empty folder (not even a package.json file in there). So there can't be any other deps?. ",
    "Ore4444": "For anyone this might be useful for:\nhttps://stackoverflow.com/questions/50441890/experimentalwarning-the-fs-promises-api-is-experimental/52915615#52915615. ",
    "zaaack": "I tried with latest webpack-blocks\uff0clooks it's fixed by webpack\uff0cperhaps.\nBut then I hit new issue\uff0ctype error from typescript because duplicate packages in node_modules/.registry.npm.taobao.org/xxxx. ",
    "xbtsw": "Encountered a new kind of failure just now:\nError: EPERM: operation not permitted, rename 'C:\\_work\\21\\s\\node_modules\\.registry.npmjs.org\\@webassemblyjs\\wasm-parser\\1.4.2\\node_modules\\@webassemblyjs\\_tmp_8_f104fbf47d03cc225f36a0d94f262dc7' -> 'C:\\_work\\21\\s\\node_modules\\.registry.npmjs.org\\@webassemblyjs\\wasm-parser\\1.4.2\\node_modules\\@webassemblyjs\\wasm-parser'. @zkochan when these error happens pnpm doesn't seem to produce a pnpm-debug.log in the current working folder. And these error seems only occasionally happens in our CI machines. Do you have any pointers for me if I want to look into it? I am pretty clueless on what might be the cause.. The second case smells like a file system race condition. stage should indeed exist on the disk at line 13. Out of few hundreds CI run the second case only happened one time though.\nAside from adding a retry around line 13 I don't see what else can be done at pnpm level.\n. Hi @zkochan I can confirm that when this happens, pnpm is not running with shamefully-flatten. Just to add some information, out of the ~120 CI runs that failed, it looks like the issue always happen when pnpm trying to operate on @webassemblyjs\\wasm-parser. I am not sure if that's coincidence.. When this happens there seems to be no pnpm-debug.log file generated. The CI machines always start from a clean slate with fixed nodejs version (8.11.1) and pnpm version (2.0.0) and empty working folder.\nI install pnpm with this command:\nnpm install -g --registry https://registry.npmjs.org/ --always-auth false pnpm@2.0.0\nand run it with\npnpm install --frozen-shrinkwrap --reporter=silent --store=.\\bin\\pnpm\nI will bump the pnpm to latest version (2.13.5) today and see if the problem goes away.. @zkochan Thanks for the suggestion. I tested couple of versions, with 2.16.2 (latest). It consistently fail with a pnpm-debug.log file produced and always fail with the same package (enzyme)\n2018-09-28T23:36:39.7083012Z   23747 error pnpm: \n2018-09-28T23:36:39.7083189Z     message: \n2018-09-28T23:36:39.7083300Z       errno: -4094\n2018-09-28T23:36:39.7083411Z       code: \"UNKNOWN\"\n2018-09-28T23:36:39.7083574Z       syscall: \"readlink\"\n2018-09-28T23:36:39.7083745Z       path: \"C:\\\\_work\\\\1\\\\s\\\\node_modules\\\\@types\\\\enzyme\"\n2018-09-28T23:36:39.7085401Z     err: \n2018-09-28T23:36:39.7086717Z       name: \"Error\"\n2018-09-28T23:36:39.7089908Z       message: \"UNKNOWN: unknown error, readlink 'C:\\\\_work\\\\1\\\\s\\\\node_modules\\\\@types\\\\enzyme'\"\n2018-09-28T23:36:39.7092650Z       code: \"UNKNOWN\"\n2018-09-28T23:36:39.7094514Z       stack: \"Error: UNKNOWN: unknown error, readlink 'C:\\\\_work\\\\1\\\\s\\\\node_modules\\\\@types\\\\enzyme'\"\nWith 2.13.5 it reliably worked and installed the dependencies successfully. With a git bisect I might be able to narrow it to a specific commit. I will try that and let you know.. ",
    "xtuc": "Has this something to do with webassemblyjs? We had issues in the past with cyclic deps, pnpm and windows.. ",
    "quinton-ashley": "Why does it need access to this directory?  Can this be fixed without editing permissions?. I agree. ",
    "fineline": "Hi @zkochan I have come across this issue too so here are my answers to your question from 25 June, hopefully this can help you progress a fix to this issue.\nnpm root -g prints:\n/usr/local/lib/node_modules\nnpm prefix -g prints:\n/usr/local\nAnd that is the same value in the npmrc file too.. I started getting the following message whenever running pnpm for installs:\n```\n   \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n   \u2502                                                                  \u2502\n   \u2502                Update available! 2.12.2 \u2192 2.13.1                 \u2502\n   \u2502   Changelog: https://github.com/pnpm/pnpm/releases/tag/v2.13.1   \u2502\n   \u2502                  Run pnpm i -g pnpm to update!                   \u2502\n   \u2502                                                                  \u2502\n   \u2502      Follow @pnpmjs for updates: https://twitter.com/pnpmjs      \u2502\n   \u2502                                                                  \u2502\n   \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n```\nHowever, trying the recommended command resulted in the error in this issue:\n$ pnpm i -g pnpm\n\u2009ERROR\u2009 EACCES: permission denied, mkdir '/usr/local/pnpm-global'\nSo I have worked around this by manually creating the folder and taking ownership of it:\nsudo mkdir '/usr/local/pnpm-global'\nsudo chown <myusername> pnpm-global\nSo it's working for now. Suggest that this may be a confusing user experience for those following the notification though.. ",
    "czerwonkabartosz": "I had a similar problem.\nError: EACCES: permission denied, mkdir '/Users/xxx/.pnpm-store/2/registry.npmjs.org/@types/node/10.12.6/_tmp_96278_4fbf8e00003a2ca4d082c374b8c81a20'\nBut I've found a solution for this sudo rm -rf /Users/xxx/.pnpm-store \ud83d\ude02  and after this everything works perfectly.. ",
    "sbussard": "I'm having the same problem:.pnpm-store is owned by the root user. \nI think the problem is that npm requires sudo to install the pnpm cli, so the permissions may be an artifact of that situation. ",
    "ikhsanalatsary": "I used this solution and trust me it works. ",
    "NetOperatorWibby": "@zkochan What if your .env file looks like this?\nFOO-BAR=foo1\nBAR-FOO=bar1\nBAZ-ZAB=1. ",
    "s-h-a-d-o-w": "Personally, I'm more irritated by laggy simple commands than install speed because when I run npm/yarn/pnpm install, I'm not sitting there waiting. But I am when I use commands like run, info, etc.\nBut... that's my opinion.\nWhat makes me suspicious is why simply piping something through takes that long. (Merely spawning something with inherited io causes an overhead of ~80ms on my machine.)\nAnyway... as I said in my very first post - it's just an observation. :smile:. Thank you very much for the quick response, good to know!. ",
    "Conduitry": "Yes, I suppose that I would like pnpm to create junctions when run in WSL and when it's installing to a directory that's inside a mounted host filesystem drive. What it's doing now (creating a Linux symlink) works fine from within WSL - but on the host filesystem this just creates an unreadable file. This is inconvenient when something running under Windows (e.g. an editor) expects to be able to see certain packages for its own typescript/prettier/eslint/etc plugins.. @HyperBrain Interesting. I'm certainly willing to give that a try for a bit. I think I've sort of gotten this working, but what I had to do to get vscode installed inside WSL (along with dependencies) didn't feel great, and I'm running into some other flakiness. Could you give the steps you used to install vscode inside a fresh WSL (running xenial)? And then I assume you're running vscode with DISPLAY=:0 code. Thanks!. Oh huh I'm not sure when it happened, but I just noticed that as of pnpm 2.11.3 it looks like the links created under WSL are now Windows links as opposed to WSL's own links. Was this intentional?\nEdit: Well double huh. This is happening only on one of my machines and not on the other. The other still has WSL's symlinks which Windows can't read. Most peculiar.. Okay interesting - Windows 10 developer mode was enabled on one machine but not the other (probably left over from when it was necessary to have it on to use WSL?). When I turn developer mode on on the other machine, the symlinks that pnpm creates are now Windows links there too.. I'm going to close this. I'm quite happy with the solution of having developer mode on.\nI'm actually not sure there's any non-developer-mode solution that could exist. IIRC one of the things that developer mode changes is to make it so that Windows directory links can be created as a non-administrator.. Also almost certainly related: If I try to run pnpx [some-package] ..., after it installs and pnpx tries to run it, I just see command not found: [some-package]. If I instead run APPDATA= pnpx [some-package] ..., all seems well.. I'm pretty sure the APPDATA env thing was exactly what was going on. I've submitted a PR.. For the record, the APPDATA environment variable is actually not being automatically set by Windows, it's being set by wsltty, which I had switched to recently from ConEmu.\nLooking back on it, this issue does seem like it started happening around the same time as I switched - but I didn't look to that as a possible culprit at the time. (Who would expect a problem like this to be triggered by changing console emulators?). The new release 2.17.0 looks like it includes this change and is working well :+1:. ",
    "HyperBrain": "@Conduitry One workaround (not a solution) is, to use linux tools instead of windows ones. E.g. I use VSCode in WSL (together with VcXsrv) which works perfectly.. @Conduitry The steps mentioned in the issue description here https://github.com/Microsoft/WSL/issues/2760 worked for me -> In short: add the VSCode PPA, Install \"code\" (I don't remember if I installed the mentioned libs before) and start dbus with \"sudo service dbus start\". The dbus startup is best in the startup. The only thing for me is, that I could not use LIBGLINDIRECT but software rendering because my Intel graphics driver does not support OpenGL correctly.\nTo get audio in X11 running (also for other apps) I had to install a patched version of pulseaudio (search for pulseaudio WSL) and run the pulseaudio server in a powershell. Then the audio is routed through localhost but works perfectly.\nI even use Chrome now on WSL ;-). ",
    "nareddyt": "Thanks for updating this issue! I have also confirmed that enabling developer mode allows for WSL to create windows directory links. This means tools like Webstorm will be able to read the packages!\nI'll look into updating the FAQ in the docs do state this for other WSL developers. Thanks, I will make the changes!. Everything should be merged and all issues should be fixed. I can add some more tests if this code structure looks good to you.\nCould you take a look at the failing AppVeyor build? I'm not entirely sure what that error means, I don't think I touched that part of the project.. @etamponi I'll create an issue for that and work on it right after this PR is merged in.\n@zkochan I'll go ahead and add some tests for my changes. I'll let you know when I'm done. @zkochan added tests, should be ready to merge if all checks pass. @zkochan do you have a list of things that were broken? Just curious so I can prevent making the same mistakes next time. Thanks, looked over them and that looks much cleaner. This is my first big project with js/ts, so glad to see those changes and I'm learning a lot from them!. After the changes made in #1544, this works as expected. What do you think of this? Created a new module called assert-store. This can be used by SUPI tests and even assert-project to abstract away the store checking.. > good idea. Probably it may be used in assert-project as well, as it implements storeHas, storeHasNot for specific projects\nI can make a different PR for that once this module is published on npm.. Ah thanks, that makes a lot of sense. Ok, I can go ahead and do the rest of the tasks once it is merged.. Resolved via #1560 . Because the user may specify a package without a version number, I can't just resolve the package and get a packageId to lookup in the store. Instead, I have to manually traverse the entire store and run substrings on every packageId.\nThis is inefficient, but that's OK. However, this breaks on Windows, as the store stores packages with \\ instead of /. Any reasonable way to fix this?. Had to add archy to pnpm to display the results in a tree-like structure. Is this the right place to add it?. Plan on updating https://pnpm.js.org with this documentation. It feels a little too bloated to be in help page of the CLI, and it makes it harder to read. Is this OK?. Plan on adding more tests here after all changes to src are done. Some test cases I plan on including:\n\nMake sure query returns all versions of a package in the store\nMake sure query returns all projects that depend on the package\nMake sure query does not return any results if package is not the store\nMake sure specifying a version number does not return other versions. Weird, I don't see any tslint errors!\n\n```\n$ pnpm run lint\n\n@pnpm/package-store@1.2.0 lint /mnt/d/tejun/Github/pnpm/pnpm/packages/package-store\ntslint -c tslint.json src//*.ts test//*.ts\n\nWarning: The 'await-promise' rule requires type information.\nWarning: The 'deprecation' rule requires type information.\nWarning: The 'no-floating-promises' rule requires type information.\nWarning: The 'no-unnecessary-qualifier' rule requires type information.\nWarning: The 'no-unnecessary-type-assertion' rule requires type information.\nWarning: The 'strict-type-predicates' rule requires type information.\nWarning: The 'no-use-before-declare' rule requires type information.\n```\nI'll go ahead and remove semicolons from all my changes though.. Ok, I'll take a look at those changes and update those soon.. I was wrong about this, this actually does work in most cases. The packageId is resolved via an external service (npm, github), so it will always have / instead of \\ in it. Windows vs Unix shouldn't make a huge difference.\nI believe it's only a problem when a file or tarball dependency is added to the store. I have not tested this yet, but I think this could be fixed in a separate PR since the majority of users use npm. I can create an issue for this tomorrow.. Done!. Oops, that is correct. My bad. Ok, that makes the most sense. I was originally confused because I thought that assert-project was in charge of creating the store. Taking a deeper dive into the source code, I see that is not the case.\nI can make a new assert-store privatePackage.. Fixed!. I followed your suggestion, but my IDE shows the following error: TS2304: Cannot find name 'HTTPError'.\nThis occurs even with the following import: import { HTTPError } from 'got'\nIs it because HTTPError is not exported from got? I was able to suppress this error to get the tests working.. It seems like this doesn't actually work. The follow error shows up in the console when JSON.parse fails and all tests stop running (the script hangs):\n(node:1612) UnhandledPromiseRejectionWarning: SyntaxError: Unexpected token u in JSON at position 0\n    at JSON.parse (<anonymous>)\n    at Object.<anonymous> (/mnt/d/tejun/Github/pnpm/pnpm/packages/server/test/index.ts:400:15)\n    at Generator.throw (<anonymous>)\n    at rejected (/mnt/d/tejun/Github/pnpm/pnpm/packages/server/test/index.ts:5:65)\n    at <anonymous>\n    at process._tickDomainCallback (internal/process/next_tick.js:229:7)\n(node:1612) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\n(node:1612) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future,\npromise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\nAny easy way to fix this while still keeping it clean?. My guess is that JSON.parse is throwing an exception, which gets propagated up the entire function instead of just failing the test. This causes the test to exit without calling t.end(). ",
    "andretf": "Ok, I got what is happening.\nTLDR:\nThis works: pnpm --only [dev|prod]\n\nThis is what I get for pnpm ls --help:\n```\npnpm ls [[@scope/] ...]\nAliases: list, la, ll\nWhen run as ll or la, it shows extended information by default.\nOptions:\n--long                          show extended information\n  --parseable                     show parseable output instead of tree view\n  -g, --global                    list packages in the global install prefix instead of in the current project\n  --depth                         max display depth of the dependency tree\n  --prod, --production            display only the dependency tree for packages in dependencies.\n  --dev                           display only the dependency tree for packages in devDependencies.\n```\nLooking at source code it should be something like:\n--only prod            display only the dependency tree for packages in `dependencies`.\n  --only dev             display only the dependency tree for packages in `devDependencies`.\n..or source code fixed.\n. ",
    "errorx666": "This feature is the main reason I use yarn, and without it I'm not going to switch.\nI don't need the sub-submodule edge case that's shown as problematic, but I definitely need to be able to force submodules to specific versions.  I.e., just the \"foo\": \"1.0.0\" and \"foo/bar\": \"1.0.0\" models.\nIf you run into a combination that can't be satisfied, throw an error.. I also want to point out that using a hook script to handle this rather than a declarative format violates the rule of least power.\nhttps://en.wikipedia.org/wiki/Rule_of_least_power. ",
    "yuyaryshev": "I've made a pnpmfile.js for the ones who want \"restrictions\" in package.json.\nJust extract it and place pnpmfile.js near package.json.\npnpmfile.zip\n. ",
    "prabhubalaji": "I am also facing the same issue with sha1.\nAttaching the error log.Please reply if anyone find a solution.\nNPM version: 6.1.0\nPlatform: Windows 7\n26018 verbose node v10.1.0\n26019 verbose npm  v6.1.0\n26020 error code EINTEGRITY\n26021 error sha1-PTIkYrrfB3Fup+uFuviAec3c5QU= integrity checksum failed when using sha1: wanted sha1-PTIkYrrfB3Fup+uFuviAec3c5QU= but got sha512-Bmr56pxML1c9kU+NS51SMFkiVQAb+9uFfXwyqR2tn4w2FPvmPt65eZ9aCcEfRXd9G74HkZnILC6p967pED4aiw== sha1-tx1A2UPQqV2gGVa1R/g8SltKNKw=. (8789 bytes)\n26022 verbose exit [ 1, true ]. ",
    "pulse14": "WARN\u2009 Fetching xxx.xxx.xxx.xxx+32772/material-design-icons/3.0.0 failed!\n\u2009ERROR\u2009 sha1-zL69YZKz3q9rnm8d7iOL4/cEeb8= integrity checksum failed when using sha1: wanted sha1-zL69YZKz3q9rnm8d7iOL4/cEeb8= but got sha512-vrfq4bQmdCEddxR9iri4xm68cs1c7kwu/xtrj9c7Eod6jVv2MkfQkh4t/5IaPb2by+BeoY7RpSKl2kN+pHaX3g== sha1-DRNONZvUOMrB0XtZg5k+aMCSmfM=. (7056736 bytes)\nat on                     \u2026pnpm/lib/node_modules/ssri/index.js:310  const err = new Error(`${sri} integrity checksum failed when using ${algorithm}\u2026\nat emitNone               events.js:111\nat emit                   events.js:208\nat endReadableNT          _stream_readable.js:1056\nat _combinedTickCallback  internal/process/next_tick.js:138\nat _tickCallback          internal/process/next_tick.js:180Resolving: total 1232, reused 1231, downloaded 0Downloading xxx.xxx.xxx.xxx+32772/material-design-icons/3.0.0: 7.06 MB/33.3 MB\nError: sha1-zL69YZKz3q9rnm8d7iOL4/cEeb8= integrity checksum failed when using sha1: wanted sha1-zL69YZKz3q9rnm8d7iOL4/cEeb8= but got sha512-vrfq4bQmdCEddxR9iri4xm68cs1c7kwu/xtrj9c7Eod6jVv2MkfQkh4t/5IaPb2by+BeoY7RpSKl2kN+pHaX3g== sha1-DRNONZvUOMrB0XtZg5k+aMCSmfM=. (7056736 bytes)\n    at Transform.on (C:\\Users\\Gaetan\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\pnpm\\lib\\node_modules\\ssri\\index.js:310:19)\n    at emitNone (events.js:111:20)\n    at Transform.emit (events.js:208:7)\n    at endReadableNT (_stream_readable.js:1056:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\nError: sha1-zL69YZKz3q9rnm8d7iOL4/cEeb8= integrity checksum failed when using sha1: wanted sha1-zL69YZKz3q9rnm8d7iOL4/cEeb8= but got sha512-vrfq4bQmdCEddxR9iri4xm68cs1c7kwu/xtrj9c7Eod6jVv2MkfQkh4t/5IaPb2by+BeoY7RpSKl2kN+pHaX3g== sha1-DRNONZvUOMrB0XtZg5k+aMCSmfM=. (7056736 bytes)\n    at Transform.on (C:\\Users\\Gaetan\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\pnpm\\lib\\node_modules\\ssri\\index.js:310:19)\n    at emitNone (events.js:111:20)\n    at Transform.emit (events.js:208:7)\n    at endReadableNT (_stream_readable.js:1056:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\nError: sha1-zL69YZKz3q9rnm8d7iOL4/cEeb8= integrity checksum failed when using sha1: wanted sha1-zL69YZKz3q9rnm8d7iOL4/cEeb8= but got sha512-vrfq4bQmdCEddxR9iri4xm68cs1c7kwu/xtrj9c7Eod6jVv2MkfQkh4t/5IaPb2by+BeoY7RpSKl2kN+pHaX3g== sha1-DRNONZvUOMrB0XtZg5k+aMCSmfM=. (7056736 bytes)\n    at Transform.on (C:\\Users\\Gaetan\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\pnpm\\lib\\node_modules\\ssri\\index.js:310:19)\n    at emitNone (events.js:111:20)\n    at Transform.emit (events.js:208:7)\n    at endReadableNT (_stream_readable.js:1056:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\nError: sha1-zL69YZKz3q9rnm8d7iOL4/cEeb8= integrity checksum failed when using sha1: wanted sha1-zL69YZKz3q9rnm8d7iOL4/cEeb8= but got sha512-vrfq4bQmdCEddxR9iri4xm68cs1c7kwu/xtrj9c7Eod6jVv2MkfQkh4t/5IaPb2by+BeoY7RpSKl2kN+pHaX3g== sha1-DRNONZvUOMrB0XtZg5k+aMCSmfM=. (7056736 bytes)\n    at Transform.on (C:\\Users\\Gaetan\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\pnpm\\lib\\node_modules\\ssri\\index.js:310:19)\n    at emitNone (events.js:111:20)\n    at Transform.emit (events.js:208:7)\n    at endReadableNT (_stream_readable.js:1056:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\nIt works fine with npm/yarn. network-concurrency don't solve the issue\nEDIT: The problem seems to be related to private registry. Our verdaccio private registry is working with yarn/npm but not with pnpm. https://drive.google.com/file/d/1Adle6gzo3gmrSpOy7ouy9mEQe7mfbGpF/view?usp=sharing\nI tried to reset verdaccio cache multiple times. ",
    "bugs181": "Does peer dependencies option not solve the issue of \"plugins\"?\nhttps://nodejs.org/en/blog/npm/peer-dependencies/\n. ",
    "rodrigobdz": "In my opinion, this should be in the README. I just migrated to pnpm and first thing I discover while trying to run my React Native project is that it doesn't work.. ",
    "nalbion": "@vjpr that looks good. Thanks. ",
    "vdurante": "@zkochan Thank you for the info. I will let them know. ",
    "IpiVasquez": "I'd like to add: same behavior with Linux (node v10.6.0). We'll be waiting for a fix. In the mix while I have to stick with npm.. ",
    "PaulAGH": "Same behavior on Windows 7 (node v8.11.3).. ",
    "ThomasSchoenbeck": "i am running into a similar problem with ng serve.\ntried installing typescript globally as some older posts are suggesting. also tried --shamefully-flatten. both did not work.\nonly solution for me until now is going back to npm install :(.. ",
    "Nkmol": "tl;dr: I believe pnpm is not solving the dependencies of dependencies (and probably even n-deeper) in a rightful way. npm showing tslib in the root node folder as it is a dependency of multiple packages, though it is not showing inside the pnpm project.\n\nI have ran the clean commands with both npm and pnpm, both have a clean storage/cache.\nIn the pnpm project\nI get the following error when running ng build --prod: Could not find API compiler-cli, function VERSION. This error is related to this try/catch:\nts\nlet compilerCli = null;\ntry {\n    compilerCli = require('@angular/compiler-cli');\n}\ncatch (_a) {\n    // Don't throw an error if the private API does not exist.\n    // Instead, the `CompilerCliIsSupported` method should return throw and indicate the\n    // plugin cannot be used.\n}\nWhich results in the following output once we output the error it catches: \n\n{ Error: Cannot find module 'tslib'\n    at Function.Module._resolveFilename (module.js:547:15)\n    at Function.Module._load (module.js:474:25)\n    at Module.require (module.js:596:17)\n    at require (internal/module.js:11:18)\n    at /home/sander/Projects/test-pnpm/node_modules/.registry.npmjs.org/@angular/compiler-cli/6.1.3/node_modules/@angular/compiler-cli/index.js:12:19\n    at Object.defineProperty.value (/home/sander/Projects/test-pnpm/node_modules/.registry.npmjs.org/@angular/compiler-cli/6.1.3/node_modules/@angular/compiler-cli/index.js:3:17)\n    at Object. (/home/sander/Projects/test-pnpm/node_modules/.registry.npmjs.org/@angular/compiler-cli/6.1.3/node_modules/@angular/compiler-cli/index.js:9:3)\n    at Module._compile (module.js:652:30)\n    at Object.Module._extensions..js (module.js:663:10)\n    at Module.load (module.js:565:32)\n    at tryModuleLoad (module.js:505:12)\n    at Function.Module._load (module.js:497:3)\n    at Module.require (module.js:596:17)\n    at require (internal/module.js:11:18)\n    at Object. (/home/sander/Projects/test-pnpm/node_modules/.registry.npmjs.org/@ngtools/webpack/6.1.4/webpack@4.9.2/node_modules/@ngtools/webpack/src/ngtools_api.js:43:19)\n    at Module._compile (module.js:652:30) code: 'MODULE_NOT_FOUND' }\n\nSo it seems the tslib package is missing. So I run pnpm ls tslib to make sure it is missing, which it is as it gives no results back.\nIn npm project\nruns fine when running the exact same commands. Now to checking tslib with npm ls tslib gives the following result: \n\nnpm-project@0.0.0 /home/user/Projects/npm-project\n\u251c\u2500\u252c @angular/animations@6.1.3\n\u2502 \u2514\u2500\u2500 tslib@1.9.3\n\u251c\u2500\u252c @angular/common@6.1.3\n\u2502 \u2514\u2500\u2500 tslib@1.9.3  deduped\n\u251c\u2500\u252c @angular/compiler@6.1.3\n\u2502 \u2514\u2500\u2500 tslib@1.9.3  deduped\n\u251c\u2500\u252c @angular/core@6.1.3\n\u2502 \u2514\u2500\u2500 tslib@1.9.3  deduped\n\u251c\u2500\u252c @angular/forms@6.1.3\n\u2502 \u2514\u2500\u2500 tslib@1.9.3  deduped\n\u251c\u2500\u252c @angular/http@6.1.3\n\u2502 \u2514\u2500\u2500 tslib@1.9.3  deduped\n\u251c\u2500\u252c @angular/platform-browser@6.1.3\n\u2502 \u2514\u2500\u2500 tslib@1.9.3  deduped\n\u251c\u2500\u252c @angular/platform-browser-dynamic@6.1.3\n\u2502 \u2514\u2500\u2500 tslib@1.9.3  deduped\n\u251c\u2500\u252c @angular/router@6.1.3\n\u2502 \u2514\u2500\u2500 tslib@1.9.3  deduped\n\u251c\u2500\u252c rxjs@6.2.2\n\u2502 \u2514\u2500\u2500 tslib@1.9.3  deduped\n\u2514\u2500\u252c tslint@5.9.1\n  \u251c\u2500\u2500 tslib@1.9.3  deduped\n  \u2514\u2500\u252c tsutils@2.29.0\n    \u2514\u2500\u2500 tslib@1.9.3  deduped\n\nLooking in the package.json of @angular/animations@6.1.3 (as on the npm registry), shows the tslib dependency:\njson\n\"dependencies\": {\n    \"tslib\": \"^1.9.0\"\n},\nConclusion\nFollowing this trail of manually adding this, only gives us the next package error. And the next, and the next, etc.\nI believe pnpm is not solving the dependencies of dependencies (and probably even n-deeper) in a rightful way. Though, I have no idea how it does resolve this atm.. ",
    "JasonGoemaat": "I'm no expert at package management, but if in the package @ngools/webpack/6.2.5/webpack@4.20.2/node_modules/@ngtools/webpack there is a src/ngtools_api.js file that does this:\ncompilerCli = require('@angular/compiler-cli');\n\nShouldn't the package.json for that package have a dependency for @angular/compiler-cli?  Maybe some of the tools don't use dependencies assuming they can find the packages because they are installed elsewhere normally?. ",
    "seangwright": "@JasonGoemaat \n\nShouldn't the package.json for that package have a dependency for @angular/compiler-cli? Maybe some of the tools don't use dependencies assuming they can find the packages because they are installed elsewhere normally?\n\nIt's listed as a devDependency and a peerDependency since the Angular v7 betas, but before that it wasn't listed at all.\n\n\nIncluded in 7.0.1\nhttps://github.com/angular/angular-cli/blob/v7.0.1/packages/ngtools/webpack/package.json\n\n\nMissing in 6.2.7\nhttps://github.com/angular/angular-cli/blob/v6.2.7/packages/ngtools/webpack/package.json. \n\n",
    "marcelcremer": "I just ran into the same issue with Angular 6. From what I understand in this thread, Angular doesn't have correct dependencies set in their packages?\nHow comes that NPM resolves those deps, and pnpm doesn't? If the package.json is wrong, is pnpm aiming to behave the same as npm does?\nI'd love to provide more infos on this if needed, or try to help otherwise if I can :) . Thank you for your answer. I've checked my repository, and shamefully-flatten makes it better. However, with my cli version, #767 hits me, which is caused by an old dependency from the angular cli. \nIt looks like there are too many parties involved, that would need to fix things:\n- angular would need to fix their dependencies (shamefully-flatten workaround available)\n- angular-cli needs to upgrade the webpack-license-plugin (resolving strategy was fixed with https://github.com/xz64/license-webpack-plugin/issues/42), which could take a while\n- webpack needs to fix their resolval strategy (https://github.com/webpack/webpack/issues/5087 and #801)\n- webpack loader problems with symlinks (first post #1262)\n- maybe others...\nNow that I think I understand, that most problems come from the outside, I sadly switched back to npm for angular :-/\nP.S.: Nevertheless, pnpm saves me about 50% time for every build I make for our nodejs-apps with Gitlab-CI. Just wanted to also give some props and <3 to @zkochan and the pnpm contributors. Thank you guys :-). ",
    "bretonio": "At your guys suggestion I overcame this problem with npm ls tslib \u2014 and rxjs in my case \u2014 which returned among other data news of the broken dependency and the version to be installed. Easy peasy. Thanks.. ",
    "flaviut": "Yup, that works great! I read a little more around the internet, and went ahead and followed this procedure:\n\npnpm install enhanced-resolve (with -D depending on the package)\nexamine the next error and see which package is missing\ngoto 1 but use the different package\n\nAfter this, I no longer needed --shamefully-flatten\nEdit: One liner:\nbash\nwhile true; do pnpm install -D $(pnpm start 2>&1 | grep 'Error: Cannot find module' | sed \"s/Error: Cannot find module '\\([a-z.-]\\+\\)'/\\1/g\"); done. ",
    "cesasol": "I don't think this could by a resolved issue, but a really cleaver way to work arround the big issue of resolving node modules.\nSo i created a script and then uploaded as a gist to share. Maybe this could go to the recipes page on the docs.\nhttps://gist.github.com/cesasol/d57731cd767c47eb414a6b0a94714269. ",
    "snowe2010": "still failing :/\n```\n\u276f npm start\n\nproject@0.0.0 start /Users/tylerthrailkill/Documents/dev/code/frontend/project\nng serve --port=9004 --base-href=/ --environment=local\n\n NG Live Development Server is listening on localhost:9004, open your browser on http://localhost:9004/ \nDate: 2018-07-09T15:55:31.474Z\nHash: 58f09da3b62498ff51a3\nTime: 19413ms\nchunk {inline} inline.bundle.js (inline) 3.85 kB [entry] [rendered]\nchunk {main} main.bundle.js (main) 3.88 kB [initial] [rendered]\nchunk {polyfills} polyfills.bundle.js (polyfills) 577 bytes [initial] [rendered]\nchunk {scripts} scripts.bundle.js (scripts) 1.14 MB [initial] [rendered]\nchunk {styles} styles.bundle.js (styles) 2 MB [initial] [rendered]\nchunk {vendor} vendor.bundle.js (vendor) 862 kB [initial] [rendered]\nERROR in node_modules/@types/graphql/subscription/subscribe.d.ts(17,12): error TS2304: Cannot find name 'AsyncIterator'.\nnode_modules/@types/graphql/subscription/subscribe.d.ts(29,12): error TS2304: Cannot find name 'AsyncIterable'.\nnode_modules/apollo-cache-inmemory/lib/inMemoryCache.d.ts(25,35): error TS2314: Generic type 'Query' requires 1 type argument(s).\nnode_modules/apollo-cache-inmemory/lib/inMemoryCache.d.ts(26,41): error TS2314: Generic type 'Fragment' requires 1 type argument(s).\nnode_modules/apollo-cache-inmemory/lib/inMemoryCache.d.ts(27,25): error TS2314: Generic type 'WriteQueryOptions' requires 2 type argument(s).\nnode_modules/apollo-cache-inmemory/lib/inMemoryCache.d.ts(28,28): error TS2314: Generic type 'WriteFragmentOptions' requires 2 type argument(s).\nnode_modules/apollo-client/ApolloClient.d.ts(24,22): error TS2420: Class 'ApolloClient' incorrectly implements interface 'DataProxy'.\n  Property 'writeData' is missing in type 'ApolloClient'.\nnode_modules/apollo-client/ApolloClient.d.ts(41,27): error TS2314: Generic type 'Query' requires 1 type argument(s).\nnode_modules/apollo-client/ApolloClient.d.ts(42,30): error TS2314: Generic type 'Fragment' requires 1 type argument(s).\nnode_modules/apollo-client/ApolloClient.d.ts(43,25): error TS2314: Generic type 'WriteQueryOptions' requires 2 type argument(s).\nnode_modules/apollo-client/ApolloClient.d.ts(44,28): error TS2314: Generic type 'WriteFragmentOptions' requires 2 type argument(s).\nsrc/app/shared/graphql/applicant-demographics.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/applicant-groups-credit-reference-numbers.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/conditions.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/credit-reports.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/current-product.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/decisions.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/document-types.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/document.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/documents.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/fnm-product-identifier.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/ida.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/income-timeline.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/loan-applicant-status.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/loan-data.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/loan-file.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/loan-number.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/loan-summary.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/loan-transaction-summary.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/loan-transaction.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/prequal-letter.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/product-search.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/graphql/selected-product.graphql.ts(1,8): error TS1192: Module '\"/Users/tylerthrailkill/Documents/dev/code/frontend/project/node_modules/@types/graphql/index\"' has no default export.\nsrc/app/shared/services/borrower.service.ts(246,35): error TS2345: Argument of type '{ query: ApplicantGroupNode; variables: { loanTransactionId: string; loanId: string; }; }' is not assignable to parameter of type 'WatchQueryOptions & TypedVariables<{ loanTransactionId: string; loanId: string; }>'.\n  Type '{ query: ApplicantGroupNode; variables: { loanTransactionId: string; loanId: string; }; }' is not assignable to type 'WatchQueryOptions'.\n    Types of property 'query' are incompatible.\n      Type 'ApplicantGroupNode' is not assignable to type 'DocumentNode'.\n        Property 'kind' is missing in type 'ApplicantGroupNode'.\nwebpack: Failed to compile.\n```. ",
    "mgtest42": "What do you think, problems with angular-pnpm related more to pnpm or angular-cli?\n\"pnpm install --shamefully-flatten\" works (partially), but why this flag only required by angular?\nI'm quite long using pnpm, an only now faced such problems. Sometimes there were issues, but nothing so global.\nBut there is another problem. I don't know, does anyone using angular and it's cli. So, I'll describe a little bit for verbose.\nThere's short how-to about adding global styles/scripts: https://medium.com/@davembush/adding-css-and-javascript-to-an-angular-cli-project-2b843a8283f3\nIt works with npm.\nWith pnpm, 'ng serve' doesn't produce any errors, but added styles/scripts don't appear in the final build. I have no idea why.. ",
    "ncoden": "Hi @zkochan \ud83d\udc4b \nWhat is the status of this ?. @zkochan The current implementation affects packages that were not installed by pnpm.\nSee #1368 - \"pnpm import\" moves packages to .ignored. By the way, take a look at our new GitHub templates (the raw files with comments). You can use them for pnpm if you like them \ud83d\ude04 . Yeah, it's really useful. Also we simplified the way we show help in comments, so they look lighter and render better with non-monospace fonts.. Thank you !. ",
    "mamooty": "Thanks @zkochan ! I'll try this later today.. ",
    "zuohuadong": "{\n    \"name\": \"visfit-lite-wechat\",\n    \"version\": \"1.0.0\",\n    \"description\": \"VF-Air wechat API\",\n    \"bin\":\"package/server.js\",\n    \"scripts\": {\n        \"start\": \"ts-node -r tsconfig-paths/register src/server.ts\",\n        \"start:dev\": \"nodemon\",\n        \"start:debug\": \"nodemon --config nodemon-debug.json\",\n        \"check\": \"tslint -p tsconfig.json -c tslint.json\",\n        \"fix\": \"tslint -p tsconfig.json -c tslint.json --fix\"\n    },\n    \"author\": \"duanzeyao\",\n    \"license\": \"MIT\",\n    \"private\": false,\n    \"dependencies\": {\n        \"@nestjs/common\": \"^5.0.0\",\n        \"@nestjs/core\": \"^5.0.0\",\n        \"@nestjs/graphql\": \"^3.0.0\",\n        \"@nestjs/microservices\": \"^5.0.1\",\n        \"@nestjs/passport\": \"^1.0.11\",\n        \"body-parser\": \"^1.18.3\",\n        \"fastify\": \"^1.4.0\",\n        \"fastify-formbody\": \"^2.0.0\",\n        \"fastify-graphql-middleware\": \"^2.1.1\",\n        \"fastify-static\": \"^0.12.0\",\n        \"fastify-xml-body-parser\": \"^1.0.2\",\n        \"graphql\": \"^0.13.2\",\n        \"graphql-tools\": \"^3.0.1\",\n        \"grpc\": \"^1.12.4\",\n        \"jsonwebtoken\": \"^8.3.0\",\n        \"moment\": \"^2.22.2\",\n        \"passport\": \"^0.4.0\",\n        \"passport-http-bearer\": \"^1.0.1\",\n        \"passport-jwt\": \"^4.0.0\",\n        \"reflect-metadata\": \"^0.1.12\",\n        \"rxjs\": \"^6.1.0\"\n    },\n    \"devDependencies\": {\n        \"@nestjs/testing\": \"^5.0.0\",\n        \"@types/body-parser\": \"^1.17.0\",\n        \"@types/graphql\": \"^0.13.1\",\n        \"@types/jsonwebtoken\": \"^7.2.7\",\n        \"@types/node\": \"^10.0.8\",\n        \"@types/passport-jwt\": \"^3.0.1\",\n        \"nodemon\": \"^1.17.4\",\n        \"ts-node\": \"^6.0.3\",\n        \"tsconfig-paths\": \"^3.3.2\",\n        \"tslint\": \"^5.10.0\",\n        \"typescript\": \"^2.8.3\"\n    }\n}\nnode: 10.6.0. @zkochan \npnpm-debug.log\n. ",
    "ChrisBrownie55": "I'm having the same issue when using pnpm, if we could create a pnpmfile.js with hooks as a workaround, for now, that'd be great.. ",
    "debanshu": "I mostly filled in the ones it was complaining about at at the devDependencies level, and it seems to work - I'm using the material template:\njs\n\"devDependencies\": {\n    \"eslint\": \"^4.5.0\",\n    \"eslint-config-synacor\": \"^1.1.0\",\n    \"if-env\": \"^1.0.0\",\n    \"preact-cli\": \"^2.0.0\",\n/* added the following dependencies */\n    \"babel-core\": \"6.26.3\",\n    \"babel-loader\": \"7.1.5\",\n    \"css-loader\": \"0.28.11\",\n    \"ejs-loader\": \"0.3.1\",\n    \"postcss-loader\": \"2.1.6\",\n    \"style-loader\": \"0.18.2\",\n    \"webpack\": \"3.12.0\",\n    \"webpack-dev-server\": \"2.11.3\"\n  }. ",
    "lynamemi": "@pgonzal @nickpape-msft any news on this bug or any ideas for a work around?. I tried the build again (still failing) but it looks like we're on version 2.13.5 anyway. @nickpape-msft do you know if there are plans to bump the version to the one noted above?. @pgonzal odsp-common. ",
    "frontendnote": "@zkochan Thank you, this problem has been solved. \n. ",
    "techieshark": "\nnot looking for a pnpmfile at all if there is no config\n\nThat actually seems fine. I think it'd be good to update the FAQ / docs with a description/example of how one would use the npm config settings to tell pnpm to look in ~/ or a repo's 'tools/`.  \n\n... thought that  pnpmfile was a bad name and wanted something like pnpmconfig instead\n\nMaybe \"pnpmhooks.js\"? (Or is it supposed to be used for general config too?)\n. ",
    "akggang": "we were facing issue with npm install .. i think i raised this issue at wrong place for pnpm.\ni saw your previous closing comment.\nnpm get fetch-retries value is coming as 2. ",
    "jarcane": "The port error is probably something with the express server. I've not encountered that.\nI can however confirm that --force --shamefully-flatten fixes the issue locally. Awesome!\nI haven't been able to work around it on Glitch yet but that's probably down to their automation not allowing me to trigger the install with flags when it restarts an instance. I'll bring that up with them.\nIs there something lumo-cljs can do to fix this issue on their end, to prevent needing the workaround?. I discussed this with @anmonteiro and the issue seems to be a problem between Lumo or CLJS, and the symlinks pnpm makes in the .node_modules dir. Lumo isn't copying over dependencies properly when the target directory is a symlink instead of a normal directory.\nSince this doesn't seem to be pnpm's fault, can probably close this.. ",
    "zenmumbler": "I just ran into this again. I've had to regen or manually edit a whole slew of shrinkwrap files because I was trying out things with verdaccio and then reverted back. My vote definitely goes to using whatever registry I explicitly set in the NPM config.. My 2 cents: I did recently run pnpm install in the root when I should have done pnpm m install and was a bit surprised, but there are valid reasons \u2014 and Yarn begrudgingly allows this as well in their monorepo setup \u2014 to have an actual set of dependencies only for the root, e.g. for builds or deploys or other repo-wide functionality. Not everyone will have this, some have a build package inside the repo for example, but I'm not sure if either setup is more \"default\" than the other, esp. since tooling for JS monorepos is stil relatively new. Yarn also has the luxury of breaking completely from NPM's idioms.. Reading the intro text and the examples make me feel it's a bit contradictory to have install in the root install only on the root, but install in libs will search downward for all packages in libs. Intuitively, I would expect these commands to scan up, not down, though I understand the idea of running a command on a group of packages without mucking about with filtering.. In general, while I sympathise with the issue posted here, the package setups, even/especially(?) for monorepos are fractured to such an extent preventing any setup to be made canonically the \"default\". pnpm's shorthand pnpm m install is short enough, IMO.\nWhat pnpm can do is check for e.g. empty/missing dependency lists in the root package.json and then issuing a \"Did you mean 'pnpm recursive install' instead?\" or some such and not updating the (global) shrinkwrap, as currently it adds a . entry to it that is empty.\nOn the other hand, for a CWD inside a package directory, pnpm install could auto-scope to that package, but should print a notice that it did so in the output. So, my suggestion is sort of a hybrid.. Just my opinion, but please no distinction between lower and uppercase letters. That is, IMCO, the worst aspect of UNIXness. (Cue the people to correct me it's actually POSIX, or GNU, or what have you ;) I will reiterate by questioning again: how is pnpm m i too long? I understand I don't have to use the shortcut-shortcuts, but these things tend to create a theme over time. I may be overreacting, I don't know.\nI also still stand with pnpm install in the root == root only install or warning without actions if the root has no package.json or has one with empty/missing dependencies.. ",
    "jas99": "Hey @zkochan \nDon't work in 2.15.3 either, I tried same couple of months ago and it was not working even then. So I moved back to npm.\nOSX High Sierra 10.13.6. ",
    "mrkishi": "I don't know if it's the same issue, but --global isn't working correctly on Windows either. Packages are being installed to APPDATA even if prefix is set:\n```\n\nnpm bin -g\nC:\\Users\\mrkishi\\scoop\\persist\\nodejs\\bin\npnpm bin -g\nC:\\Users\\mrkishi\\scoop\\persist\\nodejs\\bin\nnpm config get prefix -g\nC:\\Users\\mrkishi\\scoop\\persist\\nodejs\\bin\npnpm config get prefix -g\nC:\\Users\\mrkishi\\scoop\\persist\\nodejs\\bin\npnpm i -g rimraf\nPackages: +12\n++++++++++++\nResolving: total 12, reused 0, downloaded 12, done\n\nC:\\Users\\mrkishi\\AppData\\Roaming\\npm\\pnpm-global\\1:\n+ rimraf 2.6.2\n``. Hi, @zkochan, thank you for the quick reply! I must be missing something -- according to [the docs](https://pnpm.js.org/docs/en/configuring.html)pnpmusesnpmconfiguration, yet I can't getpnpm-prefix` to work either.\n```\n\npnpm --version\n2.16.1\nnpm config get -g pnpm-prefix\nC:\\Users\\mrkishi\\scoop\\persist\\nodejs\\bin\npnpm config get -g pnpm-prefix\nC:\\Users\\mrkishi\\scoop\\persist\\nodejs\\bin\npnpm i -g rimraf\nAlready up-to-date\nResolving: total 12, reused 12, downloaded 0, done\n\nC:\\Users\\mrkishi\\AppData\\Roaming\\npm\\pnpm-global\\1:\n+ rimraf 2.6.2\n```\nShould I be using something other than pnpm config set -g pnpm-prefix 'path'?. @zkochan pnpm doesn't seem to be getting the right prefix for some reason.\n```\n\npnpm config list\n; cli configs\nmetrics-registry = \"https://registry.npmjs.org/\"\nscope = \"\"\nuser-agent = \"npm/6.4.1 node/v10.10.0 win32 x64\"\n\n; userconfig C:\\Users\\mrkishi.npmrc\naccess = \"public\"\n; globalconfig C:\\Users\\mrkishi\\scoop\\persist\\nodejs\\bin\\etc\\npmrc\naccess = \"public\"\npnpm-prefix = \"C:\\Users\\mrkishi\\scoop\\persist\\nodejs\\bin\"\nprefix = \"C:\\Users\\mrkishi\\scoop\\persist\\nodejs\\bin\"\n; ^NOTE: I tried both with and without prefix set as a global\n; builtin config undefined\ncache = \"C:\\Users\\mrkishi\\scoop\\persist\\nodejs\\cache\"\nprefix = \"C:\\Users\\mrkishi\\scoop\\persist\\nodejs\\bin\"\n; node bin location = C:\\Users\\mrkishi\\scoop\\apps\\nodejs\\current\\node.exe\n; cwd = D:\\Projects\\REDACTED\n; HOME = C:\\Users\\mrkishi\n; \"npm config ls -l\" to show all defaults.\n```\nconsole.log(conf.get('prefix'))\n// C:\\Users\\mrkishi\\scoop\\apps\\nodejs\\current. @ExE-Boss I just installed it:\n```\n\nnpm i -g pnpm\nC:\\Users\\mrkishi\\scoop\\persist\\nodejs\\bin\\pnpm -> C:\\Users\\mrkishi\\scoop\\persist\\nodejs\\bin\\node_modules\\pnpm\\lib\\bin\\pnpm.js\nC:\\Users\\mrkishi\\scoop\\persist\\nodejs\\bin\\pnpx -> C:\\Users\\mrkishi\\scoop\\persist\\nodejs\\bin\\node_modules\\pnpm\\lib\\bin\\pnpx.js\n+ pnpm@2.16.1\npnpm --version\n2.16.1\n```. \n",
    "Swoorup": "same issue here. ",
    "tauruswang": "unset http_proxy\nunset https_proxy\nseem works ? why deos it not work with proxy ?  i am in China, because GWF will block many connection, so have to use proxy .... ",
    "tzinmein": "Exact same issue, except I'm using NVM.\nERROR\u2009 ENOENT: no such file or directory, open '/Users/tzinmein/.nvm/versions/node/v8.12.0/pnpm-global/1/1/package.json'. Perfect, thank you!. ",
    "tomcon": "This is quite important and I'm still getting this error \nsurprised it wasn't dealt with in 2.17.5. pnpm install appears to be hanging on windows just after upgrading to this release\nnode -v (unchanged) v10.11.0. @vjpr every single pnpm cli command just sits there, cursor blinking, no msgs at all\ncannot locate a pnpm-debug.log\nthis works: \npnpm -v\n2.17.8. must have been a local machine issue .... restarted - seems ok\nweirdly upon restart:\npnpm install idb failed, hung again\nbut \npnpm install idb --reporter ndjson\nworked \nUPDATE:\nWas still a problem (always had to append --reporter ndjson for it to work) but \nnpm install -g pnpm fixed it\n. ",
    "Abhiraj-Tulsyan": "Hey there\nI would like to take this issue. I am a beginner in open source and want to do contribute something.\nA little guide to the solution would be great.Though I was thinking of using npm-check module.\nThanks . ",
    "julian-ayu": "I'm also encountering this issue on 2.25.4. The optionalDependencies workaround worked for me.\nhttps://github.com/pnpm/pnpm/issues/1384#issuecomment-451136397. ",
    "pomek": "I forgot to mention about my Node's and npm's versions:\nbash\n$ node -v\nv10.10.0\n$ npm -v\n6.4.1. node /Users/pomek/Projects/ckeditor/pnpm/packages/pnpm/lib/pnpm.js recursive install won't work. But I found this file inside bin/ directory which is inside the lib/.\nbash\nnode /Users/pomek/Projects/ckeditor/pnpm/packages/pnpm/lib/bin/pnpm.js\nI am checking how it works.. Because you helped resolve my issue, I would like to close the issue. Thanks for the helping!. ",
    "mdrohmann": "Ok.\nI added a regression test to packages/pnpm/test/monorepo. Does that suffice?  There are other tests that check for the correct topological order already and they still pass with my change.  So, IMO it should be okay.\nHowever, when writing the test, I noticed however, that the 'graph-sequencer' package is also used in packages/headless/src/runDependenciesScripts.ts, packages/supi/src/rebuild/index.ts and packages/supi/src/install/index.ts.  I am not sure if these files need changes too.  In the regression test, I test pnpm install and pnpm recursive test and in both times, the chunks are computed by sortPackage function that I fixed.... I think that I fixed it.  A code line that I used for debugging made it into the pull request... The test from my last pull request actually caught that mistake.... Okay.  I will remove 'Regression:'. ",
    "ayan4m1": "Pretty sure node-gyp is still requiring Python 2, as referenced here and here and here and here.\nI cannot reproduce your issue with Windows 10.0.17134, Node 10.12.0, and Python 2.7.. But your error indicates that the Python 3 interpreter is being called during node-gyp build. Changing your %PATH% around should resolve the issue.. ",
    "baywet": "Thanks for double-checking, I do have Python 2 installed as well.. upgraded pnpm today to retry, cleared my shrinkwrap and node modules, retried and it works fine now even though environment variables still point to 3.7. Thanks for the help!. ",
    "adamhonen": "\n...or install babel-runtime as a dependency\nThe issue is that dataframe-js requires babel-runtime but babel-runtime is not in prod dependencies of dataframe-js, so seems like a bug in dataframe-js.\nIt works with flat node_modules because babel-runtime is a dependency of babel-polyfill which is a prod dependency, so it is hoisted to the top of node_modules\n\nRight....\nI now see the dataframe-js project have this issue: https://github.com/Gmousse/dataframe-js/issues/63. @zkochan as this seems to be a bug in dataframe-js, is it OK, if I close this issue?\nI'm not sure what you usually do with such cases...\nPersonally I ended up adding the babel-runtime dependency in my module to overcome this, which worked just fine.. ",
    "plesiecki": "Oh sorry I forgot to mention that it happens on 'clean' repo without any shrinkwrap.yaml files. Yep, no node_modules before and after pnpm i. Same with shrinkwrap.yaml\nWell, no, I was wrong. node_modules and shrinkwrap.yaml also node_modules/.shrinkwrap.yaml are created after pnpm i. Should I create repro-repo?. Cool. I will give it a try. I'm happy to test out pre-release version if you will. Magnificent work. Thanks. Peace!. Now I noticed pnpm outdated doesn't work if you don't have outdated dep from dependencies. Looks like devDependencies are not taken into account. In other words outdated works only if you have outdated dependency from dependencies.\nPlease tell me if you need repro.. Steps to reproduce:\n```bash\ninside empty directory\npnpm init\npnpm i -D camelcase@4.0.0 #installing devDep, 5.0 is the latest version\npnpm outdated #no output\npnpm rm camelcase\npnpm i camelcase@4.0.0 #installing same dep but as regular dependency\npnpm outdated #this time it gives an output \n```\n. ",
    "morganfree": "I have a package.json file in the root of the monorepo with its own devDependencies. When I type pnpm install I expect it will install modules for the root only - similar as pnpm install some-package will install some-package to the root only. The proposed change does not seem to be coherent with other commands.\n\nWe should also consider external tools that work with pnpm. External tools (such as CI, Renovate, etc.) wouldn't have to know if a repository is a monorepo, just run pnpm install and everything will just work.\n\nI think this is a place where the npm scripts should be used and customised, e.g. default install overwrite. Default commands' behaviour should be coherent.. I have the same issue with pnpm. None of the workarounds (fresh node_modules installation, installing rxjs-compat, downgrading list-staged version or switching pnpm version) has worked for me. What has worked for me is installing deps with bare npm.\nVersions:\n-  lint-staged: 8.0.5 (tried with 7)\n- husky: 1.2.0\n- pnpm: 2.18.2 (tried with 2.15.3 and 2.19.2)\n. Another workaround which has worked for me - installing rxjs explicitly.. Yes, I ran pnpm i -D rxjs and the lint-staged script worked.\npackage.json after pnpm install:\n{\n  \"name\": \"lint-staged-416\",\n  \"version\": \"0.1.0\",\n  \"devDependencies\": {\n    \"husky\": \"^1.1.4\",\n    \"lint-staged\": \"^8.0.5\",\n    \"rxjs\": \"^6.3.3\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"*.js\": [\n      \"echo\"\n    ]\n  }\n}. Looks good. Thank you for a very quick action on this.. ",
    "qlonik": "Could you point me to where binstubs are generated? Maybe I'll look into it if I will have time.. ",
    "arcanis": "Ohh I actually saw these files, but I missed that node_modules/.registry.npmjs.org/@arcanis/trash-react15/1.0.1/node_modules/ also had symlinks for react and react-dom, my bad \ud83d\udc4d \nOne question you might be able to answer (I'm trying to build a repro to check it by myself but it's a bit convoluted \ud83d\ude05): does pnpm support multiple peer dependencies? For example, let's say I have this:\n\nA depends on B, C\nB has a dependency on D and E@1.0.0\nC has a dependency on D and E@2.0.0\nD has a peer dependency on E\n\nWill the tree generated by pnpm be able to properly give E@1.0.0 to the version of D used by the B branch, and E@2.0.0 to the version of D used by the C branch?. Awesome \ud83d\udc4d . @zkochan not in the plans anymore?. That's interesting, I wondered in the past whether this case happened in the wild - two conflicting binaries by two different packages. Well, now it apparently does \ud83d\ude04\nI'd probably name this field something like linkBin (bin sounds a bit too generic), but I wonder if maybe that's not a bug that should be solved by webpack ... as far as I know the behavior is currently unspecified, so it's no wonder it doesn't work really well everywhere. For all we know it could even work in npm only because of how the filesystem sort the results of readdir \ud83d\ude15\ncc @sokra. I don't know for pnpm, but for Yarn it would complexify the logic quite a bit, since it essentially means that a node of the dependency tree can have multiple parents (one for each package from where it obtains peer dependencies), making it a graph. Enforcing the peers to be declared at each level of the tree solves that neatly.\nOverall we've been burned in the past by leaky behaviors, so I'm supportive of enforcing strictness even in places where we don't see an immediate benefit. My two cents \ud83d\ude42 . ",
    "evanleck": "@wmertens in my experience, removing both is necessary after changing your pnpmfile.js. I'm not sure if that's \"correct\", but it seems to work. I kind of agree that a simpler way to re-evaluate dependencies would be nice. I wonder if pnpm rebuild does that... I haven't used that command with npm before.. ",
    "sokra": "All these package export different named binaries. i. e. the binary of webpack-cli is registered on the webpack-cli name. There is no conflict.. ",
    "kaylangan": "I'm a Program Manager on Azure Pipelines. Let me know if you have any questions or suggestions. I'm happy to help!. ",
    "jrz": "Actually on AFPS, it does not work.\nMac cp doesn't support --reflink\nThe suitable option for mac is:\n-c    copy files using clonefile(2)\n. As an option clonefile instead of reflink can be used, as this is what it's called, and we don't need to do platform detection.\nSmart stuff should be done in auto: platform detection in addition to the hardlink check.. ",
    "dschnare": "No. Separate shrinkwrap file in each package.\nOn Fri, Nov 30, 2018, 1:54 PM Zoltan Kochan <notifications@github.com wrote:\n\nDo you use a shared shrinkwrap.yaml? I mean, do you use the\nshared-workspace-shrinkwrap=true config?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pnpm/pnpm/issues/1525#issuecomment-443302943, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA2hta5vcfNjOrgQX0kuRU9bDlokO8z5ks5u0X7ngaJpZM4Y71e5\n.\n. \n",
    "stevefan1999-personal": "@zkochan Oh, so pnpm server is not a npm proxy :thinking: \nI always thought it was npm-proxy-as-a-service, wasn't aware that it just tells you where the local store package path was only, if you \"fetch\" a package so it is never a remote service.\nAlright :man_shrugging: I could really use a proper npm proxy then.. ",
    "kevyworks": "Hey @aleclarson, @zkochan: https://gist.github.com/kevyworks/f3efa99fa315f019bc57d26a8e498917. ",
    "DennisD2": "Hi, \nof course I tried it with npm as I wrote ('This works with no issue for npm'). You mean you do use the env variable SASS_BINARY_SITE  and a prebuild Node Sass and this works in your environment?\nDennis\n. ",
    "jpickwell": "@jhabdas,\n* Yarn yarn.lock. +1 to pnpm-lock.yml. ",
    "SkReD": "Maybe your case is fit to common cases, described in FAQ\nhttps://pnpm.js.org/docs/en/faq.html#pnpm-does-not-work-with-your-project-here. ",
    "ssimpo": "Okay, thanks.\nIn that case, probably worth closing this issue as already covered in #855 and #1127.. ",
    "dzearing": "@thelarkinn fyi, not sure where the error is here, but trying to upgrade to the latest webpack is hitting some serious problems with pnpm. Also @kenotron @cliffkoh @jdhuntington fyi\n. Hmm. Not reproing this morning on Windows with the latest webpack patch. Going to test again on Mac.. 4.29.5 seems to work today, 4.29.4 did not. Not sure why. Closing issue.... ",
    "marcobusemann": "Actually tried to find the place where the path is transformed but had no luck. If some one may point me to the relevant code, i can do a pull request.. ",
    "sodatea": "Ah I think I just found the culprit.\nIt's not the directory structure, but the exclamation mark in the path (@babel!core) conflicting with webpack loader syntax.\nShould be a duplicate of https://github.com/pnpm/pnpm/issues/1601\nJust tested with pnpm@next-major and it works perfectly fine.\nNow the question becomes: is there any way (such as a command line argument for pnpm install) to circumvent this issue in pnpm v2?. I would love to make it work without flattened directory structure.\nBut it is mostly a webpack issue: webpack seems to have been using a different resolving algorithm for loaders. In the case of Vue CLI we utilized the resolveLoader.modules  option to make sure a nested depended loader can still be found (e.g. https://github.com/vuejs/vue-cli/blob/dev/packages/%40vue/cli-plugin-babel/index.js#L24). But this trick does not work well with pnpm and I've no idea how to fix it.. ",
    "jeremy-coleman": "great info, thank you. I also had a couple other thoughts , 1) to just use a global like __pnpm.pkgName , as in import 'react' from __pnpm.React , which would also allow for versioning if need be. or 2) just open vscode inside the pnpm store and create a workspace lol. ",
    "HGZwebdesign": "Hello,\nI think I encountered similar problem on Macpnpm i check-types-mini with pnpm v2.25.7 throws an error:\nEEXIST: file already exists, link '..../.pnpm-store/2/registry.npmjs.org/check-types-mini/5.7.8/node_modules/check-types-mini/CHANGELOG.md' -> '....../<myProject>/node_modules/.registry.npmjs.org/check-types-mini/5.7.8/node_modules/_tmp_6508_c5ca9eec4fb492bde4b2381954df9525/CHANGELOG.md'\nnode: v8.10.0\nMacOS: 10.14.3. ",
    "wbern": "I'm having the same issue. Really annoying.. @octogonz. Got you. Closing this one as I feel it's been contemplated on plenty already.. ",
    "farfromrefug": "@zkochan you need to do npm install -g nativescript.\nBut honestly would install too much as it is a mobile network env.\nI think seeing that we are using shamefully-flatten you should be able just to run webpack by doing ./node_modules/.bin/webpack --env.android within the demo_vue folder and see the error.\nThansk for the article will read it. Seems like i understood it right.And ansi-styles is not the right linked one.. ",
    "teehemkay": "node2nix is the easiest way to install \"global\" npm packages meant to work as command line tools.\nDue to the way Nix works, the whole process is a little bit involved. The author of the node2nix tool wrote a blog post explaining the process.\nnode2nix does use the pnpm tarball but at some point during the installation, node2nix runs roughly the command below to ensure that the npm normal installation process is performed.\nsh\nnpm --nodedir=<some path> --production install\nThis is to ensure, for example, that the node_modules/.bin folder of the package is correctly created. If that folder exists, node2nix will symlink the executable scripts in that folder to the proper location for them to work with Nix. This is the whole point of the installation.\nEven thought the pnpm tarball already include all the right bits, they're not in the \"standard\" location (node_modules/.bin) expected by node2nix, that\u2019s why we need to run the npm install below. We could of course special-case the installation of pnpm but I'd rather not, if at all possible. \nNow, even though the npm documentation claims that \n\nWith the --production flag (or when the NODE_ENV environment variable is set to production), npm will not install modules listed in devDependencies\n\nnpm still errors out complaining about the use of link: in the @pnpm/assert-project devDependency.\nThat may very well be a bug in npm.\nBut, since link: is not really \"standard\", I thought that maybe it would be easier to just use the standard file: protocol for pnpm devDependencies.\nI hope this answers your question.\n. Thanks, I think that should do the trick.\nI\u2019ll test this solution later today and let you know.. I tested 3.0.1 and the Nix install now works perfectly!.\nThank you so much @zkochan !. Ah ah, I was looking through the latest commits and couldn't find the change.... I'll create a PR on nixos/nixpkgs to upgrade pnpm to v3.0.1.. ",
    "LinusU": ".only probably shouldn't be part of this pr ;)\n. :raised_hands: \n. ",
    "floatdrop": "i am suggesting to use more perfed arr-flatten by @jonschlinkert\n. ",
    "IonicaBizau": "I think you can import Diable from 'diable' as well.\n. "
}